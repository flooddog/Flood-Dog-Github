
/Users/philipchatterton/IoCP/Particle/Flood_Dog/Flood_Dog_6050_Test/target/2.2.0/boron/Flood_Dog_6050_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000016f4  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d5710  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000074  2003e5ec  000d5714  0001e5ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000190  2003e660  2003e660  0002e660  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d5788  000d5788  00025788  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d57b0  000d57b0  000257b0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   00135dd3  00000000  00000000  000257b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00013f92  00000000  00000000  0015b587  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000291f7  00000000  00000000  0016f519  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000029e0  00000000  00000000  00198710  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00006b68  00000000  00000000  0019b0f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00035e9c  00000000  00000000  001a1c58  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0003539b  00000000  00000000  001d7af4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00107ec3  00000000  00000000  0020ce8f  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00007194  00000000  00000000  00314d54  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f001 f9b5 	bl	d539c <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f001 f9bd 	bl	d53b8 <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e5ec 	.word	0x2003e5ec
   d4048:	000d5714 	.word	0x000d5714
   d404c:	2003e660 	.word	0x2003e660
   d4050:	2003e660 	.word	0x2003e660
   d4054:	2003e7ed 	.word	0x2003e7ed

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405a:	4e07      	ldr	r6, [pc, #28]	; (d4078 <module_user_init+0x20>)
   d405c:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
    module_user_init_hook();
   d405e:	f001 f8bb 	bl	d51d8 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4062:	1ba4      	subs	r4, r4, r6
   d4064:	08a4      	lsrs	r4, r4, #2
   d4066:	2500      	movs	r5, #0
   d4068:	42a5      	cmp	r5, r4
   d406a:	d100      	bne.n	d406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d406e:	f856 3b04 	ldr.w	r3, [r6], #4
   d4072:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f7      	b.n	d4068 <module_user_init+0x10>
   d4078:	000d56ec 	.word	0x000d56ec
   d407c:	000d5710 	.word	0x000d5710

000d4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4080:	f000 b838 	b.w	d40f4 <setup>

000d4084 <module_user_loop>:
}

void module_user_loop() {
   d4084:	b508      	push	{r3, lr}
    loop();
   d4086:	f000 f877 	bl	d4178 <loop>
    _post_loop();
}
   d408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d408e:	f001 b85b 	b.w	d5148 <_post_loop>

000d4092 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4092:	f000 bc3b 	b.w	d490c <malloc>

000d4096 <_Znaj>:
   d4096:	f000 bc39 	b.w	d490c <malloc>

000d409a <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409a:	f000 bc3f 	b.w	d491c <free>

000d409e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d409e:	7800      	ldrb	r0, [r0, #0]
   d40a0:	fab0 f080 	clz	r0, r0
   d40a4:	0940      	lsrs	r0, r0, #5
   d40a6:	4770      	bx	lr

000d40a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40a8:	2301      	movs	r3, #1
   d40aa:	7003      	strb	r3, [r0, #0]
   d40ac:	4770      	bx	lr

000d40ae <_ZN5Print5printIsLi0EEEjT_i.part.0>:
    size_t vprintf(bool newline, const char* format, va_list args) __attribute__ ((format(printf, 3, 0)));
};

template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value), int>>
size_t Print::print(T n, int base)
   d40ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
   d40b0:	1e0c      	subs	r4, r1, #0
size_t Print::print(T n, int base)
   d40b2:	4607      	mov	r7, r0
   d40b4:	4616      	mov	r6, r2
        if (n < 0 && base == 10) {
   d40b6:	da0c      	bge.n	d40d2 <_ZN5Print5printIsLi0EEEjT_i.part.0+0x24>
   d40b8:	2a0a      	cmp	r2, #10
   d40ba:	d10a      	bne.n	d40d2 <_ZN5Print5printIsLi0EEEjT_i.part.0+0x24>
            t = print('-');
   d40bc:	212d      	movs	r1, #45	; 0x2d
   d40be:	f000 fea5 	bl	d4e0c <_ZN5Print5printEc>
            val = -n;
   d40c2:	4261      	negs	r1, r4
            t = print('-');
   d40c4:	4605      	mov	r5, r0
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d40c6:	b2f2      	uxtb	r2, r6
   d40c8:	4638      	mov	r0, r7
   d40ca:	f000 feb8 	bl	d4e3e <_ZN5Print11printNumberEmh>
    }
}
   d40ce:	4428      	add	r0, r5
   d40d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            val = n;
   d40d2:	4621      	mov	r1, r4
        size_t t = 0;
   d40d4:	2500      	movs	r5, #0
   d40d6:	e7f6      	b.n	d40c6 <_ZN5Print5printIsLi0EEEjT_i.part.0+0x18>

000d40d8 <_Z9toggleLedv>:
int16_t gx, gy, gz;


bool ledState = false;
void toggleLed() {
    ledState = !ledState;
   d40d8:	4b04      	ldr	r3, [pc, #16]	; (d40ec <_Z9toggleLedv+0x14>)
   d40da:	7819      	ldrb	r1, [r3, #0]
   d40dc:	f081 0101 	eor.w	r1, r1, #1
   d40e0:	7019      	strb	r1, [r3, #0]
    digitalWrite(ledPin, ledState);
   d40e2:	4b03      	ldr	r3, [pc, #12]	; (d40f0 <_Z9toggleLedv+0x18>)
   d40e4:	8818      	ldrh	r0, [r3, #0]
   d40e6:	f001 b8f8 	b.w	d52da <digitalWrite>
   d40ea:	bf00      	nop
   d40ec:	2003e67c 	.word	0x2003e67c
   d40f0:	2003e5ec 	.word	0x2003e5ec

000d40f4 <setup>:
}

void setup() {
   d40f4:	b510      	push	{r4, lr}
    pinMode(ledPin, OUTPUT);
   d40f6:	4b1a      	ldr	r3, [pc, #104]	; (d4160 <setup+0x6c>)
   d40f8:	2101      	movs	r1, #1
   d40fa:	8818      	ldrh	r0, [r3, #0]
   d40fc:	f001 f8dc 	bl	d52b8 <pinMode>

    Wire.begin();
   d4100:	f001 f91e 	bl	d5340 <_Z19__fetch_global_Wirev>
   d4104:	f000 fcee 	bl	d4ae4 <_ZN7TwoWire5beginEv>
    Serial.begin(9600);
   d4108:	f000 ffd6 	bl	d50b8 <_Z16_fetch_usbserialv>
   d410c:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d4110:	f000 ffc6 	bl	d50a0 <_ZN9USBSerial5beginEl>
    // you enough time to start capturing the data when you are ready instead of just spewing data to the UART.
    //
    // So, open a serial connection using something like:
    // screen /dev/tty.usbmodem1411 9600
    // 
    while(!Serial.available()) SPARK_WLAN_Loop();
   d4114:	f000 ffd0 	bl	d50b8 <_Z16_fetch_usbserialv>
   d4118:	6803      	ldr	r3, [r0, #0]
   d411a:	691b      	ldr	r3, [r3, #16]
   d411c:	4798      	blx	r3
   d411e:	b910      	cbnz	r0, d4126 <setup+0x32>

/**
 * The old method
 */
void SPARK_WLAN_Loop(void) __attribute__ ((deprecated("Please use Particle.process() instead.")));
inline void SPARK_WLAN_Loop(void) { spark_process(); }
   d4120:	f000 fb84 	bl	d482c <spark_process>
   d4124:	e7f6      	b.n	d4114 <setup+0x20>
    // SPARK_WLAN_Loop();
    
    Serial.println("Initializing I2C devices...");
   d4126:	f000 ffc7 	bl	d50b8 <_Z16_fetch_usbserialv>
   d412a:	490e      	ldr	r1, [pc, #56]	; (d4164 <setup+0x70>)
   d412c:	f000 fe7d 	bl	d4e2a <_ZN5Print7printlnEPKc>
    accelgyro.initialize();
   d4130:	480d      	ldr	r0, [pc, #52]	; (d4168 <setup+0x74>)
   d4132:	f000 fa00 	bl	d4536 <_ZN7MPU605010initializeEv>

    // Cerify the connection:
    Serial.println("Testing device connections...");
   d4136:	f000 ffbf 	bl	d50b8 <_Z16_fetch_usbserialv>
   d413a:	490c      	ldr	r1, [pc, #48]	; (d416c <setup+0x78>)
   d413c:	f000 fe75 	bl	d4e2a <_ZN5Print7printlnEPKc>
    Serial.println(accelgyro.testConnection() ? "MPU6050 connection successful" : "MPU6050 connection failed");
   d4140:	f000 ffba 	bl	d50b8 <_Z16_fetch_usbserialv>
   d4144:	4604      	mov	r4, r0
   d4146:	4808      	ldr	r0, [pc, #32]	; (d4168 <setup+0x74>)
   d4148:	f000 fa1c 	bl	d4584 <_ZN7MPU605014testConnectionEv>
   d414c:	4a08      	ldr	r2, [pc, #32]	; (d4170 <setup+0x7c>)
   d414e:	4909      	ldr	r1, [pc, #36]	; (d4174 <setup+0x80>)
   d4150:	2800      	cmp	r0, #0
   d4152:	bf18      	it	ne
   d4154:	4611      	movne	r1, r2
   d4156:	4620      	mov	r0, r4
    
}
   d4158:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Serial.println(accelgyro.testConnection() ? "MPU6050 connection successful" : "MPU6050 connection failed");
   d415c:	f000 be65 	b.w	d4e2a <_ZN5Print7printlnEPKc>
   d4160:	2003e5ec 	.word	0x2003e5ec
   d4164:	000d5538 	.word	0x000d5538
   d4168:	2003e660 	.word	0x2003e660
   d416c:	000d5554 	.word	0x000d5554
   d4170:	000d5500 	.word	0x000d5500
   d4174:	000d551e 	.word	0x000d551e

000d4178 <loop>:

void loop() {
   d4178:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    // read raw accel/gyro measurements from device
    accelgyro.getMotion6(&ax, &ay, &az, &gx, &gy, &gz);
   d417c:	f8df 80e8 	ldr.w	r8, [pc, #232]	; d4268 <loop+0xf0>
   d4180:	f8df 90e8 	ldr.w	r9, [pc, #232]	; d426c <loop+0xf4>
   d4184:	4c31      	ldr	r4, [pc, #196]	; (d424c <loop+0xd4>)
   d4186:	4d32      	ldr	r5, [pc, #200]	; (d4250 <loop+0xd8>)
   d4188:	4e32      	ldr	r6, [pc, #200]	; (d4254 <loop+0xdc>)
   d418a:	4f33      	ldr	r7, [pc, #204]	; (d4258 <loop+0xe0>)
   d418c:	4833      	ldr	r0, [pc, #204]	; (d425c <loop+0xe4>)
void loop() {
   d418e:	b085      	sub	sp, #20
    accelgyro.getMotion6(&ax, &ay, &az, &gx, &gy, &gz);
   d4190:	4643      	mov	r3, r8
   d4192:	464a      	mov	r2, r9
   d4194:	4621      	mov	r1, r4
   d4196:	9502      	str	r5, [sp, #8]
   d4198:	9601      	str	r6, [sp, #4]
   d419a:	9700      	str	r7, [sp, #0]
   d419c:	f000 f986 	bl	d44ac <_ZN7MPU605010getMotion6EPsS0_S0_S0_S0_S0_>
    Serial.print("a/g:\t");
   d41a0:	f000 ff8a 	bl	d50b8 <_Z16_fetch_usbserialv>
   d41a4:	492e      	ldr	r1, [pc, #184]	; (d4260 <loop+0xe8>)
   d41a6:	f000 fe2d 	bl	d4e04 <_ZN5Print5printEPKc>
    Serial.print(ax); Serial.print("\t");
   d41aa:	f000 ff85 	bl	d50b8 <_Z16_fetch_usbserialv>
size_t Print::print(T n, int base)
   d41ae:	f9b4 1000 	ldrsh.w	r1, [r4]
   d41b2:	4c2c      	ldr	r4, [pc, #176]	; (d4264 <loop+0xec>)
   d41b4:	220a      	movs	r2, #10
   d41b6:	f7ff ff7a 	bl	d40ae <_ZN5Print5printIsLi0EEEjT_i.part.0>
   d41ba:	f000 ff7d 	bl	d50b8 <_Z16_fetch_usbserialv>
   d41be:	4621      	mov	r1, r4
   d41c0:	f000 fe20 	bl	d4e04 <_ZN5Print5printEPKc>
    Serial.print(ay); Serial.print("\t");
   d41c4:	f000 ff78 	bl	d50b8 <_Z16_fetch_usbserialv>
   d41c8:	220a      	movs	r2, #10
   d41ca:	f9b9 1000 	ldrsh.w	r1, [r9]
   d41ce:	f7ff ff6e 	bl	d40ae <_ZN5Print5printIsLi0EEEjT_i.part.0>
   d41d2:	f000 ff71 	bl	d50b8 <_Z16_fetch_usbserialv>
   d41d6:	4621      	mov	r1, r4
   d41d8:	f000 fe14 	bl	d4e04 <_ZN5Print5printEPKc>
    Serial.print(az); Serial.print("\t");
   d41dc:	f000 ff6c 	bl	d50b8 <_Z16_fetch_usbserialv>
   d41e0:	220a      	movs	r2, #10
   d41e2:	f9b8 1000 	ldrsh.w	r1, [r8]
   d41e6:	f7ff ff62 	bl	d40ae <_ZN5Print5printIsLi0EEEjT_i.part.0>
   d41ea:	f000 ff65 	bl	d50b8 <_Z16_fetch_usbserialv>
   d41ee:	4621      	mov	r1, r4
   d41f0:	f000 fe08 	bl	d4e04 <_ZN5Print5printEPKc>
    Serial.print(gx); Serial.print("\t");
   d41f4:	f000 ff60 	bl	d50b8 <_Z16_fetch_usbserialv>
   d41f8:	220a      	movs	r2, #10
   d41fa:	f9b7 1000 	ldrsh.w	r1, [r7]
   d41fe:	f7ff ff56 	bl	d40ae <_ZN5Print5printIsLi0EEEjT_i.part.0>
   d4202:	f000 ff59 	bl	d50b8 <_Z16_fetch_usbserialv>
   d4206:	4621      	mov	r1, r4
   d4208:	f000 fdfc 	bl	d4e04 <_ZN5Print5printEPKc>
    Serial.print(gy); Serial.print("\t");
   d420c:	f000 ff54 	bl	d50b8 <_Z16_fetch_usbserialv>
   d4210:	220a      	movs	r2, #10
   d4212:	f9b6 1000 	ldrsh.w	r1, [r6]
   d4216:	f7ff ff4a 	bl	d40ae <_ZN5Print5printIsLi0EEEjT_i.part.0>
   d421a:	f000 ff4d 	bl	d50b8 <_Z16_fetch_usbserialv>
   d421e:	4621      	mov	r1, r4
   d4220:	f000 fdf0 	bl	d4e04 <_ZN5Print5printEPKc>
    Serial.println(gz);
   d4224:	f000 ff48 	bl	d50b8 <_Z16_fetch_usbserialv>
   d4228:	f9b5 1000 	ldrsh.w	r1, [r5]
   d422c:	220a      	movs	r2, #10
   d422e:	4604      	mov	r4, r0
   d4230:	f7ff ff3d 	bl	d40ae <_ZN5Print5printIsLi0EEEjT_i.part.0>
        n += println();
   d4234:	4620      	mov	r0, r4
   d4236:	f000 fdec 	bl	d4e12 <_ZN5Print7printlnEv>
    
    toggleLed();
   d423a:	f7ff ff4d 	bl	d40d8 <_Z9toggleLedv>
    
    delay(1000);
   d423e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
}
   d4242:	b005      	add	sp, #20
   d4244:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    delay(1000);
   d4248:	f000 bb78 	b.w	d493c <delay>
   d424c:	2003e670 	.word	0x2003e670
   d4250:	2003e67a 	.word	0x2003e67a
   d4254:	2003e678 	.word	0x2003e678
   d4258:	2003e676 	.word	0x2003e676
   d425c:	2003e660 	.word	0x2003e660
   d4260:	000d5572 	.word	0x000d5572
   d4264:	000d5576 	.word	0x000d5576
   d4268:	2003e674 	.word	0x2003e674
   d426c:	2003e672 	.word	0x2003e672

000d4270 <_GLOBAL__sub_I_ledPin>:
MPU6050 accelgyro;
   d4270:	4801      	ldr	r0, [pc, #4]	; (d4278 <_GLOBAL__sub_I_ledPin+0x8>)
   d4272:	f000 b901 	b.w	d4478 <_ZN7MPU6050C1Ev>
   d4276:	bf00      	nop
   d4278:	2003e660 	.word	0x2003e660

000d427c <_ZN6I2Cdev9readBytesEhhhPht>:
 * @param length Number of bytes to read
 * @param data Buffer to store read data in
 * @param timeout Optional read timeout in milliseconds (0 to disable, leave off to use default class value in I2Cdev::readTimeout)
 * @return Number of bytes read (-1 indicates failure)
 */
int8_t I2Cdev::readBytes(uint8_t devAddr, uint8_t regAddr, uint8_t length, uint8_t *data, uint16_t timeout) {
   d427c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4280:	4616      	mov	r6, r2
   d4282:	469b      	mov	fp, r3
   d4284:	f8bd 8030 	ldrh.w	r8, [sp, #48]	; 0x30
   d4288:	4607      	mov	r7, r0
   d428a:	468a      	mov	sl, r1

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d428c:	f000 f992 	bl	d45b4 <HAL_Timer_Get_Milli_Seconds>
max (T a, U b) { return ((a)>(b)?(a):(b)); }

template <typename T, typename U>
static inline
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }
   d4290:	2e20      	cmp	r6, #32
   d4292:	4633      	mov	r3, r6
            // Adds official support for repeated start condition, yay!

            // I2C/TWI subsystem uses internal buffer that breaks with large data requests
            // so if user requests more than BUFFER_LENGTH bytes, we have to do it in
            // smaller chunks instead of all at once
            for (uint8_t k = 0; k < length; k += min(length, BUFFER_LENGTH)) {
   d4294:	f04f 0500 	mov.w	r5, #0
   d4298:	bfa8      	it	ge
   d429a:	2320      	movge	r3, #32
   d429c:	4681      	mov	r9, r0
    int8_t count = 0;
   d429e:	462c      	mov	r4, r5
   d42a0:	9301      	str	r3, [sp, #4]
            for (uint8_t k = 0; k < length; k += min(length, BUFFER_LENGTH)) {
   d42a2:	42b5      	cmp	r5, r6
   d42a4:	d23a      	bcs.n	d431c <_ZN6I2Cdev9readBytesEhhhPht+0xa0>
                Wire.beginTransmission(devAddr);
   d42a6:	f001 f84b 	bl	d5340 <_Z19__fetch_global_Wirev>
   d42aa:	4639      	mov	r1, r7
   d42ac:	f000 fc4c 	bl	d4b48 <_ZN7TwoWire17beginTransmissionEh>
                Wire.write(regAddr);
   d42b0:	f001 f846 	bl	d5340 <_Z19__fetch_global_Wirev>
   d42b4:	6803      	ldr	r3, [r0, #0]
   d42b6:	4651      	mov	r1, sl
   d42b8:	689b      	ldr	r3, [r3, #8]
   d42ba:	4798      	blx	r3
                Wire.endTransmission();
   d42bc:	f001 f840 	bl	d5340 <_Z19__fetch_global_Wirev>
   d42c0:	f000 fc4a 	bl	d4b58 <_ZN7TwoWire15endTransmissionEv>
                Wire.beginTransmission(devAddr);
   d42c4:	f001 f83c 	bl	d5340 <_Z19__fetch_global_Wirev>
   d42c8:	4639      	mov	r1, r7
   d42ca:	f000 fc3d 	bl	d4b48 <_ZN7TwoWire17beginTransmissionEh>
                Wire.requestFrom(devAddr, (uint8_t)min(length - k, BUFFER_LENGTH));
   d42ce:	f001 f837 	bl	d5340 <_Z19__fetch_global_Wirev>
   d42d2:	1b72      	subs	r2, r6, r5
   d42d4:	2a20      	cmp	r2, #32
   d42d6:	bfa8      	it	ge
   d42d8:	2220      	movge	r2, #32
   d42da:	b2d2      	uxtb	r2, r2
   d42dc:	4639      	mov	r1, r7
   d42de:	f000 fc30 	bl	d4b42 <_ZN7TwoWire11requestFromEhj>
        
                for (; Wire.available() && (timeout == 0 || millis() - t1 < timeout); count++) {
   d42e2:	f001 f82d 	bl	d5340 <_Z19__fetch_global_Wirev>
   d42e6:	6803      	ldr	r3, [r0, #0]
   d42e8:	691b      	ldr	r3, [r3, #16]
   d42ea:	4798      	blx	r3
   d42ec:	b190      	cbz	r0, d4314 <_ZN6I2Cdev9readBytesEhhhPht+0x98>
   d42ee:	f1b8 0f00 	cmp.w	r8, #0
   d42f2:	d109      	bne.n	d4308 <_ZN6I2Cdev9readBytesEhhhPht+0x8c>
                    data[count] = Wire.read();
   d42f4:	f001 f824 	bl	d5340 <_Z19__fetch_global_Wirev>
   d42f8:	6803      	ldr	r3, [r0, #0]
   d42fa:	695b      	ldr	r3, [r3, #20]
   d42fc:	4798      	blx	r3
   d42fe:	f80b 0004 	strb.w	r0, [fp, r4]
                for (; Wire.available() && (timeout == 0 || millis() - t1 < timeout); count++) {
   d4302:	3401      	adds	r4, #1
   d4304:	b264      	sxtb	r4, r4
   d4306:	e7ec      	b.n	d42e2 <_ZN6I2Cdev9readBytesEhhhPht+0x66>
   d4308:	f000 f954 	bl	d45b4 <HAL_Timer_Get_Milli_Seconds>
   d430c:	eba0 0009 	sub.w	r0, r0, r9
   d4310:	4540      	cmp	r0, r8
   d4312:	d3ef      	bcc.n	d42f4 <_ZN6I2Cdev9readBytesEhhhPht+0x78>
            for (uint8_t k = 0; k < length; k += min(length, BUFFER_LENGTH)) {
   d4314:	9b01      	ldr	r3, [sp, #4]
   d4316:	441d      	add	r5, r3
   d4318:	b2ed      	uxtb	r5, r5
   d431a:	e7c2      	b.n	d42a2 <_ZN6I2Cdev9readBytesEhhhPht+0x26>
        }

    #endif

    // check for timeout
    if (timeout > 0 && millis() - t1 >= timeout && count < length) count = -1; // timeout
   d431c:	f1b8 0f00 	cmp.w	r8, #0
   d4320:	d009      	beq.n	d4336 <_ZN6I2Cdev9readBytesEhhhPht+0xba>
   d4322:	f000 f947 	bl	d45b4 <HAL_Timer_Get_Milli_Seconds>
   d4326:	eba0 0009 	sub.w	r0, r0, r9
   d432a:	4540      	cmp	r0, r8
   d432c:	d303      	bcc.n	d4336 <_ZN6I2Cdev9readBytesEhhhPht+0xba>
   d432e:	42b4      	cmp	r4, r6
   d4330:	bfb8      	it	lt
   d4332:	f04f 34ff 	movlt.w	r4, #4294967295	; 0xffffffff
        Serial.print(count, DEC);
        Serial.println(" read).");
    #endif

    return count;
}
   d4336:	4620      	mov	r0, r4
   d4338:	b003      	add	sp, #12
   d433a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d433e <_ZN6I2Cdev8readByteEhhPht>:
int8_t I2Cdev::readByte(uint8_t devAddr, uint8_t regAddr, uint8_t *data, uint16_t timeout) {
   d433e:	b507      	push	{r0, r1, r2, lr}
    return readBytes(devAddr, regAddr, 1, data, timeout);
   d4340:	9300      	str	r3, [sp, #0]
   d4342:	4613      	mov	r3, r2
   d4344:	2201      	movs	r2, #1
   d4346:	f7ff ff99 	bl	d427c <_ZN6I2Cdev9readBytesEhhhPht>
}
   d434a:	b003      	add	sp, #12
   d434c:	f85d fb04 	ldr.w	pc, [sp], #4

000d4350 <_ZN6I2Cdev8readBitsEhhhhPht>:
int8_t I2Cdev::readBits(uint8_t devAddr, uint8_t regAddr, uint8_t bitStart, uint8_t length, uint8_t *data, uint16_t timeout) {
   d4350:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d4352:	4614      	mov	r4, r2
   d4354:	461d      	mov	r5, r3
    if ((count = readByte(devAddr, regAddr, &b, timeout)) != 0) {
   d4356:	f10d 0207 	add.w	r2, sp, #7
   d435a:	f8bd 301c 	ldrh.w	r3, [sp, #28]
   d435e:	f7ff ffee 	bl	d433e <_ZN6I2Cdev8readByteEhhPht>
   d4362:	b160      	cbz	r0, d437e <_ZN6I2Cdev8readBitsEhhhhPht+0x2e>
        uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);
   d4364:	2201      	movs	r2, #1
   d4366:	fa02 f305 	lsl.w	r3, r2, r5
   d436a:	1b61      	subs	r1, r4, r5
        b &= mask;
   d436c:	f89d 2007 	ldrb.w	r2, [sp, #7]
        uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);
   d4370:	3101      	adds	r1, #1
   d4372:	3b01      	subs	r3, #1
   d4374:	408b      	lsls	r3, r1
        b >>= (bitStart - length + 1);
   d4376:	4013      	ands	r3, r2
   d4378:	9a06      	ldr	r2, [sp, #24]
   d437a:	410b      	asrs	r3, r1
   d437c:	7013      	strb	r3, [r2, #0]
}
   d437e:	b003      	add	sp, #12
   d4380:	bd30      	pop	{r4, r5, pc}

000d4382 <_ZN6I2Cdev10writeBytesEhhhPh>:
 * @param regAddr First register address to write to
 * @param length Number of bytes to write
 * @param data Buffer to copy new data from
 * @return Status of operation (true = success)
 */
bool I2Cdev::writeBytes(uint8_t devAddr, uint8_t regAddr, uint8_t length, uint8_t* data) {
   d4382:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4384:	4607      	mov	r7, r0
   d4386:	4615      	mov	r5, r2
   d4388:	461c      	mov	r4, r3
   d438a:	460e      	mov	r6, r1
        Serial.print(regAddr, HEX);
        Serial.print("...");
    #endif
    uint8_t status = 0;
	#if defined (PARTICLE)
        Wire.beginTransmission(devAddr);
   d438c:	f000 ffd8 	bl	d5340 <_Z19__fetch_global_Wirev>
   d4390:	4639      	mov	r1, r7
   d4392:	f000 fbd9 	bl	d4b48 <_ZN7TwoWire17beginTransmissionEh>
        Wire.write((uint8_t) regAddr); // send address
   d4396:	f000 ffd3 	bl	d5340 <_Z19__fetch_global_Wirev>
   d439a:	6803      	ldr	r3, [r0, #0]
   d439c:	4631      	mov	r1, r6
   d439e:	689b      	ldr	r3, [r3, #8]
   d43a0:	4798      	blx	r3
        Wire.write((uint8_t) regAddr); // send address
    #elif (I2CDEV_IMPLEMENTATION == I2CDEV_BUILTIN_FASTWIRE)
        Fastwire::beginTransmission(devAddr);
        Fastwire::write(regAddr);
    #endif
    for (uint8_t i = 0; i < length; i++) {
   d43a2:	4425      	add	r5, r4
   d43a4:	42ac      	cmp	r4, r5
   d43a6:	d007      	beq.n	d43b8 <_ZN6I2Cdev10writeBytesEhhhPh+0x36>
        #ifdef I2CDEV_SERIAL_DEBUG
            Serial.print(data[i], HEX);
            if (i + 1 < length) Serial.print(" ");
        #endif
		#if defined (PARTICLE)
            Wire.write((uint8_t) data[i]);
   d43a8:	f000 ffca 	bl	d5340 <_Z19__fetch_global_Wirev>
   d43ac:	6803      	ldr	r3, [r0, #0]
   d43ae:	f814 1b01 	ldrb.w	r1, [r4], #1
   d43b2:	689b      	ldr	r3, [r3, #8]
   d43b4:	4798      	blx	r3
    for (uint8_t i = 0; i < length; i++) {
   d43b6:	e7f5      	b.n	d43a4 <_ZN6I2Cdev10writeBytesEhhhPh+0x22>
        #elif (I2CDEV_IMPLEMENTATION == I2CDEV_BUILTIN_FASTWIRE)
            Fastwire::write((uint8_t) data[i]);
        #endif
    }
	#if defined (PARTICLE)
        status = Wire.endTransmission();
   d43b8:	f000 ffc2 	bl	d5340 <_Z19__fetch_global_Wirev>
   d43bc:	f000 fbcc 	bl	d4b58 <_ZN7TwoWire15endTransmissionEv>
    #endif
    #ifdef I2CDEV_SERIAL_DEBUG
        Serial.println(". Done.");
    #endif
    return status == 0;
}
   d43c0:	fab0 f080 	clz	r0, r0
   d43c4:	0940      	lsrs	r0, r0, #5
   d43c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d43c8 <_ZN6I2Cdev9writeByteEhhh>:
bool I2Cdev::writeByte(uint8_t devAddr, uint8_t regAddr, uint8_t data) {
   d43c8:	b507      	push	{r0, r1, r2, lr}
   d43ca:	f88d 2007 	strb.w	r2, [sp, #7]
    return writeBytes(devAddr, regAddr, 1, &data);
   d43ce:	f10d 0307 	add.w	r3, sp, #7
   d43d2:	2201      	movs	r2, #1
   d43d4:	f7ff ffd5 	bl	d4382 <_ZN6I2Cdev10writeBytesEhhhPh>
}
   d43d8:	b003      	add	sp, #12
   d43da:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d43e0 <_ZN6I2Cdev8writeBitEhhhh>:
bool I2Cdev::writeBit(uint8_t devAddr, uint8_t regAddr, uint8_t bitNum, uint8_t data) {
   d43e0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d43e4:	461f      	mov	r7, r3
    readByte(devAddr, regAddr, &b);
   d43e6:	4b0f      	ldr	r3, [pc, #60]	; (d4424 <_ZN6I2Cdev8writeBitEhhhh+0x44>)
bool I2Cdev::writeBit(uint8_t devAddr, uint8_t regAddr, uint8_t bitNum, uint8_t data) {
   d43e8:	4690      	mov	r8, r2
   d43ea:	2401      	movs	r4, #1
    readByte(devAddr, regAddr, &b);
   d43ec:	f10d 0207 	add.w	r2, sp, #7
   d43f0:	881b      	ldrh	r3, [r3, #0]
bool I2Cdev::writeBit(uint8_t devAddr, uint8_t regAddr, uint8_t bitNum, uint8_t data) {
   d43f2:	4605      	mov	r5, r0
   d43f4:	460e      	mov	r6, r1
    readByte(devAddr, regAddr, &b);
   d43f6:	f7ff ffa2 	bl	d433e <_ZN6I2Cdev8readByteEhhPht>
    b = (data != 0) ? (b | (1 << bitNum)) : (b & ~(1 << bitNum));
   d43fa:	fa04 f208 	lsl.w	r2, r4, r8
   d43fe:	b252      	sxtb	r2, r2
   d4400:	f89d 4007 	ldrb.w	r4, [sp, #7]
   d4404:	b157      	cbz	r7, d441c <_ZN6I2Cdev8writeBitEhhhh+0x3c>
   d4406:	4322      	orrs	r2, r4
   d4408:	b2d2      	uxtb	r2, r2
    return writeByte(devAddr, regAddr, b);
   d440a:	4631      	mov	r1, r6
   d440c:	4628      	mov	r0, r5
    b = (data != 0) ? (b | (1 << bitNum)) : (b & ~(1 << bitNum));
   d440e:	f88d 2007 	strb.w	r2, [sp, #7]
    return writeByte(devAddr, regAddr, b);
   d4412:	f7ff ffd9 	bl	d43c8 <_ZN6I2Cdev9writeByteEhhh>
}
   d4416:	b002      	add	sp, #8
   d4418:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b = (data != 0) ? (b | (1 << bitNum)) : (b & ~(1 << bitNum));
   d441c:	ea24 0202 	bic.w	r2, r4, r2
   d4420:	e7f3      	b.n	d440a <_ZN6I2Cdev8writeBitEhhhh+0x2a>
   d4422:	bf00      	nop
   d4424:	2003e5f0 	.word	0x2003e5f0

000d4428 <_ZN6I2Cdev9writeBitsEhhhhh>:
bool I2Cdev::writeBits(uint8_t devAddr, uint8_t regAddr, uint8_t bitStart, uint8_t length, uint8_t data) {
   d4428:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d442a:	461f      	mov	r7, r3
    if (readByte(devAddr, regAddr, &b) != 0) {
   d442c:	4b11      	ldr	r3, [pc, #68]	; (d4474 <_ZN6I2Cdev9writeBitsEhhhhh+0x4c>)
bool I2Cdev::writeBits(uint8_t devAddr, uint8_t regAddr, uint8_t bitStart, uint8_t length, uint8_t data) {
   d442e:	4616      	mov	r6, r2
    if (readByte(devAddr, regAddr, &b) != 0) {
   d4430:	881b      	ldrh	r3, [r3, #0]
   d4432:	f10d 0207 	add.w	r2, sp, #7
bool I2Cdev::writeBits(uint8_t devAddr, uint8_t regAddr, uint8_t bitStart, uint8_t length, uint8_t data) {
   d4436:	4604      	mov	r4, r0
   d4438:	460d      	mov	r5, r1
    if (readByte(devAddr, regAddr, &b) != 0) {
   d443a:	f7ff ff80 	bl	d433e <_ZN6I2Cdev8readByteEhhPht>
   d443e:	b1b8      	cbz	r0, d4470 <_ZN6I2Cdev9writeBitsEhhhhh+0x48>
        uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);
   d4440:	2201      	movs	r2, #1
   d4442:	fa02 f307 	lsl.w	r3, r2, r7
   d4446:	1bf1      	subs	r1, r6, r7
        data <<= (bitStart - length + 1); // shift data into correct position
   d4448:	f89d 2020 	ldrb.w	r2, [sp, #32]
        uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);
   d444c:	3101      	adds	r1, #1
   d444e:	3b01      	subs	r3, #1
   d4450:	408b      	lsls	r3, r1
        data <<= (bitStart - length + 1); // shift data into correct position
   d4452:	fa02 f101 	lsl.w	r1, r2, r1
        b &= ~(mask); // zero all important bits in existing byte
   d4456:	f89d 2007 	ldrb.w	r2, [sp, #7]
        data <<= (bitStart - length + 1); // shift data into correct position
   d445a:	b2c9      	uxtb	r1, r1
        b &= ~(mask); // zero all important bits in existing byte
   d445c:	ea22 0203 	bic.w	r2, r2, r3
        data &= mask; // zero all non-important bits in data
   d4460:	400b      	ands	r3, r1
        b |= data; // combine data with existing byte
   d4462:	431a      	orrs	r2, r3
        return writeByte(devAddr, regAddr, b);
   d4464:	4629      	mov	r1, r5
   d4466:	4620      	mov	r0, r4
        b |= data; // combine data with existing byte
   d4468:	f88d 2007 	strb.w	r2, [sp, #7]
        return writeByte(devAddr, regAddr, b);
   d446c:	f7ff ffac 	bl	d43c8 <_ZN6I2Cdev9writeByteEhhh>
}
   d4470:	b003      	add	sp, #12
   d4472:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4474:	2003e5f0 	.word	0x2003e5f0

000d4478 <_ZN7MPU6050C1Ev>:

/** Default constructor, uses default I2C address.
 * @see MPU6050_DEFAULT_ADDRESS
 */
MPU6050::MPU6050() {
    devAddr = MPU6050_DEFAULT_ADDRESS;
   d4478:	2368      	movs	r3, #104	; 0x68
   d447a:	7003      	strb	r3, [r0, #0]
}
   d447c:	4770      	bx	lr

000d447e <_ZN7MPU605021setFullScaleGyroRangeEh>:
 * @see MPU6050_GYRO_FS_250
 * @see MPU6050_RA_GYRO_CONFIG
 * @see MPU6050_GCONFIG_FS_SEL_BIT
 * @see MPU6050_GCONFIG_FS_SEL_LENGTH
 */
void MPU6050::setFullScaleGyroRange(uint8_t range) {
   d447e:	b507      	push	{r0, r1, r2, lr}
    I2Cdev::writeBits(devAddr, MPU6050_RA_GYRO_CONFIG, MPU6050_GCONFIG_FS_SEL_BIT, MPU6050_GCONFIG_FS_SEL_LENGTH, range);
   d4480:	2302      	movs	r3, #2
   d4482:	7800      	ldrb	r0, [r0, #0]
   d4484:	9100      	str	r1, [sp, #0]
   d4486:	2204      	movs	r2, #4
   d4488:	211b      	movs	r1, #27
   d448a:	f7ff ffcd 	bl	d4428 <_ZN6I2Cdev9writeBitsEhhhhh>
}
   d448e:	b003      	add	sp, #12
   d4490:	f85d fb04 	ldr.w	pc, [sp], #4

000d4494 <_ZN7MPU605022setFullScaleAccelRangeEh>:
}
/** Set full-scale accelerometer range.
 * @param range New full-scale accelerometer range setting
 * @see getFullScaleAccelRange()
 */
void MPU6050::setFullScaleAccelRange(uint8_t range) {
   d4494:	b507      	push	{r0, r1, r2, lr}
    I2Cdev::writeBits(devAddr, MPU6050_RA_ACCEL_CONFIG, MPU6050_ACONFIG_AFS_SEL_BIT, MPU6050_ACONFIG_AFS_SEL_LENGTH, range);
   d4496:	2302      	movs	r3, #2
   d4498:	7800      	ldrb	r0, [r0, #0]
   d449a:	9100      	str	r1, [sp, #0]
   d449c:	2204      	movs	r2, #4
   d449e:	211c      	movs	r1, #28
   d44a0:	f7ff ffc2 	bl	d4428 <_ZN6I2Cdev9writeBitsEhhhhh>
}
   d44a4:	b003      	add	sp, #12
   d44a6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d44ac <_ZN7MPU605010getMotion6EPsS0_S0_S0_S0_S0_>:
 * @param gz 16-bit signed integer container for gyroscope Z-axis value
 * @see getAcceleration()
 * @see getRotation()
 * @see MPU6050_RA_ACCEL_XOUT_H
 */
void MPU6050::getMotion6(int16_t* ax, int16_t* ay, int16_t* az, int16_t* gx, int16_t* gy, int16_t* gz) {
   d44ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d44ae:	4616      	mov	r6, r2
    I2Cdev::readBytes(devAddr, MPU6050_RA_ACCEL_XOUT_H, 14, buffer);
   d44b0:	4a17      	ldr	r2, [pc, #92]	; (d4510 <_ZN7MPU605010getMotion6EPsS0_S0_S0_S0_S0_+0x64>)
void MPU6050::getMotion6(int16_t* ax, int16_t* ay, int16_t* az, int16_t* gx, int16_t* gy, int16_t* gz) {
   d44b2:	461d      	mov	r5, r3
    I2Cdev::readBytes(devAddr, MPU6050_RA_ACCEL_XOUT_H, 14, buffer);
   d44b4:	4603      	mov	r3, r0
void MPU6050::getMotion6(int16_t* ax, int16_t* ay, int16_t* az, int16_t* gx, int16_t* gy, int16_t* gz) {
   d44b6:	4604      	mov	r4, r0
    I2Cdev::readBytes(devAddr, MPU6050_RA_ACCEL_XOUT_H, 14, buffer);
   d44b8:	8812      	ldrh	r2, [r2, #0]
   d44ba:	f813 0b01 	ldrb.w	r0, [r3], #1
   d44be:	9200      	str	r2, [sp, #0]
void MPU6050::getMotion6(int16_t* ax, int16_t* ay, int16_t* az, int16_t* gx, int16_t* gy, int16_t* gz) {
   d44c0:	460f      	mov	r7, r1
    I2Cdev::readBytes(devAddr, MPU6050_RA_ACCEL_XOUT_H, 14, buffer);
   d44c2:	220e      	movs	r2, #14
   d44c4:	213b      	movs	r1, #59	; 0x3b
   d44c6:	f7ff fed9 	bl	d427c <_ZN6I2Cdev9readBytesEhhhPht>
    *ax = (((int16_t)buffer[0]) << 8) | buffer[1];
   d44ca:	7862      	ldrb	r2, [r4, #1]
   d44cc:	78a3      	ldrb	r3, [r4, #2]
   d44ce:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d44d2:	803b      	strh	r3, [r7, #0]
    *ay = (((int16_t)buffer[2]) << 8) | buffer[3];
   d44d4:	78e2      	ldrb	r2, [r4, #3]
   d44d6:	7923      	ldrb	r3, [r4, #4]
   d44d8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d44dc:	8033      	strh	r3, [r6, #0]
    *az = (((int16_t)buffer[4]) << 8) | buffer[5];
   d44de:	7962      	ldrb	r2, [r4, #5]
   d44e0:	79a3      	ldrb	r3, [r4, #6]
   d44e2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d44e6:	802b      	strh	r3, [r5, #0]
    *gx = (((int16_t)buffer[8]) << 8) | buffer[9];
   d44e8:	7a62      	ldrb	r2, [r4, #9]
   d44ea:	7aa3      	ldrb	r3, [r4, #10]
   d44ec:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d44f0:	9a08      	ldr	r2, [sp, #32]
   d44f2:	8013      	strh	r3, [r2, #0]
    *gy = (((int16_t)buffer[10]) << 8) | buffer[11];
   d44f4:	7ae2      	ldrb	r2, [r4, #11]
   d44f6:	7b23      	ldrb	r3, [r4, #12]
   d44f8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d44fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
   d44fe:	8013      	strh	r3, [r2, #0]
    *gz = (((int16_t)buffer[12]) << 8) | buffer[13];
   d4500:	7b62      	ldrb	r2, [r4, #13]
   d4502:	7ba3      	ldrb	r3, [r4, #14]
   d4504:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d4508:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   d450a:	8013      	strh	r3, [r2, #0]
}
   d450c:	b003      	add	sp, #12
   d450e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4510:	2003e5f0 	.word	0x2003e5f0

000d4514 <_ZN7MPU605015setSleepEnabledEb>:
 * @param enabled New sleep mode enabled status
 * @see getSleepEnabled()
 * @see MPU6050_RA_PWR_MGMT_1
 * @see MPU6050_PWR1_SLEEP_BIT
 */
void MPU6050::setSleepEnabled(bool enabled) {
   d4514:	460b      	mov	r3, r1
    I2Cdev::writeBit(devAddr, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_SLEEP_BIT, enabled);
   d4516:	7800      	ldrb	r0, [r0, #0]
   d4518:	2206      	movs	r2, #6
   d451a:	216b      	movs	r1, #107	; 0x6b
   d451c:	f7ff bf60 	b.w	d43e0 <_ZN6I2Cdev8writeBitEhhhh>

000d4520 <_ZN7MPU605014setClockSourceEh>:
 * @see getClockSource()
 * @see MPU6050_RA_PWR_MGMT_1
 * @see MPU6050_PWR1_CLKSEL_BIT
 * @see MPU6050_PWR1_CLKSEL_LENGTH
 */
void MPU6050::setClockSource(uint8_t source) {
   d4520:	b507      	push	{r0, r1, r2, lr}
    I2Cdev::writeBits(devAddr, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_CLKSEL_BIT, MPU6050_PWR1_CLKSEL_LENGTH, source);
   d4522:	2303      	movs	r3, #3
   d4524:	7800      	ldrb	r0, [r0, #0]
   d4526:	9100      	str	r1, [sp, #0]
   d4528:	2202      	movs	r2, #2
   d452a:	216b      	movs	r1, #107	; 0x6b
   d452c:	f7ff ff7c 	bl	d4428 <_ZN6I2Cdev9writeBitsEhhhhh>
}
   d4530:	b003      	add	sp, #12
   d4532:	f85d fb04 	ldr.w	pc, [sp], #4

000d4536 <_ZN7MPU605010initializeEv>:
void MPU6050::initialize() {
   d4536:	b510      	push	{r4, lr}
    setClockSource(MPU6050_CLOCK_PLL_XGYRO);
   d4538:	2101      	movs	r1, #1
void MPU6050::initialize() {
   d453a:	4604      	mov	r4, r0
    setClockSource(MPU6050_CLOCK_PLL_XGYRO);
   d453c:	f7ff fff0 	bl	d4520 <_ZN7MPU605014setClockSourceEh>
    setFullScaleGyroRange(MPU6050_GYRO_FS_250);
   d4540:	4620      	mov	r0, r4
   d4542:	2100      	movs	r1, #0
   d4544:	f7ff ff9b 	bl	d447e <_ZN7MPU605021setFullScaleGyroRangeEh>
    setFullScaleAccelRange(MPU6050_ACCEL_FS_2);
   d4548:	4620      	mov	r0, r4
   d454a:	2100      	movs	r1, #0
   d454c:	f7ff ffa2 	bl	d4494 <_ZN7MPU605022setFullScaleAccelRangeEh>
    setSleepEnabled(false); // thanks to Jack Elston for pointing this one out!
   d4550:	4620      	mov	r0, r4
   d4552:	2100      	movs	r1, #0
}
   d4554:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    setSleepEnabled(false); // thanks to Jack Elston for pointing this one out!
   d4558:	f7ff bfdc 	b.w	d4514 <_ZN7MPU605015setSleepEnabledEb>

000d455c <_ZN7MPU605011getDeviceIDEv>:
 * @return Device ID (6 bits only! should be 0x34)
 * @see MPU6050_RA_WHO_AM_I
 * @see MPU6050_WHO_AM_I_BIT
 * @see MPU6050_WHO_AM_I_LENGTH
 */
uint8_t MPU6050::getDeviceID() {
   d455c:	b513      	push	{r0, r1, r4, lr}
    I2Cdev::readBits(devAddr, MPU6050_RA_WHO_AM_I, MPU6050_WHO_AM_I_BIT, MPU6050_WHO_AM_I_LENGTH, buffer);
   d455e:	4603      	mov	r3, r0
   d4560:	4a07      	ldr	r2, [pc, #28]	; (d4580 <_ZN7MPU605011getDeviceIDEv+0x24>)
uint8_t MPU6050::getDeviceID() {
   d4562:	4604      	mov	r4, r0
    I2Cdev::readBits(devAddr, MPU6050_RA_WHO_AM_I, MPU6050_WHO_AM_I_BIT, MPU6050_WHO_AM_I_LENGTH, buffer);
   d4564:	8812      	ldrh	r2, [r2, #0]
   d4566:	f813 0b01 	ldrb.w	r0, [r3], #1
   d456a:	e9cd 3200 	strd	r3, r2, [sp]
   d456e:	2306      	movs	r3, #6
   d4570:	461a      	mov	r2, r3
   d4572:	2175      	movs	r1, #117	; 0x75
   d4574:	f7ff feec 	bl	d4350 <_ZN6I2Cdev8readBitsEhhhhPht>
    return buffer[0];
}
   d4578:	7860      	ldrb	r0, [r4, #1]
   d457a:	b002      	add	sp, #8
   d457c:	bd10      	pop	{r4, pc}
   d457e:	bf00      	nop
   d4580:	2003e5f0 	.word	0x2003e5f0

000d4584 <_ZN7MPU605014testConnectionEv>:
bool MPU6050::testConnection() {
   d4584:	b508      	push	{r3, lr}
    return getDeviceID() == 0x34;
   d4586:	f7ff ffe9 	bl	d455c <_ZN7MPU605011getDeviceIDEv>
}
   d458a:	f1a0 0334 	sub.w	r3, r0, #52	; 0x34
   d458e:	4258      	negs	r0, r3
   d4590:	4158      	adcs	r0, r3
   d4592:	bd08      	pop	{r3, pc}

000d4594 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4594:	b508      	push	{r3, lr}
   d4596:	4b02      	ldr	r3, [pc, #8]	; (d45a0 <os_mutex_recursive_create+0xc>)
   d4598:	681b      	ldr	r3, [r3, #0]
   d459a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d459c:	9301      	str	r3, [sp, #4]
   d459e:	bd08      	pop	{r3, pc}
   d45a0:	00030248 	.word	0x00030248

000d45a4 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d45a4:	b508      	push	{r3, lr}
   d45a6:	4b02      	ldr	r3, [pc, #8]	; (d45b0 <HAL_RNG_GetRandomNumber+0xc>)
   d45a8:	681b      	ldr	r3, [r3, #0]
   d45aa:	685b      	ldr	r3, [r3, #4]
   d45ac:	9301      	str	r3, [sp, #4]
   d45ae:	bd08      	pop	{r3, pc}
   d45b0:	00030218 	.word	0x00030218

000d45b4 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d45b4:	b508      	push	{r3, lr}
   d45b6:	4b02      	ldr	r3, [pc, #8]	; (d45c0 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d45b8:	681b      	ldr	r3, [r3, #0]
   d45ba:	695b      	ldr	r3, [r3, #20]
   d45bc:	9301      	str	r3, [sp, #4]
   d45be:	bd08      	pop	{r3, pc}
   d45c0:	00030218 	.word	0x00030218

000d45c4 <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d45c4:	b508      	push	{r3, lr}
   d45c6:	4b02      	ldr	r3, [pc, #8]	; (d45d0 <HAL_Pin_Mode+0xc>)
   d45c8:	681b      	ldr	r3, [r3, #0]
   d45ca:	689b      	ldr	r3, [r3, #8]
   d45cc:	9301      	str	r3, [sp, #4]
   d45ce:	bd08      	pop	{r3, pc}
   d45d0:	0003022c 	.word	0x0003022c

000d45d4 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d45d4:	b508      	push	{r3, lr}
   d45d6:	4b02      	ldr	r3, [pc, #8]	; (d45e0 <HAL_Get_Pin_Mode+0xc>)
   d45d8:	681b      	ldr	r3, [r3, #0]
   d45da:	68db      	ldr	r3, [r3, #12]
   d45dc:	9301      	str	r3, [sp, #4]
   d45de:	bd08      	pop	{r3, pc}
   d45e0:	0003022c 	.word	0x0003022c

000d45e4 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d45e4:	b508      	push	{r3, lr}
   d45e6:	4b02      	ldr	r3, [pc, #8]	; (d45f0 <HAL_GPIO_Write+0xc>)
   d45e8:	681b      	ldr	r3, [r3, #0]
   d45ea:	691b      	ldr	r3, [r3, #16]
   d45ec:	9301      	str	r3, [sp, #4]
   d45ee:	bd08      	pop	{r3, pc}
   d45f0:	0003022c 	.word	0x0003022c

000d45f4 <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   d45f4:	b508      	push	{r3, lr}
   d45f6:	4b02      	ldr	r3, [pc, #8]	; (d4600 <hal_i2c_begin+0xc>)
   d45f8:	681b      	ldr	r3, [r3, #0]
   d45fa:	68db      	ldr	r3, [r3, #12]
   d45fc:	9301      	str	r3, [sp, #4]
   d45fe:	bd08      	pop	{r3, pc}
   d4600:	00030228 	.word	0x00030228

000d4604 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   d4604:	b508      	push	{r3, lr}
   d4606:	4b02      	ldr	r3, [pc, #8]	; (d4610 <hal_i2c_begin_transmission+0xc>)
   d4608:	681b      	ldr	r3, [r3, #0]
   d460a:	699b      	ldr	r3, [r3, #24]
   d460c:	9301      	str	r3, [sp, #4]
   d460e:	bd08      	pop	{r3, pc}
   d4610:	00030228 	.word	0x00030228

000d4614 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   d4614:	b508      	push	{r3, lr}
   d4616:	4b02      	ldr	r3, [pc, #8]	; (d4620 <hal_i2c_end_transmission+0xc>)
   d4618:	681b      	ldr	r3, [r3, #0]
   d461a:	69db      	ldr	r3, [r3, #28]
   d461c:	9301      	str	r3, [sp, #4]
   d461e:	bd08      	pop	{r3, pc}
   d4620:	00030228 	.word	0x00030228

000d4624 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d4624:	b508      	push	{r3, lr}
   d4626:	4b02      	ldr	r3, [pc, #8]	; (d4630 <hal_i2c_write+0xc>)
   d4628:	681b      	ldr	r3, [r3, #0]
   d462a:	6a1b      	ldr	r3, [r3, #32]
   d462c:	9301      	str	r3, [sp, #4]
   d462e:	bd08      	pop	{r3, pc}
   d4630:	00030228 	.word	0x00030228

000d4634 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d4634:	b508      	push	{r3, lr}
   d4636:	4b02      	ldr	r3, [pc, #8]	; (d4640 <hal_i2c_available+0xc>)
   d4638:	681b      	ldr	r3, [r3, #0]
   d463a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d463c:	9301      	str	r3, [sp, #4]
   d463e:	bd08      	pop	{r3, pc}
   d4640:	00030228 	.word	0x00030228

000d4644 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d4644:	b508      	push	{r3, lr}
   d4646:	4b02      	ldr	r3, [pc, #8]	; (d4650 <hal_i2c_read+0xc>)
   d4648:	681b      	ldr	r3, [r3, #0]
   d464a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d464c:	9301      	str	r3, [sp, #4]
   d464e:	bd08      	pop	{r3, pc}
   d4650:	00030228 	.word	0x00030228

000d4654 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d4654:	b508      	push	{r3, lr}
   d4656:	4b02      	ldr	r3, [pc, #8]	; (d4660 <hal_i2c_peek+0xc>)
   d4658:	681b      	ldr	r3, [r3, #0]
   d465a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d465c:	9301      	str	r3, [sp, #4]
   d465e:	bd08      	pop	{r3, pc}
   d4660:	00030228 	.word	0x00030228

000d4664 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d4664:	b508      	push	{r3, lr}
   d4666:	4b02      	ldr	r3, [pc, #8]	; (d4670 <hal_i2c_flush+0xc>)
   d4668:	681b      	ldr	r3, [r3, #0]
   d466a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d466c:	9301      	str	r3, [sp, #4]
   d466e:	bd08      	pop	{r3, pc}
   d4670:	00030228 	.word	0x00030228

000d4674 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d4674:	b508      	push	{r3, lr}
   d4676:	4b02      	ldr	r3, [pc, #8]	; (d4680 <hal_i2c_is_enabled+0xc>)
   d4678:	681b      	ldr	r3, [r3, #0]
   d467a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d467c:	9301      	str	r3, [sp, #4]
   d467e:	bd08      	pop	{r3, pc}
   d4680:	00030228 	.word	0x00030228

000d4684 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d4684:	b508      	push	{r3, lr}
   d4686:	4b02      	ldr	r3, [pc, #8]	; (d4690 <hal_i2c_init+0xc>)
   d4688:	681b      	ldr	r3, [r3, #0]
   d468a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d468c:	9301      	str	r3, [sp, #4]
   d468e:	bd08      	pop	{r3, pc}
   d4690:	00030228 	.word	0x00030228

000d4694 <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   d4694:	b508      	push	{r3, lr}
   d4696:	4b02      	ldr	r3, [pc, #8]	; (d46a0 <hal_i2c_request_ex+0xc>)
   d4698:	681b      	ldr	r3, [r3, #0]
   d469a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d469c:	9301      	str	r3, [sp, #4]
   d469e:	bd08      	pop	{r3, pc}
   d46a0:	00030228 	.word	0x00030228

000d46a4 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d46a4:	b508      	push	{r3, lr}
   d46a6:	4b02      	ldr	r3, [pc, #8]	; (d46b0 <inet_inet_ntop+0xc>)
   d46a8:	681b      	ldr	r3, [r3, #0]
   d46aa:	695b      	ldr	r3, [r3, #20]
   d46ac:	9301      	str	r3, [sp, #4]
   d46ae:	bd08      	pop	{r3, pc}
   d46b0:	00030264 	.word	0x00030264

000d46b4 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d46b4:	b508      	push	{r3, lr}
   d46b6:	4b02      	ldr	r3, [pc, #8]	; (d46c0 <netdb_freeaddrinfo+0xc>)
   d46b8:	681b      	ldr	r3, [r3, #0]
   d46ba:	689b      	ldr	r3, [r3, #8]
   d46bc:	9301      	str	r3, [sp, #4]
   d46be:	bd08      	pop	{r3, pc}
   d46c0:	00030268 	.word	0x00030268

000d46c4 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d46c4:	b508      	push	{r3, lr}
   d46c6:	4b02      	ldr	r3, [pc, #8]	; (d46d0 <netdb_getaddrinfo+0xc>)
   d46c8:	681b      	ldr	r3, [r3, #0]
   d46ca:	68db      	ldr	r3, [r3, #12]
   d46cc:	9301      	str	r3, [sp, #4]
   d46ce:	bd08      	pop	{r3, pc}
   d46d0:	00030268 	.word	0x00030268

000d46d4 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d46d4:	b508      	push	{r3, lr}
   d46d6:	4b02      	ldr	r3, [pc, #8]	; (d46e0 <hal_spi_init+0xc>)
   d46d8:	681b      	ldr	r3, [r3, #0]
   d46da:	69db      	ldr	r3, [r3, #28]
   d46dc:	9301      	str	r3, [sp, #4]
   d46de:	bd08      	pop	{r3, pc}
   d46e0:	00030230 	.word	0x00030230

000d46e4 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d46e4:	b508      	push	{r3, lr}
   d46e6:	4b02      	ldr	r3, [pc, #8]	; (d46f0 <hal_spi_is_enabled+0xc>)
   d46e8:	681b      	ldr	r3, [r3, #0]
   d46ea:	6a1b      	ldr	r3, [r3, #32]
   d46ec:	9301      	str	r3, [sp, #4]
   d46ee:	bd08      	pop	{r3, pc}
   d46f0:	00030230 	.word	0x00030230

000d46f4 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d46f4:	b508      	push	{r3, lr}
   d46f6:	4b02      	ldr	r3, [pc, #8]	; (d4700 <hal_usart_init+0xc>)
   d46f8:	681b      	ldr	r3, [r3, #0]
   d46fa:	681b      	ldr	r3, [r3, #0]
   d46fc:	9301      	str	r3, [sp, #4]
   d46fe:	bd08      	pop	{r3, pc}
   d4700:	0003023c 	.word	0x0003023c

000d4704 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d4704:	b508      	push	{r3, lr}
   d4706:	4b02      	ldr	r3, [pc, #8]	; (d4710 <hal_usart_write+0xc>)
   d4708:	681b      	ldr	r3, [r3, #0]
   d470a:	68db      	ldr	r3, [r3, #12]
   d470c:	9301      	str	r3, [sp, #4]
   d470e:	bd08      	pop	{r3, pc}
   d4710:	0003023c 	.word	0x0003023c

000d4714 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d4714:	b508      	push	{r3, lr}
   d4716:	4b02      	ldr	r3, [pc, #8]	; (d4720 <hal_usart_available+0xc>)
   d4718:	681b      	ldr	r3, [r3, #0]
   d471a:	691b      	ldr	r3, [r3, #16]
   d471c:	9301      	str	r3, [sp, #4]
   d471e:	bd08      	pop	{r3, pc}
   d4720:	0003023c 	.word	0x0003023c

000d4724 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d4724:	b508      	push	{r3, lr}
   d4726:	4b02      	ldr	r3, [pc, #8]	; (d4730 <hal_usart_read+0xc>)
   d4728:	681b      	ldr	r3, [r3, #0]
   d472a:	695b      	ldr	r3, [r3, #20]
   d472c:	9301      	str	r3, [sp, #4]
   d472e:	bd08      	pop	{r3, pc}
   d4730:	0003023c 	.word	0x0003023c

000d4734 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d4734:	b508      	push	{r3, lr}
   d4736:	4b02      	ldr	r3, [pc, #8]	; (d4740 <hal_usart_peek+0xc>)
   d4738:	681b      	ldr	r3, [r3, #0]
   d473a:	699b      	ldr	r3, [r3, #24]
   d473c:	9301      	str	r3, [sp, #4]
   d473e:	bd08      	pop	{r3, pc}
   d4740:	0003023c 	.word	0x0003023c

000d4744 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d4744:	b508      	push	{r3, lr}
   d4746:	4b02      	ldr	r3, [pc, #8]	; (d4750 <hal_usart_flush+0xc>)
   d4748:	681b      	ldr	r3, [r3, #0]
   d474a:	69db      	ldr	r3, [r3, #28]
   d474c:	9301      	str	r3, [sp, #4]
   d474e:	bd08      	pop	{r3, pc}
   d4750:	0003023c 	.word	0x0003023c

000d4754 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d4754:	b508      	push	{r3, lr}
   d4756:	4b02      	ldr	r3, [pc, #8]	; (d4760 <hal_usart_is_enabled+0xc>)
   d4758:	681b      	ldr	r3, [r3, #0]
   d475a:	6a1b      	ldr	r3, [r3, #32]
   d475c:	9301      	str	r3, [sp, #4]
   d475e:	bd08      	pop	{r3, pc}
   d4760:	0003023c 	.word	0x0003023c

000d4764 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d4764:	b508      	push	{r3, lr}
   d4766:	4b02      	ldr	r3, [pc, #8]	; (d4770 <hal_usart_available_data_for_write+0xc>)
   d4768:	681b      	ldr	r3, [r3, #0]
   d476a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d476c:	9301      	str	r3, [sp, #4]
   d476e:	bd08      	pop	{r3, pc}
   d4770:	0003023c 	.word	0x0003023c

000d4774 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4774:	b508      	push	{r3, lr}
   d4776:	4b02      	ldr	r3, [pc, #8]	; (d4780 <HAL_USB_USART_Init+0xc>)
   d4778:	681b      	ldr	r3, [r3, #0]
   d477a:	681b      	ldr	r3, [r3, #0]
   d477c:	9301      	str	r3, [sp, #4]
   d477e:	bd08      	pop	{r3, pc}
   d4780:	0003024c 	.word	0x0003024c

000d4784 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d4784:	b508      	push	{r3, lr}
   d4786:	4b02      	ldr	r3, [pc, #8]	; (d4790 <HAL_USB_USART_Begin+0xc>)
   d4788:	681b      	ldr	r3, [r3, #0]
   d478a:	685b      	ldr	r3, [r3, #4]
   d478c:	9301      	str	r3, [sp, #4]
   d478e:	bd08      	pop	{r3, pc}
   d4790:	0003024c 	.word	0x0003024c

000d4794 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d4794:	b508      	push	{r3, lr}
   d4796:	4b02      	ldr	r3, [pc, #8]	; (d47a0 <HAL_USB_USART_Available_Data+0xc>)
   d4798:	681b      	ldr	r3, [r3, #0]
   d479a:	691b      	ldr	r3, [r3, #16]
   d479c:	9301      	str	r3, [sp, #4]
   d479e:	bd08      	pop	{r3, pc}
   d47a0:	0003024c 	.word	0x0003024c

000d47a4 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d47a4:	b508      	push	{r3, lr}
   d47a6:	4b02      	ldr	r3, [pc, #8]	; (d47b0 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d47a8:	681b      	ldr	r3, [r3, #0]
   d47aa:	695b      	ldr	r3, [r3, #20]
   d47ac:	9301      	str	r3, [sp, #4]
   d47ae:	bd08      	pop	{r3, pc}
   d47b0:	0003024c 	.word	0x0003024c

000d47b4 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d47b4:	b508      	push	{r3, lr}
   d47b6:	4b02      	ldr	r3, [pc, #8]	; (d47c0 <HAL_USB_USART_Receive_Data+0xc>)
   d47b8:	681b      	ldr	r3, [r3, #0]
   d47ba:	699b      	ldr	r3, [r3, #24]
   d47bc:	9301      	str	r3, [sp, #4]
   d47be:	bd08      	pop	{r3, pc}
   d47c0:	0003024c 	.word	0x0003024c

000d47c4 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d47c4:	b508      	push	{r3, lr}
   d47c6:	4b02      	ldr	r3, [pc, #8]	; (d47d0 <HAL_USB_USART_Send_Data+0xc>)
   d47c8:	681b      	ldr	r3, [r3, #0]
   d47ca:	69db      	ldr	r3, [r3, #28]
   d47cc:	9301      	str	r3, [sp, #4]
   d47ce:	bd08      	pop	{r3, pc}
   d47d0:	0003024c 	.word	0x0003024c

000d47d4 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d47d4:	b508      	push	{r3, lr}
   d47d6:	4b02      	ldr	r3, [pc, #8]	; (d47e0 <HAL_USB_USART_Flush_Data+0xc>)
   d47d8:	681b      	ldr	r3, [r3, #0]
   d47da:	6a1b      	ldr	r3, [r3, #32]
   d47dc:	9301      	str	r3, [sp, #4]
   d47de:	bd08      	pop	{r3, pc}
   d47e0:	0003024c 	.word	0x0003024c

000d47e4 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d47e4:	b508      	push	{r3, lr}
   d47e6:	4b02      	ldr	r3, [pc, #8]	; (d47f0 <set_system_mode+0xc>)
   d47e8:	681b      	ldr	r3, [r3, #0]
   d47ea:	685b      	ldr	r3, [r3, #4]
   d47ec:	9301      	str	r3, [sp, #4]
   d47ee:	bd08      	pop	{r3, pc}
   d47f0:	00030220 	.word	0x00030220

000d47f4 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d47f4:	b508      	push	{r3, lr}
   d47f6:	4b02      	ldr	r3, [pc, #8]	; (d4800 <system_delay_ms+0xc>)
   d47f8:	681b      	ldr	r3, [r3, #0]
   d47fa:	695b      	ldr	r3, [r3, #20]
   d47fc:	9301      	str	r3, [sp, #4]
   d47fe:	bd08      	pop	{r3, pc}
   d4800:	00030220 	.word	0x00030220

000d4804 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4804:	b508      	push	{r3, lr}
   d4806:	4b03      	ldr	r3, [pc, #12]	; (d4814 <system_ctrl_set_app_request_handler+0x10>)
   d4808:	681b      	ldr	r3, [r3, #0]
   d480a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d480e:	9301      	str	r3, [sp, #4]
   d4810:	bd08      	pop	{r3, pc}
   d4812:	0000      	.short	0x0000
   d4814:	00030220 	.word	0x00030220

000d4818 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d4818:	b508      	push	{r3, lr}
   d481a:	4b03      	ldr	r3, [pc, #12]	; (d4828 <system_ctrl_set_result+0x10>)
   d481c:	681b      	ldr	r3, [r3, #0]
   d481e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d4822:	9301      	str	r3, [sp, #4]
   d4824:	bd08      	pop	{r3, pc}
   d4826:	0000      	.short	0x0000
   d4828:	00030220 	.word	0x00030220

000d482c <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d482c:	b508      	push	{r3, lr}
   d482e:	4b02      	ldr	r3, [pc, #8]	; (d4838 <spark_process+0xc>)
   d4830:	681b      	ldr	r3, [r3, #0]
   d4832:	689b      	ldr	r3, [r3, #8]
   d4834:	9301      	str	r3, [sp, #4]
   d4836:	bd08      	pop	{r3, pc}
   d4838:	00030244 	.word	0x00030244

000d483c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d483c:	b508      	push	{r3, lr}
   d483e:	4b02      	ldr	r3, [pc, #8]	; (d4848 <spark_set_random_seed_from_cloud_handler+0xc>)
   d4840:	681b      	ldr	r3, [r3, #0]
   d4842:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4844:	9301      	str	r3, [sp, #4]
   d4846:	bd08      	pop	{r3, pc}
   d4848:	00030244 	.word	0x00030244

000d484c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d484c:	b508      	push	{r3, lr}
   d484e:	4b02      	ldr	r3, [pc, #8]	; (d4858 <network_connect+0xc>)
   d4850:	681b      	ldr	r3, [r3, #0]
   d4852:	685b      	ldr	r3, [r3, #4]
   d4854:	9301      	str	r3, [sp, #4]
   d4856:	bd08      	pop	{r3, pc}
   d4858:	00030240 	.word	0x00030240

000d485c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d485c:	b508      	push	{r3, lr}
   d485e:	4b02      	ldr	r3, [pc, #8]	; (d4868 <network_connecting+0xc>)
   d4860:	681b      	ldr	r3, [r3, #0]
   d4862:	689b      	ldr	r3, [r3, #8]
   d4864:	9301      	str	r3, [sp, #4]
   d4866:	bd08      	pop	{r3, pc}
   d4868:	00030240 	.word	0x00030240

000d486c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d486c:	b508      	push	{r3, lr}
   d486e:	4b02      	ldr	r3, [pc, #8]	; (d4878 <network_disconnect+0xc>)
   d4870:	681b      	ldr	r3, [r3, #0]
   d4872:	68db      	ldr	r3, [r3, #12]
   d4874:	9301      	str	r3, [sp, #4]
   d4876:	bd08      	pop	{r3, pc}
   d4878:	00030240 	.word	0x00030240

000d487c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d487c:	b508      	push	{r3, lr}
   d487e:	4b02      	ldr	r3, [pc, #8]	; (d4888 <network_ready+0xc>)
   d4880:	681b      	ldr	r3, [r3, #0]
   d4882:	691b      	ldr	r3, [r3, #16]
   d4884:	9301      	str	r3, [sp, #4]
   d4886:	bd08      	pop	{r3, pc}
   d4888:	00030240 	.word	0x00030240

000d488c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d488c:	b508      	push	{r3, lr}
   d488e:	4b02      	ldr	r3, [pc, #8]	; (d4898 <network_on+0xc>)
   d4890:	681b      	ldr	r3, [r3, #0]
   d4892:	695b      	ldr	r3, [r3, #20]
   d4894:	9301      	str	r3, [sp, #4]
   d4896:	bd08      	pop	{r3, pc}
   d4898:	00030240 	.word	0x00030240

000d489c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d489c:	b508      	push	{r3, lr}
   d489e:	4b02      	ldr	r3, [pc, #8]	; (d48a8 <network_off+0xc>)
   d48a0:	681b      	ldr	r3, [r3, #0]
   d48a2:	699b      	ldr	r3, [r3, #24]
   d48a4:	9301      	str	r3, [sp, #4]
   d48a6:	bd08      	pop	{r3, pc}
   d48a8:	00030240 	.word	0x00030240

000d48ac <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d48ac:	b508      	push	{r3, lr}
   d48ae:	4b02      	ldr	r3, [pc, #8]	; (d48b8 <network_listen+0xc>)
   d48b0:	681b      	ldr	r3, [r3, #0]
   d48b2:	69db      	ldr	r3, [r3, #28]
   d48b4:	9301      	str	r3, [sp, #4]
   d48b6:	bd08      	pop	{r3, pc}
   d48b8:	00030240 	.word	0x00030240

000d48bc <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d48bc:	b508      	push	{r3, lr}
   d48be:	4b02      	ldr	r3, [pc, #8]	; (d48c8 <network_listening+0xc>)
   d48c0:	681b      	ldr	r3, [r3, #0]
   d48c2:	6a1b      	ldr	r3, [r3, #32]
   d48c4:	9301      	str	r3, [sp, #4]
   d48c6:	bd08      	pop	{r3, pc}
   d48c8:	00030240 	.word	0x00030240

000d48cc <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d48cc:	b508      	push	{r3, lr}
   d48ce:	4b02      	ldr	r3, [pc, #8]	; (d48d8 <network_set_listen_timeout+0xc>)
   d48d0:	681b      	ldr	r3, [r3, #0]
   d48d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d48d4:	9301      	str	r3, [sp, #4]
   d48d6:	bd08      	pop	{r3, pc}
   d48d8:	00030240 	.word	0x00030240

000d48dc <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d48dc:	b508      	push	{r3, lr}
   d48de:	4b02      	ldr	r3, [pc, #8]	; (d48e8 <network_get_listen_timeout+0xc>)
   d48e0:	681b      	ldr	r3, [r3, #0]
   d48e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d48e4:	9301      	str	r3, [sp, #4]
   d48e6:	bd08      	pop	{r3, pc}
   d48e8:	00030240 	.word	0x00030240

000d48ec <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   d48ec:	b508      	push	{r3, lr}
   d48ee:	4b02      	ldr	r3, [pc, #8]	; (d48f8 <network_is_on+0xc>)
   d48f0:	681b      	ldr	r3, [r3, #0]
   d48f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d48f4:	9301      	str	r3, [sp, #4]
   d48f6:	bd08      	pop	{r3, pc}
   d48f8:	00030240 	.word	0x00030240

000d48fc <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   d48fc:	b508      	push	{r3, lr}
   d48fe:	4b02      	ldr	r3, [pc, #8]	; (d4908 <network_is_off+0xc>)
   d4900:	681b      	ldr	r3, [r3, #0]
   d4902:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4904:	9301      	str	r3, [sp, #4]
   d4906:	bd08      	pop	{r3, pc}
   d4908:	00030240 	.word	0x00030240

000d490c <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d490c:	b508      	push	{r3, lr}
   d490e:	4b02      	ldr	r3, [pc, #8]	; (d4918 <malloc+0xc>)
   d4910:	681b      	ldr	r3, [r3, #0]
   d4912:	681b      	ldr	r3, [r3, #0]
   d4914:	9301      	str	r3, [sp, #4]
   d4916:	bd08      	pop	{r3, pc}
   d4918:	0003021c 	.word	0x0003021c

000d491c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d491c:	b508      	push	{r3, lr}
   d491e:	4b02      	ldr	r3, [pc, #8]	; (d4928 <free+0xc>)
   d4920:	681b      	ldr	r3, [r3, #0]
   d4922:	685b      	ldr	r3, [r3, #4]
   d4924:	9301      	str	r3, [sp, #4]
   d4926:	bd08      	pop	{r3, pc}
   d4928:	0003021c 	.word	0x0003021c

000d492c <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d492c:	b508      	push	{r3, lr}
   d492e:	4b02      	ldr	r3, [pc, #8]	; (d4938 <newlib_impure_ptr_callback+0xc>)
   d4930:	681b      	ldr	r3, [r3, #0]
   d4932:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4934:	9301      	str	r3, [sp, #4]
   d4936:	bd08      	pop	{r3, pc}
   d4938:	0003021c 	.word	0x0003021c

000d493c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d493c:	2100      	movs	r1, #0
   d493e:	f7ff bf59 	b.w	d47f4 <system_delay_ms>
	...

000d4944 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d4944:	4802      	ldr	r0, [pc, #8]	; (d4950 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   d4946:	2300      	movs	r3, #0
   d4948:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   d494a:	f7ff be23 	b.w	d4594 <os_mutex_recursive_create>
   d494e:	bf00      	nop
   d4950:	2003e680 	.word	0x2003e680

000d4954 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d4954:	2200      	movs	r2, #0
   d4956:	6840      	ldr	r0, [r0, #4]
   d4958:	4611      	mov	r1, r2
   d495a:	f7ff bf8f 	b.w	d487c <network_ready>

000d495e <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   d495e:	2200      	movs	r2, #0
   d4960:	6840      	ldr	r0, [r0, #4]
   d4962:	4611      	mov	r1, r2
   d4964:	f7ff bfaa 	b.w	d48bc <network_listening>

000d4968 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d4968:	2200      	movs	r2, #0
   d496a:	6840      	ldr	r0, [r0, #4]
   d496c:	4611      	mov	r1, r2
   d496e:	f7ff bfb5 	b.w	d48dc <network_get_listen_timeout>

000d4972 <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d4972:	6840      	ldr	r0, [r0, #4]
   d4974:	2200      	movs	r2, #0
   d4976:	f7ff bfa9 	b.w	d48cc <network_set_listen_timeout>

000d497a <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d497a:	6840      	ldr	r0, [r0, #4]
   d497c:	2200      	movs	r2, #0
   d497e:	f081 0101 	eor.w	r1, r1, #1
   d4982:	f7ff bf93 	b.w	d48ac <network_listen>

000d4986 <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d4986:	2300      	movs	r3, #0
   d4988:	6840      	ldr	r0, [r0, #4]
   d498a:	461a      	mov	r2, r3
   d498c:	4619      	mov	r1, r3
   d498e:	f7ff bf85 	b.w	d489c <network_off>

000d4992 <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d4992:	2300      	movs	r3, #0
   d4994:	6840      	ldr	r0, [r0, #4]
   d4996:	461a      	mov	r2, r3
   d4998:	4619      	mov	r1, r3
   d499a:	f7ff bf77 	b.w	d488c <network_on>

000d499e <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d499e:	2200      	movs	r2, #0
   d49a0:	6840      	ldr	r0, [r0, #4]
   d49a2:	4611      	mov	r1, r2
   d49a4:	f7ff bf5a 	b.w	d485c <network_connecting>

000d49a8 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d49a8:	6840      	ldr	r0, [r0, #4]
   d49aa:	2200      	movs	r2, #0
   d49ac:	2102      	movs	r1, #2
   d49ae:	f7ff bf5d 	b.w	d486c <network_disconnect>

000d49b2 <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d49b2:	2300      	movs	r3, #0
   d49b4:	6840      	ldr	r0, [r0, #4]
   d49b6:	461a      	mov	r2, r3
   d49b8:	f7ff bf48 	b.w	d484c <network_connect>

000d49bc <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d49bc:	4b08      	ldr	r3, [pc, #32]	; (d49e0 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d49be:	b510      	push	{r4, lr}
   d49c0:	2428      	movs	r4, #40	; 0x28
   d49c2:	4622      	mov	r2, r4
   d49c4:	4618      	mov	r0, r3
   d49c6:	2100      	movs	r1, #0
   d49c8:	f000 fcf6 	bl	d53b8 <memset>
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d49cc:	4b05      	ldr	r3, [pc, #20]	; (d49e4 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   d49ce:	8004      	strh	r4, [r0, #0]
        cid = -1;
   d49d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d49d4:	6042      	str	r2, [r0, #4]
   d49d6:	2204      	movs	r2, #4
   d49d8:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d49da:	4a03      	ldr	r2, [pc, #12]	; (d49e8 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d49dc:	601a      	str	r2, [r3, #0]
   d49de:	bd10      	pop	{r4, pc}
   d49e0:	2003e68c 	.word	0x2003e68c
   d49e4:	2003e684 	.word	0x2003e684
   d49e8:	000d5580 	.word	0x000d5580

000d49ec <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d49ec:	2200      	movs	r2, #0
   d49ee:	6840      	ldr	r0, [r0, #4]
   d49f0:	4611      	mov	r1, r2
   d49f2:	f7ff bf63 	b.w	d48bc <network_listening>

000d49f6 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d49f6:	2200      	movs	r2, #0
   d49f8:	6840      	ldr	r0, [r0, #4]
   d49fa:	4611      	mov	r1, r2
   d49fc:	f7ff bf6e 	b.w	d48dc <network_get_listen_timeout>

000d4a00 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d4a00:	6840      	ldr	r0, [r0, #4]
   d4a02:	2200      	movs	r2, #0
   d4a04:	f7ff bf62 	b.w	d48cc <network_set_listen_timeout>

000d4a08 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d4a08:	6840      	ldr	r0, [r0, #4]
   d4a0a:	2200      	movs	r2, #0
   d4a0c:	f081 0101 	eor.w	r1, r1, #1
   d4a10:	f7ff bf4c 	b.w	d48ac <network_listen>

000d4a14 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d4a14:	2300      	movs	r3, #0
   d4a16:	6840      	ldr	r0, [r0, #4]
   d4a18:	461a      	mov	r2, r3
   d4a1a:	4619      	mov	r1, r3
   d4a1c:	f7ff bf3e 	b.w	d489c <network_off>

000d4a20 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d4a20:	2300      	movs	r3, #0
   d4a22:	6840      	ldr	r0, [r0, #4]
   d4a24:	461a      	mov	r2, r3
   d4a26:	4619      	mov	r1, r3
   d4a28:	f7ff bf30 	b.w	d488c <network_on>

000d4a2c <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4a2c:	2200      	movs	r2, #0
   d4a2e:	6840      	ldr	r0, [r0, #4]
   d4a30:	4611      	mov	r1, r2
   d4a32:	f7ff bf23 	b.w	d487c <network_ready>

000d4a36 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d4a36:	2200      	movs	r2, #0
   d4a38:	6840      	ldr	r0, [r0, #4]
   d4a3a:	4611      	mov	r1, r2
   d4a3c:	f7ff bf0e 	b.w	d485c <network_connecting>

000d4a40 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4a40:	6840      	ldr	r0, [r0, #4]
   d4a42:	2200      	movs	r2, #0
   d4a44:	2102      	movs	r1, #2
   d4a46:	f7ff bf11 	b.w	d486c <network_disconnect>

000d4a4a <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d4a4a:	2300      	movs	r3, #0
   d4a4c:	6840      	ldr	r0, [r0, #4]
   d4a4e:	461a      	mov	r2, r3
   d4a50:	f7ff befc 	b.w	d484c <network_connect>

000d4a54 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   d4a54:	4b02      	ldr	r3, [pc, #8]	; (d4a60 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d4a56:	2203      	movs	r2, #3
   d4a58:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d4a5a:	4a02      	ldr	r2, [pc, #8]	; (d4a64 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d4a5c:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d4a5e:	4770      	bx	lr
   d4a60:	2003e6b4 	.word	0x2003e6b4
   d4a64:	000d55bc 	.word	0x000d55bc

000d4a68 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d4a68:	4770      	bx	lr

000d4a6a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d4a6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4a6c:	4606      	mov	r6, r0
   d4a6e:	4615      	mov	r5, r2
   d4a70:	460c      	mov	r4, r1
   d4a72:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d4a74:	42bc      	cmp	r4, r7
   d4a76:	d006      	beq.n	d4a86 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d4a78:	6833      	ldr	r3, [r6, #0]
   d4a7a:	f814 1b01 	ldrb.w	r1, [r4], #1
   d4a7e:	689b      	ldr	r3, [r3, #8]
   d4a80:	4630      	mov	r0, r6
   d4a82:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d4a84:	e7f6      	b.n	d4a74 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d4a86:	4628      	mov	r0, r5
   d4a88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4a8a <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d4a8a:	7c00      	ldrb	r0, [r0, #16]
   d4a8c:	2200      	movs	r2, #0
   d4a8e:	f7ff bdc9 	b.w	d4624 <hal_i2c_write>

000d4a92 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d4a92:	7c00      	ldrb	r0, [r0, #16]
   d4a94:	2100      	movs	r1, #0
   d4a96:	f7ff bdcd 	b.w	d4634 <hal_i2c_available>

000d4a9a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d4a9a:	7c00      	ldrb	r0, [r0, #16]
   d4a9c:	2100      	movs	r1, #0
   d4a9e:	f7ff bdd1 	b.w	d4644 <hal_i2c_read>

000d4aa2 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d4aa2:	7c00      	ldrb	r0, [r0, #16]
   d4aa4:	2100      	movs	r1, #0
   d4aa6:	f7ff bdd5 	b.w	d4654 <hal_i2c_peek>

000d4aaa <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d4aaa:	7c00      	ldrb	r0, [r0, #16]
   d4aac:	2100      	movs	r1, #0
   d4aae:	f7ff bdd9 	b.w	d4664 <hal_i2c_flush>

000d4ab2 <_ZN7TwoWireD0Ev>:
   d4ab2:	b510      	push	{r4, lr}
   d4ab4:	2114      	movs	r1, #20
   d4ab6:	4604      	mov	r4, r0
   d4ab8:	f000 fc66 	bl	d5388 <_ZdlPvj>
   d4abc:	4620      	mov	r0, r4
   d4abe:	bd10      	pop	{r4, pc}

000d4ac0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d4ac0:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d4ac2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d4ac6:	4604      	mov	r4, r0
   d4ac8:	4608      	mov	r0, r1
   d4aca:	2100      	movs	r1, #0
   d4acc:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d4ad0:	4b03      	ldr	r3, [pc, #12]	; (d4ae0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d4ad2:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d4ad4:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d4ad6:	4611      	mov	r1, r2
   d4ad8:	f7ff fdd4 	bl	d4684 <hal_i2c_init>
}
   d4adc:	4620      	mov	r0, r4
   d4ade:	bd10      	pop	{r4, pc}
   d4ae0:	000d55f8 	.word	0x000d55f8

000d4ae4 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d4ae4:	2300      	movs	r3, #0
   d4ae6:	7c00      	ldrb	r0, [r0, #16]
   d4ae8:	461a      	mov	r2, r3
   d4aea:	4619      	mov	r1, r3
   d4aec:	f7ff bd82 	b.w	d45f4 <hal_i2c_begin>

000d4af0 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d4af0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   d4af2:	2200      	movs	r2, #0
   d4af4:	2314      	movs	r3, #20
   d4af6:	e9cd 2201 	strd	r2, r2, [sp, #4]
   d4afa:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   d4afe:	780b      	ldrb	r3, [r1, #0]
   d4b00:	f88d 3008 	strb.w	r3, [sp, #8]
   d4b04:	684b      	ldr	r3, [r1, #4]
   d4b06:	9303      	str	r3, [sp, #12]
   d4b08:	68cb      	ldr	r3, [r1, #12]
   d4b0a:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   d4b0c:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   d4b0e:	7a0b      	ldrb	r3, [r1, #8]
   d4b10:	9305      	str	r3, [sp, #20]
   d4b12:	a901      	add	r1, sp, #4
   d4b14:	f7ff fdbe 	bl	d4694 <hal_i2c_request_ex>
}
   d4b18:	b007      	add	sp, #28
   d4b1a:	f85d fb04 	ldr.w	pc, [sp], #4

000d4b1e <_ZN7TwoWire11requestFromEhjh>:
{
   d4b1e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d4b20:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d4b22:	f88d 1000 	strb.w	r1, [sp]
   d4b26:	f04f 0164 	mov.w	r1, #100	; 0x64
   d4b2a:	9103      	str	r1, [sp, #12]
   d4b2c:	bf18      	it	ne
   d4b2e:	2301      	movne	r3, #1
   d4b30:	4669      	mov	r1, sp
    size_ = size;
   d4b32:	9201      	str	r2, [sp, #4]
   d4b34:	f88d 3008 	strb.w	r3, [sp, #8]
   d4b38:	f7ff ffda 	bl	d4af0 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d4b3c:	b005      	add	sp, #20
   d4b3e:	f85d fb04 	ldr.w	pc, [sp], #4

000d4b42 <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   d4b42:	2301      	movs	r3, #1
   d4b44:	f7ff bfeb 	b.w	d4b1e <_ZN7TwoWire11requestFromEhjh>

000d4b48 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   d4b48:	7c00      	ldrb	r0, [r0, #16]
   d4b4a:	2200      	movs	r2, #0
   d4b4c:	f7ff bd5a 	b.w	d4604 <hal_i2c_begin_transmission>

000d4b50 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   d4b50:	7c00      	ldrb	r0, [r0, #16]
   d4b52:	2200      	movs	r2, #0
   d4b54:	f7ff bd5e 	b.w	d4614 <hal_i2c_end_transmission>

000d4b58 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   d4b58:	2101      	movs	r1, #1
   d4b5a:	f7ff bff9 	b.w	d4b50 <_ZN7TwoWire15endTransmissionEh>

000d4b5e <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d4b5e:	4770      	bx	lr

000d4b60 <_ZN9IPAddressD0Ev>:
   d4b60:	b510      	push	{r4, lr}
   d4b62:	2118      	movs	r1, #24
   d4b64:	4604      	mov	r4, r0
   d4b66:	f000 fc0f 	bl	d5388 <_ZdlPvj>
   d4b6a:	4620      	mov	r0, r4
   d4b6c:	bd10      	pop	{r4, pc}

000d4b6e <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d4b6e:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d4b70:	7d03      	ldrb	r3, [r0, #20]
   d4b72:	2b06      	cmp	r3, #6
{
   d4b74:	b08d      	sub	sp, #52	; 0x34
   d4b76:	460e      	mov	r6, r1
   d4b78:	f100 0704 	add.w	r7, r0, #4
   d4b7c:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d4b80:	d012      	beq.n	d4ba8 <_ZNK9IPAddress7printToER5Print+0x3a>
   d4b82:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d4b86:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d4b8a:	220a      	movs	r2, #10
   d4b8c:	4630      	mov	r0, r6
   d4b8e:	f000 f956 	bl	d4e3e <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d4b92:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d4b94:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d4b96:	d019      	beq.n	d4bcc <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d4b98:	2c00      	cmp	r4, #0
   d4b9a:	d0f4      	beq.n	d4b86 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d4b9c:	212e      	movs	r1, #46	; 0x2e
   d4b9e:	4630      	mov	r0, r6
   d4ba0:	f000 f934 	bl	d4e0c <_ZN5Print5printEc>
   d4ba4:	4404      	add	r4, r0
   d4ba6:	e7ee      	b.n	d4b86 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d4ba8:	232f      	movs	r3, #47	; 0x2f
   d4baa:	466a      	mov	r2, sp
   d4bac:	4639      	mov	r1, r7
   d4bae:	200a      	movs	r0, #10
		buf[0] = 0;
   d4bb0:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d4bb4:	f7ff fd76 	bl	d46a4 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d4bb8:	4668      	mov	r0, sp
   d4bba:	f000 fc29 	bl	d5410 <strlen>
   d4bbe:	6833      	ldr	r3, [r6, #0]
   d4bc0:	4602      	mov	r2, r0
   d4bc2:	68db      	ldr	r3, [r3, #12]
   d4bc4:	4669      	mov	r1, sp
   d4bc6:	4630      	mov	r0, r6
   d4bc8:	4798      	blx	r3
   d4bca:	4604      	mov	r4, r0
    }
    return n;
}
   d4bcc:	4620      	mov	r0, r4
   d4bce:	b00d      	add	sp, #52	; 0x34
   d4bd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d4bd4 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d4bd4:	b510      	push	{r4, lr}
   d4bd6:	4b05      	ldr	r3, [pc, #20]	; (d4bec <_ZN9IPAddressC1Ev+0x18>)
   d4bd8:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d4bda:	2211      	movs	r2, #17
   d4bdc:	f840 3b04 	str.w	r3, [r0], #4
   d4be0:	2100      	movs	r1, #0
   d4be2:	f000 fbe9 	bl	d53b8 <memset>
}
   d4be6:	4620      	mov	r0, r4
   d4be8:	bd10      	pop	{r4, pc}
   d4bea:	bf00      	nop
   d4bec:	000d5620 	.word	0x000d5620

000d4bf0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d4bf0:	4603      	mov	r3, r0
   d4bf2:	4a07      	ldr	r2, [pc, #28]	; (d4c10 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d4bf4:	b510      	push	{r4, lr}
   d4bf6:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d4bfa:	f101 0210 	add.w	r2, r1, #16
   d4bfe:	f851 4b04 	ldr.w	r4, [r1], #4
   d4c02:	f843 4b04 	str.w	r4, [r3], #4
   d4c06:	4291      	cmp	r1, r2
   d4c08:	d1f9      	bne.n	d4bfe <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d4c0a:	780a      	ldrb	r2, [r1, #0]
   d4c0c:	701a      	strb	r2, [r3, #0]
}
   d4c0e:	bd10      	pop	{r4, pc}
   d4c10:	000d5620 	.word	0x000d5620

000d4c14 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d4c14:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d4c16:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d4c1a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d4c1e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d4c22:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d4c26:	2304      	movs	r3, #4
   d4c28:	6041      	str	r1, [r0, #4]
   d4c2a:	7503      	strb	r3, [r0, #20]
}
   d4c2c:	bd10      	pop	{r4, pc}

000d4c2e <_ZN9IPAddressaSEPKh>:
{
   d4c2e:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d4c30:	78cb      	ldrb	r3, [r1, #3]
   d4c32:	9300      	str	r3, [sp, #0]
   d4c34:	788b      	ldrb	r3, [r1, #2]
   d4c36:	784a      	ldrb	r2, [r1, #1]
   d4c38:	7809      	ldrb	r1, [r1, #0]
   d4c3a:	f7ff ffeb 	bl	d4c14 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d4c3e:	b002      	add	sp, #8
   d4c40:	bd10      	pop	{r4, pc}
	...

000d4c44 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d4c44:	4b01      	ldr	r3, [pc, #4]	; (d4c4c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d4c46:	4a02      	ldr	r2, [pc, #8]	; (d4c50 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d4c48:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d4c4a:	4770      	bx	lr
   d4c4c:	2003e6bc 	.word	0x2003e6bc
   d4c50:	000d562c 	.word	0x000d562c

000d4c54 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d4c54:	2300      	movs	r3, #0
   d4c56:	6840      	ldr	r0, [r0, #4]
   d4c58:	461a      	mov	r2, r3
   d4c5a:	f7ff bdf7 	b.w	d484c <network_connect>

000d4c5e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d4c5e:	6840      	ldr	r0, [r0, #4]
   d4c60:	2200      	movs	r2, #0
   d4c62:	2102      	movs	r1, #2
   d4c64:	f7ff be02 	b.w	d486c <network_disconnect>

000d4c68 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d4c68:	2200      	movs	r2, #0
   d4c6a:	6840      	ldr	r0, [r0, #4]
   d4c6c:	4611      	mov	r1, r2
   d4c6e:	f7ff bdf5 	b.w	d485c <network_connecting>

000d4c72 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d4c72:	2200      	movs	r2, #0
   d4c74:	6840      	ldr	r0, [r0, #4]
   d4c76:	4611      	mov	r1, r2
   d4c78:	f7ff be00 	b.w	d487c <network_ready>

000d4c7c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d4c7c:	2300      	movs	r3, #0
   d4c7e:	6840      	ldr	r0, [r0, #4]
   d4c80:	461a      	mov	r2, r3
   d4c82:	4619      	mov	r1, r3
   d4c84:	f7ff be02 	b.w	d488c <network_on>

000d4c88 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d4c88:	2300      	movs	r3, #0
   d4c8a:	6840      	ldr	r0, [r0, #4]
   d4c8c:	461a      	mov	r2, r3
   d4c8e:	4619      	mov	r1, r3
   d4c90:	f7ff be04 	b.w	d489c <network_off>

000d4c94 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   d4c94:	6840      	ldr	r0, [r0, #4]
   d4c96:	2100      	movs	r1, #0
   d4c98:	f7ff be28 	b.w	d48ec <network_is_on>

000d4c9c <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   d4c9c:	6840      	ldr	r0, [r0, #4]
   d4c9e:	2100      	movs	r1, #0
   d4ca0:	f7ff be2c 	b.w	d48fc <network_is_off>

000d4ca4 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d4ca4:	6840      	ldr	r0, [r0, #4]
   d4ca6:	2200      	movs	r2, #0
   d4ca8:	f081 0101 	eor.w	r1, r1, #1
   d4cac:	f7ff bdfe 	b.w	d48ac <network_listen>

000d4cb0 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d4cb0:	6840      	ldr	r0, [r0, #4]
   d4cb2:	2200      	movs	r2, #0
   d4cb4:	f7ff be0a 	b.w	d48cc <network_set_listen_timeout>

000d4cb8 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d4cb8:	2200      	movs	r2, #0
   d4cba:	6840      	ldr	r0, [r0, #4]
   d4cbc:	4611      	mov	r1, r2
   d4cbe:	f7ff be0d 	b.w	d48dc <network_get_listen_timeout>

000d4cc2 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d4cc2:	2200      	movs	r2, #0
   d4cc4:	6840      	ldr	r0, [r0, #4]
   d4cc6:	4611      	mov	r1, r2
   d4cc8:	f7ff bdf8 	b.w	d48bc <network_listening>

000d4ccc <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d4ccc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d4cd0:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d4cd2:	b095      	sub	sp, #84	; 0x54
   d4cd4:	4616      	mov	r6, r2
   d4cd6:	460d      	mov	r5, r1
   d4cd8:	4607      	mov	r7, r0
    IPAddress addr;
   d4cda:	f7ff ff7b 	bl	d4bd4 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d4cde:	4621      	mov	r1, r4
   d4ce0:	2218      	movs	r2, #24
   d4ce2:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d4ce4:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d4ce6:	f000 fb67 	bl	d53b8 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d4cea:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d4cec:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d4cf0:	4621      	mov	r1, r4
   d4cf2:	466b      	mov	r3, sp
   d4cf4:	aa0c      	add	r2, sp, #48	; 0x30
   d4cf6:	4630      	mov	r0, r6
   d4cf8:	f7ff fce4 	bl	d46c4 <netdb_getaddrinfo>
    if (!r) {
   d4cfc:	4604      	mov	r4, r0
   d4cfe:	2800      	cmp	r0, #0
   d4d00:	d146      	bne.n	d4d90 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d4d02:	4602      	mov	r2, r0
   d4d04:	2101      	movs	r1, #1
   d4d06:	6868      	ldr	r0, [r5, #4]
   d4d08:	f7ff fdb8 	bl	d487c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d4d0c:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d4d0e:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d4d10:	4622      	mov	r2, r4
   d4d12:	6868      	ldr	r0, [r5, #4]
   d4d14:	f7ff fdb2 	bl	d487c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d4d18:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d4d1a:	4681      	mov	r9, r0
        bool ok = false;
   d4d1c:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d4d1e:	2e00      	cmp	r6, #0
   d4d20:	d036      	beq.n	d4d90 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
   d4d22:	2900      	cmp	r1, #0
   d4d24:	d134      	bne.n	d4d90 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d4d26:	6873      	ldr	r3, [r6, #4]
   d4d28:	2b02      	cmp	r3, #2
   d4d2a:	d003      	beq.n	d4d34 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d4d2c:	2b0a      	cmp	r3, #10
   d4d2e:	d00b      	beq.n	d4d48 <_ZN5spark12NetworkClass7resolveEPKc+0x7c>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d4d30:	69f6      	ldr	r6, [r6, #28]
   d4d32:	e7f4      	b.n	d4d1e <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d4d34:	f1b8 0f00 	cmp.w	r8, #0
   d4d38:	d004      	beq.n	d4d44 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d4d3a:	6971      	ldr	r1, [r6, #20]
   d4d3c:	4638      	mov	r0, r7
   d4d3e:	3104      	adds	r1, #4
   d4d40:	f7ff ff75 	bl	d4c2e <_ZN9IPAddressaSEPKh>
                    ok = true;
                    break;
   d4d44:	4641      	mov	r1, r8
   d4d46:	e7f3      	b.n	d4d30 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                }
                case AF_INET6: {
                    if (!ipv6) {
   d4d48:	f1b9 0f00 	cmp.w	r9, #0
   d4d4c:	d101      	bne.n	d4d52 <_ZN5spark12NetworkClass7resolveEPKc+0x86>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d4d4e:	4649      	mov	r1, r9
   d4d50:	e7ee      	b.n	d4d30 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d4d52:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d4d54:	2210      	movs	r2, #16
   d4d56:	a801      	add	r0, sp, #4
   d4d58:	f000 fb2e 	bl	d53b8 <memset>
                    a.v = 6;
   d4d5c:	2306      	movs	r3, #6
   d4d5e:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d4d62:	ad01      	add	r5, sp, #4
   d4d64:	f104 0308 	add.w	r3, r4, #8
   d4d68:	3418      	adds	r4, #24
   d4d6a:	6818      	ldr	r0, [r3, #0]
   d4d6c:	6859      	ldr	r1, [r3, #4]
   d4d6e:	462a      	mov	r2, r5
   d4d70:	c203      	stmia	r2!, {r0, r1}
   d4d72:	3308      	adds	r3, #8
   d4d74:	42a3      	cmp	r3, r4
   d4d76:	4615      	mov	r5, r2
   d4d78:	d1f7      	bne.n	d4d6a <_ZN5spark12NetworkClass7resolveEPKc+0x9e>
                    addr = IPAddress(a);
   d4d7a:	a901      	add	r1, sp, #4
   d4d7c:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d4d7e:	ad07      	add	r5, sp, #28
   d4d80:	f7ff ff36 	bl	d4bf0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d4d84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d4d86:	1d3c      	adds	r4, r7, #4
   d4d88:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4d8a:	682b      	ldr	r3, [r5, #0]
   d4d8c:	7023      	strb	r3, [r4, #0]
   d4d8e:	e7de      	b.n	d4d4e <_ZN5spark12NetworkClass7resolveEPKc+0x82>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d4d90:	9800      	ldr	r0, [sp, #0]
   d4d92:	f7ff fc8f 	bl	d46b4 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d4d96:	4638      	mov	r0, r7
   d4d98:	b015      	add	sp, #84	; 0x54
   d4d9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d4da0 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d4da0:	4b02      	ldr	r3, [pc, #8]	; (d4dac <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d4da2:	4a03      	ldr	r2, [pc, #12]	; (d4db0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d4da4:	601a      	str	r2, [r3, #0]
   d4da6:	2200      	movs	r2, #0
   d4da8:	605a      	str	r2, [r3, #4]

} // spark
   d4daa:	4770      	bx	lr
   d4dac:	2003e6c0 	.word	0x2003e6c0
   d4db0:	000d5638 	.word	0x000d5638

000d4db4 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d4db4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4db6:	4606      	mov	r6, r0
   d4db8:	460d      	mov	r5, r1
  size_t n = 0;
   d4dba:	188f      	adds	r7, r1, r2
   d4dbc:	2400      	movs	r4, #0
  while (size--) {
   d4dbe:	42bd      	cmp	r5, r7
   d4dc0:	d00c      	beq.n	d4ddc <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d4dc2:	6833      	ldr	r3, [r6, #0]
   d4dc4:	f815 1b01 	ldrb.w	r1, [r5], #1
   d4dc8:	689b      	ldr	r3, [r3, #8]
   d4dca:	4630      	mov	r0, r6
   d4dcc:	4798      	blx	r3
     if (chunk>=0)
   d4dce:	1e03      	subs	r3, r0, #0
   d4dd0:	db01      	blt.n	d4dd6 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d4dd2:	441c      	add	r4, r3
  while (size--) {
   d4dd4:	e7f3      	b.n	d4dbe <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d4dd6:	2c00      	cmp	r4, #0
   d4dd8:	bf08      	it	eq
   d4dda:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d4ddc:	4620      	mov	r0, r4
   d4dde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4de0 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   d4de0:	b513      	push	{r0, r1, r4, lr}
   d4de2:	4604      	mov	r4, r0
    }
   d4de4:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d4de6:	b159      	cbz	r1, d4e00 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d4de8:	9101      	str	r1, [sp, #4]
   d4dea:	f000 fb11 	bl	d5410 <strlen>
   d4dee:	6823      	ldr	r3, [r4, #0]
   d4df0:	9901      	ldr	r1, [sp, #4]
   d4df2:	68db      	ldr	r3, [r3, #12]
   d4df4:	4602      	mov	r2, r0
   d4df6:	4620      	mov	r0, r4
    }
   d4df8:	b002      	add	sp, #8
   d4dfa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d4dfe:	4718      	bx	r3
    }
   d4e00:	b002      	add	sp, #8
   d4e02:	bd10      	pop	{r4, pc}

000d4e04 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   d4e04:	b508      	push	{r3, lr}
  return write(str);
   d4e06:	f7ff ffeb 	bl	d4de0 <_ZN5Print5writeEPKc>
}
   d4e0a:	bd08      	pop	{r3, pc}

000d4e0c <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   d4e0c:	6803      	ldr	r3, [r0, #0]
   d4e0e:	689b      	ldr	r3, [r3, #8]
   d4e10:	4718      	bx	r3

000d4e12 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d4e12:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d4e14:	210d      	movs	r1, #13
{
   d4e16:	4605      	mov	r5, r0
  size_t n = print('\r');
   d4e18:	f7ff fff8 	bl	d4e0c <_ZN5Print5printEc>
  n += print('\n');
   d4e1c:	210a      	movs	r1, #10
  size_t n = print('\r');
   d4e1e:	4604      	mov	r4, r0
  n += print('\n');
   d4e20:	4628      	mov	r0, r5
   d4e22:	f7ff fff3 	bl	d4e0c <_ZN5Print5printEc>
  return n;
}
   d4e26:	4420      	add	r0, r4
   d4e28:	bd38      	pop	{r3, r4, r5, pc}

000d4e2a <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d4e2a:	b538      	push	{r3, r4, r5, lr}
   d4e2c:	4605      	mov	r5, r0
  return write(str);
   d4e2e:	f7ff ffd7 	bl	d4de0 <_ZN5Print5writeEPKc>
   d4e32:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   d4e34:	4628      	mov	r0, r5
   d4e36:	f7ff ffec 	bl	d4e12 <_ZN5Print7printlnEv>
  return n;
}
   d4e3a:	4420      	add	r0, r4
   d4e3c:	bd38      	pop	{r3, r4, r5, pc}

000d4e3e <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d4e3e:	b530      	push	{r4, r5, lr}
   d4e40:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d4e42:	2300      	movs	r3, #0
   d4e44:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d4e48:	2a01      	cmp	r2, #1
   d4e4a:	bf98      	it	ls
   d4e4c:	220a      	movls	r2, #10
   d4e4e:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d4e50:	460d      	mov	r5, r1
   d4e52:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d4e56:	fb01 5312 	mls	r3, r1, r2, r5
   d4e5a:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d4e5e:	2b09      	cmp	r3, #9
   d4e60:	bf94      	ite	ls
   d4e62:	3330      	addls	r3, #48	; 0x30
   d4e64:	3337      	addhi	r3, #55	; 0x37
   d4e66:	b2db      	uxtb	r3, r3
  } while(n);
   d4e68:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d4e6a:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d4e6e:	d9ef      	bls.n	d4e50 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d4e70:	4621      	mov	r1, r4
   d4e72:	f7ff ffb5 	bl	d4de0 <_ZN5Print5writeEPKc>
}
   d4e76:	b00b      	add	sp, #44	; 0x2c
   d4e78:	bd30      	pop	{r4, r5, pc}
	...

000d4e7c <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   d4e7c:	4b01      	ldr	r3, [pc, #4]	; (d4e84 <_GLOBAL__sub_I_RGB+0x8>)
   d4e7e:	2200      	movs	r2, #0
   d4e80:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   d4e82:	4770      	bx	lr
   d4e84:	2003e6c8 	.word	0x2003e6c8

000d4e88 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d4e88:	b510      	push	{r4, lr}
   d4e8a:	4604      	mov	r4, r0
   d4e8c:	4608      	mov	r0, r1
{
    _spi = spi;
   d4e8e:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d4e90:	f7ff fc20 	bl	d46d4 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d4e94:	2300      	movs	r3, #0
   d4e96:	6063      	str	r3, [r4, #4]
}
   d4e98:	4620      	mov	r0, r4
   d4e9a:	bd10      	pop	{r4, pc}

000d4e9c <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d4e9c:	4b05      	ldr	r3, [pc, #20]	; (d4eb4 <_GLOBAL__sub_I_System+0x18>)
   d4e9e:	2202      	movs	r2, #2
   d4ea0:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d4ea2:	4b05      	ldr	r3, [pc, #20]	; (d4eb8 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   d4ea4:	4a05      	ldr	r2, [pc, #20]	; (d4ebc <_GLOBAL__sub_I_System+0x20>)
   d4ea6:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   d4ea8:	2000      	movs	r0, #0
   d4eaa:	6018      	str	r0, [r3, #0]
   d4eac:	8098      	strh	r0, [r3, #4]
    SleepResult() {}
   d4eae:	7198      	strb	r0, [r3, #6]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d4eb0:	f7ff bc98 	b.w	d47e4 <set_system_mode>
   d4eb4:	2003e6e4 	.word	0x2003e6e4
   d4eb8:	2003e6d8 	.word	0x2003e6d8
   d4ebc:	ffff0000 	.word	0xffff0000

000d4ec0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d4ec0:	4b02      	ldr	r3, [pc, #8]	; (d4ecc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d4ec2:	681a      	ldr	r2, [r3, #0]
   d4ec4:	4b02      	ldr	r3, [pc, #8]	; (d4ed0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d4ec6:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d4ec8:	4770      	bx	lr
   d4eca:	bf00      	nop
   d4ecc:	2003e5f4 	.word	0x2003e5f4
   d4ed0:	2003e6e8 	.word	0x2003e6e8

000d4ed4 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d4ed4:	4770      	bx	lr

000d4ed6 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d4ed6:	7441      	strb	r1, [r0, #17]
}
   d4ed8:	4770      	bx	lr

000d4eda <__tcf_0>:
    serial1_rx_buffer = new hal_usart_ring_buffer_t();
  }
  if (!serial1_tx_buffer) {
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
   d4eda:	4770      	bx	lr

000d4edc <_ZN11USARTSerial17availableForWriteEv>:
{
   d4edc:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d4ede:	7c00      	ldrb	r0, [r0, #16]
   d4ee0:	f7ff fc40 	bl	d4764 <hal_usart_available_data_for_write>
}
   d4ee4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4ee8:	bd08      	pop	{r3, pc}

000d4eea <_ZN11USARTSerial9availableEv>:
{
   d4eea:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d4eec:	7c00      	ldrb	r0, [r0, #16]
   d4eee:	f7ff fc11 	bl	d4714 <hal_usart_available>
}
   d4ef2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4ef6:	bd08      	pop	{r3, pc}

000d4ef8 <_ZN11USARTSerial4peekEv>:
{
   d4ef8:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d4efa:	7c00      	ldrb	r0, [r0, #16]
   d4efc:	f7ff fc1a 	bl	d4734 <hal_usart_peek>
}
   d4f00:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d4f04:	bd08      	pop	{r3, pc}

000d4f06 <_ZN11USARTSerial4readEv>:
{
   d4f06:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d4f08:	7c00      	ldrb	r0, [r0, #16]
   d4f0a:	f7ff fc0b 	bl	d4724 <hal_usart_read>
}
   d4f0e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d4f12:	bd08      	pop	{r3, pc}

000d4f14 <_ZN11USARTSerial5flushEv>:
  hal_usart_flush(_serial);
   d4f14:	7c00      	ldrb	r0, [r0, #16]
   d4f16:	f7ff bc15 	b.w	d4744 <hal_usart_flush>

000d4f1a <_ZN11USARTSerial5writeEh>:
{
   d4f1a:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d4f1c:	7c45      	ldrb	r5, [r0, #17]
{
   d4f1e:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d4f20:	b12d      	cbz	r5, d4f2e <_ZN11USARTSerial5writeEh+0x14>
	  return hal_usart_write(_serial, c);
   d4f22:	7c20      	ldrb	r0, [r4, #16]
}
   d4f24:	b003      	add	sp, #12
   d4f26:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d4f2a:	f7ff bbeb 	b.w	d4704 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d4f2e:	7c00      	ldrb	r0, [r0, #16]
   d4f30:	9101      	str	r1, [sp, #4]
   d4f32:	f7ff fc17 	bl	d4764 <hal_usart_available_data_for_write>
   d4f36:	2800      	cmp	r0, #0
   d4f38:	9901      	ldr	r1, [sp, #4]
   d4f3a:	dcf2      	bgt.n	d4f22 <_ZN11USARTSerial5writeEh+0x8>
}
   d4f3c:	4628      	mov	r0, r5
   d4f3e:	b003      	add	sp, #12
   d4f40:	bd30      	pop	{r4, r5, pc}

000d4f42 <_ZN11USARTSerialD0Ev>:
   d4f42:	b510      	push	{r4, lr}
   d4f44:	2114      	movs	r1, #20
   d4f46:	4604      	mov	r4, r0
   d4f48:	f000 fa1e 	bl	d5388 <_ZdlPvj>
   d4f4c:	4620      	mov	r0, r4
   d4f4e:	bd10      	pop	{r4, pc}

000d4f50 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d4f50:	b510      	push	{r4, lr}
   d4f52:	f04f 0c00 	mov.w	ip, #0
   d4f56:	4604      	mov	r4, r0
   d4f58:	4608      	mov	r0, r1
   d4f5a:	4611      	mov	r1, r2
   d4f5c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d4f60:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d4f64:	4a04      	ldr	r2, [pc, #16]	; (d4f78 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d4f66:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d4f68:	2201      	movs	r2, #1
  _serial = serial;
   d4f6a:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d4f6c:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d4f6e:	461a      	mov	r2, r3
   d4f70:	f7ff fbc0 	bl	d46f4 <hal_usart_init>
}
   d4f74:	4620      	mov	r0, r4
   d4f76:	bd10      	pop	{r4, pc}
   d4f78:	000d5690 	.word	0x000d5690

000d4f7c <_Z22__fetch_global_Serial1v>:
{
   d4f7c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if (!serial1_rx_buffer) {
   d4f7e:	4c1a      	ldr	r4, [pc, #104]	; (d4fe8 <_Z22__fetch_global_Serial1v+0x6c>)
   d4f80:	6826      	ldr	r6, [r4, #0]
   d4f82:	b94e      	cbnz	r6, d4f98 <_Z22__fetch_global_Serial1v+0x1c>
    serial1_rx_buffer = new hal_usart_ring_buffer_t();
   d4f84:	2084      	movs	r0, #132	; 0x84
   d4f86:	f7ff f884 	bl	d4092 <_Znwj>
   d4f8a:	4605      	mov	r5, r0
   d4f8c:	b118      	cbz	r0, d4f96 <_Z22__fetch_global_Serial1v+0x1a>
   d4f8e:	2284      	movs	r2, #132	; 0x84
   d4f90:	4631      	mov	r1, r6
   d4f92:	f000 fa11 	bl	d53b8 <memset>
   d4f96:	6025      	str	r5, [r4, #0]
  if (!serial1_tx_buffer) {
   d4f98:	4d14      	ldr	r5, [pc, #80]	; (d4fec <_Z22__fetch_global_Serial1v+0x70>)
   d4f9a:	682f      	ldr	r7, [r5, #0]
   d4f9c:	b94f      	cbnz	r7, d4fb2 <_Z22__fetch_global_Serial1v+0x36>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
   d4f9e:	2084      	movs	r0, #132	; 0x84
   d4fa0:	f7ff f877 	bl	d4092 <_Znwj>
   d4fa4:	4606      	mov	r6, r0
   d4fa6:	b118      	cbz	r0, d4fb0 <_Z22__fetch_global_Serial1v+0x34>
   d4fa8:	2284      	movs	r2, #132	; 0x84
   d4faa:	4639      	mov	r1, r7
   d4fac:	f000 fa04 	bl	d53b8 <memset>
   d4fb0:	602e      	str	r6, [r5, #0]
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
   d4fb2:	4e0f      	ldr	r6, [pc, #60]	; (d4ff0 <_Z22__fetch_global_Serial1v+0x74>)
   d4fb4:	7831      	ldrb	r1, [r6, #0]
   d4fb6:	f3bf 8f5b 	dmb	ish
   d4fba:	f011 0101 	ands.w	r1, r1, #1
   d4fbe:	d110      	bne.n	d4fe2 <_Z22__fetch_global_Serial1v+0x66>
   d4fc0:	4630      	mov	r0, r6
   d4fc2:	9101      	str	r1, [sp, #4]
   d4fc4:	f7ff f86b 	bl	d409e <__cxa_guard_acquire>
   d4fc8:	9901      	ldr	r1, [sp, #4]
   d4fca:	b150      	cbz	r0, d4fe2 <_Z22__fetch_global_Serial1v+0x66>
   d4fcc:	682b      	ldr	r3, [r5, #0]
   d4fce:	6822      	ldr	r2, [r4, #0]
   d4fd0:	4808      	ldr	r0, [pc, #32]	; (d4ff4 <_Z22__fetch_global_Serial1v+0x78>)
   d4fd2:	f7ff ffbd 	bl	d4f50 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d4fd6:	4630      	mov	r0, r6
   d4fd8:	f7ff f866 	bl	d40a8 <__cxa_guard_release>
   d4fdc:	4806      	ldr	r0, [pc, #24]	; (d4ff8 <_Z22__fetch_global_Serial1v+0x7c>)
   d4fde:	f000 f9d7 	bl	d5390 <atexit>
#endif
	return serial1;
}
   d4fe2:	4804      	ldr	r0, [pc, #16]	; (d4ff4 <_Z22__fetch_global_Serial1v+0x78>)
   d4fe4:	b003      	add	sp, #12
   d4fe6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4fe8:	2003e6f0 	.word	0x2003e6f0
   d4fec:	2003e6f4 	.word	0x2003e6f4
   d4ff0:	2003e6ec 	.word	0x2003e6ec
   d4ff4:	2003e6f8 	.word	0x2003e6f8
   d4ff8:	000d4edb 	.word	0x000d4edb

000d4ffc <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d4ffc:	7441      	strb	r1, [r0, #17]
}
   d4ffe:	4770      	bx	lr

000d5000 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5000:	4770      	bx	lr

000d5002 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d5002:	4770      	bx	lr

000d5004 <_ZN9USBSerial4readEv>:
{
   d5004:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d5006:	2100      	movs	r1, #0
   d5008:	7c00      	ldrb	r0, [r0, #16]
   d500a:	f7ff fbd3 	bl	d47b4 <HAL_USB_USART_Receive_Data>
}
   d500e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d5012:	bd08      	pop	{r3, pc}

000d5014 <_ZN9USBSerial4peekEv>:
{
   d5014:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d5016:	2101      	movs	r1, #1
   d5018:	7c00      	ldrb	r0, [r0, #16]
   d501a:	f7ff fbcb 	bl	d47b4 <HAL_USB_USART_Receive_Data>
}
   d501e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d5022:	bd08      	pop	{r3, pc}

000d5024 <_ZN9USBSerial17availableForWriteEv>:
{
   d5024:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d5026:	7c00      	ldrb	r0, [r0, #16]
   d5028:	f7ff fbbc 	bl	d47a4 <HAL_USB_USART_Available_Data_For_Write>
}
   d502c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5030:	bd08      	pop	{r3, pc}

000d5032 <_ZN9USBSerial9availableEv>:
{
   d5032:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d5034:	7c00      	ldrb	r0, [r0, #16]
   d5036:	f7ff fbad 	bl	d4794 <HAL_USB_USART_Available_Data>
}
   d503a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d503e:	bd08      	pop	{r3, pc}

000d5040 <_ZN9USBSerial5writeEh>:
{
   d5040:	b513      	push	{r0, r1, r4, lr}
   d5042:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5044:	7c00      	ldrb	r0, [r0, #16]
{
   d5046:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5048:	f7ff fbac 	bl	d47a4 <HAL_USB_USART_Available_Data_For_Write>
   d504c:	2800      	cmp	r0, #0
   d504e:	9901      	ldr	r1, [sp, #4]
   d5050:	dc01      	bgt.n	d5056 <_ZN9USBSerial5writeEh+0x16>
   d5052:	7c60      	ldrb	r0, [r4, #17]
   d5054:	b120      	cbz	r0, d5060 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d5056:	7c20      	ldrb	r0, [r4, #16]
   d5058:	f7ff fbb4 	bl	d47c4 <HAL_USB_USART_Send_Data>
   d505c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d5060:	b002      	add	sp, #8
   d5062:	bd10      	pop	{r4, pc}

000d5064 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d5064:	7c00      	ldrb	r0, [r0, #16]
   d5066:	f7ff bbb5 	b.w	d47d4 <HAL_USB_USART_Flush_Data>

000d506a <_ZN9USBSerialD0Ev>:
   d506a:	b510      	push	{r4, lr}
   d506c:	2114      	movs	r1, #20
   d506e:	4604      	mov	r4, r0
   d5070:	f000 f98a 	bl	d5388 <_ZdlPvj>
   d5074:	4620      	mov	r0, r4
   d5076:	bd10      	pop	{r4, pc}

000d5078 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5078:	b510      	push	{r4, lr}
   d507a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d507e:	4604      	mov	r4, r0
   d5080:	4608      	mov	r0, r1
   d5082:	2100      	movs	r1, #0
   d5084:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d5088:	4b04      	ldr	r3, [pc, #16]	; (d509c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d508a:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d508c:	2301      	movs	r3, #1
  _serial = serial;
   d508e:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d5090:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d5092:	4611      	mov	r1, r2
   d5094:	f7ff fb6e 	bl	d4774 <HAL_USB_USART_Init>
}
   d5098:	4620      	mov	r0, r4
   d509a:	bd10      	pop	{r4, pc}
   d509c:	000d56c0 	.word	0x000d56c0

000d50a0 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d50a0:	7c00      	ldrb	r0, [r0, #16]
   d50a2:	2200      	movs	r2, #0
   d50a4:	f7ff bb6e 	b.w	d4784 <HAL_USB_USART_Begin>

000d50a8 <_Z19acquireSerialBufferv>:
{
   d50a8:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d50aa:	2214      	movs	r2, #20
{
   d50ac:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d50ae:	2100      	movs	r1, #0
   d50b0:	f000 f982 	bl	d53b8 <memset>
}
   d50b4:	4620      	mov	r0, r4
   d50b6:	bd10      	pop	{r4, pc}

000d50b8 <_Z16_fetch_usbserialv>:
{
   d50b8:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d50ba:	4c0f      	ldr	r4, [pc, #60]	; (d50f8 <_Z16_fetch_usbserialv+0x40>)
{
   d50bc:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d50be:	a803      	add	r0, sp, #12
   d50c0:	f7ff fff2 	bl	d50a8 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d50c4:	7821      	ldrb	r1, [r4, #0]
   d50c6:	f3bf 8f5b 	dmb	ish
   d50ca:	f011 0101 	ands.w	r1, r1, #1
   d50ce:	d10f      	bne.n	d50f0 <_Z16_fetch_usbserialv+0x38>
   d50d0:	4620      	mov	r0, r4
   d50d2:	9101      	str	r1, [sp, #4]
   d50d4:	f7fe ffe3 	bl	d409e <__cxa_guard_acquire>
   d50d8:	9901      	ldr	r1, [sp, #4]
   d50da:	b148      	cbz	r0, d50f0 <_Z16_fetch_usbserialv+0x38>
   d50dc:	aa03      	add	r2, sp, #12
   d50de:	4807      	ldr	r0, [pc, #28]	; (d50fc <_Z16_fetch_usbserialv+0x44>)
   d50e0:	f7ff ffca 	bl	d5078 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d50e4:	4620      	mov	r0, r4
   d50e6:	f7fe ffdf 	bl	d40a8 <__cxa_guard_release>
   d50ea:	4805      	ldr	r0, [pc, #20]	; (d5100 <_Z16_fetch_usbserialv+0x48>)
   d50ec:	f000 f950 	bl	d5390 <atexit>
	return _usbserial;
}
   d50f0:	4802      	ldr	r0, [pc, #8]	; (d50fc <_Z16_fetch_usbserialv+0x44>)
   d50f2:	b008      	add	sp, #32
   d50f4:	bd10      	pop	{r4, pc}
   d50f6:	bf00      	nop
   d50f8:	2003e70c 	.word	0x2003e70c
   d50fc:	2003e710 	.word	0x2003e710
   d5100:	000d5001 	.word	0x000d5001

000d5104 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d5104:	4b01      	ldr	r3, [pc, #4]	; (d510c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d5106:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d5108:	4770      	bx	lr
   d510a:	bf00      	nop
   d510c:	2003e5f8 	.word	0x2003e5f8

000d5110 <serialEventRun>:
{
   d5110:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d5112:	4b0b      	ldr	r3, [pc, #44]	; (d5140 <serialEventRun+0x30>)
   d5114:	b143      	cbz	r3, d5128 <serialEventRun+0x18>
   d5116:	f7ff ffcf 	bl	d50b8 <_Z16_fetch_usbserialv>
   d511a:	6803      	ldr	r3, [r0, #0]
   d511c:	691b      	ldr	r3, [r3, #16]
   d511e:	4798      	blx	r3
   d5120:	2800      	cmp	r0, #0
   d5122:	dd01      	ble.n	d5128 <serialEventRun+0x18>
        serialEvent();
   d5124:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d5128:	4b06      	ldr	r3, [pc, #24]	; (d5144 <serialEventRun+0x34>)
   d512a:	b143      	cbz	r3, d513e <serialEventRun+0x2e>
   d512c:	f7ff ff26 	bl	d4f7c <_Z22__fetch_global_Serial1v>
   d5130:	6803      	ldr	r3, [r0, #0]
   d5132:	691b      	ldr	r3, [r3, #16]
   d5134:	4798      	blx	r3
   d5136:	2800      	cmp	r0, #0
   d5138:	dd01      	ble.n	d513e <serialEventRun+0x2e>
        serialEvent1();
   d513a:	f3af 8000 	nop.w
}
   d513e:	bd08      	pop	{r3, pc}
	...

000d5148 <_post_loop>:
{
   d5148:	b508      	push	{r3, lr}
	serialEventRun();
   d514a:	f7ff ffe1 	bl	d5110 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d514e:	f7ff fa31 	bl	d45b4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d5152:	4b01      	ldr	r3, [pc, #4]	; (d5158 <_post_loop+0x10>)
   d5154:	6018      	str	r0, [r3, #0]
}
   d5156:	bd08      	pop	{r3, pc}
   d5158:	2003e738 	.word	0x2003e738

000d515c <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d515c:	4805      	ldr	r0, [pc, #20]	; (d5174 <_Z33system_initialize_user_backup_ramv+0x18>)
   d515e:	4a06      	ldr	r2, [pc, #24]	; (d5178 <_Z33system_initialize_user_backup_ramv+0x1c>)
   d5160:	4906      	ldr	r1, [pc, #24]	; (d517c <_Z33system_initialize_user_backup_ramv+0x20>)
{
   d5162:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d5164:	1a12      	subs	r2, r2, r0
   d5166:	f000 f919 	bl	d539c <memcpy>
    __backup_sram_signature = signature;
   d516a:	4b05      	ldr	r3, [pc, #20]	; (d5180 <_Z33system_initialize_user_backup_ramv+0x24>)
   d516c:	4a05      	ldr	r2, [pc, #20]	; (d5184 <_Z33system_initialize_user_backup_ramv+0x28>)
   d516e:	601a      	str	r2, [r3, #0]
}
   d5170:	bd08      	pop	{r3, pc}
   d5172:	bf00      	nop
   d5174:	2003f400 	.word	0x2003f400
   d5178:	2003f404 	.word	0x2003f404
   d517c:	000d5710 	.word	0x000d5710
   d5180:	2003f400 	.word	0x2003f400
   d5184:	9a271c1e 	.word	0x9a271c1e

000d5188 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d5188:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d518a:	2300      	movs	r3, #0
   d518c:	9300      	str	r3, [sp, #0]
   d518e:	461a      	mov	r2, r3
   d5190:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5194:	f7ff fb40 	bl	d4818 <system_ctrl_set_result>
}
   d5198:	b003      	add	sp, #12
   d519a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d51a0 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d51a0:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d51a2:	8843      	ldrh	r3, [r0, #2]
   d51a4:	2b0a      	cmp	r3, #10
   d51a6:	d008      	beq.n	d51ba <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d51a8:	2b50      	cmp	r3, #80	; 0x50
   d51aa:	d10b      	bne.n	d51c4 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d51ac:	4b09      	ldr	r3, [pc, #36]	; (d51d4 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d51ae:	681b      	ldr	r3, [r3, #0]
   d51b0:	b14b      	cbz	r3, d51c6 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d51b2:	b003      	add	sp, #12
   d51b4:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d51b8:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d51ba:	f7ff ffe5 	bl	d5188 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d51be:	b003      	add	sp, #12
   d51c0:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d51c4:	2300      	movs	r3, #0
   d51c6:	9300      	str	r3, [sp, #0]
   d51c8:	461a      	mov	r2, r3
   d51ca:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d51ce:	f7ff fb23 	bl	d4818 <system_ctrl_set_result>
}
   d51d2:	e7f4      	b.n	d51be <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d51d4:	2003e728 	.word	0x2003e728

000d51d8 <module_user_init_hook>:
{
   d51d8:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d51da:	4812      	ldr	r0, [pc, #72]	; (d5224 <module_user_init_hook+0x4c>)
   d51dc:	2100      	movs	r1, #0
   d51de:	f7ff fba5 	bl	d492c <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   d51e2:	4b11      	ldr	r3, [pc, #68]	; (d5228 <module_user_init_hook+0x50>)
   d51e4:	681a      	ldr	r2, [r3, #0]
   d51e6:	4b11      	ldr	r3, [pc, #68]	; (d522c <module_user_init_hook+0x54>)
   d51e8:	429a      	cmp	r2, r3
   d51ea:	4b11      	ldr	r3, [pc, #68]	; (d5230 <module_user_init_hook+0x58>)
   d51ec:	bf0c      	ite	eq
   d51ee:	2201      	moveq	r2, #1
   d51f0:	2200      	movne	r2, #0
   d51f2:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d51f4:	d001      	beq.n	d51fa <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   d51f6:	f7ff ffb1 	bl	d515c <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d51fa:	f7ff f9d3 	bl	d45a4 <HAL_RNG_GetRandomNumber>
   d51fe:	4604      	mov	r4, r0
    srand(seed);
   d5200:	f000 f8e2 	bl	d53c8 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d5204:	4b0b      	ldr	r3, [pc, #44]	; (d5234 <module_user_init_hook+0x5c>)
   d5206:	b113      	cbz	r3, d520e <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   d5208:	4620      	mov	r0, r4
   d520a:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d520e:	2100      	movs	r1, #0
   d5210:	4808      	ldr	r0, [pc, #32]	; (d5234 <module_user_init_hook+0x5c>)
   d5212:	f7ff fb13 	bl	d483c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d5216:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d521a:	4807      	ldr	r0, [pc, #28]	; (d5238 <module_user_init_hook+0x60>)
   d521c:	2100      	movs	r1, #0
   d521e:	f7ff baf1 	b.w	d4804 <system_ctrl_set_app_request_handler>
   d5222:	bf00      	nop
   d5224:	000d5105 	.word	0x000d5105
   d5228:	2003f400 	.word	0x2003f400
   d522c:	9a271c1e 	.word	0x9a271c1e
   d5230:	2003e724 	.word	0x2003e724
   d5234:	00000000 	.word	0x00000000
   d5238:	000d51a1 	.word	0x000d51a1

000d523c <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d523c:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d523e:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d5240:	d902      	bls.n	d5248 <pinAvailable+0xc>
    return false;
   d5242:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d5244:	b002      	add	sp, #8
   d5246:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d5248:	f1a0 030b 	sub.w	r3, r0, #11
   d524c:	2b02      	cmp	r3, #2
   d524e:	d81a      	bhi.n	d5286 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d5250:	4c17      	ldr	r4, [pc, #92]	; (d52b0 <pinAvailable+0x74>)
   d5252:	7821      	ldrb	r1, [r4, #0]
   d5254:	f3bf 8f5b 	dmb	ish
   d5258:	f011 0101 	ands.w	r1, r1, #1
   d525c:	d10b      	bne.n	d5276 <pinAvailable+0x3a>
   d525e:	4620      	mov	r0, r4
   d5260:	9101      	str	r1, [sp, #4]
   d5262:	f7fe ff1c 	bl	d409e <__cxa_guard_acquire>
   d5266:	9901      	ldr	r1, [sp, #4]
   d5268:	b128      	cbz	r0, d5276 <pinAvailable+0x3a>
   d526a:	4812      	ldr	r0, [pc, #72]	; (d52b4 <pinAvailable+0x78>)
   d526c:	f7ff fe0c 	bl	d4e88 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d5270:	4620      	mov	r0, r4
   d5272:	f7fe ff19 	bl	d40a8 <__cxa_guard_release>
   d5276:	4b0f      	ldr	r3, [pc, #60]	; (d52b4 <pinAvailable+0x78>)
   d5278:	7818      	ldrb	r0, [r3, #0]
   d527a:	f7ff fa33 	bl	d46e4 <hal_spi_is_enabled>
   d527e:	2800      	cmp	r0, #0
   d5280:	d1df      	bne.n	d5242 <pinAvailable+0x6>
  return true; // 'pin' is available
   d5282:	2001      	movs	r0, #1
   d5284:	e7de      	b.n	d5244 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d5286:	2801      	cmp	r0, #1
   d5288:	d809      	bhi.n	d529e <pinAvailable+0x62>
   d528a:	f000 f859 	bl	d5340 <_Z19__fetch_global_Wirev>
   d528e:	2100      	movs	r1, #0
   d5290:	7c00      	ldrb	r0, [r0, #16]
   d5292:	f7ff f9ef 	bl	d4674 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d5296:	f080 0001 	eor.w	r0, r0, #1
   d529a:	b2c0      	uxtb	r0, r0
   d529c:	e7d2      	b.n	d5244 <pinAvailable+0x8>
   d529e:	3809      	subs	r0, #9
   d52a0:	2801      	cmp	r0, #1
   d52a2:	d8ee      	bhi.n	d5282 <pinAvailable+0x46>
   d52a4:	f7ff fe6a 	bl	d4f7c <_Z22__fetch_global_Serial1v>
   d52a8:	7c00      	ldrb	r0, [r0, #16]
   d52aa:	f7ff fa53 	bl	d4754 <hal_usart_is_enabled>
   d52ae:	e7f2      	b.n	d5296 <pinAvailable+0x5a>
   d52b0:	2003e72c 	.word	0x2003e72c
   d52b4:	2003e730 	.word	0x2003e730

000d52b8 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d52b8:	2823      	cmp	r0, #35	; 0x23
{
   d52ba:	b538      	push	{r3, r4, r5, lr}
   d52bc:	4604      	mov	r4, r0
   d52be:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d52c0:	d80a      	bhi.n	d52d8 <pinMode+0x20>
   d52c2:	29ff      	cmp	r1, #255	; 0xff
   d52c4:	d008      	beq.n	d52d8 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d52c6:	f7ff ffb9 	bl	d523c <pinAvailable>
   d52ca:	b128      	cbz	r0, d52d8 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d52cc:	4629      	mov	r1, r5
   d52ce:	4620      	mov	r0, r4
}
   d52d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d52d4:	f7ff b976 	b.w	d45c4 <HAL_Pin_Mode>
}
   d52d8:	bd38      	pop	{r3, r4, r5, pc}

000d52da <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d52da:	b538      	push	{r3, r4, r5, lr}
   d52dc:	4604      	mov	r4, r0
   d52de:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d52e0:	f7ff f978 	bl	d45d4 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d52e4:	28ff      	cmp	r0, #255	; 0xff
   d52e6:	d010      	beq.n	d530a <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   d52e8:	2806      	cmp	r0, #6
   d52ea:	d804      	bhi.n	d52f6 <digitalWrite+0x1c>
   d52ec:	234d      	movs	r3, #77	; 0x4d
   d52ee:	fa23 f000 	lsr.w	r0, r3, r0
   d52f2:	07c3      	lsls	r3, r0, #31
   d52f4:	d409      	bmi.n	d530a <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d52f6:	4620      	mov	r0, r4
   d52f8:	f7ff ffa0 	bl	d523c <pinAvailable>
   d52fc:	b128      	cbz	r0, d530a <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d52fe:	4629      	mov	r1, r5
   d5300:	4620      	mov	r0, r4
}
   d5302:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   d5306:	f7ff b96d 	b.w	d45e4 <HAL_GPIO_Write>
}
   d530a:	bd38      	pop	{r3, r4, r5, pc}

000d530c <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d530c:	4770      	bx	lr
	...

000d5310 <_Z17acquireWireBufferv>:
{
   d5310:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d5312:	2300      	movs	r3, #0
   d5314:	2520      	movs	r5, #32
   d5316:	8043      	strh	r3, [r0, #2]
   d5318:	2314      	movs	r3, #20
{
   d531a:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d531c:	8003      	strh	r3, [r0, #0]
   d531e:	6085      	str	r5, [r0, #8]
   d5320:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d5322:	4906      	ldr	r1, [pc, #24]	; (d533c <_Z17acquireWireBufferv+0x2c>)
   d5324:	4628      	mov	r0, r5
   d5326:	f000 f831 	bl	d538c <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d532a:	4904      	ldr	r1, [pc, #16]	; (d533c <_Z17acquireWireBufferv+0x2c>)
	};
   d532c:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d532e:	4628      	mov	r0, r5
   d5330:	f000 f82c 	bl	d538c <_ZnajRKSt9nothrow_t>
	};
   d5334:	60e0      	str	r0, [r4, #12]
}
   d5336:	4620      	mov	r0, r4
   d5338:	bd38      	pop	{r3, r4, r5, pc}
   d533a:	bf00      	nop
   d533c:	000d56e8 	.word	0x000d56e8

000d5340 <_Z19__fetch_global_Wirev>:
{
   d5340:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d5342:	4d0e      	ldr	r5, [pc, #56]	; (d537c <_Z19__fetch_global_Wirev+0x3c>)
   d5344:	7829      	ldrb	r1, [r5, #0]
   d5346:	f3bf 8f5b 	dmb	ish
   d534a:	f011 0401 	ands.w	r4, r1, #1
{
   d534e:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d5350:	d111      	bne.n	d5376 <_Z19__fetch_global_Wirev+0x36>
   d5352:	4628      	mov	r0, r5
   d5354:	f7fe fea3 	bl	d409e <__cxa_guard_acquire>
   d5358:	b168      	cbz	r0, d5376 <_Z19__fetch_global_Wirev+0x36>
   d535a:	a801      	add	r0, sp, #4
   d535c:	f7ff ffd8 	bl	d5310 <_Z17acquireWireBufferv>
   d5360:	aa01      	add	r2, sp, #4
   d5362:	4621      	mov	r1, r4
   d5364:	4806      	ldr	r0, [pc, #24]	; (d5380 <_Z19__fetch_global_Wirev+0x40>)
   d5366:	f7ff fbab 	bl	d4ac0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d536a:	4628      	mov	r0, r5
   d536c:	f7fe fe9c 	bl	d40a8 <__cxa_guard_release>
   d5370:	4804      	ldr	r0, [pc, #16]	; (d5384 <_Z19__fetch_global_Wirev+0x44>)
   d5372:	f000 f80d 	bl	d5390 <atexit>
	return wire;
}
   d5376:	4802      	ldr	r0, [pc, #8]	; (d5380 <_Z19__fetch_global_Wirev+0x40>)
   d5378:	b007      	add	sp, #28
   d537a:	bd30      	pop	{r4, r5, pc}
   d537c:	2003e73c 	.word	0x2003e73c
   d5380:	2003e740 	.word	0x2003e740
   d5384:	000d530d 	.word	0x000d530d

000d5388 <_ZdlPvj>:
   d5388:	f7fe be87 	b.w	d409a <_ZdlPv>

000d538c <_ZnajRKSt9nothrow_t>:
   d538c:	f7fe be83 	b.w	d4096 <_Znaj>

000d5390 <atexit>:
   d5390:	2300      	movs	r3, #0
   d5392:	4601      	mov	r1, r0
   d5394:	461a      	mov	r2, r3
   d5396:	4618      	mov	r0, r3
   d5398:	f000 b842 	b.w	d5420 <__register_exitproc>

000d539c <memcpy>:
   d539c:	440a      	add	r2, r1
   d539e:	4291      	cmp	r1, r2
   d53a0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   d53a4:	d100      	bne.n	d53a8 <memcpy+0xc>
   d53a6:	4770      	bx	lr
   d53a8:	b510      	push	{r4, lr}
   d53aa:	f811 4b01 	ldrb.w	r4, [r1], #1
   d53ae:	f803 4f01 	strb.w	r4, [r3, #1]!
   d53b2:	4291      	cmp	r1, r2
   d53b4:	d1f9      	bne.n	d53aa <memcpy+0xe>
   d53b6:	bd10      	pop	{r4, pc}

000d53b8 <memset>:
   d53b8:	4402      	add	r2, r0
   d53ba:	4603      	mov	r3, r0
   d53bc:	4293      	cmp	r3, r2
   d53be:	d100      	bne.n	d53c2 <memset+0xa>
   d53c0:	4770      	bx	lr
   d53c2:	f803 1b01 	strb.w	r1, [r3], #1
   d53c6:	e7f9      	b.n	d53bc <memset+0x4>

000d53c8 <srand>:
   d53c8:	b538      	push	{r3, r4, r5, lr}
   d53ca:	4b0d      	ldr	r3, [pc, #52]	; (d5400 <srand+0x38>)
   d53cc:	681d      	ldr	r5, [r3, #0]
   d53ce:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d53d0:	4604      	mov	r4, r0
   d53d2:	b97b      	cbnz	r3, d53f4 <srand+0x2c>
   d53d4:	2018      	movs	r0, #24
   d53d6:	f7ff fa99 	bl	d490c <malloc>
   d53da:	4a0a      	ldr	r2, [pc, #40]	; (d5404 <srand+0x3c>)
   d53dc:	4b0a      	ldr	r3, [pc, #40]	; (d5408 <srand+0x40>)
   d53de:	63a8      	str	r0, [r5, #56]	; 0x38
   d53e0:	e9c0 2300 	strd	r2, r3, [r0]
   d53e4:	4b09      	ldr	r3, [pc, #36]	; (d540c <srand+0x44>)
   d53e6:	6083      	str	r3, [r0, #8]
   d53e8:	230b      	movs	r3, #11
   d53ea:	8183      	strh	r3, [r0, #12]
   d53ec:	2201      	movs	r2, #1
   d53ee:	2300      	movs	r3, #0
   d53f0:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d53f4:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d53f6:	2200      	movs	r2, #0
   d53f8:	611c      	str	r4, [r3, #16]
   d53fa:	615a      	str	r2, [r3, #20]
   d53fc:	bd38      	pop	{r3, r4, r5, pc}
   d53fe:	bf00      	nop
   d5400:	2003e5f8 	.word	0x2003e5f8
   d5404:	abcd330e 	.word	0xabcd330e
   d5408:	e66d1234 	.word	0xe66d1234
   d540c:	0005deec 	.word	0x0005deec

000d5410 <strlen>:
   d5410:	4603      	mov	r3, r0
   d5412:	f813 2b01 	ldrb.w	r2, [r3], #1
   d5416:	2a00      	cmp	r2, #0
   d5418:	d1fb      	bne.n	d5412 <strlen+0x2>
   d541a:	1a18      	subs	r0, r3, r0
   d541c:	3801      	subs	r0, #1
   d541e:	4770      	bx	lr

000d5420 <__register_exitproc>:
   d5420:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d5424:	f8df 80b8 	ldr.w	r8, [pc, #184]	; d54e0 <__register_exitproc+0xc0>
   d5428:	4606      	mov	r6, r0
   d542a:	f8d8 0000 	ldr.w	r0, [r8]
   d542e:	461f      	mov	r7, r3
   d5430:	460d      	mov	r5, r1
   d5432:	4691      	mov	r9, r2
   d5434:	f000 f856 	bl	d54e4 <__retarget_lock_acquire_recursive>
   d5438:	4b25      	ldr	r3, [pc, #148]	; (d54d0 <__register_exitproc+0xb0>)
   d543a:	681c      	ldr	r4, [r3, #0]
   d543c:	b934      	cbnz	r4, d544c <__register_exitproc+0x2c>
   d543e:	4c25      	ldr	r4, [pc, #148]	; (d54d4 <__register_exitproc+0xb4>)
   d5440:	601c      	str	r4, [r3, #0]
   d5442:	4b25      	ldr	r3, [pc, #148]	; (d54d8 <__register_exitproc+0xb8>)
   d5444:	b113      	cbz	r3, d544c <__register_exitproc+0x2c>
   d5446:	681b      	ldr	r3, [r3, #0]
   d5448:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   d544c:	6863      	ldr	r3, [r4, #4]
   d544e:	2b1f      	cmp	r3, #31
   d5450:	dd07      	ble.n	d5462 <__register_exitproc+0x42>
   d5452:	f8d8 0000 	ldr.w	r0, [r8]
   d5456:	f000 f847 	bl	d54e8 <__retarget_lock_release_recursive>
   d545a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d545e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d5462:	b34e      	cbz	r6, d54b8 <__register_exitproc+0x98>
   d5464:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   d5468:	b988      	cbnz	r0, d548e <__register_exitproc+0x6e>
   d546a:	4b1c      	ldr	r3, [pc, #112]	; (d54dc <__register_exitproc+0xbc>)
   d546c:	b923      	cbnz	r3, d5478 <__register_exitproc+0x58>
   d546e:	f8d8 0000 	ldr.w	r0, [r8]
   d5472:	f000 f838 	bl	d54e6 <__retarget_lock_release>
   d5476:	e7f0      	b.n	d545a <__register_exitproc+0x3a>
   d5478:	f44f 7084 	mov.w	r0, #264	; 0x108
   d547c:	f7ff fa46 	bl	d490c <malloc>
   d5480:	2800      	cmp	r0, #0
   d5482:	d0f4      	beq.n	d546e <__register_exitproc+0x4e>
   d5484:	2300      	movs	r3, #0
   d5486:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   d548a:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   d548e:	6863      	ldr	r3, [r4, #4]
   d5490:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   d5494:	2201      	movs	r2, #1
   d5496:	409a      	lsls	r2, r3
   d5498:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   d549c:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   d54a0:	4313      	orrs	r3, r2
   d54a2:	2e02      	cmp	r6, #2
   d54a4:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   d54a8:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   d54ac:	bf02      	ittt	eq
   d54ae:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   d54b2:	431a      	orreq	r2, r3
   d54b4:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
   d54b8:	6863      	ldr	r3, [r4, #4]
   d54ba:	f8d8 0000 	ldr.w	r0, [r8]
   d54be:	1c5a      	adds	r2, r3, #1
   d54c0:	3302      	adds	r3, #2
   d54c2:	6062      	str	r2, [r4, #4]
   d54c4:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   d54c8:	f000 f80e 	bl	d54e8 <__retarget_lock_release_recursive>
   d54cc:	2000      	movs	r0, #0
   d54ce:	e7c6      	b.n	d545e <__register_exitproc+0x3e>
   d54d0:	2003e7e0 	.word	0x2003e7e0
   d54d4:	2003e754 	.word	0x2003e754
   d54d8:	00000000 	.word	0x00000000
   d54dc:	000d490d 	.word	0x000d490d
   d54e0:	2003e65c 	.word	0x2003e65c

000d54e4 <__retarget_lock_acquire_recursive>:
   d54e4:	4770      	bx	lr

000d54e6 <__retarget_lock_release>:
   d54e6:	4770      	bx	lr

000d54e8 <__retarget_lock_release_recursive>:
   d54e8:	4770      	bx	lr

000d54ea <link_code_end>:
	...

000d54ec <dynalib_user>:
   d54ec:	401d 000d 4059 000d 4081 000d 4085 000d     .@..Y@...@...@..
   d54fc:	0000 0000 504d 3655 3530 2030 6f63 6e6e     ....MPU6050 conn
   d550c:	6365 6974 6e6f 7320 6375 6563 7373 7566     ection successfu
   d551c:	006c 504d 3655 3530 2030 6f63 6e6e 6365     l.MPU6050 connec
   d552c:	6974 6e6f 6620 6961 656c 0064 6e49 7469     tion failed.Init
   d553c:	6169 696c 697a 676e 4920 4332 6420 7665     ializing I2C dev
   d554c:	6369 7365 2e2e 002e 6554 7473 6e69 2067     ices....Testing 
   d555c:	6564 6976 6563 6320 6e6f 656e 7463 6f69     device connectio
   d556c:	736e 2e2e 002e 2f61 3a67 0009               ns....a/g:..

000d5578 <_ZTVN5spark13CellularClassE>:
	...
   d5580:	49b3 000d 49a9 000d 499f 000d 4955 000d     .I...I...I..UI..
   d5590:	4993 000d 4987 000d 4c95 000d 4c9d 000d     .I...I...L...L..
   d55a0:	497b 000d 4973 000d 4969 000d 495f 000d     {I..sI..iI.._I..
   d55b0:	4ccd 000d                                   .L..

000d55b4 <_ZTVN5spark13EthernetClassE>:
	...
   d55bc:	4a4b 000d 4a41 000d 4a37 000d 4a2d 000d     KJ..AJ..7J..-J..
   d55cc:	4a21 000d 4a15 000d 4c95 000d 4c9d 000d     !J...J...L...L..
   d55dc:	4a09 000d 4a01 000d 49f7 000d 49ed 000d     .J...J...I...I..
   d55ec:	4ccd 000d                                   .L..

000d55f0 <_ZTV7TwoWire>:
	...
   d55f8:	4a69 000d 4ab3 000d 4a8b 000d 4a6b 000d     iJ...J...J..kJ..
   d5608:	4a93 000d 4a9b 000d 4aa3 000d 4aab 000d     .J...J...J...J..

000d5618 <_ZTV9IPAddress>:
	...
   d5620:	4b6f 000d 4b5f 000d 4b61 000d 7061 0070     oK.._K..aK..app.

000d5630 <_ZTVN5spark12NetworkClassE>:
	...
   d5638:	4c55 000d 4c5f 000d 4c69 000d 4c73 000d     UL.._L..iL..sL..
   d5648:	4c7d 000d 4c89 000d 4c95 000d 4c9d 000d     }L...L...L...L..
   d5658:	4ca5 000d 4cb1 000d 4cb9 000d 4cc3 000d     .L...L...L...L..
   d5668:	4ccd 000d 5925 252d 2d6d 6425 2554 3a48     .L..%Y-%m-%dT%H:
   d5678:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000d5688 <_ZTV11USARTSerial>:
	...
   d5690:	4ed5 000d 4f43 000d 4f1b 000d 4db5 000d     .N..CO...O...M..
   d56a0:	4eeb 000d 4f07 000d 4ef9 000d 4f15 000d     .N...O...N...O..
   d56b0:	4ed7 000d 4edd 000d                         .N...N..

000d56b8 <_ZTV9USBSerial>:
	...
   d56c0:	5003 000d 506b 000d 5041 000d 4db5 000d     .P..kP..AP...M..
   d56d0:	5033 000d 5005 000d 5015 000d 5065 000d     3P...P...P..eP..
   d56e0:	5025 000d 4ffd 000d                         %P...O..

000d56e8 <_ZSt7nothrow>:
	...

000d56e9 <link_const_variable_data_end>:
   d56e9:	00          	.byte	0x00
	...

000d56ec <link_constructors_location>:
   d56ec:	000d4271 	.word	0x000d4271
   d56f0:	000d4945 	.word	0x000d4945
   d56f4:	000d49bd 	.word	0x000d49bd
   d56f8:	000d4a55 	.word	0x000d4a55
   d56fc:	000d4c45 	.word	0x000d4c45
   d5700:	000d4da1 	.word	0x000d4da1
   d5704:	000d4e7d 	.word	0x000d4e7d
   d5708:	000d4e9d 	.word	0x000d4e9d
   d570c:	000d4ec1 	.word	0x000d4ec1
