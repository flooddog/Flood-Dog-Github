
/Users/philipchatterton/IoCP/Particle/Flood_Dog/test_sonic/target/2.2.0/boron/test_sonic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00002a74  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d6a90  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000074  2003e5cc  000d6a94  0001e5cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000001b0  2003e640  2003e640  0002e640  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d6b08  000d6b08  00026b08  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d6b30  000d6b30  00026b30  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000e5f13  00000000  00000000  00026b34  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000ffb7  00000000  00000000  0010ca47  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0002526e  00000000  00000000  0011c9fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002150  00000000  00000000  00141c6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00006670  00000000  00000000  00143dbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0002fe0f  00000000  00000000  0014a42c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0002a1d3  00000000  00000000  0017a23b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    001025e0  00000000  00000000  001a440e  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00005d08  00000000  00000000  002a69f0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f002 f9b9 	bl	d63a4 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f002 f9db 	bl	d63f4 <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e5cc 	.word	0x2003e5cc
   d4048:	000d6a94 	.word	0x000d6a94
   d404c:	2003e640 	.word	0x2003e640
   d4050:	2003e640 	.word	0x2003e640
   d4054:	2003e7ed 	.word	0x2003e7ed

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405a:	4e07      	ldr	r6, [pc, #28]	; (d4078 <module_user_init+0x20>)
   d405c:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
    module_user_init_hook();
   d405e:	f002 f965 	bl	d632c <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4062:	1ba4      	subs	r4, r4, r6
   d4064:	08a4      	lsrs	r4, r4, #2
   d4066:	2500      	movs	r5, #0
   d4068:	42a5      	cmp	r5, r4
   d406a:	d100      	bne.n	d406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d406e:	f856 3b04 	ldr.w	r3, [r6], #4
   d4072:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f7      	b.n	d4068 <module_user_init+0x10>
   d4078:	000d6a64 	.word	0x000d6a64
   d407c:	000d6a88 	.word	0x000d6a88

000d4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4080:	f000 b848 	b.w	d4114 <setup>

000d4084 <module_user_loop>:
}

void module_user_loop() {
   d4084:	b508      	push	{r3, lr}
    loop();
   d4086:	f000 f855 	bl	d4134 <loop>
    _post_loop();
}
   d408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d408e:	f002 b905 	b.w	d629c <_post_loop>

000d4092 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4092:	f000 bad9 	b.w	d4648 <malloc>

000d4096 <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d4096:	f000 badf 	b.w	d4658 <free>
	...

000d409c <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d409c:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d409e:	4a03      	ldr	r2, [pc, #12]	; (d40ac <__cxa_pure_virtual+0x10>)
   d40a0:	2100      	movs	r1, #0
   d40a2:	200c      	movs	r0, #12
   d40a4:	f000 fa2c 	bl	d4500 <panic_>
  while (1);
   d40a8:	e7fe      	b.n	d40a8 <__cxa_pure_virtual+0xc>
   d40aa:	bf00      	nop
   d40ac:	000d43a1 	.word	0x000d43a1

000d40b0 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40b0:	7800      	ldrb	r0, [r0, #0]
   d40b2:	fab0 f080 	clz	r0, r0
   d40b6:	0940      	lsrs	r0, r0, #5
   d40b8:	4770      	bx	lr

000d40ba <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40ba:	2301      	movs	r3, #1
   d40bc:	7003      	strb	r3, [r0, #0]
   d40be:	4770      	bx	lr

000d40c0 <_ZN5spark10LogHandler5writeEPKcj>:
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
    // Default implementation does nothing
}
   d40c0:	4770      	bx	lr

000d40c2 <_ZN5spark16StreamLogHandler5writeEPKcj>:
inline Print* spark::StreamLogHandler::stream() const {
    return stream_;
}

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
   d40c2:	6a00      	ldr	r0, [r0, #32]
   d40c4:	6803      	ldr	r3, [r0, #0]
   d40c6:	68db      	ldr	r3, [r3, #12]
   d40c8:	4718      	bx	r3
	...

000d40cc <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   d40cc:	4b0a      	ldr	r3, [pc, #40]	; (d40f8 <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
   d40ce:	b510      	push	{r4, lr}
   d40d0:	4604      	mov	r4, r0
   d40d2:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   d40d4:	f000 ff30 	bl	d4f38 <_ZN5spark10LogManager8instanceEv>
   d40d8:	4621      	mov	r1, r4
   d40da:	f001 f92e 	bl	d533a <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
   d40de:	f002 f895 	bl	d620c <_Z16_fetch_usbserialv>
   d40e2:	f002 f887 	bl	d61f4 <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
   d40e6:	4620      	mov	r0, r4
   d40e8:	4b04      	ldr	r3, [pc, #16]	; (d40fc <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
   d40ea:	f840 3b04 	str.w	r3, [r0], #4
   d40ee:	f001 f811 	bl	d5114 <_ZN5spark6detail9LogFilterD1Ev>
    }
   d40f2:	4620      	mov	r0, r4
   d40f4:	bd10      	pop	{r4, pc}
   d40f6:	bf00      	nop
   d40f8:	000d6714 	.word	0x000d6714
   d40fc:	000d66fc 	.word	0x000d66fc

000d4100 <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
   d4100:	b510      	push	{r4, lr}
   d4102:	4604      	mov	r4, r0
    }
   d4104:	f7ff ffe2 	bl	d40cc <_ZN5spark16SerialLogHandlerD1Ev>
   d4108:	4620      	mov	r0, r4
   d410a:	2124      	movs	r1, #36	; 0x24
   d410c:	f002 f940 	bl	d6390 <_ZdlPvj>
   d4110:	4620      	mov	r0, r4
   d4112:	bd10      	pop	{r4, pc}

000d4114 <setup>:

// Variable to hold checksum
unsigned char CS;


void setup() {
   d4114:	b508      	push	{r3, lr}
  // Set up serial monitor
  Serial.begin(9600);
   d4116:	f002 f879 	bl	d620c <_Z16_fetch_usbserialv>
   d411a:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d411e:	f002 f865 	bl	d61ec <_ZN9USBSerial5beginEl>
  // Set up software serial port
  Serial1.begin(9600);
   d4122:	f001 ffd1 	bl	d60c8 <_Z22__fetch_global_Serial1v>
}
   d4126:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  Serial1.begin(9600);
   d412a:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d412e:	f001 bfc5 	b.w	d60bc <_ZN11USARTSerial5beginEm>
	...

000d4134 <loop>:


void loop() {
   d4134:	b538      	push	{r3, r4, r5, lr}
  // Serial.println("Hello");

  // Run if data available
  if (Serial1.available() > 0) {
   d4136:	f001 ffc7 	bl	d60c8 <_Z22__fetch_global_Serial1v>
   d413a:	6803      	ldr	r3, [r0, #0]
   d413c:	691b      	ldr	r3, [r3, #16]
   d413e:	4798      	blx	r3
   d4140:	2800      	cmp	r0, #0
   d4142:	dd40      	ble.n	d41c6 <loop+0x92>

    delay(4);
   d4144:	2004      	movs	r0, #4
   d4146:	f000 faa7 	bl	d4698 <delay>

    // Check for packet header character 0xff
    if (Serial1.read() == 0xff) {
   d414a:	f001 ffbd 	bl	d60c8 <_Z22__fetch_global_Serial1v>
   d414e:	6803      	ldr	r3, [r0, #0]
   d4150:	695b      	ldr	r3, [r3, #20]
   d4152:	4798      	blx	r3
   d4154:	28ff      	cmp	r0, #255	; 0xff
   d4156:	d136      	bne.n	d41c6 <loop+0x92>
      // Insert header into array
      data_buffer[0] = 0xff;
   d4158:	4c1b      	ldr	r4, [pc, #108]	; (d41c8 <loop+0x94>)
      // Read remaining 3 characters of data and insert into array
      for (int i = 1; i < 4; i++) {
   d415a:	2501      	movs	r5, #1
      data_buffer[0] = 0xff;
   d415c:	7020      	strb	r0, [r4, #0]
        data_buffer[i] = Serial1.read();
   d415e:	f001 ffb3 	bl	d60c8 <_Z22__fetch_global_Serial1v>
   d4162:	6803      	ldr	r3, [r0, #0]
   d4164:	695b      	ldr	r3, [r3, #20]
   d4166:	4798      	blx	r3
   d4168:	5560      	strb	r0, [r4, r5]
      for (int i = 1; i < 4; i++) {
   d416a:	3501      	adds	r5, #1
   d416c:	2d04      	cmp	r5, #4
   d416e:	d1f6      	bne.n	d415e <loop+0x2a>
      }

      //Compute checksum
      CS = data_buffer[0] + data_buffer[1] + data_buffer[2];
   d4170:	7861      	ldrb	r1, [r4, #1]
   d4172:	7823      	ldrb	r3, [r4, #0]
   d4174:	78a2      	ldrb	r2, [r4, #2]
   d4176:	4815      	ldr	r0, [pc, #84]	; (d41cc <loop+0x98>)
   d4178:	440b      	add	r3, r1
   d417a:	4413      	add	r3, r2
   d417c:	b2db      	uxtb	r3, r3
   d417e:	7003      	strb	r3, [r0, #0]
      // If checksum is valid compose distance from data
      if (data_buffer[3] == CS) {
   d4180:	78e0      	ldrb	r0, [r4, #3]
   d4182:	4298      	cmp	r0, r3
   d4184:	d11f      	bne.n	d41c6 <loop+0x92>
        distance = (data_buffer[1] << 8) + data_buffer[2];
   d4186:	4c12      	ldr	r4, [pc, #72]	; (d41d0 <loop+0x9c>)
   d4188:	eb02 2201 	add.w	r2, r2, r1, lsl #8
   d418c:	6022      	str	r2, [r4, #0]
        // Print to serial monitor
        Serial.print("distance: ");
   d418e:	f002 f83d 	bl	d620c <_Z16_fetch_usbserialv>
   d4192:	4910      	ldr	r1, [pc, #64]	; (d41d4 <loop+0xa0>)
   d4194:	f001 fe1e 	bl	d5dd4 <_ZN5Print5printEPKc>
        Serial.print(distance);
   d4198:	f002 f838 	bl	d620c <_Z16_fetch_usbserialv>
   d419c:	6824      	ldr	r4, [r4, #0]
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
   d419e:	2c00      	cmp	r4, #0
   d41a0:	4605      	mov	r5, r0
   d41a2:	da0e      	bge.n	d41c2 <loop+0x8e>
            t = print('-');
   d41a4:	212d      	movs	r1, #45	; 0x2d
   d41a6:	f001 fe19 	bl	d5ddc <_ZN5Print5printEc>
            val = -n;
   d41aa:	4261      	negs	r1, r4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d41ac:	220a      	movs	r2, #10
   d41ae:	4628      	mov	r0, r5
   d41b0:	f001 fe2d 	bl	d5e0e <_ZN5Print11printNumberEmh>
        Serial.println(" mm");
   d41b4:	f002 f82a 	bl	d620c <_Z16_fetch_usbserialv>
      }
    }
  }
   d41b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        Serial.println(" mm");
   d41bc:	4906      	ldr	r1, [pc, #24]	; (d41d8 <loop+0xa4>)
   d41be:	f001 be1c 	b.w	d5dfa <_ZN5Print7printlnEPKc>
            val = n;
   d41c2:	4621      	mov	r1, r4
   d41c4:	e7f2      	b.n	d41ac <loop+0x78>
   d41c6:	bd38      	pop	{r3, r4, r5, pc}
   d41c8:	2003e641 	.word	0x2003e641
   d41cc:	2003e640 	.word	0x2003e640
   d41d0:	2003e648 	.word	0x2003e648
   d41d4:	000d66e4 	.word	0x000d66e4
   d41d8:	000d66ef 	.word	0x000d66ef

000d41dc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d41dc:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d41de:	e9d0 5300 	ldrd	r5, r3, [r0]
   d41e2:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   d41e4:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d41e6:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   d41ea:	42ae      	cmp	r6, r5
   d41ec:	d004      	beq.n	d41f8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
   d41ee:	4628      	mov	r0, r5
   d41f0:	f001 fe62 	bl	d5eb8 <_ZN6StringD1Ev>
   d41f4:	3514      	adds	r5, #20
   d41f6:	e7f8      	b.n	d41ea <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   d41f8:	6820      	ldr	r0, [r4, #0]
   d41fa:	f000 fa2d 	bl	d4658 <free>
    AllocatorT::free(data_);
}
   d41fe:	4620      	mov	r0, r4
   d4200:	bd70      	pop	{r4, r5, r6, pc}

000d4202 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   d4202:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d4204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4206:	4604      	mov	r4, r0
   d4208:	460d      	mov	r5, r1
   d420a:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   d420c:	d916      	bls.n	d423c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
   d420e:	4290      	cmp	r0, r2
   d4210:	d215      	bcs.n	d423e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
   d4212:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   d4216:	1a75      	subs	r5, r6, r1
   d4218:	f1a1 0714 	sub.w	r7, r1, #20
   d421c:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   d421e:	42b7      	cmp	r7, r6
   d4220:	d01c      	beq.n	d425c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
   d4222:	b12c      	cbz	r4, d4230 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
   d4224:	4631      	mov	r1, r6
   d4226:	4620      	mov	r0, r4
   d4228:	f001 feae 	bl	d5f88 <_ZN6StringC1EOS_>
   d422c:	7c33      	ldrb	r3, [r6, #16]
   d422e:	7423      	strb	r3, [r4, #16]
   d4230:	4630      	mov	r0, r6
   d4232:	f001 fe41 	bl	d5eb8 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   d4236:	3e14      	subs	r6, #20
   d4238:	3c14      	subs	r4, #20
   d423a:	e7f0      	b.n	d421e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   d423c:	d00e      	beq.n	d425c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
   d423e:	42b5      	cmp	r5, r6
   d4240:	d00c      	beq.n	d425c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
   d4242:	b12c      	cbz	r4, d4250 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
   d4244:	4629      	mov	r1, r5
   d4246:	4620      	mov	r0, r4
   d4248:	f001 fe9e 	bl	d5f88 <_ZN6StringC1EOS_>
   d424c:	7c2b      	ldrb	r3, [r5, #16]
   d424e:	7423      	strb	r3, [r4, #16]
   d4250:	4628      	mov	r0, r5
   d4252:	f001 fe31 	bl	d5eb8 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   d4256:	3514      	adds	r5, #20
   d4258:	3414      	adds	r4, #20
   d425a:	e7f0      	b.n	d423e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
   d425c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d425e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d425e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   d4262:	2300      	movs	r3, #0
   d4264:	e9c0 3300 	strd	r3, r3, [r0]
   d4268:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d426a:	684f      	ldr	r7, [r1, #4]
   d426c:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d426e:	4604      	mov	r4, r0
   d4270:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d4272:	dd23      	ble.n	d42bc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   d4274:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
   d4278:	fb08 f007 	mul.w	r0, r8, r7
   d427c:	f000 f9e4 	bl	d4648 <malloc>
            if (!d) {
   d4280:	4605      	mov	r5, r0
   d4282:	b1d8      	cbz	r0, d42bc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            move(d, data_, data_ + size_);
   d4284:	e9d4 1200 	ldrd	r1, r2, [r4]
   d4288:	fb08 1202 	mla	r2, r8, r2, r1
   d428c:	f7ff ffb9 	bl	d4202 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   d4290:	6820      	ldr	r0, [r4, #0]
   d4292:	f000 f9e1 	bl	d4658 <free>
        data_ = d;
   d4296:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   d4298:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   d429a:	e9d6 7300 	ldrd	r7, r3, [r6]
   d429e:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
   d42a2:	45b8      	cmp	r8, r7
   d42a4:	d008      	beq.n	d42b8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5a>
   d42a6:	4639      	mov	r1, r7
   d42a8:	4628      	mov	r0, r5
   d42aa:	f001 fe87 	bl	d5fbc <_ZN6StringC1ERKS_>
   d42ae:	7c3b      	ldrb	r3, [r7, #16]
   d42b0:	742b      	strb	r3, [r5, #16]
   d42b2:	3714      	adds	r7, #20
   d42b4:	3514      	adds	r5, #20
   d42b6:	e7f4      	b.n	d42a2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
   d42b8:	6873      	ldr	r3, [r6, #4]
   d42ba:	6063      	str	r3, [r4, #4]
}
   d42bc:	4620      	mov	r0, r4
   d42be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000d42c4 <_GLOBAL__sub_I_logHandler>:
   d42c4:	b570      	push	{r4, r5, r6, lr}
   d42c6:	b08c      	sub	sp, #48	; 0x30
        capacity_(0) {
   d42c8:	2300      	movs	r3, #0
   d42ca:	e9cd 3300 	strd	r3, r3, [sp]
   d42ce:	9302      	str	r3, [sp, #8]
            StreamLogHandler(Serial, level, filters) {
   d42d0:	f001 ff9c 	bl	d620c <_Z16_fetch_usbserialv>
        filter_(level, filters) {
   d42d4:	4c1a      	ldr	r4, [pc, #104]	; (d4340 <_GLOBAL__sub_I_logHandler+0x7c>)
   d42d6:	4605      	mov	r5, r0
   d42d8:	4669      	mov	r1, sp
   d42da:	a803      	add	r0, sp, #12
   d42dc:	f7ff ffbf 	bl	d425e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d42e0:	4626      	mov	r6, r4
        stream_(&stream) {
   d42e2:	a903      	add	r1, sp, #12
   d42e4:	a806      	add	r0, sp, #24
   d42e6:	f7ff ffba 	bl	d425e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   d42ea:	4b16      	ldr	r3, [pc, #88]	; (d4344 <_GLOBAL__sub_I_logHandler+0x80>)
   d42ec:	f846 3b04 	str.w	r3, [r6], #4
   d42f0:	a906      	add	r1, sp, #24
   d42f2:	a809      	add	r0, sp, #36	; 0x24
   d42f4:	f7ff ffb3 	bl	d425e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d42f8:	aa09      	add	r2, sp, #36	; 0x24
   d42fa:	211e      	movs	r1, #30
   d42fc:	4630      	mov	r0, r6
   d42fe:	f001 f976 	bl	d55ee <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d4302:	a809      	add	r0, sp, #36	; 0x24
   d4304:	f7ff ff6a 	bl	d41dc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   d4308:	a806      	add	r0, sp, #24
   d430a:	f7ff ff67 	bl	d41dc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d430e:	4b0e      	ldr	r3, [pc, #56]	; (d4348 <_GLOBAL__sub_I_logHandler+0x84>)
   d4310:	6023      	str	r3, [r4, #0]
   d4312:	a803      	add	r0, sp, #12
   d4314:	6225      	str	r5, [r4, #32]
   d4316:	f7ff ff61 	bl	d41dc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d431a:	4b0c      	ldr	r3, [pc, #48]	; (d434c <_GLOBAL__sub_I_logHandler+0x88>)
   d431c:	6023      	str	r3, [r4, #0]
        Serial.begin();
   d431e:	f001 ff75 	bl	d620c <_Z16_fetch_usbserialv>
   d4322:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d4326:	f001 ff61 	bl	d61ec <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
   d432a:	f000 fe05 	bl	d4f38 <_ZN5spark10LogManager8instanceEv>
   d432e:	4621      	mov	r1, r4
   d4330:	f001 f8ef 	bl	d5512 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler logHandler;			// Sends everything
   d4334:	4668      	mov	r0, sp
   d4336:	f7ff ff51 	bl	d41dc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d433a:	b00c      	add	sp, #48	; 0x30
   d433c:	bd70      	pop	{r4, r5, r6, pc}
   d433e:	bf00      	nop
   d4340:	2003e64c 	.word	0x2003e64c
   d4344:	000d66fc 	.word	0x000d66fc
   d4348:	000d6850 	.word	0x000d6850
   d434c:	000d6714 	.word	0x000d6714

000d4350 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4350:	b508      	push	{r3, lr}
   d4352:	4b02      	ldr	r3, [pc, #8]	; (d435c <os_mutex_recursive_create+0xc>)
   d4354:	681b      	ldr	r3, [r3, #0]
   d4356:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4358:	9301      	str	r3, [sp, #4]
   d435a:	bd08      	pop	{r3, pc}
   d435c:	00030248 	.word	0x00030248

000d4360 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d4360:	b508      	push	{r3, lr}
   d4362:	4b02      	ldr	r3, [pc, #8]	; (d436c <os_mutex_recursive_destroy+0xc>)
   d4364:	681b      	ldr	r3, [r3, #0]
   d4366:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d4368:	9301      	str	r3, [sp, #4]
   d436a:	bd08      	pop	{r3, pc}
   d436c:	00030248 	.word	0x00030248

000d4370 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   d4370:	b508      	push	{r3, lr}
   d4372:	4b02      	ldr	r3, [pc, #8]	; (d437c <os_mutex_recursive_lock+0xc>)
   d4374:	681b      	ldr	r3, [r3, #0]
   d4376:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d4378:	9301      	str	r3, [sp, #4]
   d437a:	bd08      	pop	{r3, pc}
   d437c:	00030248 	.word	0x00030248

000d4380 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   d4380:	b508      	push	{r3, lr}
   d4382:	4b02      	ldr	r3, [pc, #8]	; (d438c <os_mutex_recursive_unlock+0xc>)
   d4384:	681b      	ldr	r3, [r3, #0]
   d4386:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d4388:	9301      	str	r3, [sp, #4]
   d438a:	bd08      	pop	{r3, pc}
   d438c:	00030248 	.word	0x00030248

000d4390 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d4390:	b508      	push	{r3, lr}
   d4392:	4b02      	ldr	r3, [pc, #8]	; (d439c <HAL_RNG_GetRandomNumber+0xc>)
   d4394:	681b      	ldr	r3, [r3, #0]
   d4396:	685b      	ldr	r3, [r3, #4]
   d4398:	9301      	str	r3, [sp, #4]
   d439a:	bd08      	pop	{r3, pc}
   d439c:	00030218 	.word	0x00030218

000d43a0 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d43a0:	b508      	push	{r3, lr}
   d43a2:	4b02      	ldr	r3, [pc, #8]	; (d43ac <HAL_Delay_Microseconds+0xc>)
   d43a4:	681b      	ldr	r3, [r3, #0]
   d43a6:	68db      	ldr	r3, [r3, #12]
   d43a8:	9301      	str	r3, [sp, #4]
   d43aa:	bd08      	pop	{r3, pc}
   d43ac:	00030218 	.word	0x00030218

000d43b0 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d43b0:	b508      	push	{r3, lr}
   d43b2:	4b02      	ldr	r3, [pc, #8]	; (d43bc <HAL_Timer_Get_Milli_Seconds+0xc>)
   d43b4:	681b      	ldr	r3, [r3, #0]
   d43b6:	695b      	ldr	r3, [r3, #20]
   d43b8:	9301      	str	r3, [sp, #4]
   d43ba:	bd08      	pop	{r3, pc}
   d43bc:	00030218 	.word	0x00030218

000d43c0 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d43c0:	b508      	push	{r3, lr}
   d43c2:	4b02      	ldr	r3, [pc, #8]	; (d43cc <inet_inet_ntop+0xc>)
   d43c4:	681b      	ldr	r3, [r3, #0]
   d43c6:	695b      	ldr	r3, [r3, #20]
   d43c8:	9301      	str	r3, [sp, #4]
   d43ca:	bd08      	pop	{r3, pc}
   d43cc:	00030264 	.word	0x00030264

000d43d0 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d43d0:	b508      	push	{r3, lr}
   d43d2:	4b02      	ldr	r3, [pc, #8]	; (d43dc <netdb_freeaddrinfo+0xc>)
   d43d4:	681b      	ldr	r3, [r3, #0]
   d43d6:	689b      	ldr	r3, [r3, #8]
   d43d8:	9301      	str	r3, [sp, #4]
   d43da:	bd08      	pop	{r3, pc}
   d43dc:	00030268 	.word	0x00030268

000d43e0 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d43e0:	b508      	push	{r3, lr}
   d43e2:	4b02      	ldr	r3, [pc, #8]	; (d43ec <netdb_getaddrinfo+0xc>)
   d43e4:	681b      	ldr	r3, [r3, #0]
   d43e6:	68db      	ldr	r3, [r3, #12]
   d43e8:	9301      	str	r3, [sp, #4]
   d43ea:	bd08      	pop	{r3, pc}
   d43ec:	00030268 	.word	0x00030268

000d43f0 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d43f0:	b508      	push	{r3, lr}
   d43f2:	4b02      	ldr	r3, [pc, #8]	; (d43fc <hal_usart_init+0xc>)
   d43f4:	681b      	ldr	r3, [r3, #0]
   d43f6:	681b      	ldr	r3, [r3, #0]
   d43f8:	9301      	str	r3, [sp, #4]
   d43fa:	bd08      	pop	{r3, pc}
   d43fc:	0003023c 	.word	0x0003023c

000d4400 <hal_usart_end>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
   d4400:	b508      	push	{r3, lr}
   d4402:	4b02      	ldr	r3, [pc, #8]	; (d440c <hal_usart_end+0xc>)
   d4404:	681b      	ldr	r3, [r3, #0]
   d4406:	689b      	ldr	r3, [r3, #8]
   d4408:	9301      	str	r3, [sp, #4]
   d440a:	bd08      	pop	{r3, pc}
   d440c:	0003023c 	.word	0x0003023c

000d4410 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d4410:	b508      	push	{r3, lr}
   d4412:	4b02      	ldr	r3, [pc, #8]	; (d441c <hal_usart_write+0xc>)
   d4414:	681b      	ldr	r3, [r3, #0]
   d4416:	68db      	ldr	r3, [r3, #12]
   d4418:	9301      	str	r3, [sp, #4]
   d441a:	bd08      	pop	{r3, pc}
   d441c:	0003023c 	.word	0x0003023c

000d4420 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d4420:	b508      	push	{r3, lr}
   d4422:	4b02      	ldr	r3, [pc, #8]	; (d442c <hal_usart_available+0xc>)
   d4424:	681b      	ldr	r3, [r3, #0]
   d4426:	691b      	ldr	r3, [r3, #16]
   d4428:	9301      	str	r3, [sp, #4]
   d442a:	bd08      	pop	{r3, pc}
   d442c:	0003023c 	.word	0x0003023c

000d4430 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d4430:	b508      	push	{r3, lr}
   d4432:	4b02      	ldr	r3, [pc, #8]	; (d443c <hal_usart_read+0xc>)
   d4434:	681b      	ldr	r3, [r3, #0]
   d4436:	695b      	ldr	r3, [r3, #20]
   d4438:	9301      	str	r3, [sp, #4]
   d443a:	bd08      	pop	{r3, pc}
   d443c:	0003023c 	.word	0x0003023c

000d4440 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d4440:	b508      	push	{r3, lr}
   d4442:	4b02      	ldr	r3, [pc, #8]	; (d444c <hal_usart_peek+0xc>)
   d4444:	681b      	ldr	r3, [r3, #0]
   d4446:	699b      	ldr	r3, [r3, #24]
   d4448:	9301      	str	r3, [sp, #4]
   d444a:	bd08      	pop	{r3, pc}
   d444c:	0003023c 	.word	0x0003023c

000d4450 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d4450:	b508      	push	{r3, lr}
   d4452:	4b02      	ldr	r3, [pc, #8]	; (d445c <hal_usart_flush+0xc>)
   d4454:	681b      	ldr	r3, [r3, #0]
   d4456:	69db      	ldr	r3, [r3, #28]
   d4458:	9301      	str	r3, [sp, #4]
   d445a:	bd08      	pop	{r3, pc}
   d445c:	0003023c 	.word	0x0003023c

000d4460 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d4460:	b508      	push	{r3, lr}
   d4462:	4b02      	ldr	r3, [pc, #8]	; (d446c <hal_usart_available_data_for_write+0xc>)
   d4464:	681b      	ldr	r3, [r3, #0]
   d4466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4468:	9301      	str	r3, [sp, #4]
   d446a:	bd08      	pop	{r3, pc}
   d446c:	0003023c 	.word	0x0003023c

000d4470 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   d4470:	b508      	push	{r3, lr}
   d4472:	4b02      	ldr	r3, [pc, #8]	; (d447c <hal_usart_begin_config+0xc>)
   d4474:	681b      	ldr	r3, [r3, #0]
   d4476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4478:	9301      	str	r3, [sp, #4]
   d447a:	bd08      	pop	{r3, pc}
   d447c:	0003023c 	.word	0x0003023c

000d4480 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4480:	b508      	push	{r3, lr}
   d4482:	4b02      	ldr	r3, [pc, #8]	; (d448c <HAL_USB_USART_Init+0xc>)
   d4484:	681b      	ldr	r3, [r3, #0]
   d4486:	681b      	ldr	r3, [r3, #0]
   d4488:	9301      	str	r3, [sp, #4]
   d448a:	bd08      	pop	{r3, pc}
   d448c:	0003024c 	.word	0x0003024c

000d4490 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d4490:	b508      	push	{r3, lr}
   d4492:	4b02      	ldr	r3, [pc, #8]	; (d449c <HAL_USB_USART_Begin+0xc>)
   d4494:	681b      	ldr	r3, [r3, #0]
   d4496:	685b      	ldr	r3, [r3, #4]
   d4498:	9301      	str	r3, [sp, #4]
   d449a:	bd08      	pop	{r3, pc}
   d449c:	0003024c 	.word	0x0003024c

000d44a0 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   d44a0:	b508      	push	{r3, lr}
   d44a2:	4b02      	ldr	r3, [pc, #8]	; (d44ac <HAL_USB_USART_End+0xc>)
   d44a4:	681b      	ldr	r3, [r3, #0]
   d44a6:	689b      	ldr	r3, [r3, #8]
   d44a8:	9301      	str	r3, [sp, #4]
   d44aa:	bd08      	pop	{r3, pc}
   d44ac:	0003024c 	.word	0x0003024c

000d44b0 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d44b0:	b508      	push	{r3, lr}
   d44b2:	4b02      	ldr	r3, [pc, #8]	; (d44bc <HAL_USB_USART_Available_Data+0xc>)
   d44b4:	681b      	ldr	r3, [r3, #0]
   d44b6:	691b      	ldr	r3, [r3, #16]
   d44b8:	9301      	str	r3, [sp, #4]
   d44ba:	bd08      	pop	{r3, pc}
   d44bc:	0003024c 	.word	0x0003024c

000d44c0 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d44c0:	b508      	push	{r3, lr}
   d44c2:	4b02      	ldr	r3, [pc, #8]	; (d44cc <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d44c4:	681b      	ldr	r3, [r3, #0]
   d44c6:	695b      	ldr	r3, [r3, #20]
   d44c8:	9301      	str	r3, [sp, #4]
   d44ca:	bd08      	pop	{r3, pc}
   d44cc:	0003024c 	.word	0x0003024c

000d44d0 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d44d0:	b508      	push	{r3, lr}
   d44d2:	4b02      	ldr	r3, [pc, #8]	; (d44dc <HAL_USB_USART_Receive_Data+0xc>)
   d44d4:	681b      	ldr	r3, [r3, #0]
   d44d6:	699b      	ldr	r3, [r3, #24]
   d44d8:	9301      	str	r3, [sp, #4]
   d44da:	bd08      	pop	{r3, pc}
   d44dc:	0003024c 	.word	0x0003024c

000d44e0 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d44e0:	b508      	push	{r3, lr}
   d44e2:	4b02      	ldr	r3, [pc, #8]	; (d44ec <HAL_USB_USART_Send_Data+0xc>)
   d44e4:	681b      	ldr	r3, [r3, #0]
   d44e6:	69db      	ldr	r3, [r3, #28]
   d44e8:	9301      	str	r3, [sp, #4]
   d44ea:	bd08      	pop	{r3, pc}
   d44ec:	0003024c 	.word	0x0003024c

000d44f0 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d44f0:	b508      	push	{r3, lr}
   d44f2:	4b02      	ldr	r3, [pc, #8]	; (d44fc <HAL_USB_USART_Flush_Data+0xc>)
   d44f4:	681b      	ldr	r3, [r3, #0]
   d44f6:	6a1b      	ldr	r3, [r3, #32]
   d44f8:	9301      	str	r3, [sp, #4]
   d44fa:	bd08      	pop	{r3, pc}
   d44fc:	0003024c 	.word	0x0003024c

000d4500 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d4500:	b508      	push	{r3, lr}
   d4502:	4b02      	ldr	r3, [pc, #8]	; (d450c <panic_+0xc>)
   d4504:	681b      	ldr	r3, [r3, #0]
   d4506:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4508:	9301      	str	r3, [sp, #4]
   d450a:	bd08      	pop	{r3, pc}
   d450c:	00030260 	.word	0x00030260

000d4510 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   d4510:	b508      	push	{r3, lr}
   d4512:	4b02      	ldr	r3, [pc, #8]	; (d451c <log_level_name+0xc>)
   d4514:	681b      	ldr	r3, [r3, #0]
   d4516:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d4518:	9301      	str	r3, [sp, #4]
   d451a:	bd08      	pop	{r3, pc}
   d451c:	00030260 	.word	0x00030260

000d4520 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   d4520:	b508      	push	{r3, lr}
   d4522:	4b02      	ldr	r3, [pc, #8]	; (d452c <log_set_callbacks+0xc>)
   d4524:	681b      	ldr	r3, [r3, #0]
   d4526:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   d4528:	9301      	str	r3, [sp, #4]
   d452a:	bd08      	pop	{r3, pc}
   d452c:	00030260 	.word	0x00030260

000d4530 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4530:	b508      	push	{r3, lr}
   d4532:	4b02      	ldr	r3, [pc, #8]	; (d453c <set_system_mode+0xc>)
   d4534:	681b      	ldr	r3, [r3, #0]
   d4536:	685b      	ldr	r3, [r3, #4]
   d4538:	9301      	str	r3, [sp, #4]
   d453a:	bd08      	pop	{r3, pc}
   d453c:	00030220 	.word	0x00030220

000d4540 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d4540:	b508      	push	{r3, lr}
   d4542:	4b02      	ldr	r3, [pc, #8]	; (d454c <system_delay_ms+0xc>)
   d4544:	681b      	ldr	r3, [r3, #0]
   d4546:	695b      	ldr	r3, [r3, #20]
   d4548:	9301      	str	r3, [sp, #4]
   d454a:	bd08      	pop	{r3, pc}
   d454c:	00030220 	.word	0x00030220

000d4550 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4550:	b508      	push	{r3, lr}
   d4552:	4b03      	ldr	r3, [pc, #12]	; (d4560 <system_ctrl_set_app_request_handler+0x10>)
   d4554:	681b      	ldr	r3, [r3, #0]
   d4556:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d455a:	9301      	str	r3, [sp, #4]
   d455c:	bd08      	pop	{r3, pc}
   d455e:	0000      	.short	0x0000
   d4560:	00030220 	.word	0x00030220

000d4564 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d4564:	b508      	push	{r3, lr}
   d4566:	4b03      	ldr	r3, [pc, #12]	; (d4574 <system_ctrl_set_result+0x10>)
   d4568:	681b      	ldr	r3, [r3, #0]
   d456a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d456e:	9301      	str	r3, [sp, #4]
   d4570:	bd08      	pop	{r3, pc}
   d4572:	0000      	.short	0x0000
   d4574:	00030220 	.word	0x00030220

000d4578 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d4578:	b508      	push	{r3, lr}
   d457a:	4b02      	ldr	r3, [pc, #8]	; (d4584 <spark_set_random_seed_from_cloud_handler+0xc>)
   d457c:	681b      	ldr	r3, [r3, #0]
   d457e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4580:	9301      	str	r3, [sp, #4]
   d4582:	bd08      	pop	{r3, pc}
   d4584:	00030244 	.word	0x00030244

000d4588 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d4588:	b508      	push	{r3, lr}
   d458a:	4b02      	ldr	r3, [pc, #8]	; (d4594 <network_connect+0xc>)
   d458c:	681b      	ldr	r3, [r3, #0]
   d458e:	685b      	ldr	r3, [r3, #4]
   d4590:	9301      	str	r3, [sp, #4]
   d4592:	bd08      	pop	{r3, pc}
   d4594:	00030240 	.word	0x00030240

000d4598 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d4598:	b508      	push	{r3, lr}
   d459a:	4b02      	ldr	r3, [pc, #8]	; (d45a4 <network_connecting+0xc>)
   d459c:	681b      	ldr	r3, [r3, #0]
   d459e:	689b      	ldr	r3, [r3, #8]
   d45a0:	9301      	str	r3, [sp, #4]
   d45a2:	bd08      	pop	{r3, pc}
   d45a4:	00030240 	.word	0x00030240

000d45a8 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d45a8:	b508      	push	{r3, lr}
   d45aa:	4b02      	ldr	r3, [pc, #8]	; (d45b4 <network_disconnect+0xc>)
   d45ac:	681b      	ldr	r3, [r3, #0]
   d45ae:	68db      	ldr	r3, [r3, #12]
   d45b0:	9301      	str	r3, [sp, #4]
   d45b2:	bd08      	pop	{r3, pc}
   d45b4:	00030240 	.word	0x00030240

000d45b8 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d45b8:	b508      	push	{r3, lr}
   d45ba:	4b02      	ldr	r3, [pc, #8]	; (d45c4 <network_ready+0xc>)
   d45bc:	681b      	ldr	r3, [r3, #0]
   d45be:	691b      	ldr	r3, [r3, #16]
   d45c0:	9301      	str	r3, [sp, #4]
   d45c2:	bd08      	pop	{r3, pc}
   d45c4:	00030240 	.word	0x00030240

000d45c8 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d45c8:	b508      	push	{r3, lr}
   d45ca:	4b02      	ldr	r3, [pc, #8]	; (d45d4 <network_on+0xc>)
   d45cc:	681b      	ldr	r3, [r3, #0]
   d45ce:	695b      	ldr	r3, [r3, #20]
   d45d0:	9301      	str	r3, [sp, #4]
   d45d2:	bd08      	pop	{r3, pc}
   d45d4:	00030240 	.word	0x00030240

000d45d8 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d45d8:	b508      	push	{r3, lr}
   d45da:	4b02      	ldr	r3, [pc, #8]	; (d45e4 <network_off+0xc>)
   d45dc:	681b      	ldr	r3, [r3, #0]
   d45de:	699b      	ldr	r3, [r3, #24]
   d45e0:	9301      	str	r3, [sp, #4]
   d45e2:	bd08      	pop	{r3, pc}
   d45e4:	00030240 	.word	0x00030240

000d45e8 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d45e8:	b508      	push	{r3, lr}
   d45ea:	4b02      	ldr	r3, [pc, #8]	; (d45f4 <network_listen+0xc>)
   d45ec:	681b      	ldr	r3, [r3, #0]
   d45ee:	69db      	ldr	r3, [r3, #28]
   d45f0:	9301      	str	r3, [sp, #4]
   d45f2:	bd08      	pop	{r3, pc}
   d45f4:	00030240 	.word	0x00030240

000d45f8 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d45f8:	b508      	push	{r3, lr}
   d45fa:	4b02      	ldr	r3, [pc, #8]	; (d4604 <network_listening+0xc>)
   d45fc:	681b      	ldr	r3, [r3, #0]
   d45fe:	6a1b      	ldr	r3, [r3, #32]
   d4600:	9301      	str	r3, [sp, #4]
   d4602:	bd08      	pop	{r3, pc}
   d4604:	00030240 	.word	0x00030240

000d4608 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d4608:	b508      	push	{r3, lr}
   d460a:	4b02      	ldr	r3, [pc, #8]	; (d4614 <network_set_listen_timeout+0xc>)
   d460c:	681b      	ldr	r3, [r3, #0]
   d460e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4610:	9301      	str	r3, [sp, #4]
   d4612:	bd08      	pop	{r3, pc}
   d4614:	00030240 	.word	0x00030240

000d4618 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d4618:	b508      	push	{r3, lr}
   d461a:	4b02      	ldr	r3, [pc, #8]	; (d4624 <network_get_listen_timeout+0xc>)
   d461c:	681b      	ldr	r3, [r3, #0]
   d461e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4620:	9301      	str	r3, [sp, #4]
   d4622:	bd08      	pop	{r3, pc}
   d4624:	00030240 	.word	0x00030240

000d4628 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   d4628:	b508      	push	{r3, lr}
   d462a:	4b02      	ldr	r3, [pc, #8]	; (d4634 <network_is_on+0xc>)
   d462c:	681b      	ldr	r3, [r3, #0]
   d462e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4630:	9301      	str	r3, [sp, #4]
   d4632:	bd08      	pop	{r3, pc}
   d4634:	00030240 	.word	0x00030240

000d4638 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   d4638:	b508      	push	{r3, lr}
   d463a:	4b02      	ldr	r3, [pc, #8]	; (d4644 <network_is_off+0xc>)
   d463c:	681b      	ldr	r3, [r3, #0]
   d463e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4640:	9301      	str	r3, [sp, #4]
   d4642:	bd08      	pop	{r3, pc}
   d4644:	00030240 	.word	0x00030240

000d4648 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d4648:	b508      	push	{r3, lr}
   d464a:	4b02      	ldr	r3, [pc, #8]	; (d4654 <malloc+0xc>)
   d464c:	681b      	ldr	r3, [r3, #0]
   d464e:	681b      	ldr	r3, [r3, #0]
   d4650:	9301      	str	r3, [sp, #4]
   d4652:	bd08      	pop	{r3, pc}
   d4654:	0003021c 	.word	0x0003021c

000d4658 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d4658:	b508      	push	{r3, lr}
   d465a:	4b02      	ldr	r3, [pc, #8]	; (d4664 <free+0xc>)
   d465c:	681b      	ldr	r3, [r3, #0]
   d465e:	685b      	ldr	r3, [r3, #4]
   d4660:	9301      	str	r3, [sp, #4]
   d4662:	bd08      	pop	{r3, pc}
   d4664:	0003021c 	.word	0x0003021c

000d4668 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d4668:	b508      	push	{r3, lr}
   d466a:	4b02      	ldr	r3, [pc, #8]	; (d4674 <realloc+0xc>)
   d466c:	681b      	ldr	r3, [r3, #0]
   d466e:	689b      	ldr	r3, [r3, #8]
   d4670:	9301      	str	r3, [sp, #4]
   d4672:	bd08      	pop	{r3, pc}
   d4674:	0003021c 	.word	0x0003021c

000d4678 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d4678:	b508      	push	{r3, lr}
   d467a:	4b02      	ldr	r3, [pc, #8]	; (d4684 <vsnprintf+0xc>)
   d467c:	681b      	ldr	r3, [r3, #0]
   d467e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4680:	9301      	str	r3, [sp, #4]
   d4682:	bd08      	pop	{r3, pc}
   d4684:	0003021c 	.word	0x0003021c

000d4688 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d4688:	b508      	push	{r3, lr}
   d468a:	4b02      	ldr	r3, [pc, #8]	; (d4694 <newlib_impure_ptr_callback+0xc>)
   d468c:	681b      	ldr	r3, [r3, #0]
   d468e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4690:	9301      	str	r3, [sp, #4]
   d4692:	bd08      	pop	{r3, pc}
   d4694:	0003021c 	.word	0x0003021c

000d4698 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d4698:	2100      	movs	r1, #0
   d469a:	f7ff bf51 	b.w	d4540 <system_delay_ms>

000d469e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d469e:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d46a0:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d46a2:	4604      	mov	r4, r0
          _M_dispose();
   d46a4:	689b      	ldr	r3, [r3, #8]
   d46a6:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d46a8:	68a3      	ldr	r3, [r4, #8]
   d46aa:	3b01      	subs	r3, #1
   d46ac:	60a3      	str	r3, [r4, #8]
   d46ae:	b92b      	cbnz	r3, d46bc <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
   d46b0:	6823      	ldr	r3, [r4, #0]
   d46b2:	4620      	mov	r0, r4
   d46b4:	68db      	ldr	r3, [r3, #12]
        }
    }
   d46b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   d46ba:	4718      	bx	r3
    }
   d46bc:	bd10      	pop	{r4, pc}

000d46be <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d46be:	680b      	ldr	r3, [r1, #0]
   d46c0:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d46c2:	b113      	cbz	r3, d46ca <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   d46c4:	685a      	ldr	r2, [r3, #4]
   d46c6:	3201      	adds	r2, #1
   d46c8:	605a      	str	r2, [r3, #4]
	  _M_pi->_M_add_ref_copy();
      }
   d46ca:	4770      	bx	lr

000d46cc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   d46cc:	b510      	push	{r4, lr}
   d46ce:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   d46d0:	6800      	ldr	r0, [r0, #0]
   d46d2:	b128      	cbz	r0, d46e0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
      if (--_M_use_count == 0)
   d46d4:	6843      	ldr	r3, [r0, #4]
   d46d6:	3b01      	subs	r3, #1
   d46d8:	6043      	str	r3, [r0, #4]
   d46da:	b90b      	cbnz	r3, d46e0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
   d46dc:	f7ff ffdf 	bl	d469e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
      }
   d46e0:	4620      	mov	r0, r4
   d46e2:	bd10      	pop	{r4, pc}

000d46e4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d46e4:	4802      	ldr	r0, [pc, #8]	; (d46f0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   d46e6:	2300      	movs	r3, #0
   d46e8:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   d46ea:	f7ff be31 	b.w	d4350 <os_mutex_recursive_create>
   d46ee:	bf00      	nop
   d46f0:	2003e670 	.word	0x2003e670

000d46f4 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d46f4:	2200      	movs	r2, #0
   d46f6:	6840      	ldr	r0, [r0, #4]
   d46f8:	4611      	mov	r1, r2
   d46fa:	f7ff bf5d 	b.w	d45b8 <network_ready>

000d46fe <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   d46fe:	2200      	movs	r2, #0
   d4700:	6840      	ldr	r0, [r0, #4]
   d4702:	4611      	mov	r1, r2
   d4704:	f7ff bf78 	b.w	d45f8 <network_listening>

000d4708 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d4708:	2200      	movs	r2, #0
   d470a:	6840      	ldr	r0, [r0, #4]
   d470c:	4611      	mov	r1, r2
   d470e:	f7ff bf83 	b.w	d4618 <network_get_listen_timeout>

000d4712 <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d4712:	6840      	ldr	r0, [r0, #4]
   d4714:	2200      	movs	r2, #0
   d4716:	f7ff bf77 	b.w	d4608 <network_set_listen_timeout>

000d471a <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d471a:	6840      	ldr	r0, [r0, #4]
   d471c:	2200      	movs	r2, #0
   d471e:	f081 0101 	eor.w	r1, r1, #1
   d4722:	f7ff bf61 	b.w	d45e8 <network_listen>

000d4726 <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d4726:	2300      	movs	r3, #0
   d4728:	6840      	ldr	r0, [r0, #4]
   d472a:	461a      	mov	r2, r3
   d472c:	4619      	mov	r1, r3
   d472e:	f7ff bf53 	b.w	d45d8 <network_off>

000d4732 <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d4732:	2300      	movs	r3, #0
   d4734:	6840      	ldr	r0, [r0, #4]
   d4736:	461a      	mov	r2, r3
   d4738:	4619      	mov	r1, r3
   d473a:	f7ff bf45 	b.w	d45c8 <network_on>

000d473e <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d473e:	2200      	movs	r2, #0
   d4740:	6840      	ldr	r0, [r0, #4]
   d4742:	4611      	mov	r1, r2
   d4744:	f7ff bf28 	b.w	d4598 <network_connecting>

000d4748 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4748:	6840      	ldr	r0, [r0, #4]
   d474a:	2200      	movs	r2, #0
   d474c:	2102      	movs	r1, #2
   d474e:	f7ff bf2b 	b.w	d45a8 <network_disconnect>

000d4752 <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d4752:	2300      	movs	r3, #0
   d4754:	6840      	ldr	r0, [r0, #4]
   d4756:	461a      	mov	r2, r3
   d4758:	f7ff bf16 	b.w	d4588 <network_connect>

000d475c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d475c:	4b08      	ldr	r3, [pc, #32]	; (d4780 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d475e:	b510      	push	{r4, lr}
   d4760:	2428      	movs	r4, #40	; 0x28
   d4762:	4622      	mov	r2, r4
   d4764:	4618      	mov	r0, r3
   d4766:	2100      	movs	r1, #0
   d4768:	f001 fe44 	bl	d63f4 <memset>
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d476c:	4b05      	ldr	r3, [pc, #20]	; (d4784 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   d476e:	8004      	strh	r4, [r0, #0]
        cid = -1;
   d4770:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d4774:	6042      	str	r2, [r0, #4]
   d4776:	2204      	movs	r2, #4
   d4778:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d477a:	4a03      	ldr	r2, [pc, #12]	; (d4788 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d477c:	601a      	str	r2, [r3, #0]
   d477e:	bd10      	pop	{r4, pc}
   d4780:	2003e67c 	.word	0x2003e67c
   d4784:	2003e674 	.word	0x2003e674
   d4788:	000d672c 	.word	0x000d672c

000d478c <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d478c:	2200      	movs	r2, #0
   d478e:	6840      	ldr	r0, [r0, #4]
   d4790:	4611      	mov	r1, r2
   d4792:	f7ff bf31 	b.w	d45f8 <network_listening>

000d4796 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d4796:	2200      	movs	r2, #0
   d4798:	6840      	ldr	r0, [r0, #4]
   d479a:	4611      	mov	r1, r2
   d479c:	f7ff bf3c 	b.w	d4618 <network_get_listen_timeout>

000d47a0 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d47a0:	6840      	ldr	r0, [r0, #4]
   d47a2:	2200      	movs	r2, #0
   d47a4:	f7ff bf30 	b.w	d4608 <network_set_listen_timeout>

000d47a8 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d47a8:	6840      	ldr	r0, [r0, #4]
   d47aa:	2200      	movs	r2, #0
   d47ac:	f081 0101 	eor.w	r1, r1, #1
   d47b0:	f7ff bf1a 	b.w	d45e8 <network_listen>

000d47b4 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d47b4:	2300      	movs	r3, #0
   d47b6:	6840      	ldr	r0, [r0, #4]
   d47b8:	461a      	mov	r2, r3
   d47ba:	4619      	mov	r1, r3
   d47bc:	f7ff bf0c 	b.w	d45d8 <network_off>

000d47c0 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d47c0:	2300      	movs	r3, #0
   d47c2:	6840      	ldr	r0, [r0, #4]
   d47c4:	461a      	mov	r2, r3
   d47c6:	4619      	mov	r1, r3
   d47c8:	f7ff befe 	b.w	d45c8 <network_on>

000d47cc <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d47cc:	2200      	movs	r2, #0
   d47ce:	6840      	ldr	r0, [r0, #4]
   d47d0:	4611      	mov	r1, r2
   d47d2:	f7ff bef1 	b.w	d45b8 <network_ready>

000d47d6 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d47d6:	2200      	movs	r2, #0
   d47d8:	6840      	ldr	r0, [r0, #4]
   d47da:	4611      	mov	r1, r2
   d47dc:	f7ff bedc 	b.w	d4598 <network_connecting>

000d47e0 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d47e0:	6840      	ldr	r0, [r0, #4]
   d47e2:	2200      	movs	r2, #0
   d47e4:	2102      	movs	r1, #2
   d47e6:	f7ff bedf 	b.w	d45a8 <network_disconnect>

000d47ea <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d47ea:	2300      	movs	r3, #0
   d47ec:	6840      	ldr	r0, [r0, #4]
   d47ee:	461a      	mov	r2, r3
   d47f0:	f7ff beca 	b.w	d4588 <network_connect>

000d47f4 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   d47f4:	4b02      	ldr	r3, [pc, #8]	; (d4800 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d47f6:	2203      	movs	r2, #3
   d47f8:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d47fa:	4a02      	ldr	r2, [pc, #8]	; (d4804 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d47fc:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d47fe:	4770      	bx	lr
   d4800:	2003e6a4 	.word	0x2003e6a4
   d4804:	000d6768 	.word	0x000d6768

000d4808 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d4808:	4770      	bx	lr

000d480a <_ZN9IPAddressD0Ev>:
   d480a:	b510      	push	{r4, lr}
   d480c:	2118      	movs	r1, #24
   d480e:	4604      	mov	r4, r0
   d4810:	f001 fdbe 	bl	d6390 <_ZdlPvj>
   d4814:	4620      	mov	r0, r4
   d4816:	bd10      	pop	{r4, pc}

000d4818 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d4818:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d481a:	7d03      	ldrb	r3, [r0, #20]
   d481c:	2b06      	cmp	r3, #6
{
   d481e:	b08d      	sub	sp, #52	; 0x34
   d4820:	460e      	mov	r6, r1
   d4822:	f100 0704 	add.w	r7, r0, #4
   d4826:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d482a:	d012      	beq.n	d4852 <_ZNK9IPAddress7printToER5Print+0x3a>
   d482c:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d4830:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d4834:	220a      	movs	r2, #10
   d4836:	4630      	mov	r0, r6
   d4838:	f001 fae9 	bl	d5e0e <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d483c:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d483e:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d4840:	d019      	beq.n	d4876 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d4842:	2c00      	cmp	r4, #0
   d4844:	d0f4      	beq.n	d4830 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d4846:	212e      	movs	r1, #46	; 0x2e
   d4848:	4630      	mov	r0, r6
   d484a:	f001 fac7 	bl	d5ddc <_ZN5Print5printEc>
   d484e:	4404      	add	r4, r0
   d4850:	e7ee      	b.n	d4830 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d4852:	232f      	movs	r3, #47	; 0x2f
   d4854:	466a      	mov	r2, sp
   d4856:	4639      	mov	r1, r7
   d4858:	200a      	movs	r0, #10
		buf[0] = 0;
   d485a:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d485e:	f7ff fdaf 	bl	d43c0 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d4862:	4668      	mov	r0, sp
   d4864:	f001 fe1b 	bl	d649e <strlen>
   d4868:	6833      	ldr	r3, [r6, #0]
   d486a:	4602      	mov	r2, r0
   d486c:	68db      	ldr	r3, [r3, #12]
   d486e:	4669      	mov	r1, sp
   d4870:	4630      	mov	r0, r6
   d4872:	4798      	blx	r3
   d4874:	4604      	mov	r4, r0
    }
    return n;
}
   d4876:	4620      	mov	r0, r4
   d4878:	b00d      	add	sp, #52	; 0x34
   d487a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d487c <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d487c:	b510      	push	{r4, lr}
   d487e:	4b05      	ldr	r3, [pc, #20]	; (d4894 <_ZN9IPAddressC1Ev+0x18>)
   d4880:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d4882:	2211      	movs	r2, #17
   d4884:	f840 3b04 	str.w	r3, [r0], #4
   d4888:	2100      	movs	r1, #0
   d488a:	f001 fdb3 	bl	d63f4 <memset>
}
   d488e:	4620      	mov	r0, r4
   d4890:	bd10      	pop	{r4, pc}
   d4892:	bf00      	nop
   d4894:	000d67a4 	.word	0x000d67a4

000d4898 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d4898:	4603      	mov	r3, r0
   d489a:	4a07      	ldr	r2, [pc, #28]	; (d48b8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d489c:	b510      	push	{r4, lr}
   d489e:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d48a2:	f101 0210 	add.w	r2, r1, #16
   d48a6:	f851 4b04 	ldr.w	r4, [r1], #4
   d48aa:	f843 4b04 	str.w	r4, [r3], #4
   d48ae:	4291      	cmp	r1, r2
   d48b0:	d1f9      	bne.n	d48a6 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d48b2:	780a      	ldrb	r2, [r1, #0]
   d48b4:	701a      	strb	r2, [r3, #0]
}
   d48b6:	bd10      	pop	{r4, pc}
   d48b8:	000d67a4 	.word	0x000d67a4

000d48bc <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d48bc:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d48be:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d48c2:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d48c6:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d48ca:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d48ce:	2304      	movs	r3, #4
   d48d0:	6041      	str	r1, [r0, #4]
   d48d2:	7503      	strb	r3, [r0, #20]
}
   d48d4:	bd10      	pop	{r4, pc}

000d48d6 <_ZN9IPAddressaSEPKh>:
{
   d48d6:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d48d8:	78cb      	ldrb	r3, [r1, #3]
   d48da:	9300      	str	r3, [sp, #0]
   d48dc:	788b      	ldrb	r3, [r1, #2]
   d48de:	784a      	ldrb	r2, [r1, #1]
   d48e0:	7809      	ldrb	r1, [r1, #0]
   d48e2:	f7ff ffeb 	bl	d48bc <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d48e6:	b002      	add	sp, #8
   d48e8:	bd10      	pop	{r4, pc}

000d48ea <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
   d48ea:	f100 0310 	add.w	r3, r0, #16
   d48ee:	2201      	movs	r2, #1
    do {
        if (t->type == JSMN_OBJECT) {
   d48f0:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   d48f4:	2901      	cmp	r1, #1
   d48f6:	4618      	mov	r0, r3
   d48f8:	d108      	bne.n	d490c <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
   d48fa:	f853 1c04 	ldr.w	r1, [r3, #-4]
   d48fe:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
   d4902:	3a01      	subs	r2, #1
   d4904:	f103 0310 	add.w	r3, r3, #16
   d4908:	d1f2      	bne.n	d48f0 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
   d490a:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
   d490c:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   d490e:	bf04      	itt	eq
   d4910:	f853 1c04 	ldreq.w	r1, [r3, #-4]
   d4914:	1852      	addeq	r2, r2, r1
   d4916:	e7f4      	b.n	d4902 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

000d4918 <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   d4918:	b40e      	push	{r1, r2, r3}
   d491a:	b5f0      	push	{r4, r5, r6, r7, lr}
   d491c:	b088      	sub	sp, #32
   d491e:	af00      	add	r7, sp, #0
   d4920:	f107 0534 	add.w	r5, r7, #52	; 0x34
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d4924:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
   d4926:	f855 2b04 	ldr.w	r2, [r5], #4
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d492a:	607a      	str	r2, [r7, #4]
void spark::JSONWriter::printf(const char *fmt, ...) {
   d492c:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d492e:	462b      	mov	r3, r5
   d4930:	1878      	adds	r0, r7, r1
    va_start(args, fmt);
   d4932:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d4934:	f7ff fea0 	bl	d4678 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   d4938:	280f      	cmp	r0, #15
   d493a:	687a      	ldr	r2, [r7, #4]
   d493c:	d91a      	bls.n	d4974 <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
   d493e:	f100 0308 	add.w	r3, r0, #8
   d4942:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   d4946:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
   d4948:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   d494c:	1c41      	adds	r1, r0, #1
   d494e:	462b      	mov	r3, r5
   d4950:	4668      	mov	r0, sp
        va_start(args, fmt);
   d4952:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   d4954:	f7ff fe90 	bl	d4678 <vsnprintf>
        if (n > 0) {
   d4958:	1e02      	subs	r2, r0, #0
   d495a:	dd04      	ble.n	d4966 <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
   d495c:	6823      	ldr	r3, [r4, #0]
   d495e:	4669      	mov	r1, sp
   d4960:	689b      	ldr	r3, [r3, #8]
   d4962:	4620      	mov	r0, r4
   d4964:	4798      	blx	r3
   d4966:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
   d4968:	3720      	adds	r7, #32
   d496a:	46bd      	mov	sp, r7
   d496c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   d4970:	b003      	add	sp, #12
   d4972:	4770      	bx	lr
    } else if (n > 0) {
   d4974:	2800      	cmp	r0, #0
   d4976:	d0f7      	beq.n	d4968 <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
   d4978:	6823      	ldr	r3, [r4, #0]
   d497a:	4602      	mov	r2, r0
   d497c:	689b      	ldr	r3, [r3, #8]
   d497e:	f107 0110 	add.w	r1, r7, #16
   d4982:	4620      	mov	r0, r4
   d4984:	4798      	blx	r3
}
   d4986:	e7ef      	b.n	d4968 <_ZN5spark10JSONWriter6printfEPKcz+0x50>

000d4988 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d4988:	b510      	push	{r4, lr}
          _M_dispose();
   d498a:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d498c:	4604      	mov	r4, r0
          _M_dispose();
   d498e:	689b      	ldr	r3, [r3, #8]
   d4990:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4992:	68a3      	ldr	r3, [r4, #8]
   d4994:	3b01      	subs	r3, #1
   d4996:	60a3      	str	r3, [r4, #8]
   d4998:	b92b      	cbnz	r3, d49a6 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
   d499a:	6823      	ldr	r3, [r4, #0]
   d499c:	4620      	mov	r0, r4
   d499e:	68db      	ldr	r3, [r3, #12]
    }
   d49a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   d49a4:	4718      	bx	r3
    }
   d49a6:	bd10      	pop	{r4, pc}

000d49a8 <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   d49a8:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   d49aa:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
   d49ac:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   d49b0:	689b      	ldr	r3, [r3, #8]
   d49b2:	2201      	movs	r2, #1
   d49b4:	f10d 0107 	add.w	r1, sp, #7
   d49b8:	4798      	blx	r3
}
   d49ba:	b003      	add	sp, #12
   d49bc:	f85d fb04 	ldr.w	pc, [sp], #4

000d49c0 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>:
      _M_get() const noexcept
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
    };

  template<typename _Tp, _Lock_policy _Lp>
    class __shared_ptr
   d49c0:	b538      	push	{r3, r4, r5, lr}
   d49c2:	680b      	ldr	r3, [r1, #0]
   d49c4:	6003      	str	r3, [r0, #0]
   d49c6:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
   d49c8:	6843      	ldr	r3, [r0, #4]
   d49ca:	429d      	cmp	r5, r3
    class __shared_ptr
   d49cc:	4604      	mov	r4, r0
	if (__tmp != _M_pi)
   d49ce:	d00c      	beq.n	d49ea <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x2a>
	    if (__tmp != 0)
   d49d0:	b115      	cbz	r5, d49d8 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x18>
    { ++_M_use_count; }
   d49d2:	686b      	ldr	r3, [r5, #4]
   d49d4:	3301      	adds	r3, #1
   d49d6:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   d49d8:	6860      	ldr	r0, [r4, #4]
   d49da:	b128      	cbz	r0, d49e8 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x28>
      if (--_M_use_count == 0)
   d49dc:	6843      	ldr	r3, [r0, #4]
   d49de:	3b01      	subs	r3, #1
   d49e0:	6043      	str	r3, [r0, #4]
   d49e2:	b90b      	cbnz	r3, d49e8 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x28>
   d49e4:	f7ff ffd0 	bl	d4988 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
	    _M_pi = __tmp;
   d49e8:	6065      	str	r5, [r4, #4]
    class __shared_ptr
   d49ea:	4620      	mov	r0, r4
   d49ec:	bd38      	pop	{r3, r4, r5, pc}

000d49ee <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   d49ee:	460b      	mov	r3, r1
   d49f0:	4611      	mov	r1, r2
#if __cplusplus > 201402L
      using weak_type = __weak_ptr<_Tp, _Lp>;
#endif

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   d49f2:	2200      	movs	r2, #0
   d49f4:	b510      	push	{r4, lr}
      constexpr __shared_count() noexcept : _M_pi(0)
   d49f6:	e9c0 2200 	strd	r2, r2, [r0]
   d49fa:	4604      	mov	r4, r0
        t_ = t;
   d49fc:	6083      	str	r3, [r0, #8]
    if (t) {
   d49fe:	b90b      	cbnz	r3, d4a04 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
   d4a00:	4620      	mov	r0, r4
   d4a02:	bd10      	pop	{r4, pc}
   *
   *  The object pointed to is deleted when the last shared_ptr pointing to
   *  it is destroyed or reset.
  */
  template<typename _Tp>
    class shared_ptr : public __shared_ptr<_Tp>
   d4a04:	f7ff ffdc 	bl	d49c0 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
   d4a08:	e7fa      	b.n	d4a00 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

000d4a0a <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
   d4a0a:	6883      	ldr	r3, [r0, #8]
   d4a0c:	b1eb      	cbz	r3, d4a4a <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
   d4a0e:	781a      	ldrb	r2, [r3, #0]
   d4a10:	2a03      	cmp	r2, #3
   d4a12:	d81a      	bhi.n	d4a4a <_ZNK5spark9JSONValue4typeEv+0x40>
   d4a14:	e8df f002 	tbb	[pc, r2]
   d4a18:	1b021704 	.word	0x1b021704
   d4a1c:	2005      	movs	r0, #5
   d4a1e:	4770      	bx	lr
        const char c = d_->json[t_->start];
   d4a20:	6802      	ldr	r2, [r0, #0]
   d4a22:	685b      	ldr	r3, [r3, #4]
   d4a24:	6852      	ldr	r2, [r2, #4]
   d4a26:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   d4a28:	282d      	cmp	r0, #45	; 0x2d
   d4a2a:	d012      	beq.n	d4a52 <_ZNK5spark9JSONValue4typeEv+0x48>
   d4a2c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d4a30:	2b09      	cmp	r3, #9
   d4a32:	d90e      	bls.n	d4a52 <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   d4a34:	2874      	cmp	r0, #116	; 0x74
   d4a36:	d00e      	beq.n	d4a56 <_ZNK5spark9JSONValue4typeEv+0x4c>
   d4a38:	2866      	cmp	r0, #102	; 0x66
   d4a3a:	d00c      	beq.n	d4a56 <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
   d4a3c:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   d4a40:	4258      	negs	r0, r3
   d4a42:	4158      	adcs	r0, r3
   d4a44:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
   d4a46:	2006      	movs	r0, #6
   d4a48:	4770      	bx	lr
        return JSON_TYPE_INVALID;
   d4a4a:	2000      	movs	r0, #0
   d4a4c:	4770      	bx	lr
        return JSON_TYPE_STRING;
   d4a4e:	2004      	movs	r0, #4
   d4a50:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
   d4a52:	2003      	movs	r0, #3
   d4a54:	4770      	bx	lr
            return JSON_TYPE_BOOL;
   d4a56:	2002      	movs	r0, #2
}
   d4a58:	4770      	bx	lr

000d4a5a <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
   d4a5a:	b510      	push	{r4, lr}
   d4a5c:	4604      	mov	r4, r0
    switch (type()) {
   d4a5e:	f7ff ffd4 	bl	d4a0a <_ZNK5spark9JSONValue4typeEv>
   d4a62:	2802      	cmp	r0, #2
   d4a64:	d00e      	beq.n	d4a84 <_ZNK5spark9JSONValue5toIntEv+0x2a>
   d4a66:	1ec3      	subs	r3, r0, #3
   d4a68:	b2db      	uxtb	r3, r3
   d4a6a:	2b01      	cmp	r3, #1
   d4a6c:	d814      	bhi.n	d4a98 <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
   d4a6e:	6822      	ldr	r2, [r4, #0]
   d4a70:	68a3      	ldr	r3, [r4, #8]
   d4a72:	6850      	ldr	r0, [r2, #4]
   d4a74:	685b      	ldr	r3, [r3, #4]
}
   d4a76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
   d4a7a:	220a      	movs	r2, #10
   d4a7c:	2100      	movs	r1, #0
   d4a7e:	4418      	add	r0, r3
   d4a80:	f001 bdb6 	b.w	d65f0 <strtol>
        const char* const s = d_->json + t_->start;
   d4a84:	6822      	ldr	r2, [r4, #0]
   d4a86:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   d4a88:	6852      	ldr	r2, [r2, #4]
   d4a8a:	685b      	ldr	r3, [r3, #4]
   d4a8c:	5cd0      	ldrb	r0, [r2, r3]
   d4a8e:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   d4a92:	4258      	negs	r0, r3
   d4a94:	4158      	adcs	r0, r3
}
   d4a96:	bd10      	pop	{r4, pc}
    switch (type()) {
   d4a98:	2000      	movs	r0, #0
   d4a9a:	e7fc      	b.n	d4a96 <_ZNK5spark9JSONValue5toIntEv+0x3c>

000d4a9c <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   d4a9c:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   d4a9e:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   d4aa0:	e9c0 3300 	strd	r3, r3, [r0]
   d4aa4:	4604      	mov	r4, r0
        n_(0) {
   d4aa6:	480e      	ldr	r0, [pc, #56]	; (d4ae0 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
   d4aa8:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   d4aac:	b1a9      	cbz	r1, d4ada <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
   d4aae:	780b      	ldrb	r3, [r1, #0]
   d4ab0:	2b03      	cmp	r3, #3
   d4ab2:	d006      	beq.n	d4ac2 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   d4ab4:	b98b      	cbnz	r3, d4ada <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   d4ab6:	6813      	ldr	r3, [r2, #0]
   d4ab8:	6858      	ldr	r0, [r3, #4]
   d4aba:	684b      	ldr	r3, [r1, #4]
   d4abc:	5cc3      	ldrb	r3, [r0, r3]
   d4abe:	2b6e      	cmp	r3, #110	; 0x6e
   d4ac0:	d007      	beq.n	d4ad2 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
   d4ac2:	6813      	ldr	r3, [r2, #0]
   d4ac4:	684d      	ldr	r5, [r1, #4]
   d4ac6:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
   d4ac8:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
   d4aca:	4428      	add	r0, r5
            n_ = t->end - t->start;
   d4acc:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
   d4ace:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
   d4ad0:	60e3      	str	r3, [r4, #12]
   d4ad2:	4611      	mov	r1, r2
   d4ad4:	4620      	mov	r0, r4
   d4ad6:	f7ff ff73 	bl	d49c0 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
}
   d4ada:	4620      	mov	r0, r4
   d4adc:	bd38      	pop	{r3, r4, r5, pc}
   d4ade:	bf00      	nop
   d4ae0:	000d6816 	.word	0x000d6816

000d4ae4 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   d4ae4:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   d4ae6:	2500      	movs	r5, #0
   d4ae8:	460b      	mov	r3, r1
      constexpr __shared_count() noexcept : _M_pi(0)
   d4aea:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
   d4aee:	e9c0 5502 	strd	r5, r5, [r0, #8]
   d4af2:	e9c0 5504 	strd	r5, r5, [r0, #16]
   d4af6:	4604      	mov	r4, r0
   d4af8:	4611      	mov	r1, r2
    if (t && t->type == JSMN_OBJECT) {
   d4afa:	b14b      	cbz	r3, d4b10 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
   d4afc:	781a      	ldrb	r2, [r3, #0]
   d4afe:	2a01      	cmp	r2, #1
   d4b00:	d106      	bne.n	d4b10 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
   d4b02:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
   d4b06:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
   d4b08:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
   d4b0a:	6143      	str	r3, [r0, #20]
   d4b0c:	f7ff ff58 	bl	d49c0 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
}
   d4b10:	4620      	mov	r0, r4
   d4b12:	bd38      	pop	{r3, r4, r5, pc}

000d4b14 <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
   d4b14:	b510      	push	{r4, lr}
    if (!n_) {
   d4b16:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
   d4b18:	4604      	mov	r4, r0
    if (!n_) {
   d4b1a:	b163      	cbz	r3, d4b36 <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
   d4b1c:	6880      	ldr	r0, [r0, #8]
   d4b1e:	60e0      	str	r0, [r4, #12]
    --n_;
   d4b20:	3b01      	subs	r3, #1
    ++t_;
   d4b22:	3010      	adds	r0, #16
   d4b24:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   d4b26:	6120      	str	r0, [r4, #16]
    --n_;
   d4b28:	6163      	str	r3, [r4, #20]
    if (n_) {
   d4b2a:	b113      	cbz	r3, d4b32 <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
   d4b2c:	f7ff fedd 	bl	d48ea <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   d4b30:	60a0      	str	r0, [r4, #8]
    return true;
   d4b32:	2001      	movs	r0, #1
   d4b34:	e000      	b.n	d4b38 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
   d4b36:	4618      	mov	r0, r3
}
   d4b38:	bd10      	pop	{r4, pc}

000d4b3a <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
   d4b3a:	b510      	push	{r4, lr}
    write('}');
   d4b3c:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
   d4b3e:	4604      	mov	r4, r0
    write('}');
   d4b40:	f7ff ff32 	bl	d49a8 <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   d4b44:	2301      	movs	r3, #1
   d4b46:	7123      	strb	r3, [r4, #4]
}
   d4b48:	4620      	mov	r0, r4
   d4b4a:	bd10      	pop	{r4, pc}

000d4b4c <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
   d4b4c:	b508      	push	{r3, lr}
    switch (state_) {
   d4b4e:	7903      	ldrb	r3, [r0, #4]
   d4b50:	2b01      	cmp	r3, #1
   d4b52:	d002      	beq.n	d4b5a <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   d4b54:	2b02      	cmp	r3, #2
   d4b56:	d004      	beq.n	d4b62 <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
   d4b58:	bd08      	pop	{r3, pc}
        write(',');
   d4b5a:	212c      	movs	r1, #44	; 0x2c
        write(':');
   d4b5c:	f7ff ff24 	bl	d49a8 <_ZN5spark10JSONWriter5writeEc>
}
   d4b60:	e7fa      	b.n	d4b58 <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
   d4b62:	213a      	movs	r1, #58	; 0x3a
   d4b64:	e7fa      	b.n	d4b5c <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

000d4b66 <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
   d4b66:	b510      	push	{r4, lr}
   d4b68:	4604      	mov	r4, r0
    writeSeparator();
   d4b6a:	f7ff ffef 	bl	d4b4c <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   d4b6e:	4620      	mov	r0, r4
   d4b70:	217b      	movs	r1, #123	; 0x7b
   d4b72:	f7ff ff19 	bl	d49a8 <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   d4b76:	2300      	movs	r3, #0
   d4b78:	7123      	strb	r3, [r4, #4]
}
   d4b7a:	4620      	mov	r0, r4
   d4b7c:	bd10      	pop	{r4, pc}
	...

000d4b80 <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
   d4b80:	b513      	push	{r0, r1, r4, lr}
   d4b82:	4604      	mov	r4, r0
   d4b84:	9101      	str	r1, [sp, #4]
    writeSeparator();
   d4b86:	f7ff ffe1 	bl	d4b4c <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   d4b8a:	6823      	ldr	r3, [r4, #0]
   d4b8c:	9a01      	ldr	r2, [sp, #4]
   d4b8e:	68db      	ldr	r3, [r3, #12]
   d4b90:	4903      	ldr	r1, [pc, #12]	; (d4ba0 <_ZN5spark10JSONWriter5valueEi+0x20>)
   d4b92:	4620      	mov	r0, r4
   d4b94:	4798      	blx	r3
    state_ = NEXT;
   d4b96:	2301      	movs	r3, #1
}
   d4b98:	4620      	mov	r0, r4
    state_ = NEXT;
   d4b9a:	7123      	strb	r3, [r4, #4]
}
   d4b9c:	b002      	add	sp, #8
   d4b9e:	bd10      	pop	{r4, pc}
   d4ba0:	000d67b0 	.word	0x000d67b0

000d4ba4 <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   d4ba4:	b513      	push	{r0, r1, r4, lr}
   d4ba6:	4604      	mov	r4, r0
   d4ba8:	9101      	str	r1, [sp, #4]
    writeSeparator();
   d4baa:	f7ff ffcf 	bl	d4b4c <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   d4bae:	6823      	ldr	r3, [r4, #0]
   d4bb0:	9a01      	ldr	r2, [sp, #4]
   d4bb2:	68db      	ldr	r3, [r3, #12]
   d4bb4:	4903      	ldr	r1, [pc, #12]	; (d4bc4 <_ZN5spark10JSONWriter5valueEj+0x20>)
   d4bb6:	4620      	mov	r0, r4
   d4bb8:	4798      	blx	r3
    state_ = NEXT;
   d4bba:	2301      	movs	r3, #1
}
   d4bbc:	4620      	mov	r0, r4
    state_ = NEXT;
   d4bbe:	7123      	strb	r3, [r4, #4]
}
   d4bc0:	b002      	add	sp, #8
   d4bc2:	bd10      	pop	{r4, pc}
   d4bc4:	000d67b3 	.word	0x000d67b3

000d4bc8 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   d4bc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d4bcc:	460d      	mov	r5, r1
   d4bce:	4617      	mov	r7, r2
    write('"');
   d4bd0:	2122      	movs	r1, #34	; 0x22
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   d4bd2:	f8df 80a0 	ldr.w	r8, [pc, #160]	; d4c74 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xac>
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   d4bd6:	4604      	mov	r4, r0
    const char* const end = str + size;
   d4bd8:	442f      	add	r7, r5
    write('"');
   d4bda:	f7ff fee5 	bl	d49a8 <_ZN5spark10JSONWriter5writeEc>
    const char* const end = str + size;
   d4bde:	4629      	mov	r1, r5
    while (s != end) {
   d4be0:	42bd      	cmp	r5, r7
   d4be2:	462a      	mov	r2, r5
   d4be4:	d038      	beq.n	d4c58 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x90>
        const char c = *s;
   d4be6:	f815 6b01 	ldrb.w	r6, [r5], #1
        if (c == '"' || c == '\\' || (c >= 0 && c <= 0x1f)) {
   d4bea:	2e22      	cmp	r6, #34	; 0x22
   d4bec:	d003      	beq.n	d4bf6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2e>
   d4bee:	2e5c      	cmp	r6, #92	; 0x5c
   d4bf0:	d001      	beq.n	d4bf6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2e>
   d4bf2:	2e1f      	cmp	r6, #31
   d4bf4:	d8f4      	bhi.n	d4be0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
   d4bf6:	6823      	ldr	r3, [r4, #0]
   d4bf8:	1a52      	subs	r2, r2, r1
   d4bfa:	689b      	ldr	r3, [r3, #8]
   d4bfc:	4620      	mov	r0, r4
   d4bfe:	4798      	blx	r3
            write('\\');
   d4c00:	215c      	movs	r1, #92	; 0x5c
   d4c02:	4620      	mov	r0, r4
   d4c04:	f7ff fed0 	bl	d49a8 <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   d4c08:	2e0d      	cmp	r6, #13
   d4c0a:	d80a      	bhi.n	d4c22 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x5a>
   d4c0c:	2e07      	cmp	r6, #7
   d4c0e:	d91c      	bls.n	d4c4a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
   d4c10:	f1a6 0308 	sub.w	r3, r6, #8
   d4c14:	2b05      	cmp	r3, #5
   d4c16:	d818      	bhi.n	d4c4a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
   d4c18:	e8df f003 	tbb	[pc, r3]
   d4c1c:	17110f0d 	.word	0x17110f0d
   d4c20:	1513      	.short	0x1513
   d4c22:	2e22      	cmp	r6, #34	; 0x22
   d4c24:	d001      	beq.n	d4c2a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x62>
   d4c26:	2e5c      	cmp	r6, #92	; 0x5c
   d4c28:	d10f      	bne.n	d4c4a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
                write(c);
   d4c2a:	4631      	mov	r1, r6
                write('b');
   d4c2c:	4620      	mov	r0, r4
   d4c2e:	f7ff febb 	bl	d49a8 <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
   d4c32:	4629      	mov	r1, r5
    while (s != end) {
   d4c34:	e7d4      	b.n	d4be0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
   d4c36:	2162      	movs	r1, #98	; 0x62
   d4c38:	e7f8      	b.n	d4c2c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('t');
   d4c3a:	2174      	movs	r1, #116	; 0x74
   d4c3c:	e7f6      	b.n	d4c2c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('n');
   d4c3e:	216e      	movs	r1, #110	; 0x6e
   d4c40:	e7f4      	b.n	d4c2c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('f');
   d4c42:	2166      	movs	r1, #102	; 0x66
   d4c44:	e7f2      	b.n	d4c2c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('r');
   d4c46:	2172      	movs	r1, #114	; 0x72
   d4c48:	e7f0      	b.n	d4c2c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                printf("u%04x", (unsigned)c);
   d4c4a:	6823      	ldr	r3, [r4, #0]
   d4c4c:	4632      	mov	r2, r6
   d4c4e:	68db      	ldr	r3, [r3, #12]
   d4c50:	4641      	mov	r1, r8
   d4c52:	4620      	mov	r0, r4
   d4c54:	4798      	blx	r3
                break;
   d4c56:	e7ec      	b.n	d4c32 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6a>
        }
        ++s;
    }
    if (s != str) {
   d4c58:	428d      	cmp	r5, r1
   d4c5a:	d004      	beq.n	d4c66 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9e>
        write(str, s - str); // Write remaining characters
   d4c5c:	6823      	ldr	r3, [r4, #0]
   d4c5e:	1a6a      	subs	r2, r5, r1
   d4c60:	689b      	ldr	r3, [r3, #8]
   d4c62:	4620      	mov	r0, r4
   d4c64:	4798      	blx	r3
    }
    write('"');
   d4c66:	2122      	movs	r1, #34	; 0x22
   d4c68:	4620      	mov	r0, r4
   d4c6a:	f7ff fe9d 	bl	d49a8 <_ZN5spark10JSONWriter5writeEc>
}
   d4c6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4c72:	bf00      	nop
   d4c74:	000d67b6 	.word	0x000d67b6

000d4c78 <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   d4c78:	b513      	push	{r0, r1, r4, lr}
   d4c7a:	4604      	mov	r4, r0
   d4c7c:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   d4c80:	f7ff ff64 	bl	d4b4c <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   d4c84:	4620      	mov	r0, r4
   d4c86:	e9dd 2100 	ldrd	r2, r1, [sp]
   d4c8a:	f7ff ff9d 	bl	d4bc8 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   d4c8e:	2302      	movs	r3, #2
}
   d4c90:	4620      	mov	r0, r4
    state_ = VALUE;
   d4c92:	7123      	strb	r3, [r4, #4]
}
   d4c94:	b002      	add	sp, #8
   d4c96:	bd10      	pop	{r4, pc}

000d4c98 <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   d4c98:	b513      	push	{r0, r1, r4, lr}
   d4c9a:	4604      	mov	r4, r0
   d4c9c:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   d4ca0:	f7ff ff54 	bl	d4b4c <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   d4ca4:	4620      	mov	r0, r4
   d4ca6:	e9dd 2100 	ldrd	r2, r1, [sp]
   d4caa:	f7ff ff8d 	bl	d4bc8 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   d4cae:	2301      	movs	r3, #1
}
   d4cb0:	4620      	mov	r0, r4
    state_ = NEXT;
   d4cb2:	7123      	strb	r3, [r4, #4]
}
   d4cb4:	b002      	add	sp, #8
   d4cb6:	bd10      	pop	{r4, pc}

000d4cb8 <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
   d4cb8:	6880      	ldr	r0, [r0, #8]
   d4cba:	6803      	ldr	r3, [r0, #0]
   d4cbc:	68db      	ldr	r3, [r3, #12]
   d4cbe:	4718      	bx	r3

000d4cc0 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
   d4cc0:	4770      	bx	lr

000d4cc2 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   d4cc2:	4608      	mov	r0, r1
   d4cc4:	b111      	cbz	r1, d4ccc <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   d4cc6:	680b      	ldr	r3, [r1, #0]
   d4cc8:	685b      	ldr	r3, [r3, #4]
   d4cca:	4718      	bx	r3
}
   d4ccc:	4770      	bx	lr

000d4cce <__tcf_0>:
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
    static DefaultLogHandlerFactory factory;
   d4cce:	4770      	bx	lr

000d4cd0 <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   d4cd0:	4770      	bx	lr

000d4cd2 <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
   d4cd2:	4770      	bx	lr

000d4cd4 <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
   d4cd4:	4770      	bx	lr

000d4cd6 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
const char* nextSubcategoryName(const char* &category, size_t &size) {
   d4cd6:	b538      	push	{r3, r4, r5, lr}
   d4cd8:	4604      	mov	r4, r0
   d4cda:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   d4cdc:	6800      	ldr	r0, [r0, #0]
   d4cde:	212e      	movs	r1, #46	; 0x2e
   d4ce0:	f001 fbc1 	bl	d6466 <strchrnul>
    size = s - category;
   d4ce4:	6823      	ldr	r3, [r4, #0]
   d4ce6:	1ac3      	subs	r3, r0, r3
   d4ce8:	602b      	str	r3, [r5, #0]
    if (size) {
   d4cea:	b123      	cbz	r3, d4cf6 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   d4cec:	7803      	ldrb	r3, [r0, #0]
   d4cee:	b103      	cbz	r3, d4cf2 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   d4cf0:	3001      	adds	r0, #1
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d4cf2:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d4cf4:	6020      	str	r0, [r4, #0]
}
   d4cf6:	4618      	mov	r0, r3
   d4cf8:	bd38      	pop	{r3, r4, r5, pc}

000d4cfa <_ZN5spark16JSONStreamWriterD0Ev>:
   d4cfa:	b510      	push	{r4, lr}
   d4cfc:	210c      	movs	r1, #12
   d4cfe:	4604      	mov	r4, r0
   d4d00:	f001 fb46 	bl	d6390 <_ZdlPvj>
   d4d04:	4620      	mov	r0, r4
   d4d06:	bd10      	pop	{r4, pc}

000d4d08 <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   d4d08:	b510      	push	{r4, lr}
   d4d0a:	2104      	movs	r1, #4
   d4d0c:	4604      	mov	r4, r0
   d4d0e:	f001 fb3f 	bl	d6390 <_ZdlPvj>
   d4d12:	4620      	mov	r0, r4
   d4d14:	bd10      	pop	{r4, pc}

000d4d16 <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   d4d16:	b510      	push	{r4, lr}
   d4d18:	2104      	movs	r1, #4
   d4d1a:	4604      	mov	r4, r0
   d4d1c:	f001 fb38 	bl	d6390 <_ZdlPvj>
   d4d20:	4620      	mov	r0, r4
   d4d22:	bd10      	pop	{r4, pc}

000d4d24 <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
   d4d24:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   d4d26:	f001 fba8 	bl	d647a <strcmp>
}
   d4d2a:	fab0 f080 	clz	r0, r0
   d4d2e:	0940      	lsrs	r0, r0, #5
   d4d30:	bd08      	pop	{r3, pc}

000d4d32 <__tcf_1>:
   d4d32:	4770      	bx	lr

000d4d34 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != 3
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   d4d34:	b510      	push	{r4, lr}
   d4d36:	460c      	mov	r4, r1
#if PLATFORM_ID != 3
    if (stream == &Serial) {
   d4d38:	f001 fa68 	bl	d620c <_Z16_fetch_usbserialv>
   d4d3c:	4284      	cmp	r4, r0
   d4d3e:	d010      	beq.n	d4d62 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   d4d40:	f001 f9c2 	bl	d60c8 <_Z22__fetch_global_Serial1v>
   d4d44:	4284      	cmp	r4, r0
   d4d46:	d105      	bne.n	d4d54 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x20>
        Serial1.end();
   d4d48:	f001 f9be 	bl	d60c8 <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
}
   d4d4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
   d4d50:	f001 b9b7 	b.w	d60c2 <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   d4d54:	b12c      	cbz	r4, d4d62 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
   d4d56:	6823      	ldr	r3, [r4, #0]
   d4d58:	4620      	mov	r0, r4
   d4d5a:	685b      	ldr	r3, [r3, #4]
}
   d4d5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d4d60:	4718      	bx	r3
   d4d62:	bd10      	pop	{r4, pc}

000d4d64 <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   d4d64:	b513      	push	{r0, r1, r4, lr}
   d4d66:	4604      	mov	r4, r0
    return value(val, strlen(val));
   d4d68:	4608      	mov	r0, r1
   d4d6a:	9101      	str	r1, [sp, #4]
   d4d6c:	f001 fb97 	bl	d649e <strlen>
   d4d70:	9901      	ldr	r1, [sp, #4]
   d4d72:	4602      	mov	r2, r0
   d4d74:	4620      	mov	r0, r4
}
   d4d76:	b002      	add	sp, #8
   d4d78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
   d4d7c:	f7ff bf8c 	b.w	d4c98 <_ZN5spark10JSONWriter5valueEPKcj>

000d4d80 <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
   d4d80:	b513      	push	{r0, r1, r4, lr}
   d4d82:	4604      	mov	r4, r0
    write(str, strlen(str));
   d4d84:	4608      	mov	r0, r1
   d4d86:	9101      	str	r1, [sp, #4]
   d4d88:	f001 fb89 	bl	d649e <strlen>
   d4d8c:	6823      	ldr	r3, [r4, #0]
   d4d8e:	9901      	ldr	r1, [sp, #4]
   d4d90:	68db      	ldr	r3, [r3, #12]
   d4d92:	4602      	mov	r2, r0
   d4d94:	4620      	mov	r0, r4
}
   d4d96:	b002      	add	sp, #8
   d4d98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
   d4d9c:	4718      	bx	r3

000d4d9e <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
   d4d9e:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   d4da0:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
   d4da2:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   d4da6:	68db      	ldr	r3, [r3, #12]
   d4da8:	2201      	movs	r2, #1
   d4daa:	f10d 0107 	add.w	r1, sp, #7
   d4dae:	4798      	blx	r3
}
   d4db0:	b003      	add	sp, #12
   d4db2:	f85d fb04 	ldr.w	pc, [sp], #4

000d4db6 <_ZN5spark16StreamLogHandler6printfEPKcz>:
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   d4db6:	b40e      	push	{r1, r2, r3}
   d4db8:	b503      	push	{r0, r1, lr}
   d4dba:	ab03      	add	r3, sp, #12
    stream_->vprintf(false, fmt, args);
   d4dbc:	2100      	movs	r1, #0
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   d4dbe:	f853 2b04 	ldr.w	r2, [r3], #4
    stream_->vprintf(false, fmt, args);
   d4dc2:	6a00      	ldr	r0, [r0, #32]
    va_start(args, fmt);
   d4dc4:	9301      	str	r3, [sp, #4]
    stream_->vprintf(false, fmt, args);
   d4dc6:	f001 f840 	bl	d5e4a <_ZN5Print7vprintfEbPKcSt9__va_list>
}
   d4dca:	b002      	add	sp, #8
   d4dcc:	f85d eb04 	ldr.w	lr, [sp], #4
   d4dd0:	b003      	add	sp, #12
   d4dd2:	4770      	bx	lr

000d4dd4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   d4dd4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
   d4dd8:	e9d0 9500 	ldrd	r9, r5, [r0]
   d4ddc:	f04f 0814 	mov.w	r8, #20
   d4de0:	fb08 f505 	mul.w	r5, r8, r5
   d4de4:	9300      	str	r3, [sp, #0]
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   d4de6:	10ab      	asrs	r3, r5, #2
   d4de8:	4d18      	ldr	r5, [pc, #96]	; (d4e4c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x78>)
   d4dea:	4617      	mov	r7, r2
   d4dec:	435d      	muls	r5, r3
   d4dee:	464c      	mov	r4, r9
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
   d4df0:	2d00      	cmp	r5, #0
   d4df2:	dd23      	ble.n	d4e3c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x68>
	{
	  _DistanceType __half = __len >> 1;
   d4df4:	106e      	asrs	r6, r5, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
   d4df6:	fb08 f006 	mul.w	r0, r8, r6
   d4dfa:	eb04 0a00 	add.w	sl, r4, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   d4dfe:	463a      	mov	r2, r7
   d4e00:	f8ba b004 	ldrh.w	fp, [sl, #4]
   d4e04:	5820      	ldr	r0, [r4, r0]
   d4e06:	9101      	str	r1, [sp, #4]
   d4e08:	455f      	cmp	r7, fp
   d4e0a:	bf28      	it	cs
   d4e0c:	465a      	movcs	r2, fp
   d4e0e:	f001 fb4e 	bl	d64ae <strncmp>
                if (cmp == 0) {
   d4e12:	9901      	ldr	r1, [sp, #4]
   d4e14:	2301      	movs	r3, #1
   d4e16:	b978      	cbnz	r0, d4e38 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
                    if (node.size == value.second) { // Lengths are equal
   d4e18:	455f      	cmp	r7, fp
   d4e1a:	d103      	bne.n	d4e24 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   d4e1c:	9a00      	ldr	r2, [sp, #0]
   d4e1e:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   d4e20:	4635      	mov	r5, r6
   d4e22:	e7e5      	b.n	d4df0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
                    return node.size < value.second;
   d4e24:	bf8c      	ite	hi
   d4e26:	2001      	movhi	r0, #1
   d4e28:	2000      	movls	r0, #0
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
   d4e2a:	2800      	cmp	r0, #0
   d4e2c:	d0f8      	beq.n	d4e20 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x4c>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   d4e2e:	1bae      	subs	r6, r5, r6
	      ++__first;
   d4e30:	f10a 0414 	add.w	r4, sl, #20
	      __len = __len - __half - 1;
   d4e34:	3e01      	subs	r6, #1
   d4e36:	e7f3      	b.n	d4e20 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x4c>
                return cmp < 0;
   d4e38:	0fc0      	lsrs	r0, r0, #31
   d4e3a:	e7f6      	b.n	d4e2a <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
      return __last - __first;
   d4e3c:	eba4 0409 	sub.w	r4, r4, r9
}
   d4e40:	4802      	ldr	r0, [pc, #8]	; (d4e4c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x78>)
   d4e42:	10a4      	asrs	r4, r4, #2
   d4e44:	4360      	muls	r0, r4
   d4e46:	b003      	add	sp, #12
   d4e48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d4e4c:	cccccccd 	.word	0xcccccccd

000d4e50 <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
   d4e50:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
   d4e52:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
   d4e54:	7e06      	ldrb	r6, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
   d4e56:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
   d4e58:	b30b      	cbz	r3, d4e9e <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
   d4e5a:	b301      	cbz	r1, d4e9e <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
        size_t size = 0; // Name length
   d4e5c:	2500      	movs	r5, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   d4e5e:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
   d4e62:	9503      	str	r5, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
   d4e64:	a903      	add	r1, sp, #12
   d4e66:	a801      	add	r0, sp, #4
   d4e68:	f7ff ff35 	bl	d4cd6 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   d4e6c:	4601      	mov	r1, r0
   d4e6e:	b1b0      	cbz	r0, d4e9e <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
            const int index = nodeIndex(*pNodes, name, size, found);
   d4e70:	f10d 030b 	add.w	r3, sp, #11
   d4e74:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
   d4e76:	f88d 500b 	strb.w	r5, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
   d4e7a:	4620      	mov	r0, r4
   d4e7c:	f7ff ffaa 	bl	d4dd4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   d4e80:	f89d 300b 	ldrb.w	r3, [sp, #11]
   d4e84:	b15b      	cbz	r3, d4e9e <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
    return data_[i];
   d4e86:	6824      	ldr	r4, [r4, #0]
   d4e88:	2314      	movs	r3, #20
   d4e8a:	fb03 4000 	mla	r0, r3, r0, r4
            pNodes = &node.nodes;
   d4e8e:	f100 0408 	add.w	r4, r0, #8
            if (node.level >= 0) {
   d4e92:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
   d4e96:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   d4e98:	bfa8      	it	ge
   d4e9a:	b2de      	uxtbge	r6, r3
        while ((name = nextSubcategoryName(category, size))) {
   d4e9c:	e7e2      	b.n	d4e64 <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
   d4e9e:	4630      	mov	r0, r6
   d4ea0:	b004      	add	sp, #16
   d4ea2:	bd70      	pop	{r4, r5, r6, pc}

000d4ea4 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   d4ea4:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   d4ea6:	4c09      	ldr	r4, [pc, #36]	; (d4ecc <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
   d4ea8:	7823      	ldrb	r3, [r4, #0]
   d4eaa:	f3bf 8f5b 	dmb	ish
   d4eae:	07db      	lsls	r3, r3, #31
   d4eb0:	d409      	bmi.n	d4ec6 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   d4eb2:	4620      	mov	r0, r4
   d4eb4:	f7ff f8fc 	bl	d40b0 <__cxa_guard_acquire>
   d4eb8:	b128      	cbz	r0, d4ec6 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   d4eba:	4620      	mov	r0, r4
   d4ebc:	f7ff f8fd 	bl	d40ba <__cxa_guard_release>
   d4ec0:	4803      	ldr	r0, [pc, #12]	; (d4ed0 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   d4ec2:	f001 fa69 	bl	d6398 <atexit>
}
   d4ec6:	4803      	ldr	r0, [pc, #12]	; (d4ed4 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   d4ec8:	bd10      	pop	{r4, pc}
   d4eca:	bf00      	nop
   d4ecc:	2003e6b0 	.word	0x2003e6b0
   d4ed0:	000d4ccf 	.word	0x000d4ccf
   d4ed4:	2003e5cc 	.word	0x2003e5cc

000d4ed8 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   d4ed8:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   d4eda:	4c09      	ldr	r4, [pc, #36]	; (d4f00 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
   d4edc:	7823      	ldrb	r3, [r4, #0]
   d4ede:	f3bf 8f5b 	dmb	ish
   d4ee2:	07db      	lsls	r3, r3, #31
   d4ee4:	d409      	bmi.n	d4efa <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   d4ee6:	4620      	mov	r0, r4
   d4ee8:	f7ff f8e2 	bl	d40b0 <__cxa_guard_acquire>
   d4eec:	b128      	cbz	r0, d4efa <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   d4eee:	4620      	mov	r0, r4
   d4ef0:	f7ff f8e3 	bl	d40ba <__cxa_guard_release>
   d4ef4:	4803      	ldr	r0, [pc, #12]	; (d4f04 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   d4ef6:	f001 fa4f 	bl	d6398 <atexit>
    return &factory;
}
   d4efa:	4803      	ldr	r0, [pc, #12]	; (d4f08 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   d4efc:	bd10      	pop	{r4, pc}
   d4efe:	bf00      	nop
   d4f00:	2003e6b4 	.word	0x2003e6b4
   d4f04:	000d4d33 	.word	0x000d4d33
   d4f08:	2003e5d0 	.word	0x2003e5d0

000d4f0c <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   d4f0c:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   d4f0e:	2500      	movs	r5, #0
   d4f10:	4604      	mov	r4, r0
   d4f12:	e9c0 5500 	strd	r5, r5, [r0]
   d4f16:	e9c0 5504 	strd	r5, r5, [r0, #16]
   d4f1a:	6085      	str	r5, [r0, #8]
   d4f1c:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
   d4f1e:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
   d4f22:	f7ff fa15 	bl	d4350 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   d4f26:	f7ff ffbd 	bl	d4ea4 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   d4f2a:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   d4f2c:	f7ff ffd4 	bl	d4ed8 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   d4f30:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   d4f32:	6220      	str	r0, [r4, #32]
}
   d4f34:	4620      	mov	r0, r4
   d4f36:	bd38      	pop	{r3, r4, r5, pc}

000d4f38 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   d4f38:	b510      	push	{r4, lr}
    static LogManager mgr;
   d4f3a:	4c0a      	ldr	r4, [pc, #40]	; (d4f64 <_ZN5spark10LogManager8instanceEv+0x2c>)
   d4f3c:	7823      	ldrb	r3, [r4, #0]
   d4f3e:	f3bf 8f5b 	dmb	ish
   d4f42:	07db      	lsls	r3, r3, #31
   d4f44:	d40c      	bmi.n	d4f60 <_ZN5spark10LogManager8instanceEv+0x28>
   d4f46:	4620      	mov	r0, r4
   d4f48:	f7ff f8b2 	bl	d40b0 <__cxa_guard_acquire>
   d4f4c:	b140      	cbz	r0, d4f60 <_ZN5spark10LogManager8instanceEv+0x28>
   d4f4e:	4806      	ldr	r0, [pc, #24]	; (d4f68 <_ZN5spark10LogManager8instanceEv+0x30>)
   d4f50:	f7ff ffdc 	bl	d4f0c <_ZN5spark10LogManagerC1Ev>
   d4f54:	4620      	mov	r0, r4
   d4f56:	f7ff f8b0 	bl	d40ba <__cxa_guard_release>
   d4f5a:	4804      	ldr	r0, [pc, #16]	; (d4f6c <_ZN5spark10LogManager8instanceEv+0x34>)
   d4f5c:	f001 fa1c 	bl	d6398 <atexit>
    return &mgr;
}
   d4f60:	4801      	ldr	r0, [pc, #4]	; (d4f68 <_ZN5spark10LogManager8instanceEv+0x30>)
   d4f62:	bd10      	pop	{r4, pc}
   d4f64:	2003e6ac 	.word	0x2003e6ac
   d4f68:	2003e6bc 	.word	0x2003e6bc
   d4f6c:	000d5419 	.word	0x000d5419

000d4f70 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   d4f70:	4a02      	ldr	r2, [pc, #8]	; (d4f7c <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   d4f72:	4903      	ldr	r1, [pc, #12]	; (d4f80 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   d4f74:	4803      	ldr	r0, [pc, #12]	; (d4f84 <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   d4f76:	2300      	movs	r3, #0
   d4f78:	f7ff bad2 	b.w	d4520 <log_set_callbacks>
   d4f7c:	000d52a1 	.word	0x000d52a1
   d4f80:	000d522d 	.word	0x000d522d
   d4f84:	000d51ad 	.word	0x000d51ad

000d4f88 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   d4f88:	2300      	movs	r3, #0
   d4f8a:	461a      	mov	r2, r3
   d4f8c:	4619      	mov	r1, r3
   d4f8e:	4618      	mov	r0, r3
   d4f90:	f7ff bac6 	b.w	d4520 <log_set_callbacks>

000d4f94 <_ZNK5spark18JSONObjectIterator5valueEv>:
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   d4f94:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONValue(v_, d_);
   d4f96:	690d      	ldr	r5, [r1, #16]
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r,
		     element_type* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4f98:	f851 3b04 	ldr.w	r3, [r1], #4
   d4f9c:	9300      	str	r3, [sp, #0]
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   d4f9e:	4604      	mov	r4, r0
   d4fa0:	a801      	add	r0, sp, #4
   d4fa2:	f7ff fb8c 	bl	d46be <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return JSONValue(v_, d_);
   d4fa6:	466a      	mov	r2, sp
   d4fa8:	4629      	mov	r1, r5
   d4faa:	4620      	mov	r0, r4
   d4fac:	f7ff fd1f 	bl	d49ee <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4fb0:	a801      	add	r0, sp, #4
   d4fb2:	f7ff fb8b 	bl	d46cc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d4fb6:	4620      	mov	r0, r4
   d4fb8:	b003      	add	sp, #12
   d4fba:	bd30      	pop	{r4, r5, pc}

000d4fbc <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   d4fbc:	b537      	push	{r0, r1, r2, r4, r5, lr}
        JSONObjectIterator(value.t_, value.d_) {
   d4fbe:	688d      	ldr	r5, [r1, #8]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4fc0:	f851 3b04 	ldr.w	r3, [r1], #4
   d4fc4:	9300      	str	r3, [sp, #0]
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   d4fc6:	4604      	mov	r4, r0
   d4fc8:	a801      	add	r0, sp, #4
   d4fca:	f7ff fb78 	bl	d46be <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        JSONObjectIterator(value.t_, value.d_) {
   d4fce:	466a      	mov	r2, sp
   d4fd0:	4629      	mov	r1, r5
   d4fd2:	4620      	mov	r0, r4
   d4fd4:	f7ff fd86 	bl	d4ae4 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d4fd8:	a801      	add	r0, sp, #4
   d4fda:	f7ff fb77 	bl	d46cc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d4fde:	4620      	mov	r0, r4
   d4fe0:	b003      	add	sp, #12
   d4fe2:	bd30      	pop	{r4, r5, pc}

000d4fe4 <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
   d4fe4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONString(k_, d_);
   d4fe6:	68cd      	ldr	r5, [r1, #12]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4fe8:	f851 3b04 	ldr.w	r3, [r1], #4
   d4fec:	9300      	str	r3, [sp, #0]
inline spark::JSONString spark::JSONObjectIterator::name() const {
   d4fee:	4604      	mov	r4, r0
   d4ff0:	a801      	add	r0, sp, #4
   d4ff2:	f7ff fb64 	bl	d46be <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return JSONString(k_, d_);
   d4ff6:	466a      	mov	r2, sp
   d4ff8:	4629      	mov	r1, r5
   d4ffa:	4620      	mov	r0, r4
   d4ffc:	f7ff fd4e 	bl	d4a9c <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d5000:	a801      	add	r0, sp, #4
   d5002:	f7ff fb63 	bl	d46cc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d5006:	4620      	mov	r0, r4
   d5008:	b003      	add	sp, #12
   d500a:	bd30      	pop	{r4, r5, pc}

000d500c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   d500c:	b570      	push	{r4, r5, r6, lr}
   d500e:	b08a      	sub	sp, #40	; 0x28
   d5010:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   d5012:	4601      	mov	r1, r0
   d5014:	a804      	add	r0, sp, #16
   d5016:	f7ff ffd1 	bl	d4fbc <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
   d501a:	4e14      	ldr	r6, [pc, #80]	; (d506c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
   d501c:	a804      	add	r0, sp, #16
   d501e:	f7ff fd79 	bl	d4b14 <_ZN5spark18JSONObjectIterator4nextEv>
   d5022:	b1e8      	cbz	r0, d5060 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
   d5024:	a904      	add	r1, sp, #16
   d5026:	4668      	mov	r0, sp
   d5028:	f7ff ffdc 	bl	d4fe4 <_ZNK5spark18JSONObjectIterator4nameEv>
   d502c:	9802      	ldr	r0, [sp, #8]
   d502e:	4631      	mov	r1, r6
   d5030:	f7ff fe78 	bl	d4d24 <_ZNK5spark10JSONStringeqEPKc.isra.0>
   d5034:	4604      	mov	r4, r0
   d5036:	b110      	cbz	r0, d503e <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
   d5038:	1e2c      	subs	r4, r5, #0
   d503a:	bf18      	it	ne
   d503c:	2401      	movne	r4, #1
   d503e:	a801      	add	r0, sp, #4
   d5040:	f7ff fb44 	bl	d46cc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5044:	2c00      	cmp	r4, #0
   d5046:	d0e9      	beq.n	d501c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
   d5048:	a904      	add	r1, sp, #16
   d504a:	4668      	mov	r0, sp
   d504c:	f7ff ffa2 	bl	d4f94 <_ZNK5spark18JSONObjectIterator5valueEv>
   d5050:	4668      	mov	r0, sp
   d5052:	f7ff fd02 	bl	d4a5a <_ZNK5spark9JSONValue5toIntEv>
   d5056:	6028      	str	r0, [r5, #0]
   d5058:	a801      	add	r0, sp, #4
   d505a:	f7ff fb37 	bl	d46cc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d505e:	e7dd      	b.n	d501c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
   d5060:	a805      	add	r0, sp, #20
   d5062:	f7ff fb33 	bl	d46cc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d5066:	b00a      	add	sp, #40	; 0x28
   d5068:	bd70      	pop	{r4, r5, r6, pc}
   d506a:	bf00      	nop
   d506c:	000d67bc 	.word	0x000d67bc

000d5070 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   d5070:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d5072:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
   d5074:	4620      	mov	r0, r4
   d5076:	4912      	ldr	r1, [pc, #72]	; (d50c0 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>)
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   d5078:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
   d507a:	f001 f9fe 	bl	d647a <strcmp>
   d507e:	b948      	cbnz	r0, d5094 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x24>
        Serial.begin();
   d5080:	f001 f8c4 	bl	d620c <_Z16_fetch_usbserialv>
   d5084:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d5088:	f001 f8b0 	bl	d61ec <_ZN9USBSerial5beginEl>
        return &Serial;
   d508c:	f001 f8be 	bl	d620c <_Z16_fetch_usbserialv>
}
   d5090:	b003      	add	sp, #12
   d5092:	bd30      	pop	{r4, r5, pc}
    if (strcmp(type, "Serial1") == 0) {
   d5094:	490b      	ldr	r1, [pc, #44]	; (d50c4 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
   d5096:	4620      	mov	r0, r4
   d5098:	f001 f9ef 	bl	d647a <strcmp>
   d509c:	b970      	cbnz	r0, d50bc <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
        int baud = 9600;
   d509e:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
   d50a2:	a901      	add	r1, sp, #4
   d50a4:	4628      	mov	r0, r5
        int baud = 9600;
   d50a6:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
   d50a8:	f7ff ffb0 	bl	d500c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   d50ac:	f001 f80c 	bl	d60c8 <_Z22__fetch_global_Serial1v>
   d50b0:	9901      	ldr	r1, [sp, #4]
   d50b2:	f001 f803 	bl	d60bc <_ZN11USARTSerial5beginEm>
        return &Serial1;
   d50b6:	f001 f807 	bl	d60c8 <_Z22__fetch_global_Serial1v>
   d50ba:	e7e9      	b.n	d5090 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x20>
    return nullptr;
   d50bc:	2000      	movs	r0, #0
   d50be:	e7e7      	b.n	d5090 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x20>
   d50c0:	000d67c1 	.word	0x000d67c1
   d50c4:	000d67c8 	.word	0x000d67c8

000d50c8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   d50c8:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d50ca:	e9d0 5300 	ldrd	r5, r3, [r0]
   d50ce:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   d50d0:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d50d2:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   d50d6:	42ae      	cmp	r6, r5
   d50d8:	d005      	beq.n	d50e6 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
   d50da:	f105 0008 	add.w	r0, r5, #8
   d50de:	f7ff fff3 	bl	d50c8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d50e2:	3514      	adds	r5, #20
   d50e4:	e7f7      	b.n	d50d6 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   d50e6:	6820      	ldr	r0, [r4, #0]
   d50e8:	f7ff fab6 	bl	d4658 <free>
}
   d50ec:	4620      	mov	r0, r4
   d50ee:	bd70      	pop	{r4, r5, r6, pc}

000d50f0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   d50f0:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d50f2:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   d50f6:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d50f8:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
   d50fc:	42ae      	cmp	r6, r5
   d50fe:	d004      	beq.n	d510a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   d5100:	4628      	mov	r0, r5
   d5102:	f000 fed9 	bl	d5eb8 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
   d5106:	3510      	adds	r5, #16
   d5108:	e7f8      	b.n	d50fc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   d510a:	6820      	ldr	r0, [r4, #0]
   d510c:	f7ff faa4 	bl	d4658 <free>
}
   d5110:	4620      	mov	r0, r4
   d5112:	bd70      	pop	{r4, r5, r6, pc}

000d5114 <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
   d5114:	b510      	push	{r4, lr}
   d5116:	4604      	mov	r4, r0
   d5118:	300c      	adds	r0, #12
   d511a:	f7ff ffd5 	bl	d50c8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d511e:	4620      	mov	r0, r4
   d5120:	f7ff ffe6 	bl	d50f0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   d5124:	4620      	mov	r0, r4
   d5126:	bd10      	pop	{r4, pc}

000d5128 <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
   d5128:	b510      	push	{r4, lr}
    virtual ~LogHandler() = default;
   d512a:	4b04      	ldr	r3, [pc, #16]	; (d513c <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
class StreamLogHandler: public LogHandler {
   d512c:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
   d512e:	f840 3b04 	str.w	r3, [r0], #4
   d5132:	f7ff ffef 	bl	d5114 <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
   d5136:	4620      	mov	r0, r4
   d5138:	bd10      	pop	{r4, pc}
   d513a:	bf00      	nop
   d513c:	000d66fc 	.word	0x000d66fc

000d5140 <_ZN5spark16StreamLogHandlerD0Ev>:
   d5140:	b510      	push	{r4, lr}
   d5142:	4604      	mov	r4, r0
   d5144:	f7ff fff0 	bl	d5128 <_ZN5spark16StreamLogHandlerD1Ev>
   d5148:	4620      	mov	r0, r4
   d514a:	2124      	movs	r1, #36	; 0x24
   d514c:	f001 f920 	bl	d6390 <_ZdlPvj>
   d5150:	4620      	mov	r0, r4
   d5152:	bd10      	pop	{r4, pc}

000d5154 <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
   d5154:	b510      	push	{r4, lr}
   d5156:	4b03      	ldr	r3, [pc, #12]	; (d5164 <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   d5158:	6003      	str	r3, [r0, #0]
   d515a:	4604      	mov	r4, r0
   d515c:	f7ff ffe4 	bl	d5128 <_ZN5spark16StreamLogHandlerD1Ev>
   d5160:	4620      	mov	r0, r4
   d5162:	bd10      	pop	{r4, pc}
   d5164:	000d6868 	.word	0x000d6868

000d5168 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   d5168:	b510      	push	{r4, lr}
   d516a:	4604      	mov	r4, r0
   d516c:	f7ff fff2 	bl	d5154 <_ZN5spark20JSONStreamLogHandlerD1Ev>
   d5170:	4620      	mov	r0, r4
   d5172:	2124      	movs	r1, #36	; 0x24
   d5174:	f001 f90c 	bl	d6390 <_ZdlPvj>
   d5178:	4620      	mov	r0, r4
   d517a:	bd10      	pop	{r4, pc}

000d517c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
   d517c:	2200      	movs	r2, #0
   d517e:	e9c0 2200 	strd	r2, r2, [r0]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   d5182:	b510      	push	{r4, lr}
        capacity_(0) {
   d5184:	6082      	str	r2, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   d5186:	680c      	ldr	r4, [r1, #0]
   d5188:	6004      	str	r4, [r0, #0]
   d518a:	684c      	ldr	r4, [r1, #4]
   d518c:	6044      	str	r4, [r0, #4]
   d518e:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d5190:	600a      	str	r2, [r1, #0]
   d5192:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   d5194:	6084      	str	r4, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d5196:	608a      	str	r2, [r1, #8]
}
   d5198:	bd10      	pop	{r4, pc}

000d519a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   d519a:	b510      	push	{r4, lr}
      { _M_device.unlock(); }
   d519c:	6803      	ldr	r3, [r0, #0]
      ~lock_guard()
   d519e:	4604      	mov	r4, r0
    }

    void lock() { os_mutex_recursive_lock(handle_); }
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d51a0:	6818      	ldr	r0, [r3, #0]
   d51a2:	f7ff f8ed 	bl	d4380 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   d51a6:	4620      	mov	r0, r4
   d51a8:	bd10      	pop	{r4, pc}
	...

000d51ac <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   d51ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d51b0:	b087      	sub	sp, #28
   d51b2:	4680      	mov	r8, r0
   d51b4:	9303      	str	r3, [sp, #12]
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   d51b6:	4b1c      	ldr	r3, [pc, #112]	; (d5228 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
   d51b8:	685b      	ldr	r3, [r3, #4]
   d51ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
   d51be:	4689      	mov	r9, r1
   d51c0:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d51c2:	b96b      	cbnz	r3, d51e0 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
   d51c4:	f7ff feb8 	bl	d4f38 <_ZN5spark10LogManager8instanceEv>
   d51c8:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   d51ca:	f100 0324 	add.w	r3, r0, #36	; 0x24
    void lock() { os_mutex_recursive_lock(handle_); }
   d51ce:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d51d0:	9305      	str	r3, [sp, #20]
   d51d2:	f7ff f8cd 	bl	d4370 <os_mutex_recursive_lock>
        // prevent re-entry
        if (that->isActive()) {
   d51d6:	7b23      	ldrb	r3, [r4, #12]
   d51d8:	b12b      	cbz	r3, d51e6 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
   d51da:	a805      	add	r0, sp, #20
   d51dc:	f7ff ffdd 	bl	d519a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   d51e0:	b007      	add	sp, #28
   d51e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   d51e6:	2301      	movs	r3, #1
   d51e8:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
   d51ea:	e9d4 5300 	ldrd	r5, r3, [r4]
            handler->message(msg, (LogLevel)level, category, *attr);
   d51ee:	fa5f f989 	uxtb.w	r9, r9
   d51f2:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   d51f6:	45aa      	cmp	sl, r5
   d51f8:	d012      	beq.n	d5220 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
   d51fa:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
   d51fe:	4631      	mov	r1, r6
   d5200:	1d38      	adds	r0, r7, #4
   d5202:	f7ff fe25 	bl	d4e50 <_ZNK5spark6detail9LogFilter5levelEPKc>
   d5206:	4581      	cmp	r9, r0
   d5208:	d3f5      	bcc.n	d51f6 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
   d520a:	683b      	ldr	r3, [r7, #0]
   d520c:	9a03      	ldr	r2, [sp, #12]
   d520e:	9200      	str	r2, [sp, #0]
   d5210:	f8d3 b008 	ldr.w	fp, [r3, #8]
   d5214:	464a      	mov	r2, r9
   d5216:	4633      	mov	r3, r6
   d5218:	4641      	mov	r1, r8
   d521a:	4638      	mov	r0, r7
   d521c:	47d8      	blx	fp
   d521e:	e7ea      	b.n	d51f6 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
   d5220:	2300      	movs	r3, #0
   d5222:	7323      	strb	r3, [r4, #12]
   d5224:	e7d9      	b.n	d51da <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
   d5226:	bf00      	nop
   d5228:	e000ed00 	.word	0xe000ed00

000d522c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   d522c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5230:	469b      	mov	fp, r3
   d5232:	4b1a      	ldr	r3, [pc, #104]	; (d529c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
   d5234:	685b      	ldr	r3, [r3, #4]
   d5236:	f3c3 0308 	ubfx	r3, r3, #0, #9
   d523a:	4680      	mov	r8, r0
   d523c:	4689      	mov	r9, r1
   d523e:	4616      	mov	r6, r2
    if (HAL_IsISR()) {
   d5240:	b96b      	cbnz	r3, d525e <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
   d5242:	f7ff fe79 	bl	d4f38 <_ZN5spark10LogManager8instanceEv>
   d5246:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   d5248:	f100 0324 	add.w	r3, r0, #36	; 0x24
   d524c:	6a40      	ldr	r0, [r0, #36]	; 0x24
   d524e:	9301      	str	r3, [sp, #4]
   d5250:	f7ff f88e 	bl	d4370 <os_mutex_recursive_lock>
        if (that->isActive()) {
   d5254:	7b23      	ldrb	r3, [r4, #12]
   d5256:	b12b      	cbz	r3, d5264 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
   d5258:	a801      	add	r0, sp, #4
   d525a:	f7ff ff9e 	bl	d519a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   d525e:	b003      	add	sp, #12
   d5260:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
   d5264:	2301      	movs	r3, #1
   d5266:	7323      	strb	r3, [r4, #12]
   d5268:	e9d4 5300 	ldrd	r5, r3, [r4]
    if (level >= filter_.level(category)) {
   d526c:	b2f6      	uxtb	r6, r6
   d526e:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   d5272:	4555      	cmp	r5, sl
   d5274:	d00e      	beq.n	d5294 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
   d5276:	f855 7b04 	ldr.w	r7, [r5], #4
   d527a:	4659      	mov	r1, fp
   d527c:	1d38      	adds	r0, r7, #4
   d527e:	f7ff fde7 	bl	d4e50 <_ZNK5spark6detail9LogFilter5levelEPKc>
   d5282:	4286      	cmp	r6, r0
   d5284:	d3f5      	bcc.n	d5272 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
   d5286:	683b      	ldr	r3, [r7, #0]
   d5288:	464a      	mov	r2, r9
   d528a:	68db      	ldr	r3, [r3, #12]
   d528c:	4641      	mov	r1, r8
   d528e:	4638      	mov	r0, r7
   d5290:	4798      	blx	r3
   d5292:	e7ee      	b.n	d5272 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
   d5294:	2300      	movs	r3, #0
   d5296:	7323      	strb	r3, [r4, #12]
   d5298:	e7de      	b.n	d5258 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
   d529a:	bf00      	nop
   d529c:	e000ed00 	.word	0xe000ed00

000d52a0 <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   d52a0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d52a4:	4b16      	ldr	r3, [pc, #88]	; (d5300 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
   d52a6:	685b      	ldr	r3, [r3, #4]
   d52a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
   d52ac:	4605      	mov	r5, r0
   d52ae:	460f      	mov	r7, r1
    if (HAL_IsISR()) {
   d52b0:	bb1b      	cbnz	r3, d52fa <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
   d52b2:	f7ff fe41 	bl	d4f38 <_ZN5spark10LogManager8instanceEv>
    LOG_WITH_LOCK(that->mutex_) {
   d52b6:	f100 0324 	add.w	r3, r0, #36	; 0x24
    LogManager *that = instance();
   d52ba:	4604      	mov	r4, r0
   d52bc:	6a40      	ldr	r0, [r0, #36]	; 0x24
   d52be:	9301      	str	r3, [sp, #4]
   d52c0:	f7ff f856 	bl	d4370 <os_mutex_recursive_lock>
   d52c4:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
   d52c8:	2446      	movs	r4, #70	; 0x46
   d52ca:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   d52ce:	45b0      	cmp	r8, r6
   d52d0:	d109      	bne.n	d52e6 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
   d52d2:	a801      	add	r0, sp, #4
   d52d4:	f7ff ff61 	bl	d519a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
   d52d8:	42a5      	cmp	r5, r4
   d52da:	bfb4      	ite	lt
   d52dc:	2000      	movlt	r0, #0
   d52de:	2001      	movge	r0, #1
}
   d52e0:	b002      	add	sp, #8
   d52e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
   d52e6:	f856 0b04 	ldr.w	r0, [r6], #4
   d52ea:	4639      	mov	r1, r7
   d52ec:	3004      	adds	r0, #4
   d52ee:	f7ff fdaf 	bl	d4e50 <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
   d52f2:	4284      	cmp	r4, r0
   d52f4:	bfa8      	it	ge
   d52f6:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
   d52f8:	e7e9      	b.n	d52ce <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
   d52fa:	2000      	movs	r0, #0
   d52fc:	e7f0      	b.n	d52e0 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
   d52fe:	bf00      	nop
   d5300:	e000ed00 	.word	0xe000ed00

000d5304 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d5304:	b570      	push	{r4, r5, r6, lr}
   d5306:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   d5308:	e9d0 0200 	ldrd	r0, r2, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d530c:	460b      	mov	r3, r1
    T* const p = find(data_, data_ + size_, value);
   d530e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
   d5312:	4282      	cmp	r2, r0
   d5314:	d007      	beq.n	d5326 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x22>
   d5316:	4601      	mov	r1, r0
            if (*p == value) {
   d5318:	681d      	ldr	r5, [r3, #0]
   d531a:	f851 6b04 	ldr.w	r6, [r1], #4
   d531e:	42ae      	cmp	r6, r5
   d5320:	d003      	beq.n	d532a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x26>
   d5322:	4608      	mov	r0, r1
   d5324:	e7f5      	b.n	d5312 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
   d5326:	2000      	movs	r0, #0
}
   d5328:	bd70      	pop	{r4, r5, r6, pc}
        ::memmove(dest, p, (end - p) * sizeof(T));
   d532a:	1a52      	subs	r2, r2, r1
   d532c:	f001 f848 	bl	d63c0 <memmove>
    --size_;
   d5330:	6863      	ldr	r3, [r4, #4]
   d5332:	3b01      	subs	r3, #1
   d5334:	6063      	str	r3, [r4, #4]
    return true;
   d5336:	2001      	movs	r0, #1
   d5338:	e7f6      	b.n	d5328 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x24>

000d533a <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
   d533a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    LOG_WITH_LOCK(mutex_) {
   d533c:	f100 0324 	add.w	r3, r0, #36	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
   d5340:	4604      	mov	r4, r0
   d5342:	6a40      	ldr	r0, [r0, #36]	; 0x24
   d5344:	9101      	str	r1, [sp, #4]
   d5346:	9303      	str	r3, [sp, #12]
   d5348:	f7ff f812 	bl	d4370 <os_mutex_recursive_lock>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   d534c:	a901      	add	r1, sp, #4
   d534e:	4620      	mov	r0, r4
   d5350:	f7ff ffd8 	bl	d5304 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   d5354:	b118      	cbz	r0, d535e <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
   d5356:	6863      	ldr	r3, [r4, #4]
   d5358:	b90b      	cbnz	r3, d535e <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
   d535a:	f7ff fe15 	bl	d4f88 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   d535e:	a803      	add	r0, sp, #12
   d5360:	f7ff ff1b 	bl	d519a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   d5364:	b004      	add	sp, #16
   d5366:	bd10      	pop	{r4, pc}

000d5368 <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
void spark::LogManager::destroyFactoryHandlers() {
   d5368:	b570      	push	{r4, r5, r6, lr}
    return data_ + size_;
   d536a:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
   d536e:	2318      	movs	r3, #24
   d5370:	4604      	mov	r4, r0
   d5372:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   d5376:	42ae      	cmp	r6, r5
   d5378:	d015      	beq.n	d53a6 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   d537a:	f105 0110 	add.w	r1, r5, #16
   d537e:	4620      	mov	r0, r4
   d5380:	f7ff ffc0 	bl	d5304 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   d5384:	6863      	ldr	r3, [r4, #4]
   d5386:	b90b      	cbnz	r3, d538c <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   d5388:	f7ff fdfe 	bl	d4f88 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
   d538c:	69e0      	ldr	r0, [r4, #28]
   d538e:	6929      	ldr	r1, [r5, #16]
   d5390:	6803      	ldr	r3, [r0, #0]
   d5392:	68db      	ldr	r3, [r3, #12]
   d5394:	4798      	blx	r3
        if (h.stream) {
   d5396:	6969      	ldr	r1, [r5, #20]
   d5398:	b119      	cbz	r1, d53a2 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   d539a:	6a20      	ldr	r0, [r4, #32]
   d539c:	6803      	ldr	r3, [r0, #0]
   d539e:	68db      	ldr	r3, [r3, #12]
   d53a0:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
   d53a2:	3518      	adds	r5, #24
   d53a4:	e7e7      	b.n	d5376 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
   d53a6:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   d53aa:	2618      	movs	r6, #24
   d53ac:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   d53b0:	42ae      	cmp	r6, r5
   d53b2:	d004      	beq.n	d53be <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
   d53b4:	4628      	mov	r0, r5
   d53b6:	f000 fd7f 	bl	d5eb8 <_ZN6StringD1Ev>
   d53ba:	3518      	adds	r5, #24
   d53bc:	e7f8      	b.n	d53b0 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
   d53be:	2300      	movs	r3, #0
   d53c0:	6163      	str	r3, [r4, #20]
}
   d53c2:	bd70      	pop	{r4, r5, r6, pc}

000d53c4 <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
   d53c4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d53c6:	4604      	mov	r4, r0
    resetSystemCallbacks();
   d53c8:	f7ff fdde 	bl	d4f88 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   d53cc:	f104 0324 	add.w	r3, r4, #36	; 0x24
   d53d0:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d53d2:	9301      	str	r3, [sp, #4]
   d53d4:	f7fe ffcc 	bl	d4370 <os_mutex_recursive_lock>
         destroyFactoryHandlers();
   d53d8:	4620      	mov	r0, r4
   d53da:	f7ff ffc5 	bl	d5368 <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
   d53de:	a801      	add	r0, sp, #4
   d53e0:	f7ff fedb 	bl	d519a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
   d53e4:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d53e6:	b108      	cbz	r0, d53ec <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
   d53e8:	f7fe ffba 	bl	d4360 <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
   d53ec:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   d53f0:	2618      	movs	r6, #24
   d53f2:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   d53f6:	42ae      	cmp	r6, r5
   d53f8:	d004      	beq.n	d5404 <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
   d53fa:	4628      	mov	r0, r5
   d53fc:	f000 fd5c 	bl	d5eb8 <_ZN6StringD1Ev>
   d5400:	3518      	adds	r5, #24
   d5402:	e7f8      	b.n	d53f6 <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
   d5404:	6920      	ldr	r0, [r4, #16]
   d5406:	f7ff f927 	bl	d4658 <free>
   d540a:	6820      	ldr	r0, [r4, #0]
   d540c:	f7ff f924 	bl	d4658 <free>
}
   d5410:	4620      	mov	r0, r4
   d5412:	b002      	add	sp, #8
   d5414:	bd70      	pop	{r4, r5, r6, pc}
	...

000d5418 <__tcf_2>:
    static LogManager mgr;
   d5418:	4801      	ldr	r0, [pc, #4]	; (d5420 <__tcf_2+0x8>)
   d541a:	f7ff bfd3 	b.w	d53c4 <_ZN5spark10LogManagerD1Ev>
   d541e:	bf00      	nop
   d5420:	2003e6bc 	.word	0x2003e6bc

000d5424 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
   d5424:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d5426:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5428:	4606      	mov	r6, r0
   d542a:	460c      	mov	r4, r1
   d542c:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d542e:	d927      	bls.n	d5480 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x5c>
   d5430:	4290      	cmp	r0, r2
   d5432:	d226      	bcs.n	d5482 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x5e>
            --end;
   d5434:	f1a2 0514 	sub.w	r5, r2, #20
            dest += end - p - 1;
   d5438:	1a6c      	subs	r4, r5, r1
   d543a:	f1a1 0714 	sub.w	r7, r1, #20
   d543e:	4404      	add	r4, r0
        capacity_(0) {
   d5440:	2600      	movs	r6, #0
            for (; end != p; --end, --dest) {
   d5442:	42af      	cmp	r7, r5
   d5444:	d03d      	beq.n	d54c2 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
                new(dest) T(std::move(*end));
   d5446:	b1a4      	cbz	r4, d5472 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x4e>
struct spark::detail::LogFilter::Node {
   d5448:	682b      	ldr	r3, [r5, #0]
   d544a:	6023      	str	r3, [r4, #0]
   d544c:	88ab      	ldrh	r3, [r5, #4]
   d544e:	80a3      	strh	r3, [r4, #4]
   d5450:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
   d5454:	80e3      	strh	r3, [r4, #6]
        capacity_(0) {
   d5456:	e9c4 6602 	strd	r6, r6, [r4, #8]
   d545a:	6126      	str	r6, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   d545c:	68ab      	ldr	r3, [r5, #8]
   d545e:	60a3      	str	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d5460:	60ae      	str	r6, [r5, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5462:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   d5464:	68ea      	ldr	r2, [r5, #12]
   d5466:	60e2      	str	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d5468:	60eb      	str	r3, [r5, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d546a:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   d546c:	692a      	ldr	r2, [r5, #16]
   d546e:	6122      	str	r2, [r4, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d5470:	612b      	str	r3, [r5, #16]
   d5472:	f105 0008 	add.w	r0, r5, #8
   d5476:	f7ff fe27 	bl	d50c8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
   d547a:	3d14      	subs	r5, #20
   d547c:	3c14      	subs	r4, #20
   d547e:	e7e0      	b.n	d5442 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1e>
        } else if (dest != p) {
   d5480:	d01f      	beq.n	d54c2 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
        capacity_(0) {
   d5482:	2700      	movs	r7, #0
            for (; p != end; ++p, ++dest) {
   d5484:	42ac      	cmp	r4, r5
   d5486:	d01c      	beq.n	d54c2 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
                new(dest) T(std::move(*p));
   d5488:	b1a6      	cbz	r6, d54b4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x90>
   d548a:	6823      	ldr	r3, [r4, #0]
   d548c:	6033      	str	r3, [r6, #0]
   d548e:	88a3      	ldrh	r3, [r4, #4]
   d5490:	80b3      	strh	r3, [r6, #4]
   d5492:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
   d5496:	80f3      	strh	r3, [r6, #6]
        capacity_(0) {
   d5498:	e9c6 7702 	strd	r7, r7, [r6, #8]
   d549c:	6137      	str	r7, [r6, #16]
      __a = _GLIBCXX_MOVE(__b);
   d549e:	68a3      	ldr	r3, [r4, #8]
   d54a0:	60b3      	str	r3, [r6, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d54a2:	60a7      	str	r7, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d54a4:	68f3      	ldr	r3, [r6, #12]
      __a = _GLIBCXX_MOVE(__b);
   d54a6:	68e2      	ldr	r2, [r4, #12]
   d54a8:	60f2      	str	r2, [r6, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d54aa:	60e3      	str	r3, [r4, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d54ac:	6933      	ldr	r3, [r6, #16]
      __a = _GLIBCXX_MOVE(__b);
   d54ae:	6922      	ldr	r2, [r4, #16]
   d54b0:	6132      	str	r2, [r6, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d54b2:	6123      	str	r3, [r4, #16]
   d54b4:	f104 0008 	add.w	r0, r4, #8
   d54b8:	f7ff fe06 	bl	d50c8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
   d54bc:	3414      	adds	r4, #20
   d54be:	3614      	adds	r6, #20
   d54c0:	e7e0      	b.n	d5484 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x60>
    }
   d54c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d54c4 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   d54c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d54c6:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
   d54ca:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   d54cc:	4604      	mov	r4, r0
   d54ce:	460e      	mov	r6, r1
   d54d0:	4617      	mov	r7, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d54d2:	db0d      	blt.n	d54f0 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x2c>
   d54d4:	3501      	adds	r5, #1
        if (n > 0) {
   d54d6:	2d00      	cmp	r5, #0
   d54d8:	6800      	ldr	r0, [r0, #0]
   d54da:	dd04      	ble.n	d54e6 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x22>
    return ::realloc(ptr, size);
   d54dc:	00a9      	lsls	r1, r5, #2
   d54de:	f7ff f8c3 	bl	d4668 <realloc>
            if (!d) {
   d54e2:	b918      	cbnz	r0, d54ec <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x28>
}
   d54e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
   d54e6:	f7ff f8b7 	bl	d4658 <free>
        T* d = nullptr;
   d54ea:	2000      	movs	r0, #0
        data_ = d;
   d54ec:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   d54ee:	60a5      	str	r5, [r4, #8]
    T* const p = data_ + i;
   d54f0:	6825      	ldr	r5, [r4, #0]
    move(p + 1, p, data_ + size_);
   d54f2:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   d54f4:	eb05 0186 	add.w	r1, r5, r6, lsl #2
    move(p + 1, p, data_ + size_);
   d54f8:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
   d54fa:	eba2 0286 	sub.w	r2, r2, r6, lsl #2
   d54fe:	1d08      	adds	r0, r1, #4
   d5500:	f000 ff5e 	bl	d63c0 <memmove>
    new(p) T(std::move(value));
   d5504:	f845 7026 	str.w	r7, [r5, r6, lsl #2]
    ++size_;
   d5508:	6863      	ldr	r3, [r4, #4]
   d550a:	3301      	adds	r3, #1
   d550c:	6063      	str	r3, [r4, #4]
    return true;
   d550e:	2001      	movs	r0, #1
   d5510:	e7e8      	b.n	d54e4 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x20>

000d5512 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
   d5512:	b537      	push	{r0, r1, r2, r4, r5, lr}
    LOG_WITH_LOCK(mutex_) {
   d5514:	f100 0324 	add.w	r3, r0, #36	; 0x24
bool spark::LogManager::addHandler(LogHandler *handler) {
   d5518:	4604      	mov	r4, r0
    void lock() { os_mutex_recursive_lock(handle_); }
   d551a:	6a40      	ldr	r0, [r0, #36]	; 0x24
   d551c:	9301      	str	r3, [sp, #4]
   d551e:	460d      	mov	r5, r1
   d5520:	f7fe ff26 	bl	d4370 <os_mutex_recursive_lock>
    return find(data_, data_ + size_, value);
   d5524:	e9d4 3100 	ldrd	r3, r1, [r4]
   d5528:	eb03 0081 	add.w	r0, r3, r1, lsl #2
        for (; p != end; ++p) {
   d552c:	4283      	cmp	r3, r0
   d552e:	461a      	mov	r2, r3
   d5530:	d00b      	beq.n	d554a <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x38>
            if (*p == value) {
   d5532:	6812      	ldr	r2, [r2, #0]
   d5534:	42aa      	cmp	r2, r5
   d5536:	f103 0304 	add.w	r3, r3, #4
   d553a:	d1f7      	bne.n	d552c <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
    LOG_WITH_LOCK(mutex_) {
   d553c:	a801      	add	r0, sp, #4
   d553e:	f7ff fe2c 	bl	d519a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
            return false;
   d5542:	2500      	movs	r5, #0
}
   d5544:	4628      	mov	r0, r5
   d5546:	b003      	add	sp, #12
   d5548:	bd30      	pop	{r4, r5, pc}
    return insert(size_, std::move(value));
   d554a:	462a      	mov	r2, r5
   d554c:	4620      	mov	r0, r4
   d554e:	f7ff ffb9 	bl	d54c4 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   d5552:	4605      	mov	r5, r0
   d5554:	2800      	cmp	r0, #0
   d5556:	d0f1      	beq.n	d553c <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x2a>
        if (activeHandlers_.size() == 1) {
   d5558:	6863      	ldr	r3, [r4, #4]
   d555a:	2b01      	cmp	r3, #1
   d555c:	d101      	bne.n	d5562 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x50>
            setSystemCallbacks();
   d555e:	f7ff fd07 	bl	d4f70 <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   d5562:	a801      	add	r0, sp, #4
   d5564:	f7ff fe19 	bl	d519a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   d5568:	e7ec      	b.n	d5544 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x32>

000d556a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   d556a:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d556c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d556e:	4604      	mov	r4, r0
   d5570:	460d      	mov	r5, r1
   d5572:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   d5574:	d914      	bls.n	d55a0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   d5576:	4290      	cmp	r0, r2
   d5578:	d213      	bcs.n	d55a2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
   d557a:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
   d557e:	1a75      	subs	r5, r6, r1
   d5580:	f1a1 0710 	sub.w	r7, r1, #16
   d5584:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   d5586:	42b7      	cmp	r7, r6
   d5588:	d018      	beq.n	d55bc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   d558a:	b11c      	cbz	r4, d5594 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   d558c:	4631      	mov	r1, r6
   d558e:	4620      	mov	r0, r4
   d5590:	f000 fcfa 	bl	d5f88 <_ZN6StringC1EOS_>
                end->~T();
   d5594:	4630      	mov	r0, r6
   d5596:	f000 fc8f 	bl	d5eb8 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   d559a:	3e10      	subs	r6, #16
   d559c:	3c10      	subs	r4, #16
   d559e:	e7f2      	b.n	d5586 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   d55a0:	d00c      	beq.n	d55bc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   d55a2:	42b5      	cmp	r5, r6
   d55a4:	d00a      	beq.n	d55bc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   d55a6:	b11c      	cbz	r4, d55b0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   d55a8:	4629      	mov	r1, r5
   d55aa:	4620      	mov	r0, r4
   d55ac:	f000 fcec 	bl	d5f88 <_ZN6StringC1EOS_>
                p->~T();
   d55b0:	4628      	mov	r0, r5
   d55b2:	f000 fc81 	bl	d5eb8 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   d55b6:	3510      	adds	r5, #16
   d55b8:	3410      	adds	r4, #16
   d55ba:	e7f2      	b.n	d55a2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
   d55bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d55be <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
   d55be:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   d55c0:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   d55c2:	4605      	mov	r5, r0
        if (n > 0) {
   d55c4:	dd11      	ble.n	d55ea <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
   d55c6:	0130      	lsls	r0, r6, #4
   d55c8:	f7ff f83e 	bl	d4648 <malloc>
            if (!d) {
   d55cc:	4604      	mov	r4, r0
   d55ce:	b158      	cbz	r0, d55e8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   d55d0:	e9d5 1200 	ldrd	r1, r2, [r5]
   d55d4:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   d55d8:	f7ff ffc7 	bl	d556a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   d55dc:	6828      	ldr	r0, [r5, #0]
   d55de:	f7ff f83b 	bl	d4658 <free>
        data_ = d;
   d55e2:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d55e4:	60ae      	str	r6, [r5, #8]
        return true;
   d55e6:	2001      	movs	r0, #1
    }
   d55e8:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   d55ea:	2400      	movs	r4, #0
   d55ec:	e7f6      	b.n	d55dc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

000d55ee <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   d55ee:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d55f2:	4691      	mov	r9, r2
   d55f4:	b097      	sub	sp, #92	; 0x5c
        capacity_(0) {
   d55f6:	2300      	movs	r3, #0
   d55f8:	9103      	str	r1, [sp, #12]
    if (!cats.reserve(filters.size())) {
   d55fa:	f8d9 1004 	ldr.w	r1, [r9, #4]
   d55fe:	930c      	str	r3, [sp, #48]	; 0x30
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   d5600:	2246      	movs	r2, #70	; 0x46
    if (n > capacity_ && !realloc(n)) {
   d5602:	4299      	cmp	r1, r3
        capacity_(0) {
   d5604:	e9c0 3300 	strd	r3, r3, [r0]
   d5608:	e9c0 3302 	strd	r3, r3, [r0, #8]
   d560c:	e9c0 3304 	strd	r3, r3, [r0, #16]
   d5610:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   d5614:	4604      	mov	r4, r0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   d5616:	7602      	strb	r2, [r0, #24]
    if (n > capacity_ && !realloc(n)) {
   d5618:	dc23      	bgt.n	d5662 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
   d561a:	e9d9 5700 	ldrd	r5, r7, [r9]
   d561e:	2314      	movs	r3, #20
   d5620:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
   d5624:	42af      	cmp	r7, r5
   d5626:	d03b      	beq.n	d56a0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
   d5628:	4629      	mov	r1, r5
   d562a:	a80d      	add	r0, sp, #52	; 0x34
   d562c:	f000 fcac 	bl	d5f88 <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
   d5630:	a90d      	add	r1, sp, #52	; 0x34
   d5632:	a811      	add	r0, sp, #68	; 0x44
   d5634:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   d5636:	f000 fca7 	bl	d5f88 <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d563a:	e9dd 130b 	ldrd	r1, r3, [sp, #44]	; 0x2c
   d563e:	4299      	cmp	r1, r3
   d5640:	da1b      	bge.n	d567a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
   d5642:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    move(p + 1, p, data_ + size_);
   d5644:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    T* const p = data_ + i;
   d5646:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   d564a:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   d564e:	4631      	mov	r1, r6
   d5650:	f106 0010 	add.w	r0, r6, #16
   d5654:	f7ff ff89 	bl	d556a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   d5658:	b9ee      	cbnz	r6, d5696 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
   d565a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   d565c:	3301      	adds	r3, #1
   d565e:	930b      	str	r3, [sp, #44]	; 0x2c
    return true;
   d5660:	e011      	b.n	d5686 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
   d5662:	a80a      	add	r0, sp, #40	; 0x28
   d5664:	f7ff ffab 	bl	d55be <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   d5668:	2800      	cmp	r0, #0
   d566a:	d1d6      	bne.n	d561a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
    Vector<String> cats;
   d566c:	a80a      	add	r0, sp, #40	; 0x28
   d566e:	f7ff fd3f 	bl	d50f0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   d5672:	4620      	mov	r0, r4
   d5674:	b017      	add	sp, #92	; 0x5c
   d5676:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d567a:	3101      	adds	r1, #1
   d567c:	a80a      	add	r0, sp, #40	; 0x28
   d567e:	f7ff ff9e 	bl	d55be <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   d5682:	2800      	cmp	r0, #0
   d5684:	d1dd      	bne.n	d5642 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
   d5686:	a811      	add	r0, sp, #68	; 0x44
   d5688:	f000 fc16 	bl	d5eb8 <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
   d568c:	a80d      	add	r0, sp, #52	; 0x34
   d568e:	f000 fc13 	bl	d5eb8 <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
   d5692:	3514      	adds	r5, #20
   d5694:	e7c6      	b.n	d5624 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
   d5696:	a911      	add	r1, sp, #68	; 0x44
   d5698:	4630      	mov	r0, r6
   d569a:	f000 fc75 	bl	d5f88 <_ZN6StringC1EOS_>
   d569e:	e7dc      	b.n	d565a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
   d56a0:	2600      	movs	r6, #0
   d56a2:	e9cd 660d 	strd	r6, r6, [sp, #52]	; 0x34
   d56a6:	960f      	str	r6, [sp, #60]	; 0x3c
        size_t size = 0; // Name length
   d56a8:	4637      	mov	r7, r6
   d56aa:	f04f 0a14 	mov.w	sl, #20
    for (int i = 0; i < cats.size(); ++i) {
   d56ae:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   d56b2:	429e      	cmp	r6, r3
   d56b4:	f280 8097 	bge.w	d57e6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f8>
        const char *category = cats.at(i).c_str();
   d56b8:	0133      	lsls	r3, r6, #4
   d56ba:	58d3      	ldr	r3, [r2, r3]
   d56bc:	9308      	str	r3, [sp, #32]
        if (!category) {
   d56be:	b90b      	cbnz	r3, d56c4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd6>
    for (int i = 0; i < cats.size(); ++i) {
   d56c0:	3601      	adds	r6, #1
   d56c2:	e7f4      	b.n	d56ae <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xc0>
        size_t size = 0; // Name length
   d56c4:	fb0a f306 	mul.w	r3, sl, r6
   d56c8:	9709      	str	r7, [sp, #36]	; 0x24
   d56ca:	9302      	str	r3, [sp, #8]
        Vector<Node> *pNodes = &nodes; // Root nodes
   d56cc:	ad0d      	add	r5, sp, #52	; 0x34
        while ((name = nextSubcategoryName(category, size))) {
   d56ce:	a909      	add	r1, sp, #36	; 0x24
   d56d0:	a808      	add	r0, sp, #32
   d56d2:	f7ff fb00 	bl	d4cd6 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   d56d6:	4683      	mov	fp, r0
   d56d8:	2800      	cmp	r0, #0
   d56da:	d0f1      	beq.n	d56c0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
            const int index = nodeIndex(*pNodes, name, size, found);
   d56dc:	4601      	mov	r1, r0
   d56de:	9a09      	ldr	r2, [sp, #36]	; 0x24
            bool found = false;
   d56e0:	f88d 701f 	strb.w	r7, [sp, #31]
            const int index = nodeIndex(*pNodes, name, size, found);
   d56e4:	f10d 031f 	add.w	r3, sp, #31
   d56e8:	4628      	mov	r0, r5
   d56ea:	f7ff fb73 	bl	d4dd4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d56ee:	f89d 801f 	ldrb.w	r8, [sp, #31]
            const int index = nodeIndex(*pNodes, name, size, found);
   d56f2:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d56f4:	f1b8 0f00 	cmp.w	r8, #0
   d56f8:	d166      	bne.n	d57c8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1da>
   d56fa:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
            level(-1) {
   d56fe:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
   d5702:	e9cd 8813 	strd	r8, r8, [sp, #76]	; 0x4c
   d5706:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d570a:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
   d570e:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
   d5712:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d5716:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   d571a:	4293      	cmp	r3, r2
   d571c:	db1a      	blt.n	d5754 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x166>
   d571e:	f103 0b01 	add.w	fp, r3, #1
        if (n > 0) {
   d5722:	f1bb 0f00 	cmp.w	fp, #0
   d5726:	dd4a      	ble.n	d57be <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d0>
    return ::malloc(size);
   d5728:	fb0a f00b 	mul.w	r0, sl, fp
   d572c:	f7fe ff8c 	bl	d4648 <malloc>
            if (!d) {
   d5730:	9004      	str	r0, [sp, #16]
   d5732:	2800      	cmp	r0, #0
   d5734:	d045      	beq.n	d57c2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d4>
            move(d, data_, data_ + size_);
   d5736:	e9d5 1200 	ldrd	r1, r2, [r5]
   d573a:	fb0a 1202 	mla	r2, sl, r2, r1
   d573e:	f7ff fe71 	bl	d5424 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
   d5742:	9b04      	ldr	r3, [sp, #16]
    ::free(ptr);
   d5744:	6828      	ldr	r0, [r5, #0]
   d5746:	9304      	str	r3, [sp, #16]
   d5748:	f7fe ff86 	bl	d4658 <free>
        data_ = d;
   d574c:	9b04      	ldr	r3, [sp, #16]
   d574e:	602b      	str	r3, [r5, #0]
        capacity_ = n;
   d5750:	f8c5 b008 	str.w	fp, [r5, #8]
    T* const p = data_ + i;
   d5754:	9b01      	ldr	r3, [sp, #4]
   d5756:	f8d5 b000 	ldr.w	fp, [r5]
    move(p + 1, p, data_ + size_);
   d575a:	686a      	ldr	r2, [r5, #4]
    T* const p = data_ + i;
   d575c:	fb0a f303 	mul.w	r3, sl, r3
   d5760:	eb0b 0103 	add.w	r1, fp, r3
    move(p + 1, p, data_ + size_);
   d5764:	f101 0014 	add.w	r0, r1, #20
   d5768:	fb0a b202 	mla	r2, sl, r2, fp
   d576c:	9104      	str	r1, [sp, #16]
    T* const p = data_ + i;
   d576e:	9305      	str	r3, [sp, #20]
    move(p + 1, p, data_ + size_);
   d5770:	f7ff fe58 	bl	d5424 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   d5774:	9904      	ldr	r1, [sp, #16]
   d5776:	b1a9      	cbz	r1, d57a4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1b6>
struct spark::detail::LogFilter::Node {
   d5778:	9b05      	ldr	r3, [sp, #20]
   d577a:	9a11      	ldr	r2, [sp, #68]	; 0x44
   d577c:	f84b 2003 	str.w	r2, [fp, r3]
   d5780:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
   d5784:	808b      	strh	r3, [r1, #4]
   d5786:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
   d578a:	80cb      	strh	r3, [r1, #6]
        capacity_(0) {
   d578c:	e9c1 7702 	strd	r7, r7, [r1, #8]
   d5790:	610f      	str	r7, [r1, #16]
      __a = _GLIBCXX_MOVE(__b);
   d5792:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   d5794:	608b      	str	r3, [r1, #8]
   d5796:	9b14      	ldr	r3, [sp, #80]	; 0x50
      __b = _GLIBCXX_MOVE(__tmp);
   d5798:	9713      	str	r7, [sp, #76]	; 0x4c
      __a = _GLIBCXX_MOVE(__b);
   d579a:	60cb      	str	r3, [r1, #12]
   d579c:	9b15      	ldr	r3, [sp, #84]	; 0x54
      __b = _GLIBCXX_MOVE(__tmp);
   d579e:	9714      	str	r7, [sp, #80]	; 0x50
      __a = _GLIBCXX_MOVE(__b);
   d57a0:	610b      	str	r3, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d57a2:	9715      	str	r7, [sp, #84]	; 0x54
    ++size_;
   d57a4:	686b      	ldr	r3, [r5, #4]
   d57a6:	3301      	adds	r3, #1
   d57a8:	606b      	str	r3, [r5, #4]
   d57aa:	a813      	add	r0, sp, #76	; 0x4c
   d57ac:	f7ff fc8c 	bl	d50c8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d57b0:	f1b8 0f00 	cmp.w	r8, #0
   d57b4:	d008      	beq.n	d57c8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1da>
    Vector<Node> nodes;
   d57b6:	a80d      	add	r0, sp, #52	; 0x34
   d57b8:	f7ff fc86 	bl	d50c8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d57bc:	e756      	b.n	d566c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
   d57be:	4643      	mov	r3, r8
   d57c0:	e7c0      	b.n	d5744 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x156>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d57c2:	f04f 0801 	mov.w	r8, #1
   d57c6:	e7f0      	b.n	d57aa <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
    return data_[i];
   d57c8:	9b01      	ldr	r3, [sp, #4]
   d57ca:	682d      	ldr	r5, [r5, #0]
   d57cc:	fb0a 5503 	mla	r5, sl, r3, r5
            if (!*category) { // Check if it's last subcategory
   d57d0:	9b08      	ldr	r3, [sp, #32]
   d57d2:	781b      	ldrb	r3, [r3, #0]
   d57d4:	b92b      	cbnz	r3, d57e2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f4>
                node.level = filters.at(i).level_;
   d57d6:	f8d9 3000 	ldr.w	r3, [r9]
   d57da:	9a02      	ldr	r2, [sp, #8]
   d57dc:	4413      	add	r3, r2
   d57de:	7c1b      	ldrb	r3, [r3, #16]
   d57e0:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
   d57e2:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
   d57e4:	e773      	b.n	d56ce <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xe0>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d57e6:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d57e8:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d57ea:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   d57ec:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d57ee:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d57f0:	920b      	str	r2, [sp, #44]	; 0x2c
      __a = _GLIBCXX_MOVE(__b);
   d57f2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
   d57f4:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d57f6:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   d57f8:	60a2      	str	r2, [r4, #8]
   d57fa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
   d57fc:	930d      	str	r3, [sp, #52]	; 0x34
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d57fe:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   d5800:	60e2      	str	r2, [r4, #12]
   d5802:	9a0e      	ldr	r2, [sp, #56]	; 0x38
      __b = _GLIBCXX_MOVE(__tmp);
   d5804:	930e      	str	r3, [sp, #56]	; 0x38
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5806:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
   d5808:	6122      	str	r2, [r4, #16]
   d580a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
      __b = _GLIBCXX_MOVE(__tmp);
   d580c:	930f      	str	r3, [sp, #60]	; 0x3c
    level_ = level;
   d580e:	9b03      	ldr	r3, [sp, #12]
   d5810:	910a      	str	r1, [sp, #40]	; 0x28
      __a = _GLIBCXX_MOVE(__b);
   d5812:	6162      	str	r2, [r4, #20]
   d5814:	7623      	strb	r3, [r4, #24]
   d5816:	e7ce      	b.n	d57b6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c8>

000d5818 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
   d5818:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
        filter_(level, filters) {
   d581a:	4605      	mov	r5, r0
   d581c:	4b09      	ldr	r3, [pc, #36]	; (d5844 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>)
   d581e:	f845 3b04 	str.w	r3, [r5], #4
inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
   d5822:	4604      	mov	r4, r0
   d5824:	460e      	mov	r6, r1
        filter_(level, filters) {
   d5826:	a801      	add	r0, sp, #4
   d5828:	4611      	mov	r1, r2
   d582a:	f7fe fd18 	bl	d425e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d582e:	aa01      	add	r2, sp, #4
   d5830:	4631      	mov	r1, r6
   d5832:	4628      	mov	r0, r5
   d5834:	f7ff fedb 	bl	d55ee <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d5838:	a801      	add	r0, sp, #4
   d583a:	f7fe fccf 	bl	d41dc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}
   d583e:	4620      	mov	r0, r4
   d5840:	b004      	add	sp, #16
   d5842:	bd70      	pop	{r4, r5, r6, pc}
   d5844:	000d66fc 	.word	0x000d66fc

000d5848 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
   d5848:	b5f0      	push	{r4, r5, r6, r7, lr}
   d584a:	460f      	mov	r7, r1
   d584c:	b087      	sub	sp, #28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d584e:	4926      	ldr	r1, [pc, #152]	; (d58e8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa0>)
            Print *stream, const JSONValue &params) {
   d5850:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d5852:	4638      	mov	r0, r7
            Print *stream, const JSONValue &params) {
   d5854:	4616      	mov	r6, r2
   d5856:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d5858:	f000 fe0f 	bl	d647a <strcmp>
   d585c:	bb00      	cbnz	r0, d58a0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x58>
        if (!stream) {
   d585e:	b1e4      	cbz	r4, d589a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   d5860:	4629      	mov	r1, r5
   d5862:	4668      	mov	r0, sp
   d5864:	f7ff fc8a 	bl	d517c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   d5868:	4920      	ldr	r1, [pc, #128]	; (d58ec <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa4>)
   d586a:	2024      	movs	r0, #36	; 0x24
   d586c:	f000 fd92 	bl	d6394 <_ZnwjRKSt9nothrow_t>
   d5870:	4605      	mov	r5, r0
   d5872:	b170      	cbz	r0, d5892 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
        stream_(&stream) {
   d5874:	4669      	mov	r1, sp
   d5876:	a803      	add	r0, sp, #12
   d5878:	f7fe fcf1 	bl	d425e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d587c:	aa03      	add	r2, sp, #12
   d587e:	4631      	mov	r1, r6
   d5880:	4628      	mov	r0, r5
   d5882:	f7ff ffc9 	bl	d5818 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d5886:	a803      	add	r0, sp, #12
   d5888:	f7fe fca8 	bl	d41dc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
    using StreamLogHandler::StreamLogHandler;
   d588c:	4b18      	ldr	r3, [pc, #96]	; (d58f0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa8>)
        stream_(&stream) {
   d588e:	622c      	str	r4, [r5, #32]
    using StreamLogHandler::StreamLogHandler;
   d5890:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   d5892:	4668      	mov	r0, sp
   d5894:	f7fe fca2 	bl	d41dc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d5898:	462c      	mov	r4, r5
}
   d589a:	4620      	mov	r0, r4
   d589c:	b007      	add	sp, #28
   d589e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   d58a0:	4914      	ldr	r1, [pc, #80]	; (d58f4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xac>)
   d58a2:	4638      	mov	r0, r7
   d58a4:	f000 fde9 	bl	d647a <strcmp>
   d58a8:	b9e0      	cbnz	r0, d58e4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x9c>
        if (!stream) {
   d58aa:	2c00      	cmp	r4, #0
   d58ac:	d0f5      	beq.n	d589a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   d58ae:	4629      	mov	r1, r5
   d58b0:	4668      	mov	r0, sp
   d58b2:	f7ff fc63 	bl	d517c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   d58b6:	490d      	ldr	r1, [pc, #52]	; (d58ec <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa4>)
   d58b8:	2024      	movs	r0, #36	; 0x24
   d58ba:	f000 fd6b 	bl	d6394 <_ZnwjRKSt9nothrow_t>
   d58be:	4605      	mov	r5, r0
   d58c0:	2800      	cmp	r0, #0
   d58c2:	d0e6      	beq.n	d5892 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
        stream_(&stream) {
   d58c4:	4669      	mov	r1, sp
   d58c6:	a803      	add	r0, sp, #12
   d58c8:	f7fe fcc9 	bl	d425e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d58cc:	aa03      	add	r2, sp, #12
   d58ce:	4631      	mov	r1, r6
   d58d0:	4628      	mov	r0, r5
   d58d2:	f7ff ffa1 	bl	d5818 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d58d6:	a803      	add	r0, sp, #12
   d58d8:	f7fe fc80 	bl	d41dc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d58dc:	4b06      	ldr	r3, [pc, #24]	; (d58f8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb0>)
   d58de:	602b      	str	r3, [r5, #0]
   d58e0:	622c      	str	r4, [r5, #32]
}
   d58e2:	e7d6      	b.n	d5892 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
            return nullptr; // Output stream is not specified
   d58e4:	2400      	movs	r4, #0
   d58e6:	e7d8      	b.n	d589a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
   d58e8:	000d67d0 	.word	0x000d67d0
   d58ec:	000d6960 	.word	0x000d6960
   d58f0:	000d6868 	.word	0x000d6868
   d58f4:	000d67d4 	.word	0x000d67d4
   d58f8:	000d6850 	.word	0x000d6850

000d58fc <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
   d58fc:	4b01      	ldr	r3, [pc, #4]	; (d5904 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d58fe:	4a02      	ldr	r2, [pc, #8]	; (d5908 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d5900:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d5902:	4770      	bx	lr
   d5904:	2003e6b8 	.word	0x2003e6b8
   d5908:	000d67e5 	.word	0x000d67e5

000d590c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d590c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d5910:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
   d5912:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d5916:	4604      	mov	r4, r0
   d5918:	460e      	mov	r6, r1
   d591a:	4617      	mov	r7, r2
   d591c:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
   d591e:	f000 fc75 	bl	d620c <_Z16_fetch_usbserialv>
   d5922:	4581      	cmp	r9, r0
   d5924:	d04c      	beq.n	d59c0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb4>
    if (attr.has_time) {
   d5926:	792b      	ldrb	r3, [r5, #4]
   d5928:	0719      	lsls	r1, r3, #28
   d592a:	d504      	bpl.n	d5936 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
   d592c:	696a      	ldr	r2, [r5, #20]
   d592e:	4954      	ldr	r1, [pc, #336]	; (d5a80 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   d5930:	4620      	mov	r0, r4
   d5932:	f7ff fa40 	bl	d4db6 <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
   d5936:	f1b8 0f00 	cmp.w	r8, #0
   d593a:	d00d      	beq.n	d5958 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
   d593c:	215b      	movs	r1, #91	; 0x5b
   d593e:	4620      	mov	r0, r4
   d5940:	f7ff fa2d 	bl	d4d9e <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   d5944:	4641      	mov	r1, r8
   d5946:	4620      	mov	r0, r4
   d5948:	f7ff fa1a 	bl	d4d80 <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   d594c:	6823      	ldr	r3, [r4, #0]
   d594e:	494d      	ldr	r1, [pc, #308]	; (d5a84 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
   d5950:	68db      	ldr	r3, [r3, #12]
   d5952:	2202      	movs	r2, #2
   d5954:	4620      	mov	r0, r4
   d5956:	4798      	blx	r3
    if (attr.has_file) {
   d5958:	792b      	ldrb	r3, [r5, #4]
   d595a:	07da      	lsls	r2, r3, #31
   d595c:	d523      	bpl.n	d59a6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9a>
        s = extractFileName(attr.file); // Strip directory path
   d595e:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
   d5962:	212f      	movs	r1, #47	; 0x2f
   d5964:	4640      	mov	r0, r8
   d5966:	f000 fdb4 	bl	d64d2 <strrchr>
    if (s1) {
   d596a:	b108      	cbz	r0, d5970 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
   d596c:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
   d5970:	4641      	mov	r1, r8
   d5972:	4620      	mov	r0, r4
   d5974:	f7ff fa04 	bl	d4d80 <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   d5978:	792b      	ldrb	r3, [r5, #4]
   d597a:	079b      	lsls	r3, r3, #30
   d597c:	d508      	bpl.n	d5990 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
   d597e:	213a      	movs	r1, #58	; 0x3a
   d5980:	4620      	mov	r0, r4
   d5982:	f7ff fa0c 	bl	d4d9e <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
   d5986:	68ea      	ldr	r2, [r5, #12]
   d5988:	493f      	ldr	r1, [pc, #252]	; (d5a88 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
   d598a:	4620      	mov	r0, r4
   d598c:	f7ff fa13 	bl	d4db6 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
   d5990:	792a      	ldrb	r2, [r5, #4]
   d5992:	6823      	ldr	r3, [r4, #0]
   d5994:	f012 0f04 	tst.w	r2, #4
   d5998:	68db      	ldr	r3, [r3, #12]
            write(", ", 2);
   d599a:	bf14      	ite	ne
   d599c:	493b      	ldrne	r1, [pc, #236]	; (d5a8c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
            write(": ", 2);
   d599e:	493c      	ldreq	r1, [pc, #240]	; (d5a90 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(", ", 2);
   d59a0:	2202      	movs	r2, #2
            write(": ", 2);
   d59a2:	4620      	mov	r0, r4
   d59a4:	4798      	blx	r3
    if (attr.has_function) {
   d59a6:	792b      	ldrb	r3, [r5, #4]
   d59a8:	0758      	lsls	r0, r3, #29
   d59aa:	d51d      	bpl.n	d59e8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xdc>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   d59ac:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
   d59ae:	460b      	mov	r3, r1
   d59b0:	461a      	mov	r2, r3
    for (; *s; ++s) {
   d59b2:	f813 0b01 	ldrb.w	r0, [r3], #1
   d59b6:	b160      	cbz	r0, d59d2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
        if (*s == ' ') {
   d59b8:	2820      	cmp	r0, #32
   d59ba:	d108      	bne.n	d59ce <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
            s1 = s + 1; // Skip return type
   d59bc:	4619      	mov	r1, r3
   d59be:	e7f7      	b.n	d59b0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
    if (stream_ == &Serial && Network.listening()) {
   d59c0:	4834      	ldr	r0, [pc, #208]	; (d5a94 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   d59c2:	f000 f966 	bl	d5c92 <_ZN5spark12NetworkClass9listeningEv>
   d59c6:	2800      	cmp	r0, #0
   d59c8:	d0ad      	beq.n	d5926 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
   d59ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
   d59ce:	2828      	cmp	r0, #40	; 0x28
   d59d0:	d1ee      	bne.n	d59b0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
        write(s, n);
   d59d2:	6823      	ldr	r3, [r4, #0]
   d59d4:	1a52      	subs	r2, r2, r1
   d59d6:	68db      	ldr	r3, [r3, #12]
   d59d8:	4620      	mov	r0, r4
   d59da:	4798      	blx	r3
        write("(): ", 4);
   d59dc:	6823      	ldr	r3, [r4, #0]
   d59de:	492e      	ldr	r1, [pc, #184]	; (d5a98 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   d59e0:	68db      	ldr	r3, [r3, #12]
   d59e2:	2204      	movs	r2, #4
   d59e4:	4620      	mov	r0, r4
   d59e6:	4798      	blx	r3
    return log_level_name(level, nullptr);
   d59e8:	2100      	movs	r1, #0
   d59ea:	4638      	mov	r0, r7
   d59ec:	f7fe fd90 	bl	d4510 <log_level_name>
   d59f0:	4601      	mov	r1, r0
    write(s);
   d59f2:	4620      	mov	r0, r4
   d59f4:	f7ff f9c4 	bl	d4d80 <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   d59f8:	6823      	ldr	r3, [r4, #0]
   d59fa:	4925      	ldr	r1, [pc, #148]	; (d5a90 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   d59fc:	68db      	ldr	r3, [r3, #12]
   d59fe:	2202      	movs	r2, #2
   d5a00:	4620      	mov	r0, r4
   d5a02:	4798      	blx	r3
    if (msg) {
   d5a04:	b11e      	cbz	r6, d5a0e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x102>
        write(msg);
   d5a06:	4631      	mov	r1, r6
   d5a08:	4620      	mov	r0, r4
   d5a0a:	f7ff f9b9 	bl	d4d80 <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
   d5a0e:	792b      	ldrb	r3, [r5, #4]
   d5a10:	f013 0f30 	tst.w	r3, #48	; 0x30
   d5a14:	d02c      	beq.n	d5a70 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>
        write(" [", 2);
   d5a16:	6823      	ldr	r3, [r4, #0]
   d5a18:	4920      	ldr	r1, [pc, #128]	; (d5a9c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   d5a1a:	68db      	ldr	r3, [r3, #12]
   d5a1c:	2202      	movs	r2, #2
   d5a1e:	4620      	mov	r0, r4
   d5a20:	4798      	blx	r3
        if (attr.has_code) {
   d5a22:	792b      	ldrb	r3, [r5, #4]
   d5a24:	06d9      	lsls	r1, r3, #27
   d5a26:	d50a      	bpl.n	d5a3e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x132>
            write("code = ", 7);
   d5a28:	6823      	ldr	r3, [r4, #0]
   d5a2a:	491d      	ldr	r1, [pc, #116]	; (d5aa0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   d5a2c:	68db      	ldr	r3, [r3, #12]
   d5a2e:	2207      	movs	r2, #7
   d5a30:	4620      	mov	r0, r4
   d5a32:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
   d5a34:	69aa      	ldr	r2, [r5, #24]
   d5a36:	491b      	ldr	r1, [pc, #108]	; (d5aa4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
   d5a38:	4620      	mov	r0, r4
   d5a3a:	f7ff f9bc 	bl	d4db6 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
   d5a3e:	792b      	ldrb	r3, [r5, #4]
   d5a40:	069a      	lsls	r2, r3, #26
   d5a42:	d511      	bpl.n	d5a68 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>
            if (attr.has_code) {
   d5a44:	06db      	lsls	r3, r3, #27
   d5a46:	d505      	bpl.n	d5a54 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>
                write(", ", 2);
   d5a48:	6823      	ldr	r3, [r4, #0]
   d5a4a:	4910      	ldr	r1, [pc, #64]	; (d5a8c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
   d5a4c:	68db      	ldr	r3, [r3, #12]
   d5a4e:	2202      	movs	r2, #2
   d5a50:	4620      	mov	r0, r4
   d5a52:	4798      	blx	r3
            write("details = ", 10);
   d5a54:	6823      	ldr	r3, [r4, #0]
   d5a56:	4914      	ldr	r1, [pc, #80]	; (d5aa8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
   d5a58:	68db      	ldr	r3, [r3, #12]
   d5a5a:	4620      	mov	r0, r4
   d5a5c:	220a      	movs	r2, #10
   d5a5e:	4798      	blx	r3
            write(attr.details);
   d5a60:	69e9      	ldr	r1, [r5, #28]
   d5a62:	4620      	mov	r0, r4
   d5a64:	f7ff f98c 	bl	d4d80 <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
   d5a68:	215d      	movs	r1, #93	; 0x5d
   d5a6a:	4620      	mov	r0, r4
   d5a6c:	f7ff f997 	bl	d4d9e <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
   d5a70:	6823      	ldr	r3, [r4, #0]
   d5a72:	490e      	ldr	r1, [pc, #56]	; (d5aac <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
   d5a74:	68db      	ldr	r3, [r3, #12]
   d5a76:	4620      	mov	r0, r4
   d5a78:	2202      	movs	r2, #2
}
   d5a7a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
   d5a7e:	4718      	bx	r3
   d5a80:	000d67e9 	.word	0x000d67e9
   d5a84:	000d67f0 	.word	0x000d67f0
   d5a88:	000d67b0 	.word	0x000d67b0
   d5a8c:	000d67f3 	.word	0x000d67f3
   d5a90:	000d67f8 	.word	0x000d67f8
   d5a94:	2003e6e4 	.word	0x2003e6e4
   d5a98:	000d67f6 	.word	0x000d67f6
   d5a9c:	000d67fb 	.word	0x000d67fb
   d5aa0:	000d67fe 	.word	0x000d67fe
   d5aa4:	000d6806 	.word	0x000d6806
   d5aa8:	000d6809 	.word	0x000d6809
   d5aac:	000d6814 	.word	0x000d6814

000d5ab0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d5ab0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d5ab4:	b085      	sub	sp, #20
    if (this->stream() == &Serial && Network.listening()) {
   d5ab6:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d5aba:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   d5abc:	4605      	mov	r5, r0
   d5abe:	460f      	mov	r7, r1
   d5ac0:	4690      	mov	r8, r2
   d5ac2:	461e      	mov	r6, r3
    if (this->stream() == &Serial && Network.listening()) {
   d5ac4:	f000 fba2 	bl	d620c <_Z16_fetch_usbserialv>
   d5ac8:	4581      	cmp	r9, r0
   d5aca:	d105      	bne.n	d5ad8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
   d5acc:	4849      	ldr	r0, [pc, #292]	; (d5bf4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
   d5ace:	f000 f8e0 	bl	d5c92 <_ZN5spark12NetworkClass9listeningEv>
   d5ad2:	2800      	cmp	r0, #0
   d5ad4:	f040 808a 	bne.w	d5bec <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
    JSONStreamWriter json(*this->stream());
   d5ad8:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
   d5ada:	4a47      	ldr	r2, [pc, #284]	; (d5bf8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   d5adc:	9201      	str	r2, [sp, #4]
        state_(BEGIN) {
   d5ade:	f04f 0900 	mov.w	r9, #0
    json.beginObject();
   d5ae2:	a801      	add	r0, sp, #4
        strm_(stream) {
   d5ae4:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
   d5ae6:	f88d 9008 	strb.w	r9, [sp, #8]
   d5aea:	f7ff f83c 	bl	d4b66 <_ZN5spark10JSONWriter11beginObjectEv>
   d5aee:	4649      	mov	r1, r9
   d5af0:	4640      	mov	r0, r8
   d5af2:	f7fe fd0d 	bl	d4510 <log_level_name>
    json.name("l", 1).value(s);
   d5af6:	4941      	ldr	r1, [pc, #260]	; (d5bfc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   d5af8:	4680      	mov	r8, r0
   d5afa:	2201      	movs	r2, #1
   d5afc:	a801      	add	r0, sp, #4
   d5afe:	f7ff f8bb 	bl	d4c78 <_ZN5spark10JSONWriter4nameEPKcj>
   d5b02:	4641      	mov	r1, r8
   d5b04:	f7ff f92e 	bl	d4d64 <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
   d5b08:	b13f      	cbz	r7, d5b1a <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
   d5b0a:	493d      	ldr	r1, [pc, #244]	; (d5c00 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   d5b0c:	2201      	movs	r2, #1
   d5b0e:	a801      	add	r0, sp, #4
   d5b10:	f7ff f8b2 	bl	d4c78 <_ZN5spark10JSONWriter4nameEPKcj>
   d5b14:	4639      	mov	r1, r7
   d5b16:	f7ff f925 	bl	d4d64 <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
   d5b1a:	b13e      	cbz	r6, d5b2c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
   d5b1c:	4939      	ldr	r1, [pc, #228]	; (d5c04 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   d5b1e:	2201      	movs	r2, #1
   d5b20:	a801      	add	r0, sp, #4
   d5b22:	f7ff f8a9 	bl	d4c78 <_ZN5spark10JSONWriter4nameEPKcj>
   d5b26:	4631      	mov	r1, r6
   d5b28:	f7ff f91c 	bl	d4d64 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
   d5b2c:	7923      	ldrb	r3, [r4, #4]
   d5b2e:	07df      	lsls	r7, r3, #31
   d5b30:	d50e      	bpl.n	d5b50 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
   d5b32:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
   d5b34:	212f      	movs	r1, #47	; 0x2f
   d5b36:	4630      	mov	r0, r6
   d5b38:	f000 fccb 	bl	d64d2 <strrchr>
    if (s1) {
   d5b3c:	b100      	cbz	r0, d5b40 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
   d5b3e:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
   d5b40:	4931      	ldr	r1, [pc, #196]	; (d5c08 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   d5b42:	2201      	movs	r2, #1
   d5b44:	a801      	add	r0, sp, #4
   d5b46:	f7ff f897 	bl	d4c78 <_ZN5spark10JSONWriter4nameEPKcj>
   d5b4a:	4631      	mov	r1, r6
   d5b4c:	f7ff f90a 	bl	d4d64 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
   d5b50:	7923      	ldrb	r3, [r4, #4]
   d5b52:	079e      	lsls	r6, r3, #30
   d5b54:	d507      	bpl.n	d5b66 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
   d5b56:	492d      	ldr	r1, [pc, #180]	; (d5c0c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
   d5b58:	2202      	movs	r2, #2
   d5b5a:	a801      	add	r0, sp, #4
   d5b5c:	f7ff f88c 	bl	d4c78 <_ZN5spark10JSONWriter4nameEPKcj>
   d5b60:	68e1      	ldr	r1, [r4, #12]
   d5b62:	f7ff f80d 	bl	d4b80 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
   d5b66:	7923      	ldrb	r3, [r4, #4]
   d5b68:	0758      	lsls	r0, r3, #29
   d5b6a:	d514      	bpl.n	d5b96 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   d5b6c:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
   d5b6e:	4633      	mov	r3, r6
   d5b70:	461f      	mov	r7, r3
    for (; *s; ++s) {
   d5b72:	f813 2b01 	ldrb.w	r2, [r3], #1
   d5b76:	b12a      	cbz	r2, d5b84 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
   d5b78:	2a20      	cmp	r2, #32
   d5b7a:	d101      	bne.n	d5b80 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
   d5b7c:	461e      	mov	r6, r3
   d5b7e:	e7f7      	b.n	d5b70 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
   d5b80:	2a28      	cmp	r2, #40	; 0x28
   d5b82:	d1f5      	bne.n	d5b70 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
   d5b84:	4922      	ldr	r1, [pc, #136]	; (d5c10 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
   d5b86:	2202      	movs	r2, #2
   d5b88:	a801      	add	r0, sp, #4
   d5b8a:	f7ff f875 	bl	d4c78 <_ZN5spark10JSONWriter4nameEPKcj>
   d5b8e:	1bba      	subs	r2, r7, r6
   d5b90:	4631      	mov	r1, r6
   d5b92:	f7ff f881 	bl	d4c98 <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
   d5b96:	7923      	ldrb	r3, [r4, #4]
   d5b98:	0719      	lsls	r1, r3, #28
   d5b9a:	d507      	bpl.n	d5bac <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
   d5b9c:	491d      	ldr	r1, [pc, #116]	; (d5c14 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
   d5b9e:	2201      	movs	r2, #1
   d5ba0:	a801      	add	r0, sp, #4
   d5ba2:	f7ff f869 	bl	d4c78 <_ZN5spark10JSONWriter4nameEPKcj>
   d5ba6:	6961      	ldr	r1, [r4, #20]
   d5ba8:	f7fe fffc 	bl	d4ba4 <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
   d5bac:	7923      	ldrb	r3, [r4, #4]
   d5bae:	06da      	lsls	r2, r3, #27
   d5bb0:	d508      	bpl.n	d5bc4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
   d5bb2:	2204      	movs	r2, #4
   d5bb4:	4918      	ldr	r1, [pc, #96]	; (d5c18 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   d5bb6:	eb0d 0002 	add.w	r0, sp, r2
   d5bba:	f7ff f85d 	bl	d4c78 <_ZN5spark10JSONWriter4nameEPKcj>
   d5bbe:	69a1      	ldr	r1, [r4, #24]
   d5bc0:	f7fe ffde 	bl	d4b80 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
   d5bc4:	7923      	ldrb	r3, [r4, #4]
   d5bc6:	069b      	lsls	r3, r3, #26
   d5bc8:	d507      	bpl.n	d5bda <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
   d5bca:	4914      	ldr	r1, [pc, #80]	; (d5c1c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   d5bcc:	2206      	movs	r2, #6
   d5bce:	a801      	add	r0, sp, #4
   d5bd0:	f7ff f852 	bl	d4c78 <_ZN5spark10JSONWriter4nameEPKcj>
   d5bd4:	69e1      	ldr	r1, [r4, #28]
   d5bd6:	f7ff f8c5 	bl	d4d64 <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
   d5bda:	a801      	add	r0, sp, #4
   d5bdc:	f7fe ffad 	bl	d4b3a <_ZN5spark10JSONWriter9endObjectEv>
    this->stream()->write((const uint8_t*)"\r\n", 2);
   d5be0:	6a28      	ldr	r0, [r5, #32]
   d5be2:	490f      	ldr	r1, [pc, #60]	; (d5c20 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   d5be4:	6803      	ldr	r3, [r0, #0]
   d5be6:	2202      	movs	r2, #2
   d5be8:	68db      	ldr	r3, [r3, #12]
   d5bea:	4798      	blx	r3
}
   d5bec:	b005      	add	sp, #20
   d5bee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d5bf2:	bf00      	nop
   d5bf4:	2003e6e4 	.word	0x2003e6e4
   d5bf8:	000d6838 	.word	0x000d6838
   d5bfc:	000d67c6 	.word	0x000d67c6
   d5c00:	000d66f1 	.word	0x000d66f1
   d5c04:	000d6817 	.word	0x000d6817
   d5c08:	000d6819 	.word	0x000d6819
   d5c0c:	000d681b 	.word	0x000d681b
   d5c10:	000d681e 	.word	0x000d681e
   d5c14:	000d6821 	.word	0x000d6821
   d5c18:	000d6823 	.word	0x000d6823
   d5c1c:	000d6828 	.word	0x000d6828
   d5c20:	000d6814 	.word	0x000d6814

000d5c24 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d5c24:	2300      	movs	r3, #0
   d5c26:	6840      	ldr	r0, [r0, #4]
   d5c28:	461a      	mov	r2, r3
   d5c2a:	f7fe bcad 	b.w	d4588 <network_connect>

000d5c2e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d5c2e:	6840      	ldr	r0, [r0, #4]
   d5c30:	2200      	movs	r2, #0
   d5c32:	2102      	movs	r1, #2
   d5c34:	f7fe bcb8 	b.w	d45a8 <network_disconnect>

000d5c38 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d5c38:	2200      	movs	r2, #0
   d5c3a:	6840      	ldr	r0, [r0, #4]
   d5c3c:	4611      	mov	r1, r2
   d5c3e:	f7fe bcab 	b.w	d4598 <network_connecting>

000d5c42 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d5c42:	2200      	movs	r2, #0
   d5c44:	6840      	ldr	r0, [r0, #4]
   d5c46:	4611      	mov	r1, r2
   d5c48:	f7fe bcb6 	b.w	d45b8 <network_ready>

000d5c4c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d5c4c:	2300      	movs	r3, #0
   d5c4e:	6840      	ldr	r0, [r0, #4]
   d5c50:	461a      	mov	r2, r3
   d5c52:	4619      	mov	r1, r3
   d5c54:	f7fe bcb8 	b.w	d45c8 <network_on>

000d5c58 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d5c58:	2300      	movs	r3, #0
   d5c5a:	6840      	ldr	r0, [r0, #4]
   d5c5c:	461a      	mov	r2, r3
   d5c5e:	4619      	mov	r1, r3
   d5c60:	f7fe bcba 	b.w	d45d8 <network_off>

000d5c64 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   d5c64:	6840      	ldr	r0, [r0, #4]
   d5c66:	2100      	movs	r1, #0
   d5c68:	f7fe bcde 	b.w	d4628 <network_is_on>

000d5c6c <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   d5c6c:	6840      	ldr	r0, [r0, #4]
   d5c6e:	2100      	movs	r1, #0
   d5c70:	f7fe bce2 	b.w	d4638 <network_is_off>

000d5c74 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d5c74:	6840      	ldr	r0, [r0, #4]
   d5c76:	2200      	movs	r2, #0
   d5c78:	f081 0101 	eor.w	r1, r1, #1
   d5c7c:	f7fe bcb4 	b.w	d45e8 <network_listen>

000d5c80 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d5c80:	6840      	ldr	r0, [r0, #4]
   d5c82:	2200      	movs	r2, #0
   d5c84:	f7fe bcc0 	b.w	d4608 <network_set_listen_timeout>

000d5c88 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d5c88:	2200      	movs	r2, #0
   d5c8a:	6840      	ldr	r0, [r0, #4]
   d5c8c:	4611      	mov	r1, r2
   d5c8e:	f7fe bcc3 	b.w	d4618 <network_get_listen_timeout>

000d5c92 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d5c92:	2200      	movs	r2, #0
   d5c94:	6840      	ldr	r0, [r0, #4]
   d5c96:	4611      	mov	r1, r2
   d5c98:	f7fe bcae 	b.w	d45f8 <network_listening>

000d5c9c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d5c9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5ca0:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d5ca2:	b095      	sub	sp, #84	; 0x54
   d5ca4:	4616      	mov	r6, r2
   d5ca6:	460d      	mov	r5, r1
   d5ca8:	4607      	mov	r7, r0
    IPAddress addr;
   d5caa:	f7fe fde7 	bl	d487c <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d5cae:	4621      	mov	r1, r4
   d5cb0:	2218      	movs	r2, #24
   d5cb2:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d5cb4:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d5cb6:	f000 fb9d 	bl	d63f4 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d5cba:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d5cbc:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d5cc0:	4621      	mov	r1, r4
   d5cc2:	466b      	mov	r3, sp
   d5cc4:	aa0c      	add	r2, sp, #48	; 0x30
   d5cc6:	4630      	mov	r0, r6
   d5cc8:	f7fe fb8a 	bl	d43e0 <netdb_getaddrinfo>
    if (!r) {
   d5ccc:	4604      	mov	r4, r0
   d5cce:	2800      	cmp	r0, #0
   d5cd0:	d146      	bne.n	d5d60 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5cd2:	4602      	mov	r2, r0
   d5cd4:	2101      	movs	r1, #1
   d5cd6:	6868      	ldr	r0, [r5, #4]
   d5cd8:	f7fe fc6e 	bl	d45b8 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5cdc:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5cde:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5ce0:	4622      	mov	r2, r4
   d5ce2:	6868      	ldr	r0, [r5, #4]
   d5ce4:	f7fe fc68 	bl	d45b8 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5ce8:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5cea:	4681      	mov	r9, r0
        bool ok = false;
   d5cec:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5cee:	2e00      	cmp	r6, #0
   d5cf0:	d036      	beq.n	d5d60 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
   d5cf2:	2900      	cmp	r1, #0
   d5cf4:	d134      	bne.n	d5d60 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d5cf6:	6873      	ldr	r3, [r6, #4]
   d5cf8:	2b02      	cmp	r3, #2
   d5cfa:	d003      	beq.n	d5d04 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d5cfc:	2b0a      	cmp	r3, #10
   d5cfe:	d00b      	beq.n	d5d18 <_ZN5spark12NetworkClass7resolveEPKc+0x7c>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5d00:	69f6      	ldr	r6, [r6, #28]
   d5d02:	e7f4      	b.n	d5cee <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d5d04:	f1b8 0f00 	cmp.w	r8, #0
   d5d08:	d004      	beq.n	d5d14 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d5d0a:	6971      	ldr	r1, [r6, #20]
   d5d0c:	4638      	mov	r0, r7
   d5d0e:	3104      	adds	r1, #4
   d5d10:	f7fe fde1 	bl	d48d6 <_ZN9IPAddressaSEPKh>
                    ok = true;
                    break;
   d5d14:	4641      	mov	r1, r8
   d5d16:	e7f3      	b.n	d5d00 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                }
                case AF_INET6: {
                    if (!ipv6) {
   d5d18:	f1b9 0f00 	cmp.w	r9, #0
   d5d1c:	d101      	bne.n	d5d22 <_ZN5spark12NetworkClass7resolveEPKc+0x86>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d5d1e:	4649      	mov	r1, r9
   d5d20:	e7ee      	b.n	d5d00 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d5d22:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d5d24:	2210      	movs	r2, #16
   d5d26:	a801      	add	r0, sp, #4
   d5d28:	f000 fb64 	bl	d63f4 <memset>
                    a.v = 6;
   d5d2c:	2306      	movs	r3, #6
   d5d2e:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d5d32:	ad01      	add	r5, sp, #4
   d5d34:	f104 0308 	add.w	r3, r4, #8
   d5d38:	3418      	adds	r4, #24
   d5d3a:	6818      	ldr	r0, [r3, #0]
   d5d3c:	6859      	ldr	r1, [r3, #4]
   d5d3e:	462a      	mov	r2, r5
   d5d40:	c203      	stmia	r2!, {r0, r1}
   d5d42:	3308      	adds	r3, #8
   d5d44:	42a3      	cmp	r3, r4
   d5d46:	4615      	mov	r5, r2
   d5d48:	d1f7      	bne.n	d5d3a <_ZN5spark12NetworkClass7resolveEPKc+0x9e>
                    addr = IPAddress(a);
   d5d4a:	a901      	add	r1, sp, #4
   d5d4c:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d5d4e:	ad07      	add	r5, sp, #28
   d5d50:	f7fe fda2 	bl	d4898 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d5d54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5d56:	1d3c      	adds	r4, r7, #4
   d5d58:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5d5a:	682b      	ldr	r3, [r5, #0]
   d5d5c:	7023      	strb	r3, [r4, #0]
   d5d5e:	e7de      	b.n	d5d1e <_ZN5spark12NetworkClass7resolveEPKc+0x82>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d5d60:	9800      	ldr	r0, [sp, #0]
   d5d62:	f7fe fb35 	bl	d43d0 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d5d66:	4638      	mov	r0, r7
   d5d68:	b015      	add	sp, #84	; 0x54
   d5d6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d5d70 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d5d70:	4b02      	ldr	r3, [pc, #8]	; (d5d7c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d5d72:	4a03      	ldr	r2, [pc, #12]	; (d5d80 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d5d74:	601a      	str	r2, [r3, #0]
   d5d76:	2200      	movs	r2, #0
   d5d78:	605a      	str	r2, [r3, #4]

} // spark
   d5d7a:	4770      	bx	lr
   d5d7c:	2003e6e4 	.word	0x2003e6e4
   d5d80:	000d68b0 	.word	0x000d68b0

000d5d84 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d5d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5d86:	4606      	mov	r6, r0
   d5d88:	460d      	mov	r5, r1
  size_t n = 0;
   d5d8a:	188f      	adds	r7, r1, r2
   d5d8c:	2400      	movs	r4, #0
  while (size--) {
   d5d8e:	42bd      	cmp	r5, r7
   d5d90:	d00c      	beq.n	d5dac <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d5d92:	6833      	ldr	r3, [r6, #0]
   d5d94:	f815 1b01 	ldrb.w	r1, [r5], #1
   d5d98:	689b      	ldr	r3, [r3, #8]
   d5d9a:	4630      	mov	r0, r6
   d5d9c:	4798      	blx	r3
     if (chunk>=0)
   d5d9e:	1e03      	subs	r3, r0, #0
   d5da0:	db01      	blt.n	d5da6 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d5da2:	441c      	add	r4, r3
  while (size--) {
   d5da4:	e7f3      	b.n	d5d8e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d5da6:	2c00      	cmp	r4, #0
   d5da8:	bf08      	it	eq
   d5daa:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d5dac:	4620      	mov	r0, r4
   d5dae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5db0 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   d5db0:	b513      	push	{r0, r1, r4, lr}
   d5db2:	4604      	mov	r4, r0
    }
   d5db4:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d5db6:	b159      	cbz	r1, d5dd0 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d5db8:	9101      	str	r1, [sp, #4]
   d5dba:	f000 fb70 	bl	d649e <strlen>
   d5dbe:	6823      	ldr	r3, [r4, #0]
   d5dc0:	9901      	ldr	r1, [sp, #4]
   d5dc2:	68db      	ldr	r3, [r3, #12]
   d5dc4:	4602      	mov	r2, r0
   d5dc6:	4620      	mov	r0, r4
    }
   d5dc8:	b002      	add	sp, #8
   d5dca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d5dce:	4718      	bx	r3
    }
   d5dd0:	b002      	add	sp, #8
   d5dd2:	bd10      	pop	{r4, pc}

000d5dd4 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   d5dd4:	b508      	push	{r3, lr}
  return write(str);
   d5dd6:	f7ff ffeb 	bl	d5db0 <_ZN5Print5writeEPKc>
}
   d5dda:	bd08      	pop	{r3, pc}

000d5ddc <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   d5ddc:	6803      	ldr	r3, [r0, #0]
   d5dde:	689b      	ldr	r3, [r3, #8]
   d5de0:	4718      	bx	r3

000d5de2 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d5de2:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d5de4:	210d      	movs	r1, #13
{
   d5de6:	4605      	mov	r5, r0
  size_t n = print('\r');
   d5de8:	f7ff fff8 	bl	d5ddc <_ZN5Print5printEc>
  n += print('\n');
   d5dec:	210a      	movs	r1, #10
  size_t n = print('\r');
   d5dee:	4604      	mov	r4, r0
  n += print('\n');
   d5df0:	4628      	mov	r0, r5
   d5df2:	f7ff fff3 	bl	d5ddc <_ZN5Print5printEc>
  return n;
}
   d5df6:	4420      	add	r0, r4
   d5df8:	bd38      	pop	{r3, r4, r5, pc}

000d5dfa <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d5dfa:	b538      	push	{r3, r4, r5, lr}
   d5dfc:	4605      	mov	r5, r0
  return write(str);
   d5dfe:	f7ff ffd7 	bl	d5db0 <_ZN5Print5writeEPKc>
   d5e02:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   d5e04:	4628      	mov	r0, r5
   d5e06:	f7ff ffec 	bl	d5de2 <_ZN5Print7printlnEv>
  return n;
}
   d5e0a:	4420      	add	r0, r4
   d5e0c:	bd38      	pop	{r3, r4, r5, pc}

000d5e0e <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d5e0e:	b530      	push	{r4, r5, lr}
   d5e10:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d5e12:	2300      	movs	r3, #0
   d5e14:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d5e18:	2a01      	cmp	r2, #1
   d5e1a:	bf98      	it	ls
   d5e1c:	220a      	movls	r2, #10
   d5e1e:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d5e20:	460d      	mov	r5, r1
   d5e22:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d5e26:	fb01 5312 	mls	r3, r1, r2, r5
   d5e2a:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d5e2e:	2b09      	cmp	r3, #9
   d5e30:	bf94      	ite	ls
   d5e32:	3330      	addls	r3, #48	; 0x30
   d5e34:	3337      	addhi	r3, #55	; 0x37
   d5e36:	b2db      	uxtb	r3, r3
  } while(n);
   d5e38:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d5e3a:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d5e3e:	d9ef      	bls.n	d5e20 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d5e40:	4621      	mov	r1, r4
   d5e42:	f7ff ffb5 	bl	d5db0 <_ZN5Print5writeEPKc>
}
   d5e46:	b00b      	add	sp, #44	; 0x2c
   d5e48:	bd30      	pop	{r4, r5, pc}

000d5e4a <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   d5e4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5e4e:	b086      	sub	sp, #24
   d5e50:	af00      	add	r7, sp, #0
   d5e52:	4605      	mov	r5, r0
   d5e54:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   d5e56:	1d38      	adds	r0, r7, #4
   d5e58:	2114      	movs	r1, #20
{
   d5e5a:	4614      	mov	r4, r2
    va_copy(args2, args);
   d5e5c:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   d5e5e:	f7fe fc0b 	bl	d4678 <vsnprintf>

    if (n<bufsize)
   d5e62:	2813      	cmp	r0, #19
   d5e64:	d80e      	bhi.n	d5e84 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   d5e66:	1d39      	adds	r1, r7, #4
   d5e68:	4628      	mov	r0, r5
   d5e6a:	f7ff ffa1 	bl	d5db0 <_ZN5Print5writeEPKc>
   d5e6e:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   d5e70:	b11e      	cbz	r6, d5e7a <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   d5e72:	4628      	mov	r0, r5
   d5e74:	f7ff ffb5 	bl	d5de2 <_ZN5Print7printlnEv>
   d5e78:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   d5e7a:	4620      	mov	r0, r4
   d5e7c:	3718      	adds	r7, #24
   d5e7e:	46bd      	mov	sp, r7
   d5e80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   d5e84:	f100 0308 	add.w	r3, r0, #8
   d5e88:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   d5e8c:	46e8      	mov	r8, sp
        char bigger[n+1];
   d5e8e:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   d5e92:	4622      	mov	r2, r4
   d5e94:	1c41      	adds	r1, r0, #1
   d5e96:	683b      	ldr	r3, [r7, #0]
   d5e98:	4668      	mov	r0, sp
   d5e9a:	f7fe fbed 	bl	d4678 <vsnprintf>
  return write(str);
   d5e9e:	4669      	mov	r1, sp
   d5ea0:	4628      	mov	r0, r5
   d5ea2:	f7ff ff85 	bl	d5db0 <_ZN5Print5writeEPKc>
   d5ea6:	4604      	mov	r4, r0
   d5ea8:	46c5      	mov	sp, r8
   d5eaa:	e7e1      	b.n	d5e70 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000d5eac <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   d5eac:	4b01      	ldr	r3, [pc, #4]	; (d5eb4 <_GLOBAL__sub_I_RGB+0x8>)
   d5eae:	2200      	movs	r2, #0
   d5eb0:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   d5eb2:	4770      	bx	lr
   d5eb4:	2003e6ec 	.word	0x2003e6ec

000d5eb8 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d5eb8:	b510      	push	{r4, lr}
   d5eba:	4604      	mov	r4, r0
{
	free(buffer);
   d5ebc:	6800      	ldr	r0, [r0, #0]
   d5ebe:	f7fe fbcb 	bl	d4658 <free>
}
   d5ec2:	4620      	mov	r0, r4
   d5ec4:	bd10      	pop	{r4, pc}

000d5ec6 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d5ec6:	b510      	push	{r4, lr}
   d5ec8:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d5eca:	6800      	ldr	r0, [r0, #0]
   d5ecc:	b108      	cbz	r0, d5ed2 <_ZN6String10invalidateEv+0xc>
   d5ece:	f7fe fbc3 	bl	d4658 <free>
	buffer = NULL;
   d5ed2:	2300      	movs	r3, #0
	capacity = len = 0;
   d5ed4:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   d5ed8:	6023      	str	r3, [r4, #0]
}
   d5eda:	bd10      	pop	{r4, pc}

000d5edc <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d5edc:	b538      	push	{r3, r4, r5, lr}
   d5ede:	4604      	mov	r4, r0
   d5ee0:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d5ee2:	6800      	ldr	r0, [r0, #0]
   d5ee4:	3101      	adds	r1, #1
   d5ee6:	f7fe fbbf 	bl	d4668 <realloc>
	if (newbuffer) {
   d5eea:	b110      	cbz	r0, d5ef2 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d5eec:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   d5ef0:	2001      	movs	r0, #1
	}
	return 0;
}
   d5ef2:	bd38      	pop	{r3, r4, r5, pc}

000d5ef4 <_ZN6String7reserveEj>:
{
   d5ef4:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d5ef6:	6803      	ldr	r3, [r0, #0]
{
   d5ef8:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d5efa:	b123      	cbz	r3, d5f06 <_ZN6String7reserveEj+0x12>
   d5efc:	6843      	ldr	r3, [r0, #4]
   d5efe:	428b      	cmp	r3, r1
   d5f00:	d301      	bcc.n	d5f06 <_ZN6String7reserveEj+0x12>
   d5f02:	2001      	movs	r0, #1
}
   d5f04:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   d5f06:	4620      	mov	r0, r4
   d5f08:	f7ff ffe8 	bl	d5edc <_ZN6String12changeBufferEj>
   d5f0c:	2800      	cmp	r0, #0
   d5f0e:	d0f9      	beq.n	d5f04 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   d5f10:	68a3      	ldr	r3, [r4, #8]
   d5f12:	2b00      	cmp	r3, #0
   d5f14:	d1f5      	bne.n	d5f02 <_ZN6String7reserveEj+0xe>
   d5f16:	6822      	ldr	r2, [r4, #0]
   d5f18:	7013      	strb	r3, [r2, #0]
   d5f1a:	e7f2      	b.n	d5f02 <_ZN6String7reserveEj+0xe>

000d5f1c <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d5f1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d5f1e:	460d      	mov	r5, r1
	if (!reserve(length)) {
   d5f20:	4611      	mov	r1, r2
   d5f22:	9201      	str	r2, [sp, #4]
{
   d5f24:	4604      	mov	r4, r0
	if (!reserve(length)) {
   d5f26:	f7ff ffe5 	bl	d5ef4 <_ZN6String7reserveEj>
   d5f2a:	9a01      	ldr	r2, [sp, #4]
   d5f2c:	b928      	cbnz	r0, d5f3a <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   d5f2e:	4620      	mov	r0, r4
   d5f30:	f7ff ffc9 	bl	d5ec6 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   d5f34:	4620      	mov	r0, r4
   d5f36:	b003      	add	sp, #12
   d5f38:	bd30      	pop	{r4, r5, pc}
	len = length;
   d5f3a:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   d5f3c:	4629      	mov	r1, r5
   d5f3e:	6820      	ldr	r0, [r4, #0]
   d5f40:	f000 fa30 	bl	d63a4 <memcpy>
	buffer[len] = 0;
   d5f44:	6822      	ldr	r2, [r4, #0]
   d5f46:	68a3      	ldr	r3, [r4, #8]
   d5f48:	2100      	movs	r1, #0
   d5f4a:	54d1      	strb	r1, [r2, r3]
	return *this;
   d5f4c:	e7f2      	b.n	d5f34 <_ZN6String4copyEPKcj+0x18>

000d5f4e <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   d5f4e:	b538      	push	{r3, r4, r5, lr}
   d5f50:	4605      	mov	r5, r0
	if (buffer) {
   d5f52:	6800      	ldr	r0, [r0, #0]
{
   d5f54:	460c      	mov	r4, r1
	if (buffer) {
   d5f56:	b168      	cbz	r0, d5f74 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   d5f58:	686a      	ldr	r2, [r5, #4]
   d5f5a:	688b      	ldr	r3, [r1, #8]
   d5f5c:	429a      	cmp	r2, r3
   d5f5e:	d307      	bcc.n	d5f70 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   d5f60:	6809      	ldr	r1, [r1, #0]
   d5f62:	f000 fa94 	bl	d648e <strcpy>
			len = rhs.len;
   d5f66:	68a3      	ldr	r3, [r4, #8]
   d5f68:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   d5f6a:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   d5f6c:	60a3      	str	r3, [r4, #8]
}
   d5f6e:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   d5f70:	f7fe fb72 	bl	d4658 <free>
	buffer = rhs.buffer;
   d5f74:	6823      	ldr	r3, [r4, #0]
   d5f76:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   d5f78:	6863      	ldr	r3, [r4, #4]
   d5f7a:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   d5f7c:	68a3      	ldr	r3, [r4, #8]
   d5f7e:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   d5f80:	2300      	movs	r3, #0
	rhs.capacity = 0;
   d5f82:	e9c4 3300 	strd	r3, r3, [r4]
   d5f86:	e7f1      	b.n	d5f6c <_ZN6String4moveERS_+0x1e>

000d5f88 <_ZN6StringC1EOS_>:
String::String(String &&rval)
   d5f88:	b510      	push	{r4, lr}
	buffer = NULL;
   d5f8a:	2300      	movs	r3, #0
	capacity = 0;
   d5f8c:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   d5f90:	4604      	mov	r4, r0
	len = 0;
   d5f92:	6083      	str	r3, [r0, #8]
	flags = 0;
   d5f94:	7303      	strb	r3, [r0, #12]
	move(rval);
   d5f96:	f7ff ffda 	bl	d5f4e <_ZN6String4moveERS_>
}
   d5f9a:	4620      	mov	r0, r4
   d5f9c:	bd10      	pop	{r4, pc}

000d5f9e <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d5f9e:	4288      	cmp	r0, r1
{
   d5fa0:	b510      	push	{r4, lr}
   d5fa2:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d5fa4:	d005      	beq.n	d5fb2 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d5fa6:	680b      	ldr	r3, [r1, #0]
   d5fa8:	b12b      	cbz	r3, d5fb6 <_ZN6StringaSERKS_+0x18>
   d5faa:	688a      	ldr	r2, [r1, #8]
   d5fac:	4619      	mov	r1, r3
   d5fae:	f7ff ffb5 	bl	d5f1c <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d5fb2:	4620      	mov	r0, r4
   d5fb4:	bd10      	pop	{r4, pc}
	else invalidate();
   d5fb6:	f7ff ff86 	bl	d5ec6 <_ZN6String10invalidateEv>
   d5fba:	e7fa      	b.n	d5fb2 <_ZN6StringaSERKS_+0x14>

000d5fbc <_ZN6StringC1ERKS_>:
String::String(const String &value)
   d5fbc:	b510      	push	{r4, lr}
	buffer = NULL;
   d5fbe:	2300      	movs	r3, #0
String::String(const String &value)
   d5fc0:	4604      	mov	r4, r0
	capacity = 0;
   d5fc2:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   d5fc6:	6083      	str	r3, [r0, #8]
	flags = 0;
   d5fc8:	7303      	strb	r3, [r0, #12]
	*this = value;
   d5fca:	f7ff ffe8 	bl	d5f9e <_ZN6StringaSERKS_>
}
   d5fce:	4620      	mov	r0, r4
   d5fd0:	bd10      	pop	{r4, pc}
	...

000d5fd4 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d5fd4:	4b05      	ldr	r3, [pc, #20]	; (d5fec <_GLOBAL__sub_I_System+0x18>)
   d5fd6:	2202      	movs	r2, #2
   d5fd8:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d5fda:	4b05      	ldr	r3, [pc, #20]	; (d5ff0 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   d5fdc:	4a05      	ldr	r2, [pc, #20]	; (d5ff4 <_GLOBAL__sub_I_System+0x20>)
   d5fde:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   d5fe0:	2000      	movs	r0, #0
   d5fe2:	6018      	str	r0, [r3, #0]
   d5fe4:	8098      	strh	r0, [r3, #4]
    SleepResult() {}
   d5fe6:	7198      	strb	r0, [r3, #6]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d5fe8:	f7fe baa2 	b.w	d4530 <set_system_mode>
   d5fec:	2003e708 	.word	0x2003e708
   d5ff0:	2003e6fc 	.word	0x2003e6fc
   d5ff4:	ffff0000 	.word	0xffff0000

000d5ff8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d5ff8:	4b02      	ldr	r3, [pc, #8]	; (d6004 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d5ffa:	681a      	ldr	r2, [r3, #0]
   d5ffc:	4b02      	ldr	r3, [pc, #8]	; (d6008 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d5ffe:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d6000:	4770      	bx	lr
   d6002:	bf00      	nop
   d6004:	2003e5d4 	.word	0x2003e5d4
   d6008:	2003e70c 	.word	0x2003e70c

000d600c <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d600c:	4770      	bx	lr

000d600e <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d600e:	7441      	strb	r1, [r0, #17]
}
   d6010:	4770      	bx	lr

000d6012 <__tcf_0>:
    serial1_rx_buffer = new hal_usart_ring_buffer_t();
  }
  if (!serial1_tx_buffer) {
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
   d6012:	4770      	bx	lr

000d6014 <_ZN11USARTSerial17availableForWriteEv>:
{
   d6014:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d6016:	7c00      	ldrb	r0, [r0, #16]
   d6018:	f7fe fa22 	bl	d4460 <hal_usart_available_data_for_write>
}
   d601c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6020:	bd08      	pop	{r3, pc}

000d6022 <_ZN11USARTSerial9availableEv>:
{
   d6022:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d6024:	7c00      	ldrb	r0, [r0, #16]
   d6026:	f7fe f9fb 	bl	d4420 <hal_usart_available>
}
   d602a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d602e:	bd08      	pop	{r3, pc}

000d6030 <_ZN11USARTSerial4peekEv>:
{
   d6030:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d6032:	7c00      	ldrb	r0, [r0, #16]
   d6034:	f7fe fa04 	bl	d4440 <hal_usart_peek>
}
   d6038:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d603c:	bd08      	pop	{r3, pc}

000d603e <_ZN11USARTSerial4readEv>:
{
   d603e:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d6040:	7c00      	ldrb	r0, [r0, #16]
   d6042:	f7fe f9f5 	bl	d4430 <hal_usart_read>
}
   d6046:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d604a:	bd08      	pop	{r3, pc}

000d604c <_ZN11USARTSerial5flushEv>:
  hal_usart_flush(_serial);
   d604c:	7c00      	ldrb	r0, [r0, #16]
   d604e:	f7fe b9ff 	b.w	d4450 <hal_usart_flush>

000d6052 <_ZN11USARTSerial5writeEh>:
{
   d6052:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d6054:	7c45      	ldrb	r5, [r0, #17]
{
   d6056:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d6058:	b12d      	cbz	r5, d6066 <_ZN11USARTSerial5writeEh+0x14>
	  return hal_usart_write(_serial, c);
   d605a:	7c20      	ldrb	r0, [r4, #16]
}
   d605c:	b003      	add	sp, #12
   d605e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d6062:	f7fe b9d5 	b.w	d4410 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d6066:	7c00      	ldrb	r0, [r0, #16]
   d6068:	9101      	str	r1, [sp, #4]
   d606a:	f7fe f9f9 	bl	d4460 <hal_usart_available_data_for_write>
   d606e:	2800      	cmp	r0, #0
   d6070:	9901      	ldr	r1, [sp, #4]
   d6072:	dcf2      	bgt.n	d605a <_ZN11USARTSerial5writeEh+0x8>
}
   d6074:	4628      	mov	r0, r5
   d6076:	b003      	add	sp, #12
   d6078:	bd30      	pop	{r4, r5, pc}

000d607a <_ZN11USARTSerialD0Ev>:
   d607a:	b510      	push	{r4, lr}
   d607c:	2114      	movs	r1, #20
   d607e:	4604      	mov	r4, r0
   d6080:	f000 f986 	bl	d6390 <_ZdlPvj>
   d6084:	4620      	mov	r0, r4
   d6086:	bd10      	pop	{r4, pc}

000d6088 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d6088:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d608a:	f04f 0c00 	mov.w	ip, #0
   d608e:	4604      	mov	r4, r0
   d6090:	4608      	mov	r0, r1
   d6092:	4611      	mov	r1, r2
   d6094:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d6098:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d609c:	4a04      	ldr	r2, [pc, #16]	; (d60b0 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d609e:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d60a0:	2201      	movs	r2, #1
  _serial = serial;
   d60a2:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d60a4:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d60a6:	461a      	mov	r2, r3
   d60a8:	f7fe f9a2 	bl	d43f0 <hal_usart_init>
}
   d60ac:	4620      	mov	r0, r4
   d60ae:	bd10      	pop	{r4, pc}
   d60b0:	000d6908 	.word	0x000d6908

000d60b4 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   d60b4:	7c00      	ldrb	r0, [r0, #16]
   d60b6:	2300      	movs	r3, #0
   d60b8:	f7fe b9da 	b.w	d4470 <hal_usart_begin_config>

000d60bc <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   d60bc:	2200      	movs	r2, #0
   d60be:	f7ff bff9 	b.w	d60b4 <_ZN11USARTSerial5beginEmm>

000d60c2 <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
   d60c2:	7c00      	ldrb	r0, [r0, #16]
   d60c4:	f7fe b99c 	b.w	d4400 <hal_usart_end>

000d60c8 <_Z22__fetch_global_Serial1v>:
{
   d60c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if (!serial1_rx_buffer) {
   d60ca:	4c1a      	ldr	r4, [pc, #104]	; (d6134 <_Z22__fetch_global_Serial1v+0x6c>)
   d60cc:	6826      	ldr	r6, [r4, #0]
   d60ce:	b94e      	cbnz	r6, d60e4 <_Z22__fetch_global_Serial1v+0x1c>
    serial1_rx_buffer = new hal_usart_ring_buffer_t();
   d60d0:	2084      	movs	r0, #132	; 0x84
   d60d2:	f7fd ffde 	bl	d4092 <_Znwj>
   d60d6:	4605      	mov	r5, r0
   d60d8:	b118      	cbz	r0, d60e2 <_Z22__fetch_global_Serial1v+0x1a>
   d60da:	2284      	movs	r2, #132	; 0x84
   d60dc:	4631      	mov	r1, r6
   d60de:	f000 f989 	bl	d63f4 <memset>
   d60e2:	6025      	str	r5, [r4, #0]
  if (!serial1_tx_buffer) {
   d60e4:	4d14      	ldr	r5, [pc, #80]	; (d6138 <_Z22__fetch_global_Serial1v+0x70>)
   d60e6:	682f      	ldr	r7, [r5, #0]
   d60e8:	b94f      	cbnz	r7, d60fe <_Z22__fetch_global_Serial1v+0x36>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
   d60ea:	2084      	movs	r0, #132	; 0x84
   d60ec:	f7fd ffd1 	bl	d4092 <_Znwj>
   d60f0:	4606      	mov	r6, r0
   d60f2:	b118      	cbz	r0, d60fc <_Z22__fetch_global_Serial1v+0x34>
   d60f4:	2284      	movs	r2, #132	; 0x84
   d60f6:	4639      	mov	r1, r7
   d60f8:	f000 f97c 	bl	d63f4 <memset>
   d60fc:	602e      	str	r6, [r5, #0]
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
   d60fe:	4e0f      	ldr	r6, [pc, #60]	; (d613c <_Z22__fetch_global_Serial1v+0x74>)
   d6100:	7831      	ldrb	r1, [r6, #0]
   d6102:	f3bf 8f5b 	dmb	ish
   d6106:	f011 0101 	ands.w	r1, r1, #1
   d610a:	d110      	bne.n	d612e <_Z22__fetch_global_Serial1v+0x66>
   d610c:	4630      	mov	r0, r6
   d610e:	9101      	str	r1, [sp, #4]
   d6110:	f7fd ffce 	bl	d40b0 <__cxa_guard_acquire>
   d6114:	9901      	ldr	r1, [sp, #4]
   d6116:	b150      	cbz	r0, d612e <_Z22__fetch_global_Serial1v+0x66>
   d6118:	682b      	ldr	r3, [r5, #0]
   d611a:	6822      	ldr	r2, [r4, #0]
   d611c:	4808      	ldr	r0, [pc, #32]	; (d6140 <_Z22__fetch_global_Serial1v+0x78>)
   d611e:	f7ff ffb3 	bl	d6088 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d6122:	4630      	mov	r0, r6
   d6124:	f7fd ffc9 	bl	d40ba <__cxa_guard_release>
   d6128:	4806      	ldr	r0, [pc, #24]	; (d6144 <_Z22__fetch_global_Serial1v+0x7c>)
   d612a:	f000 f935 	bl	d6398 <atexit>
#endif
	return serial1;
}
   d612e:	4804      	ldr	r0, [pc, #16]	; (d6140 <_Z22__fetch_global_Serial1v+0x78>)
   d6130:	b003      	add	sp, #12
   d6132:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d6134:	2003e714 	.word	0x2003e714
   d6138:	2003e718 	.word	0x2003e718
   d613c:	2003e710 	.word	0x2003e710
   d6140:	2003e71c 	.word	0x2003e71c
   d6144:	000d6013 	.word	0x000d6013

000d6148 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d6148:	7441      	strb	r1, [r0, #17]
}
   d614a:	4770      	bx	lr

000d614c <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d614c:	4770      	bx	lr

000d614e <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d614e:	4770      	bx	lr

000d6150 <_ZN9USBSerial4readEv>:
{
   d6150:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d6152:	2100      	movs	r1, #0
   d6154:	7c00      	ldrb	r0, [r0, #16]
   d6156:	f7fe f9bb 	bl	d44d0 <HAL_USB_USART_Receive_Data>
}
   d615a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d615e:	bd08      	pop	{r3, pc}

000d6160 <_ZN9USBSerial4peekEv>:
{
   d6160:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d6162:	2101      	movs	r1, #1
   d6164:	7c00      	ldrb	r0, [r0, #16]
   d6166:	f7fe f9b3 	bl	d44d0 <HAL_USB_USART_Receive_Data>
}
   d616a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d616e:	bd08      	pop	{r3, pc}

000d6170 <_ZN9USBSerial17availableForWriteEv>:
{
   d6170:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d6172:	7c00      	ldrb	r0, [r0, #16]
   d6174:	f7fe f9a4 	bl	d44c0 <HAL_USB_USART_Available_Data_For_Write>
}
   d6178:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d617c:	bd08      	pop	{r3, pc}

000d617e <_ZN9USBSerial9availableEv>:
{
   d617e:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d6180:	7c00      	ldrb	r0, [r0, #16]
   d6182:	f7fe f995 	bl	d44b0 <HAL_USB_USART_Available_Data>
}
   d6186:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d618a:	bd08      	pop	{r3, pc}

000d618c <_ZN9USBSerial5writeEh>:
{
   d618c:	b513      	push	{r0, r1, r4, lr}
   d618e:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d6190:	7c00      	ldrb	r0, [r0, #16]
{
   d6192:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d6194:	f7fe f994 	bl	d44c0 <HAL_USB_USART_Available_Data_For_Write>
   d6198:	2800      	cmp	r0, #0
   d619a:	9901      	ldr	r1, [sp, #4]
   d619c:	dc01      	bgt.n	d61a2 <_ZN9USBSerial5writeEh+0x16>
   d619e:	7c60      	ldrb	r0, [r4, #17]
   d61a0:	b120      	cbz	r0, d61ac <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d61a2:	7c20      	ldrb	r0, [r4, #16]
   d61a4:	f7fe f99c 	bl	d44e0 <HAL_USB_USART_Send_Data>
   d61a8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d61ac:	b002      	add	sp, #8
   d61ae:	bd10      	pop	{r4, pc}

000d61b0 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d61b0:	7c00      	ldrb	r0, [r0, #16]
   d61b2:	f7fe b99d 	b.w	d44f0 <HAL_USB_USART_Flush_Data>

000d61b6 <_ZN9USBSerialD0Ev>:
   d61b6:	b510      	push	{r4, lr}
   d61b8:	2114      	movs	r1, #20
   d61ba:	4604      	mov	r4, r0
   d61bc:	f000 f8e8 	bl	d6390 <_ZdlPvj>
   d61c0:	4620      	mov	r0, r4
   d61c2:	bd10      	pop	{r4, pc}

000d61c4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d61c4:	b510      	push	{r4, lr}
   d61c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d61ca:	4604      	mov	r4, r0
   d61cc:	4608      	mov	r0, r1
   d61ce:	2100      	movs	r1, #0
   d61d0:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d61d4:	4b04      	ldr	r3, [pc, #16]	; (d61e8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d61d6:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d61d8:	2301      	movs	r3, #1
  _serial = serial;
   d61da:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d61dc:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d61de:	4611      	mov	r1, r2
   d61e0:	f7fe f94e 	bl	d4480 <HAL_USB_USART_Init>
}
   d61e4:	4620      	mov	r0, r4
   d61e6:	bd10      	pop	{r4, pc}
   d61e8:	000d6938 	.word	0x000d6938

000d61ec <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d61ec:	7c00      	ldrb	r0, [r0, #16]
   d61ee:	2200      	movs	r2, #0
   d61f0:	f7fe b94e 	b.w	d4490 <HAL_USB_USART_Begin>

000d61f4 <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
   d61f4:	7c00      	ldrb	r0, [r0, #16]
   d61f6:	f7fe b953 	b.w	d44a0 <HAL_USB_USART_End>

000d61fa <_Z19acquireSerialBufferv>:
{
   d61fa:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d61fc:	2214      	movs	r2, #20
{
   d61fe:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d6200:	2100      	movs	r1, #0
   d6202:	f000 f8f7 	bl	d63f4 <memset>
}
   d6206:	4620      	mov	r0, r4
   d6208:	bd10      	pop	{r4, pc}
	...

000d620c <_Z16_fetch_usbserialv>:
{
   d620c:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d620e:	4c0f      	ldr	r4, [pc, #60]	; (d624c <_Z16_fetch_usbserialv+0x40>)
{
   d6210:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d6212:	a803      	add	r0, sp, #12
   d6214:	f7ff fff1 	bl	d61fa <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d6218:	7821      	ldrb	r1, [r4, #0]
   d621a:	f3bf 8f5b 	dmb	ish
   d621e:	f011 0101 	ands.w	r1, r1, #1
   d6222:	d10f      	bne.n	d6244 <_Z16_fetch_usbserialv+0x38>
   d6224:	4620      	mov	r0, r4
   d6226:	9101      	str	r1, [sp, #4]
   d6228:	f7fd ff42 	bl	d40b0 <__cxa_guard_acquire>
   d622c:	9901      	ldr	r1, [sp, #4]
   d622e:	b148      	cbz	r0, d6244 <_Z16_fetch_usbserialv+0x38>
   d6230:	aa03      	add	r2, sp, #12
   d6232:	4807      	ldr	r0, [pc, #28]	; (d6250 <_Z16_fetch_usbserialv+0x44>)
   d6234:	f7ff ffc6 	bl	d61c4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d6238:	4620      	mov	r0, r4
   d623a:	f7fd ff3e 	bl	d40ba <__cxa_guard_release>
   d623e:	4805      	ldr	r0, [pc, #20]	; (d6254 <_Z16_fetch_usbserialv+0x48>)
   d6240:	f000 f8aa 	bl	d6398 <atexit>
	return _usbserial;
}
   d6244:	4802      	ldr	r0, [pc, #8]	; (d6250 <_Z16_fetch_usbserialv+0x44>)
   d6246:	b008      	add	sp, #32
   d6248:	bd10      	pop	{r4, pc}
   d624a:	bf00      	nop
   d624c:	2003e730 	.word	0x2003e730
   d6250:	2003e734 	.word	0x2003e734
   d6254:	000d614d 	.word	0x000d614d

000d6258 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d6258:	4b01      	ldr	r3, [pc, #4]	; (d6260 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d625a:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d625c:	4770      	bx	lr
   d625e:	bf00      	nop
   d6260:	2003e5d8 	.word	0x2003e5d8

000d6264 <serialEventRun>:
{
   d6264:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d6266:	4b0b      	ldr	r3, [pc, #44]	; (d6294 <serialEventRun+0x30>)
   d6268:	b143      	cbz	r3, d627c <serialEventRun+0x18>
   d626a:	f7ff ffcf 	bl	d620c <_Z16_fetch_usbserialv>
   d626e:	6803      	ldr	r3, [r0, #0]
   d6270:	691b      	ldr	r3, [r3, #16]
   d6272:	4798      	blx	r3
   d6274:	2800      	cmp	r0, #0
   d6276:	dd01      	ble.n	d627c <serialEventRun+0x18>
        serialEvent();
   d6278:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d627c:	4b06      	ldr	r3, [pc, #24]	; (d6298 <serialEventRun+0x34>)
   d627e:	b143      	cbz	r3, d6292 <serialEventRun+0x2e>
   d6280:	f7ff ff22 	bl	d60c8 <_Z22__fetch_global_Serial1v>
   d6284:	6803      	ldr	r3, [r0, #0]
   d6286:	691b      	ldr	r3, [r3, #16]
   d6288:	4798      	blx	r3
   d628a:	2800      	cmp	r0, #0
   d628c:	dd01      	ble.n	d6292 <serialEventRun+0x2e>
        serialEvent1();
   d628e:	f3af 8000 	nop.w
}
   d6292:	bd08      	pop	{r3, pc}
	...

000d629c <_post_loop>:
{
   d629c:	b508      	push	{r3, lr}
	serialEventRun();
   d629e:	f7ff ffe1 	bl	d6264 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d62a2:	f7fe f885 	bl	d43b0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d62a6:	4b01      	ldr	r3, [pc, #4]	; (d62ac <_post_loop+0x10>)
   d62a8:	6018      	str	r0, [r3, #0]
}
   d62aa:	bd08      	pop	{r3, pc}
   d62ac:	2003e750 	.word	0x2003e750

000d62b0 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d62b0:	4805      	ldr	r0, [pc, #20]	; (d62c8 <_Z33system_initialize_user_backup_ramv+0x18>)
   d62b2:	4a06      	ldr	r2, [pc, #24]	; (d62cc <_Z33system_initialize_user_backup_ramv+0x1c>)
   d62b4:	4906      	ldr	r1, [pc, #24]	; (d62d0 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   d62b6:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d62b8:	1a12      	subs	r2, r2, r0
   d62ba:	f000 f873 	bl	d63a4 <memcpy>
    __backup_sram_signature = signature;
   d62be:	4b05      	ldr	r3, [pc, #20]	; (d62d4 <_Z33system_initialize_user_backup_ramv+0x24>)
   d62c0:	4a05      	ldr	r2, [pc, #20]	; (d62d8 <_Z33system_initialize_user_backup_ramv+0x28>)
   d62c2:	601a      	str	r2, [r3, #0]
}
   d62c4:	bd08      	pop	{r3, pc}
   d62c6:	bf00      	nop
   d62c8:	2003f400 	.word	0x2003f400
   d62cc:	2003f404 	.word	0x2003f404
   d62d0:	000d6a90 	.word	0x000d6a90
   d62d4:	2003f400 	.word	0x2003f400
   d62d8:	9a271c1e 	.word	0x9a271c1e

000d62dc <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d62dc:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d62de:	2300      	movs	r3, #0
   d62e0:	9300      	str	r3, [sp, #0]
   d62e2:	461a      	mov	r2, r3
   d62e4:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d62e8:	f7fe f93c 	bl	d4564 <system_ctrl_set_result>
}
   d62ec:	b003      	add	sp, #12
   d62ee:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d62f4 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d62f4:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d62f6:	8843      	ldrh	r3, [r0, #2]
   d62f8:	2b0a      	cmp	r3, #10
   d62fa:	d008      	beq.n	d630e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d62fc:	2b50      	cmp	r3, #80	; 0x50
   d62fe:	d10b      	bne.n	d6318 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d6300:	4b09      	ldr	r3, [pc, #36]	; (d6328 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d6302:	681b      	ldr	r3, [r3, #0]
   d6304:	b14b      	cbz	r3, d631a <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d6306:	b003      	add	sp, #12
   d6308:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d630c:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d630e:	f7ff ffe5 	bl	d62dc <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d6312:	b003      	add	sp, #12
   d6314:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d6318:	2300      	movs	r3, #0
   d631a:	9300      	str	r3, [sp, #0]
   d631c:	461a      	mov	r2, r3
   d631e:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d6322:	f7fe f91f 	bl	d4564 <system_ctrl_set_result>
}
   d6326:	e7f4      	b.n	d6312 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d6328:	2003e74c 	.word	0x2003e74c

000d632c <module_user_init_hook>:
{
   d632c:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d632e:	4812      	ldr	r0, [pc, #72]	; (d6378 <module_user_init_hook+0x4c>)
   d6330:	2100      	movs	r1, #0
   d6332:	f7fe f9a9 	bl	d4688 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   d6336:	4b11      	ldr	r3, [pc, #68]	; (d637c <module_user_init_hook+0x50>)
   d6338:	681a      	ldr	r2, [r3, #0]
   d633a:	4b11      	ldr	r3, [pc, #68]	; (d6380 <module_user_init_hook+0x54>)
   d633c:	429a      	cmp	r2, r3
   d633e:	4b11      	ldr	r3, [pc, #68]	; (d6384 <module_user_init_hook+0x58>)
   d6340:	bf0c      	ite	eq
   d6342:	2201      	moveq	r2, #1
   d6344:	2200      	movne	r2, #0
   d6346:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d6348:	d001      	beq.n	d634e <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   d634a:	f7ff ffb1 	bl	d62b0 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d634e:	f7fe f81f 	bl	d4390 <HAL_RNG_GetRandomNumber>
   d6352:	4604      	mov	r4, r0
    srand(seed);
   d6354:	f000 f856 	bl	d6404 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d6358:	4b0b      	ldr	r3, [pc, #44]	; (d6388 <module_user_init_hook+0x5c>)
   d635a:	b113      	cbz	r3, d6362 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   d635c:	4620      	mov	r0, r4
   d635e:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d6362:	2100      	movs	r1, #0
   d6364:	4808      	ldr	r0, [pc, #32]	; (d6388 <module_user_init_hook+0x5c>)
   d6366:	f7fe f907 	bl	d4578 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d636a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d636e:	4807      	ldr	r0, [pc, #28]	; (d638c <module_user_init_hook+0x60>)
   d6370:	2100      	movs	r1, #0
   d6372:	f7fe b8ed 	b.w	d4550 <system_ctrl_set_app_request_handler>
   d6376:	bf00      	nop
   d6378:	000d6259 	.word	0x000d6259
   d637c:	2003f400 	.word	0x2003f400
   d6380:	9a271c1e 	.word	0x9a271c1e
   d6384:	2003e748 	.word	0x2003e748
   d6388:	00000000 	.word	0x00000000
   d638c:	000d62f5 	.word	0x000d62f5

000d6390 <_ZdlPvj>:
   d6390:	f7fd be81 	b.w	d4096 <_ZdlPv>

000d6394 <_ZnwjRKSt9nothrow_t>:
   d6394:	f7fd be7d 	b.w	d4092 <_Znwj>

000d6398 <atexit>:
   d6398:	2300      	movs	r3, #0
   d639a:	4601      	mov	r1, r0
   d639c:	461a      	mov	r2, r3
   d639e:	4618      	mov	r0, r3
   d63a0:	f000 b930 	b.w	d6604 <__register_exitproc>

000d63a4 <memcpy>:
   d63a4:	440a      	add	r2, r1
   d63a6:	4291      	cmp	r1, r2
   d63a8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   d63ac:	d100      	bne.n	d63b0 <memcpy+0xc>
   d63ae:	4770      	bx	lr
   d63b0:	b510      	push	{r4, lr}
   d63b2:	f811 4b01 	ldrb.w	r4, [r1], #1
   d63b6:	f803 4f01 	strb.w	r4, [r3, #1]!
   d63ba:	4291      	cmp	r1, r2
   d63bc:	d1f9      	bne.n	d63b2 <memcpy+0xe>
   d63be:	bd10      	pop	{r4, pc}

000d63c0 <memmove>:
   d63c0:	4288      	cmp	r0, r1
   d63c2:	b510      	push	{r4, lr}
   d63c4:	eb01 0402 	add.w	r4, r1, r2
   d63c8:	d902      	bls.n	d63d0 <memmove+0x10>
   d63ca:	4284      	cmp	r4, r0
   d63cc:	4623      	mov	r3, r4
   d63ce:	d807      	bhi.n	d63e0 <memmove+0x20>
   d63d0:	1e43      	subs	r3, r0, #1
   d63d2:	42a1      	cmp	r1, r4
   d63d4:	d008      	beq.n	d63e8 <memmove+0x28>
   d63d6:	f811 2b01 	ldrb.w	r2, [r1], #1
   d63da:	f803 2f01 	strb.w	r2, [r3, #1]!
   d63de:	e7f8      	b.n	d63d2 <memmove+0x12>
   d63e0:	4402      	add	r2, r0
   d63e2:	4601      	mov	r1, r0
   d63e4:	428a      	cmp	r2, r1
   d63e6:	d100      	bne.n	d63ea <memmove+0x2a>
   d63e8:	bd10      	pop	{r4, pc}
   d63ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   d63ee:	f802 4d01 	strb.w	r4, [r2, #-1]!
   d63f2:	e7f7      	b.n	d63e4 <memmove+0x24>

000d63f4 <memset>:
   d63f4:	4402      	add	r2, r0
   d63f6:	4603      	mov	r3, r0
   d63f8:	4293      	cmp	r3, r2
   d63fa:	d100      	bne.n	d63fe <memset+0xa>
   d63fc:	4770      	bx	lr
   d63fe:	f803 1b01 	strb.w	r1, [r3], #1
   d6402:	e7f9      	b.n	d63f8 <memset+0x4>

000d6404 <srand>:
   d6404:	b538      	push	{r3, r4, r5, lr}
   d6406:	4b0d      	ldr	r3, [pc, #52]	; (d643c <srand+0x38>)
   d6408:	681d      	ldr	r5, [r3, #0]
   d640a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d640c:	4604      	mov	r4, r0
   d640e:	b97b      	cbnz	r3, d6430 <srand+0x2c>
   d6410:	2018      	movs	r0, #24
   d6412:	f7fe f919 	bl	d4648 <malloc>
   d6416:	4a0a      	ldr	r2, [pc, #40]	; (d6440 <srand+0x3c>)
   d6418:	4b0a      	ldr	r3, [pc, #40]	; (d6444 <srand+0x40>)
   d641a:	63a8      	str	r0, [r5, #56]	; 0x38
   d641c:	e9c0 2300 	strd	r2, r3, [r0]
   d6420:	4b09      	ldr	r3, [pc, #36]	; (d6448 <srand+0x44>)
   d6422:	6083      	str	r3, [r0, #8]
   d6424:	230b      	movs	r3, #11
   d6426:	8183      	strh	r3, [r0, #12]
   d6428:	2201      	movs	r2, #1
   d642a:	2300      	movs	r3, #0
   d642c:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d6430:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d6432:	2200      	movs	r2, #0
   d6434:	611c      	str	r4, [r3, #16]
   d6436:	615a      	str	r2, [r3, #20]
   d6438:	bd38      	pop	{r3, r4, r5, pc}
   d643a:	bf00      	nop
   d643c:	2003e5d8 	.word	0x2003e5d8
   d6440:	abcd330e 	.word	0xabcd330e
   d6444:	e66d1234 	.word	0xe66d1234
   d6448:	0005deec 	.word	0x0005deec

000d644c <strchr>:
   d644c:	b2c9      	uxtb	r1, r1
   d644e:	4603      	mov	r3, r0
   d6450:	f810 2b01 	ldrb.w	r2, [r0], #1
   d6454:	b11a      	cbz	r2, d645e <strchr+0x12>
   d6456:	428a      	cmp	r2, r1
   d6458:	d1f9      	bne.n	d644e <strchr+0x2>
   d645a:	4618      	mov	r0, r3
   d645c:	4770      	bx	lr
   d645e:	2900      	cmp	r1, #0
   d6460:	bf18      	it	ne
   d6462:	2300      	movne	r3, #0
   d6464:	e7f9      	b.n	d645a <strchr+0xe>

000d6466 <strchrnul>:
   d6466:	b510      	push	{r4, lr}
   d6468:	4604      	mov	r4, r0
   d646a:	f7ff ffef 	bl	d644c <strchr>
   d646e:	b918      	cbnz	r0, d6478 <strchrnul+0x12>
   d6470:	4620      	mov	r0, r4
   d6472:	f000 f814 	bl	d649e <strlen>
   d6476:	4420      	add	r0, r4
   d6478:	bd10      	pop	{r4, pc}

000d647a <strcmp>:
   d647a:	f810 2b01 	ldrb.w	r2, [r0], #1
   d647e:	f811 3b01 	ldrb.w	r3, [r1], #1
   d6482:	2a01      	cmp	r2, #1
   d6484:	bf28      	it	cs
   d6486:	429a      	cmpcs	r2, r3
   d6488:	d0f7      	beq.n	d647a <strcmp>
   d648a:	1ad0      	subs	r0, r2, r3
   d648c:	4770      	bx	lr

000d648e <strcpy>:
   d648e:	4603      	mov	r3, r0
   d6490:	f811 2b01 	ldrb.w	r2, [r1], #1
   d6494:	f803 2b01 	strb.w	r2, [r3], #1
   d6498:	2a00      	cmp	r2, #0
   d649a:	d1f9      	bne.n	d6490 <strcpy+0x2>
   d649c:	4770      	bx	lr

000d649e <strlen>:
   d649e:	4603      	mov	r3, r0
   d64a0:	f813 2b01 	ldrb.w	r2, [r3], #1
   d64a4:	2a00      	cmp	r2, #0
   d64a6:	d1fb      	bne.n	d64a0 <strlen+0x2>
   d64a8:	1a18      	subs	r0, r3, r0
   d64aa:	3801      	subs	r0, #1
   d64ac:	4770      	bx	lr

000d64ae <strncmp>:
   d64ae:	b510      	push	{r4, lr}
   d64b0:	b16a      	cbz	r2, d64ce <strncmp+0x20>
   d64b2:	3901      	subs	r1, #1
   d64b4:	1884      	adds	r4, r0, r2
   d64b6:	f810 3b01 	ldrb.w	r3, [r0], #1
   d64ba:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   d64be:	4293      	cmp	r3, r2
   d64c0:	d103      	bne.n	d64ca <strncmp+0x1c>
   d64c2:	42a0      	cmp	r0, r4
   d64c4:	d001      	beq.n	d64ca <strncmp+0x1c>
   d64c6:	2b00      	cmp	r3, #0
   d64c8:	d1f5      	bne.n	d64b6 <strncmp+0x8>
   d64ca:	1a98      	subs	r0, r3, r2
   d64cc:	bd10      	pop	{r4, pc}
   d64ce:	4610      	mov	r0, r2
   d64d0:	e7fc      	b.n	d64cc <strncmp+0x1e>

000d64d2 <strrchr>:
   d64d2:	b538      	push	{r3, r4, r5, lr}
   d64d4:	4603      	mov	r3, r0
   d64d6:	460c      	mov	r4, r1
   d64d8:	b969      	cbnz	r1, d64f6 <strrchr+0x24>
   d64da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d64de:	f7ff bfb5 	b.w	d644c <strchr>
   d64e2:	1c43      	adds	r3, r0, #1
   d64e4:	4605      	mov	r5, r0
   d64e6:	4621      	mov	r1, r4
   d64e8:	4618      	mov	r0, r3
   d64ea:	f7ff ffaf 	bl	d644c <strchr>
   d64ee:	2800      	cmp	r0, #0
   d64f0:	d1f7      	bne.n	d64e2 <strrchr+0x10>
   d64f2:	4628      	mov	r0, r5
   d64f4:	bd38      	pop	{r3, r4, r5, pc}
   d64f6:	2500      	movs	r5, #0
   d64f8:	e7f5      	b.n	d64e6 <strrchr+0x14>
	...

000d64fc <_strtol_l.isra.0>:
   d64fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d6500:	4e3a      	ldr	r6, [pc, #232]	; (d65ec <_strtol_l.isra.0+0xf0>)
   d6502:	4686      	mov	lr, r0
   d6504:	468c      	mov	ip, r1
   d6506:	4660      	mov	r0, ip
   d6508:	f81c 4b01 	ldrb.w	r4, [ip], #1
   d650c:	5da5      	ldrb	r5, [r4, r6]
   d650e:	f015 0508 	ands.w	r5, r5, #8
   d6512:	d1f8      	bne.n	d6506 <_strtol_l.isra.0+0xa>
   d6514:	2c2d      	cmp	r4, #45	; 0x2d
   d6516:	d133      	bne.n	d6580 <_strtol_l.isra.0+0x84>
   d6518:	f89c 4000 	ldrb.w	r4, [ip]
   d651c:	f04f 0801 	mov.w	r8, #1
   d6520:	f100 0c02 	add.w	ip, r0, #2
   d6524:	2b00      	cmp	r3, #0
   d6526:	d05c      	beq.n	d65e2 <_strtol_l.isra.0+0xe6>
   d6528:	2b10      	cmp	r3, #16
   d652a:	d10c      	bne.n	d6546 <_strtol_l.isra.0+0x4a>
   d652c:	2c30      	cmp	r4, #48	; 0x30
   d652e:	d10a      	bne.n	d6546 <_strtol_l.isra.0+0x4a>
   d6530:	f89c 0000 	ldrb.w	r0, [ip]
   d6534:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d6538:	2858      	cmp	r0, #88	; 0x58
   d653a:	d14d      	bne.n	d65d8 <_strtol_l.isra.0+0xdc>
   d653c:	f89c 4001 	ldrb.w	r4, [ip, #1]
   d6540:	2310      	movs	r3, #16
   d6542:	f10c 0c02 	add.w	ip, ip, #2
   d6546:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
   d654a:	3f01      	subs	r7, #1
   d654c:	2600      	movs	r6, #0
   d654e:	fbb7 f9f3 	udiv	r9, r7, r3
   d6552:	4630      	mov	r0, r6
   d6554:	fb03 7a19 	mls	sl, r3, r9, r7
   d6558:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
   d655c:	2d09      	cmp	r5, #9
   d655e:	d818      	bhi.n	d6592 <_strtol_l.isra.0+0x96>
   d6560:	462c      	mov	r4, r5
   d6562:	42a3      	cmp	r3, r4
   d6564:	dd24      	ble.n	d65b0 <_strtol_l.isra.0+0xb4>
   d6566:	1c75      	adds	r5, r6, #1
   d6568:	d007      	beq.n	d657a <_strtol_l.isra.0+0x7e>
   d656a:	4581      	cmp	r9, r0
   d656c:	d31d      	bcc.n	d65aa <_strtol_l.isra.0+0xae>
   d656e:	d101      	bne.n	d6574 <_strtol_l.isra.0+0x78>
   d6570:	45a2      	cmp	sl, r4
   d6572:	db1a      	blt.n	d65aa <_strtol_l.isra.0+0xae>
   d6574:	fb00 4003 	mla	r0, r0, r3, r4
   d6578:	2601      	movs	r6, #1
   d657a:	f81c 4b01 	ldrb.w	r4, [ip], #1
   d657e:	e7eb      	b.n	d6558 <_strtol_l.isra.0+0x5c>
   d6580:	2c2b      	cmp	r4, #43	; 0x2b
   d6582:	bf08      	it	eq
   d6584:	f89c 4000 	ldrbeq.w	r4, [ip]
   d6588:	46a8      	mov	r8, r5
   d658a:	bf08      	it	eq
   d658c:	f100 0c02 	addeq.w	ip, r0, #2
   d6590:	e7c8      	b.n	d6524 <_strtol_l.isra.0+0x28>
   d6592:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
   d6596:	2d19      	cmp	r5, #25
   d6598:	d801      	bhi.n	d659e <_strtol_l.isra.0+0xa2>
   d659a:	3c37      	subs	r4, #55	; 0x37
   d659c:	e7e1      	b.n	d6562 <_strtol_l.isra.0+0x66>
   d659e:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
   d65a2:	2d19      	cmp	r5, #25
   d65a4:	d804      	bhi.n	d65b0 <_strtol_l.isra.0+0xb4>
   d65a6:	3c57      	subs	r4, #87	; 0x57
   d65a8:	e7db      	b.n	d6562 <_strtol_l.isra.0+0x66>
   d65aa:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   d65ae:	e7e4      	b.n	d657a <_strtol_l.isra.0+0x7e>
   d65b0:	1c73      	adds	r3, r6, #1
   d65b2:	d106      	bne.n	d65c2 <_strtol_l.isra.0+0xc6>
   d65b4:	2322      	movs	r3, #34	; 0x22
   d65b6:	f8ce 3000 	str.w	r3, [lr]
   d65ba:	4638      	mov	r0, r7
   d65bc:	b942      	cbnz	r2, d65d0 <_strtol_l.isra.0+0xd4>
   d65be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d65c2:	f1b8 0f00 	cmp.w	r8, #0
   d65c6:	d000      	beq.n	d65ca <_strtol_l.isra.0+0xce>
   d65c8:	4240      	negs	r0, r0
   d65ca:	2a00      	cmp	r2, #0
   d65cc:	d0f7      	beq.n	d65be <_strtol_l.isra.0+0xc2>
   d65ce:	b10e      	cbz	r6, d65d4 <_strtol_l.isra.0+0xd8>
   d65d0:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
   d65d4:	6011      	str	r1, [r2, #0]
   d65d6:	e7f2      	b.n	d65be <_strtol_l.isra.0+0xc2>
   d65d8:	2430      	movs	r4, #48	; 0x30
   d65da:	2b00      	cmp	r3, #0
   d65dc:	d1b3      	bne.n	d6546 <_strtol_l.isra.0+0x4a>
   d65de:	2308      	movs	r3, #8
   d65e0:	e7b1      	b.n	d6546 <_strtol_l.isra.0+0x4a>
   d65e2:	2c30      	cmp	r4, #48	; 0x30
   d65e4:	d0a4      	beq.n	d6530 <_strtol_l.isra.0+0x34>
   d65e6:	230a      	movs	r3, #10
   d65e8:	e7ad      	b.n	d6546 <_strtol_l.isra.0+0x4a>
   d65ea:	bf00      	nop
   d65ec:	000d6962 	.word	0x000d6962

000d65f0 <strtol>:
   d65f0:	4613      	mov	r3, r2
   d65f2:	460a      	mov	r2, r1
   d65f4:	4601      	mov	r1, r0
   d65f6:	4802      	ldr	r0, [pc, #8]	; (d6600 <strtol+0x10>)
   d65f8:	6800      	ldr	r0, [r0, #0]
   d65fa:	f7ff bf7f 	b.w	d64fc <_strtol_l.isra.0>
   d65fe:	bf00      	nop
   d6600:	2003e5d8 	.word	0x2003e5d8

000d6604 <__register_exitproc>:
   d6604:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d6608:	f8df 80b8 	ldr.w	r8, [pc, #184]	; d66c4 <__register_exitproc+0xc0>
   d660c:	4606      	mov	r6, r0
   d660e:	f8d8 0000 	ldr.w	r0, [r8]
   d6612:	461f      	mov	r7, r3
   d6614:	460d      	mov	r5, r1
   d6616:	4691      	mov	r9, r2
   d6618:	f000 f856 	bl	d66c8 <__retarget_lock_acquire_recursive>
   d661c:	4b25      	ldr	r3, [pc, #148]	; (d66b4 <__register_exitproc+0xb0>)
   d661e:	681c      	ldr	r4, [r3, #0]
   d6620:	b934      	cbnz	r4, d6630 <__register_exitproc+0x2c>
   d6622:	4c25      	ldr	r4, [pc, #148]	; (d66b8 <__register_exitproc+0xb4>)
   d6624:	601c      	str	r4, [r3, #0]
   d6626:	4b25      	ldr	r3, [pc, #148]	; (d66bc <__register_exitproc+0xb8>)
   d6628:	b113      	cbz	r3, d6630 <__register_exitproc+0x2c>
   d662a:	681b      	ldr	r3, [r3, #0]
   d662c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   d6630:	6863      	ldr	r3, [r4, #4]
   d6632:	2b1f      	cmp	r3, #31
   d6634:	dd07      	ble.n	d6646 <__register_exitproc+0x42>
   d6636:	f8d8 0000 	ldr.w	r0, [r8]
   d663a:	f000 f847 	bl	d66cc <__retarget_lock_release_recursive>
   d663e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d6642:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d6646:	b34e      	cbz	r6, d669c <__register_exitproc+0x98>
   d6648:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   d664c:	b988      	cbnz	r0, d6672 <__register_exitproc+0x6e>
   d664e:	4b1c      	ldr	r3, [pc, #112]	; (d66c0 <__register_exitproc+0xbc>)
   d6650:	b923      	cbnz	r3, d665c <__register_exitproc+0x58>
   d6652:	f8d8 0000 	ldr.w	r0, [r8]
   d6656:	f000 f838 	bl	d66ca <__retarget_lock_release>
   d665a:	e7f0      	b.n	d663e <__register_exitproc+0x3a>
   d665c:	f44f 7084 	mov.w	r0, #264	; 0x108
   d6660:	f7fd fff2 	bl	d4648 <malloc>
   d6664:	2800      	cmp	r0, #0
   d6666:	d0f4      	beq.n	d6652 <__register_exitproc+0x4e>
   d6668:	2300      	movs	r3, #0
   d666a:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   d666e:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   d6672:	6863      	ldr	r3, [r4, #4]
   d6674:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   d6678:	2201      	movs	r2, #1
   d667a:	409a      	lsls	r2, r3
   d667c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   d6680:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   d6684:	4313      	orrs	r3, r2
   d6686:	2e02      	cmp	r6, #2
   d6688:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   d668c:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   d6690:	bf02      	ittt	eq
   d6692:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   d6696:	431a      	orreq	r2, r3
   d6698:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
   d669c:	6863      	ldr	r3, [r4, #4]
   d669e:	f8d8 0000 	ldr.w	r0, [r8]
   d66a2:	1c5a      	adds	r2, r3, #1
   d66a4:	3302      	adds	r3, #2
   d66a6:	6062      	str	r2, [r4, #4]
   d66a8:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   d66ac:	f000 f80e 	bl	d66cc <__retarget_lock_release_recursive>
   d66b0:	2000      	movs	r0, #0
   d66b2:	e7c6      	b.n	d6642 <__register_exitproc+0x3e>
   d66b4:	2003e7e0 	.word	0x2003e7e0
   d66b8:	2003e754 	.word	0x2003e754
   d66bc:	00000000 	.word	0x00000000
   d66c0:	000d4649 	.word	0x000d4649
   d66c4:	2003e63c 	.word	0x2003e63c

000d66c8 <__retarget_lock_acquire_recursive>:
   d66c8:	4770      	bx	lr

000d66ca <__retarget_lock_release>:
   d66ca:	4770      	bx	lr

000d66cc <__retarget_lock_release_recursive>:
   d66cc:	4770      	bx	lr

000d66ce <link_code_end>:
	...

000d66d0 <dynalib_user>:
   d66d0:	401d 000d 4059 000d 4081 000d 4085 000d     .@..Y@...@...@..
   d66e0:	0000 0000 6964 7473 6e61 6563 203a 2000     ....distance: . 
   d66f0:	6d6d 0000                                   mm..

000d66f4 <_ZTVN5spark10LogHandlerE>:
	...
   d6704:	409d 000d 40c1 000d                         .@...@..

000d670c <_ZTVN5spark16SerialLogHandlerE>:
	...
   d6714:	40cd 000d 4101 000d 590d 000d 40c3 000d     .@...A...Y...@..

000d6724 <_ZTVN5spark13CellularClassE>:
	...
   d672c:	4753 000d 4749 000d 473f 000d 46f5 000d     SG..IG..?G...F..
   d673c:	4733 000d 4727 000d 5c65 000d 5c6d 000d     3G..'G..e\..m\..
   d674c:	471b 000d 4713 000d 4709 000d 46ff 000d     .G...G...G...F..
   d675c:	5c9d 000d                                   .\..

000d6760 <_ZTVN5spark13EthernetClassE>:
	...
   d6768:	47eb 000d 47e1 000d 47d7 000d 47cd 000d     .G...G...G...G..
   d6778:	47c1 000d 47b5 000d 5c65 000d 5c6d 000d     .G...G..e\..m\..
   d6788:	47a9 000d 47a1 000d 4797 000d 478d 000d     .G...G...G...G..
   d6798:	5c9d 000d                                   .\..

000d679c <_ZTV9IPAddress>:
	...
   d67a4:	4819 000d 4809 000d 480b 000d 6425 2500     .H...H...H..%d.%
   d67b4:	0075 2575 3430 0078 6162 6475 5300 7265     u.u%04x.baud.Ser
   d67c4:	6169 006c 6553 6972 6c61 0031 534a 4e4f     ial.Serial1.JSON
   d67d4:	7453 6572 6d61 6f4c 4867 6e61 6c64 7265     StreamLogHandler
   d67e4:	6100 7070 2500 3130 7530 0020 205d 2c00     .app.%010u .] .,
   d67f4:	0020 2928 203a 2000 005b 6f63 6564 3d20      .(): . [.code =
   d6804:	0020 6925 6400 7465 6961 736c 3d20 0020      .%i.details = .
   d6814:	0a0d 6300 6600 6c00 006e 6e66 7400 6300     ...c.f.ln.fn.t.c
   d6824:	646f 0065 6564 6174 6c69 0000               ode.detail..

000d6830 <_ZTVN5spark16JSONStreamWriterE>:
	...
   d6838:	4cd5 000d 4cfb 000d 4cb9 000d 4919 000d     .L...L...L...I..

000d6848 <_ZTVN5spark16StreamLogHandlerE>:
	...
   d6850:	5129 000d 5141 000d 590d 000d 40c3 000d     )Q..AQ...Y...@..

000d6860 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   d6868:	5155 000d 5169 000d 5ab1 000d 4cc1 000d     UQ..iQ...Z...L..

000d6878 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   d6880:	4cd3 000d 4d09 000d 5849 000d 4cc3 000d     .L...M..IX...L..

000d6890 <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   d6898:	4cd1 000d 4d17 000d 5071 000d 4d35 000d     .L...M..qP..5M..

000d68a8 <_ZTVN5spark12NetworkClassE>:
	...
   d68b0:	5c25 000d 5c2f 000d 5c39 000d 5c43 000d     %\../\..9\..C\..
   d68c0:	5c4d 000d 5c59 000d 5c65 000d 5c6d 000d     M\..Y\..e\..m\..
   d68d0:	5c75 000d 5c81 000d 5c89 000d 5c93 000d     u\...\...\...\..
   d68e0:	5c9d 000d 5925 252d 2d6d 6425 2554 3a48     .\..%Y-%m-%dT%H:
   d68f0:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000d6900 <_ZTV11USARTSerial>:
	...
   d6908:	600d 000d 607b 000d 6053 000d 5d85 000d     .`..{`..S`...]..
   d6918:	6023 000d 603f 000d 6031 000d 604d 000d     #`..?`..1`..M`..
   d6928:	600f 000d 6015 000d                         .`...`..

000d6930 <_ZTV9USBSerial>:
	...
   d6938:	614f 000d 61b7 000d 618d 000d 5d85 000d     Oa...a...a...]..
   d6948:	617f 000d 6151 000d 6161 000d 61b1 000d     .a..Qa..aa...a..
   d6958:	6171 000d 6149 000d                         qa..Ia..

000d6960 <_ZSt7nothrow>:
	...

000d6961 <_ctype_>:
   d6961:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   d6971:	2020 2020 2020 2020 2020 2020 2020 2020                     
   d6981:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   d6991:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   d69a1:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   d69b1:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   d69c1:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   d69d1:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   d69e1:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000d6a62 <link_const_variable_data_end>:
	...

000d6a64 <link_constructors_location>:
   d6a64:	000d42c5 	.word	0x000d42c5
   d6a68:	000d46e5 	.word	0x000d46e5
   d6a6c:	000d475d 	.word	0x000d475d
   d6a70:	000d47f5 	.word	0x000d47f5
   d6a74:	000d58fd 	.word	0x000d58fd
   d6a78:	000d5d71 	.word	0x000d5d71
   d6a7c:	000d5ead 	.word	0x000d5ead
   d6a80:	000d5fd5 	.word	0x000d5fd5
   d6a84:	000d5ff9 	.word	0x000d5ff9

000d6a88 <link_constructors_end>:
	...
