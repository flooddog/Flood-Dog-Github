
/Users/philipchatterton/IoCP/Particle/Flood_Dog/Flood_Dog_v07/target/2.2.0/boron/Flood_Dog_v07.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000b840  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  000df860  000df860  0000f860  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000df868  0001f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000200  2003e0f8  000df86c  0002e0f8  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000004fc  2003e2f8  2003e2f8  0003e2f8  2**3
                  ALLOC
  7 .module_info_suffix 0000002c  000dfa6c  000dfa6c  0002fa6c  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  8 .module_info_crc 00000004  000dfa98  000dfa98  0002fa98  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   0027e18b  00000000  00000000  0002fa9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00026fb7  00000000  00000000  002adc27  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0004366a  00000000  00000000  002d4bde  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000039e8  00000000  00000000  00318248  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 0000b3e0  00000000  00000000  0031bc30  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0004add7  00000000  00000000  00327010  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00061991  00000000  00000000  00371de7  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00132ff6  00000000  00000000  003d3778  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  0000b068  00000000  00000000  00506770  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f008 fb63 	bl	dc6fc <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f008 fb85 	bl	dc74c <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e0f8 	.word	0x2003e0f8
   d404c:	000df86c 	.word	0x000df86c
   d4050:	2003e2f8 	.word	0x2003e2f8
   d4054:	2003e2f8 	.word	0x2003e2f8
   d4058:	2003e7f1 	.word	0x2003e7f1

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405e:	4e07      	ldr	r6, [pc, #28]	; (d407c <module_user_init+0x20>)
   d4060:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
    module_user_init_hook();
   d4062:	f007 f963 	bl	db32c <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	1ba4      	subs	r4, r4, r6
   d4068:	08a4      	lsrs	r4, r4, #2
   d406a:	2500      	movs	r5, #0
   d406c:	42a5      	cmp	r5, r4
   d406e:	d100      	bne.n	d4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d4072:	f856 3b04 	ldr.w	r3, [r6], #4
   d4076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f7      	b.n	d406c <module_user_init+0x10>
   d407c:	000df81c 	.word	0x000df81c
   d4080:	000df85c 	.word	0x000df85c

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 ba2a 	b.w	d44dc <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 fa8f 	bl	d45ac <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d4092:	f007 b903 	b.w	db29c <_post_loop>

000d4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4096:	f003 bc55 	b.w	d7944 <malloc>

000d409a <_Znaj>:
   d409a:	f003 bc53 	b.w	d7944 <malloc>

000d409e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409e:	f003 bc59 	b.w	d7954 <free>
	...

000d40a4 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40a6:	4a03      	ldr	r2, [pc, #12]	; (d40b4 <__cxa_pure_virtual+0x10>)
   d40a8:	2100      	movs	r1, #0
   d40aa:	200c      	movs	r0, #12
   d40ac:	f003 fb08 	bl	d76c0 <panic_>
  while (1);
   d40b0:	e7fe      	b.n	d40b0 <__cxa_pure_virtual+0xc>
   d40b2:	bf00      	nop
   d40b4:	000d72f1 	.word	0x000d72f1

000d40b8 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40b8:	7800      	ldrb	r0, [r0, #0]
   d40ba:	fab0 f080 	clz	r0, r0
   d40be:	0940      	lsrs	r0, r0, #5
   d40c0:	4770      	bx	lr

000d40c2 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40c2:	2301      	movs	r3, #1
   d40c4:	7003      	strb	r3, [r0, #0]
   d40c6:	4770      	bx	lr

000d40c8 <_ZN5spark10LogHandler5writeEPKcj>:
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
    // Default implementation does nothing
}
   d40c8:	4770      	bx	lr

000d40ca <_ZN5spark16StreamLogHandler5writeEPKcj>:
inline Print* spark::StreamLogHandler::stream() const {
    return stream_;
}

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
   d40ca:	6a00      	ldr	r0, [r0, #32]
   d40cc:	6803      	ldr	r3, [r0, #0]
   d40ce:	68db      	ldr	r3, [r3, #12]
   d40d0:	4718      	bx	r3
	...

000d40d4 <_Z13startSampling6String>:


///////////////////////////////////////////////////////////////////////////
// Particle Function to start sampling values in debug for Dev_Dog_001
//
int startSampling(String tempStart) {
   d40d4:	b508      	push	{r3, lr}

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d40d6:	f003 f913 	bl	d7300 <HAL_Timer_Get_Milli_Seconds>
	stateTime = millis();
   d40da:	4b03      	ldr	r3, [pc, #12]	; (d40e8 <_Z13startSampling6String+0x14>)
   d40dc:	6018      	str	r0, [r3, #0]
	state = SAMPLING_WAIT_STATE;
   d40de:	4b03      	ldr	r3, [pc, #12]	; (d40ec <_Z13startSampling6String+0x18>)
   d40e0:	2203      	movs	r2, #3
   d40e2:	701a      	strb	r2, [r3, #0]
	return 1;
}
   d40e4:	2001      	movs	r0, #1
   d40e6:	bd08      	pop	{r3, pc}
   d40e8:	2003e420 	.word	0x2003e420
   d40ec:	2003e104 	.word	0x2003e104

000d40f0 <_ZN8MB85RC64D1Ev>:
	size_t memorySize;
	int addr; // This is just 0-7, the (0b1010000 of the 7-bit address is ORed in later)

};

class MB85RC64 : public MB85RC {
   d40f0:	b510      	push	{r4, lr}
   d40f2:	4b03      	ldr	r3, [pc, #12]	; (d4100 <_ZN8MB85RC64D1Ev+0x10>)
   d40f4:	6003      	str	r3, [r0, #0]
   d40f6:	4604      	mov	r4, r0
   d40f8:	f000 ffdc 	bl	d50b4 <_ZN6MB85RCD1Ev>
   d40fc:	4620      	mov	r0, r4
   d40fe:	bd10      	pop	{r4, pc}
   d4100:	000dea28 	.word	0x000dea28

000d4104 <_ZN8MB85RC64D0Ev>:
   d4104:	b510      	push	{r4, lr}
   d4106:	4604      	mov	r4, r0
   d4108:	f7ff fff2 	bl	d40f0 <_ZN8MB85RC64D1Ev>
   d410c:	4620      	mov	r0, r4
   d410e:	2110      	movs	r1, #16
   d4110:	f007 fa50 	bl	db5b4 <_ZdlPvj>
   d4114:	4620      	mov	r0, r4
   d4116:	bd10      	pop	{r4, pc}

000d4118 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   d4118:	4b0a      	ldr	r3, [pc, #40]	; (d4144 <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
   d411a:	b510      	push	{r4, lr}
   d411c:	4604      	mov	r4, r0
   d411e:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   d4120:	f004 fd38 	bl	d8b94 <_ZN5spark10LogManager8instanceEv>
   d4124:	4621      	mov	r1, r4
   d4126:	f004 ff36 	bl	d8f96 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
   d412a:	f007 f833 	bl	db194 <_Z16_fetch_usbserialv>
   d412e:	f007 f825 	bl	db17c <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
   d4132:	4620      	mov	r0, r4
   d4134:	4b04      	ldr	r3, [pc, #16]	; (d4148 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
   d4136:	f840 3b04 	str.w	r3, [r0], #4
   d413a:	f004 fe19 	bl	d8d70 <_ZN5spark6detail9LogFilterD1Ev>
    }
   d413e:	4620      	mov	r0, r4
   d4140:	bd10      	pop	{r4, pc}
   d4142:	bf00      	nop
   d4144:	000dea10 	.word	0x000dea10
   d4148:	000de9f8 	.word	0x000de9f8

000d414c <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
   d414c:	b510      	push	{r4, lr}
   d414e:	4604      	mov	r4, r0
    }
   d4150:	f7ff ffe2 	bl	d4118 <_ZN5spark16SerialLogHandlerD1Ev>
   d4154:	4620      	mov	r0, r4
   d4156:	2124      	movs	r1, #36	; 0x24
   d4158:	f007 fa2c 	bl	db5b4 <_ZdlPvj>
   d415c:	4620      	mov	r0, r4
   d415e:	bd10      	pop	{r4, pc}

000d4160 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode>:
            config_.flags |= f.value();
        }
        return *this;
    }

    SystemSleepConfiguration& gpio(pin_t pin, InterruptMode mode) {
   d4160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (valid_) {
   d4162:	7d03      	ldrb	r3, [r0, #20]
    SystemSleepConfiguration& gpio(pin_t pin, InterruptMode mode) {
   d4164:	4605      	mov	r5, r0
   d4166:	460f      	mov	r7, r1
   d4168:	4616      	mov	r6, r2
        if (valid_) {
   d416a:	b18b      	cbz	r3, d4190 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x30>
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   d416c:	6803      	ldr	r3, [r0, #0]
   d416e:	68db      	ldr	r3, [r3, #12]
        if (!start) {
   d4170:	b183      	cbz	r3, d4194 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x34>
            if (start->type == type) {
   d4172:	889a      	ldrh	r2, [r3, #4]
   d4174:	2a01      	cmp	r2, #1
   d4176:	d006      	beq.n	d4186 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x26>
            start = start->next;
   d4178:	689b      	ldr	r3, [r3, #8]
        while (start) {
   d417a:	e7f9      	b.n	d4170 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x10>
                auto gpioWakeup = reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeup);
                if (gpioWakeup->pin == pin) {
                    gpioWakeup->mode = mode;
                    return *this;
                }
                wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_GPIO, wakeup->next);
   d417c:	689b      	ldr	r3, [r3, #8]
        if (!start) {
   d417e:	b14b      	cbz	r3, d4194 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x34>
            if (start->type == type) {
   d4180:	889a      	ldrh	r2, [r3, #4]
   d4182:	2a01      	cmp	r2, #1
   d4184:	d1fa      	bne.n	d417c <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x1c>
            while (wakeup) {
   d4186:	b12b      	cbz	r3, d4194 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x34>
                if (gpioWakeup->pin == pin) {
   d4188:	899a      	ldrh	r2, [r3, #12]
   d418a:	42ba      	cmp	r2, r7
   d418c:	d1f6      	bne.n	d417c <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x1c>
                    gpioWakeup->mode = mode;
   d418e:	739e      	strb	r6, [r3, #14]
            wakeupSource->pin = pin;
            wakeupSource->mode = mode;
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
        }
        return *this;
    }
   d4190:	4628      	mov	r0, r5
   d4192:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_gpio_t();
   d4194:	490a      	ldr	r1, [pc, #40]	; (d41c0 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x60>)
   d4196:	2010      	movs	r0, #16
   d4198:	f007 fa0e 	bl	db5b8 <_ZnwjRKSt9nothrow_t>
   d419c:	4604      	mov	r4, r0
   d419e:	b168      	cbz	r0, d41bc <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x5c>
   d41a0:	2210      	movs	r2, #16
   d41a2:	2100      	movs	r1, #0
   d41a4:	f008 fad2 	bl	dc74c <memset>
            wakeupSource->base.size = sizeof(hal_wakeup_source_gpio_t);
   d41a8:	4b06      	ldr	r3, [pc, #24]	; (d41c4 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x64>)
   d41aa:	6023      	str	r3, [r4, #0]
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_GPIO;
   d41ac:	2301      	movs	r3, #1
   d41ae:	80a3      	strh	r3, [r4, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   d41b0:	692b      	ldr	r3, [r5, #16]
   d41b2:	60a3      	str	r3, [r4, #8]
            wakeupSource->pin = pin;
   d41b4:	81a7      	strh	r7, [r4, #12]
            wakeupSource->mode = mode;
   d41b6:	73a6      	strb	r6, [r4, #14]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   d41b8:	612c      	str	r4, [r5, #16]
   d41ba:	e7e9      	b.n	d4190 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x30>
                valid_ = false;
   d41bc:	7528      	strb	r0, [r5, #20]
                return *this;
   d41be:	e7e7      	b.n	d4190 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x30>
   d41c0:	000df45c 	.word	0x000df45c
   d41c4:	00030010 	.word	0x00030010

000d41c8 <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   d41c8:	b40e      	push	{r1, r2, r3}
   d41ca:	b510      	push	{r4, lr}
   d41cc:	b08d      	sub	sp, #52	; 0x34
   d41ce:	aa0f      	add	r2, sp, #60	; 0x3c
    va_list args;
    va_start(args, fmt);
    log(LOG_LEVEL_INFO, fmt, args);
   d41d0:	6801      	ldr	r1, [r0, #0]
inline void spark::Logger::info(const char *fmt, ...) const {
   d41d2:	f852 4b04 	ldr.w	r4, [r2], #4
    va_start(args, fmt);
   d41d6:	9203      	str	r2, [sp, #12]
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   d41d8:	2300      	movs	r3, #0
   d41da:	2020      	movs	r0, #32
   d41dc:	e9cd 0304 	strd	r0, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d41e0:	e9cd 4200 	strd	r4, r2, [sp]
   d41e4:	201e      	movs	r0, #30
   d41e6:	aa04      	add	r2, sp, #16
   d41e8:	f003 fa7a 	bl	d76e0 <log_message_v>
}
   d41ec:	b00d      	add	sp, #52	; 0x34
   d41ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d41f2:	b003      	add	sp, #12
   d41f4:	4770      	bx	lr
	...

000d41f8 <_Z9setupPMICv>:
void setupPMIC(){
   d41f8:	b508      	push	{r3, lr}
	pmic.begin();
   d41fa:	480a      	ldr	r0, [pc, #40]	; (d4224 <_Z9setupPMICv+0x2c>)
   d41fc:	f005 fbff 	bl	d99fe <_ZN4PMIC5beginEv>

    SystemPowerConfiguration(SystemPowerConfiguration&&) = default;
    SystemPowerConfiguration& operator=(SystemPowerConfiguration&&) = default;

    SystemPowerConfiguration& powerSourceMinVoltage(uint16_t voltage) {
        conf_.vin_min_voltage = voltage;
   d4200:	4809      	ldr	r0, [pc, #36]	; (d4228 <_Z9setupPMICv+0x30>)
   d4202:	f241 03cc 	movw	r3, #4300	; 0x10cc
   d4206:	80c3      	strh	r3, [r0, #6]
        return *this;
    }

    SystemPowerConfiguration& powerSourceMaxCurrent(uint16_t current) {
        conf_.vin_max_current = current;
   d4208:	4b08      	ldr	r3, [pc, #32]	; (d422c <_Z9setupPMICv+0x34>)
   d420a:	6083      	str	r3, [r0, #8]
        return (hal_timer_millis(nullptr) / 1000);
    }

#if HAL_PLATFORM_POWER_MANAGEMENT
    int setPowerConfiguration(const particle::SystemPowerConfiguration& conf) {
        return system_power_management_set_config(conf.config(), nullptr);
   d420c:	2100      	movs	r1, #0
        return *this;
    }

    SystemPowerConfiguration& batteryChargeVoltage(uint16_t voltage) {
        conf_.termination_voltage = voltage;
   d420e:	f241 0372 	movw	r3, #4210	; 0x1072
   d4212:	8183      	strh	r3, [r0, #12]
   d4214:	f003 fada 	bl	d77cc <system_power_management_set_config>
    Log.info("setPowerConfiguration=%d", res);
   d4218:	4905      	ldr	r1, [pc, #20]	; (d4230 <_Z9setupPMICv+0x38>)
   d421a:	4602      	mov	r2, r0
   d421c:	4805      	ldr	r0, [pc, #20]	; (d4234 <_Z9setupPMICv+0x3c>)
   d421e:	f7ff ffd3 	bl	d41c8 <_ZNK5spark6Logger4infoEPKcz>
}
   d4222:	bd08      	pop	{r3, pc}
   d4224:	2003e3cd 	.word	0x2003e3cd
   d4228:	2003e34c 	.word	0x2003e34c
   d422c:	03520226 	.word	0x03520226
   d4230:	000de7b0 	.word	0x000de7b0
   d4234:	2003e640 	.word	0x2003e640

000d4238 <_Z14getTemperaturev>:


///////////////////////////////////////////////////////////////////////////
// Carrier Board Temp Value
//
bool getTemperature() {
   d4238:	b510      	push	{r4, lr}
	int reading = analogRead(tmp36Pin);   //getting the voltage reading from the temperature sensor
   d423a:	200f      	movs	r0, #15
bool getTemperature() {
   d423c:	ed2d 8b02 	vpush	{d8}
	int reading = analogRead(tmp36Pin);   //getting the voltage reading from the temperature sensor
   d4240:	f007 f926 	bl	db490 <analogRead>
	delay(1000);
   d4244:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d4248:	f003 fbf4 	bl	d7a34 <delay>
	reading = analogRead(tmp36Pin);   //getting the voltage reading from the temperature sensor
   d424c:	200f      	movs	r0, #15
   d424e:	f007 f91f 	bl	db490 <analogRead>
   d4252:	4604      	mov	r4, r0
	delay(1000);
   d4254:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d4258:	f003 fbec 	bl	d7a34 <delay>
	float voltage = reading * 3.3;        // converting that reading to voltage, for 3.3v arduino use 3.3
   d425c:	4620      	mov	r0, r4
   d425e:	f007 fcc9 	bl	dbbf4 <__aeabi_i2d>
   d4262:	a32b      	add	r3, pc, #172	; (adr r3, d4310 <_Z14getTemperaturev+0xd8>)
   d4264:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4268:	f007 fd2e 	bl	dbcc8 <__aeabi_dmul>
   d426c:	f007 ffe6 	bl	dc23c <__aeabi_d2f>
	voltage /= 4096.0;                    // Electron is different than the Arduino where there are only 1024 steps
	temperatureC = (voltage - 0.5) * 100.0;  //converting from 10 mv per degree with 500 mV offset to degrees ((voltage - 500mV) times 100) - 5 degree calibration
   d4270:	eddf 7a1f 	vldr	s15, [pc, #124]	; d42f0 <_Z14getTemperaturev+0xb8>
   d4274:	ee07 0a10 	vmov	s14, r0
   d4278:	ee67 7a27 	vmul.f32	s15, s14, s15
   d427c:	ee17 0a90 	vmov	r0, s15
   d4280:	f007 fcca 	bl	dbc18 <__aeabi_f2d>
   d4284:	4b1b      	ldr	r3, [pc, #108]	; (d42f4 <_Z14getTemperaturev+0xbc>)
   d4286:	2200      	movs	r2, #0
   d4288:	f007 fb66 	bl	db958 <__aeabi_dsub>
   d428c:	2200      	movs	r2, #0
   d428e:	4b1a      	ldr	r3, [pc, #104]	; (d42f8 <_Z14getTemperaturev+0xc0>)
   d4290:	f007 fd1a 	bl	dbcc8 <__aeabi_dmul>
   d4294:	f007 ffd2 	bl	dc23c <__aeabi_d2f>
   d4298:	4b18      	ldr	r3, [pc, #96]	; (d42fc <_Z14getTemperaturev+0xc4>)
   d429a:	6018      	str	r0, [r3, #0]
   d429c:	ee08 0a10 	vmov	s16, r0
	temperatureF = (temperatureC * 9.0 / 5.0) + 32.0;  // now convert to Fahrenheit
   d42a0:	f007 fcba 	bl	dbc18 <__aeabi_f2d>
   d42a4:	4b16      	ldr	r3, [pc, #88]	; (d4300 <_Z14getTemperaturev+0xc8>)
   d42a6:	2200      	movs	r2, #0
   d42a8:	f007 fd0e 	bl	dbcc8 <__aeabi_dmul>
   d42ac:	4b15      	ldr	r3, [pc, #84]	; (d4304 <_Z14getTemperaturev+0xcc>)
   d42ae:	2200      	movs	r2, #0
   d42b0:	f007 fe34 	bl	dbf1c <__aeabi_ddiv>
   d42b4:	4b14      	ldr	r3, [pc, #80]	; (d4308 <_Z14getTemperaturev+0xd0>)
   d42b6:	2200      	movs	r2, #0
   d42b8:	f007 fb50 	bl	db95c <__adddf3>
   d42bc:	f007 ffbe 	bl	dc23c <__aeabi_d2f>
	
	if(temperatureC < -20.0 || temperatureC > 30.0) {             // Reasonable range for garage temperature
   d42c0:	eefb 7a04 	vmov.f32	s15, #180	; 0xc1a00000 -20.0
	temperatureF = (temperatureC * 9.0 / 5.0) + 32.0;  // now convert to Fahrenheit
   d42c4:	4b11      	ldr	r3, [pc, #68]	; (d430c <_Z14getTemperaturev+0xd4>)
	if(temperatureC < -20.0 || temperatureC > 30.0) {             // Reasonable range for garage temperature
   d42c6:	eeb4 8ae7 	vcmpe.f32	s16, s15
   d42ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	temperatureF = (temperatureC * 9.0 / 5.0) + 32.0;  // now convert to Fahrenheit
   d42ce:	6018      	str	r0, [r3, #0]
	if(temperatureC < -20.0 || temperatureC > 30.0) {             // Reasonable range for garage temperature
   d42d0:	d40b      	bmi.n	d42ea <_Z14getTemperaturev+0xb2>
   d42d2:	eef3 7a0e 	vmov.f32	s15, #62	; 0x41f00000  30.0
   d42d6:	eeb4 8ae7 	vcmpe.f32	s16, s15
   d42da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d42de:	bfd4      	ite	le
   d42e0:	2001      	movle	r0, #1
   d42e2:	2000      	movgt	r0, #0
	}
	else {
		// snprintf(resultStr, sizeof(resultStr),"Temperature is: %3.1f", temperatureF);
		return 1;
	}
}
   d42e4:	ecbd 8b02 	vpop	{d8}
   d42e8:	bd10      	pop	{r4, pc}
		return 0;
   d42ea:	2000      	movs	r0, #0
   d42ec:	e7fa      	b.n	d42e4 <_Z14getTemperaturev+0xac>
   d42ee:	bf00      	nop
   d42f0:	39800000 	.word	0x39800000
   d42f4:	3fe00000 	.word	0x3fe00000
   d42f8:	40590000 	.word	0x40590000
   d42fc:	2003e424 	.word	0x2003e424
   d4300:	40220000 	.word	0x40220000
   d4304:	40140000 	.word	0x40140000
   d4308:	40400000 	.word	0x40400000
   d430c:	2003e428 	.word	0x2003e428
   d4310:	66666666 	.word	0x66666666
   d4314:	400a6666 	.word	0x400a6666

000d4318 <_Z20meterParticlePublishv>:


///////////////////////////////////////////////////////////////////////////
// Meter the data to Particle 
//
bool meterParticlePublish(void){                           // Enforces Particle's limit on 1 publish a second
   d4318:	b510      	push	{r4, lr}
  static unsigned long lastPublish = 0;                    // Initialize and store value here
  if(millis() - lastPublish >= 1000) {                     // Particle rate limits at 1 publish per second
   d431a:	4c07      	ldr	r4, [pc, #28]	; (d4338 <_Z20meterParticlePublishv+0x20>)
   d431c:	f002 fff0 	bl	d7300 <HAL_Timer_Get_Milli_Seconds>
   d4320:	6823      	ldr	r3, [r4, #0]
   d4322:	1ac0      	subs	r0, r0, r3
   d4324:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   d4328:	d304      	bcc.n	d4334 <_Z20meterParticlePublishv+0x1c>
   d432a:	f002 ffe9 	bl	d7300 <HAL_Timer_Get_Milli_Seconds>
    lastPublish = millis();
   d432e:	6020      	str	r0, [r4, #0]
   d4330:	2001      	movs	r0, #1
    return 1;
  }
  else return 0;
}
   d4332:	bd10      	pop	{r4, pc}
  else return 0;
   d4334:	2000      	movs	r0, #0
   d4336:	e7fc      	b.n	d4332 <_Z20meterParticlePublishv+0x1a>
   d4338:	2003e31c 	.word	0x2003e31c

000d433c <_Z7logData6StringS_bb>:
bool logData(String tempEvent, String tempData, bool tempLogSerial, bool tempLogParticle){
   d433c:	b570      	push	{r4, r5, r6, lr}
   d433e:	4604      	mov	r4, r0
   d4340:	b086      	sub	sp, #24
   d4342:	460d      	mov	r5, r1
   d4344:	461e      	mov	r6, r3
	if(tempLogSerial){
   d4346:	b18a      	cbz	r2, d436c <_Z7logData6StringS_bb+0x30>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d4348:	4601      	mov	r1, r0
   d434a:	a802      	add	r0, sp, #8
   d434c:	f005 fd82 	bl	d9e54 <_ZN6StringC1ERKS_>
		Log.info(tempEvent + ": " + tempData);
   d4350:	491a      	ldr	r1, [pc, #104]	; (d43bc <_Z7logData6StringS_bb+0x80>)
   d4352:	a802      	add	r0, sp, #8
   d4354:	f005 fde0 	bl	d9f18 <_ZplRK15StringSumHelperPKc>
   d4358:	4629      	mov	r1, r5
   d435a:	f005 fdd1 	bl	d9f00 <_ZplRK15StringSumHelperRK6String>
   d435e:	6801      	ldr	r1, [r0, #0]
   d4360:	4817      	ldr	r0, [pc, #92]	; (d43c0 <_Z7logData6StringS_bb+0x84>)
   d4362:	f7ff ff31 	bl	d41c8 <_ZNK5spark6Logger4infoEPKcz>
class StringSumHelper : public String
   d4366:	a802      	add	r0, sp, #8
   d4368:	f005 fcde 	bl	d9d28 <_ZN6StringD1Ev>
	if(tempLogParticle){
   d436c:	b31e      	cbz	r6, d43b6 <_Z7logData6StringS_bb+0x7a>
		waitUntil(meterParticlePublish);
   d436e:	f7ff ffd3 	bl	d4318 <_Z20meterParticlePublishv>
        while (_while() && !_condition()) {
   d4372:	b910      	cbnz	r0, d437a <_Z7logData6StringS_bb+0x3e>
            spark_process();
   d4374:	f003 fa46 	bl	d7804 <spark_process>
        while (_while() && !_condition()) {
   d4378:	e7f9      	b.n	d436e <_Z7logData6StringS_bb+0x32>
   d437a:	f7ff ffcd 	bl	d4318 <_Z20meterParticlePublishv>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   d437e:	4b11      	ldr	r3, [pc, #68]	; (d43c4 <_Z7logData6StringS_bb+0x88>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d4380:	682a      	ldr	r2, [r5, #0]
   d4382:	781b      	ldrb	r3, [r3, #0]
   d4384:	f88d 3000 	strb.w	r3, [sp]
   d4388:	6821      	ldr	r1, [r4, #0]
   d438a:	233c      	movs	r3, #60	; 0x3c
   d438c:	a802      	add	r0, sp, #8
   d438e:	f003 fd11 	bl	d7db4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d4392:	9c03      	ldr	r4, [sp, #12]
   d4394:	b17c      	cbz	r4, d43b6 <_Z7logData6StringS_bb+0x7a>
      if (--_M_use_count == 0)
   d4396:	6863      	ldr	r3, [r4, #4]
   d4398:	3b01      	subs	r3, #1
   d439a:	6063      	str	r3, [r4, #4]
   d439c:	b95b      	cbnz	r3, d43b6 <_Z7logData6StringS_bb+0x7a>
          _M_dispose();
   d439e:	6823      	ldr	r3, [r4, #0]
   d43a0:	4620      	mov	r0, r4
   d43a2:	689b      	ldr	r3, [r3, #8]
   d43a4:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d43a6:	68a3      	ldr	r3, [r4, #8]
   d43a8:	3b01      	subs	r3, #1
   d43aa:	60a3      	str	r3, [r4, #8]
   d43ac:	b91b      	cbnz	r3, d43b6 <_Z7logData6StringS_bb+0x7a>
            _M_destroy();
   d43ae:	6823      	ldr	r3, [r4, #0]
   d43b0:	4620      	mov	r0, r4
   d43b2:	68db      	ldr	r3, [r3, #12]
   d43b4:	4798      	blx	r3
}
   d43b6:	2001      	movs	r0, #1
   d43b8:	b006      	add	sp, #24
   d43ba:	bd70      	pop	{r4, r5, r6, pc}
   d43bc:	000df1d5 	.word	0x000df1d5
   d43c0:	2003e640 	.word	0x2003e640
   d43c4:	2003e319 	.word	0x2003e319

000d43c8 <_Z8setLabel6String>:
int setLabel(String tempDeviceProperties) {
   d43c8:	b510      	push	{r4, lr}
	deviceProperties = tempDeviceProperties;
   d43ca:	4c0e      	ldr	r4, [pc, #56]	; (d4404 <_Z8setLabel6String+0x3c>)
int setLabel(String tempDeviceProperties) {
   d43cc:	b088      	sub	sp, #32
   d43ce:	4601      	mov	r1, r0
	deviceProperties = tempDeviceProperties;
   d43d0:	4620      	mov	r0, r4
   d43d2:	f005 fd30 	bl	d9e36 <_ZN6StringaSERKS_>
	logData("Name", deviceProperties, true, true);
   d43d6:	490c      	ldr	r1, [pc, #48]	; (d4408 <_Z8setLabel6String+0x40>)
   d43d8:	4668      	mov	r0, sp
   d43da:	f005 fcf0 	bl	d9dbe <_ZN6StringC1EPKc>
   d43de:	4621      	mov	r1, r4
   d43e0:	a804      	add	r0, sp, #16
   d43e2:	f005 fd37 	bl	d9e54 <_ZN6StringC1ERKS_>
   d43e6:	2301      	movs	r3, #1
   d43e8:	461a      	mov	r2, r3
   d43ea:	a904      	add	r1, sp, #16
   d43ec:	4668      	mov	r0, sp
   d43ee:	f7ff ffa5 	bl	d433c <_Z7logData6StringS_bb>
   d43f2:	a804      	add	r0, sp, #16
   d43f4:	f005 fc98 	bl	d9d28 <_ZN6StringD1Ev>
   d43f8:	4668      	mov	r0, sp
   d43fa:	f005 fc95 	bl	d9d28 <_ZN6StringD1Ev>
}
   d43fe:	2001      	movs	r0, #1
   d4400:	b008      	add	sp, #32
   d4402:	bd10      	pop	{r4, pc}
   d4404:	2003e370 	.word	0x2003e370
   d4408:	000de7c9 	.word	0x000de7c9

000d440c <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>:
inline AbstractTypeDiagnosticData<UnderlyingTypeT>::AbstractTypeDiagnosticData(DiagnosticDataId id, const char* name, diag_type type) :
        AbstractDiagnosticData(id, name, type) {
}

template<typename UnderlyingTypeT>
inline int AbstractTypeDiagnosticData<UnderlyingTypeT>::get(DiagnosticDataId id, UnderlyingTypeT& val) {
   d440c:	b530      	push	{r4, r5, lr}
   d440e:	b085      	sub	sp, #20
   d4410:	460d      	mov	r5, r1
    const diag_source* src = nullptr;
   d4412:	2200      	movs	r2, #0
    const int ret = diag_get_source(id, &src, nullptr);
   d4414:	4669      	mov	r1, sp
    const diag_source* src = nullptr;
   d4416:	9200      	str	r2, [sp, #0]
    const int ret = diag_get_source(id, &src, nullptr);
   d4418:	f003 f97a 	bl	d7710 <diag_get_source>
    if (ret != SYSTEM_ERROR_NONE) {
   d441c:	b9b0      	cbnz	r0, d444c <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x40>
        return ret;
    }
    return get(src, val);
   d441e:	9c00      	ldr	r4, [sp, #0]
    SPARK_ASSERT(src && src->callback);
   d4420:	b10c      	cbz	r4, d4426 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x1a>
   d4422:	6923      	ldr	r3, [r4, #16]
   d4424:	b923      	cbnz	r3, d4430 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x24>
   d4426:	4a0a      	ldr	r2, [pc, #40]	; (d4450 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x44>)
   d4428:	2100      	movs	r1, #0
   d442a:	200a      	movs	r0, #10
   d442c:	f003 f948 	bl	d76c0 <panic_>
    diag_source_get_cmd_data d = { sizeof(diag_source_get_cmd_data), 0 /* reserved */, data, size };
   d4430:	2300      	movs	r3, #0
   d4432:	f8ad 3006 	strh.w	r3, [sp, #6]
   d4436:	230c      	movs	r3, #12
   d4438:	f8ad 3004 	strh.w	r3, [sp, #4]
   d443c:	2304      	movs	r3, #4
   d443e:	9303      	str	r3, [sp, #12]
   d4440:	9502      	str	r5, [sp, #8]
    const int ret = src->callback(src, DIAG_SOURCE_CMD_GET, &d);
   d4442:	6923      	ldr	r3, [r4, #16]
   d4444:	aa01      	add	r2, sp, #4
   d4446:	2101      	movs	r1, #1
   d4448:	4620      	mov	r0, r4
   d444a:	4798      	blx	r3
}
   d444c:	b005      	add	sp, #20
   d444e:	bd30      	pop	{r4, r5, pc}
   d4450:	000d72f1 	.word	0x000d72f1

000d4454 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d4454:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d4456:	e9d0 5300 	ldrd	r5, r3, [r0]
   d445a:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   d445c:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d445e:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   d4462:	42ae      	cmp	r6, r5
   d4464:	d004      	beq.n	d4470 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
   d4466:	4628      	mov	r0, r5
   d4468:	f005 fc5e 	bl	d9d28 <_ZN6StringD1Ev>
   d446c:	3514      	adds	r5, #20
   d446e:	e7f8      	b.n	d4462 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   d4470:	6820      	ldr	r0, [r4, #0]
   d4472:	f003 fa6f 	bl	d7954 <free>
    AllocatorT::free(data_);
}
   d4476:	4620      	mov	r0, r4
   d4478:	bd70      	pop	{r4, r5, r6, pc}

000d447a <_ZN6MB85RC3putIhEERKT_jS3_>:
    template <typename T> const T &put(size_t framAddr, const T &t) {
   d447a:	b538      	push	{r3, r4, r5, lr}
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
   d447c:	6803      	ldr	r3, [r0, #0]
    template <typename T> const T &put(size_t framAddr, const T &t) {
   d447e:	4614      	mov	r4, r2
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
   d4480:	68dd      	ldr	r5, [r3, #12]
   d4482:	2301      	movs	r3, #1
   d4484:	47a8      	blx	r5
    }
   d4486:	4620      	mov	r0, r4
   d4488:	bd38      	pop	{r3, r4, r5, pc}
	...

000d448c <_Z11watchdogISRv>:
void watchdogISR(){
   d448c:	b570      	push	{r4, r5, r6, lr}
	fram.put(FRAM::pirAddr, pirState);
   d448e:	4d0f      	ldr	r5, [pc, #60]	; (d44cc <_Z11watchdogISRv+0x40>)
	pirState = 0;
   d4490:	4a0f      	ldr	r2, [pc, #60]	; (d44d0 <_Z11watchdogISRv+0x44>)
   d4492:	2400      	movs	r4, #0
	fram.put(FRAM::pirAddr, pirState);
   d4494:	2111      	movs	r1, #17
   d4496:	4628      	mov	r0, r5
	pirState = 0;
   d4498:	7014      	strb	r4, [r2, #0]
	fram.put(FRAM::pirAddr, pirState);
   d449a:	f7ff ffee 	bl	d447a <_ZN6MB85RC3putIhEERKT_jS3_>
	rtcState = 0;
   d449e:	4a0d      	ldr	r2, [pc, #52]	; (d44d4 <_Z11watchdogISRv+0x48>)
	fram.put(FRAM::rtcAddr, rtcState);
   d44a0:	2109      	movs	r1, #9
   d44a2:	4628      	mov	r0, r5
	rtcState = 0;
   d44a4:	7014      	strb	r4, [r2, #0]
	fram.put(FRAM::rtcAddr, rtcState);
   d44a6:	f7ff ffe8 	bl	d447a <_ZN6MB85RC3putIhEERKT_jS3_>
	watchdogState = 1;
   d44aa:	4a0b      	ldr	r2, [pc, #44]	; (d44d8 <_Z11watchdogISRv+0x4c>)
   d44ac:	2601      	movs	r6, #1
	fram.put(FRAM::watchdogAddr, watchdogState);
   d44ae:	2110      	movs	r1, #16
   d44b0:	4628      	mov	r0, r5
	watchdogState = 1;
   d44b2:	7016      	strb	r6, [r2, #0]
	fram.put(FRAM::watchdogAddr, watchdogState);
   d44b4:	f7ff ffe1 	bl	d447a <_ZN6MB85RC3putIhEERKT_jS3_>
	digitalWrite(donePin, HIGH);                           // Pet the watchdog
   d44b8:	4631      	mov	r1, r6
   d44ba:	2005      	movs	r0, #5
   d44bc:	f006 ffcf 	bl	db45e <digitalWrite>
	digitalWrite(donePin, LOW);
   d44c0:	4621      	mov	r1, r4
   d44c2:	2005      	movs	r0, #5
}
   d44c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	digitalWrite(donePin, LOW);
   d44c8:	f006 bfc9 	b.w	db45e <digitalWrite>
   d44cc:	2003e390 	.word	0x2003e390
   d44d0:	2003e3cc 	.word	0x2003e3cc
   d44d4:	2003e410 	.word	0x2003e410
   d44d8:	2003e458 	.word	0x2003e458

000d44dc <setup>:
void setup() {
   d44dc:	b513      	push	{r0, r1, r4, lr}
        return register_function(call_raw_user_function, (void*)func, funcKey);
   d44de:	4c2b      	ldr	r4, [pc, #172]	; (d458c <setup+0xb0>)
	Serial.begin(115200);
   d44e0:	f006 fe58 	bl	db194 <_Z16_fetch_usbserialv>
   d44e4:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   d44e8:	f006 fe44 	bl	db174 <_ZN9USBSerial5beginEl>
	setupPMIC();
   d44ec:	f7ff fe84 	bl	d41f8 <_Z9setupPMICv>
   d44f0:	4a27      	ldr	r2, [pc, #156]	; (d4590 <setup+0xb4>)
   d44f2:	4928      	ldr	r1, [pc, #160]	; (d4594 <setup+0xb8>)
   d44f4:	4620      	mov	r0, r4
   d44f6:	f003 fb6a 	bl	d7bce <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d44fa:	4a27      	ldr	r2, [pc, #156]	; (d4598 <setup+0xbc>)
   d44fc:	4927      	ldr	r1, [pc, #156]	; (d459c <setup+0xc0>)
   d44fe:	4620      	mov	r0, r4
   d4500:	f003 fb65 	bl	d7bce <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
	pinMode(userSwitch, INPUT);										// Button for user input
   d4504:	2100      	movs	r1, #0
   d4506:	2004      	movs	r0, #4
   d4508:	f006 ff98 	bl	db43c <pinMode>
	pinMode(wakeUpPin, INPUT_PULLDOWN);								// This pin is active HIGH
   d450c:	2103      	movs	r1, #3
   d450e:	2008      	movs	r0, #8
   d4510:	f006 ff94 	bl	db43c <pinMode>
	pinMode(BUILT_IN_LED, OUTPUT);									// declare the Blue LED Pin as an output
   d4514:	2101      	movs	r1, #1
   d4516:	2007      	movs	r0, #7
   d4518:	f006 ff90 	bl	db43c <pinMode>
	pinMode(donePin, OUTPUT);										// Allows us to pet the watchdog
   d451c:	2101      	movs	r1, #1
   d451e:	2005      	movs	r0, #5
   d4520:	f006 ff8c 	bl	db43c <pinMode>
	digitalWrite(donePin, HIGH);
   d4524:	2101      	movs	r1, #1
   d4526:	2005      	movs	r0, #5
   d4528:	f006 ff99 	bl	db45e <digitalWrite>
	digitalWrite(donePin, LOW);										// Pet the watchdog
   d452c:	2100      	movs	r1, #0
   d452e:	2005      	movs	r0, #5
   d4530:	f006 ff95 	bl	db45e <digitalWrite>
	pinMode(DeepSleepPin , OUTPUT);									// For a hard reset active HIGH
   d4534:	2101      	movs	r1, #1
   d4536:	2006      	movs	r0, #6
   d4538:	f006 ff80 	bl	db43c <pinMode>
	pinMode(ANALOG_DETECTOR, INPUT_PULLDOWN);						// This pin is active HIGH
   d453c:	2103      	movs	r1, #3
   d453e:	2010      	movs	r0, #16
   d4540:	f006 ff7c 	bl	db43c <pinMode>
	pinMode(PIRPin, INPUT_PULLDOWN);								// PIR Sensor Digital
   d4544:	2103      	movs	r1, #3
   d4546:	2013      	movs	r0, #19
   d4548:	f006 ff78 	bl	db43c <pinMode>
	digitalWrite(PIRPin, LOW);										// SET PIR Sensor Digital
   d454c:	2100      	movs	r1, #0
   d454e:	2013      	movs	r0, #19
   d4550:	f006 ff85 	bl	db45e <digitalWrite>
	Time.zone(-5 + Time.getDSTOffset());
   d4554:	f006 f8ec 	bl	da730 <_ZN9TimeClass12getDSTOffsetEv>
   d4558:	eef1 7a04 	vmov.f32	s15, #20	; 0x40a00000  5.0
   d455c:	ee30 0a67 	vsub.f32	s0, s0, s15
   d4560:	f006 f8c6 	bl	da6f0 <_ZN9TimeClass4zoneEf>
	rtc.setup();
   d4564:	480e      	ldr	r0, [pc, #56]	; (d45a0 <setup+0xc4>)
   d4566:	f001 f8e7 	bl	d5738 <_ZN8MCP794105setupEv>
	fram.begin();									  				// Initializes Wire but does not return a boolean on successful initialization
   d456a:	480e      	ldr	r0, [pc, #56]	; (d45a4 <setup+0xc8>)
   d456c:	f000 fdb8 	bl	d50e0 <_ZN6MB85RC5beginEv>
	attachInterrupt(wakeUpPin, watchdogISR, RISING);  				// Need to pet the watchdog when needed
   d4570:	2300      	movs	r3, #0
   d4572:	9300      	str	r3, [sp, #0]
   d4574:	490c      	ldr	r1, [pc, #48]	; (d45a8 <setup+0xcc>)
   d4576:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d457a:	2201      	movs	r2, #1
   d457c:	2008      	movs	r0, #8
   d457e:	f003 ff23 	bl	d83c8 <_Z15attachInterrupttPFvvE13InterruptModeah>
}
   d4582:	b002      	add	sp, #8
   d4584:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	watchdogISR();
   d4588:	f7ff bf80 	b.w	d448c <_Z11watchdogISRv>
   d458c:	000d7ba3 	.word	0x000d7ba3
   d4590:	000de7ce 	.word	0x000de7ce
   d4594:	000d43c9 	.word	0x000d43c9
   d4598:	000de7d7 	.word	0x000de7d7
   d459c:	000d40d5 	.word	0x000d40d5
   d45a0:	2003e3f4 	.word	0x2003e3f4
   d45a4:	2003e390 	.word	0x2003e390
   d45a8:	000d448d 	.word	0x000d448d

000d45ac <loop>:
void loop() {
   d45ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	switch(state){
   d45b0:	4c99      	ldr	r4, [pc, #612]	; (d4818 <loop+0x26c>)
	rtc.loop();									  				// Need to run this in the main loop
   d45b2:	489a      	ldr	r0, [pc, #616]	; (d481c <loop+0x270>)
void loop() {
   d45b4:	b092      	sub	sp, #72	; 0x48
	rtc.loop();									  				// Need to run this in the main loop
   d45b6:	f001 f9c5 	bl	d5944 <_ZN8MCP794104loopEv>
	switch(state){
   d45ba:	7823      	ldrb	r3, [r4, #0]
   d45bc:	3b02      	subs	r3, #2
   d45be:	2b06      	cmp	r3, #6
   d45c0:	f200 80aa 	bhi.w	d4718 <loop+0x16c>
   d45c4:	e8df f013 	tbh	[pc, r3, lsl #1]
   d45c8:	007e0007 	.word	0x007e0007
   d45cc:	00d900ab 	.word	0x00d900ab
   d45d0:	02730164 	.word	0x02730164
   d45d4:	02e0      	.short	0x02e0
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d45d6:	f003 f925 	bl	d7824 <spark_cloud_flag_connected>
   d45da:	4e91      	ldr	r6, [pc, #580]	; (d4820 <loop+0x274>)
			if(Particle.connected()){
   d45dc:	4605      	mov	r5, r0
   d45de:	2800      	cmp	r0, #0
   d45e0:	d04e      	beq.n	d4680 <loop+0xd4>
				logData("PARTICLE", "PARTICLE CONNECTED", true, false);
   d45e2:	4990      	ldr	r1, [pc, #576]	; (d4824 <loop+0x278>)
   d45e4:	a808      	add	r0, sp, #32
   d45e6:	f005 fbea 	bl	d9dbe <_ZN6StringC1EPKc>
   d45ea:	498f      	ldr	r1, [pc, #572]	; (d4828 <loop+0x27c>)
   d45ec:	a80c      	add	r0, sp, #48	; 0x30
   d45ee:	f005 fbe6 	bl	d9dbe <_ZN6StringC1EPKc>
   d45f2:	2300      	movs	r3, #0
   d45f4:	2201      	movs	r2, #1
   d45f6:	a90c      	add	r1, sp, #48	; 0x30
   d45f8:	a808      	add	r0, sp, #32
   d45fa:	f7ff fe9f 	bl	d433c <_Z7logData6StringS_bb>
   d45fe:	a80c      	add	r0, sp, #48	; 0x30
   d4600:	f005 fb92 	bl	d9d28 <_ZN6StringD1Ev>
   d4604:	a808      	add	r0, sp, #32
   d4606:	f005 fb8f 	bl	d9d28 <_ZN6StringD1Ev>
				if(watchdogState){
   d460a:	4b88      	ldr	r3, [pc, #544]	; (d482c <loop+0x280>)
   d460c:	781b      	ldrb	r3, [r3, #0]
   d460e:	b1c3      	cbz	r3, d4642 <loop+0x96>
					logData("SLEEP RESULT", "Woke By Watcdhdog", true, true);
   d4610:	4987      	ldr	r1, [pc, #540]	; (d4830 <loop+0x284>)
   d4612:	a808      	add	r0, sp, #32
   d4614:	f005 fbd3 	bl	d9dbe <_ZN6StringC1EPKc>
   d4618:	4986      	ldr	r1, [pc, #536]	; (d4834 <loop+0x288>)
						logData("SLEEP RESULT", "Woke By PIR", true, true);
   d461a:	a80c      	add	r0, sp, #48	; 0x30
   d461c:	f005 fbcf 	bl	d9dbe <_ZN6StringC1EPKc>
   d4620:	2301      	movs	r3, #1
   d4622:	461a      	mov	r2, r3
   d4624:	a90c      	add	r1, sp, #48	; 0x30
   d4626:	a808      	add	r0, sp, #32
   d4628:	f7ff fe88 	bl	d433c <_Z7logData6StringS_bb>
   d462c:	a80c      	add	r0, sp, #48	; 0x30
   d462e:	f005 fb7b 	bl	d9d28 <_ZN6StringD1Ev>
   d4632:	a808      	add	r0, sp, #32
   d4634:	f005 fb78 	bl	d9d28 <_ZN6StringD1Ev>
   d4638:	f002 fe62 	bl	d7300 <HAL_Timer_Get_Milli_Seconds>
				stateTime = millis();
   d463c:	6030      	str	r0, [r6, #0]
					state = SAMPLING_WAIT_STATE;
   d463e:	2303      	movs	r3, #3
   d4640:	e069      	b.n	d4716 <loop+0x16a>
        readData(framAddr, (uint8_t *)&t, sizeof(T));
   d4642:	4f7d      	ldr	r7, [pc, #500]	; (d4838 <loop+0x28c>)
   d4644:	4d7d      	ldr	r5, [pc, #500]	; (d483c <loop+0x290>)
   d4646:	487e      	ldr	r0, [pc, #504]	; (d4840 <loop+0x294>)
   d4648:	2301      	movs	r3, #1
   d464a:	463a      	mov	r2, r7
   d464c:	2109      	movs	r1, #9
   d464e:	f000 fd51 	bl	d50f4 <_ZN6MB85RC8readDataEjPhj>
   d4652:	2301      	movs	r3, #1
   d4654:	487a      	ldr	r0, [pc, #488]	; (d4840 <loop+0x294>)
   d4656:	462a      	mov	r2, r5
   d4658:	2111      	movs	r1, #17
   d465a:	f000 fd4b 	bl	d50f4 <_ZN6MB85RC8readDataEjPhj>
					if(rtcState){
   d465e:	783b      	ldrb	r3, [r7, #0]
   d4660:	b12b      	cbz	r3, d466e <loop+0xc2>
						logData("SLEEP RESULT", "Woke By RTC", true, true);
   d4662:	4973      	ldr	r1, [pc, #460]	; (d4830 <loop+0x284>)
   d4664:	a808      	add	r0, sp, #32
   d4666:	f005 fbaa 	bl	d9dbe <_ZN6StringC1EPKc>
   d466a:	4976      	ldr	r1, [pc, #472]	; (d4844 <loop+0x298>)
   d466c:	e7d5      	b.n	d461a <loop+0x6e>
					} else if(pirState){
   d466e:	782b      	ldrb	r3, [r5, #0]
   d4670:	2b00      	cmp	r3, #0
   d4672:	d0e1      	beq.n	d4638 <loop+0x8c>
						logData("SLEEP RESULT", "Woke By PIR", true, true);
   d4674:	496e      	ldr	r1, [pc, #440]	; (d4830 <loop+0x284>)
   d4676:	a808      	add	r0, sp, #32
   d4678:	f005 fba1 	bl	d9dbe <_ZN6StringC1EPKc>
   d467c:	4972      	ldr	r1, [pc, #456]	; (d4848 <loop+0x29c>)
   d467e:	e7cc      	b.n	d461a <loop+0x6e>
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
   d4680:	f003 f8c8 	bl	d7814 <spark_cloud_flag_connect>
   d4684:	f002 fe3c 	bl	d7300 <HAL_Timer_Get_Milli_Seconds>
				if(millis() - stateTime > MAX_TIME_TO_WAIT_FOR_CONNECT_MS){
   d4688:	6833      	ldr	r3, [r6, #0]
   d468a:	1ac0      	subs	r0, r0, r3
   d468c:	4b6f      	ldr	r3, [pc, #444]	; (d484c <loop+0x2a0>)
   d468e:	4298      	cmp	r0, r3
   d4690:	d942      	bls.n	d4718 <loop+0x16c>
					logData("PARTICLE", "PARTICLE FAILED TO CONNECT", true, false);
   d4692:	4964      	ldr	r1, [pc, #400]	; (d4824 <loop+0x278>)
   d4694:	a808      	add	r0, sp, #32
   d4696:	f005 fb92 	bl	d9dbe <_ZN6StringC1EPKc>
   d469a:	496d      	ldr	r1, [pc, #436]	; (d4850 <loop+0x2a4>)
   d469c:	a80c      	add	r0, sp, #48	; 0x30
   d469e:	f005 fb8e 	bl	d9dbe <_ZN6StringC1EPKc>
   d46a2:	462b      	mov	r3, r5
   d46a4:	2201      	movs	r2, #1
   d46a6:	a90c      	add	r1, sp, #48	; 0x30
   d46a8:	a808      	add	r0, sp, #32
   d46aa:	f7ff fe47 	bl	d433c <_Z7logData6StringS_bb>
   d46ae:	a80c      	add	r0, sp, #48	; 0x30
   d46b0:	f005 fb3a 	bl	d9d28 <_ZN6StringD1Ev>
   d46b4:	a808      	add	r0, sp, #32
   d46b6:	f005 fb37 	bl	d9d28 <_ZN6StringD1Ev>
   d46ba:	f002 fe21 	bl	d7300 <HAL_Timer_Get_Milli_Seconds>
					stateTime = millis();
   d46be:	6030      	str	r0, [r6, #0]
			state = SLEEP_WAIT_STATE;
   d46c0:	2307      	movs	r3, #7
   d46c2:	e028      	b.n	d4716 <loop+0x16a>
			if(millis() - stateTime >= MAX_TIME_TO_SAMPLE_WAIT){
   d46c4:	4d56      	ldr	r5, [pc, #344]	; (d4820 <loop+0x274>)
   d46c6:	f002 fe1b 	bl	d7300 <HAL_Timer_Get_Milli_Seconds>
   d46ca:	682b      	ldr	r3, [r5, #0]
   d46cc:	1ac0      	subs	r0, r0, r3
   d46ce:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   d46d2:	d321      	bcc.n	d4718 <loop+0x16c>
				logData("SAMPLING_WAIT_STATE", "START SAMPLING", true, false);
   d46d4:	495f      	ldr	r1, [pc, #380]	; (d4854 <loop+0x2a8>)
   d46d6:	a808      	add	r0, sp, #32
   d46d8:	f005 fb71 	bl	d9dbe <_ZN6StringC1EPKc>
   d46dc:	495e      	ldr	r1, [pc, #376]	; (d4858 <loop+0x2ac>)
   d46de:	a80c      	add	r0, sp, #48	; 0x30
   d46e0:	f005 fb6d 	bl	d9dbe <_ZN6StringC1EPKc>
   d46e4:	2300      	movs	r3, #0
   d46e6:	2201      	movs	r2, #1
   d46e8:	a90c      	add	r1, sp, #48	; 0x30
   d46ea:	a808      	add	r0, sp, #32
   d46ec:	f7ff fe26 	bl	d433c <_Z7logData6StringS_bb>
   d46f0:	a80c      	add	r0, sp, #48	; 0x30
   d46f2:	f005 fb19 	bl	d9d28 <_ZN6StringD1Ev>
   d46f6:	a808      	add	r0, sp, #32
   d46f8:	f005 fb16 	bl	d9d28 <_ZN6StringD1Ev>
				sampleCounter = 1;
   d46fc:	4b57      	ldr	r3, [pc, #348]	; (d485c <loop+0x2b0>)
   d46fe:	2201      	movs	r2, #1
   d4700:	601a      	str	r2, [r3, #0]
				sampleSum = 0;
   d4702:	4b57      	ldr	r3, [pc, #348]	; (d4860 <loop+0x2b4>)
   d4704:	2200      	movs	r2, #0
   d4706:	601a      	str	r2, [r3, #0]
				sampleAverage = 0;
   d4708:	4b56      	ldr	r3, [pc, #344]	; (d4864 <loop+0x2b8>)
   d470a:	2200      	movs	r2, #0
   d470c:	601a      	str	r2, [r3, #0]
   d470e:	f002 fdf7 	bl	d7300 <HAL_Timer_Get_Milli_Seconds>
				state = SAMPLE_STATE;
   d4712:	2304      	movs	r3, #4
				stateTime = millis();
   d4714:	6028      	str	r0, [r5, #0]
					state = SAMPLING_WAIT_STATE;
   d4716:	7023      	strb	r3, [r4, #0]
}
   d4718:	b012      	add	sp, #72	; 0x48
   d471a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			analogValue = analogRead(ANALOG_DETECTOR);
   d471e:	2010      	movs	r0, #16
   d4720:	f006 feb6 	bl	db490 <analogRead>
   d4724:	ee07 0a90 	vmov	s15, r0
   d4728:	4b4f      	ldr	r3, [pc, #316]	; (d4868 <loop+0x2bc>)
   d472a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
   d472e:	ed83 7a00 	vstr	s14, [r3]
			sampleSum = sampleSum + analogValue;
   d4732:	4b4b      	ldr	r3, [pc, #300]	; (d4860 <loop+0x2b4>)
   d4734:	edd3 7a00 	vldr	s15, [r3]
   d4738:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d473c:	ee77 7a87 	vadd.f32	s15, s15, s14
   d4740:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   d4744:	edc3 7a00 	vstr	s15, [r3]
			if(sampleCounter++ > sampleTotalCount){
   d4748:	4b44      	ldr	r3, [pc, #272]	; (d485c <loop+0x2b0>)
   d474a:	681a      	ldr	r2, [r3, #0]
   d474c:	1c51      	adds	r1, r2, #1
   d474e:	6019      	str	r1, [r3, #0]
   d4750:	4b46      	ldr	r3, [pc, #280]	; (d486c <loop+0x2c0>)
   d4752:	681b      	ldr	r3, [r3, #0]
   d4754:	429a      	cmp	r2, r3
			sampleSum = sampleSum + analogValue;
   d4756:	ee17 0a90 	vmov	r0, s15
			if(sampleCounter++ > sampleTotalCount){
   d475a:	dd0e      	ble.n	d477a <loop+0x1ce>
				sampleAverage = sampleSum / sampleTotalCount;
   d475c:	fb90 f0f3 	sdiv	r0, r0, r3
   d4760:	ee07 0a90 	vmov	s15, r0
   d4764:	4b3f      	ldr	r3, [pc, #252]	; (d4864 <loop+0x2b8>)
   d4766:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d476a:	edc3 7a00 	vstr	s15, [r3]
   d476e:	f002 fdc7 	bl	d7300 <HAL_Timer_Get_Milli_Seconds>
				stateTime = millis();
   d4772:	4b2b      	ldr	r3, [pc, #172]	; (d4820 <loop+0x274>)
   d4774:	6018      	str	r0, [r3, #0]
				state = PUBLISH_WAIT_STATE;
   d4776:	2305      	movs	r3, #5
   d4778:	7023      	strb	r3, [r4, #0]
			if(millis() - stateTime >= MAX_TIME_TO_WAIT_PUBLISH_MS){
   d477a:	4d29      	ldr	r5, [pc, #164]	; (d4820 <loop+0x274>)
   d477c:	f002 fdc0 	bl	d7300 <HAL_Timer_Get_Milli_Seconds>
   d4780:	682a      	ldr	r2, [r5, #0]
   d4782:	1a80      	subs	r0, r0, r2
   d4784:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   d4788:	d3c6      	bcc.n	d4718 <loop+0x16c>
				getTemperature() ? temperatureStringC = String(temperatureC, 2) : temperatureStringC = "0";
   d478a:	f7ff fd55 	bl	d4238 <_Z14getTemperaturev>
   d478e:	4e38      	ldr	r6, [pc, #224]	; (d4870 <loop+0x2c4>)
   d4790:	2800      	cmp	r0, #0
   d4792:	d03c      	beq.n	d480e <loop+0x262>
   d4794:	ed96 0a00 	vldr	s0, [r6]
   d4798:	2102      	movs	r1, #2
   d479a:	a80c      	add	r0, sp, #48	; 0x30
   d479c:	f005 fb7f 	bl	d9e9e <_ZN6StringC1Efi>
   d47a0:	4834      	ldr	r0, [pc, #208]	; (d4874 <loop+0x2c8>)
   d47a2:	a90c      	add	r1, sp, #48	; 0x30
   d47a4:	f005 fb61 	bl	d9e6a <_ZN6StringaSEOS_>
   d47a8:	a80c      	add	r0, sp, #48	; 0x30
   d47aa:	f005 fabd 	bl	d9d28 <_ZN6StringD1Ev>
					logData("POWER", "ENBABLE CHARGING", true, true);
   d47ae:	4932      	ldr	r1, [pc, #200]	; (d4878 <loop+0x2cc>)
   d47b0:	a808      	add	r0, sp, #32
					logData("POWER", "ENBABLE CHARGING", true, true);
   d47b2:	f005 fb04 	bl	d9dbe <_ZN6StringC1EPKc>
   d47b6:	4931      	ldr	r1, [pc, #196]	; (d487c <loop+0x2d0>)
   d47b8:	a80c      	add	r0, sp, #48	; 0x30
   d47ba:	f005 fb00 	bl	d9dbe <_ZN6StringC1EPKc>
   d47be:	2301      	movs	r3, #1
   d47c0:	461a      	mov	r2, r3
   d47c2:	a90c      	add	r1, sp, #48	; 0x30
   d47c4:	a808      	add	r0, sp, #32
   d47c6:	f7ff fdb9 	bl	d433c <_Z7logData6StringS_bb>
   d47ca:	a80c      	add	r0, sp, #48	; 0x30
   d47cc:	f005 faac 	bl	d9d28 <_ZN6StringD1Ev>
   d47d0:	a808      	add	r0, sp, #32
   d47d2:	f005 faa9 	bl	d9d28 <_ZN6StringD1Ev>
					pmic.enableCharging();
   d47d6:	482a      	ldr	r0, [pc, #168]	; (d4880 <loop+0x2d4>)
   d47d8:	f005 f98d 	bl	d9af6 <_ZN4PMIC14enableChargingEv>
				logData("PUBLISHING", "START PUBLISH_STATE", true, false);
   d47dc:	4929      	ldr	r1, [pc, #164]	; (d4884 <loop+0x2d8>)
   d47de:	a808      	add	r0, sp, #32
   d47e0:	f005 faed 	bl	d9dbe <_ZN6StringC1EPKc>
   d47e4:	4928      	ldr	r1, [pc, #160]	; (d4888 <loop+0x2dc>)
   d47e6:	a80c      	add	r0, sp, #48	; 0x30
   d47e8:	f005 fae9 	bl	d9dbe <_ZN6StringC1EPKc>
   d47ec:	2300      	movs	r3, #0
   d47ee:	2201      	movs	r2, #1
   d47f0:	a90c      	add	r1, sp, #48	; 0x30
   d47f2:	a808      	add	r0, sp, #32
   d47f4:	f7ff fda2 	bl	d433c <_Z7logData6StringS_bb>
   d47f8:	a80c      	add	r0, sp, #48	; 0x30
   d47fa:	f005 fa95 	bl	d9d28 <_ZN6StringD1Ev>
   d47fe:	a808      	add	r0, sp, #32
   d4800:	f005 fa92 	bl	d9d28 <_ZN6StringD1Ev>
   d4804:	f002 fd7c 	bl	d7300 <HAL_Timer_Get_Milli_Seconds>
				state = PUBLISH_STATE;
   d4808:	2306      	movs	r3, #6
				stateTime = millis();
   d480a:	6028      	str	r0, [r5, #0]
				state = PUBLISH_STATE;
   d480c:	e783      	b.n	d4716 <loop+0x16a>
				getTemperature() ? temperatureStringC = String(temperatureC, 2) : temperatureStringC = "0";
   d480e:	491f      	ldr	r1, [pc, #124]	; (d488c <loop+0x2e0>)
   d4810:	4818      	ldr	r0, [pc, #96]	; (d4874 <loop+0x2c8>)
   d4812:	f005 fb32 	bl	d9e7a <_ZN6StringaSEPKc>
   d4816:	e7ca      	b.n	d47ae <loop+0x202>
   d4818:	2003e104 	.word	0x2003e104
   d481c:	2003e3f4 	.word	0x2003e3f4
   d4820:	2003e420 	.word	0x2003e420
   d4824:	000de7e5 	.word	0x000de7e5
   d4828:	000de7ee 	.word	0x000de7ee
   d482c:	2003e458 	.word	0x2003e458
   d4830:	000de801 	.word	0x000de801
   d4834:	000de80e 	.word	0x000de80e
   d4838:	2003e410 	.word	0x2003e410
   d483c:	2003e3cc 	.word	0x2003e3cc
   d4840:	2003e390 	.word	0x2003e390
   d4844:	000de820 	.word	0x000de820
   d4848:	000de82c 	.word	0x000de82c
   d484c:	000493e0 	.word	0x000493e0
   d4850:	000de838 	.word	0x000de838
   d4854:	000de853 	.word	0x000de853
   d4858:	000de867 	.word	0x000de867
   d485c:	2003e418 	.word	0x2003e418
   d4860:	2003e41c 	.word	0x2003e41c
   d4864:	2003e414 	.word	0x2003e414
   d4868:	2003e320 	.word	0x2003e320
   d486c:	2003e100 	.word	0x2003e100
   d4870:	2003e424 	.word	0x2003e424
   d4874:	2003e42c 	.word	0x2003e42c
   d4878:	000de876 	.word	0x000de876
   d487c:	000de87c 	.word	0x000de87c
   d4880:	2003e3cd 	.word	0x2003e3cd
   d4884:	000de88d 	.word	0x000de88d
   d4888:	000de898 	.word	0x000de898
   d488c:	000deecc 	.word	0x000deecc
inline AbstractIntegerDiagnosticData::AbstractIntegerDiagnosticData(DiagnosticDataId id, const char* name) :
        AbstractTypeDiagnosticData<int32_t>(id, name, DIAG_TYPE_INT) {
}

inline int AbstractIntegerDiagnosticData::get(DiagnosticDataId id, IntType& val) {
    return AbstractTypeDiagnosticData<IntType>::get(id, val);
   d4890:	a90c      	add	r1, sp, #48	; 0x30
   d4892:	2018      	movs	r0, #24
   d4894:	f7ff fdba 	bl	d440c <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
			powerSource = System.powerSource();
   d4898:	4d9a      	ldr	r5, [pc, #616]	; (d4b04 <loop+0x558>)
			batteryState = System.batteryState();
   d489a:	4e9b      	ldr	r6, [pc, #620]	; (d4b08 <loop+0x55c>)
    }

    int powerSource() const {
        particle::AbstractIntegerDiagnosticData::IntType val;
        const auto r = particle::AbstractIntegerDiagnosticData::get(DIAG_ID_SYSTEM_POWER_SOURCE, val);
        if (r < 0) {
   d489c:	2800      	cmp	r0, #0
            return r;
        }
        return val;
   d489e:	bfa8      	it	ge
   d48a0:	980c      	ldrge	r0, [sp, #48]	; 0x30
			powerSource = System.powerSource();
   d48a2:	6028      	str	r0, [r5, #0]
   d48a4:	a90c      	add	r1, sp, #48	; 0x30
   d48a6:	2007      	movs	r0, #7
   d48a8:	f7ff fdb0 	bl	d440c <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
			powerSString = powerSources[std::max(0, powerSource)];
   d48ac:	682b      	ldr	r3, [r5, #0]
   d48ae:	4a97      	ldr	r2, [pc, #604]	; (d4b0c <loop+0x560>)
    }

    int batteryState() const {
        particle::AbstractIntegerDiagnosticData::IntType val;
        const auto r = particle::AbstractIntegerDiagnosticData::get(DIAG_ID_SYSTEM_BATTERY_STATE, val);
        if (r < 0) {
   d48b0:	2800      	cmp	r0, #0
   d48b2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
            return r;
        }
        return val;
   d48b6:	bfa8      	it	ge
   d48b8:	980c      	ldrge	r0, [sp, #48]	; 0x30
   d48ba:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
			batteryState = System.batteryState();
   d48be:	6030      	str	r0, [r6, #0]
			powerSString = powerSources[std::max(0, powerSource)];
   d48c0:	4893      	ldr	r0, [pc, #588]	; (d4b10 <loop+0x564>)
   d48c2:	f005 fada 	bl	d9e7a <_ZN6StringaSEPKc>
			powerBSString = batteryStates[std::max(0, batteryState)];
   d48c6:	6833      	ldr	r3, [r6, #0]
   d48c8:	4a92      	ldr	r2, [pc, #584]	; (d4b14 <loop+0x568>)
   d48ca:	4893      	ldr	r0, [pc, #588]	; (d4b18 <loop+0x56c>)
   d48cc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   d48d0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
   d48d4:	f005 fad1 	bl	d9e7a <_ZN6StringaSEPKc>
   d48d8:	a90c      	add	r1, sp, #48	; 0x30
   d48da:	2003      	movs	r0, #3
   d48dc:	f7ff fd96 	bl	d440c <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
        // XXX: we could potentially simply call FuelGauge::getNormalizedSoC(),
        // however in order to exactly match the vitals values sent to the cloud we are going to use
        // diagnostic source as well.
        particle::AbstractIntegerDiagnosticData::IntType val;
        int r = particle::AbstractIntegerDiagnosticData::get(DIAG_ID_SYSTEM_BATTERY_CHARGE, val);
        if (r) {
   d48e0:	2800      	cmp	r0, #0
   d48e2:	f040 80e1 	bne.w	d4aa8 <loop+0x4fc>
    StorageT value() const {
        return value_;
    }

    constexpr float toFloat() const {
        return static_cast<float>(value_) / constexpr_pow(2.0f, N);
   d48e6:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
   d48ea:	ee00 3a10 	vmov	s0, r3
   d48ee:	eebb 0acc 	vcvt.f32.u32	s0, s0, #8
			batterySocString = String(System.batteryCharge(), 2);
   d48f2:	2102      	movs	r1, #2
   d48f4:	a80c      	add	r0, sp, #48	; 0x30
   d48f6:	f005 fad2 	bl	d9e9e <_ZN6StringC1Efi>
   d48fa:	a90c      	add	r1, sp, #48	; 0x30
   d48fc:	4887      	ldr	r0, [pc, #540]	; (d4b1c <loop+0x570>)
   d48fe:	f005 fab4 	bl	d9e6a <_ZN6StringaSEOS_>
   d4902:	a80c      	add	r0, sp, #48	; 0x30
   d4904:	f005 fa10 	bl	d9d28 <_ZN6StringD1Ev>
			VCellString = String(fuel.getVCell(), 2);
   d4908:	4885      	ldr	r0, [pc, #532]	; (d4b20 <loop+0x574>)
   d490a:	f003 fc6f 	bl	d81ec <_ZN9FuelGauge8getVCellEv>
   d490e:	2102      	movs	r1, #2
   d4910:	a80c      	add	r0, sp, #48	; 0x30
   d4912:	f005 fac4 	bl	d9e9e <_ZN6StringC1Efi>
   d4916:	a90c      	add	r1, sp, #48	; 0x30
   d4918:	4882      	ldr	r0, [pc, #520]	; (d4b24 <loop+0x578>)
   d491a:	f005 faa6 	bl	d9e6a <_ZN6StringaSEOS_>
   d491e:	a80c      	add	r0, sp, #48	; 0x30
   d4920:	f005 fa02 	bl	d9d28 <_ZN6StringD1Ev>
			SoCString = String(fuel.getSoC(), 2);
   d4924:	487e      	ldr	r0, [pc, #504]	; (d4b20 <loop+0x574>)
   d4926:	f003 fc7d 	bl	d8224 <_ZN9FuelGauge6getSoCEv>
   d492a:	2102      	movs	r1, #2
   d492c:	a80c      	add	r0, sp, #48	; 0x30
   d492e:	f005 fab6 	bl	d9e9e <_ZN6StringC1Efi>
   d4932:	a90c      	add	r1, sp, #48	; 0x30
   d4934:	487c      	ldr	r0, [pc, #496]	; (d4b28 <loop+0x57c>)
   d4936:	f005 fa98 	bl	d9e6a <_ZN6StringaSEOS_>
   d493a:	a80c      	add	r0, sp, #48	; 0x30
   d493c:	f005 f9f4 	bl	d9d28 <_ZN6StringD1Ev>
			logData("Power sources",  powerSString, true, true);
   d4940:	497a      	ldr	r1, [pc, #488]	; (d4b2c <loop+0x580>)
   d4942:	a808      	add	r0, sp, #32
   d4944:	f005 fa3b 	bl	d9dbe <_ZN6StringC1EPKc>
   d4948:	4971      	ldr	r1, [pc, #452]	; (d4b10 <loop+0x564>)
   d494a:	a80c      	add	r0, sp, #48	; 0x30
   d494c:	f005 fa82 	bl	d9e54 <_ZN6StringC1ERKS_>
   d4950:	2301      	movs	r3, #1
   d4952:	461a      	mov	r2, r3
   d4954:	a90c      	add	r1, sp, #48	; 0x30
   d4956:	a808      	add	r0, sp, #32
   d4958:	f7ff fcf0 	bl	d433c <_Z7logData6StringS_bb>
   d495c:	a80c      	add	r0, sp, #48	; 0x30
   d495e:	f005 f9e3 	bl	d9d28 <_ZN6StringD1Ev>
   d4962:	a808      	add	r0, sp, #32
   d4964:	f005 f9e0 	bl	d9d28 <_ZN6StringD1Ev>
			logData("Battery state", powerBSString, true, true);
   d4968:	4971      	ldr	r1, [pc, #452]	; (d4b30 <loop+0x584>)
   d496a:	a808      	add	r0, sp, #32
   d496c:	f005 fa27 	bl	d9dbe <_ZN6StringC1EPKc>
   d4970:	4969      	ldr	r1, [pc, #420]	; (d4b18 <loop+0x56c>)
   d4972:	a80c      	add	r0, sp, #48	; 0x30
   d4974:	f005 fa6e 	bl	d9e54 <_ZN6StringC1ERKS_>
   d4978:	2301      	movs	r3, #1
   d497a:	461a      	mov	r2, r3
   d497c:	a90c      	add	r1, sp, #48	; 0x30
   d497e:	a808      	add	r0, sp, #32
   d4980:	f7ff fcdc 	bl	d433c <_Z7logData6StringS_bb>
   d4984:	a80c      	add	r0, sp, #48	; 0x30
   d4986:	f005 f9cf 	bl	d9d28 <_ZN6StringD1Ev>
   d498a:	a808      	add	r0, sp, #32
   d498c:	f005 f9cc 	bl	d9d28 <_ZN6StringD1Ev>
			logData("Battery charge", batterySocString, true, true);
   d4990:	4968      	ldr	r1, [pc, #416]	; (d4b34 <loop+0x588>)
   d4992:	a808      	add	r0, sp, #32
   d4994:	f005 fa13 	bl	d9dbe <_ZN6StringC1EPKc>
   d4998:	4960      	ldr	r1, [pc, #384]	; (d4b1c <loop+0x570>)
   d499a:	a80c      	add	r0, sp, #48	; 0x30
   d499c:	f005 fa5a 	bl	d9e54 <_ZN6StringC1ERKS_>
   d49a0:	2301      	movs	r3, #1
   d49a2:	461a      	mov	r2, r3
   d49a4:	a90c      	add	r1, sp, #48	; 0x30
   d49a6:	a808      	add	r0, sp, #32
   d49a8:	f7ff fcc8 	bl	d433c <_Z7logData6StringS_bb>
   d49ac:	a80c      	add	r0, sp, #48	; 0x30
   d49ae:	f005 f9bb 	bl	d9d28 <_ZN6StringD1Ev>
   d49b2:	a808      	add	r0, sp, #32
   d49b4:	f005 f9b8 	bl	d9d28 <_ZN6StringD1Ev>
			logData("Battery VCell", VCellString, true, true);
   d49b8:	495f      	ldr	r1, [pc, #380]	; (d4b38 <loop+0x58c>)
   d49ba:	a808      	add	r0, sp, #32
   d49bc:	f005 f9ff 	bl	d9dbe <_ZN6StringC1EPKc>
   d49c0:	4958      	ldr	r1, [pc, #352]	; (d4b24 <loop+0x578>)
   d49c2:	a80c      	add	r0, sp, #48	; 0x30
   d49c4:	f005 fa46 	bl	d9e54 <_ZN6StringC1ERKS_>
   d49c8:	2301      	movs	r3, #1
   d49ca:	461a      	mov	r2, r3
   d49cc:	a90c      	add	r1, sp, #48	; 0x30
   d49ce:	a808      	add	r0, sp, #32
   d49d0:	f7ff fcb4 	bl	d433c <_Z7logData6StringS_bb>
   d49d4:	a80c      	add	r0, sp, #48	; 0x30
   d49d6:	f005 f9a7 	bl	d9d28 <_ZN6StringD1Ev>
   d49da:	a808      	add	r0, sp, #32
   d49dc:	f005 f9a4 	bl	d9d28 <_ZN6StringD1Ev>
			logData("Battery SoC", SoCString, true, true);
   d49e0:	4956      	ldr	r1, [pc, #344]	; (d4b3c <loop+0x590>)
   d49e2:	a808      	add	r0, sp, #32
   d49e4:	f005 f9eb 	bl	d9dbe <_ZN6StringC1EPKc>
   d49e8:	494f      	ldr	r1, [pc, #316]	; (d4b28 <loop+0x57c>)
   d49ea:	a80c      	add	r0, sp, #48	; 0x30
   d49ec:	f005 fa32 	bl	d9e54 <_ZN6StringC1ERKS_>
   d49f0:	2301      	movs	r3, #1
   d49f2:	461a      	mov	r2, r3
   d49f4:	a90c      	add	r1, sp, #48	; 0x30
   d49f6:	a808      	add	r0, sp, #32
   d49f8:	f7ff fca0 	bl	d433c <_Z7logData6StringS_bb>
   d49fc:	a80c      	add	r0, sp, #48	; 0x30
   d49fe:	f005 f993 	bl	d9d28 <_ZN6StringD1Ev>
   d4a02:	a808      	add	r0, sp, #32
   d4a04:	f005 f990 	bl	d9d28 <_ZN6StringD1Ev>
			ubidots.add("Capacitance", analogValue);
   d4a08:	4b4d      	ldr	r3, [pc, #308]	; (d4b40 <loop+0x594>)
   d4a0a:	494e      	ldr	r1, [pc, #312]	; (d4b44 <loop+0x598>)
   d4a0c:	ed93 0a00 	vldr	s0, [r3]
   d4a10:	484d      	ldr	r0, [pc, #308]	; (d4b48 <loop+0x59c>)
   d4a12:	f002 fc38 	bl	d7286 <_ZN7Ubidots3addEPcf>
			ubidots.add("Internal Temperature", temperatureC);
   d4a16:	4b4d      	ldr	r3, [pc, #308]	; (d4b4c <loop+0x5a0>)
   d4a18:	494d      	ldr	r1, [pc, #308]	; (d4b50 <loop+0x5a4>)
   d4a1a:	ed93 0a00 	vldr	s0, [r3]
   d4a1e:	484a      	ldr	r0, [pc, #296]	; (d4b48 <loop+0x59c>)
   d4a20:	f002 fc31 	bl	d7286 <_ZN7Ubidots3addEPcf>
			ubidots.add("Battery", fuel.getVCell());
   d4a24:	483e      	ldr	r0, [pc, #248]	; (d4b20 <loop+0x574>)
   d4a26:	f003 fbe1 	bl	d81ec <_ZN9FuelGauge8getVCellEv>
   d4a2a:	494a      	ldr	r1, [pc, #296]	; (d4b54 <loop+0x5a8>)
   d4a2c:	4846      	ldr	r0, [pc, #280]	; (d4b48 <loop+0x59c>)
   d4a2e:	f002 fc2a 	bl	d7286 <_ZN7Ubidots3addEPcf>
			bufferSent = ubidots.send(WEBHOOK_NAME, PUBLIC); // Will use particle webhooks to send data
   d4a32:	4b49      	ldr	r3, [pc, #292]	; (d4b58 <loop+0x5ac>)
   d4a34:	4844      	ldr	r0, [pc, #272]	; (d4b48 <loop+0x59c>)
   d4a36:	781a      	ldrb	r2, [r3, #0]
   d4a38:	4b48      	ldr	r3, [pc, #288]	; (d4b5c <loop+0x5b0>)
   d4a3a:	6819      	ldr	r1, [r3, #0]
   d4a3c:	f002 fc2c 	bl	d7298 <_ZN7Ubidots4sendEPKcN8particle5FlagsI15PublishFlagTypehEE>
   d4a40:	4b47      	ldr	r3, [pc, #284]	; (d4b60 <loop+0x5b4>)
   d4a42:	7018      	strb	r0, [r3, #0]
			if(!bufferSent){
   d4a44:	b998      	cbnz	r0, d4a6e <loop+0x4c2>
				logData("Buffer Sent", "NO", true, true);
   d4a46:	4947      	ldr	r1, [pc, #284]	; (d4b64 <loop+0x5b8>)
   d4a48:	a808      	add	r0, sp, #32
   d4a4a:	f005 f9b8 	bl	d9dbe <_ZN6StringC1EPKc>
   d4a4e:	4946      	ldr	r1, [pc, #280]	; (d4b68 <loop+0x5bc>)
   d4a50:	a80c      	add	r0, sp, #48	; 0x30
   d4a52:	f005 f9b4 	bl	d9dbe <_ZN6StringC1EPKc>
   d4a56:	2301      	movs	r3, #1
   d4a58:	461a      	mov	r2, r3
   d4a5a:	a90c      	add	r1, sp, #48	; 0x30
   d4a5c:	a808      	add	r0, sp, #32
   d4a5e:	f7ff fc6d 	bl	d433c <_Z7logData6StringS_bb>
   d4a62:	a80c      	add	r0, sp, #48	; 0x30
   d4a64:	f005 f960 	bl	d9d28 <_ZN6StringD1Ev>
   d4a68:	a808      	add	r0, sp, #32
   d4a6a:	f005 f95d 	bl	d9d28 <_ZN6StringD1Ev>
			logData("PUBLISH_STATE", "START SLEEP_WAIT_STATE", true, false);
   d4a6e:	493f      	ldr	r1, [pc, #252]	; (d4b6c <loop+0x5c0>)
   d4a70:	a808      	add	r0, sp, #32
   d4a72:	f005 f9a4 	bl	d9dbe <_ZN6StringC1EPKc>
   d4a76:	493e      	ldr	r1, [pc, #248]	; (d4b70 <loop+0x5c4>)
   d4a78:	a80c      	add	r0, sp, #48	; 0x30
   d4a7a:	f005 f9a0 	bl	d9dbe <_ZN6StringC1EPKc>
   d4a7e:	2300      	movs	r3, #0
   d4a80:	2201      	movs	r2, #1
   d4a82:	a90c      	add	r1, sp, #48	; 0x30
   d4a84:	a808      	add	r0, sp, #32
   d4a86:	f7ff fc59 	bl	d433c <_Z7logData6StringS_bb>
   d4a8a:	a80c      	add	r0, sp, #48	; 0x30
   d4a8c:	f005 f94c 	bl	d9d28 <_ZN6StringD1Ev>
   d4a90:	a808      	add	r0, sp, #32
   d4a92:	f005 f949 	bl	d9d28 <_ZN6StringD1Ev>
			digitalWrite(BUILT_IN_LED, LOW);
   d4a96:	2100      	movs	r1, #0
   d4a98:	2007      	movs	r0, #7
   d4a9a:	f006 fce0 	bl	db45e <digitalWrite>
   d4a9e:	f002 fc2f 	bl	d7300 <HAL_Timer_Get_Milli_Seconds>
			stateTime = millis();
   d4aa2:	4b34      	ldr	r3, [pc, #208]	; (d4b74 <loop+0x5c8>)
   d4aa4:	6018      	str	r0, [r3, #0]
   d4aa6:	e60b      	b.n	d46c0 <loop+0x114>
            return -1.0f;
   d4aa8:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
   d4aac:	e721      	b.n	d48f2 <loop+0x346>
			if(millis() - stateTime >= MAX_TIME_TO_WAIT_BEFORE_SLEEP_MS){
   d4aae:	4d31      	ldr	r5, [pc, #196]	; (d4b74 <loop+0x5c8>)
   d4ab0:	f002 fc26 	bl	d7300 <HAL_Timer_Get_Milli_Seconds>
   d4ab4:	682a      	ldr	r2, [r5, #0]
   d4ab6:	1a80      	subs	r0, r0, r2
   d4ab8:	f64e 225f 	movw	r2, #59999	; 0xea5f
   d4abc:	4290      	cmp	r0, r2
   d4abe:	f67f ae2b 	bls.w	d4718 <loop+0x16c>
				if(debug){
   d4ac2:	4b2d      	ldr	r3, [pc, #180]	; (d4b78 <loop+0x5cc>)
					logData("SLEEP", "DEBUG NO SLEEP", true, true);
   d4ac4:	492d      	ldr	r1, [pc, #180]	; (d4b7c <loop+0x5d0>)
				if(debug){
   d4ac6:	781b      	ldrb	r3, [r3, #0]
					logData("SLEEP", "DEBUG NO SLEEP", true, true);
   d4ac8:	a808      	add	r0, sp, #32
				if(debug){
   d4aca:	b1b3      	cbz	r3, d4afa <loop+0x54e>
					logData("SLEEP", "DEBUG NO SLEEP", true, true);
   d4acc:	f005 f977 	bl	d9dbe <_ZN6StringC1EPKc>
   d4ad0:	492b      	ldr	r1, [pc, #172]	; (d4b80 <loop+0x5d4>)
					logData("SLEEP", "GOING TO SLEEP", true, true);
   d4ad2:	a80c      	add	r0, sp, #48	; 0x30
   d4ad4:	f005 f973 	bl	d9dbe <_ZN6StringC1EPKc>
   d4ad8:	2301      	movs	r3, #1
   d4ada:	461a      	mov	r2, r3
   d4adc:	a90c      	add	r1, sp, #48	; 0x30
   d4ade:	a808      	add	r0, sp, #32
   d4ae0:	f7ff fc2c 	bl	d433c <_Z7logData6StringS_bb>
   d4ae4:	a80c      	add	r0, sp, #48	; 0x30
   d4ae6:	f005 f91f 	bl	d9d28 <_ZN6StringD1Ev>
   d4aea:	a808      	add	r0, sp, #32
   d4aec:	f005 f91c 	bl	d9d28 <_ZN6StringD1Ev>
   d4af0:	f002 fc06 	bl	d7300 <HAL_Timer_Get_Milli_Seconds>
				state = SLEEP_STATE;
   d4af4:	2308      	movs	r3, #8
				stateTime = millis();
   d4af6:	6028      	str	r0, [r5, #0]
				state = SLEEP_STATE;
   d4af8:	e60d      	b.n	d4716 <loop+0x16a>
					logData("SLEEP", "GOING TO SLEEP", true, true);
   d4afa:	f005 f960 	bl	d9dbe <_ZN6StringC1EPKc>
   d4afe:	4921      	ldr	r1, [pc, #132]	; (d4b84 <loop+0x5d8>)
   d4b00:	e7e7      	b.n	d4ad2 <loop+0x526>
   d4b02:	bf00      	nop
   d4b04:	2003e3f0 	.word	0x2003e3f0
   d4b08:	2003e344 	.word	0x2003e344
   d4b0c:	000deab4 	.word	0x000deab4
   d4b10:	2003e3e0 	.word	0x2003e3e0
   d4b14:	000deacc 	.word	0x000deacc
   d4b18:	2003e3d0 	.word	0x2003e3d0
   d4b1c:	2003e334 	.word	0x2003e334
   d4b20:	2003e3a0 	.word	0x2003e3a0
   d4b24:	2003e308 	.word	0x2003e308
   d4b28:	2003e2f8 	.word	0x2003e2f8
   d4b2c:	000de8ac 	.word	0x000de8ac
   d4b30:	000de8ba 	.word	0x000de8ba
   d4b34:	000de8c8 	.word	0x000de8c8
   d4b38:	000de8d7 	.word	0x000de8d7
   d4b3c:	000de8e5 	.word	0x000de8e5
   d4b40:	2003e320 	.word	0x2003e320
   d4b44:	000de8f1 	.word	0x000de8f1
   d4b48:	2003e44c 	.word	0x2003e44c
   d4b4c:	2003e424 	.word	0x2003e424
   d4b50:	000de8fd 	.word	0x000de8fd
   d4b54:	000de912 	.word	0x000de912
   d4b58:	2003e318 	.word	0x2003e318
   d4b5c:	2003e0fc 	.word	0x2003e0fc
   d4b60:	2003e348 	.word	0x2003e348
   d4b64:	000de91a 	.word	0x000de91a
   d4b68:	000de926 	.word	0x000de926
   d4b6c:	000de89e 	.word	0x000de89e
   d4b70:	000de929 	.word	0x000de929
   d4b74:	2003e420 	.word	0x2003e420
   d4b78:	2003e36c 	.word	0x2003e36c
   d4b7c:	000de949 	.word	0x000de949
   d4b80:	000de940 	.word	0x000de940
   d4b84:	000de94f 	.word	0x000de94f
			if(!debug){
   d4b88:	4b8b      	ldr	r3, [pc, #556]	; (d4db8 <loop+0x80c>)
   d4b8a:	781d      	ldrb	r5, [r3, #0]
   d4b8c:	2d00      	cmp	r5, #0
   d4b8e:	f040 8101 	bne.w	d4d94 <loop+0x7e8>
				logData("SLEEP", "SLEEP STOP SLEEP", true, false);
   d4b92:	498a      	ldr	r1, [pc, #552]	; (d4dbc <loop+0x810>)
				pirState = 0;
   d4b94:	f8df 824c 	ldr.w	r8, [pc, #588]	; d4de4 <loop+0x838>
				rtcState = 0;
   d4b98:	4f89      	ldr	r7, [pc, #548]	; (d4dc0 <loop+0x814>)
				logData("SLEEP", "SLEEP STOP SLEEP", true, false);
   d4b9a:	a808      	add	r0, sp, #32
   d4b9c:	f005 f90f 	bl	d9dbe <_ZN6StringC1EPKc>
   d4ba0:	4988      	ldr	r1, [pc, #544]	; (d4dc4 <loop+0x818>)
   d4ba2:	a80c      	add	r0, sp, #48	; 0x30
   d4ba4:	f005 f90b 	bl	d9dbe <_ZN6StringC1EPKc>
   d4ba8:	462b      	mov	r3, r5
   d4baa:	2201      	movs	r2, #1
   d4bac:	a90c      	add	r1, sp, #48	; 0x30
   d4bae:	a808      	add	r0, sp, #32
   d4bb0:	f7ff fbc4 	bl	d433c <_Z7logData6StringS_bb>
   d4bb4:	a80c      	add	r0, sp, #48	; 0x30
   d4bb6:	f005 f8b7 	bl	d9d28 <_ZN6StringD1Ev>
   d4bba:	a808      	add	r0, sp, #32
   d4bbc:	f005 f8b4 	bl	d9d28 <_ZN6StringD1Ev>
				fram.put(FRAM::pirAddr, pirState);
   d4bc0:	4642      	mov	r2, r8
   d4bc2:	2111      	movs	r1, #17
   d4bc4:	4880      	ldr	r0, [pc, #512]	; (d4dc8 <loop+0x81c>)
				pirState = 0;
   d4bc6:	f888 5000 	strb.w	r5, [r8]
				fram.put(FRAM::pirAddr, pirState);
   d4bca:	f7ff fc56 	bl	d447a <_ZN6MB85RC3putIhEERKT_jS3_>
				fram.put(FRAM::rtcAddr, rtcState);
   d4bce:	463a      	mov	r2, r7
   d4bd0:	2109      	movs	r1, #9
   d4bd2:	487d      	ldr	r0, [pc, #500]	; (d4dc8 <loop+0x81c>)
				rtcState = 0;
   d4bd4:	703d      	strb	r5, [r7, #0]
				fram.put(FRAM::rtcAddr, rtcState);
   d4bd6:	f7ff fc50 	bl	d447a <_ZN6MB85RC3putIhEERKT_jS3_>
				watchdogState = 0;
   d4bda:	4a7c      	ldr	r2, [pc, #496]	; (d4dcc <loop+0x820>)
				fram.put(FRAM::watchdogAddr, watchdogState);
   d4bdc:	487a      	ldr	r0, [pc, #488]	; (d4dc8 <loop+0x81c>)
				watchdogState = 0;
   d4bde:	7015      	strb	r5, [r2, #0]
				fram.put(FRAM::watchdogAddr, watchdogState);
   d4be0:	2110      	movs	r1, #16
   d4be2:	f7ff fc4a 	bl	d447a <_ZN6MB85RC3putIhEERKT_jS3_>
        : config_(config) {
   d4be6:	ab0d      	add	r3, sp, #52	; 0x34
              valid_(true) {
   d4be8:	2201      	movs	r2, #1
        : config_(config) {
   d4bea:	930c      	str	r3, [sp, #48]	; 0x30
					.gpio(PIRPin, RISING)
   d4bec:	2113      	movs	r1, #19
        config_.size = sizeof(hal_sleep_config_t);
   d4bee:	4b78      	ldr	r3, [pc, #480]	; (d4dd0 <loop+0x824>)
   d4bf0:	930d      	str	r3, [sp, #52]	; 0x34
   d4bf2:	a80c      	add	r0, sp, #48	; 0x30
        config_.wakeup_sources = nullptr;
   d4bf4:	e9cd 550f 	strd	r5, r5, [sp, #60]	; 0x3c
              valid_(true) {
   d4bf8:	f8ad 5039 	strh.w	r5, [sp, #57]	; 0x39
   d4bfc:	f88d 503b 	strb.w	r5, [sp, #59]	; 0x3b
   d4c00:	f88d 2044 	strb.w	r2, [sp, #68]	; 0x44
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
   d4c04:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
   d4c08:	f7ff faaa 	bl	d4160 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode>

    SystemSleepConfiguration& duration(system_tick_t ms) {
        if (valid_) {
   d4c0c:	7d03      	ldrb	r3, [r0, #20]
   d4c0e:	4606      	mov	r6, r0
   d4c10:	b1eb      	cbz	r3, d4c4e <loop+0x6a2>
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   d4c12:	6803      	ldr	r3, [r0, #0]
   d4c14:	68db      	ldr	r3, [r3, #12]
        if (!start) {
   d4c16:	b12b      	cbz	r3, d4c24 <loop+0x678>
            if (start->type == type) {
   d4c18:	889a      	ldrh	r2, [r3, #4]
   d4c1a:	2a04      	cmp	r2, #4
   d4c1c:	f000 80c9 	beq.w	d4db2 <loop+0x806>
            start = start->next;
   d4c20:	689b      	ldr	r3, [r3, #8]
        while (start) {
   d4c22:	e7f8      	b.n	d4c16 <loop+0x66a>
            if (wakeup) {
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
                return *this;
            }
            // Otherwise, configure RTC as wakeup source.
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
   d4c24:	496b      	ldr	r1, [pc, #428]	; (d4dd4 <loop+0x828>)
   d4c26:	2010      	movs	r0, #16
   d4c28:	f006 fcc6 	bl	db5b8 <_ZnwjRKSt9nothrow_t>
   d4c2c:	4605      	mov	r5, r0
   d4c2e:	2800      	cmp	r0, #0
   d4c30:	f000 80bd 	beq.w	d4dae <loop+0x802>
   d4c34:	2210      	movs	r2, #16
   d4c36:	2100      	movs	r1, #0
   d4c38:	f007 fd88 	bl	dc74c <memset>
            if (!wakeupSource) {
                valid_ = false;
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_rtc_t);
   d4c3c:	4b64      	ldr	r3, [pc, #400]	; (d4dd0 <loop+0x824>)
   d4c3e:	602b      	str	r3, [r5, #0]
            wakeupSource->base.version = HAL_SLEEP_VERSION;
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_RTC;
   d4c40:	2304      	movs	r3, #4
   d4c42:	80ab      	strh	r3, [r5, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   d4c44:	6933      	ldr	r3, [r6, #16]
   d4c46:	60ab      	str	r3, [r5, #8]
            wakeupSource->ms = ms;
   d4c48:	4b63      	ldr	r3, [pc, #396]	; (d4dd8 <loop+0x82c>)
   d4c4a:	60eb      	str	r3, [r5, #12]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   d4c4c:	6135      	str	r5, [r6, #16]
				SystemSleepResult result = System.sleep(config);
   d4c4e:	a90c      	add	r1, sp, #48	; 0x30
   d4c50:	a801      	add	r0, sp, #4
   d4c52:	f005 f9ab 	bl	d9fac <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>
				digitalWrite(PIRPin, LOW);												// Pet the watchdog
   d4c56:	2100      	movs	r1, #0
   d4c58:	2013      	movs	r0, #19
   d4c5a:	f006 fc00 	bl	db45e <digitalWrite>
				if(result.wakeupReason() == SystemSleepWakeupReason::BY_GPIO){
   d4c5e:	9b01      	ldr	r3, [sp, #4]
        if (wakeupSource_) {
   d4c60:	b323      	cbz	r3, d4cac <loop+0x700>
   d4c62:	889d      	ldrh	r5, [r3, #4]
   d4c64:	2d01      	cmp	r5, #1
   d4c66:	d121      	bne.n	d4cac <loop+0x700>
					if(whichPin == A0){
   d4c68:	899b      	ldrh	r3, [r3, #12]
						logData("SLEEP RESULT", "Woke By BY_GPIO PIR", true, false);
   d4c6a:	495c      	ldr	r1, [pc, #368]	; (d4ddc <loop+0x830>)
					if(whichPin == A0){
   d4c6c:	2b13      	cmp	r3, #19
						logData("SLEEP RESULT", "Woke By BY_GPIO PIR", true, false);
   d4c6e:	a804      	add	r0, sp, #16
					if(whichPin == A0){
   d4c70:	d17a      	bne.n	d4d68 <loop+0x7bc>
						logData("SLEEP RESULT", "Woke By BY_GPIO PIR", true, false);
   d4c72:	f005 f8a4 	bl	d9dbe <_ZN6StringC1EPKc>
   d4c76:	495a      	ldr	r1, [pc, #360]	; (d4de0 <loop+0x834>)
   d4c78:	a808      	add	r0, sp, #32
   d4c7a:	f005 f8a0 	bl	d9dbe <_ZN6StringC1EPKc>
   d4c7e:	462a      	mov	r2, r5
   d4c80:	2300      	movs	r3, #0
   d4c82:	a908      	add	r1, sp, #32
   d4c84:	a804      	add	r0, sp, #16
   d4c86:	f7ff fb59 	bl	d433c <_Z7logData6StringS_bb>
   d4c8a:	a808      	add	r0, sp, #32
   d4c8c:	f005 f84c 	bl	d9d28 <_ZN6StringD1Ev>
   d4c90:	a804      	add	r0, sp, #16
   d4c92:	f005 f849 	bl	d9d28 <_ZN6StringD1Ev>
						digitalWrite(BUILT_IN_LED, HIGH);
   d4c96:	4629      	mov	r1, r5
   d4c98:	2007      	movs	r0, #7
   d4c9a:	f006 fbe0 	bl	db45e <digitalWrite>
						fram.put(FRAM::pirAddr, pirState);
   d4c9e:	4a51      	ldr	r2, [pc, #324]	; (d4de4 <loop+0x838>)
						pirState = 1;
   d4ca0:	f888 5000 	strb.w	r5, [r8]
						fram.put(FRAM::pirAddr, pirState);
   d4ca4:	2111      	movs	r1, #17
						fram.put(FRAM::rtcAddr, rtcState);
   d4ca6:	4848      	ldr	r0, [pc, #288]	; (d4dc8 <loop+0x81c>)
   d4ca8:	f7ff fbe7 	bl	d447a <_ZN6MB85RC3putIhEERKT_jS3_>
				if(result.wakeupReason() == SystemSleepWakeupReason::BY_RTC){
   d4cac:	9b01      	ldr	r3, [sp, #4]
   d4cae:	b1b3      	cbz	r3, d4cde <loop+0x732>
   d4cb0:	889b      	ldrh	r3, [r3, #4]
   d4cb2:	2b04      	cmp	r3, #4
   d4cb4:	d113      	bne.n	d4cde <loop+0x732>
					logData("SLEEP RESULT", "SLEEP RESULT - Woke BY_RTC", true, false);
   d4cb6:	4949      	ldr	r1, [pc, #292]	; (d4ddc <loop+0x830>)
   d4cb8:	a804      	add	r0, sp, #16
   d4cba:	f005 f880 	bl	d9dbe <_ZN6StringC1EPKc>
   d4cbe:	494a      	ldr	r1, [pc, #296]	; (d4de8 <loop+0x83c>)
   d4cc0:	a808      	add	r0, sp, #32
   d4cc2:	f005 f87c 	bl	d9dbe <_ZN6StringC1EPKc>
   d4cc6:	2300      	movs	r3, #0
   d4cc8:	2201      	movs	r2, #1
   d4cca:	a908      	add	r1, sp, #32
   d4ccc:	a804      	add	r0, sp, #16
   d4cce:	f7ff fb35 	bl	d433c <_Z7logData6StringS_bb>
   d4cd2:	a808      	add	r0, sp, #32
   d4cd4:	f005 f828 	bl	d9d28 <_ZN6StringD1Ev>
   d4cd8:	a804      	add	r0, sp, #16
   d4cda:	f005 f825 	bl	d9d28 <_ZN6StringD1Ev>
				if(result.wakeupReason() == SystemSleepWakeupReason::BY_NETWORK){
   d4cde:	9b01      	ldr	r3, [sp, #4]
   d4ce0:	b1b3      	cbz	r3, d4d10 <loop+0x764>
   d4ce2:	889b      	ldrh	r3, [r3, #4]
   d4ce4:	2b0e      	cmp	r3, #14
   d4ce6:	d113      	bne.n	d4d10 <loop+0x764>
					logData("SLEEP RESULT", "SLEEP RESULT - Woke BY_NETWORK", true, false);
   d4ce8:	493c      	ldr	r1, [pc, #240]	; (d4ddc <loop+0x830>)
   d4cea:	a804      	add	r0, sp, #16
   d4cec:	f005 f867 	bl	d9dbe <_ZN6StringC1EPKc>
   d4cf0:	493e      	ldr	r1, [pc, #248]	; (d4dec <loop+0x840>)
   d4cf2:	a808      	add	r0, sp, #32
   d4cf4:	f005 f863 	bl	d9dbe <_ZN6StringC1EPKc>
   d4cf8:	2300      	movs	r3, #0
   d4cfa:	2201      	movs	r2, #1
   d4cfc:	a908      	add	r1, sp, #32
   d4cfe:	a804      	add	r0, sp, #16
   d4d00:	f7ff fb1c 	bl	d433c <_Z7logData6StringS_bb>
   d4d04:	a808      	add	r0, sp, #32
   d4d06:	f005 f80f 	bl	d9d28 <_ZN6StringD1Ev>
   d4d0a:	a804      	add	r0, sp, #16
   d4d0c:	f005 f80c 	bl	d9d28 <_ZN6StringD1Ev>
				if(result.wakeupReason() == SystemSleepWakeupReason::UNKNOWN) {
   d4d10:	9b01      	ldr	r3, [sp, #4]
   d4d12:	b10b      	cbz	r3, d4d18 <loop+0x76c>
   d4d14:	889b      	ldrh	r3, [r3, #4]
   d4d16:	b99b      	cbnz	r3, d4d40 <loop+0x794>
					logData("SLEEP RESULT", "SLEEP RESULT - Woke By UNKNOWN", true, false);
   d4d18:	4930      	ldr	r1, [pc, #192]	; (d4ddc <loop+0x830>)
   d4d1a:	a804      	add	r0, sp, #16
   d4d1c:	f005 f84f 	bl	d9dbe <_ZN6StringC1EPKc>
   d4d20:	4933      	ldr	r1, [pc, #204]	; (d4df0 <loop+0x844>)
   d4d22:	a808      	add	r0, sp, #32
   d4d24:	f005 f84b 	bl	d9dbe <_ZN6StringC1EPKc>
   d4d28:	2300      	movs	r3, #0
   d4d2a:	2201      	movs	r2, #1
   d4d2c:	a908      	add	r1, sp, #32
   d4d2e:	a804      	add	r0, sp, #16
   d4d30:	f7ff fb04 	bl	d433c <_Z7logData6StringS_bb>
   d4d34:	a808      	add	r0, sp, #32
   d4d36:	f004 fff7 	bl	d9d28 <_ZN6StringD1Ev>
   d4d3a:	a804      	add	r0, sp, #16
   d4d3c:	f004 fff4 	bl	d9d28 <_ZN6StringD1Ev>
   d4d40:	f002 fade 	bl	d7300 <HAL_Timer_Get_Milli_Seconds>
				stateTime = millis();
   d4d44:	4b2b      	ldr	r3, [pc, #172]	; (d4df4 <loop+0x848>)
   d4d46:	6018      	str	r0, [r3, #0]
        if (wakeupSource_) {
   d4d48:	9801      	ldr	r0, [sp, #4]
				state = PARTICLE_CONNECT_WAIT_STATE;
   d4d4a:	2302      	movs	r3, #2
   d4d4c:	7023      	strb	r3, [r4, #0]
   d4d4e:	b108      	cbz	r0, d4d54 <loop+0x7a8>
            free(wakeupSource_);
   d4d50:	f002 fe00 	bl	d7954 <free>
        auto wakeupSource = config_.wakeup_sources;
   d4d54:	9810      	ldr	r0, [sp, #64]	; 0x40
        while (wakeupSource) {
   d4d56:	2800      	cmp	r0, #0
   d4d58:	f43f acde 	beq.w	d4718 <loop+0x16c>
            auto next = wakeupSource->next;
   d4d5c:	6884      	ldr	r4, [r0, #8]
            delete wakeupSource;
   d4d5e:	210c      	movs	r1, #12
   d4d60:	f006 fc28 	bl	db5b4 <_ZdlPvj>
            wakeupSource = next;
   d4d64:	4620      	mov	r0, r4
        while (wakeupSource) {
   d4d66:	e7f6      	b.n	d4d56 <loop+0x7aa>
						logData("SLEEP RESULT", "Woke By BY_GPIO RTC", true, false);
   d4d68:	f005 f829 	bl	d9dbe <_ZN6StringC1EPKc>
   d4d6c:	4922      	ldr	r1, [pc, #136]	; (d4df8 <loop+0x84c>)
   d4d6e:	a808      	add	r0, sp, #32
   d4d70:	f005 f825 	bl	d9dbe <_ZN6StringC1EPKc>
   d4d74:	462a      	mov	r2, r5
   d4d76:	a908      	add	r1, sp, #32
   d4d78:	2300      	movs	r3, #0
   d4d7a:	a804      	add	r0, sp, #16
   d4d7c:	f7ff fade 	bl	d433c <_Z7logData6StringS_bb>
   d4d80:	a808      	add	r0, sp, #32
   d4d82:	f004 ffd1 	bl	d9d28 <_ZN6StringD1Ev>
   d4d86:	a804      	add	r0, sp, #16
   d4d88:	f004 ffce 	bl	d9d28 <_ZN6StringD1Ev>
						fram.put(FRAM::rtcAddr, rtcState);
   d4d8c:	4a0c      	ldr	r2, [pc, #48]	; (d4dc0 <loop+0x814>)
						rtcState = 1;
   d4d8e:	703d      	strb	r5, [r7, #0]
						fram.put(FRAM::rtcAddr, rtcState);
   d4d90:	2109      	movs	r1, #9
   d4d92:	e788      	b.n	d4ca6 <loop+0x6fa>
				if(millis() - stateTime >= MAX_TIME_TO_SLEEP_MS){
   d4d94:	4d17      	ldr	r5, [pc, #92]	; (d4df4 <loop+0x848>)
   d4d96:	f002 fab3 	bl	d7300 <HAL_Timer_Get_Milli_Seconds>
   d4d9a:	682b      	ldr	r3, [r5, #0]
   d4d9c:	1ac0      	subs	r0, r0, r3
   d4d9e:	4b0e      	ldr	r3, [pc, #56]	; (d4dd8 <loop+0x82c>)
   d4da0:	4298      	cmp	r0, r3
   d4da2:	f4ff acb9 	bcc.w	d4718 <loop+0x16c>
   d4da6:	f002 faab 	bl	d7300 <HAL_Timer_Get_Milli_Seconds>
					stateTime = millis();
   d4daa:	6028      	str	r0, [r5, #0]
   d4dac:	e447      	b.n	d463e <loop+0x92>
                valid_ = false;
   d4dae:	7530      	strb	r0, [r6, #20]
                return *this;
   d4db0:	e74d      	b.n	d4c4e <loop+0x6a2>
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
   d4db2:	4a09      	ldr	r2, [pc, #36]	; (d4dd8 <loop+0x82c>)
   d4db4:	60da      	str	r2, [r3, #12]
                return *this;
   d4db6:	e74a      	b.n	d4c4e <loop+0x6a2>
   d4db8:	2003e36c 	.word	0x2003e36c
   d4dbc:	000de949 	.word	0x000de949
   d4dc0:	2003e410 	.word	0x2003e410
   d4dc4:	000de95e 	.word	0x000de95e
   d4dc8:	2003e390 	.word	0x2003e390
   d4dcc:	2003e458 	.word	0x2003e458
   d4dd0:	00030010 	.word	0x00030010
   d4dd4:	000df45c 	.word	0x000df45c
   d4dd8:	001b7740 	.word	0x001b7740
   d4ddc:	000de801 	.word	0x000de801
   d4de0:	000de96f 	.word	0x000de96f
   d4de4:	2003e3cc 	.word	0x2003e3cc
   d4de8:	000de997 	.word	0x000de997
   d4dec:	000de9b2 	.word	0x000de9b2
   d4df0:	000de9d1 	.word	0x000de9d1
   d4df4:	2003e420 	.word	0x2003e420
   d4df8:	000de983 	.word	0x000de983

000d4dfc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   d4dfc:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d4dfe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4e00:	4604      	mov	r4, r0
   d4e02:	460d      	mov	r5, r1
   d4e04:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   d4e06:	d916      	bls.n	d4e36 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
   d4e08:	4290      	cmp	r0, r2
   d4e0a:	d215      	bcs.n	d4e38 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
   d4e0c:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   d4e10:	1a75      	subs	r5, r6, r1
   d4e12:	f1a1 0714 	sub.w	r7, r1, #20
   d4e16:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   d4e18:	42b7      	cmp	r7, r6
   d4e1a:	d01c      	beq.n	d4e56 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
   d4e1c:	b12c      	cbz	r4, d4e2a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
   d4e1e:	4631      	mov	r1, r6
   d4e20:	4620      	mov	r0, r4
   d4e22:	f004 fffd 	bl	d9e20 <_ZN6StringC1EOS_>
   d4e26:	7c33      	ldrb	r3, [r6, #16]
   d4e28:	7423      	strb	r3, [r4, #16]
   d4e2a:	4630      	mov	r0, r6
   d4e2c:	f004 ff7c 	bl	d9d28 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   d4e30:	3e14      	subs	r6, #20
   d4e32:	3c14      	subs	r4, #20
   d4e34:	e7f0      	b.n	d4e18 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   d4e36:	d00e      	beq.n	d4e56 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
   d4e38:	42b5      	cmp	r5, r6
   d4e3a:	d00c      	beq.n	d4e56 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
   d4e3c:	b12c      	cbz	r4, d4e4a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
   d4e3e:	4629      	mov	r1, r5
   d4e40:	4620      	mov	r0, r4
   d4e42:	f004 ffed 	bl	d9e20 <_ZN6StringC1EOS_>
   d4e46:	7c2b      	ldrb	r3, [r5, #16]
   d4e48:	7423      	strb	r3, [r4, #16]
   d4e4a:	4628      	mov	r0, r5
   d4e4c:	f004 ff6c 	bl	d9d28 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   d4e50:	3514      	adds	r5, #20
   d4e52:	3414      	adds	r4, #20
   d4e54:	e7f0      	b.n	d4e38 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
   d4e56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4e58 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d4e58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   d4e5c:	2300      	movs	r3, #0
   d4e5e:	e9c0 3300 	strd	r3, r3, [r0]
   d4e62:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d4e64:	684f      	ldr	r7, [r1, #4]
   d4e66:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d4e68:	4604      	mov	r4, r0
   d4e6a:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d4e6c:	dd23      	ble.n	d4eb6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   d4e6e:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
   d4e72:	fb08 f007 	mul.w	r0, r8, r7
   d4e76:	f002 fd65 	bl	d7944 <malloc>
            if (!d) {
   d4e7a:	4605      	mov	r5, r0
   d4e7c:	b1d8      	cbz	r0, d4eb6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            move(d, data_, data_ + size_);
   d4e7e:	e9d4 1200 	ldrd	r1, r2, [r4]
   d4e82:	fb08 1202 	mla	r2, r8, r2, r1
   d4e86:	f7ff ffb9 	bl	d4dfc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   d4e8a:	6820      	ldr	r0, [r4, #0]
   d4e8c:	f002 fd62 	bl	d7954 <free>
        data_ = d;
   d4e90:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   d4e92:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   d4e94:	e9d6 7300 	ldrd	r7, r3, [r6]
   d4e98:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
   d4e9c:	45b8      	cmp	r8, r7
   d4e9e:	d008      	beq.n	d4eb2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5a>
   d4ea0:	4639      	mov	r1, r7
   d4ea2:	4628      	mov	r0, r5
   d4ea4:	f004 ffd6 	bl	d9e54 <_ZN6StringC1ERKS_>
   d4ea8:	7c3b      	ldrb	r3, [r7, #16]
   d4eaa:	742b      	strb	r3, [r5, #16]
   d4eac:	3714      	adds	r7, #20
   d4eae:	3514      	adds	r5, #20
   d4eb0:	e7f4      	b.n	d4e9c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
   d4eb2:	6873      	ldr	r3, [r6, #4]
   d4eb4:	6063      	str	r3, [r4, #4]
}
   d4eb6:	4620      	mov	r0, r4
   d4eb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d4ebc <_GLOBAL__sub_I___appProductID>:
		digitalWrite(ANTSW1, 0);
	#else
		digitalWrite(ANTSW1, 0);
		digitalWrite(ANTSW2, 1);
	#endif
}
   d4ebc:	b5f0      	push	{r4, r5, r6, r7, lr}
        val_(val) {
   d4ebe:	4b52      	ldr	r3, [pc, #328]	; (d5008 <_GLOBAL__sub_I___appProductID+0x14c>)
   d4ec0:	2400      	movs	r4, #0
   d4ec2:	701c      	strb	r4, [r3, #0]
   d4ec4:	4b51      	ldr	r3, [pc, #324]	; (d500c <_GLOBAL__sub_I___appProductID+0x150>)
   d4ec6:	2501      	movs	r5, #1
   d4ec8:	b08d      	sub	sp, #52	; 0x34
   d4eca:	701d      	strb	r5, [r3, #0]
#include "spark_protocol_functions.h"


struct __ApplicationProductID {
    __ApplicationProductID(product_id_t id) {
        spark_protocol_set_product_id(spark_protocol_instance(), id);
   d4ecc:	f006 fa60 	bl	db390 <spark_protocol_instance>
   d4ed0:	4623      	mov	r3, r4
   d4ed2:	4622      	mov	r2, r4
   d4ed4:	f643 41a6 	movw	r1, #15526	; 0x3ca6
   d4ed8:	f006 fa62 	bl	db3a0 <spark_protocol_set_product_id>
    }
};

struct __ApplicationProductVersion {
    __ApplicationProductVersion(product_firmware_version_t version) {
        spark_protocol_set_product_firmware_version(spark_protocol_instance(), version);
   d4edc:	f006 fa58 	bl	db390 <spark_protocol_instance>
   d4ee0:	4622      	mov	r2, r4
   d4ee2:	4623      	mov	r3, r4
   d4ee4:	2110      	movs	r1, #16
   d4ee6:	f006 fa63 	bl	db3b0 <spark_protocol_set_product_firmware_version>
SYSTEM_THREAD(ENABLED)
   d4eea:	4621      	mov	r1, r4
   d4eec:	4628      	mov	r0, r5
   d4eee:	f002 fc31 	bl	d7754 <system_thread_set_state>
        capacity_(0) {
   d4ef2:	e9cd 4400 	strd	r4, r4, [sp]
   d4ef6:	9402      	str	r4, [sp, #8]
            StreamLogHandler(Serial, level, filters) {
   d4ef8:	f006 f94c 	bl	db194 <_Z16_fetch_usbserialv>
        filter_(level, filters) {
   d4efc:	4d44      	ldr	r5, [pc, #272]	; (d5010 <_GLOBAL__sub_I___appProductID+0x154>)
   d4efe:	4606      	mov	r6, r0
   d4f00:	4669      	mov	r1, sp
   d4f02:	a803      	add	r0, sp, #12
   d4f04:	f7ff ffa8 	bl	d4e58 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d4f08:	462f      	mov	r7, r5
        stream_(&stream) {
   d4f0a:	a903      	add	r1, sp, #12
   d4f0c:	a806      	add	r0, sp, #24
   d4f0e:	f7ff ffa3 	bl	d4e58 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   d4f12:	4b40      	ldr	r3, [pc, #256]	; (d5014 <_GLOBAL__sub_I___appProductID+0x158>)
   d4f14:	f847 3b04 	str.w	r3, [r7], #4
   d4f18:	a906      	add	r1, sp, #24
   d4f1a:	a809      	add	r0, sp, #36	; 0x24
   d4f1c:	f7ff ff9c 	bl	d4e58 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d4f20:	aa09      	add	r2, sp, #36	; 0x24
   d4f22:	211e      	movs	r1, #30
   d4f24:	4638      	mov	r0, r7
   d4f26:	f004 f990 	bl	d924a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d4f2a:	a809      	add	r0, sp, #36	; 0x24
   d4f2c:	f7ff fa92 	bl	d4454 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   d4f30:	a806      	add	r0, sp, #24
   d4f32:	f7ff fa8f 	bl	d4454 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d4f36:	4b38      	ldr	r3, [pc, #224]	; (d5018 <_GLOBAL__sub_I___appProductID+0x15c>)
   d4f38:	602b      	str	r3, [r5, #0]
   d4f3a:	622e      	str	r6, [r5, #32]
   d4f3c:	a803      	add	r0, sp, #12
   d4f3e:	f7ff fa89 	bl	d4454 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d4f42:	4b36      	ldr	r3, [pc, #216]	; (d501c <_GLOBAL__sub_I___appProductID+0x160>)
   d4f44:	602b      	str	r3, [r5, #0]
        Serial.begin();
   d4f46:	f006 f925 	bl	db194 <_Z16_fetch_usbserialv>
   d4f4a:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d4f4e:	f006 f911 	bl	db174 <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
   d4f52:	f003 fe1f 	bl	d8b94 <_ZN5spark10LogManager8instanceEv>
   d4f56:	4629      	mov	r1, r5
   d4f58:	f004 f909 	bl	d916e <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler logHandler;
   d4f5c:	4668      	mov	r0, sp
   d4f5e:	f7ff fa79 	bl	d4454 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
Ubidots ubidots(UBIDOTS_NAME, UBI_PARTICLE);
   d4f62:	4b2f      	ldr	r3, [pc, #188]	; (d5020 <_GLOBAL__sub_I___appProductID+0x164>)
   d4f64:	482f      	ldr	r0, [pc, #188]	; (d5024 <_GLOBAL__sub_I___appProductID+0x168>)
   d4f66:	6819      	ldr	r1, [r3, #0]
	 *
	 * @param addr The address 0-7 based on the setting of A0, A1 and A2.
	 *
	 * You typically create one of these objects as a global variable.
	 */
	MB85RC64(TwoWire &wire, int addr = 0) : MB85RC(wire, 8192, addr) {};
   d4f68:	4d2f      	ldr	r5, [pc, #188]	; (d5028 <_GLOBAL__sub_I___appProductID+0x16c>)
   d4f6a:	2203      	movs	r2, #3
   d4f6c:	f002 f97a 	bl	d7264 <_ZN7UbidotsC1EPc11IotProtocol>
MCP79410 rtc;											// RTC Library
   d4f70:	f006 fad8 	bl	db524 <_Z19__fetch_global_Wirev>
   d4f74:	4601      	mov	r1, r0
   d4f76:	482d      	ldr	r0, [pc, #180]	; (d502c <_GLOBAL__sub_I___appProductID+0x170>)
   d4f78:	f000 fae6 	bl	d5548 <_ZN8MCP79410C1ER7TwoWire>
MB85RC64 fram(Wire, 0);									// FRAM Library
   d4f7c:	f006 fad2 	bl	db524 <_Z19__fetch_global_Wirev>
   d4f80:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   d4f84:	4601      	mov	r1, r0
   d4f86:	4623      	mov	r3, r4
   d4f88:	4628      	mov	r0, r5
   d4f8a:	f000 f89f 	bl	d50cc <_ZN6MB85RCC1ER7TwoWireji>
   d4f8e:	4b28      	ldr	r3, [pc, #160]	; (d5030 <_GLOBAL__sub_I___appProductID+0x174>)
   d4f90:	602b      	str	r3, [r5, #0]
String deviceProperties;
   d4f92:	4d28      	ldr	r5, [pc, #160]	; (d5034 <_GLOBAL__sub_I___appProductID+0x178>)
   d4f94:	4828      	ldr	r0, [pc, #160]	; (d5038 <_GLOBAL__sub_I___appProductID+0x17c>)
   d4f96:	4629      	mov	r1, r5
   d4f98:	f004 ff11 	bl	d9dbe <_ZN6StringC1EPKc>
String analogValueString = "0";
   d4f9c:	4927      	ldr	r1, [pc, #156]	; (d503c <_GLOBAL__sub_I___appProductID+0x180>)
   d4f9e:	4828      	ldr	r0, [pc, #160]	; (d5040 <_GLOBAL__sub_I___appProductID+0x184>)
   d4fa0:	f004 ff0d 	bl	d9dbe <_ZN6StringC1EPKc>
String digitalValueString = "0";
   d4fa4:	4925      	ldr	r1, [pc, #148]	; (d503c <_GLOBAL__sub_I___appProductID+0x180>)
   d4fa6:	4827      	ldr	r0, [pc, #156]	; (d5044 <_GLOBAL__sub_I___appProductID+0x188>)
   d4fa8:	f004 ff09 	bl	d9dbe <_ZN6StringC1EPKc>
String temperatureStringC = "0";
   d4fac:	4923      	ldr	r1, [pc, #140]	; (d503c <_GLOBAL__sub_I___appProductID+0x180>)
   d4fae:	4826      	ldr	r0, [pc, #152]	; (d5048 <_GLOBAL__sub_I___appProductID+0x18c>)
   d4fb0:	f004 ff05 	bl	d9dbe <_ZN6StringC1EPKc>
String temperatureStringF = "0";
   d4fb4:	4921      	ldr	r1, [pc, #132]	; (d503c <_GLOBAL__sub_I___appProductID+0x180>)
   d4fb6:	4825      	ldr	r0, [pc, #148]	; (d504c <_GLOBAL__sub_I___appProductID+0x190>)
   d4fb8:	f004 ff01 	bl	d9dbe <_ZN6StringC1EPKc>
String powerSString;
   d4fbc:	4629      	mov	r1, r5
   d4fbe:	4824      	ldr	r0, [pc, #144]	; (d5050 <_GLOBAL__sub_I___appProductID+0x194>)
   d4fc0:	f004 fefd 	bl	d9dbe <_ZN6StringC1EPKc>
String powerBSString;
   d4fc4:	4629      	mov	r1, r5
   d4fc6:	4823      	ldr	r0, [pc, #140]	; (d5054 <_GLOBAL__sub_I___appProductID+0x198>)
   d4fc8:	f004 fef9 	bl	d9dbe <_ZN6StringC1EPKc>
String batterySocString;
   d4fcc:	4629      	mov	r1, r5
   d4fce:	4822      	ldr	r0, [pc, #136]	; (d5058 <_GLOBAL__sub_I___appProductID+0x19c>)
   d4fd0:	f004 fef5 	bl	d9dbe <_ZN6StringC1EPKc>
PMIC pmic;
   d4fd4:	4621      	mov	r1, r4
   d4fd6:	4821      	ldr	r0, [pc, #132]	; (d505c <_GLOBAL__sub_I___appProductID+0x1a0>)
   d4fd8:	f004 fd09 	bl	d99ee <_ZN4PMICC1Eb>
            : conf_{} {
   d4fdc:	4b20      	ldr	r3, [pc, #128]	; (d5060 <_GLOBAL__sub_I___appProductID+0x1a4>)
   d4fde:	2620      	movs	r6, #32
   d4fe0:	4632      	mov	r2, r6
   d4fe2:	4618      	mov	r0, r3
   d4fe4:	4621      	mov	r1, r4
   d4fe6:	f007 fbb1 	bl	dc74c <memset>
FuelGauge fuel;
   d4fea:	4621      	mov	r1, r4
        conf_.size = sizeof(conf_);
   d4fec:	7146      	strb	r6, [r0, #5]
   d4fee:	481d      	ldr	r0, [pc, #116]	; (d5064 <_GLOBAL__sub_I___appProductID+0x1a8>)
   d4ff0:	f003 f8ae 	bl	d8150 <_ZN9FuelGaugeC1Eb>
String VCellString;
   d4ff4:	4629      	mov	r1, r5
   d4ff6:	481c      	ldr	r0, [pc, #112]	; (d5068 <_GLOBAL__sub_I___appProductID+0x1ac>)
   d4ff8:	f004 fee1 	bl	d9dbe <_ZN6StringC1EPKc>
String SoCString;
   d4ffc:	4629      	mov	r1, r5
   d4ffe:	481b      	ldr	r0, [pc, #108]	; (d506c <_GLOBAL__sub_I___appProductID+0x1b0>)
   d5000:	f004 fedd 	bl	d9dbe <_ZN6StringC1EPKc>
}
   d5004:	b00d      	add	sp, #52	; 0x34
   d5006:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5008:	2003e318 	.word	0x2003e318
   d500c:	2003e319 	.word	0x2003e319
   d5010:	2003e3a8 	.word	0x2003e3a8
   d5014:	000de9f8 	.word	0x000de9f8
   d5018:	000df224 	.word	0x000df224
   d501c:	000dea10 	.word	0x000dea10
   d5020:	2003e0f8 	.word	0x2003e0f8
   d5024:	2003e44c 	.word	0x2003e44c
   d5028:	2003e390 	.word	0x2003e390
   d502c:	2003e3f4 	.word	0x2003e3f4
   d5030:	000dea28 	.word	0x000dea28
   d5034:	000dedf7 	.word	0x000dedf7
   d5038:	2003e370 	.word	0x2003e370
   d503c:	000deecc 	.word	0x000deecc
   d5040:	2003e324 	.word	0x2003e324
   d5044:	2003e380 	.word	0x2003e380
   d5048:	2003e42c 	.word	0x2003e42c
   d504c:	2003e43c 	.word	0x2003e43c
   d5050:	2003e3e0 	.word	0x2003e3e0
   d5054:	2003e3d0 	.word	0x2003e3d0
   d5058:	2003e334 	.word	0x2003e334
   d505c:	2003e3cd 	.word	0x2003e3cd
   d5060:	2003e34c 	.word	0x2003e34c
   d5064:	2003e3a0 	.word	0x2003e3a0
   d5068:	2003e308 	.word	0x2003e308
   d506c:	2003e2f8 	.word	0x2003e2f8

000d5070 <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d5070:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d5072:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d5074:	4604      	mov	r4, r0
      if (_M_manager)
   d5076:	b113      	cbz	r3, d507e <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5078:	2203      	movs	r2, #3
   d507a:	4601      	mov	r1, r0
   d507c:	4798      	blx	r3
    }
   d507e:	4620      	mov	r0, r4
   d5080:	bd10      	pop	{r4, pc}

000d5082 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    inline
#if __cplusplus >= 201103L
    typename enable_if<__and_<__not_<__is_tuple_like<_Tp>>,
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
    swap(_Tp& __a, _Tp& __b)
   d5082:	b513      	push	{r0, r1, r4, lr}
   d5084:	460b      	mov	r3, r1
   d5086:	4602      	mov	r2, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5088:	e9d0 0100 	ldrd	r0, r1, [r0]
   d508c:	466c      	mov	r4, sp
   d508e:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d5092:	e893 0003 	ldmia.w	r3, {r0, r1}
   d5096:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d509a:	e894 0003 	ldmia.w	r4, {r0, r1}
   d509e:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d50a2:	b002      	add	sp, #8
   d50a4:	bd10      	pop	{r4, pc}
	...

000d50a8 <_GLOBAL__sub_I__ZN16DeviceNameHelper9_instanceE>:
   d50a8:	4b01      	ldr	r3, [pc, #4]	; (d50b0 <_GLOBAL__sub_I__ZN16DeviceNameHelper9_instanceE+0x8>)
   d50aa:	2200      	movs	r2, #0
   d50ac:	701a      	strb	r2, [r3, #0]
    int fd = open(path, O_RDWR | O_CREAT);
    if (fd != -1) {
        write(fd, &fileData, sizeof(DeviceNameHelperData));
        close(fd);   
    }
}
   d50ae:	4770      	bx	lr
   d50b0:	2003e459 	.word	0x2003e459

000d50b4 <_ZN6MB85RCD1Ev>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
	wire(wire), memorySize(memorySize), addr(addr) {
}

MB85RC::~MB85RC() {
}
   d50b4:	4770      	bx	lr

000d50b6 <_ZN6MB85RCD0Ev>:
MB85RC::~MB85RC() {
   d50b6:	b510      	push	{r4, lr}
}
   d50b8:	2110      	movs	r1, #16
MB85RC::~MB85RC() {
   d50ba:	4604      	mov	r4, r0
}
   d50bc:	f006 fa7a 	bl	db5b4 <_ZdlPvj>
   d50c0:	4620      	mov	r0, r4
   d50c2:	bd10      	pop	{r4, pc}

000d50c4 <_ZN7TwoWire5writeEj>:
  bool lock();
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
   d50c4:	6803      	ldr	r3, [r0, #0]
   d50c6:	b2c9      	uxtb	r1, r1
   d50c8:	689b      	ldr	r3, [r3, #8]
   d50ca:	4718      	bx	r3

000d50cc <_ZN6MB85RCC1ER7TwoWireji>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
   d50cc:	b530      	push	{r4, r5, lr}
	wire(wire), memorySize(memorySize), addr(addr) {
   d50ce:	4d03      	ldr	r5, [pc, #12]	; (d50dc <_ZN6MB85RCC1ER7TwoWireji+0x10>)
   d50d0:	e9c0 2302 	strd	r2, r3, [r0, #8]
   d50d4:	e9c0 5100 	strd	r5, r1, [r0]
}
   d50d8:	bd30      	pop	{r4, r5, pc}
   d50da:	bf00      	nop
   d50dc:	000deaf0 	.word	0x000deaf0

000d50e0 <_ZN6MB85RC5beginEv>:

void MB85RC::begin() {
	wire.begin();
   d50e0:	6840      	ldr	r0, [r0, #4]
   d50e2:	f003 b907 	b.w	d82f4 <_ZN7TwoWire5beginEv>

000d50e6 <_ZNSt10lock_guardIR7TwoWireED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   d50e6:	b510      	push	{r4, lr}
   d50e8:	4604      	mov	r4, r0
      { _M_device.unlock(); }
   d50ea:	6800      	ldr	r0, [r0, #0]
   d50ec:	f003 f961 	bl	d83b2 <_ZN7TwoWire6unlockEv>
   d50f0:	4620      	mov	r0, r4
   d50f2:	bd10      	pop	{r4, pc}

000d50f4 <_ZN6MB85RC8readDataEjPhj>:

	return true;
}


bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   d50f4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d50f8:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   d50fa:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d50fc:	9001      	str	r0, [sp, #4]
bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   d50fe:	460d      	mov	r5, r1
   d5100:	4616      	mov	r6, r2
   d5102:	461f      	mov	r7, r3
      { _M_device.lock(); }
   d5104:	f003 f94c 	bl	d83a0 <_ZN7TwoWire4lockEv>

		while(dataLen > 0) {
   d5108:	b1a7      	cbz	r7, d5134 <_ZN6MB85RC8readDataEjPhj+0x40>
			wire.beginTransmission(addr | DEVICE_ADDR);
   d510a:	68e1      	ldr	r1, [r4, #12]
   d510c:	6860      	ldr	r0, [r4, #4]
   d510e:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d5112:	f003 f922 	bl	d835a <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   d5116:	0a29      	lsrs	r1, r5, #8
   d5118:	6860      	ldr	r0, [r4, #4]
   d511a:	f7ff ffd3 	bl	d50c4 <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   d511e:	4629      	mov	r1, r5
   d5120:	6860      	ldr	r0, [r4, #4]
   d5122:	f7ff ffcf 	bl	d50c4 <_ZN7TwoWire5writeEj>
			int stat = wire.endTransmission(false);
   d5126:	6860      	ldr	r0, [r4, #4]
   d5128:	2100      	movs	r1, #0
   d512a:	f003 f931 	bl	d8390 <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   d512e:	b148      	cbz	r0, d5144 <_ZN6MB85RC8readDataEjPhj+0x50>
				//Serial.printlnf("read set address failed %d", stat);
				result = false;
   d5130:	2400      	movs	r4, #0
   d5132:	e000      	b.n	d5136 <_ZN6MB85RC8readDataEjPhj+0x42>
   d5134:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
   d5136:	a801      	add	r0, sp, #4
   d5138:	f7ff ffd5 	bl	d50e6 <_ZNSt10lock_guardIR7TwoWireED1Ev>
				dataLen--;
			}
		}
	}
	return result;
}
   d513c:	4620      	mov	r0, r4
   d513e:	b003      	add	sp, #12
   d5140:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			if (bytesToRead > 32) {
   d5144:	2f20      	cmp	r7, #32
			wire.requestFrom((uint8_t)(addr | DEVICE_ADDR), bytesToRead, (uint8_t) true);
   d5146:	7b21      	ldrb	r1, [r4, #12]
   d5148:	6860      	ldr	r0, [r4, #4]
   d514a:	46b8      	mov	r8, r7
   d514c:	bf28      	it	cs
   d514e:	f04f 0820 	movcs.w	r8, #32
   d5152:	2301      	movs	r3, #1
   d5154:	4642      	mov	r2, r8
   d5156:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d515a:	f003 f8e8 	bl	d832e <_ZN7TwoWire11requestFromEhjh>
			if (Wire.available() < (int) bytesToRead) {
   d515e:	f006 f9e1 	bl	db524 <_Z19__fetch_global_Wirev>
   d5162:	6803      	ldr	r3, [r0, #0]
   d5164:	691b      	ldr	r3, [r3, #16]
   d5166:	4798      	blx	r3
   d5168:	4540      	cmp	r0, r8
   d516a:	dbe1      	blt.n	d5130 <_ZN6MB85RC8readDataEjPhj+0x3c>
   d516c:	eb06 0908 	add.w	r9, r6, r8
				*data++ = Wire.read();    // receive a byte as character
   d5170:	f006 f9d8 	bl	db524 <_Z19__fetch_global_Wirev>
   d5174:	6803      	ldr	r3, [r0, #0]
   d5176:	695b      	ldr	r3, [r3, #20]
   d5178:	4798      	blx	r3
   d517a:	f806 0b01 	strb.w	r0, [r6], #1
			for(size_t ii = 0; ii < bytesToRead; ii++) {
   d517e:	454e      	cmp	r6, r9
   d5180:	d1f6      	bne.n	d5170 <_ZN6MB85RC8readDataEjPhj+0x7c>
   d5182:	4445      	add	r5, r8
   d5184:	eba7 0708 	sub.w	r7, r7, r8
   d5188:	e7be      	b.n	d5108 <_ZN6MB85RC8readDataEjPhj+0x14>

000d518a <_ZN6MB85RC9writeDataEjPKhj>:


bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   d518a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d518e:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   d5190:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d5192:	9001      	str	r0, [sp, #4]
bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   d5194:	460e      	mov	r6, r1
   d5196:	4690      	mov	r8, r2
   d5198:	461d      	mov	r5, r3
      { _M_device.lock(); }
   d519a:	f003 f901 	bl	d83a0 <_ZN7TwoWire4lockEv>
   d519e:	f04f 0901 	mov.w	r9, #1
	WITH_LOCK(wire) {
   d51a2:	f1b9 0f00 	cmp.w	r9, #0
   d51a6:	d02a      	beq.n	d51fe <_ZN6MB85RC9writeDataEjPKhj+0x74>
		while(dataLen > 0) {
   d51a8:	b34d      	cbz	r5, d51fe <_ZN6MB85RC9writeDataEjPKhj+0x74>
			wire.beginTransmission(addr | DEVICE_ADDR);
   d51aa:	68e1      	ldr	r1, [r4, #12]
   d51ac:	6860      	ldr	r0, [r4, #4]
   d51ae:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d51b2:	f003 f8d2 	bl	d835a <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   d51b6:	0a31      	lsrs	r1, r6, #8
   d51b8:	6860      	ldr	r0, [r4, #4]
   d51ba:	f7ff ff83 	bl	d50c4 <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   d51be:	6860      	ldr	r0, [r4, #4]
   d51c0:	4631      	mov	r1, r6
   d51c2:	f7ff ff7f 	bl	d50c4 <_ZN7TwoWire5writeEj>

			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   d51c6:	f1a5 0a1e 	sub.w	sl, r5, #30
			wire.write(framAddr);
   d51ca:	4647      	mov	r7, r8
   d51cc:	eba6 0b08 	sub.w	fp, r6, r8
				wire.write(*data);
   d51d0:	6860      	ldr	r0, [r4, #4]
   d51d2:	f817 1b01 	ldrb.w	r1, [r7], #1
   d51d6:	6803      	ldr	r3, [r0, #0]
				framAddr++;
				data++;
				dataLen--;
   d51d8:	3d01      	subs	r5, #1
				wire.write(*data);
   d51da:	689b      	ldr	r3, [r3, #8]
   d51dc:	4798      	blx	r3
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   d51de:	4555      	cmp	r5, sl
   d51e0:	eb0b 0607 	add.w	r6, fp, r7
				data++;
   d51e4:	46b8      	mov	r8, r7
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   d51e6:	d001      	beq.n	d51ec <_ZN6MB85RC9writeDataEjPKhj+0x62>
   d51e8:	2d00      	cmp	r5, #0
   d51ea:	d1f1      	bne.n	d51d0 <_ZN6MB85RC9writeDataEjPKhj+0x46>
			}

			int stat = wire.endTransmission(true);
   d51ec:	6860      	ldr	r0, [r4, #4]
   d51ee:	2101      	movs	r1, #1
   d51f0:	f003 f8ce 	bl	d8390 <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   d51f4:	2800      	cmp	r0, #0
   d51f6:	d0d7      	beq.n	d51a8 <_ZN6MB85RC9writeDataEjPKhj+0x1e>
				//Serial.printlnf("write failed %d", stat);
				result = false;
   d51f8:	f04f 0900 	mov.w	r9, #0
   d51fc:	e7d1      	b.n	d51a2 <_ZN6MB85RC9writeDataEjPKhj+0x18>
	WITH_LOCK(wire) {
   d51fe:	a801      	add	r0, sp, #4
   d5200:	f7ff ff71 	bl	d50e6 <_ZNSt10lock_guardIR7TwoWireED1Ev>
				break;
			}
		}
	}
	return result;
}
   d5204:	4648      	mov	r0, r9
   d5206:	b003      	add	sp, #12
   d5208:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d520c <_ZN6MB85RC8moveDataEjjj>:


bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   d520c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d5210:	b08b      	sub	sp, #44	; 0x2c
   d5212:	460e      	mov	r6, r1
   d5214:	4615      	mov	r5, r2
   d5216:	4680      	mov	r8, r0
	bool result = true;

	// Maximum number of bytes we can write is 30
	uint8_t buf[30];

	WITH_LOCK(wire) {
   d5218:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d521a:	9001      	str	r0, [sp, #4]
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   d521c:	461c      	mov	r4, r3
      { _M_device.lock(); }
   d521e:	f003 f8bf 	bl	d83a0 <_ZN7TwoWire4lockEv>
		if (framAddrFrom < framAddrTo) {
   d5222:	42ae      	cmp	r6, r5
   d5224:	d229      	bcs.n	d527a <_ZN6MB85RC8moveDataEjjj+0x6e>
			// Moving to a higher address - copy from the end of the from buffer
			framAddrFrom += numBytes;
   d5226:	4426      	add	r6, r4
			framAddrTo += numBytes;
   d5228:	4425      	add	r5, r4
			while(numBytes > 0) {
   d522a:	b18c      	cbz	r4, d5250 <_ZN6MB85RC8moveDataEjjj+0x44>
				size_t count = numBytes;
				if (count > sizeof(buf)) {
   d522c:	2c1e      	cmp	r4, #30
   d522e:	4627      	mov	r7, r4
					count = sizeof(buf);
				}
				framAddrFrom -= count;
				framAddrTo -= count;

				result = readData(framAddrFrom, buf, count);
   d5230:	f8d8 3000 	ldr.w	r3, [r8]
   d5234:	bf28      	it	cs
   d5236:	271e      	movcs	r7, #30
				framAddrFrom -= count;
   d5238:	1bf6      	subs	r6, r6, r7
				result = readData(framAddrFrom, buf, count);
   d523a:	f8d3 9008 	ldr.w	r9, [r3, #8]
   d523e:	aa02      	add	r2, sp, #8
   d5240:	463b      	mov	r3, r7
   d5242:	4631      	mov	r1, r6
   d5244:	4640      	mov	r0, r8
				framAddrTo -= count;
   d5246:	1bed      	subs	r5, r5, r7
				result = readData(framAddrFrom, buf, count);
   d5248:	47c8      	blx	r9
				if (!result) {
   d524a:	b948      	cbnz	r0, d5260 <_ZN6MB85RC8moveDataEjjj+0x54>
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   d524c:	2400      	movs	r4, #0
   d524e:	e000      	b.n	d5252 <_ZN6MB85RC8moveDataEjjj+0x46>
   d5250:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
   d5252:	a801      	add	r0, sp, #4
   d5254:	f7ff ff47 	bl	d50e6 <_ZNSt10lock_guardIR7TwoWireED1Ev>
				numBytes -= count;
			}
		}
	}
	return result;
}
   d5258:	4620      	mov	r0, r4
   d525a:	b00b      	add	sp, #44	; 0x2c
   d525c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				result = writeData(framAddrTo, buf, count);
   d5260:	f8d8 3000 	ldr.w	r3, [r8]
   d5264:	aa02      	add	r2, sp, #8
   d5266:	f8d3 900c 	ldr.w	r9, [r3, #12]
   d526a:	4629      	mov	r1, r5
   d526c:	463b      	mov	r3, r7
   d526e:	4640      	mov	r0, r8
   d5270:	47c8      	blx	r9
				if (!result) {
   d5272:	2800      	cmp	r0, #0
   d5274:	d0ea      	beq.n	d524c <_ZN6MB85RC8moveDataEjjj+0x40>
				numBytes -= count;
   d5276:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
   d5278:	e7d7      	b.n	d522a <_ZN6MB85RC8moveDataEjjj+0x1e>
		if (framAddrFrom > framAddrTo) {
   d527a:	d9e9      	bls.n	d5250 <_ZN6MB85RC8moveDataEjjj+0x44>
			while(numBytes > 0) {
   d527c:	2c00      	cmp	r4, #0
   d527e:	d0e7      	beq.n	d5250 <_ZN6MB85RC8moveDataEjjj+0x44>
				result = readData(framAddrFrom, buf, count);
   d5280:	f8d8 3000 	ldr.w	r3, [r8]
   d5284:	2c1e      	cmp	r4, #30
   d5286:	4627      	mov	r7, r4
   d5288:	bf28      	it	cs
   d528a:	271e      	movcs	r7, #30
   d528c:	f8d3 9008 	ldr.w	r9, [r3, #8]
   d5290:	aa02      	add	r2, sp, #8
   d5292:	463b      	mov	r3, r7
   d5294:	4631      	mov	r1, r6
   d5296:	4640      	mov	r0, r8
   d5298:	47c8      	blx	r9
				if (!result) {
   d529a:	2800      	cmp	r0, #0
   d529c:	d0d6      	beq.n	d524c <_ZN6MB85RC8moveDataEjjj+0x40>
				result = writeData(framAddrTo, buf, count);
   d529e:	f8d8 3000 	ldr.w	r3, [r8]
   d52a2:	aa02      	add	r2, sp, #8
   d52a4:	f8d3 900c 	ldr.w	r9, [r3, #12]
   d52a8:	4629      	mov	r1, r5
   d52aa:	463b      	mov	r3, r7
   d52ac:	4640      	mov	r0, r8
   d52ae:	47c8      	blx	r9
				if (!result) {
   d52b0:	2800      	cmp	r0, #0
   d52b2:	d0cb      	beq.n	d524c <_ZN6MB85RC8moveDataEjjj+0x40>
				framAddrFrom += count;
   d52b4:	443e      	add	r6, r7
				framAddrTo += count;
   d52b6:	443d      	add	r5, r7
				numBytes -= count;
   d52b8:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
   d52ba:	e7df      	b.n	d527c <_ZN6MB85RC8moveDataEjjj+0x70>

000d52bc <_ZNK12MCP79410SRAM6lengthEv>:
	virtual ~MCP79410SRAM();

	/**
	 * @brief Returns the length (64)
	 */
	virtual size_t length() const { return 64; };
   d52bc:	2040      	movs	r0, #64	; 0x40
   d52be:	4770      	bx	lr

000d52c0 <_ZNK12MCP79410SRAM10eraseValueEv>:
	/**
	 * @brief Erase erases to 0
	 *
	 * Note that on cold power up, the values are random, not zero!
	 */
	virtual uint8_t eraseValue() const { return 0; };
   d52c0:	2000      	movs	r0, #0
   d52c2:	4770      	bx	lr

000d52c4 <_ZNK14MCP79410EEPROM6lengthEv>:
	bool protectedBlockRead(uint8_t *buf);

	/**
	 * @brief Returns the length (128)
	 */
	virtual size_t length() const { return 128; };
   d52c4:	2080      	movs	r0, #128	; 0x80
   d52c6:	4770      	bx	lr

000d52c8 <_ZNK14MCP79410EEPROM10eraseValueEv>:

	/**
	 * @brief Erased value is 0xff.
	 */
	virtual uint8_t eraseValue() const { return 0xff; };
   d52c8:	20ff      	movs	r0, #255	; 0xff
   d52ca:	4770      	bx	lr

000d52cc <_ZN12MCP79410SRAMD1Ev>:

}

MCP79410SRAM::~MCP79410SRAM() {

}
   d52cc:	4770      	bx	lr

000d52ce <_ZN14MCP79410EEPROMD1Ev>:

}

MCP79410EEPROM::~MCP79410EEPROM() {

}
   d52ce:	4770      	bx	lr

000d52d0 <_ZN12MCP79410TimeD1Ev>:
	clear();
}

MCP79410Time::~MCP79410Time() {

}
   d52d0:	4770      	bx	lr

000d52d2 <_ZN8MCP79410D1Ev>:
}


MCP79410::~MCP79410() {

}
   d52d2:	4770      	bx	lr

000d52d4 <_ZN12MCP79410TimeD0Ev>:
MCP79410Time::~MCP79410Time() {
   d52d4:	b510      	push	{r4, lr}
}
   d52d6:	2114      	movs	r1, #20
MCP79410Time::~MCP79410Time() {
   d52d8:	4604      	mov	r4, r0
}
   d52da:	f006 f96b 	bl	db5b4 <_ZdlPvj>
   d52de:	4620      	mov	r0, r4
   d52e0:	bd10      	pop	{r4, pc}

000d52e2 <_ZN12MCP79410SRAMD0Ev>:
MCP79410SRAM::~MCP79410SRAM() {
   d52e2:	b510      	push	{r4, lr}
}
   d52e4:	2108      	movs	r1, #8
MCP79410SRAM::~MCP79410SRAM() {
   d52e6:	4604      	mov	r4, r0
}
   d52e8:	f006 f964 	bl	db5b4 <_ZdlPvj>
   d52ec:	4620      	mov	r0, r4
   d52ee:	bd10      	pop	{r4, pc}

000d52f0 <_ZN14MCP79410EEPROMD0Ev>:
MCP79410EEPROM::~MCP79410EEPROM() {
   d52f0:	b510      	push	{r4, lr}
}
   d52f2:	2108      	movs	r1, #8
MCP79410EEPROM::~MCP79410EEPROM() {
   d52f4:	4604      	mov	r4, r0
}
   d52f6:	f006 f95d 	bl	db5b4 <_ZdlPvj>
   d52fa:	4620      	mov	r0, r4
   d52fc:	bd10      	pop	{r4, pc}

000d52fe <_ZN8MCP79410D0Ev>:
MCP79410::~MCP79410() {
   d52fe:	b510      	push	{r4, lr}
}
   d5300:	211c      	movs	r1, #28
MCP79410::~MCP79410() {
   d5302:	4604      	mov	r4, r0
}
   d5304:	f006 f956 	bl	db5b4 <_ZdlPvj>
   d5308:	4620      	mov	r0, r4
   d530a:	bd10      	pop	{r4, pc}

000d530c <_ZN18MCP79410MemoryBase5eraseEv>:
bool MCP79410MemoryBase::erase() {
   d530c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	memset(buf, eraseValue(), sizeof(buf));
   d5310:	6803      	ldr	r3, [r0, #0]
   d5312:	68db      	ldr	r3, [r3, #12]
bool MCP79410MemoryBase::erase() {
   d5314:	4604      	mov	r4, r0
	memset(buf, eraseValue(), sizeof(buf));
   d5316:	4798      	blx	r3
   d5318:	2210      	movs	r2, #16
   d531a:	4601      	mov	r1, r0
   d531c:	4668      	mov	r0, sp
   d531e:	f007 fa15 	bl	dc74c <memset>
	size_t len = length();
   d5322:	6823      	ldr	r3, [r4, #0]
   d5324:	4620      	mov	r0, r4
   d5326:	689b      	ldr	r3, [r3, #8]
   d5328:	4798      	blx	r3
	size_t offset = 0;
   d532a:	2500      	movs	r5, #0
	size_t len = length();
   d532c:	4607      	mov	r7, r0
	bool bResult = false;
   d532e:	4628      	mov	r0, r5
	while(offset < len) {
   d5330:	42bd      	cmp	r5, r7
   d5332:	d20e      	bcs.n	d5352 <_ZN18MCP79410MemoryBase5eraseEv+0x46>
		if (count > (len - offset)) {
   d5334:	1b7e      	subs	r6, r7, r5
		bResult = writeData(offset, buf, count);
   d5336:	6823      	ldr	r3, [r4, #0]
		size_t count = sizeof(buf);
   d5338:	2e10      	cmp	r6, #16
   d533a:	bf28      	it	cs
   d533c:	2610      	movcs	r6, #16
		bResult = writeData(offset, buf, count);
   d533e:	f8d3 8018 	ldr.w	r8, [r3, #24]
   d5342:	466a      	mov	r2, sp
   d5344:	4633      	mov	r3, r6
   d5346:	4629      	mov	r1, r5
   d5348:	4620      	mov	r0, r4
   d534a:	47c0      	blx	r8
		if (!bResult) {
   d534c:	b108      	cbz	r0, d5352 <_ZN18MCP79410MemoryBase5eraseEv+0x46>
		offset += count;
   d534e:	4435      	add	r5, r6
	while(offset < len) {
   d5350:	e7ee      	b.n	d5330 <_ZN18MCP79410MemoryBase5eraseEv+0x24>
}
   d5352:	b004      	add	sp, #16
   d5354:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d5358 <_ZN12MCP79410Time5clearEv>:
	rawYear = 0;
   d5358:	f44f 7380 	mov.w	r3, #256	; 0x100
   d535c:	8143      	strh	r3, [r0, #10]
	rawDayOfMonth = 1;
   d535e:	f240 1301 	movw	r3, #257	; 0x101
   d5362:	60c3      	str	r3, [r0, #12]
	rawSecond = 0;
   d5364:	2300      	movs	r3, #0
   d5366:	8203      	strh	r3, [r0, #16]
}
   d5368:	4770      	bx	lr
	...

000d536c <_ZN12MCP79410TimeC1Ev>:
MCP79410Time::MCP79410Time() {
   d536c:	b508      	push	{r3, lr}
   d536e:	4b06      	ldr	r3, [pc, #24]	; (d5388 <_ZN12MCP79410TimeC1Ev+0x1c>)
   d5370:	6003      	str	r3, [r0, #0]
   d5372:	4b06      	ldr	r3, [pc, #24]	; (d538c <_ZN12MCP79410TimeC1Ev+0x20>)
   d5374:	6043      	str	r3, [r0, #4]
   d5376:	f240 7304 	movw	r3, #1796	; 0x704
   d537a:	8103      	strh	r3, [r0, #8]
   d537c:	2300      	movs	r3, #0
   d537e:	7443      	strb	r3, [r0, #17]
	clear();
   d5380:	f7ff ffea 	bl	d5358 <_ZN12MCP79410Time5clearEv>
}
   d5384:	bd08      	pop	{r3, pc}
   d5386:	bf00      	nop
   d5388:	000debd0 	.word	0x000debd0
   d538c:	03020100 	.word	0x03020100

000d5390 <_ZN12MCP79410Time8bcdToIntEh>:
	return ((value >> 4) & 0xf) * 10 + (value & 0xf);
   d5390:	0903      	lsrs	r3, r0, #4
}
   d5392:	220a      	movs	r2, #10
	return ((value >> 4) & 0xf) * 10 + (value & 0xf);
   d5394:	f000 000f 	and.w	r0, r0, #15
}
   d5398:	fb02 0003 	mla	r0, r2, r3, r0
   d539c:	4770      	bx	lr

000d539e <_ZNK12MCP79410Time7getYearEv>:
int MCP79410Time::getYear() const {
   d539e:	b508      	push	{r3, lr}
	return bcdToInt(rawYear) + 2000;
   d53a0:	7a80      	ldrb	r0, [r0, #10]
   d53a2:	f7ff fff5 	bl	d5390 <_ZN12MCP79410Time8bcdToIntEh>
}
   d53a6:	f500 60fa 	add.w	r0, r0, #2000	; 0x7d0
   d53aa:	bd08      	pop	{r3, pc}

000d53ac <_ZNK12MCP79410Time8getMonthEv>:
	return bcdToInt(rawMonth & 0x1f);
   d53ac:	7ac0      	ldrb	r0, [r0, #11]
   d53ae:	f000 001f 	and.w	r0, r0, #31
   d53b2:	f7ff bfed 	b.w	d5390 <_ZN12MCP79410Time8bcdToIntEh>

000d53b6 <_ZNK12MCP79410Time13getDayOfMonthEv>:
	return bcdToInt(rawDayOfMonth & 0x3f);
   d53b6:	7b00      	ldrb	r0, [r0, #12]
   d53b8:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   d53bc:	f7ff bfe8 	b.w	d5390 <_ZN12MCP79410Time8bcdToIntEh>

000d53c0 <_ZNK12MCP79410Time7getHourEv>:
int MCP79410Time::getHour() const {
   d53c0:	b508      	push	{r3, lr}
	if (rawHour & 0x40) {
   d53c2:	7b81      	ldrb	r1, [r0, #14]
   d53c4:	064a      	lsls	r2, r1, #25
   d53c6:	d50d      	bpl.n	d53e4 <_ZNK12MCP79410Time7getHourEv+0x24>
		int hour12 = bcdToInt(rawHour & 0x1f);
   d53c8:	f001 001f 	and.w	r0, r1, #31
   d53cc:	f7ff ffe0 	bl	d5390 <_ZN12MCP79410Time8bcdToIntEh>
		if (rawHour & 0x20) {
   d53d0:	068b      	lsls	r3, r1, #26
   d53d2:	d503      	bpl.n	d53dc <_ZNK12MCP79410Time7getHourEv+0x1c>
			if (hour12 == 12) {
   d53d4:	280c      	cmp	r0, #12
   d53d6:	d000      	beq.n	d53da <_ZNK12MCP79410Time7getHourEv+0x1a>
				return hour12 + 12;
   d53d8:	300c      	adds	r0, #12
}
   d53da:	bd08      	pop	{r3, pc}
				return 0;
   d53dc:	280c      	cmp	r0, #12
   d53de:	bf08      	it	eq
   d53e0:	2000      	moveq	r0, #0
   d53e2:	e7fa      	b.n	d53da <_ZNK12MCP79410Time7getHourEv+0x1a>
}
   d53e4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		return bcdToInt(rawHour & 0x3f);
   d53e8:	f001 003f 	and.w	r0, r1, #63	; 0x3f
   d53ec:	f7ff bfd0 	b.w	d5390 <_ZN12MCP79410Time8bcdToIntEh>

000d53f0 <_ZNK12MCP79410Time9getMinuteEv>:
	return bcdToInt(rawMinute & 0x7f);
   d53f0:	7bc0      	ldrb	r0, [r0, #15]
   d53f2:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   d53f6:	f7ff bfcb 	b.w	d5390 <_ZN12MCP79410Time8bcdToIntEh>

000d53fa <_ZNK12MCP79410Time9getSecondEv>:
	return bcdToInt(rawSecond & 0x7f);
   d53fa:	7c00      	ldrb	r0, [r0, #16]
   d53fc:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   d5400:	f7ff bfc6 	b.w	d5390 <_ZN12MCP79410Time8bcdToIntEh>

000d5404 <_ZNK12MCP79410Time10toUnixTimeEv>:
time_t MCP79410Time::toUnixTime() const {
   d5404:	b510      	push	{r4, lr}
   d5406:	b08a      	sub	sp, #40	; 0x28
	memset(&tm, 0, sizeof(struct tm));
   d5408:	2224      	movs	r2, #36	; 0x24
time_t MCP79410Time::toUnixTime() const {
   d540a:	4604      	mov	r4, r0
	memset(&tm, 0, sizeof(struct tm));
   d540c:	2100      	movs	r1, #0
   d540e:	a801      	add	r0, sp, #4
   d5410:	f007 f99c 	bl	dc74c <memset>
	tm.tm_year = getYear() - 1900; // tm_year is years since 1900
   d5414:	4620      	mov	r0, r4
   d5416:	f7ff ffc2 	bl	d539e <_ZNK12MCP79410Time7getYearEv>
   d541a:	f2a0 706c 	subw	r0, r0, #1900	; 0x76c
   d541e:	9006      	str	r0, [sp, #24]
	tm.tm_mon = getMonth() - 1; // tm_mon is 0-11!
   d5420:	4620      	mov	r0, r4
   d5422:	f7ff ffc3 	bl	d53ac <_ZNK12MCP79410Time8getMonthEv>
   d5426:	3801      	subs	r0, #1
   d5428:	9005      	str	r0, [sp, #20]
	tm.tm_mday = getDayOfMonth(); // 1-31
   d542a:	4620      	mov	r0, r4
   d542c:	f7ff ffc3 	bl	d53b6 <_ZNK12MCP79410Time13getDayOfMonthEv>
   d5430:	9004      	str	r0, [sp, #16]
	tm.tm_hour = getHour();
   d5432:	4620      	mov	r0, r4
   d5434:	f7ff ffc4 	bl	d53c0 <_ZNK12MCP79410Time7getHourEv>
   d5438:	9003      	str	r0, [sp, #12]
	tm.tm_min = getMinute();
   d543a:	4620      	mov	r0, r4
   d543c:	f7ff ffd8 	bl	d53f0 <_ZNK12MCP79410Time9getMinuteEv>
   d5440:	9002      	str	r0, [sp, #8]
	tm.tm_sec = getSecond();
   d5442:	4620      	mov	r0, r4
   d5444:	f7ff ffd9 	bl	d53fa <_ZNK12MCP79410Time9getSecondEv>
   d5448:	9001      	str	r0, [sp, #4]
	return mktime(&tm);
   d544a:	a801      	add	r0, sp, #4
   d544c:	f002 faea 	bl	d7a24 <mktime>
}
   d5450:	b00a      	add	sp, #40	; 0x28
   d5452:	bd10      	pop	{r4, pc}

000d5454 <_ZN12MCP79410Time8intToBcdEi>:
	result = (uint8_t) (((value / 10) % 10) << 4);
   d5454:	210a      	movs	r1, #10
   d5456:	fb90 f2f1 	sdiv	r2, r0, r1
   d545a:	fb92 f3f1 	sdiv	r3, r2, r1
   d545e:	fb01 2313 	mls	r3, r1, r3, r2
   d5462:	011b      	lsls	r3, r3, #4
   d5464:	b2db      	uxtb	r3, r3
	result |= (uint8_t) (value % 10);
   d5466:	fb01 0012 	mls	r0, r1, r2, r0
   d546a:	4318      	orrs	r0, r3
}
   d546c:	b2c0      	uxtb	r0, r0
   d546e:	4770      	bx	lr

000d5470 <_ZN12MCP79410Time7setYearEi>:
	rawYear = intToBcd(value % 100);
   d5470:	2364      	movs	r3, #100	; 0x64
void MCP79410Time::setYear(int value) {
   d5472:	b510      	push	{r4, lr}
   d5474:	4604      	mov	r4, r0
	rawYear = intToBcd(value % 100);
   d5476:	fb91 f0f3 	sdiv	r0, r1, r3
   d547a:	fb00 1013 	mls	r0, r0, r3, r1
   d547e:	f7ff ffe9 	bl	d5454 <_ZN12MCP79410Time8intToBcdEi>
   d5482:	72a0      	strb	r0, [r4, #10]
}
   d5484:	bd10      	pop	{r4, pc}

000d5486 <_ZN12MCP79410Time8setMonthEi>:
void MCP79410Time::setMonth(int value) {
   d5486:	b510      	push	{r4, lr}
   d5488:	4604      	mov	r4, r0
	rawMonth = intToBcd(value);
   d548a:	4608      	mov	r0, r1
   d548c:	f7ff ffe2 	bl	d5454 <_ZN12MCP79410Time8intToBcdEi>
   d5490:	72e0      	strb	r0, [r4, #11]
}
   d5492:	bd10      	pop	{r4, pc}

000d5494 <_ZN12MCP79410Time13setDayOfMonthEi>:
void MCP79410Time::setDayOfMonth(int value) {
   d5494:	b510      	push	{r4, lr}
   d5496:	4604      	mov	r4, r0
	rawDayOfMonth |= intToBcd(value);
   d5498:	4608      	mov	r0, r1
   d549a:	f7ff ffdb 	bl	d5454 <_ZN12MCP79410Time8intToBcdEi>
	rawDayOfMonth &= ~0x3f;
   d549e:	7b23      	ldrb	r3, [r4, #12]
   d54a0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
	rawDayOfMonth |= intToBcd(value);
   d54a4:	4318      	orrs	r0, r3
   d54a6:	7320      	strb	r0, [r4, #12]
}
   d54a8:	bd10      	pop	{r4, pc}

000d54aa <_ZN12MCP79410Time12setDayOfWeekEi>:
void MCP79410Time::setDayOfWeek(int value) {
   d54aa:	b510      	push	{r4, lr}
   d54ac:	4604      	mov	r4, r0
	rawDayOfWeek |= intToBcd(value + 1);
   d54ae:	1c48      	adds	r0, r1, #1
   d54b0:	f7ff ffd0 	bl	d5454 <_ZN12MCP79410Time8intToBcdEi>
	rawDayOfWeek &= ~0x7;
   d54b4:	7b63      	ldrb	r3, [r4, #13]
   d54b6:	f023 0307 	bic.w	r3, r3, #7
	rawDayOfWeek |= intToBcd(value + 1);
   d54ba:	4318      	orrs	r0, r3
   d54bc:	7360      	strb	r0, [r4, #13]
}
   d54be:	bd10      	pop	{r4, pc}

000d54c0 <_ZN12MCP79410Time7setHourEi>:
void MCP79410Time::setHour(int value) {
   d54c0:	b510      	push	{r4, lr}
   d54c2:	4604      	mov	r4, r0
	rawHour = intToBcd(value);
   d54c4:	4608      	mov	r0, r1
   d54c6:	f7ff ffc5 	bl	d5454 <_ZN12MCP79410Time8intToBcdEi>
   d54ca:	73a0      	strb	r0, [r4, #14]
}
   d54cc:	bd10      	pop	{r4, pc}

000d54ce <_ZN12MCP79410Time9setMinuteEi>:
void MCP79410Time::setMinute(int value) {
   d54ce:	b510      	push	{r4, lr}
   d54d0:	4604      	mov	r4, r0
	rawMinute = intToBcd(value);
   d54d2:	4608      	mov	r0, r1
   d54d4:	f7ff ffbe 	bl	d5454 <_ZN12MCP79410Time8intToBcdEi>
   d54d8:	73e0      	strb	r0, [r4, #15]
}
   d54da:	bd10      	pop	{r4, pc}

000d54dc <_ZN12MCP79410Time9setSecondEi>:
void MCP79410Time::setSecond(int value) {
   d54dc:	b510      	push	{r4, lr}
   d54de:	4604      	mov	r4, r0
	rawSecond |= intToBcd(value);
   d54e0:	4608      	mov	r0, r1
   d54e2:	f7ff ffb7 	bl	d5454 <_ZN12MCP79410Time8intToBcdEi>
	rawSecond &= ~0x7f;
   d54e6:	7c23      	ldrb	r3, [r4, #16]
   d54e8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
	rawSecond |= intToBcd(value);
   d54ec:	4318      	orrs	r0, r3
   d54ee:	7420      	strb	r0, [r4, #16]
}
   d54f0:	bd10      	pop	{r4, pc}

000d54f2 <_ZN12MCP79410Time12fromUnixTimeEx>:
void MCP79410Time::fromUnixTime(time_t time) {
   d54f2:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d54f4:	4604      	mov	r4, r0
	struct tm *tm = gmtime(&time);
   d54f6:	4668      	mov	r0, sp
void MCP79410Time::fromUnixTime(time_t time) {
   d54f8:	e9cd 2300 	strd	r2, r3, [sp]
	struct tm *tm = gmtime(&time);
   d54fc:	f007 f8ec 	bl	dc6d8 <gmtime>
   d5500:	4605      	mov	r5, r0
	setYear(tm->tm_year);
   d5502:	6941      	ldr	r1, [r0, #20]
   d5504:	4620      	mov	r0, r4
   d5506:	f7ff ffb3 	bl	d5470 <_ZN12MCP79410Time7setYearEi>
	setMonth(tm->tm_mon + 1);
   d550a:	6929      	ldr	r1, [r5, #16]
   d550c:	4620      	mov	r0, r4
   d550e:	3101      	adds	r1, #1
   d5510:	f7ff ffb9 	bl	d5486 <_ZN12MCP79410Time8setMonthEi>
	setDayOfMonth(tm->tm_mday);
   d5514:	68e9      	ldr	r1, [r5, #12]
   d5516:	4620      	mov	r0, r4
   d5518:	f7ff ffbc 	bl	d5494 <_ZN12MCP79410Time13setDayOfMonthEi>
	setDayOfWeek(tm->tm_wday);
   d551c:	69a9      	ldr	r1, [r5, #24]
   d551e:	4620      	mov	r0, r4
   d5520:	f7ff ffc3 	bl	d54aa <_ZN12MCP79410Time12setDayOfWeekEi>
	setHour(tm->tm_hour); // tm_hour is 0-23
   d5524:	68a9      	ldr	r1, [r5, #8]
   d5526:	4620      	mov	r0, r4
   d5528:	f7ff ffca 	bl	d54c0 <_ZN12MCP79410Time7setHourEi>
	setMinute(tm->tm_min); // tm_min is 0-59
   d552c:	6869      	ldr	r1, [r5, #4]
   d552e:	4620      	mov	r0, r4
   d5530:	f7ff ffcd 	bl	d54ce <_ZN12MCP79410Time9setMinuteEi>
	setSecond(tm->tm_sec < 60 ? tm->tm_sec : 59); // tm_sec is 0-61, inclusive, because of leap seconds.
   d5534:	6829      	ldr	r1, [r5, #0]
   d5536:	293b      	cmp	r1, #59	; 0x3b
   d5538:	bfa8      	it	ge
   d553a:	213b      	movge	r1, #59	; 0x3b
   d553c:	4620      	mov	r0, r4
   d553e:	f7ff ffcd 	bl	d54dc <_ZN12MCP79410Time9setSecondEi>
}
   d5542:	b003      	add	sp, #12
   d5544:	bd30      	pop	{r4, r5, pc}
	...

000d5548 <_ZN8MCP79410C1ER7TwoWire>:
MCP79410::MCP79410(TwoWire &wire) : wire(wire), sramObj(this), eepromObj(this) {
   d5548:	4a05      	ldr	r2, [pc, #20]	; (d5560 <_ZN8MCP79410C1ER7TwoWire+0x18>)
MCP79410MemoryBase::MCP79410MemoryBase(MCP79410 *parent) : parent(parent) {
   d554a:	6100      	str	r0, [r0, #16]
MCP79410::MCP79410(TwoWire &wire) : wire(wire), sramObj(this), eepromObj(this) {
   d554c:	e9c0 2100 	strd	r2, r1, [r0]
   d5550:	4a04      	ldr	r2, [pc, #16]	; (d5564 <_ZN8MCP79410C1ER7TwoWire+0x1c>)
   d5552:	6082      	str	r2, [r0, #8]
MCP79410SRAM::MCP79410SRAM(MCP79410 *parent) : MCP79410MemoryBase(parent) {
   d5554:	4a04      	ldr	r2, [pc, #16]	; (d5568 <_ZN8MCP79410C1ER7TwoWire+0x20>)
   d5556:	60c2      	str	r2, [r0, #12]
MCP79410EEPROM::MCP79410EEPROM(MCP79410 *parent) : MCP79410MemoryBase(parent) {
   d5558:	4a04      	ldr	r2, [pc, #16]	; (d556c <_ZN8MCP79410C1ER7TwoWire+0x24>)
MCP79410MemoryBase::MCP79410MemoryBase(MCP79410 *parent) : parent(parent) {
   d555a:	6180      	str	r0, [r0, #24]
MCP79410EEPROM::MCP79410EEPROM(MCP79410 *parent) : MCP79410MemoryBase(parent) {
   d555c:	6142      	str	r2, [r0, #20]
}
   d555e:	4770      	bx	lr
   d5560:	000dec04 	.word	0x000dec04
   d5564:	03010000 	.word	0x03010000
   d5568:	000debac 	.word	0x000debac
   d556c:	000debe0 	.word	0x000debe0

000d5570 <_ZNK8MCP7941010deviceReadEhhPhj>:
	return deviceWriteRegisterByte(addr, value);
}



int MCP79410::deviceRead(uint8_t i2cAddr, uint8_t addr, uint8_t *buf, size_t bufLen) const {
   d5570:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5574:	4604      	mov	r4, r0
   d5576:	460f      	mov	r7, r1
   d5578:	4690      	mov	r8, r2
   d557a:	4699      	mov	r9, r3
	// log.trace("deviceRead i2cAddr=%02x addr=%02x bufLen=%u", i2cAddr, addr, bufLen);

	int stat = 0;
	size_t offset = 0;
   d557c:	2600      	movs	r6, #0

	while(offset < bufLen) {
   d557e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d5580:	429e      	cmp	r6, r3
   d5582:	d231      	bcs.n	d55e8 <_ZNK8MCP7941010deviceReadEhhPhj+0x78>
		wire.beginTransmission(i2cAddr);
   d5584:	6860      	ldr	r0, [r4, #4]
   d5586:	4639      	mov	r1, r7
   d5588:	f002 fee3 	bl	d8352 <_ZN7TwoWire17beginTransmissionEh>
		wire.write(addr + offset);
   d558c:	eb08 0106 	add.w	r1, r8, r6
   d5590:	6860      	ldr	r0, [r4, #4]
   d5592:	f7ff fd97 	bl	d50c4 <_ZN7TwoWire5writeEj>
		stat = wire.endTransmission(false);
   d5596:	6860      	ldr	r0, [r4, #4]
   d5598:	2100      	movs	r1, #0
   d559a:	f002 fef9 	bl	d8390 <_ZN7TwoWire15endTransmissionEh>
		if (stat == 0) {
   d559e:	4605      	mov	r5, r0
   d55a0:	b9d0      	cbnz	r0, d55d8 <_ZNK8MCP7941010deviceReadEhhPhj+0x68>
			// Maximum read is 32 because of the limitation of the Wire implementation
			size_t count = bufLen - offset;
   d55a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
				count = 32;
			}

			// log.trace("deviceRead addr=%u count=%u", addr + offset, count);

			count = wire.requestFrom(i2cAddr, count, (uint8_t) true);
   d55a4:	6860      	ldr	r0, [r4, #4]
			size_t count = bufLen - offset;
   d55a6:	1b9a      	subs	r2, r3, r6
			count = wire.requestFrom(i2cAddr, count, (uint8_t) true);
   d55a8:	2a20      	cmp	r2, #32
   d55aa:	f04f 0301 	mov.w	r3, #1
   d55ae:	bf28      	it	cs
   d55b0:	2220      	movcs	r2, #32
   d55b2:	4639      	mov	r1, r7
   d55b4:	f002 febb 	bl	d832e <_ZN7TwoWire11requestFromEhjh>
   d55b8:	eb09 0b06 	add.w	fp, r9, r6
   d55bc:	4605      	mov	r5, r0
			for(size_t ii = 0; ii < count; ii++) {
   d55be:	eb0b 0a00 	add.w	sl, fp, r0
   d55c2:	45da      	cmp	sl, fp
   d55c4:	d006      	beq.n	d55d4 <_ZNK8MCP7941010deviceReadEhhPhj+0x64>
				buf[ii + offset] = wire.read();
   d55c6:	6860      	ldr	r0, [r4, #4]
   d55c8:	6803      	ldr	r3, [r0, #0]
   d55ca:	695b      	ldr	r3, [r3, #20]
   d55cc:	4798      	blx	r3
   d55ce:	f80b 0b01 	strb.w	r0, [fp], #1
			for(size_t ii = 0; ii < count; ii++) {
   d55d2:	e7f6      	b.n	d55c2 <_ZNK8MCP7941010deviceReadEhhPhj+0x52>
			}
			offset += count;
   d55d4:	442e      	add	r6, r5
	while(offset < bufLen) {
   d55d6:	e7d2      	b.n	d557e <_ZNK8MCP7941010deviceReadEhhPhj+0xe>
		}
		else {
			log.info("deviceRead failed stat=%d", stat);
   d55d8:	4602      	mov	r2, r0
   d55da:	4904      	ldr	r1, [pc, #16]	; (d55ec <_ZNK8MCP7941010deviceReadEhhPhj+0x7c>)
   d55dc:	4804      	ldr	r0, [pc, #16]	; (d55f0 <_ZNK8MCP7941010deviceReadEhhPhj+0x80>)
   d55de:	f7fe fdf3 	bl	d41c8 <_ZNK5spark6Logger4infoEPKcz>
			break;
		}
	}
	return stat;
}
   d55e2:	4628      	mov	r0, r5
   d55e4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d55e8:	2500      	movs	r5, #0
	return stat;
   d55ea:	e7fa      	b.n	d55e2 <_ZNK8MCP7941010deviceReadEhhPhj+0x72>
   d55ec:	000deb04 	.word	0x000deb04
   d55f0:	2003e45c 	.word	0x2003e45c

000d55f4 <_ZN12MCP79410SRAM8readDataEjPhj>:
bool MCP79410SRAM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d55f4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if ((addr + dataLen) > length()) {
   d55f8:	eb01 0803 	add.w	r8, r1, r3
bool MCP79410SRAM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d55fc:	461e      	mov	r6, r3
	if ((addr + dataLen) > length()) {
   d55fe:	6803      	ldr	r3, [r0, #0]
   d5600:	689b      	ldr	r3, [r3, #8]
bool MCP79410SRAM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d5602:	4605      	mov	r5, r0
   d5604:	460c      	mov	r4, r1
   d5606:	4617      	mov	r7, r2
	if ((addr + dataLen) > length()) {
   d5608:	4798      	blx	r3
   d560a:	4580      	cmp	r8, r0
   d560c:	d80d      	bhi.n	d562a <_ZN12MCP79410SRAM8readDataEjPhj+0x36>
	int stat = parent->deviceRead(MCP79410::REG_I2C_ADDR, MCP79410::REG_SRAM + addr, data, dataLen);
   d560e:	3420      	adds	r4, #32
   d5610:	6868      	ldr	r0, [r5, #4]
   d5612:	9600      	str	r6, [sp, #0]
   d5614:	463b      	mov	r3, r7
   d5616:	b2e2      	uxtb	r2, r4
   d5618:	216f      	movs	r1, #111	; 0x6f
   d561a:	f7ff ffa9 	bl	d5570 <_ZNK8MCP7941010deviceReadEhhPhj>
	return (stat == 0);
   d561e:	fab0 f080 	clz	r0, r0
   d5622:	0940      	lsrs	r0, r0, #5
}
   d5624:	b002      	add	sp, #8
   d5626:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return false;
   d562a:	2000      	movs	r0, #0
   d562c:	e7fa      	b.n	d5624 <_ZN12MCP79410SRAM8readDataEjPhj+0x30>

000d562e <_ZN14MCP79410EEPROM8readDataEjPhj>:
bool MCP79410EEPROM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d562e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if ((addr + dataLen) > length()) {
   d5632:	eb01 0803 	add.w	r8, r1, r3
bool MCP79410EEPROM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d5636:	461e      	mov	r6, r3
	if ((addr + dataLen) > length()) {
   d5638:	6803      	ldr	r3, [r0, #0]
   d563a:	689b      	ldr	r3, [r3, #8]
bool MCP79410EEPROM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d563c:	4604      	mov	r4, r0
   d563e:	460d      	mov	r5, r1
   d5640:	4617      	mov	r7, r2
	if ((addr + dataLen) > length()) {
   d5642:	4798      	blx	r3
   d5644:	4580      	cmp	r8, r0
   d5646:	d80c      	bhi.n	d5662 <_ZN14MCP79410EEPROM8readDataEjPhj+0x34>
	int stat = parent->deviceRead(MCP79410::EEPROM_I2C_ADDR, addr, data, dataLen);
   d5648:	6860      	ldr	r0, [r4, #4]
   d564a:	9600      	str	r6, [sp, #0]
   d564c:	463b      	mov	r3, r7
   d564e:	b2ea      	uxtb	r2, r5
   d5650:	2157      	movs	r1, #87	; 0x57
   d5652:	f7ff ff8d 	bl	d5570 <_ZNK8MCP7941010deviceReadEhhPhj>
	return (stat == 0);
   d5656:	fab0 f080 	clz	r0, r0
   d565a:	0940      	lsrs	r0, r0, #5
}
   d565c:	b002      	add	sp, #8
   d565e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return false;
   d5662:	2000      	movs	r0, #0
   d5664:	e7fa      	b.n	d565c <_ZN14MCP79410EEPROM8readDataEjPhj+0x2e>

000d5666 <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei.part.0>:
int MCP79410::deviceReadTime(uint8_t addr, MCP79410Time &time, int timeMode) const {
   d5666:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
		size_t numBytes = (timeMode == TIME_MODE_RTC) ? 7 : 6;
   d5668:	1e1e      	subs	r6, r3, #0
   d566a:	bf0c      	ite	eq
   d566c:	2307      	moveq	r3, #7
   d566e:	2306      	movne	r3, #6
		stat = deviceRead(REG_I2C_ADDR, addr, buf, numBytes);
   d5670:	9300      	str	r3, [sp, #0]
int MCP79410::deviceReadTime(uint8_t addr, MCP79410Time &time, int timeMode) const {
   d5672:	4614      	mov	r4, r2
		stat = deviceRead(REG_I2C_ADDR, addr, buf, numBytes);
   d5674:	ab02      	add	r3, sp, #8
   d5676:	460a      	mov	r2, r1
   d5678:	216f      	movs	r1, #111	; 0x6f
   d567a:	f7ff ff79 	bl	d5570 <_ZNK8MCP7941010deviceReadEhhPhj>
		if (stat == 0) {
   d567e:	4605      	mov	r5, r0
   d5680:	b9a8      	cbnz	r0, d56ae <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei.part.0+0x48>
			time.rawSecond = buf[0];
   d5682:	f89d 3008 	ldrb.w	r3, [sp, #8]
   d5686:	7423      	strb	r3, [r4, #16]
			time.rawMinute = buf[1];
   d5688:	f89d 3009 	ldrb.w	r3, [sp, #9]
   d568c:	73e3      	strb	r3, [r4, #15]
			time.rawHour = buf[2];
   d568e:	f89d 300a 	ldrb.w	r3, [sp, #10]
   d5692:	73a3      	strb	r3, [r4, #14]
			time.rawDayOfWeek = buf[3];
   d5694:	f89d 300b 	ldrb.w	r3, [sp, #11]
   d5698:	7363      	strb	r3, [r4, #13]
			time.rawDayOfMonth = buf[4];
   d569a:	f89d 300c 	ldrb.w	r3, [sp, #12]
   d569e:	7323      	strb	r3, [r4, #12]
			time.rawMonth = buf[5];
   d56a0:	f89d 300d 	ldrb.w	r3, [sp, #13]
   d56a4:	72e3      	strb	r3, [r4, #11]
			if (timeMode == TIME_MODE_RTC) {
   d56a6:	b92e      	cbnz	r6, d56b4 <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei.part.0+0x4e>
				time.rawYear = buf[6];
   d56a8:	f89d 300e 	ldrb.w	r3, [sp, #14]
   d56ac:	72a3      	strb	r3, [r4, #10]
}
   d56ae:	4628      	mov	r0, r5
   d56b0:	b004      	add	sp, #16
   d56b2:	bd70      	pop	{r4, r5, r6, pc}
				time.rawYear = MCP79410Time::intToBcd(Time.year());
   d56b4:	f005 f97a 	bl	da9ac <_ZN9TimeClass4yearEv>
   d56b8:	f7ff fecc 	bl	d5454 <_ZN12MCP79410Time8intToBcdEi>
   d56bc:	72a0      	strb	r0, [r4, #10]
	return stat;
   d56be:	e7f6      	b.n	d56ae <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei.part.0+0x48>

000d56c0 <_ZNK8MCP7941022deviceReadRegisterByteEh>:
uint8_t MCP79410::deviceReadRegisterByte(uint8_t addr) const {
   d56c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	if (deviceRead(REG_I2C_ADDR, addr, buf, 1) == 0) {
   d56c2:	2301      	movs	r3, #1
uint8_t MCP79410::deviceReadRegisterByte(uint8_t addr) const {
   d56c4:	460a      	mov	r2, r1
	if (deviceRead(REG_I2C_ADDR, addr, buf, 1) == 0) {
   d56c6:	9300      	str	r3, [sp, #0]
   d56c8:	216f      	movs	r1, #111	; 0x6f
   d56ca:	ab03      	add	r3, sp, #12
   d56cc:	f7ff ff50 	bl	d5570 <_ZNK8MCP7941010deviceReadEhhPhj>
   d56d0:	b920      	cbnz	r0, d56dc <_ZNK8MCP7941022deviceReadRegisterByteEh+0x1c>
		return buf[0];
   d56d2:	f89d 000c 	ldrb.w	r0, [sp, #12]
}
   d56d6:	b005      	add	sp, #20
   d56d8:	f85d fb04 	ldr.w	pc, [sp], #4
		return 0;
   d56dc:	2000      	movs	r0, #0
   d56de:	e7fa      	b.n	d56d6 <_ZNK8MCP7941022deviceReadRegisterByteEh+0x16>

000d56e0 <_ZNK8MCP7941020getOscillatorRunningEv>:
bool MCP79410::getOscillatorRunning() const {
   d56e0:	b508      	push	{r3, lr}
	return (deviceReadRegisterByte(REG_RTCWKDAY) & REG_RTCWKDAY_OSCRUN) != 0;
   d56e2:	2103      	movs	r1, #3
   d56e4:	f7ff ffec 	bl	d56c0 <_ZNK8MCP7941022deviceReadRegisterByteEh>
}
   d56e8:	f3c0 1040 	ubfx	r0, r0, #5, #1
   d56ec:	bd08      	pop	{r3, pc}

000d56ee <_ZNK8MCP7941010getRTCTimeER12MCP79410Time>:
bool MCP79410::getRTCTime(MCP79410Time &time) const {
   d56ee:	b538      	push	{r3, r4, r5, lr}
   d56f0:	2300      	movs	r3, #0
   d56f2:	460c      	mov	r4, r1
   d56f4:	460a      	mov	r2, r1
   d56f6:	4619      	mov	r1, r3
   d56f8:	4605      	mov	r5, r0
	if (timeMode == TIME_MODE_RTC || timeMode == TIME_MODE_ALARM) {
   d56fa:	f7ff ffb4 	bl	d5666 <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei.part.0>
	if (stat == 0) {
   d56fe:	b930      	cbnz	r0, d570e <_ZNK8MCP7941010getRTCTimeER12MCP79410Time+0x20>
		if (time.rawYear > 0 && getOscillatorRunning()) {
   d5700:	7aa3      	ldrb	r3, [r4, #10]
   d5702:	b123      	cbz	r3, d570e <_ZNK8MCP7941010getRTCTimeER12MCP79410Time+0x20>
   d5704:	4628      	mov	r0, r5
}
   d5706:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		if (time.rawYear > 0 && getOscillatorRunning()) {
   d570a:	f7ff bfe9 	b.w	d56e0 <_ZNK8MCP7941020getOscillatorRunningEv>
}
   d570e:	2000      	movs	r0, #0
   d5710:	bd38      	pop	{r3, r4, r5, pc}

000d5712 <_ZNK8MCP7941010getRTCTimeEv>:
time_t MCP79410::getRTCTime() const {
   d5712:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d5714:	4602      	mov	r2, r0
	MCP79410Time time;
   d5716:	a801      	add	r0, sp, #4
   d5718:	f7ff fe28 	bl	d536c <_ZN12MCP79410TimeC1Ev>
	bool bResult = getRTCTime(time);
   d571c:	a901      	add	r1, sp, #4
   d571e:	4610      	mov	r0, r2
   d5720:	f7ff ffe5 	bl	d56ee <_ZNK8MCP7941010getRTCTimeER12MCP79410Time>
	if (bResult) {
   d5724:	b128      	cbz	r0, d5732 <_ZNK8MCP7941010getRTCTimeEv+0x20>
		return time.toUnixTime();
   d5726:	a801      	add	r0, sp, #4
   d5728:	f7ff fe6c 	bl	d5404 <_ZNK12MCP79410Time10toUnixTimeEv>
}
   d572c:	b007      	add	sp, #28
   d572e:	f85d fb04 	ldr.w	pc, [sp], #4
		return 0;
   d5732:	2000      	movs	r0, #0
   d5734:	4601      	mov	r1, r0
   d5736:	e7f9      	b.n	d572c <_ZNK8MCP7941010getRTCTimeEv+0x1a>

000d5738 <_ZN8MCP794105setupEv>:
void MCP79410::setup() {
   d5738:	b5d0      	push	{r4, r6, r7, lr}
   d573a:	4604      	mov	r4, r0
   d573c:	b086      	sub	sp, #24
	wire.begin();
   d573e:	6840      	ldr	r0, [r0, #4]
   d5740:	f002 fdd8 	bl	d82f4 <_ZN7TwoWire5beginEv>
	if (!Time.isValid()) {
   d5744:	f005 f904 	bl	da950 <_ZN9TimeClass7isValidEv>
   d5748:	b9e8      	cbnz	r0, d5786 <_ZN8MCP794105setupEv+0x4e>
		if ((timeSyncMode & TIME_SYNC_RTC_TO_TIME) != 0) {
   d574a:	7ae3      	ldrb	r3, [r4, #11]
   d574c:	079b      	lsls	r3, r3, #30
   d574e:	d51a      	bpl.n	d5786 <_ZN8MCP794105setupEv+0x4e>
			time_t rtcTime = getRTCTime();
   d5750:	4620      	mov	r0, r4
   d5752:	f7ff ffde 	bl	d5712 <_ZNK8MCP7941010getRTCTimeEv>
   d5756:	4606      	mov	r6, r0
   d5758:	460f      	mov	r7, r1
			if (rtcTime != 0) {
   d575a:	ea56 0307 	orrs.w	r3, r6, r7
   d575e:	d012      	beq.n	d5786 <_ZN8MCP794105setupEv+0x4e>
				Time.setTime(rtcTime);
   d5760:	f004 fffc 	bl	da75c <_ZN9TimeClass7setTimeEx>
				log.info("set Time from RTC %s", Time.format(rtcTime, TIME_FORMAT_DEFAULT).c_str());
   d5764:	4b0a      	ldr	r3, [pc, #40]	; (d5790 <_ZN8MCP794105setupEv+0x58>)
   d5766:	490b      	ldr	r1, [pc, #44]	; (d5794 <_ZN8MCP794105setupEv+0x5c>)
   d5768:	681b      	ldr	r3, [r3, #0]
   d576a:	9300      	str	r3, [sp, #0]
   d576c:	4632      	mov	r2, r6
   d576e:	463b      	mov	r3, r7
   d5770:	a802      	add	r0, sp, #8
   d5772:	f005 f8ab 	bl	da8cc <_ZN9TimeClass6formatExPKc>
   d5776:	4808      	ldr	r0, [pc, #32]	; (d5798 <_ZN8MCP794105setupEv+0x60>)
   d5778:	9a02      	ldr	r2, [sp, #8]
   d577a:	4908      	ldr	r1, [pc, #32]	; (d579c <_ZN8MCP794105setupEv+0x64>)
   d577c:	f7fe fd24 	bl	d41c8 <_ZNK5spark6Logger4infoEPKcz>
   d5780:	a802      	add	r0, sp, #8
   d5782:	f004 fad1 	bl	d9d28 <_ZN6StringD1Ev>
	setupDone = true;
   d5786:	2301      	movs	r3, #1
   d5788:	7223      	strb	r3, [r4, #8]
}
   d578a:	b006      	add	sp, #24
   d578c:	bdd0      	pop	{r4, r6, r7, pc}
   d578e:	bf00      	nop
   d5790:	2003e110 	.word	0x2003e110
   d5794:	2003e694 	.word	0x2003e694
   d5798:	2003e45c 	.word	0x2003e45c
   d579c:	000deb1e 	.word	0x000deb1e

000d57a0 <_ZN8MCP7941011deviceWriteEhhPKhj>:

int MCP79410::deviceWrite(uint8_t i2cAddr, uint8_t addr, const uint8_t *buf, size_t bufLen) {
   d57a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d57a4:	4606      	mov	r6, r0
   d57a6:	4688      	mov	r8, r1
   d57a8:	4691      	mov	r9, r2
   d57aa:	469a      	mov	sl, r3
	// log.trace("deviceWrite i2cAddr=%02x addr=%02x bufLen=%u", i2cAddr, addr, bufLen);

	int stat = 0;
	size_t offset = 0;
   d57ac:	2500      	movs	r5, #0

	while(offset < bufLen) {
   d57ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d57b0:	429d      	cmp	r5, r3
   d57b2:	d229      	bcs.n	d5808 <_ZN8MCP7941011deviceWriteEhhPKhj+0x68>
		wire.beginTransmission(i2cAddr);
   d57b4:	6870      	ldr	r0, [r6, #4]
   d57b6:	4641      	mov	r1, r8
   d57b8:	f002 fdcb 	bl	d8352 <_ZN7TwoWire17beginTransmissionEh>
		wire.write(addr + offset);
   d57bc:	6870      	ldr	r0, [r6, #4]
   d57be:	eb09 0105 	add.w	r1, r9, r5
   d57c2:	f7ff fc7f 	bl	d50c4 <_ZN7TwoWire5writeEj>

		// Maximum write is 31, not 32, because of the address byte
		size_t count = bufLen - offset;
   d57c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d57c8:	1b5f      	subs	r7, r3, r5
		if (count > 31) {
   d57ca:	2f1f      	cmp	r7, #31
   d57cc:	bf28      	it	cs
   d57ce:	271f      	movcs	r7, #31
			count = 31;
		}

		// log.trace("deviceWrite addr=%u count=%u", addr + offset, count);

		for(size_t ii = 0; ii < count; ii++) {
   d57d0:	eb0a 0405 	add.w	r4, sl, r5
   d57d4:	eb07 0b04 	add.w	fp, r7, r4
			wire.write(buf[ii + offset]);
   d57d8:	6870      	ldr	r0, [r6, #4]
   d57da:	f814 1b01 	ldrb.w	r1, [r4], #1
   d57de:	6802      	ldr	r2, [r0, #0]
   d57e0:	6892      	ldr	r2, [r2, #8]
   d57e2:	4790      	blx	r2
		for(size_t ii = 0; ii < count; ii++) {
   d57e4:	45a3      	cmp	fp, r4
   d57e6:	d1f7      	bne.n	d57d8 <_ZN8MCP7941011deviceWriteEhhPKhj+0x38>
		}

		stat = wire.endTransmission(true);
   d57e8:	6870      	ldr	r0, [r6, #4]
   d57ea:	2101      	movs	r1, #1
   d57ec:	f002 fdd0 	bl	d8390 <_ZN7TwoWire15endTransmissionEh>
		if (stat != 0) {
   d57f0:	4604      	mov	r4, r0
   d57f2:	b138      	cbz	r0, d5804 <_ZN8MCP7941011deviceWriteEhhPKhj+0x64>
			log.info("deviceWrite failed stat=%d", stat);
   d57f4:	4602      	mov	r2, r0
   d57f6:	4905      	ldr	r1, [pc, #20]	; (d580c <_ZN8MCP7941011deviceWriteEhhPKhj+0x6c>)
   d57f8:	4805      	ldr	r0, [pc, #20]	; (d5810 <_ZN8MCP7941011deviceWriteEhhPKhj+0x70>)
   d57fa:	f7fe fce5 	bl	d41c8 <_ZNK5spark6Logger4infoEPKcz>

		offset += count;
	}

	return stat;
}
   d57fe:	4620      	mov	r0, r4
   d5800:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		offset += count;
   d5804:	443d      	add	r5, r7
	while(offset < bufLen) {
   d5806:	e7d2      	b.n	d57ae <_ZN8MCP7941011deviceWriteEhhPKhj+0xe>
   d5808:	2400      	movs	r4, #0
	return stat;
   d580a:	e7f8      	b.n	d57fe <_ZN8MCP7941011deviceWriteEhhPKhj+0x5e>
   d580c:	000deb33 	.word	0x000deb33
   d5810:	2003e45c 	.word	0x2003e45c

000d5814 <_ZN12MCP79410SRAM9writeDataEjPKhj>:
bool MCP79410SRAM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d5814:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if ((addr + dataLen) > length()) {
   d5818:	eb01 0803 	add.w	r8, r1, r3
bool MCP79410SRAM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d581c:	461e      	mov	r6, r3
	if ((addr + dataLen) > length()) {
   d581e:	6803      	ldr	r3, [r0, #0]
   d5820:	689b      	ldr	r3, [r3, #8]
bool MCP79410SRAM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d5822:	4605      	mov	r5, r0
   d5824:	460c      	mov	r4, r1
   d5826:	4617      	mov	r7, r2
	if ((addr + dataLen) > length()) {
   d5828:	4798      	blx	r3
   d582a:	4580      	cmp	r8, r0
   d582c:	d80d      	bhi.n	d584a <_ZN12MCP79410SRAM9writeDataEjPKhj+0x36>
	int stat = parent->deviceWrite(MCP79410::REG_I2C_ADDR, MCP79410::REG_SRAM + addr, data, dataLen);
   d582e:	3420      	adds	r4, #32
   d5830:	6868      	ldr	r0, [r5, #4]
   d5832:	9600      	str	r6, [sp, #0]
   d5834:	463b      	mov	r3, r7
   d5836:	b2e2      	uxtb	r2, r4
   d5838:	216f      	movs	r1, #111	; 0x6f
   d583a:	f7ff ffb1 	bl	d57a0 <_ZN8MCP7941011deviceWriteEhhPKhj>
	return (stat == 0);
   d583e:	fab0 f080 	clz	r0, r0
   d5842:	0940      	lsrs	r0, r0, #5
}
   d5844:	b002      	add	sp, #8
   d5846:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return false;
   d584a:	2000      	movs	r0, #0
   d584c:	e7fa      	b.n	d5844 <_ZN12MCP79410SRAM9writeDataEjPKhj+0x30>

000d584e <_ZN8MCP7941018deviceWriteRTCTimeEhRK12MCP79410Time>:
int MCP79410::deviceWriteRTCTime(uint8_t addr, const MCP79410Time &time) {
   d584e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	buf[0] = time.rawSecond;
   d5850:	7c13      	ldrb	r3, [r2, #16]
   d5852:	f88d 3008 	strb.w	r3, [sp, #8]
	buf[1] = time.rawMinute;
   d5856:	7bd3      	ldrb	r3, [r2, #15]
   d5858:	f88d 3009 	strb.w	r3, [sp, #9]
	buf[2] = time.rawHour;
   d585c:	7b93      	ldrb	r3, [r2, #14]
   d585e:	f88d 300a 	strb.w	r3, [sp, #10]
	buf[3] = time.rawDayOfWeek;
   d5862:	7b53      	ldrb	r3, [r2, #13]
   d5864:	f88d 300b 	strb.w	r3, [sp, #11]
	buf[4] = time.rawDayOfMonth;
   d5868:	7b13      	ldrb	r3, [r2, #12]
   d586a:	f88d 300c 	strb.w	r3, [sp, #12]
	buf[5] = time.rawMonth;
   d586e:	7ad3      	ldrb	r3, [r2, #11]
   d5870:	f88d 300d 	strb.w	r3, [sp, #13]
	buf[6] = time.rawYear;
   d5874:	7a93      	ldrb	r3, [r2, #10]
   d5876:	f88d 300e 	strb.w	r3, [sp, #14]
	return deviceWrite(REG_I2C_ADDR, addr, buf, sizeof(buf));
   d587a:	2307      	movs	r3, #7
   d587c:	9300      	str	r3, [sp, #0]
   d587e:	460a      	mov	r2, r1
   d5880:	ab02      	add	r3, sp, #8
   d5882:	216f      	movs	r1, #111	; 0x6f
   d5884:	f7ff ff8c 	bl	d57a0 <_ZN8MCP7941011deviceWriteEhhPKhj>
}
   d5888:	b005      	add	sp, #20
   d588a:	f85d fb04 	ldr.w	pc, [sp], #4

000d588e <_ZN8MCP7941010setRTCTimeEx>:
bool MCP79410::setRTCTime(time_t unixTime) {
   d588e:	b510      	push	{r4, lr}
   d5890:	b088      	sub	sp, #32
   d5892:	4604      	mov	r4, r0
	MCP79410Time time;
   d5894:	a803      	add	r0, sp, #12
bool MCP79410::setRTCTime(time_t unixTime) {
   d5896:	9301      	str	r3, [sp, #4]
	MCP79410Time time;
   d5898:	f7ff fd68 	bl	d536c <_ZN12MCP79410TimeC1Ev>
	time.fromUnixTime(unixTime);
   d589c:	9b01      	ldr	r3, [sp, #4]
   d589e:	a803      	add	r0, sp, #12
   d58a0:	f7ff fe27 	bl	d54f2 <_ZN12MCP79410Time12fromUnixTimeEx>
	time.rawSecond |= REG_DATE_RTCSEC_ST;
   d58a4:	f89d 301c 	ldrb.w	r3, [sp, #28]
	if (batteryEnable) {
   d58a8:	7aa2      	ldrb	r2, [r4, #10]
	time.rawSecond |= REG_DATE_RTCSEC_ST;
   d58aa:	f063 037f 	orn	r3, r3, #127	; 0x7f
   d58ae:	f88d 301c 	strb.w	r3, [sp, #28]
	if (batteryEnable) {
   d58b2:	f89d 3019 	ldrb.w	r3, [sp, #25]
   d58b6:	b16a      	cbz	r2, d58d4 <_ZN8MCP7941010setRTCTimeEx+0x46>
		time.rawDayOfWeek |= REG_RTCWKDAY_VBATEN;
   d58b8:	f043 0308 	orr.w	r3, r3, #8
	return deviceWriteRTCTime(REG_DATE_TIME, time) == 0;
   d58bc:	aa03      	add	r2, sp, #12
   d58be:	2100      	movs	r1, #0
   d58c0:	4620      	mov	r0, r4
   d58c2:	f88d 3019 	strb.w	r3, [sp, #25]
   d58c6:	f7ff ffc2 	bl	d584e <_ZN8MCP7941018deviceWriteRTCTimeEhRK12MCP79410Time>
}
   d58ca:	fab0 f080 	clz	r0, r0
   d58ce:	0940      	lsrs	r0, r0, #5
   d58d0:	b008      	add	sp, #32
   d58d2:	bd10      	pop	{r4, pc}
		time.rawDayOfWeek &= ~REG_RTCWKDAY_VBATEN;
   d58d4:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
   d58d8:	e7f0      	b.n	d58bc <_ZN8MCP7941010setRTCTimeEx+0x2e>
	...

000d58dc <_ZN8MCP7941015setRTCFromCloudEv>:
bool MCP79410::setRTCFromCloud() {
   d58dc:	b5f0      	push	{r4, r5, r6, r7, lr}
   d58de:	b087      	sub	sp, #28
   d58e0:	4605      	mov	r5, r0
	if (Time.isValid()) {
   d58e2:	f005 f835 	bl	da950 <_ZN9TimeClass7isValidEv>
   d58e6:	4604      	mov	r4, r0
   d58e8:	b1e8      	cbz	r0, d5926 <_ZN8MCP7941015setRTCFromCloudEv+0x4a>
		time_t now = Time.now();
   d58ea:	f005 f84e 	bl	da98a <_ZN9TimeClass3nowEv>
   d58ee:	17c7      	asrs	r7, r0, #31
		bResult = setRTCTime(now);
   d58f0:	4602      	mov	r2, r0
		time_t now = Time.now();
   d58f2:	4606      	mov	r6, r0
		bResult = setRTCTime(now);
   d58f4:	463b      	mov	r3, r7
   d58f6:	4628      	mov	r0, r5
   d58f8:	f7ff ffc9 	bl	d588e <_ZN8MCP7941010setRTCTimeEx>
		log.info("set RTC from cloud %s", Time.format(now, TIME_FORMAT_DEFAULT).c_str());
   d58fc:	4b0c      	ldr	r3, [pc, #48]	; (d5930 <_ZN8MCP7941015setRTCFromCloudEv+0x54>)
   d58fe:	490d      	ldr	r1, [pc, #52]	; (d5934 <_ZN8MCP7941015setRTCFromCloudEv+0x58>)
   d5900:	681b      	ldr	r3, [r3, #0]
   d5902:	9300      	str	r3, [sp, #0]
   d5904:	4632      	mov	r2, r6
   d5906:	463b      	mov	r3, r7
		bResult = setRTCTime(now);
   d5908:	4604      	mov	r4, r0
		log.info("set RTC from cloud %s", Time.format(now, TIME_FORMAT_DEFAULT).c_str());
   d590a:	a802      	add	r0, sp, #8
   d590c:	f004 ffde 	bl	da8cc <_ZN9TimeClass6formatExPKc>
   d5910:	4809      	ldr	r0, [pc, #36]	; (d5938 <_ZN8MCP7941015setRTCFromCloudEv+0x5c>)
   d5912:	9a02      	ldr	r2, [sp, #8]
   d5914:	4909      	ldr	r1, [pc, #36]	; (d593c <_ZN8MCP7941015setRTCFromCloudEv+0x60>)
   d5916:	f7fe fc57 	bl	d41c8 <_ZNK5spark6Logger4infoEPKcz>
   d591a:	a802      	add	r0, sp, #8
   d591c:	f004 fa04 	bl	d9d28 <_ZN6StringD1Ev>
}
   d5920:	4620      	mov	r0, r4
   d5922:	b007      	add	sp, #28
   d5924:	bdf0      	pop	{r4, r5, r6, r7, pc}
		log.info("cloud time not valid");
   d5926:	4906      	ldr	r1, [pc, #24]	; (d5940 <_ZN8MCP7941015setRTCFromCloudEv+0x64>)
   d5928:	4803      	ldr	r0, [pc, #12]	; (d5938 <_ZN8MCP7941015setRTCFromCloudEv+0x5c>)
   d592a:	f7fe fc4d 	bl	d41c8 <_ZNK5spark6Logger4infoEPKcz>
   d592e:	e7f7      	b.n	d5920 <_ZN8MCP7941015setRTCFromCloudEv+0x44>
   d5930:	2003e110 	.word	0x2003e110
   d5934:	2003e694 	.word	0x2003e694
   d5938:	2003e45c 	.word	0x2003e45c
   d593c:	000deb4e 	.word	0x000deb4e
   d5940:	000deb64 	.word	0x000deb64

000d5944 <_ZN8MCP794104loopEv>:
void MCP79410::loop() {
   d5944:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (!timeSet) {
   d5946:	7a45      	ldrb	r5, [r0, #9]
void MCP79410::loop() {
   d5948:	4604      	mov	r4, r0
	if (!timeSet) {
   d594a:	b99d      	cbnz	r5, d5974 <_ZN8MCP794104loopEv+0x30>
		if (Time.isValid()) {
   d594c:	f005 f800 	bl	da950 <_ZN9TimeClass7isValidEv>
   d5950:	b180      	cbz	r0, d5974 <_ZN8MCP794104loopEv+0x30>
        tm = 0;
   d5952:	2200      	movs	r2, #0
   d5954:	2300      	movs	r3, #0
        return spark_sync_time_last(nullptr, &tm);
   d5956:	4669      	mov	r1, sp
   d5958:	4628      	mov	r0, r5
        tm = 0;
   d595a:	e9cd 2300 	strd	r2, r3, [sp]
        return spark_sync_time_last(nullptr, &tm);
   d595e:	f001 ff81 	bl	d7864 <spark_sync_time_last>
			if (lastSync != 0) {
   d5962:	b138      	cbz	r0, d5974 <_ZN8MCP794104loopEv+0x30>
				if ((timeSyncMode & TIME_SYNC_CLOUD_TO_RTC) != 0) {
   d5964:	7ae3      	ldrb	r3, [r4, #11]
   d5966:	07db      	lsls	r3, r3, #31
   d5968:	d502      	bpl.n	d5970 <_ZN8MCP794104loopEv+0x2c>
					setRTCFromCloud();
   d596a:	4620      	mov	r0, r4
   d596c:	f7ff ffb6 	bl	d58dc <_ZN8MCP7941015setRTCFromCloudEv>
				timeSet = true;
   d5970:	2301      	movs	r3, #1
   d5972:	7263      	strb	r3, [r4, #9]
}
   d5974:	b003      	add	sp, #12
   d5976:	bd30      	pop	{r4, r5, pc}

000d5978 <_ZN8MCP7941013waitForEEPROMEv>:
	}

	return stat;
}

void MCP79410::waitForEEPROM() {
   d5978:	b538      	push	{r3, r4, r5, lr}
   d597a:	4604      	mov	r4, r0
   d597c:	2532      	movs	r5, #50	; 0x32
	for(size_t tries = 0; tries < 50; tries++) {
		wire.beginTransmission(EEPROM_I2C_ADDR);
   d597e:	6860      	ldr	r0, [r4, #4]
   d5980:	2157      	movs	r1, #87	; 0x57
   d5982:	f002 fce6 	bl	d8352 <_ZN7TwoWire17beginTransmissionEh>
		int stat = wire.endTransmission(true);
   d5986:	6860      	ldr	r0, [r4, #4]
   d5988:	2101      	movs	r1, #1
   d598a:	f002 fd01 	bl	d8390 <_ZN7TwoWire15endTransmissionEh>
		if (stat == 0) {
   d598e:	b108      	cbz	r0, d5994 <_ZN8MCP7941013waitForEEPROMEv+0x1c>
	for(size_t tries = 0; tries < 50; tries++) {
   d5990:	3d01      	subs	r5, #1
   d5992:	d1f4      	bne.n	d597e <_ZN8MCP7941013waitForEEPROMEv+0x6>
			// log.trace("deviceWriteEEPROM got ack after %u tries", tries);
			break;
		}
	}
}
   d5994:	bd38      	pop	{r3, r4, r5, pc}
	...

000d5998 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj>:
int MCP79410::deviceWriteEEPROM(uint8_t addr, const uint8_t *buf, size_t bufLen) {
   d5998:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d599c:	4604      	mov	r4, r0
   d599e:	460f      	mov	r7, r1
   d59a0:	4616      	mov	r6, r2
   d59a2:	eb02 0803 	add.w	r8, r2, r3
	while(offset < bufLen) {
   d59a6:	45b0      	cmp	r8, r6
   d59a8:	d020      	beq.n	d59ec <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x54>
		wire.beginTransmission(EEPROM_I2C_ADDR);
   d59aa:	6860      	ldr	r0, [r4, #4]
   d59ac:	2157      	movs	r1, #87	; 0x57
   d59ae:	f002 fcd0 	bl	d8352 <_ZN7TwoWire17beginTransmissionEh>
		wire.write(addr + offset);
   d59b2:	4639      	mov	r1, r7
   d59b4:	6860      	ldr	r0, [r4, #4]
   d59b6:	f7ff fb85 	bl	d50c4 <_ZN7TwoWire5writeEj>
			wire.write(buf[ii + offset]);
   d59ba:	6860      	ldr	r0, [r4, #4]
   d59bc:	f816 1b01 	ldrb.w	r1, [r6], #1
   d59c0:	6803      	ldr	r3, [r0, #0]
   d59c2:	689b      	ldr	r3, [r3, #8]
   d59c4:	4798      	blx	r3
		stat = wire.endTransmission(true);
   d59c6:	6860      	ldr	r0, [r4, #4]
   d59c8:	2101      	movs	r1, #1
   d59ca:	f002 fce1 	bl	d8390 <_ZN7TwoWire15endTransmissionEh>
		if (stat != 0) {
   d59ce:	3701      	adds	r7, #1
   d59d0:	4605      	mov	r5, r0
   d59d2:	b138      	cbz	r0, d59e4 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x4c>
			log.info("deviceWriteEEPROM failed stat=%d", stat);
   d59d4:	4602      	mov	r2, r0
   d59d6:	4906      	ldr	r1, [pc, #24]	; (d59f0 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x58>)
   d59d8:	4806      	ldr	r0, [pc, #24]	; (d59f4 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x5c>)
   d59da:	f7fe fbf5 	bl	d41c8 <_ZNK5spark6Logger4infoEPKcz>
}
   d59de:	4628      	mov	r0, r5
   d59e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		waitForEEPROM();
   d59e4:	4620      	mov	r0, r4
   d59e6:	f7ff ffc7 	bl	d5978 <_ZN8MCP7941013waitForEEPROMEv>
	while(offset < bufLen) {
   d59ea:	e7dc      	b.n	d59a6 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0xe>
   d59ec:	2500      	movs	r5, #0
	return stat;
   d59ee:	e7f6      	b.n	d59de <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x46>
   d59f0:	000deb79 	.word	0x000deb79
   d59f4:	2003e45c 	.word	0x2003e45c

000d59f8 <_ZN14MCP79410EEPROM9writeDataEjPKhj>:
bool MCP79410EEPROM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d59f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if ((addr + dataLen) > length()) {
   d59fa:	18cf      	adds	r7, r1, r3
bool MCP79410EEPROM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d59fc:	461e      	mov	r6, r3
	if ((addr + dataLen) > length()) {
   d59fe:	6803      	ldr	r3, [r0, #0]
bool MCP79410EEPROM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d5a00:	9201      	str	r2, [sp, #4]
	if ((addr + dataLen) > length()) {
   d5a02:	689b      	ldr	r3, [r3, #8]
bool MCP79410EEPROM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d5a04:	4604      	mov	r4, r0
   d5a06:	460d      	mov	r5, r1
	if ((addr + dataLen) > length()) {
   d5a08:	4798      	blx	r3
   d5a0a:	4287      	cmp	r7, r0
   d5a0c:	d80a      	bhi.n	d5a24 <_ZN14MCP79410EEPROM9writeDataEjPKhj+0x2c>
	int stat = parent->deviceWriteEEPROM(addr, data, dataLen);
   d5a0e:	9a01      	ldr	r2, [sp, #4]
   d5a10:	6860      	ldr	r0, [r4, #4]
   d5a12:	4633      	mov	r3, r6
   d5a14:	b2e9      	uxtb	r1, r5
   d5a16:	f7ff ffbf 	bl	d5998 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj>
	return (stat == 0);
   d5a1a:	fab0 f080 	clz	r0, r0
   d5a1e:	0940      	lsrs	r0, r0, #5
}
   d5a20:	b003      	add	sp, #12
   d5a22:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return false;
   d5a24:	2000      	movs	r0, #0
   d5a26:	e7fb      	b.n	d5a20 <_ZN14MCP79410EEPROM9writeDataEjPKhj+0x28>

000d5a28 <_GLOBAL__sub_I__ZN18MCP79410MemoryBaseC2EP8MCP79410>:
        name_(name) {
   d5a28:	4b01      	ldr	r3, [pc, #4]	; (d5a30 <_GLOBAL__sub_I__ZN18MCP79410MemoryBaseC2EP8MCP79410+0x8>)
   d5a2a:	4a02      	ldr	r2, [pc, #8]	; (d5a34 <_GLOBAL__sub_I__ZN18MCP79410MemoryBaseC2EP8MCP79410+0xc>)
   d5a2c:	601a      	str	r2, [r3, #0]
}
   d5a2e:	4770      	bx	lr
   d5a30:	2003e45c 	.word	0x2003e45c
   d5a34:	000deb9a 	.word	0x000deb9a

000d5a38 <_ZNSt17_Function_handlerIFP11UbiProtocolvEPS2_E9_M_invokeERKSt9_Any_data>:

    public:
      static _Res
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      {
	return (*_Base::_M_get_pointer(__functor))(
   d5a38:	6803      	ldr	r3, [r0, #0]
   d5a3a:	4718      	bx	r3

000d5a3c <_ZNSt14_Function_base13_Base_managerIPFP11UbiProtocolvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
	  switch (__op)
   d5a3c:	2a01      	cmp	r2, #1
   d5a3e:	d003      	beq.n	d5a48 <_ZNSt14_Function_base13_Base_managerIPFP11UbiProtocolvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0xc>
   d5a40:	2a02      	cmp	r2, #2
   d5a42:	d003      	beq.n	d5a4c <_ZNSt14_Function_base13_Base_managerIPFP11UbiProtocolvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x10>
	}
   d5a44:	2000      	movs	r0, #0
   d5a46:	4770      	bx	lr
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d5a48:	6001      	str	r1, [r0, #0]
	      break;
   d5a4a:	e7fb      	b.n	d5a44 <_ZNSt14_Function_base13_Base_managerIPFP11UbiProtocolvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x8>
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d5a4c:	680b      	ldr	r3, [r1, #0]
   d5a4e:	6003      	str	r3, [r0, #0]
	}
   d5a50:	e7f8      	b.n	d5a44 <_ZNSt14_Function_base13_Base_managerIPFP11UbiProtocolvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x8>
	...

000d5a54 <_Z10builderTcpv>:
  mapProtocol::iterator i = command_list.find(_iot_protocol);
  UbiProtocol* ubiBuilder = (i->second)();
  return ubiBuilder;
}

UbiProtocol* builderTcp() {
   d5a54:	b513      	push	{r0, r1, r4, lr}
  UbiProtocol* tcpInstance = new UbiTCP(_host, UBIDOTS_TCP_PORT, USER_AGENT, _token);
   d5a56:	201c      	movs	r0, #28
   d5a58:	f7fe fb1d 	bl	d4096 <_Znwj>
   d5a5c:	4604      	mov	r4, r0
   d5a5e:	b148      	cbz	r0, d5a74 <_Z10builderTcpv+0x20>
   d5a60:	4b06      	ldr	r3, [pc, #24]	; (d5a7c <_Z10builderTcpv+0x28>)
   d5a62:	4907      	ldr	r1, [pc, #28]	; (d5a80 <_Z10builderTcpv+0x2c>)
   d5a64:	681b      	ldr	r3, [r3, #0]
   d5a66:	9300      	str	r3, [sp, #0]
   d5a68:	6809      	ldr	r1, [r1, #0]
   d5a6a:	4b06      	ldr	r3, [pc, #24]	; (d5a84 <_Z10builderTcpv+0x30>)
   d5a6c:	f242 3234 	movw	r2, #9012	; 0x2334
   d5a70:	f000 fffa 	bl	d6a68 <_ZN6UbiTCPC1EPKciS1_S1_>
  return tcpInstance;
}
   d5a74:	4620      	mov	r0, r4
   d5a76:	b002      	add	sp, #8
   d5a78:	bd10      	pop	{r4, pc}
   d5a7a:	bf00      	nop
   d5a7c:	2003e4e8 	.word	0x2003e4e8
   d5a80:	2003e4e4 	.word	0x2003e4e4
   d5a84:	000dec0c 	.word	0x000dec0c

000d5a88 <_Z11builderHttpv>:

UbiProtocol* builderHttp() {
   d5a88:	b513      	push	{r0, r1, r4, lr}
  UbiProtocol* httpInstance = new UbiHTTP(_host, UBIDOTS_HTTP_PORT, USER_AGENT, _token);
   d5a8a:	2020      	movs	r0, #32
   d5a8c:	f7fe fb03 	bl	d4096 <_Znwj>
   d5a90:	4604      	mov	r4, r0
   d5a92:	b140      	cbz	r0, d5aa6 <_Z11builderHttpv+0x1e>
   d5a94:	4b05      	ldr	r3, [pc, #20]	; (d5aac <_Z11builderHttpv+0x24>)
   d5a96:	4906      	ldr	r1, [pc, #24]	; (d5ab0 <_Z11builderHttpv+0x28>)
   d5a98:	681b      	ldr	r3, [r3, #0]
   d5a9a:	9300      	str	r3, [sp, #0]
   d5a9c:	6809      	ldr	r1, [r1, #0]
   d5a9e:	4b05      	ldr	r3, [pc, #20]	; (d5ab4 <_Z11builderHttpv+0x2c>)
   d5aa0:	2250      	movs	r2, #80	; 0x50
   d5aa2:	f000 fa15 	bl	d5ed0 <_ZN7UbiHTTPC1EPKciS1_S1_>
  return httpInstance;
}
   d5aa6:	4620      	mov	r0, r4
   d5aa8:	b002      	add	sp, #8
   d5aaa:	bd10      	pop	{r4, pc}
   d5aac:	2003e4e8 	.word	0x2003e4e8
   d5ab0:	2003e4e4 	.word	0x2003e4e4
   d5ab4:	000dec0c 	.word	0x000dec0c

000d5ab8 <_Z10builderUdpv>:

UbiProtocol* builderUdp() {
   d5ab8:	b513      	push	{r0, r1, r4, lr}
  UbiProtocol* udpInstance = new UbiUDP(_host, UBIDOTS_TCP_PORT, USER_AGENT, _token);
   d5aba:	201c      	movs	r0, #28
   d5abc:	f7fe faeb 	bl	d4096 <_Znwj>
   d5ac0:	4604      	mov	r4, r0
   d5ac2:	b148      	cbz	r0, d5ad8 <_Z10builderUdpv+0x20>
   d5ac4:	4b06      	ldr	r3, [pc, #24]	; (d5ae0 <_Z10builderUdpv+0x28>)
   d5ac6:	4907      	ldr	r1, [pc, #28]	; (d5ae4 <_Z10builderUdpv+0x2c>)
   d5ac8:	681b      	ldr	r3, [r3, #0]
   d5aca:	9300      	str	r3, [sp, #0]
   d5acc:	6809      	ldr	r1, [r1, #0]
   d5ace:	4b06      	ldr	r3, [pc, #24]	; (d5ae8 <_Z10builderUdpv+0x30>)
   d5ad0:	f242 3234 	movw	r2, #9012	; 0x2334
   d5ad4:	f001 fb26 	bl	d7124 <_ZN6UbiUDPC1EPKciS1_S1_>
  return udpInstance;
}
   d5ad8:	4620      	mov	r0, r4
   d5ada:	b002      	add	sp, #8
   d5adc:	bd10      	pop	{r4, pc}
   d5ade:	bf00      	nop
   d5ae0:	2003e4e8 	.word	0x2003e4e8
   d5ae4:	2003e4e4 	.word	0x2003e4e4
   d5ae8:	000dec0c 	.word	0x000dec0c

000d5aec <_Z15builderParticlev>:

UbiProtocol* builderParticle() {
   d5aec:	b513      	push	{r0, r1, r4, lr}
  UbiProtocol* particleInstance = new UbiParticle(_host, NULL, NULL, _token);
   d5aee:	2014      	movs	r0, #20
   d5af0:	f7fe fad1 	bl	d4096 <_Znwj>
   d5af4:	4604      	mov	r4, r0
   d5af6:	b140      	cbz	r0, d5b0a <_Z15builderParticlev+0x1e>
   d5af8:	4b05      	ldr	r3, [pc, #20]	; (d5b10 <_Z15builderParticlev+0x24>)
   d5afa:	4906      	ldr	r1, [pc, #24]	; (d5b14 <_Z15builderParticlev+0x28>)
   d5afc:	681b      	ldr	r3, [r3, #0]
   d5afe:	9300      	str	r3, [sp, #0]
   d5b00:	2300      	movs	r3, #0
   d5b02:	6809      	ldr	r1, [r1, #0]
   d5b04:	461a      	mov	r2, r3
   d5b06:	f000 fd03 	bl	d6510 <_ZN11UbiParticleC1EPKciS1_S1_>
  return particleInstance;
}
   d5b0a:	4620      	mov	r0, r4
   d5b0c:	b002      	add	sp, #8
   d5b0e:	bd10      	pop	{r4, pc}
   d5b10:	2003e4e8 	.word	0x2003e4e8
   d5b14:	2003e4e4 	.word	0x2003e4e4

000d5b18 <_ZNSt8functionIFP11UbiProtocolvEEaSIPS2_EENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSB_JEEEE5valueERS3_E4typeEOS9_.isra.0>:
       *  If @a __f is a non-NULL function pointer or an object of type @c
       *  reference_wrapper<F>, this function will not throw.
       */
      template<typename _Functor>
	_Requires<_Callable<typename decay<_Functor>::type>, function&>
	operator=(_Functor&& __f)
   d5b18:	b510      	push	{r4, lr}
   d5b1a:	b086      	sub	sp, #24
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5b1c:	ab02      	add	r3, sp, #8
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d5b1e:	9102      	str	r1, [sp, #8]
	operator=(_Functor&& __f)
   d5b20:	4604      	mov	r4, r0
   d5b22:	e893 0003 	ldmia.w	r3, {r0, r1}
   d5b26:	466a      	mov	r2, sp
   d5b28:	e882 0003 	stmia.w	r2, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d5b2c:	e894 0003 	ldmia.w	r4, {r0, r1}
   d5b30:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d5b34:	e892 0003 	ldmia.w	r2, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d5b38:	68a2      	ldr	r2, [r4, #8]
   d5b3a:	9204      	str	r2, [sp, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d5b3c:	4a06      	ldr	r2, [pc, #24]	; (d5b58 <_ZNSt8functionIFP11UbiProtocolvEEaSIPS2_EENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSB_JEEEE5valueERS3_E4typeEOS9_.isra.0+0x40>)
   d5b3e:	60a2      	str	r2, [r4, #8]
      __a = _GLIBCXX_MOVE(__b);
   d5b40:	68e2      	ldr	r2, [r4, #12]
   d5b42:	9205      	str	r2, [sp, #20]
      __b = _GLIBCXX_MOVE(__tmp);
   d5b44:	4a05      	ldr	r2, [pc, #20]	; (d5b5c <_ZNSt8functionIFP11UbiProtocolvEEaSIPS2_EENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSB_JEEEE5valueERS3_E4typeEOS9_.isra.0+0x44>)
   d5b46:	60e2      	str	r2, [r4, #12]
   d5b48:	e884 0003 	stmia.w	r4, {r0, r1}
    class function<_Res(_ArgTypes...)>
   d5b4c:	4618      	mov	r0, r3
   d5b4e:	f7ff fa8f 	bl	d5070 <_ZNSt14_Function_baseD1Ev>
	{
	  function(std::forward<_Functor>(__f)).swap(*this);
	  return *this;
	}
   d5b52:	4620      	mov	r0, r4
   d5b54:	b006      	add	sp, #24
   d5b56:	bd10      	pop	{r4, pc}
   d5b58:	000d5a3d 	.word	0x000d5a3d
   d5b5c:	000d5a39 	.word	0x000d5a39

000d5b60 <_ZN10UbiBuilder7builderEv>:
UbiProtocol* UbiBuilder::builder() {
   d5b60:	b570      	push	{r4, r5, r6, lr}
	  (this->_M_impl._M_header._M_parent);
      }

      _Base_ptr
      _M_end() _GLIBCXX_NOEXCEPT
      { return &this->_M_impl._M_header; }
   d5b62:	f100 0108 	add.w	r1, r0, #8
    typename _Rb_tree<_Key, _Val, _KeyOfValue,
		      _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    find(const _Key& __k)
    {
      iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
   d5b66:	68c2      	ldr	r2, [r0, #12]
      { return &this->_M_impl._M_header; }
   d5b68:	460b      	mov	r3, r1
      while (__x != 0)
   d5b6a:	b13a      	cbz	r2, d5b7c <_ZN10UbiBuilder7builderEv+0x1c>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
   d5b6c:	7c15      	ldrb	r5, [r2, #16]
   d5b6e:	7804      	ldrb	r4, [r0, #0]
   d5b70:	42a5      	cmp	r5, r4
   d5b72:	bf2a      	itet	cs
   d5b74:	4613      	movcs	r3, r2
	  __x = _S_right(__x);
   d5b76:	68d2      	ldrcc	r2, [r2, #12]
	  __y = __x, __x = _S_left(__x);
   d5b78:	6892      	ldrcs	r2, [r2, #8]
   d5b7a:	e7f6      	b.n	d5b6a <_ZN10UbiBuilder7builderEv+0xa>
      return (__j == end()
	      || _M_impl._M_key_compare(__k,
					_S_key(__j._M_node))) ? end() : __j;
   d5b7c:	4299      	cmp	r1, r3
   d5b7e:	d004      	beq.n	d5b8a <_ZN10UbiBuilder7builderEv+0x2a>
	      || _M_impl._M_key_compare(__k,
   d5b80:	7800      	ldrb	r0, [r0, #0]
   d5b82:	7c1a      	ldrb	r2, [r3, #16]
   d5b84:	4290      	cmp	r0, r2
   d5b86:	bf38      	it	cc
   d5b88:	460b      	movcc	r3, r1
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5b8a:	69da      	ldr	r2, [r3, #28]
   d5b8c:	b90a      	cbnz	r2, d5b92 <_ZN10UbiBuilder7builderEv+0x32>
	__throw_bad_function_call();
   d5b8e:	f005 fdc9 	bl	db724 <_ZSt25__throw_bad_function_callv>
}
   d5b92:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5b96:	6a1a      	ldr	r2, [r3, #32]
   d5b98:	f103 0014 	add.w	r0, r3, #20
   d5b9c:	4710      	bx	r2

000d5b9e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   d5b9e:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
   d5ba0:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   d5ba2:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   d5ba4:	b17c      	cbz	r4, d5bc6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   d5ba6:	6863      	ldr	r3, [r4, #4]
   d5ba8:	3b01      	subs	r3, #1
   d5baa:	6063      	str	r3, [r4, #4]
   d5bac:	b95b      	cbnz	r3, d5bc6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   d5bae:	6823      	ldr	r3, [r4, #0]
   d5bb0:	4620      	mov	r0, r4
   d5bb2:	689b      	ldr	r3, [r3, #8]
   d5bb4:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d5bb6:	68a3      	ldr	r3, [r4, #8]
   d5bb8:	3b01      	subs	r3, #1
   d5bba:	60a3      	str	r3, [r4, #8]
   d5bbc:	b91b      	cbnz	r3, d5bc6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d5bbe:	6823      	ldr	r3, [r4, #0]
   d5bc0:	4620      	mov	r0, r4
   d5bc2:	68db      	ldr	r3, [r3, #12]
   d5bc4:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   d5bc6:	4628      	mov	r0, r5
   d5bc8:	bd38      	pop	{r3, r4, r5, pc}

000d5bca <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_>:
      _Link_type __x = _M_begin();
   d5bca:	688b      	ldr	r3, [r1, #8]
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   d5bcc:	b570      	push	{r4, r5, r6, lr}
   d5bce:	4616      	mov	r6, r2
   d5bd0:	4604      	mov	r4, r0
      { return &this->_M_impl._M_header; }
   d5bd2:	1d0d      	adds	r5, r1, #4
      bool __comp = true;
   d5bd4:	2201      	movs	r2, #1
      while (__x != 0)
   d5bd6:	b15b      	cbz	r3, d5bf0 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_+0x26>
	  __x = __comp ? _S_left(__x) : _S_right(__x);
   d5bd8:	7830      	ldrb	r0, [r6, #0]
   d5bda:	7c1a      	ldrb	r2, [r3, #16]
   d5bdc:	4290      	cmp	r0, r2
   d5bde:	bf34      	ite	cc
   d5be0:	6898      	ldrcc	r0, [r3, #8]
   d5be2:	68d8      	ldrcs	r0, [r3, #12]
   d5be4:	461d      	mov	r5, r3
   d5be6:	bf34      	ite	cc
   d5be8:	2201      	movcc	r2, #1
   d5bea:	2200      	movcs	r2, #0
   d5bec:	4603      	mov	r3, r0
   d5bee:	e7f2      	b.n	d5bd6 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_+0xc>
      if (__comp)
   d5bf0:	b192      	cbz	r2, d5c18 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_+0x4e>
	  if (__j == begin())
   d5bf2:	68ca      	ldr	r2, [r1, #12]
   d5bf4:	42aa      	cmp	r2, r5
   d5bf6:	d103      	bne.n	d5c00 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_+0x36>
			   _MoveConstructiblePair<_U1, _U2>()
			  && _PCCP::template
			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
	constexpr pair(_U1&& __x, _U2&& __y)
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
   d5bf8:	e9c4 3500 	strd	r3, r5, [r4]
    }
   d5bfc:	4620      	mov	r0, r4
   d5bfe:	bd70      	pop	{r4, r5, r6, pc}
	_M_node = _Rb_tree_decrement(_M_node);
   d5c00:	4628      	mov	r0, r5
   d5c02:	f005 fd31 	bl	db668 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
   d5c06:	7833      	ldrb	r3, [r6, #0]
   d5c08:	7c02      	ldrb	r2, [r0, #16]
   d5c0a:	429a      	cmp	r2, r3
   d5c0c:	f04f 0300 	mov.w	r3, #0
   d5c10:	d3f2      	bcc.n	d5bf8 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_+0x2e>
       : first(std::forward<_U1>(__x)), second(__y) { }
   d5c12:	e9c4 0300 	strd	r0, r3, [r4]
   d5c16:	e7f1      	b.n	d5bfc <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_+0x32>
   d5c18:	4628      	mov	r0, r5
   d5c1a:	e7f4      	b.n	d5c06 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_+0x3c>

000d5c1c <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_>:
	return (*__i).second;
      }

#if __cplusplus >= 201103L
      mapped_type&
      operator[](key_type&& __k)
   d5c1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
      { return &this->_M_impl._M_header; }
   d5c20:	f100 0804 	add.w	r8, r0, #4
      { return _M_lower_bound(_M_begin(), _M_end(), __k); }
   d5c24:	6885      	ldr	r5, [r0, #8]
   d5c26:	b085      	sub	sp, #20
   d5c28:	4606      	mov	r6, r0
   d5c2a:	4689      	mov	r9, r1
      { return &this->_M_impl._M_header; }
   d5c2c:	4644      	mov	r4, r8
      while (__x != 0)
   d5c2e:	b155      	cbz	r5, d5c46 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x2a>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
   d5c30:	f899 3000 	ldrb.w	r3, [r9]
   d5c34:	7c2a      	ldrb	r2, [r5, #16]
   d5c36:	429a      	cmp	r2, r3
	  __x = _S_right(__x);
   d5c38:	bf36      	itet	cc
   d5c3a:	68eb      	ldrcc	r3, [r5, #12]
	  __y = __x, __x = _S_left(__x);
   d5c3c:	68ab      	ldrcs	r3, [r5, #8]
	  __x = _S_right(__x);
   d5c3e:	4625      	movcc	r5, r4
   d5c40:	462c      	mov	r4, r5
   d5c42:	461d      	mov	r5, r3
   d5c44:	e7f3      	b.n	d5c2e <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x12>
	// concept requirements
	__glibcxx_function_requires(_DefaultConstructibleConcept<mapped_type>)

	iterator __i = lower_bound(__k);
	// __i->first is greater than or equivalent to __k.
	if (__i == end() || key_comp()(__k, (*__i).first))
   d5c46:	45a0      	cmp	r8, r4
   d5c48:	d004      	beq.n	d5c54 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x38>
   d5c4a:	f899 2000 	ldrb.w	r2, [r9]
   d5c4e:	7c23      	ldrb	r3, [r4, #16]
   d5c50:	429a      	cmp	r2, r3
   d5c52:	d22e      	bcs.n	d5cb2 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x96>
	  {
	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
	  }
#endif
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d5c54:	2024      	movs	r0, #36	; 0x24
   d5c56:	f7fe fa1e 	bl	d4096 <_Znwj>
      inline
      pair<_T1, _T2>::
      pair(tuple<_Args1...>& __tuple1, tuple<_Args2...>& __tuple2,
	   _Index_tuple<_Indexes1...>, _Index_tuple<_Indexes2...>)
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
        second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
   d5c5a:	f899 9000 	ldrb.w	r9, [r9]
   d5c5e:	f880 9010 	strb.w	r9, [r0, #16]
    _Function_base() : _M_manager(nullptr) { }
   d5c62:	2300      	movs	r3, #0
      if (__pos._M_node == _M_end())
   d5c64:	45a0      	cmp	r8, r4
   d5c66:	4607      	mov	r7, r0
      // Can be used to avoid value-initialization zeroing _M_storage.
      __aligned_membuf(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      { return static_cast<void*>(&_M_storage); }
   d5c68:	f100 0210 	add.w	r2, r0, #16
   d5c6c:	61c3      	str	r3, [r0, #28]
   d5c6e:	d125      	bne.n	d5cbc <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0xa0>
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
   d5c70:	6973      	ldr	r3, [r6, #20]
   d5c72:	b11b      	cbz	r3, d5c7c <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x60>
   d5c74:	6931      	ldr	r1, [r6, #16]
   d5c76:	7c0b      	ldrb	r3, [r1, #16]
   d5c78:	454b      	cmp	r3, r9
   d5c7a:	d309      	bcc.n	d5c90 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x74>
	    return _M_get_insert_unique_pos(__k);
   d5c7c:	4631      	mov	r1, r6
   d5c7e:	a802      	add	r0, sp, #8
   d5c80:	f7ff ffa3 	bl	d5bca <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_>
   d5c84:	e9dd 4102 	ldrd	r4, r1, [sp, #8]
	    if (__res.second)
   d5c88:	2900      	cmp	r1, #0
   d5c8a:	d051      	beq.n	d5d30 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x114>
			    || _M_impl._M_key_compare(_S_key(__z),
   d5c8c:	2c00      	cmp	r4, #0
   d5c8e:	d14d      	bne.n	d5d2c <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x110>
      bool __insert_left = (__x != 0 || __p == _M_end()
   d5c90:	4588      	cmp	r8, r1
   d5c92:	d04b      	beq.n	d5d2c <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x110>
			    || _M_impl._M_key_compare(_S_key(__z),
   d5c94:	7c38      	ldrb	r0, [r7, #16]
   d5c96:	7c0b      	ldrb	r3, [r1, #16]
   d5c98:	4298      	cmp	r0, r3
   d5c9a:	bf2c      	ite	cs
   d5c9c:	2000      	movcs	r0, #0
   d5c9e:	2001      	movcc	r0, #1
      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
   d5ca0:	4643      	mov	r3, r8
   d5ca2:	460a      	mov	r2, r1
   d5ca4:	4639      	mov	r1, r7
   d5ca6:	f005 fce1 	bl	db66c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
      ++_M_impl._M_node_count;
   d5caa:	6973      	ldr	r3, [r6, #20]
   d5cac:	3301      	adds	r3, #1
   d5cae:	6173      	str	r3, [r6, #20]
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
   d5cb0:	463c      	mov	r4, r7
					std::forward_as_tuple(std::move(__k)),
					std::tuple<>());
	return (*__i).second;
      }
   d5cb2:	f104 0014 	add.w	r0, r4, #20
   d5cb6:	b005      	add	sp, #20
   d5cb8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
   d5cbc:	7c23      	ldrb	r3, [r4, #16]
   d5cbe:	9201      	str	r2, [sp, #4]
   d5cc0:	454b      	cmp	r3, r9
   d5cc2:	d918      	bls.n	d5cf6 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0xda>
	  if (__pos._M_node == _M_leftmost()) // begin()
   d5cc4:	68f3      	ldr	r3, [r6, #12]
   d5cc6:	429c      	cmp	r4, r3
   d5cc8:	d009      	beq.n	d5cde <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0xc2>
	_M_node = _Rb_tree_decrement(_M_node);
   d5cca:	4620      	mov	r0, r4
   d5ccc:	f005 fccc 	bl	db668 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
   d5cd0:	7c03      	ldrb	r3, [r0, #16]
   d5cd2:	9a01      	ldr	r2, [sp, #4]
   d5cd4:	454b      	cmp	r3, r9
   d5cd6:	d205      	bcs.n	d5ce4 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0xc8>
	      if (_S_right(__before._M_node) == 0)
   d5cd8:	68c3      	ldr	r3, [r0, #12]
   d5cda:	b953      	cbnz	r3, d5cf2 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0xd6>
   d5cdc:	4604      	mov	r4, r0
       : first(__x), second(std::forward<_U2>(__y)) { }
   d5cde:	4621      	mov	r1, r4
   d5ce0:	461c      	mov	r4, r3
   d5ce2:	e7d1      	b.n	d5c88 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x6c>
	    return _M_get_insert_unique_pos(__k);
   d5ce4:	4631      	mov	r1, r6
   d5ce6:	a802      	add	r0, sp, #8
   d5ce8:	f7ff ff6f 	bl	d5bca <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_>
   d5cec:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
   d5cf0:	e7f5      	b.n	d5cde <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0xc2>
   d5cf2:	4623      	mov	r3, r4
   d5cf4:	e7f3      	b.n	d5cde <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0xc2>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
   d5cf6:	d21b      	bcs.n	d5d30 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x114>
	  if (__pos._M_node == _M_rightmost())
   d5cf8:	6931      	ldr	r1, [r6, #16]
   d5cfa:	428c      	cmp	r4, r1
   d5cfc:	d00b      	beq.n	d5d16 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0xfa>
	_M_node = _Rb_tree_increment(_M_node);
   d5cfe:	4620      	mov	r0, r4
   d5d00:	f005 fc9f 	bl	db642 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
   d5d04:	7c03      	ldrb	r3, [r0, #16]
   d5d06:	9a01      	ldr	r2, [sp, #4]
   d5d08:	454b      	cmp	r3, r9
	_M_node = _Rb_tree_increment(_M_node);
   d5d0a:	4605      	mov	r5, r0
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
   d5d0c:	d905      	bls.n	d5d1a <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0xfe>
	      if (_S_right(__pos._M_node) == 0)
   d5d0e:	68e3      	ldr	r3, [r4, #12]
   d5d10:	b953      	cbnz	r3, d5d28 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x10c>
   d5d12:	4621      	mov	r1, r4
   d5d14:	461d      	mov	r5, r3
   d5d16:	462c      	mov	r4, r5
   d5d18:	e7b6      	b.n	d5c88 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x6c>
	    return _M_get_insert_unique_pos(__k);
   d5d1a:	4631      	mov	r1, r6
   d5d1c:	a802      	add	r0, sp, #8
   d5d1e:	f7ff ff54 	bl	d5bca <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_>
   d5d22:	e9dd 5102 	ldrd	r5, r1, [sp, #8]
   d5d26:	e7f6      	b.n	d5d16 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0xfa>
   d5d28:	4601      	mov	r1, r0
   d5d2a:	e7f4      	b.n	d5d16 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0xfa>
			    || _M_impl._M_key_compare(_S_key(__z),
   d5d2c:	2001      	movs	r0, #1
   d5d2e:	e7b7      	b.n	d5ca0 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x84>
    class function<_Res(_ArgTypes...)>
   d5d30:	f107 0014 	add.w	r0, r7, #20
   d5d34:	f7ff f99c 	bl	d5070 <_ZNSt14_Function_baseD1Ev>
	  {
	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p);
   d5d38:	4638      	mov	r0, r7
   d5d3a:	f7fe f9b0 	bl	d409e <_ZdlPv>
   d5d3e:	4627      	mov	r7, r4
   d5d40:	e7b6      	b.n	d5cb0 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x94>
	...

000d5d44 <_ZN10UbiBuilderC1EPKcS1_11IotProtocol>:
UbiBuilder::UbiBuilder(const char* host, const char* token, IotProtocol iot_protocol) {
   d5d44:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d5d48:	1d05      	adds	r5, r0, #4
      _M_header._M_color = _S_red;
   d5d4a:	2600      	movs	r6, #0
   d5d4c:	4617      	mov	r7, r2
	  : _Node_allocator()
   d5d4e:	f100 0208 	add.w	r2, r0, #8
      _M_header._M_left = &_M_header;
   d5d52:	e9c0 6203 	strd	r6, r2, [r0, #12]
      _M_node_count = 0;
   d5d56:	e9c0 2605 	strd	r2, r6, [r0, #20]
   d5d5a:	4604      	mov	r4, r0
   d5d5c:	4688      	mov	r8, r1
      _M_header._M_color = _S_red;
   d5d5e:	7206      	strb	r6, [r0, #8]
  _iot_protocol = iot_protocol;
   d5d60:	7003      	strb	r3, [r0, #0]
  command_list[UBI_TCP] = &builderTcp;
   d5d62:	f10d 0107 	add.w	r1, sp, #7
   d5d66:	2301      	movs	r3, #1
   d5d68:	4628      	mov	r0, r5
   d5d6a:	f88d 3007 	strb.w	r3, [sp, #7]
   d5d6e:	f7ff ff55 	bl	d5c1c <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_>
   d5d72:	4916      	ldr	r1, [pc, #88]	; (d5dcc <_ZN10UbiBuilderC1EPKcS1_11IotProtocol+0x88>)
   d5d74:	f7ff fed0 	bl	d5b18 <_ZNSt8functionIFP11UbiProtocolvEEaSIPS2_EENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSB_JEEEE5valueERS3_E4typeEOS9_.isra.0>
  command_list[UBI_HTTP] = &builderHttp;
   d5d78:	f10d 0107 	add.w	r1, sp, #7
   d5d7c:	4628      	mov	r0, r5
   d5d7e:	f88d 6007 	strb.w	r6, [sp, #7]
   d5d82:	f7ff ff4b 	bl	d5c1c <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_>
   d5d86:	4912      	ldr	r1, [pc, #72]	; (d5dd0 <_ZN10UbiBuilderC1EPKcS1_11IotProtocol+0x8c>)
   d5d88:	f7ff fec6 	bl	d5b18 <_ZNSt8functionIFP11UbiProtocolvEEaSIPS2_EENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSB_JEEEE5valueERS3_E4typeEOS9_.isra.0>
  command_list[UBI_UDP] = &builderUdp;
   d5d8c:	2302      	movs	r3, #2
   d5d8e:	f10d 0107 	add.w	r1, sp, #7
   d5d92:	4628      	mov	r0, r5
   d5d94:	f88d 3007 	strb.w	r3, [sp, #7]
   d5d98:	f7ff ff40 	bl	d5c1c <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_>
   d5d9c:	490d      	ldr	r1, [pc, #52]	; (d5dd4 <_ZN10UbiBuilderC1EPKcS1_11IotProtocol+0x90>)
   d5d9e:	f7ff febb 	bl	d5b18 <_ZNSt8functionIFP11UbiProtocolvEEaSIPS2_EENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSB_JEEEE5valueERS3_E4typeEOS9_.isra.0>
  command_list[UBI_PARTICLE] = &builderParticle;
   d5da2:	2303      	movs	r3, #3
   d5da4:	f10d 0107 	add.w	r1, sp, #7
   d5da8:	4628      	mov	r0, r5
   d5daa:	f88d 3007 	strb.w	r3, [sp, #7]
   d5dae:	f7ff ff35 	bl	d5c1c <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_>
   d5db2:	4909      	ldr	r1, [pc, #36]	; (d5dd8 <_ZN10UbiBuilderC1EPKcS1_11IotProtocol+0x94>)
   d5db4:	f7ff feb0 	bl	d5b18 <_ZNSt8functionIFP11UbiProtocolvEEaSIPS2_EENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSB_JEEEE5valueERS3_E4typeEOS9_.isra.0>
  _host = host;
   d5db8:	4b08      	ldr	r3, [pc, #32]	; (d5ddc <_ZN10UbiBuilderC1EPKcS1_11IotProtocol+0x98>)
   d5dba:	f8c3 8000 	str.w	r8, [r3]
  _token = token;
   d5dbe:	4b08      	ldr	r3, [pc, #32]	; (d5de0 <_ZN10UbiBuilderC1EPKcS1_11IotProtocol+0x9c>)
}
   d5dc0:	4620      	mov	r0, r4
  _token = token;
   d5dc2:	601f      	str	r7, [r3, #0]
}
   d5dc4:	b002      	add	sp, #8
   d5dc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5dca:	bf00      	nop
   d5dcc:	000d5a55 	.word	0x000d5a55
   d5dd0:	000d5a89 	.word	0x000d5a89
   d5dd4:	000d5ab9 	.word	0x000d5ab9
   d5dd8:	000d5aed 	.word	0x000d5aed
   d5ddc:	2003e4e4 	.word	0x2003e4e4
   d5de0:	2003e4e8 	.word	0x2003e4e8

000d5de4 <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol>:
}
   d5de4:	b508      	push	{r3, lr}
#define _UbiHttp_H_

#include "UbiConstants.h"
#include "UbiProtocol.h"

static TCPClient _client_http_ubi;
   d5de6:	4805      	ldr	r0, [pc, #20]	; (d5dfc <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol+0x18>)
   d5de8:	f004 fc2a 	bl	da640 <_ZN9TCPClientC1Ev>
#include <map>

#include "UbiConstants.h"
#include "UbiProtocol.h"

static TCPClient _client_tcp_ubi;
   d5dec:	4804      	ldr	r0, [pc, #16]	; (d5e00 <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol+0x1c>)
   d5dee:	f004 fc27 	bl	da640 <_ZN9TCPClientC1Ev>
   d5df2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
#define _UbiUdp_H_

#include "UbiConstants.h"
#include "UbiProtocol.h"

static UDP _client_udp_ubi;
   d5df6:	4803      	ldr	r0, [pc, #12]	; (d5e04 <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol+0x20>)
   d5df8:	f005 b82a 	b.w	dae50 <_ZN3UDPC1Ev>
   d5dfc:	2003e4c8 	.word	0x2003e4c8
   d5e00:	2003e460 	.word	0x2003e460
   d5e04:	2003e47c 	.word	0x2003e47c

000d5e08 <_ZN7UbiHTTP8setDebugEb>:

/**
 * Makes available debug traces
 */

void UbiHTTP::setDebug(bool debug) { _debug = debug; }
   d5e08:	7501      	strb	r1, [r0, #20]
   d5e0a:	4770      	bx	lr

000d5e0c <_ZN7UbiHTTP17getMultipleValuesEPKcS1_>:
   d5e0c:	2200      	movs	r2, #0
	  : _Node_allocator()
   d5e0e:	1d01      	adds	r1, r0, #4
      _M_header._M_left = &_M_header;
   d5e10:	e9c0 2102 	strd	r2, r1, [r0, #8]
      _M_node_count = 0;
   d5e14:	e9c0 1204 	strd	r1, r2, [r0, #16]
      _M_header._M_color = _S_red;
   d5e18:	7102      	strb	r2, [r0, #4]

tcpMap UbiHTTP::getMultipleValues(const char* deviceLabel, const char* variableLabels) {
  tcpMap results;
  return results;
}
   d5e1a:	4770      	bx	lr

000d5e1c <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.0>:
float UbiHTTP::parseHttpAnswer(const char* request_type, char* data) {
   d5e1c:	b570      	push	{r4, r5, r6, lr}
   d5e1e:	4606      	mov	r6, r0
   d5e20:	ed2d 8b02 	vpush	{d8}
    char* parsed = (char*)malloc(sizeof(char) * 20);
   d5e24:	2014      	movs	r0, #20
   d5e26:	f001 fd8d 	bl	d7944 <malloc>
   d5e2a:	4605      	mov	r5, r0
    char* dst = (char*)malloc(sizeof(char) * 20);
   d5e2c:	2014      	movs	r0, #20
   d5e2e:	f001 fd89 	bl	d7944 <malloc>
   d5e32:	4604      	mov	r4, r0
    int len = strlen(data);  // Length of the answer char array from the server
   d5e34:	4630      	mov	r0, r6
   d5e36:	f006 fcfc 	bl	dc832 <strlen>
    for (int i = 0; i < len - 2; i++) {
   d5e3a:	4632      	mov	r2, r6
   d5e3c:	2300      	movs	r3, #0
   d5e3e:	3802      	subs	r0, #2
   d5e40:	4298      	cmp	r0, r3
   d5e42:	dd14      	ble.n	d5e6e <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.0+0x52>
      if ((data[i] == '\r') && (data[i + 1] == '\n') && (data[i + 2] == '\r') && (data[i + 3] == '\n')) {
   d5e44:	f812 1b01 	ldrb.w	r1, [r2], #1
   d5e48:	290d      	cmp	r1, #13
   d5e4a:	d13a      	bne.n	d5ec2 <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.0+0xa6>
   d5e4c:	7811      	ldrb	r1, [r2, #0]
   d5e4e:	290a      	cmp	r1, #10
   d5e50:	d137      	bne.n	d5ec2 <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.0+0xa6>
   d5e52:	7851      	ldrb	r1, [r2, #1]
   d5e54:	290d      	cmp	r1, #13
   d5e56:	d134      	bne.n	d5ec2 <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.0+0xa6>
   d5e58:	7891      	ldrb	r1, [r2, #2]
   d5e5a:	290a      	cmp	r1, #10
   d5e5c:	d131      	bne.n	d5ec2 <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.0+0xa6>
        strncpy(parsed, data + i + 4, 20);  // Copies the result to the parsed
   d5e5e:	3304      	adds	r3, #4
   d5e60:	18f1      	adds	r1, r6, r3
   d5e62:	2214      	movs	r2, #20
   d5e64:	4628      	mov	r0, r5
   d5e66:	f006 fcfe 	bl	dc866 <strncpy>
        parsed[20] = '\0';
   d5e6a:	2300      	movs	r3, #0
   d5e6c:	752b      	strb	r3, [r5, #20]
    char* pch = strchr(parsed, '\n');
   d5e6e:	210a      	movs	r1, #10
   d5e70:	4628      	mov	r0, r5
   d5e72:	f006 fc97 	bl	dc7a4 <strchr>
    if (pch == NULL) {
   d5e76:	4606      	mov	r6, r0
   d5e78:	b328      	cbz	r0, d5ec6 <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.0+0xaa>
    char* pch2 = strchr(pch + 1, '\n');
   d5e7a:	210a      	movs	r1, #10
   d5e7c:	3001      	adds	r0, #1
   d5e7e:	f006 fc91 	bl	dc7a4 <strchr>
    if (pch2 == NULL) {
   d5e82:	b300      	cbz	r0, d5ec6 <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.0+0xaa>
    sprintf(dst, "%s", pch);
   d5e84:	4631      	mov	r1, r6
   d5e86:	4620      	mov	r0, r4
   d5e88:	f006 fcad 	bl	dc7e6 <strcpy>
    dst[strlen(dst) - 1] = '\0';
   d5e8c:	4620      	mov	r0, r4
   d5e8e:	f006 fcd0 	bl	dc832 <strlen>
   d5e92:	4420      	add	r0, r4
   d5e94:	2300      	movs	r3, #0
   d5e96:	f800 3c01 	strb.w	r3, [r0, #-1]
    float result = atof(dst);
   d5e9a:	4620      	mov	r0, r4
   d5e9c:	f006 fc18 	bl	dc6d0 <atof>
   d5ea0:	ec51 0b10 	vmov	r0, r1, d0
   d5ea4:	f006 f9ca 	bl	dc23c <__aeabi_d2f>
   d5ea8:	ee08 0a10 	vmov	s16, r0
    free(dst);
   d5eac:	4620      	mov	r0, r4
   d5eae:	f001 fd51 	bl	d7954 <free>
    free(parsed);
   d5eb2:	4628      	mov	r0, r5
   d5eb4:	f001 fd4e 	bl	d7954 <free>
}
   d5eb8:	eeb0 0a48 	vmov.f32	s0, s16
   d5ebc:	ecbd 8b02 	vpop	{d8}
   d5ec0:	bd70      	pop	{r4, r5, r6, pc}
    for (int i = 0; i < len - 2; i++) {
   d5ec2:	3301      	adds	r3, #1
   d5ec4:	e7bc      	b.n	d5e40 <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.0+0x24>
      return result;
   d5ec6:	ed9f 8a01 	vldr	s16, [pc, #4]	; d5ecc <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.0+0xb0>
   d5eca:	e7f5      	b.n	d5eb8 <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.0+0x9c>
   d5ecc:	cda2425f 	.word	0xcda2425f

000d5ed0 <_ZN7UbiHTTPC1EPKciS1_S1_>:
UbiHTTP::UbiHTTP(const char* host, const int port, const char* user_agent, const char* token) {
   d5ed0:	b530      	push	{r4, r5, lr}
   d5ed2:	4d07      	ldr	r5, [pc, #28]	; (d5ef0 <_ZN7UbiHTTPC1EPKciS1_S1_+0x20>)
   d5ed4:	6005      	str	r5, [r0, #0]
   d5ed6:	2500      	movs	r5, #0
  _user_agent = user_agent;
   d5ed8:	e9c0 1301 	strd	r1, r3, [r0, #4]
UbiHTTP::UbiHTTP(const char* host, const int port, const char* user_agent, const char* token) {
   d5edc:	7505      	strb	r5, [r0, #20]
  _token = token;
   d5ede:	9b03      	ldr	r3, [sp, #12]
UbiHTTP::UbiHTTP(const char* host, const int port, const char* user_agent, const char* token) {
   d5ee0:	f241 3588 	movw	r5, #5000	; 0x1388
   d5ee4:	6185      	str	r5, [r0, #24]
   d5ee6:	2505      	movs	r5, #5
  _port = port;
   d5ee8:	e9c0 3203 	strd	r3, r2, [r0, #12]
UbiHTTP::UbiHTTP(const char* host, const int port, const char* user_agent, const char* token) {
   d5eec:	7705      	strb	r5, [r0, #28]
}
   d5eee:	bd30      	pop	{r4, r5, pc}
   d5ef0:	000dee28 	.word	0x000dee28

000d5ef4 <_ZN7UbiHTTP9reconnectEPKci>:
void UbiHTTP::reconnect(const char* host, const int port) {
   d5ef4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  while (!_client_http_ubi.connected() && attempts < _maxReconnectAttempts) {
   d5ef8:	f8df 808c 	ldr.w	r8, [pc, #140]	; d5f88 <_ZN7UbiHTTP9reconnectEPKci+0x94>
      Serial.print("Trying to connect to ");
   d5efc:	f8df a08c 	ldr.w	sl, [pc, #140]	; d5f8c <_ZN7UbiHTTP9reconnectEPKci+0x98>
      Serial.print(" , attempt number: ");
   d5f00:	f8df b08c 	ldr.w	fp, [pc, #140]	; d5f90 <_ZN7UbiHTTP9reconnectEPKci+0x9c>
void UbiHTTP::reconnect(const char* host, const int port) {
   d5f04:	4604      	mov	r4, r0
   d5f06:	460d      	mov	r5, r1
   d5f08:	4617      	mov	r7, r2
   d5f0a:	2600      	movs	r6, #0
  while (!_client_http_ubi.connected() && attempts < _maxReconnectAttempts) {
   d5f0c:	4640      	mov	r0, r8
   d5f0e:	fa5f f986 	uxtb.w	r9, r6
   d5f12:	f004 f8e4 	bl	da0de <_ZN9TCPClient9connectedEv>
   d5f16:	bb88      	cbnz	r0, d5f7c <_ZN7UbiHTTP9reconnectEPKci+0x88>
   d5f18:	7f23      	ldrb	r3, [r4, #28]
   d5f1a:	454b      	cmp	r3, r9
   d5f1c:	d92e      	bls.n	d5f7c <_ZN7UbiHTTP9reconnectEPKci+0x88>
    if (_debug) {
   d5f1e:	7d23      	ldrb	r3, [r4, #20]
   d5f20:	b1cb      	cbz	r3, d5f56 <_ZN7UbiHTTP9reconnectEPKci+0x62>
      Serial.print("Trying to connect to ");
   d5f22:	f005 f937 	bl	db194 <_Z16_fetch_usbserialv>
   d5f26:	4651      	mov	r1, sl
   d5f28:	f003 fe24 	bl	d9b74 <_ZN5Print5printEPKc>
      Serial.print(host);
   d5f2c:	f005 f932 	bl	db194 <_Z16_fetch_usbserialv>
   d5f30:	4629      	mov	r1, r5
   d5f32:	f003 fe1f 	bl	d9b74 <_ZN5Print5printEPKc>
      Serial.print(" , attempt number: ");
   d5f36:	f005 f92d 	bl	db194 <_Z16_fetch_usbserialv>
   d5f3a:	4659      	mov	r1, fp
   d5f3c:	f003 fe1a 	bl	d9b74 <_ZN5Print5printEPKc>
      Serial.println(attempts);
   d5f40:	f005 f928 	bl	db194 <_Z16_fetch_usbserialv>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d5f44:	220a      	movs	r2, #10
   d5f46:	4649      	mov	r1, r9
   d5f48:	9001      	str	r0, [sp, #4]
   d5f4a:	f003 fe30 	bl	d9bae <_ZN5Print11printNumberEmh>
        n += println();
   d5f4e:	9b01      	ldr	r3, [sp, #4]
   d5f50:	4618      	mov	r0, r3
   d5f52:	f003 fe16 	bl	d9b82 <_ZN5Print7printlnEv>
    _client_http_ubi.connect(host, port);
   d5f56:	2300      	movs	r3, #0
   d5f58:	b2ba      	uxth	r2, r7
   d5f5a:	4629      	mov	r1, r5
   d5f5c:	4640      	mov	r0, r8
   d5f5e:	f004 f9c3 	bl	da2e8 <_ZN9TCPClient7connectEPKctm>
    if (_debug) {
   d5f62:	7d23      	ldrb	r3, [r4, #20]
   d5f64:	b123      	cbz	r3, d5f70 <_ZN7UbiHTTP9reconnectEPKci+0x7c>
      Serial.println("Attempt finished");
   d5f66:	f005 f915 	bl	db194 <_Z16_fetch_usbserialv>
   d5f6a:	4906      	ldr	r1, [pc, #24]	; (d5f84 <_ZN7UbiHTTP9reconnectEPKci+0x90>)
   d5f6c:	f003 fe15 	bl	d9b9a <_ZN5Print7printlnEPKc>
    delay(1000);
   d5f70:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d5f74:	f001 fd5e 	bl	d7a34 <delay>
   d5f78:	3601      	adds	r6, #1
  while (!_client_http_ubi.connected() && attempts < _maxReconnectAttempts) {
   d5f7a:	e7c7      	b.n	d5f0c <_ZN7UbiHTTP9reconnectEPKci+0x18>
}
   d5f7c:	b003      	add	sp, #12
   d5f7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5f82:	bf00      	nop
   d5f84:	000dec4a 	.word	0x000dec4a
   d5f88:	2003e4ec 	.word	0x2003e4ec
   d5f8c:	000dec20 	.word	0x000dec20
   d5f90:	000dec36 	.word	0x000dec36

000d5f94 <_ZN7UbiHTTP16readServerAnswerEPc>:
void UbiHTTP::readServerAnswer(char* response) {
   d5f94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5f98:	1e4b      	subs	r3, r1, #1
   d5f9a:	460c      	mov	r4, r1
   d5f9c:	f501 722f 	add.w	r2, r1, #700	; 0x2bc
   d5fa0:	4605      	mov	r5, r0
    response[i] = '\0';
   d5fa2:	2100      	movs	r1, #0
   d5fa4:	f803 1f01 	strb.w	r1, [r3, #1]!
  for (int i = 0; i <= MAX_BUFFER_SIZE; i++) {
   d5fa8:	4293      	cmp	r3, r2
   d5faa:	d1fb      	bne.n	d5fa4 <_ZN7UbiHTTP16readServerAnswerEPc+0x10>
  if (_debug) {
   d5fac:	7d2b      	ldrb	r3, [r5, #20]
   d5fae:	b14b      	cbz	r3, d5fc4 <_ZN7UbiHTTP16readServerAnswerEPc+0x30>
    Serial.println("----------");
   d5fb0:	f005 f8f0 	bl	db194 <_Z16_fetch_usbserialv>
   d5fb4:	4914      	ldr	r1, [pc, #80]	; (d6008 <_ZN7UbiHTTP16readServerAnswerEPc+0x74>)
   d5fb6:	f003 fdf0 	bl	d9b9a <_ZN5Print7printlnEPKc>
    Serial.println("Server's response:");
   d5fba:	f005 f8eb 	bl	db194 <_Z16_fetch_usbserialv>
   d5fbe:	4913      	ldr	r1, [pc, #76]	; (d600c <_ZN7UbiHTTP16readServerAnswerEPc+0x78>)
   d5fc0:	f003 fdeb 	bl	d9b9a <_ZN5Print7printlnEPKc>
  while (_client_http_ubi.available()) {
   d5fc4:	4f12      	ldr	r7, [pc, #72]	; (d6010 <_ZN7UbiHTTP16readServerAnswerEPc+0x7c>)
void UbiHTTP::readServerAnswer(char* response) {
   d5fc6:	2600      	movs	r6, #0
    if (j >= MAX_BUFFER_SIZE - 1) {
   d5fc8:	f240 28bb 	movw	r8, #699	; 0x2bb
  while (_client_http_ubi.available()) {
   d5fcc:	4638      	mov	r0, r7
   d5fce:	f004 fa8d 	bl	da4ec <_ZN9TCPClient9availableEv>
   d5fd2:	b170      	cbz	r0, d5ff2 <_ZN7UbiHTTP16readServerAnswerEPc+0x5e>
    response[j] = (char)_client_http_ubi.read();
   d5fd4:	4638      	mov	r0, r7
   d5fd6:	f004 f942 	bl	da25e <_ZN9TCPClient4readEv>
   d5fda:	55a0      	strb	r0, [r4, r6]
    if (_debug) {
   d5fdc:	7d2b      	ldrb	r3, [r5, #20]
   d5fde:	b12b      	cbz	r3, d5fec <_ZN7UbiHTTP16readServerAnswerEPc+0x58>
      Serial.write(response[j]);
   d5fe0:	f005 f8d8 	bl	db194 <_Z16_fetch_usbserialv>
   d5fe4:	6803      	ldr	r3, [r0, #0]
   d5fe6:	5da1      	ldrb	r1, [r4, r6]
   d5fe8:	689b      	ldr	r3, [r3, #8]
   d5fea:	4798      	blx	r3
    j++;
   d5fec:	3601      	adds	r6, #1
    if (j >= MAX_BUFFER_SIZE - 1) {
   d5fee:	4546      	cmp	r6, r8
   d5ff0:	d1ec      	bne.n	d5fcc <_ZN7UbiHTTP16readServerAnswerEPc+0x38>
  if (_debug) {
   d5ff2:	7d2b      	ldrb	r3, [r5, #20]
   d5ff4:	b133      	cbz	r3, d6004 <_ZN7UbiHTTP16readServerAnswerEPc+0x70>
    Serial.println("\n----------");
   d5ff6:	f005 f8cd 	bl	db194 <_Z16_fetch_usbserialv>
}
   d5ffa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    Serial.println("\n----------");
   d5ffe:	4905      	ldr	r1, [pc, #20]	; (d6014 <_ZN7UbiHTTP16readServerAnswerEPc+0x80>)
   d6000:	f003 bdcb 	b.w	d9b9a <_ZN5Print7printlnEPKc>
}
   d6004:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6008:	000dec6f 	.word	0x000dec6f
   d600c:	000dec5b 	.word	0x000dec5b
   d6010:	2003e4ec 	.word	0x2003e4ec
   d6014:	000dec6e 	.word	0x000dec6e

000d6018 <_ZN7UbiHTTP16waitServerAnswerEv>:
bool UbiHTTP::waitServerAnswer() {
   d6018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  while (!_client_http_ubi.available() && timeout < _timeout) {
   d601a:	4f0e      	ldr	r7, [pc, #56]	; (d6054 <_ZN7UbiHTTP16waitServerAnswerEv+0x3c>)
bool UbiHTTP::waitServerAnswer() {
   d601c:	4604      	mov	r4, r0
  int timeout = 0;
   d601e:	2600      	movs	r6, #0
  while (!_client_http_ubi.available() && timeout < _timeout) {
   d6020:	4638      	mov	r0, r7
   d6022:	f004 fa63 	bl	da4ec <_ZN9TCPClient9availableEv>
   d6026:	4605      	mov	r5, r0
   d6028:	b990      	cbnz	r0, d6050 <_ZN7UbiHTTP16waitServerAnswerEv+0x38>
   d602a:	69a3      	ldr	r3, [r4, #24]
   d602c:	42b3      	cmp	r3, r6
   d602e:	dd0f      	ble.n	d6050 <_ZN7UbiHTTP16waitServerAnswerEv+0x38>
    delay(1);
   d6030:	2001      	movs	r0, #1
   d6032:	f001 fcff 	bl	d7a34 <delay>
    if (timeout > _timeout - 1) {
   d6036:	69a3      	ldr	r3, [r4, #24]
    timeout++;
   d6038:	3601      	adds	r6, #1
    if (timeout > _timeout - 1) {
   d603a:	42b3      	cmp	r3, r6
   d603c:	dcf0      	bgt.n	d6020 <_ZN7UbiHTTP16waitServerAnswerEv+0x8>
      if (_debug) {
   d603e:	7d20      	ldrb	r0, [r4, #20]
   d6040:	b128      	cbz	r0, d604e <_ZN7UbiHTTP16waitServerAnswerEv+0x36>
        Serial.println("timeout, could not read any response from the host");
   d6042:	f005 f8a7 	bl	db194 <_Z16_fetch_usbserialv>
   d6046:	4904      	ldr	r1, [pc, #16]	; (d6058 <_ZN7UbiHTTP16waitServerAnswerEv+0x40>)
   d6048:	f003 fda7 	bl	d9b9a <_ZN5Print7printlnEPKc>
   d604c:	4628      	mov	r0, r5
}
   d604e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return true;
   d6050:	2001      	movs	r0, #1
   d6052:	e7fc      	b.n	d604e <_ZN7UbiHTTP16waitServerAnswerEv+0x36>
   d6054:	2003e4ec 	.word	0x2003e4ec
   d6058:	000dec7a 	.word	0x000dec7a

000d605c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags>:
bool UbiHTTP::sendData(const char* device_label, const char* device_name, char* payload, UbiFlags* flags) {
   d605c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d605e:	460f      	mov	r7, r1
  reconnect(_host, _port);
   d6060:	6902      	ldr	r2, [r0, #16]
   d6062:	6841      	ldr	r1, [r0, #4]
bool UbiHTTP::sendData(const char* device_label, const char* device_name, char* payload, UbiFlags* flags) {
   d6064:	4604      	mov	r4, r0
   d6066:	461d      	mov	r5, r3
  reconnect(_host, _port);
   d6068:	f7ff ff44 	bl	d5ef4 <_ZN7UbiHTTP9reconnectEPKci>
  if (_client_http_ubi.connected()) {  // Connect to the host
   d606c:	4878      	ldr	r0, [pc, #480]	; (d6250 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d606e:	f004 f836 	bl	da0de <_ZN9TCPClient9connectedEv>
   d6072:	4606      	mov	r6, r0
   d6074:	2800      	cmp	r0, #0
   d6076:	f000 80e1 	beq.w	d623c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1e0>
    _client_http_ubi.print(F("POST /api/v1.6/devices/"));
   d607a:	4976      	ldr	r1, [pc, #472]	; (d6254 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f8>)
   d607c:	4874      	ldr	r0, [pc, #464]	; (d6250 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d607e:	f003 fd79 	bl	d9b74 <_ZN5Print5printEPKc>
    _client_http_ubi.print(device_label);
   d6082:	4639      	mov	r1, r7
   d6084:	4872      	ldr	r0, [pc, #456]	; (d6250 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d6086:	f003 fd75 	bl	d9b74 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F(" HTTP/1.1\r\n"));
   d608a:	4973      	ldr	r1, [pc, #460]	; (d6258 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1fc>)
   d608c:	4870      	ldr	r0, [pc, #448]	; (d6250 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d608e:	f003 fd71 	bl	d9b74 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("Host: "));
   d6092:	4972      	ldr	r1, [pc, #456]	; (d625c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x200>)
   d6094:	486e      	ldr	r0, [pc, #440]	; (d6250 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d6096:	f003 fd6d 	bl	d9b74 <_ZN5Print5printEPKc>
    _client_http_ubi.print(_host);
   d609a:	6861      	ldr	r1, [r4, #4]
   d609c:	486c      	ldr	r0, [pc, #432]	; (d6250 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d609e:	f003 fd69 	bl	d9b74 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("\r\n"));
   d60a2:	496f      	ldr	r1, [pc, #444]	; (d6260 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x204>)
   d60a4:	486a      	ldr	r0, [pc, #424]	; (d6250 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d60a6:	f003 fd65 	bl	d9b74 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("User-Agent: "));
   d60aa:	496e      	ldr	r1, [pc, #440]	; (d6264 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x208>)
   d60ac:	4868      	ldr	r0, [pc, #416]	; (d6250 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d60ae:	f003 fd61 	bl	d9b74 <_ZN5Print5printEPKc>
    _client_http_ubi.print(_user_agent);
   d60b2:	68a1      	ldr	r1, [r4, #8]
   d60b4:	4866      	ldr	r0, [pc, #408]	; (d6250 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d60b6:	f003 fd5d 	bl	d9b74 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("\r\n"));
   d60ba:	4969      	ldr	r1, [pc, #420]	; (d6260 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x204>)
   d60bc:	4864      	ldr	r0, [pc, #400]	; (d6250 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d60be:	f003 fd59 	bl	d9b74 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("X-Auth-Token: "));
   d60c2:	4969      	ldr	r1, [pc, #420]	; (d6268 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x20c>)
   d60c4:	4862      	ldr	r0, [pc, #392]	; (d6250 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d60c6:	f003 fd55 	bl	d9b74 <_ZN5Print5printEPKc>
    _client_http_ubi.print(_token);
   d60ca:	68e1      	ldr	r1, [r4, #12]
   d60cc:	4860      	ldr	r0, [pc, #384]	; (d6250 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d60ce:	f003 fd51 	bl	d9b74 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("\r\n"));
   d60d2:	4963      	ldr	r1, [pc, #396]	; (d6260 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x204>)
   d60d4:	485e      	ldr	r0, [pc, #376]	; (d6250 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d60d6:	f003 fd4d 	bl	d9b74 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("Connection: close\r\n"));
   d60da:	4964      	ldr	r1, [pc, #400]	; (d626c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x210>)
   d60dc:	485c      	ldr	r0, [pc, #368]	; (d6250 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d60de:	f003 fd49 	bl	d9b74 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("Content-Type: application/json\r\n"));
   d60e2:	4963      	ldr	r1, [pc, #396]	; (d6270 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
   d60e4:	485a      	ldr	r0, [pc, #360]	; (d6250 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d60e6:	f003 fd45 	bl	d9b74 <_ZN5Print5printEPKc>
    int content_length = strlen(payload);
   d60ea:	4628      	mov	r0, r5
   d60ec:	f006 fba1 	bl	dc832 <strlen>
    _client_http_ubi.print(F("Content-Length: "));
   d60f0:	4960      	ldr	r1, [pc, #384]	; (d6274 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x218>)
    int content_length = strlen(payload);
   d60f2:	4606      	mov	r6, r0
    _client_http_ubi.print(F("Content-Length: "));
   d60f4:	4856      	ldr	r0, [pc, #344]	; (d6250 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d60f6:	f003 fd3d 	bl	d9b74 <_ZN5Print5printEPKc>
        return printNumber(val, base) + t;
   d60fa:	220a      	movs	r2, #10
   d60fc:	4631      	mov	r1, r6
   d60fe:	4854      	ldr	r0, [pc, #336]	; (d6250 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d6100:	f003 fd55 	bl	d9bae <_ZN5Print11printNumberEmh>
    _client_http_ubi.print(F("\r\n\r\n"));
   d6104:	495c      	ldr	r1, [pc, #368]	; (d6278 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x21c>)
   d6106:	4852      	ldr	r0, [pc, #328]	; (d6250 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d6108:	f003 fd34 	bl	d9b74 <_ZN5Print5printEPKc>
    _client_http_ubi.print(payload);
   d610c:	4629      	mov	r1, r5
   d610e:	4850      	ldr	r0, [pc, #320]	; (d6250 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d6110:	f003 fd30 	bl	d9b74 <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("\r\n"));
   d6114:	4952      	ldr	r1, [pc, #328]	; (d6260 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x204>)
   d6116:	484e      	ldr	r0, [pc, #312]	; (d6250 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d6118:	f003 fd2c 	bl	d9b74 <_ZN5Print5printEPKc>
    _client_http_ubi.flush();
   d611c:	484c      	ldr	r0, [pc, #304]	; (d6250 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d611e:	f003 ffdd 	bl	da0dc <_ZN9TCPClient5flushEv>
    if (_debug) {
   d6122:	7d23      	ldrb	r3, [r4, #20]
   d6124:	2b00      	cmp	r3, #0
   d6126:	d069      	beq.n	d61fc <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1a0>
      Serial.println(F("Making request to Ubidots:\n"));
   d6128:	f005 f834 	bl	db194 <_Z16_fetch_usbserialv>
   d612c:	4953      	ldr	r1, [pc, #332]	; (d627c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x220>)
   d612e:	f003 fd34 	bl	d9b9a <_ZN5Print7printlnEPKc>
      Serial.print("POST /api/v1.6/devices/");
   d6132:	f005 f82f 	bl	db194 <_Z16_fetch_usbserialv>
   d6136:	4947      	ldr	r1, [pc, #284]	; (d6254 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f8>)
   d6138:	f003 fd1c 	bl	d9b74 <_ZN5Print5printEPKc>
      Serial.print(device_label);
   d613c:	f005 f82a 	bl	db194 <_Z16_fetch_usbserialv>
   d6140:	4639      	mov	r1, r7
   d6142:	f003 fd17 	bl	d9b74 <_ZN5Print5printEPKc>
      Serial.print(" HTTP/1.1\r\n");
   d6146:	f005 f825 	bl	db194 <_Z16_fetch_usbserialv>
   d614a:	4943      	ldr	r1, [pc, #268]	; (d6258 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1fc>)
   d614c:	f003 fd12 	bl	d9b74 <_ZN5Print5printEPKc>
      Serial.print("Host: ");
   d6150:	f005 f820 	bl	db194 <_Z16_fetch_usbserialv>
   d6154:	4941      	ldr	r1, [pc, #260]	; (d625c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x200>)
   d6156:	f003 fd0d 	bl	d9b74 <_ZN5Print5printEPKc>
      Serial.print(_host);
   d615a:	f005 f81b 	bl	db194 <_Z16_fetch_usbserialv>
   d615e:	6861      	ldr	r1, [r4, #4]
   d6160:	f003 fd08 	bl	d9b74 <_ZN5Print5printEPKc>
      Serial.print("\r\n");
   d6164:	f005 f816 	bl	db194 <_Z16_fetch_usbserialv>
   d6168:	493d      	ldr	r1, [pc, #244]	; (d6260 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x204>)
   d616a:	f003 fd03 	bl	d9b74 <_ZN5Print5printEPKc>
      Serial.print("User-Agent: ");
   d616e:	f005 f811 	bl	db194 <_Z16_fetch_usbserialv>
   d6172:	493c      	ldr	r1, [pc, #240]	; (d6264 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x208>)
   d6174:	f003 fcfe 	bl	d9b74 <_ZN5Print5printEPKc>
      Serial.print(_user_agent);
   d6178:	f005 f80c 	bl	db194 <_Z16_fetch_usbserialv>
   d617c:	68a1      	ldr	r1, [r4, #8]
   d617e:	f003 fcf9 	bl	d9b74 <_ZN5Print5printEPKc>
      Serial.print("\r\n");
   d6182:	f005 f807 	bl	db194 <_Z16_fetch_usbserialv>
   d6186:	4936      	ldr	r1, [pc, #216]	; (d6260 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x204>)
   d6188:	f003 fcf4 	bl	d9b74 <_ZN5Print5printEPKc>
      Serial.print("X-Auth-Token: ");
   d618c:	f005 f802 	bl	db194 <_Z16_fetch_usbserialv>
   d6190:	4935      	ldr	r1, [pc, #212]	; (d6268 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x20c>)
   d6192:	f003 fcef 	bl	d9b74 <_ZN5Print5printEPKc>
      Serial.print(_token);
   d6196:	f004 fffd 	bl	db194 <_Z16_fetch_usbserialv>
   d619a:	68e1      	ldr	r1, [r4, #12]
   d619c:	f003 fcea 	bl	d9b74 <_ZN5Print5printEPKc>
      Serial.print("\r\n");
   d61a0:	f004 fff8 	bl	db194 <_Z16_fetch_usbserialv>
   d61a4:	492e      	ldr	r1, [pc, #184]	; (d6260 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x204>)
   d61a6:	f003 fce5 	bl	d9b74 <_ZN5Print5printEPKc>
      Serial.print("Connection: close\r\n");
   d61aa:	f004 fff3 	bl	db194 <_Z16_fetch_usbserialv>
   d61ae:	492f      	ldr	r1, [pc, #188]	; (d626c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x210>)
   d61b0:	f003 fce0 	bl	d9b74 <_ZN5Print5printEPKc>
      Serial.print("Content-Type: application/json\r\n");
   d61b4:	f004 ffee 	bl	db194 <_Z16_fetch_usbserialv>
   d61b8:	492d      	ldr	r1, [pc, #180]	; (d6270 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
   d61ba:	f003 fcdb 	bl	d9b74 <_ZN5Print5printEPKc>
      Serial.print("Content-Length: ");
   d61be:	f004 ffe9 	bl	db194 <_Z16_fetch_usbserialv>
   d61c2:	492c      	ldr	r1, [pc, #176]	; (d6274 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x218>)
   d61c4:	f003 fcd6 	bl	d9b74 <_ZN5Print5printEPKc>
      Serial.print(content_length);
   d61c8:	f004 ffe4 	bl	db194 <_Z16_fetch_usbserialv>
   d61cc:	220a      	movs	r2, #10
   d61ce:	4631      	mov	r1, r6
   d61d0:	f003 fced 	bl	d9bae <_ZN5Print11printNumberEmh>
      Serial.print("\r\n\r\n");
   d61d4:	f004 ffde 	bl	db194 <_Z16_fetch_usbserialv>
   d61d8:	4927      	ldr	r1, [pc, #156]	; (d6278 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x21c>)
   d61da:	f003 fccb 	bl	d9b74 <_ZN5Print5printEPKc>
      Serial.print(payload);
   d61de:	f004 ffd9 	bl	db194 <_Z16_fetch_usbserialv>
   d61e2:	4629      	mov	r1, r5
   d61e4:	f003 fcc6 	bl	d9b74 <_ZN5Print5printEPKc>
      Serial.print("\r\n");
   d61e8:	f004 ffd4 	bl	db194 <_Z16_fetch_usbserialv>
   d61ec:	491c      	ldr	r1, [pc, #112]	; (d6260 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x204>)
   d61ee:	f003 fcc1 	bl	d9b74 <_ZN5Print5printEPKc>
      Serial.println("waiting for server answer ...");
   d61f2:	f004 ffcf 	bl	db194 <_Z16_fetch_usbserialv>
   d61f6:	4922      	ldr	r1, [pc, #136]	; (d6280 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x224>)
   d61f8:	f003 fccf 	bl	d9b9a <_ZN5Print7printlnEPKc>
    waitServerAnswer();
   d61fc:	4620      	mov	r0, r4
   d61fe:	f7ff ff0b 	bl	d6018 <_ZN7UbiHTTP16waitServerAnswerEv>
    if (_debug) {
   d6202:	7d23      	ldrb	r3, [r4, #20]
   d6204:	b92b      	cbnz	r3, d6212 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1b6>
    result = true;
   d6206:	2401      	movs	r4, #1
  _client_http_ubi.stop();
   d6208:	4811      	ldr	r0, [pc, #68]	; (d6250 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d620a:	f004 f9c9 	bl	da5a0 <_ZN9TCPClient4stopEv>
}
   d620e:	4620      	mov	r0, r4
   d6210:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      Serial.println("\nUbidots' Server response:\n");
   d6212:	f004 ffbf 	bl	db194 <_Z16_fetch_usbserialv>
   d6216:	491b      	ldr	r1, [pc, #108]	; (d6284 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x228>)
      while (_client_http_ubi.available()) {
   d6218:	4d0d      	ldr	r5, [pc, #52]	; (d6250 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
      Serial.println("\nUbidots' Server response:\n");
   d621a:	f003 fcbe 	bl	d9b9a <_ZN5Print7printlnEPKc>
      while (_client_http_ubi.available()) {
   d621e:	4628      	mov	r0, r5
   d6220:	f004 f964 	bl	da4ec <_ZN9TCPClient9availableEv>
   d6224:	2800      	cmp	r0, #0
   d6226:	d0ee      	beq.n	d6206 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1aa>
        char c = _client_http_ubi.read();
   d6228:	4628      	mov	r0, r5
   d622a:	f004 f818 	bl	da25e <_ZN9TCPClient4readEv>
   d622e:	4604      	mov	r4, r0
        Serial.print(c);
   d6230:	f004 ffb0 	bl	db194 <_Z16_fetch_usbserialv>
   d6234:	b2e1      	uxtb	r1, r4
   d6236:	f003 fca1 	bl	d9b7c <_ZN5Print5printEc>
      while (_client_http_ubi.available()) {
   d623a:	e7f0      	b.n	d621e <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1c2>
    if (_debug) {
   d623c:	7d24      	ldrb	r4, [r4, #20]
   d623e:	2c00      	cmp	r4, #0
   d6240:	d0e2      	beq.n	d6208 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1ac>
      Serial.println("Could not send data to ubidots using HTTP");
   d6242:	f004 ffa7 	bl	db194 <_Z16_fetch_usbserialv>
   d6246:	4910      	ldr	r1, [pc, #64]	; (d6288 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x22c>)
   d6248:	f003 fca7 	bl	d9b9a <_ZN5Print7printlnEPKc>
  bool result = false;
   d624c:	4634      	mov	r4, r6
   d624e:	e7db      	b.n	d6208 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1ac>
   d6250:	2003e4ec 	.word	0x2003e4ec
   d6254:	000decad 	.word	0x000decad
   d6258:	000decc5 	.word	0x000decc5
   d625c:	000decd1 	.word	0x000decd1
   d6260:	000dedf5 	.word	0x000dedf5
   d6264:	000decd8 	.word	0x000decd8
   d6268:	000dece5 	.word	0x000dece5
   d626c:	000decf4 	.word	0x000decf4
   d6270:	000ded08 	.word	0x000ded08
   d6274:	000ded29 	.word	0x000ded29
   d6278:	000dedf3 	.word	0x000dedf3
   d627c:	000ded3a 	.word	0x000ded3a
   d6280:	000ded56 	.word	0x000ded56
   d6284:	000ded74 	.word	0x000ded74
   d6288:	000ded90 	.word	0x000ded90

000d628c <_ZN7UbiHTTP3getEPKcS1_>:
float UbiHTTP::get(const char* device_label, const char* variable_label) {
   d628c:	b570      	push	{r4, r5, r6, lr}
   d628e:	ed2d 8b02 	vpush	{d8}
   d6292:	4604      	mov	r4, r0
  _client_http_ubi.connect(_host, UBIDOTS_HTTP_PORT);
   d6294:	2300      	movs	r3, #0
float UbiHTTP::get(const char* device_label, const char* variable_label) {
   d6296:	460e      	mov	r6, r1
   d6298:	4615      	mov	r5, r2
  _client_http_ubi.connect(_host, UBIDOTS_HTTP_PORT);
   d629a:	6841      	ldr	r1, [r0, #4]
   d629c:	4866      	ldr	r0, [pc, #408]	; (d6438 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   d629e:	2250      	movs	r2, #80	; 0x50
   d62a0:	f004 f822 	bl	da2e8 <_ZN9TCPClient7connectEPKctm>
  reconnect(_host, UBIDOTS_HTTP_PORT);
   d62a4:	4620      	mov	r0, r4
   d62a6:	6861      	ldr	r1, [r4, #4]
   d62a8:	2250      	movs	r2, #80	; 0x50
   d62aa:	f7ff fe23 	bl	d5ef4 <_ZN7UbiHTTP9reconnectEPKci>
  if (_client_http_ubi.connected()) {
   d62ae:	4862      	ldr	r0, [pc, #392]	; (d6438 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   d62b0:	f003 ff15 	bl	da0de <_ZN9TCPClient9connectedEv>
   d62b4:	2800      	cmp	r0, #0
   d62b6:	f000 80b6 	beq.w	d6426 <_ZN7UbiHTTP3getEPKcS1_+0x19a>
    _client_http_ubi.print(F("GET /api/v1.6/devices/"));
   d62ba:	4960      	ldr	r1, [pc, #384]	; (d643c <_ZN7UbiHTTP3getEPKcS1_+0x1b0>)
   d62bc:	485e      	ldr	r0, [pc, #376]	; (d6438 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   d62be:	f003 fc59 	bl	d9b74 <_ZN5Print5printEPKc>
    _client_http_ubi.print(device_label);
   d62c2:	4631      	mov	r1, r6
   d62c4:	485c      	ldr	r0, [pc, #368]	; (d6438 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   d62c6:	f003 fc55 	bl	d9b74 <_ZN5Print5printEPKc>
    _client_http_ubi.print("/");
   d62ca:	495d      	ldr	r1, [pc, #372]	; (d6440 <_ZN7UbiHTTP3getEPKcS1_+0x1b4>)
   d62cc:	485a      	ldr	r0, [pc, #360]	; (d6438 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   d62ce:	f003 fc51 	bl	d9b74 <_ZN5Print5printEPKc>
    _client_http_ubi.print(variable_label);
   d62d2:	4629      	mov	r1, r5
   d62d4:	4858      	ldr	r0, [pc, #352]	; (d6438 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   d62d6:	f003 fc4d 	bl	d9b74 <_ZN5Print5printEPKc>
    _client_http_ubi.print("/lv");
   d62da:	495a      	ldr	r1, [pc, #360]	; (d6444 <_ZN7UbiHTTP3getEPKcS1_+0x1b8>)
   d62dc:	4856      	ldr	r0, [pc, #344]	; (d6438 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   d62de:	f003 fc49 	bl	d9b74 <_ZN5Print5printEPKc>
    _client_http_ubi.print(" HTTP/1.1\r\n");
   d62e2:	4959      	ldr	r1, [pc, #356]	; (d6448 <_ZN7UbiHTTP3getEPKcS1_+0x1bc>)
   d62e4:	4854      	ldr	r0, [pc, #336]	; (d6438 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   d62e6:	f003 fc45 	bl	d9b74 <_ZN5Print5printEPKc>
    _client_http_ubi.print("Host: ");
   d62ea:	4958      	ldr	r1, [pc, #352]	; (d644c <_ZN7UbiHTTP3getEPKcS1_+0x1c0>)
   d62ec:	4852      	ldr	r0, [pc, #328]	; (d6438 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   d62ee:	f003 fc41 	bl	d9b74 <_ZN5Print5printEPKc>
    _client_http_ubi.print(_host);
   d62f2:	6861      	ldr	r1, [r4, #4]
   d62f4:	4850      	ldr	r0, [pc, #320]	; (d6438 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   d62f6:	f003 fc3d 	bl	d9b74 <_ZN5Print5printEPKc>
    _client_http_ubi.print("\r\n");
   d62fa:	4955      	ldr	r1, [pc, #340]	; (d6450 <_ZN7UbiHTTP3getEPKcS1_+0x1c4>)
   d62fc:	484e      	ldr	r0, [pc, #312]	; (d6438 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   d62fe:	f003 fc39 	bl	d9b74 <_ZN5Print5printEPKc>
    _client_http_ubi.print("User-Agent: ");
   d6302:	4954      	ldr	r1, [pc, #336]	; (d6454 <_ZN7UbiHTTP3getEPKcS1_+0x1c8>)
   d6304:	484c      	ldr	r0, [pc, #304]	; (d6438 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   d6306:	f003 fc35 	bl	d9b74 <_ZN5Print5printEPKc>
    _client_http_ubi.print(_user_agent);
   d630a:	68a1      	ldr	r1, [r4, #8]
   d630c:	484a      	ldr	r0, [pc, #296]	; (d6438 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   d630e:	f003 fc31 	bl	d9b74 <_ZN5Print5printEPKc>
    _client_http_ubi.print("\r\n");
   d6312:	494f      	ldr	r1, [pc, #316]	; (d6450 <_ZN7UbiHTTP3getEPKcS1_+0x1c4>)
   d6314:	4848      	ldr	r0, [pc, #288]	; (d6438 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   d6316:	f003 fc2d 	bl	d9b74 <_ZN5Print5printEPKc>
    _client_http_ubi.print("X-Auth-Token: ");
   d631a:	494f      	ldr	r1, [pc, #316]	; (d6458 <_ZN7UbiHTTP3getEPKcS1_+0x1cc>)
   d631c:	4846      	ldr	r0, [pc, #280]	; (d6438 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   d631e:	f003 fc29 	bl	d9b74 <_ZN5Print5printEPKc>
    _client_http_ubi.print(_token);
   d6322:	68e1      	ldr	r1, [r4, #12]
   d6324:	4844      	ldr	r0, [pc, #272]	; (d6438 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   d6326:	f003 fc25 	bl	d9b74 <_ZN5Print5printEPKc>
    _client_http_ubi.print("\r\n");
   d632a:	4949      	ldr	r1, [pc, #292]	; (d6450 <_ZN7UbiHTTP3getEPKcS1_+0x1c4>)
   d632c:	4842      	ldr	r0, [pc, #264]	; (d6438 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   d632e:	f003 fc21 	bl	d9b74 <_ZN5Print5printEPKc>
    _client_http_ubi.print("Content-Type: application/json\r\n\r\n");
   d6332:	494a      	ldr	r1, [pc, #296]	; (d645c <_ZN7UbiHTTP3getEPKcS1_+0x1d0>)
   d6334:	4840      	ldr	r0, [pc, #256]	; (d6438 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   d6336:	f003 fc1d 	bl	d9b74 <_ZN5Print5printEPKc>
    if (_debug) {
   d633a:	7d23      	ldrb	r3, [r4, #20]
   d633c:	2b00      	cmp	r3, #0
   d633e:	d04f      	beq.n	d63e0 <_ZN7UbiHTTP3getEPKcS1_+0x154>
      Serial.print("GET /api/v1.6/devices/");
   d6340:	f004 ff28 	bl	db194 <_Z16_fetch_usbserialv>
   d6344:	493d      	ldr	r1, [pc, #244]	; (d643c <_ZN7UbiHTTP3getEPKcS1_+0x1b0>)
   d6346:	f003 fc15 	bl	d9b74 <_ZN5Print5printEPKc>
      Serial.print(device_label);
   d634a:	f004 ff23 	bl	db194 <_Z16_fetch_usbserialv>
   d634e:	4631      	mov	r1, r6
   d6350:	f003 fc10 	bl	d9b74 <_ZN5Print5printEPKc>
      Serial.print("/");
   d6354:	f004 ff1e 	bl	db194 <_Z16_fetch_usbserialv>
   d6358:	4939      	ldr	r1, [pc, #228]	; (d6440 <_ZN7UbiHTTP3getEPKcS1_+0x1b4>)
   d635a:	f003 fc0b 	bl	d9b74 <_ZN5Print5printEPKc>
      Serial.print(variable_label);
   d635e:	f004 ff19 	bl	db194 <_Z16_fetch_usbserialv>
   d6362:	4629      	mov	r1, r5
   d6364:	f003 fc06 	bl	d9b74 <_ZN5Print5printEPKc>
      Serial.print("/lv");
   d6368:	f004 ff14 	bl	db194 <_Z16_fetch_usbserialv>
   d636c:	4935      	ldr	r1, [pc, #212]	; (d6444 <_ZN7UbiHTTP3getEPKcS1_+0x1b8>)
   d636e:	f003 fc01 	bl	d9b74 <_ZN5Print5printEPKc>
      Serial.print(" HTTP/1.1\r\n");
   d6372:	f004 ff0f 	bl	db194 <_Z16_fetch_usbserialv>
   d6376:	4934      	ldr	r1, [pc, #208]	; (d6448 <_ZN7UbiHTTP3getEPKcS1_+0x1bc>)
   d6378:	f003 fbfc 	bl	d9b74 <_ZN5Print5printEPKc>
      Serial.print("Host: ");
   d637c:	f004 ff0a 	bl	db194 <_Z16_fetch_usbserialv>
   d6380:	4932      	ldr	r1, [pc, #200]	; (d644c <_ZN7UbiHTTP3getEPKcS1_+0x1c0>)
   d6382:	f003 fbf7 	bl	d9b74 <_ZN5Print5printEPKc>
      Serial.print(_host);
   d6386:	f004 ff05 	bl	db194 <_Z16_fetch_usbserialv>
   d638a:	6861      	ldr	r1, [r4, #4]
   d638c:	f003 fbf2 	bl	d9b74 <_ZN5Print5printEPKc>
      Serial.print("\r\n");
   d6390:	f004 ff00 	bl	db194 <_Z16_fetch_usbserialv>
   d6394:	492e      	ldr	r1, [pc, #184]	; (d6450 <_ZN7UbiHTTP3getEPKcS1_+0x1c4>)
   d6396:	f003 fbed 	bl	d9b74 <_ZN5Print5printEPKc>
      Serial.print("User-Agent: ");
   d639a:	f004 fefb 	bl	db194 <_Z16_fetch_usbserialv>
   d639e:	492d      	ldr	r1, [pc, #180]	; (d6454 <_ZN7UbiHTTP3getEPKcS1_+0x1c8>)
   d63a0:	f003 fbe8 	bl	d9b74 <_ZN5Print5printEPKc>
      Serial.print(_user_agent);
   d63a4:	f004 fef6 	bl	db194 <_Z16_fetch_usbserialv>
   d63a8:	68a1      	ldr	r1, [r4, #8]
   d63aa:	f003 fbe3 	bl	d9b74 <_ZN5Print5printEPKc>
      Serial.print("\r\n");
   d63ae:	f004 fef1 	bl	db194 <_Z16_fetch_usbserialv>
   d63b2:	4927      	ldr	r1, [pc, #156]	; (d6450 <_ZN7UbiHTTP3getEPKcS1_+0x1c4>)
   d63b4:	f003 fbde 	bl	d9b74 <_ZN5Print5printEPKc>
      Serial.print("X-Auth-Token: ");
   d63b8:	f004 feec 	bl	db194 <_Z16_fetch_usbserialv>
   d63bc:	4926      	ldr	r1, [pc, #152]	; (d6458 <_ZN7UbiHTTP3getEPKcS1_+0x1cc>)
   d63be:	f003 fbd9 	bl	d9b74 <_ZN5Print5printEPKc>
      Serial.print(_token);
   d63c2:	f004 fee7 	bl	db194 <_Z16_fetch_usbserialv>
   d63c6:	68e1      	ldr	r1, [r4, #12]
   d63c8:	f003 fbd4 	bl	d9b74 <_ZN5Print5printEPKc>
      Serial.print("\r\n");
   d63cc:	f004 fee2 	bl	db194 <_Z16_fetch_usbserialv>
   d63d0:	491f      	ldr	r1, [pc, #124]	; (d6450 <_ZN7UbiHTTP3getEPKcS1_+0x1c4>)
   d63d2:	f003 fbcf 	bl	d9b74 <_ZN5Print5printEPKc>
      Serial.print("Content-Type: application/json\r\n\r\n");
   d63d6:	f004 fedd 	bl	db194 <_Z16_fetch_usbserialv>
   d63da:	4920      	ldr	r1, [pc, #128]	; (d645c <_ZN7UbiHTTP3getEPKcS1_+0x1d0>)
   d63dc:	f003 fbca 	bl	d9b74 <_ZN5Print5printEPKc>
    if (!waitServerAnswer()) {
   d63e0:	4620      	mov	r0, r4
   d63e2:	f7ff fe19 	bl	d6018 <_ZN7UbiHTTP16waitServerAnswerEv>
   d63e6:	b948      	cbnz	r0, d63fc <_ZN7UbiHTTP3getEPKcS1_+0x170>
      _client_http_ubi.stop();
   d63e8:	4813      	ldr	r0, [pc, #76]	; (d6438 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
      return ERROR_VALUE;
   d63ea:	ed9f 8a1d 	vldr	s16, [pc, #116]	; d6460 <_ZN7UbiHTTP3getEPKcS1_+0x1d4>
      _client_http_ubi.stop();
   d63ee:	f004 f8d7 	bl	da5a0 <_ZN9TCPClient4stopEv>
}
   d63f2:	eeb0 0a48 	vmov.f32	s0, s16
   d63f6:	ecbd 8b02 	vpop	{d8}
   d63fa:	bd70      	pop	{r4, r5, r6, pc}
    char* response = (char*)malloc(sizeof(char) * MAX_BUFFER_SIZE);
   d63fc:	f44f 702f 	mov.w	r0, #700	; 0x2bc
   d6400:	f001 faa0 	bl	d7944 <malloc>
    readServerAnswer(response);
   d6404:	4601      	mov	r1, r0
    char* response = (char*)malloc(sizeof(char) * MAX_BUFFER_SIZE);
   d6406:	4605      	mov	r5, r0
    readServerAnswer(response);
   d6408:	4620      	mov	r0, r4
   d640a:	f7ff fdc3 	bl	d5f94 <_ZN7UbiHTTP16readServerAnswerEPc>
  if (request_type == "LV") {
   d640e:	4628      	mov	r0, r5
   d6410:	f7ff fd04 	bl	d5e1c <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.0>
    _client_http_ubi.stop();
   d6414:	4808      	ldr	r0, [pc, #32]	; (d6438 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   d6416:	eeb0 8a40 	vmov.f32	s16, s0
   d641a:	f004 f8c1 	bl	da5a0 <_ZN9TCPClient4stopEv>
    free(response);
   d641e:	4628      	mov	r0, r5
   d6420:	f001 fa98 	bl	d7954 <free>
    return value;
   d6424:	e7e5      	b.n	d63f2 <_ZN7UbiHTTP3getEPKcS1_+0x166>
  if (_debug) {
   d6426:	7d23      	ldrb	r3, [r4, #20]
   d6428:	2b00      	cmp	r3, #0
   d642a:	d0dd      	beq.n	d63e8 <_ZN7UbiHTTP3getEPKcS1_+0x15c>
    Serial.println("Connection Failed ubidots - Try Again");
   d642c:	f004 feb2 	bl	db194 <_Z16_fetch_usbserialv>
   d6430:	490c      	ldr	r1, [pc, #48]	; (d6464 <_ZN7UbiHTTP3getEPKcS1_+0x1d8>)
   d6432:	f003 fbb2 	bl	d9b9a <_ZN5Print7printlnEPKc>
   d6436:	e7d7      	b.n	d63e8 <_ZN7UbiHTTP3getEPKcS1_+0x15c>
   d6438:	2003e4ec 	.word	0x2003e4ec
   d643c:	000dedba 	.word	0x000dedba
   d6440:	000dedcf 	.word	0x000dedcf
   d6444:	000dedd1 	.word	0x000dedd1
   d6448:	000decc5 	.word	0x000decc5
   d644c:	000decd1 	.word	0x000decd1
   d6450:	000dedf5 	.word	0x000dedf5
   d6454:	000decd8 	.word	0x000decd8
   d6458:	000dece5 	.word	0x000dece5
   d645c:	000dedd5 	.word	0x000dedd5
   d6460:	cda2425f 	.word	0xcda2425f
   d6464:	000dedf8 	.word	0x000dedf8

000d6468 <_GLOBAL__sub_I__ZN7UbiHTTPC2EPKciS1_S1_>:
   d6468:	4801      	ldr	r0, [pc, #4]	; (d6470 <_GLOBAL__sub_I__ZN7UbiHTTPC2EPKciS1_S1_+0x8>)
   d646a:	f004 b8e9 	b.w	da640 <_ZN9TCPClientC1Ev>
   d646e:	bf00      	nop
   d6470:	2003e4ec 	.word	0x2003e4ec

000d6474 <_ZN11UbiParticle3getEPKcS1_>:
}

float UbiParticle::get(const char* device_label, const char* variable_label) {
  // Retrieving values is not supported using Particle webhooks
  return ERROR_VALUE;
}
   d6474:	ed9f 0a01 	vldr	s0, [pc, #4]	; d647c <_ZN11UbiParticle3getEPKcS1_+0x8>
   d6478:	4770      	bx	lr
   d647a:	bf00      	nop
   d647c:	cda2425f 	.word	0xcda2425f

000d6480 <_ZN11UbiParticle8setDebugEb>:

void UbiParticle::setDebug(bool debug) { _debug = debug; }
   d6480:	7401      	strb	r1, [r0, #16]
   d6482:	4770      	bx	lr

000d6484 <_ZN11UbiParticle17getMultipleValuesEPKcS1_>:
   d6484:	2200      	movs	r2, #0
	  : _Node_allocator()
   d6486:	1d01      	adds	r1, r0, #4
      _M_header._M_left = &_M_header;
   d6488:	e9c0 2102 	strd	r2, r1, [r0, #8]
      _M_node_count = 0;
   d648c:	e9c0 1204 	strd	r1, r2, [r0, #16]
      _M_header._M_color = _S_red;
   d6490:	7102      	strb	r2, [r0, #4]

tcpMap UbiParticle::getMultipleValues(const char* deviceLabel, const char* variableLabels) {
  tcpMap results;
  return results;
}
   d6492:	4770      	bx	lr

000d6494 <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags>:
bool UbiParticle::sendData(const char* device_label, const char* device_name, char* payload, UbiFlags* flags) {
   d6494:	b530      	push	{r4, r5, lr}
   d6496:	b085      	sub	sp, #20
   d6498:	461a      	mov	r2, r3
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   d649a:	9b08      	ldr	r3, [sp, #32]
   d649c:	781b      	ldrb	r3, [r3, #0]
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d649e:	f88d 3000 	strb.w	r3, [sp]
   d64a2:	a802      	add	r0, sp, #8
   d64a4:	233c      	movs	r3, #60	; 0x3c
   d64a6:	f001 fc85 	bl	d7db4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d64aa:	2000      	movs	r0, #0
      }

    private:
      element_type*
      _M_get() const noexcept
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d64ac:	9c02      	ldr	r4, [sp, #8]
   d64ae:	f001 f959 	bl	d7764 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d64b2:	b120      	cbz	r0, d64be <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x2a>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, int(__m));
   d64b4:	7863      	ldrb	r3, [r4, #1]
                if (isDone()) { // We can use relaxed ordering here, as long as the future's result is not examined
   d64b6:	b913      	cbnz	r3, d64be <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x2a>
        spark_process();
   d64b8:	f001 f9a4 	bl	d7804 <spark_process>
    }
   d64bc:	e7fa      	b.n	d64b4 <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x20>
   d64be:	7863      	ldrb	r3, [r4, #1]
   d64c0:	f3bf 8f5b 	dmb	ish
   d64c4:	1c65      	adds	r5, r4, #1
        if (this->acquireDone() && this->isSucceeded()) {
   d64c6:	b9ab      	cbnz	r3, d64f4 <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x60>
        return std::move(defaultValue);
   d64c8:	2500      	movs	r5, #0
	if (_M_pi != nullptr)
   d64ca:	9c03      	ldr	r4, [sp, #12]
   d64cc:	b17c      	cbz	r4, d64ee <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x5a>
      if (--_M_use_count == 0)
   d64ce:	6863      	ldr	r3, [r4, #4]
   d64d0:	3b01      	subs	r3, #1
   d64d2:	6063      	str	r3, [r4, #4]
   d64d4:	b95b      	cbnz	r3, d64ee <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x5a>
          _M_dispose();
   d64d6:	6823      	ldr	r3, [r4, #0]
   d64d8:	4620      	mov	r0, r4
   d64da:	689b      	ldr	r3, [r3, #8]
   d64dc:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d64de:	68a3      	ldr	r3, [r4, #8]
   d64e0:	3b01      	subs	r3, #1
   d64e2:	60a3      	str	r3, [r4, #8]
   d64e4:	b91b      	cbnz	r3, d64ee <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x5a>
            _M_destroy();
   d64e6:	6823      	ldr	r3, [r4, #0]
   d64e8:	4620      	mov	r0, r4
   d64ea:	68db      	ldr	r3, [r3, #12]
   d64ec:	4798      	blx	r3
}
   d64ee:	4628      	mov	r0, r5
   d64f0:	b005      	add	sp, #20
   d64f2:	bd30      	pop	{r4, r5, pc}
        return (application_thread_current(nullptr) != 0);
   d64f4:	2000      	movs	r0, #0
   d64f6:	f001 f935 	bl	d7764 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d64fa:	b120      	cbz	r0, d6506 <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x72>
   d64fc:	782b      	ldrb	r3, [r5, #0]
                if (isDone()) { // We can use relaxed ordering here, as long as the future's result is not examined
   d64fe:	b913      	cbnz	r3, d6506 <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x72>
        spark_process();
   d6500:	f001 f980 	bl	d7804 <spark_process>
    }
   d6504:	e7fa      	b.n	d64fc <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x68>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   d6506:	7823      	ldrb	r3, [r4, #0]
        if (this->acquireDone() && this->isSucceeded()) {
   d6508:	2b01      	cmp	r3, #1
   d650a:	d1dd      	bne.n	d64c8 <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x34>
            return result_;
   d650c:	7b25      	ldrb	r5, [r4, #12]
   d650e:	e7dc      	b.n	d64ca <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x36>

000d6510 <_ZN11UbiParticleC1EPKciS1_S1_>:
UbiParticle::UbiParticle(const char* host, const int port, const char* user_agent, const char* token) {
   d6510:	b510      	push	{r4, lr}
   d6512:	4c04      	ldr	r4, [pc, #16]	; (d6524 <_ZN11UbiParticleC1EPKciS1_S1_+0x14>)
   d6514:	6004      	str	r4, [r0, #0]
  _user_agent = user_agent;
   d6516:	e9c0 1301 	strd	r1, r3, [r0, #4]
UbiParticle::UbiParticle(const char* host, const int port, const char* user_agent, const char* token) {
   d651a:	2400      	movs	r4, #0
  _token = token;
   d651c:	9b02      	ldr	r3, [sp, #8]
UbiParticle::UbiParticle(const char* host, const int port, const char* user_agent, const char* token) {
   d651e:	7404      	strb	r4, [r0, #16]
  _token = token;
   d6520:	60c3      	str	r3, [r0, #12]
}
   d6522:	bd10      	pop	{r4, pc}
   d6524:	000dee40 	.word	0x000dee40

000d6528 <_ZN18UbiProtocolHandler3addEPcfS0_mj>:
 * @arg dot_timestamp_millis [optional] Dot timestamp in millis to add to
 * dot_timestamp_seconds, usefull for datalogger.
 */

void UbiProtocolHandler::add(char* variable_label, float value, char* context, unsigned long dot_timestamp_seconds,
                             unsigned int dot_timestamp_millis) {
   d6528:	b538      	push	{r3, r4, r5, lr}
   d652a:	4604      	mov	r4, r0
  _dirty = true;
   d652c:	2001      	movs	r0, #1
   d652e:	7460      	strb	r0, [r4, #17]
  (_dots + _current_value)->variable_label = variable_label;
   d6530:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d6534:	68e5      	ldr	r5, [r4, #12]
   d6536:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   d653a:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
  (_dots + _current_value)->dot_value = value;
   d653e:	f994 1010 	ldrsb.w	r1, [r4, #16]
   d6542:	68e0      	ldr	r0, [r4, #12]
   d6544:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   d6548:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   d654c:	ed81 0a02 	vstr	s0, [r1, #8]
  (_dots + _current_value)->dot_context = context;
   d6550:	f994 1010 	ldrsb.w	r1, [r4, #16]
   d6554:	68e0      	ldr	r0, [r4, #12]
   d6556:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   d655a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   d655e:	604a      	str	r2, [r1, #4]
  (_dots + _current_value)->dot_timestamp_seconds = dot_timestamp_seconds;
   d6560:	f994 2010 	ldrsb.w	r2, [r4, #16]
   d6564:	68e1      	ldr	r1, [r4, #12]
   d6566:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   d656a:	eb01 0282 	add.w	r2, r1, r2, lsl #2
   d656e:	60d3      	str	r3, [r2, #12]
  (_dots + _current_value)->dot_timestamp_millis = dot_timestamp_millis;
   d6570:	f994 3010 	ldrsb.w	r3, [r4, #16]
   d6574:	68e2      	ldr	r2, [r4, #12]
   d6576:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   d657a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   d657e:	9a04      	ldr	r2, [sp, #16]
   d6580:	611a      	str	r2, [r3, #16]
  _current_value++;
   d6582:	7c23      	ldrb	r3, [r4, #16]
   d6584:	3301      	adds	r3, #1
   d6586:	b25b      	sxtb	r3, r3
  if (_current_value > MAX_VALUES) {
   d6588:	2b0a      	cmp	r3, #10
  _current_value++;
   d658a:	7423      	strb	r3, [r4, #16]
  if (_current_value > MAX_VALUES) {
   d658c:	dd08      	ble.n	d65a0 <_ZN18UbiProtocolHandler3addEPcfS0_mj+0x78>
    if (_debug) {
   d658e:	7ca3      	ldrb	r3, [r4, #18]
   d6590:	b123      	cbz	r3, d659c <_ZN18UbiProtocolHandler3addEPcfS0_mj+0x74>
      Serial.println(F("You are sending more than the maximum of consecutive variables"));
   d6592:	f004 fdff 	bl	db194 <_Z16_fetch_usbserialv>
   d6596:	4903      	ldr	r1, [pc, #12]	; (d65a4 <_ZN18UbiProtocolHandler3addEPcfS0_mj+0x7c>)
   d6598:	f003 faff 	bl	d9b9a <_ZN5Print7printlnEPKc>
    }
    _current_value = MAX_VALUES;
   d659c:	230a      	movs	r3, #10
   d659e:	7423      	strb	r3, [r4, #16]
  }
}
   d65a0:	bd38      	pop	{r3, r4, r5, pc}
   d65a2:	bf00      	nop
   d65a4:	000dee50 	.word	0x000dee50

000d65a8 <_ZN18UbiProtocolHandler12_floatToCharEPcf>:
 * Stores the float type value into the char array input
 * @str_value [Mandatory] char payload pointer to store the value.
 * @value [Mandatory] Float value to convert
 */

void UbiProtocolHandler::_floatToChar(char* str_value, float value) {
   d65a8:	b510      	push	{r4, lr}
   d65aa:	ee10 0a10 	vmov	r0, s0
   d65ae:	b086      	sub	sp, #24
   d65b0:	460c      	mov	r4, r1
  char temp_arr[20];
  sprintf(temp_arr, "%17g", value);
   d65b2:	f005 fb31 	bl	dbc18 <__aeabi_f2d>
   d65b6:	4602      	mov	r2, r0
   d65b8:	460b      	mov	r3, r1
   d65ba:	a801      	add	r0, sp, #4
   d65bc:	490a      	ldr	r1, [pc, #40]	; (d65e8 <_ZN18UbiProtocolHandler12_floatToCharEPcf+0x40>)
   d65be:	f001 f9d9 	bl	d7974 <sprintf>
  uint8_t j = 0;
  uint8_t k = 0;
  while (j < 20) {
   d65c2:	a801      	add	r0, sp, #4
  sprintf(temp_arr, "%17g", value);
   d65c4:	2214      	movs	r2, #20
  uint8_t k = 0;
   d65c6:	2300      	movs	r3, #0
    if (temp_arr[j] != ' ') {
   d65c8:	f810 1b01 	ldrb.w	r1, [r0], #1
   d65cc:	2920      	cmp	r1, #32
   d65ce:	d006      	beq.n	d65de <_ZN18UbiProtocolHandler12_floatToCharEPcf+0x36>
      str_value[k] = temp_arr[j];
   d65d0:	54e1      	strb	r1, [r4, r3]
      k++;
   d65d2:	3301      	adds	r3, #1
   d65d4:	b2db      	uxtb	r3, r3
    }
    if (temp_arr[j] == '\0') {
   d65d6:	b911      	cbnz	r1, d65de <_ZN18UbiProtocolHandler12_floatToCharEPcf+0x36>
      str_value[k] = temp_arr[j];
   d65d8:	54e1      	strb	r1, [r4, r3]
      break;
    }
    j++;
  }
}
   d65da:	b006      	add	sp, #24
   d65dc:	bd10      	pop	{r4, pc}
  while (j < 20) {
   d65de:	3a01      	subs	r2, #1
   d65e0:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
   d65e4:	d1f0      	bne.n	d65c8 <_ZN18UbiProtocolHandler12_floatToCharEPcf+0x20>
   d65e6:	e7f8      	b.n	d65da <_ZN18UbiProtocolHandler12_floatToCharEPcf+0x32>
   d65e8:	000dee8f 	.word	0x000dee8f

000d65ec <_ZN18UbiProtocolHandler16buildHttpPayloadEPc>:
void UbiProtocolHandler::buildHttpPayload(char* payload) {
   d65ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d65f0:	460c      	mov	r4, r1
   d65f2:	b089      	sub	sp, #36	; 0x24
  sprintf(payload, "{");
   d65f4:	494c      	ldr	r1, [pc, #304]	; (d6728 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x13c>)
    sprintf(payload, "%s\"%s\":{\"value\":%s", payload, (_dots + i)->variable_label, str_value);
   d65f6:	f8df 8154 	ldr.w	r8, [pc, #340]	; d674c <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x160>
      sprintf(payload, "%s,\"timestamp\":%lu", payload, (_dots + i)->dot_timestamp_seconds);
   d65fa:	f8df 9154 	ldr.w	r9, [pc, #340]	; d6750 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x164>
        sprintf(payload, "%s000", payload);
   d65fe:	f8df a154 	ldr.w	sl, [pc, #340]	; d6754 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x168>
void UbiProtocolHandler::buildHttpPayload(char* payload) {
   d6602:	4605      	mov	r5, r0
  sprintf(payload, "{");
   d6604:	4620      	mov	r0, r4
   d6606:	f006 f8ee 	bl	dc7e6 <strcpy>
  for (uint8_t i = 0; i < _current_value;) {
   d660a:	2600      	movs	r6, #0
   d660c:	f995 3010 	ldrsb.w	r3, [r5, #16]
   d6610:	429e      	cmp	r6, r3
   d6612:	da6a      	bge.n	d66ea <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0xfe>
    _floatToChar(str_value, (_dots + i)->dot_value);
   d6614:	68eb      	ldr	r3, [r5, #12]
   d6616:	eb06 0b86 	add.w	fp, r6, r6, lsl #2
   d661a:	eb03 038b 	add.w	r3, r3, fp, lsl #2
   d661e:	ed93 0a02 	vldr	s0, [r3, #8]
   d6622:	a903      	add	r1, sp, #12
   d6624:	4628      	mov	r0, r5
   d6626:	f7ff ffbf 	bl	d65a8 <_ZN18UbiProtocolHandler12_floatToCharEPcf>
    sprintf(payload, "%s\"%s\":{\"value\":%s", payload, (_dots + i)->variable_label, str_value);
   d662a:	68eb      	ldr	r3, [r5, #12]
   d662c:	a903      	add	r1, sp, #12
   d662e:	9100      	str	r1, [sp, #0]
   d6630:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
   d6634:	4622      	mov	r2, r4
   d6636:	4641      	mov	r1, r8
   d6638:	4620      	mov	r0, r4
   d663a:	f001 f99b 	bl	d7974 <sprintf>
    if ((_dots + i)->dot_timestamp_seconds != NULL) {
   d663e:	68eb      	ldr	r3, [r5, #12]
    _floatToChar(str_value, (_dots + i)->dot_value);
   d6640:	ea4f 078b 	mov.w	r7, fp, lsl #2
    if ((_dots + i)->dot_timestamp_seconds != NULL) {
   d6644:	443b      	add	r3, r7
   d6646:	68db      	ldr	r3, [r3, #12]
   d6648:	b343      	cbz	r3, d669c <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0xb0>
      sprintf(payload, "%s,\"timestamp\":%lu", payload, (_dots + i)->dot_timestamp_seconds);
   d664a:	4622      	mov	r2, r4
   d664c:	4649      	mov	r1, r9
   d664e:	4620      	mov	r0, r4
   d6650:	f001 f990 	bl	d7974 <sprintf>
      if ((_dots + i)->dot_timestamp_millis != NULL) {
   d6654:	68eb      	ldr	r3, [r5, #12]
   d6656:	443b      	add	r3, r7
   d6658:	691b      	ldr	r3, [r3, #16]
   d665a:	2b00      	cmp	r3, #0
   d665c:	d038      	beq.n	d66d0 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0xe4>
        uint8_t dec = (timestamp_millis / 10) % 10;
   d665e:	200a      	movs	r0, #10
   d6660:	fb93 f1f0 	sdiv	r1, r3, r0
   d6664:	fb91 fcf0 	sdiv	ip, r1, r0
   d6668:	fb00 1c1c 	mls	ip, r0, ip, r1
        uint8_t units = timestamp_millis % 10;
   d666c:	fb00 3111 	mls	r1, r0, r1, r3
        sprintf(milliseconds, "%d%d%d", hund, dec, units);
   d6670:	b2c9      	uxtb	r1, r1
        uint8_t hund = (timestamp_millis / 100) % 10;
   d6672:	2264      	movs	r2, #100	; 0x64
   d6674:	fb93 f2f2 	sdiv	r2, r3, r2
   d6678:	fb92 fef0 	sdiv	lr, r2, r0
   d667c:	fb00 221e 	mls	r2, r0, lr, r2
        sprintf(milliseconds, "%d%d%d", hund, dec, units);
   d6680:	9100      	str	r1, [sp, #0]
   d6682:	fa5f f38c 	uxtb.w	r3, ip
   d6686:	4929      	ldr	r1, [pc, #164]	; (d672c <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x140>)
   d6688:	b2d2      	uxtb	r2, r2
   d668a:	a802      	add	r0, sp, #8
   d668c:	f001 f972 	bl	d7974 <sprintf>
        sprintf(payload, "%s%s", payload, milliseconds);
   d6690:	4927      	ldr	r1, [pc, #156]	; (d6730 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x144>)
   d6692:	ab02      	add	r3, sp, #8
   d6694:	4622      	mov	r2, r4
   d6696:	4620      	mov	r0, r4
   d6698:	f001 f96c 	bl	d7974 <sprintf>
    if ((_dots + i)->dot_context != NULL) {
   d669c:	68eb      	ldr	r3, [r5, #12]
   d669e:	441f      	add	r7, r3
   d66a0:	687b      	ldr	r3, [r7, #4]
   d66a2:	b123      	cbz	r3, d66ae <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0xc2>
      sprintf(payload, "%s,\"context\": {%s}", payload, (_dots + i)->dot_context);
   d66a4:	4923      	ldr	r1, [pc, #140]	; (d6734 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x148>)
   d66a6:	4622      	mov	r2, r4
   d66a8:	4620      	mov	r0, r4
   d66aa:	f001 f963 	bl	d7974 <sprintf>
    sprintf(payload, "%s}", payload);
   d66ae:	4622      	mov	r2, r4
   d66b0:	4921      	ldr	r1, [pc, #132]	; (d6738 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x14c>)
   d66b2:	4620      	mov	r0, r4
   d66b4:	f001 f95e 	bl	d7974 <sprintf>
    i++;
   d66b8:	3601      	adds	r6, #1
    if (i < _current_value) {
   d66ba:	f995 3010 	ldrsb.w	r3, [r5, #16]
    i++;
   d66be:	b2f6      	uxtb	r6, r6
    if (i < _current_value) {
   d66c0:	429e      	cmp	r6, r3
      sprintf(payload, "%s,", payload);
   d66c2:	4622      	mov	r2, r4
    if (i < _current_value) {
   d66c4:	da0a      	bge.n	d66dc <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0xf0>
      sprintf(payload, "%s,", payload);
   d66c6:	491d      	ldr	r1, [pc, #116]	; (d673c <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x150>)
   d66c8:	4620      	mov	r0, r4
   d66ca:	f001 f953 	bl	d7974 <sprintf>
   d66ce:	e79d      	b.n	d660c <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x20>
        sprintf(payload, "%s000", payload);
   d66d0:	4622      	mov	r2, r4
   d66d2:	4651      	mov	r1, sl
   d66d4:	4620      	mov	r0, r4
   d66d6:	f001 f94d 	bl	d7974 <sprintf>
   d66da:	e7df      	b.n	d669c <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0xb0>
      sprintf(payload, "%s}", payload);
   d66dc:	4916      	ldr	r1, [pc, #88]	; (d6738 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x14c>)
   d66de:	4620      	mov	r0, r4
   d66e0:	f001 f948 	bl	d7974 <sprintf>
      _current_value = 0;
   d66e4:	2300      	movs	r3, #0
   d66e6:	742b      	strb	r3, [r5, #16]
  for (uint8_t i = 0; i < _current_value;) {
   d66e8:	e790      	b.n	d660c <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x20>
  if (_debug) {
   d66ea:	7cab      	ldrb	r3, [r5, #18]
   d66ec:	b1c3      	cbz	r3, d6720 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x134>
    Serial.println("----------");
   d66ee:	f004 fd51 	bl	db194 <_Z16_fetch_usbserialv>
   d66f2:	4913      	ldr	r1, [pc, #76]	; (d6740 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x154>)
   d66f4:	f003 fa51 	bl	d9b9a <_ZN5Print7printlnEPKc>
    Serial.println("payload:");
   d66f8:	f004 fd4c 	bl	db194 <_Z16_fetch_usbserialv>
   d66fc:	4911      	ldr	r1, [pc, #68]	; (d6744 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x158>)
   d66fe:	f003 fa4c 	bl	d9b9a <_ZN5Print7printlnEPKc>
    Serial.println(payload);
   d6702:	f004 fd47 	bl	db194 <_Z16_fetch_usbserialv>
   d6706:	4621      	mov	r1, r4
   d6708:	f003 fa47 	bl	d9b9a <_ZN5Print7printlnEPKc>
    Serial.println("----------");
   d670c:	f004 fd42 	bl	db194 <_Z16_fetch_usbserialv>
   d6710:	490b      	ldr	r1, [pc, #44]	; (d6740 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x154>)
   d6712:	f003 fa42 	bl	d9b9a <_ZN5Print7printlnEPKc>
    Serial.println("");
   d6716:	f004 fd3d 	bl	db194 <_Z16_fetch_usbserialv>
   d671a:	490b      	ldr	r1, [pc, #44]	; (d6748 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x15c>)
   d671c:	f003 fa3d 	bl	d9b9a <_ZN5Print7printlnEPKc>
}
   d6720:	b009      	add	sp, #36	; 0x24
   d6722:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6726:	bf00      	nop
   d6728:	000dee94 	.word	0x000dee94
   d672c:	000deebc 	.word	0x000deebc
   d6730:	000deec3 	.word	0x000deec3
   d6734:	000deece 	.word	0x000deece
   d6738:	000deedd 	.word	0x000deedd
   d673c:	000deee1 	.word	0x000deee1
   d6740:	000dec6f 	.word	0x000dec6f
   d6744:	000deee5 	.word	0x000deee5
   d6748:	000dedf7 	.word	0x000dedf7
   d674c:	000dee96 	.word	0x000dee96
   d6750:	000deea9 	.word	0x000deea9
   d6754:	000deec8 	.word	0x000deec8

000d6758 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_>:
void UbiProtocolHandler::buildTcpPayload(char* payload, const char* device_label, const char* device_name) {
   d6758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d675c:	460c      	mov	r4, r1
   d675e:	4605      	mov	r5, r0
   d6760:	b089      	sub	sp, #36	; 0x24
  sprintf(payload, "");
   d6762:	4952      	ldr	r1, [pc, #328]	; (d68ac <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x154>)
      sprintf(payload, "%s$%s", payload, (_dots + i)->dot_context);
   d6764:	f8df 8174 	ldr.w	r8, [pc, #372]	; d68dc <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x184>
      sprintf(payload, "%s@%lu", payload, (_dots + i)->dot_timestamp_seconds);
   d6768:	f8df 9174 	ldr.w	r9, [pc, #372]	; d68e0 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x188>
  sprintf(payload, "");
   d676c:	4620      	mov	r0, r4
void UbiProtocolHandler::buildTcpPayload(char* payload, const char* device_label, const char* device_name) {
   d676e:	4616      	mov	r6, r2
   d6770:	461f      	mov	r7, r3
  sprintf(payload, "");
   d6772:	f006 f838 	bl	dc7e6 <strcpy>
  sprintf(payload, "%s|POST|%s|", USER_AGENT, _token);
   d6776:	68ab      	ldr	r3, [r5, #8]
   d6778:	4a4d      	ldr	r2, [pc, #308]	; (d68b0 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x158>)
   d677a:	494e      	ldr	r1, [pc, #312]	; (d68b4 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x15c>)
   d677c:	4620      	mov	r0, r4
   d677e:	f001 f8f9 	bl	d7974 <sprintf>
  sprintf(payload, "%s%s:%s", payload, device_label, device_name);
   d6782:	4633      	mov	r3, r6
   d6784:	494c      	ldr	r1, [pc, #304]	; (d68b8 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x160>)
   d6786:	9700      	str	r7, [sp, #0]
   d6788:	4622      	mov	r2, r4
   d678a:	4620      	mov	r0, r4
   d678c:	f001 f8f2 	bl	d7974 <sprintf>
  sprintf(payload, "%s=>", payload);
   d6790:	494a      	ldr	r1, [pc, #296]	; (d68bc <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x164>)
    sprintf(payload, "%s%s:%s", payload, (_dots + i)->variable_label, str_value);
   d6792:	4f49      	ldr	r7, [pc, #292]	; (d68b8 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x160>)
  sprintf(payload, "%s=>", payload);
   d6794:	4622      	mov	r2, r4
   d6796:	4620      	mov	r0, r4
   d6798:	f001 f8ec 	bl	d7974 <sprintf>
  for (uint8_t i = 0; i < _current_value;) {
   d679c:	2600      	movs	r6, #0
   d679e:	f995 3010 	ldrsb.w	r3, [r5, #16]
   d67a2:	429e      	cmp	r6, r3
   d67a4:	da64      	bge.n	d6870 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x118>
    _floatToChar(str_value, (_dots + i)->dot_value);
   d67a6:	68eb      	ldr	r3, [r5, #12]
   d67a8:	eb06 0b86 	add.w	fp, r6, r6, lsl #2
   d67ac:	eb03 038b 	add.w	r3, r3, fp, lsl #2
   d67b0:	ed93 0a02 	vldr	s0, [r3, #8]
   d67b4:	a903      	add	r1, sp, #12
   d67b6:	4628      	mov	r0, r5
   d67b8:	f7ff fef6 	bl	d65a8 <_ZN18UbiProtocolHandler12_floatToCharEPcf>
    sprintf(payload, "%s%s:%s", payload, (_dots + i)->variable_label, str_value);
   d67bc:	68eb      	ldr	r3, [r5, #12]
   d67be:	a903      	add	r1, sp, #12
   d67c0:	9100      	str	r1, [sp, #0]
   d67c2:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
   d67c6:	4622      	mov	r2, r4
   d67c8:	4639      	mov	r1, r7
   d67ca:	4620      	mov	r0, r4
   d67cc:	f001 f8d2 	bl	d7974 <sprintf>
    if ((_dots + i)->dot_context != NULL) {
   d67d0:	68eb      	ldr	r3, [r5, #12]
    _floatToChar(str_value, (_dots + i)->dot_value);
   d67d2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
    if ((_dots + i)->dot_context != NULL) {
   d67d6:	4453      	add	r3, sl
   d67d8:	685b      	ldr	r3, [r3, #4]
   d67da:	b123      	cbz	r3, d67e6 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x8e>
      sprintf(payload, "%s$%s", payload, (_dots + i)->dot_context);
   d67dc:	4622      	mov	r2, r4
   d67de:	4641      	mov	r1, r8
   d67e0:	4620      	mov	r0, r4
   d67e2:	f001 f8c7 	bl	d7974 <sprintf>
    if ((_dots + i)->dot_timestamp_seconds != NULL) {
   d67e6:	68eb      	ldr	r3, [r5, #12]
   d67e8:	4453      	add	r3, sl
   d67ea:	68db      	ldr	r3, [r3, #12]
   d67ec:	b33b      	cbz	r3, d683e <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0xe6>
      sprintf(payload, "%s@%lu", payload, (_dots + i)->dot_timestamp_seconds);
   d67ee:	4622      	mov	r2, r4
   d67f0:	4649      	mov	r1, r9
   d67f2:	4620      	mov	r0, r4
   d67f4:	f001 f8be 	bl	d7974 <sprintf>
      if ((_dots + i)->dot_timestamp_millis != NULL) {
   d67f8:	68eb      	ldr	r3, [r5, #12]
   d67fa:	4453      	add	r3, sl
   d67fc:	691b      	ldr	r3, [r3, #16]
   d67fe:	b353      	cbz	r3, d6856 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0xfe>
        uint8_t dec = (timestamp_millis / 10) % 10;
   d6800:	200a      	movs	r0, #10
   d6802:	fb93 f1f0 	sdiv	r1, r3, r0
   d6806:	fb91 fcf0 	sdiv	ip, r1, r0
   d680a:	fb00 1c1c 	mls	ip, r0, ip, r1
        uint8_t units = timestamp_millis % 10;
   d680e:	fb00 3111 	mls	r1, r0, r1, r3
        sprintf(milliseconds, "%d%d%d", hund, dec, units);
   d6812:	b2c9      	uxtb	r1, r1
        uint8_t hund = (timestamp_millis / 100) % 10;
   d6814:	2264      	movs	r2, #100	; 0x64
   d6816:	fb93 f2f2 	sdiv	r2, r3, r2
   d681a:	fb92 fef0 	sdiv	lr, r2, r0
   d681e:	fb00 221e 	mls	r2, r0, lr, r2
        sprintf(milliseconds, "%d%d%d", hund, dec, units);
   d6822:	9100      	str	r1, [sp, #0]
   d6824:	fa5f f38c 	uxtb.w	r3, ip
   d6828:	4925      	ldr	r1, [pc, #148]	; (d68c0 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x168>)
   d682a:	b2d2      	uxtb	r2, r2
   d682c:	a802      	add	r0, sp, #8
   d682e:	f001 f8a1 	bl	d7974 <sprintf>
        sprintf(payload, "%s%s", payload, milliseconds);
   d6832:	4924      	ldr	r1, [pc, #144]	; (d68c4 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x16c>)
   d6834:	ab02      	add	r3, sp, #8
   d6836:	4622      	mov	r2, r4
   d6838:	4620      	mov	r0, r4
   d683a:	f001 f89b 	bl	d7974 <sprintf>
    if (i < _current_value) {
   d683e:	f995 3010 	ldrsb.w	r3, [r5, #16]
    i++;
   d6842:	3601      	adds	r6, #1
   d6844:	b2f6      	uxtb	r6, r6
    if (i < _current_value) {
   d6846:	429e      	cmp	r6, r3
      sprintf(payload, "%s,", payload);
   d6848:	4622      	mov	r2, r4
    if (i < _current_value) {
   d684a:	da0a      	bge.n	d6862 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x10a>
      sprintf(payload, "%s,", payload);
   d684c:	491e      	ldr	r1, [pc, #120]	; (d68c8 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x170>)
   d684e:	4620      	mov	r0, r4
   d6850:	f001 f890 	bl	d7974 <sprintf>
   d6854:	e7a3      	b.n	d679e <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x46>
        sprintf(payload, "%s000", payload);
   d6856:	491d      	ldr	r1, [pc, #116]	; (d68cc <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x174>)
   d6858:	4622      	mov	r2, r4
   d685a:	4620      	mov	r0, r4
   d685c:	f001 f88a 	bl	d7974 <sprintf>
   d6860:	e7ed      	b.n	d683e <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0xe6>
      sprintf(payload, "%s|end", payload);
   d6862:	491b      	ldr	r1, [pc, #108]	; (d68d0 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x178>)
   d6864:	4620      	mov	r0, r4
   d6866:	f001 f885 	bl	d7974 <sprintf>
      _current_value = 0;
   d686a:	2300      	movs	r3, #0
   d686c:	742b      	strb	r3, [r5, #16]
  for (uint8_t i = 0; i < _current_value;) {
   d686e:	e796      	b.n	d679e <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x46>
  if (_debug) {
   d6870:	7cab      	ldrb	r3, [r5, #18]
   d6872:	b1c3      	cbz	r3, d68a6 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x14e>
    Serial.println("----------");
   d6874:	f004 fc8e 	bl	db194 <_Z16_fetch_usbserialv>
   d6878:	4916      	ldr	r1, [pc, #88]	; (d68d4 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x17c>)
   d687a:	f003 f98e 	bl	d9b9a <_ZN5Print7printlnEPKc>
    Serial.println("payload:");
   d687e:	f004 fc89 	bl	db194 <_Z16_fetch_usbserialv>
   d6882:	4915      	ldr	r1, [pc, #84]	; (d68d8 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x180>)
   d6884:	f003 f989 	bl	d9b9a <_ZN5Print7printlnEPKc>
    Serial.println(payload);
   d6888:	f004 fc84 	bl	db194 <_Z16_fetch_usbserialv>
   d688c:	4621      	mov	r1, r4
   d688e:	f003 f984 	bl	d9b9a <_ZN5Print7printlnEPKc>
    Serial.println("----------");
   d6892:	f004 fc7f 	bl	db194 <_Z16_fetch_usbserialv>
   d6896:	490f      	ldr	r1, [pc, #60]	; (d68d4 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x17c>)
   d6898:	f003 f97f 	bl	d9b9a <_ZN5Print7printlnEPKc>
    Serial.println("");
   d689c:	f004 fc7a 	bl	db194 <_Z16_fetch_usbserialv>
   d68a0:	4902      	ldr	r1, [pc, #8]	; (d68ac <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x154>)
   d68a2:	f003 f97a 	bl	d9b9a <_ZN5Print7printlnEPKc>
}
   d68a6:	b009      	add	sp, #36	; 0x24
   d68a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d68ac:	000dedf7 	.word	0x000dedf7
   d68b0:	000dec0c 	.word	0x000dec0c
   d68b4:	000deeee 	.word	0x000deeee
   d68b8:	000deefa 	.word	0x000deefa
   d68bc:	000def02 	.word	0x000def02
   d68c0:	000deebc 	.word	0x000deebc
   d68c4:	000deec3 	.word	0x000deec3
   d68c8:	000deee1 	.word	0x000deee1
   d68cc:	000deec8 	.word	0x000deec8
   d68d0:	000def14 	.word	0x000def14
   d68d4:	000dec6f 	.word	0x000dec6f
   d68d8:	000deee5 	.word	0x000deee5
   d68dc:	000def07 	.word	0x000def07
   d68e0:	000def0d 	.word	0x000def0d

000d68e4 <_ZN18UbiProtocolHandler4sendEPKcS1_P8UbiFlags>:
bool UbiProtocolHandler::send(const char* device_label, const char* device_name, UbiFlags* flags) {
   d68e4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d68e8:	4604      	mov	r4, r0
  char* payload = (char*)malloc(sizeof(char) * MAX_BUFFER_SIZE);
   d68ea:	f44f 702f 	mov.w	r0, #700	; 0x2bc
bool UbiProtocolHandler::send(const char* device_label, const char* device_name, UbiFlags* flags) {
   d68ee:	461e      	mov	r6, r3
   d68f0:	460f      	mov	r7, r1
   d68f2:	4690      	mov	r8, r2
  char* payload = (char*)malloc(sizeof(char) * MAX_BUFFER_SIZE);
   d68f4:	f001 f826 	bl	d7944 <malloc>
  if (_iot_protocol == UBI_TCP || _iot_protocol == UBI_UDP) {
   d68f8:	7ce3      	ldrb	r3, [r4, #19]
   d68fa:	3b01      	subs	r3, #1
   d68fc:	2b01      	cmp	r3, #1
  char* payload = (char*)malloc(sizeof(char) * MAX_BUFFER_SIZE);
   d68fe:	4605      	mov	r5, r0
  if (_iot_protocol == UBI_TCP || _iot_protocol == UBI_UDP) {
   d6900:	d826      	bhi.n	d6950 <_ZN18UbiProtocolHandler4sendEPKcS1_P8UbiFlags+0x6c>
    buildTcpPayload(payload, device_label, device_name);
   d6902:	4601      	mov	r1, r0
   d6904:	4643      	mov	r3, r8
   d6906:	463a      	mov	r2, r7
   d6908:	4620      	mov	r0, r4
   d690a:	f7ff ff25 	bl	d6758 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_>
  if (_debug) {
   d690e:	7ca3      	ldrb	r3, [r4, #18]
   d6910:	b123      	cbz	r3, d691c <_ZN18UbiProtocolHandler4sendEPKcS1_P8UbiFlags+0x38>
    Serial.println("Sending data...");
   d6912:	f004 fc3f 	bl	db194 <_Z16_fetch_usbserialv>
   d6916:	4911      	ldr	r1, [pc, #68]	; (d695c <_ZN18UbiProtocolHandler4sendEPKcS1_P8UbiFlags+0x78>)
   d6918:	f003 f93f 	bl	d9b9a <_ZN5Print7printlnEPKc>
  bool result = _ubiProtocol->sendData(device_label, device_name, payload, flags);
   d691c:	6860      	ldr	r0, [r4, #4]
   d691e:	6803      	ldr	r3, [r0, #0]
   d6920:	9600      	str	r6, [sp, #0]
   d6922:	f8d3 9000 	ldr.w	r9, [r3]
   d6926:	4639      	mov	r1, r7
   d6928:	462b      	mov	r3, r5
   d692a:	4642      	mov	r2, r8
   d692c:	47c8      	blx	r9
   d692e:	4607      	mov	r7, r0
  free(payload);
   d6930:	4628      	mov	r0, r5
   d6932:	f001 f80f 	bl	d7954 <free>
  delete flags;
   d6936:	b11e      	cbz	r6, d6940 <_ZN18UbiProtocolHandler4sendEPKcS1_P8UbiFlags+0x5c>
   d6938:	2101      	movs	r1, #1
   d693a:	4630      	mov	r0, r6
   d693c:	f004 fe3a 	bl	db5b4 <_ZdlPvj>
  if (result) {
   d6940:	2300      	movs	r3, #0
   d6942:	b107      	cbz	r7, d6946 <_ZN18UbiProtocolHandler4sendEPKcS1_P8UbiFlags+0x62>
    _dirty = false;
   d6944:	7463      	strb	r3, [r4, #17]
}
   d6946:	4638      	mov	r0, r7
  _current_value = 0;
   d6948:	7423      	strb	r3, [r4, #16]
}
   d694a:	b003      	add	sp, #12
   d694c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    buildHttpPayload(payload);
   d6950:	4601      	mov	r1, r0
   d6952:	4620      	mov	r0, r4
   d6954:	f7ff fe4a 	bl	d65ec <_ZN18UbiProtocolHandler16buildHttpPayloadEPc>
   d6958:	e7d9      	b.n	d690e <_ZN18UbiProtocolHandler4sendEPKcS1_P8UbiFlags+0x2a>
   d695a:	bf00      	nop
   d695c:	000def1b 	.word	0x000def1b

000d6960 <_ZN18UbiProtocolHandler4sendEPKcN8particle5FlagsI15PublishFlagTypehEE>:
bool UbiProtocolHandler::send(const char* device_label, PublishFlags flag) {
   d6960:	b570      	push	{r4, r5, r6, lr}
   d6962:	4604      	mov	r4, r0
  UbiFlags* flags = new UbiFlags();
   d6964:	2001      	movs	r0, #1
bool UbiProtocolHandler::send(const char* device_label, PublishFlags flag) {
   d6966:	460d      	mov	r5, r1
   d6968:	4616      	mov	r6, r2
  UbiFlags* flags = new UbiFlags();
   d696a:	f7fd fb94 	bl	d4096 <_Znwj>
  flags->particle_flag = flag;
   d696e:	7006      	strb	r6, [r0, #0]
  UbiFlags* flags = new UbiFlags();
   d6970:	4603      	mov	r3, r0
  return send(device_label, device_label, flags);
   d6972:	462a      	mov	r2, r5
   d6974:	4629      	mov	r1, r5
   d6976:	4620      	mov	r0, r4
}
   d6978:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return send(device_label, device_label, flags);
   d697c:	f7ff bfb2 	b.w	d68e4 <_ZN18UbiProtocolHandler4sendEPKcS1_P8UbiFlags>

000d6980 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   d6980:	b570      	push	{r4, r5, r6, lr}
   d6982:	4605      	mov	r5, r0
   d6984:	460c      	mov	r4, r1
      while (__x != 0)
   d6986:	b184      	cbz	r4, d69aa <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E+0x2a>
	  _M_erase(_S_right(__x));
   d6988:	68e1      	ldr	r1, [r4, #12]
   d698a:	4628      	mov	r0, r5
   d698c:	f7ff fff8 	bl	d6980 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E>
      if (_M_manager)
   d6990:	69e3      	ldr	r3, [r4, #28]
	  _Link_type __y = _S_left(__x);
   d6992:	68a6      	ldr	r6, [r4, #8]
   d6994:	b123      	cbz	r3, d69a0 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E+0x20>
    class function<_Res(_ArgTypes...)>
   d6996:	f104 0114 	add.w	r1, r4, #20
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d699a:	2203      	movs	r2, #3
   d699c:	4608      	mov	r0, r1
   d699e:	4798      	blx	r3
   d69a0:	4620      	mov	r0, r4
   d69a2:	f7fd fb7c 	bl	d409e <_ZdlPv>
	  __x = __y;
   d69a6:	4634      	mov	r4, r6
      }
   d69a8:	e7ed      	b.n	d6986 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E+0x6>
    }
   d69aa:	bd70      	pop	{r4, r5, r6, pc}

000d69ac <_ZN18UbiProtocolHandler7builderEPcPKc11IotProtocol>:
void UbiProtocolHandler::builder(char* token, UbiServer server, IotProtocol iot_protocol) {
   d69ac:	b5f0      	push	{r4, r5, r6, r7, lr}
   d69ae:	b08d      	sub	sp, #52	; 0x34
   d69b0:	4604      	mov	r4, r0
    static String deviceID(void) { return spark_deviceID(); }
   d69b2:	a801      	add	r0, sp, #4
   d69b4:	460d      	mov	r5, r1
   d69b6:	4617      	mov	r7, r2
   d69b8:	461e      	mov	r6, r3
   d69ba:	f000 ff3b 	bl	d7834 <spark_deviceID>
  _default_device_label = new char[particle_id_str.length() + 1];
   d69be:	9803      	ldr	r0, [sp, #12]
   d69c0:	3001      	adds	r0, #1
   d69c2:	f7fd fb6a 	bl	d409a <_Znaj>
  strcpy(_default_device_label, particle_id_str.c_str());
   d69c6:	9901      	ldr	r1, [sp, #4]
  _default_device_label = new char[particle_id_str.length() + 1];
   d69c8:	6020      	str	r0, [r4, #0]
  strcpy(_default_device_label, particle_id_str.c_str());
   d69ca:	f005 ff0c 	bl	dc7e6 <strcpy>
  UbiBuilder builder(server, token, _iot_protocol);
   d69ce:	462a      	mov	r2, r5
   d69d0:	4633      	mov	r3, r6
   d69d2:	4639      	mov	r1, r7
  _iot_protocol = iot_protocol;
   d69d4:	74e6      	strb	r6, [r4, #19]
  UbiBuilder builder(server, token, _iot_protocol);
   d69d6:	a805      	add	r0, sp, #20
   d69d8:	f7ff f9b4 	bl	d5d44 <_ZN10UbiBuilderC1EPKcS1_11IotProtocol>
  _dots = (Value*)malloc(MAX_VALUES * sizeof(Value));
   d69dc:	20c8      	movs	r0, #200	; 0xc8
   d69de:	f000 ffb1 	bl	d7944 <malloc>
   d69e2:	60e0      	str	r0, [r4, #12]
  _ubiProtocol = builder.builder();
   d69e4:	a805      	add	r0, sp, #20
   d69e6:	f7ff f8bb 	bl	d5b60 <_ZN10UbiBuilder7builderEv>
  _current_value = 0;
   d69ea:	2300      	movs	r3, #0
  _token = token;
   d69ec:	e9c4 0501 	strd	r0, r5, [r4, #4]
      { _M_erase(_M_begin()); }
   d69f0:	9908      	ldr	r1, [sp, #32]
  _current_value = 0;
   d69f2:	7423      	strb	r3, [r4, #16]
   d69f4:	a806      	add	r0, sp, #24
   d69f6:	f7ff ffc3 	bl	d6980 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E>
  String particle_id_str = System.deviceID();
   d69fa:	a801      	add	r0, sp, #4
   d69fc:	f003 f994 	bl	d9d28 <_ZN6StringD1Ev>
}
   d6a00:	b00d      	add	sp, #52	; 0x34
   d6a02:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6a04 <_ZN18UbiProtocolHandlerC1EPcPKc11IotProtocol>:
UbiProtocolHandler::UbiProtocolHandler(char* token, UbiServer server, IotProtocol iot_protocol) {
   d6a04:	b538      	push	{r3, r4, r5, lr}
   d6a06:	2500      	movs	r5, #0
   d6a08:	4604      	mov	r4, r0
   d6a0a:	8205      	strh	r5, [r0, #16]
  builder(token, server, iot_protocol);
   d6a0c:	f7ff ffce 	bl	d69ac <_ZN18UbiProtocolHandler7builderEPcPKc11IotProtocol>
}
   d6a10:	4620      	mov	r0, r4
   d6a12:	bd38      	pop	{r3, r4, r5, pc}

000d6a14 <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   d6a14:	b570      	push	{r4, r5, r6, lr}
   d6a16:	4605      	mov	r5, r0
   d6a18:	460c      	mov	r4, r1
      while (__x != 0)
   d6a1a:	b14c      	cbz	r4, d6a30 <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E+0x1c>
	  _M_erase(_S_right(__x));
   d6a1c:	68e1      	ldr	r1, [r4, #12]
   d6a1e:	4628      	mov	r0, r5
   d6a20:	f7ff fff8 	bl	d6a14 <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E>
	  _Link_type __y = _S_left(__x);
   d6a24:	68a6      	ldr	r6, [r4, #8]
   d6a26:	4620      	mov	r0, r4
   d6a28:	f7fd fb39 	bl	d409e <_ZdlPv>
	  __x = __y;
   d6a2c:	4634      	mov	r4, r6
      while (__x != 0)
   d6a2e:	e7f4      	b.n	d6a1a <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E+0x6>
    }
   d6a30:	bd70      	pop	{r4, r5, r6, pc}
	...

000d6a34 <_GLOBAL__sub_I__ZN18UbiProtocolHandlerC2EPc11IotProtocol>:
}
   d6a34:	b508      	push	{r3, lr}
        val_(val) {
   d6a36:	4b07      	ldr	r3, [pc, #28]	; (d6a54 <_GLOBAL__sub_I__ZN18UbiProtocolHandlerC2EPc11IotProtocol+0x20>)
   d6a38:	4807      	ldr	r0, [pc, #28]	; (d6a58 <_GLOBAL__sub_I__ZN18UbiProtocolHandlerC2EPc11IotProtocol+0x24>)
   d6a3a:	2200      	movs	r2, #0
   d6a3c:	701a      	strb	r2, [r3, #0]
   d6a3e:	f003 fdff 	bl	da640 <_ZN9TCPClientC1Ev>
   d6a42:	4806      	ldr	r0, [pc, #24]	; (d6a5c <_GLOBAL__sub_I__ZN18UbiProtocolHandlerC2EPc11IotProtocol+0x28>)
   d6a44:	f003 fdfc 	bl	da640 <_ZN9TCPClientC1Ev>
   d6a48:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d6a4c:	4804      	ldr	r0, [pc, #16]	; (d6a60 <_GLOBAL__sub_I__ZN18UbiProtocolHandlerC2EPc11IotProtocol+0x2c>)
   d6a4e:	f004 b9ff 	b.w	dae50 <_ZN3UDPC1Ev>
   d6a52:	bf00      	nop
   d6a54:	2003e58c 	.word	0x2003e58c
   d6a58:	2003e570 	.word	0x2003e570
   d6a5c:	2003e508 	.word	0x2003e508
   d6a60:	2003e524 	.word	0x2003e524

000d6a64 <_ZN6UbiTCP8setDebugEb>:

/**
 * Makes available debug traces
 */

void UbiTCP::setDebug(bool debug) { _debug = debug; }
   d6a64:	7501      	strb	r1, [r0, #20]
   d6a66:	4770      	bx	lr

000d6a68 <_ZN6UbiTCPC1EPKciS1_S1_>:
UbiTCP::UbiTCP(const char* host, const int port, const char* user_agent, const char* token) {
   d6a68:	b530      	push	{r4, r5, lr}
   d6a6a:	4d06      	ldr	r5, [pc, #24]	; (d6a84 <_ZN6UbiTCPC1EPKciS1_S1_+0x1c>)
   d6a6c:	6005      	str	r5, [r0, #0]
  _user_agent = user_agent;
   d6a6e:	e9c0 1301 	strd	r1, r3, [r0, #4]
UbiTCP::UbiTCP(const char* host, const int port, const char* user_agent, const char* token) {
   d6a72:	2500      	movs	r5, #0
  _token = token;
   d6a74:	9b03      	ldr	r3, [sp, #12]
UbiTCP::UbiTCP(const char* host, const int port, const char* user_agent, const char* token) {
   d6a76:	7505      	strb	r5, [r0, #20]
   d6a78:	f241 3588 	movw	r5, #5000	; 0x1388
  _port = port;
   d6a7c:	e9c0 3203 	strd	r3, r2, [r0, #12]
UbiTCP::UbiTCP(const char* host, const int port, const char* user_agent, const char* token) {
   d6a80:	6185      	str	r5, [r0, #24]
}
   d6a82:	bd30      	pop	{r4, r5, pc}
   d6a84:	000defc8 	.word	0x000defc8

000d6a88 <_ZN6UbiTCP9reconnectEPKci>:
void UbiTCP::reconnect(const char* host, const int port) {
   d6a88:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6a8c:	460d      	mov	r5, r1
   d6a8e:	4617      	mov	r7, r2
   d6a90:	4680      	mov	r8, r0
  Serial.println("Attempting to reconnect");
   d6a92:	f004 fb7f 	bl	db194 <_Z16_fetch_usbserialv>
   d6a96:	491e      	ldr	r1, [pc, #120]	; (d6b10 <_ZN6UbiTCP9reconnectEPKci+0x88>)
  while (!_client_tcp_ubi.status() && attempts < 5) {
   d6a98:	4e1e      	ldr	r6, [pc, #120]	; (d6b14 <_ZN6UbiTCP9reconnectEPKci+0x8c>)
      Serial.print("Trying to connect to ");
   d6a9a:	f8df a07c 	ldr.w	sl, [pc, #124]	; d6b18 <_ZN6UbiTCP9reconnectEPKci+0x90>
      Serial.print(" , attempt number: ");
   d6a9e:	f8df b07c 	ldr.w	fp, [pc, #124]	; d6b1c <_ZN6UbiTCP9reconnectEPKci+0x94>
  Serial.println("Attempting to reconnect");
   d6aa2:	f003 f87a 	bl	d9b9a <_ZN5Print7printlnEPKc>
   d6aa6:	2400      	movs	r4, #0
  while (!_client_tcp_ubi.status() && attempts < 5) {
   d6aa8:	4630      	mov	r0, r6
   d6aaa:	f003 fd90 	bl	da5ce <_ZN9TCPClient6statusEv>
   d6aae:	bb60      	cbnz	r0, d6b0a <_ZN6UbiTCP9reconnectEPKci+0x82>
   d6ab0:	2c05      	cmp	r4, #5
   d6ab2:	d02a      	beq.n	d6b0a <_ZN6UbiTCP9reconnectEPKci+0x82>
    if (_debug) {
   d6ab4:	f898 3014 	ldrb.w	r3, [r8, #20]
   d6ab8:	b1c3      	cbz	r3, d6aec <_ZN6UbiTCP9reconnectEPKci+0x64>
      Serial.print("Trying to connect to ");
   d6aba:	f004 fb6b 	bl	db194 <_Z16_fetch_usbserialv>
   d6abe:	4651      	mov	r1, sl
   d6ac0:	f003 f858 	bl	d9b74 <_ZN5Print5printEPKc>
      Serial.print(host);
   d6ac4:	f004 fb66 	bl	db194 <_Z16_fetch_usbserialv>
   d6ac8:	4629      	mov	r1, r5
   d6aca:	f003 f853 	bl	d9b74 <_ZN5Print5printEPKc>
      Serial.print(" , attempt number: ");
   d6ace:	f004 fb61 	bl	db194 <_Z16_fetch_usbserialv>
   d6ad2:	4659      	mov	r1, fp
   d6ad4:	f003 f84e 	bl	d9b74 <_ZN5Print5printEPKc>
      Serial.println(attempts);
   d6ad8:	f004 fb5c 	bl	db194 <_Z16_fetch_usbserialv>
   d6adc:	220a      	movs	r2, #10
   d6ade:	4681      	mov	r9, r0
   d6ae0:	4621      	mov	r1, r4
   d6ae2:	f003 f864 	bl	d9bae <_ZN5Print11printNumberEmh>
        n += println();
   d6ae6:	4648      	mov	r0, r9
   d6ae8:	f003 f84b 	bl	d9b82 <_ZN5Print7printlnEv>
    _client_tcp_ubi.stop();
   d6aec:	4630      	mov	r0, r6
   d6aee:	f003 fd57 	bl	da5a0 <_ZN9TCPClient4stopEv>
    _client_tcp_ubi.connect(host, port);
   d6af2:	2300      	movs	r3, #0
   d6af4:	b2ba      	uxth	r2, r7
   d6af6:	4629      	mov	r1, r5
   d6af8:	4630      	mov	r0, r6
   d6afa:	f003 fbf5 	bl	da2e8 <_ZN9TCPClient7connectEPKctm>
    delay(1000);
   d6afe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d6b02:	f000 ff97 	bl	d7a34 <delay>
   d6b06:	3401      	adds	r4, #1
  while (!_client_tcp_ubi.status() && attempts < 5) {
   d6b08:	e7ce      	b.n	d6aa8 <_ZN6UbiTCP9reconnectEPKci+0x20>
}
   d6b0a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6b0e:	bf00      	nop
   d6b10:	000def2b 	.word	0x000def2b
   d6b14:	2003e590 	.word	0x2003e590
   d6b18:	000dec20 	.word	0x000dec20
   d6b1c:	000dec36 	.word	0x000dec36

000d6b20 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_>:
void UbiTCP::buildAndSendGetPacket(const char* device_label, const char* variable_labels) {
   d6b20:	b570      	push	{r4, r5, r6, lr}
   d6b22:	4604      	mov	r4, r0
   d6b24:	460e      	mov	r6, r1
  _client_tcp_ubi.print(_user_agent);
   d6b26:	6881      	ldr	r1, [r0, #8]
   d6b28:	482e      	ldr	r0, [pc, #184]	; (d6be4 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xc4>)
void UbiTCP::buildAndSendGetPacket(const char* device_label, const char* variable_labels) {
   d6b2a:	4615      	mov	r5, r2
  _client_tcp_ubi.print(_user_agent);
   d6b2c:	f003 f822 	bl	d9b74 <_ZN5Print5printEPKc>
  _client_tcp_ubi.print("|LV|");
   d6b30:	492d      	ldr	r1, [pc, #180]	; (d6be8 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xc8>)
   d6b32:	482c      	ldr	r0, [pc, #176]	; (d6be4 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xc4>)
   d6b34:	f003 f81e 	bl	d9b74 <_ZN5Print5printEPKc>
  _client_tcp_ubi.print(_token);
   d6b38:	68e1      	ldr	r1, [r4, #12]
   d6b3a:	482a      	ldr	r0, [pc, #168]	; (d6be4 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xc4>)
   d6b3c:	f003 f81a 	bl	d9b74 <_ZN5Print5printEPKc>
  _client_tcp_ubi.print("|");
   d6b40:	492a      	ldr	r1, [pc, #168]	; (d6bec <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xcc>)
   d6b42:	4828      	ldr	r0, [pc, #160]	; (d6be4 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xc4>)
   d6b44:	f003 f816 	bl	d9b74 <_ZN5Print5printEPKc>
  _client_tcp_ubi.print(device_label);
   d6b48:	4631      	mov	r1, r6
   d6b4a:	4826      	ldr	r0, [pc, #152]	; (d6be4 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xc4>)
   d6b4c:	f003 f812 	bl	d9b74 <_ZN5Print5printEPKc>
  _client_tcp_ubi.print(":");
   d6b50:	4927      	ldr	r1, [pc, #156]	; (d6bf0 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xd0>)
   d6b52:	4824      	ldr	r0, [pc, #144]	; (d6be4 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xc4>)
   d6b54:	f003 f80e 	bl	d9b74 <_ZN5Print5printEPKc>
  _client_tcp_ubi.print(variable_labels);
   d6b58:	4629      	mov	r1, r5
   d6b5a:	4822      	ldr	r0, [pc, #136]	; (d6be4 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xc4>)
   d6b5c:	f003 f80a 	bl	d9b74 <_ZN5Print5printEPKc>
  _client_tcp_ubi.print("|end");
   d6b60:	4924      	ldr	r1, [pc, #144]	; (d6bf4 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xd4>)
   d6b62:	4820      	ldr	r0, [pc, #128]	; (d6be4 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xc4>)
   d6b64:	f003 f806 	bl	d9b74 <_ZN5Print5printEPKc>
  if (_debug) {
   d6b68:	7d23      	ldrb	r3, [r4, #20]
   d6b6a:	2b00      	cmp	r3, #0
   d6b6c:	d038      	beq.n	d6be0 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xc0>
    Serial.println("----");
   d6b6e:	f004 fb11 	bl	db194 <_Z16_fetch_usbserialv>
   d6b72:	4921      	ldr	r1, [pc, #132]	; (d6bf8 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xd8>)
   d6b74:	f003 f811 	bl	d9b9a <_ZN5Print7printlnEPKc>
    Serial.println("Payload for request:");
   d6b78:	f004 fb0c 	bl	db194 <_Z16_fetch_usbserialv>
   d6b7c:	491f      	ldr	r1, [pc, #124]	; (d6bfc <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xdc>)
   d6b7e:	f003 f80c 	bl	d9b9a <_ZN5Print7printlnEPKc>
    Serial.print(_user_agent);
   d6b82:	f004 fb07 	bl	db194 <_Z16_fetch_usbserialv>
   d6b86:	68a1      	ldr	r1, [r4, #8]
   d6b88:	f002 fff4 	bl	d9b74 <_ZN5Print5printEPKc>
    Serial.print("|LV|");
   d6b8c:	f004 fb02 	bl	db194 <_Z16_fetch_usbserialv>
   d6b90:	4915      	ldr	r1, [pc, #84]	; (d6be8 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xc8>)
   d6b92:	f002 ffef 	bl	d9b74 <_ZN5Print5printEPKc>
    Serial.print(_token);
   d6b96:	f004 fafd 	bl	db194 <_Z16_fetch_usbserialv>
   d6b9a:	68e1      	ldr	r1, [r4, #12]
   d6b9c:	f002 ffea 	bl	d9b74 <_ZN5Print5printEPKc>
    Serial.print("|");
   d6ba0:	f004 faf8 	bl	db194 <_Z16_fetch_usbserialv>
   d6ba4:	4911      	ldr	r1, [pc, #68]	; (d6bec <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xcc>)
   d6ba6:	f002 ffe5 	bl	d9b74 <_ZN5Print5printEPKc>
    Serial.print(device_label);
   d6baa:	f004 faf3 	bl	db194 <_Z16_fetch_usbserialv>
   d6bae:	4631      	mov	r1, r6
   d6bb0:	f002 ffe0 	bl	d9b74 <_ZN5Print5printEPKc>
    Serial.print(":");
   d6bb4:	f004 faee 	bl	db194 <_Z16_fetch_usbserialv>
   d6bb8:	490d      	ldr	r1, [pc, #52]	; (d6bf0 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xd0>)
   d6bba:	f002 ffdb 	bl	d9b74 <_ZN5Print5printEPKc>
    Serial.print(variable_labels);
   d6bbe:	f004 fae9 	bl	db194 <_Z16_fetch_usbserialv>
   d6bc2:	4629      	mov	r1, r5
   d6bc4:	f002 ffd6 	bl	d9b74 <_ZN5Print5printEPKc>
    Serial.print("|end");
   d6bc8:	f004 fae4 	bl	db194 <_Z16_fetch_usbserialv>
   d6bcc:	4909      	ldr	r1, [pc, #36]	; (d6bf4 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xd4>)
   d6bce:	f002 ffd1 	bl	d9b74 <_ZN5Print5printEPKc>
    Serial.println("\n----");
   d6bd2:	f004 fadf 	bl	db194 <_Z16_fetch_usbserialv>
}
   d6bd6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Serial.println("\n----");
   d6bda:	4909      	ldr	r1, [pc, #36]	; (d6c00 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xe0>)
   d6bdc:	f002 bfdd 	b.w	d9b9a <_ZN5Print7printlnEPKc>
}
   d6be0:	bd70      	pop	{r4, r5, r6, pc}
   d6be2:	bf00      	nop
   d6be4:	2003e590 	.word	0x2003e590
   d6be8:	000def43 	.word	0x000def43
   d6bec:	000def46 	.word	0x000def46
   d6bf0:	000deeec 	.word	0x000deeec
   d6bf4:	000def16 	.word	0x000def16
   d6bf8:	000def5e 	.word	0x000def5e
   d6bfc:	000def48 	.word	0x000def48
   d6c00:	000def5d 	.word	0x000def5d

000d6c04 <_ZN6UbiTCP16waitServerAnswerEv>:
bool UbiTCP::waitServerAnswer() {
   d6c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  while (!_client_tcp_ubi.available() && timeout < _timeout) {
   d6c06:	4f0e      	ldr	r7, [pc, #56]	; (d6c40 <_ZN6UbiTCP16waitServerAnswerEv+0x3c>)
bool UbiTCP::waitServerAnswer() {
   d6c08:	4604      	mov	r4, r0
  int timeout = 0;
   d6c0a:	2600      	movs	r6, #0
  while (!_client_tcp_ubi.available() && timeout < _timeout) {
   d6c0c:	4638      	mov	r0, r7
   d6c0e:	f003 fc6d 	bl	da4ec <_ZN9TCPClient9availableEv>
   d6c12:	4605      	mov	r5, r0
   d6c14:	b990      	cbnz	r0, d6c3c <_ZN6UbiTCP16waitServerAnswerEv+0x38>
   d6c16:	69a3      	ldr	r3, [r4, #24]
   d6c18:	42b3      	cmp	r3, r6
   d6c1a:	dd0f      	ble.n	d6c3c <_ZN6UbiTCP16waitServerAnswerEv+0x38>
    delay(1);
   d6c1c:	2001      	movs	r0, #1
   d6c1e:	f000 ff09 	bl	d7a34 <delay>
    if (timeout > _timeout - 1) {
   d6c22:	69a3      	ldr	r3, [r4, #24]
    timeout++;
   d6c24:	3601      	adds	r6, #1
    if (timeout > _timeout - 1) {
   d6c26:	42b3      	cmp	r3, r6
   d6c28:	dcf0      	bgt.n	d6c0c <_ZN6UbiTCP16waitServerAnswerEv+0x8>
      if (_debug) {
   d6c2a:	7d20      	ldrb	r0, [r4, #20]
   d6c2c:	b128      	cbz	r0, d6c3a <_ZN6UbiTCP16waitServerAnswerEv+0x36>
        Serial.println("timeout, could not read any response from the host");
   d6c2e:	f004 fab1 	bl	db194 <_Z16_fetch_usbserialv>
   d6c32:	4904      	ldr	r1, [pc, #16]	; (d6c44 <_ZN6UbiTCP16waitServerAnswerEv+0x40>)
   d6c34:	f002 ffb1 	bl	d9b9a <_ZN5Print7printlnEPKc>
   d6c38:	4628      	mov	r0, r5
}
   d6c3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return true;
   d6c3c:	2001      	movs	r0, #1
   d6c3e:	e7fc      	b.n	d6c3a <_ZN6UbiTCP16waitServerAnswerEv+0x36>
   d6c40:	2003e590 	.word	0x2003e590
   d6c44:	000dec7a 	.word	0x000dec7a

000d6c48 <_ZN6UbiTCP14parseTCPAnswerEPKcPc>:
float UbiTCP::parseTCPAnswer(const char* request_type, char* response) {
   d6c48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (_debug) {
   d6c4c:	7d03      	ldrb	r3, [r0, #20]
float UbiTCP::parseTCPAnswer(const char* request_type, char* response) {
   d6c4e:	4606      	mov	r6, r0
   d6c50:	4688      	mov	r8, r1
   d6c52:	4614      	mov	r4, r2
  if (_debug) {
   d6c54:	b14b      	cbz	r3, d6c6a <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x22>
    Serial.println("----------");
   d6c56:	f004 fa9d 	bl	db194 <_Z16_fetch_usbserialv>
   d6c5a:	4927      	ldr	r1, [pc, #156]	; (d6cf8 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xb0>)
   d6c5c:	f002 ff9d 	bl	d9b9a <_ZN5Print7printlnEPKc>
    Serial.println("Server's response:");
   d6c60:	f004 fa98 	bl	db194 <_Z16_fetch_usbserialv>
   d6c64:	4925      	ldr	r1, [pc, #148]	; (d6cfc <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xb4>)
   d6c66:	f002 ff98 	bl	d9b9a <_ZN5Print7printlnEPKc>
  while (_client_tcp_ubi.available()) {
   d6c6a:	f8df 90a4 	ldr.w	r9, [pc, #164]	; d6d10 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xc8>
float UbiTCP::parseTCPAnswer(const char* request_type, char* response) {
   d6c6e:	2500      	movs	r5, #0
    if (j >= MAX_BUFFER_SIZE - 1) {
   d6c70:	f240 2abb 	movw	sl, #699	; 0x2bb
  while (_client_tcp_ubi.available()) {
   d6c74:	4648      	mov	r0, r9
   d6c76:	f003 fc39 	bl	da4ec <_ZN9TCPClient9availableEv>
   d6c7a:	b178      	cbz	r0, d6c9c <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x54>
    char c = _client_tcp_ubi.read();
   d6c7c:	4648      	mov	r0, r9
   d6c7e:	f003 faee 	bl	da25e <_ZN9TCPClient4readEv>
    if (_debug) {
   d6c82:	7d33      	ldrb	r3, [r6, #20]
    char c = _client_tcp_ubi.read();
   d6c84:	b2c7      	uxtb	r7, r0
    if (_debug) {
   d6c86:	b12b      	cbz	r3, d6c94 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x4c>
      Serial.write(c);
   d6c88:	f004 fa84 	bl	db194 <_Z16_fetch_usbserialv>
   d6c8c:	6803      	ldr	r3, [r0, #0]
   d6c8e:	4639      	mov	r1, r7
   d6c90:	689b      	ldr	r3, [r3, #8]
   d6c92:	4798      	blx	r3
    response[j] = c;
   d6c94:	5567      	strb	r7, [r4, r5]
    j++;
   d6c96:	3501      	adds	r5, #1
    if (j >= MAX_BUFFER_SIZE - 1) {
   d6c98:	4555      	cmp	r5, sl
   d6c9a:	d1eb      	bne.n	d6c74 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x2c>
  if (_debug) {
   d6c9c:	7d33      	ldrb	r3, [r6, #20]
   d6c9e:	b123      	cbz	r3, d6caa <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x62>
    Serial.println("\n----------");
   d6ca0:	f004 fa78 	bl	db194 <_Z16_fetch_usbserialv>
   d6ca4:	4916      	ldr	r1, [pc, #88]	; (d6d00 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xb8>)
   d6ca6:	f002 ff78 	bl	d9b9a <_ZN5Print7printlnEPKc>
  response[j] = '\0';
   d6caa:	2300      	movs	r3, #0
   d6cac:	5563      	strb	r3, [r4, r5]
  if (strcmp(request_type, "POST") == 0) {
   d6cae:	4915      	ldr	r1, [pc, #84]	; (d6d04 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xbc>)
   d6cb0:	4640      	mov	r0, r8
   d6cb2:	f005 fd8e 	bl	dc7d2 <strcmp>
   d6cb6:	b968      	cbnz	r0, d6cd4 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x8c>
    char* pch = strstr(response, "OK");
   d6cb8:	4913      	ldr	r1, [pc, #76]	; (d6d08 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xc0>)
   d6cba:	4620      	mov	r0, r4
   d6cbc:	f005 fdfa 	bl	dc8b4 <strstr>
      result = 1;
   d6cc0:	ed9f 0a12 	vldr	s0, [pc, #72]	; d6d0c <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xc4>
   d6cc4:	2800      	cmp	r0, #0
   d6cc6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   d6cca:	bf18      	it	ne
   d6ccc:	eeb0 0a67 	vmovne.f32	s0, s15
}
   d6cd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  char* pch = strchr(response, '|');
   d6cd4:	217c      	movs	r1, #124	; 0x7c
   d6cd6:	4620      	mov	r0, r4
   d6cd8:	f005 fd64 	bl	dc7a4 <strchr>
  if (pch != NULL) {
   d6cdc:	b148      	cbz	r0, d6cf2 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xaa>
    result = atof(pch + 1);
   d6cde:	3001      	adds	r0, #1
   d6ce0:	f005 fcf6 	bl	dc6d0 <atof>
   d6ce4:	ec51 0b10 	vmov	r0, r1, d0
   d6ce8:	f005 faa8 	bl	dc23c <__aeabi_d2f>
   d6cec:	ee00 0a10 	vmov	s0, r0
   d6cf0:	e7ee      	b.n	d6cd0 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x88>
  float result = ERROR_VALUE;
   d6cf2:	ed9f 0a06 	vldr	s0, [pc, #24]	; d6d0c <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xc4>
   d6cf6:	e7eb      	b.n	d6cd0 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x88>
   d6cf8:	000dec6f 	.word	0x000dec6f
   d6cfc:	000dec5b 	.word	0x000dec5b
   d6d00:	000dec6e 	.word	0x000dec6e
   d6d04:	000def63 	.word	0x000def63
   d6d08:	000def68 	.word	0x000def68
   d6d0c:	cda2425f 	.word	0xcda2425f
   d6d10:	2003e590 	.word	0x2003e590

000d6d14 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags>:
bool UbiTCP::sendData(const char* device_label, const char* device_name, char* payload, UbiFlags* flags) {
   d6d14:	b570      	push	{r4, r5, r6, lr}
   d6d16:	ed2d 8b02 	vpush	{d8}
   d6d1a:	4604      	mov	r4, r0
  _client_tcp_ubi.connect(_host, UBIDOTS_TCP_PORT);
   d6d1c:	6841      	ldr	r1, [r0, #4]
   d6d1e:	4822      	ldr	r0, [pc, #136]	; (d6da8 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x94>)
   d6d20:	f242 3234 	movw	r2, #9012	; 0x2334
bool UbiTCP::sendData(const char* device_label, const char* device_name, char* payload, UbiFlags* flags) {
   d6d24:	461d      	mov	r5, r3
  _client_tcp_ubi.connect(_host, UBIDOTS_TCP_PORT);
   d6d26:	2300      	movs	r3, #0
   d6d28:	f003 fade 	bl	da2e8 <_ZN9TCPClient7connectEPKctm>
  reconnect(_host, UBIDOTS_TCP_PORT);
   d6d2c:	4620      	mov	r0, r4
   d6d2e:	6861      	ldr	r1, [r4, #4]
   d6d30:	f242 3234 	movw	r2, #9012	; 0x2334
   d6d34:	f7ff fea8 	bl	d6a88 <_ZN6UbiTCP9reconnectEPKci>
  if (_client_tcp_ubi.connected()) {
   d6d38:	481b      	ldr	r0, [pc, #108]	; (d6da8 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x94>)
   d6d3a:	f003 f9d0 	bl	da0de <_ZN9TCPClient9connectedEv>
   d6d3e:	b348      	cbz	r0, d6d94 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x80>
    _client_tcp_ubi.print(payload);
   d6d40:	4629      	mov	r1, r5
   d6d42:	4819      	ldr	r0, [pc, #100]	; (d6da8 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x94>)
   d6d44:	f002 ff16 	bl	d9b74 <_ZN5Print5printEPKc>
  if (!waitServerAnswer()) {
   d6d48:	4620      	mov	r0, r4
   d6d4a:	f7ff ff5b 	bl	d6c04 <_ZN6UbiTCP16waitServerAnswerEv>
   d6d4e:	4605      	mov	r5, r0
   d6d50:	b938      	cbnz	r0, d6d62 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x4e>
    _client_tcp_ubi.stop();
   d6d52:	4815      	ldr	r0, [pc, #84]	; (d6da8 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x94>)
   d6d54:	f003 fc24 	bl	da5a0 <_ZN9TCPClient4stopEv>
    return false;
   d6d58:	2500      	movs	r5, #0
}
   d6d5a:	ecbd 8b02 	vpop	{d8}
   d6d5e:	4628      	mov	r0, r5
   d6d60:	bd70      	pop	{r4, r5, r6, pc}
  char* response = (char*)malloc(sizeof(char) * 100);
   d6d62:	2064      	movs	r0, #100	; 0x64
   d6d64:	f000 fdee 	bl	d7944 <malloc>
  float value = parseTCPAnswer("POST", response);
   d6d68:	4910      	ldr	r1, [pc, #64]	; (d6dac <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x98>)
   d6d6a:	4602      	mov	r2, r0
  char* response = (char*)malloc(sizeof(char) * 100);
   d6d6c:	4606      	mov	r6, r0
  float value = parseTCPAnswer("POST", response);
   d6d6e:	4620      	mov	r0, r4
   d6d70:	f7ff ff6a 	bl	d6c48 <_ZN6UbiTCP14parseTCPAnswerEPKcPc>
  free(response);
   d6d74:	4630      	mov	r0, r6
  float value = parseTCPAnswer("POST", response);
   d6d76:	eeb0 8a40 	vmov.f32	s16, s0
  free(response);
   d6d7a:	f000 fdeb 	bl	d7954 <free>
  if (value != ERROR_VALUE) {
   d6d7e:	eddf 7a0c 	vldr	s15, [pc, #48]	; d6db0 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x9c>
   d6d82:	eeb4 8a67 	vcmp.f32	s16, s15
   d6d86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d6d8a:	d0e2      	beq.n	d6d52 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x3e>
    _client_tcp_ubi.stop();
   d6d8c:	4806      	ldr	r0, [pc, #24]	; (d6da8 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x94>)
   d6d8e:	f003 fc07 	bl	da5a0 <_ZN9TCPClient4stopEv>
    return true;
   d6d92:	e7e2      	b.n	d6d5a <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x46>
    if (_debug) {
   d6d94:	7d23      	ldrb	r3, [r4, #20]
   d6d96:	2b00      	cmp	r3, #0
   d6d98:	d0db      	beq.n	d6d52 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x3e>
      Serial.println("Could not connect to the host");
   d6d9a:	f004 f9fb 	bl	db194 <_Z16_fetch_usbserialv>
   d6d9e:	4905      	ldr	r1, [pc, #20]	; (d6db4 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0xa0>)
   d6da0:	f002 fefb 	bl	d9b9a <_ZN5Print7printlnEPKc>
   d6da4:	e7d5      	b.n	d6d52 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x3e>
   d6da6:	bf00      	nop
   d6da8:	2003e590 	.word	0x2003e590
   d6dac:	000def63 	.word	0x000def63
   d6db0:	cda2425f 	.word	0xcda2425f
   d6db4:	000def6b 	.word	0x000def6b

000d6db8 <_ZN6UbiTCP3getEPKcS1_>:
float UbiTCP::get(const char* device_label, const char* variable_label) {
   d6db8:	b570      	push	{r4, r5, r6, lr}
   d6dba:	ed2d 8b02 	vpush	{d8}
   d6dbe:	4604      	mov	r4, r0
  _client_tcp_ubi.connect(_host, UBIDOTS_TCP_PORT);
   d6dc0:	2300      	movs	r3, #0
float UbiTCP::get(const char* device_label, const char* variable_label) {
   d6dc2:	460d      	mov	r5, r1
   d6dc4:	4616      	mov	r6, r2
  _client_tcp_ubi.connect(_host, UBIDOTS_TCP_PORT);
   d6dc6:	6841      	ldr	r1, [r0, #4]
   d6dc8:	481e      	ldr	r0, [pc, #120]	; (d6e44 <_ZN6UbiTCP3getEPKcS1_+0x8c>)
   d6dca:	f242 3234 	movw	r2, #9012	; 0x2334
   d6dce:	f003 fa8b 	bl	da2e8 <_ZN9TCPClient7connectEPKctm>
  reconnect(_host, UBIDOTS_TCP_PORT);
   d6dd2:	4620      	mov	r0, r4
   d6dd4:	6861      	ldr	r1, [r4, #4]
   d6dd6:	f242 3234 	movw	r2, #9012	; 0x2334
   d6dda:	f7ff fe55 	bl	d6a88 <_ZN6UbiTCP9reconnectEPKci>
  if (_client_tcp_ubi.connected()) {
   d6dde:	4819      	ldr	r0, [pc, #100]	; (d6e44 <_ZN6UbiTCP3getEPKcS1_+0x8c>)
   d6de0:	f003 f97d 	bl	da0de <_ZN9TCPClient9connectedEv>
   d6de4:	b328      	cbz	r0, d6e32 <_ZN6UbiTCP3getEPKcS1_+0x7a>
    buildAndSendGetPacket(device_label, variable_label);
   d6de6:	4620      	mov	r0, r4
   d6de8:	4632      	mov	r2, r6
   d6dea:	4629      	mov	r1, r5
   d6dec:	f7ff fe98 	bl	d6b20 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_>
    if (!waitServerAnswer()) {
   d6df0:	4620      	mov	r0, r4
   d6df2:	f7ff ff07 	bl	d6c04 <_ZN6UbiTCP16waitServerAnswerEv>
   d6df6:	b948      	cbnz	r0, d6e0c <_ZN6UbiTCP3getEPKcS1_+0x54>
      _client_tcp_ubi.stop();
   d6df8:	4812      	ldr	r0, [pc, #72]	; (d6e44 <_ZN6UbiTCP3getEPKcS1_+0x8c>)
      return ERROR_VALUE;
   d6dfa:	ed9f 8a13 	vldr	s16, [pc, #76]	; d6e48 <_ZN6UbiTCP3getEPKcS1_+0x90>
      _client_tcp_ubi.stop();
   d6dfe:	f003 fbcf 	bl	da5a0 <_ZN9TCPClient4stopEv>
}
   d6e02:	eeb0 0a48 	vmov.f32	s0, s16
   d6e06:	ecbd 8b02 	vpop	{d8}
   d6e0a:	bd70      	pop	{r4, r5, r6, pc}
    char* response = (char*)malloc(sizeof(char) * MAX_BUFFER_SIZE);
   d6e0c:	f44f 702f 	mov.w	r0, #700	; 0x2bc
   d6e10:	f000 fd98 	bl	d7944 <malloc>
    float value = parseTCPAnswer("LV", response);
   d6e14:	490d      	ldr	r1, [pc, #52]	; (d6e4c <_ZN6UbiTCP3getEPKcS1_+0x94>)
   d6e16:	4602      	mov	r2, r0
    char* response = (char*)malloc(sizeof(char) * MAX_BUFFER_SIZE);
   d6e18:	4605      	mov	r5, r0
    float value = parseTCPAnswer("LV", response);
   d6e1a:	4620      	mov	r0, r4
   d6e1c:	f7ff ff14 	bl	d6c48 <_ZN6UbiTCP14parseTCPAnswerEPKcPc>
    _client_tcp_ubi.stop();
   d6e20:	4808      	ldr	r0, [pc, #32]	; (d6e44 <_ZN6UbiTCP3getEPKcS1_+0x8c>)
    float value = parseTCPAnswer("LV", response);
   d6e22:	eeb0 8a40 	vmov.f32	s16, s0
    _client_tcp_ubi.stop();
   d6e26:	f003 fbbb 	bl	da5a0 <_ZN9TCPClient4stopEv>
    free(response);
   d6e2a:	4628      	mov	r0, r5
   d6e2c:	f000 fd92 	bl	d7954 <free>
    return value;
   d6e30:	e7e7      	b.n	d6e02 <_ZN6UbiTCP3getEPKcS1_+0x4a>
  if (_debug) {
   d6e32:	7d23      	ldrb	r3, [r4, #20]
   d6e34:	2b00      	cmp	r3, #0
   d6e36:	d0df      	beq.n	d6df8 <_ZN6UbiTCP3getEPKcS1_+0x40>
    Serial.println("ERROR could not connect to the server");
   d6e38:	f004 f9ac 	bl	db194 <_Z16_fetch_usbserialv>
   d6e3c:	4904      	ldr	r1, [pc, #16]	; (d6e50 <_ZN6UbiTCP3getEPKcS1_+0x98>)
   d6e3e:	f002 feac 	bl	d9b9a <_ZN5Print7printlnEPKc>
   d6e42:	e7d9      	b.n	d6df8 <_ZN6UbiTCP3getEPKcS1_+0x40>
   d6e44:	2003e590 	.word	0x2003e590
   d6e48:	cda2425f 	.word	0xcda2425f
   d6e4c:	000def89 	.word	0x000def89
   d6e50:	000def8c 	.word	0x000def8c

000d6e54 <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE17_M_emplace_uniqueIJS0_IifEEEES0_ISt17_Rb_tree_iteratorIS2_EbEDpOT_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   d6e54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d6e58:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d6e5a:	2018      	movs	r0, #24
   d6e5c:	4615      	mov	r5, r2
   d6e5e:	460f      	mov	r7, r1
   d6e60:	f7fd f919 	bl	d4096 <_Znwj>
      { return &this->_M_impl._M_header; }
   d6e64:	f107 0a04 	add.w	sl, r7, #4
			  && _PCCFP<_U1, _U2>::template
			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
	constexpr pair(pair<_U1, _U2>&& __p)
	: first(std::forward<_U1>(__p.first)),
	  second(std::forward<_U2>(__p.second)) { }
   d6e68:	686b      	ldr	r3, [r5, #4]
   d6e6a:	f8d5 9000 	ldr.w	r9, [r5]
      _Link_type __x = _M_begin();
   d6e6e:	68ba      	ldr	r2, [r7, #8]
   d6e70:	6143      	str	r3, [r0, #20]
   d6e72:	4606      	mov	r6, r0
   d6e74:	f8c0 9010 	str.w	r9, [r0, #16]
      { return &this->_M_impl._M_header; }
   d6e78:	4655      	mov	r5, sl
      bool __comp = true;
   d6e7a:	2301      	movs	r3, #1
      while (__x != 0)
   d6e7c:	b152      	cbz	r2, d6e94 <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE17_M_emplace_uniqueIJS0_IifEEEES0_ISt17_Rb_tree_iteratorIS2_EbEDpOT_+0x40>
	  __x = __comp ? _S_left(__x) : _S_right(__x);
   d6e7e:	6913      	ldr	r3, [r2, #16]
   d6e80:	454b      	cmp	r3, r9
   d6e82:	bfcc      	ite	gt
   d6e84:	6891      	ldrgt	r1, [r2, #8]
   d6e86:	68d1      	ldrle	r1, [r2, #12]
   d6e88:	4615      	mov	r5, r2
   d6e8a:	bfcc      	ite	gt
   d6e8c:	2301      	movgt	r3, #1
   d6e8e:	2300      	movle	r3, #0
   d6e90:	460a      	mov	r2, r1
   d6e92:	e7f3      	b.n	d6e7c <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE17_M_emplace_uniqueIJS0_IifEEEES0_ISt17_Rb_tree_iteratorIS2_EbEDpOT_+0x28>
      if (__comp)
   d6e94:	b1a3      	cbz	r3, d6ec0 <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE17_M_emplace_uniqueIJS0_IifEEEES0_ISt17_Rb_tree_iteratorIS2_EbEDpOT_+0x6c>
	  if (__j == begin())
   d6e96:	68fb      	ldr	r3, [r7, #12]
   d6e98:	42ab      	cmp	r3, r5
   d6e9a:	d023      	beq.n	d6ee4 <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE17_M_emplace_uniqueIJS0_IifEEEES0_ISt17_Rb_tree_iteratorIS2_EbEDpOT_+0x90>
	_M_node = _Rb_tree_decrement(_M_node);
   d6e9c:	4628      	mov	r0, r5
   d6e9e:	f004 fbe3 	bl	db668 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
   d6ea2:	4680      	mov	r8, r0
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
   d6ea4:	f8d8 3010 	ldr.w	r3, [r8, #16]
   d6ea8:	454b      	cmp	r3, r9
   d6eaa:	db1b      	blt.n	d6ee4 <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE17_M_emplace_uniqueIJS0_IifEEEES0_ISt17_Rb_tree_iteratorIS2_EbEDpOT_+0x90>
	::operator delete(__p);
   d6eac:	4630      	mov	r0, r6
   d6eae:	f7fd f8f6 	bl	d409e <_ZdlPv>
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
   d6eb2:	f8c4 8000 	str.w	r8, [r4]
   d6eb6:	2300      	movs	r3, #0
   d6eb8:	7123      	strb	r3, [r4, #4]
      }
   d6eba:	4620      	mov	r0, r4
   d6ebc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d6ec0:	46a8      	mov	r8, r5
   d6ec2:	e7ef      	b.n	d6ea4 <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE17_M_emplace_uniqueIJS0_IifEEEES0_ISt17_Rb_tree_iteratorIS2_EbEDpOT_+0x50>
			    || _M_impl._M_key_compare(_S_key(__z),
   d6ec4:	6928      	ldr	r0, [r5, #16]
   d6ec6:	4581      	cmp	r9, r0
   d6ec8:	bfac      	ite	ge
   d6eca:	2000      	movge	r0, #0
   d6ecc:	2001      	movlt	r0, #1
      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
   d6ece:	4653      	mov	r3, sl
   d6ed0:	462a      	mov	r2, r5
   d6ed2:	4631      	mov	r1, r6
   d6ed4:	f004 fbca 	bl	db66c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
      ++_M_impl._M_node_count;
   d6ed8:	697b      	ldr	r3, [r7, #20]
   d6eda:	6026      	str	r6, [r4, #0]
   d6edc:	3301      	adds	r3, #1
   d6ede:	617b      	str	r3, [r7, #20]
   d6ee0:	2301      	movs	r3, #1
   d6ee2:	e7e9      	b.n	d6eb8 <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE17_M_emplace_uniqueIJS0_IifEEEES0_ISt17_Rb_tree_iteratorIS2_EbEDpOT_+0x64>
      bool __insert_left = (__x != 0 || __p == _M_end()
   d6ee4:	45aa      	cmp	sl, r5
   d6ee6:	d1ed      	bne.n	d6ec4 <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE17_M_emplace_uniqueIJS0_IifEEEES0_ISt17_Rb_tree_iteratorIS2_EbEDpOT_+0x70>
			    || _M_impl._M_key_compare(_S_key(__z),
   d6ee8:	2001      	movs	r0, #1
   d6eea:	e7f0      	b.n	d6ece <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE17_M_emplace_uniqueIJS0_IifEEEES0_ISt17_Rb_tree_iteratorIS2_EbEDpOT_+0x7a>

000d6eec <_ZN6UbiTCP19parseMultipleValuesEv>:
tcpMap UbiTCP::parseMultipleValues() {
   d6eec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   d6ef0:	460d      	mov	r5, r1
   d6ef2:	4604      	mov	r4, r0
  char* response = (char*)malloc(sizeof(char) * MAX_BUFFER_SIZE);
   d6ef4:	f44f 702f 	mov.w	r0, #700	; 0x2bc
   d6ef8:	f000 fd24 	bl	d7944 <malloc>
  if (_debug) {
   d6efc:	7d2b      	ldrb	r3, [r5, #20]
  char* response = (char*)malloc(sizeof(char) * MAX_BUFFER_SIZE);
   d6efe:	4607      	mov	r7, r0
  if (_debug) {
   d6f00:	b14b      	cbz	r3, d6f16 <_ZN6UbiTCP19parseMultipleValuesEv+0x2a>
    Serial.println("----------");
   d6f02:	f004 f947 	bl	db194 <_Z16_fetch_usbserialv>
   d6f06:	493a      	ldr	r1, [pc, #232]	; (d6ff0 <_ZN6UbiTCP19parseMultipleValuesEv+0x104>)
   d6f08:	f002 fe47 	bl	d9b9a <_ZN5Print7printlnEPKc>
    Serial.println("Server's response:");
   d6f0c:	f004 f942 	bl	db194 <_Z16_fetch_usbserialv>
   d6f10:	4938      	ldr	r1, [pc, #224]	; (d6ff4 <_ZN6UbiTCP19parseMultipleValuesEv+0x108>)
   d6f12:	f002 fe42 	bl	d9b9a <_ZN5Print7printlnEPKc>
  while (_client_tcp_ubi.available()) {
   d6f16:	f8df 90f0 	ldr.w	r9, [pc, #240]	; d7008 <_ZN6UbiTCP19parseMultipleValuesEv+0x11c>
tcpMap UbiTCP::parseMultipleValues() {
   d6f1a:	2600      	movs	r6, #0
    if (j >= MAX_BUFFER_SIZE - 1) {
   d6f1c:	f240 2abb 	movw	sl, #699	; 0x2bb
  while (_client_tcp_ubi.available()) {
   d6f20:	4648      	mov	r0, r9
   d6f22:	f003 fae3 	bl	da4ec <_ZN9TCPClient9availableEv>
   d6f26:	b188      	cbz	r0, d6f4c <_ZN6UbiTCP19parseMultipleValuesEv+0x60>
    char c = _client_tcp_ubi.read();
   d6f28:	4648      	mov	r0, r9
   d6f2a:	f003 f998 	bl	da25e <_ZN9TCPClient4readEv>
    if (_debug) {
   d6f2e:	7d2b      	ldrb	r3, [r5, #20]
    char c = _client_tcp_ubi.read();
   d6f30:	fa5f f880 	uxtb.w	r8, r0
    if (_debug) {
   d6f34:	b12b      	cbz	r3, d6f42 <_ZN6UbiTCP19parseMultipleValuesEv+0x56>
      Serial.write(c);
   d6f36:	f004 f92d 	bl	db194 <_Z16_fetch_usbserialv>
   d6f3a:	6803      	ldr	r3, [r0, #0]
   d6f3c:	4641      	mov	r1, r8
   d6f3e:	689b      	ldr	r3, [r3, #8]
   d6f40:	4798      	blx	r3
    response[j] = c;
   d6f42:	f807 8006 	strb.w	r8, [r7, r6]
    j++;
   d6f46:	3601      	adds	r6, #1
    if (j >= MAX_BUFFER_SIZE - 1) {
   d6f48:	4556      	cmp	r6, sl
   d6f4a:	d1e9      	bne.n	d6f20 <_ZN6UbiTCP19parseMultipleValuesEv+0x34>
  if (_debug) {
   d6f4c:	7d2b      	ldrb	r3, [r5, #20]
   d6f4e:	b123      	cbz	r3, d6f5a <_ZN6UbiTCP19parseMultipleValuesEv+0x6e>
    Serial.println("\n----------");
   d6f50:	f004 f920 	bl	db194 <_Z16_fetch_usbserialv>
   d6f54:	4928      	ldr	r1, [pc, #160]	; (d6ff8 <_ZN6UbiTCP19parseMultipleValuesEv+0x10c>)
   d6f56:	f002 fe20 	bl	d9b9a <_ZN5Print7printlnEPKc>
  response[j] = '\0';
   d6f5a:	2500      	movs	r5, #0
	  : _Node_allocator()
   d6f5c:	1d23      	adds	r3, r4, #4
      _M_header._M_left = &_M_header;
   d6f5e:	e9c4 5302 	strd	r5, r3, [r4, #8]
      _M_node_count = 0;
   d6f62:	e9c4 3504 	strd	r3, r5, [r4, #16]
  char* token = strtok(response, "|");
   d6f66:	4925      	ldr	r1, [pc, #148]	; (d6ffc <_ZN6UbiTCP19parseMultipleValuesEv+0x110>)
      _M_header._M_color = _S_red;
   d6f68:	7125      	strb	r5, [r4, #4]
   d6f6a:	4638      	mov	r0, r7
  response[j] = '\0';
   d6f6c:	55bd      	strb	r5, [r7, r6]
  char* token = strtok(response, "|");
   d6f6e:	f006 faed 	bl	dd54c <strtok>
    if (strcmp(token, "OK") == 0) {
   d6f72:	f8df 9098 	ldr.w	r9, [pc, #152]	; d700c <_ZN6UbiTCP19parseMultipleValuesEv+0x120>
    } else if (strcmp(token, "ERROR") == 0) {
   d6f76:	f8df a098 	ldr.w	sl, [pc, #152]	; d7010 <_ZN6UbiTCP19parseMultipleValuesEv+0x124>
      token = strtok(NULL, "|");
   d6f7a:	f8df 8080 	ldr.w	r8, [pc, #128]	; d6ffc <_ZN6UbiTCP19parseMultipleValuesEv+0x110>
  char* token = strtok(response, "|");
   d6f7e:	4606      	mov	r6, r0
  while (token != NULL) {
   d6f80:	b37e      	cbz	r6, d6fe2 <_ZN6UbiTCP19parseMultipleValuesEv+0xf6>
    if (strcmp(token, "OK") == 0) {
   d6f82:	4649      	mov	r1, r9
   d6f84:	4630      	mov	r0, r6
   d6f86:	f005 fc24 	bl	dc7d2 <strcmp>
   d6f8a:	bb00      	cbnz	r0, d6fce <_ZN6UbiTCP19parseMultipleValuesEv+0xe2>
      token = strtok(NULL, "|");
   d6f8c:	4641      	mov	r1, r8
   d6f8e:	f006 fadd 	bl	dd54c <strtok>
      if (strcmp(token, "null") == 0) {
   d6f92:	491b      	ldr	r1, [pc, #108]	; (d7000 <_ZN6UbiTCP19parseMultipleValuesEv+0x114>)
      token = strtok(NULL, "|");
   d6f94:	4606      	mov	r6, r0
      if (strcmp(token, "null") == 0) {
   d6f96:	f005 fc1c 	bl	dc7d2 <strcmp>
   d6f9a:	b918      	cbnz	r0, d6fa4 <_ZN6UbiTCP19parseMultipleValuesEv+0xb8>
       : first(std::forward<_U1>(__x)), second(__y) { }
   d6f9c:	4b19      	ldr	r3, [pc, #100]	; (d7004 <_ZN6UbiTCP19parseMultipleValuesEv+0x118>)
   d6f9e:	9500      	str	r5, [sp, #0]
   d6fa0:	9301      	str	r3, [sp, #4]
   d6fa2:	e008      	b.n	d6fb6 <_ZN6UbiTCP19parseMultipleValuesEv+0xca>
        results.insert(std::pair<int, float>(mapKey, atof(token)));
   d6fa4:	4630      	mov	r0, r6
   d6fa6:	f005 fb93 	bl	dc6d0 <atof>
   d6faa:	ec51 0b10 	vmov	r0, r1, d0
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
   d6fae:	9500      	str	r5, [sp, #0]
   d6fb0:	f005 f944 	bl	dc23c <__aeabi_d2f>
   d6fb4:	9001      	str	r0, [sp, #4]

      template<typename _Pair>
	__enable_if_t<is_constructible<value_type, _Pair>::value,
		      pair<iterator, bool>>
	insert(_Pair&& __x)
	{ return _M_t._M_emplace_unique(std::forward<_Pair>(__x)); }
   d6fb6:	466a      	mov	r2, sp
   d6fb8:	4621      	mov	r1, r4
   d6fba:	a802      	add	r0, sp, #8
   d6fbc:	f7ff ff4a 	bl	d6e54 <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE17_M_emplace_uniqueIJS0_IifEEEES0_ISt17_Rb_tree_iteratorIS2_EbEDpOT_>
    token = strtok(NULL, "|");
   d6fc0:	4641      	mov	r1, r8
   d6fc2:	2000      	movs	r0, #0
   d6fc4:	f006 fac2 	bl	dd54c <strtok>
    mapKey++;
   d6fc8:	3501      	adds	r5, #1
    token = strtok(NULL, "|");
   d6fca:	4606      	mov	r6, r0
  while (token != NULL) {
   d6fcc:	e7d8      	b.n	d6f80 <_ZN6UbiTCP19parseMultipleValuesEv+0x94>
    } else if (strcmp(token, "ERROR") == 0) {
   d6fce:	4651      	mov	r1, sl
   d6fd0:	4630      	mov	r0, r6
   d6fd2:	f005 fbfe 	bl	dc7d2 <strcmp>
   d6fd6:	2800      	cmp	r0, #0
   d6fd8:	d1f2      	bne.n	d6fc0 <_ZN6UbiTCP19parseMultipleValuesEv+0xd4>
      token = strtok(NULL, "|");
   d6fda:	4641      	mov	r1, r8
   d6fdc:	f006 fab6 	bl	dd54c <strtok>
   d6fe0:	e7dc      	b.n	d6f9c <_ZN6UbiTCP19parseMultipleValuesEv+0xb0>
  free(response);
   d6fe2:	4638      	mov	r0, r7
   d6fe4:	f000 fcb6 	bl	d7954 <free>
}
   d6fe8:	4620      	mov	r0, r4
   d6fea:	b004      	add	sp, #16
   d6fec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d6ff0:	000dec6f 	.word	0x000dec6f
   d6ff4:	000dec5b 	.word	0x000dec5b
   d6ff8:	000dec6e 	.word	0x000dec6e
   d6ffc:	000def46 	.word	0x000def46
   d7000:	000defb2 	.word	0x000defb2
   d7004:	cda2425f 	.word	0xcda2425f
   d7008:	2003e590 	.word	0x2003e590
   d700c:	000def68 	.word	0x000def68
   d7010:	000defb7 	.word	0x000defb7

000d7014 <_ZN6UbiTCP17getMultipleValuesEPKcS1_>:
tcpMap UbiTCP::getMultipleValues(const char* device_label, const char* variable_labels) {
   d7014:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	  : _Node_allocator()
   d7018:	1d07      	adds	r7, r0, #4
   d701a:	4698      	mov	r8, r3
      _M_header._M_color = _S_red;
   d701c:	2300      	movs	r3, #0
      _M_header._M_left = &_M_header;
   d701e:	e9c0 3702 	strd	r3, r7, [r0, #8]
      _M_node_count = 0;
   d7022:	e9c0 7304 	strd	r7, r3, [r0, #16]
      _M_header._M_color = _S_red;
   d7026:	7103      	strb	r3, [r0, #4]
   d7028:	460d      	mov	r5, r1
   d702a:	b088      	sub	sp, #32
  _client_tcp_ubi.connect(_host, UBIDOTS_TCP_PORT);
   d702c:	6849      	ldr	r1, [r1, #4]
tcpMap UbiTCP::getMultipleValues(const char* device_label, const char* variable_labels) {
   d702e:	4604      	mov	r4, r0
   d7030:	4616      	mov	r6, r2
  _client_tcp_ubi.connect(_host, UBIDOTS_TCP_PORT);
   d7032:	482e      	ldr	r0, [pc, #184]	; (d70ec <_ZN6UbiTCP17getMultipleValuesEPKcS1_+0xd8>)
   d7034:	f242 3234 	movw	r2, #9012	; 0x2334
   d7038:	f003 f956 	bl	da2e8 <_ZN9TCPClient7connectEPKctm>
  reconnect(_host, UBIDOTS_TCP_PORT);
   d703c:	4628      	mov	r0, r5
   d703e:	6869      	ldr	r1, [r5, #4]
   d7040:	f242 3234 	movw	r2, #9012	; 0x2334
   d7044:	f7ff fd20 	bl	d6a88 <_ZN6UbiTCP9reconnectEPKci>
  if (_client_tcp_ubi.connected()) {
   d7048:	4828      	ldr	r0, [pc, #160]	; (d70ec <_ZN6UbiTCP17getMultipleValuesEPKcS1_+0xd8>)
   d704a:	f003 f848 	bl	da0de <_ZN9TCPClient9connectedEv>
   d704e:	b310      	cbz	r0, d7096 <_ZN6UbiTCP17getMultipleValuesEPKcS1_+0x82>
    buildAndSendGetPacket(device_label, variable_labels);
   d7050:	4631      	mov	r1, r6
   d7052:	4642      	mov	r2, r8
   d7054:	4628      	mov	r0, r5
   d7056:	f7ff fd63 	bl	d6b20 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_>
    if (!waitServerAnswer()) {
   d705a:	4628      	mov	r0, r5
   d705c:	f7ff fdd2 	bl	d6c04 <_ZN6UbiTCP16waitServerAnswerEv>
   d7060:	4606      	mov	r6, r0
   d7062:	b9c0      	cbnz	r0, d7096 <_ZN6UbiTCP17getMultipleValuesEPKcS1_+0x82>
      _client_tcp_ubi.stop();
   d7064:	4821      	ldr	r0, [pc, #132]	; (d70ec <_ZN6UbiTCP17getMultipleValuesEPKcS1_+0xd8>)
       : first(std::forward<_U1>(__x)), second(__y) { }
   d7066:	4f22      	ldr	r7, [pc, #136]	; (d70f0 <_ZN6UbiTCP17getMultipleValuesEPKcS1_+0xdc>)
   d7068:	f003 fa9a 	bl	da5a0 <_ZN9TCPClient4stopEv>
      char* token = strtok((char*)variable_labels, ",");
   d706c:	4921      	ldr	r1, [pc, #132]	; (d70f4 <_ZN6UbiTCP17getMultipleValuesEPKcS1_+0xe0>)
   d706e:	4640      	mov	r0, r8
   d7070:	f006 fa6c 	bl	dd54c <strtok>
      int mapKey = 0;
   d7074:	4635      	mov	r5, r6
        token = strtok(NULL, ",");
   d7076:	4e1f      	ldr	r6, [pc, #124]	; (d70f4 <_ZN6UbiTCP17getMultipleValuesEPKcS1_+0xe0>)
      while (token != NULL) {
   d7078:	2800      	cmp	r0, #0
   d707a:	d032      	beq.n	d70e2 <_ZN6UbiTCP17getMultipleValuesEPKcS1_+0xce>
   d707c:	4621      	mov	r1, r4
   d707e:	a802      	add	r0, sp, #8
   d7080:	466a      	mov	r2, sp
   d7082:	9500      	str	r5, [sp, #0]
   d7084:	9701      	str	r7, [sp, #4]
   d7086:	f7ff fee5 	bl	d6e54 <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE17_M_emplace_uniqueIJS0_IifEEEES0_ISt17_Rb_tree_iteratorIS2_EbEDpOT_>
        token = strtok(NULL, ",");
   d708a:	4631      	mov	r1, r6
   d708c:	2000      	movs	r0, #0
        mapKey++;
   d708e:	3501      	adds	r5, #1
        token = strtok(NULL, ",");
   d7090:	f006 fa5c 	bl	dd54c <strtok>
      while (token != NULL) {
   d7094:	e7f0      	b.n	d7078 <_ZN6UbiTCP17getMultipleValuesEPKcS1_+0x64>
  results = parseMultipleValues();
   d7096:	4629      	mov	r1, r5
   d7098:	a802      	add	r0, sp, #8
   d709a:	f7ff ff27 	bl	d6eec <_ZN6UbiTCP19parseMultipleValuesEv>
	_M_erase(_M_begin());
   d709e:	68a1      	ldr	r1, [r4, #8]
   d70a0:	4620      	mov	r0, r4
   d70a2:	f7ff fcb7 	bl	d6a14 <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E>
      if (__x._M_root() != nullptr)
   d70a6:	9a04      	ldr	r2, [sp, #16]
      _M_header._M_parent = 0;
   d70a8:	2300      	movs	r3, #0
      _M_header._M_left = &_M_header;
   d70aa:	e9c4 3702 	strd	r3, r7, [r4, #8]
      _M_node_count = 0;
   d70ae:	e9c4 7304 	strd	r7, r3, [r4, #16]
      if (__x._M_root() != nullptr)
   d70b2:	b17a      	cbz	r2, d70d4 <_ZN6UbiTCP17getMultipleValuesEPKcS1_+0xc0>
      _M_header._M_color = __from._M_header._M_color;
   d70b4:	f89d 100c 	ldrb.w	r1, [sp, #12]
   d70b8:	7121      	strb	r1, [r4, #4]
      _M_header._M_left = __from._M_header._M_left;
   d70ba:	9905      	ldr	r1, [sp, #20]
   d70bc:	60e1      	str	r1, [r4, #12]
      _M_header._M_right = __from._M_header._M_right;
   d70be:	9906      	ldr	r1, [sp, #24]
      _M_header._M_parent = __from._M_header._M_parent;
   d70c0:	60a2      	str	r2, [r4, #8]
      _M_header._M_right = __from._M_header._M_right;
   d70c2:	6121      	str	r1, [r4, #16]
      _M_header._M_parent->_M_parent = &_M_header;
   d70c4:	6057      	str	r7, [r2, #4]
      _M_node_count = __from._M_node_count;
   d70c6:	9a07      	ldr	r2, [sp, #28]
   d70c8:	6162      	str	r2, [r4, #20]
      _M_header._M_left = &_M_header;
   d70ca:	aa03      	add	r2, sp, #12
      _M_header._M_right = &_M_header;
   d70cc:	e9cd 2205 	strd	r2, r2, [sp, #20]
      _M_header._M_parent = 0;
   d70d0:	9304      	str	r3, [sp, #16]
      _M_node_count = 0;
   d70d2:	9307      	str	r3, [sp, #28]
      { _M_erase(_M_begin()); }
   d70d4:	a802      	add	r0, sp, #8
   d70d6:	9904      	ldr	r1, [sp, #16]
   d70d8:	f7ff fc9c 	bl	d6a14 <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E>
  _client_tcp_ubi.stop();
   d70dc:	4803      	ldr	r0, [pc, #12]	; (d70ec <_ZN6UbiTCP17getMultipleValuesEPKcS1_+0xd8>)
   d70de:	f003 fa5f 	bl	da5a0 <_ZN9TCPClient4stopEv>
}
   d70e2:	4620      	mov	r0, r4
   d70e4:	b008      	add	sp, #32
   d70e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d70ea:	bf00      	nop
   d70ec:	2003e590 	.word	0x2003e590
   d70f0:	cda2425f 	.word	0xcda2425f
   d70f4:	000deee3 	.word	0x000deee3

000d70f8 <_GLOBAL__sub_I__ZN6UbiTCPC2EPKciS1_S1_>:
   d70f8:	4801      	ldr	r0, [pc, #4]	; (d7100 <_GLOBAL__sub_I__ZN6UbiTCPC2EPKciS1_S1_+0x8>)
   d70fa:	f003 baa1 	b.w	da640 <_ZN9TCPClientC1Ev>
   d70fe:	bf00      	nop
   d7100:	2003e590 	.word	0x2003e590

000d7104 <_ZN6UbiUDP3getEPKcS1_>:

  _client_udp_ubi.stop();
  return true;
}

float UbiUDP::get(const char *device_label, const char *variable_label) { return ERROR_VALUE; }
   d7104:	ed9f 0a01 	vldr	s0, [pc, #4]	; d710c <_ZN6UbiUDP3getEPKcS1_+0x8>
   d7108:	4770      	bx	lr
   d710a:	bf00      	nop
   d710c:	cda2425f 	.word	0xcda2425f

000d7110 <_ZN6UbiUDP8setDebugEb>:

/**
 * Makes available debug traces
 */

void UbiUDP::setDebug(bool debug) { _debug = debug; }
   d7110:	7501      	strb	r1, [r0, #20]
   d7112:	4770      	bx	lr

000d7114 <_ZN6UbiUDP17getMultipleValuesEPKcS1_>:
      _M_header._M_color = _S_red;
   d7114:	2200      	movs	r2, #0
	  : _Node_allocator()
   d7116:	1d01      	adds	r1, r0, #4
      _M_header._M_left = &_M_header;
   d7118:	e9c0 2102 	strd	r2, r1, [r0, #8]
      _M_node_count = 0;
   d711c:	e9c0 1204 	strd	r1, r2, [r0, #16]
      _M_header._M_color = _S_red;
   d7120:	7102      	strb	r2, [r0, #4]
}

tcpMap UbiUDP::getMultipleValues(const char *deviceLabel, const char *variableLabels) {
  tcpMap results;
  return results;
}
   d7122:	4770      	bx	lr

000d7124 <_ZN6UbiUDPC1EPKciS1_S1_>:
UbiUDP::UbiUDP(const char *host, const int port, const char *user_agent, const char *token) {
   d7124:	b530      	push	{r4, r5, lr}
   d7126:	4d06      	ldr	r5, [pc, #24]	; (d7140 <_ZN6UbiUDPC1EPKciS1_S1_+0x1c>)
   d7128:	6005      	str	r5, [r0, #0]
  _user_agent = user_agent;
   d712a:	e9c0 1301 	strd	r1, r3, [r0, #4]
UbiUDP::UbiUDP(const char *host, const int port, const char *user_agent, const char *token) {
   d712e:	2500      	movs	r5, #0
  _token = token;
   d7130:	9b03      	ldr	r3, [sp, #12]
UbiUDP::UbiUDP(const char *host, const int port, const char *user_agent, const char *token) {
   d7132:	7505      	strb	r5, [r0, #20]
   d7134:	f241 3588 	movw	r5, #5000	; 0x1388
  _port = port;
   d7138:	e9c0 3203 	strd	r3, r2, [r0, #12]
UbiUDP::UbiUDP(const char *host, const int port, const char *user_agent, const char *token) {
   d713c:	6185      	str	r5, [r0, #24]
}
   d713e:	bd30      	pop	{r4, r5, pc}
   d7140:	000df08c 	.word	0x000df08c

000d7144 <_GLOBAL__sub_I__ZN6UbiUDPC2EPKciS1_S1_>:
   d7144:	4801      	ldr	r0, [pc, #4]	; (d714c <_GLOBAL__sub_I__ZN6UbiUDPC2EPKciS1_S1_+0x8>)
   d7146:	f003 be83 	b.w	dae50 <_ZN3UDPC1Ev>
   d714a:	bf00      	nop
   d714c:	2003e5ac 	.word	0x2003e5ac

000d7150 <_ZN6UbiUDP11getServerIpEv>:
IPAddress UbiUDP::getServerIp() {
   d7150:	b510      	push	{r4, lr}
   d7152:	4604      	mov	r4, r0
  return Cellular.resolve(_host);
   d7154:	684a      	ldr	r2, [r1, #4]
   d7156:	4902      	ldr	r1, [pc, #8]	; (d7160 <_ZN6UbiUDP11getServerIpEv+0x10>)
   d7158:	f002 fbce 	bl	d98f8 <_ZN5spark12NetworkClass7resolveEPKc>
}
   d715c:	4620      	mov	r0, r4
   d715e:	bd10      	pop	{r4, pc}
   d7160:	2003e5fc 	.word	0x2003e5fc

000d7164 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags>:
bool UbiUDP::sendData(const char *device_label, const char *device_name, char *payload, UbiFlags *flags) {
   d7164:	b5f0      	push	{r4, r5, r6, r7, lr}
   d7166:	b08f      	sub	sp, #60	; 0x3c
  IPAddress serverIpAddress = getServerIp();
   d7168:	4601      	mov	r1, r0
bool UbiUDP::sendData(const char *device_label, const char *device_name, char *payload, UbiFlags *flags) {
   d716a:	4606      	mov	r6, r0
  IPAddress serverIpAddress = getServerIp();
   d716c:	a802      	add	r0, sp, #8
bool UbiUDP::sendData(const char *device_label, const char *device_name, char *payload, UbiFlags *flags) {
   d716e:	461f      	mov	r7, r3
  IPAddress serverIpAddress = getServerIp();
   d7170:	f7ff ffee 	bl	d7150 <_ZN6UbiUDP11getServerIpEv>
    operator bool() const;

    // For some reason, without this non-const overload GCC struggles to pick right operator
    // for bool conversion of a non-const object
    operator bool() {
        return static_cast<const IPAddress*>(this)->operator bool();
   d7174:	a802      	add	r0, sp, #8
   d7176:	f001 f9ab 	bl	d84d0 <_ZNK9IPAddresscvbEv>
  if (!serverIpAddress) {
   d717a:	b9a0      	cbnz	r0, d71a6 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0x42>
    if (_debug) {
   d717c:	7d33      	ldrb	r3, [r6, #20]
   d717e:	b123      	cbz	r3, d718a <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0x26>
      Serial.println(
   d7180:	f004 f808 	bl	db194 <_Z16_fetch_usbserialv>
   d7184:	4927      	ldr	r1, [pc, #156]	; (d7224 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xc0>)
   d7186:	f002 fd08 	bl	d9b9a <_ZN5Print7printlnEPKc>
    serverIpAddress = IPAddress(169, 55, 61, 243);
   d718a:	23f3      	movs	r3, #243	; 0xf3
   d718c:	9300      	str	r3, [sp, #0]
   d718e:	2237      	movs	r2, #55	; 0x37
   d7190:	233d      	movs	r3, #61	; 0x3d
   d7192:	21a9      	movs	r1, #169	; 0xa9
   d7194:	a808      	add	r0, sp, #32
class IPAddress : public Printable {
   d7196:	ad09      	add	r5, sp, #36	; 0x24
   d7198:	f001 f9be 	bl	d8518 <_ZN9IPAddressC1Ehhhh>
   d719c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d719e:	ac03      	add	r4, sp, #12
   d71a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d71a2:	682b      	ldr	r3, [r5, #0]
   d71a4:	7023      	strb	r3, [r4, #0]
  _client_udp_ubi.setBuffer(MAX_BUFFER_SIZE + 1);  // Sets the max buffer size to send data
   d71a6:	2200      	movs	r2, #0
   d71a8:	f240 21bd 	movw	r1, #701	; 0x2bd
   d71ac:	481e      	ldr	r0, [pc, #120]	; (d7228 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xc4>)
   d71ae:	f003 fe81 	bl	daeb4 <_ZN3UDP9setBufferEjPh>
  _client_udp_ubi.begin(UBIDOTS_TCP_PORT);
   d71b2:	2200      	movs	r2, #0
   d71b4:	f242 3134 	movw	r1, #9012	; 0x2334
   d71b8:	481b      	ldr	r0, [pc, #108]	; (d7228 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xc4>)
   d71ba:	f003 fc57 	bl	daa6c <_ZN3UDP5beginEtm>
   d71be:	ad03      	add	r5, sp, #12
   d71c0:	4b1a      	ldr	r3, [pc, #104]	; (d722c <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xc8>)
   d71c2:	9308      	str	r3, [sp, #32]
   d71c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d71c6:	ac09      	add	r4, sp, #36	; 0x24
   d71c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d71ca:	682b      	ldr	r3, [r5, #0]
  if (!(_client_udp_ubi.beginPacket(serverIpAddress, UBIDOTS_TCP_PORT) && _client_udp_ubi.write(payload) &&
   d71cc:	4816      	ldr	r0, [pc, #88]	; (d7228 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xc4>)
   d71ce:	7023      	strb	r3, [r4, #0]
   d71d0:	f242 3234 	movw	r2, #9012	; 0x2334
   d71d4:	a908      	add	r1, sp, #32
   d71d6:	f003 fe89 	bl	daeec <_ZN3UDP11beginPacketE9IPAddresst>
   d71da:	b958      	cbnz	r0, d71f4 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0x90>
    if (_debug) {
   d71dc:	7d33      	ldrb	r3, [r6, #20]
   d71de:	b123      	cbz	r3, d71ea <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0x86>
      Serial.println("ERROR sending values with UDP");
   d71e0:	f003 ffd8 	bl	db194 <_Z16_fetch_usbserialv>
   d71e4:	4912      	ldr	r1, [pc, #72]	; (d7230 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xcc>)
   d71e6:	f002 fcd8 	bl	d9b9a <_ZN5Print7printlnEPKc>
    _client_udp_ubi.stop();
   d71ea:	480f      	ldr	r0, [pc, #60]	; (d7228 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xc4>)
   d71ec:	f003 fc8a 	bl	dab04 <_ZN3UDP4stopEv>
    return false;
   d71f0:	2000      	movs	r0, #0
   d71f2:	e014      	b.n	d721e <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xba>
      if (str == NULL) return 0;
   d71f4:	2f00      	cmp	r7, #0
   d71f6:	d0f1      	beq.n	d71dc <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0x78>
      return write((const uint8_t *)str, strlen(str));
   d71f8:	4638      	mov	r0, r7
   d71fa:	f005 fb1a 	bl	dc832 <strlen>
   d71fe:	4639      	mov	r1, r7
   d7200:	4602      	mov	r2, r0
   d7202:	4809      	ldr	r0, [pc, #36]	; (d7228 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xc4>)
   d7204:	f003 fc8c 	bl	dab20 <_ZN3UDP5writeEPKhj>
  if (!(_client_udp_ubi.beginPacket(serverIpAddress, UBIDOTS_TCP_PORT) && _client_udp_ubi.write(payload) &&
   d7208:	2800      	cmp	r0, #0
   d720a:	d0e7      	beq.n	d71dc <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0x78>
        _client_udp_ubi.endPacket())) {
   d720c:	4806      	ldr	r0, [pc, #24]	; (d7228 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xc4>)
   d720e:	f003 fce7 	bl	dabe0 <_ZN3UDP9endPacketEv>
  if (!(_client_udp_ubi.beginPacket(serverIpAddress, UBIDOTS_TCP_PORT) && _client_udp_ubi.write(payload) &&
   d7212:	2800      	cmp	r0, #0
   d7214:	d0e2      	beq.n	d71dc <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0x78>
  _client_udp_ubi.stop();
   d7216:	4804      	ldr	r0, [pc, #16]	; (d7228 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xc4>)
   d7218:	f003 fc74 	bl	dab04 <_ZN3UDP4stopEv>
  return true;
   d721c:	2001      	movs	r0, #1
}
   d721e:	b00f      	add	sp, #60	; 0x3c
   d7220:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d7222:	bf00      	nop
   d7224:	000defd8 	.word	0x000defd8
   d7228:	2003e5ac 	.word	0x2003e5ac
   d722c:	000df184 	.word	0x000df184
   d7230:	000df064 	.word	0x000df064

000d7234 <_ZN7Ubidots8_builderEPcPKc11IotProtocol>:

Ubidots::Ubidots(char* token, IotProtocol iotProtocol) { _builder(token, UBI_INDUSTRIAL, iotProtocol); }

Ubidots::Ubidots(char* token, UbiServer server, IotProtocol iotProtocol) { _builder(token, server, iotProtocol); }

void Ubidots::_builder(char* token, UbiServer server, IotProtocol iotProtocol) {
   d7234:	b573      	push	{r0, r1, r4, r5, r6, lr}
  _iotProtocol = iotProtocol;
   d7236:	7203      	strb	r3, [r0, #8]
void Ubidots::_builder(char* token, UbiServer server, IotProtocol iotProtocol) {
   d7238:	4604      	mov	r4, r0
  _context = (ContextUbi*)malloc(MAX_VALUES * sizeof(ContextUbi));
   d723a:	2050      	movs	r0, #80	; 0x50
void Ubidots::_builder(char* token, UbiServer server, IotProtocol iotProtocol) {
   d723c:	e9cd 2100 	strd	r2, r1, [sp]
   d7240:	461e      	mov	r6, r3
  _context = (ContextUbi*)malloc(MAX_VALUES * sizeof(ContextUbi));
   d7242:	f000 fb7f 	bl	d7944 <malloc>
   d7246:	6060      	str	r0, [r4, #4]

  _cloudProtocol = new UbiProtocolHandler(token, server, iotProtocol);
   d7248:	2014      	movs	r0, #20
   d724a:	f7fc ff24 	bl	d4096 <_Znwj>
   d724e:	4605      	mov	r5, r0
   d7250:	b120      	cbz	r0, d725c <_ZN7Ubidots8_builderEPcPKc11IotProtocol+0x28>
   d7252:	e9dd 2100 	ldrd	r2, r1, [sp]
   d7256:	4633      	mov	r3, r6
   d7258:	f7ff fbd4 	bl	d6a04 <_ZN18UbiProtocolHandlerC1EPcPKc11IotProtocol>
   d725c:	6025      	str	r5, [r4, #0]
}
   d725e:	b002      	add	sp, #8
   d7260:	bd70      	pop	{r4, r5, r6, pc}
	...

000d7264 <_ZN7UbidotsC1EPc11IotProtocol>:
Ubidots::Ubidots(char* token, IotProtocol iotProtocol) { _builder(token, UBI_INDUSTRIAL, iotProtocol); }
   d7264:	b538      	push	{r3, r4, r5, lr}
   d7266:	2500      	movs	r5, #0
   d7268:	4604      	mov	r4, r0
   d726a:	4613      	mov	r3, r2
   d726c:	7245      	strb	r5, [r0, #9]
   d726e:	7285      	strb	r5, [r0, #10]
   d7270:	4a02      	ldr	r2, [pc, #8]	; (d727c <_ZN7UbidotsC1EPc11IotProtocol+0x18>)
   d7272:	f7ff ffdf 	bl	d7234 <_ZN7Ubidots8_builderEPcPKc11IotProtocol>
   d7276:	4620      	mov	r0, r4
   d7278:	bd38      	pop	{r3, r4, r5, pc}
   d727a:	bf00      	nop
   d727c:	000df09c 	.word	0x000df09c

000d7280 <_ZN7Ubidots3addEPcfS0_mj>:
  add(variable_label, value, context, dot_timestamp_seconds, NULL);
}

void Ubidots::add(char* variable_label, float value, char* context, long unsigned dot_timestamp_seconds,
                  unsigned int dot_timestamp_millis) {
  _cloudProtocol->add(variable_label, value, context, dot_timestamp_seconds, dot_timestamp_millis);
   d7280:	6800      	ldr	r0, [r0, #0]
   d7282:	f7ff b951 	b.w	d6528 <_ZN18UbiProtocolHandler3addEPcfS0_mj>

000d7286 <_ZN7Ubidots3addEPcf>:
void Ubidots::add(char* variable_label, float value) { add(variable_label, value, NULL, NULL, NULL); }
   d7286:	b507      	push	{r0, r1, r2, lr}
   d7288:	2300      	movs	r3, #0
   d728a:	9300      	str	r3, [sp, #0]
   d728c:	461a      	mov	r2, r3
   d728e:	f7ff fff7 	bl	d7280 <_ZN7Ubidots3addEPcfS0_mj>
   d7292:	b003      	add	sp, #12
   d7294:	f85d fb04 	ldr.w	pc, [sp], #4

000d7298 <_ZN7Ubidots4sendEPKcN8particle5FlagsI15PublishFlagTypehEE>:

bool Ubidots::send(const char* device_label, const char* device_name) {
  return _cloudProtocol->send(device_label, device_name);
}

bool Ubidots::send(const char* device_label, PublishFlags flag) { return _cloudProtocol->send(device_label, flag); }
   d7298:	6800      	ldr	r0, [r0, #0]
   d729a:	f7ff bb61 	b.w	d6960 <_ZN18UbiProtocolHandler4sendEPKcN8particle5FlagsI15PublishFlagTypehEE>
	...

000d72a0 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d72a0:	b508      	push	{r3, lr}
   d72a2:	4b02      	ldr	r3, [pc, #8]	; (d72ac <os_mutex_recursive_create+0xc>)
   d72a4:	681b      	ldr	r3, [r3, #0]
   d72a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d72a8:	9301      	str	r3, [sp, #4]
   d72aa:	bd08      	pop	{r3, pc}
   d72ac:	00030248 	.word	0x00030248

000d72b0 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d72b0:	b508      	push	{r3, lr}
   d72b2:	4b02      	ldr	r3, [pc, #8]	; (d72bc <os_mutex_recursive_destroy+0xc>)
   d72b4:	681b      	ldr	r3, [r3, #0]
   d72b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d72b8:	9301      	str	r3, [sp, #4]
   d72ba:	bd08      	pop	{r3, pc}
   d72bc:	00030248 	.word	0x00030248

000d72c0 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   d72c0:	b508      	push	{r3, lr}
   d72c2:	4b02      	ldr	r3, [pc, #8]	; (d72cc <os_mutex_recursive_lock+0xc>)
   d72c4:	681b      	ldr	r3, [r3, #0]
   d72c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d72c8:	9301      	str	r3, [sp, #4]
   d72ca:	bd08      	pop	{r3, pc}
   d72cc:	00030248 	.word	0x00030248

000d72d0 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   d72d0:	b508      	push	{r3, lr}
   d72d2:	4b02      	ldr	r3, [pc, #8]	; (d72dc <os_mutex_recursive_unlock+0xc>)
   d72d4:	681b      	ldr	r3, [r3, #0]
   d72d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d72d8:	9301      	str	r3, [sp, #4]
   d72da:	bd08      	pop	{r3, pc}
   d72dc:	00030248 	.word	0x00030248

000d72e0 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d72e0:	b508      	push	{r3, lr}
   d72e2:	4b02      	ldr	r3, [pc, #8]	; (d72ec <HAL_RNG_GetRandomNumber+0xc>)
   d72e4:	681b      	ldr	r3, [r3, #0]
   d72e6:	685b      	ldr	r3, [r3, #4]
   d72e8:	9301      	str	r3, [sp, #4]
   d72ea:	bd08      	pop	{r3, pc}
   d72ec:	00030218 	.word	0x00030218

000d72f0 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d72f0:	b508      	push	{r3, lr}
   d72f2:	4b02      	ldr	r3, [pc, #8]	; (d72fc <HAL_Delay_Microseconds+0xc>)
   d72f4:	681b      	ldr	r3, [r3, #0]
   d72f6:	68db      	ldr	r3, [r3, #12]
   d72f8:	9301      	str	r3, [sp, #4]
   d72fa:	bd08      	pop	{r3, pc}
   d72fc:	00030218 	.word	0x00030218

000d7300 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d7300:	b508      	push	{r3, lr}
   d7302:	4b02      	ldr	r3, [pc, #8]	; (d730c <HAL_Timer_Get_Milli_Seconds+0xc>)
   d7304:	681b      	ldr	r3, [r3, #0]
   d7306:	695b      	ldr	r3, [r3, #20]
   d7308:	9301      	str	r3, [sp, #4]
   d730a:	bd08      	pop	{r3, pc}
   d730c:	00030218 	.word	0x00030218

000d7310 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   d7310:	b508      	push	{r3, lr}
   d7312:	4b02      	ldr	r3, [pc, #8]	; (d731c <hal_rtc_time_is_valid+0xc>)
   d7314:	681b      	ldr	r3, [r3, #0]
   d7316:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d7318:	9301      	str	r3, [sp, #4]
   d731a:	bd08      	pop	{r3, pc}
   d731c:	00030218 	.word	0x00030218

000d7320 <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   d7320:	b508      	push	{r3, lr}
   d7322:	4b02      	ldr	r3, [pc, #8]	; (d732c <hal_rtc_get_time+0xc>)
   d7324:	681b      	ldr	r3, [r3, #0]
   d7326:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   d7328:	9301      	str	r3, [sp, #4]
   d732a:	bd08      	pop	{r3, pc}
   d732c:	00030218 	.word	0x00030218

000d7330 <hal_rtc_set_time>:
DYNALIB_FN(BASE_IDX + 24, hal, hal_rtc_set_time, int(const struct timeval*, void*))
   d7330:	b508      	push	{r3, lr}
   d7332:	4b02      	ldr	r3, [pc, #8]	; (d733c <hal_rtc_set_time+0xc>)
   d7334:	681b      	ldr	r3, [r3, #0]
   d7336:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   d7338:	9301      	str	r3, [sp, #4]
   d733a:	bd08      	pop	{r3, pc}
   d733c:	00030218 	.word	0x00030218

000d7340 <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d7340:	b508      	push	{r3, lr}
   d7342:	4b02      	ldr	r3, [pc, #8]	; (d734c <HAL_Validate_Pin_Function+0xc>)
   d7344:	681b      	ldr	r3, [r3, #0]
   d7346:	685b      	ldr	r3, [r3, #4]
   d7348:	9301      	str	r3, [sp, #4]
   d734a:	bd08      	pop	{r3, pc}
   d734c:	0003022c 	.word	0x0003022c

000d7350 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d7350:	b508      	push	{r3, lr}
   d7352:	4b02      	ldr	r3, [pc, #8]	; (d735c <HAL_Pin_Mode+0xc>)
   d7354:	681b      	ldr	r3, [r3, #0]
   d7356:	689b      	ldr	r3, [r3, #8]
   d7358:	9301      	str	r3, [sp, #4]
   d735a:	bd08      	pop	{r3, pc}
   d735c:	0003022c 	.word	0x0003022c

000d7360 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d7360:	b508      	push	{r3, lr}
   d7362:	4b02      	ldr	r3, [pc, #8]	; (d736c <HAL_Get_Pin_Mode+0xc>)
   d7364:	681b      	ldr	r3, [r3, #0]
   d7366:	68db      	ldr	r3, [r3, #12]
   d7368:	9301      	str	r3, [sp, #4]
   d736a:	bd08      	pop	{r3, pc}
   d736c:	0003022c 	.word	0x0003022c

000d7370 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d7370:	b508      	push	{r3, lr}
   d7372:	4b02      	ldr	r3, [pc, #8]	; (d737c <HAL_GPIO_Write+0xc>)
   d7374:	681b      	ldr	r3, [r3, #0]
   d7376:	691b      	ldr	r3, [r3, #16]
   d7378:	9301      	str	r3, [sp, #4]
   d737a:	bd08      	pop	{r3, pc}
   d737c:	0003022c 	.word	0x0003022c

000d7380 <HAL_Interrupts_Attach>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   d7380:	b508      	push	{r3, lr}
   d7382:	4b02      	ldr	r3, [pc, #8]	; (d738c <HAL_Interrupts_Attach+0xc>)
   d7384:	681b      	ldr	r3, [r3, #0]
   d7386:	699b      	ldr	r3, [r3, #24]
   d7388:	9301      	str	r3, [sp, #4]
   d738a:	bd08      	pop	{r3, pc}
   d738c:	0003022c 	.word	0x0003022c

000d7390 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   d7390:	b508      	push	{r3, lr}
   d7392:	4b02      	ldr	r3, [pc, #8]	; (d739c <HAL_Interrupts_Detach+0xc>)
   d7394:	681b      	ldr	r3, [r3, #0]
   d7396:	69db      	ldr	r3, [r3, #28]
   d7398:	9301      	str	r3, [sp, #4]
   d739a:	bd08      	pop	{r3, pc}
   d739c:	0003022c 	.word	0x0003022c

000d73a0 <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   d73a0:	b508      	push	{r3, lr}
   d73a2:	4b02      	ldr	r3, [pc, #8]	; (d73ac <hal_adc_read+0xc>)
   d73a4:	681b      	ldr	r3, [r3, #0]
   d73a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d73a8:	9301      	str	r3, [sp, #4]
   d73aa:	bd08      	pop	{r3, pc}
   d73ac:	0003022c 	.word	0x0003022c

000d73b0 <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   d73b0:	b508      	push	{r3, lr}
   d73b2:	4b02      	ldr	r3, [pc, #8]	; (d73bc <hal_i2c_begin+0xc>)
   d73b4:	681b      	ldr	r3, [r3, #0]
   d73b6:	68db      	ldr	r3, [r3, #12]
   d73b8:	9301      	str	r3, [sp, #4]
   d73ba:	bd08      	pop	{r3, pc}
   d73bc:	00030228 	.word	0x00030228

000d73c0 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   d73c0:	b508      	push	{r3, lr}
   d73c2:	4b02      	ldr	r3, [pc, #8]	; (d73cc <hal_i2c_begin_transmission+0xc>)
   d73c4:	681b      	ldr	r3, [r3, #0]
   d73c6:	699b      	ldr	r3, [r3, #24]
   d73c8:	9301      	str	r3, [sp, #4]
   d73ca:	bd08      	pop	{r3, pc}
   d73cc:	00030228 	.word	0x00030228

000d73d0 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   d73d0:	b508      	push	{r3, lr}
   d73d2:	4b02      	ldr	r3, [pc, #8]	; (d73dc <hal_i2c_end_transmission+0xc>)
   d73d4:	681b      	ldr	r3, [r3, #0]
   d73d6:	69db      	ldr	r3, [r3, #28]
   d73d8:	9301      	str	r3, [sp, #4]
   d73da:	bd08      	pop	{r3, pc}
   d73dc:	00030228 	.word	0x00030228

000d73e0 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d73e0:	b508      	push	{r3, lr}
   d73e2:	4b02      	ldr	r3, [pc, #8]	; (d73ec <hal_i2c_write+0xc>)
   d73e4:	681b      	ldr	r3, [r3, #0]
   d73e6:	6a1b      	ldr	r3, [r3, #32]
   d73e8:	9301      	str	r3, [sp, #4]
   d73ea:	bd08      	pop	{r3, pc}
   d73ec:	00030228 	.word	0x00030228

000d73f0 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d73f0:	b508      	push	{r3, lr}
   d73f2:	4b02      	ldr	r3, [pc, #8]	; (d73fc <hal_i2c_available+0xc>)
   d73f4:	681b      	ldr	r3, [r3, #0]
   d73f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d73f8:	9301      	str	r3, [sp, #4]
   d73fa:	bd08      	pop	{r3, pc}
   d73fc:	00030228 	.word	0x00030228

000d7400 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d7400:	b508      	push	{r3, lr}
   d7402:	4b02      	ldr	r3, [pc, #8]	; (d740c <hal_i2c_read+0xc>)
   d7404:	681b      	ldr	r3, [r3, #0]
   d7406:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d7408:	9301      	str	r3, [sp, #4]
   d740a:	bd08      	pop	{r3, pc}
   d740c:	00030228 	.word	0x00030228

000d7410 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d7410:	b508      	push	{r3, lr}
   d7412:	4b02      	ldr	r3, [pc, #8]	; (d741c <hal_i2c_peek+0xc>)
   d7414:	681b      	ldr	r3, [r3, #0]
   d7416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d7418:	9301      	str	r3, [sp, #4]
   d741a:	bd08      	pop	{r3, pc}
   d741c:	00030228 	.word	0x00030228

000d7420 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d7420:	b508      	push	{r3, lr}
   d7422:	4b02      	ldr	r3, [pc, #8]	; (d742c <hal_i2c_flush+0xc>)
   d7424:	681b      	ldr	r3, [r3, #0]
   d7426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d7428:	9301      	str	r3, [sp, #4]
   d742a:	bd08      	pop	{r3, pc}
   d742c:	00030228 	.word	0x00030228

000d7430 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d7430:	b508      	push	{r3, lr}
   d7432:	4b02      	ldr	r3, [pc, #8]	; (d743c <hal_i2c_is_enabled+0xc>)
   d7434:	681b      	ldr	r3, [r3, #0]
   d7436:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d7438:	9301      	str	r3, [sp, #4]
   d743a:	bd08      	pop	{r3, pc}
   d743c:	00030228 	.word	0x00030228

000d7440 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d7440:	b508      	push	{r3, lr}
   d7442:	4b02      	ldr	r3, [pc, #8]	; (d744c <hal_i2c_init+0xc>)
   d7444:	681b      	ldr	r3, [r3, #0]
   d7446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d7448:	9301      	str	r3, [sp, #4]
   d744a:	bd08      	pop	{r3, pc}
   d744c:	00030228 	.word	0x00030228

000d7450 <hal_i2c_lock>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
   d7450:	b508      	push	{r3, lr}
   d7452:	4b02      	ldr	r3, [pc, #8]	; (d745c <hal_i2c_lock+0xc>)
   d7454:	681b      	ldr	r3, [r3, #0]
   d7456:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d7458:	9301      	str	r3, [sp, #4]
   d745a:	bd08      	pop	{r3, pc}
   d745c:	00030228 	.word	0x00030228

000d7460 <hal_i2c_unlock>:
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
   d7460:	b508      	push	{r3, lr}
   d7462:	4b02      	ldr	r3, [pc, #8]	; (d746c <hal_i2c_unlock+0xc>)
   d7464:	681b      	ldr	r3, [r3, #0]
   d7466:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d7468:	9301      	str	r3, [sp, #4]
   d746a:	bd08      	pop	{r3, pc}
   d746c:	00030228 	.word	0x00030228

000d7470 <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   d7470:	b508      	push	{r3, lr}
   d7472:	4b02      	ldr	r3, [pc, #8]	; (d747c <hal_i2c_request_ex+0xc>)
   d7474:	681b      	ldr	r3, [r3, #0]
   d7476:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d7478:	9301      	str	r3, [sp, #4]
   d747a:	bd08      	pop	{r3, pc}
   d747c:	00030228 	.word	0x00030228

000d7480 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   d7480:	b508      	push	{r3, lr}
   d7482:	4b02      	ldr	r3, [pc, #8]	; (d748c <if_index_to_name+0xc>)
   d7484:	681b      	ldr	r3, [r3, #0]
   d7486:	695b      	ldr	r3, [r3, #20]
   d7488:	9301      	str	r3, [sp, #4]
   d748a:	bd08      	pop	{r3, pc}
   d748c:	0003026c 	.word	0x0003026c

000d7490 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d7490:	b508      	push	{r3, lr}
   d7492:	4b02      	ldr	r3, [pc, #8]	; (d749c <inet_inet_ntop+0xc>)
   d7494:	681b      	ldr	r3, [r3, #0]
   d7496:	695b      	ldr	r3, [r3, #20]
   d7498:	9301      	str	r3, [sp, #4]
   d749a:	bd08      	pop	{r3, pc}
   d749c:	00030264 	.word	0x00030264

000d74a0 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   d74a0:	b508      	push	{r3, lr}
   d74a2:	4b02      	ldr	r3, [pc, #8]	; (d74ac <inet_htonl+0xc>)
   d74a4:	681b      	ldr	r3, [r3, #0]
   d74a6:	6a1b      	ldr	r3, [r3, #32]
   d74a8:	9301      	str	r3, [sp, #4]
   d74aa:	bd08      	pop	{r3, pc}
   d74ac:	00030264 	.word	0x00030264

000d74b0 <inet_ntohs>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
   d74b0:	b508      	push	{r3, lr}
   d74b2:	4b02      	ldr	r3, [pc, #8]	; (d74bc <inet_ntohs+0xc>)
   d74b4:	681b      	ldr	r3, [r3, #0]
   d74b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d74b8:	9301      	str	r3, [sp, #4]
   d74ba:	bd08      	pop	{r3, pc}
   d74bc:	00030264 	.word	0x00030264

000d74c0 <inet_htons>:
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   d74c0:	b508      	push	{r3, lr}
   d74c2:	4b02      	ldr	r3, [pc, #8]	; (d74cc <inet_htons+0xc>)
   d74c4:	681b      	ldr	r3, [r3, #0]
   d74c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d74c8:	9301      	str	r3, [sp, #4]
   d74ca:	bd08      	pop	{r3, pc}
   d74cc:	00030264 	.word	0x00030264

000d74d0 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d74d0:	b508      	push	{r3, lr}
   d74d2:	4b02      	ldr	r3, [pc, #8]	; (d74dc <netdb_freeaddrinfo+0xc>)
   d74d4:	681b      	ldr	r3, [r3, #0]
   d74d6:	689b      	ldr	r3, [r3, #8]
   d74d8:	9301      	str	r3, [sp, #4]
   d74da:	bd08      	pop	{r3, pc}
   d74dc:	00030268 	.word	0x00030268

000d74e0 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d74e0:	b508      	push	{r3, lr}
   d74e2:	4b02      	ldr	r3, [pc, #8]	; (d74ec <netdb_getaddrinfo+0xc>)
   d74e4:	681b      	ldr	r3, [r3, #0]
   d74e6:	68db      	ldr	r3, [r3, #12]
   d74e8:	9301      	str	r3, [sp, #4]
   d74ea:	bd08      	pop	{r3, pc}
   d74ec:	00030268 	.word	0x00030268

000d74f0 <sock_bind>:
// GNINRAW

DYNALIB_BEGIN(hal_socket)

DYNALIB_FN(0, hal_socket, sock_accept, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
   d74f0:	b508      	push	{r3, lr}
   d74f2:	4b02      	ldr	r3, [pc, #8]	; (d74fc <sock_bind+0xc>)
   d74f4:	681b      	ldr	r3, [r3, #0]
   d74f6:	685b      	ldr	r3, [r3, #4]
   d74f8:	9301      	str	r3, [sp, #4]
   d74fa:	bd08      	pop	{r3, pc}
   d74fc:	00030238 	.word	0x00030238

000d7500 <sock_setsockopt>:
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   d7500:	b508      	push	{r3, lr}
   d7502:	4b02      	ldr	r3, [pc, #8]	; (d750c <sock_setsockopt+0xc>)
   d7504:	681b      	ldr	r3, [r3, #0]
   d7506:	699b      	ldr	r3, [r3, #24]
   d7508:	9301      	str	r3, [sp, #4]
   d750a:	bd08      	pop	{r3, pc}
   d750c:	00030238 	.word	0x00030238

000d7510 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   d7510:	b508      	push	{r3, lr}
   d7512:	4b02      	ldr	r3, [pc, #8]	; (d751c <sock_close+0xc>)
   d7514:	681b      	ldr	r3, [r3, #0]
   d7516:	69db      	ldr	r3, [r3, #28]
   d7518:	9301      	str	r3, [sp, #4]
   d751a:	bd08      	pop	{r3, pc}
   d751c:	00030238 	.word	0x00030238

000d7520 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   d7520:	b508      	push	{r3, lr}
   d7522:	4b02      	ldr	r3, [pc, #8]	; (d752c <sock_connect+0xc>)
   d7524:	681b      	ldr	r3, [r3, #0]
   d7526:	6a1b      	ldr	r3, [r3, #32]
   d7528:	9301      	str	r3, [sp, #4]
   d752a:	bd08      	pop	{r3, pc}
   d752c:	00030238 	.word	0x00030238

000d7530 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   d7530:	b508      	push	{r3, lr}
   d7532:	4b02      	ldr	r3, [pc, #8]	; (d753c <sock_recv+0xc>)
   d7534:	681b      	ldr	r3, [r3, #0]
   d7536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d7538:	9301      	str	r3, [sp, #4]
   d753a:	bd08      	pop	{r3, pc}
   d753c:	00030238 	.word	0x00030238

000d7540 <sock_recvfrom>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
   d7540:	b508      	push	{r3, lr}
   d7542:	4b02      	ldr	r3, [pc, #8]	; (d754c <sock_recvfrom+0xc>)
   d7544:	681b      	ldr	r3, [r3, #0]
   d7546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d7548:	9301      	str	r3, [sp, #4]
   d754a:	bd08      	pop	{r3, pc}
   d754c:	00030238 	.word	0x00030238

000d7550 <sock_send>:
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   d7550:	b508      	push	{r3, lr}
   d7552:	4b02      	ldr	r3, [pc, #8]	; (d755c <sock_send+0xc>)
   d7554:	681b      	ldr	r3, [r3, #0]
   d7556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d7558:	9301      	str	r3, [sp, #4]
   d755a:	bd08      	pop	{r3, pc}
   d755c:	00030238 	.word	0x00030238

000d7560 <sock_sendto>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
   d7560:	b508      	push	{r3, lr}
   d7562:	4b02      	ldr	r3, [pc, #8]	; (d756c <sock_sendto+0xc>)
   d7564:	681b      	ldr	r3, [r3, #0]
   d7566:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d7568:	9301      	str	r3, [sp, #4]
   d756a:	bd08      	pop	{r3, pc}
   d756c:	00030238 	.word	0x00030238

000d7570 <sock_socket>:
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   d7570:	b508      	push	{r3, lr}
   d7572:	4b02      	ldr	r3, [pc, #8]	; (d757c <sock_socket+0xc>)
   d7574:	681b      	ldr	r3, [r3, #0]
   d7576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d7578:	9301      	str	r3, [sp, #4]
   d757a:	bd08      	pop	{r3, pc}
   d757c:	00030238 	.word	0x00030238

000d7580 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d7580:	b508      	push	{r3, lr}
   d7582:	4b02      	ldr	r3, [pc, #8]	; (d758c <hal_spi_init+0xc>)
   d7584:	681b      	ldr	r3, [r3, #0]
   d7586:	69db      	ldr	r3, [r3, #28]
   d7588:	9301      	str	r3, [sp, #4]
   d758a:	bd08      	pop	{r3, pc}
   d758c:	00030230 	.word	0x00030230

000d7590 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d7590:	b508      	push	{r3, lr}
   d7592:	4b02      	ldr	r3, [pc, #8]	; (d759c <hal_spi_is_enabled+0xc>)
   d7594:	681b      	ldr	r3, [r3, #0]
   d7596:	6a1b      	ldr	r3, [r3, #32]
   d7598:	9301      	str	r3, [sp, #4]
   d759a:	bd08      	pop	{r3, pc}
   d759c:	00030230 	.word	0x00030230

000d75a0 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d75a0:	b508      	push	{r3, lr}
   d75a2:	4b02      	ldr	r3, [pc, #8]	; (d75ac <hal_usart_init+0xc>)
   d75a4:	681b      	ldr	r3, [r3, #0]
   d75a6:	681b      	ldr	r3, [r3, #0]
   d75a8:	9301      	str	r3, [sp, #4]
   d75aa:	bd08      	pop	{r3, pc}
   d75ac:	0003023c 	.word	0x0003023c

000d75b0 <hal_usart_end>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
   d75b0:	b508      	push	{r3, lr}
   d75b2:	4b02      	ldr	r3, [pc, #8]	; (d75bc <hal_usart_end+0xc>)
   d75b4:	681b      	ldr	r3, [r3, #0]
   d75b6:	689b      	ldr	r3, [r3, #8]
   d75b8:	9301      	str	r3, [sp, #4]
   d75ba:	bd08      	pop	{r3, pc}
   d75bc:	0003023c 	.word	0x0003023c

000d75c0 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d75c0:	b508      	push	{r3, lr}
   d75c2:	4b02      	ldr	r3, [pc, #8]	; (d75cc <hal_usart_write+0xc>)
   d75c4:	681b      	ldr	r3, [r3, #0]
   d75c6:	68db      	ldr	r3, [r3, #12]
   d75c8:	9301      	str	r3, [sp, #4]
   d75ca:	bd08      	pop	{r3, pc}
   d75cc:	0003023c 	.word	0x0003023c

000d75d0 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d75d0:	b508      	push	{r3, lr}
   d75d2:	4b02      	ldr	r3, [pc, #8]	; (d75dc <hal_usart_available+0xc>)
   d75d4:	681b      	ldr	r3, [r3, #0]
   d75d6:	691b      	ldr	r3, [r3, #16]
   d75d8:	9301      	str	r3, [sp, #4]
   d75da:	bd08      	pop	{r3, pc}
   d75dc:	0003023c 	.word	0x0003023c

000d75e0 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d75e0:	b508      	push	{r3, lr}
   d75e2:	4b02      	ldr	r3, [pc, #8]	; (d75ec <hal_usart_read+0xc>)
   d75e4:	681b      	ldr	r3, [r3, #0]
   d75e6:	695b      	ldr	r3, [r3, #20]
   d75e8:	9301      	str	r3, [sp, #4]
   d75ea:	bd08      	pop	{r3, pc}
   d75ec:	0003023c 	.word	0x0003023c

000d75f0 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d75f0:	b508      	push	{r3, lr}
   d75f2:	4b02      	ldr	r3, [pc, #8]	; (d75fc <hal_usart_peek+0xc>)
   d75f4:	681b      	ldr	r3, [r3, #0]
   d75f6:	699b      	ldr	r3, [r3, #24]
   d75f8:	9301      	str	r3, [sp, #4]
   d75fa:	bd08      	pop	{r3, pc}
   d75fc:	0003023c 	.word	0x0003023c

000d7600 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d7600:	b508      	push	{r3, lr}
   d7602:	4b02      	ldr	r3, [pc, #8]	; (d760c <hal_usart_flush+0xc>)
   d7604:	681b      	ldr	r3, [r3, #0]
   d7606:	69db      	ldr	r3, [r3, #28]
   d7608:	9301      	str	r3, [sp, #4]
   d760a:	bd08      	pop	{r3, pc}
   d760c:	0003023c 	.word	0x0003023c

000d7610 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d7610:	b508      	push	{r3, lr}
   d7612:	4b02      	ldr	r3, [pc, #8]	; (d761c <hal_usart_is_enabled+0xc>)
   d7614:	681b      	ldr	r3, [r3, #0]
   d7616:	6a1b      	ldr	r3, [r3, #32]
   d7618:	9301      	str	r3, [sp, #4]
   d761a:	bd08      	pop	{r3, pc}
   d761c:	0003023c 	.word	0x0003023c

000d7620 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d7620:	b508      	push	{r3, lr}
   d7622:	4b02      	ldr	r3, [pc, #8]	; (d762c <hal_usart_available_data_for_write+0xc>)
   d7624:	681b      	ldr	r3, [r3, #0]
   d7626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d7628:	9301      	str	r3, [sp, #4]
   d762a:	bd08      	pop	{r3, pc}
   d762c:	0003023c 	.word	0x0003023c

000d7630 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   d7630:	b508      	push	{r3, lr}
   d7632:	4b02      	ldr	r3, [pc, #8]	; (d763c <hal_usart_begin_config+0xc>)
   d7634:	681b      	ldr	r3, [r3, #0]
   d7636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d7638:	9301      	str	r3, [sp, #4]
   d763a:	bd08      	pop	{r3, pc}
   d763c:	0003023c 	.word	0x0003023c

000d7640 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d7640:	b508      	push	{r3, lr}
   d7642:	4b02      	ldr	r3, [pc, #8]	; (d764c <HAL_USB_USART_Init+0xc>)
   d7644:	681b      	ldr	r3, [r3, #0]
   d7646:	681b      	ldr	r3, [r3, #0]
   d7648:	9301      	str	r3, [sp, #4]
   d764a:	bd08      	pop	{r3, pc}
   d764c:	0003024c 	.word	0x0003024c

000d7650 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d7650:	b508      	push	{r3, lr}
   d7652:	4b02      	ldr	r3, [pc, #8]	; (d765c <HAL_USB_USART_Begin+0xc>)
   d7654:	681b      	ldr	r3, [r3, #0]
   d7656:	685b      	ldr	r3, [r3, #4]
   d7658:	9301      	str	r3, [sp, #4]
   d765a:	bd08      	pop	{r3, pc}
   d765c:	0003024c 	.word	0x0003024c

000d7660 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   d7660:	b508      	push	{r3, lr}
   d7662:	4b02      	ldr	r3, [pc, #8]	; (d766c <HAL_USB_USART_End+0xc>)
   d7664:	681b      	ldr	r3, [r3, #0]
   d7666:	689b      	ldr	r3, [r3, #8]
   d7668:	9301      	str	r3, [sp, #4]
   d766a:	bd08      	pop	{r3, pc}
   d766c:	0003024c 	.word	0x0003024c

000d7670 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d7670:	b508      	push	{r3, lr}
   d7672:	4b02      	ldr	r3, [pc, #8]	; (d767c <HAL_USB_USART_Available_Data+0xc>)
   d7674:	681b      	ldr	r3, [r3, #0]
   d7676:	691b      	ldr	r3, [r3, #16]
   d7678:	9301      	str	r3, [sp, #4]
   d767a:	bd08      	pop	{r3, pc}
   d767c:	0003024c 	.word	0x0003024c

000d7680 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d7680:	b508      	push	{r3, lr}
   d7682:	4b02      	ldr	r3, [pc, #8]	; (d768c <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d7684:	681b      	ldr	r3, [r3, #0]
   d7686:	695b      	ldr	r3, [r3, #20]
   d7688:	9301      	str	r3, [sp, #4]
   d768a:	bd08      	pop	{r3, pc}
   d768c:	0003024c 	.word	0x0003024c

000d7690 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d7690:	b508      	push	{r3, lr}
   d7692:	4b02      	ldr	r3, [pc, #8]	; (d769c <HAL_USB_USART_Receive_Data+0xc>)
   d7694:	681b      	ldr	r3, [r3, #0]
   d7696:	699b      	ldr	r3, [r3, #24]
   d7698:	9301      	str	r3, [sp, #4]
   d769a:	bd08      	pop	{r3, pc}
   d769c:	0003024c 	.word	0x0003024c

000d76a0 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d76a0:	b508      	push	{r3, lr}
   d76a2:	4b02      	ldr	r3, [pc, #8]	; (d76ac <HAL_USB_USART_Send_Data+0xc>)
   d76a4:	681b      	ldr	r3, [r3, #0]
   d76a6:	69db      	ldr	r3, [r3, #28]
   d76a8:	9301      	str	r3, [sp, #4]
   d76aa:	bd08      	pop	{r3, pc}
   d76ac:	0003024c 	.word	0x0003024c

000d76b0 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d76b0:	b508      	push	{r3, lr}
   d76b2:	4b02      	ldr	r3, [pc, #8]	; (d76bc <HAL_USB_USART_Flush_Data+0xc>)
   d76b4:	681b      	ldr	r3, [r3, #0]
   d76b6:	6a1b      	ldr	r3, [r3, #32]
   d76b8:	9301      	str	r3, [sp, #4]
   d76ba:	bd08      	pop	{r3, pc}
   d76bc:	0003024c 	.word	0x0003024c

000d76c0 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d76c0:	b508      	push	{r3, lr}
   d76c2:	4b02      	ldr	r3, [pc, #8]	; (d76cc <panic_+0xc>)
   d76c4:	681b      	ldr	r3, [r3, #0]
   d76c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d76c8:	9301      	str	r3, [sp, #4]
   d76ca:	bd08      	pop	{r3, pc}
   d76cc:	00030260 	.word	0x00030260

000d76d0 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d76d0:	b508      	push	{r3, lr}
   d76d2:	4b02      	ldr	r3, [pc, #8]	; (d76dc <log_message+0xc>)
   d76d4:	681b      	ldr	r3, [r3, #0]
   d76d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d76d8:	9301      	str	r3, [sp, #4]
   d76da:	bd08      	pop	{r3, pc}
   d76dc:	00030260 	.word	0x00030260

000d76e0 <log_message_v>:
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   d76e0:	b508      	push	{r3, lr}
   d76e2:	4b02      	ldr	r3, [pc, #8]	; (d76ec <log_message_v+0xc>)
   d76e4:	681b      	ldr	r3, [r3, #0]
   d76e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d76e8:	9301      	str	r3, [sp, #4]
   d76ea:	bd08      	pop	{r3, pc}
   d76ec:	00030260 	.word	0x00030260

000d76f0 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   d76f0:	b508      	push	{r3, lr}
   d76f2:	4b02      	ldr	r3, [pc, #8]	; (d76fc <log_level_name+0xc>)
   d76f4:	681b      	ldr	r3, [r3, #0]
   d76f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d76f8:	9301      	str	r3, [sp, #4]
   d76fa:	bd08      	pop	{r3, pc}
   d76fc:	00030260 	.word	0x00030260

000d7700 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   d7700:	b508      	push	{r3, lr}
   d7702:	4b02      	ldr	r3, [pc, #8]	; (d770c <log_set_callbacks+0xc>)
   d7704:	681b      	ldr	r3, [r3, #0]
   d7706:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   d7708:	9301      	str	r3, [sp, #4]
   d770a:	bd08      	pop	{r3, pc}
   d770c:	00030260 	.word	0x00030260

000d7710 <diag_get_source>:
DYNALIB_FN(34, services, led_update_enabled, int(void*))
DYNALIB_FN(35, services, led_update, void(system_tick_t, LEDStatusData*, void*))

DYNALIB_FN(36, services, diag_register_source, int(const diag_source*, void*))
DYNALIB_FN(37, services, diag_enum_sources, int(diag_enum_sources_callback, size_t*, void*, void*))
DYNALIB_FN(38, services, diag_get_source, int(uint16_t, const diag_source**, void*))
   d7710:	b508      	push	{r3, lr}
   d7712:	4b03      	ldr	r3, [pc, #12]	; (d7720 <diag_get_source+0x10>)
   d7714:	681b      	ldr	r3, [r3, #0]
   d7716:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   d771a:	9301      	str	r3, [sp, #4]
   d771c:	bd08      	pop	{r3, pc}
   d771e:	0000      	.short	0x0000
   d7720:	00030260 	.word	0x00030260

000d7724 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d7724:	b508      	push	{r3, lr}
   d7726:	4b02      	ldr	r3, [pc, #8]	; (d7730 <system_mode+0xc>)
   d7728:	681b      	ldr	r3, [r3, #0]
   d772a:	681b      	ldr	r3, [r3, #0]
   d772c:	9301      	str	r3, [sp, #4]
   d772e:	bd08      	pop	{r3, pc}
   d7730:	00030220 	.word	0x00030220

000d7734 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d7734:	b508      	push	{r3, lr}
   d7736:	4b02      	ldr	r3, [pc, #8]	; (d7740 <set_system_mode+0xc>)
   d7738:	681b      	ldr	r3, [r3, #0]
   d773a:	685b      	ldr	r3, [r3, #4]
   d773c:	9301      	str	r3, [sp, #4]
   d773e:	bd08      	pop	{r3, pc}
   d7740:	00030220 	.word	0x00030220

000d7744 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d7744:	b508      	push	{r3, lr}
   d7746:	4b02      	ldr	r3, [pc, #8]	; (d7750 <system_delay_ms+0xc>)
   d7748:	681b      	ldr	r3, [r3, #0]
   d774a:	695b      	ldr	r3, [r3, #20]
   d774c:	9301      	str	r3, [sp, #4]
   d774e:	bd08      	pop	{r3, pc}
   d7750:	00030220 	.word	0x00030220

000d7754 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d7754:	b508      	push	{r3, lr}
   d7756:	4b02      	ldr	r3, [pc, #8]	; (d7760 <system_thread_set_state+0xc>)
   d7758:	681b      	ldr	r3, [r3, #0]
   d775a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d775c:	9301      	str	r3, [sp, #4]
   d775e:	bd08      	pop	{r3, pc}
   d7760:	00030220 	.word	0x00030220

000d7764 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d7764:	b508      	push	{r3, lr}
   d7766:	4b02      	ldr	r3, [pc, #8]	; (d7770 <application_thread_current+0xc>)
   d7768:	681b      	ldr	r3, [r3, #0]
   d776a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d776c:	9301      	str	r3, [sp, #4]
   d776e:	bd08      	pop	{r3, pc}
   d7770:	00030220 	.word	0x00030220

000d7774 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d7774:	b508      	push	{r3, lr}
   d7776:	4b02      	ldr	r3, [pc, #8]	; (d7780 <application_thread_invoke+0xc>)
   d7778:	681b      	ldr	r3, [r3, #0]
   d777a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d777c:	9301      	str	r3, [sp, #4]
   d777e:	bd08      	pop	{r3, pc}
   d7780:	00030220 	.word	0x00030220

000d7784 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d7784:	b508      	push	{r3, lr}
   d7786:	4b02      	ldr	r3, [pc, #8]	; (d7790 <system_thread_get_state+0xc>)
   d7788:	681b      	ldr	r3, [r3, #0]
   d778a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d778c:	9301      	str	r3, [sp, #4]
   d778e:	bd08      	pop	{r3, pc}
   d7790:	00030220 	.word	0x00030220

000d7794 <system_notify_time_changed>:
DYNALIB_FN(23, system, system_notify_time_changed, void(uint32_t, void*, void*))
   d7794:	b508      	push	{r3, lr}
   d7796:	4b02      	ldr	r3, [pc, #8]	; (d77a0 <system_notify_time_changed+0xc>)
   d7798:	681b      	ldr	r3, [r3, #0]
   d779a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   d779c:	9301      	str	r3, [sp, #4]
   d779e:	bd08      	pop	{r3, pc}
   d77a0:	00030220 	.word	0x00030220

000d77a4 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d77a4:	b508      	push	{r3, lr}
   d77a6:	4b03      	ldr	r3, [pc, #12]	; (d77b4 <system_ctrl_set_app_request_handler+0x10>)
   d77a8:	681b      	ldr	r3, [r3, #0]
   d77aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d77ae:	9301      	str	r3, [sp, #4]
   d77b0:	bd08      	pop	{r3, pc}
   d77b2:	0000      	.short	0x0000
   d77b4:	00030220 	.word	0x00030220

000d77b8 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d77b8:	b508      	push	{r3, lr}
   d77ba:	4b03      	ldr	r3, [pc, #12]	; (d77c8 <system_ctrl_set_result+0x10>)
   d77bc:	681b      	ldr	r3, [r3, #0]
   d77be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d77c2:	9301      	str	r3, [sp, #4]
   d77c4:	bd08      	pop	{r3, pc}
   d77c6:	0000      	.short	0x0000
   d77c8:	00030220 	.word	0x00030220

000d77cc <system_power_management_set_config>:
DYNALIB_FN(BASE_IDX + 14, system, system_pool_free, void(void*, void*))
DYNALIB_FN(BASE_IDX + 15, system, system_sleep_pins, int(const uint16_t*, size_t, const InterruptMode*, size_t, long, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 16, system, system_invoke_event_handler, int(uint16_t handlerInfoSize, FilteringEventHandler* handlerInfo, const char* event_name, const char* event_data, void* reserved))

#if HAL_PLATFORM_POWER_MANAGEMENT
DYNALIB_FN(BASE_IDX + 17, system, system_power_management_set_config, int(const hal_power_config*, void*))
   d77cc:	b508      	push	{r3, lr}
   d77ce:	4b03      	ldr	r3, [pc, #12]	; (d77dc <system_power_management_set_config+0x10>)
   d77d0:	681b      	ldr	r3, [r3, #0]
   d77d2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   d77d6:	9301      	str	r3, [sp, #4]
   d77d8:	bd08      	pop	{r3, pc}
   d77da:	0000      	.short	0x0000
   d77dc:	00030220 	.word	0x00030220

000d77e0 <system_sleep_ext>:
#define BASE_IDX1 (BASE_IDX + 18)
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
   d77e0:	b508      	push	{r3, lr}
   d77e2:	4b03      	ldr	r3, [pc, #12]	; (d77f0 <system_sleep_ext+0x10>)
   d77e4:	681b      	ldr	r3, [r3, #0]
   d77e6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
   d77ea:	9301      	str	r3, [sp, #4]
   d77ec:	bd08      	pop	{r3, pc}
   d77ee:	0000      	.short	0x0000
   d77f0:	00030220 	.word	0x00030220

000d77f4 <spark_function>:


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   d77f4:	b508      	push	{r3, lr}
   d77f6:	4b02      	ldr	r3, [pc, #8]	; (d7800 <spark_function+0xc>)
   d77f8:	681b      	ldr	r3, [r3, #0]
   d77fa:	685b      	ldr	r3, [r3, #4]
   d77fc:	9301      	str	r3, [sp, #4]
   d77fe:	bd08      	pop	{r3, pc}
   d7800:	00030244 	.word	0x00030244

000d7804 <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d7804:	b508      	push	{r3, lr}
   d7806:	4b02      	ldr	r3, [pc, #8]	; (d7810 <spark_process+0xc>)
   d7808:	681b      	ldr	r3, [r3, #0]
   d780a:	689b      	ldr	r3, [r3, #8]
   d780c:	9301      	str	r3, [sp, #4]
   d780e:	bd08      	pop	{r3, pc}
   d7810:	00030244 	.word	0x00030244

000d7814 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   d7814:	b508      	push	{r3, lr}
   d7816:	4b02      	ldr	r3, [pc, #8]	; (d7820 <spark_cloud_flag_connect+0xc>)
   d7818:	681b      	ldr	r3, [r3, #0]
   d781a:	68db      	ldr	r3, [r3, #12]
   d781c:	9301      	str	r3, [sp, #4]
   d781e:	bd08      	pop	{r3, pc}
   d7820:	00030244 	.word	0x00030244

000d7824 <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d7824:	b508      	push	{r3, lr}
   d7826:	4b02      	ldr	r3, [pc, #8]	; (d7830 <spark_cloud_flag_connected+0xc>)
   d7828:	681b      	ldr	r3, [r3, #0]
   d782a:	695b      	ldr	r3, [r3, #20]
   d782c:	9301      	str	r3, [sp, #4]
   d782e:	bd08      	pop	{r3, pc}
   d7830:	00030244 	.word	0x00030244

000d7834 <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   d7834:	b508      	push	{r3, lr}
   d7836:	4b02      	ldr	r3, [pc, #8]	; (d7840 <spark_deviceID+0xc>)
   d7838:	681b      	ldr	r3, [r3, #0]
   d783a:	69db      	ldr	r3, [r3, #28]
   d783c:	9301      	str	r3, [sp, #4]
   d783e:	bd08      	pop	{r3, pc}
   d7840:	00030244 	.word	0x00030244

000d7844 <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d7844:	b508      	push	{r3, lr}
   d7846:	4b02      	ldr	r3, [pc, #8]	; (d7850 <spark_send_event+0xc>)
   d7848:	681b      	ldr	r3, [r3, #0]
   d784a:	6a1b      	ldr	r3, [r3, #32]
   d784c:	9301      	str	r3, [sp, #4]
   d784e:	bd08      	pop	{r3, pc}
   d7850:	00030244 	.word	0x00030244

000d7854 <spark_sync_time_pending>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d7854:	b508      	push	{r3, lr}
   d7856:	4b02      	ldr	r3, [pc, #8]	; (d7860 <spark_sync_time_pending+0xc>)
   d7858:	681b      	ldr	r3, [r3, #0]
   d785a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d785c:	9301      	str	r3, [sp, #4]
   d785e:	bd08      	pop	{r3, pc}
   d7860:	00030244 	.word	0x00030244

000d7864 <spark_sync_time_last>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
   d7864:	b508      	push	{r3, lr}
   d7866:	4b02      	ldr	r3, [pc, #8]	; (d7870 <spark_sync_time_last+0xc>)
   d7868:	681b      	ldr	r3, [r3, #0]
   d786a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d786c:	9301      	str	r3, [sp, #4]
   d786e:	bd08      	pop	{r3, pc}
   d7870:	00030244 	.word	0x00030244

000d7874 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d7874:	b508      	push	{r3, lr}
   d7876:	4b02      	ldr	r3, [pc, #8]	; (d7880 <spark_set_random_seed_from_cloud_handler+0xc>)
   d7878:	681b      	ldr	r3, [r3, #0]
   d787a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d787c:	9301      	str	r3, [sp, #4]
   d787e:	bd08      	pop	{r3, pc}
   d7880:	00030244 	.word	0x00030244

000d7884 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d7884:	b508      	push	{r3, lr}
   d7886:	4b02      	ldr	r3, [pc, #8]	; (d7890 <network_connect+0xc>)
   d7888:	681b      	ldr	r3, [r3, #0]
   d788a:	685b      	ldr	r3, [r3, #4]
   d788c:	9301      	str	r3, [sp, #4]
   d788e:	bd08      	pop	{r3, pc}
   d7890:	00030240 	.word	0x00030240

000d7894 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d7894:	b508      	push	{r3, lr}
   d7896:	4b02      	ldr	r3, [pc, #8]	; (d78a0 <network_connecting+0xc>)
   d7898:	681b      	ldr	r3, [r3, #0]
   d789a:	689b      	ldr	r3, [r3, #8]
   d789c:	9301      	str	r3, [sp, #4]
   d789e:	bd08      	pop	{r3, pc}
   d78a0:	00030240 	.word	0x00030240

000d78a4 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d78a4:	b508      	push	{r3, lr}
   d78a6:	4b02      	ldr	r3, [pc, #8]	; (d78b0 <network_disconnect+0xc>)
   d78a8:	681b      	ldr	r3, [r3, #0]
   d78aa:	68db      	ldr	r3, [r3, #12]
   d78ac:	9301      	str	r3, [sp, #4]
   d78ae:	bd08      	pop	{r3, pc}
   d78b0:	00030240 	.word	0x00030240

000d78b4 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d78b4:	b508      	push	{r3, lr}
   d78b6:	4b02      	ldr	r3, [pc, #8]	; (d78c0 <network_ready+0xc>)
   d78b8:	681b      	ldr	r3, [r3, #0]
   d78ba:	691b      	ldr	r3, [r3, #16]
   d78bc:	9301      	str	r3, [sp, #4]
   d78be:	bd08      	pop	{r3, pc}
   d78c0:	00030240 	.word	0x00030240

000d78c4 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d78c4:	b508      	push	{r3, lr}
   d78c6:	4b02      	ldr	r3, [pc, #8]	; (d78d0 <network_on+0xc>)
   d78c8:	681b      	ldr	r3, [r3, #0]
   d78ca:	695b      	ldr	r3, [r3, #20]
   d78cc:	9301      	str	r3, [sp, #4]
   d78ce:	bd08      	pop	{r3, pc}
   d78d0:	00030240 	.word	0x00030240

000d78d4 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d78d4:	b508      	push	{r3, lr}
   d78d6:	4b02      	ldr	r3, [pc, #8]	; (d78e0 <network_off+0xc>)
   d78d8:	681b      	ldr	r3, [r3, #0]
   d78da:	699b      	ldr	r3, [r3, #24]
   d78dc:	9301      	str	r3, [sp, #4]
   d78de:	bd08      	pop	{r3, pc}
   d78e0:	00030240 	.word	0x00030240

000d78e4 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d78e4:	b508      	push	{r3, lr}
   d78e6:	4b02      	ldr	r3, [pc, #8]	; (d78f0 <network_listen+0xc>)
   d78e8:	681b      	ldr	r3, [r3, #0]
   d78ea:	69db      	ldr	r3, [r3, #28]
   d78ec:	9301      	str	r3, [sp, #4]
   d78ee:	bd08      	pop	{r3, pc}
   d78f0:	00030240 	.word	0x00030240

000d78f4 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d78f4:	b508      	push	{r3, lr}
   d78f6:	4b02      	ldr	r3, [pc, #8]	; (d7900 <network_listening+0xc>)
   d78f8:	681b      	ldr	r3, [r3, #0]
   d78fa:	6a1b      	ldr	r3, [r3, #32]
   d78fc:	9301      	str	r3, [sp, #4]
   d78fe:	bd08      	pop	{r3, pc}
   d7900:	00030240 	.word	0x00030240

000d7904 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d7904:	b508      	push	{r3, lr}
   d7906:	4b02      	ldr	r3, [pc, #8]	; (d7910 <network_set_listen_timeout+0xc>)
   d7908:	681b      	ldr	r3, [r3, #0]
   d790a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d790c:	9301      	str	r3, [sp, #4]
   d790e:	bd08      	pop	{r3, pc}
   d7910:	00030240 	.word	0x00030240

000d7914 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d7914:	b508      	push	{r3, lr}
   d7916:	4b02      	ldr	r3, [pc, #8]	; (d7920 <network_get_listen_timeout+0xc>)
   d7918:	681b      	ldr	r3, [r3, #0]
   d791a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d791c:	9301      	str	r3, [sp, #4]
   d791e:	bd08      	pop	{r3, pc}
   d7920:	00030240 	.word	0x00030240

000d7924 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   d7924:	b508      	push	{r3, lr}
   d7926:	4b02      	ldr	r3, [pc, #8]	; (d7930 <network_is_on+0xc>)
   d7928:	681b      	ldr	r3, [r3, #0]
   d792a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d792c:	9301      	str	r3, [sp, #4]
   d792e:	bd08      	pop	{r3, pc}
   d7930:	00030240 	.word	0x00030240

000d7934 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   d7934:	b508      	push	{r3, lr}
   d7936:	4b02      	ldr	r3, [pc, #8]	; (d7940 <network_is_off+0xc>)
   d7938:	681b      	ldr	r3, [r3, #0]
   d793a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d793c:	9301      	str	r3, [sp, #4]
   d793e:	bd08      	pop	{r3, pc}
   d7940:	00030240 	.word	0x00030240

000d7944 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d7944:	b508      	push	{r3, lr}
   d7946:	4b02      	ldr	r3, [pc, #8]	; (d7950 <malloc+0xc>)
   d7948:	681b      	ldr	r3, [r3, #0]
   d794a:	681b      	ldr	r3, [r3, #0]
   d794c:	9301      	str	r3, [sp, #4]
   d794e:	bd08      	pop	{r3, pc}
   d7950:	0003021c 	.word	0x0003021c

000d7954 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d7954:	b508      	push	{r3, lr}
   d7956:	4b02      	ldr	r3, [pc, #8]	; (d7960 <free+0xc>)
   d7958:	681b      	ldr	r3, [r3, #0]
   d795a:	685b      	ldr	r3, [r3, #4]
   d795c:	9301      	str	r3, [sp, #4]
   d795e:	bd08      	pop	{r3, pc}
   d7960:	0003021c 	.word	0x0003021c

000d7964 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d7964:	b508      	push	{r3, lr}
   d7966:	4b02      	ldr	r3, [pc, #8]	; (d7970 <realloc+0xc>)
   d7968:	681b      	ldr	r3, [r3, #0]
   d796a:	689b      	ldr	r3, [r3, #8]
   d796c:	9301      	str	r3, [sp, #4]
   d796e:	bd08      	pop	{r3, pc}
   d7970:	0003021c 	.word	0x0003021c

000d7974 <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
   d7974:	b508      	push	{r3, lr}
   d7976:	4b02      	ldr	r3, [pc, #8]	; (d7980 <sprintf+0xc>)
   d7978:	681b      	ldr	r3, [r3, #0]
   d797a:	68db      	ldr	r3, [r3, #12]
   d797c:	9301      	str	r3, [sp, #4]
   d797e:	bd08      	pop	{r3, pc}
   d7980:	0003021c 	.word	0x0003021c

000d7984 <siprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   d7984:	b508      	push	{r3, lr}
   d7986:	4b02      	ldr	r3, [pc, #8]	; (d7990 <siprintf+0xc>)
   d7988:	681b      	ldr	r3, [r3, #0]
   d798a:	691b      	ldr	r3, [r3, #16]
   d798c:	9301      	str	r3, [sp, #4]
   d798e:	bd08      	pop	{r3, pc}
   d7990:	0003021c 	.word	0x0003021c

000d7994 <snprintf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   d7994:	b508      	push	{r3, lr}
   d7996:	4b02      	ldr	r3, [pc, #8]	; (d79a0 <snprintf+0xc>)
   d7998:	681b      	ldr	r3, [r3, #0]
   d799a:	69db      	ldr	r3, [r3, #28]
   d799c:	9301      	str	r3, [sp, #4]
   d799e:	bd08      	pop	{r3, pc}
   d79a0:	0003021c 	.word	0x0003021c

000d79a4 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d79a4:	b508      	push	{r3, lr}
   d79a6:	4b02      	ldr	r3, [pc, #8]	; (d79b0 <vsnprintf+0xc>)
   d79a8:	681b      	ldr	r3, [r3, #0]
   d79aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d79ac:	9301      	str	r3, [sp, #4]
   d79ae:	bd08      	pop	{r3, pc}
   d79b0:	0003021c 	.word	0x0003021c

000d79b4 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d79b4:	b508      	push	{r3, lr}
   d79b6:	4b02      	ldr	r3, [pc, #8]	; (d79c0 <abort+0xc>)
   d79b8:	681b      	ldr	r3, [r3, #0]
   d79ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d79bc:	9301      	str	r3, [sp, #4]
   d79be:	bd08      	pop	{r3, pc}
   d79c0:	0003021c 	.word	0x0003021c

000d79c4 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d79c4:	b508      	push	{r3, lr}
   d79c6:	4b02      	ldr	r3, [pc, #8]	; (d79d0 <_malloc_r+0xc>)
   d79c8:	681b      	ldr	r3, [r3, #0]
   d79ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d79cc:	9301      	str	r3, [sp, #4]
   d79ce:	bd08      	pop	{r3, pc}
   d79d0:	0003021c 	.word	0x0003021c

000d79d4 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d79d4:	b508      	push	{r3, lr}
   d79d6:	4b02      	ldr	r3, [pc, #8]	; (d79e0 <__errno+0xc>)
   d79d8:	681b      	ldr	r3, [r3, #0]
   d79da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d79dc:	9301      	str	r3, [sp, #4]
   d79de:	bd08      	pop	{r3, pc}
   d79e0:	0003021c 	.word	0x0003021c

000d79e4 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d79e4:	b508      	push	{r3, lr}
   d79e6:	4b02      	ldr	r3, [pc, #8]	; (d79f0 <newlib_impure_ptr_callback+0xc>)
   d79e8:	681b      	ldr	r3, [r3, #0]
   d79ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d79ec:	9301      	str	r3, [sp, #4]
   d79ee:	bd08      	pop	{r3, pc}
   d79f0:	0003021c 	.word	0x0003021c

000d79f4 <strftime>:
// Electron has some of these exported from a different system part through services2 dynalib
// Photon/P1 do not have enough space in system-part2
#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
   d79f4:	b508      	push	{r3, lr}
   d79f6:	4b02      	ldr	r3, [pc, #8]	; (d7a00 <strftime+0xc>)
   d79f8:	681b      	ldr	r3, [r3, #0]
   d79fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d79fc:	9301      	str	r3, [sp, #4]
   d79fe:	bd08      	pop	{r3, pc}
   d7a00:	0003021c 	.word	0x0003021c

000d7a04 <localtime_r>:
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   d7a04:	b508      	push	{r3, lr}
   d7a06:	4b02      	ldr	r3, [pc, #8]	; (d7a10 <localtime_r+0xc>)
   d7a08:	681b      	ldr	r3, [r3, #0]
   d7a0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d7a0c:	9301      	str	r3, [sp, #4]
   d7a0e:	bd08      	pop	{r3, pc}
   d7a10:	0003021c 	.word	0x0003021c

000d7a14 <gmtime_r>:
DYNALIB_FN(20, rt, gmtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   d7a14:	b508      	push	{r3, lr}
   d7a16:	4b02      	ldr	r3, [pc, #8]	; (d7a20 <gmtime_r+0xc>)
   d7a18:	681b      	ldr	r3, [r3, #0]
   d7a1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d7a1c:	9301      	str	r3, [sp, #4]
   d7a1e:	bd08      	pop	{r3, pc}
   d7a20:	0003021c 	.word	0x0003021c

000d7a24 <mktime>:
DYNALIB_FN(21, rt, mktime, time_t(struct tm*))
   d7a24:	b508      	push	{r3, lr}
   d7a26:	4b02      	ldr	r3, [pc, #8]	; (d7a30 <mktime+0xc>)
   d7a28:	681b      	ldr	r3, [r3, #0]
   d7a2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d7a2c:	9301      	str	r3, [sp, #4]
   d7a2e:	bd08      	pop	{r3, pc}
   d7a30:	0003021c 	.word	0x0003021c

000d7a34 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d7a34:	2100      	movs	r1, #0
   d7a36:	f7ff be85 	b.w	d7744 <system_delay_ms>

000d7a3a <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d7a3a:	b510      	push	{r4, lr}
      if (_M_empty())
   d7a3c:	6883      	ldr	r3, [r0, #8]
   d7a3e:	4604      	mov	r4, r0
   d7a40:	b90b      	cbnz	r3, d7a46 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d7a42:	f003 fe6f 	bl	db724 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d7a46:	68c3      	ldr	r3, [r0, #12]
   d7a48:	4798      	blx	r3
      if (_M_manager)
   d7a4a:	68a3      	ldr	r3, [r4, #8]
   d7a4c:	b11b      	cbz	r3, d7a56 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d7a4e:	2203      	movs	r2, #3
   d7a50:	4621      	mov	r1, r4
   d7a52:	4620      	mov	r0, r4
   d7a54:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d7a56:	4620      	mov	r0, r4
   d7a58:	2110      	movs	r1, #16
}
   d7a5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   d7a5e:	f003 bda9 	b.w	db5b4 <_ZdlPvj>

000d7a62 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   d7a62:	680b      	ldr	r3, [r1, #0]
   d7a64:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   d7a66:	b113      	cbz	r3, d7a6e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   d7a68:	685a      	ldr	r2, [r3, #4]
   d7a6a:	3201      	adds	r2, #1
   d7a6c:	605a      	str	r2, [r3, #4]
      }
   d7a6e:	4770      	bx	lr

000d7a70 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d7a70:	4802      	ldr	r0, [pc, #8]	; (d7a7c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   d7a72:	2300      	movs	r3, #0
   d7a74:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   d7a76:	f7ff bc13 	b.w	d72a0 <os_mutex_recursive_create>
   d7a7a:	bf00      	nop
   d7a7c:	2003e5f8 	.word	0x2003e5f8

000d7a80 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d7a80:	2200      	movs	r2, #0
   d7a82:	6840      	ldr	r0, [r0, #4]
   d7a84:	4611      	mov	r1, r2
   d7a86:	f7ff bf15 	b.w	d78b4 <network_ready>

000d7a8a <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   d7a8a:	2200      	movs	r2, #0
   d7a8c:	6840      	ldr	r0, [r0, #4]
   d7a8e:	4611      	mov	r1, r2
   d7a90:	f7ff bf30 	b.w	d78f4 <network_listening>

000d7a94 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d7a94:	2200      	movs	r2, #0
   d7a96:	6840      	ldr	r0, [r0, #4]
   d7a98:	4611      	mov	r1, r2
   d7a9a:	f7ff bf3b 	b.w	d7914 <network_get_listen_timeout>

000d7a9e <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d7a9e:	6840      	ldr	r0, [r0, #4]
   d7aa0:	2200      	movs	r2, #0
   d7aa2:	f7ff bf2f 	b.w	d7904 <network_set_listen_timeout>

000d7aa6 <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d7aa6:	6840      	ldr	r0, [r0, #4]
   d7aa8:	2200      	movs	r2, #0
   d7aaa:	f081 0101 	eor.w	r1, r1, #1
   d7aae:	f7ff bf19 	b.w	d78e4 <network_listen>

000d7ab2 <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d7ab2:	2300      	movs	r3, #0
   d7ab4:	6840      	ldr	r0, [r0, #4]
   d7ab6:	461a      	mov	r2, r3
   d7ab8:	4619      	mov	r1, r3
   d7aba:	f7ff bf0b 	b.w	d78d4 <network_off>

000d7abe <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d7abe:	2300      	movs	r3, #0
   d7ac0:	6840      	ldr	r0, [r0, #4]
   d7ac2:	461a      	mov	r2, r3
   d7ac4:	4619      	mov	r1, r3
   d7ac6:	f7ff befd 	b.w	d78c4 <network_on>

000d7aca <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d7aca:	2200      	movs	r2, #0
   d7acc:	6840      	ldr	r0, [r0, #4]
   d7ace:	4611      	mov	r1, r2
   d7ad0:	f7ff bee0 	b.w	d7894 <network_connecting>

000d7ad4 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d7ad4:	6840      	ldr	r0, [r0, #4]
   d7ad6:	2200      	movs	r2, #0
   d7ad8:	2102      	movs	r1, #2
   d7ada:	f7ff bee3 	b.w	d78a4 <network_disconnect>

000d7ade <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d7ade:	2300      	movs	r3, #0
   d7ae0:	6840      	ldr	r0, [r0, #4]
   d7ae2:	461a      	mov	r2, r3
   d7ae4:	f7ff bece 	b.w	d7884 <network_connect>

000d7ae8 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d7ae8:	4b08      	ldr	r3, [pc, #32]	; (d7b0c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d7aea:	b510      	push	{r4, lr}
   d7aec:	2428      	movs	r4, #40	; 0x28
   d7aee:	4622      	mov	r2, r4
   d7af0:	4618      	mov	r0, r3
   d7af2:	2100      	movs	r1, #0
   d7af4:	f004 fe2a 	bl	dc74c <memset>
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d7af8:	4b05      	ldr	r3, [pc, #20]	; (d7b10 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   d7afa:	8004      	strh	r4, [r0, #0]
        cid = -1;
   d7afc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d7b00:	6042      	str	r2, [r0, #4]
   d7b02:	2204      	movs	r2, #4
   d7b04:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d7b06:	4a03      	ldr	r2, [pc, #12]	; (d7b14 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d7b08:	601a      	str	r2, [r3, #0]
   d7b0a:	bd10      	pop	{r4, pc}
   d7b0c:	2003e604 	.word	0x2003e604
   d7b10:	2003e5fc 	.word	0x2003e5fc
   d7b14:	000df0c8 	.word	0x000df0c8

000d7b18 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d7b18:	4770      	bx	lr

000d7b1a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   d7b1a:	2000      	movs	r0, #0
   d7b1c:	4770      	bx	lr

000d7b1e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d7b1e:	b510      	push	{r4, lr}
   d7b20:	2110      	movs	r1, #16
   d7b22:	4604      	mov	r4, r0
   d7b24:	f003 fd46 	bl	db5b4 <_ZdlPvj>
   d7b28:	4620      	mov	r0, r4
   d7b2a:	bd10      	pop	{r4, pc}

000d7b2c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   d7b2c:	b508      	push	{r3, lr}
      { delete this; }
   d7b2e:	f7ff fff6 	bl	d7b1e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d7b32:	bd08      	pop	{r3, pc}

000d7b34 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d7b34:	b530      	push	{r4, r5, lr}
        type_(type) {
   d7b36:	2200      	movs	r2, #0
   d7b38:	f64f 749c 	movw	r4, #65436	; 0xff9c
   d7b3c:	6002      	str	r2, [r0, #0]
   d7b3e:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   d7b40:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d7b42:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   d7b44:	680c      	ldr	r4, [r1, #0]
   d7b46:	8085      	strh	r5, [r0, #4]
   d7b48:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d7b4a:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   d7b4c:	bd30      	pop	{r4, r5, pc}

000d7b4e <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d7b4e:	b510      	push	{r4, lr}
   d7b50:	4604      	mov	r4, r0
    free((void*)msg_);
   d7b52:	6800      	ldr	r0, [r0, #0]
   d7b54:	f7ff fefe 	bl	d7954 <free>
}
   d7b58:	4620      	mov	r0, r4
   d7b5a:	bd10      	pop	{r4, pc}

000d7b5c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d7b5c:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d7b5e:	68c4      	ldr	r4, [r0, #12]
   d7b60:	b1f4      	cbz	r4, d7ba0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
   d7b62:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d7b64:	2b02      	cmp	r3, #2
   d7b66:	d103      	bne.n	d7b70 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d7b68:	f104 000c 	add.w	r0, r4, #12
   d7b6c:	f7ff ffef 	bl	d7b4e <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   d7b70:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   d7b72:	b135      	cbz	r5, d7b82 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   d7b74:	4628      	mov	r0, r5
   d7b76:	f7fd fa7b 	bl	d5070 <_ZNSt14_Function_baseD1Ev>
   d7b7a:	2110      	movs	r1, #16
   d7b7c:	4628      	mov	r0, r5
   d7b7e:	f003 fd19 	bl	db5b4 <_ZdlPvj>
   d7b82:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d7b84:	b135      	cbz	r5, d7b94 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d7b86:	4628      	mov	r0, r5
   d7b88:	f7fd fa72 	bl	d5070 <_ZNSt14_Function_baseD1Ev>
   d7b8c:	2110      	movs	r1, #16
   d7b8e:	4628      	mov	r0, r5
   d7b90:	f003 fd10 	bl	db5b4 <_ZdlPvj>
   d7b94:	4620      	mov	r0, r4
   d7b96:	2114      	movs	r1, #20
   d7b98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d7b9c:	f003 bd0a 	b.w	db5b4 <_ZdlPvj>
   d7ba0:	bd38      	pop	{r3, r4, r5, pc}

000d7ba2 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
    }
    return CloudDisconnectOptions(options->flags, options->timeout, options->graceful, clearSession);
}

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
   d7ba2:	b510      	push	{r4, lr}
   d7ba4:	b088      	sub	sp, #32
   d7ba6:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d7ba8:	4668      	mov	r0, sp
   d7baa:	f002 f908 	bl	d9dbe <_ZN6StringC1EPKc>
    return (*fn)(p);
   d7bae:	4669      	mov	r1, sp
   d7bb0:	a804      	add	r0, sp, #16
   d7bb2:	f002 f94f 	bl	d9e54 <_ZN6StringC1ERKS_>
   d7bb6:	a804      	add	r0, sp, #16
   d7bb8:	47a0      	blx	r4
   d7bba:	4604      	mov	r4, r0
   d7bbc:	a804      	add	r0, sp, #16
   d7bbe:	f002 f8b3 	bl	d9d28 <_ZN6StringD1Ev>
    String p(param);
   d7bc2:	4668      	mov	r0, sp
   d7bc4:	f002 f8b0 	bl	d9d28 <_ZN6StringD1Ev>
}
   d7bc8:	4620      	mov	r0, r4
   d7bca:	b008      	add	sp, #32
   d7bcc:	bd10      	pop	{r4, pc}

000d7bce <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   d7bce:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
   d7bd0:	2300      	movs	r3, #0
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
   d7bd2:	e9cd 0102 	strd	r0, r1, [sp, #8]
    desc.funcKey = funcKey;
   d7bd6:	9201      	str	r2, [sp, #4]
         size = sizeof(*this);
   d7bd8:	2410      	movs	r4, #16
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d7bda:	461a      	mov	r2, r3
   d7bdc:	4669      	mov	r1, sp
   d7bde:	4618      	mov	r0, r3
         memset(this, 0, sizeof(*this));
   d7be0:	f8ad 3002 	strh.w	r3, [sp, #2]
         size = sizeof(*this);
   d7be4:	f8ad 4000 	strh.w	r4, [sp]
   d7be8:	f7ff fe04 	bl	d77f4 <spark_function>
}
   d7bec:	b004      	add	sp, #16
   d7bee:	bd10      	pop	{r4, pc}

000d7bf0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d7bf0:	b573      	push	{r0, r1, r4, r5, r6, lr}
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r,
		     element_type* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d7bf2:	460e      	mov	r6, r1
   d7bf4:	4604      	mov	r4, r0
   d7bf6:	f856 3b04 	ldr.w	r3, [r6], #4
   d7bfa:	9300      	str	r3, [sp, #0]
   d7bfc:	460d      	mov	r5, r1
   d7bfe:	a801      	add	r0, sp, #4
   d7c00:	4631      	mov	r1, r6
   d7c02:	f7ff ff2e 	bl	d7a62 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d7c06:	9a01      	ldr	r2, [sp, #4]
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d7c08:	9b00      	ldr	r3, [sp, #0]
	_M_pi = __tmp;
   d7c0a:	6062      	str	r2, [r4, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d7c0c:	6023      	str	r3, [r4, #0]
      ~__shared_ptr() = default;
   d7c0e:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   d7c10:	2300      	movs	r3, #0
   d7c12:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d7c14:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   d7c16:	f7fd ffc2 	bl	d5b9e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d7c1a:	4630      	mov	r0, r6
   d7c1c:	f7fd ffbf 	bl	d5b9e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   d7c20:	4628      	mov	r0, r5
   d7c22:	2108      	movs	r1, #8
   d7c24:	f003 fcc6 	bl	db5b4 <_ZdlPvj>
        return p;
    }
   d7c28:	4620      	mov	r0, r4
   d7c2a:	b002      	add	sp, #8
   d7c2c:	bd70      	pop	{r4, r5, r6, pc}

000d7c2e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   d7c2e:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d7c30:	b510      	push	{r4, lr}
      if (_M_empty())
   d7c32:	b90a      	cbnz	r2, d7c38 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d7c34:	f003 fd76 	bl	db724 <_ZSt25__throw_bad_function_callv>
    }
   d7c38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d7c3c:	68c3      	ldr	r3, [r0, #12]
   d7c3e:	4718      	bx	r3

000d7c40 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d7c40:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d7c42:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   d7c44:	f100 0110 	add.w	r1, r0, #16
   d7c48:	f7ff fff1 	bl	d7c2e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   d7c4c:	bd08      	pop	{r3, pc}

000d7c4e <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   d7c4e:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d7c50:	b510      	push	{r4, lr}
      if (_M_empty())
   d7c52:	b90a      	cbnz	r2, d7c58 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d7c54:	f003 fd66 	bl	db724 <_ZSt25__throw_bad_function_callv>
    }
   d7c58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d7c5c:	68c3      	ldr	r3, [r0, #12]
   d7c5e:	4718      	bx	r3

000d7c60 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d7c60:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d7c62:	6800      	ldr	r0, [r0, #0]
   d7c64:	f100 0110 	add.w	r1, r0, #16
   d7c68:	f7ff fff1 	bl	d7c4e <_ZNKSt8functionIFvRKbEEclES1_>
      }
   d7c6c:	bd08      	pop	{r3, pc}
	...

000d7c70 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   d7c70:	b538      	push	{r3, r4, r5, lr}
   d7c72:	2300      	movs	r3, #0
   d7c74:	4604      	mov	r4, r0
   d7c76:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d7c78:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   d7c7a:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d7c7c:	f7fc fa0b 	bl	d4096 <_Znwj>
   d7c80:	b128      	cbz	r0, d7c8e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   d7c82:	2301      	movs	r3, #1
   d7c84:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   d7c88:	4b02      	ldr	r3, [pc, #8]	; (d7c94 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d7c8a:	6003      	str	r3, [r0, #0]
   d7c8c:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d7c8e:	6020      	str	r0, [r4, #0]
	}
   d7c90:	4620      	mov	r0, r4
   d7c92:	bd38      	pop	{r3, r4, r5, pc}
   d7c94:	000df104 	.word	0x000df104

000d7c98 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   d7c98:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d7c9a:	2300      	movs	r3, #0
   d7c9c:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d7c9e:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d7ca0:	4604      	mov	r4, r0
   d7ca2:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d7ca4:	b12b      	cbz	r3, d7cb2 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d7ca6:	2202      	movs	r2, #2
   d7ca8:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d7caa:	68eb      	ldr	r3, [r5, #12]
   d7cac:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d7cae:	68ab      	ldr	r3, [r5, #8]
   d7cb0:	60a3      	str	r3, [r4, #8]
    }
   d7cb2:	4620      	mov	r0, r4
   d7cb4:	bd38      	pop	{r3, r4, r5, pc}
	...

000d7cb8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   d7cb8:	b5f0      	push	{r4, r5, r6, r7, lr}
   d7cba:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d7cbc:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d7cbe:	4668      	mov	r0, sp
   d7cc0:	f7ff ff38 	bl	d7b34 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d7cc4:	f04f 0302 	mov.w	r3, #2
   d7cc8:	e8d4 2f4f 	ldrexb	r2, [r4]
   d7ccc:	2a00      	cmp	r2, #0
   d7cce:	d103      	bne.n	d7cd8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   d7cd0:	e8c4 3f41 	strexb	r1, r3, [r4]
   d7cd4:	2900      	cmp	r1, #0
   d7cd6:	d1f7      	bne.n	d7cc8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   d7cd8:	d125      	bne.n	d7d26 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   d7cda:	f104 050c 	add.w	r5, r4, #12
   d7cde:	4669      	mov	r1, sp
   d7ce0:	4628      	mov	r0, r5
   d7ce2:	f7ff ff27 	bl	d7b34 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   d7ce6:	f3bf 8f5b 	dmb	ish
   d7cea:	2301      	movs	r3, #1
   d7cec:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d7cee:	2000      	movs	r0, #0
   d7cf0:	f104 0308 	add.w	r3, r4, #8
   d7cf4:	f3bf 8f5b 	dmb	ish
   d7cf8:	e853 6f00 	ldrex	r6, [r3]
   d7cfc:	e843 0200 	strex	r2, r0, [r3]
   d7d00:	2a00      	cmp	r2, #0
   d7d02:	d1f9      	bne.n	d7cf8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   d7d04:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d7d08:	b16e      	cbz	r6, d7d26 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   d7d0a:	f7ff fd2b 	bl	d7764 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d7d0e:	b178      	cbz	r0, d7d30 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d7d10:	4629      	mov	r1, r5
   d7d12:	4630      	mov	r0, r6
   d7d14:	f7ff ff8b 	bl	d7c2e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   d7d18:	4630      	mov	r0, r6
   d7d1a:	f7fd f9a9 	bl	d5070 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d7d1e:	2110      	movs	r1, #16
   d7d20:	4630      	mov	r0, r6
   d7d22:	f003 fc47 	bl	db5b4 <_ZdlPvj>
        p_->setError(std::move(error));
   d7d26:	4668      	mov	r0, sp
   d7d28:	f7ff ff11 	bl	d7b4e <_ZN8particle5ErrorD1Ev>
    }
   d7d2c:	b009      	add	sp, #36	; 0x24
   d7d2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  typename __cv_quals<_Bound_args>::type...>;

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d7d30:	4631      	mov	r1, r6
   d7d32:	a802      	add	r0, sp, #8
   d7d34:	f7ff ffb0 	bl	d7c98 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d7d38:	68e0      	ldr	r0, [r4, #12]
   d7d3a:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d7d3e:	b108      	cbz	r0, d7d44 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   d7d40:	f004 fd5a 	bl	dc7f8 <strdup>
        type_(type) {
   d7d44:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d7d46:	2010      	movs	r0, #16
   d7d48:	f8ad 501c 	strh.w	r5, [sp, #28]
   d7d4c:	f7fc f9a3 	bl	d4096 <_Znwj>
   d7d50:	4605      	mov	r5, r0
   d7d52:	b1e8      	cbz	r0, d7d90 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   d7d54:	2700      	movs	r7, #0
   d7d56:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d7d58:	2018      	movs	r0, #24
   d7d5a:	f7fc f99c 	bl	d4096 <_Znwj>
   d7d5e:	4604      	mov	r4, r0
   d7d60:	b188      	cbz	r0, d7d86 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   d7d62:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   d7d64:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d7d66:	a802      	add	r0, sp, #8
   d7d68:	f7fd f98b 	bl	d5082 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7d6c:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d7d6e:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d7d70:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7d72:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d7d74:	9204      	str	r2, [sp, #16]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d7d76:	a906      	add	r1, sp, #24
   d7d78:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d7d7a:	60e3      	str	r3, [r4, #12]
   d7d7c:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   d7d80:	9205      	str	r2, [sp, #20]
   d7d82:	f7ff fed7 	bl	d7b34 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   d7d86:	4b08      	ldr	r3, [pc, #32]	; (d7da8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   d7d88:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d7d8a:	4b08      	ldr	r3, [pc, #32]	; (d7dac <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d7d8c:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d7d8e:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   d7d90:	a806      	add	r0, sp, #24
   d7d92:	f7ff fedc 	bl	d7b4e <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d7d96:	a802      	add	r0, sp, #8
   d7d98:	f7fd f96a 	bl	d5070 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d7d9c:	2200      	movs	r2, #0
   d7d9e:	4629      	mov	r1, r5
   d7da0:	4803      	ldr	r0, [pc, #12]	; (d7db0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   d7da2:	f7ff fce7 	bl	d7774 <application_thread_invoke>
   d7da6:	e7b7      	b.n	d7d18 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   d7da8:	000d7c41 	.word	0x000d7c41
   d7dac:	000d7ed9 	.word	0x000d7ed9
   d7db0:	000d7a3b 	.word	0x000d7a3b

000d7db4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d7db4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d7db8:	b08a      	sub	sp, #40	; 0x28
   d7dba:	4605      	mov	r5, r0
   d7dbc:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
   d7dc0:	460c      	mov	r4, r1
   d7dc2:	4617      	mov	r7, r2
   d7dc4:	4698      	mov	r8, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d7dc6:	f7ff fd2d 	bl	d7824 <spark_cloud_flag_connected>
   d7dca:	ae07      	add	r6, sp, #28
    if (!connected()) {
   d7dcc:	4682      	mov	sl, r0
   d7dce:	bb38      	cbnz	r0, d7e20 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   d7dd0:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d7dd4:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d7dd6:	a905      	add	r1, sp, #20
   d7dd8:	4630      	mov	r0, r6
   d7dda:	f8ad 3018 	strh.w	r3, [sp, #24]
   d7dde:	f7ff fea9 	bl	d7b34 <_ZN8particle5ErrorC1EOS0_>
   d7de2:	2014      	movs	r0, #20
   d7de4:	f7fc f957 	bl	d4096 <_Znwj>
   d7de8:	4604      	mov	r4, r0
   d7dea:	b148      	cbz	r0, d7e00 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d7dec:	2302      	movs	r3, #2
   d7dee:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d7df0:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d7df2:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d7df6:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   d7df8:	4631      	mov	r1, r6
   d7dfa:	300c      	adds	r0, #12
   d7dfc:	f7ff fe9a 	bl	d7b34 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d7e00:	4628      	mov	r0, r5
	: __shared_count(__p)
   d7e02:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d7e04:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   d7e08:	f7ff ff32 	bl	d7c70 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d7e0c:	4630      	mov	r0, r6
   d7e0e:	f7ff fe9e 	bl	d7b4e <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d7e12:	a805      	add	r0, sp, #20
   d7e14:	f7ff fe9b 	bl	d7b4e <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   d7e18:	4628      	mov	r0, r5
   d7e1a:	b00a      	add	sp, #40	; 0x28
   d7e1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d7e20:	230c      	movs	r3, #12
   d7e22:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d7e26:	2014      	movs	r0, #20
   d7e28:	e9cd aa08 	strd	sl, sl, [sp, #32]
   d7e2c:	9307      	str	r3, [sp, #28]
   d7e2e:	f7fc f932 	bl	d4096 <_Znwj>
   d7e32:	4601      	mov	r1, r0
   d7e34:	b128      	cbz	r0, d7e42 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d7e36:	e9c0 aa01 	strd	sl, sl, [r0, #4]
   d7e3a:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d7e3e:	f880 a001 	strb.w	sl, [r0, #1]
   d7e42:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d7e44:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   d7e46:	f7ff ff13 	bl	d7c70 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   d7e4a:	4b22      	ldr	r3, [pc, #136]	; (d7ed4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
   d7e4c:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d7e4e:	2008      	movs	r0, #8
   d7e50:	f7fc f921 	bl	d4096 <_Znwj>
   d7e54:	4682      	mov	sl, r0
   d7e56:	b128      	cbz	r0, d7e64 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d7e58:	9b03      	ldr	r3, [sp, #12]
   d7e5a:	f840 3b04 	str.w	r3, [r0], #4
   d7e5e:	a904      	add	r1, sp, #16
   d7e60:	f7ff fdff 	bl	d7a62 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d7e64:	9600      	str	r6, [sp, #0]
   d7e66:	fa5f f389 	uxtb.w	r3, r9
   d7e6a:	4642      	mov	r2, r8
   d7e6c:	4639      	mov	r1, r7
   d7e6e:	4620      	mov	r0, r4
    d.handler_data = p.dataPtr();
   d7e70:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d7e74:	f7ff fce6 	bl	d7844 <spark_send_event>
   d7e78:	b9b8      	cbnz	r0, d7eaa <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
   d7e7a:	9b03      	ldr	r3, [sp, #12]
   d7e7c:	785b      	ldrb	r3, [r3, #1]
   d7e7e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d7e82:	b993      	cbnz	r3, d7eaa <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
   d7e84:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   d7e88:	a905      	add	r1, sp, #20
   d7e8a:	a803      	add	r0, sp, #12
   d7e8c:	9205      	str	r2, [sp, #20]
   d7e8e:	f8ad 3018 	strh.w	r3, [sp, #24]
   d7e92:	f7ff ff11 	bl	d7cb8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d7e96:	a805      	add	r0, sp, #20
   d7e98:	f7ff fe59 	bl	d7b4e <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d7e9c:	a805      	add	r0, sp, #20
   d7e9e:	9909      	ldr	r1, [sp, #36]	; 0x24
   d7ea0:	f7ff fea6 	bl	d7bf0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   d7ea4:	a806      	add	r0, sp, #24
   d7ea6:	f7fd fe7a 	bl	d5b9e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d7eaa:	9b03      	ldr	r3, [sp, #12]
   d7eac:	9305      	str	r3, [sp, #20]
   d7eae:	a904      	add	r1, sp, #16
   d7eb0:	a806      	add	r0, sp, #24
   d7eb2:	f7ff fdd6 	bl	d7a62 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   d7eb6:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d7eb8:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d7eba:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   d7ebc:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   d7ebe:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   d7ec0:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   d7ec2:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   d7ec4:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   d7ec6:	f7fd fe6a 	bl	d5b9e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d7eca:	a804      	add	r0, sp, #16
   d7ecc:	f7fd fe67 	bl	d5b9e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   d7ed0:	e7a2      	b.n	d7e18 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   d7ed2:	bf00      	nop
   d7ed4:	000d7f9d 	.word	0x000d7f9d

000d7ed8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
   d7ed8:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d7eda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7edc:	4605      	mov	r5, r0
	  switch (__op)
   d7ede:	d007      	beq.n	d7ef0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
   d7ee0:	2a03      	cmp	r2, #3
   d7ee2:	d018      	beq.n	d7f16 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
   d7ee4:	2a01      	cmp	r2, #1
   d7ee6:	d101      	bne.n	d7eec <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d7ee8:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d7eea:	6003      	str	r3, [r0, #0]
	}
   d7eec:	2000      	movs	r0, #0
   d7eee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d7ef0:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   d7ef2:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d7ef4:	f7fc f8cf 	bl	d4096 <_Znwj>
   d7ef8:	4604      	mov	r4, r0
   d7efa:	b150      	cbz	r0, d7f12 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d7efc:	4631      	mov	r1, r6
   d7efe:	f7ff fecb 	bl	d7c98 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d7f02:	6930      	ldr	r0, [r6, #16]
   d7f04:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d7f08:	b108      	cbz	r0, d7f0e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   d7f0a:	f004 fc75 	bl	dc7f8 <strdup>
        type_(type) {
   d7f0e:	6120      	str	r0, [r4, #16]
   d7f10:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   d7f12:	602c      	str	r4, [r5, #0]
	}
   d7f14:	e7ea      	b.n	d7eec <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d7f16:	6804      	ldr	r4, [r0, #0]
   d7f18:	2c00      	cmp	r4, #0
   d7f1a:	d0e7      	beq.n	d7eec <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
   d7f1c:	f104 0010 	add.w	r0, r4, #16
   d7f20:	f7ff fe15 	bl	d7b4e <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d7f24:	4620      	mov	r0, r4
   d7f26:	f7fd f8a3 	bl	d5070 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d7f2a:	2118      	movs	r1, #24
   d7f2c:	4620      	mov	r0, r4
   d7f2e:	f003 fb41 	bl	db5b4 <_ZdlPvj>
   d7f32:	e7db      	b.n	d7eec <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

000d7f34 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   d7f34:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d7f36:	2300      	movs	r3, #0
   d7f38:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d7f3a:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d7f3c:	4604      	mov	r4, r0
   d7f3e:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d7f40:	b12b      	cbz	r3, d7f4e <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d7f42:	2202      	movs	r2, #2
   d7f44:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d7f46:	68eb      	ldr	r3, [r5, #12]
   d7f48:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d7f4a:	68ab      	ldr	r3, [r5, #8]
   d7f4c:	60a3      	str	r3, [r4, #8]
    }
   d7f4e:	4620      	mov	r0, r4
   d7f50:	bd38      	pop	{r3, r4, r5, pc}

000d7f52 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
   d7f52:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d7f54:	b570      	push	{r4, r5, r6, lr}
   d7f56:	4604      	mov	r4, r0
	  switch (__op)
   d7f58:	d007      	beq.n	d7f6a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
   d7f5a:	2a03      	cmp	r2, #3
   d7f5c:	d012      	beq.n	d7f84 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
   d7f5e:	2a01      	cmp	r2, #1
   d7f60:	d101      	bne.n	d7f66 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d7f62:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d7f64:	6003      	str	r3, [r0, #0]
	}
   d7f66:	2000      	movs	r0, #0
   d7f68:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d7f6a:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   d7f6c:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d7f6e:	f7fc f892 	bl	d4096 <_Znwj>
   d7f72:	4605      	mov	r5, r0
   d7f74:	b120      	cbz	r0, d7f80 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   d7f76:	4631      	mov	r1, r6
   d7f78:	f7ff ffdc 	bl	d7f34 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d7f7c:	7c33      	ldrb	r3, [r6, #16]
   d7f7e:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   d7f80:	6025      	str	r5, [r4, #0]
	}
   d7f82:	e7f0      	b.n	d7f66 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d7f84:	6804      	ldr	r4, [r0, #0]
   d7f86:	2c00      	cmp	r4, #0
   d7f88:	d0ed      	beq.n	d7f66 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
   d7f8a:	4620      	mov	r0, r4
   d7f8c:	f7fd f870 	bl	d5070 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d7f90:	2114      	movs	r1, #20
   d7f92:	4620      	mov	r0, r4
   d7f94:	f003 fb0e 	bl	db5b4 <_ZdlPvj>
   d7f98:	e7e5      	b.n	d7f66 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

000d7f9c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d7f9c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d7f9e:	b089      	sub	sp, #36	; 0x24
   d7fa0:	4604      	mov	r4, r0
   d7fa2:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d7fa4:	a801      	add	r0, sp, #4
   d7fa6:	4611      	mov	r1, r2
   d7fa8:	f7ff fe22 	bl	d7bf0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d7fac:	b1a4      	cbz	r4, d7fd8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   d7fae:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d7fb0:	b11d      	cbz	r5, d7fba <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   d7fb2:	4628      	mov	r0, r5
   d7fb4:	f004 fc20 	bl	dc7f8 <strdup>
   d7fb8:	4605      	mov	r5, r0
   d7fba:	a801      	add	r0, sp, #4
   d7fbc:	a903      	add	r1, sp, #12
        type_(type) {
   d7fbe:	9503      	str	r5, [sp, #12]
   d7fc0:	f8ad 4010 	strh.w	r4, [sp, #16]
   d7fc4:	f7ff fe78 	bl	d7cb8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d7fc8:	a803      	add	r0, sp, #12
   d7fca:	f7ff fdc0 	bl	d7b4e <_ZN8particle5ErrorD1Ev>
   d7fce:	a802      	add	r0, sp, #8
   d7fd0:	f7fd fde5 	bl	d5b9e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d7fd4:	b009      	add	sp, #36	; 0x24
   d7fd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d7fd8:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d7fda:	2301      	movs	r3, #1
   d7fdc:	e8d5 2f4f 	ldrexb	r2, [r5]
   d7fe0:	2a00      	cmp	r2, #0
   d7fe2:	d103      	bne.n	d7fec <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   d7fe4:	e8c5 3f41 	strexb	r1, r3, [r5]
   d7fe8:	2900      	cmp	r1, #0
   d7fea:	d1f7      	bne.n	d7fdc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   d7fec:	d1ef      	bne.n	d7fce <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   d7fee:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   d7ff0:	f3bf 8f5b 	dmb	ish
   d7ff4:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d7ff6:	1d2b      	adds	r3, r5, #4
   d7ff8:	f3bf 8f5b 	dmb	ish
   d7ffc:	e853 6f00 	ldrex	r6, [r3]
   d8000:	e843 4200 	strex	r2, r4, [r3]
   d8004:	2a00      	cmp	r2, #0
   d8006:	d1f9      	bne.n	d7ffc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   d8008:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d800c:	2e00      	cmp	r6, #0
   d800e:	d0de      	beq.n	d7fce <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   d8010:	4620      	mov	r0, r4
   d8012:	f7ff fba7 	bl	d7764 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d8016:	4607      	mov	r7, r0
   d8018:	b160      	cbz	r0, d8034 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d801a:	f105 010c 	add.w	r1, r5, #12
   d801e:	4630      	mov	r0, r6
   d8020:	f7ff fe15 	bl	d7c4e <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   d8024:	4630      	mov	r0, r6
   d8026:	f7fd f823 	bl	d5070 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d802a:	2110      	movs	r1, #16
   d802c:	4630      	mov	r0, r6
   d802e:	f003 fac1 	bl	db5b4 <_ZdlPvj>
   d8032:	e7cc      	b.n	d7fce <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d8034:	4631      	mov	r1, r6
   d8036:	a803      	add	r0, sp, #12
   d8038:	f7ff ff7c 	bl	d7f34 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d803c:	7b2b      	ldrb	r3, [r5, #12]
   d803e:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d8042:	2010      	movs	r0, #16
   d8044:	f7fc f827 	bl	d4096 <_Znwj>
   d8048:	4605      	mov	r5, r0
   d804a:	b1d0      	cbz	r0, d8082 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   d804c:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d804e:	2014      	movs	r0, #20
   d8050:	f7fc f821 	bl	d4096 <_Znwj>
   d8054:	4604      	mov	r4, r0
   d8056:	b178      	cbz	r0, d8078 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   d8058:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d805a:	4601      	mov	r1, r0
   d805c:	a803      	add	r0, sp, #12
   d805e:	f7fd f810 	bl	d5082 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d8062:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d8064:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d8066:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d8068:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   d806a:	9205      	str	r2, [sp, #20]
   d806c:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d806e:	60e3      	str	r3, [r4, #12]
   d8070:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   d8074:	9206      	str	r2, [sp, #24]
   d8076:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   d8078:	4b06      	ldr	r3, [pc, #24]	; (d8094 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   d807a:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d807c:	4b06      	ldr	r3, [pc, #24]	; (d8098 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d807e:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d8080:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   d8082:	a803      	add	r0, sp, #12
   d8084:	f7fc fff4 	bl	d5070 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d8088:	2200      	movs	r2, #0
   d808a:	4629      	mov	r1, r5
   d808c:	4803      	ldr	r0, [pc, #12]	; (d809c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   d808e:	f7ff fb71 	bl	d7774 <application_thread_invoke>
   d8092:	e7c7      	b.n	d8024 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   d8094:	000d7c61 	.word	0x000d7c61
   d8098:	000d7f53 	.word	0x000d7f53
   d809c:	000d7a3b 	.word	0x000d7a3b

000d80a0 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d80a0:	2200      	movs	r2, #0
   d80a2:	6840      	ldr	r0, [r0, #4]
   d80a4:	4611      	mov	r1, r2
   d80a6:	f7ff bc25 	b.w	d78f4 <network_listening>

000d80aa <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d80aa:	2200      	movs	r2, #0
   d80ac:	6840      	ldr	r0, [r0, #4]
   d80ae:	4611      	mov	r1, r2
   d80b0:	f7ff bc30 	b.w	d7914 <network_get_listen_timeout>

000d80b4 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d80b4:	6840      	ldr	r0, [r0, #4]
   d80b6:	2200      	movs	r2, #0
   d80b8:	f7ff bc24 	b.w	d7904 <network_set_listen_timeout>

000d80bc <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d80bc:	6840      	ldr	r0, [r0, #4]
   d80be:	2200      	movs	r2, #0
   d80c0:	f081 0101 	eor.w	r1, r1, #1
   d80c4:	f7ff bc0e 	b.w	d78e4 <network_listen>

000d80c8 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d80c8:	2300      	movs	r3, #0
   d80ca:	6840      	ldr	r0, [r0, #4]
   d80cc:	461a      	mov	r2, r3
   d80ce:	4619      	mov	r1, r3
   d80d0:	f7ff bc00 	b.w	d78d4 <network_off>

000d80d4 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d80d4:	2300      	movs	r3, #0
   d80d6:	6840      	ldr	r0, [r0, #4]
   d80d8:	461a      	mov	r2, r3
   d80da:	4619      	mov	r1, r3
   d80dc:	f7ff bbf2 	b.w	d78c4 <network_on>

000d80e0 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d80e0:	2200      	movs	r2, #0
   d80e2:	6840      	ldr	r0, [r0, #4]
   d80e4:	4611      	mov	r1, r2
   d80e6:	f7ff bbe5 	b.w	d78b4 <network_ready>

000d80ea <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d80ea:	2200      	movs	r2, #0
   d80ec:	6840      	ldr	r0, [r0, #4]
   d80ee:	4611      	mov	r1, r2
   d80f0:	f7ff bbd0 	b.w	d7894 <network_connecting>

000d80f4 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d80f4:	6840      	ldr	r0, [r0, #4]
   d80f6:	2200      	movs	r2, #0
   d80f8:	2102      	movs	r1, #2
   d80fa:	f7ff bbd3 	b.w	d78a4 <network_disconnect>

000d80fe <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d80fe:	2300      	movs	r3, #0
   d8100:	6840      	ldr	r0, [r0, #4]
   d8102:	461a      	mov	r2, r3
   d8104:	f7ff bbbe 	b.w	d7884 <network_connect>

000d8108 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   d8108:	4b02      	ldr	r3, [pc, #8]	; (d8114 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d810a:	2203      	movs	r2, #3
   d810c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d810e:	4a02      	ldr	r2, [pc, #8]	; (d8118 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d8110:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d8112:	4770      	bx	lr
   d8114:	2003e62c 	.word	0x2003e62c
   d8118:	000df120 	.word	0x000df120

000d811c <_ZN8particle6detail9_getVCellEhh>:

namespace particle { namespace detail {
    // Converts VCELL_REGISTER reading to Battery Voltage
    float _getVCell(byte MSB, byte LSB) {
        // VCELL = 12-bit value, 1.25mV (1V/800) per bit
        float value = (float)((MSB << 4) | (LSB >> 4));
   d811c:	0909      	lsrs	r1, r1, #4
   d811e:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
   d8122:	ee07 1a90 	vmov	s15, r1
   d8126:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
        return value / 800.0;
    }
   d812a:	eddf 7a02 	vldr	s15, [pc, #8]	; d8134 <_ZN8particle6detail9_getVCellEhh+0x18>
   d812e:	ee80 0a27 	vdiv.f32	s0, s0, s15
   d8132:	4770      	bx	lr
   d8134:	44480000 	.word	0x44480000

000d8138 <_ZN9FuelGauge4lockEv>:
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
    return SYSTEM_ERROR_NONE;
}

bool FuelGauge::lock() {
    return i2c_.lock();
   d8138:	6800      	ldr	r0, [r0, #0]
   d813a:	f000 b931 	b.w	d83a0 <_ZN7TwoWire4lockEv>

000d813e <_ZN9FuelGaugeC1ER7TwoWireb>:
FuelGauge::FuelGauge(TwoWire& i2c, bool _lock)
   d813e:	b510      	push	{r4, lr}
   d8140:	4604      	mov	r4, r0
      lock_(_lock) {
   d8142:	6001      	str	r1, [r0, #0]
   d8144:	7102      	strb	r2, [r0, #4]
    if (lock_) {
   d8146:	b10a      	cbz	r2, d814c <_ZN9FuelGaugeC1ER7TwoWireb+0xe>
        lock();
   d8148:	f7ff fff6 	bl	d8138 <_ZN9FuelGauge4lockEv>
}
   d814c:	4620      	mov	r0, r4
   d814e:	bd10      	pop	{r4, pc}

000d8150 <_ZN9FuelGaugeC1Eb>:
FuelGauge::FuelGauge(bool _lock)
   d8150:	b513      	push	{r0, r1, r4, lr}
   d8152:	4604      	mov	r4, r0
   d8154:	9101      	str	r1, [sp, #4]
            return &Wire1;
   d8156:	f003 fa09 	bl	db56c <_Z20__fetch_global_Wire1v>
        : FuelGauge(*fuelWireInstance(), _lock)
   d815a:	9a01      	ldr	r2, [sp, #4]
            return &Wire1;
   d815c:	4601      	mov	r1, r0
        : FuelGauge(*fuelWireInstance(), _lock)
   d815e:	4620      	mov	r0, r4
   d8160:	f7ff ffed 	bl	d813e <_ZN9FuelGaugeC1ER7TwoWireb>
}
   d8164:	4620      	mov	r0, r4
   d8166:	b002      	add	sp, #8
   d8168:	bd10      	pop	{r4, pc}

000d816a <_ZN9FuelGauge6unlockEv>:
}

bool FuelGauge::unlock() {
    return i2c_.unlock();
   d816a:	6800      	ldr	r0, [r0, #0]
   d816c:	f000 b921 	b.w	d83b2 <_ZN7TwoWire6unlockEv>

000d8170 <_ZN9FuelGauge12readRegisterEhRhS0_>:
int FuelGauge::readRegister(byte startAddress, byte &MSB, byte &LSB) {
   d8170:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   d8174:	4604      	mov	r4, r0
   d8176:	460d      	mov	r5, r1
   d8178:	4617      	mov	r7, r2
   d817a:	461e      	mov	r6, r3
   d817c:	f7ff ffdc 	bl	d8138 <_ZN9FuelGauge4lockEv>
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d8180:	2336      	movs	r3, #54	; 0x36
   d8182:	f88d 3000 	strb.w	r3, [sp]
   d8186:	2300      	movs	r3, #0
    i2c_.beginTransmission(config);
   d8188:	6820      	ldr	r0, [r4, #0]
   d818a:	9301      	str	r3, [sp, #4]
   d818c:	f04f 0801 	mov.w	r8, #1
    size_ = size;
    return *this;
  }

  WireTransmission& timeout(system_tick_t ms) {
    timeout_ = ms;
   d8190:	230a      	movs	r3, #10
   d8192:	4669      	mov	r1, sp
   d8194:	9303      	str	r3, [sp, #12]
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d8196:	f88d 8008 	strb.w	r8, [sp, #8]
   d819a:	f000 f8e1 	bl	d8360 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
    i2c_.write(startAddress);
   d819e:	6820      	ldr	r0, [r4, #0]
   d81a0:	6803      	ldr	r3, [r0, #0]
   d81a2:	4629      	mov	r1, r5
   d81a4:	689b      	ldr	r3, [r3, #8]
   d81a6:	4798      	blx	r3
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
   d81a8:	6820      	ldr	r0, [r4, #0]
   d81aa:	4641      	mov	r1, r8
   d81ac:	f000 f8f0 	bl	d8390 <_ZN7TwoWire15endTransmissionEh>
   d81b0:	4605      	mov	r5, r0
   d81b2:	b140      	cbz	r0, d81c6 <_ZN9FuelGauge12readRegisterEhRhS0_+0x56>
   d81b4:	f06f 059f 	mvn.w	r5, #159	; 0x9f
      { _M_device.unlock(); }
   d81b8:	4620      	mov	r0, r4
   d81ba:	f7ff ffd6 	bl	d816a <_ZN9FuelGauge6unlockEv>
}
   d81be:	4628      	mov	r0, r5
   d81c0:	b004      	add	sp, #16
   d81c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_ = size;
   d81c6:	2302      	movs	r3, #2
    CHECK_TRUE(i2c_.requestFrom(config) == 2, SYSTEM_ERROR_TIMEOUT);
   d81c8:	6820      	ldr	r0, [r4, #0]
   d81ca:	9301      	str	r3, [sp, #4]
   d81cc:	4669      	mov	r1, sp
   d81ce:	f000 f897 	bl	d8300 <_ZN7TwoWire11requestFromERK16WireTransmission>
   d81d2:	2802      	cmp	r0, #2
   d81d4:	d1ee      	bne.n	d81b4 <_ZN9FuelGauge12readRegisterEhRhS0_+0x44>
    MSB = i2c_.read();
   d81d6:	6820      	ldr	r0, [r4, #0]
   d81d8:	6803      	ldr	r3, [r0, #0]
   d81da:	695b      	ldr	r3, [r3, #20]
   d81dc:	4798      	blx	r3
   d81de:	7038      	strb	r0, [r7, #0]
    LSB = i2c_.read();
   d81e0:	6820      	ldr	r0, [r4, #0]
   d81e2:	6803      	ldr	r3, [r0, #0]
   d81e4:	695b      	ldr	r3, [r3, #20]
   d81e6:	4798      	blx	r3
   d81e8:	7030      	strb	r0, [r6, #0]
    return SYSTEM_ERROR_NONE;
   d81ea:	e7e5      	b.n	d81b8 <_ZN9FuelGauge12readRegisterEhRhS0_+0x48>

000d81ec <_ZN9FuelGauge8getVCellEv>:
float FuelGauge::getVCell() {
   d81ec:	b507      	push	{r0, r1, r2, lr}
    byte MSB = 0;
   d81ee:	2300      	movs	r3, #0
   d81f0:	f88d 3006 	strb.w	r3, [sp, #6]
    byte LSB = 0;
   d81f4:	f88d 3007 	strb.w	r3, [sp, #7]
    if (readRegister(VCELL_REGISTER, MSB, LSB) != SYSTEM_ERROR_NONE) {
   d81f8:	f10d 0206 	add.w	r2, sp, #6
   d81fc:	f10d 0307 	add.w	r3, sp, #7
   d8200:	2102      	movs	r1, #2
   d8202:	f7ff ffb5 	bl	d8170 <_ZN9FuelGauge12readRegisterEhRhS0_>
   d8206:	b940      	cbnz	r0, d821a <_ZN9FuelGauge8getVCellEv+0x2e>
    return particle::detail::_getVCell(MSB, LSB);
   d8208:	f89d 1007 	ldrb.w	r1, [sp, #7]
   d820c:	f89d 0006 	ldrb.w	r0, [sp, #6]
}
   d8210:	b003      	add	sp, #12
   d8212:	f85d eb04 	ldr.w	lr, [sp], #4
    return particle::detail::_getVCell(MSB, LSB);
   d8216:	f7ff bf81 	b.w	d811c <_ZN8particle6detail9_getVCellEhh>
}
   d821a:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
   d821e:	b003      	add	sp, #12
   d8220:	f85d fb04 	ldr.w	pc, [sp], #4

000d8224 <_ZN9FuelGauge6getSoCEv>:
float FuelGauge::getSoC() {
   d8224:	b507      	push	{r0, r1, r2, lr}
    byte MSB = 0;
   d8226:	2300      	movs	r3, #0
   d8228:	f88d 3006 	strb.w	r3, [sp, #6]
    byte LSB = 0;
   d822c:	f88d 3007 	strb.w	r3, [sp, #7]
    if(readRegister(SOC_REGISTER, MSB, LSB) != SYSTEM_ERROR_NONE) {
   d8230:	f10d 0206 	add.w	r2, sp, #6
   d8234:	f10d 0307 	add.w	r3, sp, #7
   d8238:	2104      	movs	r1, #4
   d823a:	f7ff ff99 	bl	d8170 <_ZN9FuelGauge12readRegisterEhRhS0_>
   d823e:	b9b0      	cbnz	r0, d826e <_ZN9FuelGauge6getSoCEv+0x4a>
        float decimal = LSB / 256.0;
   d8240:	f89d 0007 	ldrb.w	r0, [sp, #7]
   d8244:	f003 fcd6 	bl	dbbf4 <__aeabi_i2d>
   d8248:	4b0a      	ldr	r3, [pc, #40]	; (d8274 <_ZN9FuelGauge6getSoCEv+0x50>)
   d824a:	2200      	movs	r2, #0
   d824c:	f003 fd3c 	bl	dbcc8 <__aeabi_dmul>
   d8250:	f003 fff4 	bl	dc23c <__aeabi_d2f>
        return MSB + decimal;
   d8254:	f89d 3006 	ldrb.w	r3, [sp, #6]
   d8258:	ee00 3a10 	vmov	s0, r3
   d825c:	ee07 0a90 	vmov	s15, r0
   d8260:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
   d8264:	ee37 0a80 	vadd.f32	s0, s15, s0
}
   d8268:	b003      	add	sp, #12
   d826a:	f85d fb04 	ldr.w	pc, [sp], #4
        return -1.0f;
   d826e:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
   d8272:	e7f9      	b.n	d8268 <_ZN9FuelGauge6getSoCEv+0x44>
   d8274:	3f700000 	.word	0x3f700000

000d8278 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d8278:	4770      	bx	lr

000d827a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d827a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d827c:	4606      	mov	r6, r0
   d827e:	4615      	mov	r5, r2
   d8280:	460c      	mov	r4, r1
   d8282:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d8284:	42bc      	cmp	r4, r7
   d8286:	d006      	beq.n	d8296 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d8288:	6833      	ldr	r3, [r6, #0]
   d828a:	f814 1b01 	ldrb.w	r1, [r4], #1
   d828e:	689b      	ldr	r3, [r3, #8]
   d8290:	4630      	mov	r0, r6
   d8292:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d8294:	e7f6      	b.n	d8284 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d8296:	4628      	mov	r0, r5
   d8298:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d829a <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d829a:	7c00      	ldrb	r0, [r0, #16]
   d829c:	2200      	movs	r2, #0
   d829e:	f7ff b89f 	b.w	d73e0 <hal_i2c_write>

000d82a2 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d82a2:	7c00      	ldrb	r0, [r0, #16]
   d82a4:	2100      	movs	r1, #0
   d82a6:	f7ff b8a3 	b.w	d73f0 <hal_i2c_available>

000d82aa <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d82aa:	7c00      	ldrb	r0, [r0, #16]
   d82ac:	2100      	movs	r1, #0
   d82ae:	f7ff b8a7 	b.w	d7400 <hal_i2c_read>

000d82b2 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d82b2:	7c00      	ldrb	r0, [r0, #16]
   d82b4:	2100      	movs	r1, #0
   d82b6:	f7ff b8ab 	b.w	d7410 <hal_i2c_peek>

000d82ba <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d82ba:	7c00      	ldrb	r0, [r0, #16]
   d82bc:	2100      	movs	r1, #0
   d82be:	f7ff b8af 	b.w	d7420 <hal_i2c_flush>

000d82c2 <_ZN7TwoWireD0Ev>:
   d82c2:	b510      	push	{r4, lr}
   d82c4:	2114      	movs	r1, #20
   d82c6:	4604      	mov	r4, r0
   d82c8:	f003 f974 	bl	db5b4 <_ZdlPvj>
   d82cc:	4620      	mov	r0, r4
   d82ce:	bd10      	pop	{r4, pc}

000d82d0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d82d0:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d82d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d82d6:	4604      	mov	r4, r0
   d82d8:	4608      	mov	r0, r1
   d82da:	2100      	movs	r1, #0
   d82dc:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d82e0:	4b03      	ldr	r3, [pc, #12]	; (d82f0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d82e2:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d82e4:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d82e6:	4611      	mov	r1, r2
   d82e8:	f7ff f8aa 	bl	d7440 <hal_i2c_init>
}
   d82ec:	4620      	mov	r0, r4
   d82ee:	bd10      	pop	{r4, pc}
   d82f0:	000df15c 	.word	0x000df15c

000d82f4 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d82f4:	2300      	movs	r3, #0
   d82f6:	7c00      	ldrb	r0, [r0, #16]
   d82f8:	461a      	mov	r2, r3
   d82fa:	4619      	mov	r1, r3
   d82fc:	f7ff b858 	b.w	d73b0 <hal_i2c_begin>

000d8300 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d8300:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   d8302:	2200      	movs	r2, #0
   d8304:	2314      	movs	r3, #20
   d8306:	e9cd 2201 	strd	r2, r2, [sp, #4]
   d830a:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   d830e:	780b      	ldrb	r3, [r1, #0]
   d8310:	f88d 3008 	strb.w	r3, [sp, #8]
   d8314:	684b      	ldr	r3, [r1, #4]
   d8316:	9303      	str	r3, [sp, #12]
   d8318:	68cb      	ldr	r3, [r1, #12]
   d831a:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   d831c:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   d831e:	7a0b      	ldrb	r3, [r1, #8]
   d8320:	9305      	str	r3, [sp, #20]
   d8322:	a901      	add	r1, sp, #4
   d8324:	f7ff f8a4 	bl	d7470 <hal_i2c_request_ex>
}
   d8328:	b007      	add	sp, #28
   d832a:	f85d fb04 	ldr.w	pc, [sp], #4

000d832e <_ZN7TwoWire11requestFromEhjh>:
{
   d832e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d8330:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d8332:	f88d 1000 	strb.w	r1, [sp]
   d8336:	f04f 0164 	mov.w	r1, #100	; 0x64
   d833a:	9103      	str	r1, [sp, #12]
   d833c:	bf18      	it	ne
   d833e:	2301      	movne	r3, #1
   d8340:	4669      	mov	r1, sp
    size_ = size;
   d8342:	9201      	str	r2, [sp, #4]
   d8344:	f88d 3008 	strb.w	r3, [sp, #8]
   d8348:	f7ff ffda 	bl	d8300 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d834c:	b005      	add	sp, #20
   d834e:	f85d fb04 	ldr.w	pc, [sp], #4

000d8352 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   d8352:	7c00      	ldrb	r0, [r0, #16]
   d8354:	2200      	movs	r2, #0
   d8356:	f7ff b833 	b.w	d73c0 <hal_i2c_begin_transmission>

000d835a <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   d835a:	b2c9      	uxtb	r1, r1
   d835c:	f7ff bff9 	b.w	d8352 <_ZN7TwoWire17beginTransmissionEh>

000d8360 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>:
void TwoWire::beginTransmission(const WireTransmission& transfer) {
   d8360:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   d8362:	2300      	movs	r3, #0
   d8364:	e9cd 3301 	strd	r3, r3, [sp, #4]
    };
   d8368:	684a      	ldr	r2, [r1, #4]
   d836a:	9203      	str	r2, [sp, #12]
    hal_i2c_transmission_config_t conf = {
   d836c:	2314      	movs	r3, #20
    };
   d836e:	68ca      	ldr	r2, [r1, #12]
    hal_i2c_transmission_config_t conf = {
   d8370:	f8ad 3004 	strh.w	r3, [sp, #4]
      .address = address_,
   d8374:	780b      	ldrb	r3, [r1, #0]
    };
   d8376:	9204      	str	r2, [sp, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   d8378:	7a0a      	ldrb	r2, [r1, #8]
   d837a:	9205      	str	r2, [sp, #20]
  hal_i2c_begin_transmission(_i2c, conf.address, &conf);
   d837c:	7c00      	ldrb	r0, [r0, #16]
    };
   d837e:	f88d 3008 	strb.w	r3, [sp, #8]
   d8382:	aa01      	add	r2, sp, #4
   d8384:	4619      	mov	r1, r3
   d8386:	f7ff f81b 	bl	d73c0 <hal_i2c_begin_transmission>
}
   d838a:	b007      	add	sp, #28
   d838c:	f85d fb04 	ldr.w	pc, [sp], #4

000d8390 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   d8390:	7c00      	ldrb	r0, [r0, #16]
   d8392:	2200      	movs	r2, #0
   d8394:	f7ff b81c 	b.w	d73d0 <hal_i2c_end_transmission>

000d8398 <_ZN7TwoWire9isEnabledEv>:
  hal_i2c_set_callback_on_requested(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return hal_i2c_is_enabled(_i2c, NULL);
   d8398:	7c00      	ldrb	r0, [r0, #16]
   d839a:	2100      	movs	r1, #0
   d839c:	f7ff b848 	b.w	d7430 <hal_i2c_is_enabled>

000d83a0 <_ZN7TwoWire4lockEv>:
{
  hal_i2c_reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
   d83a0:	b508      	push	{r3, lr}
  return hal_i2c_lock(_i2c, NULL) == 0;
   d83a2:	2100      	movs	r1, #0
   d83a4:	7c00      	ldrb	r0, [r0, #16]
   d83a6:	f7ff f853 	bl	d7450 <hal_i2c_lock>
}
   d83aa:	fab0 f080 	clz	r0, r0
   d83ae:	0940      	lsrs	r0, r0, #5
   d83b0:	bd08      	pop	{r3, pc}

000d83b2 <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
   d83b2:	b508      	push	{r3, lr}
  return hal_i2c_unlock(_i2c, NULL) == 0;
   d83b4:	2100      	movs	r1, #0
   d83b6:	7c00      	ldrb	r0, [r0, #16]
   d83b8:	f7ff f852 	bl	d7460 <hal_i2c_unlock>
}
   d83bc:	fab0 f080 	clz	r0, r0
   d83c0:	0940      	lsrs	r0, r0, #5
   d83c2:	bd08      	pop	{r3, pc}

000d83c4 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   d83c4:	4700      	bx	r0
	...

000d83c8 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   d83c8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
   d83cc:	2400      	movs	r4, #0
{
   d83ce:	461d      	mov	r5, r3
   d83d0:	460f      	mov	r7, r1
   d83d2:	4690      	mov	r8, r2
   d83d4:	4606      	mov	r6, r0
    HAL_Interrupts_Detach(pin);
   d83d6:	f7fe ffdb 	bl	d7390 <HAL_Interrupts_Detach>
  if (priority >= 0) {
   d83da:	42a5      	cmp	r5, r4
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d83dc:	f04f 0304 	mov.w	r3, #4
    HAL_InterruptExtraConfiguration extra = {0};
   d83e0:	f8ad 400d 	strh.w	r4, [sp, #13]
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d83e4:	f88d 300c 	strb.w	r3, [sp, #12]
    HAL_InterruptExtraConfiguration extra = {0};
   d83e8:	f88d 400f 	strb.w	r4, [sp, #15]
    extra.IRQChannelSubPriority = subpriority;
   d83ec:	bfa2      	ittt	ge
   d83ee:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   d83f2:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
   d83f6:	ac03      	addge	r4, sp, #12
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d83f8:	4907      	ldr	r1, [pc, #28]	; (d8418 <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)
   d83fa:	9400      	str	r4, [sp, #0]
   d83fc:	4643      	mov	r3, r8
   d83fe:	463a      	mov	r2, r7
   d8400:	4630      	mov	r0, r6
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   d8402:	bfa8      	it	ge
   d8404:	f88d 500d 	strbge.w	r5, [sp, #13]
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d8408:	f7fe ffba 	bl	d7380 <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
   d840c:	fab0 f080 	clz	r0, r0
   d8410:	0940      	lsrs	r0, r0, #5
   d8412:	b004      	add	sp, #16
   d8414:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d8418:	000d83c5 	.word	0x000d83c5

000d841c <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d841c:	4770      	bx	lr

000d841e <_ZN9IPAddressD0Ev>:
   d841e:	b510      	push	{r4, lr}
   d8420:	2118      	movs	r1, #24
   d8422:	4604      	mov	r4, r0
   d8424:	f003 f8c6 	bl	db5b4 <_ZdlPvj>
   d8428:	4620      	mov	r0, r4
   d842a:	bd10      	pop	{r4, pc}

000d842c <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d842c:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d842e:	7d03      	ldrb	r3, [r0, #20]
   d8430:	2b06      	cmp	r3, #6
{
   d8432:	b08d      	sub	sp, #52	; 0x34
   d8434:	460e      	mov	r6, r1
   d8436:	f100 0704 	add.w	r7, r0, #4
   d843a:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d843e:	d012      	beq.n	d8466 <_ZNK9IPAddress7printToER5Print+0x3a>
   d8440:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d8444:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d8448:	220a      	movs	r2, #10
   d844a:	4630      	mov	r0, r6
   d844c:	f001 fbaf 	bl	d9bae <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d8450:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d8452:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d8454:	d019      	beq.n	d848a <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d8456:	2c00      	cmp	r4, #0
   d8458:	d0f4      	beq.n	d8444 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d845a:	212e      	movs	r1, #46	; 0x2e
   d845c:	4630      	mov	r0, r6
   d845e:	f001 fb8d 	bl	d9b7c <_ZN5Print5printEc>
   d8462:	4404      	add	r4, r0
   d8464:	e7ee      	b.n	d8444 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d8466:	232f      	movs	r3, #47	; 0x2f
   d8468:	466a      	mov	r2, sp
   d846a:	4639      	mov	r1, r7
   d846c:	200a      	movs	r0, #10
		buf[0] = 0;
   d846e:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d8472:	f7ff f80d 	bl	d7490 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d8476:	4668      	mov	r0, sp
   d8478:	f004 f9db 	bl	dc832 <strlen>
   d847c:	6833      	ldr	r3, [r6, #0]
   d847e:	4602      	mov	r2, r0
   d8480:	68db      	ldr	r3, [r3, #12]
   d8482:	4669      	mov	r1, sp
   d8484:	4630      	mov	r0, r6
   d8486:	4798      	blx	r3
   d8488:	4604      	mov	r4, r0
    }
    return n;
}
   d848a:	4620      	mov	r0, r4
   d848c:	b00d      	add	sp, #52	; 0x34
   d848e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d8490 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d8490:	b510      	push	{r4, lr}
   d8492:	4b05      	ldr	r3, [pc, #20]	; (d84a8 <_ZN9IPAddressC1Ev+0x18>)
   d8494:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d8496:	2211      	movs	r2, #17
   d8498:	f840 3b04 	str.w	r3, [r0], #4
   d849c:	2100      	movs	r1, #0
   d849e:	f004 f955 	bl	dc74c <memset>
}
   d84a2:	4620      	mov	r0, r4
   d84a4:	bd10      	pop	{r4, pc}
   d84a6:	bf00      	nop
   d84a8:	000df184 	.word	0x000df184

000d84ac <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d84ac:	4603      	mov	r3, r0
   d84ae:	4a07      	ldr	r2, [pc, #28]	; (d84cc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d84b0:	b510      	push	{r4, lr}
   d84b2:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d84b6:	f101 0210 	add.w	r2, r1, #16
   d84ba:	f851 4b04 	ldr.w	r4, [r1], #4
   d84be:	f843 4b04 	str.w	r4, [r3], #4
   d84c2:	4291      	cmp	r1, r2
   d84c4:	d1f9      	bne.n	d84ba <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d84c6:	780a      	ldrb	r2, [r1, #0]
   d84c8:	701a      	strb	r2, [r3, #0]
}
   d84ca:	bd10      	pop	{r4, pc}
   d84cc:	000df184 	.word	0x000df184

000d84d0 <_ZNK9IPAddresscvbEv>:
    if (version() == 4) {
   d84d0:	7d03      	ldrb	r3, [r0, #20]
   d84d2:	2b04      	cmp	r3, #4
   d84d4:	d104      	bne.n	d84e0 <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   d84d6:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d84d8:	3800      	subs	r0, #0
   d84da:	bf18      	it	ne
   d84dc:	2001      	movne	r0, #1
   d84de:	4770      	bx	lr
    } else if (version() == 6) {
   d84e0:	2b06      	cmp	r3, #6
   d84e2:	d107      	bne.n	d84f4 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d84e4:	6843      	ldr	r3, [r0, #4]
   d84e6:	b93b      	cbnz	r3, d84f8 <_ZNK9IPAddresscvbEv+0x28>
   d84e8:	6883      	ldr	r3, [r0, #8]
   d84ea:	b92b      	cbnz	r3, d84f8 <_ZNK9IPAddresscvbEv+0x28>
   d84ec:	68c3      	ldr	r3, [r0, #12]
   d84ee:	b91b      	cbnz	r3, d84f8 <_ZNK9IPAddresscvbEv+0x28>
   d84f0:	6900      	ldr	r0, [r0, #16]
   d84f2:	e7f1      	b.n	d84d8 <_ZNK9IPAddresscvbEv+0x8>
        return false;
   d84f4:	2000      	movs	r0, #0
   d84f6:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d84f8:	2001      	movs	r0, #1
}
   d84fa:	4770      	bx	lr

000d84fc <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d84fc:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d84fe:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d8502:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d8506:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d850a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d850e:	2304      	movs	r3, #4
   d8510:	6041      	str	r1, [r0, #4]
   d8512:	7503      	strb	r3, [r0, #20]
}
   d8514:	bd10      	pop	{r4, pc}
	...

000d8518 <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
   d8518:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d851a:	4d04      	ldr	r5, [pc, #16]	; (d852c <_ZN9IPAddressC1Ehhhh+0x14>)
   d851c:	6005      	str	r5, [r0, #0]
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
   d851e:	f89d 5018 	ldrb.w	r5, [sp, #24]
   d8522:	9500      	str	r5, [sp, #0]
   d8524:	f7ff ffea 	bl	d84fc <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d8528:	b003      	add	sp, #12
   d852a:	bd30      	pop	{r4, r5, pc}
   d852c:	000df184 	.word	0x000df184

000d8530 <_ZN9IPAddressaSEPKh>:
{
   d8530:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d8532:	78cb      	ldrb	r3, [r1, #3]
   d8534:	9300      	str	r3, [sp, #0]
   d8536:	788b      	ldrb	r3, [r1, #2]
   d8538:	784a      	ldrb	r2, [r1, #1]
   d853a:	7809      	ldrb	r1, [r1, #0]
   d853c:	f7ff ffde 	bl	d84fc <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d8540:	b002      	add	sp, #8
   d8542:	bd10      	pop	{r4, pc}

000d8544 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
   d8544:	f100 0310 	add.w	r3, r0, #16
   d8548:	2201      	movs	r2, #1
    do {
        if (t->type == JSMN_OBJECT) {
   d854a:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   d854e:	2901      	cmp	r1, #1
   d8550:	4618      	mov	r0, r3
   d8552:	d108      	bne.n	d8566 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
   d8554:	f853 1c04 	ldr.w	r1, [r3, #-4]
   d8558:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
   d855c:	3a01      	subs	r2, #1
   d855e:	f103 0310 	add.w	r3, r3, #16
   d8562:	d1f2      	bne.n	d854a <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
   d8564:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
   d8566:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   d8568:	bf04      	itt	eq
   d856a:	f853 1c04 	ldreq.w	r1, [r3, #-4]
   d856e:	1852      	addeq	r2, r2, r1
   d8570:	e7f4      	b.n	d855c <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

000d8572 <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   d8572:	b40e      	push	{r1, r2, r3}
   d8574:	b5f0      	push	{r4, r5, r6, r7, lr}
   d8576:	b088      	sub	sp, #32
   d8578:	af00      	add	r7, sp, #0
   d857a:	f107 0534 	add.w	r5, r7, #52	; 0x34
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d857e:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
   d8580:	f855 2b04 	ldr.w	r2, [r5], #4
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d8584:	607a      	str	r2, [r7, #4]
void spark::JSONWriter::printf(const char *fmt, ...) {
   d8586:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d8588:	462b      	mov	r3, r5
   d858a:	1878      	adds	r0, r7, r1
    va_start(args, fmt);
   d858c:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d858e:	f7ff fa09 	bl	d79a4 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   d8592:	280f      	cmp	r0, #15
   d8594:	687a      	ldr	r2, [r7, #4]
   d8596:	d91a      	bls.n	d85ce <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
   d8598:	f100 0308 	add.w	r3, r0, #8
   d859c:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   d85a0:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
   d85a2:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   d85a6:	1c41      	adds	r1, r0, #1
   d85a8:	462b      	mov	r3, r5
   d85aa:	4668      	mov	r0, sp
        va_start(args, fmt);
   d85ac:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   d85ae:	f7ff f9f9 	bl	d79a4 <vsnprintf>
        if (n > 0) {
   d85b2:	1e02      	subs	r2, r0, #0
   d85b4:	dd04      	ble.n	d85c0 <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
   d85b6:	6823      	ldr	r3, [r4, #0]
   d85b8:	4669      	mov	r1, sp
   d85ba:	689b      	ldr	r3, [r3, #8]
   d85bc:	4620      	mov	r0, r4
   d85be:	4798      	blx	r3
   d85c0:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
   d85c2:	3720      	adds	r7, #32
   d85c4:	46bd      	mov	sp, r7
   d85c6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   d85ca:	b003      	add	sp, #12
   d85cc:	4770      	bx	lr
    } else if (n > 0) {
   d85ce:	2800      	cmp	r0, #0
   d85d0:	d0f7      	beq.n	d85c2 <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
   d85d2:	6823      	ldr	r3, [r4, #0]
   d85d4:	4602      	mov	r2, r0
   d85d6:	689b      	ldr	r3, [r3, #8]
   d85d8:	f107 0110 	add.w	r1, r7, #16
   d85dc:	4620      	mov	r0, r4
   d85de:	4798      	blx	r3
}
   d85e0:	e7ef      	b.n	d85c2 <_ZN5spark10JSONWriter6printfEPKcz+0x50>

000d85e2 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d85e2:	b510      	push	{r4, lr}
          _M_dispose();
   d85e4:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d85e6:	4604      	mov	r4, r0
          _M_dispose();
   d85e8:	689b      	ldr	r3, [r3, #8]
   d85ea:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d85ec:	68a3      	ldr	r3, [r4, #8]
   d85ee:	3b01      	subs	r3, #1
   d85f0:	60a3      	str	r3, [r4, #8]
   d85f2:	b92b      	cbnz	r3, d8600 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
   d85f4:	6823      	ldr	r3, [r4, #0]
   d85f6:	4620      	mov	r0, r4
   d85f8:	68db      	ldr	r3, [r3, #12]
    }
   d85fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   d85fe:	4718      	bx	r3
    }
   d8600:	bd10      	pop	{r4, pc}

000d8602 <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   d8602:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   d8604:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
   d8606:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   d860a:	689b      	ldr	r3, [r3, #8]
   d860c:	2201      	movs	r2, #1
   d860e:	f10d 0107 	add.w	r1, sp, #7
   d8612:	4798      	blx	r3
}
   d8614:	b003      	add	sp, #12
   d8616:	f85d fb04 	ldr.w	pc, [sp], #4

000d861a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>:
    class __shared_ptr
   d861a:	b538      	push	{r3, r4, r5, lr}
   d861c:	680b      	ldr	r3, [r1, #0]
   d861e:	6003      	str	r3, [r0, #0]
   d8620:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
   d8622:	6843      	ldr	r3, [r0, #4]
   d8624:	429d      	cmp	r5, r3
    class __shared_ptr
   d8626:	4604      	mov	r4, r0
	if (__tmp != _M_pi)
   d8628:	d00c      	beq.n	d8644 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x2a>
	    if (__tmp != 0)
   d862a:	b115      	cbz	r5, d8632 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x18>
    { ++_M_use_count; }
   d862c:	686b      	ldr	r3, [r5, #4]
   d862e:	3301      	adds	r3, #1
   d8630:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   d8632:	6860      	ldr	r0, [r4, #4]
   d8634:	b128      	cbz	r0, d8642 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x28>
      if (--_M_use_count == 0)
   d8636:	6843      	ldr	r3, [r0, #4]
   d8638:	3b01      	subs	r3, #1
   d863a:	6043      	str	r3, [r0, #4]
   d863c:	b90b      	cbnz	r3, d8642 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x28>
   d863e:	f7ff ffd0 	bl	d85e2 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
	    _M_pi = __tmp;
   d8642:	6065      	str	r5, [r4, #4]
    class __shared_ptr
   d8644:	4620      	mov	r0, r4
   d8646:	bd38      	pop	{r3, r4, r5, pc}

000d8648 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   d8648:	460b      	mov	r3, r1
   d864a:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
   d864c:	2200      	movs	r2, #0
   d864e:	b510      	push	{r4, lr}
      constexpr __shared_count() noexcept : _M_pi(0)
   d8650:	e9c0 2200 	strd	r2, r2, [r0]
   d8654:	4604      	mov	r4, r0
        t_ = t;
   d8656:	6083      	str	r3, [r0, #8]
    if (t) {
   d8658:	b90b      	cbnz	r3, d865e <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
   d865a:	4620      	mov	r0, r4
   d865c:	bd10      	pop	{r4, pc}
   *
   *  The object pointed to is deleted when the last shared_ptr pointing to
   *  it is destroyed or reset.
  */
  template<typename _Tp>
    class shared_ptr : public __shared_ptr<_Tp>
   d865e:	f7ff ffdc 	bl	d861a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
   d8662:	e7fa      	b.n	d865a <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

000d8664 <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
   d8664:	6883      	ldr	r3, [r0, #8]
   d8666:	b1eb      	cbz	r3, d86a4 <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
   d8668:	781a      	ldrb	r2, [r3, #0]
   d866a:	2a03      	cmp	r2, #3
   d866c:	d81a      	bhi.n	d86a4 <_ZNK5spark9JSONValue4typeEv+0x40>
   d866e:	e8df f002 	tbb	[pc, r2]
   d8672:	1704      	.short	0x1704
   d8674:	1b02      	.short	0x1b02
   d8676:	2005      	movs	r0, #5
   d8678:	4770      	bx	lr
        const char c = d_->json[t_->start];
   d867a:	6802      	ldr	r2, [r0, #0]
   d867c:	685b      	ldr	r3, [r3, #4]
   d867e:	6852      	ldr	r2, [r2, #4]
   d8680:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   d8682:	282d      	cmp	r0, #45	; 0x2d
   d8684:	d012      	beq.n	d86ac <_ZNK5spark9JSONValue4typeEv+0x48>
   d8686:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d868a:	2b09      	cmp	r3, #9
   d868c:	d90e      	bls.n	d86ac <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   d868e:	2874      	cmp	r0, #116	; 0x74
   d8690:	d00e      	beq.n	d86b0 <_ZNK5spark9JSONValue4typeEv+0x4c>
   d8692:	2866      	cmp	r0, #102	; 0x66
   d8694:	d00c      	beq.n	d86b0 <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
   d8696:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   d869a:	4258      	negs	r0, r3
   d869c:	4158      	adcs	r0, r3
   d869e:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
   d86a0:	2006      	movs	r0, #6
   d86a2:	4770      	bx	lr
        return JSON_TYPE_INVALID;
   d86a4:	2000      	movs	r0, #0
   d86a6:	4770      	bx	lr
        return JSON_TYPE_STRING;
   d86a8:	2004      	movs	r0, #4
   d86aa:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
   d86ac:	2003      	movs	r0, #3
   d86ae:	4770      	bx	lr
            return JSON_TYPE_BOOL;
   d86b0:	2002      	movs	r0, #2
}
   d86b2:	4770      	bx	lr

000d86b4 <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
   d86b4:	b510      	push	{r4, lr}
   d86b6:	4604      	mov	r4, r0
    switch (type()) {
   d86b8:	f7ff ffd4 	bl	d8664 <_ZNK5spark9JSONValue4typeEv>
   d86bc:	2802      	cmp	r0, #2
   d86be:	d00e      	beq.n	d86de <_ZNK5spark9JSONValue5toIntEv+0x2a>
   d86c0:	1ec3      	subs	r3, r0, #3
   d86c2:	b2db      	uxtb	r3, r3
   d86c4:	2b01      	cmp	r3, #1
   d86c6:	d814      	bhi.n	d86f2 <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
   d86c8:	6822      	ldr	r2, [r4, #0]
   d86ca:	68a3      	ldr	r3, [r4, #8]
   d86cc:	6850      	ldr	r0, [r2, #4]
   d86ce:	685b      	ldr	r3, [r3, #4]
}
   d86d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
   d86d4:	220a      	movs	r2, #10
   d86d6:	2100      	movs	r1, #0
   d86d8:	4418      	add	r0, r3
   d86da:	f005 b803 	b.w	dd6e4 <strtol>
        const char* const s = d_->json + t_->start;
   d86de:	6822      	ldr	r2, [r4, #0]
   d86e0:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   d86e2:	6852      	ldr	r2, [r2, #4]
   d86e4:	685b      	ldr	r3, [r3, #4]
   d86e6:	5cd0      	ldrb	r0, [r2, r3]
   d86e8:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   d86ec:	4258      	negs	r0, r3
   d86ee:	4158      	adcs	r0, r3
}
   d86f0:	bd10      	pop	{r4, pc}
    switch (type()) {
   d86f2:	2000      	movs	r0, #0
   d86f4:	e7fc      	b.n	d86f0 <_ZNK5spark9JSONValue5toIntEv+0x3c>
	...

000d86f8 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   d86f8:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   d86fa:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   d86fc:	e9c0 3300 	strd	r3, r3, [r0]
   d8700:	4604      	mov	r4, r0
        n_(0) {
   d8702:	480e      	ldr	r0, [pc, #56]	; (d873c <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
   d8704:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   d8708:	b1a9      	cbz	r1, d8736 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
   d870a:	780b      	ldrb	r3, [r1, #0]
   d870c:	2b03      	cmp	r3, #3
   d870e:	d006      	beq.n	d871e <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   d8710:	b98b      	cbnz	r3, d8736 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   d8712:	6813      	ldr	r3, [r2, #0]
   d8714:	6858      	ldr	r0, [r3, #4]
   d8716:	684b      	ldr	r3, [r1, #4]
   d8718:	5cc3      	ldrb	r3, [r0, r3]
   d871a:	2b6e      	cmp	r3, #110	; 0x6e
   d871c:	d007      	beq.n	d872e <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
   d871e:	6813      	ldr	r3, [r2, #0]
   d8720:	684d      	ldr	r5, [r1, #4]
   d8722:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
   d8724:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
   d8726:	4428      	add	r0, r5
            n_ = t->end - t->start;
   d8728:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
   d872a:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
   d872c:	60e3      	str	r3, [r4, #12]
   d872e:	4611      	mov	r1, r2
   d8730:	4620      	mov	r0, r4
   d8732:	f7ff ff72 	bl	d861a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
}
   d8736:	4620      	mov	r0, r4
   d8738:	bd38      	pop	{r3, r4, r5, pc}
   d873a:	bf00      	nop
   d873c:	000dedf7 	.word	0x000dedf7

000d8740 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   d8740:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   d8742:	2500      	movs	r5, #0
   d8744:	460b      	mov	r3, r1
      constexpr __shared_count() noexcept : _M_pi(0)
   d8746:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
   d874a:	e9c0 5502 	strd	r5, r5, [r0, #8]
   d874e:	e9c0 5504 	strd	r5, r5, [r0, #16]
   d8752:	4604      	mov	r4, r0
   d8754:	4611      	mov	r1, r2
    if (t && t->type == JSMN_OBJECT) {
   d8756:	b14b      	cbz	r3, d876c <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
   d8758:	781a      	ldrb	r2, [r3, #0]
   d875a:	2a01      	cmp	r2, #1
   d875c:	d106      	bne.n	d876c <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
   d875e:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
   d8762:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
   d8764:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
   d8766:	6143      	str	r3, [r0, #20]
   d8768:	f7ff ff57 	bl	d861a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
}
   d876c:	4620      	mov	r0, r4
   d876e:	bd38      	pop	{r3, r4, r5, pc}

000d8770 <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
   d8770:	b510      	push	{r4, lr}
    if (!n_) {
   d8772:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
   d8774:	4604      	mov	r4, r0
    if (!n_) {
   d8776:	b163      	cbz	r3, d8792 <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
   d8778:	6880      	ldr	r0, [r0, #8]
   d877a:	60e0      	str	r0, [r4, #12]
    --n_;
   d877c:	3b01      	subs	r3, #1
    ++t_;
   d877e:	3010      	adds	r0, #16
   d8780:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   d8782:	6120      	str	r0, [r4, #16]
    --n_;
   d8784:	6163      	str	r3, [r4, #20]
    if (n_) {
   d8786:	b113      	cbz	r3, d878e <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
   d8788:	f7ff fedc 	bl	d8544 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   d878c:	60a0      	str	r0, [r4, #8]
    return true;
   d878e:	2001      	movs	r0, #1
   d8790:	e000      	b.n	d8794 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
   d8792:	4618      	mov	r0, r3
}
   d8794:	bd10      	pop	{r4, pc}

000d8796 <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
   d8796:	b510      	push	{r4, lr}
    write('}');
   d8798:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
   d879a:	4604      	mov	r4, r0
    write('}');
   d879c:	f7ff ff31 	bl	d8602 <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   d87a0:	2301      	movs	r3, #1
   d87a2:	7123      	strb	r3, [r4, #4]
}
   d87a4:	4620      	mov	r0, r4
   d87a6:	bd10      	pop	{r4, pc}

000d87a8 <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
   d87a8:	b508      	push	{r3, lr}
    switch (state_) {
   d87aa:	7903      	ldrb	r3, [r0, #4]
   d87ac:	2b01      	cmp	r3, #1
   d87ae:	d002      	beq.n	d87b6 <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   d87b0:	2b02      	cmp	r3, #2
   d87b2:	d004      	beq.n	d87be <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
   d87b4:	bd08      	pop	{r3, pc}
        write(',');
   d87b6:	212c      	movs	r1, #44	; 0x2c
        write(':');
   d87b8:	f7ff ff23 	bl	d8602 <_ZN5spark10JSONWriter5writeEc>
}
   d87bc:	e7fa      	b.n	d87b4 <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
   d87be:	213a      	movs	r1, #58	; 0x3a
   d87c0:	e7fa      	b.n	d87b8 <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

000d87c2 <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
   d87c2:	b510      	push	{r4, lr}
   d87c4:	4604      	mov	r4, r0
    writeSeparator();
   d87c6:	f7ff ffef 	bl	d87a8 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   d87ca:	4620      	mov	r0, r4
   d87cc:	217b      	movs	r1, #123	; 0x7b
   d87ce:	f7ff ff18 	bl	d8602 <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   d87d2:	2300      	movs	r3, #0
   d87d4:	7123      	strb	r3, [r4, #4]
}
   d87d6:	4620      	mov	r0, r4
   d87d8:	bd10      	pop	{r4, pc}
	...

000d87dc <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
   d87dc:	b513      	push	{r0, r1, r4, lr}
   d87de:	4604      	mov	r4, r0
   d87e0:	9101      	str	r1, [sp, #4]
    writeSeparator();
   d87e2:	f7ff ffe1 	bl	d87a8 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   d87e6:	6823      	ldr	r3, [r4, #0]
   d87e8:	9a01      	ldr	r2, [sp, #4]
   d87ea:	68db      	ldr	r3, [r3, #12]
   d87ec:	4903      	ldr	r1, [pc, #12]	; (d87fc <_ZN5spark10JSONWriter5valueEi+0x20>)
   d87ee:	4620      	mov	r0, r4
   d87f0:	4798      	blx	r3
    state_ = NEXT;
   d87f2:	2301      	movs	r3, #1
}
   d87f4:	4620      	mov	r0, r4
    state_ = NEXT;
   d87f6:	7123      	strb	r3, [r4, #4]
}
   d87f8:	b002      	add	sp, #8
   d87fa:	bd10      	pop	{r4, pc}
   d87fc:	000df2f3 	.word	0x000df2f3

000d8800 <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   d8800:	b513      	push	{r0, r1, r4, lr}
   d8802:	4604      	mov	r4, r0
   d8804:	9101      	str	r1, [sp, #4]
    writeSeparator();
   d8806:	f7ff ffcf 	bl	d87a8 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   d880a:	6823      	ldr	r3, [r4, #0]
   d880c:	9a01      	ldr	r2, [sp, #4]
   d880e:	68db      	ldr	r3, [r3, #12]
   d8810:	4903      	ldr	r1, [pc, #12]	; (d8820 <_ZN5spark10JSONWriter5valueEj+0x20>)
   d8812:	4620      	mov	r0, r4
   d8814:	4798      	blx	r3
    state_ = NEXT;
   d8816:	2301      	movs	r3, #1
}
   d8818:	4620      	mov	r0, r4
    state_ = NEXT;
   d881a:	7123      	strb	r3, [r4, #4]
}
   d881c:	b002      	add	sp, #8
   d881e:	bd10      	pop	{r4, pc}
   d8820:	000df190 	.word	0x000df190

000d8824 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   d8824:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d8828:	460d      	mov	r5, r1
   d882a:	4617      	mov	r7, r2
    write('"');
   d882c:	2122      	movs	r1, #34	; 0x22
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   d882e:	f8df 80a0 	ldr.w	r8, [pc, #160]	; d88d0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xac>
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   d8832:	4604      	mov	r4, r0
    const char* const end = str + size;
   d8834:	442f      	add	r7, r5
    write('"');
   d8836:	f7ff fee4 	bl	d8602 <_ZN5spark10JSONWriter5writeEc>
    const char* const end = str + size;
   d883a:	4629      	mov	r1, r5
    while (s != end) {
   d883c:	42bd      	cmp	r5, r7
   d883e:	462a      	mov	r2, r5
   d8840:	d038      	beq.n	d88b4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x90>
        const char c = *s;
   d8842:	f815 6b01 	ldrb.w	r6, [r5], #1
        if (c == '"' || c == '\\' || (c >= 0 && c <= 0x1f)) {
   d8846:	2e22      	cmp	r6, #34	; 0x22
   d8848:	d003      	beq.n	d8852 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2e>
   d884a:	2e5c      	cmp	r6, #92	; 0x5c
   d884c:	d001      	beq.n	d8852 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2e>
   d884e:	2e1f      	cmp	r6, #31
   d8850:	d8f4      	bhi.n	d883c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
   d8852:	6823      	ldr	r3, [r4, #0]
   d8854:	1a52      	subs	r2, r2, r1
   d8856:	689b      	ldr	r3, [r3, #8]
   d8858:	4620      	mov	r0, r4
   d885a:	4798      	blx	r3
            write('\\');
   d885c:	215c      	movs	r1, #92	; 0x5c
   d885e:	4620      	mov	r0, r4
   d8860:	f7ff fecf 	bl	d8602 <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   d8864:	2e0d      	cmp	r6, #13
   d8866:	d80a      	bhi.n	d887e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x5a>
   d8868:	2e07      	cmp	r6, #7
   d886a:	d91c      	bls.n	d88a6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
   d886c:	f1a6 0308 	sub.w	r3, r6, #8
   d8870:	2b05      	cmp	r3, #5
   d8872:	d818      	bhi.n	d88a6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
   d8874:	e8df f003 	tbb	[pc, r3]
   d8878:	17110f0d 	.word	0x17110f0d
   d887c:	1513      	.short	0x1513
   d887e:	2e22      	cmp	r6, #34	; 0x22
   d8880:	d001      	beq.n	d8886 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x62>
   d8882:	2e5c      	cmp	r6, #92	; 0x5c
   d8884:	d10f      	bne.n	d88a6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
                write(c);
   d8886:	4631      	mov	r1, r6
                write('b');
   d8888:	4620      	mov	r0, r4
   d888a:	f7ff feba 	bl	d8602 <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
   d888e:	4629      	mov	r1, r5
    while (s != end) {
   d8890:	e7d4      	b.n	d883c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
   d8892:	2162      	movs	r1, #98	; 0x62
   d8894:	e7f8      	b.n	d8888 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('t');
   d8896:	2174      	movs	r1, #116	; 0x74
   d8898:	e7f6      	b.n	d8888 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('n');
   d889a:	216e      	movs	r1, #110	; 0x6e
   d889c:	e7f4      	b.n	d8888 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('f');
   d889e:	2166      	movs	r1, #102	; 0x66
   d88a0:	e7f2      	b.n	d8888 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('r');
   d88a2:	2172      	movs	r1, #114	; 0x72
   d88a4:	e7f0      	b.n	d8888 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                printf("u%04x", (unsigned)c);
   d88a6:	6823      	ldr	r3, [r4, #0]
   d88a8:	4632      	mov	r2, r6
   d88aa:	68db      	ldr	r3, [r3, #12]
   d88ac:	4641      	mov	r1, r8
   d88ae:	4620      	mov	r0, r4
   d88b0:	4798      	blx	r3
                break;
   d88b2:	e7ec      	b.n	d888e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6a>
        }
        ++s;
    }
    if (s != str) {
   d88b4:	428d      	cmp	r5, r1
   d88b6:	d004      	beq.n	d88c2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9e>
        write(str, s - str); // Write remaining characters
   d88b8:	6823      	ldr	r3, [r4, #0]
   d88ba:	1a6a      	subs	r2, r5, r1
   d88bc:	689b      	ldr	r3, [r3, #8]
   d88be:	4620      	mov	r0, r4
   d88c0:	4798      	blx	r3
    }
    write('"');
   d88c2:	2122      	movs	r1, #34	; 0x22
   d88c4:	4620      	mov	r0, r4
   d88c6:	f7ff fe9c 	bl	d8602 <_ZN5spark10JSONWriter5writeEc>
}
   d88ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d88ce:	bf00      	nop
   d88d0:	000df193 	.word	0x000df193

000d88d4 <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   d88d4:	b513      	push	{r0, r1, r4, lr}
   d88d6:	4604      	mov	r4, r0
   d88d8:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   d88dc:	f7ff ff64 	bl	d87a8 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   d88e0:	4620      	mov	r0, r4
   d88e2:	e9dd 2100 	ldrd	r2, r1, [sp]
   d88e6:	f7ff ff9d 	bl	d8824 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   d88ea:	2302      	movs	r3, #2
}
   d88ec:	4620      	mov	r0, r4
    state_ = VALUE;
   d88ee:	7123      	strb	r3, [r4, #4]
}
   d88f0:	b002      	add	sp, #8
   d88f2:	bd10      	pop	{r4, pc}

000d88f4 <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   d88f4:	b513      	push	{r0, r1, r4, lr}
   d88f6:	4604      	mov	r4, r0
   d88f8:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   d88fc:	f7ff ff54 	bl	d87a8 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   d8900:	4620      	mov	r0, r4
   d8902:	e9dd 2100 	ldrd	r2, r1, [sp]
   d8906:	f7ff ff8d 	bl	d8824 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   d890a:	2301      	movs	r3, #1
}
   d890c:	4620      	mov	r0, r4
    state_ = NEXT;
   d890e:	7123      	strb	r3, [r4, #4]
}
   d8910:	b002      	add	sp, #8
   d8912:	bd10      	pop	{r4, pc}

000d8914 <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
   d8914:	6880      	ldr	r0, [r0, #8]
   d8916:	6803      	ldr	r3, [r0, #0]
   d8918:	68db      	ldr	r3, [r3, #12]
   d891a:	4718      	bx	r3

000d891c <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
   d891c:	4770      	bx	lr

000d891e <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   d891e:	4608      	mov	r0, r1
   d8920:	b111      	cbz	r1, d8928 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   d8922:	680b      	ldr	r3, [r1, #0]
   d8924:	685b      	ldr	r3, [r3, #4]
   d8926:	4718      	bx	r3
}
   d8928:	4770      	bx	lr

000d892a <__tcf_0>:
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
    static DefaultLogHandlerFactory factory;
   d892a:	4770      	bx	lr

000d892c <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   d892c:	4770      	bx	lr

000d892e <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
   d892e:	4770      	bx	lr

000d8930 <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
   d8930:	4770      	bx	lr

000d8932 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
const char* nextSubcategoryName(const char* &category, size_t &size) {
   d8932:	b538      	push	{r3, r4, r5, lr}
   d8934:	4604      	mov	r4, r0
   d8936:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   d8938:	6800      	ldr	r0, [r0, #0]
   d893a:	212e      	movs	r1, #46	; 0x2e
   d893c:	f003 ff3f 	bl	dc7be <strchrnul>
    size = s - category;
   d8940:	6823      	ldr	r3, [r4, #0]
   d8942:	1ac3      	subs	r3, r0, r3
   d8944:	602b      	str	r3, [r5, #0]
    if (size) {
   d8946:	b123      	cbz	r3, d8952 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   d8948:	7803      	ldrb	r3, [r0, #0]
   d894a:	b103      	cbz	r3, d894e <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   d894c:	3001      	adds	r0, #1
   d894e:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d8950:	6020      	str	r0, [r4, #0]
}
   d8952:	4618      	mov	r0, r3
   d8954:	bd38      	pop	{r3, r4, r5, pc}

000d8956 <_ZN5spark16JSONStreamWriterD0Ev>:
   d8956:	b510      	push	{r4, lr}
   d8958:	210c      	movs	r1, #12
   d895a:	4604      	mov	r4, r0
   d895c:	f002 fe2a 	bl	db5b4 <_ZdlPvj>
   d8960:	4620      	mov	r0, r4
   d8962:	bd10      	pop	{r4, pc}

000d8964 <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   d8964:	b510      	push	{r4, lr}
   d8966:	2104      	movs	r1, #4
   d8968:	4604      	mov	r4, r0
   d896a:	f002 fe23 	bl	db5b4 <_ZdlPvj>
   d896e:	4620      	mov	r0, r4
   d8970:	bd10      	pop	{r4, pc}

000d8972 <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   d8972:	b510      	push	{r4, lr}
   d8974:	2104      	movs	r1, #4
   d8976:	4604      	mov	r4, r0
   d8978:	f002 fe1c 	bl	db5b4 <_ZdlPvj>
   d897c:	4620      	mov	r0, r4
   d897e:	bd10      	pop	{r4, pc}

000d8980 <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
   d8980:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   d8982:	f003 ff26 	bl	dc7d2 <strcmp>
}
   d8986:	fab0 f080 	clz	r0, r0
   d898a:	0940      	lsrs	r0, r0, #5
   d898c:	bd08      	pop	{r3, pc}

000d898e <__tcf_1>:
   d898e:	4770      	bx	lr

000d8990 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != 3
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   d8990:	b510      	push	{r4, lr}
   d8992:	460c      	mov	r4, r1
#if PLATFORM_ID != 3
    if (stream == &Serial) {
   d8994:	f002 fbfe 	bl	db194 <_Z16_fetch_usbserialv>
   d8998:	4284      	cmp	r4, r0
   d899a:	d010      	beq.n	d89be <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   d899c:	f002 fb58 	bl	db050 <_Z22__fetch_global_Serial1v>
   d89a0:	4284      	cmp	r4, r0
   d89a2:	d105      	bne.n	d89b0 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x20>
        Serial1.end();
   d89a4:	f002 fb54 	bl	db050 <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
}
   d89a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
   d89ac:	f002 bb4d 	b.w	db04a <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   d89b0:	b12c      	cbz	r4, d89be <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
   d89b2:	6823      	ldr	r3, [r4, #0]
   d89b4:	4620      	mov	r0, r4
   d89b6:	685b      	ldr	r3, [r3, #4]
}
   d89b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d89bc:	4718      	bx	r3
   d89be:	bd10      	pop	{r4, pc}

000d89c0 <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   d89c0:	b513      	push	{r0, r1, r4, lr}
   d89c2:	4604      	mov	r4, r0
    return value(val, strlen(val));
   d89c4:	4608      	mov	r0, r1
   d89c6:	9101      	str	r1, [sp, #4]
   d89c8:	f003 ff33 	bl	dc832 <strlen>
   d89cc:	9901      	ldr	r1, [sp, #4]
   d89ce:	4602      	mov	r2, r0
   d89d0:	4620      	mov	r0, r4
}
   d89d2:	b002      	add	sp, #8
   d89d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
   d89d8:	f7ff bf8c 	b.w	d88f4 <_ZN5spark10JSONWriter5valueEPKcj>

000d89dc <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
   d89dc:	b513      	push	{r0, r1, r4, lr}
   d89de:	4604      	mov	r4, r0
    write(str, strlen(str));
   d89e0:	4608      	mov	r0, r1
   d89e2:	9101      	str	r1, [sp, #4]
   d89e4:	f003 ff25 	bl	dc832 <strlen>
   d89e8:	6823      	ldr	r3, [r4, #0]
   d89ea:	9901      	ldr	r1, [sp, #4]
   d89ec:	68db      	ldr	r3, [r3, #12]
   d89ee:	4602      	mov	r2, r0
   d89f0:	4620      	mov	r0, r4
}
   d89f2:	b002      	add	sp, #8
   d89f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
   d89f8:	4718      	bx	r3

000d89fa <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
   d89fa:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   d89fc:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
   d89fe:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   d8a02:	68db      	ldr	r3, [r3, #12]
   d8a04:	2201      	movs	r2, #1
   d8a06:	f10d 0107 	add.w	r1, sp, #7
   d8a0a:	4798      	blx	r3
}
   d8a0c:	b003      	add	sp, #12
   d8a0e:	f85d fb04 	ldr.w	pc, [sp], #4

000d8a12 <_ZN5spark16StreamLogHandler6printfEPKcz>:
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   d8a12:	b40e      	push	{r1, r2, r3}
   d8a14:	b503      	push	{r0, r1, lr}
   d8a16:	ab03      	add	r3, sp, #12
    stream_->vprintf(false, fmt, args);
   d8a18:	2100      	movs	r1, #0
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   d8a1a:	f853 2b04 	ldr.w	r2, [r3], #4
    stream_->vprintf(false, fmt, args);
   d8a1e:	6a00      	ldr	r0, [r0, #32]
    va_start(args, fmt);
   d8a20:	9301      	str	r3, [sp, #4]
    stream_->vprintf(false, fmt, args);
   d8a22:	f001 f8e2 	bl	d9bea <_ZN5Print7vprintfEbPKcSt9__va_list>
}
   d8a26:	b002      	add	sp, #8
   d8a28:	f85d eb04 	ldr.w	lr, [sp], #4
   d8a2c:	b003      	add	sp, #12
   d8a2e:	4770      	bx	lr

000d8a30 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   d8a30:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
   d8a34:	e9d0 9500 	ldrd	r9, r5, [r0]
   d8a38:	f04f 0814 	mov.w	r8, #20
   d8a3c:	fb08 f505 	mul.w	r5, r8, r5
   d8a40:	9300      	str	r3, [sp, #0]
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   d8a42:	10ab      	asrs	r3, r5, #2
   d8a44:	4d18      	ldr	r5, [pc, #96]	; (d8aa8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x78>)
   d8a46:	4617      	mov	r7, r2
   d8a48:	435d      	muls	r5, r3
   d8a4a:	464c      	mov	r4, r9
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
   d8a4c:	2d00      	cmp	r5, #0
   d8a4e:	dd23      	ble.n	d8a98 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x68>
	{
	  _DistanceType __half = __len >> 1;
   d8a50:	106e      	asrs	r6, r5, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
   d8a52:	fb08 f006 	mul.w	r0, r8, r6
   d8a56:	eb04 0a00 	add.w	sl, r4, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   d8a5a:	463a      	mov	r2, r7
   d8a5c:	f8ba b004 	ldrh.w	fp, [sl, #4]
   d8a60:	5820      	ldr	r0, [r4, r0]
   d8a62:	9101      	str	r1, [sp, #4]
   d8a64:	455f      	cmp	r7, fp
   d8a66:	bf28      	it	cs
   d8a68:	465a      	movcs	r2, fp
   d8a6a:	f003 feea 	bl	dc842 <strncmp>
                if (cmp == 0) {
   d8a6e:	9901      	ldr	r1, [sp, #4]
   d8a70:	2301      	movs	r3, #1
   d8a72:	b978      	cbnz	r0, d8a94 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
                    if (node.size == value.second) { // Lengths are equal
   d8a74:	455f      	cmp	r7, fp
   d8a76:	d103      	bne.n	d8a80 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   d8a78:	9a00      	ldr	r2, [sp, #0]
   d8a7a:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   d8a7c:	4635      	mov	r5, r6
   d8a7e:	e7e5      	b.n	d8a4c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
                    return node.size < value.second;
   d8a80:	bf8c      	ite	hi
   d8a82:	2001      	movhi	r0, #1
   d8a84:	2000      	movls	r0, #0
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
   d8a86:	2800      	cmp	r0, #0
   d8a88:	d0f8      	beq.n	d8a7c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x4c>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   d8a8a:	1bae      	subs	r6, r5, r6
	      ++__first;
   d8a8c:	f10a 0414 	add.w	r4, sl, #20
	      __len = __len - __half - 1;
   d8a90:	3e01      	subs	r6, #1
   d8a92:	e7f3      	b.n	d8a7c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x4c>
                return cmp < 0;
   d8a94:	0fc0      	lsrs	r0, r0, #31
   d8a96:	e7f6      	b.n	d8a86 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
      return __last - __first;
   d8a98:	eba4 0409 	sub.w	r4, r4, r9
}
   d8a9c:	4802      	ldr	r0, [pc, #8]	; (d8aa8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x78>)
   d8a9e:	10a4      	asrs	r4, r4, #2
   d8aa0:	4360      	muls	r0, r4
   d8aa2:	b003      	add	sp, #12
   d8aa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d8aa8:	cccccccd 	.word	0xcccccccd

000d8aac <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
   d8aac:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
   d8aae:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
   d8ab0:	7e06      	ldrb	r6, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
   d8ab2:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
   d8ab4:	b30b      	cbz	r3, d8afa <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
   d8ab6:	b301      	cbz	r1, d8afa <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
        size_t size = 0; // Name length
   d8ab8:	2500      	movs	r5, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   d8aba:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
   d8abe:	9503      	str	r5, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
   d8ac0:	a903      	add	r1, sp, #12
   d8ac2:	a801      	add	r0, sp, #4
   d8ac4:	f7ff ff35 	bl	d8932 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   d8ac8:	4601      	mov	r1, r0
   d8aca:	b1b0      	cbz	r0, d8afa <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
            const int index = nodeIndex(*pNodes, name, size, found);
   d8acc:	f10d 030b 	add.w	r3, sp, #11
   d8ad0:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
   d8ad2:	f88d 500b 	strb.w	r5, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
   d8ad6:	4620      	mov	r0, r4
   d8ad8:	f7ff ffaa 	bl	d8a30 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   d8adc:	f89d 300b 	ldrb.w	r3, [sp, #11]
   d8ae0:	b15b      	cbz	r3, d8afa <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
    return data_[i];
   d8ae2:	6824      	ldr	r4, [r4, #0]
   d8ae4:	2314      	movs	r3, #20
   d8ae6:	fb03 4000 	mla	r0, r3, r0, r4
            pNodes = &node.nodes;
   d8aea:	f100 0408 	add.w	r4, r0, #8
            if (node.level >= 0) {
   d8aee:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
   d8af2:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   d8af4:	bfa8      	it	ge
   d8af6:	b2de      	uxtbge	r6, r3
        while ((name = nextSubcategoryName(category, size))) {
   d8af8:	e7e2      	b.n	d8ac0 <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
   d8afa:	4630      	mov	r0, r6
   d8afc:	b004      	add	sp, #16
   d8afe:	bd70      	pop	{r4, r5, r6, pc}

000d8b00 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   d8b00:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   d8b02:	4c09      	ldr	r4, [pc, #36]	; (d8b28 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
   d8b04:	7823      	ldrb	r3, [r4, #0]
   d8b06:	f3bf 8f5b 	dmb	ish
   d8b0a:	07db      	lsls	r3, r3, #31
   d8b0c:	d409      	bmi.n	d8b22 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   d8b0e:	4620      	mov	r0, r4
   d8b10:	f7fb fad2 	bl	d40b8 <__cxa_guard_acquire>
   d8b14:	b128      	cbz	r0, d8b22 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   d8b16:	4620      	mov	r0, r4
   d8b18:	f7fb fad3 	bl	d40c2 <__cxa_guard_release>
   d8b1c:	4803      	ldr	r0, [pc, #12]	; (d8b2c <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   d8b1e:	f003 fdd1 	bl	dc6c4 <atexit>
}
   d8b22:	4803      	ldr	r0, [pc, #12]	; (d8b30 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   d8b24:	bd10      	pop	{r4, pc}
   d8b26:	bf00      	nop
   d8b28:	2003e638 	.word	0x2003e638
   d8b2c:	000d892b 	.word	0x000d892b
   d8b30:	2003e108 	.word	0x2003e108

000d8b34 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   d8b34:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   d8b36:	4c09      	ldr	r4, [pc, #36]	; (d8b5c <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
   d8b38:	7823      	ldrb	r3, [r4, #0]
   d8b3a:	f3bf 8f5b 	dmb	ish
   d8b3e:	07db      	lsls	r3, r3, #31
   d8b40:	d409      	bmi.n	d8b56 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   d8b42:	4620      	mov	r0, r4
   d8b44:	f7fb fab8 	bl	d40b8 <__cxa_guard_acquire>
   d8b48:	b128      	cbz	r0, d8b56 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   d8b4a:	4620      	mov	r0, r4
   d8b4c:	f7fb fab9 	bl	d40c2 <__cxa_guard_release>
   d8b50:	4803      	ldr	r0, [pc, #12]	; (d8b60 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   d8b52:	f003 fdb7 	bl	dc6c4 <atexit>
    return &factory;
}
   d8b56:	4803      	ldr	r0, [pc, #12]	; (d8b64 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   d8b58:	bd10      	pop	{r4, pc}
   d8b5a:	bf00      	nop
   d8b5c:	2003e63c 	.word	0x2003e63c
   d8b60:	000d898f 	.word	0x000d898f
   d8b64:	2003e10c 	.word	0x2003e10c

000d8b68 <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   d8b68:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   d8b6a:	2500      	movs	r5, #0
   d8b6c:	4604      	mov	r4, r0
   d8b6e:	e9c0 5500 	strd	r5, r5, [r0]
   d8b72:	e9c0 5504 	strd	r5, r5, [r0, #16]
   d8b76:	6085      	str	r5, [r0, #8]
   d8b78:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
   d8b7a:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
   d8b7e:	f7fe fb8f 	bl	d72a0 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   d8b82:	f7ff ffbd 	bl	d8b00 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   d8b86:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   d8b88:	f7ff ffd4 	bl	d8b34 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   d8b8c:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   d8b8e:	6220      	str	r0, [r4, #32]
}
   d8b90:	4620      	mov	r0, r4
   d8b92:	bd38      	pop	{r3, r4, r5, pc}

000d8b94 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   d8b94:	b510      	push	{r4, lr}
    static LogManager mgr;
   d8b96:	4c0a      	ldr	r4, [pc, #40]	; (d8bc0 <_ZN5spark10LogManager8instanceEv+0x2c>)
   d8b98:	7823      	ldrb	r3, [r4, #0]
   d8b9a:	f3bf 8f5b 	dmb	ish
   d8b9e:	07db      	lsls	r3, r3, #31
   d8ba0:	d40c      	bmi.n	d8bbc <_ZN5spark10LogManager8instanceEv+0x28>
   d8ba2:	4620      	mov	r0, r4
   d8ba4:	f7fb fa88 	bl	d40b8 <__cxa_guard_acquire>
   d8ba8:	b140      	cbz	r0, d8bbc <_ZN5spark10LogManager8instanceEv+0x28>
   d8baa:	4806      	ldr	r0, [pc, #24]	; (d8bc4 <_ZN5spark10LogManager8instanceEv+0x30>)
   d8bac:	f7ff ffdc 	bl	d8b68 <_ZN5spark10LogManagerC1Ev>
   d8bb0:	4620      	mov	r0, r4
   d8bb2:	f7fb fa86 	bl	d40c2 <__cxa_guard_release>
   d8bb6:	4804      	ldr	r0, [pc, #16]	; (d8bc8 <_ZN5spark10LogManager8instanceEv+0x34>)
   d8bb8:	f003 fd84 	bl	dc6c4 <atexit>
    return &mgr;
}
   d8bbc:	4801      	ldr	r0, [pc, #4]	; (d8bc4 <_ZN5spark10LogManager8instanceEv+0x30>)
   d8bbe:	bd10      	pop	{r4, pc}
   d8bc0:	2003e634 	.word	0x2003e634
   d8bc4:	2003e644 	.word	0x2003e644
   d8bc8:	000d9075 	.word	0x000d9075

000d8bcc <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   d8bcc:	4a02      	ldr	r2, [pc, #8]	; (d8bd8 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   d8bce:	4903      	ldr	r1, [pc, #12]	; (d8bdc <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   d8bd0:	4803      	ldr	r0, [pc, #12]	; (d8be0 <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   d8bd2:	2300      	movs	r3, #0
   d8bd4:	f7fe bd94 	b.w	d7700 <log_set_callbacks>
   d8bd8:	000d8efd 	.word	0x000d8efd
   d8bdc:	000d8e89 	.word	0x000d8e89
   d8be0:	000d8e09 	.word	0x000d8e09

000d8be4 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   d8be4:	2300      	movs	r3, #0
   d8be6:	461a      	mov	r2, r3
   d8be8:	4619      	mov	r1, r3
   d8bea:	4618      	mov	r0, r3
   d8bec:	f7fe bd88 	b.w	d7700 <log_set_callbacks>

000d8bf0 <_ZNK5spark18JSONObjectIterator5valueEv>:
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   d8bf0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONValue(v_, d_);
   d8bf2:	690d      	ldr	r5, [r1, #16]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d8bf4:	f851 3b04 	ldr.w	r3, [r1], #4
   d8bf8:	9300      	str	r3, [sp, #0]
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   d8bfa:	4604      	mov	r4, r0
   d8bfc:	a801      	add	r0, sp, #4
   d8bfe:	f7fe ff30 	bl	d7a62 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return JSONValue(v_, d_);
   d8c02:	466a      	mov	r2, sp
   d8c04:	4629      	mov	r1, r5
   d8c06:	4620      	mov	r0, r4
   d8c08:	f7ff fd1e 	bl	d8648 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d8c0c:	a801      	add	r0, sp, #4
   d8c0e:	f7fc ffc6 	bl	d5b9e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d8c12:	4620      	mov	r0, r4
   d8c14:	b003      	add	sp, #12
   d8c16:	bd30      	pop	{r4, r5, pc}

000d8c18 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   d8c18:	b537      	push	{r0, r1, r2, r4, r5, lr}
        JSONObjectIterator(value.t_, value.d_) {
   d8c1a:	688d      	ldr	r5, [r1, #8]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d8c1c:	f851 3b04 	ldr.w	r3, [r1], #4
   d8c20:	9300      	str	r3, [sp, #0]
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   d8c22:	4604      	mov	r4, r0
   d8c24:	a801      	add	r0, sp, #4
   d8c26:	f7fe ff1c 	bl	d7a62 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        JSONObjectIterator(value.t_, value.d_) {
   d8c2a:	466a      	mov	r2, sp
   d8c2c:	4629      	mov	r1, r5
   d8c2e:	4620      	mov	r0, r4
   d8c30:	f7ff fd86 	bl	d8740 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d8c34:	a801      	add	r0, sp, #4
   d8c36:	f7fc ffb2 	bl	d5b9e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d8c3a:	4620      	mov	r0, r4
   d8c3c:	b003      	add	sp, #12
   d8c3e:	bd30      	pop	{r4, r5, pc}

000d8c40 <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
   d8c40:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONString(k_, d_);
   d8c42:	68cd      	ldr	r5, [r1, #12]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d8c44:	f851 3b04 	ldr.w	r3, [r1], #4
   d8c48:	9300      	str	r3, [sp, #0]
inline spark::JSONString spark::JSONObjectIterator::name() const {
   d8c4a:	4604      	mov	r4, r0
   d8c4c:	a801      	add	r0, sp, #4
   d8c4e:	f7fe ff08 	bl	d7a62 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return JSONString(k_, d_);
   d8c52:	466a      	mov	r2, sp
   d8c54:	4629      	mov	r1, r5
   d8c56:	4620      	mov	r0, r4
   d8c58:	f7ff fd4e 	bl	d86f8 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d8c5c:	a801      	add	r0, sp, #4
   d8c5e:	f7fc ff9e 	bl	d5b9e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d8c62:	4620      	mov	r0, r4
   d8c64:	b003      	add	sp, #12
   d8c66:	bd30      	pop	{r4, r5, pc}

000d8c68 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   d8c68:	b570      	push	{r4, r5, r6, lr}
   d8c6a:	b08a      	sub	sp, #40	; 0x28
   d8c6c:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   d8c6e:	4601      	mov	r1, r0
   d8c70:	a804      	add	r0, sp, #16
   d8c72:	f7ff ffd1 	bl	d8c18 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
   d8c76:	4e14      	ldr	r6, [pc, #80]	; (d8cc8 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
   d8c78:	a804      	add	r0, sp, #16
   d8c7a:	f7ff fd79 	bl	d8770 <_ZN5spark18JSONObjectIterator4nextEv>
   d8c7e:	b1e8      	cbz	r0, d8cbc <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
   d8c80:	a904      	add	r1, sp, #16
   d8c82:	4668      	mov	r0, sp
   d8c84:	f7ff ffdc 	bl	d8c40 <_ZNK5spark18JSONObjectIterator4nameEv>
   d8c88:	9802      	ldr	r0, [sp, #8]
   d8c8a:	4631      	mov	r1, r6
   d8c8c:	f7ff fe78 	bl	d8980 <_ZNK5spark10JSONStringeqEPKc.isra.0>
   d8c90:	4604      	mov	r4, r0
   d8c92:	b110      	cbz	r0, d8c9a <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
   d8c94:	1e2c      	subs	r4, r5, #0
   d8c96:	bf18      	it	ne
   d8c98:	2401      	movne	r4, #1
   d8c9a:	a801      	add	r0, sp, #4
   d8c9c:	f7fc ff7f 	bl	d5b9e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d8ca0:	2c00      	cmp	r4, #0
   d8ca2:	d0e9      	beq.n	d8c78 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
   d8ca4:	a904      	add	r1, sp, #16
   d8ca6:	4668      	mov	r0, sp
   d8ca8:	f7ff ffa2 	bl	d8bf0 <_ZNK5spark18JSONObjectIterator5valueEv>
   d8cac:	4668      	mov	r0, sp
   d8cae:	f7ff fd01 	bl	d86b4 <_ZNK5spark9JSONValue5toIntEv>
   d8cb2:	6028      	str	r0, [r5, #0]
   d8cb4:	a801      	add	r0, sp, #4
   d8cb6:	f7fc ff72 	bl	d5b9e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d8cba:	e7dd      	b.n	d8c78 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
   d8cbc:	a805      	add	r0, sp, #20
   d8cbe:	f7fc ff6e 	bl	d5b9e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d8cc2:	b00a      	add	sp, #40	; 0x28
   d8cc4:	bd70      	pop	{r4, r5, r6, pc}
   d8cc6:	bf00      	nop
   d8cc8:	000df199 	.word	0x000df199

000d8ccc <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   d8ccc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d8cce:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
   d8cd0:	4620      	mov	r0, r4
   d8cd2:	4912      	ldr	r1, [pc, #72]	; (d8d1c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>)
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   d8cd4:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
   d8cd6:	f003 fd7c 	bl	dc7d2 <strcmp>
   d8cda:	b948      	cbnz	r0, d8cf0 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x24>
        Serial.begin();
   d8cdc:	f002 fa5a 	bl	db194 <_Z16_fetch_usbserialv>
   d8ce0:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d8ce4:	f002 fa46 	bl	db174 <_ZN9USBSerial5beginEl>
        return &Serial;
   d8ce8:	f002 fa54 	bl	db194 <_Z16_fetch_usbserialv>
}
   d8cec:	b003      	add	sp, #12
   d8cee:	bd30      	pop	{r4, r5, pc}
    if (strcmp(type, "Serial1") == 0) {
   d8cf0:	490b      	ldr	r1, [pc, #44]	; (d8d20 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
   d8cf2:	4620      	mov	r0, r4
   d8cf4:	f003 fd6d 	bl	dc7d2 <strcmp>
   d8cf8:	b970      	cbnz	r0, d8d18 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
        int baud = 9600;
   d8cfa:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
   d8cfe:	a901      	add	r1, sp, #4
   d8d00:	4628      	mov	r0, r5
        int baud = 9600;
   d8d02:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
   d8d04:	f7ff ffb0 	bl	d8c68 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   d8d08:	f002 f9a2 	bl	db050 <_Z22__fetch_global_Serial1v>
   d8d0c:	9901      	ldr	r1, [sp, #4]
   d8d0e:	f002 f999 	bl	db044 <_ZN11USARTSerial5beginEm>
        return &Serial1;
   d8d12:	f002 f99d 	bl	db050 <_Z22__fetch_global_Serial1v>
   d8d16:	e7e9      	b.n	d8cec <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x20>
    return nullptr;
   d8d18:	2000      	movs	r0, #0
   d8d1a:	e7e7      	b.n	d8cec <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x20>
   d8d1c:	000df19e 	.word	0x000df19e
   d8d20:	000df1a5 	.word	0x000df1a5

000d8d24 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   d8d24:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d8d26:	e9d0 5300 	ldrd	r5, r3, [r0]
   d8d2a:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   d8d2c:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d8d2e:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   d8d32:	42ae      	cmp	r6, r5
   d8d34:	d005      	beq.n	d8d42 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
   d8d36:	f105 0008 	add.w	r0, r5, #8
   d8d3a:	f7ff fff3 	bl	d8d24 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d8d3e:	3514      	adds	r5, #20
   d8d40:	e7f7      	b.n	d8d32 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   d8d42:	6820      	ldr	r0, [r4, #0]
   d8d44:	f7fe fe06 	bl	d7954 <free>
}
   d8d48:	4620      	mov	r0, r4
   d8d4a:	bd70      	pop	{r4, r5, r6, pc}

000d8d4c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   d8d4c:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d8d4e:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   d8d52:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d8d54:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
   d8d58:	42ae      	cmp	r6, r5
   d8d5a:	d004      	beq.n	d8d66 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   d8d5c:	4628      	mov	r0, r5
   d8d5e:	f000 ffe3 	bl	d9d28 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
   d8d62:	3510      	adds	r5, #16
   d8d64:	e7f8      	b.n	d8d58 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   d8d66:	6820      	ldr	r0, [r4, #0]
   d8d68:	f7fe fdf4 	bl	d7954 <free>
}
   d8d6c:	4620      	mov	r0, r4
   d8d6e:	bd70      	pop	{r4, r5, r6, pc}

000d8d70 <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
   d8d70:	b510      	push	{r4, lr}
   d8d72:	4604      	mov	r4, r0
   d8d74:	300c      	adds	r0, #12
   d8d76:	f7ff ffd5 	bl	d8d24 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d8d7a:	4620      	mov	r0, r4
   d8d7c:	f7ff ffe6 	bl	d8d4c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   d8d80:	4620      	mov	r0, r4
   d8d82:	bd10      	pop	{r4, pc}

000d8d84 <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
   d8d84:	b510      	push	{r4, lr}
    virtual ~LogHandler() = default;
   d8d86:	4b04      	ldr	r3, [pc, #16]	; (d8d98 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
class StreamLogHandler: public LogHandler {
   d8d88:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
   d8d8a:	f840 3b04 	str.w	r3, [r0], #4
   d8d8e:	f7ff ffef 	bl	d8d70 <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
   d8d92:	4620      	mov	r0, r4
   d8d94:	bd10      	pop	{r4, pc}
   d8d96:	bf00      	nop
   d8d98:	000de9f8 	.word	0x000de9f8

000d8d9c <_ZN5spark16StreamLogHandlerD0Ev>:
   d8d9c:	b510      	push	{r4, lr}
   d8d9e:	4604      	mov	r4, r0
   d8da0:	f7ff fff0 	bl	d8d84 <_ZN5spark16StreamLogHandlerD1Ev>
   d8da4:	4620      	mov	r0, r4
   d8da6:	2124      	movs	r1, #36	; 0x24
   d8da8:	f002 fc04 	bl	db5b4 <_ZdlPvj>
   d8dac:	4620      	mov	r0, r4
   d8dae:	bd10      	pop	{r4, pc}

000d8db0 <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
   d8db0:	b510      	push	{r4, lr}
   d8db2:	4b03      	ldr	r3, [pc, #12]	; (d8dc0 <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   d8db4:	6003      	str	r3, [r0, #0]
   d8db6:	4604      	mov	r4, r0
   d8db8:	f7ff ffe4 	bl	d8d84 <_ZN5spark16StreamLogHandlerD1Ev>
   d8dbc:	4620      	mov	r0, r4
   d8dbe:	bd10      	pop	{r4, pc}
   d8dc0:	000df23c 	.word	0x000df23c

000d8dc4 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   d8dc4:	b510      	push	{r4, lr}
   d8dc6:	4604      	mov	r4, r0
   d8dc8:	f7ff fff2 	bl	d8db0 <_ZN5spark20JSONStreamLogHandlerD1Ev>
   d8dcc:	4620      	mov	r0, r4
   d8dce:	2124      	movs	r1, #36	; 0x24
   d8dd0:	f002 fbf0 	bl	db5b4 <_ZdlPvj>
   d8dd4:	4620      	mov	r0, r4
   d8dd6:	bd10      	pop	{r4, pc}

000d8dd8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
   d8dd8:	2200      	movs	r2, #0
   d8dda:	e9c0 2200 	strd	r2, r2, [r0]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   d8dde:	b510      	push	{r4, lr}
        capacity_(0) {
   d8de0:	6082      	str	r2, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   d8de2:	680c      	ldr	r4, [r1, #0]
   d8de4:	6004      	str	r4, [r0, #0]
   d8de6:	684c      	ldr	r4, [r1, #4]
   d8de8:	6044      	str	r4, [r0, #4]
   d8dea:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d8dec:	600a      	str	r2, [r1, #0]
   d8dee:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   d8df0:	6084      	str	r4, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d8df2:	608a      	str	r2, [r1, #8]
}
   d8df4:	bd10      	pop	{r4, pc}

000d8df6 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      ~lock_guard()
   d8df6:	b510      	push	{r4, lr}
      { _M_device.unlock(); }
   d8df8:	6803      	ldr	r3, [r0, #0]
      ~lock_guard()
   d8dfa:	4604      	mov	r4, r0
    }

    void lock() { os_mutex_recursive_lock(handle_); }
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d8dfc:	6818      	ldr	r0, [r3, #0]
   d8dfe:	f7fe fa67 	bl	d72d0 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   d8e02:	4620      	mov	r0, r4
   d8e04:	bd10      	pop	{r4, pc}
	...

000d8e08 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   d8e08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d8e0c:	b087      	sub	sp, #28
   d8e0e:	4680      	mov	r8, r0
   d8e10:	9303      	str	r3, [sp, #12]
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   d8e12:	4b1c      	ldr	r3, [pc, #112]	; (d8e84 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
   d8e14:	685b      	ldr	r3, [r3, #4]
   d8e16:	f3c3 0308 	ubfx	r3, r3, #0, #9
   d8e1a:	4689      	mov	r9, r1
   d8e1c:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d8e1e:	b96b      	cbnz	r3, d8e3c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
   d8e20:	f7ff feb8 	bl	d8b94 <_ZN5spark10LogManager8instanceEv>
   d8e24:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   d8e26:	f100 0324 	add.w	r3, r0, #36	; 0x24
    void lock() { os_mutex_recursive_lock(handle_); }
   d8e2a:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d8e2c:	9305      	str	r3, [sp, #20]
   d8e2e:	f7fe fa47 	bl	d72c0 <os_mutex_recursive_lock>
        // prevent re-entry
        if (that->isActive()) {
   d8e32:	7b23      	ldrb	r3, [r4, #12]
   d8e34:	b12b      	cbz	r3, d8e42 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
   d8e36:	a805      	add	r0, sp, #20
   d8e38:	f7ff ffdd 	bl	d8df6 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   d8e3c:	b007      	add	sp, #28
   d8e3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   d8e42:	2301      	movs	r3, #1
   d8e44:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
   d8e46:	e9d4 5300 	ldrd	r5, r3, [r4]
            handler->message(msg, (LogLevel)level, category, *attr);
   d8e4a:	fa5f f989 	uxtb.w	r9, r9
   d8e4e:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   d8e52:	45aa      	cmp	sl, r5
   d8e54:	d012      	beq.n	d8e7c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
   d8e56:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
   d8e5a:	4631      	mov	r1, r6
   d8e5c:	1d38      	adds	r0, r7, #4
   d8e5e:	f7ff fe25 	bl	d8aac <_ZNK5spark6detail9LogFilter5levelEPKc>
   d8e62:	4581      	cmp	r9, r0
   d8e64:	d3f5      	bcc.n	d8e52 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
   d8e66:	683b      	ldr	r3, [r7, #0]
   d8e68:	9a03      	ldr	r2, [sp, #12]
   d8e6a:	9200      	str	r2, [sp, #0]
   d8e6c:	f8d3 b008 	ldr.w	fp, [r3, #8]
   d8e70:	464a      	mov	r2, r9
   d8e72:	4633      	mov	r3, r6
   d8e74:	4641      	mov	r1, r8
   d8e76:	4638      	mov	r0, r7
   d8e78:	47d8      	blx	fp
   d8e7a:	e7ea      	b.n	d8e52 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
   d8e7c:	2300      	movs	r3, #0
   d8e7e:	7323      	strb	r3, [r4, #12]
   d8e80:	e7d9      	b.n	d8e36 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
   d8e82:	bf00      	nop
   d8e84:	e000ed00 	.word	0xe000ed00

000d8e88 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   d8e88:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d8e8c:	469b      	mov	fp, r3
   d8e8e:	4b1a      	ldr	r3, [pc, #104]	; (d8ef8 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
   d8e90:	685b      	ldr	r3, [r3, #4]
   d8e92:	f3c3 0308 	ubfx	r3, r3, #0, #9
   d8e96:	4680      	mov	r8, r0
   d8e98:	4689      	mov	r9, r1
   d8e9a:	4616      	mov	r6, r2
    if (HAL_IsISR()) {
   d8e9c:	b96b      	cbnz	r3, d8eba <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
   d8e9e:	f7ff fe79 	bl	d8b94 <_ZN5spark10LogManager8instanceEv>
   d8ea2:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   d8ea4:	f100 0324 	add.w	r3, r0, #36	; 0x24
   d8ea8:	6a40      	ldr	r0, [r0, #36]	; 0x24
   d8eaa:	9301      	str	r3, [sp, #4]
   d8eac:	f7fe fa08 	bl	d72c0 <os_mutex_recursive_lock>
        if (that->isActive()) {
   d8eb0:	7b23      	ldrb	r3, [r4, #12]
   d8eb2:	b12b      	cbz	r3, d8ec0 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
   d8eb4:	a801      	add	r0, sp, #4
   d8eb6:	f7ff ff9e 	bl	d8df6 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   d8eba:	b003      	add	sp, #12
   d8ebc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
   d8ec0:	2301      	movs	r3, #1
   d8ec2:	7323      	strb	r3, [r4, #12]
   d8ec4:	e9d4 5300 	ldrd	r5, r3, [r4]
    if (level >= filter_.level(category)) {
   d8ec8:	b2f6      	uxtb	r6, r6
   d8eca:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   d8ece:	4555      	cmp	r5, sl
   d8ed0:	d00e      	beq.n	d8ef0 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
   d8ed2:	f855 7b04 	ldr.w	r7, [r5], #4
   d8ed6:	4659      	mov	r1, fp
   d8ed8:	1d38      	adds	r0, r7, #4
   d8eda:	f7ff fde7 	bl	d8aac <_ZNK5spark6detail9LogFilter5levelEPKc>
   d8ede:	4286      	cmp	r6, r0
   d8ee0:	d3f5      	bcc.n	d8ece <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
   d8ee2:	683b      	ldr	r3, [r7, #0]
   d8ee4:	464a      	mov	r2, r9
   d8ee6:	68db      	ldr	r3, [r3, #12]
   d8ee8:	4641      	mov	r1, r8
   d8eea:	4638      	mov	r0, r7
   d8eec:	4798      	blx	r3
   d8eee:	e7ee      	b.n	d8ece <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
   d8ef0:	2300      	movs	r3, #0
   d8ef2:	7323      	strb	r3, [r4, #12]
   d8ef4:	e7de      	b.n	d8eb4 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
   d8ef6:	bf00      	nop
   d8ef8:	e000ed00 	.word	0xe000ed00

000d8efc <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   d8efc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d8f00:	4b16      	ldr	r3, [pc, #88]	; (d8f5c <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
   d8f02:	685b      	ldr	r3, [r3, #4]
   d8f04:	f3c3 0308 	ubfx	r3, r3, #0, #9
   d8f08:	4605      	mov	r5, r0
   d8f0a:	460f      	mov	r7, r1
    if (HAL_IsISR()) {
   d8f0c:	bb1b      	cbnz	r3, d8f56 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
   d8f0e:	f7ff fe41 	bl	d8b94 <_ZN5spark10LogManager8instanceEv>
    LOG_WITH_LOCK(that->mutex_) {
   d8f12:	f100 0324 	add.w	r3, r0, #36	; 0x24
    LogManager *that = instance();
   d8f16:	4604      	mov	r4, r0
   d8f18:	6a40      	ldr	r0, [r0, #36]	; 0x24
   d8f1a:	9301      	str	r3, [sp, #4]
   d8f1c:	f7fe f9d0 	bl	d72c0 <os_mutex_recursive_lock>
   d8f20:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
   d8f24:	2446      	movs	r4, #70	; 0x46
   d8f26:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   d8f2a:	45b0      	cmp	r8, r6
   d8f2c:	d109      	bne.n	d8f42 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
   d8f2e:	a801      	add	r0, sp, #4
   d8f30:	f7ff ff61 	bl	d8df6 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
   d8f34:	42a5      	cmp	r5, r4
   d8f36:	bfb4      	ite	lt
   d8f38:	2000      	movlt	r0, #0
   d8f3a:	2001      	movge	r0, #1
}
   d8f3c:	b002      	add	sp, #8
   d8f3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
   d8f42:	f856 0b04 	ldr.w	r0, [r6], #4
   d8f46:	4639      	mov	r1, r7
   d8f48:	3004      	adds	r0, #4
   d8f4a:	f7ff fdaf 	bl	d8aac <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
   d8f4e:	4284      	cmp	r4, r0
   d8f50:	bfa8      	it	ge
   d8f52:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
   d8f54:	e7e9      	b.n	d8f2a <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
   d8f56:	2000      	movs	r0, #0
   d8f58:	e7f0      	b.n	d8f3c <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
   d8f5a:	bf00      	nop
   d8f5c:	e000ed00 	.word	0xe000ed00

000d8f60 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d8f60:	b570      	push	{r4, r5, r6, lr}
   d8f62:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   d8f64:	e9d0 0200 	ldrd	r0, r2, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d8f68:	460b      	mov	r3, r1
    T* const p = find(data_, data_ + size_, value);
   d8f6a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
   d8f6e:	4282      	cmp	r2, r0
   d8f70:	d007      	beq.n	d8f82 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x22>
   d8f72:	4601      	mov	r1, r0
            if (*p == value) {
   d8f74:	681d      	ldr	r5, [r3, #0]
   d8f76:	f851 6b04 	ldr.w	r6, [r1], #4
   d8f7a:	42ae      	cmp	r6, r5
   d8f7c:	d003      	beq.n	d8f86 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x26>
   d8f7e:	4608      	mov	r0, r1
   d8f80:	e7f5      	b.n	d8f6e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
   d8f82:	2000      	movs	r0, #0
}
   d8f84:	bd70      	pop	{r4, r5, r6, pc}
        ::memmove(dest, p, (end - p) * sizeof(T));
   d8f86:	1a52      	subs	r2, r2, r1
   d8f88:	f003 fbc6 	bl	dc718 <memmove>
    --size_;
   d8f8c:	6863      	ldr	r3, [r4, #4]
   d8f8e:	3b01      	subs	r3, #1
   d8f90:	6063      	str	r3, [r4, #4]
    return true;
   d8f92:	2001      	movs	r0, #1
   d8f94:	e7f6      	b.n	d8f84 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x24>

000d8f96 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
   d8f96:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    LOG_WITH_LOCK(mutex_) {
   d8f98:	f100 0324 	add.w	r3, r0, #36	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
   d8f9c:	4604      	mov	r4, r0
   d8f9e:	6a40      	ldr	r0, [r0, #36]	; 0x24
   d8fa0:	9101      	str	r1, [sp, #4]
   d8fa2:	9303      	str	r3, [sp, #12]
   d8fa4:	f7fe f98c 	bl	d72c0 <os_mutex_recursive_lock>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   d8fa8:	a901      	add	r1, sp, #4
   d8faa:	4620      	mov	r0, r4
   d8fac:	f7ff ffd8 	bl	d8f60 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   d8fb0:	b118      	cbz	r0, d8fba <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
   d8fb2:	6863      	ldr	r3, [r4, #4]
   d8fb4:	b90b      	cbnz	r3, d8fba <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
   d8fb6:	f7ff fe15 	bl	d8be4 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   d8fba:	a803      	add	r0, sp, #12
   d8fbc:	f7ff ff1b 	bl	d8df6 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   d8fc0:	b004      	add	sp, #16
   d8fc2:	bd10      	pop	{r4, pc}

000d8fc4 <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
void spark::LogManager::destroyFactoryHandlers() {
   d8fc4:	b570      	push	{r4, r5, r6, lr}
    return data_ + size_;
   d8fc6:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
   d8fca:	2318      	movs	r3, #24
   d8fcc:	4604      	mov	r4, r0
   d8fce:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   d8fd2:	42ae      	cmp	r6, r5
   d8fd4:	d015      	beq.n	d9002 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   d8fd6:	f105 0110 	add.w	r1, r5, #16
   d8fda:	4620      	mov	r0, r4
   d8fdc:	f7ff ffc0 	bl	d8f60 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   d8fe0:	6863      	ldr	r3, [r4, #4]
   d8fe2:	b90b      	cbnz	r3, d8fe8 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   d8fe4:	f7ff fdfe 	bl	d8be4 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
   d8fe8:	69e0      	ldr	r0, [r4, #28]
   d8fea:	6929      	ldr	r1, [r5, #16]
   d8fec:	6803      	ldr	r3, [r0, #0]
   d8fee:	68db      	ldr	r3, [r3, #12]
   d8ff0:	4798      	blx	r3
        if (h.stream) {
   d8ff2:	6969      	ldr	r1, [r5, #20]
   d8ff4:	b119      	cbz	r1, d8ffe <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   d8ff6:	6a20      	ldr	r0, [r4, #32]
   d8ff8:	6803      	ldr	r3, [r0, #0]
   d8ffa:	68db      	ldr	r3, [r3, #12]
   d8ffc:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
   d8ffe:	3518      	adds	r5, #24
   d9000:	e7e7      	b.n	d8fd2 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
   d9002:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   d9006:	2618      	movs	r6, #24
   d9008:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   d900c:	42ae      	cmp	r6, r5
   d900e:	d004      	beq.n	d901a <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
   d9010:	4628      	mov	r0, r5
   d9012:	f000 fe89 	bl	d9d28 <_ZN6StringD1Ev>
   d9016:	3518      	adds	r5, #24
   d9018:	e7f8      	b.n	d900c <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
   d901a:	2300      	movs	r3, #0
   d901c:	6163      	str	r3, [r4, #20]
}
   d901e:	bd70      	pop	{r4, r5, r6, pc}

000d9020 <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
   d9020:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d9022:	4604      	mov	r4, r0
    resetSystemCallbacks();
   d9024:	f7ff fdde 	bl	d8be4 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   d9028:	f104 0324 	add.w	r3, r4, #36	; 0x24
   d902c:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d902e:	9301      	str	r3, [sp, #4]
   d9030:	f7fe f946 	bl	d72c0 <os_mutex_recursive_lock>
         destroyFactoryHandlers();
   d9034:	4620      	mov	r0, r4
   d9036:	f7ff ffc5 	bl	d8fc4 <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
   d903a:	a801      	add	r0, sp, #4
   d903c:	f7ff fedb 	bl	d8df6 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
   d9040:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d9042:	b108      	cbz	r0, d9048 <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
   d9044:	f7fe f934 	bl	d72b0 <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
   d9048:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   d904c:	2618      	movs	r6, #24
   d904e:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   d9052:	42ae      	cmp	r6, r5
   d9054:	d004      	beq.n	d9060 <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
   d9056:	4628      	mov	r0, r5
   d9058:	f000 fe66 	bl	d9d28 <_ZN6StringD1Ev>
   d905c:	3518      	adds	r5, #24
   d905e:	e7f8      	b.n	d9052 <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
   d9060:	6920      	ldr	r0, [r4, #16]
   d9062:	f7fe fc77 	bl	d7954 <free>
   d9066:	6820      	ldr	r0, [r4, #0]
   d9068:	f7fe fc74 	bl	d7954 <free>
}
   d906c:	4620      	mov	r0, r4
   d906e:	b002      	add	sp, #8
   d9070:	bd70      	pop	{r4, r5, r6, pc}
	...

000d9074 <__tcf_2>:
    static LogManager mgr;
   d9074:	4801      	ldr	r0, [pc, #4]	; (d907c <__tcf_2+0x8>)
   d9076:	f7ff bfd3 	b.w	d9020 <_ZN5spark10LogManagerD1Ev>
   d907a:	bf00      	nop
   d907c:	2003e644 	.word	0x2003e644

000d9080 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
   d9080:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d9082:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d9084:	4606      	mov	r6, r0
   d9086:	460c      	mov	r4, r1
   d9088:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d908a:	d927      	bls.n	d90dc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x5c>
   d908c:	4290      	cmp	r0, r2
   d908e:	d226      	bcs.n	d90de <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x5e>
            --end;
   d9090:	f1a2 0514 	sub.w	r5, r2, #20
            dest += end - p - 1;
   d9094:	1a6c      	subs	r4, r5, r1
   d9096:	f1a1 0714 	sub.w	r7, r1, #20
   d909a:	4404      	add	r4, r0
        capacity_(0) {
   d909c:	2600      	movs	r6, #0
            for (; end != p; --end, --dest) {
   d909e:	42af      	cmp	r7, r5
   d90a0:	d03d      	beq.n	d911e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
                new(dest) T(std::move(*end));
   d90a2:	b1a4      	cbz	r4, d90ce <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x4e>
struct spark::detail::LogFilter::Node {
   d90a4:	682b      	ldr	r3, [r5, #0]
   d90a6:	6023      	str	r3, [r4, #0]
   d90a8:	88ab      	ldrh	r3, [r5, #4]
   d90aa:	80a3      	strh	r3, [r4, #4]
   d90ac:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
   d90b0:	80e3      	strh	r3, [r4, #6]
        capacity_(0) {
   d90b2:	e9c4 6602 	strd	r6, r6, [r4, #8]
   d90b6:	6126      	str	r6, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   d90b8:	68ab      	ldr	r3, [r5, #8]
   d90ba:	60a3      	str	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d90bc:	60ae      	str	r6, [r5, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d90be:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   d90c0:	68ea      	ldr	r2, [r5, #12]
   d90c2:	60e2      	str	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d90c4:	60eb      	str	r3, [r5, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d90c6:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   d90c8:	692a      	ldr	r2, [r5, #16]
   d90ca:	6122      	str	r2, [r4, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d90cc:	612b      	str	r3, [r5, #16]
   d90ce:	f105 0008 	add.w	r0, r5, #8
   d90d2:	f7ff fe27 	bl	d8d24 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
   d90d6:	3d14      	subs	r5, #20
   d90d8:	3c14      	subs	r4, #20
   d90da:	e7e0      	b.n	d909e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1e>
        } else if (dest != p) {
   d90dc:	d01f      	beq.n	d911e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
        capacity_(0) {
   d90de:	2700      	movs	r7, #0
            for (; p != end; ++p, ++dest) {
   d90e0:	42ac      	cmp	r4, r5
   d90e2:	d01c      	beq.n	d911e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
                new(dest) T(std::move(*p));
   d90e4:	b1a6      	cbz	r6, d9110 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x90>
   d90e6:	6823      	ldr	r3, [r4, #0]
   d90e8:	6033      	str	r3, [r6, #0]
   d90ea:	88a3      	ldrh	r3, [r4, #4]
   d90ec:	80b3      	strh	r3, [r6, #4]
   d90ee:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
   d90f2:	80f3      	strh	r3, [r6, #6]
        capacity_(0) {
   d90f4:	e9c6 7702 	strd	r7, r7, [r6, #8]
   d90f8:	6137      	str	r7, [r6, #16]
      __a = _GLIBCXX_MOVE(__b);
   d90fa:	68a3      	ldr	r3, [r4, #8]
   d90fc:	60b3      	str	r3, [r6, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d90fe:	60a7      	str	r7, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d9100:	68f3      	ldr	r3, [r6, #12]
      __a = _GLIBCXX_MOVE(__b);
   d9102:	68e2      	ldr	r2, [r4, #12]
   d9104:	60f2      	str	r2, [r6, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d9106:	60e3      	str	r3, [r4, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d9108:	6933      	ldr	r3, [r6, #16]
      __a = _GLIBCXX_MOVE(__b);
   d910a:	6922      	ldr	r2, [r4, #16]
   d910c:	6132      	str	r2, [r6, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d910e:	6123      	str	r3, [r4, #16]
   d9110:	f104 0008 	add.w	r0, r4, #8
   d9114:	f7ff fe06 	bl	d8d24 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
   d9118:	3414      	adds	r4, #20
   d911a:	3614      	adds	r6, #20
   d911c:	e7e0      	b.n	d90e0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x60>
    }
   d911e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d9120 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   d9120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d9122:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
   d9126:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   d9128:	4604      	mov	r4, r0
   d912a:	460e      	mov	r6, r1
   d912c:	4617      	mov	r7, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d912e:	db0d      	blt.n	d914c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x2c>
   d9130:	3501      	adds	r5, #1
        if (n > 0) {
   d9132:	2d00      	cmp	r5, #0
   d9134:	6800      	ldr	r0, [r0, #0]
   d9136:	dd04      	ble.n	d9142 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x22>
    return ::realloc(ptr, size);
   d9138:	00a9      	lsls	r1, r5, #2
   d913a:	f7fe fc13 	bl	d7964 <realloc>
            if (!d) {
   d913e:	b918      	cbnz	r0, d9148 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x28>
}
   d9140:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
   d9142:	f7fe fc07 	bl	d7954 <free>
        T* d = nullptr;
   d9146:	2000      	movs	r0, #0
        data_ = d;
   d9148:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   d914a:	60a5      	str	r5, [r4, #8]
    T* const p = data_ + i;
   d914c:	6825      	ldr	r5, [r4, #0]
    move(p + 1, p, data_ + size_);
   d914e:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   d9150:	eb05 0186 	add.w	r1, r5, r6, lsl #2
    move(p + 1, p, data_ + size_);
   d9154:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
   d9156:	eba2 0286 	sub.w	r2, r2, r6, lsl #2
   d915a:	1d08      	adds	r0, r1, #4
   d915c:	f003 fadc 	bl	dc718 <memmove>
    new(p) T(std::move(value));
   d9160:	f845 7026 	str.w	r7, [r5, r6, lsl #2]
    ++size_;
   d9164:	6863      	ldr	r3, [r4, #4]
   d9166:	3301      	adds	r3, #1
   d9168:	6063      	str	r3, [r4, #4]
    return true;
   d916a:	2001      	movs	r0, #1
   d916c:	e7e8      	b.n	d9140 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x20>

000d916e <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
   d916e:	b537      	push	{r0, r1, r2, r4, r5, lr}
    LOG_WITH_LOCK(mutex_) {
   d9170:	f100 0324 	add.w	r3, r0, #36	; 0x24
bool spark::LogManager::addHandler(LogHandler *handler) {
   d9174:	4604      	mov	r4, r0
    void lock() { os_mutex_recursive_lock(handle_); }
   d9176:	6a40      	ldr	r0, [r0, #36]	; 0x24
   d9178:	9301      	str	r3, [sp, #4]
   d917a:	460d      	mov	r5, r1
   d917c:	f7fe f8a0 	bl	d72c0 <os_mutex_recursive_lock>
    return find(data_, data_ + size_, value);
   d9180:	e9d4 3100 	ldrd	r3, r1, [r4]
   d9184:	eb03 0081 	add.w	r0, r3, r1, lsl #2
        for (; p != end; ++p) {
   d9188:	4283      	cmp	r3, r0
   d918a:	461a      	mov	r2, r3
   d918c:	d00b      	beq.n	d91a6 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x38>
            if (*p == value) {
   d918e:	6812      	ldr	r2, [r2, #0]
   d9190:	42aa      	cmp	r2, r5
   d9192:	f103 0304 	add.w	r3, r3, #4
   d9196:	d1f7      	bne.n	d9188 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
    LOG_WITH_LOCK(mutex_) {
   d9198:	a801      	add	r0, sp, #4
   d919a:	f7ff fe2c 	bl	d8df6 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
            return false;
   d919e:	2500      	movs	r5, #0
}
   d91a0:	4628      	mov	r0, r5
   d91a2:	b003      	add	sp, #12
   d91a4:	bd30      	pop	{r4, r5, pc}
    return insert(size_, std::move(value));
   d91a6:	462a      	mov	r2, r5
   d91a8:	4620      	mov	r0, r4
   d91aa:	f7ff ffb9 	bl	d9120 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   d91ae:	4605      	mov	r5, r0
   d91b0:	2800      	cmp	r0, #0
   d91b2:	d0f1      	beq.n	d9198 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x2a>
        if (activeHandlers_.size() == 1) {
   d91b4:	6863      	ldr	r3, [r4, #4]
   d91b6:	2b01      	cmp	r3, #1
   d91b8:	d101      	bne.n	d91be <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x50>
            setSystemCallbacks();
   d91ba:	f7ff fd07 	bl	d8bcc <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   d91be:	a801      	add	r0, sp, #4
   d91c0:	f7ff fe19 	bl	d8df6 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   d91c4:	e7ec      	b.n	d91a0 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x32>

000d91c6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   d91c6:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d91c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d91ca:	4604      	mov	r4, r0
   d91cc:	460d      	mov	r5, r1
   d91ce:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   d91d0:	d914      	bls.n	d91fc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   d91d2:	4290      	cmp	r0, r2
   d91d4:	d213      	bcs.n	d91fe <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
   d91d6:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
   d91da:	1a75      	subs	r5, r6, r1
   d91dc:	f1a1 0710 	sub.w	r7, r1, #16
   d91e0:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   d91e2:	42b7      	cmp	r7, r6
   d91e4:	d018      	beq.n	d9218 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   d91e6:	b11c      	cbz	r4, d91f0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   d91e8:	4631      	mov	r1, r6
   d91ea:	4620      	mov	r0, r4
   d91ec:	f000 fe18 	bl	d9e20 <_ZN6StringC1EOS_>
                end->~T();
   d91f0:	4630      	mov	r0, r6
   d91f2:	f000 fd99 	bl	d9d28 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   d91f6:	3e10      	subs	r6, #16
   d91f8:	3c10      	subs	r4, #16
   d91fa:	e7f2      	b.n	d91e2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   d91fc:	d00c      	beq.n	d9218 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   d91fe:	42b5      	cmp	r5, r6
   d9200:	d00a      	beq.n	d9218 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   d9202:	b11c      	cbz	r4, d920c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   d9204:	4629      	mov	r1, r5
   d9206:	4620      	mov	r0, r4
   d9208:	f000 fe0a 	bl	d9e20 <_ZN6StringC1EOS_>
                p->~T();
   d920c:	4628      	mov	r0, r5
   d920e:	f000 fd8b 	bl	d9d28 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   d9212:	3510      	adds	r5, #16
   d9214:	3410      	adds	r4, #16
   d9216:	e7f2      	b.n	d91fe <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
   d9218:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d921a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
   d921a:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   d921c:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   d921e:	4605      	mov	r5, r0
        if (n > 0) {
   d9220:	dd11      	ble.n	d9246 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
   d9222:	0130      	lsls	r0, r6, #4
   d9224:	f7fe fb8e 	bl	d7944 <malloc>
            if (!d) {
   d9228:	4604      	mov	r4, r0
   d922a:	b158      	cbz	r0, d9244 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   d922c:	e9d5 1200 	ldrd	r1, r2, [r5]
   d9230:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   d9234:	f7ff ffc7 	bl	d91c6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   d9238:	6828      	ldr	r0, [r5, #0]
   d923a:	f7fe fb8b 	bl	d7954 <free>
        data_ = d;
   d923e:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d9240:	60ae      	str	r6, [r5, #8]
        return true;
   d9242:	2001      	movs	r0, #1
    }
   d9244:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   d9246:	2400      	movs	r4, #0
   d9248:	e7f6      	b.n	d9238 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

000d924a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   d924a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d924e:	4691      	mov	r9, r2
   d9250:	b097      	sub	sp, #92	; 0x5c
        capacity_(0) {
   d9252:	2300      	movs	r3, #0
   d9254:	9103      	str	r1, [sp, #12]
    if (!cats.reserve(filters.size())) {
   d9256:	f8d9 1004 	ldr.w	r1, [r9, #4]
   d925a:	930c      	str	r3, [sp, #48]	; 0x30
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   d925c:	2246      	movs	r2, #70	; 0x46
    if (n > capacity_ && !realloc(n)) {
   d925e:	4299      	cmp	r1, r3
        capacity_(0) {
   d9260:	e9c0 3300 	strd	r3, r3, [r0]
   d9264:	e9c0 3302 	strd	r3, r3, [r0, #8]
   d9268:	e9c0 3304 	strd	r3, r3, [r0, #16]
   d926c:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   d9270:	4604      	mov	r4, r0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   d9272:	7602      	strb	r2, [r0, #24]
    if (n > capacity_ && !realloc(n)) {
   d9274:	dc23      	bgt.n	d92be <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
   d9276:	e9d9 5700 	ldrd	r5, r7, [r9]
   d927a:	2314      	movs	r3, #20
   d927c:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
   d9280:	42af      	cmp	r7, r5
   d9282:	d03b      	beq.n	d92fc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
   d9284:	4629      	mov	r1, r5
   d9286:	a80d      	add	r0, sp, #52	; 0x34
   d9288:	f000 fdca 	bl	d9e20 <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
   d928c:	a90d      	add	r1, sp, #52	; 0x34
   d928e:	a811      	add	r0, sp, #68	; 0x44
   d9290:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   d9292:	f000 fdc5 	bl	d9e20 <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d9296:	e9dd 130b 	ldrd	r1, r3, [sp, #44]	; 0x2c
   d929a:	4299      	cmp	r1, r3
   d929c:	da1b      	bge.n	d92d6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
   d929e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    move(p + 1, p, data_ + size_);
   d92a0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    T* const p = data_ + i;
   d92a2:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   d92a6:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   d92aa:	4631      	mov	r1, r6
   d92ac:	f106 0010 	add.w	r0, r6, #16
   d92b0:	f7ff ff89 	bl	d91c6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   d92b4:	b9ee      	cbnz	r6, d92f2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
   d92b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   d92b8:	3301      	adds	r3, #1
   d92ba:	930b      	str	r3, [sp, #44]	; 0x2c
    return true;
   d92bc:	e011      	b.n	d92e2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
   d92be:	a80a      	add	r0, sp, #40	; 0x28
   d92c0:	f7ff ffab 	bl	d921a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   d92c4:	2800      	cmp	r0, #0
   d92c6:	d1d6      	bne.n	d9276 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
    Vector<String> cats;
   d92c8:	a80a      	add	r0, sp, #40	; 0x28
   d92ca:	f7ff fd3f 	bl	d8d4c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   d92ce:	4620      	mov	r0, r4
   d92d0:	b017      	add	sp, #92	; 0x5c
   d92d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d92d6:	3101      	adds	r1, #1
   d92d8:	a80a      	add	r0, sp, #40	; 0x28
   d92da:	f7ff ff9e 	bl	d921a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   d92de:	2800      	cmp	r0, #0
   d92e0:	d1dd      	bne.n	d929e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
   d92e2:	a811      	add	r0, sp, #68	; 0x44
   d92e4:	f000 fd20 	bl	d9d28 <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
   d92e8:	a80d      	add	r0, sp, #52	; 0x34
   d92ea:	f000 fd1d 	bl	d9d28 <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
   d92ee:	3514      	adds	r5, #20
   d92f0:	e7c6      	b.n	d9280 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
   d92f2:	a911      	add	r1, sp, #68	; 0x44
   d92f4:	4630      	mov	r0, r6
   d92f6:	f000 fd93 	bl	d9e20 <_ZN6StringC1EOS_>
   d92fa:	e7dc      	b.n	d92b6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
   d92fc:	2600      	movs	r6, #0
   d92fe:	e9cd 660d 	strd	r6, r6, [sp, #52]	; 0x34
   d9302:	960f      	str	r6, [sp, #60]	; 0x3c
        size_t size = 0; // Name length
   d9304:	4637      	mov	r7, r6
   d9306:	f04f 0a14 	mov.w	sl, #20
    for (int i = 0; i < cats.size(); ++i) {
   d930a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   d930e:	429e      	cmp	r6, r3
   d9310:	f280 8097 	bge.w	d9442 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f8>
        const char *category = cats.at(i).c_str();
   d9314:	0133      	lsls	r3, r6, #4
   d9316:	58d3      	ldr	r3, [r2, r3]
   d9318:	9308      	str	r3, [sp, #32]
        if (!category) {
   d931a:	b90b      	cbnz	r3, d9320 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd6>
    for (int i = 0; i < cats.size(); ++i) {
   d931c:	3601      	adds	r6, #1
   d931e:	e7f4      	b.n	d930a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xc0>
        size_t size = 0; // Name length
   d9320:	fb0a f306 	mul.w	r3, sl, r6
   d9324:	9709      	str	r7, [sp, #36]	; 0x24
   d9326:	9302      	str	r3, [sp, #8]
        Vector<Node> *pNodes = &nodes; // Root nodes
   d9328:	ad0d      	add	r5, sp, #52	; 0x34
        while ((name = nextSubcategoryName(category, size))) {
   d932a:	a909      	add	r1, sp, #36	; 0x24
   d932c:	a808      	add	r0, sp, #32
   d932e:	f7ff fb00 	bl	d8932 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   d9332:	4683      	mov	fp, r0
   d9334:	2800      	cmp	r0, #0
   d9336:	d0f1      	beq.n	d931c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
            const int index = nodeIndex(*pNodes, name, size, found);
   d9338:	4601      	mov	r1, r0
   d933a:	9a09      	ldr	r2, [sp, #36]	; 0x24
            bool found = false;
   d933c:	f88d 701f 	strb.w	r7, [sp, #31]
            const int index = nodeIndex(*pNodes, name, size, found);
   d9340:	f10d 031f 	add.w	r3, sp, #31
   d9344:	4628      	mov	r0, r5
   d9346:	f7ff fb73 	bl	d8a30 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d934a:	f89d 801f 	ldrb.w	r8, [sp, #31]
            const int index = nodeIndex(*pNodes, name, size, found);
   d934e:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d9350:	f1b8 0f00 	cmp.w	r8, #0
   d9354:	d166      	bne.n	d9424 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1da>
   d9356:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
            level(-1) {
   d935a:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
   d935e:	e9cd 8813 	strd	r8, r8, [sp, #76]	; 0x4c
   d9362:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d9366:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
   d936a:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
   d936e:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d9372:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   d9376:	4293      	cmp	r3, r2
   d9378:	db1a      	blt.n	d93b0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x166>
   d937a:	f103 0b01 	add.w	fp, r3, #1
        if (n > 0) {
   d937e:	f1bb 0f00 	cmp.w	fp, #0
   d9382:	dd4a      	ble.n	d941a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d0>
    return ::malloc(size);
   d9384:	fb0a f00b 	mul.w	r0, sl, fp
   d9388:	f7fe fadc 	bl	d7944 <malloc>
            if (!d) {
   d938c:	9004      	str	r0, [sp, #16]
   d938e:	2800      	cmp	r0, #0
   d9390:	d045      	beq.n	d941e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d4>
            move(d, data_, data_ + size_);
   d9392:	e9d5 1200 	ldrd	r1, r2, [r5]
   d9396:	fb0a 1202 	mla	r2, sl, r2, r1
   d939a:	f7ff fe71 	bl	d9080 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
   d939e:	9b04      	ldr	r3, [sp, #16]
    ::free(ptr);
   d93a0:	6828      	ldr	r0, [r5, #0]
   d93a2:	9304      	str	r3, [sp, #16]
   d93a4:	f7fe fad6 	bl	d7954 <free>
        data_ = d;
   d93a8:	9b04      	ldr	r3, [sp, #16]
   d93aa:	602b      	str	r3, [r5, #0]
        capacity_ = n;
   d93ac:	f8c5 b008 	str.w	fp, [r5, #8]
    T* const p = data_ + i;
   d93b0:	9b01      	ldr	r3, [sp, #4]
   d93b2:	f8d5 b000 	ldr.w	fp, [r5]
    move(p + 1, p, data_ + size_);
   d93b6:	686a      	ldr	r2, [r5, #4]
    T* const p = data_ + i;
   d93b8:	fb0a f303 	mul.w	r3, sl, r3
   d93bc:	eb0b 0103 	add.w	r1, fp, r3
    move(p + 1, p, data_ + size_);
   d93c0:	f101 0014 	add.w	r0, r1, #20
   d93c4:	fb0a b202 	mla	r2, sl, r2, fp
   d93c8:	9104      	str	r1, [sp, #16]
    T* const p = data_ + i;
   d93ca:	9305      	str	r3, [sp, #20]
    move(p + 1, p, data_ + size_);
   d93cc:	f7ff fe58 	bl	d9080 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   d93d0:	9904      	ldr	r1, [sp, #16]
   d93d2:	b1a9      	cbz	r1, d9400 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1b6>
struct spark::detail::LogFilter::Node {
   d93d4:	9b05      	ldr	r3, [sp, #20]
   d93d6:	9a11      	ldr	r2, [sp, #68]	; 0x44
   d93d8:	f84b 2003 	str.w	r2, [fp, r3]
   d93dc:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
   d93e0:	808b      	strh	r3, [r1, #4]
   d93e2:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
   d93e6:	80cb      	strh	r3, [r1, #6]
        capacity_(0) {
   d93e8:	e9c1 7702 	strd	r7, r7, [r1, #8]
   d93ec:	610f      	str	r7, [r1, #16]
      __a = _GLIBCXX_MOVE(__b);
   d93ee:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   d93f0:	608b      	str	r3, [r1, #8]
   d93f2:	9b14      	ldr	r3, [sp, #80]	; 0x50
      __b = _GLIBCXX_MOVE(__tmp);
   d93f4:	9713      	str	r7, [sp, #76]	; 0x4c
      __a = _GLIBCXX_MOVE(__b);
   d93f6:	60cb      	str	r3, [r1, #12]
   d93f8:	9b15      	ldr	r3, [sp, #84]	; 0x54
      __b = _GLIBCXX_MOVE(__tmp);
   d93fa:	9714      	str	r7, [sp, #80]	; 0x50
      __a = _GLIBCXX_MOVE(__b);
   d93fc:	610b      	str	r3, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d93fe:	9715      	str	r7, [sp, #84]	; 0x54
    ++size_;
   d9400:	686b      	ldr	r3, [r5, #4]
   d9402:	3301      	adds	r3, #1
   d9404:	606b      	str	r3, [r5, #4]
   d9406:	a813      	add	r0, sp, #76	; 0x4c
   d9408:	f7ff fc8c 	bl	d8d24 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d940c:	f1b8 0f00 	cmp.w	r8, #0
   d9410:	d008      	beq.n	d9424 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1da>
    Vector<Node> nodes;
   d9412:	a80d      	add	r0, sp, #52	; 0x34
   d9414:	f7ff fc86 	bl	d8d24 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d9418:	e756      	b.n	d92c8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
   d941a:	4643      	mov	r3, r8
   d941c:	e7c0      	b.n	d93a0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x156>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d941e:	f04f 0801 	mov.w	r8, #1
   d9422:	e7f0      	b.n	d9406 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
    return data_[i];
   d9424:	9b01      	ldr	r3, [sp, #4]
   d9426:	682d      	ldr	r5, [r5, #0]
   d9428:	fb0a 5503 	mla	r5, sl, r3, r5
            if (!*category) { // Check if it's last subcategory
   d942c:	9b08      	ldr	r3, [sp, #32]
   d942e:	781b      	ldrb	r3, [r3, #0]
   d9430:	b92b      	cbnz	r3, d943e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f4>
                node.level = filters.at(i).level_;
   d9432:	f8d9 3000 	ldr.w	r3, [r9]
   d9436:	9a02      	ldr	r2, [sp, #8]
   d9438:	4413      	add	r3, r2
   d943a:	7c1b      	ldrb	r3, [r3, #16]
   d943c:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
   d943e:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
   d9440:	e773      	b.n	d932a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xe0>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d9442:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d9444:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d9446:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   d9448:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d944a:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d944c:	920b      	str	r2, [sp, #44]	; 0x2c
      __a = _GLIBCXX_MOVE(__b);
   d944e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
   d9450:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d9452:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   d9454:	60a2      	str	r2, [r4, #8]
   d9456:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
   d9458:	930d      	str	r3, [sp, #52]	; 0x34
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d945a:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   d945c:	60e2      	str	r2, [r4, #12]
   d945e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
      __b = _GLIBCXX_MOVE(__tmp);
   d9460:	930e      	str	r3, [sp, #56]	; 0x38
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d9462:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
   d9464:	6122      	str	r2, [r4, #16]
   d9466:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
      __b = _GLIBCXX_MOVE(__tmp);
   d9468:	930f      	str	r3, [sp, #60]	; 0x3c
    level_ = level;
   d946a:	9b03      	ldr	r3, [sp, #12]
   d946c:	910a      	str	r1, [sp, #40]	; 0x28
      __a = _GLIBCXX_MOVE(__b);
   d946e:	6162      	str	r2, [r4, #20]
   d9470:	7623      	strb	r3, [r4, #24]
   d9472:	e7ce      	b.n	d9412 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c8>

000d9474 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
   d9474:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
        filter_(level, filters) {
   d9476:	4605      	mov	r5, r0
   d9478:	4b09      	ldr	r3, [pc, #36]	; (d94a0 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>)
   d947a:	f845 3b04 	str.w	r3, [r5], #4
inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
   d947e:	4604      	mov	r4, r0
   d9480:	460e      	mov	r6, r1
        filter_(level, filters) {
   d9482:	a801      	add	r0, sp, #4
   d9484:	4611      	mov	r1, r2
   d9486:	f7fb fce7 	bl	d4e58 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d948a:	aa01      	add	r2, sp, #4
   d948c:	4631      	mov	r1, r6
   d948e:	4628      	mov	r0, r5
   d9490:	f7ff fedb 	bl	d924a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d9494:	a801      	add	r0, sp, #4
   d9496:	f7fa ffdd 	bl	d4454 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}
   d949a:	4620      	mov	r0, r4
   d949c:	b004      	add	sp, #16
   d949e:	bd70      	pop	{r4, r5, r6, pc}
   d94a0:	000de9f8 	.word	0x000de9f8

000d94a4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
   d94a4:	b5f0      	push	{r4, r5, r6, r7, lr}
   d94a6:	460f      	mov	r7, r1
   d94a8:	b087      	sub	sp, #28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d94aa:	4926      	ldr	r1, [pc, #152]	; (d9544 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa0>)
            Print *stream, const JSONValue &params) {
   d94ac:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d94ae:	4638      	mov	r0, r7
            Print *stream, const JSONValue &params) {
   d94b0:	4616      	mov	r6, r2
   d94b2:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d94b4:	f003 f98d 	bl	dc7d2 <strcmp>
   d94b8:	bb00      	cbnz	r0, d94fc <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x58>
        if (!stream) {
   d94ba:	b1e4      	cbz	r4, d94f6 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   d94bc:	4629      	mov	r1, r5
   d94be:	4668      	mov	r0, sp
   d94c0:	f7ff fc8a 	bl	d8dd8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   d94c4:	4920      	ldr	r1, [pc, #128]	; (d9548 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa4>)
   d94c6:	2024      	movs	r0, #36	; 0x24
   d94c8:	f002 f876 	bl	db5b8 <_ZnwjRKSt9nothrow_t>
   d94cc:	4605      	mov	r5, r0
   d94ce:	b170      	cbz	r0, d94ee <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
        stream_(&stream) {
   d94d0:	4669      	mov	r1, sp
   d94d2:	a803      	add	r0, sp, #12
   d94d4:	f7fb fcc0 	bl	d4e58 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d94d8:	aa03      	add	r2, sp, #12
   d94da:	4631      	mov	r1, r6
   d94dc:	4628      	mov	r0, r5
   d94de:	f7ff ffc9 	bl	d9474 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d94e2:	a803      	add	r0, sp, #12
   d94e4:	f7fa ffb6 	bl	d4454 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
    using StreamLogHandler::StreamLogHandler;
   d94e8:	4b18      	ldr	r3, [pc, #96]	; (d954c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa8>)
        stream_(&stream) {
   d94ea:	622c      	str	r4, [r5, #32]
    using StreamLogHandler::StreamLogHandler;
   d94ec:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   d94ee:	4668      	mov	r0, sp
   d94f0:	f7fa ffb0 	bl	d4454 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d94f4:	462c      	mov	r4, r5
}
   d94f6:	4620      	mov	r0, r4
   d94f8:	b007      	add	sp, #28
   d94fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   d94fc:	4914      	ldr	r1, [pc, #80]	; (d9550 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xac>)
   d94fe:	4638      	mov	r0, r7
   d9500:	f003 f967 	bl	dc7d2 <strcmp>
   d9504:	b9e0      	cbnz	r0, d9540 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x9c>
        if (!stream) {
   d9506:	2c00      	cmp	r4, #0
   d9508:	d0f5      	beq.n	d94f6 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   d950a:	4629      	mov	r1, r5
   d950c:	4668      	mov	r0, sp
   d950e:	f7ff fc63 	bl	d8dd8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   d9512:	490d      	ldr	r1, [pc, #52]	; (d9548 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa4>)
   d9514:	2024      	movs	r0, #36	; 0x24
   d9516:	f002 f84f 	bl	db5b8 <_ZnwjRKSt9nothrow_t>
   d951a:	4605      	mov	r5, r0
   d951c:	2800      	cmp	r0, #0
   d951e:	d0e6      	beq.n	d94ee <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
        stream_(&stream) {
   d9520:	4669      	mov	r1, sp
   d9522:	a803      	add	r0, sp, #12
   d9524:	f7fb fc98 	bl	d4e58 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d9528:	aa03      	add	r2, sp, #12
   d952a:	4631      	mov	r1, r6
   d952c:	4628      	mov	r0, r5
   d952e:	f7ff ffa1 	bl	d9474 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d9532:	a803      	add	r0, sp, #12
   d9534:	f7fa ff8e 	bl	d4454 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d9538:	4b06      	ldr	r3, [pc, #24]	; (d9554 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb0>)
   d953a:	602b      	str	r3, [r5, #0]
   d953c:	622c      	str	r4, [r5, #32]
}
   d953e:	e7d6      	b.n	d94ee <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
            return nullptr; // Output stream is not specified
   d9540:	2400      	movs	r4, #0
   d9542:	e7d8      	b.n	d94f6 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
   d9544:	000df1ad 	.word	0x000df1ad
   d9548:	000df45c 	.word	0x000df45c
   d954c:	000df23c 	.word	0x000df23c
   d9550:	000df1b1 	.word	0x000df1b1
   d9554:	000df224 	.word	0x000df224

000d9558 <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
   d9558:	4b01      	ldr	r3, [pc, #4]	; (d9560 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d955a:	4a02      	ldr	r2, [pc, #8]	; (d9564 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d955c:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d955e:	4770      	bx	lr
   d9560:	2003e640 	.word	0x2003e640
   d9564:	000df1c2 	.word	0x000df1c2

000d9568 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d9568:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d956c:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
   d956e:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d9572:	4604      	mov	r4, r0
   d9574:	460e      	mov	r6, r1
   d9576:	4617      	mov	r7, r2
   d9578:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
   d957a:	f001 fe0b 	bl	db194 <_Z16_fetch_usbserialv>
   d957e:	4581      	cmp	r9, r0
   d9580:	d04c      	beq.n	d961c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb4>
    if (attr.has_time) {
   d9582:	792b      	ldrb	r3, [r5, #4]
   d9584:	0719      	lsls	r1, r3, #28
   d9586:	d504      	bpl.n	d9592 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
   d9588:	696a      	ldr	r2, [r5, #20]
   d958a:	4954      	ldr	r1, [pc, #336]	; (d96dc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   d958c:	4620      	mov	r0, r4
   d958e:	f7ff fa40 	bl	d8a12 <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
   d9592:	f1b8 0f00 	cmp.w	r8, #0
   d9596:	d00d      	beq.n	d95b4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
   d9598:	215b      	movs	r1, #91	; 0x5b
   d959a:	4620      	mov	r0, r4
   d959c:	f7ff fa2d 	bl	d89fa <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   d95a0:	4641      	mov	r1, r8
   d95a2:	4620      	mov	r0, r4
   d95a4:	f7ff fa1a 	bl	d89dc <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   d95a8:	6823      	ldr	r3, [r4, #0]
   d95aa:	494d      	ldr	r1, [pc, #308]	; (d96e0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
   d95ac:	68db      	ldr	r3, [r3, #12]
   d95ae:	2202      	movs	r2, #2
   d95b0:	4620      	mov	r0, r4
   d95b2:	4798      	blx	r3
    if (attr.has_file) {
   d95b4:	792b      	ldrb	r3, [r5, #4]
   d95b6:	07da      	lsls	r2, r3, #31
   d95b8:	d523      	bpl.n	d9602 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9a>
        s = extractFileName(attr.file); // Strip directory path
   d95ba:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
   d95be:	212f      	movs	r1, #47	; 0x2f
   d95c0:	4640      	mov	r0, r8
   d95c2:	f003 f963 	bl	dc88c <strrchr>
    if (s1) {
   d95c6:	b108      	cbz	r0, d95cc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
   d95c8:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
   d95cc:	4641      	mov	r1, r8
   d95ce:	4620      	mov	r0, r4
   d95d0:	f7ff fa04 	bl	d89dc <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   d95d4:	792b      	ldrb	r3, [r5, #4]
   d95d6:	079b      	lsls	r3, r3, #30
   d95d8:	d508      	bpl.n	d95ec <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
   d95da:	213a      	movs	r1, #58	; 0x3a
   d95dc:	4620      	mov	r0, r4
   d95de:	f7ff fa0c 	bl	d89fa <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
   d95e2:	68ea      	ldr	r2, [r5, #12]
   d95e4:	493f      	ldr	r1, [pc, #252]	; (d96e4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
   d95e6:	4620      	mov	r0, r4
   d95e8:	f7ff fa13 	bl	d8a12 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
   d95ec:	792a      	ldrb	r2, [r5, #4]
   d95ee:	6823      	ldr	r3, [r4, #0]
   d95f0:	f012 0f04 	tst.w	r2, #4
   d95f4:	68db      	ldr	r3, [r3, #12]
            write(", ", 2);
   d95f6:	bf14      	ite	ne
   d95f8:	493b      	ldrne	r1, [pc, #236]	; (d96e8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
            write(": ", 2);
   d95fa:	493c      	ldreq	r1, [pc, #240]	; (d96ec <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(", ", 2);
   d95fc:	2202      	movs	r2, #2
            write(": ", 2);
   d95fe:	4620      	mov	r0, r4
   d9600:	4798      	blx	r3
    if (attr.has_function) {
   d9602:	792b      	ldrb	r3, [r5, #4]
   d9604:	0758      	lsls	r0, r3, #29
   d9606:	d51d      	bpl.n	d9644 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xdc>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   d9608:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
   d960a:	460b      	mov	r3, r1
   d960c:	461a      	mov	r2, r3
    for (; *s; ++s) {
   d960e:	f813 0b01 	ldrb.w	r0, [r3], #1
   d9612:	b160      	cbz	r0, d962e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
        if (*s == ' ') {
   d9614:	2820      	cmp	r0, #32
   d9616:	d108      	bne.n	d962a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
            s1 = s + 1; // Skip return type
   d9618:	4619      	mov	r1, r3
   d961a:	e7f7      	b.n	d960c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
    if (stream_ == &Serial && Network.listening()) {
   d961c:	4834      	ldr	r0, [pc, #208]	; (d96f0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   d961e:	f000 f966 	bl	d98ee <_ZN5spark12NetworkClass9listeningEv>
   d9622:	2800      	cmp	r0, #0
   d9624:	d0ad      	beq.n	d9582 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
   d9626:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
   d962a:	2828      	cmp	r0, #40	; 0x28
   d962c:	d1ee      	bne.n	d960c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
        write(s, n);
   d962e:	6823      	ldr	r3, [r4, #0]
   d9630:	1a52      	subs	r2, r2, r1
   d9632:	68db      	ldr	r3, [r3, #12]
   d9634:	4620      	mov	r0, r4
   d9636:	4798      	blx	r3
        write("(): ", 4);
   d9638:	6823      	ldr	r3, [r4, #0]
   d963a:	492e      	ldr	r1, [pc, #184]	; (d96f4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   d963c:	68db      	ldr	r3, [r3, #12]
   d963e:	2204      	movs	r2, #4
   d9640:	4620      	mov	r0, r4
   d9642:	4798      	blx	r3
    return log_level_name(level, nullptr);
   d9644:	2100      	movs	r1, #0
   d9646:	4638      	mov	r0, r7
   d9648:	f7fe f852 	bl	d76f0 <log_level_name>
   d964c:	4601      	mov	r1, r0
    write(s);
   d964e:	4620      	mov	r0, r4
   d9650:	f7ff f9c4 	bl	d89dc <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   d9654:	6823      	ldr	r3, [r4, #0]
   d9656:	4925      	ldr	r1, [pc, #148]	; (d96ec <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   d9658:	68db      	ldr	r3, [r3, #12]
   d965a:	2202      	movs	r2, #2
   d965c:	4620      	mov	r0, r4
   d965e:	4798      	blx	r3
    if (msg) {
   d9660:	b11e      	cbz	r6, d966a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x102>
        write(msg);
   d9662:	4631      	mov	r1, r6
   d9664:	4620      	mov	r0, r4
   d9666:	f7ff f9b9 	bl	d89dc <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
   d966a:	792b      	ldrb	r3, [r5, #4]
   d966c:	f013 0f30 	tst.w	r3, #48	; 0x30
   d9670:	d02c      	beq.n	d96cc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>
        write(" [", 2);
   d9672:	6823      	ldr	r3, [r4, #0]
   d9674:	4920      	ldr	r1, [pc, #128]	; (d96f8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   d9676:	68db      	ldr	r3, [r3, #12]
   d9678:	2202      	movs	r2, #2
   d967a:	4620      	mov	r0, r4
   d967c:	4798      	blx	r3
        if (attr.has_code) {
   d967e:	792b      	ldrb	r3, [r5, #4]
   d9680:	06d9      	lsls	r1, r3, #27
   d9682:	d50a      	bpl.n	d969a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x132>
            write("code = ", 7);
   d9684:	6823      	ldr	r3, [r4, #0]
   d9686:	491d      	ldr	r1, [pc, #116]	; (d96fc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   d9688:	68db      	ldr	r3, [r3, #12]
   d968a:	2207      	movs	r2, #7
   d968c:	4620      	mov	r0, r4
   d968e:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
   d9690:	69aa      	ldr	r2, [r5, #24]
   d9692:	491b      	ldr	r1, [pc, #108]	; (d9700 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
   d9694:	4620      	mov	r0, r4
   d9696:	f7ff f9bc 	bl	d8a12 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
   d969a:	792b      	ldrb	r3, [r5, #4]
   d969c:	069a      	lsls	r2, r3, #26
   d969e:	d511      	bpl.n	d96c4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>
            if (attr.has_code) {
   d96a0:	06db      	lsls	r3, r3, #27
   d96a2:	d505      	bpl.n	d96b0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>
                write(", ", 2);
   d96a4:	6823      	ldr	r3, [r4, #0]
   d96a6:	4910      	ldr	r1, [pc, #64]	; (d96e8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
   d96a8:	68db      	ldr	r3, [r3, #12]
   d96aa:	2202      	movs	r2, #2
   d96ac:	4620      	mov	r0, r4
   d96ae:	4798      	blx	r3
            write("details = ", 10);
   d96b0:	6823      	ldr	r3, [r4, #0]
   d96b2:	4914      	ldr	r1, [pc, #80]	; (d9704 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
   d96b4:	68db      	ldr	r3, [r3, #12]
   d96b6:	4620      	mov	r0, r4
   d96b8:	220a      	movs	r2, #10
   d96ba:	4798      	blx	r3
            write(attr.details);
   d96bc:	69e9      	ldr	r1, [r5, #28]
   d96be:	4620      	mov	r0, r4
   d96c0:	f7ff f98c 	bl	d89dc <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
   d96c4:	215d      	movs	r1, #93	; 0x5d
   d96c6:	4620      	mov	r0, r4
   d96c8:	f7ff f997 	bl	d89fa <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
   d96cc:	6823      	ldr	r3, [r4, #0]
   d96ce:	490e      	ldr	r1, [pc, #56]	; (d9708 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
   d96d0:	68db      	ldr	r3, [r3, #12]
   d96d2:	4620      	mov	r0, r4
   d96d4:	2202      	movs	r2, #2
}
   d96d6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
   d96da:	4718      	bx	r3
   d96dc:	000df1c6 	.word	0x000df1c6
   d96e0:	000df1cd 	.word	0x000df1cd
   d96e4:	000df2f3 	.word	0x000df2f3
   d96e8:	000df1d0 	.word	0x000df1d0
   d96ec:	000df1d5 	.word	0x000df1d5
   d96f0:	2003e66c 	.word	0x2003e66c
   d96f4:	000df1d3 	.word	0x000df1d3
   d96f8:	000df1d8 	.word	0x000df1d8
   d96fc:	000df1db 	.word	0x000df1db
   d9700:	000df1e3 	.word	0x000df1e3
   d9704:	000df1e6 	.word	0x000df1e6
   d9708:	000dedf5 	.word	0x000dedf5

000d970c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d970c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d9710:	b085      	sub	sp, #20
    if (this->stream() == &Serial && Network.listening()) {
   d9712:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d9716:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   d9718:	4605      	mov	r5, r0
   d971a:	460f      	mov	r7, r1
   d971c:	4690      	mov	r8, r2
   d971e:	461e      	mov	r6, r3
    if (this->stream() == &Serial && Network.listening()) {
   d9720:	f001 fd38 	bl	db194 <_Z16_fetch_usbserialv>
   d9724:	4581      	cmp	r9, r0
   d9726:	d105      	bne.n	d9734 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
   d9728:	4849      	ldr	r0, [pc, #292]	; (d9850 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
   d972a:	f000 f8e0 	bl	d98ee <_ZN5spark12NetworkClass9listeningEv>
   d972e:	2800      	cmp	r0, #0
   d9730:	f040 808a 	bne.w	d9848 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
    JSONStreamWriter json(*this->stream());
   d9734:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
   d9736:	4a47      	ldr	r2, [pc, #284]	; (d9854 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   d9738:	9201      	str	r2, [sp, #4]
        state_(BEGIN) {
   d973a:	f04f 0900 	mov.w	r9, #0
    json.beginObject();
   d973e:	a801      	add	r0, sp, #4
        strm_(stream) {
   d9740:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
   d9742:	f88d 9008 	strb.w	r9, [sp, #8]
   d9746:	f7ff f83c 	bl	d87c2 <_ZN5spark10JSONWriter11beginObjectEv>
   d974a:	4649      	mov	r1, r9
   d974c:	4640      	mov	r0, r8
   d974e:	f7fd ffcf 	bl	d76f0 <log_level_name>
    json.name("l", 1).value(s);
   d9752:	4941      	ldr	r1, [pc, #260]	; (d9858 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   d9754:	4680      	mov	r8, r0
   d9756:	2201      	movs	r2, #1
   d9758:	a801      	add	r0, sp, #4
   d975a:	f7ff f8bb 	bl	d88d4 <_ZN5spark10JSONWriter4nameEPKcj>
   d975e:	4641      	mov	r1, r8
   d9760:	f7ff f92e 	bl	d89c0 <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
   d9764:	b13f      	cbz	r7, d9776 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
   d9766:	493d      	ldr	r1, [pc, #244]	; (d985c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   d9768:	2201      	movs	r2, #1
   d976a:	a801      	add	r0, sp, #4
   d976c:	f7ff f8b2 	bl	d88d4 <_ZN5spark10JSONWriter4nameEPKcj>
   d9770:	4639      	mov	r1, r7
   d9772:	f7ff f925 	bl	d89c0 <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
   d9776:	b13e      	cbz	r6, d9788 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
   d9778:	4939      	ldr	r1, [pc, #228]	; (d9860 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   d977a:	2201      	movs	r2, #1
   d977c:	a801      	add	r0, sp, #4
   d977e:	f7ff f8a9 	bl	d88d4 <_ZN5spark10JSONWriter4nameEPKcj>
   d9782:	4631      	mov	r1, r6
   d9784:	f7ff f91c 	bl	d89c0 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
   d9788:	7923      	ldrb	r3, [r4, #4]
   d978a:	07df      	lsls	r7, r3, #31
   d978c:	d50e      	bpl.n	d97ac <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
   d978e:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
   d9790:	212f      	movs	r1, #47	; 0x2f
   d9792:	4630      	mov	r0, r6
   d9794:	f003 f87a 	bl	dc88c <strrchr>
    if (s1) {
   d9798:	b100      	cbz	r0, d979c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
   d979a:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
   d979c:	4931      	ldr	r1, [pc, #196]	; (d9864 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   d979e:	2201      	movs	r2, #1
   d97a0:	a801      	add	r0, sp, #4
   d97a2:	f7ff f897 	bl	d88d4 <_ZN5spark10JSONWriter4nameEPKcj>
   d97a6:	4631      	mov	r1, r6
   d97a8:	f7ff f90a 	bl	d89c0 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
   d97ac:	7923      	ldrb	r3, [r4, #4]
   d97ae:	079e      	lsls	r6, r3, #30
   d97b0:	d507      	bpl.n	d97c2 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
   d97b2:	492d      	ldr	r1, [pc, #180]	; (d9868 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
   d97b4:	2202      	movs	r2, #2
   d97b6:	a801      	add	r0, sp, #4
   d97b8:	f7ff f88c 	bl	d88d4 <_ZN5spark10JSONWriter4nameEPKcj>
   d97bc:	68e1      	ldr	r1, [r4, #12]
   d97be:	f7ff f80d 	bl	d87dc <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
   d97c2:	7923      	ldrb	r3, [r4, #4]
   d97c4:	0758      	lsls	r0, r3, #29
   d97c6:	d514      	bpl.n	d97f2 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   d97c8:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
   d97ca:	4633      	mov	r3, r6
   d97cc:	461f      	mov	r7, r3
    for (; *s; ++s) {
   d97ce:	f813 2b01 	ldrb.w	r2, [r3], #1
   d97d2:	b12a      	cbz	r2, d97e0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
   d97d4:	2a20      	cmp	r2, #32
   d97d6:	d101      	bne.n	d97dc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
   d97d8:	461e      	mov	r6, r3
   d97da:	e7f7      	b.n	d97cc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
   d97dc:	2a28      	cmp	r2, #40	; 0x28
   d97de:	d1f5      	bne.n	d97cc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
   d97e0:	4922      	ldr	r1, [pc, #136]	; (d986c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
   d97e2:	2202      	movs	r2, #2
   d97e4:	a801      	add	r0, sp, #4
   d97e6:	f7ff f875 	bl	d88d4 <_ZN5spark10JSONWriter4nameEPKcj>
   d97ea:	1bba      	subs	r2, r7, r6
   d97ec:	4631      	mov	r1, r6
   d97ee:	f7ff f881 	bl	d88f4 <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
   d97f2:	7923      	ldrb	r3, [r4, #4]
   d97f4:	0719      	lsls	r1, r3, #28
   d97f6:	d507      	bpl.n	d9808 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
   d97f8:	491d      	ldr	r1, [pc, #116]	; (d9870 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
   d97fa:	2201      	movs	r2, #1
   d97fc:	a801      	add	r0, sp, #4
   d97fe:	f7ff f869 	bl	d88d4 <_ZN5spark10JSONWriter4nameEPKcj>
   d9802:	6961      	ldr	r1, [r4, #20]
   d9804:	f7fe fffc 	bl	d8800 <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
   d9808:	7923      	ldrb	r3, [r4, #4]
   d980a:	06da      	lsls	r2, r3, #27
   d980c:	d508      	bpl.n	d9820 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
   d980e:	2204      	movs	r2, #4
   d9810:	4918      	ldr	r1, [pc, #96]	; (d9874 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   d9812:	eb0d 0002 	add.w	r0, sp, r2
   d9816:	f7ff f85d 	bl	d88d4 <_ZN5spark10JSONWriter4nameEPKcj>
   d981a:	69a1      	ldr	r1, [r4, #24]
   d981c:	f7fe ffde 	bl	d87dc <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
   d9820:	7923      	ldrb	r3, [r4, #4]
   d9822:	069b      	lsls	r3, r3, #26
   d9824:	d507      	bpl.n	d9836 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
   d9826:	4914      	ldr	r1, [pc, #80]	; (d9878 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   d9828:	2206      	movs	r2, #6
   d982a:	a801      	add	r0, sp, #4
   d982c:	f7ff f852 	bl	d88d4 <_ZN5spark10JSONWriter4nameEPKcj>
   d9830:	69e1      	ldr	r1, [r4, #28]
   d9832:	f7ff f8c5 	bl	d89c0 <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
   d9836:	a801      	add	r0, sp, #4
   d9838:	f7fe ffad 	bl	d8796 <_ZN5spark10JSONWriter9endObjectEv>
    this->stream()->write((const uint8_t*)"\r\n", 2);
   d983c:	6a28      	ldr	r0, [r5, #32]
   d983e:	490f      	ldr	r1, [pc, #60]	; (d987c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   d9840:	6803      	ldr	r3, [r0, #0]
   d9842:	2202      	movs	r2, #2
   d9844:	68db      	ldr	r3, [r3, #12]
   d9846:	4798      	blx	r3
}
   d9848:	b005      	add	sp, #20
   d984a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d984e:	bf00      	nop
   d9850:	2003e66c 	.word	0x2003e66c
   d9854:	000df20c 	.word	0x000df20c
   d9858:	000df1a3 	.word	0x000df1a3
   d985c:	000df0b5 	.word	0x000df0b5
   d9860:	000deba0 	.word	0x000deba0
   d9864:	000df5ab 	.word	0x000df5ab
   d9868:	000df1f1 	.word	0x000df1f1
   d986c:	000df1f4 	.word	0x000df1f4
   d9870:	000def41 	.word	0x000def41
   d9874:	000df1f7 	.word	0x000df1f7
   d9878:	000df1fc 	.word	0x000df1fc
   d987c:	000dedf5 	.word	0x000dedf5

000d9880 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d9880:	2300      	movs	r3, #0
   d9882:	6840      	ldr	r0, [r0, #4]
   d9884:	461a      	mov	r2, r3
   d9886:	f7fd bffd 	b.w	d7884 <network_connect>

000d988a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d988a:	6840      	ldr	r0, [r0, #4]
   d988c:	2200      	movs	r2, #0
   d988e:	2102      	movs	r1, #2
   d9890:	f7fe b808 	b.w	d78a4 <network_disconnect>

000d9894 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d9894:	2200      	movs	r2, #0
   d9896:	6840      	ldr	r0, [r0, #4]
   d9898:	4611      	mov	r1, r2
   d989a:	f7fd bffb 	b.w	d7894 <network_connecting>

000d989e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d989e:	2200      	movs	r2, #0
   d98a0:	6840      	ldr	r0, [r0, #4]
   d98a2:	4611      	mov	r1, r2
   d98a4:	f7fe b806 	b.w	d78b4 <network_ready>

000d98a8 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d98a8:	2300      	movs	r3, #0
   d98aa:	6840      	ldr	r0, [r0, #4]
   d98ac:	461a      	mov	r2, r3
   d98ae:	4619      	mov	r1, r3
   d98b0:	f7fe b808 	b.w	d78c4 <network_on>

000d98b4 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d98b4:	2300      	movs	r3, #0
   d98b6:	6840      	ldr	r0, [r0, #4]
   d98b8:	461a      	mov	r2, r3
   d98ba:	4619      	mov	r1, r3
   d98bc:	f7fe b80a 	b.w	d78d4 <network_off>

000d98c0 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   d98c0:	6840      	ldr	r0, [r0, #4]
   d98c2:	2100      	movs	r1, #0
   d98c4:	f7fe b82e 	b.w	d7924 <network_is_on>

000d98c8 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   d98c8:	6840      	ldr	r0, [r0, #4]
   d98ca:	2100      	movs	r1, #0
   d98cc:	f7fe b832 	b.w	d7934 <network_is_off>

000d98d0 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d98d0:	6840      	ldr	r0, [r0, #4]
   d98d2:	2200      	movs	r2, #0
   d98d4:	f081 0101 	eor.w	r1, r1, #1
   d98d8:	f7fe b804 	b.w	d78e4 <network_listen>

000d98dc <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d98dc:	6840      	ldr	r0, [r0, #4]
   d98de:	2200      	movs	r2, #0
   d98e0:	f7fe b810 	b.w	d7904 <network_set_listen_timeout>

000d98e4 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d98e4:	2200      	movs	r2, #0
   d98e6:	6840      	ldr	r0, [r0, #4]
   d98e8:	4611      	mov	r1, r2
   d98ea:	f7fe b813 	b.w	d7914 <network_get_listen_timeout>

000d98ee <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d98ee:	2200      	movs	r2, #0
   d98f0:	6840      	ldr	r0, [r0, #4]
   d98f2:	4611      	mov	r1, r2
   d98f4:	f7fd bffe 	b.w	d78f4 <network_listening>

000d98f8 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d98f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d98fc:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d98fe:	b095      	sub	sp, #84	; 0x54
   d9900:	4616      	mov	r6, r2
   d9902:	460d      	mov	r5, r1
   d9904:	4607      	mov	r7, r0
    IPAddress addr;
   d9906:	f7fe fdc3 	bl	d8490 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d990a:	4621      	mov	r1, r4
   d990c:	2218      	movs	r2, #24
   d990e:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d9910:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d9912:	f002 ff1b 	bl	dc74c <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d9916:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d9918:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d991c:	4621      	mov	r1, r4
   d991e:	466b      	mov	r3, sp
   d9920:	aa0c      	add	r2, sp, #48	; 0x30
   d9922:	4630      	mov	r0, r6
   d9924:	f7fd fddc 	bl	d74e0 <netdb_getaddrinfo>
    if (!r) {
   d9928:	4604      	mov	r4, r0
   d992a:	2800      	cmp	r0, #0
   d992c:	d146      	bne.n	d99bc <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d992e:	4602      	mov	r2, r0
   d9930:	2101      	movs	r1, #1
   d9932:	6868      	ldr	r0, [r5, #4]
   d9934:	f7fd ffbe 	bl	d78b4 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d9938:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d993a:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d993c:	4622      	mov	r2, r4
   d993e:	6868      	ldr	r0, [r5, #4]
   d9940:	f7fd ffb8 	bl	d78b4 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d9944:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d9946:	4681      	mov	r9, r0
        bool ok = false;
   d9948:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d994a:	2e00      	cmp	r6, #0
   d994c:	d036      	beq.n	d99bc <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
   d994e:	2900      	cmp	r1, #0
   d9950:	d134      	bne.n	d99bc <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d9952:	6873      	ldr	r3, [r6, #4]
   d9954:	2b02      	cmp	r3, #2
   d9956:	d003      	beq.n	d9960 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d9958:	2b0a      	cmp	r3, #10
   d995a:	d00b      	beq.n	d9974 <_ZN5spark12NetworkClass7resolveEPKc+0x7c>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d995c:	69f6      	ldr	r6, [r6, #28]
   d995e:	e7f4      	b.n	d994a <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d9960:	f1b8 0f00 	cmp.w	r8, #0
   d9964:	d004      	beq.n	d9970 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d9966:	6971      	ldr	r1, [r6, #20]
   d9968:	4638      	mov	r0, r7
   d996a:	3104      	adds	r1, #4
   d996c:	f7fe fde0 	bl	d8530 <_ZN9IPAddressaSEPKh>
                    ok = true;
                    break;
   d9970:	4641      	mov	r1, r8
   d9972:	e7f3      	b.n	d995c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                }
                case AF_INET6: {
                    if (!ipv6) {
   d9974:	f1b9 0f00 	cmp.w	r9, #0
   d9978:	d101      	bne.n	d997e <_ZN5spark12NetworkClass7resolveEPKc+0x86>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d997a:	4649      	mov	r1, r9
   d997c:	e7ee      	b.n	d995c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d997e:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d9980:	2210      	movs	r2, #16
   d9982:	a801      	add	r0, sp, #4
   d9984:	f002 fee2 	bl	dc74c <memset>
                    a.v = 6;
   d9988:	2306      	movs	r3, #6
   d998a:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d998e:	ad01      	add	r5, sp, #4
   d9990:	f104 0308 	add.w	r3, r4, #8
   d9994:	3418      	adds	r4, #24
   d9996:	6818      	ldr	r0, [r3, #0]
   d9998:	6859      	ldr	r1, [r3, #4]
   d999a:	462a      	mov	r2, r5
   d999c:	c203      	stmia	r2!, {r0, r1}
   d999e:	3308      	adds	r3, #8
   d99a0:	42a3      	cmp	r3, r4
   d99a2:	4615      	mov	r5, r2
   d99a4:	d1f7      	bne.n	d9996 <_ZN5spark12NetworkClass7resolveEPKc+0x9e>
                    addr = IPAddress(a);
   d99a6:	a901      	add	r1, sp, #4
   d99a8:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d99aa:	ad07      	add	r5, sp, #28
   d99ac:	f7fe fd7e 	bl	d84ac <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d99b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d99b2:	1d3c      	adds	r4, r7, #4
   d99b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d99b6:	682b      	ldr	r3, [r5, #0]
   d99b8:	7023      	strb	r3, [r4, #0]
   d99ba:	e7de      	b.n	d997a <_ZN5spark12NetworkClass7resolveEPKc+0x82>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d99bc:	9800      	ldr	r0, [sp, #0]
   d99be:	f7fd fd87 	bl	d74d0 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d99c2:	4638      	mov	r0, r7
   d99c4:	b015      	add	sp, #84	; 0x54
   d99c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d99cc <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d99cc:	4b02      	ldr	r3, [pc, #8]	; (d99d8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d99ce:	4a03      	ldr	r2, [pc, #12]	; (d99dc <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d99d0:	601a      	str	r2, [r3, #0]
   d99d2:	2200      	movs	r2, #0
   d99d4:	605a      	str	r2, [r3, #4]

} // spark
   d99d6:	4770      	bx	lr
   d99d8:	2003e66c 	.word	0x2003e66c
   d99dc:	000df284 	.word	0x000df284

000d99e0 <_ZN4PMIC4lockEv.constprop.0>:
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
   d99e0:	b508      	push	{r3, lr}
            return &Wire1;
   d99e2:	f001 fdc3 	bl	db56c <_Z20__fetch_global_Wire1v>
    return pmicWireInstance()->lock();
}
   d99e6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return pmicWireInstance()->lock();
   d99ea:	f7fe bcd9 	b.w	d83a0 <_ZN7TwoWire4lockEv>

000d99ee <_ZN4PMICC1Eb>:
PMIC::PMIC(bool _lock) :
   d99ee:	b510      	push	{r4, lr}
   d99f0:	4604      	mov	r4, r0
    lock_(_lock)
   d99f2:	7001      	strb	r1, [r0, #0]
    if (lock_) {
   d99f4:	b109      	cbz	r1, d99fa <_ZN4PMICC1Eb+0xc>
        lock();
   d99f6:	f7ff fff3 	bl	d99e0 <_ZN4PMIC4lockEv.constprop.0>
}
   d99fa:	4620      	mov	r0, r4
   d99fc:	bd10      	pop	{r4, pc}

000d99fe <_ZN4PMIC5beginEv>:
{
   d99fe:	b508      	push	{r3, lr}
            return &Wire1;
   d9a00:	f001 fdb4 	bl	db56c <_Z20__fetch_global_Wire1v>
    if (!pmicWireInstance()->isEnabled()) {
   d9a04:	f7fe fcc8 	bl	d8398 <_ZN7TwoWire9isEnabledEv>
   d9a08:	b918      	cbnz	r0, d9a12 <_ZN4PMIC5beginEv+0x14>
            return &Wire1;
   d9a0a:	f001 fdaf 	bl	db56c <_Z20__fetch_global_Wire1v>
        pmicWireInstance()->begin();
   d9a0e:	f7fe fc71 	bl	d82f4 <_ZN7TwoWire5beginEv>
            return &Wire1;
   d9a12:	f001 fdab 	bl	db56c <_Z20__fetch_global_Wire1v>
}
   d9a16:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return pmicWireInstance()->isEnabled();
   d9a1a:	f7fe bcbd 	b.w	d8398 <_ZN7TwoWire9isEnabledEv>

000d9a1e <_ZN4PMIC6unlockEv>:

bool PMIC::unlock() {
   d9a1e:	b508      	push	{r3, lr}
            return &Wire1;
   d9a20:	f001 fda4 	bl	db56c <_Z20__fetch_global_Wire1v>
    return pmicWireInstance()->unlock();
}
   d9a24:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return pmicWireInstance()->unlock();
   d9a28:	f7fe bcc3 	b.w	d83b2 <_ZN7TwoWire6unlockEv>

000d9a2c <_ZNSt10lock_guardI4PMICED1Ev>:
      ~lock_guard()
   d9a2c:	b510      	push	{r4, lr}
   d9a2e:	4604      	mov	r4, r0
      { _M_device.unlock(); }
   d9a30:	6800      	ldr	r0, [r0, #0]
   d9a32:	f7ff fff4 	bl	d9a1e <_ZN4PMIC6unlockEv>
   d9a36:	4620      	mov	r0, r4
   d9a38:	bd10      	pop	{r4, pc}

000d9a3a <_ZN4PMIC12readRegisterEh>:
byte PMIC::readRegister(byte startAddress) {
   d9a3a:	b530      	push	{r4, r5, lr}
   d9a3c:	b087      	sub	sp, #28
   d9a3e:	460d      	mov	r5, r1
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d9a40:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d9a42:	f7ff ffcd 	bl	d99e0 <_ZN4PMIC4lockEv.constprop.0>
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d9a46:	236b      	movs	r3, #107	; 0x6b
   d9a48:	f88d 3008 	strb.w	r3, [sp, #8]
   d9a4c:	2300      	movs	r3, #0
   d9a4e:	2401      	movs	r4, #1
   d9a50:	9303      	str	r3, [sp, #12]
    timeout_ = ms;
   d9a52:	230a      	movs	r3, #10
   d9a54:	9305      	str	r3, [sp, #20]
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d9a56:	f88d 4010 	strb.w	r4, [sp, #16]
            return &Wire1;
   d9a5a:	f001 fd87 	bl	db56c <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->beginTransmission(config);
   d9a5e:	a902      	add	r1, sp, #8
   d9a60:	f7fe fc7e 	bl	d8360 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
            return &Wire1;
   d9a64:	f001 fd82 	bl	db56c <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->write(startAddress);
   d9a68:	6803      	ldr	r3, [r0, #0]
   d9a6a:	4629      	mov	r1, r5
   d9a6c:	689b      	ldr	r3, [r3, #8]
   d9a6e:	4798      	blx	r3
            return &Wire1;
   d9a70:	f001 fd7c 	bl	db56c <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->endTransmission(true);
   d9a74:	4621      	mov	r1, r4
   d9a76:	f7fe fc8b 	bl	d8390 <_ZN7TwoWire15endTransmissionEh>
    size_ = size;
   d9a7a:	9403      	str	r4, [sp, #12]
            return &Wire1;
   d9a7c:	f001 fd76 	bl	db56c <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->requestFrom(config);
   d9a80:	a902      	add	r1, sp, #8
   d9a82:	f7fe fc3d 	bl	d8300 <_ZN7TwoWire11requestFromERK16WireTransmission>
            return &Wire1;
   d9a86:	f001 fd71 	bl	db56c <_Z20__fetch_global_Wire1v>
    DATA = pmicWireInstance()->read();
   d9a8a:	6803      	ldr	r3, [r0, #0]
   d9a8c:	695b      	ldr	r3, [r3, #20]
   d9a8e:	4798      	blx	r3
   d9a90:	4604      	mov	r4, r0
    std::lock_guard<PMIC> l(*this);
   d9a92:	a801      	add	r0, sp, #4
   d9a94:	f7ff ffca 	bl	d9a2c <_ZNSt10lock_guardI4PMICED1Ev>
}
   d9a98:	b2e0      	uxtb	r0, r4
   d9a9a:	b007      	add	sp, #28
   d9a9c:	bd30      	pop	{r4, r5, pc}

000d9a9e <_ZN4PMIC13writeRegisterEhh>:
void PMIC::writeRegister(byte address, byte DATA) {
   d9a9e:	b570      	push	{r4, r5, r6, lr}
   d9aa0:	b086      	sub	sp, #24
   d9aa2:	4614      	mov	r4, r2
   d9aa4:	460d      	mov	r5, r1
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d9aa6:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d9aa8:	f7ff ff9a 	bl	d99e0 <_ZN4PMIC4lockEv.constprop.0>
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d9aac:	236b      	movs	r3, #107	; 0x6b
   d9aae:	f88d 3008 	strb.w	r3, [sp, #8]
   d9ab2:	2300      	movs	r3, #0
   d9ab4:	9303      	str	r3, [sp, #12]
   d9ab6:	2601      	movs	r6, #1
    timeout_ = ms;
   d9ab8:	230a      	movs	r3, #10
   d9aba:	9305      	str	r3, [sp, #20]
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d9abc:	f88d 6010 	strb.w	r6, [sp, #16]
            return &Wire1;
   d9ac0:	f001 fd54 	bl	db56c <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->beginTransmission(config);
   d9ac4:	a902      	add	r1, sp, #8
   d9ac6:	f7fe fc4b 	bl	d8360 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
            return &Wire1;
   d9aca:	f001 fd4f 	bl	db56c <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->write(address);
   d9ace:	6803      	ldr	r3, [r0, #0]
   d9ad0:	4629      	mov	r1, r5
   d9ad2:	689b      	ldr	r3, [r3, #8]
   d9ad4:	4798      	blx	r3
            return &Wire1;
   d9ad6:	f001 fd49 	bl	db56c <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->write(DATA);
   d9ada:	6803      	ldr	r3, [r0, #0]
   d9adc:	4621      	mov	r1, r4
   d9ade:	689b      	ldr	r3, [r3, #8]
   d9ae0:	4798      	blx	r3
            return &Wire1;
   d9ae2:	f001 fd43 	bl	db56c <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->endTransmission(true);
   d9ae6:	4631      	mov	r1, r6
   d9ae8:	f7fe fc52 	bl	d8390 <_ZN7TwoWire15endTransmissionEh>
    std::lock_guard<PMIC> l(*this);
   d9aec:	a801      	add	r0, sp, #4
   d9aee:	f7ff ff9d 	bl	d9a2c <_ZNSt10lock_guardI4PMICED1Ev>
}
   d9af2:	b006      	add	sp, #24
   d9af4:	bd70      	pop	{r4, r5, r6, pc}

000d9af6 <_ZN4PMIC14enableChargingEv>:
bool PMIC::enableCharging() {
   d9af6:	b513      	push	{r0, r1, r4, lr}
   d9af8:	4604      	mov	r4, r0
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d9afa:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d9afc:	f7ff ff70 	bl	d99e0 <_ZN4PMIC4lockEv.constprop.0>
    byte DATA = readRegister(POWERON_CONFIG_REGISTER);
   d9b00:	2101      	movs	r1, #1
   d9b02:	4620      	mov	r0, r4
   d9b04:	f7ff ff99 	bl	d9a3a <_ZN4PMIC12readRegisterEh>
    DATA = DATA & 0b11001111;
   d9b08:	f000 00cf 	and.w	r0, r0, #207	; 0xcf
    writeRegister(POWERON_CONFIG_REGISTER, DATA);
   d9b0c:	f040 0210 	orr.w	r2, r0, #16
   d9b10:	2101      	movs	r1, #1
   d9b12:	4620      	mov	r0, r4
   d9b14:	f7ff ffc3 	bl	d9a9e <_ZN4PMIC13writeRegisterEhh>
    std::lock_guard<PMIC> l(*this);
   d9b18:	a801      	add	r0, sp, #4
   d9b1a:	f7ff ff87 	bl	d9a2c <_ZNSt10lock_guardI4PMICED1Ev>
}
   d9b1e:	2001      	movs	r0, #1
   d9b20:	b002      	add	sp, #8
   d9b22:	bd10      	pop	{r4, pc}

000d9b24 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d9b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d9b26:	4606      	mov	r6, r0
   d9b28:	460d      	mov	r5, r1
  size_t n = 0;
   d9b2a:	188f      	adds	r7, r1, r2
   d9b2c:	2400      	movs	r4, #0
  while (size--) {
   d9b2e:	42bd      	cmp	r5, r7
   d9b30:	d00c      	beq.n	d9b4c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d9b32:	6833      	ldr	r3, [r6, #0]
   d9b34:	f815 1b01 	ldrb.w	r1, [r5], #1
   d9b38:	689b      	ldr	r3, [r3, #8]
   d9b3a:	4630      	mov	r0, r6
   d9b3c:	4798      	blx	r3
     if (chunk>=0)
   d9b3e:	1e03      	subs	r3, r0, #0
   d9b40:	db01      	blt.n	d9b46 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d9b42:	441c      	add	r4, r3
  while (size--) {
   d9b44:	e7f3      	b.n	d9b2e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d9b46:	2c00      	cmp	r4, #0
   d9b48:	bf08      	it	eq
   d9b4a:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d9b4c:	4620      	mov	r0, r4
   d9b4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d9b50 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   d9b50:	b513      	push	{r0, r1, r4, lr}
   d9b52:	4604      	mov	r4, r0
    }
   d9b54:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d9b56:	b159      	cbz	r1, d9b70 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d9b58:	9101      	str	r1, [sp, #4]
   d9b5a:	f002 fe6a 	bl	dc832 <strlen>
   d9b5e:	6823      	ldr	r3, [r4, #0]
   d9b60:	9901      	ldr	r1, [sp, #4]
   d9b62:	68db      	ldr	r3, [r3, #12]
   d9b64:	4602      	mov	r2, r0
   d9b66:	4620      	mov	r0, r4
    }
   d9b68:	b002      	add	sp, #8
   d9b6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d9b6e:	4718      	bx	r3
    }
   d9b70:	b002      	add	sp, #8
   d9b72:	bd10      	pop	{r4, pc}

000d9b74 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   d9b74:	b508      	push	{r3, lr}
  return write(str);
   d9b76:	f7ff ffeb 	bl	d9b50 <_ZN5Print5writeEPKc>
}
   d9b7a:	bd08      	pop	{r3, pc}

000d9b7c <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   d9b7c:	6803      	ldr	r3, [r0, #0]
   d9b7e:	689b      	ldr	r3, [r3, #8]
   d9b80:	4718      	bx	r3

000d9b82 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d9b82:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d9b84:	210d      	movs	r1, #13
{
   d9b86:	4605      	mov	r5, r0
  size_t n = print('\r');
   d9b88:	f7ff fff8 	bl	d9b7c <_ZN5Print5printEc>
  n += print('\n');
   d9b8c:	210a      	movs	r1, #10
  size_t n = print('\r');
   d9b8e:	4604      	mov	r4, r0
  n += print('\n');
   d9b90:	4628      	mov	r0, r5
   d9b92:	f7ff fff3 	bl	d9b7c <_ZN5Print5printEc>
  return n;
}
   d9b96:	4420      	add	r0, r4
   d9b98:	bd38      	pop	{r3, r4, r5, pc}

000d9b9a <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d9b9a:	b538      	push	{r3, r4, r5, lr}
   d9b9c:	4605      	mov	r5, r0
  return write(str);
   d9b9e:	f7ff ffd7 	bl	d9b50 <_ZN5Print5writeEPKc>
   d9ba2:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   d9ba4:	4628      	mov	r0, r5
   d9ba6:	f7ff ffec 	bl	d9b82 <_ZN5Print7printlnEv>
  return n;
}
   d9baa:	4420      	add	r0, r4
   d9bac:	bd38      	pop	{r3, r4, r5, pc}

000d9bae <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d9bae:	b530      	push	{r4, r5, lr}
   d9bb0:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d9bb2:	2300      	movs	r3, #0
   d9bb4:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d9bb8:	2a01      	cmp	r2, #1
   d9bba:	bf98      	it	ls
   d9bbc:	220a      	movls	r2, #10
   d9bbe:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d9bc0:	460d      	mov	r5, r1
   d9bc2:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d9bc6:	fb01 5312 	mls	r3, r1, r2, r5
   d9bca:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d9bce:	2b09      	cmp	r3, #9
   d9bd0:	bf94      	ite	ls
   d9bd2:	3330      	addls	r3, #48	; 0x30
   d9bd4:	3337      	addhi	r3, #55	; 0x37
   d9bd6:	b2db      	uxtb	r3, r3
  } while(n);
   d9bd8:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d9bda:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d9bde:	d9ef      	bls.n	d9bc0 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d9be0:	4621      	mov	r1, r4
   d9be2:	f7ff ffb5 	bl	d9b50 <_ZN5Print5writeEPKc>
}
   d9be6:	b00b      	add	sp, #44	; 0x2c
   d9be8:	bd30      	pop	{r4, r5, pc}

000d9bea <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   d9bea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d9bee:	b086      	sub	sp, #24
   d9bf0:	af00      	add	r7, sp, #0
   d9bf2:	4605      	mov	r5, r0
   d9bf4:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   d9bf6:	1d38      	adds	r0, r7, #4
   d9bf8:	2114      	movs	r1, #20
{
   d9bfa:	4614      	mov	r4, r2
    va_copy(args2, args);
   d9bfc:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   d9bfe:	f7fd fed1 	bl	d79a4 <vsnprintf>

    if (n<bufsize)
   d9c02:	2813      	cmp	r0, #19
   d9c04:	d80e      	bhi.n	d9c24 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   d9c06:	1d39      	adds	r1, r7, #4
   d9c08:	4628      	mov	r0, r5
   d9c0a:	f7ff ffa1 	bl	d9b50 <_ZN5Print5writeEPKc>
   d9c0e:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   d9c10:	b11e      	cbz	r6, d9c1a <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   d9c12:	4628      	mov	r0, r5
   d9c14:	f7ff ffb5 	bl	d9b82 <_ZN5Print7printlnEv>
   d9c18:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   d9c1a:	4620      	mov	r0, r4
   d9c1c:	3718      	adds	r7, #24
   d9c1e:	46bd      	mov	sp, r7
   d9c20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   d9c24:	f100 0308 	add.w	r3, r0, #8
   d9c28:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   d9c2c:	46e8      	mov	r8, sp
        char bigger[n+1];
   d9c2e:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   d9c32:	4622      	mov	r2, r4
   d9c34:	1c41      	adds	r1, r0, #1
   d9c36:	683b      	ldr	r3, [r7, #0]
   d9c38:	4668      	mov	r0, sp
   d9c3a:	f7fd feb3 	bl	d79a4 <vsnprintf>
  return write(str);
   d9c3e:	4669      	mov	r1, sp
   d9c40:	4628      	mov	r0, r5
   d9c42:	f7ff ff85 	bl	d9b50 <_ZN5Print5writeEPKc>
   d9c46:	4604      	mov	r4, r0
   d9c48:	46c5      	mov	sp, r8
   d9c4a:	e7e1      	b.n	d9c10 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000d9c4c <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d9c4c:	4b01      	ldr	r3, [pc, #4]	; (d9c54 <_GLOBAL__sub_I_RGB+0x8>)
   d9c4e:	2200      	movs	r2, #0
   d9c50:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   d9c52:	4770      	bx	lr
   d9c54:	2003e674 	.word	0x2003e674

000d9c58 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d9c58:	b510      	push	{r4, lr}
   d9c5a:	4604      	mov	r4, r0
   d9c5c:	4608      	mov	r0, r1
{
    _spi = spi;
   d9c5e:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d9c60:	f7fd fc8e 	bl	d7580 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d9c64:	2300      	movs	r3, #0
   d9c66:	6063      	str	r3, [r4, #4]
}
   d9c68:	4620      	mov	r0, r4
   d9c6a:	bd10      	pop	{r4, pc}

000d9c6c <_Z4dtoadhPc>:
#include "string_convert.h"

//These are very crude implementations - will refine later
//------------------------------------------------------------------------------------------

void dtoa (double val, unsigned char prec, char *sout) {
   d9c6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d9c70:	ec57 6b10 	vmov	r6, r7, d0
   d9c74:	4680      	mov	r8, r0
   d9c76:	460c      	mov	r4, r1
    bool negative = val<0;
    if (negative) {
   d9c78:	ee10 0a10 	vmov	r0, s0
   d9c7c:	2200      	movs	r2, #0
   d9c7e:	2300      	movs	r3, #0
   d9c80:	4639      	mov	r1, r7
   d9c82:	f002 fa93 	bl	dc1ac <__aeabi_dcmplt>
   d9c86:	b128      	cbz	r0, d9c94 <_Z4dtoadhPc+0x28>
        val = -val;
   d9c88:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   d9c8c:	461f      	mov	r7, r3
        *sout++ = '-';
   d9c8e:	232d      	movs	r3, #45	; 0x2d
   d9c90:	f804 3b01 	strb.w	r3, [r4], #1
   d9c94:	2300      	movs	r3, #0
    }
    long scale = 1;
   d9c96:	f04f 0901 	mov.w	r9, #1
    for (uint8_t i=0; i<prec; i++)
        scale *= 10;
   d9c9a:	220a      	movs	r2, #10
    for (uint8_t i=0; i<prec; i++)
   d9c9c:	b2d9      	uxtb	r1, r3
   d9c9e:	4588      	cmp	r8, r1
   d9ca0:	d903      	bls.n	d9caa <_Z4dtoadhPc+0x3e>
        scale *= 10;
   d9ca2:	fb02 f909 	mul.w	r9, r2, r9
    for (uint8_t i=0; i<prec; i++)
   d9ca6:	3301      	adds	r3, #1
   d9ca8:	e7f8      	b.n	d9c9c <_Z4dtoadhPc+0x30>
    val *= scale;   // capture all the significant digits
   d9caa:	4648      	mov	r0, r9
   d9cac:	f001 ffa2 	bl	dbbf4 <__aeabi_i2d>
   d9cb0:	4632      	mov	r2, r6
   d9cb2:	463b      	mov	r3, r7
   d9cb4:	f002 f808 	bl	dbcc8 <__aeabi_dmul>
   d9cb8:	4606      	mov	r6, r0
   d9cba:	460f      	mov	r7, r1
    uint64_t fixed = uint64_t(val);
   d9cbc:	f002 fb5a 	bl	dc374 <__aeabi_d2ulz>
   d9cc0:	4605      	mov	r5, r0
   d9cc2:	468a      	mov	sl, r1
    if ((val-fixed)>=0.5)    // round last digit
   d9cc4:	f001 ffca 	bl	dbc5c <__aeabi_ul2d>
   d9cc8:	4602      	mov	r2, r0
   d9cca:	460b      	mov	r3, r1
   d9ccc:	4630      	mov	r0, r6
   d9cce:	4639      	mov	r1, r7
   d9cd0:	f001 fe42 	bl	db958 <__aeabi_dsub>
   d9cd4:	4b13      	ldr	r3, [pc, #76]	; (d9d24 <_Z4dtoadhPc+0xb8>)
   d9cd6:	2200      	movs	r2, #0
   d9cd8:	f002 fa7c 	bl	dc1d4 <__aeabi_dcmpge>
   d9cdc:	b110      	cbz	r0, d9ce4 <_Z4dtoadhPc+0x78>
        fixed++;
   d9cde:	3501      	adds	r5, #1
   d9ce0:	f14a 0a00 	adc.w	sl, sl, #0

    unsigned long first = (unsigned long)(fixed / scale);
   d9ce4:	464a      	mov	r2, r9
   d9ce6:	4628      	mov	r0, r5
   d9ce8:	17d3      	asrs	r3, r2, #31
   d9cea:	4651      	mov	r1, sl
   d9cec:	f002 faf6 	bl	dc2dc <__aeabi_uldivmod>
    unsigned long second = (unsigned long)(fixed % scale);

    ultoa(first, sout, 10, 1);
   d9cf0:	2301      	movs	r3, #1
   d9cf2:	4615      	mov	r5, r2
   d9cf4:	4621      	mov	r1, r4
   d9cf6:	220a      	movs	r2, #10
   d9cf8:	f001 fa83 	bl	db202 <ultoa>
    if (prec) {
   d9cfc:	f1b8 0f00 	cmp.w	r8, #0
   d9d00:	d00d      	beq.n	d9d1e <_Z4dtoadhPc+0xb2>
        sout += strlen(sout);
   d9d02:	4620      	mov	r0, r4
   d9d04:	f002 fd95 	bl	dc832 <strlen>
        *sout++ = '.';
   d9d08:	232e      	movs	r3, #46	; 0x2e
        sout += strlen(sout);
   d9d0a:	1821      	adds	r1, r4, r0
        *sout++ = '.';
   d9d0c:	5423      	strb	r3, [r4, r0]
        ultoa(second, sout, 10, prec);
   d9d0e:	220a      	movs	r2, #10
   d9d10:	4643      	mov	r3, r8
   d9d12:	4628      	mov	r0, r5
   d9d14:	3101      	adds	r1, #1
    }
}
   d9d16:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        ultoa(second, sout, 10, prec);
   d9d1a:	f001 ba72 	b.w	db202 <ultoa>
}
   d9d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d9d22:	bf00      	nop
   d9d24:	3fe00000 	.word	0x3fe00000

000d9d28 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d9d28:	b510      	push	{r4, lr}
   d9d2a:	4604      	mov	r4, r0
{
	free(buffer);
   d9d2c:	6800      	ldr	r0, [r0, #0]
   d9d2e:	f7fd fe11 	bl	d7954 <free>
}
   d9d32:	4620      	mov	r0, r4
   d9d34:	bd10      	pop	{r4, pc}

000d9d36 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d9d36:	b510      	push	{r4, lr}
   d9d38:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d9d3a:	6800      	ldr	r0, [r0, #0]
   d9d3c:	b108      	cbz	r0, d9d42 <_ZN6String10invalidateEv+0xc>
   d9d3e:	f7fd fe09 	bl	d7954 <free>
	buffer = NULL;
   d9d42:	2300      	movs	r3, #0
	capacity = len = 0;
   d9d44:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   d9d48:	6023      	str	r3, [r4, #0]
}
   d9d4a:	bd10      	pop	{r4, pc}

000d9d4c <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d9d4c:	b538      	push	{r3, r4, r5, lr}
   d9d4e:	4604      	mov	r4, r0
   d9d50:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d9d52:	6800      	ldr	r0, [r0, #0]
   d9d54:	3101      	adds	r1, #1
   d9d56:	f7fd fe05 	bl	d7964 <realloc>
	if (newbuffer) {
   d9d5a:	b110      	cbz	r0, d9d62 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d9d5c:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   d9d60:	2001      	movs	r0, #1
	}
	return 0;
}
   d9d62:	bd38      	pop	{r3, r4, r5, pc}

000d9d64 <_ZN6String7reserveEj>:
{
   d9d64:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d9d66:	6803      	ldr	r3, [r0, #0]
{
   d9d68:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d9d6a:	b123      	cbz	r3, d9d76 <_ZN6String7reserveEj+0x12>
   d9d6c:	6843      	ldr	r3, [r0, #4]
   d9d6e:	428b      	cmp	r3, r1
   d9d70:	d301      	bcc.n	d9d76 <_ZN6String7reserveEj+0x12>
   d9d72:	2001      	movs	r0, #1
}
   d9d74:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   d9d76:	4620      	mov	r0, r4
   d9d78:	f7ff ffe8 	bl	d9d4c <_ZN6String12changeBufferEj>
   d9d7c:	2800      	cmp	r0, #0
   d9d7e:	d0f9      	beq.n	d9d74 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   d9d80:	68a3      	ldr	r3, [r4, #8]
   d9d82:	2b00      	cmp	r3, #0
   d9d84:	d1f5      	bne.n	d9d72 <_ZN6String7reserveEj+0xe>
   d9d86:	6822      	ldr	r2, [r4, #0]
   d9d88:	7013      	strb	r3, [r2, #0]
   d9d8a:	e7f2      	b.n	d9d72 <_ZN6String7reserveEj+0xe>

000d9d8c <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d9d8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d9d8e:	460d      	mov	r5, r1
	if (!reserve(length)) {
   d9d90:	4611      	mov	r1, r2
   d9d92:	9201      	str	r2, [sp, #4]
{
   d9d94:	4604      	mov	r4, r0
	if (!reserve(length)) {
   d9d96:	f7ff ffe5 	bl	d9d64 <_ZN6String7reserveEj>
   d9d9a:	9a01      	ldr	r2, [sp, #4]
   d9d9c:	b928      	cbnz	r0, d9daa <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   d9d9e:	4620      	mov	r0, r4
   d9da0:	f7ff ffc9 	bl	d9d36 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   d9da4:	4620      	mov	r0, r4
   d9da6:	b003      	add	sp, #12
   d9da8:	bd30      	pop	{r4, r5, pc}
	len = length;
   d9daa:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   d9dac:	4629      	mov	r1, r5
   d9dae:	6820      	ldr	r0, [r4, #0]
   d9db0:	f002 fca4 	bl	dc6fc <memcpy>
	buffer[len] = 0;
   d9db4:	6822      	ldr	r2, [r4, #0]
   d9db6:	68a3      	ldr	r3, [r4, #8]
   d9db8:	2100      	movs	r1, #0
   d9dba:	54d1      	strb	r1, [r2, r3]
	return *this;
   d9dbc:	e7f2      	b.n	d9da4 <_ZN6String4copyEPKcj+0x18>

000d9dbe <_ZN6StringC1EPKc>:
	buffer = NULL;
   d9dbe:	2300      	movs	r3, #0
String::String(const char *cstr)
   d9dc0:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   d9dc2:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const char *cstr)
   d9dc6:	4604      	mov	r4, r0
	len = 0;
   d9dc8:	6083      	str	r3, [r0, #8]
	flags = 0;
   d9dca:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   d9dcc:	b141      	cbz	r1, d9de0 <_ZN6StringC1EPKc+0x22>
   d9dce:	4608      	mov	r0, r1
   d9dd0:	9101      	str	r1, [sp, #4]
   d9dd2:	f002 fd2e 	bl	dc832 <strlen>
   d9dd6:	9901      	ldr	r1, [sp, #4]
   d9dd8:	4602      	mov	r2, r0
   d9dda:	4620      	mov	r0, r4
   d9ddc:	f7ff ffd6 	bl	d9d8c <_ZN6String4copyEPKcj>
}
   d9de0:	4620      	mov	r0, r4
   d9de2:	b002      	add	sp, #8
   d9de4:	bd10      	pop	{r4, pc}

000d9de6 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   d9de6:	b538      	push	{r3, r4, r5, lr}
   d9de8:	4605      	mov	r5, r0
	if (buffer) {
   d9dea:	6800      	ldr	r0, [r0, #0]
{
   d9dec:	460c      	mov	r4, r1
	if (buffer) {
   d9dee:	b168      	cbz	r0, d9e0c <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   d9df0:	686a      	ldr	r2, [r5, #4]
   d9df2:	688b      	ldr	r3, [r1, #8]
   d9df4:	429a      	cmp	r2, r3
   d9df6:	d307      	bcc.n	d9e08 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   d9df8:	6809      	ldr	r1, [r1, #0]
   d9dfa:	f002 fcf4 	bl	dc7e6 <strcpy>
			len = rhs.len;
   d9dfe:	68a3      	ldr	r3, [r4, #8]
   d9e00:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   d9e02:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   d9e04:	60a3      	str	r3, [r4, #8]
}
   d9e06:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   d9e08:	f7fd fda4 	bl	d7954 <free>
	buffer = rhs.buffer;
   d9e0c:	6823      	ldr	r3, [r4, #0]
   d9e0e:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   d9e10:	6863      	ldr	r3, [r4, #4]
   d9e12:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   d9e14:	68a3      	ldr	r3, [r4, #8]
   d9e16:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   d9e18:	2300      	movs	r3, #0
	rhs.capacity = 0;
   d9e1a:	e9c4 3300 	strd	r3, r3, [r4]
   d9e1e:	e7f1      	b.n	d9e04 <_ZN6String4moveERS_+0x1e>

000d9e20 <_ZN6StringC1EOS_>:
String::String(String &&rval)
   d9e20:	b510      	push	{r4, lr}
	buffer = NULL;
   d9e22:	2300      	movs	r3, #0
	capacity = 0;
   d9e24:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   d9e28:	4604      	mov	r4, r0
	len = 0;
   d9e2a:	6083      	str	r3, [r0, #8]
	flags = 0;
   d9e2c:	7303      	strb	r3, [r0, #12]
	move(rval);
   d9e2e:	f7ff ffda 	bl	d9de6 <_ZN6String4moveERS_>
}
   d9e32:	4620      	mov	r0, r4
   d9e34:	bd10      	pop	{r4, pc}

000d9e36 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d9e36:	4288      	cmp	r0, r1
{
   d9e38:	b510      	push	{r4, lr}
   d9e3a:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d9e3c:	d005      	beq.n	d9e4a <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d9e3e:	680b      	ldr	r3, [r1, #0]
   d9e40:	b12b      	cbz	r3, d9e4e <_ZN6StringaSERKS_+0x18>
   d9e42:	688a      	ldr	r2, [r1, #8]
   d9e44:	4619      	mov	r1, r3
   d9e46:	f7ff ffa1 	bl	d9d8c <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d9e4a:	4620      	mov	r0, r4
   d9e4c:	bd10      	pop	{r4, pc}
	else invalidate();
   d9e4e:	f7ff ff72 	bl	d9d36 <_ZN6String10invalidateEv>
   d9e52:	e7fa      	b.n	d9e4a <_ZN6StringaSERKS_+0x14>

000d9e54 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   d9e54:	b510      	push	{r4, lr}
	buffer = NULL;
   d9e56:	2300      	movs	r3, #0
String::String(const String &value)
   d9e58:	4604      	mov	r4, r0
	capacity = 0;
   d9e5a:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   d9e5e:	6083      	str	r3, [r0, #8]
	flags = 0;
   d9e60:	7303      	strb	r3, [r0, #12]
	*this = value;
   d9e62:	f7ff ffe8 	bl	d9e36 <_ZN6StringaSERKS_>
}
   d9e66:	4620      	mov	r0, r4
   d9e68:	bd10      	pop	{r4, pc}

000d9e6a <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
   d9e6a:	4288      	cmp	r0, r1
{
   d9e6c:	b510      	push	{r4, lr}
   d9e6e:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   d9e70:	d001      	beq.n	d9e76 <_ZN6StringaSEOS_+0xc>
   d9e72:	f7ff ffb8 	bl	d9de6 <_ZN6String4moveERS_>
	return *this;
}
   d9e76:	4620      	mov	r0, r4
   d9e78:	bd10      	pop	{r4, pc}

000d9e7a <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d9e7a:	b513      	push	{r0, r1, r4, lr}
   d9e7c:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   d9e7e:	b159      	cbz	r1, d9e98 <_ZN6StringaSEPKc+0x1e>
   d9e80:	4608      	mov	r0, r1
   d9e82:	9101      	str	r1, [sp, #4]
   d9e84:	f002 fcd5 	bl	dc832 <strlen>
   d9e88:	9901      	ldr	r1, [sp, #4]
   d9e8a:	4602      	mov	r2, r0
   d9e8c:	4620      	mov	r0, r4
   d9e8e:	f7ff ff7d 	bl	d9d8c <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d9e92:	4620      	mov	r0, r4
   d9e94:	b002      	add	sp, #8
   d9e96:	bd10      	pop	{r4, pc}
	else invalidate();
   d9e98:	f7ff ff4d 	bl	d9d36 <_ZN6String10invalidateEv>
   d9e9c:	e7f9      	b.n	d9e92 <_ZN6StringaSEPKc+0x18>

000d9e9e <_ZN6StringC1Efi>:
String::String(float value, int decimalPlaces)
   d9e9e:	b530      	push	{r4, r5, lr}
   d9ea0:	4604      	mov	r4, r0
	buffer = NULL;
   d9ea2:	2300      	movs	r3, #0
String::String(float value, int decimalPlaces)
   d9ea4:	b08b      	sub	sp, #44	; 0x2c
	capacity = 0;
   d9ea6:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   d9eaa:	60a3      	str	r3, [r4, #8]
	flags = 0;
   d9eac:	7323      	strb	r3, [r4, #12]
String::String(float value, int decimalPlaces)
   d9eae:	ee10 0a10 	vmov	r0, s0
	dtoa(value, decimalPlaces, buf);
   d9eb2:	b2cd      	uxtb	r5, r1
   d9eb4:	f001 feb0 	bl	dbc18 <__aeabi_f2d>
   d9eb8:	ec41 0b10 	vmov	d0, r0, r1
   d9ebc:	a901      	add	r1, sp, #4
   d9ebe:	4628      	mov	r0, r5
   d9ec0:	f7ff fed4 	bl	d9c6c <_Z4dtoadhPc>
        *this = buf;
   d9ec4:	a901      	add	r1, sp, #4
   d9ec6:	4620      	mov	r0, r4
   d9ec8:	f7ff ffd7 	bl	d9e7a <_ZN6StringaSEPKc>
}
   d9ecc:	4620      	mov	r0, r4
   d9ece:	b00b      	add	sp, #44	; 0x2c
   d9ed0:	bd30      	pop	{r4, r5, pc}

000d9ed2 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   d9ed2:	b570      	push	{r4, r5, r6, lr}
   d9ed4:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   d9ed6:	460e      	mov	r6, r1
   d9ed8:	b909      	cbnz	r1, d9ede <_ZN6String6concatEPKcj+0xc>
   d9eda:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   d9edc:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   d9ede:	b16a      	cbz	r2, d9efc <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   d9ee0:	6884      	ldr	r4, [r0, #8]
   d9ee2:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   d9ee4:	4621      	mov	r1, r4
   d9ee6:	f7ff ff3d 	bl	d9d64 <_ZN6String7reserveEj>
   d9eea:	2800      	cmp	r0, #0
   d9eec:	d0f5      	beq.n	d9eda <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   d9eee:	6828      	ldr	r0, [r5, #0]
   d9ef0:	68ab      	ldr	r3, [r5, #8]
   d9ef2:	4631      	mov	r1, r6
   d9ef4:	4418      	add	r0, r3
   d9ef6:	f002 fc76 	bl	dc7e6 <strcpy>
	len = newlen;
   d9efa:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   d9efc:	2001      	movs	r0, #1
   d9efe:	e7ed      	b.n	d9edc <_ZN6String6concatEPKcj+0xa>

000d9f00 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   d9f00:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   d9f02:	688a      	ldr	r2, [r1, #8]
   d9f04:	6809      	ldr	r1, [r1, #0]
{
   d9f06:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   d9f08:	f7ff ffe3 	bl	d9ed2 <_ZN6String6concatEPKcj>
   d9f0c:	b910      	cbnz	r0, d9f14 <_ZplRK15StringSumHelperRK6String+0x14>
   d9f0e:	4620      	mov	r0, r4
   d9f10:	f7ff ff11 	bl	d9d36 <_ZN6String10invalidateEv>
	return a;
}
   d9f14:	4620      	mov	r0, r4
   d9f16:	bd10      	pop	{r4, pc}

000d9f18 <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   d9f18:	b513      	push	{r0, r1, r4, lr}
   d9f1a:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   d9f1c:	b929      	cbnz	r1, d9f2a <_ZplRK15StringSumHelperPKc+0x12>
   d9f1e:	4620      	mov	r0, r4
   d9f20:	f7ff ff09 	bl	d9d36 <_ZN6String10invalidateEv>
	return a;
}
   d9f24:	4620      	mov	r0, r4
   d9f26:	b002      	add	sp, #8
   d9f28:	bd10      	pop	{r4, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   d9f2a:	4608      	mov	r0, r1
   d9f2c:	9101      	str	r1, [sp, #4]
   d9f2e:	f002 fc80 	bl	dc832 <strlen>
   d9f32:	9901      	ldr	r1, [sp, #4]
   d9f34:	4602      	mov	r2, r0
   d9f36:	4620      	mov	r0, r4
   d9f38:	f7ff ffcb 	bl	d9ed2 <_ZN6String6concatEPKcj>
   d9f3c:	2800      	cmp	r0, #0
   d9f3e:	d0ee      	beq.n	d9f1e <_ZplRK15StringSumHelperPKc+0x6>
   d9f40:	e7f0      	b.n	d9f24 <_ZplRK15StringSumHelperPKc+0xc>

000d9f42 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d9f42:	b510      	push	{r4, lr}
   d9f44:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d9f46:	6800      	ldr	r0, [r0, #0]
   d9f48:	b118      	cbz	r0, d9f52 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
   d9f4a:	f7fd fd03 	bl	d7954 <free>
            wakeupSource_ = nullptr;
   d9f4e:	2300      	movs	r3, #0
   d9f50:	6023      	str	r3, [r4, #0]
        }
    }
   d9f52:	bd10      	pop	{r4, pc}

000d9f54 <_ZN17SystemSleepResultaSEOS_>:
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   d9f54:	b538      	push	{r3, r4, r5, lr}
        error_ = result.error_;
   d9f56:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
   d9f5a:	8083      	strh	r3, [r0, #4]
        compatResult_ = result.compatResult_;
   d9f5c:	460b      	mov	r3, r1
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   d9f5e:	460d      	mov	r5, r1
        compatResult_ = result.compatResult_;
   d9f60:	f853 2f06 	ldr.w	r2, [r3, #6]!
   d9f64:	f8c0 2006 	str.w	r2, [r0, #6]
   d9f68:	889b      	ldrh	r3, [r3, #4]
   d9f6a:	8143      	strh	r3, [r0, #10]
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   d9f6c:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
   d9f6e:	f7ff ffe8 	bl	d9f42 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
        if (result.wakeupSource_) {
   d9f72:	682b      	ldr	r3, [r5, #0]
   d9f74:	b113      	cbz	r3, d9f7c <_ZN17SystemSleepResultaSEOS_+0x28>
            wakeupSource_ = result.wakeupSource_;
   d9f76:	6023      	str	r3, [r4, #0]
            result.wakeupSource_ = nullptr;
   d9f78:	2300      	movs	r3, #0
   d9f7a:	602b      	str	r3, [r5, #0]
    }
   d9f7c:	4620      	mov	r0, r4
   d9f7e:	bd38      	pop	{r3, r4, r5, pc}

000d9f80 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>:

    int copyWakeupSource(hal_wakeup_source_base_t* source) {
   d9f80:	b538      	push	{r3, r4, r5, lr}
   d9f82:	460c      	mov	r4, r1
   d9f84:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
   d9f86:	f7ff ffdc 	bl	d9f42 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
        if (source) {
   d9f8a:	b144      	cbz	r4, d9f9e <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x1e>
            wakeupSource_ = (hal_wakeup_source_base_t*)malloc(source->size);
   d9f8c:	8820      	ldrh	r0, [r4, #0]
   d9f8e:	f7fd fcd9 	bl	d7944 <malloc>
   d9f92:	6028      	str	r0, [r5, #0]
            if (wakeupSource_) {
   d9f94:	b128      	cbz	r0, d9fa2 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x22>
                memcpy(wakeupSource_, source, source->size);
   d9f96:	8822      	ldrh	r2, [r4, #0]
   d9f98:	4621      	mov	r1, r4
   d9f9a:	f002 fbaf 	bl	dc6fc <memcpy>
            } else {
                return SYSTEM_ERROR_NO_MEMORY;
            }
        }
        return SYSTEM_ERROR_NONE;
   d9f9e:	2000      	movs	r0, #0
    }
   d9fa0:	bd38      	pop	{r3, r4, r5, pc}
                return SYSTEM_ERROR_NO_MEMORY;
   d9fa2:	4801      	ldr	r0, [pc, #4]	; (d9fa8 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x28>)
   d9fa4:	e7fc      	b.n	d9fa0 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x20>
   d9fa6:	bf00      	nop
   d9fa8:	fffffefc 	.word	0xfffffefc

000d9fac <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>:
void SystemClass::enterSafeMode(SystemResetFlags flags)
{
    system_reset(SYSTEM_RESET_MODE_SAFE, 0, 0, flags.value(), nullptr);
}

SystemSleepResult SystemClass::sleep(const particle::SystemSleepConfiguration& config) {
   d9fac:	b5f0      	push	{r4, r5, r6, r7, lr}
   d9fae:	4d2d      	ldr	r5, [pc, #180]	; (da064 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
    }

    // It doesn't guarantee the combination of sleep mode and
    // wakeup sources that the platform supports.
    bool valid() const {
        if (!valid_) {
   d9fb0:	7d0b      	ldrb	r3, [r1, #20]
   d9fb2:	4604      	mov	r4, r0
   d9fb4:	b08b      	sub	sp, #44	; 0x2c
   d9fb6:	4608      	mov	r0, r1
   d9fb8:	1daf      	adds	r7, r5, #6
   d9fba:	2b00      	cmp	r3, #0
   d9fbc:	d038      	beq.n	da030 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x84>
        return static_cast<SystemSleepMode>(config_->mode);
   d9fbe:	680b      	ldr	r3, [r1, #0]
            return valid_;
        }
        if (sleepMode() == SystemSleepMode::NONE) {
   d9fc0:	791b      	ldrb	r3, [r3, #4]
   d9fc2:	2b00      	cmp	r3, #0
   d9fc4:	d034      	beq.n	da030 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x84>
              error_(SYSTEM_ERROR_NONE) {
   d9fc6:	2200      	movs	r2, #0
    SleepResult() {}
   d9fc8:	4b27      	ldr	r3, [pc, #156]	; (da068 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
   d9fca:	9304      	str	r3, [sp, #16]
    if (!config.valid()) {
        LOG(ERROR, "System sleep configuration is invalid.");
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
    } else {
        SystemSleepResult result;
        int ret = system_sleep_ext(config.halConfig(), result.halWakeupSource(), nullptr);
   d9fcc:	a902      	add	r1, sp, #8
   d9fce:	3004      	adds	r0, #4
              error_(SYSTEM_ERROR_NONE) {
   d9fd0:	9202      	str	r2, [sp, #8]
   d9fd2:	f8ad 200c 	strh.w	r2, [sp, #12]
    SleepResult() {}
   d9fd6:	f88d 200e 	strb.w	r2, [sp, #14]
   d9fda:	f7fd fc01 	bl	d77e0 <system_sleep_ext>
        compatResult_ = result.compatResult_;
   d9fde:	f8dd 300e 	ldr.w	r3, [sp, #14]
   d9fe2:	f8c5 3006 	str.w	r3, [r5, #6]
        result.setError(static_cast<system_error_t>(ret));
   d9fe6:	b200      	sxth	r0, r0
   d9fe8:	f8bd 3012 	ldrh.w	r3, [sp, #18]
        error_ = error;
   d9fec:	f8ad 000c 	strh.w	r0, [sp, #12]
        error_ = result.error_;
   d9ff0:	80a8      	strh	r0, [r5, #4]
        copyWakeupSource(result.wakeupSource_);
   d9ff2:	9902      	ldr	r1, [sp, #8]
        compatResult_ = result.compatResult_;
   d9ff4:	80bb      	strh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   d9ff6:	4628      	mov	r0, r5
   d9ff8:	f7ff ffc2 	bl	d9f80 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>
        freeWakeupSourceMemory();
   d9ffc:	a802      	add	r0, sp, #8
   d9ffe:	f7ff ffa0 	bl	d9f42 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
              error_(SYSTEM_ERROR_NONE) {
   da002:	2300      	movs	r3, #0
   da004:	6023      	str	r3, [r4, #0]
   da006:	80a3      	strh	r3, [r4, #4]
    SleepResult() {}
   da008:	71a3      	strb	r3, [r4, #6]
   da00a:	8123      	strh	r3, [r4, #8]
   da00c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   da010:	8163      	strh	r3, [r4, #10]
        error_ = result.error_;
   da012:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
   da016:	80a3      	strh	r3, [r4, #4]
        compatResult_ = result.compatResult_;
   da018:	683b      	ldr	r3, [r7, #0]
   da01a:	f8c4 3006 	str.w	r3, [r4, #6]
   da01e:	88bb      	ldrh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   da020:	6829      	ldr	r1, [r5, #0]
        compatResult_ = result.compatResult_;
   da022:	8163      	strh	r3, [r4, #10]
        copyWakeupSource(result.wakeupSource_);
   da024:	4620      	mov	r0, r4
   da026:	f7ff ffab 	bl	d9f80 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>
        System.systemSleepResult_ = result;
    }
    return System.systemSleepResult_;
}
   da02a:	4620      	mov	r0, r4
   da02c:	b00b      	add	sp, #44	; 0x2c
   da02e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        LOG(ERROR, "System sleep configuration is invalid.");
   da030:	2600      	movs	r6, #0
   da032:	2320      	movs	r3, #32
   da034:	e9cd 3602 	strd	r3, r6, [sp, #8]
   da038:	4b0c      	ldr	r3, [pc, #48]	; (da06c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xc0>)
   da03a:	9300      	str	r3, [sp, #0]
   da03c:	490c      	ldr	r1, [pc, #48]	; (da070 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xc4>)
   da03e:	4633      	mov	r3, r6
   da040:	aa02      	add	r2, sp, #8
   da042:	2032      	movs	r0, #50	; 0x32
   da044:	f7fd fb44 	bl	d76d0 <log_message>
    SleepResult() {}
   da048:	4b07      	ldr	r3, [pc, #28]	; (da068 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
   da04a:	9304      	str	r3, [sp, #16]
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
   da04c:	a902      	add	r1, sp, #8
        error_ = error;
   da04e:	f64f 63f2 	movw	r3, #65266	; 0xfef2
   da052:	4804      	ldr	r0, [pc, #16]	; (da064 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
              error_(SYSTEM_ERROR_NONE) {
   da054:	9602      	str	r6, [sp, #8]
    SleepResult() {}
   da056:	f88d 600e 	strb.w	r6, [sp, #14]
        error_ = error;
   da05a:	f8ad 300c 	strh.w	r3, [sp, #12]
   da05e:	f7ff ff79 	bl	d9f54 <_ZN17SystemSleepResultaSEOS_>
   da062:	e7cb      	b.n	d9ffc <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x50>
   da064:	2003e684 	.word	0x2003e684
   da068:	ffff0000 	.word	0xffff0000
   da06c:	000df2bf 	.word	0x000df2bf
   da070:	000df2b8 	.word	0x000df2b8

000da074 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   da074:	4b05      	ldr	r3, [pc, #20]	; (da08c <_GLOBAL__sub_I_System+0x18>)
   da076:	2202      	movs	r2, #2
   da078:	601a      	str	r2, [r3, #0]
              error_(SYSTEM_ERROR_NONE) {
   da07a:	4b05      	ldr	r3, [pc, #20]	; (da090 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   da07c:	4a05      	ldr	r2, [pc, #20]	; (da094 <_GLOBAL__sub_I_System+0x20>)
   da07e:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   da080:	2000      	movs	r0, #0
   da082:	6018      	str	r0, [r3, #0]
   da084:	8098      	strh	r0, [r3, #4]
    SleepResult() {}
   da086:	7198      	strb	r0, [r3, #6]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   da088:	f7fd bb54 	b.w	d7734 <set_system_mode>
   da08c:	2003e690 	.word	0x2003e690
   da090:	2003e684 	.word	0x2003e684
   da094:	ffff0000 	.word	0xffff0000

000da098 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   da098:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   da09a:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   da09c:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   da0a0:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   da0a2:	2201      	movs	r2, #1
   da0a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   da0a8:	f10d 0107 	add.w	r1, sp, #7
   da0ac:	47a0      	blx	r4
}
   da0ae:	b002      	add	sp, #8
   da0b0:	bd10      	pop	{r4, pc}

000da0b2 <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   da0b2:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   da0b4:	6803      	ldr	r3, [r0, #0]
   da0b6:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   da0b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   da0bc:	46a4      	mov	ip, r4
}
   da0be:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   da0c2:	4760      	bx	ip

000da0c4 <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   da0c4:	b513      	push	{r0, r1, r4, lr}
   da0c6:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   da0c8:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   da0ca:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   da0ce:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   da0d0:	f10d 0107 	add.w	r1, sp, #7
   da0d4:	2201      	movs	r2, #1
   da0d6:	47a0      	blx	r4
}
   da0d8:	b002      	add	sp, #8
   da0da:	bd10      	pop	{r4, pc}

000da0dc <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   da0dc:	4770      	bx	lr

000da0de <_ZN9TCPClient9connectedEv>:
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   da0de:	b538      	push	{r3, r4, r5, lr}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   da0e0:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   da0e2:	681a      	ldr	r2, [r3, #0]
   da0e4:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   da0e6:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   da0e8:	da10      	bge.n	da10c <_ZN9TCPClient9connectedEv+0x2e>
   da0ea:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   da0ee:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   da0f2:	429a      	cmp	r2, r3
   da0f4:	d10a      	bne.n	da10c <_ZN9TCPClient9connectedEv+0x2e>
    if (!rv) {
        rv = available();
   da0f6:	6803      	ldr	r3, [r0, #0]
   da0f8:	691b      	ldr	r3, [r3, #16]
   da0fa:	4798      	blx	r3
        if (!rv) {
   da0fc:	4604      	mov	r4, r0
   da0fe:	b928      	cbnz	r0, da10c <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   da100:	682b      	ldr	r3, [r5, #0]
   da102:	4628      	mov	r0, r5
   da104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   da106:	4798      	blx	r3
        rv = available();
   da108:	4620      	mov	r0, r4
        }
    }
    return rv;
}
   da10a:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   da10c:	2001      	movs	r0, #1
   da10e:	e7fc      	b.n	da10a <_ZN9TCPClient9connectedEv+0x2c>

000da110 <_ZN9TCPClientcvbEv>:

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   da110:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   da112:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   da114:	43c0      	mvns	r0, r0
   da116:	0fc0      	lsrs	r0, r0, #31
   da118:	4770      	bx	lr

000da11a <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   da11a:	4770      	bx	lr

000da11c <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   da11c:	4b06      	ldr	r3, [pc, #24]	; (da138 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   da11e:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   da120:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   da122:	f100 040c 	add.w	r4, r0, #12
	    ||
   da126:	d005      	beq.n	da134 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   da128:	4608      	mov	r0, r1
   da12a:	f001 faff 	bl	db72c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	    ||
   da12e:	2800      	cmp	r0, #0
	return nullptr;
   da130:	bf08      	it	eq
   da132:	2400      	moveq	r4, #0
      }
   da134:	4620      	mov	r0, r4
   da136:	bd10      	pop	{r4, pc}
   da138:	000df0b8 	.word	0x000df0b8

000da13c <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   da13c:	b510      	push	{r4, lr}
   da13e:	21ac      	movs	r1, #172	; 0xac
   da140:	4604      	mov	r4, r0
   da142:	f001 fa37 	bl	db5b4 <_ZdlPvj>
   da146:	4620      	mov	r0, r4
   da148:	bd10      	pop	{r4, pc}

000da14a <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   da14a:	f7f9 bfa8 	b.w	d409e <_ZdlPv>

000da14e <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   da14e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   da152:	f04f 0800 	mov.w	r8, #0
   da156:	b086      	sub	sp, #24
   da158:	461d      	mov	r5, r3
   da15a:	f8c0 8004 	str.w	r8, [r0, #4]
   da15e:	4604      	mov	r4, r0
   da160:	460e      	mov	r6, r1
   da162:	4617      	mov	r7, r2
    struct timeval tv = {};
   da164:	4641      	mov	r1, r8
   da166:	2210      	movs	r2, #16
   da168:	a802      	add	r0, sp, #8
   da16a:	f002 faef 	bl	dc74c <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   da16e:	1c6b      	adds	r3, r5, #1
   da170:	d009      	beq.n	da186 <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   da172:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   da176:	fbb5 f3f0 	udiv	r3, r5, r0
   da17a:	e9cd 3802 	strd	r3, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   da17e:	fb00 5313 	mls	r3, r0, r3, r5
   da182:	4358      	muls	r0, r3
   da184:	9004      	str	r0, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   da186:	6960      	ldr	r0, [r4, #20]
   da188:	2310      	movs	r3, #16
   da18a:	9300      	str	r3, [sp, #0]
   da18c:	6800      	ldr	r0, [r0, #0]
   da18e:	ab02      	add	r3, sp, #8
   da190:	f241 0205 	movw	r2, #4101	; 0x1005
   da194:	f640 71ff 	movw	r1, #4095	; 0xfff
   da198:	f7fd f9b2 	bl	d7500 <sock_setsockopt>
    if (ret < 0) {
   da19c:	2800      	cmp	r0, #0
   da19e:	da07      	bge.n	da1b0 <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   da1a0:	f7fd fc18 	bl	d79d4 <__errno>
   da1a4:	6803      	ldr	r3, [r0, #0]
   da1a6:	6063      	str	r3, [r4, #4]
        return 0;
   da1a8:	2000      	movs	r0, #0
}
   da1aa:	b006      	add	sp, #24
   da1ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   da1b0:	6960      	ldr	r0, [r4, #20]
   da1b2:	2300      	movs	r3, #0
   da1b4:	6800      	ldr	r0, [r0, #0]
   da1b6:	463a      	mov	r2, r7
   da1b8:	4631      	mov	r1, r6
   da1ba:	f7fd f9c9 	bl	d7550 <sock_send>
    if (ret < 0) {
   da1be:	1e03      	subs	r3, r0, #0
   da1c0:	dbee      	blt.n	da1a0 <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   da1c2:	4618      	mov	r0, r3
   da1c4:	e7f1      	b.n	da1aa <_ZN9TCPClient5writeEPKhjm+0x5c>
	...

000da1c8 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   da1c8:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
   da1ca:	6984      	ldr	r4, [r0, #24]
   da1cc:	4b0a      	ldr	r3, [pc, #40]	; (da1f8 <_ZN9TCPClientD1Ev+0x30>)
   da1ce:	6003      	str	r3, [r0, #0]
   da1d0:	4605      	mov	r5, r0
   da1d2:	b17c      	cbz	r4, da1f4 <_ZN9TCPClientD1Ev+0x2c>
      if (--_M_use_count == 0)
   da1d4:	6863      	ldr	r3, [r4, #4]
   da1d6:	3b01      	subs	r3, #1
   da1d8:	6063      	str	r3, [r4, #4]
   da1da:	b95b      	cbnz	r3, da1f4 <_ZN9TCPClientD1Ev+0x2c>
          _M_dispose();
   da1dc:	6823      	ldr	r3, [r4, #0]
   da1de:	4620      	mov	r0, r4
   da1e0:	689b      	ldr	r3, [r3, #8]
   da1e2:	4798      	blx	r3
          if (--_M_weak_count == 0)
   da1e4:	68a3      	ldr	r3, [r4, #8]
   da1e6:	3b01      	subs	r3, #1
   da1e8:	60a3      	str	r3, [r4, #8]
   da1ea:	b91b      	cbnz	r3, da1f4 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   da1ec:	6823      	ldr	r3, [r4, #0]
   da1ee:	4620      	mov	r0, r4
   da1f0:	68db      	ldr	r3, [r3, #12]
   da1f2:	4798      	blx	r3
   da1f4:	4628      	mov	r0, r5
   da1f6:	bd38      	pop	{r3, r4, r5, pc}
   da1f8:	000df31c 	.word	0x000df31c

000da1fc <_ZN9TCPClientD0Ev>:
   da1fc:	b510      	push	{r4, lr}
   da1fe:	4604      	mov	r4, r0
   da200:	f7ff ffe2 	bl	da1c8 <_ZN9TCPClientD1Ev>
   da204:	4620      	mov	r0, r4
   da206:	211c      	movs	r1, #28
   da208:	f001 f9d4 	bl	db5b4 <_ZdlPvj>
   da20c:	4620      	mov	r0, r4
   da20e:	bd10      	pop	{r4, pc}

000da210 <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   da210:	b570      	push	{r4, r5, r6, lr}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   da212:	694d      	ldr	r5, [r1, #20]
   da214:	4b05      	ldr	r3, [pc, #20]	; (da22c <_ZN9TCPClient8remoteIPEv+0x1c>)
   da216:	4604      	mov	r4, r0
   da218:	358c      	adds	r5, #140	; 0x8c
   da21a:	f844 3b04 	str.w	r3, [r4], #4
   da21e:	4606      	mov	r6, r0
   da220:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   da222:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   da224:	682b      	ldr	r3, [r5, #0]
   da226:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   da228:	4630      	mov	r0, r6
   da22a:	bd70      	pop	{r4, r5, r6, pc}
   da22c:	000df184 	.word	0x000df184

000da230 <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   da230:	b510      	push	{r4, lr}
   da232:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   da234:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   da238:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   da23c:	429a      	cmp	r2, r3
int TCPClient::peek() {
   da23e:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   da240:	d005      	beq.n	da24e <_ZN9TCPClient4peekEv+0x1e>
   da242:	6963      	ldr	r3, [r4, #20]
   da244:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   da248:	4413      	add	r3, r2
   da24a:	7918      	ldrb	r0, [r3, #4]
}
   da24c:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   da24e:	6803      	ldr	r3, [r0, #0]
   da250:	691b      	ldr	r3, [r3, #16]
   da252:	4798      	blx	r3
   da254:	2800      	cmp	r0, #0
   da256:	d1f4      	bne.n	da242 <_ZN9TCPClient4peekEv+0x12>
   da258:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   da25c:	e7f6      	b.n	da24c <_ZN9TCPClient4peekEv+0x1c>

000da25e <_ZN9TCPClient4readEv>:
int TCPClient::read() {
   da25e:	b510      	push	{r4, lr}
   da260:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   da262:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   da266:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   da26a:	429a      	cmp	r2, r3
int TCPClient::read() {
   da26c:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   da26e:	d008      	beq.n	da282 <_ZN9TCPClient4readEv+0x24>
   da270:	6963      	ldr	r3, [r4, #20]
   da272:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   da276:	1c51      	adds	r1, r2, #1
   da278:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   da27c:	4413      	add	r3, r2
   da27e:	7918      	ldrb	r0, [r3, #4]
}
   da280:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   da282:	6803      	ldr	r3, [r0, #0]
   da284:	691b      	ldr	r3, [r3, #16]
   da286:	4798      	blx	r3
   da288:	2800      	cmp	r0, #0
   da28a:	d1f1      	bne.n	da270 <_ZN9TCPClient4readEv+0x12>
   da28c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   da290:	e7f6      	b.n	da280 <_ZN9TCPClient4readEv+0x22>

000da292 <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   da292:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   da294:	6943      	ldr	r3, [r0, #20]
   da296:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   da298:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   da29c:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   da2a0:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   da2a2:	4605      	mov	r5, r0
   da2a4:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   da2a6:	d016      	beq.n	da2d6 <_ZN9TCPClient4readEPhj+0x44>
   da2a8:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   da2aa:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   da2ae:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   da2b2:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   da2b4:	42bc      	cmp	r4, r7
   da2b6:	bf28      	it	cs
   da2b8:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   da2ba:	3304      	adds	r3, #4
   da2bc:	4622      	mov	r2, r4
   da2be:	4419      	add	r1, r3
   da2c0:	4630      	mov	r0, r6
   da2c2:	f002 fa1b 	bl	dc6fc <memcpy>
   da2c6:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   da2c8:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   da2cc:	4423      	add	r3, r4
   da2ce:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   da2d2:	4620      	mov	r0, r4
   da2d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   da2d6:	6803      	ldr	r3, [r0, #0]
   da2d8:	691b      	ldr	r3, [r3, #16]
   da2da:	4798      	blx	r3
   da2dc:	2800      	cmp	r0, #0
   da2de:	d1e3      	bne.n	da2a8 <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   da2e0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   da2e4:	e7f5      	b.n	da2d2 <_ZN9TCPClient4readEPhj+0x40>
	...

000da2e8 <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   da2e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   da2ec:	4698      	mov	r8, r3
    stop();
   da2ee:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   da2f0:	b093      	sub	sp, #76	; 0x4c
   da2f2:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   da2f4:	2400      	movs	r4, #0
    stop();
   da2f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   da2f8:	4606      	mov	r6, r0
   da2fa:	4617      	mov	r7, r2
    stop();
   da2fc:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   da2fe:	4628      	mov	r0, r5
   da300:	466b      	mov	r3, sp
   da302:	4622      	mov	r2, r4
   da304:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   da306:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   da308:	f7fd f8ea 	bl	d74e0 <netdb_getaddrinfo>
   da30c:	4605      	mov	r5, r0
   da30e:	2800      	cmp	r0, #0
   da310:	d163      	bne.n	da3da <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   da312:	9b00      	ldr	r3, [sp, #0]
   da314:	2b00      	cmp	r3, #0
   da316:	d04b      	beq.n	da3b0 <_ZN9TCPClient7connectEPKctm+0xc8>
   da318:	695b      	ldr	r3, [r3, #20]
   da31a:	2b00      	cmp	r3, #0
   da31c:	d048      	beq.n	da3b0 <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   da31e:	a806      	add	r0, sp, #24
   da320:	f7fe f8b6 	bl	d8490 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   da324:	9b00      	ldr	r3, [sp, #0]
   da326:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   da328:	7863      	ldrb	r3, [r4, #1]
   da32a:	2b02      	cmp	r3, #2
   da32c:	d104      	bne.n	da338 <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   da32e:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   da330:	a806      	add	r0, sp, #24
   da332:	f7fe f8fd 	bl	d8530 <_ZN9IPAddressaSEPKh>
        }
        if (port) {
   da336:	e026      	b.n	da386 <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   da338:	2b0a      	cmp	r3, #10
   da33a:	d124      	bne.n	da386 <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   da33c:	2211      	movs	r2, #17
   da33e:	4629      	mov	r1, r5
   da340:	a801      	add	r0, sp, #4
   da342:	f002 fa03 	bl	dc74c <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   da346:	68a3      	ldr	r3, [r4, #8]
   da348:	2b00      	cmp	r3, #0
   da34a:	d038      	beq.n	da3be <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   da34c:	f104 0308 	add.w	r3, r4, #8
   da350:	f10d 0c04 	add.w	ip, sp, #4
   da354:	3418      	adds	r4, #24
   da356:	6818      	ldr	r0, [r3, #0]
   da358:	6859      	ldr	r1, [r3, #4]
   da35a:	4662      	mov	r2, ip
   da35c:	c203      	stmia	r2!, {r0, r1}
   da35e:	3308      	adds	r3, #8
   da360:	42a3      	cmp	r3, r4
   da362:	4694      	mov	ip, r2
   da364:	d1f7      	bne.n	da356 <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   da366:	2306      	movs	r3, #6
            addr = IPAddress(a);
   da368:	a901      	add	r1, sp, #4
   da36a:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   da36c:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   da370:	f7fe f89c 	bl	d84ac <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   da374:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   da378:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   da37c:	ac07      	add	r4, sp, #28
   da37e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   da380:	f8dc 3000 	ldr.w	r3, [ip]
   da384:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   da386:	a806      	add	r0, sp, #24
   da388:	f7fe f8a2 	bl	d84d0 <_ZNK9IPAddresscvbEv>
        if (addr) {
   da38c:	b180      	cbz	r0, da3b0 <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   da38e:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   da390:	ad07      	add	r5, sp, #28
   da392:	f8d3 9020 	ldr.w	r9, [r3, #32]
   da396:	4b12      	ldr	r3, [pc, #72]	; (da3e0 <_ZN9TCPClient7connectEPKctm+0xf8>)
   da398:	930c      	str	r3, [sp, #48]	; 0x30
   da39a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   da39c:	ac0d      	add	r4, sp, #52	; 0x34
   da39e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   da3a0:	682b      	ldr	r3, [r5, #0]
   da3a2:	7023      	strb	r3, [r4, #0]
   da3a4:	463a      	mov	r2, r7
   da3a6:	4643      	mov	r3, r8
   da3a8:	a90c      	add	r1, sp, #48	; 0x30
   da3aa:	4630      	mov	r0, r6
   da3ac:	47c8      	blx	r9
   da3ae:	4605      	mov	r5, r0
    SCOPE_GUARD({
   da3b0:	9800      	ldr	r0, [sp, #0]
   da3b2:	f7fd f88d 	bl	d74d0 <netdb_freeaddrinfo>
}
   da3b6:	4628      	mov	r0, r5
   da3b8:	b013      	add	sp, #76	; 0x4c
   da3ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   da3be:	68e3      	ldr	r3, [r4, #12]
   da3c0:	2b00      	cmp	r3, #0
   da3c2:	d1c3      	bne.n	da34c <_ZN9TCPClient7connectEPKctm+0x64>
   da3c4:	f64f 70ff 	movw	r0, #65535	; 0xffff
   da3c8:	f8d4 9010 	ldr.w	r9, [r4, #16]
   da3cc:	f7fd f868 	bl	d74a0 <inet_htonl>
   da3d0:	4581      	cmp	r9, r0
   da3d2:	d1bb      	bne.n	da34c <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   da3d4:	f104 0114 	add.w	r1, r4, #20
   da3d8:	e7aa      	b.n	da330 <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   da3da:	4625      	mov	r5, r4
   da3dc:	e7e8      	b.n	da3b0 <_ZN9TCPClient7connectEPKctm+0xc8>
   da3de:	bf00      	nop
   da3e0:	000df184 	.word	0x000df184

000da3e4 <_ZN9TCPClient12flush_bufferEv>:
   da3e4:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   da3e6:	2300      	movs	r3, #0
   da3e8:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   da3ec:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   da3ee:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   da3f2:	4770      	bx	lr

000da3f4 <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   da3f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   da3f8:	461f      	mov	r7, r3
    stop();
   da3fa:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   da3fc:	460c      	mov	r4, r1
    stop();
   da3fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   da400:	b08a      	sub	sp, #40	; 0x28
   da402:	4605      	mov	r5, r0
   da404:	4616      	mov	r6, r2
    stop();
   da406:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   da408:	7d23      	ldrb	r3, [r4, #20]
   da40a:	f8d5 8014 	ldr.w	r8, [r5, #20]
   da40e:	2b04      	cmp	r3, #4
   da410:	bf0c      	ite	eq
   da412:	2002      	moveq	r0, #2
   da414:	200a      	movne	r0, #10
   da416:	2206      	movs	r2, #6
   da418:	2101      	movs	r1, #1
   da41a:	f7fd f8a9 	bl	d7570 <sock_socket>
   da41e:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   da422:	696b      	ldr	r3, [r5, #20]
   da424:	681b      	ldr	r3, [r3, #0]
   da426:	2b00      	cmp	r3, #0
   da428:	da08      	bge.n	da43c <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   da42a:	682b      	ldr	r3, [r5, #0]
   da42c:	4628      	mov	r0, r5
   da42e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   da430:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   da432:	4798      	blx	r3
}
   da434:	4620      	mov	r0, r4
   da436:	b00a      	add	sp, #40	; 0x28
   da438:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   da43c:	4628      	mov	r0, r5
   da43e:	f7ff ffd1 	bl	da3e4 <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   da442:	b1b7      	cbz	r7, da472 <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   da444:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   da446:	a903      	add	r1, sp, #12
   da448:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   da44a:	9303      	str	r3, [sp, #12]
   da44c:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   da450:	f7fd f816 	bl	d7480 <if_index_to_name>
   da454:	2800      	cmp	r0, #0
   da456:	d1e8      	bne.n	da42a <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   da458:	6968      	ldr	r0, [r5, #20]
   da45a:	2306      	movs	r3, #6
   da45c:	9300      	str	r3, [sp, #0]
   da45e:	6800      	ldr	r0, [r0, #0]
   da460:	ab03      	add	r3, sp, #12
   da462:	f241 020b 	movw	r2, #4107	; 0x100b
   da466:	f640 71ff 	movw	r1, #4095	; 0xfff
   da46a:	f7fd f849 	bl	d7500 <sock_setsockopt>
   da46e:	2800      	cmp	r0, #0
   da470:	d1db      	bne.n	da42a <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   da472:	221c      	movs	r2, #28
   da474:	2100      	movs	r1, #0
   da476:	a803      	add	r0, sp, #12
   da478:	f002 f968 	bl	dc74c <memset>
    if (ip.version() == 4) {
   da47c:	7d23      	ldrb	r3, [r4, #20]
   da47e:	2b04      	cmp	r3, #4
   da480:	d11d      	bne.n	da4be <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   da482:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   da486:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   da488:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   da48c:	f7fd f818 	bl	d74c0 <inet_htons>
   da490:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   da494:	6860      	ldr	r0, [r4, #4]
   da496:	f7fd f803 	bl	d74a0 <inet_htonl>
   da49a:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   da49c:	696b      	ldr	r3, [r5, #20]
   da49e:	221c      	movs	r2, #28
   da4a0:	6818      	ldr	r0, [r3, #0]
   da4a2:	a903      	add	r1, sp, #12
   da4a4:	f7fd f83c 	bl	d7520 <sock_connect>
   da4a8:	2800      	cmp	r0, #0
   da4aa:	d1be      	bne.n	da42a <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   da4ac:	3404      	adds	r4, #4
   da4ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   da4b0:	696d      	ldr	r5, [r5, #20]
   da4b2:	358c      	adds	r5, #140	; 0x8c
   da4b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   da4b6:	6823      	ldr	r3, [r4, #0]
   da4b8:	702b      	strb	r3, [r5, #0]
    return 1; // success
   da4ba:	2401      	movs	r4, #1
   da4bc:	e7ba      	b.n	da434 <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   da4be:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   da4c2:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   da4c4:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   da4c8:	f7fc fffa 	bl	d74c0 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   da4cc:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   da4ce:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   da4d2:	1d23      	adds	r3, r4, #4
   da4d4:	f104 0714 	add.w	r7, r4, #20
   da4d8:	6818      	ldr	r0, [r3, #0]
   da4da:	6859      	ldr	r1, [r3, #4]
   da4dc:	4632      	mov	r2, r6
   da4de:	c203      	stmia	r2!, {r0, r1}
   da4e0:	3308      	adds	r3, #8
   da4e2:	42bb      	cmp	r3, r7
   da4e4:	4616      	mov	r6, r2
   da4e6:	d1f7      	bne.n	da4d8 <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   da4e8:	e7d8      	b.n	da49c <_ZN9TCPClient7connectE9IPAddresstm+0xa8>
	...

000da4ec <_ZN9TCPClient9availableEv>:
{
   da4ec:	b530      	push	{r4, r5, lr}
   da4ee:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   da4f0:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   da4f4:	b08b      	sub	sp, #44	; 0x2c
   da4f6:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   da4f8:	b12b      	cbz	r3, da506 <_ZN9TCPClient9availableEv+0x1a>
   da4fa:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   da4fe:	429a      	cmp	r2, r3
   da500:	d101      	bne.n	da506 <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   da502:	f7ff ff6f 	bl	da3e4 <_ZN9TCPClient12flush_bufferEv>
   da506:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   da508:	6808      	ldr	r0, [r1, #0]
   da50a:	2800      	cmp	r0, #0
   da50c:	db18      	blt.n	da540 <_ZN9TCPClient9availableEv+0x54>
   da50e:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
        if (d_->total < arraySize(d_->buffer)) {
   da512:	2d7f      	cmp	r5, #127	; 0x7f
   da514:	d814      	bhi.n	da540 <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   da516:	3104      	adds	r1, #4
   da518:	2308      	movs	r3, #8
   da51a:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   da51e:	4429      	add	r1, r5
   da520:	f7fd f806 	bl	d7530 <sock_recv>
            if (ret > 0) {
   da524:	2800      	cmp	r0, #0
   da526:	dd13      	ble.n	da550 <_ZN9TCPClient9availableEv+0x64>
   da528:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   da52a:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   da52e:	b90a      	cbnz	r2, da534 <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   da530:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   da534:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   da536:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   da53a:	4410      	add	r0, r2
   da53c:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   da540:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   da542:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   da546:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   da54a:	1ac0      	subs	r0, r0, r3
   da54c:	b00b      	add	sp, #44	; 0x2c
   da54e:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   da550:	f7fd fa40 	bl	d79d4 <__errno>
   da554:	6803      	ldr	r3, [r0, #0]
   da556:	2b0b      	cmp	r3, #11
   da558:	d0f2      	beq.n	da540 <_ZN9TCPClient9availableEv+0x54>
   da55a:	f7fd fa3b 	bl	d79d4 <__errno>
   da55e:	6803      	ldr	r3, [r0, #0]
   da560:	2b0b      	cmp	r3, #11
   da562:	d0ed      	beq.n	da540 <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   da564:	2320      	movs	r3, #32
   da566:	2500      	movs	r5, #0
   da568:	e9cd 3502 	strd	r3, r5, [sp, #8]
   da56c:	f7fd fa32 	bl	d79d4 <__errno>
   da570:	6803      	ldr	r3, [r0, #0]
   da572:	9301      	str	r3, [sp, #4]
   da574:	4b08      	ldr	r3, [pc, #32]	; (da598 <_ZN9TCPClient9availableEv+0xac>)
   da576:	4909      	ldr	r1, [pc, #36]	; (da59c <_ZN9TCPClient9availableEv+0xb0>)
   da578:	9300      	str	r3, [sp, #0]
   da57a:	aa02      	add	r2, sp, #8
   da57c:	462b      	mov	r3, r5
   da57e:	2032      	movs	r0, #50	; 0x32
   da580:	f7fd f8a6 	bl	d76d0 <log_message>
                    sock_close(d_->sock);
   da584:	6963      	ldr	r3, [r4, #20]
   da586:	6818      	ldr	r0, [r3, #0]
   da588:	f7fc ffc2 	bl	d7510 <sock_close>
   da58c:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   da58e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   da592:	601a      	str	r2, [r3, #0]
   da594:	e7d4      	b.n	da540 <_ZN9TCPClient9availableEv+0x54>
   da596:	bf00      	nop
   da598:	000df2e6 	.word	0x000df2e6
   da59c:	000df2b8 	.word	0x000df2b8

000da5a0 <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   da5a0:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   da5a2:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   da5a4:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   da5a6:	6818      	ldr	r0, [r3, #0]
   da5a8:	2800      	cmp	r0, #0
   da5aa:	db01      	blt.n	da5b0 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   da5ac:	f7fc ffb0 	bl	d7510 <sock_close>
   da5b0:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   da5b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   da5b6:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   da5b8:	6960      	ldr	r0, [r4, #20]
   da5ba:	2211      	movs	r2, #17
   da5bc:	2100      	movs	r1, #0
   da5be:	308c      	adds	r0, #140	; 0x8c
   da5c0:	f002 f8c4 	bl	dc74c <memset>
    flush_buffer();
   da5c4:	4620      	mov	r0, r4
}
   da5c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   da5ca:	f7ff bf0b 	b.w	da3e4 <_ZN9TCPClient12flush_bufferEv>

000da5ce <_ZN9TCPClient6statusEv>:
    return (isOpen(d_->sock));
   da5ce:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   da5d0:	6818      	ldr	r0, [r3, #0]
}
   da5d2:	43c0      	mvns	r0, r0
   da5d4:	0fc0      	lsrs	r0, r0, #31
   da5d6:	4770      	bx	lr

000da5d8 <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   da5d8:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   da5da:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   da5dc:	4604      	mov	r4, r0
          total(0) {
   da5de:	6001      	str	r1, [r0, #0]
   da5e0:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   da5e4:	3088      	adds	r0, #136	; 0x88
   da5e6:	f7fd ff53 	bl	d8490 <_ZN9IPAddressC1Ev>
}
   da5ea:	4620      	mov	r0, r4
   da5ec:	bd10      	pop	{r4, pc}
	...

000da5f0 <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   da5f0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   da5f2:	2300      	movs	r3, #0
   da5f4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   da5f8:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   da5fc:	4a0e      	ldr	r2, [pc, #56]	; (da638 <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   da5fe:	6103      	str	r3, [r0, #16]
   da600:	6002      	str	r2, [r0, #0]

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   da602:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   da604:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   da606:	20ac      	movs	r0, #172	; 0xac
   da608:	9101      	str	r1, [sp, #4]
   da60a:	f7f9 fd44 	bl	d4096 <_Znwj>
	  auto __pi = ::new (__mem)
   da60e:	1e05      	subs	r5, r0, #0
   da610:	f105 060c 	add.w	r6, r5, #12
   da614:	d008      	beq.n	da628 <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   da616:	2301      	movs	r3, #1
   da618:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   da61c:	4b07      	ldr	r3, [pc, #28]	; (da63c <_ZN9TCPClientC1Ei+0x4c>)
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(noexcept(::new((void *)__p)
			    _Up(std::forward<_Args>(__args)...)))
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   da61e:	9901      	ldr	r1, [sp, #4]
   da620:	602b      	str	r3, [r5, #0]
   da622:	4630      	mov	r0, r6
   da624:	f7ff ffd8 	bl	da5d8 <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   da628:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   da62a:	e9c4 6505 	strd	r6, r5, [r4, #20]
   da62e:	f7ff fed9 	bl	da3e4 <_ZN9TCPClient12flush_bufferEv>
}
   da632:	b002      	add	sp, #8
   da634:	bd70      	pop	{r4, r5, r6, pc}
   da636:	bf00      	nop
   da638:	000df31c 	.word	0x000df31c
   da63c:	000df300 	.word	0x000df300

000da640 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   da640:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   da642:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
TCPClient::TCPClient()
   da646:	4604      	mov	r4, r0
        : TCPClient(-1) {
   da648:	f7ff ffd2 	bl	da5f0 <_ZN9TCPClientC1Ei>
}
   da64c:	4620      	mov	r0, r4
   da64e:	bd10      	pop	{r4, pc}

000da650 <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   da650:	b510      	push	{r4, lr}
   da652:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   da654:	6800      	ldr	r0, [r0, #0]
   da656:	2800      	cmp	r0, #0
   da658:	db01      	blt.n	da65e <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   da65a:	f7fc ff59 	bl	d7510 <sock_close>
    }
}
   da65e:	4620      	mov	r0, r4
   da660:	bd10      	pop	{r4, pc}

000da662 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(noexcept( __p->~_Up()))
	{ __p->~_Up(); }
   da662:	300c      	adds	r0, #12
   da664:	f7ff bff4 	b.w	da650 <_ZN9TCPClient4DataD1Ev>

000da668 <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   da668:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
   da66c:	4a15      	ldr	r2, [pc, #84]	; (da6c4 <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   da66e:	f8df 8060 	ldr.w	r8, [pc, #96]	; da6d0 <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
   da672:	e9d2 3200 	ldrd	r3, r2, [r2]
   da676:	18c0      	adds	r0, r0, r3
   da678:	eb42 0101 	adc.w	r1, r2, r1
    unix_time += dst_current_cache;
   da67c:	4a12      	ldr	r2, [pc, #72]	; (da6c8 <_ZL22Refresh_UnixTime_Cachex+0x60>)
   da67e:	e9d2 3200 	ldrd	r3, r2, [r2]
   da682:	18c6      	adds	r6, r0, r3
   da684:	eb41 0702 	adc.w	r7, r1, r2
    if(unix_time != unix_time_cache)
   da688:	e9d8 2300 	ldrd	r2, r3, [r8]
   da68c:	42bb      	cmp	r3, r7
   da68e:	bf08      	it	eq
   da690:	42b2      	cmpeq	r2, r6
{
   da692:	b08c      	sub	sp, #48	; 0x30
    if(unix_time != unix_time_cache)
   da694:	d013      	beq.n	da6be <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
   da696:	a903      	add	r1, sp, #12
   da698:	4668      	mov	r0, sp
   da69a:	e9cd 6700 	strd	r6, r7, [sp]
   da69e:	f7fd f9b1 	bl	d7a04 <localtime_r>
	calendar_time.tm_year += 1900;
   da6a2:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   da6a4:	4d09      	ldr	r5, [pc, #36]	; (da6cc <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
   da6a6:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   da6aa:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
   da6ac:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   da6ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   da6b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   da6b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   da6b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   da6b6:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   da6ba:	6823      	ldr	r3, [r4, #0]
   da6bc:	602b      	str	r3, [r5, #0]
    }
}
   da6be:	b00c      	add	sp, #48	; 0x30
   da6c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   da6c4:	2003e6c8 	.word	0x2003e6c8
   da6c8:	2003e6c0 	.word	0x2003e6c0
   da6cc:	2003e69c 	.word	0x2003e69c
   da6d0:	2003e6d0 	.word	0x2003e6d0

000da6d4 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
   da6d4:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
   da6d6:	2000      	movs	r0, #0
   da6d8:	f7fd f8bc 	bl	d7854 <spark_sync_time_pending>
   da6dc:	b128      	cbz	r0, da6ea <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   da6de:	f7fd f8a1 	bl	d7824 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   da6e2:	f080 0001 	eor.w	r0, r0, #1
   da6e6:	b2c0      	uxtb	r0, r0
    }
   da6e8:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   da6ea:	2001      	movs	r0, #1
   da6ec:	e7fc      	b.n	da6e8 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

000da6f0 <_ZN9TimeClass4zoneEf>:
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
	if(GMT_Offset < -12 || GMT_Offset > 14)
   da6f0:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
   da6f4:	eeb4 0ae7 	vcmpe.f32	s0, s15
   da6f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
   da6fc:	b508      	push	{r3, lr}
	if(GMT_Offset < -12 || GMT_Offset > 14)
   da6fe:	d411      	bmi.n	da724 <_ZN9TimeClass4zoneEf+0x34>
   da700:	eef2 7a0c 	vmov.f32	s15, #44	; 0x41600000  14.0
   da704:	eeb4 0ae7 	vcmpe.f32	s0, s15
   da708:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   da70c:	dc0a      	bgt.n	da724 <_ZN9TimeClass4zoneEf+0x34>
	{
		return;
	}
	time_zone_cache = GMT_Offset * 3600;
   da70e:	eddf 7a06 	vldr	s15, [pc, #24]	; da728 <_ZN9TimeClass4zoneEf+0x38>
   da712:	ee60 7a27 	vmul.f32	s15, s0, s15
   da716:	ee17 0a90 	vmov	r0, s15
   da71a:	f001 fdf7 	bl	dc30c <__aeabi_f2lz>
   da71e:	4b03      	ldr	r3, [pc, #12]	; (da72c <_ZN9TimeClass4zoneEf+0x3c>)
   da720:	e9c3 0100 	strd	r0, r1, [r3]
}
   da724:	bd08      	pop	{r3, pc}
   da726:	bf00      	nop
   da728:	45610000 	.word	0x45610000
   da72c:	2003e6c8 	.word	0x2003e6c8

000da730 <_ZN9TimeClass12getDSTOffsetEv>:
{
	return time_zone_cache / 3600.0;
}

float TimeClass::getDSTOffset()
{
   da730:	b508      	push	{r3, lr}
    return dst_cache / 3600.0;
   da732:	4b09      	ldr	r3, [pc, #36]	; (da758 <_ZN9TimeClass12getDSTOffsetEv+0x28>)
   da734:	e9d3 0100 	ldrd	r0, r1, [r3]
   da738:	f001 fa98 	bl	dbc6c <__aeabi_l2d>
   da73c:	a304      	add	r3, pc, #16	; (adr r3, da750 <_ZN9TimeClass12getDSTOffsetEv+0x20>)
   da73e:	e9d3 2300 	ldrd	r2, r3, [r3]
   da742:	f001 fbeb 	bl	dbf1c <__aeabi_ddiv>
   da746:	f001 fd79 	bl	dc23c <__aeabi_d2f>
}
   da74a:	ee00 0a10 	vmov	s0, r0
   da74e:	bd08      	pop	{r3, pc}
   da750:	00000000 	.word	0x00000000
   da754:	40ac2000 	.word	0x40ac2000
   da758:	2003e118 	.word	0x2003e118

000da75c <_ZN9TimeClass7setTimeEx>:
    return !(dst_current_cache == 0);
}

/* set the given time as unix/rtc time */
void TimeClass::setTime(time_t t)
{
   da75c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   da75e:	4602      	mov	r2, r0
   da760:	460b      	mov	r3, r1
    struct timeval tv = {
        .tv_sec = t,
        .tv_usec = 0
    };
    if (!hal_rtc_set_time(&tv, nullptr)) {
   da762:	4668      	mov	r0, sp
    struct timeval tv = {
   da764:	2100      	movs	r1, #0
    };
   da766:	e9cd 2300 	strd	r2, r3, [sp]
    struct timeval tv = {
   da76a:	e9cd 1102 	strd	r1, r1, [sp, #8]
    if (!hal_rtc_set_time(&tv, nullptr)) {
   da76e:	f7fc fddf 	bl	d7330 <hal_rtc_set_time>
   da772:	4602      	mov	r2, r0
   da774:	b910      	cbnz	r0, da77c <_ZN9TimeClass7setTimeEx+0x20>
        system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
   da776:	4601      	mov	r1, r0
   da778:	f7fd f80c 	bl	d7794 <system_notify_time_changed>
    }
}
   da77c:	b005      	add	sp, #20
   da77e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000da784 <_ZN9TimeClass7timeStrEx>:

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   da784:	b530      	push	{r4, r5, lr}
   da786:	4604      	mov	r4, r0
    t += time_zone_cache;
   da788:	4818      	ldr	r0, [pc, #96]	; (da7ec <_ZN9TimeClass7timeStrEx+0x68>)
   da78a:	e9d0 1000 	ldrd	r1, r0, [r0]
   da78e:	1852      	adds	r2, r2, r1
   da790:	eb40 0303 	adc.w	r3, r0, r3
    t += dst_current_cache;
   da794:	4816      	ldr	r0, [pc, #88]	; (da7f0 <_ZN9TimeClass7timeStrEx+0x6c>)
   da796:	e9d0 1000 	ldrd	r1, r0, [r0]
   da79a:	1852      	adds	r2, r2, r1
{
   da79c:	b093      	sub	sp, #76	; 0x4c
    t += dst_current_cache;
   da79e:	eb40 0303 	adc.w	r3, r0, r3
   da7a2:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm calendar_time = {};
   da7a6:	2224      	movs	r2, #36	; 0x24
   da7a8:	eb0d 0002 	add.w	r0, sp, r2
   da7ac:	2100      	movs	r1, #0
   da7ae:	f001 ffcd 	bl	dc74c <memset>
    localtime_r(&t, &calendar_time);
    char ascstr[26] = {};
   da7b2:	2500      	movs	r5, #0
    localtime_r(&t, &calendar_time);
   da7b4:	a909      	add	r1, sp, #36	; 0x24
   da7b6:	4668      	mov	r0, sp
   da7b8:	f7fd f924 	bl	d7a04 <localtime_r>
    char ascstr[26] = {};
   da7bc:	2216      	movs	r2, #22
   da7be:	4629      	mov	r1, r5
   da7c0:	a803      	add	r0, sp, #12
   da7c2:	9502      	str	r5, [sp, #8]
   da7c4:	f001 ffc2 	bl	dc74c <memset>
    asctime_r(&calendar_time, ascstr);
   da7c8:	a902      	add	r1, sp, #8
   da7ca:	a809      	add	r0, sp, #36	; 0x24
   da7cc:	f001 ff54 	bl	dc678 <asctime_r>
    int len = strlen(ascstr);
   da7d0:	a802      	add	r0, sp, #8
   da7d2:	f002 f82e 	bl	dc832 <strlen>
    ascstr[len-1] = 0; // remove final newline
   da7d6:	ab12      	add	r3, sp, #72	; 0x48
   da7d8:	4418      	add	r0, r3
    return String(ascstr);
   da7da:	a902      	add	r1, sp, #8
    ascstr[len-1] = 0; // remove final newline
   da7dc:	f800 5c41 	strb.w	r5, [r0, #-65]
    return String(ascstr);
   da7e0:	4620      	mov	r0, r4
   da7e2:	f7ff faec 	bl	d9dbe <_ZN6StringC1EPKc>
}
   da7e6:	4620      	mov	r0, r4
   da7e8:	b013      	add	sp, #76	; 0x4c
   da7ea:	bd30      	pop	{r4, r5, pc}
   da7ec:	2003e6c8 	.word	0x2003e6c8
   da7f0:	2003e6c0 	.word	0x2003e6c0

000da7f4 <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    localtime_r(&t, &calendar_time);
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   da7f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   da7f8:	b0a5      	sub	sp, #148	; 0x94
   da7fa:	4607      	mov	r7, r0
   da7fc:	4688      	mov	r8, r1
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   da7fe:	a814      	add	r0, sp, #80	; 0x50
{
   da800:	4611      	mov	r1, r2
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   da802:	223f      	movs	r2, #63	; 0x3f
{
   da804:	461d      	mov	r5, r3
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   da806:	f002 f82e 	bl	dc866 <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   da80a:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   da80c:	a814      	add	r0, sp, #80	; 0x50
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   da80e:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   da812:	f002 f80e 	bl	dc832 <strlen>
   da816:	4604      	mov	r4, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
   da818:	bb5d      	cbnz	r5, da872 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x7e>
        strcpy(time_zone_str, "Z");
   da81a:	492a      	ldr	r1, [pc, #168]	; (da8c4 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd0>)
   da81c:	a803      	add	r0, sp, #12
   da81e:	f001 ffe2 	bl	dc7e6 <strcpy>
   da822:	ae14      	add	r6, sp, #80	; 0x50
{
   da824:	2500      	movs	r5, #0
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
   da826:	f104 3bff 	add.w	fp, r4, #4294967295	; 0xffffffff
   da82a:	45ab      	cmp	fp, r5
   da82c:	d936      	bls.n	da89c <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xa8>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
   da82e:	46b1      	mov	r9, r6
   da830:	f105 0a01 	add.w	sl, r5, #1
   da834:	f819 3b01 	ldrb.w	r3, [r9], #1
   da838:	2b25      	cmp	r3, #37	; 0x25
   da83a:	d117      	bne.n	da86c <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x78>
   da83c:	7873      	ldrb	r3, [r6, #1]
   da83e:	2b7a      	cmp	r3, #122	; 0x7a
   da840:	d114      	bne.n	da86c <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x78>
        {
            size_t tzlen = strlen(time_zone_str);
   da842:	a803      	add	r0, sp, #12
   da844:	f001 fff5 	bl	dc832 <strlen>
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   da848:	ab14      	add	r3, sp, #80	; 0x50
            size_t tzlen = strlen(time_zone_str);
   da84a:	4604      	mov	r4, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   da84c:	1828      	adds	r0, r5, r0
   da84e:	4418      	add	r0, r3
   da850:	ebab 0205 	sub.w	r2, fp, r5
   da854:	1cb1      	adds	r1, r6, #2
   da856:	f001 ff51 	bl	dc6fc <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
   da85a:	4622      	mov	r2, r4
   da85c:	a903      	add	r1, sp, #12
   da85e:	4630      	mov	r0, r6
   da860:	f001 ff4c 	bl	dc6fc <memcpy>
            len = strlen(format_str);
   da864:	a814      	add	r0, sp, #80	; 0x50
   da866:	f001 ffe4 	bl	dc832 <strlen>
   da86a:	4604      	mov	r4, r0
    for (size_t i=0; i<len-1; i++)
   da86c:	464e      	mov	r6, r9
   da86e:	4655      	mov	r5, sl
   da870:	e7d9      	b.n	da826 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x32>
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
   da872:	213c      	movs	r1, #60	; 0x3c
   da874:	fb95 f3f1 	sdiv	r3, r5, r1
   da878:	2b00      	cmp	r3, #0
   da87a:	bfb8      	it	lt
   da87c:	425b      	neglt	r3, r3
   da87e:	fbb3 f2f1 	udiv	r2, r3, r1
   da882:	fb01 3312 	mls	r3, r1, r2, r3
   da886:	9300      	str	r3, [sp, #0]
   da888:	4a0f      	ldr	r2, [pc, #60]	; (da8c8 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd4>)
   da88a:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   da88e:	2110      	movs	r1, #16
   da890:	a803      	add	r0, sp, #12
   da892:	fb95 f3f3 	sdiv	r3, r5, r3
   da896:	f7fd f87d 	bl	d7994 <snprintf>
   da89a:	e7c2      	b.n	da822 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x2e>
        }
    }

    char buf[50] = {};
   da89c:	2100      	movs	r1, #0
   da89e:	222e      	movs	r2, #46	; 0x2e
   da8a0:	a808      	add	r0, sp, #32
   da8a2:	9107      	str	r1, [sp, #28]
   da8a4:	f001 ff52 	bl	dc74c <memset>
    strftime(buf, sizeof(buf), format_str, calendar_time);
   da8a8:	4643      	mov	r3, r8
   da8aa:	aa14      	add	r2, sp, #80	; 0x50
   da8ac:	2132      	movs	r1, #50	; 0x32
   da8ae:	a807      	add	r0, sp, #28
   da8b0:	f7fd f8a0 	bl	d79f4 <strftime>
    return String(buf);
   da8b4:	a907      	add	r1, sp, #28
   da8b6:	4638      	mov	r0, r7
   da8b8:	f7ff fa81 	bl	d9dbe <_ZN6StringC1EPKc>
}
   da8bc:	4638      	mov	r0, r7
   da8be:	b025      	add	sp, #148	; 0x94
   da8c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   da8c4:	000df360 	.word	0x000df360
   da8c8:	000df362 	.word	0x000df362

000da8cc <_ZN9TimeClass6formatExPKc>:
{
   da8cc:	b5f0      	push	{r4, r5, r6, r7, lr}
   da8ce:	b08d      	sub	sp, #52	; 0x34
   da8d0:	e9cd 2300 	strd	r2, r3, [sp]
   da8d4:	9d12      	ldr	r5, [sp, #72]	; 0x48
   da8d6:	4604      	mov	r4, r0
    if (format_spec == nullptr)
   da8d8:	b915      	cbnz	r5, da8e0 <_ZN9TimeClass6formatExPKc+0x14>
        format_spec = this->format_spec;
   da8da:	4b19      	ldr	r3, [pc, #100]	; (da940 <_ZN9TimeClass6formatExPKc+0x74>)
   da8dc:	681d      	ldr	r5, [r3, #0]
    if (!format_spec || !strcmp(format_spec, TIME_FORMAT_DEFAULT)) {
   da8de:	b12d      	cbz	r5, da8ec <_ZN9TimeClass6formatExPKc+0x20>
   da8e0:	4b18      	ldr	r3, [pc, #96]	; (da944 <_ZN9TimeClass6formatExPKc+0x78>)
   da8e2:	4628      	mov	r0, r5
   da8e4:	6819      	ldr	r1, [r3, #0]
   da8e6:	f001 ff74 	bl	dc7d2 <strcmp>
   da8ea:	b938      	cbnz	r0, da8fc <_ZN9TimeClass6formatExPKc+0x30>
        return timeStr(t);
   da8ec:	e9dd 2300 	ldrd	r2, r3, [sp]
   da8f0:	4620      	mov	r0, r4
   da8f2:	f7ff ff47 	bl	da784 <_ZN9TimeClass7timeStrEx>
}
   da8f6:	4620      	mov	r0, r4
   da8f8:	b00d      	add	sp, #52	; 0x34
   da8fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    t += time_zone_cache;
   da8fc:	4e12      	ldr	r6, [pc, #72]	; (da948 <_ZN9TimeClass6formatExPKc+0x7c>)
   da8fe:	9900      	ldr	r1, [sp, #0]
    t += dst_current_cache;
   da900:	4f12      	ldr	r7, [pc, #72]	; (da94c <_ZN9TimeClass6formatExPKc+0x80>)
    t += time_zone_cache;
   da902:	e9d6 3200 	ldrd	r3, r2, [r6]
   da906:	185b      	adds	r3, r3, r1
   da908:	9901      	ldr	r1, [sp, #4]
   da90a:	eb41 0202 	adc.w	r2, r1, r2
    t += dst_current_cache;
   da90e:	e9d7 0100 	ldrd	r0, r1, [r7]
   da912:	181b      	adds	r3, r3, r0
   da914:	eb41 0202 	adc.w	r2, r1, r2
   da918:	e9cd 3200 	strd	r3, r2, [sp]
    struct tm calendar_time = {};
   da91c:	2100      	movs	r1, #0
   da91e:	2224      	movs	r2, #36	; 0x24
   da920:	a803      	add	r0, sp, #12
   da922:	f001 ff13 	bl	dc74c <memset>
    localtime_r(&t, &calendar_time);
   da926:	a903      	add	r1, sp, #12
   da928:	4668      	mov	r0, sp
   da92a:	f7fd f86b 	bl	d7a04 <localtime_r>
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
   da92e:	6832      	ldr	r2, [r6, #0]
   da930:	683b      	ldr	r3, [r7, #0]
   da932:	a903      	add	r1, sp, #12
   da934:	4413      	add	r3, r2
   da936:	4620      	mov	r0, r4
   da938:	462a      	mov	r2, r5
   da93a:	f7ff ff5b 	bl	da7f4 <_ZN9TimeClass14timeFormatImplEP2tmPKci>
   da93e:	e7da      	b.n	da8f6 <_ZN9TimeClass6formatExPKc+0x2a>
   da940:	2003e698 	.word	0x2003e698
   da944:	2003e110 	.word	0x2003e110
   da948:	2003e6c8 	.word	0x2003e6c8
   da94c:	2003e6c0 	.word	0x2003e6c0

000da950 <_ZN9TimeClass7isValidEv>:

bool TimeClass::isValid()
{
   da950:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   da952:	2000      	movs	r0, #0
   da954:	f7fc fcdc 	bl	d7310 <hal_rtc_time_is_valid>
    if (rtcstate)
   da958:	4604      	mov	r4, r0
   da95a:	b9a0      	cbnz	r0, da986 <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   da95c:	f7fc fee2 	bl	d7724 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   da960:	2801      	cmp	r0, #1
   da962:	d110      	bne.n	da986 <_ZN9TimeClass7isValidEv+0x36>
   da964:	4620      	mov	r0, r4
   da966:	f7fc ff0d 	bl	d7784 <system_thread_get_state>
   da96a:	b960      	cbnz	r0, da986 <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   da96c:	f7ff feb2 	bl	da6d4 <_ZN10CloudClass12syncTimeDoneEv.isra.0>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   da970:	b910      	cbnz	r0, da978 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   da972:	f7fc ff47 	bl	d7804 <spark_process>
        while (_while() && !_condition()) {
   da976:	e7f9      	b.n	da96c <_ZN9TimeClass7isValidEv+0x1c>
   da978:	f7ff feac 	bl	da6d4 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   da97c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   da980:	2000      	movs	r0, #0
   da982:	f7fc bcc5 	b.w	d7310 <hal_rtc_time_is_valid>
}
   da986:	4620      	mov	r0, r4
   da988:	bd10      	pop	{r4, pc}

000da98a <_ZN9TimeClass3nowEv>:
{
   da98a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   da98c:	f7ff ffe0 	bl	da950 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   da990:	2210      	movs	r2, #16
   da992:	2100      	movs	r1, #0
   da994:	4668      	mov	r0, sp
   da996:	f001 fed9 	bl	dc74c <memset>
    hal_rtc_get_time(&tv, nullptr);
   da99a:	2100      	movs	r1, #0
   da99c:	4668      	mov	r0, sp
   da99e:	f7fc fcbf 	bl	d7320 <hal_rtc_get_time>
}
   da9a2:	9800      	ldr	r0, [sp, #0]
   da9a4:	b005      	add	sp, #20
   da9a6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000da9ac <_ZN9TimeClass4yearEv>:
{
   da9ac:	b508      	push	{r3, lr}
	return year(now());
   da9ae:	f7ff ffec 	bl	da98a <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   da9b2:	17c1      	asrs	r1, r0, #31
   da9b4:	f7ff fe58 	bl	da668 <_ZL22Refresh_UnixTime_Cachex>
}
   da9b8:	4b01      	ldr	r3, [pc, #4]	; (da9c0 <_ZN9TimeClass4yearEv+0x14>)
   da9ba:	6958      	ldr	r0, [r3, #20]
   da9bc:	bd08      	pop	{r3, pc}
   da9be:	bf00      	nop
   da9c0:	2003e69c 	.word	0x2003e69c

000da9c4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   da9c4:	4b02      	ldr	r3, [pc, #8]	; (da9d0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   da9c6:	681a      	ldr	r2, [r3, #0]
   da9c8:	4b02      	ldr	r3, [pc, #8]	; (da9d4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   da9ca:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   da9cc:	4770      	bx	lr
   da9ce:	bf00      	nop
   da9d0:	2003e110 	.word	0x2003e110
   da9d4:	2003e698 	.word	0x2003e698

000da9d8 <_ZN3UDP13receivePacketEPcjm>:
     * @param buffer        The buffer to read data to
     * @param buf_size      The buffer size
     * @return The number of bytes written to the buffer, or a negative value on error.
     */
    virtual int receivePacket(uint8_t* buffer, size_t buf_size, system_tick_t timeout = 0);
    virtual int receivePacket(char* buffer, size_t buf_size, system_tick_t timeout = 0) {
   da9d8:	b410      	push	{r4}
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
   da9da:	6804      	ldr	r4, [r0, #0]
   da9dc:	6b24      	ldr	r4, [r4, #48]	; 0x30
   da9de:	46a4      	mov	ip, r4
    }
   da9e0:	f85d 4b04 	ldr.w	r4, [sp], #4
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
   da9e4:	4760      	bx	ip

000da9e6 <_ZN3UDP4readEPcj>:
     * @return
     */
    virtual int read();
    virtual int read(unsigned char* buffer, size_t len);

    virtual int read(char* buffer, size_t len) { return read((unsigned char*)buffer, len); };
   da9e6:	6803      	ldr	r3, [r0, #0]
   da9e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   da9ea:	4718      	bx	r3

000da9ec <_ZN3UDP10remotePortEv>:
    void flush_buffer();

    const uint8_t* buffer() const { return _buffer; }

    virtual IPAddress remoteIP() { return _remoteIP; };
    virtual uint16_t remotePort() { return _remotePort; };
   da9ec:	8e80      	ldrh	r0, [r0, #52]	; 0x34
   da9ee:	4770      	bx	lr

000da9f0 <_ZN3UDP9availableEv>:
    }
    return bound;
}

int UDP::available() {
    return _total - _offset;
   da9f0:	8f02      	ldrh	r2, [r0, #56]	; 0x38
   da9f2:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
}
   da9f4:	1a10      	subs	r0, r2, r0
   da9f6:	4770      	bx	lr

000da9f8 <_ZN3UDP5writeEh>:
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
}

size_t UDP::write(uint8_t byte) {
   da9f8:	b507      	push	{r0, r1, r2, lr}
    return write(&byte, 1);
   da9fa:	6803      	ldr	r3, [r0, #0]
size_t UDP::write(uint8_t byte) {
   da9fc:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&byte, 1);
   daa00:	68db      	ldr	r3, [r3, #12]
   daa02:	2201      	movs	r2, #1
   daa04:	f10d 0107 	add.w	r1, sp, #7
   daa08:	4798      	blx	r3
}
   daa0a:	b003      	add	sp, #12
   daa0c:	f85d fb04 	ldr.w	pc, [sp], #4

000daa10 <_ZN3UDP4readEv>:
        }
    }
    return ret;
}

int UDP::read() {
   daa10:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset++] : -1;
   daa12:	6803      	ldr	r3, [r0, #0]
   daa14:	691b      	ldr	r3, [r3, #16]
int UDP::read() {
   daa16:	4604      	mov	r4, r0
    return available() ? _buffer[_offset++] : -1;
   daa18:	4798      	blx	r3
   daa1a:	b128      	cbz	r0, daa28 <_ZN3UDP4readEv+0x18>
   daa1c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   daa1e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   daa20:	1c59      	adds	r1, r3, #1
   daa22:	86e1      	strh	r1, [r4, #54]	; 0x36
   daa24:	5cd0      	ldrb	r0, [r2, r3]
}
   daa26:	bd10      	pop	{r4, pc}
    return available() ? _buffer[_offset++] : -1;
   daa28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   daa2c:	e7fb      	b.n	daa26 <_ZN3UDP4readEv+0x16>

000daa2e <_ZN3UDP4peekEv>:
        _offset += read;
    }
    return read;
}

int UDP::peek() {
   daa2e:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset] : -1;
   daa30:	6803      	ldr	r3, [r0, #0]
   daa32:	691b      	ldr	r3, [r3, #16]
int UDP::peek() {
   daa34:	4604      	mov	r4, r0
    return available() ? _buffer[_offset] : -1;
   daa36:	4798      	blx	r3
   daa38:	b118      	cbz	r0, daa42 <_ZN3UDP4peekEv+0x14>
   daa3a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   daa3c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   daa3e:	5cd0      	ldrb	r0, [r2, r3]
}
   daa40:	bd10      	pop	{r4, pc}
    return available() ? _buffer[_offset] : -1;
   daa42:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   daa46:	e7fb      	b.n	daa40 <_ZN3UDP4peekEv+0x12>

000daa48 <_ZN3UDP5flushEv>:

void UDP::flush() {
}
   daa48:	4770      	bx	lr

000daa4a <_ZNK3UDP7printToER5Print>:
void UDP::flush_buffer() {
    _offset = 0;
    _total = 0;
}

size_t UDP::printTo(Print& p) const {
   daa4a:	b410      	push	{r4}
   daa4c:	4603      	mov	r3, r0
   daa4e:	4608      	mov	r0, r1
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer + _offset, size);
   daa50:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
    int size = _total - _offset;
   daa52:	8ed9      	ldrh	r1, [r3, #54]	; 0x36
   daa54:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
    return p.write(_buffer + _offset, size);
   daa56:	6803      	ldr	r3, [r0, #0]
   daa58:	1a52      	subs	r2, r2, r1
   daa5a:	68db      	ldr	r3, [r3, #12]
   daa5c:	4421      	add	r1, r4
}
   daa5e:	f85d 4b04 	ldr.w	r4, [sp], #4
    return p.write(_buffer + _offset, size);
   daa62:	4718      	bx	r3

000daa64 <_ZThn16_NK3UDP7printToER5Print>:
    /**
     * Prints the current read parsed packet to the given output.
     * @param p
     * @return
     */
    virtual size_t printTo(Print& p) const;
   daa64:	f1a0 0010 	sub.w	r0, r0, #16
   daa68:	f7ff bfef 	b.w	daa4a <_ZNK3UDP7printToER5Print>

000daa6c <_ZN3UDP5beginEtm>:
uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   daa6c:	b570      	push	{r4, r5, r6, lr}
    stop();
   daa6e:	6803      	ldr	r3, [r0, #0]
uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   daa70:	b08c      	sub	sp, #48	; 0x30
    stop();
   daa72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   daa74:	4604      	mov	r4, r0
   daa76:	460e      	mov	r6, r1
   daa78:	4615      	mov	r5, r2
    stop();
   daa7a:	4798      	blx	r3
    const int one = 1;
   daa7c:	2301      	movs	r3, #1
    struct sockaddr_in6 saddr = {};
   daa7e:	221c      	movs	r2, #28
   daa80:	2100      	movs	r1, #0
   daa82:	a805      	add	r0, sp, #20
    const int one = 1;
   daa84:	9302      	str	r3, [sp, #8]
    struct sockaddr_in6 saddr = {};
   daa86:	f001 fe61 	bl	dc74c <memset>
    saddr.sin6_len = sizeof(saddr);
   daa8a:	f640 231c 	movw	r3, #2588	; 0xa1c
    saddr.sin6_port = htons(port);
   daa8e:	4630      	mov	r0, r6
    saddr.sin6_len = sizeof(saddr);
   daa90:	f8ad 3014 	strh.w	r3, [sp, #20]
    saddr.sin6_port = htons(port);
   daa94:	f7fc fd14 	bl	d74c0 <inet_htons>
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   daa98:	2211      	movs	r2, #17
    saddr.sin6_port = htons(port);
   daa9a:	f8ad 0016 	strh.w	r0, [sp, #22]
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   daa9e:	2102      	movs	r1, #2
   daaa0:	200a      	movs	r0, #10
   daaa2:	f7fc fd65 	bl	d7570 <sock_socket>
    if (_sock < 0) {
   daaa6:	2800      	cmp	r0, #0
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   daaa8:	6160      	str	r0, [r4, #20]
    if (_sock < 0) {
   daaaa:	db25      	blt.n	daaf8 <_ZN3UDP5beginEtm+0x8c>
    if (sock_setsockopt(_sock, SOL_SOCKET, SO_REUSEADDR, &one, sizeof(one))) {
   daaac:	2204      	movs	r2, #4
   daaae:	9200      	str	r2, [sp, #0]
   daab0:	ab02      	add	r3, sp, #8
   daab2:	f640 71ff 	movw	r1, #4095	; 0xfff
   daab6:	f7fc fd23 	bl	d7500 <sock_setsockopt>
   daaba:	b9e8      	cbnz	r0, daaf8 <_ZN3UDP5beginEtm+0x8c>
    if (nif != 0) {
   daabc:	b195      	cbz	r5, daae4 <_ZN3UDP5beginEtm+0x78>
        struct ifreq ifr = {};
   daabe:	9003      	str	r0, [sp, #12]
   daac0:	f8ad 0010 	strh.w	r0, [sp, #16]
        if (if_index_to_name(nif, ifr.ifr_name)) {
   daac4:	a903      	add	r1, sp, #12
   daac6:	b2e8      	uxtb	r0, r5
   daac8:	f7fc fcda 	bl	d7480 <if_index_to_name>
   daacc:	b9a0      	cbnz	r0, daaf8 <_ZN3UDP5beginEtm+0x8c>
        if (sock_setsockopt(_sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr))) {
   daace:	2306      	movs	r3, #6
   daad0:	9300      	str	r3, [sp, #0]
   daad2:	6960      	ldr	r0, [r4, #20]
   daad4:	ab03      	add	r3, sp, #12
   daad6:	f241 020b 	movw	r2, #4107	; 0x100b
   daada:	f640 71ff 	movw	r1, #4095	; 0xfff
   daade:	f7fc fd0f 	bl	d7500 <sock_setsockopt>
   daae2:	b948      	cbnz	r0, daaf8 <_ZN3UDP5beginEtm+0x8c>
    if (sock_bind(_sock, (const struct sockaddr*)&saddr, sizeof(saddr))) {
   daae4:	6960      	ldr	r0, [r4, #20]
   daae6:	221c      	movs	r2, #28
   daae8:	a905      	add	r1, sp, #20
   daaea:	f7fc fd01 	bl	d74f0 <sock_bind>
   daaee:	b918      	cbnz	r0, daaf8 <_ZN3UDP5beginEtm+0x8c>
    _nif = nif;
   daaf0:	6465      	str	r5, [r4, #68]	; 0x44
    bound = true;
   daaf2:	2001      	movs	r0, #1
}
   daaf4:	b00c      	add	sp, #48	; 0x30
   daaf6:	bd70      	pop	{r4, r5, r6, pc}
        stop();
   daaf8:	6823      	ldr	r3, [r4, #0]
   daafa:	4620      	mov	r0, r4
   daafc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   daafe:	4798      	blx	r3
   dab00:	2000      	movs	r0, #0
   dab02:	e7f7      	b.n	daaf4 <_ZN3UDP5beginEtm+0x88>

000dab04 <_ZN3UDP4stopEv>:
void UDP::stop() {
   dab04:	b510      	push	{r4, lr}
   dab06:	4604      	mov	r4, r0
    if (isOpen(_sock)) {
   dab08:	6940      	ldr	r0, [r0, #20]
   dab0a:	2800      	cmp	r0, #0
   dab0c:	db01      	blt.n	dab12 <_ZN3UDP4stopEv+0xe>
        sock_close(_sock);
   dab0e:	f7fc fcff 	bl	d7510 <sock_close>
    _sock = -1;
   dab12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   dab16:	6163      	str	r3, [r4, #20]
    _offset = 0;
   dab18:	2300      	movs	r3, #0
   dab1a:	86e3      	strh	r3, [r4, #54]	; 0x36
    _total = 0;
   dab1c:	8723      	strh	r3, [r4, #56]	; 0x38
}
   dab1e:	bd10      	pop	{r4, pc}

000dab20 <_ZN3UDP5writeEPKhj>:
size_t UDP::write(const uint8_t *buffer, size_t size) {
   dab20:	b570      	push	{r4, r5, r6, lr}
   dab22:	4605      	mov	r5, r0
    size_t available = _buffer ? _buffer_size - _offset : 0;
   dab24:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   dab26:	8eee      	ldrh	r6, [r5, #54]	; 0x36
   dab28:	b168      	cbz	r0, dab46 <_ZN3UDP5writeEPKhj+0x26>
   dab2a:	6c2b      	ldr	r3, [r5, #64]	; 0x40
   dab2c:	1b9c      	subs	r4, r3, r6
    if (size > available) {
   dab2e:	4294      	cmp	r4, r2
   dab30:	bf28      	it	cs
   dab32:	4614      	movcs	r4, r2
    memcpy(_buffer + _offset, buffer, size);
   dab34:	4622      	mov	r2, r4
   dab36:	4430      	add	r0, r6
   dab38:	f001 fde0 	bl	dc6fc <memcpy>
    _offset += size;
   dab3c:	8eeb      	ldrh	r3, [r5, #54]	; 0x36
   dab3e:	4423      	add	r3, r4
   dab40:	86eb      	strh	r3, [r5, #54]	; 0x36
}
   dab42:	4620      	mov	r0, r4
   dab44:	bd70      	pop	{r4, r5, r6, pc}
    size_t available = _buffer ? _buffer_size - _offset : 0;
   dab46:	4604      	mov	r4, r0
   dab48:	e7f1      	b.n	dab2e <_ZN3UDP5writeEPKhj+0xe>

000dab4a <_ZN3UDP4readEPhj>:
int UDP::read(unsigned char* buffer, size_t len) {
   dab4a:	b5d0      	push	{r4, r6, r7, lr}
    if (available()) {
   dab4c:	6803      	ldr	r3, [r0, #0]
   dab4e:	691b      	ldr	r3, [r3, #16]
int UDP::read(unsigned char* buffer, size_t len) {
   dab50:	4604      	mov	r4, r0
   dab52:	460f      	mov	r7, r1
   dab54:	4616      	mov	r6, r2
    if (available()) {
   dab56:	4798      	blx	r3
   dab58:	b190      	cbz	r0, dab80 <_ZN3UDP4readEPhj+0x36>
        read = min(int(len), available());
   dab5a:	6823      	ldr	r3, [r4, #0]
   dab5c:	4620      	mov	r0, r4
   dab5e:	691b      	ldr	r3, [r3, #16]
   dab60:	4798      	blx	r3
        memcpy(buffer, &_buffer[_offset], read);
   dab62:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   dab64:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   dab66:	4286      	cmp	r6, r0
   dab68:	bfa8      	it	ge
   dab6a:	4606      	movge	r6, r0
   dab6c:	4419      	add	r1, r3
   dab6e:	4632      	mov	r2, r6
   dab70:	4638      	mov	r0, r7
   dab72:	f001 fdc3 	bl	dc6fc <memcpy>
        _offset += read;
   dab76:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   dab78:	4433      	add	r3, r6
   dab7a:	86e3      	strh	r3, [r4, #54]	; 0x36
}
   dab7c:	4630      	mov	r0, r6
   dab7e:	bdd0      	pop	{r4, r6, r7, pc}
    int read = -1;
   dab80:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    return read;
   dab84:	e7fa      	b.n	dab7c <_ZN3UDP4readEPhj+0x32>
	...

000dab88 <_ZN3UDP8remoteIPEv>:
    virtual IPAddress remoteIP() { return _remoteIP; };
   dab88:	b570      	push	{r4, r5, r6, lr}
class IPAddress : public Printable {
   dab8a:	4604      	mov	r4, r0
   dab8c:	4b05      	ldr	r3, [pc, #20]	; (daba4 <_ZN3UDP8remoteIPEv+0x1c>)
   dab8e:	f844 3b04 	str.w	r3, [r4], #4
   dab92:	f101 0520 	add.w	r5, r1, #32
   dab96:	4606      	mov	r6, r0
   dab98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   dab9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   dab9c:	682b      	ldr	r3, [r5, #0]
   dab9e:	7023      	strb	r3, [r4, #0]
   daba0:	4630      	mov	r0, r6
   daba2:	bd70      	pop	{r4, r5, r6, pc}
   daba4:	000df184 	.word	0x000df184

000daba8 <_ZN3UDP10sendPacketEPKcj9IPAddresst>:
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   daba8:	b5f0      	push	{r4, r5, r6, r7, lr}
   dabaa:	4696      	mov	lr, r2
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   dabac:	6802      	ldr	r2, [r0, #0]
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   dabae:	b089      	sub	sp, #36	; 0x24
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   dabb0:	6a97      	ldr	r7, [r2, #40]	; 0x28
   dabb2:	4a0a      	ldr	r2, [pc, #40]	; (dabdc <_ZN3UDP10sendPacketEPKcj9IPAddresst+0x34>)
   dabb4:	9202      	str	r2, [sp, #8]
   dabb6:	1d1c      	adds	r4, r3, #4
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   dabb8:	468c      	mov	ip, r1
   dabba:	4606      	mov	r6, r0
   dabbc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   dabbe:	ad03      	add	r5, sp, #12
   dabc0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   dabc2:	6823      	ldr	r3, [r4, #0]
   dabc4:	702b      	strb	r3, [r5, #0]
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   dabc6:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   dabca:	9300      	str	r3, [sp, #0]
   dabcc:	4672      	mov	r2, lr
   dabce:	ab02      	add	r3, sp, #8
   dabd0:	4661      	mov	r1, ip
   dabd2:	4630      	mov	r0, r6
   dabd4:	47b8      	blx	r7
    }
   dabd6:	b009      	add	sp, #36	; 0x24
   dabd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   dabda:	bf00      	nop
   dabdc:	000df184 	.word	0x000df184

000dabe0 <_ZN3UDP9endPacketEv>:
int UDP::endPacket() {
   dabe0:	b5f0      	push	{r4, r5, r6, r7, lr}
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   dabe2:	6803      	ldr	r3, [r0, #0]
int UDP::endPacket() {
   dabe4:	b089      	sub	sp, #36	; 0x24
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   dabe6:	6a9f      	ldr	r7, [r3, #40]	; 0x28
   dabe8:	4b0c      	ldr	r3, [pc, #48]	; (dac1c <_ZN3UDP9endPacketEv+0x3c>)
   dabea:	9302      	str	r3, [sp, #8]
   dabec:	f100 0620 	add.w	r6, r0, #32
int UDP::endPacket() {
   dabf0:	4604      	mov	r4, r0
   dabf2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   dabf4:	ad03      	add	r5, sp, #12
   dabf6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   dabf8:	6833      	ldr	r3, [r6, #0]
   dabfa:	702b      	strb	r3, [r5, #0]
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   dabfc:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
   dabfe:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
   dac00:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   dac02:	9300      	str	r3, [sp, #0]
   dac04:	4620      	mov	r0, r4
   dac06:	ab02      	add	r3, sp, #8
   dac08:	47b8      	blx	r7
    flush(); // wait for send to complete
   dac0a:	6823      	ldr	r3, [r4, #0]
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   dac0c:	4605      	mov	r5, r0
    flush(); // wait for send to complete
   dac0e:	69db      	ldr	r3, [r3, #28]
   dac10:	4620      	mov	r0, r4
   dac12:	4798      	blx	r3
}
   dac14:	4628      	mov	r0, r5
   dac16:	b009      	add	sp, #36	; 0x24
   dac18:	bdf0      	pop	{r4, r5, r6, r7, pc}
   dac1a:	bf00      	nop
   dac1c:	000df184 	.word	0x000df184

000dac20 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>:
inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
   dac20:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (saddr->sa_family == AF_INET) {
   dac22:	7843      	ldrb	r3, [r0, #1]
   dac24:	2b02      	cmp	r3, #2
inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
   dac26:	b08d      	sub	sp, #52	; 0x34
   dac28:	4605      	mov	r5, r0
   dac2a:	460c      	mov	r4, r1
   dac2c:	4617      	mov	r7, r2
    if (saddr->sa_family == AF_INET) {
   dac2e:	d104      	bne.n	dac3a <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x1a>
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   dac30:	1d01      	adds	r1, r0, #4
            addr = (const uint8_t*)(&ptr[3]);
   dac32:	4620      	mov	r0, r4
   dac34:	f7fd fc7c 	bl	d8530 <_ZN9IPAddressaSEPKh>
   dac38:	e022      	b.n	dac80 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x60>
    else if (saddr->sa_family == AF_INET6) {
   dac3a:	2b0a      	cmp	r3, #10
   dac3c:	d125      	bne.n	dac8a <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x6a>
        HAL_IPAddress a = {};
   dac3e:	2211      	movs	r2, #17
   dac40:	2100      	movs	r1, #0
   dac42:	a801      	add	r0, sp, #4
   dac44:	f001 fd82 	bl	dc74c <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   dac48:	68ab      	ldr	r3, [r5, #8]
   dac4a:	b303      	cbz	r3, dac8e <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x6e>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   dac4c:	f105 0308 	add.w	r3, r5, #8
   dac50:	ae01      	add	r6, sp, #4
   dac52:	f105 0c18 	add.w	ip, r5, #24
   dac56:	6818      	ldr	r0, [r3, #0]
   dac58:	6859      	ldr	r1, [r3, #4]
   dac5a:	4632      	mov	r2, r6
   dac5c:	c203      	stmia	r2!, {r0, r1}
   dac5e:	3308      	adds	r3, #8
   dac60:	4563      	cmp	r3, ip
   dac62:	4616      	mov	r6, r2
   dac64:	d1f7      	bne.n	dac56 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x36>
            a.v = 6;
   dac66:	2306      	movs	r3, #6
            addr = IPAddress(a);
   dac68:	a901      	add	r1, sp, #4
   dac6a:	a806      	add	r0, sp, #24
   dac6c:	ae07      	add	r6, sp, #28
            a.v = 6;
   dac6e:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   dac72:	f7fd fc1b 	bl	d84ac <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   dac76:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   dac78:	3404      	adds	r4, #4
   dac7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   dac7c:	6833      	ldr	r3, [r6, #0]
   dac7e:	7023      	strb	r3, [r4, #0]
        if (port) {
   dac80:	b11f      	cbz	r7, dac8a <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x6a>
            *port = ntohs(in6addr->sin6_port);
   dac82:	8868      	ldrh	r0, [r5, #2]
   dac84:	f7fc fc14 	bl	d74b0 <inet_ntohs>
   dac88:	8038      	strh	r0, [r7, #0]
        }
    }
#endif // HAL_IPv6
}
   dac8a:	b00d      	add	sp, #52	; 0x34
   dac8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   dac8e:	68eb      	ldr	r3, [r5, #12]
   dac90:	2b00      	cmp	r3, #0
   dac92:	d1db      	bne.n	dac4c <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x2c>
   dac94:	f64f 70ff 	movw	r0, #65535	; 0xffff
   dac98:	692e      	ldr	r6, [r5, #16]
   dac9a:	f7fc fc01 	bl	d74a0 <inet_htonl>
   dac9e:	4286      	cmp	r6, r0
   daca0:	d1d4      	bne.n	dac4c <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x2c>
            addr = (const uint8_t*)(&ptr[3]);
   daca2:	f105 0114 	add.w	r1, r5, #20
   daca6:	e7c4      	b.n	dac32 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x12>

000daca8 <_ZN3UDP11beginPacketEPKct>:
int UDP::beginPacket(const char *host, uint16_t port) {
   daca8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   dacac:	4617      	mov	r7, r2
   dacae:	b08e      	sub	sp, #56	; 0x38
    struct addrinfo* ais = nullptr;
   dacb0:	2200      	movs	r2, #0
int UDP::beginPacket(const char *host, uint16_t port) {
   dacb2:	4606      	mov	r6, r0
    CHECK(netdb_getaddrinfo(host, nullptr, nullptr, &ais));
   dacb4:	ab01      	add	r3, sp, #4
int UDP::beginPacket(const char *host, uint16_t port) {
   dacb6:	4608      	mov	r0, r1
    CHECK(netdb_getaddrinfo(host, nullptr, nullptr, &ais));
   dacb8:	4611      	mov	r1, r2
    struct addrinfo* ais = nullptr;
   dacba:	9201      	str	r2, [sp, #4]
    CHECK(netdb_getaddrinfo(host, nullptr, nullptr, &ais));
   dacbc:	f7fc fc10 	bl	d74e0 <netdb_getaddrinfo>
   dacc0:	1e04      	subs	r4, r0, #0
   dacc2:	db20      	blt.n	dad06 <_ZN3UDP11beginPacketEPKct+0x5e>
    if (ais && ais->ai_addr) {
   dacc4:	9b01      	ldr	r3, [sp, #4]
   dacc6:	b32b      	cbz	r3, dad14 <_ZN3UDP11beginPacketEPKct+0x6c>
   dacc8:	695b      	ldr	r3, [r3, #20]
   dacca:	b31b      	cbz	r3, dad14 <_ZN3UDP11beginPacketEPKct+0x6c>
        IPAddress addr;
   daccc:	a802      	add	r0, sp, #8
   dacce:	f7fd fbdf 	bl	d8490 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   dacd2:	9b01      	ldr	r3, [sp, #4]
   dacd4:	2200      	movs	r2, #0
   dacd6:	6958      	ldr	r0, [r3, #20]
   dacd8:	a902      	add	r1, sp, #8
   dacda:	f7ff ffa1 	bl	dac20 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>
        return static_cast<const IPAddress*>(this)->operator bool();
   dacde:	a802      	add	r0, sp, #8
   dace0:	f7fd fbf6 	bl	d84d0 <_ZNK9IPAddresscvbEv>
        if (addr) {
   dace4:	b1b0      	cbz	r0, dad14 <_ZN3UDP11beginPacketEPKct+0x6c>
            return beginPacket(addr, port);
   dace6:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   dace8:	ad03      	add	r5, sp, #12
   dacea:	f8d3 8038 	ldr.w	r8, [r3, #56]	; 0x38
   dacee:	4b0b      	ldr	r3, [pc, #44]	; (dad1c <_ZN3UDP11beginPacketEPKct+0x74>)
   dacf0:	9308      	str	r3, [sp, #32]
   dacf2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   dacf4:	ac09      	add	r4, sp, #36	; 0x24
   dacf6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   dacf8:	682b      	ldr	r3, [r5, #0]
   dacfa:	7023      	strb	r3, [r4, #0]
   dacfc:	463a      	mov	r2, r7
   dacfe:	a908      	add	r1, sp, #32
   dad00:	4630      	mov	r0, r6
   dad02:	47c0      	blx	r8
   dad04:	4604      	mov	r4, r0
    SCOPE_GUARD({
   dad06:	9801      	ldr	r0, [sp, #4]
   dad08:	f7fc fbe2 	bl	d74d0 <netdb_freeaddrinfo>
}
   dad0c:	4620      	mov	r0, r4
   dad0e:	b00e      	add	sp, #56	; 0x38
   dad10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return -1;
   dad14:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   dad18:	e7f5      	b.n	dad06 <_ZN3UDP11beginPacketEPKct+0x5e>
   dad1a:	bf00      	nop
   dad1c:	000df184 	.word	0x000df184

000dad20 <_ZN3UDP13receivePacketEPhjm>:
int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
   dad20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (isOpen(_sock) && buffer) {
   dad24:	f8d0 9014 	ldr.w	r9, [r0, #20]
   dad28:	f1b9 0f00 	cmp.w	r9, #0
int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
   dad2c:	b090      	sub	sp, #64	; 0x40
   dad2e:	4605      	mov	r5, r0
   dad30:	460e      	mov	r6, r1
   dad32:	4690      	mov	r8, r2
   dad34:	461c      	mov	r4, r3
    if (isOpen(_sock) && buffer) {
   dad36:	db3c      	blt.n	dadb2 <_ZN3UDP13receivePacketEPhjm+0x92>
   dad38:	2900      	cmp	r1, #0
   dad3a:	d03a      	beq.n	dadb2 <_ZN3UDP13receivePacketEPhjm+0x92>
        sockaddr_storage saddr = {};
   dad3c:	f04f 0a1c 	mov.w	sl, #28
   dad40:	af09      	add	r7, sp, #36	; 0x24
   dad42:	4652      	mov	r2, sl
   dad44:	2100      	movs	r1, #0
   dad46:	4638      	mov	r0, r7
   dad48:	f001 fd00 	bl	dc74c <memset>
        socklen_t slen = sizeof(saddr);
   dad4c:	f8cd a00c 	str.w	sl, [sp, #12]
        if (timeout == 0) {
   dad50:	b1dc      	cbz	r4, dad8a <_ZN3UDP13receivePacketEPhjm+0x6a>
            struct timeval tv = {};
   dad52:	2200      	movs	r2, #0
            tv.tv_sec = timeout / 1000;
   dad54:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   dad58:	fbb4 f3f0 	udiv	r3, r4, r0
   dad5c:	e9cd 3204 	strd	r3, r2, [sp, #16]
            tv.tv_usec = (timeout % 1000) * 1000;
   dad60:	fb00 4313 	mls	r3, r0, r3, r4
   dad64:	4358      	muls	r0, r3
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
   dad66:	2310      	movs	r3, #16
            struct timeval tv = {};
   dad68:	9207      	str	r2, [sp, #28]
            tv.tv_usec = (timeout % 1000) * 1000;
   dad6a:	9006      	str	r0, [sp, #24]
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
   dad6c:	9300      	str	r3, [sp, #0]
   dad6e:	f241 0206 	movw	r2, #4102	; 0x1006
   dad72:	446b      	add	r3, sp
   dad74:	f640 71ff 	movw	r1, #4095	; 0xfff
   dad78:	4648      	mov	r0, r9
   dad7a:	f7fc fbc1 	bl	d7500 <sock_setsockopt>
            if (ret) {
   dad7e:	4604      	mov	r4, r0
   dad80:	b120      	cbz	r0, dad8c <_ZN3UDP13receivePacketEPhjm+0x6c>
}
   dad82:	4620      	mov	r0, r4
   dad84:	b010      	add	sp, #64	; 0x40
   dad86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            flags = MSG_DONTWAIT;
   dad8a:	2408      	movs	r4, #8
        ret = sock_recvfrom(_sock, buffer, size, flags, (struct sockaddr*)&saddr, &slen);
   dad8c:	ab03      	add	r3, sp, #12
   dad8e:	e9cd 7300 	strd	r7, r3, [sp]
   dad92:	6968      	ldr	r0, [r5, #20]
   dad94:	4623      	mov	r3, r4
   dad96:	4642      	mov	r2, r8
   dad98:	4631      	mov	r1, r6
   dad9a:	f7fc fbd1 	bl	d7540 <sock_recvfrom>
        if (ret >= 0) {
   dad9e:	1e04      	subs	r4, r0, #0
   dada0:	dbef      	blt.n	dad82 <_ZN3UDP13receivePacketEPhjm+0x62>
            detail::sockaddrToIpAddressPort((const struct sockaddr*)&saddr, _remoteIP, &_remotePort);
   dada2:	f105 0234 	add.w	r2, r5, #52	; 0x34
   dada6:	f105 011c 	add.w	r1, r5, #28
   dadaa:	4638      	mov	r0, r7
   dadac:	f7ff ff38 	bl	dac20 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>
            LOG_DEBUG(TRACE, "received %d bytes from %s#%d", ret, _remoteIP.toString().c_str(), _remotePort);
   dadb0:	e7e7      	b.n	dad82 <_ZN3UDP13receivePacketEPhjm+0x62>
    int ret = -1;
   dadb2:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   dadb6:	e7e4      	b.n	dad82 <_ZN3UDP13receivePacketEPhjm+0x62>

000dadb8 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>:

inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
   dadb8:	b538      	push	{r3, r4, r5, lr}
   dadba:	4605      	mov	r5, r0
   dadbc:	4614      	mov	r4, r2
    if (addr.version() == 6) {
   dadbe:	7d2b      	ldrb	r3, [r5, #20]
   dadc0:	2b06      	cmp	r3, #6
inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
   dadc2:	4608      	mov	r0, r1
    if (addr.version() == 6) {
   dadc4:	d110      	bne.n	dade8 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x30>
        struct sockaddr_in6* in6addr = (struct sockaddr_in6*)saddr;
        in6addr->sin6_len = sizeof(sockaddr_in6);
   dadc6:	f640 231c 	movw	r3, #2588	; 0xa1c
   dadca:	8013      	strh	r3, [r2, #0]
        in6addr->sin6_family = AF_INET6;
        in6addr->sin6_port = htons(port);
   dadcc:	f7fc fb78 	bl	d74c0 <inet_htons>
        const auto& a = addr.raw();
        memcpy(in6addr->sin6_addr.s6_addr, a.ipv6, sizeof(a.ipv6));
   dadd0:	3408      	adds	r4, #8
   dadd2:	1d2b      	adds	r3, r5, #4
        in6addr->sin6_port = htons(port);
   dadd4:	f824 0c06 	strh.w	r0, [r4, #-6]
        memcpy(in6addr->sin6_addr.s6_addr, a.ipv6, sizeof(a.ipv6));
   dadd8:	3514      	adds	r5, #20
   dadda:	f853 2b04 	ldr.w	r2, [r3], #4
   dadde:	f844 2b04 	str.w	r2, [r4], #4
   dade2:	42ab      	cmp	r3, r5
   dade4:	d1f9      	bne.n	dadda <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x22>
        const auto& a = addr.raw();
        // NOTE: HAL_IPAddress.ipv4 is host-order :|
        inaddr->sin_addr.s_addr = htonl(a.ipv4);
    }
#endif // HAL_IPv6
}
   dade6:	bd38      	pop	{r3, r4, r5, pc}
    else if (addr.version() == 4) {
   dade8:	2b04      	cmp	r3, #4
   dadea:	d1fc      	bne.n	dade6 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x2e>
        inaddr->sin_len = sizeof(sockaddr_in);
   dadec:	f44f 7304 	mov.w	r3, #528	; 0x210
   dadf0:	8013      	strh	r3, [r2, #0]
        inaddr->sin_port = htons(port);
   dadf2:	f7fc fb65 	bl	d74c0 <inet_htons>
   dadf6:	8060      	strh	r0, [r4, #2]
        inaddr->sin_addr.s_addr = htonl(a.ipv4);
   dadf8:	6868      	ldr	r0, [r5, #4]
   dadfa:	f7fc fb51 	bl	d74a0 <inet_htonl>
   dadfe:	6060      	str	r0, [r4, #4]
}
   dae00:	e7f1      	b.n	dade6 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x2e>

000dae02 <_ZN3UDP10sendPacketEPKhj9IPAddresst>:
int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
   dae02:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   dae06:	b08b      	sub	sp, #44	; 0x2c
	sockaddr_storage s = {};
   dae08:	af03      	add	r7, sp, #12
   dae0a:	f04f 091c 	mov.w	r9, #28
int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
   dae0e:	4698      	mov	r8, r3
   dae10:	4604      	mov	r4, r0
   dae12:	460d      	mov	r5, r1
   dae14:	4616      	mov	r6, r2
	sockaddr_storage s = {};
   dae16:	2100      	movs	r1, #0
   dae18:	464a      	mov	r2, r9
   dae1a:	4638      	mov	r0, r7
   dae1c:	f001 fc96 	bl	dc74c <memset>
    detail::ipAddressPortToSockaddr(remoteIP, port, (struct sockaddr*)&s);
   dae20:	f8bd 1048 	ldrh.w	r1, [sp, #72]	; 0x48
   dae24:	463a      	mov	r2, r7
   dae26:	4640      	mov	r0, r8
   dae28:	f7ff ffc6 	bl	dadb8 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>
    if (s.ss_family == AF_UNSPEC) {
   dae2c:	f89d 300d 	ldrb.w	r3, [sp, #13]
   dae30:	b153      	cbz	r3, dae48 <_ZN3UDP10sendPacketEPKhj9IPAddresst+0x46>
    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
   dae32:	e9cd 7900 	strd	r7, r9, [sp]
   dae36:	6960      	ldr	r0, [r4, #20]
   dae38:	2300      	movs	r3, #0
   dae3a:	4632      	mov	r2, r6
   dae3c:	4629      	mov	r1, r5
   dae3e:	f7fc fb8f 	bl	d7560 <sock_sendto>
}
   dae42:	b00b      	add	sp, #44	; 0x2c
   dae44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return -1;
   dae48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   dae4c:	e7f9      	b.n	dae42 <_ZN3UDP10sendPacketEPKhj9IPAddresst+0x40>
	...

000dae50 <_ZN3UDPC1Ev>:
UDP::UDP()
   dae50:	b538      	push	{r3, r4, r5, lr}
   dae52:	2500      	movs	r5, #0
   dae54:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   dae58:	e9c0 5301 	strd	r5, r3, [r0, #4]
          _buffer_allocated(false) {
   dae5c:	4b0b      	ldr	r3, [pc, #44]	; (dae8c <_ZN3UDPC1Ev+0x3c>)
   dae5e:	f103 0208 	add.w	r2, r3, #8
   dae62:	336c      	adds	r3, #108	; 0x6c
   dae64:	6103      	str	r3, [r0, #16]
   dae66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
UDP::UDP()
   dae6a:	4604      	mov	r4, r0
          _buffer_allocated(false) {
   dae6c:	6002      	str	r2, [r0, #0]
   dae6e:	6143      	str	r3, [r0, #20]
   dae70:	301c      	adds	r0, #28
   dae72:	f7fd fb0d 	bl	d8490 <_ZN9IPAddressC1Ev>
   dae76:	f44f 7300 	mov.w	r3, #512	; 0x200
   dae7a:	e9c4 3510 	strd	r3, r5, [r4, #64]	; 0x40
   dae7e:	86e5      	strh	r5, [r4, #54]	; 0x36
   dae80:	8725      	strh	r5, [r4, #56]	; 0x38
   dae82:	63e5      	str	r5, [r4, #60]	; 0x3c
   dae84:	f884 5048 	strb.w	r5, [r4, #72]	; 0x48
}
   dae88:	4620      	mov	r0, r4
   dae8a:	bd38      	pop	{r3, r4, r5, pc}
   dae8c:	000df38c 	.word	0x000df38c

000dae90 <_ZN3UDP13releaseBufferEv>:
void UDP::releaseBuffer() {
   dae90:	b510      	push	{r4, lr}
    if (_buffer_allocated && _buffer) {
   dae92:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
void UDP::releaseBuffer() {
   dae96:	4604      	mov	r4, r0
    if (_buffer_allocated && _buffer) {
   dae98:	b123      	cbz	r3, daea4 <_ZN3UDP13releaseBufferEv+0x14>
   dae9a:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   dae9c:	b110      	cbz	r0, daea4 <_ZN3UDP13releaseBufferEv+0x14>
        delete _buffer;
   dae9e:	2101      	movs	r1, #1
   daea0:	f000 fb88 	bl	db5b4 <_ZdlPvj>
    _buffer = NULL;
   daea4:	2300      	movs	r3, #0
   daea6:	63e3      	str	r3, [r4, #60]	; 0x3c
    _buffer_allocated = false;
   daea8:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    _buffer_size = 0;
   daeac:	6423      	str	r3, [r4, #64]	; 0x40
    _offset = 0;
   daeae:	86e3      	strh	r3, [r4, #54]	; 0x36
    _total = 0;
   daeb0:	8723      	strh	r3, [r4, #56]	; 0x38
}
   daeb2:	bd10      	pop	{r4, pc}

000daeb4 <_ZN3UDP9setBufferEjPh>:
bool UDP::setBuffer(size_t buf_size, uint8_t* buffer) {
   daeb4:	b570      	push	{r4, r5, r6, lr}
   daeb6:	4604      	mov	r4, r0
   daeb8:	4616      	mov	r6, r2
   daeba:	460d      	mov	r5, r1
    releaseBuffer();
   daebc:	f7ff ffe8 	bl	dae90 <_ZN3UDP13releaseBufferEv>
    _buffer_size = 0;
   daec0:	2300      	movs	r3, #0
    _buffer = buffer;
   daec2:	63e6      	str	r6, [r4, #60]	; 0x3c
    _buffer_size = 0;
   daec4:	6423      	str	r3, [r4, #64]	; 0x40
    if (!_buffer && buf_size) {         // requested allocation
   daec6:	b12e      	cbz	r6, daed4 <_ZN3UDP9setBufferEjPh+0x20>
        _buffer_size = buf_size;
   daec8:	6425      	str	r5, [r4, #64]	; 0x40
    return _buffer_size;
   daeca:	6c20      	ldr	r0, [r4, #64]	; 0x40
}
   daecc:	3800      	subs	r0, #0
   daece:	bf18      	it	ne
   daed0:	2001      	movne	r0, #1
   daed2:	bd70      	pop	{r4, r5, r6, pc}
    if (!_buffer && buf_size) {         // requested allocation
   daed4:	2d00      	cmp	r5, #0
   daed6:	d0f8      	beq.n	daeca <_ZN3UDP9setBufferEjPh+0x16>
        _buffer = new uint8_t[buf_size];
   daed8:	4628      	mov	r0, r5
   daeda:	f7f9 f8de 	bl	d409a <_Znaj>
        _buffer_allocated = true;
   daede:	2301      	movs	r3, #1
        _buffer = new uint8_t[buf_size];
   daee0:	63e0      	str	r0, [r4, #60]	; 0x3c
        _buffer_allocated = true;
   daee2:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    if (_buffer) {
   daee6:	2800      	cmp	r0, #0
   daee8:	d0ef      	beq.n	daeca <_ZN3UDP9setBufferEjPh+0x16>
   daeea:	e7ed      	b.n	daec8 <_ZN3UDP9setBufferEjPh+0x14>

000daeec <_ZN3UDP11beginPacketE9IPAddresst>:
int UDP::beginPacket(IPAddress ip, uint16_t port) {
   daeec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   daeee:	4617      	mov	r7, r2
    if (!_buffer && _buffer_size) {
   daef0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
int UDP::beginPacket(IPAddress ip, uint16_t port) {
   daef2:	4605      	mov	r5, r0
   daef4:	460c      	mov	r4, r1
    if (!_buffer && _buffer_size) {
   daef6:	b91a      	cbnz	r2, daf00 <_ZN3UDP11beginPacketE9IPAddresst+0x14>
   daef8:	6c01      	ldr	r1, [r0, #64]	; 0x40
   daefa:	b109      	cbz	r1, daf00 <_ZN3UDP11beginPacketE9IPAddresst+0x14>
        setBuffer(_buffer_size);
   daefc:	f7ff ffda 	bl	daeb4 <_ZN3UDP9setBufferEjPh>
   daf00:	3404      	adds	r4, #4
   daf02:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   daf04:	f105 0620 	add.w	r6, r5, #32
   daf08:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   daf0a:	6823      	ldr	r3, [r4, #0]
   daf0c:	7033      	strb	r3, [r6, #0]
    _offset = 0;
   daf0e:	2300      	movs	r3, #0
}
   daf10:	6c28      	ldr	r0, [r5, #64]	; 0x40
    _remotePort = port;
   daf12:	86af      	strh	r7, [r5, #52]	; 0x34
    _offset = 0;
   daf14:	86eb      	strh	r3, [r5, #54]	; 0x36
    _total = 0;
   daf16:	872b      	strh	r3, [r5, #56]	; 0x38
}
   daf18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000daf1a <_ZN3UDP11parsePacketEm>:
int UDP::parsePacket(system_tick_t timeout) {
   daf1a:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (!_buffer && _buffer_size) {
   daf1c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
int UDP::parsePacket(system_tick_t timeout) {
   daf1e:	4604      	mov	r4, r0
   daf20:	460b      	mov	r3, r1
    if (!_buffer && _buffer_size) {
   daf22:	b92a      	cbnz	r2, daf30 <_ZN3UDP11parsePacketEm+0x16>
   daf24:	6c01      	ldr	r1, [r0, #64]	; 0x40
   daf26:	b119      	cbz	r1, daf30 <_ZN3UDP11parsePacketEm+0x16>
   daf28:	9301      	str	r3, [sp, #4]
        setBuffer(_buffer_size);
   daf2a:	f7ff ffc3 	bl	daeb4 <_ZN3UDP9setBufferEjPh>
   daf2e:	9b01      	ldr	r3, [sp, #4]
    if (_buffer && _buffer_size) {
   daf30:	6be1      	ldr	r1, [r4, #60]	; 0x3c
    _offset = 0;
   daf32:	2200      	movs	r2, #0
   daf34:	86e2      	strh	r2, [r4, #54]	; 0x36
    _total = 0;
   daf36:	8722      	strh	r2, [r4, #56]	; 0x38
    if (_buffer && _buffer_size) {
   daf38:	b141      	cbz	r1, daf4c <_ZN3UDP11parsePacketEm+0x32>
   daf3a:	6c22      	ldr	r2, [r4, #64]	; 0x40
   daf3c:	b132      	cbz	r2, daf4c <_ZN3UDP11parsePacketEm+0x32>
        int result = receivePacket(_buffer, _buffer_size, timeout);
   daf3e:	6820      	ldr	r0, [r4, #0]
   daf40:	6b05      	ldr	r5, [r0, #48]	; 0x30
   daf42:	4620      	mov	r0, r4
   daf44:	47a8      	blx	r5
        if (result > 0) {
   daf46:	2800      	cmp	r0, #0
            _total = result;
   daf48:	bfc8      	it	gt
   daf4a:	8720      	strhgt	r0, [r4, #56]	; 0x38
    return available();
   daf4c:	6823      	ldr	r3, [r4, #0]
   daf4e:	691b      	ldr	r3, [r3, #16]
   daf50:	4620      	mov	r0, r4
}
   daf52:	b003      	add	sp, #12
   daf54:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return available();
   daf58:	4718      	bx	r3
	...

000daf5c <_ZN3UDPD1Ev>:
    virtual ~UDP() { stop(); releaseBuffer(); }
   daf5c:	b510      	push	{r4, lr}
   daf5e:	4b07      	ldr	r3, [pc, #28]	; (daf7c <_ZN3UDPD1Ev+0x20>)
   daf60:	f103 0208 	add.w	r2, r3, #8
   daf64:	336c      	adds	r3, #108	; 0x6c
   daf66:	4604      	mov	r4, r0
   daf68:	6002      	str	r2, [r0, #0]
   daf6a:	6103      	str	r3, [r0, #16]
   daf6c:	f7ff fdca 	bl	dab04 <_ZN3UDP4stopEv>
   daf70:	4620      	mov	r0, r4
   daf72:	f7ff ff8d 	bl	dae90 <_ZN3UDP13releaseBufferEv>
   daf76:	4620      	mov	r0, r4
   daf78:	bd10      	pop	{r4, pc}
   daf7a:	bf00      	nop
   daf7c:	000df38c 	.word	0x000df38c

000daf80 <_ZN3UDPD0Ev>:
   daf80:	b510      	push	{r4, lr}
   daf82:	4604      	mov	r4, r0
   daf84:	f7ff ffea 	bl	daf5c <_ZN3UDPD1Ev>
   daf88:	4620      	mov	r0, r4
   daf8a:	214c      	movs	r1, #76	; 0x4c
   daf8c:	f000 fb12 	bl	db5b4 <_ZdlPvj>
   daf90:	4620      	mov	r0, r4
   daf92:	bd10      	pop	{r4, pc}

000daf94 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   daf94:	4770      	bx	lr

000daf96 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   daf96:	7441      	strb	r1, [r0, #17]
}
   daf98:	4770      	bx	lr

000daf9a <__tcf_0>:
    serial1_rx_buffer = new hal_usart_ring_buffer_t();
  }
  if (!serial1_tx_buffer) {
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
   daf9a:	4770      	bx	lr

000daf9c <_ZN11USARTSerial17availableForWriteEv>:
{
   daf9c:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   daf9e:	7c00      	ldrb	r0, [r0, #16]
   dafa0:	f7fc fb3e 	bl	d7620 <hal_usart_available_data_for_write>
}
   dafa4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   dafa8:	bd08      	pop	{r3, pc}

000dafaa <_ZN11USARTSerial9availableEv>:
{
   dafaa:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   dafac:	7c00      	ldrb	r0, [r0, #16]
   dafae:	f7fc fb0f 	bl	d75d0 <hal_usart_available>
}
   dafb2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   dafb6:	bd08      	pop	{r3, pc}

000dafb8 <_ZN11USARTSerial4peekEv>:
{
   dafb8:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   dafba:	7c00      	ldrb	r0, [r0, #16]
   dafbc:	f7fc fb18 	bl	d75f0 <hal_usart_peek>
}
   dafc0:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   dafc4:	bd08      	pop	{r3, pc}

000dafc6 <_ZN11USARTSerial4readEv>:
{
   dafc6:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   dafc8:	7c00      	ldrb	r0, [r0, #16]
   dafca:	f7fc fb09 	bl	d75e0 <hal_usart_read>
}
   dafce:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   dafd2:	bd08      	pop	{r3, pc}

000dafd4 <_ZN11USARTSerial5flushEv>:
  hal_usart_flush(_serial);
   dafd4:	7c00      	ldrb	r0, [r0, #16]
   dafd6:	f7fc bb13 	b.w	d7600 <hal_usart_flush>

000dafda <_ZN11USARTSerial5writeEh>:
{
   dafda:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   dafdc:	7c45      	ldrb	r5, [r0, #17]
{
   dafde:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   dafe0:	b12d      	cbz	r5, dafee <_ZN11USARTSerial5writeEh+0x14>
	  return hal_usart_write(_serial, c);
   dafe2:	7c20      	ldrb	r0, [r4, #16]
}
   dafe4:	b003      	add	sp, #12
   dafe6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   dafea:	f7fc bae9 	b.w	d75c0 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   dafee:	7c00      	ldrb	r0, [r0, #16]
   daff0:	9101      	str	r1, [sp, #4]
   daff2:	f7fc fb15 	bl	d7620 <hal_usart_available_data_for_write>
   daff6:	2800      	cmp	r0, #0
   daff8:	9901      	ldr	r1, [sp, #4]
   daffa:	dcf2      	bgt.n	dafe2 <_ZN11USARTSerial5writeEh+0x8>
}
   daffc:	4628      	mov	r0, r5
   daffe:	b003      	add	sp, #12
   db000:	bd30      	pop	{r4, r5, pc}

000db002 <_ZN11USARTSerialD0Ev>:
   db002:	b510      	push	{r4, lr}
   db004:	2114      	movs	r1, #20
   db006:	4604      	mov	r4, r0
   db008:	f000 fad4 	bl	db5b4 <_ZdlPvj>
   db00c:	4620      	mov	r0, r4
   db00e:	bd10      	pop	{r4, pc}

000db010 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   db010:	b510      	push	{r4, lr}
   db012:	f04f 0c00 	mov.w	ip, #0
   db016:	4604      	mov	r4, r0
   db018:	4608      	mov	r0, r1
   db01a:	4611      	mov	r1, r2
   db01c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   db020:	e9c4 c201 	strd	ip, r2, [r4, #4]
   db024:	4a04      	ldr	r2, [pc, #16]	; (db038 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   db026:	6022      	str	r2, [r4, #0]
  _blocking = true;
   db028:	2201      	movs	r2, #1
  _serial = serial;
   db02a:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   db02c:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   db02e:	461a      	mov	r2, r3
   db030:	f7fc fab6 	bl	d75a0 <hal_usart_init>
}
   db034:	4620      	mov	r0, r4
   db036:	bd10      	pop	{r4, pc}
   db038:	000df404 	.word	0x000df404

000db03c <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   db03c:	7c00      	ldrb	r0, [r0, #16]
   db03e:	2300      	movs	r3, #0
   db040:	f7fc baf6 	b.w	d7630 <hal_usart_begin_config>

000db044 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   db044:	2200      	movs	r2, #0
   db046:	f7ff bff9 	b.w	db03c <_ZN11USARTSerial5beginEmm>

000db04a <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
   db04a:	7c00      	ldrb	r0, [r0, #16]
   db04c:	f7fc bab0 	b.w	d75b0 <hal_usart_end>

000db050 <_Z22__fetch_global_Serial1v>:
{
   db050:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if (!serial1_rx_buffer) {
   db052:	4c1a      	ldr	r4, [pc, #104]	; (db0bc <_Z22__fetch_global_Serial1v+0x6c>)
   db054:	6826      	ldr	r6, [r4, #0]
   db056:	b94e      	cbnz	r6, db06c <_Z22__fetch_global_Serial1v+0x1c>
    serial1_rx_buffer = new hal_usart_ring_buffer_t();
   db058:	2084      	movs	r0, #132	; 0x84
   db05a:	f7f9 f81c 	bl	d4096 <_Znwj>
   db05e:	4605      	mov	r5, r0
   db060:	b118      	cbz	r0, db06a <_Z22__fetch_global_Serial1v+0x1a>
   db062:	2284      	movs	r2, #132	; 0x84
   db064:	4631      	mov	r1, r6
   db066:	f001 fb71 	bl	dc74c <memset>
   db06a:	6025      	str	r5, [r4, #0]
  if (!serial1_tx_buffer) {
   db06c:	4d14      	ldr	r5, [pc, #80]	; (db0c0 <_Z22__fetch_global_Serial1v+0x70>)
   db06e:	682f      	ldr	r7, [r5, #0]
   db070:	b94f      	cbnz	r7, db086 <_Z22__fetch_global_Serial1v+0x36>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
   db072:	2084      	movs	r0, #132	; 0x84
   db074:	f7f9 f80f 	bl	d4096 <_Znwj>
   db078:	4606      	mov	r6, r0
   db07a:	b118      	cbz	r0, db084 <_Z22__fetch_global_Serial1v+0x34>
   db07c:	2284      	movs	r2, #132	; 0x84
   db07e:	4639      	mov	r1, r7
   db080:	f001 fb64 	bl	dc74c <memset>
   db084:	602e      	str	r6, [r5, #0]
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
   db086:	4e0f      	ldr	r6, [pc, #60]	; (db0c4 <_Z22__fetch_global_Serial1v+0x74>)
   db088:	7831      	ldrb	r1, [r6, #0]
   db08a:	f3bf 8f5b 	dmb	ish
   db08e:	f011 0101 	ands.w	r1, r1, #1
   db092:	d110      	bne.n	db0b6 <_Z22__fetch_global_Serial1v+0x66>
   db094:	4630      	mov	r0, r6
   db096:	9101      	str	r1, [sp, #4]
   db098:	f7f9 f80e 	bl	d40b8 <__cxa_guard_acquire>
   db09c:	9901      	ldr	r1, [sp, #4]
   db09e:	b150      	cbz	r0, db0b6 <_Z22__fetch_global_Serial1v+0x66>
   db0a0:	682b      	ldr	r3, [r5, #0]
   db0a2:	6822      	ldr	r2, [r4, #0]
   db0a4:	4808      	ldr	r0, [pc, #32]	; (db0c8 <_Z22__fetch_global_Serial1v+0x78>)
   db0a6:	f7ff ffb3 	bl	db010 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   db0aa:	4630      	mov	r0, r6
   db0ac:	f7f9 f809 	bl	d40c2 <__cxa_guard_release>
   db0b0:	4806      	ldr	r0, [pc, #24]	; (db0cc <_Z22__fetch_global_Serial1v+0x7c>)
   db0b2:	f001 fb07 	bl	dc6c4 <atexit>
#endif
	return serial1;
}
   db0b6:	4804      	ldr	r0, [pc, #16]	; (db0c8 <_Z22__fetch_global_Serial1v+0x78>)
   db0b8:	b003      	add	sp, #12
   db0ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
   db0bc:	2003e6dc 	.word	0x2003e6dc
   db0c0:	2003e6e0 	.word	0x2003e6e0
   db0c4:	2003e6d8 	.word	0x2003e6d8
   db0c8:	2003e6e4 	.word	0x2003e6e4
   db0cc:	000daf9b 	.word	0x000daf9b

000db0d0 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   db0d0:	7441      	strb	r1, [r0, #17]
}
   db0d2:	4770      	bx	lr

000db0d4 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   db0d4:	4770      	bx	lr

000db0d6 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   db0d6:	4770      	bx	lr

000db0d8 <_ZN9USBSerial4readEv>:
{
   db0d8:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   db0da:	2100      	movs	r1, #0
   db0dc:	7c00      	ldrb	r0, [r0, #16]
   db0de:	f7fc fad7 	bl	d7690 <HAL_USB_USART_Receive_Data>
}
   db0e2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   db0e6:	bd08      	pop	{r3, pc}

000db0e8 <_ZN9USBSerial4peekEv>:
{
   db0e8:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   db0ea:	2101      	movs	r1, #1
   db0ec:	7c00      	ldrb	r0, [r0, #16]
   db0ee:	f7fc facf 	bl	d7690 <HAL_USB_USART_Receive_Data>
}
   db0f2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   db0f6:	bd08      	pop	{r3, pc}

000db0f8 <_ZN9USBSerial17availableForWriteEv>:
{
   db0f8:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   db0fa:	7c00      	ldrb	r0, [r0, #16]
   db0fc:	f7fc fac0 	bl	d7680 <HAL_USB_USART_Available_Data_For_Write>
}
   db100:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   db104:	bd08      	pop	{r3, pc}

000db106 <_ZN9USBSerial9availableEv>:
{
   db106:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   db108:	7c00      	ldrb	r0, [r0, #16]
   db10a:	f7fc fab1 	bl	d7670 <HAL_USB_USART_Available_Data>
}
   db10e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   db112:	bd08      	pop	{r3, pc}

000db114 <_ZN9USBSerial5writeEh>:
{
   db114:	b513      	push	{r0, r1, r4, lr}
   db116:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   db118:	7c00      	ldrb	r0, [r0, #16]
{
   db11a:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   db11c:	f7fc fab0 	bl	d7680 <HAL_USB_USART_Available_Data_For_Write>
   db120:	2800      	cmp	r0, #0
   db122:	9901      	ldr	r1, [sp, #4]
   db124:	dc01      	bgt.n	db12a <_ZN9USBSerial5writeEh+0x16>
   db126:	7c60      	ldrb	r0, [r4, #17]
   db128:	b120      	cbz	r0, db134 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   db12a:	7c20      	ldrb	r0, [r4, #16]
   db12c:	f7fc fab8 	bl	d76a0 <HAL_USB_USART_Send_Data>
   db130:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   db134:	b002      	add	sp, #8
   db136:	bd10      	pop	{r4, pc}

000db138 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   db138:	7c00      	ldrb	r0, [r0, #16]
   db13a:	f7fc bab9 	b.w	d76b0 <HAL_USB_USART_Flush_Data>

000db13e <_ZN9USBSerialD0Ev>:
   db13e:	b510      	push	{r4, lr}
   db140:	2114      	movs	r1, #20
   db142:	4604      	mov	r4, r0
   db144:	f000 fa36 	bl	db5b4 <_ZdlPvj>
   db148:	4620      	mov	r0, r4
   db14a:	bd10      	pop	{r4, pc}

000db14c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   db14c:	b510      	push	{r4, lr}
   db14e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   db152:	4604      	mov	r4, r0
   db154:	4608      	mov	r0, r1
   db156:	2100      	movs	r1, #0
   db158:	e9c4 1301 	strd	r1, r3, [r4, #4]
   db15c:	4b04      	ldr	r3, [pc, #16]	; (db170 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   db15e:	6023      	str	r3, [r4, #0]
  _blocking = true;
   db160:	2301      	movs	r3, #1
  _serial = serial;
   db162:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   db164:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   db166:	4611      	mov	r1, r2
   db168:	f7fc fa6a 	bl	d7640 <HAL_USB_USART_Init>
}
   db16c:	4620      	mov	r0, r4
   db16e:	bd10      	pop	{r4, pc}
   db170:	000df434 	.word	0x000df434

000db174 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   db174:	7c00      	ldrb	r0, [r0, #16]
   db176:	2200      	movs	r2, #0
   db178:	f7fc ba6a 	b.w	d7650 <HAL_USB_USART_Begin>

000db17c <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
   db17c:	7c00      	ldrb	r0, [r0, #16]
   db17e:	f7fc ba6f 	b.w	d7660 <HAL_USB_USART_End>

000db182 <_Z19acquireSerialBufferv>:
{
   db182:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   db184:	2214      	movs	r2, #20
{
   db186:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   db188:	2100      	movs	r1, #0
   db18a:	f001 fadf 	bl	dc74c <memset>
}
   db18e:	4620      	mov	r0, r4
   db190:	bd10      	pop	{r4, pc}
	...

000db194 <_Z16_fetch_usbserialv>:
{
   db194:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   db196:	4c0f      	ldr	r4, [pc, #60]	; (db1d4 <_Z16_fetch_usbserialv+0x40>)
{
   db198:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   db19a:	a803      	add	r0, sp, #12
   db19c:	f7ff fff1 	bl	db182 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   db1a0:	7821      	ldrb	r1, [r4, #0]
   db1a2:	f3bf 8f5b 	dmb	ish
   db1a6:	f011 0101 	ands.w	r1, r1, #1
   db1aa:	d10f      	bne.n	db1cc <_Z16_fetch_usbserialv+0x38>
   db1ac:	4620      	mov	r0, r4
   db1ae:	9101      	str	r1, [sp, #4]
   db1b0:	f7f8 ff82 	bl	d40b8 <__cxa_guard_acquire>
   db1b4:	9901      	ldr	r1, [sp, #4]
   db1b6:	b148      	cbz	r0, db1cc <_Z16_fetch_usbserialv+0x38>
   db1b8:	aa03      	add	r2, sp, #12
   db1ba:	4807      	ldr	r0, [pc, #28]	; (db1d8 <_Z16_fetch_usbserialv+0x44>)
   db1bc:	f7ff ffc6 	bl	db14c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   db1c0:	4620      	mov	r0, r4
   db1c2:	f7f8 ff7e 	bl	d40c2 <__cxa_guard_release>
   db1c6:	4805      	ldr	r0, [pc, #20]	; (db1dc <_Z16_fetch_usbserialv+0x48>)
   db1c8:	f001 fa7c 	bl	dc6c4 <atexit>
	return _usbserial;
}
   db1cc:	4802      	ldr	r0, [pc, #8]	; (db1d8 <_Z16_fetch_usbserialv+0x44>)
   db1ce:	b008      	add	sp, #32
   db1d0:	bd10      	pop	{r4, pc}
   db1d2:	bf00      	nop
   db1d4:	2003e6f8 	.word	0x2003e6f8
   db1d8:	2003e6fc 	.word	0x2003e6fc
   db1dc:	000db0d5 	.word	0x000db0d5

000db1e0 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   db1e0:	b510      	push	{r4, lr}
   db1e2:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   db1e4:	f001 fb25 	bl	dc832 <strlen>
   db1e8:	3801      	subs	r0, #1
   db1ea:	1823      	adds	r3, r4, r0
   db1ec:	4620      	mov	r0, r4
	while(i<j){
   db1ee:	4283      	cmp	r3, r0
   db1f0:	d906      	bls.n	db200 <_Z11str_reversePc+0x20>
		c = *i;
   db1f2:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   db1f4:	7819      	ldrb	r1, [r3, #0]
   db1f6:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   db1fa:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   db1fe:	e7f6      	b.n	db1ee <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   db200:	bd10      	pop	{r4, pc}

000db202 <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   db202:	b570      	push	{r4, r5, r6, lr}
   db204:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   db206:	1e91      	subs	r1, r2, #2
   db208:	2922      	cmp	r1, #34	; 0x22
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   db20a:	4605      	mov	r5, r0
	if(radix<2 || radix>36){
   db20c:	d822      	bhi.n	db254 <ultoa+0x52>
		return NULL;
	}
	char* ptr=buffer;
   db20e:	4620      	mov	r0, r4

	div_t result;
	while(a){
   db210:	b16d      	cbz	r5, db22e <ultoa+0x2c>
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
   db212:	fbb5 f6f2 	udiv	r6, r5, r2
            result.rem = a%radix;
   db216:	fb02 5516 	mls	r5, r2, r6, r5
            *ptr = result.rem;
   db21a:	b2e9      	uxtb	r1, r5
            if(result.rem<10){
   db21c:	2d09      	cmp	r5, #9
                *ptr += '0';
   db21e:	bf94      	ite	ls
   db220:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
   db222:	3157      	addhi	r1, #87	; 0x57
   db224:	b2c9      	uxtb	r1, r1
   db226:	f800 1b01 	strb.w	r1, [r0], #1
            }
            ++ptr;
            a = result.quot;
   db22a:	4635      	mov	r5, r6
	while(a){
   db22c:	e7f0      	b.n	db210 <ultoa+0xe>
   db22e:	4602      	mov	r2, r0
	}
        while (ptr < buffer+pad)
   db230:	4423      	add	r3, r4
            *ptr++ = '0';
   db232:	2130      	movs	r1, #48	; 0x30
        while (ptr < buffer+pad)
   db234:	4293      	cmp	r3, r2
   db236:	d902      	bls.n	db23e <ultoa+0x3c>
            *ptr++ = '0';
   db238:	f802 1b01 	strb.w	r1, [r2], #1
        while (ptr < buffer+pad)
   db23c:	e7fa      	b.n	db234 <ultoa+0x32>
   db23e:	1a1a      	subs	r2, r3, r0
   db240:	4283      	cmp	r3, r0
   db242:	bf38      	it	cc
   db244:	2200      	movcc	r2, #0

	*ptr = '\0';
   db246:	2300      	movs	r3, #0
   db248:	5483      	strb	r3, [r0, r2]
	str_reverse(buffer);
   db24a:	4620      	mov	r0, r4
   db24c:	f7ff ffc8 	bl	db1e0 <_Z11str_reversePc>
	return buffer;
   db250:	4620      	mov	r0, r4
}
   db252:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   db254:	2000      	movs	r0, #0
   db256:	e7fc      	b.n	db252 <ultoa+0x50>

000db258 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   db258:	4b01      	ldr	r3, [pc, #4]	; (db260 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   db25a:	6018      	str	r0, [r3, #0]
    }, nullptr);
   db25c:	4770      	bx	lr
   db25e:	bf00      	nop
   db260:	2003e120 	.word	0x2003e120

000db264 <serialEventRun>:
{
   db264:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   db266:	4b0b      	ldr	r3, [pc, #44]	; (db294 <serialEventRun+0x30>)
   db268:	b143      	cbz	r3, db27c <serialEventRun+0x18>
   db26a:	f7ff ff93 	bl	db194 <_Z16_fetch_usbserialv>
   db26e:	6803      	ldr	r3, [r0, #0]
   db270:	691b      	ldr	r3, [r3, #16]
   db272:	4798      	blx	r3
   db274:	2800      	cmp	r0, #0
   db276:	dd01      	ble.n	db27c <serialEventRun+0x18>
        serialEvent();
   db278:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   db27c:	4b06      	ldr	r3, [pc, #24]	; (db298 <serialEventRun+0x34>)
   db27e:	b143      	cbz	r3, db292 <serialEventRun+0x2e>
   db280:	f7ff fee6 	bl	db050 <_Z22__fetch_global_Serial1v>
   db284:	6803      	ldr	r3, [r0, #0]
   db286:	691b      	ldr	r3, [r3, #16]
   db288:	4798      	blx	r3
   db28a:	2800      	cmp	r0, #0
   db28c:	dd01      	ble.n	db292 <serialEventRun+0x2e>
        serialEvent1();
   db28e:	f3af 8000 	nop.w
}
   db292:	bd08      	pop	{r3, pc}
	...

000db29c <_post_loop>:
{
   db29c:	b508      	push	{r3, lr}
	serialEventRun();
   db29e:	f7ff ffe1 	bl	db264 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   db2a2:	f7fc f82d 	bl	d7300 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   db2a6:	4b01      	ldr	r3, [pc, #4]	; (db2ac <_post_loop+0x10>)
   db2a8:	6018      	str	r0, [r3, #0]
}
   db2aa:	bd08      	pop	{r3, pc}
   db2ac:	2003e724 	.word	0x2003e724

000db2b0 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   db2b0:	4805      	ldr	r0, [pc, #20]	; (db2c8 <_Z33system_initialize_user_backup_ramv+0x18>)
   db2b2:	4a06      	ldr	r2, [pc, #24]	; (db2cc <_Z33system_initialize_user_backup_ramv+0x1c>)
   db2b4:	4906      	ldr	r1, [pc, #24]	; (db2d0 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   db2b6:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   db2b8:	1a12      	subs	r2, r2, r0
   db2ba:	f001 fa1f 	bl	dc6fc <memcpy>
    __backup_sram_signature = signature;
   db2be:	4b05      	ldr	r3, [pc, #20]	; (db2d4 <_Z33system_initialize_user_backup_ramv+0x24>)
   db2c0:	4a05      	ldr	r2, [pc, #20]	; (db2d8 <_Z33system_initialize_user_backup_ramv+0x28>)
   db2c2:	601a      	str	r2, [r3, #0]
}
   db2c4:	bd08      	pop	{r3, pc}
   db2c6:	bf00      	nop
   db2c8:	2003f400 	.word	0x2003f400
   db2cc:	2003f404 	.word	0x2003f404
   db2d0:	000df868 	.word	0x000df868
   db2d4:	2003f400 	.word	0x2003f400
   db2d8:	9a271c1e 	.word	0x9a271c1e

000db2dc <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   db2dc:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   db2de:	2300      	movs	r3, #0
   db2e0:	9300      	str	r3, [sp, #0]
   db2e2:	461a      	mov	r2, r3
   db2e4:	f06f 0177 	mvn.w	r1, #119	; 0x77
   db2e8:	f7fc fa66 	bl	d77b8 <system_ctrl_set_result>
}
   db2ec:	b003      	add	sp, #12
   db2ee:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000db2f4 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   db2f4:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   db2f6:	8843      	ldrh	r3, [r0, #2]
   db2f8:	2b0a      	cmp	r3, #10
   db2fa:	d008      	beq.n	db30e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   db2fc:	2b50      	cmp	r3, #80	; 0x50
   db2fe:	d10b      	bne.n	db318 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   db300:	4b09      	ldr	r3, [pc, #36]	; (db328 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   db302:	681b      	ldr	r3, [r3, #0]
   db304:	b14b      	cbz	r3, db31a <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   db306:	b003      	add	sp, #12
   db308:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   db30c:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   db30e:	f7ff ffe5 	bl	db2dc <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   db312:	b003      	add	sp, #12
   db314:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   db318:	2300      	movs	r3, #0
   db31a:	9300      	str	r3, [sp, #0]
   db31c:	461a      	mov	r2, r3
   db31e:	f06f 0177 	mvn.w	r1, #119	; 0x77
   db322:	f7fc fa49 	bl	d77b8 <system_ctrl_set_result>
}
   db326:	e7f4      	b.n	db312 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   db328:	2003e714 	.word	0x2003e714

000db32c <module_user_init_hook>:
{
   db32c:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   db32e:	4812      	ldr	r0, [pc, #72]	; (db378 <module_user_init_hook+0x4c>)
   db330:	2100      	movs	r1, #0
   db332:	f7fc fb57 	bl	d79e4 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   db336:	4b11      	ldr	r3, [pc, #68]	; (db37c <module_user_init_hook+0x50>)
   db338:	681a      	ldr	r2, [r3, #0]
   db33a:	4b11      	ldr	r3, [pc, #68]	; (db380 <module_user_init_hook+0x54>)
   db33c:	429a      	cmp	r2, r3
   db33e:	4b11      	ldr	r3, [pc, #68]	; (db384 <module_user_init_hook+0x58>)
   db340:	bf0c      	ite	eq
   db342:	2201      	moveq	r2, #1
   db344:	2200      	movne	r2, #0
   db346:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   db348:	d001      	beq.n	db34e <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   db34a:	f7ff ffb1 	bl	db2b0 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   db34e:	f7fb ffc7 	bl	d72e0 <HAL_RNG_GetRandomNumber>
   db352:	4604      	mov	r4, r0
    srand(seed);
   db354:	f001 fa02 	bl	dc75c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   db358:	4b0b      	ldr	r3, [pc, #44]	; (db388 <module_user_init_hook+0x5c>)
   db35a:	b113      	cbz	r3, db362 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   db35c:	4620      	mov	r0, r4
   db35e:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   db362:	2100      	movs	r1, #0
   db364:	4808      	ldr	r0, [pc, #32]	; (db388 <module_user_init_hook+0x5c>)
   db366:	f7fc fa85 	bl	d7874 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   db36a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   db36e:	4807      	ldr	r0, [pc, #28]	; (db38c <module_user_init_hook+0x60>)
   db370:	2100      	movs	r1, #0
   db372:	f7fc ba17 	b.w	d77a4 <system_ctrl_set_app_request_handler>
   db376:	bf00      	nop
   db378:	000db259 	.word	0x000db259
   db37c:	2003f400 	.word	0x2003f400
   db380:	9a271c1e 	.word	0x9a271c1e
   db384:	2003e710 	.word	0x2003e710
   db388:	00000000 	.word	0x00000000
   db38c:	000db2f5 	.word	0x000db2f5

000db390 <spark_protocol_instance>:
extern "C" {
#endif

DYNALIB_BEGIN(communication)

DYNALIB_FN(0, communication, spark_protocol_instance, ProtocolFacade*(void))
   db390:	b508      	push	{r3, lr}
   db392:	4b02      	ldr	r3, [pc, #8]	; (db39c <spark_protocol_instance+0xc>)
   db394:	681b      	ldr	r3, [r3, #0]
   db396:	681b      	ldr	r3, [r3, #0]
   db398:	9301      	str	r3, [sp, #4]
   db39a:	bd08      	pop	{r3, pc}
   db39c:	0003025c 	.word	0x0003025c

000db3a0 <spark_protocol_set_product_id>:
DYNALIB_FN(1, communication, spark_protocol_set_product_id, void(ProtocolFacade*, product_id_t, unsigned, void*))
   db3a0:	b508      	push	{r3, lr}
   db3a2:	4b02      	ldr	r3, [pc, #8]	; (db3ac <spark_protocol_set_product_id+0xc>)
   db3a4:	681b      	ldr	r3, [r3, #0]
   db3a6:	685b      	ldr	r3, [r3, #4]
   db3a8:	9301      	str	r3, [sp, #4]
   db3aa:	bd08      	pop	{r3, pc}
   db3ac:	0003025c 	.word	0x0003025c

000db3b0 <spark_protocol_set_product_firmware_version>:
DYNALIB_FN(2, communication, spark_protocol_set_product_firmware_version, void(ProtocolFacade*, product_firmware_version_t, unsigned, void*))
   db3b0:	b508      	push	{r3, lr}
   db3b2:	4b02      	ldr	r3, [pc, #8]	; (db3bc <spark_protocol_set_product_firmware_version+0xc>)
   db3b4:	681b      	ldr	r3, [r3, #0]
   db3b6:	689b      	ldr	r3, [r3, #8]
   db3b8:	9301      	str	r3, [sp, #4]
   db3ba:	bd08      	pop	{r3, pc}
   db3bc:	0003025c 	.word	0x0003025c

000db3c0 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   db3c0:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   db3c2:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   db3c4:	d902      	bls.n	db3cc <pinAvailable+0xc>
    return false;
   db3c6:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   db3c8:	b002      	add	sp, #8
   db3ca:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   db3cc:	f1a0 030b 	sub.w	r3, r0, #11
   db3d0:	2b02      	cmp	r3, #2
   db3d2:	d81a      	bhi.n	db40a <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   db3d4:	4c17      	ldr	r4, [pc, #92]	; (db434 <pinAvailable+0x74>)
   db3d6:	7821      	ldrb	r1, [r4, #0]
   db3d8:	f3bf 8f5b 	dmb	ish
   db3dc:	f011 0101 	ands.w	r1, r1, #1
   db3e0:	d10b      	bne.n	db3fa <pinAvailable+0x3a>
   db3e2:	4620      	mov	r0, r4
   db3e4:	9101      	str	r1, [sp, #4]
   db3e6:	f7f8 fe67 	bl	d40b8 <__cxa_guard_acquire>
   db3ea:	9901      	ldr	r1, [sp, #4]
   db3ec:	b128      	cbz	r0, db3fa <pinAvailable+0x3a>
   db3ee:	4812      	ldr	r0, [pc, #72]	; (db438 <pinAvailable+0x78>)
   db3f0:	f7fe fc32 	bl	d9c58 <_ZN8SPIClassC1E19hal_spi_interface_t>
   db3f4:	4620      	mov	r0, r4
   db3f6:	f7f8 fe64 	bl	d40c2 <__cxa_guard_release>
   db3fa:	4b0f      	ldr	r3, [pc, #60]	; (db438 <pinAvailable+0x78>)
   db3fc:	7818      	ldrb	r0, [r3, #0]
   db3fe:	f7fc f8c7 	bl	d7590 <hal_spi_is_enabled>
   db402:	2800      	cmp	r0, #0
   db404:	d1df      	bne.n	db3c6 <pinAvailable+0x6>
  return true; // 'pin' is available
   db406:	2001      	movs	r0, #1
   db408:	e7de      	b.n	db3c8 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   db40a:	2801      	cmp	r0, #1
   db40c:	d809      	bhi.n	db422 <pinAvailable+0x62>
   db40e:	f000 f889 	bl	db524 <_Z19__fetch_global_Wirev>
   db412:	2100      	movs	r1, #0
   db414:	7c00      	ldrb	r0, [r0, #16]
   db416:	f7fc f80b 	bl	d7430 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   db41a:	f080 0001 	eor.w	r0, r0, #1
   db41e:	b2c0      	uxtb	r0, r0
   db420:	e7d2      	b.n	db3c8 <pinAvailable+0x8>
   db422:	3809      	subs	r0, #9
   db424:	2801      	cmp	r0, #1
   db426:	d8ee      	bhi.n	db406 <pinAvailable+0x46>
   db428:	f7ff fe12 	bl	db050 <_Z22__fetch_global_Serial1v>
   db42c:	7c00      	ldrb	r0, [r0, #16]
   db42e:	f7fc f8ef 	bl	d7610 <hal_usart_is_enabled>
   db432:	e7f2      	b.n	db41a <pinAvailable+0x5a>
   db434:	2003e718 	.word	0x2003e718
   db438:	2003e71c 	.word	0x2003e71c

000db43c <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   db43c:	2823      	cmp	r0, #35	; 0x23
{
   db43e:	b538      	push	{r3, r4, r5, lr}
   db440:	4604      	mov	r4, r0
   db442:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   db444:	d80a      	bhi.n	db45c <pinMode+0x20>
   db446:	29ff      	cmp	r1, #255	; 0xff
   db448:	d008      	beq.n	db45c <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   db44a:	f7ff ffb9 	bl	db3c0 <pinAvailable>
   db44e:	b128      	cbz	r0, db45c <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   db450:	4629      	mov	r1, r5
   db452:	4620      	mov	r0, r4
}
   db454:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   db458:	f7fb bf7a 	b.w	d7350 <HAL_Pin_Mode>
}
   db45c:	bd38      	pop	{r3, r4, r5, pc}

000db45e <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   db45e:	b538      	push	{r3, r4, r5, lr}
   db460:	4604      	mov	r4, r0
   db462:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   db464:	f7fb ff7c 	bl	d7360 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   db468:	28ff      	cmp	r0, #255	; 0xff
   db46a:	d010      	beq.n	db48e <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   db46c:	2806      	cmp	r0, #6
   db46e:	d804      	bhi.n	db47a <digitalWrite+0x1c>
   db470:	234d      	movs	r3, #77	; 0x4d
   db472:	fa23 f000 	lsr.w	r0, r3, r0
   db476:	07c3      	lsls	r3, r0, #31
   db478:	d409      	bmi.n	db48e <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   db47a:	4620      	mov	r0, r4
   db47c:	f7ff ffa0 	bl	db3c0 <pinAvailable>
   db480:	b128      	cbz	r0, db48e <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   db482:	4629      	mov	r1, r5
   db484:	4620      	mov	r0, r4
}
   db486:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   db48a:	f7fb bf71 	b.w	d7370 <HAL_GPIO_Write>
}
   db48e:	bd38      	pop	{r3, r4, r5, pc}

000db490 <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   db490:	280d      	cmp	r0, #13
{
   db492:	b510      	push	{r4, lr}
   db494:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   db496:	bf9c      	itt	ls
   db498:	340e      	addls	r4, #14
   db49a:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   db49c:	4620      	mov	r0, r4
   db49e:	f7ff ff8f 	bl	db3c0 <pinAvailable>
   db4a2:	b150      	cbz	r0, db4ba <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   db4a4:	2103      	movs	r1, #3
   db4a6:	4620      	mov	r0, r4
   db4a8:	f7fb ff4a 	bl	d7340 <HAL_Validate_Pin_Function>
   db4ac:	2803      	cmp	r0, #3
   db4ae:	d104      	bne.n	db4ba <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   db4b0:	4620      	mov	r0, r4
}
   db4b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   db4b6:	f7fb bf73 	b.w	d73a0 <hal_adc_read>
}
   db4ba:	2000      	movs	r0, #0
   db4bc:	bd10      	pop	{r4, pc}

000db4be <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   db4be:	4770      	bx	lr

000db4c0 <__tcf_1>:
   db4c0:	4770      	bx	lr
	...

000db4c4 <_Z17acquireWireBufferv>:
{
   db4c4:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   db4c6:	2300      	movs	r3, #0
   db4c8:	2520      	movs	r5, #32
   db4ca:	8043      	strh	r3, [r0, #2]
   db4cc:	2314      	movs	r3, #20
{
   db4ce:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   db4d0:	8003      	strh	r3, [r0, #0]
   db4d2:	6085      	str	r5, [r0, #8]
   db4d4:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   db4d6:	4906      	ldr	r1, [pc, #24]	; (db4f0 <_Z17acquireWireBufferv+0x2c>)
   db4d8:	4628      	mov	r0, r5
   db4da:	f000 f86f 	bl	db5bc <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   db4de:	4904      	ldr	r1, [pc, #16]	; (db4f0 <_Z17acquireWireBufferv+0x2c>)
	};
   db4e0:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   db4e2:	4628      	mov	r0, r5
   db4e4:	f000 f86a 	bl	db5bc <_ZnajRKSt9nothrow_t>
	};
   db4e8:	60e0      	str	r0, [r4, #12]
}
   db4ea:	4620      	mov	r0, r4
   db4ec:	bd38      	pop	{r3, r4, r5, pc}
   db4ee:	bf00      	nop
   db4f0:	000df45c 	.word	0x000df45c

000db4f4 <_Z18acquireWire1Bufferv>:
   db4f4:	b538      	push	{r3, r4, r5, lr}
   db4f6:	2300      	movs	r3, #0
   db4f8:	2520      	movs	r5, #32
   db4fa:	8043      	strh	r3, [r0, #2]
   db4fc:	2314      	movs	r3, #20
   db4fe:	4604      	mov	r4, r0
   db500:	8003      	strh	r3, [r0, #0]
   db502:	6085      	str	r5, [r0, #8]
   db504:	6105      	str	r5, [r0, #16]
   db506:	4906      	ldr	r1, [pc, #24]	; (db520 <_Z18acquireWire1Bufferv+0x2c>)
   db508:	4628      	mov	r0, r5
   db50a:	f000 f857 	bl	db5bc <_ZnajRKSt9nothrow_t>
   db50e:	4904      	ldr	r1, [pc, #16]	; (db520 <_Z18acquireWire1Bufferv+0x2c>)
   db510:	6060      	str	r0, [r4, #4]
   db512:	4628      	mov	r0, r5
   db514:	f000 f852 	bl	db5bc <_ZnajRKSt9nothrow_t>
   db518:	60e0      	str	r0, [r4, #12]
   db51a:	4620      	mov	r0, r4
   db51c:	bd38      	pop	{r3, r4, r5, pc}
   db51e:	bf00      	nop
   db520:	000df45c 	.word	0x000df45c

000db524 <_Z19__fetch_global_Wirev>:
{
   db524:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   db526:	4d0e      	ldr	r5, [pc, #56]	; (db560 <_Z19__fetch_global_Wirev+0x3c>)
   db528:	7829      	ldrb	r1, [r5, #0]
   db52a:	f3bf 8f5b 	dmb	ish
   db52e:	f011 0401 	ands.w	r4, r1, #1
{
   db532:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   db534:	d111      	bne.n	db55a <_Z19__fetch_global_Wirev+0x36>
   db536:	4628      	mov	r0, r5
   db538:	f7f8 fdbe 	bl	d40b8 <__cxa_guard_acquire>
   db53c:	b168      	cbz	r0, db55a <_Z19__fetch_global_Wirev+0x36>
   db53e:	a801      	add	r0, sp, #4
   db540:	f7ff ffc0 	bl	db4c4 <_Z17acquireWireBufferv>
   db544:	aa01      	add	r2, sp, #4
   db546:	4621      	mov	r1, r4
   db548:	4806      	ldr	r0, [pc, #24]	; (db564 <_Z19__fetch_global_Wirev+0x40>)
   db54a:	f7fc fec1 	bl	d82d0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   db54e:	4628      	mov	r0, r5
   db550:	f7f8 fdb7 	bl	d40c2 <__cxa_guard_release>
   db554:	4804      	ldr	r0, [pc, #16]	; (db568 <_Z19__fetch_global_Wirev+0x44>)
   db556:	f001 f8b5 	bl	dc6c4 <atexit>
	return wire;
}
   db55a:	4802      	ldr	r0, [pc, #8]	; (db564 <_Z19__fetch_global_Wirev+0x40>)
   db55c:	b007      	add	sp, #28
   db55e:	bd30      	pop	{r4, r5, pc}
   db560:	2003e728 	.word	0x2003e728
   db564:	2003e730 	.word	0x2003e730
   db568:	000db4bf 	.word	0x000db4bf

000db56c <_Z20__fetch_global_Wire1v>:

#if Wiring_Wire1
TwoWire& __fetch_global_Wire1()
{
   db56c:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   db56e:	4c0e      	ldr	r4, [pc, #56]	; (db5a8 <_Z20__fetch_global_Wire1v+0x3c>)
   db570:	7823      	ldrb	r3, [r4, #0]
   db572:	f3bf 8f5b 	dmb	ish
   db576:	07db      	lsls	r3, r3, #31
{
   db578:	b086      	sub	sp, #24
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   db57a:	d411      	bmi.n	db5a0 <_Z20__fetch_global_Wire1v+0x34>
   db57c:	4620      	mov	r0, r4
   db57e:	f7f8 fd9b 	bl	d40b8 <__cxa_guard_acquire>
   db582:	b168      	cbz	r0, db5a0 <_Z20__fetch_global_Wire1v+0x34>
   db584:	a801      	add	r0, sp, #4
   db586:	f7ff ffb5 	bl	db4f4 <_Z18acquireWire1Bufferv>
   db58a:	aa01      	add	r2, sp, #4
   db58c:	2101      	movs	r1, #1
   db58e:	4807      	ldr	r0, [pc, #28]	; (db5ac <_Z20__fetch_global_Wire1v+0x40>)
   db590:	f7fc fe9e 	bl	d82d0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   db594:	4620      	mov	r0, r4
   db596:	f7f8 fd94 	bl	d40c2 <__cxa_guard_release>
   db59a:	4805      	ldr	r0, [pc, #20]	; (db5b0 <_Z20__fetch_global_Wire1v+0x44>)
   db59c:	f001 f892 	bl	dc6c4 <atexit>
	return wire;
}
   db5a0:	4802      	ldr	r0, [pc, #8]	; (db5ac <_Z20__fetch_global_Wire1v+0x40>)
   db5a2:	b006      	add	sp, #24
   db5a4:	bd10      	pop	{r4, pc}
   db5a6:	bf00      	nop
   db5a8:	2003e72c 	.word	0x2003e72c
   db5ac:	2003e744 	.word	0x2003e744
   db5b0:	000db4c1 	.word	0x000db4c1

000db5b4 <_ZdlPvj>:
   db5b4:	f7f8 bd73 	b.w	d409e <_ZdlPv>

000db5b8 <_ZnwjRKSt9nothrow_t>:
   db5b8:	f7f8 bd6d 	b.w	d4096 <_Znwj>

000db5bc <_ZnajRKSt9nothrow_t>:
   db5bc:	f7f8 bd6d 	b.w	d409a <_Znaj>

000db5c0 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>:
   db5c0:	68c3      	ldr	r3, [r0, #12]
   db5c2:	689a      	ldr	r2, [r3, #8]
   db5c4:	60c2      	str	r2, [r0, #12]
   db5c6:	b510      	push	{r4, lr}
   db5c8:	b102      	cbz	r2, db5cc <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0xc>
   db5ca:	6050      	str	r0, [r2, #4]
   db5cc:	6842      	ldr	r2, [r0, #4]
   db5ce:	605a      	str	r2, [r3, #4]
   db5d0:	680c      	ldr	r4, [r1, #0]
   db5d2:	4284      	cmp	r4, r0
   db5d4:	d103      	bne.n	db5de <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x1e>
   db5d6:	600b      	str	r3, [r1, #0]
   db5d8:	6098      	str	r0, [r3, #8]
   db5da:	6043      	str	r3, [r0, #4]
   db5dc:	bd10      	pop	{r4, pc}
   db5de:	6891      	ldr	r1, [r2, #8]
   db5e0:	4281      	cmp	r1, r0
   db5e2:	bf0c      	ite	eq
   db5e4:	6093      	streq	r3, [r2, #8]
   db5e6:	60d3      	strne	r3, [r2, #12]
   db5e8:	e7f6      	b.n	db5d8 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x18>

000db5ea <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>:
   db5ea:	6883      	ldr	r3, [r0, #8]
   db5ec:	68da      	ldr	r2, [r3, #12]
   db5ee:	6082      	str	r2, [r0, #8]
   db5f0:	b510      	push	{r4, lr}
   db5f2:	b102      	cbz	r2, db5f6 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0xc>
   db5f4:	6050      	str	r0, [r2, #4]
   db5f6:	6842      	ldr	r2, [r0, #4]
   db5f8:	605a      	str	r2, [r3, #4]
   db5fa:	680c      	ldr	r4, [r1, #0]
   db5fc:	4284      	cmp	r4, r0
   db5fe:	d103      	bne.n	db608 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x1e>
   db600:	600b      	str	r3, [r1, #0]
   db602:	60d8      	str	r0, [r3, #12]
   db604:	6043      	str	r3, [r0, #4]
   db606:	bd10      	pop	{r4, pc}
   db608:	68d1      	ldr	r1, [r2, #12]
   db60a:	4281      	cmp	r1, r0
   db60c:	bf0c      	ite	eq
   db60e:	60d3      	streq	r3, [r2, #12]
   db610:	6093      	strne	r3, [r2, #8]
   db612:	e7f6      	b.n	db602 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x18>

000db614 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>:
   db614:	7803      	ldrb	r3, [r0, #0]
   db616:	b933      	cbnz	r3, db626 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
   db618:	6843      	ldr	r3, [r0, #4]
   db61a:	685b      	ldr	r3, [r3, #4]
   db61c:	4283      	cmp	r3, r0
   db61e:	d102      	bne.n	db626 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
   db620:	68db      	ldr	r3, [r3, #12]
   db622:	4618      	mov	r0, r3
   db624:	4770      	bx	lr
   db626:	6882      	ldr	r2, [r0, #8]
   db628:	b122      	cbz	r2, db634 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x20>
   db62a:	4613      	mov	r3, r2
   db62c:	68d2      	ldr	r2, [r2, #12]
   db62e:	2a00      	cmp	r2, #0
   db630:	d1fb      	bne.n	db62a <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x16>
   db632:	e7f6      	b.n	db622 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0xe>
   db634:	6843      	ldr	r3, [r0, #4]
   db636:	689a      	ldr	r2, [r3, #8]
   db638:	4282      	cmp	r2, r0
   db63a:	d1f2      	bne.n	db622 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0xe>
   db63c:	4618      	mov	r0, r3
   db63e:	685b      	ldr	r3, [r3, #4]
   db640:	e7f9      	b.n	db636 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x22>

000db642 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>:
   db642:	68c3      	ldr	r3, [r0, #12]
   db644:	b123      	cbz	r3, db650 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base+0xe>
   db646:	4618      	mov	r0, r3
   db648:	689b      	ldr	r3, [r3, #8]
   db64a:	2b00      	cmp	r3, #0
   db64c:	d1fb      	bne.n	db646 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base+0x4>
   db64e:	4770      	bx	lr
   db650:	6843      	ldr	r3, [r0, #4]
   db652:	68da      	ldr	r2, [r3, #12]
   db654:	4282      	cmp	r2, r0
   db656:	d102      	bne.n	db65e <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base+0x1c>
   db658:	4618      	mov	r0, r3
   db65a:	685b      	ldr	r3, [r3, #4]
   db65c:	e7f9      	b.n	db652 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base+0x10>
   db65e:	68c2      	ldr	r2, [r0, #12]
   db660:	4293      	cmp	r3, r2
   db662:	bf18      	it	ne
   db664:	4618      	movne	r0, r3
   db666:	4770      	bx	lr

000db668 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>:
   db668:	f7ff bfd4 	b.w	db614 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>

000db66c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>:
   db66c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   db670:	461e      	mov	r6, r3
   db672:	f103 0804 	add.w	r8, r3, #4
   db676:	2300      	movs	r3, #0
   db678:	e9c1 3302 	strd	r3, r3, [r1, #8]
   db67c:	460c      	mov	r4, r1
   db67e:	604a      	str	r2, [r1, #4]
   db680:	700b      	strb	r3, [r1, #0]
   db682:	b300      	cbz	r0, db6c6 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x5a>
   db684:	4296      	cmp	r6, r2
   db686:	6091      	str	r1, [r2, #8]
   db688:	d118      	bne.n	db6bc <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x50>
   db68a:	6071      	str	r1, [r6, #4]
   db68c:	60f4      	str	r4, [r6, #12]
   db68e:	2701      	movs	r7, #1
   db690:	f04f 0900 	mov.w	r9, #0
   db694:	6873      	ldr	r3, [r6, #4]
   db696:	42a3      	cmp	r3, r4
   db698:	d03f      	beq.n	db71a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xae>
   db69a:	6860      	ldr	r0, [r4, #4]
   db69c:	7802      	ldrb	r2, [r0, #0]
   db69e:	2a00      	cmp	r2, #0
   db6a0:	d13c      	bne.n	db71c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xb0>
   db6a2:	6845      	ldr	r5, [r0, #4]
   db6a4:	68ab      	ldr	r3, [r5, #8]
   db6a6:	4298      	cmp	r0, r3
   db6a8:	d123      	bne.n	db6f2 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x86>
   db6aa:	68eb      	ldr	r3, [r5, #12]
   db6ac:	b183      	cbz	r3, db6d0 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x64>
   db6ae:	781a      	ldrb	r2, [r3, #0]
   db6b0:	b972      	cbnz	r2, db6d0 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x64>
   db6b2:	7007      	strb	r7, [r0, #0]
   db6b4:	701f      	strb	r7, [r3, #0]
   db6b6:	702a      	strb	r2, [r5, #0]
   db6b8:	462c      	mov	r4, r5
   db6ba:	e7eb      	b.n	db694 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x28>
   db6bc:	68b3      	ldr	r3, [r6, #8]
   db6be:	4293      	cmp	r3, r2
   db6c0:	d1e5      	bne.n	db68e <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
   db6c2:	60b1      	str	r1, [r6, #8]
   db6c4:	e7e3      	b.n	db68e <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
   db6c6:	60d1      	str	r1, [r2, #12]
   db6c8:	68f3      	ldr	r3, [r6, #12]
   db6ca:	4293      	cmp	r3, r2
   db6cc:	d1df      	bne.n	db68e <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
   db6ce:	e7dd      	b.n	db68c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x20>
   db6d0:	68c3      	ldr	r3, [r0, #12]
   db6d2:	42a3      	cmp	r3, r4
   db6d4:	d103      	bne.n	db6de <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x72>
   db6d6:	4641      	mov	r1, r8
   db6d8:	f7ff ff72 	bl	db5c0 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
   db6dc:	4604      	mov	r4, r0
   db6de:	6863      	ldr	r3, [r4, #4]
   db6e0:	4641      	mov	r1, r8
   db6e2:	701f      	strb	r7, [r3, #0]
   db6e4:	4628      	mov	r0, r5
   db6e6:	f885 9000 	strb.w	r9, [r5]
   db6ea:	f7ff ff7e 	bl	db5ea <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
   db6ee:	4625      	mov	r5, r4
   db6f0:	e7e2      	b.n	db6b8 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x4c>
   db6f2:	b113      	cbz	r3, db6fa <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x8e>
   db6f4:	781a      	ldrb	r2, [r3, #0]
   db6f6:	2a00      	cmp	r2, #0
   db6f8:	d0db      	beq.n	db6b2 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x46>
   db6fa:	6883      	ldr	r3, [r0, #8]
   db6fc:	42a3      	cmp	r3, r4
   db6fe:	d103      	bne.n	db708 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x9c>
   db700:	4641      	mov	r1, r8
   db702:	f7ff ff72 	bl	db5ea <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
   db706:	4604      	mov	r4, r0
   db708:	6863      	ldr	r3, [r4, #4]
   db70a:	4641      	mov	r1, r8
   db70c:	701f      	strb	r7, [r3, #0]
   db70e:	4628      	mov	r0, r5
   db710:	f885 9000 	strb.w	r9, [r5]
   db714:	f7ff ff54 	bl	db5c0 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
   db718:	e7e9      	b.n	db6ee <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x82>
   db71a:	4623      	mov	r3, r4
   db71c:	2201      	movs	r2, #1
   db71e:	701a      	strb	r2, [r3, #0]
   db720:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000db724 <_ZSt25__throw_bad_function_callv>:
   db724:	b508      	push	{r3, lr}
   db726:	f7fc f945 	bl	d79b4 <abort>
	...

000db72c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   db72c:	4901      	ldr	r1, [pc, #4]	; (db734 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   db72e:	f000 b8f9 	b.w	db924 <_ZNKSt9type_infoeqERKS_>
   db732:	bf00      	nop
   db734:	000df478 	.word	0x000df478

000db738 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   db738:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   db73a:	2400      	movs	r4, #0
   db73c:	2310      	movs	r3, #16
   db73e:	e9cd 3402 	strd	r3, r4, [sp, #8]
   db742:	6803      	ldr	r3, [r0, #0]
   db744:	9400      	str	r4, [sp, #0]
   db746:	699e      	ldr	r6, [r3, #24]
   db748:	f88d 4004 	strb.w	r4, [sp, #4]
   db74c:	4615      	mov	r5, r2
   db74e:	466b      	mov	r3, sp
   db750:	6812      	ldr	r2, [r2, #0]
   db752:	47b0      	blx	r6
   db754:	f89d 3004 	ldrb.w	r3, [sp, #4]
   db758:	f003 0306 	and.w	r3, r3, #6
   db75c:	2b06      	cmp	r3, #6
   db75e:	bf03      	ittte	eq
   db760:	9b00      	ldreq	r3, [sp, #0]
   db762:	602b      	streq	r3, [r5, #0]
   db764:	2001      	moveq	r0, #1
   db766:	4620      	movne	r0, r4
   db768:	b004      	add	sp, #16
   db76a:	bd70      	pop	{r4, r5, r6, pc}

000db76c <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   db76c:	9800      	ldr	r0, [sp, #0]
   db76e:	4290      	cmp	r0, r2
   db770:	bf14      	ite	ne
   db772:	2001      	movne	r0, #1
   db774:	2006      	moveq	r0, #6
   db776:	4770      	bx	lr

000db778 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   db778:	b510      	push	{r4, lr}
   db77a:	4b03      	ldr	r3, [pc, #12]	; (db788 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   db77c:	6003      	str	r3, [r0, #0]
   db77e:	4604      	mov	r4, r0
   db780:	f000 f8cd 	bl	db91e <_ZNSt9type_infoD1Ev>
   db784:	4620      	mov	r0, r4
   db786:	bd10      	pop	{r4, pc}
   db788:	000df4b8 	.word	0x000df4b8

000db78c <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   db78c:	b510      	push	{r4, lr}
   db78e:	4604      	mov	r4, r0
   db790:	f7ff fff2 	bl	db778 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   db794:	4620      	mov	r0, r4
   db796:	2108      	movs	r1, #8
   db798:	f7ff ff0c 	bl	db5b4 <_ZdlPvj>
   db79c:	4620      	mov	r0, r4
   db79e:	bd10      	pop	{r4, pc}

000db7a0 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   db7a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   db7a4:	461f      	mov	r7, r3
   db7a6:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   db7aa:	f8dd 8018 	ldr.w	r8, [sp, #24]
   db7ae:	4598      	cmp	r8, r3
   db7b0:	4606      	mov	r6, r0
   db7b2:	4615      	mov	r5, r2
   db7b4:	d107      	bne.n	db7c6 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   db7b6:	9907      	ldr	r1, [sp, #28]
   db7b8:	f000 f8b4 	bl	db924 <_ZNKSt9type_infoeqERKS_>
   db7bc:	b118      	cbz	r0, db7c6 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   db7be:	7165      	strb	r5, [r4, #5]
   db7c0:	2000      	movs	r0, #0
   db7c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   db7c6:	4639      	mov	r1, r7
   db7c8:	4630      	mov	r0, r6
   db7ca:	f000 f8ab 	bl	db924 <_ZNKSt9type_infoeqERKS_>
   db7ce:	2800      	cmp	r0, #0
   db7d0:	d0f6      	beq.n	db7c0 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   db7d2:	2301      	movs	r3, #1
   db7d4:	f8c4 8000 	str.w	r8, [r4]
   db7d8:	7125      	strb	r5, [r4, #4]
   db7da:	71a3      	strb	r3, [r4, #6]
   db7dc:	e7f0      	b.n	db7c0 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000db7de <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   db7de:	b538      	push	{r3, r4, r5, lr}
   db7e0:	4615      	mov	r5, r2
   db7e2:	461c      	mov	r4, r3
   db7e4:	f000 f89e 	bl	db924 <_ZNKSt9type_infoeqERKS_>
   db7e8:	b120      	cbz	r0, db7f4 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   db7ea:	2308      	movs	r3, #8
   db7ec:	60e3      	str	r3, [r4, #12]
   db7ee:	2306      	movs	r3, #6
   db7f0:	6025      	str	r5, [r4, #0]
   db7f2:	7123      	strb	r3, [r4, #4]
   db7f4:	bd38      	pop	{r3, r4, r5, pc}

000db7f6 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   db7f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
   db7f8:	4605      	mov	r5, r0
   db7fa:	460c      	mov	r4, r1
   db7fc:	9201      	str	r2, [sp, #4]
   db7fe:	461e      	mov	r6, r3
   db800:	f000 f890 	bl	db924 <_ZNKSt9type_infoeqERKS_>
   db804:	b950      	cbnz	r0, db81c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   db806:	2e03      	cmp	r6, #3
   db808:	d808      	bhi.n	db81c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   db80a:	6823      	ldr	r3, [r4, #0]
   db80c:	9a01      	ldr	r2, [sp, #4]
   db80e:	695b      	ldr	r3, [r3, #20]
   db810:	4629      	mov	r1, r5
   db812:	4620      	mov	r0, r4
   db814:	b002      	add	sp, #8
   db816:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   db81a:	4718      	bx	r3
   db81c:	b002      	add	sp, #8
   db81e:	bd70      	pop	{r4, r5, r6, pc}

000db820 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   db820:	b510      	push	{r4, lr}
   db822:	4b03      	ldr	r3, [pc, #12]	; (db830 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   db824:	6003      	str	r3, [r0, #0]
   db826:	4604      	mov	r4, r0
   db828:	f7ff ffa6 	bl	db778 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   db82c:	4620      	mov	r0, r4
   db82e:	bd10      	pop	{r4, pc}
   db830:	000df518 	.word	0x000df518

000db834 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   db834:	b510      	push	{r4, lr}
   db836:	4604      	mov	r4, r0
   db838:	f7ff fff2 	bl	db820 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   db83c:	4620      	mov	r0, r4
   db83e:	210c      	movs	r1, #12
   db840:	f7ff feb8 	bl	db5b4 <_ZdlPvj>
   db844:	4620      	mov	r0, r4
   db846:	bd10      	pop	{r4, pc}

000db848 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   db848:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   db84a:	9f08      	ldr	r7, [sp, #32]
   db84c:	4297      	cmp	r7, r2
   db84e:	4605      	mov	r5, r0
   db850:	460e      	mov	r6, r1
   db852:	4614      	mov	r4, r2
   db854:	d00a      	beq.n	db86c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   db856:	68a8      	ldr	r0, [r5, #8]
   db858:	6802      	ldr	r2, [r0, #0]
   db85a:	9708      	str	r7, [sp, #32]
   db85c:	6a15      	ldr	r5, [r2, #32]
   db85e:	4631      	mov	r1, r6
   db860:	4622      	mov	r2, r4
   db862:	46ac      	mov	ip, r5
   db864:	b003      	add	sp, #12
   db866:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   db86a:	4760      	bx	ip
   db86c:	4619      	mov	r1, r3
   db86e:	9301      	str	r3, [sp, #4]
   db870:	f000 f858 	bl	db924 <_ZNKSt9type_infoeqERKS_>
   db874:	9b01      	ldr	r3, [sp, #4]
   db876:	2800      	cmp	r0, #0
   db878:	d0ed      	beq.n	db856 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   db87a:	2006      	movs	r0, #6
   db87c:	b003      	add	sp, #12
   db87e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000db880 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   db880:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   db884:	460d      	mov	r5, r1
   db886:	4619      	mov	r1, r3
   db888:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   db88c:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   db890:	4681      	mov	r9, r0
   db892:	4617      	mov	r7, r2
   db894:	4698      	mov	r8, r3
   db896:	f000 f845 	bl	db924 <_ZNKSt9type_infoeqERKS_>
   db89a:	b190      	cbz	r0, db8c2 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   db89c:	2d00      	cmp	r5, #0
   db89e:	6034      	str	r4, [r6, #0]
   db8a0:	7137      	strb	r7, [r6, #4]
   db8a2:	db09      	blt.n	db8b8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   db8a4:	1961      	adds	r1, r4, r5
   db8a6:	458a      	cmp	sl, r1
   db8a8:	bf0c      	ite	eq
   db8aa:	2106      	moveq	r1, #6
   db8ac:	2101      	movne	r1, #1
   db8ae:	71b1      	strb	r1, [r6, #6]
   db8b0:	2000      	movs	r0, #0
   db8b2:	b001      	add	sp, #4
   db8b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   db8b8:	3502      	adds	r5, #2
   db8ba:	d1f9      	bne.n	db8b0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   db8bc:	2301      	movs	r3, #1
   db8be:	71b3      	strb	r3, [r6, #6]
   db8c0:	e7f6      	b.n	db8b0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   db8c2:	4554      	cmp	r4, sl
   db8c4:	d106      	bne.n	db8d4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   db8c6:	4659      	mov	r1, fp
   db8c8:	4648      	mov	r0, r9
   db8ca:	f000 f82b 	bl	db924 <_ZNKSt9type_infoeqERKS_>
   db8ce:	b108      	cbz	r0, db8d4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   db8d0:	7177      	strb	r7, [r6, #5]
   db8d2:	e7ed      	b.n	db8b0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   db8d4:	f8d9 0008 	ldr.w	r0, [r9, #8]
   db8d8:	6803      	ldr	r3, [r0, #0]
   db8da:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   db8de:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   db8e2:	69dc      	ldr	r4, [r3, #28]
   db8e4:	463a      	mov	r2, r7
   db8e6:	4643      	mov	r3, r8
   db8e8:	4629      	mov	r1, r5
   db8ea:	46a4      	mov	ip, r4
   db8ec:	b001      	add	sp, #4
   db8ee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   db8f2:	4760      	bx	ip

000db8f4 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   db8f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   db8f8:	4607      	mov	r7, r0
   db8fa:	460c      	mov	r4, r1
   db8fc:	4615      	mov	r5, r2
   db8fe:	461e      	mov	r6, r3
   db900:	f7ff ff6d 	bl	db7de <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   db904:	b948      	cbnz	r0, db91a <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   db906:	68b8      	ldr	r0, [r7, #8]
   db908:	6803      	ldr	r3, [r0, #0]
   db90a:	699f      	ldr	r7, [r3, #24]
   db90c:	462a      	mov	r2, r5
   db90e:	4633      	mov	r3, r6
   db910:	4621      	mov	r1, r4
   db912:	46bc      	mov	ip, r7
   db914:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   db918:	4760      	bx	ip
   db91a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000db91e <_ZNSt9type_infoD1Ev>:
   db91e:	4770      	bx	lr

000db920 <_ZNKSt9type_info14__is_pointer_pEv>:
   db920:	2000      	movs	r0, #0
   db922:	4770      	bx	lr

000db924 <_ZNKSt9type_infoeqERKS_>:
   db924:	4281      	cmp	r1, r0
   db926:	b508      	push	{r3, lr}
   db928:	d00e      	beq.n	db948 <_ZNKSt9type_infoeqERKS_+0x24>
   db92a:	6840      	ldr	r0, [r0, #4]
   db92c:	7803      	ldrb	r3, [r0, #0]
   db92e:	2b2a      	cmp	r3, #42	; 0x2a
   db930:	d00c      	beq.n	db94c <_ZNKSt9type_infoeqERKS_+0x28>
   db932:	6849      	ldr	r1, [r1, #4]
   db934:	780b      	ldrb	r3, [r1, #0]
   db936:	2b2a      	cmp	r3, #42	; 0x2a
   db938:	bf08      	it	eq
   db93a:	3101      	addeq	r1, #1
   db93c:	f000 ff49 	bl	dc7d2 <strcmp>
   db940:	fab0 f080 	clz	r0, r0
   db944:	0940      	lsrs	r0, r0, #5
   db946:	bd08      	pop	{r3, pc}
   db948:	2001      	movs	r0, #1
   db94a:	e7fc      	b.n	db946 <_ZNKSt9type_infoeqERKS_+0x22>
   db94c:	2000      	movs	r0, #0
   db94e:	e7fa      	b.n	db946 <_ZNKSt9type_infoeqERKS_+0x22>

000db950 <__aeabi_drsub>:
   db950:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   db954:	e002      	b.n	db95c <__adddf3>
   db956:	bf00      	nop

000db958 <__aeabi_dsub>:
   db958:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000db95c <__adddf3>:
   db95c:	b530      	push	{r4, r5, lr}
   db95e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   db962:	ea4f 0543 	mov.w	r5, r3, lsl #1
   db966:	ea94 0f05 	teq	r4, r5
   db96a:	bf08      	it	eq
   db96c:	ea90 0f02 	teqeq	r0, r2
   db970:	bf1f      	itttt	ne
   db972:	ea54 0c00 	orrsne.w	ip, r4, r0
   db976:	ea55 0c02 	orrsne.w	ip, r5, r2
   db97a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   db97e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   db982:	f000 80e2 	beq.w	dbb4a <__adddf3+0x1ee>
   db986:	ea4f 5454 	mov.w	r4, r4, lsr #21
   db98a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   db98e:	bfb8      	it	lt
   db990:	426d      	neglt	r5, r5
   db992:	dd0c      	ble.n	db9ae <__adddf3+0x52>
   db994:	442c      	add	r4, r5
   db996:	ea80 0202 	eor.w	r2, r0, r2
   db99a:	ea81 0303 	eor.w	r3, r1, r3
   db99e:	ea82 0000 	eor.w	r0, r2, r0
   db9a2:	ea83 0101 	eor.w	r1, r3, r1
   db9a6:	ea80 0202 	eor.w	r2, r0, r2
   db9aa:	ea81 0303 	eor.w	r3, r1, r3
   db9ae:	2d36      	cmp	r5, #54	; 0x36
   db9b0:	bf88      	it	hi
   db9b2:	bd30      	pophi	{r4, r5, pc}
   db9b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   db9b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   db9bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   db9c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   db9c4:	d002      	beq.n	db9cc <__adddf3+0x70>
   db9c6:	4240      	negs	r0, r0
   db9c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   db9cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   db9d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   db9d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   db9d8:	d002      	beq.n	db9e0 <__adddf3+0x84>
   db9da:	4252      	negs	r2, r2
   db9dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   db9e0:	ea94 0f05 	teq	r4, r5
   db9e4:	f000 80a7 	beq.w	dbb36 <__adddf3+0x1da>
   db9e8:	f1a4 0401 	sub.w	r4, r4, #1
   db9ec:	f1d5 0e20 	rsbs	lr, r5, #32
   db9f0:	db0d      	blt.n	dba0e <__adddf3+0xb2>
   db9f2:	fa02 fc0e 	lsl.w	ip, r2, lr
   db9f6:	fa22 f205 	lsr.w	r2, r2, r5
   db9fa:	1880      	adds	r0, r0, r2
   db9fc:	f141 0100 	adc.w	r1, r1, #0
   dba00:	fa03 f20e 	lsl.w	r2, r3, lr
   dba04:	1880      	adds	r0, r0, r2
   dba06:	fa43 f305 	asr.w	r3, r3, r5
   dba0a:	4159      	adcs	r1, r3
   dba0c:	e00e      	b.n	dba2c <__adddf3+0xd0>
   dba0e:	f1a5 0520 	sub.w	r5, r5, #32
   dba12:	f10e 0e20 	add.w	lr, lr, #32
   dba16:	2a01      	cmp	r2, #1
   dba18:	fa03 fc0e 	lsl.w	ip, r3, lr
   dba1c:	bf28      	it	cs
   dba1e:	f04c 0c02 	orrcs.w	ip, ip, #2
   dba22:	fa43 f305 	asr.w	r3, r3, r5
   dba26:	18c0      	adds	r0, r0, r3
   dba28:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   dba2c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   dba30:	d507      	bpl.n	dba42 <__adddf3+0xe6>
   dba32:	f04f 0e00 	mov.w	lr, #0
   dba36:	f1dc 0c00 	rsbs	ip, ip, #0
   dba3a:	eb7e 0000 	sbcs.w	r0, lr, r0
   dba3e:	eb6e 0101 	sbc.w	r1, lr, r1
   dba42:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   dba46:	d31b      	bcc.n	dba80 <__adddf3+0x124>
   dba48:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   dba4c:	d30c      	bcc.n	dba68 <__adddf3+0x10c>
   dba4e:	0849      	lsrs	r1, r1, #1
   dba50:	ea5f 0030 	movs.w	r0, r0, rrx
   dba54:	ea4f 0c3c 	mov.w	ip, ip, rrx
   dba58:	f104 0401 	add.w	r4, r4, #1
   dba5c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   dba60:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   dba64:	f080 809a 	bcs.w	dbb9c <__adddf3+0x240>
   dba68:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   dba6c:	bf08      	it	eq
   dba6e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   dba72:	f150 0000 	adcs.w	r0, r0, #0
   dba76:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   dba7a:	ea41 0105 	orr.w	r1, r1, r5
   dba7e:	bd30      	pop	{r4, r5, pc}
   dba80:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   dba84:	4140      	adcs	r0, r0
   dba86:	eb41 0101 	adc.w	r1, r1, r1
   dba8a:	3c01      	subs	r4, #1
   dba8c:	bf28      	it	cs
   dba8e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   dba92:	d2e9      	bcs.n	dba68 <__adddf3+0x10c>
   dba94:	f091 0f00 	teq	r1, #0
   dba98:	bf04      	itt	eq
   dba9a:	4601      	moveq	r1, r0
   dba9c:	2000      	moveq	r0, #0
   dba9e:	fab1 f381 	clz	r3, r1
   dbaa2:	bf08      	it	eq
   dbaa4:	3320      	addeq	r3, #32
   dbaa6:	f1a3 030b 	sub.w	r3, r3, #11
   dbaaa:	f1b3 0220 	subs.w	r2, r3, #32
   dbaae:	da0c      	bge.n	dbaca <__adddf3+0x16e>
   dbab0:	320c      	adds	r2, #12
   dbab2:	dd08      	ble.n	dbac6 <__adddf3+0x16a>
   dbab4:	f102 0c14 	add.w	ip, r2, #20
   dbab8:	f1c2 020c 	rsb	r2, r2, #12
   dbabc:	fa01 f00c 	lsl.w	r0, r1, ip
   dbac0:	fa21 f102 	lsr.w	r1, r1, r2
   dbac4:	e00c      	b.n	dbae0 <__adddf3+0x184>
   dbac6:	f102 0214 	add.w	r2, r2, #20
   dbaca:	bfd8      	it	le
   dbacc:	f1c2 0c20 	rsble	ip, r2, #32
   dbad0:	fa01 f102 	lsl.w	r1, r1, r2
   dbad4:	fa20 fc0c 	lsr.w	ip, r0, ip
   dbad8:	bfdc      	itt	le
   dbada:	ea41 010c 	orrle.w	r1, r1, ip
   dbade:	4090      	lslle	r0, r2
   dbae0:	1ae4      	subs	r4, r4, r3
   dbae2:	bfa2      	ittt	ge
   dbae4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   dbae8:	4329      	orrge	r1, r5
   dbaea:	bd30      	popge	{r4, r5, pc}
   dbaec:	ea6f 0404 	mvn.w	r4, r4
   dbaf0:	3c1f      	subs	r4, #31
   dbaf2:	da1c      	bge.n	dbb2e <__adddf3+0x1d2>
   dbaf4:	340c      	adds	r4, #12
   dbaf6:	dc0e      	bgt.n	dbb16 <__adddf3+0x1ba>
   dbaf8:	f104 0414 	add.w	r4, r4, #20
   dbafc:	f1c4 0220 	rsb	r2, r4, #32
   dbb00:	fa20 f004 	lsr.w	r0, r0, r4
   dbb04:	fa01 f302 	lsl.w	r3, r1, r2
   dbb08:	ea40 0003 	orr.w	r0, r0, r3
   dbb0c:	fa21 f304 	lsr.w	r3, r1, r4
   dbb10:	ea45 0103 	orr.w	r1, r5, r3
   dbb14:	bd30      	pop	{r4, r5, pc}
   dbb16:	f1c4 040c 	rsb	r4, r4, #12
   dbb1a:	f1c4 0220 	rsb	r2, r4, #32
   dbb1e:	fa20 f002 	lsr.w	r0, r0, r2
   dbb22:	fa01 f304 	lsl.w	r3, r1, r4
   dbb26:	ea40 0003 	orr.w	r0, r0, r3
   dbb2a:	4629      	mov	r1, r5
   dbb2c:	bd30      	pop	{r4, r5, pc}
   dbb2e:	fa21 f004 	lsr.w	r0, r1, r4
   dbb32:	4629      	mov	r1, r5
   dbb34:	bd30      	pop	{r4, r5, pc}
   dbb36:	f094 0f00 	teq	r4, #0
   dbb3a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   dbb3e:	bf06      	itte	eq
   dbb40:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   dbb44:	3401      	addeq	r4, #1
   dbb46:	3d01      	subne	r5, #1
   dbb48:	e74e      	b.n	db9e8 <__adddf3+0x8c>
   dbb4a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   dbb4e:	bf18      	it	ne
   dbb50:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   dbb54:	d029      	beq.n	dbbaa <__adddf3+0x24e>
   dbb56:	ea94 0f05 	teq	r4, r5
   dbb5a:	bf08      	it	eq
   dbb5c:	ea90 0f02 	teqeq	r0, r2
   dbb60:	d005      	beq.n	dbb6e <__adddf3+0x212>
   dbb62:	ea54 0c00 	orrs.w	ip, r4, r0
   dbb66:	bf04      	itt	eq
   dbb68:	4619      	moveq	r1, r3
   dbb6a:	4610      	moveq	r0, r2
   dbb6c:	bd30      	pop	{r4, r5, pc}
   dbb6e:	ea91 0f03 	teq	r1, r3
   dbb72:	bf1e      	ittt	ne
   dbb74:	2100      	movne	r1, #0
   dbb76:	2000      	movne	r0, #0
   dbb78:	bd30      	popne	{r4, r5, pc}
   dbb7a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   dbb7e:	d105      	bne.n	dbb8c <__adddf3+0x230>
   dbb80:	0040      	lsls	r0, r0, #1
   dbb82:	4149      	adcs	r1, r1
   dbb84:	bf28      	it	cs
   dbb86:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   dbb8a:	bd30      	pop	{r4, r5, pc}
   dbb8c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   dbb90:	bf3c      	itt	cc
   dbb92:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   dbb96:	bd30      	popcc	{r4, r5, pc}
   dbb98:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   dbb9c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   dbba0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   dbba4:	f04f 0000 	mov.w	r0, #0
   dbba8:	bd30      	pop	{r4, r5, pc}
   dbbaa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   dbbae:	bf1a      	itte	ne
   dbbb0:	4619      	movne	r1, r3
   dbbb2:	4610      	movne	r0, r2
   dbbb4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   dbbb8:	bf1c      	itt	ne
   dbbba:	460b      	movne	r3, r1
   dbbbc:	4602      	movne	r2, r0
   dbbbe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   dbbc2:	bf06      	itte	eq
   dbbc4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   dbbc8:	ea91 0f03 	teqeq	r1, r3
   dbbcc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   dbbd0:	bd30      	pop	{r4, r5, pc}
   dbbd2:	bf00      	nop

000dbbd4 <__aeabi_ui2d>:
   dbbd4:	f090 0f00 	teq	r0, #0
   dbbd8:	bf04      	itt	eq
   dbbda:	2100      	moveq	r1, #0
   dbbdc:	4770      	bxeq	lr
   dbbde:	b530      	push	{r4, r5, lr}
   dbbe0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   dbbe4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   dbbe8:	f04f 0500 	mov.w	r5, #0
   dbbec:	f04f 0100 	mov.w	r1, #0
   dbbf0:	e750      	b.n	dba94 <__adddf3+0x138>
   dbbf2:	bf00      	nop

000dbbf4 <__aeabi_i2d>:
   dbbf4:	f090 0f00 	teq	r0, #0
   dbbf8:	bf04      	itt	eq
   dbbfa:	2100      	moveq	r1, #0
   dbbfc:	4770      	bxeq	lr
   dbbfe:	b530      	push	{r4, r5, lr}
   dbc00:	f44f 6480 	mov.w	r4, #1024	; 0x400
   dbc04:	f104 0432 	add.w	r4, r4, #50	; 0x32
   dbc08:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   dbc0c:	bf48      	it	mi
   dbc0e:	4240      	negmi	r0, r0
   dbc10:	f04f 0100 	mov.w	r1, #0
   dbc14:	e73e      	b.n	dba94 <__adddf3+0x138>
   dbc16:	bf00      	nop

000dbc18 <__aeabi_f2d>:
   dbc18:	0042      	lsls	r2, r0, #1
   dbc1a:	ea4f 01e2 	mov.w	r1, r2, asr #3
   dbc1e:	ea4f 0131 	mov.w	r1, r1, rrx
   dbc22:	ea4f 7002 	mov.w	r0, r2, lsl #28
   dbc26:	bf1f      	itttt	ne
   dbc28:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   dbc2c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   dbc30:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   dbc34:	4770      	bxne	lr
   dbc36:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   dbc3a:	bf08      	it	eq
   dbc3c:	4770      	bxeq	lr
   dbc3e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   dbc42:	bf04      	itt	eq
   dbc44:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   dbc48:	4770      	bxeq	lr
   dbc4a:	b530      	push	{r4, r5, lr}
   dbc4c:	f44f 7460 	mov.w	r4, #896	; 0x380
   dbc50:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   dbc54:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   dbc58:	e71c      	b.n	dba94 <__adddf3+0x138>
   dbc5a:	bf00      	nop

000dbc5c <__aeabi_ul2d>:
   dbc5c:	ea50 0201 	orrs.w	r2, r0, r1
   dbc60:	bf08      	it	eq
   dbc62:	4770      	bxeq	lr
   dbc64:	b530      	push	{r4, r5, lr}
   dbc66:	f04f 0500 	mov.w	r5, #0
   dbc6a:	e00a      	b.n	dbc82 <__aeabi_l2d+0x16>

000dbc6c <__aeabi_l2d>:
   dbc6c:	ea50 0201 	orrs.w	r2, r0, r1
   dbc70:	bf08      	it	eq
   dbc72:	4770      	bxeq	lr
   dbc74:	b530      	push	{r4, r5, lr}
   dbc76:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   dbc7a:	d502      	bpl.n	dbc82 <__aeabi_l2d+0x16>
   dbc7c:	4240      	negs	r0, r0
   dbc7e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   dbc82:	f44f 6480 	mov.w	r4, #1024	; 0x400
   dbc86:	f104 0432 	add.w	r4, r4, #50	; 0x32
   dbc8a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   dbc8e:	f43f aed8 	beq.w	dba42 <__adddf3+0xe6>
   dbc92:	f04f 0203 	mov.w	r2, #3
   dbc96:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   dbc9a:	bf18      	it	ne
   dbc9c:	3203      	addne	r2, #3
   dbc9e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   dbca2:	bf18      	it	ne
   dbca4:	3203      	addne	r2, #3
   dbca6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   dbcaa:	f1c2 0320 	rsb	r3, r2, #32
   dbcae:	fa00 fc03 	lsl.w	ip, r0, r3
   dbcb2:	fa20 f002 	lsr.w	r0, r0, r2
   dbcb6:	fa01 fe03 	lsl.w	lr, r1, r3
   dbcba:	ea40 000e 	orr.w	r0, r0, lr
   dbcbe:	fa21 f102 	lsr.w	r1, r1, r2
   dbcc2:	4414      	add	r4, r2
   dbcc4:	e6bd      	b.n	dba42 <__adddf3+0xe6>
   dbcc6:	bf00      	nop

000dbcc8 <__aeabi_dmul>:
   dbcc8:	b570      	push	{r4, r5, r6, lr}
   dbcca:	f04f 0cff 	mov.w	ip, #255	; 0xff
   dbcce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   dbcd2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   dbcd6:	bf1d      	ittte	ne
   dbcd8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   dbcdc:	ea94 0f0c 	teqne	r4, ip
   dbce0:	ea95 0f0c 	teqne	r5, ip
   dbce4:	f000 f8de 	bleq	dbea4 <__aeabi_dmul+0x1dc>
   dbce8:	442c      	add	r4, r5
   dbcea:	ea81 0603 	eor.w	r6, r1, r3
   dbcee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   dbcf2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   dbcf6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   dbcfa:	bf18      	it	ne
   dbcfc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   dbd00:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   dbd04:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   dbd08:	d038      	beq.n	dbd7c <__aeabi_dmul+0xb4>
   dbd0a:	fba0 ce02 	umull	ip, lr, r0, r2
   dbd0e:	f04f 0500 	mov.w	r5, #0
   dbd12:	fbe1 e502 	umlal	lr, r5, r1, r2
   dbd16:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   dbd1a:	fbe0 e503 	umlal	lr, r5, r0, r3
   dbd1e:	f04f 0600 	mov.w	r6, #0
   dbd22:	fbe1 5603 	umlal	r5, r6, r1, r3
   dbd26:	f09c 0f00 	teq	ip, #0
   dbd2a:	bf18      	it	ne
   dbd2c:	f04e 0e01 	orrne.w	lr, lr, #1
   dbd30:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   dbd34:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   dbd38:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   dbd3c:	d204      	bcs.n	dbd48 <__aeabi_dmul+0x80>
   dbd3e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   dbd42:	416d      	adcs	r5, r5
   dbd44:	eb46 0606 	adc.w	r6, r6, r6
   dbd48:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   dbd4c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   dbd50:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   dbd54:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   dbd58:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   dbd5c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   dbd60:	bf88      	it	hi
   dbd62:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   dbd66:	d81e      	bhi.n	dbda6 <__aeabi_dmul+0xde>
   dbd68:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   dbd6c:	bf08      	it	eq
   dbd6e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   dbd72:	f150 0000 	adcs.w	r0, r0, #0
   dbd76:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   dbd7a:	bd70      	pop	{r4, r5, r6, pc}
   dbd7c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   dbd80:	ea46 0101 	orr.w	r1, r6, r1
   dbd84:	ea40 0002 	orr.w	r0, r0, r2
   dbd88:	ea81 0103 	eor.w	r1, r1, r3
   dbd8c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   dbd90:	bfc2      	ittt	gt
   dbd92:	ebd4 050c 	rsbsgt	r5, r4, ip
   dbd96:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   dbd9a:	bd70      	popgt	{r4, r5, r6, pc}
   dbd9c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   dbda0:	f04f 0e00 	mov.w	lr, #0
   dbda4:	3c01      	subs	r4, #1
   dbda6:	f300 80ab 	bgt.w	dbf00 <__aeabi_dmul+0x238>
   dbdaa:	f114 0f36 	cmn.w	r4, #54	; 0x36
   dbdae:	bfde      	ittt	le
   dbdb0:	2000      	movle	r0, #0
   dbdb2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   dbdb6:	bd70      	pople	{r4, r5, r6, pc}
   dbdb8:	f1c4 0400 	rsb	r4, r4, #0
   dbdbc:	3c20      	subs	r4, #32
   dbdbe:	da35      	bge.n	dbe2c <__aeabi_dmul+0x164>
   dbdc0:	340c      	adds	r4, #12
   dbdc2:	dc1b      	bgt.n	dbdfc <__aeabi_dmul+0x134>
   dbdc4:	f104 0414 	add.w	r4, r4, #20
   dbdc8:	f1c4 0520 	rsb	r5, r4, #32
   dbdcc:	fa00 f305 	lsl.w	r3, r0, r5
   dbdd0:	fa20 f004 	lsr.w	r0, r0, r4
   dbdd4:	fa01 f205 	lsl.w	r2, r1, r5
   dbdd8:	ea40 0002 	orr.w	r0, r0, r2
   dbddc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   dbde0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   dbde4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   dbde8:	fa21 f604 	lsr.w	r6, r1, r4
   dbdec:	eb42 0106 	adc.w	r1, r2, r6
   dbdf0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   dbdf4:	bf08      	it	eq
   dbdf6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   dbdfa:	bd70      	pop	{r4, r5, r6, pc}
   dbdfc:	f1c4 040c 	rsb	r4, r4, #12
   dbe00:	f1c4 0520 	rsb	r5, r4, #32
   dbe04:	fa00 f304 	lsl.w	r3, r0, r4
   dbe08:	fa20 f005 	lsr.w	r0, r0, r5
   dbe0c:	fa01 f204 	lsl.w	r2, r1, r4
   dbe10:	ea40 0002 	orr.w	r0, r0, r2
   dbe14:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   dbe18:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   dbe1c:	f141 0100 	adc.w	r1, r1, #0
   dbe20:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   dbe24:	bf08      	it	eq
   dbe26:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   dbe2a:	bd70      	pop	{r4, r5, r6, pc}
   dbe2c:	f1c4 0520 	rsb	r5, r4, #32
   dbe30:	fa00 f205 	lsl.w	r2, r0, r5
   dbe34:	ea4e 0e02 	orr.w	lr, lr, r2
   dbe38:	fa20 f304 	lsr.w	r3, r0, r4
   dbe3c:	fa01 f205 	lsl.w	r2, r1, r5
   dbe40:	ea43 0302 	orr.w	r3, r3, r2
   dbe44:	fa21 f004 	lsr.w	r0, r1, r4
   dbe48:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   dbe4c:	fa21 f204 	lsr.w	r2, r1, r4
   dbe50:	ea20 0002 	bic.w	r0, r0, r2
   dbe54:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   dbe58:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   dbe5c:	bf08      	it	eq
   dbe5e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   dbe62:	bd70      	pop	{r4, r5, r6, pc}
   dbe64:	f094 0f00 	teq	r4, #0
   dbe68:	d10f      	bne.n	dbe8a <__aeabi_dmul+0x1c2>
   dbe6a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   dbe6e:	0040      	lsls	r0, r0, #1
   dbe70:	eb41 0101 	adc.w	r1, r1, r1
   dbe74:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   dbe78:	bf08      	it	eq
   dbe7a:	3c01      	subeq	r4, #1
   dbe7c:	d0f7      	beq.n	dbe6e <__aeabi_dmul+0x1a6>
   dbe7e:	ea41 0106 	orr.w	r1, r1, r6
   dbe82:	f095 0f00 	teq	r5, #0
   dbe86:	bf18      	it	ne
   dbe88:	4770      	bxne	lr
   dbe8a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   dbe8e:	0052      	lsls	r2, r2, #1
   dbe90:	eb43 0303 	adc.w	r3, r3, r3
   dbe94:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   dbe98:	bf08      	it	eq
   dbe9a:	3d01      	subeq	r5, #1
   dbe9c:	d0f7      	beq.n	dbe8e <__aeabi_dmul+0x1c6>
   dbe9e:	ea43 0306 	orr.w	r3, r3, r6
   dbea2:	4770      	bx	lr
   dbea4:	ea94 0f0c 	teq	r4, ip
   dbea8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   dbeac:	bf18      	it	ne
   dbeae:	ea95 0f0c 	teqne	r5, ip
   dbeb2:	d00c      	beq.n	dbece <__aeabi_dmul+0x206>
   dbeb4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   dbeb8:	bf18      	it	ne
   dbeba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   dbebe:	d1d1      	bne.n	dbe64 <__aeabi_dmul+0x19c>
   dbec0:	ea81 0103 	eor.w	r1, r1, r3
   dbec4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   dbec8:	f04f 0000 	mov.w	r0, #0
   dbecc:	bd70      	pop	{r4, r5, r6, pc}
   dbece:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   dbed2:	bf06      	itte	eq
   dbed4:	4610      	moveq	r0, r2
   dbed6:	4619      	moveq	r1, r3
   dbed8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   dbedc:	d019      	beq.n	dbf12 <__aeabi_dmul+0x24a>
   dbede:	ea94 0f0c 	teq	r4, ip
   dbee2:	d102      	bne.n	dbeea <__aeabi_dmul+0x222>
   dbee4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   dbee8:	d113      	bne.n	dbf12 <__aeabi_dmul+0x24a>
   dbeea:	ea95 0f0c 	teq	r5, ip
   dbeee:	d105      	bne.n	dbefc <__aeabi_dmul+0x234>
   dbef0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   dbef4:	bf1c      	itt	ne
   dbef6:	4610      	movne	r0, r2
   dbef8:	4619      	movne	r1, r3
   dbefa:	d10a      	bne.n	dbf12 <__aeabi_dmul+0x24a>
   dbefc:	ea81 0103 	eor.w	r1, r1, r3
   dbf00:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   dbf04:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   dbf08:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   dbf0c:	f04f 0000 	mov.w	r0, #0
   dbf10:	bd70      	pop	{r4, r5, r6, pc}
   dbf12:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   dbf16:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   dbf1a:	bd70      	pop	{r4, r5, r6, pc}

000dbf1c <__aeabi_ddiv>:
   dbf1c:	b570      	push	{r4, r5, r6, lr}
   dbf1e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   dbf22:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   dbf26:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   dbf2a:	bf1d      	ittte	ne
   dbf2c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   dbf30:	ea94 0f0c 	teqne	r4, ip
   dbf34:	ea95 0f0c 	teqne	r5, ip
   dbf38:	f000 f8a7 	bleq	dc08a <__aeabi_ddiv+0x16e>
   dbf3c:	eba4 0405 	sub.w	r4, r4, r5
   dbf40:	ea81 0e03 	eor.w	lr, r1, r3
   dbf44:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   dbf48:	ea4f 3101 	mov.w	r1, r1, lsl #12
   dbf4c:	f000 8088 	beq.w	dc060 <__aeabi_ddiv+0x144>
   dbf50:	ea4f 3303 	mov.w	r3, r3, lsl #12
   dbf54:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   dbf58:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   dbf5c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   dbf60:	ea4f 2202 	mov.w	r2, r2, lsl #8
   dbf64:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   dbf68:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   dbf6c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   dbf70:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   dbf74:	429d      	cmp	r5, r3
   dbf76:	bf08      	it	eq
   dbf78:	4296      	cmpeq	r6, r2
   dbf7a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   dbf7e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   dbf82:	d202      	bcs.n	dbf8a <__aeabi_ddiv+0x6e>
   dbf84:	085b      	lsrs	r3, r3, #1
   dbf86:	ea4f 0232 	mov.w	r2, r2, rrx
   dbf8a:	1ab6      	subs	r6, r6, r2
   dbf8c:	eb65 0503 	sbc.w	r5, r5, r3
   dbf90:	085b      	lsrs	r3, r3, #1
   dbf92:	ea4f 0232 	mov.w	r2, r2, rrx
   dbf96:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   dbf9a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   dbf9e:	ebb6 0e02 	subs.w	lr, r6, r2
   dbfa2:	eb75 0e03 	sbcs.w	lr, r5, r3
   dbfa6:	bf22      	ittt	cs
   dbfa8:	1ab6      	subcs	r6, r6, r2
   dbfaa:	4675      	movcs	r5, lr
   dbfac:	ea40 000c 	orrcs.w	r0, r0, ip
   dbfb0:	085b      	lsrs	r3, r3, #1
   dbfb2:	ea4f 0232 	mov.w	r2, r2, rrx
   dbfb6:	ebb6 0e02 	subs.w	lr, r6, r2
   dbfba:	eb75 0e03 	sbcs.w	lr, r5, r3
   dbfbe:	bf22      	ittt	cs
   dbfc0:	1ab6      	subcs	r6, r6, r2
   dbfc2:	4675      	movcs	r5, lr
   dbfc4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   dbfc8:	085b      	lsrs	r3, r3, #1
   dbfca:	ea4f 0232 	mov.w	r2, r2, rrx
   dbfce:	ebb6 0e02 	subs.w	lr, r6, r2
   dbfd2:	eb75 0e03 	sbcs.w	lr, r5, r3
   dbfd6:	bf22      	ittt	cs
   dbfd8:	1ab6      	subcs	r6, r6, r2
   dbfda:	4675      	movcs	r5, lr
   dbfdc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   dbfe0:	085b      	lsrs	r3, r3, #1
   dbfe2:	ea4f 0232 	mov.w	r2, r2, rrx
   dbfe6:	ebb6 0e02 	subs.w	lr, r6, r2
   dbfea:	eb75 0e03 	sbcs.w	lr, r5, r3
   dbfee:	bf22      	ittt	cs
   dbff0:	1ab6      	subcs	r6, r6, r2
   dbff2:	4675      	movcs	r5, lr
   dbff4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   dbff8:	ea55 0e06 	orrs.w	lr, r5, r6
   dbffc:	d018      	beq.n	dc030 <__aeabi_ddiv+0x114>
   dbffe:	ea4f 1505 	mov.w	r5, r5, lsl #4
   dc002:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   dc006:	ea4f 1606 	mov.w	r6, r6, lsl #4
   dc00a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   dc00e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   dc012:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   dc016:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   dc01a:	d1c0      	bne.n	dbf9e <__aeabi_ddiv+0x82>
   dc01c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   dc020:	d10b      	bne.n	dc03a <__aeabi_ddiv+0x11e>
   dc022:	ea41 0100 	orr.w	r1, r1, r0
   dc026:	f04f 0000 	mov.w	r0, #0
   dc02a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   dc02e:	e7b6      	b.n	dbf9e <__aeabi_ddiv+0x82>
   dc030:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   dc034:	bf04      	itt	eq
   dc036:	4301      	orreq	r1, r0
   dc038:	2000      	moveq	r0, #0
   dc03a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   dc03e:	bf88      	it	hi
   dc040:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   dc044:	f63f aeaf 	bhi.w	dbda6 <__aeabi_dmul+0xde>
   dc048:	ebb5 0c03 	subs.w	ip, r5, r3
   dc04c:	bf04      	itt	eq
   dc04e:	ebb6 0c02 	subseq.w	ip, r6, r2
   dc052:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   dc056:	f150 0000 	adcs.w	r0, r0, #0
   dc05a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   dc05e:	bd70      	pop	{r4, r5, r6, pc}
   dc060:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   dc064:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   dc068:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   dc06c:	bfc2      	ittt	gt
   dc06e:	ebd4 050c 	rsbsgt	r5, r4, ip
   dc072:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   dc076:	bd70      	popgt	{r4, r5, r6, pc}
   dc078:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   dc07c:	f04f 0e00 	mov.w	lr, #0
   dc080:	3c01      	subs	r4, #1
   dc082:	e690      	b.n	dbda6 <__aeabi_dmul+0xde>
   dc084:	ea45 0e06 	orr.w	lr, r5, r6
   dc088:	e68d      	b.n	dbda6 <__aeabi_dmul+0xde>
   dc08a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   dc08e:	ea94 0f0c 	teq	r4, ip
   dc092:	bf08      	it	eq
   dc094:	ea95 0f0c 	teqeq	r5, ip
   dc098:	f43f af3b 	beq.w	dbf12 <__aeabi_dmul+0x24a>
   dc09c:	ea94 0f0c 	teq	r4, ip
   dc0a0:	d10a      	bne.n	dc0b8 <__aeabi_ddiv+0x19c>
   dc0a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   dc0a6:	f47f af34 	bne.w	dbf12 <__aeabi_dmul+0x24a>
   dc0aa:	ea95 0f0c 	teq	r5, ip
   dc0ae:	f47f af25 	bne.w	dbefc <__aeabi_dmul+0x234>
   dc0b2:	4610      	mov	r0, r2
   dc0b4:	4619      	mov	r1, r3
   dc0b6:	e72c      	b.n	dbf12 <__aeabi_dmul+0x24a>
   dc0b8:	ea95 0f0c 	teq	r5, ip
   dc0bc:	d106      	bne.n	dc0cc <__aeabi_ddiv+0x1b0>
   dc0be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   dc0c2:	f43f aefd 	beq.w	dbec0 <__aeabi_dmul+0x1f8>
   dc0c6:	4610      	mov	r0, r2
   dc0c8:	4619      	mov	r1, r3
   dc0ca:	e722      	b.n	dbf12 <__aeabi_dmul+0x24a>
   dc0cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   dc0d0:	bf18      	it	ne
   dc0d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   dc0d6:	f47f aec5 	bne.w	dbe64 <__aeabi_dmul+0x19c>
   dc0da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   dc0de:	f47f af0d 	bne.w	dbefc <__aeabi_dmul+0x234>
   dc0e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   dc0e6:	f47f aeeb 	bne.w	dbec0 <__aeabi_dmul+0x1f8>
   dc0ea:	e712      	b.n	dbf12 <__aeabi_dmul+0x24a>

000dc0ec <__gedf2>:
   dc0ec:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   dc0f0:	e006      	b.n	dc100 <__cmpdf2+0x4>
   dc0f2:	bf00      	nop

000dc0f4 <__ledf2>:
   dc0f4:	f04f 0c01 	mov.w	ip, #1
   dc0f8:	e002      	b.n	dc100 <__cmpdf2+0x4>
   dc0fa:	bf00      	nop

000dc0fc <__cmpdf2>:
   dc0fc:	f04f 0c01 	mov.w	ip, #1
   dc100:	f84d cd04 	str.w	ip, [sp, #-4]!
   dc104:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   dc108:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   dc10c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   dc110:	bf18      	it	ne
   dc112:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   dc116:	d01b      	beq.n	dc150 <__cmpdf2+0x54>
   dc118:	b001      	add	sp, #4
   dc11a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   dc11e:	bf0c      	ite	eq
   dc120:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   dc124:	ea91 0f03 	teqne	r1, r3
   dc128:	bf02      	ittt	eq
   dc12a:	ea90 0f02 	teqeq	r0, r2
   dc12e:	2000      	moveq	r0, #0
   dc130:	4770      	bxeq	lr
   dc132:	f110 0f00 	cmn.w	r0, #0
   dc136:	ea91 0f03 	teq	r1, r3
   dc13a:	bf58      	it	pl
   dc13c:	4299      	cmppl	r1, r3
   dc13e:	bf08      	it	eq
   dc140:	4290      	cmpeq	r0, r2
   dc142:	bf2c      	ite	cs
   dc144:	17d8      	asrcs	r0, r3, #31
   dc146:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   dc14a:	f040 0001 	orr.w	r0, r0, #1
   dc14e:	4770      	bx	lr
   dc150:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   dc154:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   dc158:	d102      	bne.n	dc160 <__cmpdf2+0x64>
   dc15a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   dc15e:	d107      	bne.n	dc170 <__cmpdf2+0x74>
   dc160:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   dc164:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   dc168:	d1d6      	bne.n	dc118 <__cmpdf2+0x1c>
   dc16a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   dc16e:	d0d3      	beq.n	dc118 <__cmpdf2+0x1c>
   dc170:	f85d 0b04 	ldr.w	r0, [sp], #4
   dc174:	4770      	bx	lr
   dc176:	bf00      	nop

000dc178 <__aeabi_cdrcmple>:
   dc178:	4684      	mov	ip, r0
   dc17a:	4610      	mov	r0, r2
   dc17c:	4662      	mov	r2, ip
   dc17e:	468c      	mov	ip, r1
   dc180:	4619      	mov	r1, r3
   dc182:	4663      	mov	r3, ip
   dc184:	e000      	b.n	dc188 <__aeabi_cdcmpeq>
   dc186:	bf00      	nop

000dc188 <__aeabi_cdcmpeq>:
   dc188:	b501      	push	{r0, lr}
   dc18a:	f7ff ffb7 	bl	dc0fc <__cmpdf2>
   dc18e:	2800      	cmp	r0, #0
   dc190:	bf48      	it	mi
   dc192:	f110 0f00 	cmnmi.w	r0, #0
   dc196:	bd01      	pop	{r0, pc}

000dc198 <__aeabi_dcmpeq>:
   dc198:	f84d ed08 	str.w	lr, [sp, #-8]!
   dc19c:	f7ff fff4 	bl	dc188 <__aeabi_cdcmpeq>
   dc1a0:	bf0c      	ite	eq
   dc1a2:	2001      	moveq	r0, #1
   dc1a4:	2000      	movne	r0, #0
   dc1a6:	f85d fb08 	ldr.w	pc, [sp], #8
   dc1aa:	bf00      	nop

000dc1ac <__aeabi_dcmplt>:
   dc1ac:	f84d ed08 	str.w	lr, [sp, #-8]!
   dc1b0:	f7ff ffea 	bl	dc188 <__aeabi_cdcmpeq>
   dc1b4:	bf34      	ite	cc
   dc1b6:	2001      	movcc	r0, #1
   dc1b8:	2000      	movcs	r0, #0
   dc1ba:	f85d fb08 	ldr.w	pc, [sp], #8
   dc1be:	bf00      	nop

000dc1c0 <__aeabi_dcmple>:
   dc1c0:	f84d ed08 	str.w	lr, [sp, #-8]!
   dc1c4:	f7ff ffe0 	bl	dc188 <__aeabi_cdcmpeq>
   dc1c8:	bf94      	ite	ls
   dc1ca:	2001      	movls	r0, #1
   dc1cc:	2000      	movhi	r0, #0
   dc1ce:	f85d fb08 	ldr.w	pc, [sp], #8
   dc1d2:	bf00      	nop

000dc1d4 <__aeabi_dcmpge>:
   dc1d4:	f84d ed08 	str.w	lr, [sp, #-8]!
   dc1d8:	f7ff ffce 	bl	dc178 <__aeabi_cdrcmple>
   dc1dc:	bf94      	ite	ls
   dc1de:	2001      	movls	r0, #1
   dc1e0:	2000      	movhi	r0, #0
   dc1e2:	f85d fb08 	ldr.w	pc, [sp], #8
   dc1e6:	bf00      	nop

000dc1e8 <__aeabi_dcmpgt>:
   dc1e8:	f84d ed08 	str.w	lr, [sp, #-8]!
   dc1ec:	f7ff ffc4 	bl	dc178 <__aeabi_cdrcmple>
   dc1f0:	bf34      	ite	cc
   dc1f2:	2001      	movcc	r0, #1
   dc1f4:	2000      	movcs	r0, #0
   dc1f6:	f85d fb08 	ldr.w	pc, [sp], #8
   dc1fa:	bf00      	nop

000dc1fc <__aeabi_d2uiz>:
   dc1fc:	004a      	lsls	r2, r1, #1
   dc1fe:	d211      	bcs.n	dc224 <__aeabi_d2uiz+0x28>
   dc200:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   dc204:	d211      	bcs.n	dc22a <__aeabi_d2uiz+0x2e>
   dc206:	d50d      	bpl.n	dc224 <__aeabi_d2uiz+0x28>
   dc208:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   dc20c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   dc210:	d40e      	bmi.n	dc230 <__aeabi_d2uiz+0x34>
   dc212:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   dc216:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   dc21a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   dc21e:	fa23 f002 	lsr.w	r0, r3, r2
   dc222:	4770      	bx	lr
   dc224:	f04f 0000 	mov.w	r0, #0
   dc228:	4770      	bx	lr
   dc22a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   dc22e:	d102      	bne.n	dc236 <__aeabi_d2uiz+0x3a>
   dc230:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   dc234:	4770      	bx	lr
   dc236:	f04f 0000 	mov.w	r0, #0
   dc23a:	4770      	bx	lr

000dc23c <__aeabi_d2f>:
   dc23c:	ea4f 0241 	mov.w	r2, r1, lsl #1
   dc240:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   dc244:	bf24      	itt	cs
   dc246:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   dc24a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   dc24e:	d90d      	bls.n	dc26c <__aeabi_d2f+0x30>
   dc250:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   dc254:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   dc258:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   dc25c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   dc260:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   dc264:	bf08      	it	eq
   dc266:	f020 0001 	biceq.w	r0, r0, #1
   dc26a:	4770      	bx	lr
   dc26c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   dc270:	d121      	bne.n	dc2b6 <__aeabi_d2f+0x7a>
   dc272:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   dc276:	bfbc      	itt	lt
   dc278:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   dc27c:	4770      	bxlt	lr
   dc27e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   dc282:	ea4f 5252 	mov.w	r2, r2, lsr #21
   dc286:	f1c2 0218 	rsb	r2, r2, #24
   dc28a:	f1c2 0c20 	rsb	ip, r2, #32
   dc28e:	fa10 f30c 	lsls.w	r3, r0, ip
   dc292:	fa20 f002 	lsr.w	r0, r0, r2
   dc296:	bf18      	it	ne
   dc298:	f040 0001 	orrne.w	r0, r0, #1
   dc29c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   dc2a0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   dc2a4:	fa03 fc0c 	lsl.w	ip, r3, ip
   dc2a8:	ea40 000c 	orr.w	r0, r0, ip
   dc2ac:	fa23 f302 	lsr.w	r3, r3, r2
   dc2b0:	ea4f 0343 	mov.w	r3, r3, lsl #1
   dc2b4:	e7cc      	b.n	dc250 <__aeabi_d2f+0x14>
   dc2b6:	ea7f 5362 	mvns.w	r3, r2, asr #21
   dc2ba:	d107      	bne.n	dc2cc <__aeabi_d2f+0x90>
   dc2bc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   dc2c0:	bf1e      	ittt	ne
   dc2c2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   dc2c6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   dc2ca:	4770      	bxne	lr
   dc2cc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   dc2d0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   dc2d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   dc2d8:	4770      	bx	lr
   dc2da:	bf00      	nop

000dc2dc <__aeabi_uldivmod>:
   dc2dc:	b953      	cbnz	r3, dc2f4 <__aeabi_uldivmod+0x18>
   dc2de:	b94a      	cbnz	r2, dc2f4 <__aeabi_uldivmod+0x18>
   dc2e0:	2900      	cmp	r1, #0
   dc2e2:	bf08      	it	eq
   dc2e4:	2800      	cmpeq	r0, #0
   dc2e6:	bf1c      	itt	ne
   dc2e8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   dc2ec:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   dc2f0:	f000 b9c0 	b.w	dc674 <__aeabi_idiv0>
   dc2f4:	f1ad 0c08 	sub.w	ip, sp, #8
   dc2f8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   dc2fc:	f000 f858 	bl	dc3b0 <__udivmoddi4>
   dc300:	f8dd e004 	ldr.w	lr, [sp, #4]
   dc304:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   dc308:	b004      	add	sp, #16
   dc30a:	4770      	bx	lr

000dc30c <__aeabi_f2lz>:
   dc30c:	ee07 0a90 	vmov	s15, r0
   dc310:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   dc314:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   dc318:	d401      	bmi.n	dc31e <__aeabi_f2lz+0x12>
   dc31a:	f000 b80b 	b.w	dc334 <__aeabi_f2ulz>
   dc31e:	eef1 7a67 	vneg.f32	s15, s15
   dc322:	b508      	push	{r3, lr}
   dc324:	ee17 0a90 	vmov	r0, s15
   dc328:	f000 f804 	bl	dc334 <__aeabi_f2ulz>
   dc32c:	4240      	negs	r0, r0
   dc32e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   dc332:	bd08      	pop	{r3, pc}

000dc334 <__aeabi_f2ulz>:
   dc334:	b5d0      	push	{r4, r6, r7, lr}
   dc336:	f7ff fc6f 	bl	dbc18 <__aeabi_f2d>
   dc33a:	4b0c      	ldr	r3, [pc, #48]	; (dc36c <__aeabi_f2ulz+0x38>)
   dc33c:	2200      	movs	r2, #0
   dc33e:	4606      	mov	r6, r0
   dc340:	460f      	mov	r7, r1
   dc342:	f7ff fcc1 	bl	dbcc8 <__aeabi_dmul>
   dc346:	f7ff ff59 	bl	dc1fc <__aeabi_d2uiz>
   dc34a:	4604      	mov	r4, r0
   dc34c:	f7ff fc42 	bl	dbbd4 <__aeabi_ui2d>
   dc350:	4b07      	ldr	r3, [pc, #28]	; (dc370 <__aeabi_f2ulz+0x3c>)
   dc352:	2200      	movs	r2, #0
   dc354:	f7ff fcb8 	bl	dbcc8 <__aeabi_dmul>
   dc358:	4602      	mov	r2, r0
   dc35a:	460b      	mov	r3, r1
   dc35c:	4630      	mov	r0, r6
   dc35e:	4639      	mov	r1, r7
   dc360:	f7ff fafa 	bl	db958 <__aeabi_dsub>
   dc364:	f7ff ff4a 	bl	dc1fc <__aeabi_d2uiz>
   dc368:	4621      	mov	r1, r4
   dc36a:	bdd0      	pop	{r4, r6, r7, pc}
   dc36c:	3df00000 	.word	0x3df00000
   dc370:	41f00000 	.word	0x41f00000

000dc374 <__aeabi_d2ulz>:
   dc374:	b5d0      	push	{r4, r6, r7, lr}
   dc376:	4b0c      	ldr	r3, [pc, #48]	; (dc3a8 <__aeabi_d2ulz+0x34>)
   dc378:	2200      	movs	r2, #0
   dc37a:	4606      	mov	r6, r0
   dc37c:	460f      	mov	r7, r1
   dc37e:	f7ff fca3 	bl	dbcc8 <__aeabi_dmul>
   dc382:	f7ff ff3b 	bl	dc1fc <__aeabi_d2uiz>
   dc386:	4604      	mov	r4, r0
   dc388:	f7ff fc24 	bl	dbbd4 <__aeabi_ui2d>
   dc38c:	4b07      	ldr	r3, [pc, #28]	; (dc3ac <__aeabi_d2ulz+0x38>)
   dc38e:	2200      	movs	r2, #0
   dc390:	f7ff fc9a 	bl	dbcc8 <__aeabi_dmul>
   dc394:	4602      	mov	r2, r0
   dc396:	460b      	mov	r3, r1
   dc398:	4630      	mov	r0, r6
   dc39a:	4639      	mov	r1, r7
   dc39c:	f7ff fadc 	bl	db958 <__aeabi_dsub>
   dc3a0:	f7ff ff2c 	bl	dc1fc <__aeabi_d2uiz>
   dc3a4:	4621      	mov	r1, r4
   dc3a6:	bdd0      	pop	{r4, r6, r7, pc}
   dc3a8:	3df00000 	.word	0x3df00000
   dc3ac:	41f00000 	.word	0x41f00000

000dc3b0 <__udivmoddi4>:
   dc3b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   dc3b4:	9d08      	ldr	r5, [sp, #32]
   dc3b6:	4604      	mov	r4, r0
   dc3b8:	468c      	mov	ip, r1
   dc3ba:	2b00      	cmp	r3, #0
   dc3bc:	f040 8083 	bne.w	dc4c6 <__udivmoddi4+0x116>
   dc3c0:	428a      	cmp	r2, r1
   dc3c2:	4617      	mov	r7, r2
   dc3c4:	d947      	bls.n	dc456 <__udivmoddi4+0xa6>
   dc3c6:	fab2 f282 	clz	r2, r2
   dc3ca:	b142      	cbz	r2, dc3de <__udivmoddi4+0x2e>
   dc3cc:	f1c2 0020 	rsb	r0, r2, #32
   dc3d0:	fa24 f000 	lsr.w	r0, r4, r0
   dc3d4:	4091      	lsls	r1, r2
   dc3d6:	4097      	lsls	r7, r2
   dc3d8:	ea40 0c01 	orr.w	ip, r0, r1
   dc3dc:	4094      	lsls	r4, r2
   dc3de:	ea4f 4817 	mov.w	r8, r7, lsr #16
   dc3e2:	0c23      	lsrs	r3, r4, #16
   dc3e4:	fbbc f6f8 	udiv	r6, ip, r8
   dc3e8:	fa1f fe87 	uxth.w	lr, r7
   dc3ec:	fb08 c116 	mls	r1, r8, r6, ip
   dc3f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   dc3f4:	fb06 f10e 	mul.w	r1, r6, lr
   dc3f8:	4299      	cmp	r1, r3
   dc3fa:	d909      	bls.n	dc410 <__udivmoddi4+0x60>
   dc3fc:	18fb      	adds	r3, r7, r3
   dc3fe:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
   dc402:	f080 8119 	bcs.w	dc638 <__udivmoddi4+0x288>
   dc406:	4299      	cmp	r1, r3
   dc408:	f240 8116 	bls.w	dc638 <__udivmoddi4+0x288>
   dc40c:	3e02      	subs	r6, #2
   dc40e:	443b      	add	r3, r7
   dc410:	1a5b      	subs	r3, r3, r1
   dc412:	b2a4      	uxth	r4, r4
   dc414:	fbb3 f0f8 	udiv	r0, r3, r8
   dc418:	fb08 3310 	mls	r3, r8, r0, r3
   dc41c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   dc420:	fb00 fe0e 	mul.w	lr, r0, lr
   dc424:	45a6      	cmp	lr, r4
   dc426:	d909      	bls.n	dc43c <__udivmoddi4+0x8c>
   dc428:	193c      	adds	r4, r7, r4
   dc42a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   dc42e:	f080 8105 	bcs.w	dc63c <__udivmoddi4+0x28c>
   dc432:	45a6      	cmp	lr, r4
   dc434:	f240 8102 	bls.w	dc63c <__udivmoddi4+0x28c>
   dc438:	3802      	subs	r0, #2
   dc43a:	443c      	add	r4, r7
   dc43c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
   dc440:	eba4 040e 	sub.w	r4, r4, lr
   dc444:	2600      	movs	r6, #0
   dc446:	b11d      	cbz	r5, dc450 <__udivmoddi4+0xa0>
   dc448:	40d4      	lsrs	r4, r2
   dc44a:	2300      	movs	r3, #0
   dc44c:	e9c5 4300 	strd	r4, r3, [r5]
   dc450:	4631      	mov	r1, r6
   dc452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dc456:	b902      	cbnz	r2, dc45a <__udivmoddi4+0xaa>
   dc458:	deff      	udf	#255	; 0xff
   dc45a:	fab2 f282 	clz	r2, r2
   dc45e:	2a00      	cmp	r2, #0
   dc460:	d150      	bne.n	dc504 <__udivmoddi4+0x154>
   dc462:	1bcb      	subs	r3, r1, r7
   dc464:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   dc468:	fa1f f887 	uxth.w	r8, r7
   dc46c:	2601      	movs	r6, #1
   dc46e:	fbb3 fcfe 	udiv	ip, r3, lr
   dc472:	0c21      	lsrs	r1, r4, #16
   dc474:	fb0e 331c 	mls	r3, lr, ip, r3
   dc478:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   dc47c:	fb08 f30c 	mul.w	r3, r8, ip
   dc480:	428b      	cmp	r3, r1
   dc482:	d907      	bls.n	dc494 <__udivmoddi4+0xe4>
   dc484:	1879      	adds	r1, r7, r1
   dc486:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
   dc48a:	d202      	bcs.n	dc492 <__udivmoddi4+0xe2>
   dc48c:	428b      	cmp	r3, r1
   dc48e:	f200 80e9 	bhi.w	dc664 <__udivmoddi4+0x2b4>
   dc492:	4684      	mov	ip, r0
   dc494:	1ac9      	subs	r1, r1, r3
   dc496:	b2a3      	uxth	r3, r4
   dc498:	fbb1 f0fe 	udiv	r0, r1, lr
   dc49c:	fb0e 1110 	mls	r1, lr, r0, r1
   dc4a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
   dc4a4:	fb08 f800 	mul.w	r8, r8, r0
   dc4a8:	45a0      	cmp	r8, r4
   dc4aa:	d907      	bls.n	dc4bc <__udivmoddi4+0x10c>
   dc4ac:	193c      	adds	r4, r7, r4
   dc4ae:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   dc4b2:	d202      	bcs.n	dc4ba <__udivmoddi4+0x10a>
   dc4b4:	45a0      	cmp	r8, r4
   dc4b6:	f200 80d9 	bhi.w	dc66c <__udivmoddi4+0x2bc>
   dc4ba:	4618      	mov	r0, r3
   dc4bc:	eba4 0408 	sub.w	r4, r4, r8
   dc4c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   dc4c4:	e7bf      	b.n	dc446 <__udivmoddi4+0x96>
   dc4c6:	428b      	cmp	r3, r1
   dc4c8:	d909      	bls.n	dc4de <__udivmoddi4+0x12e>
   dc4ca:	2d00      	cmp	r5, #0
   dc4cc:	f000 80b1 	beq.w	dc632 <__udivmoddi4+0x282>
   dc4d0:	2600      	movs	r6, #0
   dc4d2:	e9c5 0100 	strd	r0, r1, [r5]
   dc4d6:	4630      	mov	r0, r6
   dc4d8:	4631      	mov	r1, r6
   dc4da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dc4de:	fab3 f683 	clz	r6, r3
   dc4e2:	2e00      	cmp	r6, #0
   dc4e4:	d14a      	bne.n	dc57c <__udivmoddi4+0x1cc>
   dc4e6:	428b      	cmp	r3, r1
   dc4e8:	d302      	bcc.n	dc4f0 <__udivmoddi4+0x140>
   dc4ea:	4282      	cmp	r2, r0
   dc4ec:	f200 80b8 	bhi.w	dc660 <__udivmoddi4+0x2b0>
   dc4f0:	1a84      	subs	r4, r0, r2
   dc4f2:	eb61 0103 	sbc.w	r1, r1, r3
   dc4f6:	2001      	movs	r0, #1
   dc4f8:	468c      	mov	ip, r1
   dc4fa:	2d00      	cmp	r5, #0
   dc4fc:	d0a8      	beq.n	dc450 <__udivmoddi4+0xa0>
   dc4fe:	e9c5 4c00 	strd	r4, ip, [r5]
   dc502:	e7a5      	b.n	dc450 <__udivmoddi4+0xa0>
   dc504:	f1c2 0320 	rsb	r3, r2, #32
   dc508:	fa20 f603 	lsr.w	r6, r0, r3
   dc50c:	4097      	lsls	r7, r2
   dc50e:	fa01 f002 	lsl.w	r0, r1, r2
   dc512:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   dc516:	40d9      	lsrs	r1, r3
   dc518:	4330      	orrs	r0, r6
   dc51a:	0c03      	lsrs	r3, r0, #16
   dc51c:	fbb1 f6fe 	udiv	r6, r1, lr
   dc520:	fa1f f887 	uxth.w	r8, r7
   dc524:	fb0e 1116 	mls	r1, lr, r6, r1
   dc528:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   dc52c:	fb06 f108 	mul.w	r1, r6, r8
   dc530:	4299      	cmp	r1, r3
   dc532:	fa04 f402 	lsl.w	r4, r4, r2
   dc536:	d909      	bls.n	dc54c <__udivmoddi4+0x19c>
   dc538:	18fb      	adds	r3, r7, r3
   dc53a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
   dc53e:	f080 808d 	bcs.w	dc65c <__udivmoddi4+0x2ac>
   dc542:	4299      	cmp	r1, r3
   dc544:	f240 808a 	bls.w	dc65c <__udivmoddi4+0x2ac>
   dc548:	3e02      	subs	r6, #2
   dc54a:	443b      	add	r3, r7
   dc54c:	1a5b      	subs	r3, r3, r1
   dc54e:	b281      	uxth	r1, r0
   dc550:	fbb3 f0fe 	udiv	r0, r3, lr
   dc554:	fb0e 3310 	mls	r3, lr, r0, r3
   dc558:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   dc55c:	fb00 f308 	mul.w	r3, r0, r8
   dc560:	428b      	cmp	r3, r1
   dc562:	d907      	bls.n	dc574 <__udivmoddi4+0x1c4>
   dc564:	1879      	adds	r1, r7, r1
   dc566:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
   dc56a:	d273      	bcs.n	dc654 <__udivmoddi4+0x2a4>
   dc56c:	428b      	cmp	r3, r1
   dc56e:	d971      	bls.n	dc654 <__udivmoddi4+0x2a4>
   dc570:	3802      	subs	r0, #2
   dc572:	4439      	add	r1, r7
   dc574:	1acb      	subs	r3, r1, r3
   dc576:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
   dc57a:	e778      	b.n	dc46e <__udivmoddi4+0xbe>
   dc57c:	f1c6 0c20 	rsb	ip, r6, #32
   dc580:	fa03 f406 	lsl.w	r4, r3, r6
   dc584:	fa22 f30c 	lsr.w	r3, r2, ip
   dc588:	431c      	orrs	r4, r3
   dc58a:	fa20 f70c 	lsr.w	r7, r0, ip
   dc58e:	fa01 f306 	lsl.w	r3, r1, r6
   dc592:	ea4f 4e14 	mov.w	lr, r4, lsr #16
   dc596:	fa21 f10c 	lsr.w	r1, r1, ip
   dc59a:	431f      	orrs	r7, r3
   dc59c:	0c3b      	lsrs	r3, r7, #16
   dc59e:	fbb1 f9fe 	udiv	r9, r1, lr
   dc5a2:	fa1f f884 	uxth.w	r8, r4
   dc5a6:	fb0e 1119 	mls	r1, lr, r9, r1
   dc5aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   dc5ae:	fb09 fa08 	mul.w	sl, r9, r8
   dc5b2:	458a      	cmp	sl, r1
   dc5b4:	fa02 f206 	lsl.w	r2, r2, r6
   dc5b8:	fa00 f306 	lsl.w	r3, r0, r6
   dc5bc:	d908      	bls.n	dc5d0 <__udivmoddi4+0x220>
   dc5be:	1861      	adds	r1, r4, r1
   dc5c0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
   dc5c4:	d248      	bcs.n	dc658 <__udivmoddi4+0x2a8>
   dc5c6:	458a      	cmp	sl, r1
   dc5c8:	d946      	bls.n	dc658 <__udivmoddi4+0x2a8>
   dc5ca:	f1a9 0902 	sub.w	r9, r9, #2
   dc5ce:	4421      	add	r1, r4
   dc5d0:	eba1 010a 	sub.w	r1, r1, sl
   dc5d4:	b2bf      	uxth	r7, r7
   dc5d6:	fbb1 f0fe 	udiv	r0, r1, lr
   dc5da:	fb0e 1110 	mls	r1, lr, r0, r1
   dc5de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
   dc5e2:	fb00 f808 	mul.w	r8, r0, r8
   dc5e6:	45b8      	cmp	r8, r7
   dc5e8:	d907      	bls.n	dc5fa <__udivmoddi4+0x24a>
   dc5ea:	19e7      	adds	r7, r4, r7
   dc5ec:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
   dc5f0:	d22e      	bcs.n	dc650 <__udivmoddi4+0x2a0>
   dc5f2:	45b8      	cmp	r8, r7
   dc5f4:	d92c      	bls.n	dc650 <__udivmoddi4+0x2a0>
   dc5f6:	3802      	subs	r0, #2
   dc5f8:	4427      	add	r7, r4
   dc5fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   dc5fe:	eba7 0708 	sub.w	r7, r7, r8
   dc602:	fba0 8902 	umull	r8, r9, r0, r2
   dc606:	454f      	cmp	r7, r9
   dc608:	46c6      	mov	lr, r8
   dc60a:	4649      	mov	r1, r9
   dc60c:	d31a      	bcc.n	dc644 <__udivmoddi4+0x294>
   dc60e:	d017      	beq.n	dc640 <__udivmoddi4+0x290>
   dc610:	b15d      	cbz	r5, dc62a <__udivmoddi4+0x27a>
   dc612:	ebb3 020e 	subs.w	r2, r3, lr
   dc616:	eb67 0701 	sbc.w	r7, r7, r1
   dc61a:	fa07 fc0c 	lsl.w	ip, r7, ip
   dc61e:	40f2      	lsrs	r2, r6
   dc620:	ea4c 0202 	orr.w	r2, ip, r2
   dc624:	40f7      	lsrs	r7, r6
   dc626:	e9c5 2700 	strd	r2, r7, [r5]
   dc62a:	2600      	movs	r6, #0
   dc62c:	4631      	mov	r1, r6
   dc62e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dc632:	462e      	mov	r6, r5
   dc634:	4628      	mov	r0, r5
   dc636:	e70b      	b.n	dc450 <__udivmoddi4+0xa0>
   dc638:	4606      	mov	r6, r0
   dc63a:	e6e9      	b.n	dc410 <__udivmoddi4+0x60>
   dc63c:	4618      	mov	r0, r3
   dc63e:	e6fd      	b.n	dc43c <__udivmoddi4+0x8c>
   dc640:	4543      	cmp	r3, r8
   dc642:	d2e5      	bcs.n	dc610 <__udivmoddi4+0x260>
   dc644:	ebb8 0e02 	subs.w	lr, r8, r2
   dc648:	eb69 0104 	sbc.w	r1, r9, r4
   dc64c:	3801      	subs	r0, #1
   dc64e:	e7df      	b.n	dc610 <__udivmoddi4+0x260>
   dc650:	4608      	mov	r0, r1
   dc652:	e7d2      	b.n	dc5fa <__udivmoddi4+0x24a>
   dc654:	4660      	mov	r0, ip
   dc656:	e78d      	b.n	dc574 <__udivmoddi4+0x1c4>
   dc658:	4681      	mov	r9, r0
   dc65a:	e7b9      	b.n	dc5d0 <__udivmoddi4+0x220>
   dc65c:	4666      	mov	r6, ip
   dc65e:	e775      	b.n	dc54c <__udivmoddi4+0x19c>
   dc660:	4630      	mov	r0, r6
   dc662:	e74a      	b.n	dc4fa <__udivmoddi4+0x14a>
   dc664:	f1ac 0c02 	sub.w	ip, ip, #2
   dc668:	4439      	add	r1, r7
   dc66a:	e713      	b.n	dc494 <__udivmoddi4+0xe4>
   dc66c:	3802      	subs	r0, #2
   dc66e:	443c      	add	r4, r7
   dc670:	e724      	b.n	dc4bc <__udivmoddi4+0x10c>
   dc672:	bf00      	nop

000dc674 <__aeabi_idiv0>:
   dc674:	4770      	bx	lr
   dc676:	bf00      	nop

000dc678 <asctime_r>:
   dc678:	b510      	push	{r4, lr}
   dc67a:	460c      	mov	r4, r1
   dc67c:	6941      	ldr	r1, [r0, #20]
   dc67e:	6903      	ldr	r3, [r0, #16]
   dc680:	6982      	ldr	r2, [r0, #24]
   dc682:	b086      	sub	sp, #24
   dc684:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   dc688:	9104      	str	r1, [sp, #16]
   dc68a:	6801      	ldr	r1, [r0, #0]
   dc68c:	9103      	str	r1, [sp, #12]
   dc68e:	6841      	ldr	r1, [r0, #4]
   dc690:	9102      	str	r1, [sp, #8]
   dc692:	6881      	ldr	r1, [r0, #8]
   dc694:	9101      	str	r1, [sp, #4]
   dc696:	68c1      	ldr	r1, [r0, #12]
   dc698:	9100      	str	r1, [sp, #0]
   dc69a:	4907      	ldr	r1, [pc, #28]	; (dc6b8 <asctime_r+0x40>)
   dc69c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   dc6a0:	440b      	add	r3, r1
   dc6a2:	4906      	ldr	r1, [pc, #24]	; (dc6bc <asctime_r+0x44>)
   dc6a4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   dc6a8:	440a      	add	r2, r1
   dc6aa:	4620      	mov	r0, r4
   dc6ac:	4904      	ldr	r1, [pc, #16]	; (dc6c0 <asctime_r+0x48>)
   dc6ae:	f7fb f969 	bl	d7984 <siprintf>
   dc6b2:	4620      	mov	r0, r4
   dc6b4:	b006      	add	sp, #24
   dc6b6:	bd10      	pop	{r4, pc}
   dc6b8:	000df586 	.word	0x000df586
   dc6bc:	000df571 	.word	0x000df571
   dc6c0:	000df551 	.word	0x000df551

000dc6c4 <atexit>:
   dc6c4:	2300      	movs	r3, #0
   dc6c6:	4601      	mov	r1, r0
   dc6c8:	461a      	mov	r2, r3
   dc6ca:	4618      	mov	r0, r3
   dc6cc:	f001 b814 	b.w	dd6f8 <__register_exitproc>

000dc6d0 <atof>:
   dc6d0:	2100      	movs	r1, #0
   dc6d2:	f000 bf2f 	b.w	dd534 <strtod>
	...

000dc6d8 <gmtime>:
   dc6d8:	b538      	push	{r3, r4, r5, lr}
   dc6da:	4b07      	ldr	r3, [pc, #28]	; (dc6f8 <gmtime+0x20>)
   dc6dc:	681d      	ldr	r5, [r3, #0]
   dc6de:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   dc6e0:	4604      	mov	r4, r0
   dc6e2:	b91b      	cbnz	r3, dc6ec <gmtime+0x14>
   dc6e4:	2024      	movs	r0, #36	; 0x24
   dc6e6:	f7fb f92d 	bl	d7944 <malloc>
   dc6ea:	63e8      	str	r0, [r5, #60]	; 0x3c
   dc6ec:	6be9      	ldr	r1, [r5, #60]	; 0x3c
   dc6ee:	4620      	mov	r0, r4
   dc6f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   dc6f4:	f7fb b98e 	b.w	d7a14 <gmtime_r>
   dc6f8:	2003e120 	.word	0x2003e120

000dc6fc <memcpy>:
   dc6fc:	440a      	add	r2, r1
   dc6fe:	4291      	cmp	r1, r2
   dc700:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   dc704:	d100      	bne.n	dc708 <memcpy+0xc>
   dc706:	4770      	bx	lr
   dc708:	b510      	push	{r4, lr}
   dc70a:	f811 4b01 	ldrb.w	r4, [r1], #1
   dc70e:	f803 4f01 	strb.w	r4, [r3, #1]!
   dc712:	4291      	cmp	r1, r2
   dc714:	d1f9      	bne.n	dc70a <memcpy+0xe>
   dc716:	bd10      	pop	{r4, pc}

000dc718 <memmove>:
   dc718:	4288      	cmp	r0, r1
   dc71a:	b510      	push	{r4, lr}
   dc71c:	eb01 0402 	add.w	r4, r1, r2
   dc720:	d902      	bls.n	dc728 <memmove+0x10>
   dc722:	4284      	cmp	r4, r0
   dc724:	4623      	mov	r3, r4
   dc726:	d807      	bhi.n	dc738 <memmove+0x20>
   dc728:	1e43      	subs	r3, r0, #1
   dc72a:	42a1      	cmp	r1, r4
   dc72c:	d008      	beq.n	dc740 <memmove+0x28>
   dc72e:	f811 2b01 	ldrb.w	r2, [r1], #1
   dc732:	f803 2f01 	strb.w	r2, [r3, #1]!
   dc736:	e7f8      	b.n	dc72a <memmove+0x12>
   dc738:	4402      	add	r2, r0
   dc73a:	4601      	mov	r1, r0
   dc73c:	428a      	cmp	r2, r1
   dc73e:	d100      	bne.n	dc742 <memmove+0x2a>
   dc740:	bd10      	pop	{r4, pc}
   dc742:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   dc746:	f802 4d01 	strb.w	r4, [r2, #-1]!
   dc74a:	e7f7      	b.n	dc73c <memmove+0x24>

000dc74c <memset>:
   dc74c:	4402      	add	r2, r0
   dc74e:	4603      	mov	r3, r0
   dc750:	4293      	cmp	r3, r2
   dc752:	d100      	bne.n	dc756 <memset+0xa>
   dc754:	4770      	bx	lr
   dc756:	f803 1b01 	strb.w	r1, [r3], #1
   dc75a:	e7f9      	b.n	dc750 <memset+0x4>

000dc75c <srand>:
   dc75c:	b538      	push	{r3, r4, r5, lr}
   dc75e:	4b0d      	ldr	r3, [pc, #52]	; (dc794 <srand+0x38>)
   dc760:	681d      	ldr	r5, [r3, #0]
   dc762:	6bab      	ldr	r3, [r5, #56]	; 0x38
   dc764:	4604      	mov	r4, r0
   dc766:	b97b      	cbnz	r3, dc788 <srand+0x2c>
   dc768:	2018      	movs	r0, #24
   dc76a:	f7fb f8eb 	bl	d7944 <malloc>
   dc76e:	4a0a      	ldr	r2, [pc, #40]	; (dc798 <srand+0x3c>)
   dc770:	4b0a      	ldr	r3, [pc, #40]	; (dc79c <srand+0x40>)
   dc772:	63a8      	str	r0, [r5, #56]	; 0x38
   dc774:	e9c0 2300 	strd	r2, r3, [r0]
   dc778:	4b09      	ldr	r3, [pc, #36]	; (dc7a0 <srand+0x44>)
   dc77a:	6083      	str	r3, [r0, #8]
   dc77c:	230b      	movs	r3, #11
   dc77e:	8183      	strh	r3, [r0, #12]
   dc780:	2201      	movs	r2, #1
   dc782:	2300      	movs	r3, #0
   dc784:	e9c0 2304 	strd	r2, r3, [r0, #16]
   dc788:	6bab      	ldr	r3, [r5, #56]	; 0x38
   dc78a:	2200      	movs	r2, #0
   dc78c:	611c      	str	r4, [r3, #16]
   dc78e:	615a      	str	r2, [r3, #20]
   dc790:	bd38      	pop	{r3, r4, r5, pc}
   dc792:	bf00      	nop
   dc794:	2003e120 	.word	0x2003e120
   dc798:	abcd330e 	.word	0xabcd330e
   dc79c:	e66d1234 	.word	0xe66d1234
   dc7a0:	0005deec 	.word	0x0005deec

000dc7a4 <strchr>:
   dc7a4:	b2c9      	uxtb	r1, r1
   dc7a6:	4603      	mov	r3, r0
   dc7a8:	f810 2b01 	ldrb.w	r2, [r0], #1
   dc7ac:	b11a      	cbz	r2, dc7b6 <strchr+0x12>
   dc7ae:	428a      	cmp	r2, r1
   dc7b0:	d1f9      	bne.n	dc7a6 <strchr+0x2>
   dc7b2:	4618      	mov	r0, r3
   dc7b4:	4770      	bx	lr
   dc7b6:	2900      	cmp	r1, #0
   dc7b8:	bf18      	it	ne
   dc7ba:	2300      	movne	r3, #0
   dc7bc:	e7f9      	b.n	dc7b2 <strchr+0xe>

000dc7be <strchrnul>:
   dc7be:	b510      	push	{r4, lr}
   dc7c0:	4604      	mov	r4, r0
   dc7c2:	f7ff ffef 	bl	dc7a4 <strchr>
   dc7c6:	b918      	cbnz	r0, dc7d0 <strchrnul+0x12>
   dc7c8:	4620      	mov	r0, r4
   dc7ca:	f000 f832 	bl	dc832 <strlen>
   dc7ce:	4420      	add	r0, r4
   dc7d0:	bd10      	pop	{r4, pc}

000dc7d2 <strcmp>:
   dc7d2:	f810 2b01 	ldrb.w	r2, [r0], #1
   dc7d6:	f811 3b01 	ldrb.w	r3, [r1], #1
   dc7da:	2a01      	cmp	r2, #1
   dc7dc:	bf28      	it	cs
   dc7de:	429a      	cmpcs	r2, r3
   dc7e0:	d0f7      	beq.n	dc7d2 <strcmp>
   dc7e2:	1ad0      	subs	r0, r2, r3
   dc7e4:	4770      	bx	lr

000dc7e6 <strcpy>:
   dc7e6:	4603      	mov	r3, r0
   dc7e8:	f811 2b01 	ldrb.w	r2, [r1], #1
   dc7ec:	f803 2b01 	strb.w	r2, [r3], #1
   dc7f0:	2a00      	cmp	r2, #0
   dc7f2:	d1f9      	bne.n	dc7e8 <strcpy+0x2>
   dc7f4:	4770      	bx	lr
	...

000dc7f8 <strdup>:
   dc7f8:	4b02      	ldr	r3, [pc, #8]	; (dc804 <strdup+0xc>)
   dc7fa:	4601      	mov	r1, r0
   dc7fc:	6818      	ldr	r0, [r3, #0]
   dc7fe:	f000 b803 	b.w	dc808 <_strdup_r>
   dc802:	bf00      	nop
   dc804:	2003e120 	.word	0x2003e120

000dc808 <_strdup_r>:
   dc808:	b537      	push	{r0, r1, r2, r4, r5, lr}
   dc80a:	4604      	mov	r4, r0
   dc80c:	4608      	mov	r0, r1
   dc80e:	460d      	mov	r5, r1
   dc810:	f000 f80f 	bl	dc832 <strlen>
   dc814:	1c42      	adds	r2, r0, #1
   dc816:	4611      	mov	r1, r2
   dc818:	4620      	mov	r0, r4
   dc81a:	9201      	str	r2, [sp, #4]
   dc81c:	f7fb f8d2 	bl	d79c4 <_malloc_r>
   dc820:	4604      	mov	r4, r0
   dc822:	b118      	cbz	r0, dc82c <_strdup_r+0x24>
   dc824:	9a01      	ldr	r2, [sp, #4]
   dc826:	4629      	mov	r1, r5
   dc828:	f7ff ff68 	bl	dc6fc <memcpy>
   dc82c:	4620      	mov	r0, r4
   dc82e:	b003      	add	sp, #12
   dc830:	bd30      	pop	{r4, r5, pc}

000dc832 <strlen>:
   dc832:	4603      	mov	r3, r0
   dc834:	f813 2b01 	ldrb.w	r2, [r3], #1
   dc838:	2a00      	cmp	r2, #0
   dc83a:	d1fb      	bne.n	dc834 <strlen+0x2>
   dc83c:	1a18      	subs	r0, r3, r0
   dc83e:	3801      	subs	r0, #1
   dc840:	4770      	bx	lr

000dc842 <strncmp>:
   dc842:	b510      	push	{r4, lr}
   dc844:	b16a      	cbz	r2, dc862 <strncmp+0x20>
   dc846:	3901      	subs	r1, #1
   dc848:	1884      	adds	r4, r0, r2
   dc84a:	f810 3b01 	ldrb.w	r3, [r0], #1
   dc84e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   dc852:	4293      	cmp	r3, r2
   dc854:	d103      	bne.n	dc85e <strncmp+0x1c>
   dc856:	42a0      	cmp	r0, r4
   dc858:	d001      	beq.n	dc85e <strncmp+0x1c>
   dc85a:	2b00      	cmp	r3, #0
   dc85c:	d1f5      	bne.n	dc84a <strncmp+0x8>
   dc85e:	1a98      	subs	r0, r3, r2
   dc860:	bd10      	pop	{r4, pc}
   dc862:	4610      	mov	r0, r2
   dc864:	e7fc      	b.n	dc860 <strncmp+0x1e>

000dc866 <strncpy>:
   dc866:	b510      	push	{r4, lr}
   dc868:	3901      	subs	r1, #1
   dc86a:	4603      	mov	r3, r0
   dc86c:	b132      	cbz	r2, dc87c <strncpy+0x16>
   dc86e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   dc872:	f803 4b01 	strb.w	r4, [r3], #1
   dc876:	3a01      	subs	r2, #1
   dc878:	2c00      	cmp	r4, #0
   dc87a:	d1f7      	bne.n	dc86c <strncpy+0x6>
   dc87c:	441a      	add	r2, r3
   dc87e:	2100      	movs	r1, #0
   dc880:	4293      	cmp	r3, r2
   dc882:	d100      	bne.n	dc886 <strncpy+0x20>
   dc884:	bd10      	pop	{r4, pc}
   dc886:	f803 1b01 	strb.w	r1, [r3], #1
   dc88a:	e7f9      	b.n	dc880 <strncpy+0x1a>

000dc88c <strrchr>:
   dc88c:	b538      	push	{r3, r4, r5, lr}
   dc88e:	4603      	mov	r3, r0
   dc890:	460c      	mov	r4, r1
   dc892:	b969      	cbnz	r1, dc8b0 <strrchr+0x24>
   dc894:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   dc898:	f7ff bf84 	b.w	dc7a4 <strchr>
   dc89c:	1c43      	adds	r3, r0, #1
   dc89e:	4605      	mov	r5, r0
   dc8a0:	4621      	mov	r1, r4
   dc8a2:	4618      	mov	r0, r3
   dc8a4:	f7ff ff7e 	bl	dc7a4 <strchr>
   dc8a8:	2800      	cmp	r0, #0
   dc8aa:	d1f7      	bne.n	dc89c <strrchr+0x10>
   dc8ac:	4628      	mov	r0, r5
   dc8ae:	bd38      	pop	{r3, r4, r5, pc}
   dc8b0:	2500      	movs	r5, #0
   dc8b2:	e7f5      	b.n	dc8a0 <strrchr+0x14>

000dc8b4 <strstr>:
   dc8b4:	b5f0      	push	{r4, r5, r6, r7, lr}
   dc8b6:	780c      	ldrb	r4, [r1, #0]
   dc8b8:	b164      	cbz	r4, dc8d4 <strstr+0x20>
   dc8ba:	4603      	mov	r3, r0
   dc8bc:	781a      	ldrb	r2, [r3, #0]
   dc8be:	4618      	mov	r0, r3
   dc8c0:	1c5e      	adds	r6, r3, #1
   dc8c2:	b90a      	cbnz	r2, dc8c8 <strstr+0x14>
   dc8c4:	4610      	mov	r0, r2
   dc8c6:	e005      	b.n	dc8d4 <strstr+0x20>
   dc8c8:	4294      	cmp	r4, r2
   dc8ca:	d108      	bne.n	dc8de <strstr+0x2a>
   dc8cc:	460d      	mov	r5, r1
   dc8ce:	f815 2f01 	ldrb.w	r2, [r5, #1]!
   dc8d2:	b902      	cbnz	r2, dc8d6 <strstr+0x22>
   dc8d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   dc8d6:	f813 7f01 	ldrb.w	r7, [r3, #1]!
   dc8da:	4297      	cmp	r7, r2
   dc8dc:	d0f7      	beq.n	dc8ce <strstr+0x1a>
   dc8de:	4633      	mov	r3, r6
   dc8e0:	e7ec      	b.n	dc8bc <strstr+0x8>

000dc8e2 <sulp>:
   dc8e2:	b570      	push	{r4, r5, r6, lr}
   dc8e4:	4604      	mov	r4, r0
   dc8e6:	460d      	mov	r5, r1
   dc8e8:	ec45 4b10 	vmov	d0, r4, r5
   dc8ec:	4616      	mov	r6, r2
   dc8ee:	f001 fdd5 	bl	de49c <__ulp>
   dc8f2:	ec51 0b10 	vmov	r0, r1, d0
   dc8f6:	b17e      	cbz	r6, dc918 <sulp+0x36>
   dc8f8:	f3c5 530a 	ubfx	r3, r5, #20, #11
   dc8fc:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   dc900:	2b00      	cmp	r3, #0
   dc902:	dd09      	ble.n	dc918 <sulp+0x36>
   dc904:	051b      	lsls	r3, r3, #20
   dc906:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   dc90a:	2400      	movs	r4, #0
   dc90c:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   dc910:	4622      	mov	r2, r4
   dc912:	462b      	mov	r3, r5
   dc914:	f7ff f9d8 	bl	dbcc8 <__aeabi_dmul>
   dc918:	bd70      	pop	{r4, r5, r6, pc}
   dc91a:	0000      	movs	r0, r0
   dc91c:	0000      	movs	r0, r0
	...

000dc920 <_strtod_l>:
   dc920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dc924:	b0a3      	sub	sp, #140	; 0x8c
   dc926:	461f      	mov	r7, r3
   dc928:	2300      	movs	r3, #0
   dc92a:	931e      	str	r3, [sp, #120]	; 0x78
   dc92c:	4ba4      	ldr	r3, [pc, #656]	; (dcbc0 <_strtod_l+0x2a0>)
   dc92e:	9219      	str	r2, [sp, #100]	; 0x64
   dc930:	681b      	ldr	r3, [r3, #0]
   dc932:	9307      	str	r3, [sp, #28]
   dc934:	4604      	mov	r4, r0
   dc936:	4618      	mov	r0, r3
   dc938:	4688      	mov	r8, r1
   dc93a:	f7ff ff7a 	bl	dc832 <strlen>
   dc93e:	f04f 0a00 	mov.w	sl, #0
   dc942:	4605      	mov	r5, r0
   dc944:	f04f 0b00 	mov.w	fp, #0
   dc948:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
   dc94c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   dc94e:	781a      	ldrb	r2, [r3, #0]
   dc950:	2a2b      	cmp	r2, #43	; 0x2b
   dc952:	d04c      	beq.n	dc9ee <_strtod_l+0xce>
   dc954:	d839      	bhi.n	dc9ca <_strtod_l+0xaa>
   dc956:	2a0d      	cmp	r2, #13
   dc958:	d832      	bhi.n	dc9c0 <_strtod_l+0xa0>
   dc95a:	2a08      	cmp	r2, #8
   dc95c:	d832      	bhi.n	dc9c4 <_strtod_l+0xa4>
   dc95e:	2a00      	cmp	r2, #0
   dc960:	d03c      	beq.n	dc9dc <_strtod_l+0xbc>
   dc962:	2300      	movs	r3, #0
   dc964:	930e      	str	r3, [sp, #56]	; 0x38
   dc966:	9e1d      	ldr	r6, [sp, #116]	; 0x74
   dc968:	7833      	ldrb	r3, [r6, #0]
   dc96a:	2b30      	cmp	r3, #48	; 0x30
   dc96c:	f040 80b4 	bne.w	dcad8 <_strtod_l+0x1b8>
   dc970:	7873      	ldrb	r3, [r6, #1]
   dc972:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   dc976:	2b58      	cmp	r3, #88	; 0x58
   dc978:	d16c      	bne.n	dca54 <_strtod_l+0x134>
   dc97a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   dc97c:	9301      	str	r3, [sp, #4]
   dc97e:	ab1e      	add	r3, sp, #120	; 0x78
   dc980:	9702      	str	r7, [sp, #8]
   dc982:	9300      	str	r3, [sp, #0]
   dc984:	4a8f      	ldr	r2, [pc, #572]	; (dcbc4 <_strtod_l+0x2a4>)
   dc986:	ab1f      	add	r3, sp, #124	; 0x7c
   dc988:	a91d      	add	r1, sp, #116	; 0x74
   dc98a:	4620      	mov	r0, r4
   dc98c:	f000 ff7e 	bl	dd88c <__gethex>
   dc990:	f010 0707 	ands.w	r7, r0, #7
   dc994:	4605      	mov	r5, r0
   dc996:	d005      	beq.n	dc9a4 <_strtod_l+0x84>
   dc998:	2f06      	cmp	r7, #6
   dc99a:	d12a      	bne.n	dc9f2 <_strtod_l+0xd2>
   dc99c:	3601      	adds	r6, #1
   dc99e:	2300      	movs	r3, #0
   dc9a0:	961d      	str	r6, [sp, #116]	; 0x74
   dc9a2:	930e      	str	r3, [sp, #56]	; 0x38
   dc9a4:	9b19      	ldr	r3, [sp, #100]	; 0x64
   dc9a6:	2b00      	cmp	r3, #0
   dc9a8:	f040 8596 	bne.w	dd4d8 <_strtod_l+0xbb8>
   dc9ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   dc9ae:	b1db      	cbz	r3, dc9e8 <_strtod_l+0xc8>
   dc9b0:	4652      	mov	r2, sl
   dc9b2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   dc9b6:	ec43 2b10 	vmov	d0, r2, r3
   dc9ba:	b023      	add	sp, #140	; 0x8c
   dc9bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dc9c0:	2a20      	cmp	r2, #32
   dc9c2:	d1ce      	bne.n	dc962 <_strtod_l+0x42>
   dc9c4:	3301      	adds	r3, #1
   dc9c6:	931d      	str	r3, [sp, #116]	; 0x74
   dc9c8:	e7c0      	b.n	dc94c <_strtod_l+0x2c>
   dc9ca:	2a2d      	cmp	r2, #45	; 0x2d
   dc9cc:	d1c9      	bne.n	dc962 <_strtod_l+0x42>
   dc9ce:	2201      	movs	r2, #1
   dc9d0:	920e      	str	r2, [sp, #56]	; 0x38
   dc9d2:	1c5a      	adds	r2, r3, #1
   dc9d4:	921d      	str	r2, [sp, #116]	; 0x74
   dc9d6:	785b      	ldrb	r3, [r3, #1]
   dc9d8:	2b00      	cmp	r3, #0
   dc9da:	d1c4      	bne.n	dc966 <_strtod_l+0x46>
   dc9dc:	9b19      	ldr	r3, [sp, #100]	; 0x64
   dc9de:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
   dc9e2:	2b00      	cmp	r3, #0
   dc9e4:	f040 8576 	bne.w	dd4d4 <_strtod_l+0xbb4>
   dc9e8:	4652      	mov	r2, sl
   dc9ea:	465b      	mov	r3, fp
   dc9ec:	e7e3      	b.n	dc9b6 <_strtod_l+0x96>
   dc9ee:	2200      	movs	r2, #0
   dc9f0:	e7ee      	b.n	dc9d0 <_strtod_l+0xb0>
   dc9f2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   dc9f4:	b13a      	cbz	r2, dca06 <_strtod_l+0xe6>
   dc9f6:	2135      	movs	r1, #53	; 0x35
   dc9f8:	a820      	add	r0, sp, #128	; 0x80
   dc9fa:	f001 fe4e 	bl	de69a <__copybits>
   dc9fe:	991e      	ldr	r1, [sp, #120]	; 0x78
   dca00:	4620      	mov	r0, r4
   dca02:	f001 fa82 	bl	ddf0a <_Bfree>
   dca06:	3f01      	subs	r7, #1
   dca08:	2f05      	cmp	r7, #5
   dca0a:	d807      	bhi.n	dca1c <_strtod_l+0xfc>
   dca0c:	e8df f007 	tbb	[pc, r7]
   dca10:	1d180b0e 	.word	0x1d180b0e
   dca14:	030e      	.short	0x030e
   dca16:	f04f 0b00 	mov.w	fp, #0
   dca1a:	46da      	mov	sl, fp
   dca1c:	0728      	lsls	r0, r5, #28
   dca1e:	d5c1      	bpl.n	dc9a4 <_strtod_l+0x84>
   dca20:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   dca24:	e7be      	b.n	dc9a4 <_strtod_l+0x84>
   dca26:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
   dca2a:	e7f7      	b.n	dca1c <_strtod_l+0xfc>
   dca2c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
   dca30:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   dca32:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   dca36:	f202 4233 	addw	r2, r2, #1075	; 0x433
   dca3a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   dca3e:	e7ed      	b.n	dca1c <_strtod_l+0xfc>
   dca40:	f8df b184 	ldr.w	fp, [pc, #388]	; dcbc8 <_strtod_l+0x2a8>
   dca44:	f04f 0a00 	mov.w	sl, #0
   dca48:	e7e8      	b.n	dca1c <_strtod_l+0xfc>
   dca4a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   dca4e:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   dca52:	e7e3      	b.n	dca1c <_strtod_l+0xfc>
   dca54:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   dca56:	1c5a      	adds	r2, r3, #1
   dca58:	921d      	str	r2, [sp, #116]	; 0x74
   dca5a:	785b      	ldrb	r3, [r3, #1]
   dca5c:	2b30      	cmp	r3, #48	; 0x30
   dca5e:	d0f9      	beq.n	dca54 <_strtod_l+0x134>
   dca60:	2b00      	cmp	r3, #0
   dca62:	d09f      	beq.n	dc9a4 <_strtod_l+0x84>
   dca64:	2301      	movs	r3, #1
   dca66:	f04f 0900 	mov.w	r9, #0
   dca6a:	9304      	str	r3, [sp, #16]
   dca6c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   dca6e:	930a      	str	r3, [sp, #40]	; 0x28
   dca70:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
   dca74:	464f      	mov	r7, r9
   dca76:	220a      	movs	r2, #10
   dca78:	981d      	ldr	r0, [sp, #116]	; 0x74
   dca7a:	7806      	ldrb	r6, [r0, #0]
   dca7c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   dca80:	b2d9      	uxtb	r1, r3
   dca82:	2909      	cmp	r1, #9
   dca84:	d92a      	bls.n	dcadc <_strtod_l+0x1bc>
   dca86:	9907      	ldr	r1, [sp, #28]
   dca88:	462a      	mov	r2, r5
   dca8a:	f7ff feda 	bl	dc842 <strncmp>
   dca8e:	b398      	cbz	r0, dcaf8 <_strtod_l+0x1d8>
   dca90:	2000      	movs	r0, #0
   dca92:	4633      	mov	r3, r6
   dca94:	463d      	mov	r5, r7
   dca96:	9007      	str	r0, [sp, #28]
   dca98:	4602      	mov	r2, r0
   dca9a:	2b65      	cmp	r3, #101	; 0x65
   dca9c:	d001      	beq.n	dcaa2 <_strtod_l+0x182>
   dca9e:	2b45      	cmp	r3, #69	; 0x45
   dcaa0:	d118      	bne.n	dcad4 <_strtod_l+0x1b4>
   dcaa2:	b91d      	cbnz	r5, dcaac <_strtod_l+0x18c>
   dcaa4:	9b04      	ldr	r3, [sp, #16]
   dcaa6:	4303      	orrs	r3, r0
   dcaa8:	d098      	beq.n	dc9dc <_strtod_l+0xbc>
   dcaaa:	2500      	movs	r5, #0
   dcaac:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
   dcab0:	f108 0301 	add.w	r3, r8, #1
   dcab4:	931d      	str	r3, [sp, #116]	; 0x74
   dcab6:	f898 3001 	ldrb.w	r3, [r8, #1]
   dcaba:	2b2b      	cmp	r3, #43	; 0x2b
   dcabc:	d075      	beq.n	dcbaa <_strtod_l+0x28a>
   dcabe:	2b2d      	cmp	r3, #45	; 0x2d
   dcac0:	d07b      	beq.n	dcbba <_strtod_l+0x29a>
   dcac2:	f04f 0c00 	mov.w	ip, #0
   dcac6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   dcaca:	2909      	cmp	r1, #9
   dcacc:	f240 8082 	bls.w	dcbd4 <_strtod_l+0x2b4>
   dcad0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
   dcad4:	2600      	movs	r6, #0
   dcad6:	e09d      	b.n	dcc14 <_strtod_l+0x2f4>
   dcad8:	2300      	movs	r3, #0
   dcada:	e7c4      	b.n	dca66 <_strtod_l+0x146>
   dcadc:	2f08      	cmp	r7, #8
   dcade:	bfd8      	it	le
   dcae0:	9909      	ldrle	r1, [sp, #36]	; 0x24
   dcae2:	f100 0001 	add.w	r0, r0, #1
   dcae6:	bfda      	itte	le
   dcae8:	fb02 3301 	mlale	r3, r2, r1, r3
   dcaec:	9309      	strle	r3, [sp, #36]	; 0x24
   dcaee:	fb02 3909 	mlagt	r9, r2, r9, r3
   dcaf2:	3701      	adds	r7, #1
   dcaf4:	901d      	str	r0, [sp, #116]	; 0x74
   dcaf6:	e7bf      	b.n	dca78 <_strtod_l+0x158>
   dcaf8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   dcafa:	195a      	adds	r2, r3, r5
   dcafc:	921d      	str	r2, [sp, #116]	; 0x74
   dcafe:	5d5b      	ldrb	r3, [r3, r5]
   dcb00:	2f00      	cmp	r7, #0
   dcb02:	d037      	beq.n	dcb74 <_strtod_l+0x254>
   dcb04:	9007      	str	r0, [sp, #28]
   dcb06:	463d      	mov	r5, r7
   dcb08:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   dcb0c:	2a09      	cmp	r2, #9
   dcb0e:	d912      	bls.n	dcb36 <_strtod_l+0x216>
   dcb10:	2201      	movs	r2, #1
   dcb12:	e7c2      	b.n	dca9a <_strtod_l+0x17a>
   dcb14:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   dcb16:	1c5a      	adds	r2, r3, #1
   dcb18:	921d      	str	r2, [sp, #116]	; 0x74
   dcb1a:	785b      	ldrb	r3, [r3, #1]
   dcb1c:	3001      	adds	r0, #1
   dcb1e:	2b30      	cmp	r3, #48	; 0x30
   dcb20:	d0f8      	beq.n	dcb14 <_strtod_l+0x1f4>
   dcb22:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
   dcb26:	2a08      	cmp	r2, #8
   dcb28:	f200 84db 	bhi.w	dd4e2 <_strtod_l+0xbc2>
   dcb2c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   dcb2e:	9007      	str	r0, [sp, #28]
   dcb30:	2000      	movs	r0, #0
   dcb32:	920a      	str	r2, [sp, #40]	; 0x28
   dcb34:	4605      	mov	r5, r0
   dcb36:	3b30      	subs	r3, #48	; 0x30
   dcb38:	f100 0201 	add.w	r2, r0, #1
   dcb3c:	d014      	beq.n	dcb68 <_strtod_l+0x248>
   dcb3e:	9907      	ldr	r1, [sp, #28]
   dcb40:	4411      	add	r1, r2
   dcb42:	9107      	str	r1, [sp, #28]
   dcb44:	462a      	mov	r2, r5
   dcb46:	eb00 0e05 	add.w	lr, r0, r5
   dcb4a:	210a      	movs	r1, #10
   dcb4c:	4572      	cmp	r2, lr
   dcb4e:	d113      	bne.n	dcb78 <_strtod_l+0x258>
   dcb50:	182a      	adds	r2, r5, r0
   dcb52:	2a08      	cmp	r2, #8
   dcb54:	f105 0501 	add.w	r5, r5, #1
   dcb58:	4405      	add	r5, r0
   dcb5a:	dc1c      	bgt.n	dcb96 <_strtod_l+0x276>
   dcb5c:	9909      	ldr	r1, [sp, #36]	; 0x24
   dcb5e:	220a      	movs	r2, #10
   dcb60:	fb02 3301 	mla	r3, r2, r1, r3
   dcb64:	9309      	str	r3, [sp, #36]	; 0x24
   dcb66:	2200      	movs	r2, #0
   dcb68:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   dcb6a:	1c59      	adds	r1, r3, #1
   dcb6c:	911d      	str	r1, [sp, #116]	; 0x74
   dcb6e:	785b      	ldrb	r3, [r3, #1]
   dcb70:	4610      	mov	r0, r2
   dcb72:	e7c9      	b.n	dcb08 <_strtod_l+0x1e8>
   dcb74:	4638      	mov	r0, r7
   dcb76:	e7d2      	b.n	dcb1e <_strtod_l+0x1fe>
   dcb78:	2a08      	cmp	r2, #8
   dcb7a:	dc04      	bgt.n	dcb86 <_strtod_l+0x266>
   dcb7c:	9e09      	ldr	r6, [sp, #36]	; 0x24
   dcb7e:	434e      	muls	r6, r1
   dcb80:	9609      	str	r6, [sp, #36]	; 0x24
   dcb82:	3201      	adds	r2, #1
   dcb84:	e7e2      	b.n	dcb4c <_strtod_l+0x22c>
   dcb86:	f102 0c01 	add.w	ip, r2, #1
   dcb8a:	f1bc 0f10 	cmp.w	ip, #16
   dcb8e:	bfd8      	it	le
   dcb90:	fb01 f909 	mulle.w	r9, r1, r9
   dcb94:	e7f5      	b.n	dcb82 <_strtod_l+0x262>
   dcb96:	2d10      	cmp	r5, #16
   dcb98:	bfdc      	itt	le
   dcb9a:	220a      	movle	r2, #10
   dcb9c:	fb02 3909 	mlale	r9, r2, r9, r3
   dcba0:	e7e1      	b.n	dcb66 <_strtod_l+0x246>
   dcba2:	2300      	movs	r3, #0
   dcba4:	9307      	str	r3, [sp, #28]
   dcba6:	2201      	movs	r2, #1
   dcba8:	e77c      	b.n	dcaa4 <_strtod_l+0x184>
   dcbaa:	f04f 0c00 	mov.w	ip, #0
   dcbae:	f108 0302 	add.w	r3, r8, #2
   dcbb2:	931d      	str	r3, [sp, #116]	; 0x74
   dcbb4:	f898 3002 	ldrb.w	r3, [r8, #2]
   dcbb8:	e785      	b.n	dcac6 <_strtod_l+0x1a6>
   dcbba:	f04f 0c01 	mov.w	ip, #1
   dcbbe:	e7f6      	b.n	dcbae <_strtod_l+0x28e>
   dcbc0:	000df70c 	.word	0x000df70c
   dcbc4:	000df5b8 	.word	0x000df5b8
   dcbc8:	7ff00000 	.word	0x7ff00000
   dcbcc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   dcbce:	1c59      	adds	r1, r3, #1
   dcbd0:	911d      	str	r1, [sp, #116]	; 0x74
   dcbd2:	785b      	ldrb	r3, [r3, #1]
   dcbd4:	2b30      	cmp	r3, #48	; 0x30
   dcbd6:	d0f9      	beq.n	dcbcc <_strtod_l+0x2ac>
   dcbd8:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
   dcbdc:	2908      	cmp	r1, #8
   dcbde:	f63f af79 	bhi.w	dcad4 <_strtod_l+0x1b4>
   dcbe2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
   dcbe6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   dcbe8:	9308      	str	r3, [sp, #32]
   dcbea:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   dcbec:	1c59      	adds	r1, r3, #1
   dcbee:	911d      	str	r1, [sp, #116]	; 0x74
   dcbf0:	785b      	ldrb	r3, [r3, #1]
   dcbf2:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
   dcbf6:	2e09      	cmp	r6, #9
   dcbf8:	d937      	bls.n	dcc6a <_strtod_l+0x34a>
   dcbfa:	9e08      	ldr	r6, [sp, #32]
   dcbfc:	1b89      	subs	r1, r1, r6
   dcbfe:	2908      	cmp	r1, #8
   dcc00:	f644 661f 	movw	r6, #19999	; 0x4e1f
   dcc04:	dc02      	bgt.n	dcc0c <_strtod_l+0x2ec>
   dcc06:	4576      	cmp	r6, lr
   dcc08:	bfa8      	it	ge
   dcc0a:	4676      	movge	r6, lr
   dcc0c:	f1bc 0f00 	cmp.w	ip, #0
   dcc10:	d000      	beq.n	dcc14 <_strtod_l+0x2f4>
   dcc12:	4276      	negs	r6, r6
   dcc14:	2d00      	cmp	r5, #0
   dcc16:	d14f      	bne.n	dccb8 <_strtod_l+0x398>
   dcc18:	9904      	ldr	r1, [sp, #16]
   dcc1a:	4301      	orrs	r1, r0
   dcc1c:	f47f aec2 	bne.w	dc9a4 <_strtod_l+0x84>
   dcc20:	2a00      	cmp	r2, #0
   dcc22:	f47f aedb 	bne.w	dc9dc <_strtod_l+0xbc>
   dcc26:	2b69      	cmp	r3, #105	; 0x69
   dcc28:	d027      	beq.n	dcc7a <_strtod_l+0x35a>
   dcc2a:	dc24      	bgt.n	dcc76 <_strtod_l+0x356>
   dcc2c:	2b49      	cmp	r3, #73	; 0x49
   dcc2e:	d024      	beq.n	dcc7a <_strtod_l+0x35a>
   dcc30:	2b4e      	cmp	r3, #78	; 0x4e
   dcc32:	f47f aed3 	bne.w	dc9dc <_strtod_l+0xbc>
   dcc36:	499e      	ldr	r1, [pc, #632]	; (dceb0 <_strtod_l+0x590>)
   dcc38:	a81d      	add	r0, sp, #116	; 0x74
   dcc3a:	f001 f86d 	bl	ddd18 <__match>
   dcc3e:	2800      	cmp	r0, #0
   dcc40:	f43f aecc 	beq.w	dc9dc <_strtod_l+0xbc>
   dcc44:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   dcc46:	781b      	ldrb	r3, [r3, #0]
   dcc48:	2b28      	cmp	r3, #40	; 0x28
   dcc4a:	d12d      	bne.n	dcca8 <_strtod_l+0x388>
   dcc4c:	4999      	ldr	r1, [pc, #612]	; (dceb4 <_strtod_l+0x594>)
   dcc4e:	aa20      	add	r2, sp, #128	; 0x80
   dcc50:	a81d      	add	r0, sp, #116	; 0x74
   dcc52:	f001 f875 	bl	ddd40 <__hexnan>
   dcc56:	2805      	cmp	r0, #5
   dcc58:	d126      	bne.n	dcca8 <_strtod_l+0x388>
   dcc5a:	9b21      	ldr	r3, [sp, #132]	; 0x84
   dcc5c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
   dcc60:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   dcc64:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   dcc68:	e69c      	b.n	dc9a4 <_strtod_l+0x84>
   dcc6a:	210a      	movs	r1, #10
   dcc6c:	fb01 3e0e 	mla	lr, r1, lr, r3
   dcc70:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   dcc74:	e7b9      	b.n	dcbea <_strtod_l+0x2ca>
   dcc76:	2b6e      	cmp	r3, #110	; 0x6e
   dcc78:	e7db      	b.n	dcc32 <_strtod_l+0x312>
   dcc7a:	498f      	ldr	r1, [pc, #572]	; (dceb8 <_strtod_l+0x598>)
   dcc7c:	a81d      	add	r0, sp, #116	; 0x74
   dcc7e:	f001 f84b 	bl	ddd18 <__match>
   dcc82:	2800      	cmp	r0, #0
   dcc84:	f43f aeaa 	beq.w	dc9dc <_strtod_l+0xbc>
   dcc88:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   dcc8a:	498c      	ldr	r1, [pc, #560]	; (dcebc <_strtod_l+0x59c>)
   dcc8c:	3b01      	subs	r3, #1
   dcc8e:	a81d      	add	r0, sp, #116	; 0x74
   dcc90:	931d      	str	r3, [sp, #116]	; 0x74
   dcc92:	f001 f841 	bl	ddd18 <__match>
   dcc96:	b910      	cbnz	r0, dcc9e <_strtod_l+0x37e>
   dcc98:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   dcc9a:	3301      	adds	r3, #1
   dcc9c:	931d      	str	r3, [sp, #116]	; 0x74
   dcc9e:	f8df b22c 	ldr.w	fp, [pc, #556]	; dcecc <_strtod_l+0x5ac>
   dcca2:	f04f 0a00 	mov.w	sl, #0
   dcca6:	e67d      	b.n	dc9a4 <_strtod_l+0x84>
   dcca8:	4885      	ldr	r0, [pc, #532]	; (dcec0 <_strtod_l+0x5a0>)
   dccaa:	f001 fd49 	bl	de740 <nan>
   dccae:	ed8d 0b04 	vstr	d0, [sp, #16]
   dccb2:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
   dccb6:	e675      	b.n	dc9a4 <_strtod_l+0x84>
   dccb8:	9b07      	ldr	r3, [sp, #28]
   dccba:	9809      	ldr	r0, [sp, #36]	; 0x24
   dccbc:	1af3      	subs	r3, r6, r3
   dccbe:	2f00      	cmp	r7, #0
   dccc0:	bf08      	it	eq
   dccc2:	462f      	moveq	r7, r5
   dccc4:	2d10      	cmp	r5, #16
   dccc6:	9308      	str	r3, [sp, #32]
   dccc8:	46a8      	mov	r8, r5
   dccca:	bfa8      	it	ge
   dcccc:	f04f 0810 	movge.w	r8, #16
   dccd0:	f7fe ff80 	bl	dbbd4 <__aeabi_ui2d>
   dccd4:	2d09      	cmp	r5, #9
   dccd6:	4682      	mov	sl, r0
   dccd8:	468b      	mov	fp, r1
   dccda:	dd13      	ble.n	dcd04 <_strtod_l+0x3e4>
   dccdc:	4b79      	ldr	r3, [pc, #484]	; (dcec4 <_strtod_l+0x5a4>)
   dccde:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   dcce2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   dcce6:	f7fe ffef 	bl	dbcc8 <__aeabi_dmul>
   dccea:	4682      	mov	sl, r0
   dccec:	4648      	mov	r0, r9
   dccee:	468b      	mov	fp, r1
   dccf0:	f7fe ff70 	bl	dbbd4 <__aeabi_ui2d>
   dccf4:	4602      	mov	r2, r0
   dccf6:	460b      	mov	r3, r1
   dccf8:	4650      	mov	r0, sl
   dccfa:	4659      	mov	r1, fp
   dccfc:	f7fe fe2e 	bl	db95c <__adddf3>
   dcd00:	4682      	mov	sl, r0
   dcd02:	468b      	mov	fp, r1
   dcd04:	2d0f      	cmp	r5, #15
   dcd06:	dc38      	bgt.n	dcd7a <_strtod_l+0x45a>
   dcd08:	9b08      	ldr	r3, [sp, #32]
   dcd0a:	2b00      	cmp	r3, #0
   dcd0c:	f43f ae4a 	beq.w	dc9a4 <_strtod_l+0x84>
   dcd10:	dd24      	ble.n	dcd5c <_strtod_l+0x43c>
   dcd12:	2b16      	cmp	r3, #22
   dcd14:	dc0b      	bgt.n	dcd2e <_strtod_l+0x40e>
   dcd16:	4d6b      	ldr	r5, [pc, #428]	; (dcec4 <_strtod_l+0x5a4>)
   dcd18:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
   dcd1c:	e9d5 0100 	ldrd	r0, r1, [r5]
   dcd20:	4652      	mov	r2, sl
   dcd22:	465b      	mov	r3, fp
   dcd24:	f7fe ffd0 	bl	dbcc8 <__aeabi_dmul>
   dcd28:	4682      	mov	sl, r0
   dcd2a:	468b      	mov	fp, r1
   dcd2c:	e63a      	b.n	dc9a4 <_strtod_l+0x84>
   dcd2e:	9a08      	ldr	r2, [sp, #32]
   dcd30:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   dcd34:	4293      	cmp	r3, r2
   dcd36:	db20      	blt.n	dcd7a <_strtod_l+0x45a>
   dcd38:	4c62      	ldr	r4, [pc, #392]	; (dcec4 <_strtod_l+0x5a4>)
   dcd3a:	f1c5 050f 	rsb	r5, r5, #15
   dcd3e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   dcd42:	4652      	mov	r2, sl
   dcd44:	465b      	mov	r3, fp
   dcd46:	e9d1 0100 	ldrd	r0, r1, [r1]
   dcd4a:	f7fe ffbd 	bl	dbcc8 <__aeabi_dmul>
   dcd4e:	9b08      	ldr	r3, [sp, #32]
   dcd50:	1b5d      	subs	r5, r3, r5
   dcd52:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   dcd56:	e9d4 2300 	ldrd	r2, r3, [r4]
   dcd5a:	e7e3      	b.n	dcd24 <_strtod_l+0x404>
   dcd5c:	9b08      	ldr	r3, [sp, #32]
   dcd5e:	3316      	adds	r3, #22
   dcd60:	db0b      	blt.n	dcd7a <_strtod_l+0x45a>
   dcd62:	9b07      	ldr	r3, [sp, #28]
   dcd64:	4a57      	ldr	r2, [pc, #348]	; (dcec4 <_strtod_l+0x5a4>)
   dcd66:	1b9e      	subs	r6, r3, r6
   dcd68:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
   dcd6c:	e9d6 2300 	ldrd	r2, r3, [r6]
   dcd70:	4650      	mov	r0, sl
   dcd72:	4659      	mov	r1, fp
   dcd74:	f7ff f8d2 	bl	dbf1c <__aeabi_ddiv>
   dcd78:	e7d6      	b.n	dcd28 <_strtod_l+0x408>
   dcd7a:	9b08      	ldr	r3, [sp, #32]
   dcd7c:	eba5 0808 	sub.w	r8, r5, r8
   dcd80:	4498      	add	r8, r3
   dcd82:	f1b8 0f00 	cmp.w	r8, #0
   dcd86:	dd71      	ble.n	dce6c <_strtod_l+0x54c>
   dcd88:	f018 030f 	ands.w	r3, r8, #15
   dcd8c:	d00a      	beq.n	dcda4 <_strtod_l+0x484>
   dcd8e:	494d      	ldr	r1, [pc, #308]	; (dcec4 <_strtod_l+0x5a4>)
   dcd90:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   dcd94:	4652      	mov	r2, sl
   dcd96:	465b      	mov	r3, fp
   dcd98:	e9d1 0100 	ldrd	r0, r1, [r1]
   dcd9c:	f7fe ff94 	bl	dbcc8 <__aeabi_dmul>
   dcda0:	4682      	mov	sl, r0
   dcda2:	468b      	mov	fp, r1
   dcda4:	f038 080f 	bics.w	r8, r8, #15
   dcda8:	d04d      	beq.n	dce46 <_strtod_l+0x526>
   dcdaa:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   dcdae:	dd22      	ble.n	dcdf6 <_strtod_l+0x4d6>
   dcdb0:	2500      	movs	r5, #0
   dcdb2:	462e      	mov	r6, r5
   dcdb4:	9509      	str	r5, [sp, #36]	; 0x24
   dcdb6:	9507      	str	r5, [sp, #28]
   dcdb8:	2322      	movs	r3, #34	; 0x22
   dcdba:	f8df b110 	ldr.w	fp, [pc, #272]	; dcecc <_strtod_l+0x5ac>
   dcdbe:	6023      	str	r3, [r4, #0]
   dcdc0:	f04f 0a00 	mov.w	sl, #0
   dcdc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   dcdc6:	2b00      	cmp	r3, #0
   dcdc8:	f43f adec 	beq.w	dc9a4 <_strtod_l+0x84>
   dcdcc:	991e      	ldr	r1, [sp, #120]	; 0x78
   dcdce:	4620      	mov	r0, r4
   dcdd0:	f001 f89b 	bl	ddf0a <_Bfree>
   dcdd4:	9907      	ldr	r1, [sp, #28]
   dcdd6:	4620      	mov	r0, r4
   dcdd8:	f001 f897 	bl	ddf0a <_Bfree>
   dcddc:	4631      	mov	r1, r6
   dcdde:	4620      	mov	r0, r4
   dcde0:	f001 f893 	bl	ddf0a <_Bfree>
   dcde4:	9909      	ldr	r1, [sp, #36]	; 0x24
   dcde6:	4620      	mov	r0, r4
   dcde8:	f001 f88f 	bl	ddf0a <_Bfree>
   dcdec:	4629      	mov	r1, r5
   dcdee:	4620      	mov	r0, r4
   dcdf0:	f001 f88b 	bl	ddf0a <_Bfree>
   dcdf4:	e5d6      	b.n	dc9a4 <_strtod_l+0x84>
   dcdf6:	2300      	movs	r3, #0
   dcdf8:	ea4f 1828 	mov.w	r8, r8, asr #4
   dcdfc:	4650      	mov	r0, sl
   dcdfe:	4659      	mov	r1, fp
   dce00:	4699      	mov	r9, r3
   dce02:	f1b8 0f01 	cmp.w	r8, #1
   dce06:	dc21      	bgt.n	dce4c <_strtod_l+0x52c>
   dce08:	b10b      	cbz	r3, dce0e <_strtod_l+0x4ee>
   dce0a:	4682      	mov	sl, r0
   dce0c:	468b      	mov	fp, r1
   dce0e:	4b2e      	ldr	r3, [pc, #184]	; (dcec8 <_strtod_l+0x5a8>)
   dce10:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   dce14:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   dce18:	4652      	mov	r2, sl
   dce1a:	465b      	mov	r3, fp
   dce1c:	e9d9 0100 	ldrd	r0, r1, [r9]
   dce20:	f7fe ff52 	bl	dbcc8 <__aeabi_dmul>
   dce24:	4b29      	ldr	r3, [pc, #164]	; (dcecc <_strtod_l+0x5ac>)
   dce26:	460a      	mov	r2, r1
   dce28:	400b      	ands	r3, r1
   dce2a:	4929      	ldr	r1, [pc, #164]	; (dced0 <_strtod_l+0x5b0>)
   dce2c:	428b      	cmp	r3, r1
   dce2e:	4682      	mov	sl, r0
   dce30:	d8be      	bhi.n	dcdb0 <_strtod_l+0x490>
   dce32:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   dce36:	428b      	cmp	r3, r1
   dce38:	bf86      	itte	hi
   dce3a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; dced4 <_strtod_l+0x5b4>
   dce3e:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
   dce42:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   dce46:	2300      	movs	r3, #0
   dce48:	9304      	str	r3, [sp, #16]
   dce4a:	e081      	b.n	dcf50 <_strtod_l+0x630>
   dce4c:	f018 0f01 	tst.w	r8, #1
   dce50:	d007      	beq.n	dce62 <_strtod_l+0x542>
   dce52:	4b1d      	ldr	r3, [pc, #116]	; (dcec8 <_strtod_l+0x5a8>)
   dce54:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
   dce58:	e9d3 2300 	ldrd	r2, r3, [r3]
   dce5c:	f7fe ff34 	bl	dbcc8 <__aeabi_dmul>
   dce60:	2301      	movs	r3, #1
   dce62:	f109 0901 	add.w	r9, r9, #1
   dce66:	ea4f 0868 	mov.w	r8, r8, asr #1
   dce6a:	e7ca      	b.n	dce02 <_strtod_l+0x4e2>
   dce6c:	d0eb      	beq.n	dce46 <_strtod_l+0x526>
   dce6e:	f1c8 0800 	rsb	r8, r8, #0
   dce72:	f018 020f 	ands.w	r2, r8, #15
   dce76:	d00a      	beq.n	dce8e <_strtod_l+0x56e>
   dce78:	4b12      	ldr	r3, [pc, #72]	; (dcec4 <_strtod_l+0x5a4>)
   dce7a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   dce7e:	4650      	mov	r0, sl
   dce80:	4659      	mov	r1, fp
   dce82:	e9d3 2300 	ldrd	r2, r3, [r3]
   dce86:	f7ff f849 	bl	dbf1c <__aeabi_ddiv>
   dce8a:	4682      	mov	sl, r0
   dce8c:	468b      	mov	fp, r1
   dce8e:	ea5f 1828 	movs.w	r8, r8, asr #4
   dce92:	d0d8      	beq.n	dce46 <_strtod_l+0x526>
   dce94:	f1b8 0f1f 	cmp.w	r8, #31
   dce98:	dd1e      	ble.n	dced8 <_strtod_l+0x5b8>
   dce9a:	2500      	movs	r5, #0
   dce9c:	462e      	mov	r6, r5
   dce9e:	9509      	str	r5, [sp, #36]	; 0x24
   dcea0:	9507      	str	r5, [sp, #28]
   dcea2:	2322      	movs	r3, #34	; 0x22
   dcea4:	f04f 0a00 	mov.w	sl, #0
   dcea8:	f04f 0b00 	mov.w	fp, #0
   dceac:	6023      	str	r3, [r4, #0]
   dceae:	e789      	b.n	dcdc4 <_strtod_l+0x4a4>
   dceb0:	000df5b3 	.word	0x000df5b3
   dceb4:	000df5cc 	.word	0x000df5cc
   dceb8:	000df5aa 	.word	0x000df5aa
   dcebc:	000df5ad 	.word	0x000df5ad
   dcec0:	000dedf7 	.word	0x000dedf7
   dcec4:	000df748 	.word	0x000df748
   dcec8:	000df720 	.word	0x000df720
   dcecc:	7ff00000 	.word	0x7ff00000
   dced0:	7ca00000 	.word	0x7ca00000
   dced4:	7fefffff 	.word	0x7fefffff
   dced8:	f018 0310 	ands.w	r3, r8, #16
   dcedc:	bf18      	it	ne
   dcede:	236a      	movne	r3, #106	; 0x6a
   dcee0:	f8df 93b4 	ldr.w	r9, [pc, #948]	; dd298 <_strtod_l+0x978>
   dcee4:	9304      	str	r3, [sp, #16]
   dcee6:	4650      	mov	r0, sl
   dcee8:	4659      	mov	r1, fp
   dceea:	2300      	movs	r3, #0
   dceec:	f018 0f01 	tst.w	r8, #1
   dcef0:	d004      	beq.n	dcefc <_strtod_l+0x5dc>
   dcef2:	e9d9 2300 	ldrd	r2, r3, [r9]
   dcef6:	f7fe fee7 	bl	dbcc8 <__aeabi_dmul>
   dcefa:	2301      	movs	r3, #1
   dcefc:	ea5f 0868 	movs.w	r8, r8, asr #1
   dcf00:	f109 0908 	add.w	r9, r9, #8
   dcf04:	d1f2      	bne.n	dceec <_strtod_l+0x5cc>
   dcf06:	b10b      	cbz	r3, dcf0c <_strtod_l+0x5ec>
   dcf08:	4682      	mov	sl, r0
   dcf0a:	468b      	mov	fp, r1
   dcf0c:	9b04      	ldr	r3, [sp, #16]
   dcf0e:	b1bb      	cbz	r3, dcf40 <_strtod_l+0x620>
   dcf10:	f3cb 530a 	ubfx	r3, fp, #20, #11
   dcf14:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   dcf18:	2b00      	cmp	r3, #0
   dcf1a:	4659      	mov	r1, fp
   dcf1c:	dd10      	ble.n	dcf40 <_strtod_l+0x620>
   dcf1e:	2b1f      	cmp	r3, #31
   dcf20:	f340 8128 	ble.w	dd174 <_strtod_l+0x854>
   dcf24:	2b34      	cmp	r3, #52	; 0x34
   dcf26:	bfde      	ittt	le
   dcf28:	3b20      	suble	r3, #32
   dcf2a:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
   dcf2e:	fa02 f303 	lslle.w	r3, r2, r3
   dcf32:	f04f 0a00 	mov.w	sl, #0
   dcf36:	bfcc      	ite	gt
   dcf38:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   dcf3c:	ea03 0b01 	andle.w	fp, r3, r1
   dcf40:	2200      	movs	r2, #0
   dcf42:	2300      	movs	r3, #0
   dcf44:	4650      	mov	r0, sl
   dcf46:	4659      	mov	r1, fp
   dcf48:	f7ff f926 	bl	dc198 <__aeabi_dcmpeq>
   dcf4c:	2800      	cmp	r0, #0
   dcf4e:	d1a4      	bne.n	dce9a <_strtod_l+0x57a>
   dcf50:	9b09      	ldr	r3, [sp, #36]	; 0x24
   dcf52:	9300      	str	r3, [sp, #0]
   dcf54:	990a      	ldr	r1, [sp, #40]	; 0x28
   dcf56:	462b      	mov	r3, r5
   dcf58:	463a      	mov	r2, r7
   dcf5a:	4620      	mov	r0, r4
   dcf5c:	f001 f82a 	bl	ddfb4 <__s2b>
   dcf60:	9009      	str	r0, [sp, #36]	; 0x24
   dcf62:	2800      	cmp	r0, #0
   dcf64:	f43f af24 	beq.w	dcdb0 <_strtod_l+0x490>
   dcf68:	9b07      	ldr	r3, [sp, #28]
   dcf6a:	1b9e      	subs	r6, r3, r6
   dcf6c:	9b08      	ldr	r3, [sp, #32]
   dcf6e:	2b00      	cmp	r3, #0
   dcf70:	bfb4      	ite	lt
   dcf72:	4633      	movlt	r3, r6
   dcf74:	2300      	movge	r3, #0
   dcf76:	9310      	str	r3, [sp, #64]	; 0x40
   dcf78:	9b08      	ldr	r3, [sp, #32]
   dcf7a:	2500      	movs	r5, #0
   dcf7c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   dcf80:	9318      	str	r3, [sp, #96]	; 0x60
   dcf82:	462e      	mov	r6, r5
   dcf84:	9b09      	ldr	r3, [sp, #36]	; 0x24
   dcf86:	4620      	mov	r0, r4
   dcf88:	6859      	ldr	r1, [r3, #4]
   dcf8a:	f000 ff8a 	bl	ddea2 <_Balloc>
   dcf8e:	9007      	str	r0, [sp, #28]
   dcf90:	2800      	cmp	r0, #0
   dcf92:	f43f af11 	beq.w	dcdb8 <_strtod_l+0x498>
   dcf96:	9b09      	ldr	r3, [sp, #36]	; 0x24
   dcf98:	691a      	ldr	r2, [r3, #16]
   dcf9a:	3202      	adds	r2, #2
   dcf9c:	f103 010c 	add.w	r1, r3, #12
   dcfa0:	0092      	lsls	r2, r2, #2
   dcfa2:	300c      	adds	r0, #12
   dcfa4:	f7ff fbaa 	bl	dc6fc <memcpy>
   dcfa8:	ec4b ab10 	vmov	d0, sl, fp
   dcfac:	aa20      	add	r2, sp, #128	; 0x80
   dcfae:	a91f      	add	r1, sp, #124	; 0x7c
   dcfb0:	4620      	mov	r0, r4
   dcfb2:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
   dcfb6:	f001 faed 	bl	de594 <__d2b>
   dcfba:	901e      	str	r0, [sp, #120]	; 0x78
   dcfbc:	2800      	cmp	r0, #0
   dcfbe:	f43f aefb 	beq.w	dcdb8 <_strtod_l+0x498>
   dcfc2:	2101      	movs	r1, #1
   dcfc4:	4620      	mov	r0, r4
   dcfc6:	f001 f883 	bl	de0d0 <__i2b>
   dcfca:	4606      	mov	r6, r0
   dcfcc:	2800      	cmp	r0, #0
   dcfce:	f43f aef3 	beq.w	dcdb8 <_strtod_l+0x498>
   dcfd2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   dcfd4:	9904      	ldr	r1, [sp, #16]
   dcfd6:	2b00      	cmp	r3, #0
   dcfd8:	bfab      	itete	ge
   dcfda:	9a10      	ldrge	r2, [sp, #64]	; 0x40
   dcfdc:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
   dcfde:	9f18      	ldrge	r7, [sp, #96]	; 0x60
   dcfe0:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
   dcfe4:	bfac      	ite	ge
   dcfe6:	eb03 0902 	addge.w	r9, r3, r2
   dcfea:	1ad7      	sublt	r7, r2, r3
   dcfec:	9a20      	ldr	r2, [sp, #128]	; 0x80
   dcfee:	eba3 0801 	sub.w	r8, r3, r1
   dcff2:	4490      	add	r8, r2
   dcff4:	4ba3      	ldr	r3, [pc, #652]	; (dd284 <_strtod_l+0x964>)
   dcff6:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   dcffa:	4598      	cmp	r8, r3
   dcffc:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   dd000:	f280 80cc 	bge.w	dd19c <_strtod_l+0x87c>
   dd004:	eba3 0308 	sub.w	r3, r3, r8
   dd008:	2b1f      	cmp	r3, #31
   dd00a:	eba2 0203 	sub.w	r2, r2, r3
   dd00e:	f04f 0101 	mov.w	r1, #1
   dd012:	f300 80b6 	bgt.w	dd182 <_strtod_l+0x862>
   dd016:	fa01 f303 	lsl.w	r3, r1, r3
   dd01a:	9311      	str	r3, [sp, #68]	; 0x44
   dd01c:	2300      	movs	r3, #0
   dd01e:	930c      	str	r3, [sp, #48]	; 0x30
   dd020:	eb09 0802 	add.w	r8, r9, r2
   dd024:	9b04      	ldr	r3, [sp, #16]
   dd026:	45c1      	cmp	r9, r8
   dd028:	4417      	add	r7, r2
   dd02a:	441f      	add	r7, r3
   dd02c:	464b      	mov	r3, r9
   dd02e:	bfa8      	it	ge
   dd030:	4643      	movge	r3, r8
   dd032:	42bb      	cmp	r3, r7
   dd034:	bfa8      	it	ge
   dd036:	463b      	movge	r3, r7
   dd038:	2b00      	cmp	r3, #0
   dd03a:	bfc2      	ittt	gt
   dd03c:	eba8 0803 	subgt.w	r8, r8, r3
   dd040:	1aff      	subgt	r7, r7, r3
   dd042:	eba9 0903 	subgt.w	r9, r9, r3
   dd046:	9b10      	ldr	r3, [sp, #64]	; 0x40
   dd048:	2b00      	cmp	r3, #0
   dd04a:	dd17      	ble.n	dd07c <_strtod_l+0x75c>
   dd04c:	4631      	mov	r1, r6
   dd04e:	461a      	mov	r2, r3
   dd050:	4620      	mov	r0, r4
   dd052:	f001 f8e3 	bl	de21c <__pow5mult>
   dd056:	4606      	mov	r6, r0
   dd058:	2800      	cmp	r0, #0
   dd05a:	f43f aead 	beq.w	dcdb8 <_strtod_l+0x498>
   dd05e:	4601      	mov	r1, r0
   dd060:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   dd062:	4620      	mov	r0, r4
   dd064:	f001 f83d 	bl	de0e2 <__multiply>
   dd068:	900f      	str	r0, [sp, #60]	; 0x3c
   dd06a:	2800      	cmp	r0, #0
   dd06c:	f43f aea4 	beq.w	dcdb8 <_strtod_l+0x498>
   dd070:	991e      	ldr	r1, [sp, #120]	; 0x78
   dd072:	4620      	mov	r0, r4
   dd074:	f000 ff49 	bl	ddf0a <_Bfree>
   dd078:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   dd07a:	931e      	str	r3, [sp, #120]	; 0x78
   dd07c:	f1b8 0f00 	cmp.w	r8, #0
   dd080:	f300 8091 	bgt.w	dd1a6 <_strtod_l+0x886>
   dd084:	9b08      	ldr	r3, [sp, #32]
   dd086:	2b00      	cmp	r3, #0
   dd088:	dd08      	ble.n	dd09c <_strtod_l+0x77c>
   dd08a:	9a18      	ldr	r2, [sp, #96]	; 0x60
   dd08c:	9907      	ldr	r1, [sp, #28]
   dd08e:	4620      	mov	r0, r4
   dd090:	f001 f8c4 	bl	de21c <__pow5mult>
   dd094:	9007      	str	r0, [sp, #28]
   dd096:	2800      	cmp	r0, #0
   dd098:	f43f ae8e 	beq.w	dcdb8 <_strtod_l+0x498>
   dd09c:	2f00      	cmp	r7, #0
   dd09e:	dd08      	ble.n	dd0b2 <_strtod_l+0x792>
   dd0a0:	9907      	ldr	r1, [sp, #28]
   dd0a2:	463a      	mov	r2, r7
   dd0a4:	4620      	mov	r0, r4
   dd0a6:	f001 f907 	bl	de2b8 <__lshift>
   dd0aa:	9007      	str	r0, [sp, #28]
   dd0ac:	2800      	cmp	r0, #0
   dd0ae:	f43f ae83 	beq.w	dcdb8 <_strtod_l+0x498>
   dd0b2:	f1b9 0f00 	cmp.w	r9, #0
   dd0b6:	dd08      	ble.n	dd0ca <_strtod_l+0x7aa>
   dd0b8:	4631      	mov	r1, r6
   dd0ba:	464a      	mov	r2, r9
   dd0bc:	4620      	mov	r0, r4
   dd0be:	f001 f8fb 	bl	de2b8 <__lshift>
   dd0c2:	4606      	mov	r6, r0
   dd0c4:	2800      	cmp	r0, #0
   dd0c6:	f43f ae77 	beq.w	dcdb8 <_strtod_l+0x498>
   dd0ca:	9a07      	ldr	r2, [sp, #28]
   dd0cc:	991e      	ldr	r1, [sp, #120]	; 0x78
   dd0ce:	4620      	mov	r0, r4
   dd0d0:	f001 f96d 	bl	de3ae <__mdiff>
   dd0d4:	4605      	mov	r5, r0
   dd0d6:	2800      	cmp	r0, #0
   dd0d8:	f43f ae6e 	beq.w	dcdb8 <_strtod_l+0x498>
   dd0dc:	68c3      	ldr	r3, [r0, #12]
   dd0de:	930f      	str	r3, [sp, #60]	; 0x3c
   dd0e0:	2300      	movs	r3, #0
   dd0e2:	60c3      	str	r3, [r0, #12]
   dd0e4:	4631      	mov	r1, r6
   dd0e6:	f001 f946 	bl	de376 <__mcmp>
   dd0ea:	2800      	cmp	r0, #0
   dd0ec:	da65      	bge.n	dd1ba <_strtod_l+0x89a>
   dd0ee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   dd0f0:	ea53 030a 	orrs.w	r3, r3, sl
   dd0f4:	f040 8087 	bne.w	dd206 <_strtod_l+0x8e6>
   dd0f8:	f3cb 0313 	ubfx	r3, fp, #0, #20
   dd0fc:	2b00      	cmp	r3, #0
   dd0fe:	f040 8082 	bne.w	dd206 <_strtod_l+0x8e6>
   dd102:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   dd106:	0d1b      	lsrs	r3, r3, #20
   dd108:	051b      	lsls	r3, r3, #20
   dd10a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   dd10e:	d97a      	bls.n	dd206 <_strtod_l+0x8e6>
   dd110:	696b      	ldr	r3, [r5, #20]
   dd112:	b913      	cbnz	r3, dd11a <_strtod_l+0x7fa>
   dd114:	692b      	ldr	r3, [r5, #16]
   dd116:	2b01      	cmp	r3, #1
   dd118:	dd75      	ble.n	dd206 <_strtod_l+0x8e6>
   dd11a:	4629      	mov	r1, r5
   dd11c:	2201      	movs	r2, #1
   dd11e:	4620      	mov	r0, r4
   dd120:	f001 f8ca 	bl	de2b8 <__lshift>
   dd124:	4631      	mov	r1, r6
   dd126:	4605      	mov	r5, r0
   dd128:	f001 f925 	bl	de376 <__mcmp>
   dd12c:	2800      	cmp	r0, #0
   dd12e:	dd6a      	ble.n	dd206 <_strtod_l+0x8e6>
   dd130:	9904      	ldr	r1, [sp, #16]
   dd132:	4a55      	ldr	r2, [pc, #340]	; (dd288 <_strtod_l+0x968>)
   dd134:	465b      	mov	r3, fp
   dd136:	2900      	cmp	r1, #0
   dd138:	f000 8085 	beq.w	dd246 <_strtod_l+0x926>
   dd13c:	ea02 010b 	and.w	r1, r2, fp
   dd140:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   dd144:	dc7f      	bgt.n	dd246 <_strtod_l+0x926>
   dd146:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   dd14a:	f77f aeaa 	ble.w	dcea2 <_strtod_l+0x582>
   dd14e:	4a4f      	ldr	r2, [pc, #316]	; (dd28c <_strtod_l+0x96c>)
   dd150:	2300      	movs	r3, #0
   dd152:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
   dd156:	4650      	mov	r0, sl
   dd158:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
   dd15c:	4659      	mov	r1, fp
   dd15e:	f7fe fdb3 	bl	dbcc8 <__aeabi_dmul>
   dd162:	460b      	mov	r3, r1
   dd164:	4303      	orrs	r3, r0
   dd166:	bf08      	it	eq
   dd168:	2322      	moveq	r3, #34	; 0x22
   dd16a:	4682      	mov	sl, r0
   dd16c:	468b      	mov	fp, r1
   dd16e:	bf08      	it	eq
   dd170:	6023      	streq	r3, [r4, #0]
   dd172:	e62b      	b.n	dcdcc <_strtod_l+0x4ac>
   dd174:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   dd178:	fa02 f303 	lsl.w	r3, r2, r3
   dd17c:	ea03 0a0a 	and.w	sl, r3, sl
   dd180:	e6de      	b.n	dcf40 <_strtod_l+0x620>
   dd182:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
   dd186:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
   dd18a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
   dd18e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
   dd192:	fa01 f308 	lsl.w	r3, r1, r8
   dd196:	930c      	str	r3, [sp, #48]	; 0x30
   dd198:	9111      	str	r1, [sp, #68]	; 0x44
   dd19a:	e741      	b.n	dd020 <_strtod_l+0x700>
   dd19c:	2300      	movs	r3, #0
   dd19e:	930c      	str	r3, [sp, #48]	; 0x30
   dd1a0:	2301      	movs	r3, #1
   dd1a2:	9311      	str	r3, [sp, #68]	; 0x44
   dd1a4:	e73c      	b.n	dd020 <_strtod_l+0x700>
   dd1a6:	991e      	ldr	r1, [sp, #120]	; 0x78
   dd1a8:	4642      	mov	r2, r8
   dd1aa:	4620      	mov	r0, r4
   dd1ac:	f001 f884 	bl	de2b8 <__lshift>
   dd1b0:	901e      	str	r0, [sp, #120]	; 0x78
   dd1b2:	2800      	cmp	r0, #0
   dd1b4:	f47f af66 	bne.w	dd084 <_strtod_l+0x764>
   dd1b8:	e5fe      	b.n	dcdb8 <_strtod_l+0x498>
   dd1ba:	465f      	mov	r7, fp
   dd1bc:	d16e      	bne.n	dd29c <_strtod_l+0x97c>
   dd1be:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   dd1c0:	f3cb 0313 	ubfx	r3, fp, #0, #20
   dd1c4:	b342      	cbz	r2, dd218 <_strtod_l+0x8f8>
   dd1c6:	4a32      	ldr	r2, [pc, #200]	; (dd290 <_strtod_l+0x970>)
   dd1c8:	4293      	cmp	r3, r2
   dd1ca:	d128      	bne.n	dd21e <_strtod_l+0x8fe>
   dd1cc:	9b04      	ldr	r3, [sp, #16]
   dd1ce:	4650      	mov	r0, sl
   dd1d0:	b1eb      	cbz	r3, dd20e <_strtod_l+0x8ee>
   dd1d2:	4a2d      	ldr	r2, [pc, #180]	; (dd288 <_strtod_l+0x968>)
   dd1d4:	403a      	ands	r2, r7
   dd1d6:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
   dd1da:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   dd1de:	d819      	bhi.n	dd214 <_strtod_l+0x8f4>
   dd1e0:	0d12      	lsrs	r2, r2, #20
   dd1e2:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   dd1e6:	fa01 f303 	lsl.w	r3, r1, r3
   dd1ea:	4298      	cmp	r0, r3
   dd1ec:	d117      	bne.n	dd21e <_strtod_l+0x8fe>
   dd1ee:	4b29      	ldr	r3, [pc, #164]	; (dd294 <_strtod_l+0x974>)
   dd1f0:	429f      	cmp	r7, r3
   dd1f2:	d102      	bne.n	dd1fa <_strtod_l+0x8da>
   dd1f4:	3001      	adds	r0, #1
   dd1f6:	f43f addf 	beq.w	dcdb8 <_strtod_l+0x498>
   dd1fa:	4b23      	ldr	r3, [pc, #140]	; (dd288 <_strtod_l+0x968>)
   dd1fc:	403b      	ands	r3, r7
   dd1fe:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   dd202:	f04f 0a00 	mov.w	sl, #0
   dd206:	9b04      	ldr	r3, [sp, #16]
   dd208:	2b00      	cmp	r3, #0
   dd20a:	d1a0      	bne.n	dd14e <_strtod_l+0x82e>
   dd20c:	e5de      	b.n	dcdcc <_strtod_l+0x4ac>
   dd20e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   dd212:	e7ea      	b.n	dd1ea <_strtod_l+0x8ca>
   dd214:	460b      	mov	r3, r1
   dd216:	e7e8      	b.n	dd1ea <_strtod_l+0x8ca>
   dd218:	ea53 030a 	orrs.w	r3, r3, sl
   dd21c:	d088      	beq.n	dd130 <_strtod_l+0x810>
   dd21e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   dd220:	b1db      	cbz	r3, dd25a <_strtod_l+0x93a>
   dd222:	423b      	tst	r3, r7
   dd224:	d0ef      	beq.n	dd206 <_strtod_l+0x8e6>
   dd226:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   dd228:	9a04      	ldr	r2, [sp, #16]
   dd22a:	4650      	mov	r0, sl
   dd22c:	4659      	mov	r1, fp
   dd22e:	b1c3      	cbz	r3, dd262 <_strtod_l+0x942>
   dd230:	f7ff fb57 	bl	dc8e2 <sulp>
   dd234:	4602      	mov	r2, r0
   dd236:	460b      	mov	r3, r1
   dd238:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   dd23c:	f7fe fb8e 	bl	db95c <__adddf3>
   dd240:	4682      	mov	sl, r0
   dd242:	468b      	mov	fp, r1
   dd244:	e7df      	b.n	dd206 <_strtod_l+0x8e6>
   dd246:	4013      	ands	r3, r2
   dd248:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   dd24c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   dd250:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   dd254:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   dd258:	e7d5      	b.n	dd206 <_strtod_l+0x8e6>
   dd25a:	9b11      	ldr	r3, [sp, #68]	; 0x44
   dd25c:	ea13 0f0a 	tst.w	r3, sl
   dd260:	e7e0      	b.n	dd224 <_strtod_l+0x904>
   dd262:	f7ff fb3e 	bl	dc8e2 <sulp>
   dd266:	4602      	mov	r2, r0
   dd268:	460b      	mov	r3, r1
   dd26a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   dd26e:	f7fe fb73 	bl	db958 <__aeabi_dsub>
   dd272:	2200      	movs	r2, #0
   dd274:	2300      	movs	r3, #0
   dd276:	4682      	mov	sl, r0
   dd278:	468b      	mov	fp, r1
   dd27a:	f7fe ff8d 	bl	dc198 <__aeabi_dcmpeq>
   dd27e:	2800      	cmp	r0, #0
   dd280:	d0c1      	beq.n	dd206 <_strtod_l+0x8e6>
   dd282:	e60e      	b.n	dcea2 <_strtod_l+0x582>
   dd284:	fffffc02 	.word	0xfffffc02
   dd288:	7ff00000 	.word	0x7ff00000
   dd28c:	39500000 	.word	0x39500000
   dd290:	000fffff 	.word	0x000fffff
   dd294:	7fefffff 	.word	0x7fefffff
   dd298:	000df5e0 	.word	0x000df5e0
   dd29c:	4631      	mov	r1, r6
   dd29e:	4628      	mov	r0, r5
   dd2a0:	f001 f9c8 	bl	de634 <__ratio>
   dd2a4:	ec59 8b10 	vmov	r8, r9, d0
   dd2a8:	ee10 0a10 	vmov	r0, s0
   dd2ac:	2200      	movs	r2, #0
   dd2ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   dd2b2:	4649      	mov	r1, r9
   dd2b4:	f7fe ff84 	bl	dc1c0 <__aeabi_dcmple>
   dd2b8:	2800      	cmp	r0, #0
   dd2ba:	d07c      	beq.n	dd3b6 <_strtod_l+0xa96>
   dd2bc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   dd2be:	2b00      	cmp	r3, #0
   dd2c0:	d04c      	beq.n	dd35c <_strtod_l+0xa3c>
   dd2c2:	4b95      	ldr	r3, [pc, #596]	; (dd518 <_strtod_l+0xbf8>)
   dd2c4:	2200      	movs	r2, #0
   dd2c6:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   dd2ca:	f8df 924c 	ldr.w	r9, [pc, #588]	; dd518 <_strtod_l+0xbf8>
   dd2ce:	f04f 0800 	mov.w	r8, #0
   dd2d2:	4b92      	ldr	r3, [pc, #584]	; (dd51c <_strtod_l+0xbfc>)
   dd2d4:	403b      	ands	r3, r7
   dd2d6:	9311      	str	r3, [sp, #68]	; 0x44
   dd2d8:	9a11      	ldr	r2, [sp, #68]	; 0x44
   dd2da:	4b91      	ldr	r3, [pc, #580]	; (dd520 <_strtod_l+0xc00>)
   dd2dc:	429a      	cmp	r2, r3
   dd2de:	f040 80b2 	bne.w	dd446 <_strtod_l+0xb26>
   dd2e2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   dd2e6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   dd2ea:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
   dd2ee:	ec4b ab10 	vmov	d0, sl, fp
   dd2f2:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
   dd2f6:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   dd2fa:	f001 f8cf 	bl	de49c <__ulp>
   dd2fe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   dd302:	ec53 2b10 	vmov	r2, r3, d0
   dd306:	f7fe fcdf 	bl	dbcc8 <__aeabi_dmul>
   dd30a:	4652      	mov	r2, sl
   dd30c:	465b      	mov	r3, fp
   dd30e:	f7fe fb25 	bl	db95c <__adddf3>
   dd312:	460b      	mov	r3, r1
   dd314:	4981      	ldr	r1, [pc, #516]	; (dd51c <_strtod_l+0xbfc>)
   dd316:	4a83      	ldr	r2, [pc, #524]	; (dd524 <_strtod_l+0xc04>)
   dd318:	4019      	ands	r1, r3
   dd31a:	4291      	cmp	r1, r2
   dd31c:	4682      	mov	sl, r0
   dd31e:	d95e      	bls.n	dd3de <_strtod_l+0xabe>
   dd320:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   dd322:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   dd326:	4293      	cmp	r3, r2
   dd328:	d103      	bne.n	dd332 <_strtod_l+0xa12>
   dd32a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   dd32c:	3301      	adds	r3, #1
   dd32e:	f43f ad43 	beq.w	dcdb8 <_strtod_l+0x498>
   dd332:	f8df b1fc 	ldr.w	fp, [pc, #508]	; dd530 <_strtod_l+0xc10>
   dd336:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   dd33a:	991e      	ldr	r1, [sp, #120]	; 0x78
   dd33c:	4620      	mov	r0, r4
   dd33e:	f000 fde4 	bl	ddf0a <_Bfree>
   dd342:	9907      	ldr	r1, [sp, #28]
   dd344:	4620      	mov	r0, r4
   dd346:	f000 fde0 	bl	ddf0a <_Bfree>
   dd34a:	4631      	mov	r1, r6
   dd34c:	4620      	mov	r0, r4
   dd34e:	f000 fddc 	bl	ddf0a <_Bfree>
   dd352:	4629      	mov	r1, r5
   dd354:	4620      	mov	r0, r4
   dd356:	f000 fdd8 	bl	ddf0a <_Bfree>
   dd35a:	e613      	b.n	dcf84 <_strtod_l+0x664>
   dd35c:	f1ba 0f00 	cmp.w	sl, #0
   dd360:	d11b      	bne.n	dd39a <_strtod_l+0xa7a>
   dd362:	f3cb 0313 	ubfx	r3, fp, #0, #20
   dd366:	b9f3      	cbnz	r3, dd3a6 <_strtod_l+0xa86>
   dd368:	4b6b      	ldr	r3, [pc, #428]	; (dd518 <_strtod_l+0xbf8>)
   dd36a:	2200      	movs	r2, #0
   dd36c:	4640      	mov	r0, r8
   dd36e:	4649      	mov	r1, r9
   dd370:	f7fe ff1c 	bl	dc1ac <__aeabi_dcmplt>
   dd374:	b9d0      	cbnz	r0, dd3ac <_strtod_l+0xa8c>
   dd376:	4640      	mov	r0, r8
   dd378:	4649      	mov	r1, r9
   dd37a:	4b6b      	ldr	r3, [pc, #428]	; (dd528 <_strtod_l+0xc08>)
   dd37c:	2200      	movs	r2, #0
   dd37e:	f7fe fca3 	bl	dbcc8 <__aeabi_dmul>
   dd382:	4680      	mov	r8, r0
   dd384:	4689      	mov	r9, r1
   dd386:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   dd38a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
   dd38e:	931b      	str	r3, [sp, #108]	; 0x6c
   dd390:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
   dd394:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   dd398:	e79b      	b.n	dd2d2 <_strtod_l+0x9b2>
   dd39a:	f1ba 0f01 	cmp.w	sl, #1
   dd39e:	d102      	bne.n	dd3a6 <_strtod_l+0xa86>
   dd3a0:	2f00      	cmp	r7, #0
   dd3a2:	f43f ad7e 	beq.w	dcea2 <_strtod_l+0x582>
   dd3a6:	4b61      	ldr	r3, [pc, #388]	; (dd52c <_strtod_l+0xc0c>)
   dd3a8:	2200      	movs	r2, #0
   dd3aa:	e78c      	b.n	dd2c6 <_strtod_l+0x9a6>
   dd3ac:	f8df 9178 	ldr.w	r9, [pc, #376]	; dd528 <_strtod_l+0xc08>
   dd3b0:	f04f 0800 	mov.w	r8, #0
   dd3b4:	e7e7      	b.n	dd386 <_strtod_l+0xa66>
   dd3b6:	4b5c      	ldr	r3, [pc, #368]	; (dd528 <_strtod_l+0xc08>)
   dd3b8:	4640      	mov	r0, r8
   dd3ba:	4649      	mov	r1, r9
   dd3bc:	2200      	movs	r2, #0
   dd3be:	f7fe fc83 	bl	dbcc8 <__aeabi_dmul>
   dd3c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   dd3c4:	4680      	mov	r8, r0
   dd3c6:	4689      	mov	r9, r1
   dd3c8:	b933      	cbnz	r3, dd3d8 <_strtod_l+0xab8>
   dd3ca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   dd3ce:	9012      	str	r0, [sp, #72]	; 0x48
   dd3d0:	9313      	str	r3, [sp, #76]	; 0x4c
   dd3d2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
   dd3d6:	e7dd      	b.n	dd394 <_strtod_l+0xa74>
   dd3d8:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
   dd3dc:	e7f9      	b.n	dd3d2 <_strtod_l+0xab2>
   dd3de:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   dd3e2:	9b04      	ldr	r3, [sp, #16]
   dd3e4:	2b00      	cmp	r3, #0
   dd3e6:	d1a8      	bne.n	dd33a <_strtod_l+0xa1a>
   dd3e8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   dd3ec:	9a11      	ldr	r2, [sp, #68]	; 0x44
   dd3ee:	0d1b      	lsrs	r3, r3, #20
   dd3f0:	051b      	lsls	r3, r3, #20
   dd3f2:	429a      	cmp	r2, r3
   dd3f4:	d1a1      	bne.n	dd33a <_strtod_l+0xa1a>
   dd3f6:	4640      	mov	r0, r8
   dd3f8:	4649      	mov	r1, r9
   dd3fa:	f001 f9b7 	bl	de76c <__aeabi_d2lz>
   dd3fe:	f7fe fc35 	bl	dbc6c <__aeabi_l2d>
   dd402:	4602      	mov	r2, r0
   dd404:	460b      	mov	r3, r1
   dd406:	4640      	mov	r0, r8
   dd408:	4649      	mov	r1, r9
   dd40a:	f7fe faa5 	bl	db958 <__aeabi_dsub>
   dd40e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   dd410:	f3cb 0313 	ubfx	r3, fp, #0, #20
   dd414:	ea43 030a 	orr.w	r3, r3, sl
   dd418:	4313      	orrs	r3, r2
   dd41a:	4680      	mov	r8, r0
   dd41c:	4689      	mov	r9, r1
   dd41e:	d053      	beq.n	dd4c8 <_strtod_l+0xba8>
   dd420:	a335      	add	r3, pc, #212	; (adr r3, dd4f8 <_strtod_l+0xbd8>)
   dd422:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd426:	f7fe fec1 	bl	dc1ac <__aeabi_dcmplt>
   dd42a:	2800      	cmp	r0, #0
   dd42c:	f47f acce 	bne.w	dcdcc <_strtod_l+0x4ac>
   dd430:	a333      	add	r3, pc, #204	; (adr r3, dd500 <_strtod_l+0xbe0>)
   dd432:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd436:	4640      	mov	r0, r8
   dd438:	4649      	mov	r1, r9
   dd43a:	f7fe fed5 	bl	dc1e8 <__aeabi_dcmpgt>
   dd43e:	2800      	cmp	r0, #0
   dd440:	f43f af7b 	beq.w	dd33a <_strtod_l+0xa1a>
   dd444:	e4c2      	b.n	dcdcc <_strtod_l+0x4ac>
   dd446:	9b04      	ldr	r3, [sp, #16]
   dd448:	b333      	cbz	r3, dd498 <_strtod_l+0xb78>
   dd44a:	9b11      	ldr	r3, [sp, #68]	; 0x44
   dd44c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   dd450:	d822      	bhi.n	dd498 <_strtod_l+0xb78>
   dd452:	a32d      	add	r3, pc, #180	; (adr r3, dd508 <_strtod_l+0xbe8>)
   dd454:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd458:	4640      	mov	r0, r8
   dd45a:	4649      	mov	r1, r9
   dd45c:	f7fe feb0 	bl	dc1c0 <__aeabi_dcmple>
   dd460:	b1a0      	cbz	r0, dd48c <_strtod_l+0xb6c>
   dd462:	4649      	mov	r1, r9
   dd464:	4640      	mov	r0, r8
   dd466:	f7fe fec9 	bl	dc1fc <__aeabi_d2uiz>
   dd46a:	2801      	cmp	r0, #1
   dd46c:	bf38      	it	cc
   dd46e:	2001      	movcc	r0, #1
   dd470:	f7fe fbb0 	bl	dbbd4 <__aeabi_ui2d>
   dd474:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   dd476:	4680      	mov	r8, r0
   dd478:	4689      	mov	r9, r1
   dd47a:	bb13      	cbnz	r3, dd4c2 <_strtod_l+0xba2>
   dd47c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   dd480:	9014      	str	r0, [sp, #80]	; 0x50
   dd482:	9315      	str	r3, [sp, #84]	; 0x54
   dd484:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   dd488:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   dd48c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   dd48e:	9a11      	ldr	r2, [sp, #68]	; 0x44
   dd490:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   dd494:	1a9b      	subs	r3, r3, r2
   dd496:	930d      	str	r3, [sp, #52]	; 0x34
   dd498:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   dd49c:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
   dd4a0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   dd4a4:	f000 fffa 	bl	de49c <__ulp>
   dd4a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   dd4ac:	ec53 2b10 	vmov	r2, r3, d0
   dd4b0:	f7fe fc0a 	bl	dbcc8 <__aeabi_dmul>
   dd4b4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   dd4b8:	f7fe fa50 	bl	db95c <__adddf3>
   dd4bc:	4682      	mov	sl, r0
   dd4be:	468b      	mov	fp, r1
   dd4c0:	e78f      	b.n	dd3e2 <_strtod_l+0xac2>
   dd4c2:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
   dd4c6:	e7dd      	b.n	dd484 <_strtod_l+0xb64>
   dd4c8:	a311      	add	r3, pc, #68	; (adr r3, dd510 <_strtod_l+0xbf0>)
   dd4ca:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd4ce:	f7fe fe6d 	bl	dc1ac <__aeabi_dcmplt>
   dd4d2:	e7b4      	b.n	dd43e <_strtod_l+0xb1e>
   dd4d4:	2300      	movs	r3, #0
   dd4d6:	930e      	str	r3, [sp, #56]	; 0x38
   dd4d8:	9a19      	ldr	r2, [sp, #100]	; 0x64
   dd4da:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   dd4dc:	6013      	str	r3, [r2, #0]
   dd4de:	f7ff ba65 	b.w	dc9ac <_strtod_l+0x8c>
   dd4e2:	2b65      	cmp	r3, #101	; 0x65
   dd4e4:	f43f ab5d 	beq.w	dcba2 <_strtod_l+0x282>
   dd4e8:	2b45      	cmp	r3, #69	; 0x45
   dd4ea:	f43f ab5a 	beq.w	dcba2 <_strtod_l+0x282>
   dd4ee:	2201      	movs	r2, #1
   dd4f0:	f7ff bb92 	b.w	dcc18 <_strtod_l+0x2f8>
   dd4f4:	f3af 8000 	nop.w
   dd4f8:	94a03595 	.word	0x94a03595
   dd4fc:	3fdfffff 	.word	0x3fdfffff
   dd500:	35afe535 	.word	0x35afe535
   dd504:	3fe00000 	.word	0x3fe00000
   dd508:	ffc00000 	.word	0xffc00000
   dd50c:	41dfffff 	.word	0x41dfffff
   dd510:	94a03595 	.word	0x94a03595
   dd514:	3fcfffff 	.word	0x3fcfffff
   dd518:	3ff00000 	.word	0x3ff00000
   dd51c:	7ff00000 	.word	0x7ff00000
   dd520:	7fe00000 	.word	0x7fe00000
   dd524:	7c9fffff 	.word	0x7c9fffff
   dd528:	3fe00000 	.word	0x3fe00000
   dd52c:	bff00000 	.word	0xbff00000
   dd530:	7fefffff 	.word	0x7fefffff

000dd534 <strtod>:
   dd534:	460a      	mov	r2, r1
   dd536:	4601      	mov	r1, r0
   dd538:	4802      	ldr	r0, [pc, #8]	; (dd544 <strtod+0x10>)
   dd53a:	4b03      	ldr	r3, [pc, #12]	; (dd548 <strtod+0x14>)
   dd53c:	6800      	ldr	r0, [r0, #0]
   dd53e:	f7ff b9ef 	b.w	dc920 <_strtod_l>
   dd542:	bf00      	nop
   dd544:	2003e120 	.word	0x2003e120
   dd548:	2003e18c 	.word	0x2003e18c

000dd54c <strtok>:
   dd54c:	4b13      	ldr	r3, [pc, #76]	; (dd59c <strtok+0x50>)
   dd54e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   dd550:	681e      	ldr	r6, [r3, #0]
   dd552:	6db4      	ldr	r4, [r6, #88]	; 0x58
   dd554:	4605      	mov	r5, r0
   dd556:	b9c4      	cbnz	r4, dd58a <strtok+0x3e>
   dd558:	2050      	movs	r0, #80	; 0x50
   dd55a:	9101      	str	r1, [sp, #4]
   dd55c:	f7fa f9f2 	bl	d7944 <malloc>
   dd560:	65b0      	str	r0, [r6, #88]	; 0x58
   dd562:	e9c0 4400 	strd	r4, r4, [r0]
   dd566:	e9c0 4402 	strd	r4, r4, [r0, #8]
   dd56a:	e9c0 4404 	strd	r4, r4, [r0, #16]
   dd56e:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
   dd572:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
   dd576:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
   dd57a:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
   dd57e:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
   dd582:	9901      	ldr	r1, [sp, #4]
   dd584:	6184      	str	r4, [r0, #24]
   dd586:	7704      	strb	r4, [r0, #28]
   dd588:	6244      	str	r4, [r0, #36]	; 0x24
   dd58a:	6db2      	ldr	r2, [r6, #88]	; 0x58
   dd58c:	2301      	movs	r3, #1
   dd58e:	4628      	mov	r0, r5
   dd590:	b002      	add	sp, #8
   dd592:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   dd596:	f000 b803 	b.w	dd5a0 <__strtok_r>
   dd59a:	bf00      	nop
   dd59c:	2003e120 	.word	0x2003e120

000dd5a0 <__strtok_r>:
   dd5a0:	b5f0      	push	{r4, r5, r6, r7, lr}
   dd5a2:	b908      	cbnz	r0, dd5a8 <__strtok_r+0x8>
   dd5a4:	6810      	ldr	r0, [r2, #0]
   dd5a6:	b188      	cbz	r0, dd5cc <__strtok_r+0x2c>
   dd5a8:	4604      	mov	r4, r0
   dd5aa:	4620      	mov	r0, r4
   dd5ac:	f814 5b01 	ldrb.w	r5, [r4], #1
   dd5b0:	460f      	mov	r7, r1
   dd5b2:	f817 6b01 	ldrb.w	r6, [r7], #1
   dd5b6:	b91e      	cbnz	r6, dd5c0 <__strtok_r+0x20>
   dd5b8:	b965      	cbnz	r5, dd5d4 <__strtok_r+0x34>
   dd5ba:	6015      	str	r5, [r2, #0]
   dd5bc:	4628      	mov	r0, r5
   dd5be:	e005      	b.n	dd5cc <__strtok_r+0x2c>
   dd5c0:	42b5      	cmp	r5, r6
   dd5c2:	d1f6      	bne.n	dd5b2 <__strtok_r+0x12>
   dd5c4:	2b00      	cmp	r3, #0
   dd5c6:	d1f0      	bne.n	dd5aa <__strtok_r+0xa>
   dd5c8:	6014      	str	r4, [r2, #0]
   dd5ca:	7003      	strb	r3, [r0, #0]
   dd5cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   dd5ce:	461c      	mov	r4, r3
   dd5d0:	e00c      	b.n	dd5ec <__strtok_r+0x4c>
   dd5d2:	b915      	cbnz	r5, dd5da <__strtok_r+0x3a>
   dd5d4:	f814 3b01 	ldrb.w	r3, [r4], #1
   dd5d8:	460e      	mov	r6, r1
   dd5da:	f816 5b01 	ldrb.w	r5, [r6], #1
   dd5de:	42ab      	cmp	r3, r5
   dd5e0:	d1f7      	bne.n	dd5d2 <__strtok_r+0x32>
   dd5e2:	2b00      	cmp	r3, #0
   dd5e4:	d0f3      	beq.n	dd5ce <__strtok_r+0x2e>
   dd5e6:	2300      	movs	r3, #0
   dd5e8:	f804 3c01 	strb.w	r3, [r4, #-1]
   dd5ec:	6014      	str	r4, [r2, #0]
   dd5ee:	e7ed      	b.n	dd5cc <__strtok_r+0x2c>

000dd5f0 <_strtol_l.isra.0>:
   dd5f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   dd5f4:	4e3a      	ldr	r6, [pc, #232]	; (dd6e0 <_strtol_l.isra.0+0xf0>)
   dd5f6:	4686      	mov	lr, r0
   dd5f8:	468c      	mov	ip, r1
   dd5fa:	4660      	mov	r0, ip
   dd5fc:	f81c 4b01 	ldrb.w	r4, [ip], #1
   dd600:	5da5      	ldrb	r5, [r4, r6]
   dd602:	f015 0508 	ands.w	r5, r5, #8
   dd606:	d1f8      	bne.n	dd5fa <_strtol_l.isra.0+0xa>
   dd608:	2c2d      	cmp	r4, #45	; 0x2d
   dd60a:	d133      	bne.n	dd674 <_strtol_l.isra.0+0x84>
   dd60c:	f89c 4000 	ldrb.w	r4, [ip]
   dd610:	f04f 0801 	mov.w	r8, #1
   dd614:	f100 0c02 	add.w	ip, r0, #2
   dd618:	2b00      	cmp	r3, #0
   dd61a:	d05c      	beq.n	dd6d6 <_strtol_l.isra.0+0xe6>
   dd61c:	2b10      	cmp	r3, #16
   dd61e:	d10c      	bne.n	dd63a <_strtol_l.isra.0+0x4a>
   dd620:	2c30      	cmp	r4, #48	; 0x30
   dd622:	d10a      	bne.n	dd63a <_strtol_l.isra.0+0x4a>
   dd624:	f89c 0000 	ldrb.w	r0, [ip]
   dd628:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   dd62c:	2858      	cmp	r0, #88	; 0x58
   dd62e:	d14d      	bne.n	dd6cc <_strtol_l.isra.0+0xdc>
   dd630:	f89c 4001 	ldrb.w	r4, [ip, #1]
   dd634:	2310      	movs	r3, #16
   dd636:	f10c 0c02 	add.w	ip, ip, #2
   dd63a:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
   dd63e:	3f01      	subs	r7, #1
   dd640:	2600      	movs	r6, #0
   dd642:	fbb7 f9f3 	udiv	r9, r7, r3
   dd646:	4630      	mov	r0, r6
   dd648:	fb03 7a19 	mls	sl, r3, r9, r7
   dd64c:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
   dd650:	2d09      	cmp	r5, #9
   dd652:	d818      	bhi.n	dd686 <_strtol_l.isra.0+0x96>
   dd654:	462c      	mov	r4, r5
   dd656:	42a3      	cmp	r3, r4
   dd658:	dd24      	ble.n	dd6a4 <_strtol_l.isra.0+0xb4>
   dd65a:	1c75      	adds	r5, r6, #1
   dd65c:	d007      	beq.n	dd66e <_strtol_l.isra.0+0x7e>
   dd65e:	4581      	cmp	r9, r0
   dd660:	d31d      	bcc.n	dd69e <_strtol_l.isra.0+0xae>
   dd662:	d101      	bne.n	dd668 <_strtol_l.isra.0+0x78>
   dd664:	45a2      	cmp	sl, r4
   dd666:	db1a      	blt.n	dd69e <_strtol_l.isra.0+0xae>
   dd668:	fb00 4003 	mla	r0, r0, r3, r4
   dd66c:	2601      	movs	r6, #1
   dd66e:	f81c 4b01 	ldrb.w	r4, [ip], #1
   dd672:	e7eb      	b.n	dd64c <_strtol_l.isra.0+0x5c>
   dd674:	2c2b      	cmp	r4, #43	; 0x2b
   dd676:	bf08      	it	eq
   dd678:	f89c 4000 	ldrbeq.w	r4, [ip]
   dd67c:	46a8      	mov	r8, r5
   dd67e:	bf08      	it	eq
   dd680:	f100 0c02 	addeq.w	ip, r0, #2
   dd684:	e7c8      	b.n	dd618 <_strtol_l.isra.0+0x28>
   dd686:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
   dd68a:	2d19      	cmp	r5, #25
   dd68c:	d801      	bhi.n	dd692 <_strtol_l.isra.0+0xa2>
   dd68e:	3c37      	subs	r4, #55	; 0x37
   dd690:	e7e1      	b.n	dd656 <_strtol_l.isra.0+0x66>
   dd692:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
   dd696:	2d19      	cmp	r5, #25
   dd698:	d804      	bhi.n	dd6a4 <_strtol_l.isra.0+0xb4>
   dd69a:	3c57      	subs	r4, #87	; 0x57
   dd69c:	e7db      	b.n	dd656 <_strtol_l.isra.0+0x66>
   dd69e:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   dd6a2:	e7e4      	b.n	dd66e <_strtol_l.isra.0+0x7e>
   dd6a4:	1c73      	adds	r3, r6, #1
   dd6a6:	d106      	bne.n	dd6b6 <_strtol_l.isra.0+0xc6>
   dd6a8:	2322      	movs	r3, #34	; 0x22
   dd6aa:	f8ce 3000 	str.w	r3, [lr]
   dd6ae:	4638      	mov	r0, r7
   dd6b0:	b942      	cbnz	r2, dd6c4 <_strtol_l.isra.0+0xd4>
   dd6b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dd6b6:	f1b8 0f00 	cmp.w	r8, #0
   dd6ba:	d000      	beq.n	dd6be <_strtol_l.isra.0+0xce>
   dd6bc:	4240      	negs	r0, r0
   dd6be:	2a00      	cmp	r2, #0
   dd6c0:	d0f7      	beq.n	dd6b2 <_strtol_l.isra.0+0xc2>
   dd6c2:	b10e      	cbz	r6, dd6c8 <_strtol_l.isra.0+0xd8>
   dd6c4:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
   dd6c8:	6011      	str	r1, [r2, #0]
   dd6ca:	e7f2      	b.n	dd6b2 <_strtol_l.isra.0+0xc2>
   dd6cc:	2430      	movs	r4, #48	; 0x30
   dd6ce:	2b00      	cmp	r3, #0
   dd6d0:	d1b3      	bne.n	dd63a <_strtol_l.isra.0+0x4a>
   dd6d2:	2308      	movs	r3, #8
   dd6d4:	e7b1      	b.n	dd63a <_strtol_l.isra.0+0x4a>
   dd6d6:	2c30      	cmp	r4, #48	; 0x30
   dd6d8:	d0a4      	beq.n	dd624 <_strtol_l.isra.0+0x34>
   dd6da:	230a      	movs	r3, #10
   dd6dc:	e7ad      	b.n	dd63a <_strtol_l.isra.0+0x4a>
   dd6de:	bf00      	nop
   dd6e0:	000df609 	.word	0x000df609

000dd6e4 <strtol>:
   dd6e4:	4613      	mov	r3, r2
   dd6e6:	460a      	mov	r2, r1
   dd6e8:	4601      	mov	r1, r0
   dd6ea:	4802      	ldr	r0, [pc, #8]	; (dd6f4 <strtol+0x10>)
   dd6ec:	6800      	ldr	r0, [r0, #0]
   dd6ee:	f7ff bf7f 	b.w	dd5f0 <_strtol_l.isra.0>
   dd6f2:	bf00      	nop
   dd6f4:	2003e120 	.word	0x2003e120

000dd6f8 <__register_exitproc>:
   dd6f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   dd6fc:	f8df 80b8 	ldr.w	r8, [pc, #184]	; dd7b8 <__register_exitproc+0xc0>
   dd700:	4606      	mov	r6, r0
   dd702:	f8d8 0000 	ldr.w	r0, [r8]
   dd706:	461f      	mov	r7, r3
   dd708:	460d      	mov	r5, r1
   dd70a:	4691      	mov	r9, r2
   dd70c:	f000 fbb4 	bl	dde78 <__retarget_lock_acquire_recursive>
   dd710:	4b25      	ldr	r3, [pc, #148]	; (dd7a8 <__register_exitproc+0xb0>)
   dd712:	681c      	ldr	r4, [r3, #0]
   dd714:	b934      	cbnz	r4, dd724 <__register_exitproc+0x2c>
   dd716:	4c25      	ldr	r4, [pc, #148]	; (dd7ac <__register_exitproc+0xb4>)
   dd718:	601c      	str	r4, [r3, #0]
   dd71a:	4b25      	ldr	r3, [pc, #148]	; (dd7b0 <__register_exitproc+0xb8>)
   dd71c:	b113      	cbz	r3, dd724 <__register_exitproc+0x2c>
   dd71e:	681b      	ldr	r3, [r3, #0]
   dd720:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   dd724:	6863      	ldr	r3, [r4, #4]
   dd726:	2b1f      	cmp	r3, #31
   dd728:	dd07      	ble.n	dd73a <__register_exitproc+0x42>
   dd72a:	f8d8 0000 	ldr.w	r0, [r8]
   dd72e:	f000 fba5 	bl	dde7c <__retarget_lock_release_recursive>
   dd732:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   dd736:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   dd73a:	b34e      	cbz	r6, dd790 <__register_exitproc+0x98>
   dd73c:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   dd740:	b988      	cbnz	r0, dd766 <__register_exitproc+0x6e>
   dd742:	4b1c      	ldr	r3, [pc, #112]	; (dd7b4 <__register_exitproc+0xbc>)
   dd744:	b923      	cbnz	r3, dd750 <__register_exitproc+0x58>
   dd746:	f8d8 0000 	ldr.w	r0, [r8]
   dd74a:	f000 fb96 	bl	dde7a <__retarget_lock_release>
   dd74e:	e7f0      	b.n	dd732 <__register_exitproc+0x3a>
   dd750:	f44f 7084 	mov.w	r0, #264	; 0x108
   dd754:	f7fa f8f6 	bl	d7944 <malloc>
   dd758:	2800      	cmp	r0, #0
   dd75a:	d0f4      	beq.n	dd746 <__register_exitproc+0x4e>
   dd75c:	2300      	movs	r3, #0
   dd75e:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   dd762:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   dd766:	6863      	ldr	r3, [r4, #4]
   dd768:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   dd76c:	2201      	movs	r2, #1
   dd76e:	409a      	lsls	r2, r3
   dd770:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   dd774:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   dd778:	4313      	orrs	r3, r2
   dd77a:	2e02      	cmp	r6, #2
   dd77c:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   dd780:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   dd784:	bf02      	ittt	eq
   dd786:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   dd78a:	431a      	orreq	r2, r3
   dd78c:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
   dd790:	6863      	ldr	r3, [r4, #4]
   dd792:	f8d8 0000 	ldr.w	r0, [r8]
   dd796:	1c5a      	adds	r2, r3, #1
   dd798:	3302      	adds	r3, #2
   dd79a:	6062      	str	r2, [r4, #4]
   dd79c:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   dd7a0:	f000 fb6c 	bl	dde7c <__retarget_lock_release_recursive>
   dd7a4:	2000      	movs	r0, #0
   dd7a6:	e7c6      	b.n	dd736 <__register_exitproc+0x3e>
   dd7a8:	2003e7e4 	.word	0x2003e7e4
   dd7ac:	2003e758 	.word	0x2003e758
   dd7b0:	00000000 	.word	0x00000000
   dd7b4:	000d7945 	.word	0x000d7945
   dd7b8:	2003e184 	.word	0x2003e184

000dd7bc <rshift>:
   dd7bc:	6903      	ldr	r3, [r0, #16]
   dd7be:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   dd7c2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   dd7c6:	ea4f 1261 	mov.w	r2, r1, asr #5
   dd7ca:	f100 0414 	add.w	r4, r0, #20
   dd7ce:	dd45      	ble.n	dd85c <rshift+0xa0>
   dd7d0:	f011 011f 	ands.w	r1, r1, #31
   dd7d4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   dd7d8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   dd7dc:	d10c      	bne.n	dd7f8 <rshift+0x3c>
   dd7de:	f100 0710 	add.w	r7, r0, #16
   dd7e2:	4629      	mov	r1, r5
   dd7e4:	42b1      	cmp	r1, r6
   dd7e6:	d334      	bcc.n	dd852 <rshift+0x96>
   dd7e8:	1a9b      	subs	r3, r3, r2
   dd7ea:	009b      	lsls	r3, r3, #2
   dd7ec:	1eea      	subs	r2, r5, #3
   dd7ee:	4296      	cmp	r6, r2
   dd7f0:	bf38      	it	cc
   dd7f2:	2300      	movcc	r3, #0
   dd7f4:	4423      	add	r3, r4
   dd7f6:	e015      	b.n	dd824 <rshift+0x68>
   dd7f8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   dd7fc:	f1c1 0820 	rsb	r8, r1, #32
   dd800:	40cf      	lsrs	r7, r1
   dd802:	f105 0e04 	add.w	lr, r5, #4
   dd806:	46a1      	mov	r9, r4
   dd808:	4576      	cmp	r6, lr
   dd80a:	46f4      	mov	ip, lr
   dd80c:	d815      	bhi.n	dd83a <rshift+0x7e>
   dd80e:	1a9b      	subs	r3, r3, r2
   dd810:	009a      	lsls	r2, r3, #2
   dd812:	3a04      	subs	r2, #4
   dd814:	3501      	adds	r5, #1
   dd816:	42ae      	cmp	r6, r5
   dd818:	bf38      	it	cc
   dd81a:	2200      	movcc	r2, #0
   dd81c:	18a3      	adds	r3, r4, r2
   dd81e:	50a7      	str	r7, [r4, r2]
   dd820:	b107      	cbz	r7, dd824 <rshift+0x68>
   dd822:	3304      	adds	r3, #4
   dd824:	1b1a      	subs	r2, r3, r4
   dd826:	42a3      	cmp	r3, r4
   dd828:	ea4f 02a2 	mov.w	r2, r2, asr #2
   dd82c:	bf08      	it	eq
   dd82e:	2300      	moveq	r3, #0
   dd830:	6102      	str	r2, [r0, #16]
   dd832:	bf08      	it	eq
   dd834:	6143      	streq	r3, [r0, #20]
   dd836:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   dd83a:	f8dc c000 	ldr.w	ip, [ip]
   dd83e:	fa0c fc08 	lsl.w	ip, ip, r8
   dd842:	ea4c 0707 	orr.w	r7, ip, r7
   dd846:	f849 7b04 	str.w	r7, [r9], #4
   dd84a:	f85e 7b04 	ldr.w	r7, [lr], #4
   dd84e:	40cf      	lsrs	r7, r1
   dd850:	e7da      	b.n	dd808 <rshift+0x4c>
   dd852:	f851 cb04 	ldr.w	ip, [r1], #4
   dd856:	f847 cf04 	str.w	ip, [r7, #4]!
   dd85a:	e7c3      	b.n	dd7e4 <rshift+0x28>
   dd85c:	4623      	mov	r3, r4
   dd85e:	e7e1      	b.n	dd824 <rshift+0x68>

000dd860 <__hexdig_fun>:
   dd860:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   dd864:	2b09      	cmp	r3, #9
   dd866:	d802      	bhi.n	dd86e <__hexdig_fun+0xe>
   dd868:	3820      	subs	r0, #32
   dd86a:	b2c0      	uxtb	r0, r0
   dd86c:	4770      	bx	lr
   dd86e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   dd872:	2b05      	cmp	r3, #5
   dd874:	d801      	bhi.n	dd87a <__hexdig_fun+0x1a>
   dd876:	3847      	subs	r0, #71	; 0x47
   dd878:	e7f7      	b.n	dd86a <__hexdig_fun+0xa>
   dd87a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   dd87e:	2b05      	cmp	r3, #5
   dd880:	d801      	bhi.n	dd886 <__hexdig_fun+0x26>
   dd882:	3827      	subs	r0, #39	; 0x27
   dd884:	e7f1      	b.n	dd86a <__hexdig_fun+0xa>
   dd886:	2000      	movs	r0, #0
   dd888:	4770      	bx	lr
	...

000dd88c <__gethex>:
   dd88c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dd890:	ed2d 8b02 	vpush	{d8}
   dd894:	b089      	sub	sp, #36	; 0x24
   dd896:	ee08 0a10 	vmov	s16, r0
   dd89a:	9304      	str	r3, [sp, #16]
   dd89c:	4bbc      	ldr	r3, [pc, #752]	; (ddb90 <__gethex+0x304>)
   dd89e:	681b      	ldr	r3, [r3, #0]
   dd8a0:	9301      	str	r3, [sp, #4]
   dd8a2:	4618      	mov	r0, r3
   dd8a4:	468b      	mov	fp, r1
   dd8a6:	4690      	mov	r8, r2
   dd8a8:	f7fe ffc3 	bl	dc832 <strlen>
   dd8ac:	9b01      	ldr	r3, [sp, #4]
   dd8ae:	f8db 2000 	ldr.w	r2, [fp]
   dd8b2:	4403      	add	r3, r0
   dd8b4:	4682      	mov	sl, r0
   dd8b6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   dd8ba:	9305      	str	r3, [sp, #20]
   dd8bc:	1c93      	adds	r3, r2, #2
   dd8be:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   dd8c2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   dd8c6:	32fe      	adds	r2, #254	; 0xfe
   dd8c8:	18d1      	adds	r1, r2, r3
   dd8ca:	461f      	mov	r7, r3
   dd8cc:	f813 0b01 	ldrb.w	r0, [r3], #1
   dd8d0:	9100      	str	r1, [sp, #0]
   dd8d2:	2830      	cmp	r0, #48	; 0x30
   dd8d4:	d0f8      	beq.n	dd8c8 <__gethex+0x3c>
   dd8d6:	f7ff ffc3 	bl	dd860 <__hexdig_fun>
   dd8da:	4604      	mov	r4, r0
   dd8dc:	2800      	cmp	r0, #0
   dd8de:	d13a      	bne.n	dd956 <__gethex+0xca>
   dd8e0:	9901      	ldr	r1, [sp, #4]
   dd8e2:	4652      	mov	r2, sl
   dd8e4:	4638      	mov	r0, r7
   dd8e6:	f7fe ffac 	bl	dc842 <strncmp>
   dd8ea:	4605      	mov	r5, r0
   dd8ec:	2800      	cmp	r0, #0
   dd8ee:	d168      	bne.n	dd9c2 <__gethex+0x136>
   dd8f0:	f817 000a 	ldrb.w	r0, [r7, sl]
   dd8f4:	eb07 060a 	add.w	r6, r7, sl
   dd8f8:	f7ff ffb2 	bl	dd860 <__hexdig_fun>
   dd8fc:	2800      	cmp	r0, #0
   dd8fe:	d062      	beq.n	dd9c6 <__gethex+0x13a>
   dd900:	4633      	mov	r3, r6
   dd902:	7818      	ldrb	r0, [r3, #0]
   dd904:	2830      	cmp	r0, #48	; 0x30
   dd906:	461f      	mov	r7, r3
   dd908:	f103 0301 	add.w	r3, r3, #1
   dd90c:	d0f9      	beq.n	dd902 <__gethex+0x76>
   dd90e:	f7ff ffa7 	bl	dd860 <__hexdig_fun>
   dd912:	2301      	movs	r3, #1
   dd914:	fab0 f480 	clz	r4, r0
   dd918:	0964      	lsrs	r4, r4, #5
   dd91a:	4635      	mov	r5, r6
   dd91c:	9300      	str	r3, [sp, #0]
   dd91e:	463a      	mov	r2, r7
   dd920:	4616      	mov	r6, r2
   dd922:	3201      	adds	r2, #1
   dd924:	7830      	ldrb	r0, [r6, #0]
   dd926:	f7ff ff9b 	bl	dd860 <__hexdig_fun>
   dd92a:	2800      	cmp	r0, #0
   dd92c:	d1f8      	bne.n	dd920 <__gethex+0x94>
   dd92e:	9901      	ldr	r1, [sp, #4]
   dd930:	4652      	mov	r2, sl
   dd932:	4630      	mov	r0, r6
   dd934:	f7fe ff85 	bl	dc842 <strncmp>
   dd938:	b980      	cbnz	r0, dd95c <__gethex+0xd0>
   dd93a:	b94d      	cbnz	r5, dd950 <__gethex+0xc4>
   dd93c:	eb06 050a 	add.w	r5, r6, sl
   dd940:	462a      	mov	r2, r5
   dd942:	4616      	mov	r6, r2
   dd944:	3201      	adds	r2, #1
   dd946:	7830      	ldrb	r0, [r6, #0]
   dd948:	f7ff ff8a 	bl	dd860 <__hexdig_fun>
   dd94c:	2800      	cmp	r0, #0
   dd94e:	d1f8      	bne.n	dd942 <__gethex+0xb6>
   dd950:	1bad      	subs	r5, r5, r6
   dd952:	00ad      	lsls	r5, r5, #2
   dd954:	e004      	b.n	dd960 <__gethex+0xd4>
   dd956:	2400      	movs	r4, #0
   dd958:	4625      	mov	r5, r4
   dd95a:	e7e0      	b.n	dd91e <__gethex+0x92>
   dd95c:	2d00      	cmp	r5, #0
   dd95e:	d1f7      	bne.n	dd950 <__gethex+0xc4>
   dd960:	7833      	ldrb	r3, [r6, #0]
   dd962:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   dd966:	2b50      	cmp	r3, #80	; 0x50
   dd968:	d13b      	bne.n	dd9e2 <__gethex+0x156>
   dd96a:	7873      	ldrb	r3, [r6, #1]
   dd96c:	2b2b      	cmp	r3, #43	; 0x2b
   dd96e:	d02c      	beq.n	dd9ca <__gethex+0x13e>
   dd970:	2b2d      	cmp	r3, #45	; 0x2d
   dd972:	d02e      	beq.n	dd9d2 <__gethex+0x146>
   dd974:	1c71      	adds	r1, r6, #1
   dd976:	f04f 0900 	mov.w	r9, #0
   dd97a:	7808      	ldrb	r0, [r1, #0]
   dd97c:	f7ff ff70 	bl	dd860 <__hexdig_fun>
   dd980:	1e43      	subs	r3, r0, #1
   dd982:	b2db      	uxtb	r3, r3
   dd984:	2b18      	cmp	r3, #24
   dd986:	d82c      	bhi.n	dd9e2 <__gethex+0x156>
   dd988:	f1a0 0210 	sub.w	r2, r0, #16
   dd98c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   dd990:	f7ff ff66 	bl	dd860 <__hexdig_fun>
   dd994:	1e43      	subs	r3, r0, #1
   dd996:	b2db      	uxtb	r3, r3
   dd998:	2b18      	cmp	r3, #24
   dd99a:	d91d      	bls.n	dd9d8 <__gethex+0x14c>
   dd99c:	f1b9 0f00 	cmp.w	r9, #0
   dd9a0:	d000      	beq.n	dd9a4 <__gethex+0x118>
   dd9a2:	4252      	negs	r2, r2
   dd9a4:	4415      	add	r5, r2
   dd9a6:	f8cb 1000 	str.w	r1, [fp]
   dd9aa:	b1e4      	cbz	r4, dd9e6 <__gethex+0x15a>
   dd9ac:	9b00      	ldr	r3, [sp, #0]
   dd9ae:	2b00      	cmp	r3, #0
   dd9b0:	bf14      	ite	ne
   dd9b2:	2700      	movne	r7, #0
   dd9b4:	2706      	moveq	r7, #6
   dd9b6:	4638      	mov	r0, r7
   dd9b8:	b009      	add	sp, #36	; 0x24
   dd9ba:	ecbd 8b02 	vpop	{d8}
   dd9be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dd9c2:	463e      	mov	r6, r7
   dd9c4:	4625      	mov	r5, r4
   dd9c6:	2401      	movs	r4, #1
   dd9c8:	e7ca      	b.n	dd960 <__gethex+0xd4>
   dd9ca:	f04f 0900 	mov.w	r9, #0
   dd9ce:	1cb1      	adds	r1, r6, #2
   dd9d0:	e7d3      	b.n	dd97a <__gethex+0xee>
   dd9d2:	f04f 0901 	mov.w	r9, #1
   dd9d6:	e7fa      	b.n	dd9ce <__gethex+0x142>
   dd9d8:	230a      	movs	r3, #10
   dd9da:	fb03 0202 	mla	r2, r3, r2, r0
   dd9de:	3a10      	subs	r2, #16
   dd9e0:	e7d4      	b.n	dd98c <__gethex+0x100>
   dd9e2:	4631      	mov	r1, r6
   dd9e4:	e7df      	b.n	dd9a6 <__gethex+0x11a>
   dd9e6:	1bf3      	subs	r3, r6, r7
   dd9e8:	3b01      	subs	r3, #1
   dd9ea:	4621      	mov	r1, r4
   dd9ec:	2b07      	cmp	r3, #7
   dd9ee:	dc52      	bgt.n	dda96 <__gethex+0x20a>
   dd9f0:	ee18 0a10 	vmov	r0, s16
   dd9f4:	f000 fa55 	bl	ddea2 <_Balloc>
   dd9f8:	f04f 0b00 	mov.w	fp, #0
   dd9fc:	f100 0914 	add.w	r9, r0, #20
   dda00:	f1ca 0301 	rsb	r3, sl, #1
   dda04:	4604      	mov	r4, r0
   dda06:	f8cd 9008 	str.w	r9, [sp, #8]
   dda0a:	f8cd b000 	str.w	fp, [sp]
   dda0e:	9306      	str	r3, [sp, #24]
   dda10:	42b7      	cmp	r7, r6
   dda12:	d343      	bcc.n	dda9c <__gethex+0x210>
   dda14:	9802      	ldr	r0, [sp, #8]
   dda16:	9b00      	ldr	r3, [sp, #0]
   dda18:	f840 3b04 	str.w	r3, [r0], #4
   dda1c:	eba0 0009 	sub.w	r0, r0, r9
   dda20:	1080      	asrs	r0, r0, #2
   dda22:	0146      	lsls	r6, r0, #5
   dda24:	6120      	str	r0, [r4, #16]
   dda26:	4618      	mov	r0, r3
   dda28:	f000 fb02 	bl	de030 <__hi0bits>
   dda2c:	1a30      	subs	r0, r6, r0
   dda2e:	f8d8 6000 	ldr.w	r6, [r8]
   dda32:	42b0      	cmp	r0, r6
   dda34:	dd66      	ble.n	ddb04 <__gethex+0x278>
   dda36:	1b87      	subs	r7, r0, r6
   dda38:	4639      	mov	r1, r7
   dda3a:	4620      	mov	r0, r4
   dda3c:	f000 fe50 	bl	de6e0 <__any_on>
   dda40:	4682      	mov	sl, r0
   dda42:	b1a8      	cbz	r0, dda70 <__gethex+0x1e4>
   dda44:	1e7b      	subs	r3, r7, #1
   dda46:	1159      	asrs	r1, r3, #5
   dda48:	f003 021f 	and.w	r2, r3, #31
   dda4c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   dda50:	f04f 0a01 	mov.w	sl, #1
   dda54:	fa0a f202 	lsl.w	r2, sl, r2
   dda58:	420a      	tst	r2, r1
   dda5a:	d009      	beq.n	dda70 <__gethex+0x1e4>
   dda5c:	4553      	cmp	r3, sl
   dda5e:	dd05      	ble.n	dda6c <__gethex+0x1e0>
   dda60:	1eb9      	subs	r1, r7, #2
   dda62:	4620      	mov	r0, r4
   dda64:	f000 fe3c 	bl	de6e0 <__any_on>
   dda68:	2800      	cmp	r0, #0
   dda6a:	d148      	bne.n	ddafe <__gethex+0x272>
   dda6c:	f04f 0a02 	mov.w	sl, #2
   dda70:	4639      	mov	r1, r7
   dda72:	4620      	mov	r0, r4
   dda74:	f7ff fea2 	bl	dd7bc <rshift>
   dda78:	443d      	add	r5, r7
   dda7a:	f8d8 3008 	ldr.w	r3, [r8, #8]
   dda7e:	42ab      	cmp	r3, r5
   dda80:	da4f      	bge.n	ddb22 <__gethex+0x296>
   dda82:	ee18 0a10 	vmov	r0, s16
   dda86:	4621      	mov	r1, r4
   dda88:	f000 fa3f 	bl	ddf0a <_Bfree>
   dda8c:	9a14      	ldr	r2, [sp, #80]	; 0x50
   dda8e:	2300      	movs	r3, #0
   dda90:	6013      	str	r3, [r2, #0]
   dda92:	27a3      	movs	r7, #163	; 0xa3
   dda94:	e78f      	b.n	dd9b6 <__gethex+0x12a>
   dda96:	3101      	adds	r1, #1
   dda98:	105b      	asrs	r3, r3, #1
   dda9a:	e7a7      	b.n	dd9ec <__gethex+0x160>
   dda9c:	1e73      	subs	r3, r6, #1
   dda9e:	9a05      	ldr	r2, [sp, #20]
   ddaa0:	9303      	str	r3, [sp, #12]
   ddaa2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   ddaa6:	4293      	cmp	r3, r2
   ddaa8:	d019      	beq.n	ddade <__gethex+0x252>
   ddaaa:	f1bb 0f20 	cmp.w	fp, #32
   ddaae:	d107      	bne.n	ddac0 <__gethex+0x234>
   ddab0:	9b02      	ldr	r3, [sp, #8]
   ddab2:	9a00      	ldr	r2, [sp, #0]
   ddab4:	f843 2b04 	str.w	r2, [r3], #4
   ddab8:	9302      	str	r3, [sp, #8]
   ddaba:	2300      	movs	r3, #0
   ddabc:	9300      	str	r3, [sp, #0]
   ddabe:	469b      	mov	fp, r3
   ddac0:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   ddac4:	f7ff fecc 	bl	dd860 <__hexdig_fun>
   ddac8:	9b00      	ldr	r3, [sp, #0]
   ddaca:	f000 000f 	and.w	r0, r0, #15
   ddace:	fa00 f00b 	lsl.w	r0, r0, fp
   ddad2:	4303      	orrs	r3, r0
   ddad4:	9300      	str	r3, [sp, #0]
   ddad6:	f10b 0b04 	add.w	fp, fp, #4
   ddada:	9b03      	ldr	r3, [sp, #12]
   ddadc:	e00d      	b.n	ddafa <__gethex+0x26e>
   ddade:	9b03      	ldr	r3, [sp, #12]
   ddae0:	9a06      	ldr	r2, [sp, #24]
   ddae2:	4413      	add	r3, r2
   ddae4:	42bb      	cmp	r3, r7
   ddae6:	d3e0      	bcc.n	ddaaa <__gethex+0x21e>
   ddae8:	4618      	mov	r0, r3
   ddaea:	9901      	ldr	r1, [sp, #4]
   ddaec:	9307      	str	r3, [sp, #28]
   ddaee:	4652      	mov	r2, sl
   ddaf0:	f7fe fea7 	bl	dc842 <strncmp>
   ddaf4:	9b07      	ldr	r3, [sp, #28]
   ddaf6:	2800      	cmp	r0, #0
   ddaf8:	d1d7      	bne.n	ddaaa <__gethex+0x21e>
   ddafa:	461e      	mov	r6, r3
   ddafc:	e788      	b.n	dda10 <__gethex+0x184>
   ddafe:	f04f 0a03 	mov.w	sl, #3
   ddb02:	e7b5      	b.n	dda70 <__gethex+0x1e4>
   ddb04:	da0a      	bge.n	ddb1c <__gethex+0x290>
   ddb06:	1a37      	subs	r7, r6, r0
   ddb08:	4621      	mov	r1, r4
   ddb0a:	ee18 0a10 	vmov	r0, s16
   ddb0e:	463a      	mov	r2, r7
   ddb10:	f000 fbd2 	bl	de2b8 <__lshift>
   ddb14:	1bed      	subs	r5, r5, r7
   ddb16:	4604      	mov	r4, r0
   ddb18:	f100 0914 	add.w	r9, r0, #20
   ddb1c:	f04f 0a00 	mov.w	sl, #0
   ddb20:	e7ab      	b.n	dda7a <__gethex+0x1ee>
   ddb22:	f8d8 0004 	ldr.w	r0, [r8, #4]
   ddb26:	42a8      	cmp	r0, r5
   ddb28:	dd6d      	ble.n	ddc06 <__gethex+0x37a>
   ddb2a:	1b45      	subs	r5, r0, r5
   ddb2c:	42ae      	cmp	r6, r5
   ddb2e:	dc31      	bgt.n	ddb94 <__gethex+0x308>
   ddb30:	f8d8 300c 	ldr.w	r3, [r8, #12]
   ddb34:	2b02      	cmp	r3, #2
   ddb36:	d023      	beq.n	ddb80 <__gethex+0x2f4>
   ddb38:	2b03      	cmp	r3, #3
   ddb3a:	d025      	beq.n	ddb88 <__gethex+0x2fc>
   ddb3c:	2b01      	cmp	r3, #1
   ddb3e:	d115      	bne.n	ddb6c <__gethex+0x2e0>
   ddb40:	42ae      	cmp	r6, r5
   ddb42:	d113      	bne.n	ddb6c <__gethex+0x2e0>
   ddb44:	2e01      	cmp	r6, #1
   ddb46:	d10b      	bne.n	ddb60 <__gethex+0x2d4>
   ddb48:	9a04      	ldr	r2, [sp, #16]
   ddb4a:	f8d8 3004 	ldr.w	r3, [r8, #4]
   ddb4e:	6013      	str	r3, [r2, #0]
   ddb50:	2301      	movs	r3, #1
   ddb52:	6123      	str	r3, [r4, #16]
   ddb54:	f8c9 3000 	str.w	r3, [r9]
   ddb58:	9b14      	ldr	r3, [sp, #80]	; 0x50
   ddb5a:	2762      	movs	r7, #98	; 0x62
   ddb5c:	601c      	str	r4, [r3, #0]
   ddb5e:	e72a      	b.n	dd9b6 <__gethex+0x12a>
   ddb60:	1e71      	subs	r1, r6, #1
   ddb62:	4620      	mov	r0, r4
   ddb64:	f000 fdbc 	bl	de6e0 <__any_on>
   ddb68:	2800      	cmp	r0, #0
   ddb6a:	d1ed      	bne.n	ddb48 <__gethex+0x2bc>
   ddb6c:	ee18 0a10 	vmov	r0, s16
   ddb70:	4621      	mov	r1, r4
   ddb72:	f000 f9ca 	bl	ddf0a <_Bfree>
   ddb76:	9a14      	ldr	r2, [sp, #80]	; 0x50
   ddb78:	2300      	movs	r3, #0
   ddb7a:	6013      	str	r3, [r2, #0]
   ddb7c:	2750      	movs	r7, #80	; 0x50
   ddb7e:	e71a      	b.n	dd9b6 <__gethex+0x12a>
   ddb80:	9b15      	ldr	r3, [sp, #84]	; 0x54
   ddb82:	2b00      	cmp	r3, #0
   ddb84:	d1f2      	bne.n	ddb6c <__gethex+0x2e0>
   ddb86:	e7df      	b.n	ddb48 <__gethex+0x2bc>
   ddb88:	9b15      	ldr	r3, [sp, #84]	; 0x54
   ddb8a:	2b00      	cmp	r3, #0
   ddb8c:	d1dc      	bne.n	ddb48 <__gethex+0x2bc>
   ddb8e:	e7ed      	b.n	ddb6c <__gethex+0x2e0>
   ddb90:	000df70c 	.word	0x000df70c
   ddb94:	1e6f      	subs	r7, r5, #1
   ddb96:	f1ba 0f00 	cmp.w	sl, #0
   ddb9a:	d131      	bne.n	ddc00 <__gethex+0x374>
   ddb9c:	b127      	cbz	r7, ddba8 <__gethex+0x31c>
   ddb9e:	4639      	mov	r1, r7
   ddba0:	4620      	mov	r0, r4
   ddba2:	f000 fd9d 	bl	de6e0 <__any_on>
   ddba6:	4682      	mov	sl, r0
   ddba8:	117b      	asrs	r3, r7, #5
   ddbaa:	2101      	movs	r1, #1
   ddbac:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   ddbb0:	f007 071f 	and.w	r7, r7, #31
   ddbb4:	fa01 f707 	lsl.w	r7, r1, r7
   ddbb8:	421f      	tst	r7, r3
   ddbba:	4629      	mov	r1, r5
   ddbbc:	4620      	mov	r0, r4
   ddbbe:	bf18      	it	ne
   ddbc0:	f04a 0a02 	orrne.w	sl, sl, #2
   ddbc4:	1b76      	subs	r6, r6, r5
   ddbc6:	f7ff fdf9 	bl	dd7bc <rshift>
   ddbca:	f8d8 5004 	ldr.w	r5, [r8, #4]
   ddbce:	2702      	movs	r7, #2
   ddbd0:	f1ba 0f00 	cmp.w	sl, #0
   ddbd4:	d048      	beq.n	ddc68 <__gethex+0x3dc>
   ddbd6:	f8d8 300c 	ldr.w	r3, [r8, #12]
   ddbda:	2b02      	cmp	r3, #2
   ddbdc:	d015      	beq.n	ddc0a <__gethex+0x37e>
   ddbde:	2b03      	cmp	r3, #3
   ddbe0:	d017      	beq.n	ddc12 <__gethex+0x386>
   ddbe2:	2b01      	cmp	r3, #1
   ddbe4:	d109      	bne.n	ddbfa <__gethex+0x36e>
   ddbe6:	f01a 0f02 	tst.w	sl, #2
   ddbea:	d006      	beq.n	ddbfa <__gethex+0x36e>
   ddbec:	f8d9 0000 	ldr.w	r0, [r9]
   ddbf0:	ea4a 0a00 	orr.w	sl, sl, r0
   ddbf4:	f01a 0f01 	tst.w	sl, #1
   ddbf8:	d10e      	bne.n	ddc18 <__gethex+0x38c>
   ddbfa:	f047 0710 	orr.w	r7, r7, #16
   ddbfe:	e033      	b.n	ddc68 <__gethex+0x3dc>
   ddc00:	f04f 0a01 	mov.w	sl, #1
   ddc04:	e7d0      	b.n	ddba8 <__gethex+0x31c>
   ddc06:	2701      	movs	r7, #1
   ddc08:	e7e2      	b.n	ddbd0 <__gethex+0x344>
   ddc0a:	9b15      	ldr	r3, [sp, #84]	; 0x54
   ddc0c:	f1c3 0301 	rsb	r3, r3, #1
   ddc10:	9315      	str	r3, [sp, #84]	; 0x54
   ddc12:	9b15      	ldr	r3, [sp, #84]	; 0x54
   ddc14:	2b00      	cmp	r3, #0
   ddc16:	d0f0      	beq.n	ddbfa <__gethex+0x36e>
   ddc18:	f8d4 9010 	ldr.w	r9, [r4, #16]
   ddc1c:	f104 0314 	add.w	r3, r4, #20
   ddc20:	ea4f 0b89 	mov.w	fp, r9, lsl #2
   ddc24:	eb03 0189 	add.w	r1, r3, r9, lsl #2
   ddc28:	f04f 0c00 	mov.w	ip, #0
   ddc2c:	4618      	mov	r0, r3
   ddc2e:	f853 2b04 	ldr.w	r2, [r3], #4
   ddc32:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   ddc36:	d01c      	beq.n	ddc72 <__gethex+0x3e6>
   ddc38:	3201      	adds	r2, #1
   ddc3a:	6002      	str	r2, [r0, #0]
   ddc3c:	2f02      	cmp	r7, #2
   ddc3e:	f104 0314 	add.w	r3, r4, #20
   ddc42:	d13a      	bne.n	ddcba <__gethex+0x42e>
   ddc44:	f8d8 2000 	ldr.w	r2, [r8]
   ddc48:	3a01      	subs	r2, #1
   ddc4a:	42b2      	cmp	r2, r6
   ddc4c:	d10a      	bne.n	ddc64 <__gethex+0x3d8>
   ddc4e:	1171      	asrs	r1, r6, #5
   ddc50:	2201      	movs	r2, #1
   ddc52:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   ddc56:	f006 061f 	and.w	r6, r6, #31
   ddc5a:	fa02 f606 	lsl.w	r6, r2, r6
   ddc5e:	421e      	tst	r6, r3
   ddc60:	bf18      	it	ne
   ddc62:	4617      	movne	r7, r2
   ddc64:	f047 0720 	orr.w	r7, r7, #32
   ddc68:	9b14      	ldr	r3, [sp, #80]	; 0x50
   ddc6a:	601c      	str	r4, [r3, #0]
   ddc6c:	9b04      	ldr	r3, [sp, #16]
   ddc6e:	601d      	str	r5, [r3, #0]
   ddc70:	e6a1      	b.n	dd9b6 <__gethex+0x12a>
   ddc72:	4299      	cmp	r1, r3
   ddc74:	f843 cc04 	str.w	ip, [r3, #-4]
   ddc78:	d8d8      	bhi.n	ddc2c <__gethex+0x3a0>
   ddc7a:	68a3      	ldr	r3, [r4, #8]
   ddc7c:	4599      	cmp	r9, r3
   ddc7e:	db14      	blt.n	ddcaa <__gethex+0x41e>
   ddc80:	6861      	ldr	r1, [r4, #4]
   ddc82:	ee18 0a10 	vmov	r0, s16
   ddc86:	3101      	adds	r1, #1
   ddc88:	f000 f90b 	bl	ddea2 <_Balloc>
   ddc8c:	6922      	ldr	r2, [r4, #16]
   ddc8e:	3202      	adds	r2, #2
   ddc90:	f104 010c 	add.w	r1, r4, #12
   ddc94:	4682      	mov	sl, r0
   ddc96:	0092      	lsls	r2, r2, #2
   ddc98:	300c      	adds	r0, #12
   ddc9a:	f7fe fd2f 	bl	dc6fc <memcpy>
   ddc9e:	4621      	mov	r1, r4
   ddca0:	ee18 0a10 	vmov	r0, s16
   ddca4:	f000 f931 	bl	ddf0a <_Bfree>
   ddca8:	4654      	mov	r4, sl
   ddcaa:	6923      	ldr	r3, [r4, #16]
   ddcac:	1c5a      	adds	r2, r3, #1
   ddcae:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   ddcb2:	6122      	str	r2, [r4, #16]
   ddcb4:	2201      	movs	r2, #1
   ddcb6:	615a      	str	r2, [r3, #20]
   ddcb8:	e7c0      	b.n	ddc3c <__gethex+0x3b0>
   ddcba:	6922      	ldr	r2, [r4, #16]
   ddcbc:	454a      	cmp	r2, r9
   ddcbe:	dd0b      	ble.n	ddcd8 <__gethex+0x44c>
   ddcc0:	2101      	movs	r1, #1
   ddcc2:	4620      	mov	r0, r4
   ddcc4:	f7ff fd7a 	bl	dd7bc <rshift>
   ddcc8:	f8d8 3008 	ldr.w	r3, [r8, #8]
   ddccc:	3501      	adds	r5, #1
   ddcce:	42ab      	cmp	r3, r5
   ddcd0:	f6ff aed7 	blt.w	dda82 <__gethex+0x1f6>
   ddcd4:	2701      	movs	r7, #1
   ddcd6:	e7c5      	b.n	ddc64 <__gethex+0x3d8>
   ddcd8:	f016 061f 	ands.w	r6, r6, #31
   ddcdc:	d0fa      	beq.n	ddcd4 <__gethex+0x448>
   ddcde:	449b      	add	fp, r3
   ddce0:	f1c6 0620 	rsb	r6, r6, #32
   ddce4:	f85b 0c04 	ldr.w	r0, [fp, #-4]
   ddce8:	f000 f9a2 	bl	de030 <__hi0bits>
   ddcec:	42b0      	cmp	r0, r6
   ddcee:	dbe7      	blt.n	ddcc0 <__gethex+0x434>
   ddcf0:	e7f0      	b.n	ddcd4 <__gethex+0x448>
   ddcf2:	bf00      	nop

000ddcf4 <L_shift>:
   ddcf4:	f1c2 0208 	rsb	r2, r2, #8
   ddcf8:	0092      	lsls	r2, r2, #2
   ddcfa:	b570      	push	{r4, r5, r6, lr}
   ddcfc:	f1c2 0620 	rsb	r6, r2, #32
   ddd00:	6843      	ldr	r3, [r0, #4]
   ddd02:	6804      	ldr	r4, [r0, #0]
   ddd04:	fa03 f506 	lsl.w	r5, r3, r6
   ddd08:	432c      	orrs	r4, r5
   ddd0a:	40d3      	lsrs	r3, r2
   ddd0c:	6004      	str	r4, [r0, #0]
   ddd0e:	f840 3f04 	str.w	r3, [r0, #4]!
   ddd12:	4288      	cmp	r0, r1
   ddd14:	d3f4      	bcc.n	ddd00 <L_shift+0xc>
   ddd16:	bd70      	pop	{r4, r5, r6, pc}

000ddd18 <__match>:
   ddd18:	b530      	push	{r4, r5, lr}
   ddd1a:	6803      	ldr	r3, [r0, #0]
   ddd1c:	3301      	adds	r3, #1
   ddd1e:	f811 4b01 	ldrb.w	r4, [r1], #1
   ddd22:	b914      	cbnz	r4, ddd2a <__match+0x12>
   ddd24:	6003      	str	r3, [r0, #0]
   ddd26:	2001      	movs	r0, #1
   ddd28:	bd30      	pop	{r4, r5, pc}
   ddd2a:	f813 2b01 	ldrb.w	r2, [r3], #1
   ddd2e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   ddd32:	2d19      	cmp	r5, #25
   ddd34:	bf98      	it	ls
   ddd36:	3220      	addls	r2, #32
   ddd38:	42a2      	cmp	r2, r4
   ddd3a:	d0f0      	beq.n	ddd1e <__match+0x6>
   ddd3c:	2000      	movs	r0, #0
   ddd3e:	e7f3      	b.n	ddd28 <__match+0x10>

000ddd40 <__hexnan>:
   ddd40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ddd44:	680b      	ldr	r3, [r1, #0]
   ddd46:	6801      	ldr	r1, [r0, #0]
   ddd48:	115e      	asrs	r6, r3, #5
   ddd4a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   ddd4e:	f013 031f 	ands.w	r3, r3, #31
   ddd52:	b087      	sub	sp, #28
   ddd54:	bf18      	it	ne
   ddd56:	3604      	addne	r6, #4
   ddd58:	2500      	movs	r5, #0
   ddd5a:	1f37      	subs	r7, r6, #4
   ddd5c:	4682      	mov	sl, r0
   ddd5e:	4690      	mov	r8, r2
   ddd60:	9301      	str	r3, [sp, #4]
   ddd62:	f846 5c04 	str.w	r5, [r6, #-4]
   ddd66:	46b9      	mov	r9, r7
   ddd68:	463c      	mov	r4, r7
   ddd6a:	9502      	str	r5, [sp, #8]
   ddd6c:	46ab      	mov	fp, r5
   ddd6e:	784a      	ldrb	r2, [r1, #1]
   ddd70:	1c4b      	adds	r3, r1, #1
   ddd72:	9303      	str	r3, [sp, #12]
   ddd74:	b342      	cbz	r2, dddc8 <__hexnan+0x88>
   ddd76:	4610      	mov	r0, r2
   ddd78:	9105      	str	r1, [sp, #20]
   ddd7a:	9204      	str	r2, [sp, #16]
   ddd7c:	f7ff fd70 	bl	dd860 <__hexdig_fun>
   ddd80:	2800      	cmp	r0, #0
   ddd82:	d14f      	bne.n	dde24 <__hexnan+0xe4>
   ddd84:	9a04      	ldr	r2, [sp, #16]
   ddd86:	9905      	ldr	r1, [sp, #20]
   ddd88:	2a20      	cmp	r2, #32
   ddd8a:	d818      	bhi.n	dddbe <__hexnan+0x7e>
   ddd8c:	9b02      	ldr	r3, [sp, #8]
   ddd8e:	459b      	cmp	fp, r3
   ddd90:	dd13      	ble.n	dddba <__hexnan+0x7a>
   ddd92:	454c      	cmp	r4, r9
   ddd94:	d206      	bcs.n	ddda4 <__hexnan+0x64>
   ddd96:	2d07      	cmp	r5, #7
   ddd98:	dc04      	bgt.n	ddda4 <__hexnan+0x64>
   ddd9a:	462a      	mov	r2, r5
   ddd9c:	4649      	mov	r1, r9
   ddd9e:	4620      	mov	r0, r4
   ddda0:	f7ff ffa8 	bl	ddcf4 <L_shift>
   ddda4:	4544      	cmp	r4, r8
   ddda6:	d950      	bls.n	dde4a <__hexnan+0x10a>
   ddda8:	2300      	movs	r3, #0
   dddaa:	f1a4 0904 	sub.w	r9, r4, #4
   dddae:	f844 3c04 	str.w	r3, [r4, #-4]
   dddb2:	f8cd b008 	str.w	fp, [sp, #8]
   dddb6:	464c      	mov	r4, r9
   dddb8:	461d      	mov	r5, r3
   dddba:	9903      	ldr	r1, [sp, #12]
   dddbc:	e7d7      	b.n	ddd6e <__hexnan+0x2e>
   dddbe:	2a29      	cmp	r2, #41	; 0x29
   dddc0:	d156      	bne.n	dde70 <__hexnan+0x130>
   dddc2:	3102      	adds	r1, #2
   dddc4:	f8ca 1000 	str.w	r1, [sl]
   dddc8:	f1bb 0f00 	cmp.w	fp, #0
   dddcc:	d050      	beq.n	dde70 <__hexnan+0x130>
   dddce:	454c      	cmp	r4, r9
   dddd0:	d206      	bcs.n	ddde0 <__hexnan+0xa0>
   dddd2:	2d07      	cmp	r5, #7
   dddd4:	dc04      	bgt.n	ddde0 <__hexnan+0xa0>
   dddd6:	462a      	mov	r2, r5
   dddd8:	4649      	mov	r1, r9
   dddda:	4620      	mov	r0, r4
   ddddc:	f7ff ff8a 	bl	ddcf4 <L_shift>
   ddde0:	4544      	cmp	r4, r8
   ddde2:	d934      	bls.n	dde4e <__hexnan+0x10e>
   ddde4:	f1a8 0204 	sub.w	r2, r8, #4
   ddde8:	4623      	mov	r3, r4
   dddea:	f853 1b04 	ldr.w	r1, [r3], #4
   dddee:	f842 1f04 	str.w	r1, [r2, #4]!
   dddf2:	429f      	cmp	r7, r3
   dddf4:	d2f9      	bcs.n	dddea <__hexnan+0xaa>
   dddf6:	1b3b      	subs	r3, r7, r4
   dddf8:	f023 0303 	bic.w	r3, r3, #3
   dddfc:	3304      	adds	r3, #4
   dddfe:	3401      	adds	r4, #1
   dde00:	3e03      	subs	r6, #3
   dde02:	42b4      	cmp	r4, r6
   dde04:	bf88      	it	hi
   dde06:	2304      	movhi	r3, #4
   dde08:	4443      	add	r3, r8
   dde0a:	2200      	movs	r2, #0
   dde0c:	f843 2b04 	str.w	r2, [r3], #4
   dde10:	429f      	cmp	r7, r3
   dde12:	d2fb      	bcs.n	dde0c <__hexnan+0xcc>
   dde14:	683b      	ldr	r3, [r7, #0]
   dde16:	b91b      	cbnz	r3, dde20 <__hexnan+0xe0>
   dde18:	4547      	cmp	r7, r8
   dde1a:	d127      	bne.n	dde6c <__hexnan+0x12c>
   dde1c:	2301      	movs	r3, #1
   dde1e:	603b      	str	r3, [r7, #0]
   dde20:	2005      	movs	r0, #5
   dde22:	e026      	b.n	dde72 <__hexnan+0x132>
   dde24:	3501      	adds	r5, #1
   dde26:	2d08      	cmp	r5, #8
   dde28:	f10b 0b01 	add.w	fp, fp, #1
   dde2c:	dd06      	ble.n	dde3c <__hexnan+0xfc>
   dde2e:	4544      	cmp	r4, r8
   dde30:	d9c3      	bls.n	dddba <__hexnan+0x7a>
   dde32:	2300      	movs	r3, #0
   dde34:	f844 3c04 	str.w	r3, [r4, #-4]
   dde38:	2501      	movs	r5, #1
   dde3a:	3c04      	subs	r4, #4
   dde3c:	6822      	ldr	r2, [r4, #0]
   dde3e:	f000 000f 	and.w	r0, r0, #15
   dde42:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   dde46:	6022      	str	r2, [r4, #0]
   dde48:	e7b7      	b.n	dddba <__hexnan+0x7a>
   dde4a:	2508      	movs	r5, #8
   dde4c:	e7b5      	b.n	dddba <__hexnan+0x7a>
   dde4e:	9b01      	ldr	r3, [sp, #4]
   dde50:	2b00      	cmp	r3, #0
   dde52:	d0df      	beq.n	dde14 <__hexnan+0xd4>
   dde54:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   dde58:	f1c3 0320 	rsb	r3, r3, #32
   dde5c:	fa22 f303 	lsr.w	r3, r2, r3
   dde60:	f856 2c04 	ldr.w	r2, [r6, #-4]
   dde64:	401a      	ands	r2, r3
   dde66:	f846 2c04 	str.w	r2, [r6, #-4]
   dde6a:	e7d3      	b.n	dde14 <__hexnan+0xd4>
   dde6c:	3f04      	subs	r7, #4
   dde6e:	e7d1      	b.n	dde14 <__hexnan+0xd4>
   dde70:	2004      	movs	r0, #4
   dde72:	b007      	add	sp, #28
   dde74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000dde78 <__retarget_lock_acquire_recursive>:
   dde78:	4770      	bx	lr

000dde7a <__retarget_lock_release>:
   dde7a:	4770      	bx	lr

000dde7c <__retarget_lock_release_recursive>:
   dde7c:	4770      	bx	lr

000dde7e <__ascii_mbtowc>:
   dde7e:	b082      	sub	sp, #8
   dde80:	b901      	cbnz	r1, dde84 <__ascii_mbtowc+0x6>
   dde82:	a901      	add	r1, sp, #4
   dde84:	b142      	cbz	r2, dde98 <__ascii_mbtowc+0x1a>
   dde86:	b14b      	cbz	r3, dde9c <__ascii_mbtowc+0x1e>
   dde88:	7813      	ldrb	r3, [r2, #0]
   dde8a:	600b      	str	r3, [r1, #0]
   dde8c:	7812      	ldrb	r2, [r2, #0]
   dde8e:	1e10      	subs	r0, r2, #0
   dde90:	bf18      	it	ne
   dde92:	2001      	movne	r0, #1
   dde94:	b002      	add	sp, #8
   dde96:	4770      	bx	lr
   dde98:	4610      	mov	r0, r2
   dde9a:	e7fb      	b.n	dde94 <__ascii_mbtowc+0x16>
   dde9c:	f06f 0001 	mvn.w	r0, #1
   ddea0:	e7f8      	b.n	dde94 <__ascii_mbtowc+0x16>

000ddea2 <_Balloc>:
   ddea2:	b570      	push	{r4, r5, r6, lr}
   ddea4:	6a46      	ldr	r6, [r0, #36]	; 0x24
   ddea6:	4604      	mov	r4, r0
   ddea8:	460d      	mov	r5, r1
   ddeaa:	b93e      	cbnz	r6, ddebc <_Balloc+0x1a>
   ddeac:	2010      	movs	r0, #16
   ddeae:	f7f9 fd49 	bl	d7944 <malloc>
   ddeb2:	e9c0 6601 	strd	r6, r6, [r0, #4]
   ddeb6:	6260      	str	r0, [r4, #36]	; 0x24
   ddeb8:	6006      	str	r6, [r0, #0]
   ddeba:	60c6      	str	r6, [r0, #12]
   ddebc:	6a66      	ldr	r6, [r4, #36]	; 0x24
   ddebe:	68f3      	ldr	r3, [r6, #12]
   ddec0:	b183      	cbz	r3, ddee4 <_Balloc+0x42>
   ddec2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   ddec4:	68db      	ldr	r3, [r3, #12]
   ddec6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   ddeca:	b9b8      	cbnz	r0, ddefc <_Balloc+0x5a>
   ddecc:	2101      	movs	r1, #1
   ddece:	fa01 f605 	lsl.w	r6, r1, r5
   dded2:	1d72      	adds	r2, r6, #5
   dded4:	0092      	lsls	r2, r2, #2
   dded6:	4620      	mov	r0, r4
   dded8:	f000 fc23 	bl	de722 <_calloc_r>
   ddedc:	b160      	cbz	r0, ddef8 <_Balloc+0x56>
   ddede:	e9c0 5601 	strd	r5, r6, [r0, #4]
   ddee2:	e00e      	b.n	ddf02 <_Balloc+0x60>
   ddee4:	2221      	movs	r2, #33	; 0x21
   ddee6:	2104      	movs	r1, #4
   ddee8:	4620      	mov	r0, r4
   ddeea:	f000 fc1a 	bl	de722 <_calloc_r>
   ddeee:	6a63      	ldr	r3, [r4, #36]	; 0x24
   ddef0:	60f0      	str	r0, [r6, #12]
   ddef2:	68db      	ldr	r3, [r3, #12]
   ddef4:	2b00      	cmp	r3, #0
   ddef6:	d1e4      	bne.n	ddec2 <_Balloc+0x20>
   ddef8:	2000      	movs	r0, #0
   ddefa:	bd70      	pop	{r4, r5, r6, pc}
   ddefc:	6802      	ldr	r2, [r0, #0]
   ddefe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   ddf02:	2300      	movs	r3, #0
   ddf04:	e9c0 3303 	strd	r3, r3, [r0, #12]
   ddf08:	e7f7      	b.n	ddefa <_Balloc+0x58>

000ddf0a <_Bfree>:
   ddf0a:	b570      	push	{r4, r5, r6, lr}
   ddf0c:	6a46      	ldr	r6, [r0, #36]	; 0x24
   ddf0e:	4605      	mov	r5, r0
   ddf10:	460c      	mov	r4, r1
   ddf12:	b93e      	cbnz	r6, ddf24 <_Bfree+0x1a>
   ddf14:	2010      	movs	r0, #16
   ddf16:	f7f9 fd15 	bl	d7944 <malloc>
   ddf1a:	e9c0 6601 	strd	r6, r6, [r0, #4]
   ddf1e:	6268      	str	r0, [r5, #36]	; 0x24
   ddf20:	6006      	str	r6, [r0, #0]
   ddf22:	60c6      	str	r6, [r0, #12]
   ddf24:	b13c      	cbz	r4, ddf36 <_Bfree+0x2c>
   ddf26:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   ddf28:	6862      	ldr	r2, [r4, #4]
   ddf2a:	68db      	ldr	r3, [r3, #12]
   ddf2c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   ddf30:	6021      	str	r1, [r4, #0]
   ddf32:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   ddf36:	bd70      	pop	{r4, r5, r6, pc}

000ddf38 <__multadd>:
   ddf38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   ddf3c:	690e      	ldr	r6, [r1, #16]
   ddf3e:	4607      	mov	r7, r0
   ddf40:	4698      	mov	r8, r3
   ddf42:	460c      	mov	r4, r1
   ddf44:	f101 0014 	add.w	r0, r1, #20
   ddf48:	2300      	movs	r3, #0
   ddf4a:	6805      	ldr	r5, [r0, #0]
   ddf4c:	b2a9      	uxth	r1, r5
   ddf4e:	fb02 8101 	mla	r1, r2, r1, r8
   ddf52:	ea4f 4c11 	mov.w	ip, r1, lsr #16
   ddf56:	0c2d      	lsrs	r5, r5, #16
   ddf58:	fb02 c505 	mla	r5, r2, r5, ip
   ddf5c:	b289      	uxth	r1, r1
   ddf5e:	3301      	adds	r3, #1
   ddf60:	eb01 4105 	add.w	r1, r1, r5, lsl #16
   ddf64:	429e      	cmp	r6, r3
   ddf66:	f840 1b04 	str.w	r1, [r0], #4
   ddf6a:	ea4f 4815 	mov.w	r8, r5, lsr #16
   ddf6e:	dcec      	bgt.n	ddf4a <__multadd+0x12>
   ddf70:	f1b8 0f00 	cmp.w	r8, #0
   ddf74:	d01b      	beq.n	ddfae <__multadd+0x76>
   ddf76:	68a3      	ldr	r3, [r4, #8]
   ddf78:	42b3      	cmp	r3, r6
   ddf7a:	dc12      	bgt.n	ddfa2 <__multadd+0x6a>
   ddf7c:	6861      	ldr	r1, [r4, #4]
   ddf7e:	4638      	mov	r0, r7
   ddf80:	3101      	adds	r1, #1
   ddf82:	f7ff ff8e 	bl	ddea2 <_Balloc>
   ddf86:	6922      	ldr	r2, [r4, #16]
   ddf88:	3202      	adds	r2, #2
   ddf8a:	f104 010c 	add.w	r1, r4, #12
   ddf8e:	4605      	mov	r5, r0
   ddf90:	0092      	lsls	r2, r2, #2
   ddf92:	300c      	adds	r0, #12
   ddf94:	f7fe fbb2 	bl	dc6fc <memcpy>
   ddf98:	4621      	mov	r1, r4
   ddf9a:	4638      	mov	r0, r7
   ddf9c:	f7ff ffb5 	bl	ddf0a <_Bfree>
   ddfa0:	462c      	mov	r4, r5
   ddfa2:	eb04 0386 	add.w	r3, r4, r6, lsl #2
   ddfa6:	3601      	adds	r6, #1
   ddfa8:	f8c3 8014 	str.w	r8, [r3, #20]
   ddfac:	6126      	str	r6, [r4, #16]
   ddfae:	4620      	mov	r0, r4
   ddfb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000ddfb4 <__s2b>:
   ddfb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   ddfb8:	460c      	mov	r4, r1
   ddfba:	4615      	mov	r5, r2
   ddfbc:	461f      	mov	r7, r3
   ddfbe:	2209      	movs	r2, #9
   ddfc0:	3308      	adds	r3, #8
   ddfc2:	4606      	mov	r6, r0
   ddfc4:	fb93 f3f2 	sdiv	r3, r3, r2
   ddfc8:	2100      	movs	r1, #0
   ddfca:	2201      	movs	r2, #1
   ddfcc:	429a      	cmp	r2, r3
   ddfce:	db20      	blt.n	de012 <__s2b+0x5e>
   ddfd0:	4630      	mov	r0, r6
   ddfd2:	f7ff ff66 	bl	ddea2 <_Balloc>
   ddfd6:	9b08      	ldr	r3, [sp, #32]
   ddfd8:	6143      	str	r3, [r0, #20]
   ddfda:	2d09      	cmp	r5, #9
   ddfdc:	f04f 0301 	mov.w	r3, #1
   ddfe0:	6103      	str	r3, [r0, #16]
   ddfe2:	dd19      	ble.n	de018 <__s2b+0x64>
   ddfe4:	f104 0909 	add.w	r9, r4, #9
   ddfe8:	46c8      	mov	r8, r9
   ddfea:	442c      	add	r4, r5
   ddfec:	f818 3b01 	ldrb.w	r3, [r8], #1
   ddff0:	4601      	mov	r1, r0
   ddff2:	3b30      	subs	r3, #48	; 0x30
   ddff4:	220a      	movs	r2, #10
   ddff6:	4630      	mov	r0, r6
   ddff8:	f7ff ff9e 	bl	ddf38 <__multadd>
   ddffc:	45a0      	cmp	r8, r4
   ddffe:	d1f5      	bne.n	ddfec <__s2b+0x38>
   de000:	f1a5 0408 	sub.w	r4, r5, #8
   de004:	444c      	add	r4, r9
   de006:	1b2d      	subs	r5, r5, r4
   de008:	1963      	adds	r3, r4, r5
   de00a:	42bb      	cmp	r3, r7
   de00c:	db07      	blt.n	de01e <__s2b+0x6a>
   de00e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   de012:	0052      	lsls	r2, r2, #1
   de014:	3101      	adds	r1, #1
   de016:	e7d9      	b.n	ddfcc <__s2b+0x18>
   de018:	340a      	adds	r4, #10
   de01a:	2509      	movs	r5, #9
   de01c:	e7f3      	b.n	de006 <__s2b+0x52>
   de01e:	f814 3b01 	ldrb.w	r3, [r4], #1
   de022:	4601      	mov	r1, r0
   de024:	3b30      	subs	r3, #48	; 0x30
   de026:	220a      	movs	r2, #10
   de028:	4630      	mov	r0, r6
   de02a:	f7ff ff85 	bl	ddf38 <__multadd>
   de02e:	e7eb      	b.n	de008 <__s2b+0x54>

000de030 <__hi0bits>:
   de030:	0c03      	lsrs	r3, r0, #16
   de032:	041b      	lsls	r3, r3, #16
   de034:	b9d3      	cbnz	r3, de06c <__hi0bits+0x3c>
   de036:	0400      	lsls	r0, r0, #16
   de038:	2310      	movs	r3, #16
   de03a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   de03e:	bf04      	itt	eq
   de040:	0200      	lsleq	r0, r0, #8
   de042:	3308      	addeq	r3, #8
   de044:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   de048:	bf04      	itt	eq
   de04a:	0100      	lsleq	r0, r0, #4
   de04c:	3304      	addeq	r3, #4
   de04e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   de052:	bf04      	itt	eq
   de054:	0080      	lsleq	r0, r0, #2
   de056:	3302      	addeq	r3, #2
   de058:	2800      	cmp	r0, #0
   de05a:	db05      	blt.n	de068 <__hi0bits+0x38>
   de05c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   de060:	f103 0301 	add.w	r3, r3, #1
   de064:	bf08      	it	eq
   de066:	2320      	moveq	r3, #32
   de068:	4618      	mov	r0, r3
   de06a:	4770      	bx	lr
   de06c:	2300      	movs	r3, #0
   de06e:	e7e4      	b.n	de03a <__hi0bits+0xa>

000de070 <__lo0bits>:
   de070:	6803      	ldr	r3, [r0, #0]
   de072:	f013 0207 	ands.w	r2, r3, #7
   de076:	4601      	mov	r1, r0
   de078:	d00b      	beq.n	de092 <__lo0bits+0x22>
   de07a:	07da      	lsls	r2, r3, #31
   de07c:	d424      	bmi.n	de0c8 <__lo0bits+0x58>
   de07e:	0798      	lsls	r0, r3, #30
   de080:	bf49      	itett	mi
   de082:	085b      	lsrmi	r3, r3, #1
   de084:	089b      	lsrpl	r3, r3, #2
   de086:	2001      	movmi	r0, #1
   de088:	600b      	strmi	r3, [r1, #0]
   de08a:	bf5c      	itt	pl
   de08c:	600b      	strpl	r3, [r1, #0]
   de08e:	2002      	movpl	r0, #2
   de090:	4770      	bx	lr
   de092:	b298      	uxth	r0, r3
   de094:	b9b0      	cbnz	r0, de0c4 <__lo0bits+0x54>
   de096:	0c1b      	lsrs	r3, r3, #16
   de098:	2010      	movs	r0, #16
   de09a:	f013 0fff 	tst.w	r3, #255	; 0xff
   de09e:	bf04      	itt	eq
   de0a0:	0a1b      	lsreq	r3, r3, #8
   de0a2:	3008      	addeq	r0, #8
   de0a4:	071a      	lsls	r2, r3, #28
   de0a6:	bf04      	itt	eq
   de0a8:	091b      	lsreq	r3, r3, #4
   de0aa:	3004      	addeq	r0, #4
   de0ac:	079a      	lsls	r2, r3, #30
   de0ae:	bf04      	itt	eq
   de0b0:	089b      	lsreq	r3, r3, #2
   de0b2:	3002      	addeq	r0, #2
   de0b4:	07da      	lsls	r2, r3, #31
   de0b6:	d403      	bmi.n	de0c0 <__lo0bits+0x50>
   de0b8:	085b      	lsrs	r3, r3, #1
   de0ba:	f100 0001 	add.w	r0, r0, #1
   de0be:	d005      	beq.n	de0cc <__lo0bits+0x5c>
   de0c0:	600b      	str	r3, [r1, #0]
   de0c2:	4770      	bx	lr
   de0c4:	4610      	mov	r0, r2
   de0c6:	e7e8      	b.n	de09a <__lo0bits+0x2a>
   de0c8:	2000      	movs	r0, #0
   de0ca:	4770      	bx	lr
   de0cc:	2020      	movs	r0, #32
   de0ce:	4770      	bx	lr

000de0d0 <__i2b>:
   de0d0:	b510      	push	{r4, lr}
   de0d2:	460c      	mov	r4, r1
   de0d4:	2101      	movs	r1, #1
   de0d6:	f7ff fee4 	bl	ddea2 <_Balloc>
   de0da:	2201      	movs	r2, #1
   de0dc:	6144      	str	r4, [r0, #20]
   de0de:	6102      	str	r2, [r0, #16]
   de0e0:	bd10      	pop	{r4, pc}

000de0e2 <__multiply>:
   de0e2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   de0e6:	4615      	mov	r5, r2
   de0e8:	690a      	ldr	r2, [r1, #16]
   de0ea:	692b      	ldr	r3, [r5, #16]
   de0ec:	429a      	cmp	r2, r3
   de0ee:	bfb8      	it	lt
   de0f0:	460b      	movlt	r3, r1
   de0f2:	460c      	mov	r4, r1
   de0f4:	bfbc      	itt	lt
   de0f6:	462c      	movlt	r4, r5
   de0f8:	461d      	movlt	r5, r3
   de0fa:	6927      	ldr	r7, [r4, #16]
   de0fc:	f8d5 9010 	ldr.w	r9, [r5, #16]
   de100:	68a3      	ldr	r3, [r4, #8]
   de102:	6861      	ldr	r1, [r4, #4]
   de104:	eb07 0609 	add.w	r6, r7, r9
   de108:	42b3      	cmp	r3, r6
   de10a:	bfb8      	it	lt
   de10c:	3101      	addlt	r1, #1
   de10e:	b085      	sub	sp, #20
   de110:	f7ff fec7 	bl	ddea2 <_Balloc>
   de114:	f100 0114 	add.w	r1, r0, #20
   de118:	eb01 0886 	add.w	r8, r1, r6, lsl #2
   de11c:	460b      	mov	r3, r1
   de11e:	2200      	movs	r2, #0
   de120:	4543      	cmp	r3, r8
   de122:	d31d      	bcc.n	de160 <__multiply+0x7e>
   de124:	f104 0314 	add.w	r3, r4, #20
   de128:	f105 0214 	add.w	r2, r5, #20
   de12c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   de130:	eb02 0389 	add.w	r3, r2, r9, lsl #2
   de134:	9302      	str	r3, [sp, #8]
   de136:	1b3b      	subs	r3, r7, r4
   de138:	3b15      	subs	r3, #21
   de13a:	f023 0303 	bic.w	r3, r3, #3
   de13e:	3304      	adds	r3, #4
   de140:	f104 0515 	add.w	r5, r4, #21
   de144:	42af      	cmp	r7, r5
   de146:	bf38      	it	cc
   de148:	2304      	movcc	r3, #4
   de14a:	9301      	str	r3, [sp, #4]
   de14c:	9b02      	ldr	r3, [sp, #8]
   de14e:	9203      	str	r2, [sp, #12]
   de150:	4293      	cmp	r3, r2
   de152:	d808      	bhi.n	de166 <__multiply+0x84>
   de154:	2e00      	cmp	r6, #0
   de156:	dc5a      	bgt.n	de20e <__multiply+0x12c>
   de158:	6106      	str	r6, [r0, #16]
   de15a:	b005      	add	sp, #20
   de15c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   de160:	f843 2b04 	str.w	r2, [r3], #4
   de164:	e7dc      	b.n	de120 <__multiply+0x3e>
   de166:	f8b2 a000 	ldrh.w	sl, [r2]
   de16a:	f1ba 0f00 	cmp.w	sl, #0
   de16e:	d024      	beq.n	de1ba <__multiply+0xd8>
   de170:	f104 0e14 	add.w	lr, r4, #20
   de174:	4689      	mov	r9, r1
   de176:	f04f 0c00 	mov.w	ip, #0
   de17a:	f85e 5b04 	ldr.w	r5, [lr], #4
   de17e:	f8d9 b000 	ldr.w	fp, [r9]
   de182:	b2ab      	uxth	r3, r5
   de184:	fa1f fb8b 	uxth.w	fp, fp
   de188:	fb0a b303 	mla	r3, sl, r3, fp
   de18c:	ea4f 4b15 	mov.w	fp, r5, lsr #16
   de190:	f8d9 5000 	ldr.w	r5, [r9]
   de194:	4463      	add	r3, ip
   de196:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   de19a:	fb0a c50b 	mla	r5, sl, fp, ip
   de19e:	eb05 4513 	add.w	r5, r5, r3, lsr #16
   de1a2:	b29b      	uxth	r3, r3
   de1a4:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
   de1a8:	4577      	cmp	r7, lr
   de1aa:	f849 3b04 	str.w	r3, [r9], #4
   de1ae:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   de1b2:	d8e2      	bhi.n	de17a <__multiply+0x98>
   de1b4:	9b01      	ldr	r3, [sp, #4]
   de1b6:	f841 c003 	str.w	ip, [r1, r3]
   de1ba:	9b03      	ldr	r3, [sp, #12]
   de1bc:	f8b3 9002 	ldrh.w	r9, [r3, #2]
   de1c0:	3204      	adds	r2, #4
   de1c2:	f1b9 0f00 	cmp.w	r9, #0
   de1c6:	d020      	beq.n	de20a <__multiply+0x128>
   de1c8:	680b      	ldr	r3, [r1, #0]
   de1ca:	f104 0c14 	add.w	ip, r4, #20
   de1ce:	468e      	mov	lr, r1
   de1d0:	f04f 0a00 	mov.w	sl, #0
   de1d4:	f8bc 5000 	ldrh.w	r5, [ip]
   de1d8:	f8be b002 	ldrh.w	fp, [lr, #2]
   de1dc:	fb09 b505 	mla	r5, r9, r5, fp
   de1e0:	44aa      	add	sl, r5
   de1e2:	b29b      	uxth	r3, r3
   de1e4:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
   de1e8:	f84e 3b04 	str.w	r3, [lr], #4
   de1ec:	f85c 3b04 	ldr.w	r3, [ip], #4
   de1f0:	f8be 5000 	ldrh.w	r5, [lr]
   de1f4:	0c1b      	lsrs	r3, r3, #16
   de1f6:	fb09 5303 	mla	r3, r9, r3, r5
   de1fa:	eb03 431a 	add.w	r3, r3, sl, lsr #16
   de1fe:	4567      	cmp	r7, ip
   de200:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   de204:	d8e6      	bhi.n	de1d4 <__multiply+0xf2>
   de206:	9d01      	ldr	r5, [sp, #4]
   de208:	514b      	str	r3, [r1, r5]
   de20a:	3104      	adds	r1, #4
   de20c:	e79e      	b.n	de14c <__multiply+0x6a>
   de20e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   de212:	2b00      	cmp	r3, #0
   de214:	d1a0      	bne.n	de158 <__multiply+0x76>
   de216:	3e01      	subs	r6, #1
   de218:	e79c      	b.n	de154 <__multiply+0x72>
	...

000de21c <__pow5mult>:
   de21c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   de220:	4615      	mov	r5, r2
   de222:	f012 0203 	ands.w	r2, r2, #3
   de226:	4606      	mov	r6, r0
   de228:	460f      	mov	r7, r1
   de22a:	d007      	beq.n	de23c <__pow5mult+0x20>
   de22c:	4c21      	ldr	r4, [pc, #132]	; (de2b4 <__pow5mult+0x98>)
   de22e:	3a01      	subs	r2, #1
   de230:	2300      	movs	r3, #0
   de232:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   de236:	f7ff fe7f 	bl	ddf38 <__multadd>
   de23a:	4607      	mov	r7, r0
   de23c:	10ad      	asrs	r5, r5, #2
   de23e:	d035      	beq.n	de2ac <__pow5mult+0x90>
   de240:	6a74      	ldr	r4, [r6, #36]	; 0x24
   de242:	b93c      	cbnz	r4, de254 <__pow5mult+0x38>
   de244:	2010      	movs	r0, #16
   de246:	f7f9 fb7d 	bl	d7944 <malloc>
   de24a:	e9c0 4401 	strd	r4, r4, [r0, #4]
   de24e:	6270      	str	r0, [r6, #36]	; 0x24
   de250:	6004      	str	r4, [r0, #0]
   de252:	60c4      	str	r4, [r0, #12]
   de254:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   de258:	f8d8 4008 	ldr.w	r4, [r8, #8]
   de25c:	b94c      	cbnz	r4, de272 <__pow5mult+0x56>
   de25e:	f240 2171 	movw	r1, #625	; 0x271
   de262:	4630      	mov	r0, r6
   de264:	f7ff ff34 	bl	de0d0 <__i2b>
   de268:	2300      	movs	r3, #0
   de26a:	f8c8 0008 	str.w	r0, [r8, #8]
   de26e:	4604      	mov	r4, r0
   de270:	6003      	str	r3, [r0, #0]
   de272:	f04f 0900 	mov.w	r9, #0
   de276:	07eb      	lsls	r3, r5, #31
   de278:	d50a      	bpl.n	de290 <__pow5mult+0x74>
   de27a:	4639      	mov	r1, r7
   de27c:	4622      	mov	r2, r4
   de27e:	4630      	mov	r0, r6
   de280:	f7ff ff2f 	bl	de0e2 <__multiply>
   de284:	4639      	mov	r1, r7
   de286:	4680      	mov	r8, r0
   de288:	4630      	mov	r0, r6
   de28a:	f7ff fe3e 	bl	ddf0a <_Bfree>
   de28e:	4647      	mov	r7, r8
   de290:	106d      	asrs	r5, r5, #1
   de292:	d00b      	beq.n	de2ac <__pow5mult+0x90>
   de294:	6820      	ldr	r0, [r4, #0]
   de296:	b938      	cbnz	r0, de2a8 <__pow5mult+0x8c>
   de298:	4622      	mov	r2, r4
   de29a:	4621      	mov	r1, r4
   de29c:	4630      	mov	r0, r6
   de29e:	f7ff ff20 	bl	de0e2 <__multiply>
   de2a2:	6020      	str	r0, [r4, #0]
   de2a4:	f8c0 9000 	str.w	r9, [r0]
   de2a8:	4604      	mov	r4, r0
   de2aa:	e7e4      	b.n	de276 <__pow5mult+0x5a>
   de2ac:	4638      	mov	r0, r7
   de2ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   de2b2:	bf00      	nop
   de2b4:	000df810 	.word	0x000df810

000de2b8 <__lshift>:
   de2b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   de2bc:	460c      	mov	r4, r1
   de2be:	6849      	ldr	r1, [r1, #4]
   de2c0:	6923      	ldr	r3, [r4, #16]
   de2c2:	eb03 1862 	add.w	r8, r3, r2, asr #5
   de2c6:	68a3      	ldr	r3, [r4, #8]
   de2c8:	4607      	mov	r7, r0
   de2ca:	4691      	mov	r9, r2
   de2cc:	ea4f 1a62 	mov.w	sl, r2, asr #5
   de2d0:	f108 0601 	add.w	r6, r8, #1
   de2d4:	42b3      	cmp	r3, r6
   de2d6:	db3f      	blt.n	de358 <__lshift+0xa0>
   de2d8:	4638      	mov	r0, r7
   de2da:	f7ff fde2 	bl	ddea2 <_Balloc>
   de2de:	2300      	movs	r3, #0
   de2e0:	4605      	mov	r5, r0
   de2e2:	f100 0114 	add.w	r1, r0, #20
   de2e6:	f100 0210 	add.w	r2, r0, #16
   de2ea:	4618      	mov	r0, r3
   de2ec:	4553      	cmp	r3, sl
   de2ee:	db36      	blt.n	de35e <__lshift+0xa6>
   de2f0:	6920      	ldr	r0, [r4, #16]
   de2f2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   de2f6:	f104 0314 	add.w	r3, r4, #20
   de2fa:	f019 091f 	ands.w	r9, r9, #31
   de2fe:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   de302:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   de306:	d02e      	beq.n	de366 <__lshift+0xae>
   de308:	f1c9 0e20 	rsb	lr, r9, #32
   de30c:	468a      	mov	sl, r1
   de30e:	2200      	movs	r2, #0
   de310:	6818      	ldr	r0, [r3, #0]
   de312:	fa00 f009 	lsl.w	r0, r0, r9
   de316:	4302      	orrs	r2, r0
   de318:	f84a 2b04 	str.w	r2, [sl], #4
   de31c:	f853 2b04 	ldr.w	r2, [r3], #4
   de320:	459c      	cmp	ip, r3
   de322:	fa22 f20e 	lsr.w	r2, r2, lr
   de326:	d8f3      	bhi.n	de310 <__lshift+0x58>
   de328:	ebac 0304 	sub.w	r3, ip, r4
   de32c:	3b15      	subs	r3, #21
   de32e:	f023 0303 	bic.w	r3, r3, #3
   de332:	3304      	adds	r3, #4
   de334:	f104 0015 	add.w	r0, r4, #21
   de338:	4560      	cmp	r0, ip
   de33a:	bf88      	it	hi
   de33c:	2304      	movhi	r3, #4
   de33e:	50ca      	str	r2, [r1, r3]
   de340:	b10a      	cbz	r2, de346 <__lshift+0x8e>
   de342:	f108 0602 	add.w	r6, r8, #2
   de346:	3e01      	subs	r6, #1
   de348:	4638      	mov	r0, r7
   de34a:	612e      	str	r6, [r5, #16]
   de34c:	4621      	mov	r1, r4
   de34e:	f7ff fddc 	bl	ddf0a <_Bfree>
   de352:	4628      	mov	r0, r5
   de354:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   de358:	3101      	adds	r1, #1
   de35a:	005b      	lsls	r3, r3, #1
   de35c:	e7ba      	b.n	de2d4 <__lshift+0x1c>
   de35e:	f842 0f04 	str.w	r0, [r2, #4]!
   de362:	3301      	adds	r3, #1
   de364:	e7c2      	b.n	de2ec <__lshift+0x34>
   de366:	3904      	subs	r1, #4
   de368:	f853 2b04 	ldr.w	r2, [r3], #4
   de36c:	f841 2f04 	str.w	r2, [r1, #4]!
   de370:	459c      	cmp	ip, r3
   de372:	d8f9      	bhi.n	de368 <__lshift+0xb0>
   de374:	e7e7      	b.n	de346 <__lshift+0x8e>

000de376 <__mcmp>:
   de376:	b530      	push	{r4, r5, lr}
   de378:	6902      	ldr	r2, [r0, #16]
   de37a:	690c      	ldr	r4, [r1, #16]
   de37c:	1b12      	subs	r2, r2, r4
   de37e:	d10e      	bne.n	de39e <__mcmp+0x28>
   de380:	f100 0314 	add.w	r3, r0, #20
   de384:	3114      	adds	r1, #20
   de386:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   de38a:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   de38e:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   de392:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   de396:	42a5      	cmp	r5, r4
   de398:	d003      	beq.n	de3a2 <__mcmp+0x2c>
   de39a:	d305      	bcc.n	de3a8 <__mcmp+0x32>
   de39c:	2201      	movs	r2, #1
   de39e:	4610      	mov	r0, r2
   de3a0:	bd30      	pop	{r4, r5, pc}
   de3a2:	4283      	cmp	r3, r0
   de3a4:	d3f3      	bcc.n	de38e <__mcmp+0x18>
   de3a6:	e7fa      	b.n	de39e <__mcmp+0x28>
   de3a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   de3ac:	e7f7      	b.n	de39e <__mcmp+0x28>

000de3ae <__mdiff>:
   de3ae:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   de3b2:	460c      	mov	r4, r1
   de3b4:	4606      	mov	r6, r0
   de3b6:	4611      	mov	r1, r2
   de3b8:	4620      	mov	r0, r4
   de3ba:	4617      	mov	r7, r2
   de3bc:	f7ff ffdb 	bl	de376 <__mcmp>
   de3c0:	1e05      	subs	r5, r0, #0
   de3c2:	d108      	bne.n	de3d6 <__mdiff+0x28>
   de3c4:	4629      	mov	r1, r5
   de3c6:	4630      	mov	r0, r6
   de3c8:	f7ff fd6b 	bl	ddea2 <_Balloc>
   de3cc:	2301      	movs	r3, #1
   de3ce:	e9c0 3504 	strd	r3, r5, [r0, #16]
   de3d2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   de3d6:	bfa4      	itt	ge
   de3d8:	463b      	movge	r3, r7
   de3da:	4627      	movge	r7, r4
   de3dc:	4630      	mov	r0, r6
   de3de:	6879      	ldr	r1, [r7, #4]
   de3e0:	bfa6      	itte	ge
   de3e2:	461c      	movge	r4, r3
   de3e4:	2500      	movge	r5, #0
   de3e6:	2501      	movlt	r5, #1
   de3e8:	f7ff fd5b 	bl	ddea2 <_Balloc>
   de3ec:	693e      	ldr	r6, [r7, #16]
   de3ee:	60c5      	str	r5, [r0, #12]
   de3f0:	6925      	ldr	r5, [r4, #16]
   de3f2:	f107 0114 	add.w	r1, r7, #20
   de3f6:	f104 0914 	add.w	r9, r4, #20
   de3fa:	f100 0e14 	add.w	lr, r0, #20
   de3fe:	f107 0210 	add.w	r2, r7, #16
   de402:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
   de406:	eb09 0585 	add.w	r5, r9, r5, lsl #2
   de40a:	46f2      	mov	sl, lr
   de40c:	2700      	movs	r7, #0
   de40e:	f859 3b04 	ldr.w	r3, [r9], #4
   de412:	f852 bf04 	ldr.w	fp, [r2, #4]!
   de416:	fa1f f883 	uxth.w	r8, r3
   de41a:	fa17 f78b 	uxtah	r7, r7, fp
   de41e:	0c1b      	lsrs	r3, r3, #16
   de420:	eba7 0808 	sub.w	r8, r7, r8
   de424:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   de428:	eb03 4328 	add.w	r3, r3, r8, asr #16
   de42c:	fa1f f888 	uxth.w	r8, r8
   de430:	141f      	asrs	r7, r3, #16
   de432:	454d      	cmp	r5, r9
   de434:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   de438:	f84a 3b04 	str.w	r3, [sl], #4
   de43c:	d8e7      	bhi.n	de40e <__mdiff+0x60>
   de43e:	1b2b      	subs	r3, r5, r4
   de440:	3b15      	subs	r3, #21
   de442:	f023 0303 	bic.w	r3, r3, #3
   de446:	3304      	adds	r3, #4
   de448:	3415      	adds	r4, #21
   de44a:	42a5      	cmp	r5, r4
   de44c:	bf38      	it	cc
   de44e:	2304      	movcc	r3, #4
   de450:	4419      	add	r1, r3
   de452:	4473      	add	r3, lr
   de454:	469e      	mov	lr, r3
   de456:	460d      	mov	r5, r1
   de458:	4565      	cmp	r5, ip
   de45a:	d30e      	bcc.n	de47a <__mdiff+0xcc>
   de45c:	f10c 0203 	add.w	r2, ip, #3
   de460:	1a52      	subs	r2, r2, r1
   de462:	f022 0203 	bic.w	r2, r2, #3
   de466:	3903      	subs	r1, #3
   de468:	458c      	cmp	ip, r1
   de46a:	bf38      	it	cc
   de46c:	2200      	movcc	r2, #0
   de46e:	441a      	add	r2, r3
   de470:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   de474:	b17b      	cbz	r3, de496 <__mdiff+0xe8>
   de476:	6106      	str	r6, [r0, #16]
   de478:	e7ab      	b.n	de3d2 <__mdiff+0x24>
   de47a:	f855 8b04 	ldr.w	r8, [r5], #4
   de47e:	fa17 f488 	uxtah	r4, r7, r8
   de482:	1422      	asrs	r2, r4, #16
   de484:	eb02 4218 	add.w	r2, r2, r8, lsr #16
   de488:	b2a4      	uxth	r4, r4
   de48a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
   de48e:	f84e 4b04 	str.w	r4, [lr], #4
   de492:	1417      	asrs	r7, r2, #16
   de494:	e7e0      	b.n	de458 <__mdiff+0xaa>
   de496:	3e01      	subs	r6, #1
   de498:	e7ea      	b.n	de470 <__mdiff+0xc2>
	...

000de49c <__ulp>:
   de49c:	b082      	sub	sp, #8
   de49e:	ed8d 0b00 	vstr	d0, [sp]
   de4a2:	9b01      	ldr	r3, [sp, #4]
   de4a4:	4912      	ldr	r1, [pc, #72]	; (de4f0 <__ulp+0x54>)
   de4a6:	4019      	ands	r1, r3
   de4a8:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
   de4ac:	2900      	cmp	r1, #0
   de4ae:	dd05      	ble.n	de4bc <__ulp+0x20>
   de4b0:	2200      	movs	r2, #0
   de4b2:	460b      	mov	r3, r1
   de4b4:	ec43 2b10 	vmov	d0, r2, r3
   de4b8:	b002      	add	sp, #8
   de4ba:	4770      	bx	lr
   de4bc:	4249      	negs	r1, r1
   de4be:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
   de4c2:	ea4f 5021 	mov.w	r0, r1, asr #20
   de4c6:	f04f 0200 	mov.w	r2, #0
   de4ca:	f04f 0300 	mov.w	r3, #0
   de4ce:	da04      	bge.n	de4da <__ulp+0x3e>
   de4d0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   de4d4:	fa41 f300 	asr.w	r3, r1, r0
   de4d8:	e7ec      	b.n	de4b4 <__ulp+0x18>
   de4da:	f1a0 0114 	sub.w	r1, r0, #20
   de4de:	291e      	cmp	r1, #30
   de4e0:	bfda      	itte	le
   de4e2:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
   de4e6:	fa20 f101 	lsrle.w	r1, r0, r1
   de4ea:	2101      	movgt	r1, #1
   de4ec:	460a      	mov	r2, r1
   de4ee:	e7e1      	b.n	de4b4 <__ulp+0x18>
   de4f0:	7ff00000 	.word	0x7ff00000

000de4f4 <__b2d>:
   de4f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   de4f6:	6905      	ldr	r5, [r0, #16]
   de4f8:	f100 0714 	add.w	r7, r0, #20
   de4fc:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   de500:	1f2e      	subs	r6, r5, #4
   de502:	f855 4c04 	ldr.w	r4, [r5, #-4]
   de506:	4620      	mov	r0, r4
   de508:	f7ff fd92 	bl	de030 <__hi0bits>
   de50c:	f1c0 0320 	rsb	r3, r0, #32
   de510:	280a      	cmp	r0, #10
   de512:	f8df c07c 	ldr.w	ip, [pc, #124]	; de590 <__b2d+0x9c>
   de516:	600b      	str	r3, [r1, #0]
   de518:	dc14      	bgt.n	de544 <__b2d+0x50>
   de51a:	f1c0 0e0b 	rsb	lr, r0, #11
   de51e:	fa24 f10e 	lsr.w	r1, r4, lr
   de522:	42b7      	cmp	r7, r6
   de524:	ea41 030c 	orr.w	r3, r1, ip
   de528:	bf34      	ite	cc
   de52a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   de52e:	2100      	movcs	r1, #0
   de530:	3015      	adds	r0, #21
   de532:	fa04 f000 	lsl.w	r0, r4, r0
   de536:	fa21 f10e 	lsr.w	r1, r1, lr
   de53a:	ea40 0201 	orr.w	r2, r0, r1
   de53e:	ec43 2b10 	vmov	d0, r2, r3
   de542:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   de544:	42b7      	cmp	r7, r6
   de546:	bf3a      	itte	cc
   de548:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   de54c:	f1a5 0608 	subcc.w	r6, r5, #8
   de550:	2100      	movcs	r1, #0
   de552:	380b      	subs	r0, #11
   de554:	d017      	beq.n	de586 <__b2d+0x92>
   de556:	f1c0 0c20 	rsb	ip, r0, #32
   de55a:	fa04 f500 	lsl.w	r5, r4, r0
   de55e:	42be      	cmp	r6, r7
   de560:	fa21 f40c 	lsr.w	r4, r1, ip
   de564:	ea45 0504 	orr.w	r5, r5, r4
   de568:	bf8c      	ite	hi
   de56a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   de56e:	2400      	movls	r4, #0
   de570:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   de574:	fa01 f000 	lsl.w	r0, r1, r0
   de578:	fa24 f40c 	lsr.w	r4, r4, ip
   de57c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   de580:	ea40 0204 	orr.w	r2, r0, r4
   de584:	e7db      	b.n	de53e <__b2d+0x4a>
   de586:	ea44 030c 	orr.w	r3, r4, ip
   de58a:	460a      	mov	r2, r1
   de58c:	e7d7      	b.n	de53e <__b2d+0x4a>
   de58e:	bf00      	nop
   de590:	3ff00000 	.word	0x3ff00000

000de594 <__d2b>:
   de594:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   de598:	4689      	mov	r9, r1
   de59a:	2101      	movs	r1, #1
   de59c:	ec57 6b10 	vmov	r6, r7, d0
   de5a0:	4690      	mov	r8, r2
   de5a2:	f7ff fc7e 	bl	ddea2 <_Balloc>
   de5a6:	f3c7 550a 	ubfx	r5, r7, #20, #11
   de5aa:	4604      	mov	r4, r0
   de5ac:	f3c7 0313 	ubfx	r3, r7, #0, #20
   de5b0:	bb35      	cbnz	r5, de600 <__d2b+0x6c>
   de5b2:	2e00      	cmp	r6, #0
   de5b4:	9301      	str	r3, [sp, #4]
   de5b6:	d028      	beq.n	de60a <__d2b+0x76>
   de5b8:	4668      	mov	r0, sp
   de5ba:	9600      	str	r6, [sp, #0]
   de5bc:	f7ff fd58 	bl	de070 <__lo0bits>
   de5c0:	9900      	ldr	r1, [sp, #0]
   de5c2:	b300      	cbz	r0, de606 <__d2b+0x72>
   de5c4:	9a01      	ldr	r2, [sp, #4]
   de5c6:	f1c0 0320 	rsb	r3, r0, #32
   de5ca:	fa02 f303 	lsl.w	r3, r2, r3
   de5ce:	430b      	orrs	r3, r1
   de5d0:	40c2      	lsrs	r2, r0
   de5d2:	6163      	str	r3, [r4, #20]
   de5d4:	9201      	str	r2, [sp, #4]
   de5d6:	9b01      	ldr	r3, [sp, #4]
   de5d8:	61a3      	str	r3, [r4, #24]
   de5da:	2b00      	cmp	r3, #0
   de5dc:	bf14      	ite	ne
   de5de:	2202      	movne	r2, #2
   de5e0:	2201      	moveq	r2, #1
   de5e2:	6122      	str	r2, [r4, #16]
   de5e4:	b1d5      	cbz	r5, de61c <__d2b+0x88>
   de5e6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   de5ea:	4405      	add	r5, r0
   de5ec:	f8c9 5000 	str.w	r5, [r9]
   de5f0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   de5f4:	f8c8 0000 	str.w	r0, [r8]
   de5f8:	4620      	mov	r0, r4
   de5fa:	b003      	add	sp, #12
   de5fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   de600:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   de604:	e7d5      	b.n	de5b2 <__d2b+0x1e>
   de606:	6161      	str	r1, [r4, #20]
   de608:	e7e5      	b.n	de5d6 <__d2b+0x42>
   de60a:	a801      	add	r0, sp, #4
   de60c:	f7ff fd30 	bl	de070 <__lo0bits>
   de610:	9b01      	ldr	r3, [sp, #4]
   de612:	6163      	str	r3, [r4, #20]
   de614:	2201      	movs	r2, #1
   de616:	6122      	str	r2, [r4, #16]
   de618:	3020      	adds	r0, #32
   de61a:	e7e3      	b.n	de5e4 <__d2b+0x50>
   de61c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   de620:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   de624:	f8c9 0000 	str.w	r0, [r9]
   de628:	6918      	ldr	r0, [r3, #16]
   de62a:	f7ff fd01 	bl	de030 <__hi0bits>
   de62e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   de632:	e7df      	b.n	de5f4 <__d2b+0x60>

000de634 <__ratio>:
   de634:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   de638:	4688      	mov	r8, r1
   de63a:	4669      	mov	r1, sp
   de63c:	4681      	mov	r9, r0
   de63e:	f7ff ff59 	bl	de4f4 <__b2d>
   de642:	a901      	add	r1, sp, #4
   de644:	4640      	mov	r0, r8
   de646:	ec55 4b10 	vmov	r4, r5, d0
   de64a:	f7ff ff53 	bl	de4f4 <__b2d>
   de64e:	f8d9 3010 	ldr.w	r3, [r9, #16]
   de652:	f8d8 2010 	ldr.w	r2, [r8, #16]
   de656:	eba3 0c02 	sub.w	ip, r3, r2
   de65a:	e9dd 3200 	ldrd	r3, r2, [sp]
   de65e:	1a9b      	subs	r3, r3, r2
   de660:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   de664:	ec51 0b10 	vmov	r0, r1, d0
   de668:	2b00      	cmp	r3, #0
   de66a:	bfd6      	itet	le
   de66c:	460a      	movle	r2, r1
   de66e:	462a      	movgt	r2, r5
   de670:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   de674:	468b      	mov	fp, r1
   de676:	462f      	mov	r7, r5
   de678:	bfd4      	ite	le
   de67a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   de67e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   de682:	4620      	mov	r0, r4
   de684:	ee10 2a10 	vmov	r2, s0
   de688:	465b      	mov	r3, fp
   de68a:	4639      	mov	r1, r7
   de68c:	f7fd fc46 	bl	dbf1c <__aeabi_ddiv>
   de690:	ec41 0b10 	vmov	d0, r0, r1
   de694:	b003      	add	sp, #12
   de696:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000de69a <__copybits>:
   de69a:	3901      	subs	r1, #1
   de69c:	b570      	push	{r4, r5, r6, lr}
   de69e:	1149      	asrs	r1, r1, #5
   de6a0:	6914      	ldr	r4, [r2, #16]
   de6a2:	3101      	adds	r1, #1
   de6a4:	f102 0314 	add.w	r3, r2, #20
   de6a8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   de6ac:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   de6b0:	1f05      	subs	r5, r0, #4
   de6b2:	42a3      	cmp	r3, r4
   de6b4:	d30c      	bcc.n	de6d0 <__copybits+0x36>
   de6b6:	1aa3      	subs	r3, r4, r2
   de6b8:	3b11      	subs	r3, #17
   de6ba:	f023 0303 	bic.w	r3, r3, #3
   de6be:	3211      	adds	r2, #17
   de6c0:	42a2      	cmp	r2, r4
   de6c2:	bf88      	it	hi
   de6c4:	2300      	movhi	r3, #0
   de6c6:	4418      	add	r0, r3
   de6c8:	2300      	movs	r3, #0
   de6ca:	4288      	cmp	r0, r1
   de6cc:	d305      	bcc.n	de6da <__copybits+0x40>
   de6ce:	bd70      	pop	{r4, r5, r6, pc}
   de6d0:	f853 6b04 	ldr.w	r6, [r3], #4
   de6d4:	f845 6f04 	str.w	r6, [r5, #4]!
   de6d8:	e7eb      	b.n	de6b2 <__copybits+0x18>
   de6da:	f840 3b04 	str.w	r3, [r0], #4
   de6de:	e7f4      	b.n	de6ca <__copybits+0x30>

000de6e0 <__any_on>:
   de6e0:	f100 0214 	add.w	r2, r0, #20
   de6e4:	6900      	ldr	r0, [r0, #16]
   de6e6:	114b      	asrs	r3, r1, #5
   de6e8:	4298      	cmp	r0, r3
   de6ea:	b510      	push	{r4, lr}
   de6ec:	db11      	blt.n	de712 <__any_on+0x32>
   de6ee:	dd0a      	ble.n	de706 <__any_on+0x26>
   de6f0:	f011 011f 	ands.w	r1, r1, #31
   de6f4:	d007      	beq.n	de706 <__any_on+0x26>
   de6f6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   de6fa:	fa24 f001 	lsr.w	r0, r4, r1
   de6fe:	fa00 f101 	lsl.w	r1, r0, r1
   de702:	428c      	cmp	r4, r1
   de704:	d10b      	bne.n	de71e <__any_on+0x3e>
   de706:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   de70a:	4293      	cmp	r3, r2
   de70c:	d803      	bhi.n	de716 <__any_on+0x36>
   de70e:	2000      	movs	r0, #0
   de710:	bd10      	pop	{r4, pc}
   de712:	4603      	mov	r3, r0
   de714:	e7f7      	b.n	de706 <__any_on+0x26>
   de716:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   de71a:	2900      	cmp	r1, #0
   de71c:	d0f5      	beq.n	de70a <__any_on+0x2a>
   de71e:	2001      	movs	r0, #1
   de720:	e7f6      	b.n	de710 <__any_on+0x30>

000de722 <_calloc_r>:
   de722:	b513      	push	{r0, r1, r4, lr}
   de724:	434a      	muls	r2, r1
   de726:	4611      	mov	r1, r2
   de728:	9201      	str	r2, [sp, #4]
   de72a:	f7f9 f94b 	bl	d79c4 <_malloc_r>
   de72e:	4604      	mov	r4, r0
   de730:	b118      	cbz	r0, de73a <_calloc_r+0x18>
   de732:	9a01      	ldr	r2, [sp, #4]
   de734:	2100      	movs	r1, #0
   de736:	f7fe f809 	bl	dc74c <memset>
   de73a:	4620      	mov	r0, r4
   de73c:	b002      	add	sp, #8
   de73e:	bd10      	pop	{r4, pc}

000de740 <nan>:
   de740:	ed9f 0b01 	vldr	d0, [pc, #4]	; de748 <nan+0x8>
   de744:	4770      	bx	lr
   de746:	bf00      	nop
   de748:	00000000 	.word	0x00000000
   de74c:	7ff80000 	.word	0x7ff80000

000de750 <__ascii_wctomb>:
   de750:	b149      	cbz	r1, de766 <__ascii_wctomb+0x16>
   de752:	2aff      	cmp	r2, #255	; 0xff
   de754:	bf85      	ittet	hi
   de756:	238a      	movhi	r3, #138	; 0x8a
   de758:	6003      	strhi	r3, [r0, #0]
   de75a:	700a      	strbls	r2, [r1, #0]
   de75c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
   de760:	bf98      	it	ls
   de762:	2001      	movls	r0, #1
   de764:	4770      	bx	lr
   de766:	4608      	mov	r0, r1
   de768:	4770      	bx	lr
	...

000de76c <__aeabi_d2lz>:
   de76c:	b538      	push	{r3, r4, r5, lr}
   de76e:	2200      	movs	r2, #0
   de770:	2300      	movs	r3, #0
   de772:	4604      	mov	r4, r0
   de774:	460d      	mov	r5, r1
   de776:	f7fd fd19 	bl	dc1ac <__aeabi_dcmplt>
   de77a:	b928      	cbnz	r0, de788 <__aeabi_d2lz+0x1c>
   de77c:	4620      	mov	r0, r4
   de77e:	4629      	mov	r1, r5
   de780:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   de784:	f7fd bdf6 	b.w	dc374 <__aeabi_d2ulz>
   de788:	4620      	mov	r0, r4
   de78a:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   de78e:	f7fd fdf1 	bl	dc374 <__aeabi_d2ulz>
   de792:	4240      	negs	r0, r0
   de794:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   de798:	bd38      	pop	{r3, r4, r5, pc}
   de79a:	bf00      	nop

000de79c <dynalib_user>:
   de79c:	4021 000d 405d 000d 4085 000d 4089 000d     !@..]@...@...@..
   de7ac:	0000 0000 6573 5074 776f 7265 6f43 666e     ....setPowerConf
   de7bc:	6769 7275 7461 6f69 3d6e 6425 4e00 6d61     iguration=%d.Nam
   de7cc:	0065 6553 4c74 6261 6c65 5300 6174 7472     e.SetLabel.Start
   de7dc:	6153 706d 696c 676e 5000 5241 4954 4c43     Sampling.PARTICL
   de7ec:	0045 4150 5452 4349 454c 4320 4e4f 454e     E.PARTICLE CONNE
   de7fc:	5443 4445 5300 454c 5045 5220 5345 4c55     CTED.SLEEP RESUL
   de80c:	0054 6f57 656b 4220 2079 6157 6374 6864     T.Woke By Watcdh
   de81c:	6f64 0067 6f57 656b 4220 2079 5452 0043     dog.Woke By RTC.
   de82c:	6f57 656b 4220 2079 4950 0052 4150 5452     Woke By PIR.PART
   de83c:	4349 454c 4620 4941 454c 2044 4f54 4320     ICLE FAILED TO C
   de84c:	4e4f 454e 5443 5300 4d41 4c50 4e49 5f47     ONNECT.SAMPLING_
   de85c:	4157 5449 535f 4154 4554 5300 4154 5452     WAIT_STATE.START
   de86c:	5320 4d41 4c50 4e49 0047 4f50 4557 0052      SAMPLING.POWER.
   de87c:	4e45 4142 4c42 2045 4843 5241 4947 474e     ENBABLE CHARGING
   de88c:	5000 4255 494c 4853 4e49 0047 5453 5241     .PUBLISHING.STAR
   de89c:	2054 5550 4c42 5349 5f48 5453 5441 0045     T PUBLISH_STATE.
   de8ac:	6f50 6577 2072 6f73 7275 6563 0073 6142     Power sources.Ba
   de8bc:	7474 7265 2079 7473 7461 0065 6142 7474     ttery state.Batt
   de8cc:	7265 2079 6863 7261 6567 4200 7461 6574     ery charge.Batte
   de8dc:	7972 5620 6543 6c6c 4200 7461 6574 7972     ry VCell.Battery
   de8ec:	5320 436f 4300 7061 6361 7469 6e61 6563      SoC.Capacitance
   de8fc:	4900 746e 7265 616e 206c 6554 706d 7265     .Internal Temper
   de90c:	7461 7275 0065 6142 7474 7265 0079 7542     ature.Battery.Bu
   de91c:	6666 7265 5320 6e65 0074 4f4e 5300 4154     ffer Sent.NO.STA
   de92c:	5452 5320 454c 5045 575f 4941 5f54 5453     RT SLEEP_WAIT_ST
   de93c:	5441 0045 4544 5542 2047 4f4e 5320 454c     ATE.DEBUG NO SLE
   de94c:	5045 4700 494f 474e 5420 204f 4c53 4545     EP.GOING TO SLEE
   de95c:	0050 4c53 4545 2050 5453 504f 5320 454c     P.SLEEP STOP SLE
   de96c:	5045 5700 6b6f 2065 7942 4220 5f59 5047     EP.Woke By BY_GP
   de97c:	4f49 5020 5249 5700 6b6f 2065 7942 4220     IO PIR.Woke By B
   de98c:	5f59 5047 4f49 5220 4354 5300 454c 5045     Y_GPIO RTC.SLEEP
   de99c:	5220 5345 4c55 2054 202d 6f57 656b 4220      RESULT - Woke B
   de9ac:	5f59 5452 0043 4c53 4545 2050 4552 5553     Y_RTC.SLEEP RESU
   de9bc:	544c 2d20 5720 6b6f 2065 5942 4e5f 5445     LT - Woke BY_NET
   de9cc:	4f57 4b52 5300 454c 5045 5220 5345 4c55     WORK.SLEEP RESUL
   de9dc:	2054 202d 6f57 656b 4220 2079 4e55 4e4b     T - Woke By UNKN
   de9ec:	574f 004e                                   OWN.

000de9f0 <_ZTVN5spark10LogHandlerE>:
	...
   dea00:	40a5 000d 40c9 000d                         .@...@..

000dea08 <_ZTVN5spark16SerialLogHandlerE>:
	...
   dea10:	4119 000d 414d 000d 9569 000d 40cb 000d     .A..MA..i....@..

000dea20 <_ZTV8MB85RC64>:
	...
   dea28:	40f1 000d 4105 000d 50f5 000d 518b 000d     .@...A...P...Q..
   dea38:	520d 000d 6e75 6e6b 776f 006e 6976 006e     .R..unknown.vin.
   dea48:	7375 2062 6f68 7473 7500 6273 6120 6164     usb host.usb ada
   dea58:	7470 7265 7500 6273 6f20 6774 6200 7461     pter.usb otg.bat
   dea68:	6574 7972 6e00 746f 6320 6168 6772 6e69     tery.not chargin
   dea78:	0067 6863 7261 6567 0064 6964 6373 6168     g.charged.discha
   dea88:	6772 6e69 0067 6166 6c75 0074 6964 6373     rging.fault.disc
   dea98:	6e6f 656e 7463 6465 5500 6962 6f64 7374     onnected.Ubidots
   deaa8:	7700 6265 6f68 6b6f 0000 0000               .webhook....

000deab4 <_ZL12powerSources>:
   deab4:	ea3c 000d ea44 000d ea48 000d ea51 000d     <...D...H...Q...
   deac4:	ea5d 000d ea65 000d                         ]...e...

000deacc <_ZL13batteryStates>:
   deacc:	ea3c 000d ea6d 000d ea71 000d ea7a 000d     <...m...q...z...
   deadc:	ea82 000d ea8e 000d ea94 000d               ............

000deae8 <_ZTV6MB85RC>:
	...
   deaf0:	50b5 000d 50b7 000d 50f5 000d 518b 000d     .P...P...P...Q..
   deb00:	520d 000d 6564 6976 6563 6552 6461 6620     .R..deviceRead f
   deb10:	6961 656c 2064 7473 7461 253d 0064 6573     ailed stat=%d.se
   deb20:	2074 6954 656d 6620 6f72 206d 5452 2043     t Time from RTC 
   deb30:	7325 6400 7665 6369 5765 6972 6574 6620     %s.deviceWrite f
   deb40:	6961 656c 2064 7473 7461 253d 0064 6573     ailed stat=%d.se
   deb50:	2074 5452 2043 7266 6d6f 6320 6f6c 6475     t RTC from cloud
   deb60:	2520 0073 6c63 756f 2064 6974 656d 6e20      %s.cloud time n
   deb70:	746f 7620 6c61 6469 6400 7665 6369 5765     ot valid.deviceW
   deb80:	6972 6574 4545 5250 4d4f 6620 6961 656c     riteEEPROM faile
   deb90:	2064 7473 7461 253d 0064 7061 2e70 7472     d stat=%d.app.rt
   deba0:	0063 0000                                   c...

000deba4 <_ZTV12MCP79410SRAM>:
	...
   debac:	52cd 000d 52e3 000d 52bd 000d 52c1 000d     .R...R...R...R..
   debbc:	530d 000d 55f5 000d 5815 000d               .S...U...X..

000debc8 <_ZTV12MCP79410Time>:
	...
   debd0:	52d1 000d 52d5 000d                         .R...R..

000debd8 <_ZTV14MCP79410EEPROM>:
	...
   debe0:	52cf 000d 52f1 000d 52c5 000d 52c9 000d     .R...R...R...R..
   debf0:	530d 000d 562f 000d 59f9 000d               .S../V...Y..

000debfc <_ZTV8MCP79410>:
	...
   dec04:	52d3 000d 52ff 000d 6255 6469 746f 5073     .R...R..UbidotsP
   dec14:	7261 6974 6c63 2f65 2e33 0032 7254 6979     article/3.2.Tryi
   dec24:	676e 7420 206f 6f63 6e6e 6365 2074 6f74     ng to connect to
   dec34:	0020 2c20 6120 7474 6d65 7470 6e20 6d75      . , attempt num
   dec44:	6562 3a72 0020 7441 6574 706d 2074 6966     ber: .Attempt fi
   dec54:	696e 6873 6465 5300 7265 6576 2772 2073     nished.Server's 
   dec64:	6572 7073 6e6f 6573 003a 2d0a 2d2d 2d2d     response:..-----
   dec74:	2d2d 2d2d 002d 6974 656d 756f 2c74 6320     -----.timeout, c
   dec84:	756f 646c 6e20 746f 7220 6165 2064 6e61     ould not read an
   dec94:	2079 6572 7073 6e6f 6573 6620 6f72 206d     y response from 
   deca4:	6874 2065 6f68 7473 5000 534f 2054 612f     the host.POST /a
   decb4:	6970 762f 2e31 2f36 6564 6976 6563 2f73     pi/v1.6/devices/
   decc4:	2000 5448 5054 312f 312e 0a0d 4800 736f     . HTTP/1.1...Hos
   decd4:	3a74 0020 7355 7265 412d 6567 746e 203a     t: .User-Agent: 
   dece4:	5800 412d 7475 2d68 6f54 656b 3a6e 0020     .X-Auth-Token: .
   decf4:	6f43 6e6e 6365 6974 6e6f 203a 6c63 736f     Connection: clos
   ded04:	0d65 000a 6f43 746e 6e65 2d74 7954 6570     e...Content-Type
   ded14:	203a 7061 6c70 6369 7461 6f69 2f6e 736a     : application/js
   ded24:	6e6f 0a0d 4300 6e6f 6574 746e 4c2d 6e65     on...Content-Len
   ded34:	7467 3a68 0020 614d 696b 676e 7220 7165     gth: .Making req
   ded44:	6575 7473 7420 206f 6255 6469 746f 3a73     uest to Ubidots:
   ded54:	000a 6177 7469 6e69 2067 6f66 2072 6573     ..waiting for se
   ded64:	7672 7265 6120 736e 6577 2072 2e2e 002e     rver answer ....
   ded74:	550a 6962 6f64 7374 2027 6553 7672 7265     .Ubidots' Server
   ded84:	7220 7365 6f70 736e 3a65 000a 6f43 6c75      response:..Coul
   ded94:	2064 6f6e 2074 6573 646e 6420 7461 2061     d not send data 
   deda4:	6f74 7520 6962 6f64 7374 7520 6973 676e     to ubidots using
   dedb4:	4820 5454 0050 4547 2054 612f 6970 762f      HTTP.GET /api/v
   dedc4:	2e31 2f36 6564 6976 6563 2f73 2f00 766c     1.6/devices/./lv
   dedd4:	4300 6e6f 6574 746e 542d 7079 3a65 6120     .Content-Type: a
   dede4:	7070 696c 6163 6974 6e6f 6a2f 6f73 0d6e     pplication/json.
   dedf4:	0d0a 000a 6f43 6e6e 6365 6974 6e6f 4620     ....Connection F
   dee04:	6961 656c 2064 6275 6469 746f 2073 202d     ailed ubidots - 
   dee14:	7254 2079 6741 6961 006e 0000               Try Again...

000dee20 <_ZTV7UbiHTTP>:
	...
   dee28:	605d 000d 628d 000d 5e09 000d 5e0d 000d     ]`...b...^...^..

000dee38 <_ZTV11UbiParticle>:
	...
   dee40:	6495 000d 6475 000d 6481 000d 6485 000d     .d..ud...d...d..
   dee50:	6f59 2075 7261 2065 6573 646e 6e69 2067     You are sending 
   dee60:	6f6d 6572 7420 6168 206e 6874 2065 616d     more than the ma
   dee70:	6978 756d 206d 666f 6320 6e6f 6573 7563     ximum of consecu
   dee80:	6974 6576 7620 7261 6169 6c62 7365 2500     tive variables.%
   dee90:	3731 0067 007b 7325 2522 2273 7b3a 7622     17g.{.%s"%s":{"v
   deea0:	6c61 6575 3a22 7325 2500 2c73 7422 6d69     alue":%s.%s,"tim
   deeb0:	7365 6174 706d 3a22 6c25 0075 6425 6425     estamp":%lu.%d%d
   deec0:	6425 2500 2573 0073 7325 3030 0030 7325     %d.%s%s.%s000.%s
   deed0:	222c 6f63 746e 7865 2274 203a 257b 7d73     ,"context": {%s}
   deee0:	2500 2c73 7000 7961 6f6c 6461 003a 7325     .%s,.payload:.%s
   deef0:	507c 534f 7c54 7325 007c 7325 7325 253a     |POST|%s|.%s%s:%
   def00:	0073 7325 3e3d 2500 2473 7325 2500 4073     s.%s=>.%s$%s.%s@
   def10:	6c25 0075 7325 657c 646e 5300 6e65 6964     %lu.%s|end.Sendi
   def20:	676e 6420 7461 2e61 2e2e 4100 7474 6d65     ng data....Attem
   def30:	7470 6e69 2067 6f74 7220 6365 6e6f 656e     pting to reconne
   def40:	7463 7c00 564c 007c 6150 6c79 616f 2064     ct.|LV|.Payload 
   def50:	6f66 2072 6572 7571 7365 3a74 0a00 2d2d     for request:..--
   def60:	2d2d 5000 534f 0054 4b4f 4300 756f 646c     --.POST.OK.Could
   def70:	6e20 746f 6320 6e6f 656e 7463 7420 206f      not connect to 
   def80:	6874 2065 6f68 7473 4c00 0056 5245 4f52     the host.LV.ERRO
   def90:	2052 6f63 6c75 2064 6f6e 2074 6f63 6e6e     R could not conn
   defa0:	6365 2074 6f74 7420 6568 7320 7265 6576     ect to the serve
   defb0:	0072 756e 6c6c 4500 5252 524f 0000 0000     r.null.ERROR....

000defc0 <_ZTV6UbiTCP>:
	...
   defc8:	6d15 000d 6db9 000d 6a65 000d 7015 000d     .m...m..ej...p..
   defd8:	575b 7261 696e 676e 205d 6f43 6c75 2064     [Warning] Could 
   defe8:	6f6e 2074 6f73 766c 2065 5049 4120 6464     not solve IP Add
   deff8:	6572 7373 6f20 2066 6874 2065 6572 6f6d     ress of the remo
   df008:	6574 6820 736f 2c74 7720 7469 2068 6f79     te host, with yo
   df018:	7275 4420 534e 7320 7465 7075 202e 2020     ur DNS setup.   
   df028:	2020 2020 2020 2020 550a 6973 676e 6420             .Using d
   df038:	6665 7561 746c 4920 646e 7375 7274 6169     efault Industria
   df048:	206c 6255 6469 746f 2073 5049 203a 3631     l Ubidots IP: 16
   df058:	2e39 3535 362e 2e31 3432 0033 5245 4f52     9.55.61.243.ERRO
   df068:	2052 6573 646e 6e69 2067 6176 756c 7365     R sending values
   df078:	7720 7469 2068 4455 0050 0000                with UDP...

000df084 <_ZTV6UbiUDP>:
	...
   df08c:	7165 000d 7105 000d 7111 000d 7115 000d     eq...q...q...q..
   df09c:	6e69 7564 7473 6972 6c61 612e 6970 752e     industrial.api.u
   df0ac:	6962 6f64 7374 632e 6d6f 0000               bidots.com..

000df0b8 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...

000df0c0 <_ZTVN5spark13CellularClassE>:
	...
   df0c8:	7adf 000d 7ad5 000d 7acb 000d 7a81 000d     .z...z...z...z..
   df0d8:	7abf 000d 7ab3 000d 98c1 000d 98c9 000d     .z...z..........
   df0e8:	7aa7 000d 7a9f 000d 7a95 000d 7a8b 000d     .z...z...z...z..
   df0f8:	98f9 000d                                   ....

000df0fc <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   df104:	7b19 000d 7b1f 000d 7b5d 000d 7b2d 000d     .{...{..]{..-{..
   df114:	7b1b 000d                                   .{..

000df118 <_ZTVN5spark13EthernetClassE>:
	...
   df120:	80ff 000d 80f5 000d 80eb 000d 80e1 000d     ................
   df130:	80d5 000d 80c9 000d 98c1 000d 98c9 000d     ................
   df140:	80bd 000d 80b5 000d 80ab 000d 80a1 000d     ................
   df150:	98f9 000d                                   ....

000df154 <_ZTV7TwoWire>:
	...
   df15c:	8279 000d 82c3 000d 829b 000d 827b 000d     y...........{...
   df16c:	82a3 000d 82ab 000d 82b3 000d 82bb 000d     ................

000df17c <_ZTV9IPAddress>:
	...
   df184:	842d 000d 841d 000d 841f 000d 7525 7500     -...........%u.u
   df194:	3025 7834 6200 7561 0064 6553 6972 6c61     %04x.baud.Serial
   df1a4:	5300 7265 6169 316c 4a00 4f53 534e 7274     .Serial1.JSONStr
   df1b4:	6165 4c6d 676f 6148 646e 656c 0072 7061     eamLogHandler.ap
   df1c4:	0070 3025 3031 2075 5d00 0020 202c 2800     p.%010u .] ., .(
   df1d4:	3a29 0020 5b20 6300 646f 2065 203d 2500     ): . [.code = .%
   df1e4:	0069 6564 6174 6c69 2073 203d 6c00 006e     i.details = .ln.
   df1f4:	6e66 6300 646f 0065 6564 6174 6c69 0000     fn.code.detail..

000df204 <_ZTVN5spark16JSONStreamWriterE>:
	...
   df20c:	8931 000d 8957 000d 8915 000d 8573 000d     1...W.......s...

000df21c <_ZTVN5spark16StreamLogHandlerE>:
	...
   df224:	8d85 000d 8d9d 000d 9569 000d 40cb 000d     ........i....@..

000df234 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   df23c:	8db1 000d 8dc5 000d 970d 000d 891d 000d     ................

000df24c <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   df254:	892f 000d 8965 000d 94a5 000d 891f 000d     /...e...........

000df264 <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   df26c:	892d 000d 8973 000d 8ccd 000d 8991 000d     -...s...........

000df27c <_ZTVN5spark12NetworkClassE>:
	...
   df284:	9881 000d 988b 000d 9895 000d 989f 000d     ................
   df294:	98a9 000d 98b5 000d 98c1 000d 98c9 000d     ................
   df2a4:	98d1 000d 98dd 000d 98e5 000d 98ef 000d     ................
   df2b4:	98f9 000d 6977 6972 676e 5300 7379 6574     ....wiring.Syste
   df2c4:	206d 6c73 6565 2070 6f63 666e 6769 7275     m sleep configur
   df2d4:	7461 6f69 206e 7369 6920 766e 6c61 6469     ation is invalid
   df2e4:	002e 6572 7663 6520 7272 726f 3d20 2520     ..recv error = %
   df2f4:	0064 0000                                   d...

000df2f8 <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   df300:	a11b 000d a13d 000d a663 000d a14b 000d     ....=...c...K...
   df310:	a11d 000d                                   ....

000df314 <_ZTV9TCPClient>:
	...
   df31c:	a1c9 000d a1fd 000d a099 000d a0b3 000d     ................
   df32c:	a4ed 000d a25f 000d a231 000d a0dd 000d     ...._...1.......
   df33c:	a3f5 000d a2e9 000d a293 000d a5a1 000d     ................
   df34c:	a0df 000d a111 000d a0c5 000d a14f 000d     ............O...
   df35c:	a211 000d 005a 2b25 3330 3a64 3025 7532     ....Z.%+03d:%02u
   df36c:	2500 2d59 6d25 252d 5464 4825 253a 3a4d     .%Y-%m-%dT%H:%M:
   df37c:	5325 7a25 6100 6373 6974 656d 0000 0000     %S%z.asctime....

000df38c <_ZTV3UDP>:
	...
   df394:	af5d 000d af81 000d a9f9 000d ab21 000d     ]...........!...
   df3a4:	a9f1 000d aa11 000d aa2f 000d aa49 000d     ......../...I...
   df3b4:	aa6d 000d ab05 000d ae03 000d aba9 000d     m...............
   df3c4:	ad21 000d a9d9 000d aeed 000d aca9 000d     !...............
   df3d4:	abe1 000d af1b 000d ab4b 000d a9e7 000d     ........K.......
   df3e4:	ab89 000d a9ed 000d aa4b 000d fff0 ffff     ........K.......
   df3f4:	0000 0000 aa65 000d                         ....e...

000df3fc <_ZTV11USARTSerial>:
	...
   df404:	af95 000d b003 000d afdb 000d 9b25 000d     ............%...
   df414:	afab 000d afc7 000d afb9 000d afd5 000d     ................
   df424:	af97 000d af9d 000d                         ........

000df42c <_ZTV9USBSerial>:
	...
   df434:	b0d7 000d b13f 000d b115 000d 9b25 000d     ....?.......%...
   df444:	b107 000d b0d9 000d b0e9 000d b139 000d     ............9...
   df454:	b0f9 000d b0d1 000d                         ........

000df45c <_ZSt7nothrow>:
	...

000df45d <_ZTSSt19_Sp_make_shared_tag>:
   df45d:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   df46d:	6572 5f64 6174 0067 0000                     red_tag....

000df478 <_ZTISt19_Sp_make_shared_tag>:
   df478:	f4b8 000d f45d 000d                         ....]...

000df480 <_ZTIN10__cxxabiv117__class_type_infoE>:
   df480:	f518 000d f48c 000d f53c 000d               ........<...

000df48c <_ZTSN10__cxxabiv117__class_type_infoE>:
   df48c:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   df49c:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   df4ac:	0045 0000                                   E...

000df4b0 <_ZTVN10__cxxabiv117__class_type_infoE>:
   df4b0:	0000 0000 f480 000d b779 000d b78d 000d     ........y.......
   df4c0:	b921 000d b921 000d b7f7 000d b739 000d     !...!.......9...
   df4d0:	b7df 000d b7a1 000d b76d 000d               ........m...

000df4dc <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   df4dc:	f518 000d f4e8 000d f480 000d               ............

000df4e8 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   df4e8:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   df4f8:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   df508:	666e 456f 0000 0000                         nfoE....

000df510 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   df510:	0000 0000 f4dc 000d b821 000d b835 000d     ........!...5...
   df520:	b921 000d b921 000d b7f7 000d b739 000d     !...!.......9...
   df530:	b8f5 000d b881 000d b849 000d               ........I...

000df53c <_ZTISt9type_info>:
   df53c:	f4b8 000d f544 000d                         ....D...

000df544 <_ZTSSt9type_info>:
   df544:	7453 7439 7079 5f65 6e69 6f66 2500 332e     St9type_info.%.3
   df554:	2073 2e25 7333 3325 2064 2e25 6432 253a     s %.3s%3d %.2d:%
   df564:	322e 3a64 2e25 6432 2520 0a64                .2d:%.2d %d..

000df571 <day_name.6145>:
   df571:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
   df581:	6972 6153                                    riSat

000df586 <mon_name.6146>:
   df586:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
   df596:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
   df5a6:	4476 6365 666e 6900 696e 7974 6100 006e     vDecnf.inity.an.
	...

000df5b8 <fpi.7566>:
   df5b8:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   df5c8:	0000 0000                                   ....

000df5cc <fpinan.7602>:
   df5cc:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
   df5dc:	0000 0000                                   ....

000df5e0 <tinytens>:
   df5e0:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   df5f0:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   df600:	6f43 64ac 0628 1168                         Co.d(.h.

000df608 <_ctype_>:
   df608:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   df618:	2020 2020 2020 2020 2020 2020 2020 2020                     
   df628:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   df638:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   df648:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   df658:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   df668:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   df678:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   df688:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000df70c <_C_numeric_locale>:
   df70c:	ed72 000d edf7 000d e188 2003 4f50 4953     r.......... POSI
   df71c:	0058 0000                                   X...

000df720 <__mprec_bigtens>:
   df720:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   df730:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   df740:	bf3c 7f73 4fdd 7515                         <.s..O.u

000df748 <__mprec_tens>:
   df748:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   df758:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   df768:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   df778:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   df788:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   df798:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   df7a8:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   df7b8:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   df7c8:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   df7d8:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   df7e8:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   df7f8:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   df808:	9db4 79d9 7843 44ea                         ...yCx.D

000df810 <p05.7490>:
   df810:	0005 0000 0019 0000 007d 0000               ........}...

000df81c <link_const_variable_data_end>:
   df81c:	000d4ebd 	.word	0x000d4ebd
   df820:	000d50a9 	.word	0x000d50a9
   df824:	000d5a29 	.word	0x000d5a29
   df828:	000d5de5 	.word	0x000d5de5
   df82c:	000d6469 	.word	0x000d6469
   df830:	000d6a35 	.word	0x000d6a35
   df834:	000d70f9 	.word	0x000d70f9
   df838:	000d7145 	.word	0x000d7145
   df83c:	000d7a71 	.word	0x000d7a71
   df840:	000d7ae9 	.word	0x000d7ae9
   df844:	000d8109 	.word	0x000d8109
   df848:	000d9559 	.word	0x000d9559
   df84c:	000d99cd 	.word	0x000d99cd
   df850:	000d9c4d 	.word	0x000d9c4d
   df854:	000da075 	.word	0x000da075
   df858:	000da9c5 	.word	0x000da9c5

000df85c <link_constructors_end>:
   df85c:	00000000 	.word	0x00000000
