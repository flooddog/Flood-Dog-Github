
/Users/philipchatterton/IoCP/Particle/Flood_Dog/Flood_Dog_v07/target/2.2.0/boron/Flood_Dog_v07.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00008c30  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000dcc50  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000094  2003e278  000dcc54  0001e278  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000004e4  2003e310  2003e310  0002e310  2**3
                  ALLOC
  6 .module_info_suffix 0000002c  000dcce8  000dcce8  0002cce8  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  7 .module_info_crc 00000004  000dcd14  000dcd14  0002cd14  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   0025948d  00000000  00000000  0002cd18  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00024155  00000000  00000000  002861a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0004222c  00000000  00000000  002aa2fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00003d20  00000000  00000000  002ec526  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 0000a4a0  00000000  00000000  002f0246  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00049d8c  00000000  00000000  002fa6e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0005f4e2  00000000  00000000  00344472  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0011f0f2  00000000  00000000  003a3954  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000b168  00000000  00000000  004c2a48  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f007 fd7d 	bl	dbb30 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f007 fd9f 	bl	dbb80 <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e278 	.word	0x2003e278
   d404c:	000dcc54 	.word	0x000dcc54
   d4050:	2003e30c 	.word	0x2003e30c
   d4054:	2003e310 	.word	0x2003e310
   d4058:	2003e7f1 	.word	0x2003e7f1

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405e:	4e07      	ldr	r6, [pc, #28]	; (d407c <module_user_init+0x20>)
   d4060:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
    module_user_init_hook();
   d4062:	f006 fbe5 	bl	da830 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	1ba4      	subs	r4, r4, r6
   d4068:	08a4      	lsrs	r4, r4, #2
   d406a:	2500      	movs	r5, #0
   d406c:	42a5      	cmp	r5, r4
   d406e:	d100      	bne.n	d4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d4072:	f856 3b04 	ldr.w	r3, [r6], #4
   d4076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f7      	b.n	d406c <module_user_init+0x10>
   d407c:	000dcc20 	.word	0x000dcc20
   d4080:	000dcc48 	.word	0x000dcc48

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 bb1e 	b.w	d46c4 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 fba5 	bl	d47d8 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d4092:	f006 bb85 	b.w	da7a0 <_post_loop>

000d4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4096:	f003 bd71 	b.w	d7b7c <malloc>

000d409a <_Znaj>:
   d409a:	f003 bd6f 	b.w	d7b7c <malloc>

000d409e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409e:	f003 bd75 	b.w	d7b8c <free>
	...

000d40a4 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40a6:	4a03      	ldr	r2, [pc, #12]	; (d40b4 <__cxa_pure_virtual+0x10>)
   d40a8:	2100      	movs	r1, #0
   d40aa:	200c      	movs	r0, #12
   d40ac:	f003 fc24 	bl	d78f8 <panic_>
  while (1);
   d40b0:	e7fe      	b.n	d40b0 <__cxa_pure_virtual+0xc>
   d40b2:	bf00      	nop
   d40b4:	000d7579 	.word	0x000d7579

000d40b8 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40b8:	7800      	ldrb	r0, [r0, #0]
   d40ba:	fab0 f080 	clz	r0, r0
   d40be:	0940      	lsrs	r0, r0, #5
   d40c0:	4770      	bx	lr

000d40c2 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40c2:	2301      	movs	r3, #1
   d40c4:	7003      	strb	r3, [r0, #0]
   d40c6:	4770      	bx	lr

000d40c8 <_ZN5spark10LogHandler5writeEPKcj>:
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
    // Default implementation does nothing
}
   d40c8:	4770      	bx	lr

000d40ca <_ZN5spark16StreamLogHandler5writeEPKcj>:
inline Print* spark::StreamLogHandler::stream() const {
    return stream_;
}

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
   d40ca:	6a00      	ldr	r0, [r0, #32]
   d40cc:	6803      	ldr	r3, [r0, #0]
   d40ce:	68db      	ldr	r3, [r3, #12]
   d40d0:	4718      	bx	r3
	...

000d40d4 <_Z13startSampling6String>:


///////////////////////////////////////////////////////////////////////////
// Particle Function to start sampling values in debug TRUE mode
//
int startSampling(String command) {
   d40d4:	b508      	push	{r3, lr}

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d40d6:	f003 fa57 	bl	d7588 <HAL_Timer_Get_Milli_Seconds>
	stateTime = millis();
   d40da:	4b03      	ldr	r3, [pc, #12]	; (d40e8 <_Z13startSampling6String+0x14>)
   d40dc:	6018      	str	r0, [r3, #0]
	state = SAMPLE_SETUP_STATE;
   d40de:	4b03      	ldr	r3, [pc, #12]	; (d40ec <_Z13startSampling6String+0x18>)
   d40e0:	2203      	movs	r2, #3
   d40e2:	701a      	strb	r2, [r3, #0]
	return 1;
}
   d40e4:	2001      	movs	r0, #1
   d40e6:	bd08      	pop	{r3, pc}
   d40e8:	2003e5b8 	.word	0x2003e5b8
   d40ec:	2003e284 	.word	0x2003e284

000d40f0 <_ZN8MB85RC64D1Ev>:
	size_t memorySize;
	int addr; // This is just 0-7, the (0b1010000 of the 7-bit address is ORed in later)

};

class MB85RC64 : public MB85RC {
   d40f0:	b510      	push	{r4, lr}
   d40f2:	4b03      	ldr	r3, [pc, #12]	; (d4100 <_ZN8MB85RC64D1Ev+0x10>)
   d40f4:	6003      	str	r3, [r0, #0]
   d40f6:	4604      	mov	r4, r0
   d40f8:	f002 fb54 	bl	d67a4 <_ZN6MB85RCD1Ev>
   d40fc:	4620      	mov	r0, r4
   d40fe:	bd10      	pop	{r4, pc}
   d4100:	000dc560 	.word	0x000dc560

000d4104 <_ZN8MB85RC64D0Ev>:
   d4104:	b510      	push	{r4, lr}
   d4106:	4604      	mov	r4, r0
   d4108:	f7ff fff2 	bl	d40f0 <_ZN8MB85RC64D1Ev>
   d410c:	4620      	mov	r0, r4
   d410e:	2110      	movs	r1, #16
   d4110:	f006 fcd2 	bl	daab8 <_ZdlPvj>
   d4114:	4620      	mov	r0, r4
   d4116:	bd10      	pop	{r4, pc}

000d4118 <_Z14setSensorState6String>:


///////////////////////////////////////////////////////////////////////////
// Set The Sensor Type
//
int setSensorState(String command) {
   d4118:	b510      	push	{r4, lr}
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d411a:	490a      	ldr	r1, [pc, #40]	; (d4144 <_Z14setSensorState6String+0x2c>)
   d411c:	4604      	mov	r4, r0
   d411e:	f005 ff81 	bl	da024 <_ZNK6String6equalsEPKc>
	int tempSetSensorStateFlag = 0;											// By default tempSetSensorFlag is 1 = OK

	if(command == "0"){
   d4122:	b120      	cbz	r0, d412e <_Z14setSensorState6String+0x16>
		sensorSleepState = false;
   d4124:	4b08      	ldr	r3, [pc, #32]	; (d4148 <_Z14setSensorState6String+0x30>)
   d4126:	2200      	movs	r2, #0
   d4128:	701a      	strb	r2, [r3, #0]
		tempSetSensorStateFlag = 1;
   d412a:	2001      	movs	r0, #1
		sensorSleepState = true;
		tempSetSensorStateFlag = 1;
	}

	return tempSetSensorStateFlag;
}
   d412c:	bd10      	pop	{r4, pc}
   d412e:	4907      	ldr	r1, [pc, #28]	; (d414c <_Z14setSensorState6String+0x34>)
   d4130:	4620      	mov	r0, r4
   d4132:	f005 ff77 	bl	da024 <_ZNK6String6equalsEPKc>
	} else if(command == "1"){
   d4136:	2800      	cmp	r0, #0
   d4138:	d0f8      	beq.n	d412c <_Z14setSensorState6String+0x14>
		sensorSleepState = true;
   d413a:	4b03      	ldr	r3, [pc, #12]	; (d4148 <_Z14setSensorState6String+0x30>)
   d413c:	2001      	movs	r0, #1
   d413e:	7018      	strb	r0, [r3, #0]
		tempSetSensorStateFlag = 1;
   d4140:	e7f4      	b.n	d412c <_Z14setSensorState6String+0x14>
   d4142:	bf00      	nop
   d4144:	000dc5d6 	.word	0x000dc5d6
   d4148:	2003e5b4 	.word	0x2003e5b4
   d414c:	000dc8a8 	.word	0x000dc8a8

000d4150 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   d4150:	4b0a      	ldr	r3, [pc, #40]	; (d417c <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
   d4152:	b510      	push	{r4, lr}
   d4154:	4604      	mov	r4, r0
   d4156:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   d4158:	f004 fdfa 	bl	d8d50 <_ZN5spark10LogManager8instanceEv>
   d415c:	4621      	mov	r1, r4
   d415e:	f004 fff8 	bl	d9152 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
   d4162:	f006 fad5 	bl	da710 <_Z16_fetch_usbserialv>
   d4166:	f006 fac7 	bl	da6f8 <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
   d416a:	4620      	mov	r0, r4
   d416c:	4b04      	ldr	r3, [pc, #16]	; (d4180 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
   d416e:	f840 3b04 	str.w	r3, [r0], #4
   d4172:	f004 fedb 	bl	d8f2c <_ZN5spark6detail9LogFilterD1Ev>
    }
   d4176:	4620      	mov	r0, r4
   d4178:	bd10      	pop	{r4, pc}
   d417a:	bf00      	nop
   d417c:	000dc548 	.word	0x000dc548
   d4180:	000dc530 	.word	0x000dc530

000d4184 <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
   d4184:	b510      	push	{r4, lr}
   d4186:	4604      	mov	r4, r0
    }
   d4188:	f7ff ffe2 	bl	d4150 <_ZN5spark16SerialLogHandlerD1Ev>
   d418c:	4620      	mov	r0, r4
   d418e:	2124      	movs	r1, #36	; 0x24
   d4190:	f006 fc92 	bl	daab8 <_ZdlPvj>
   d4194:	4620      	mov	r0, r4
   d4196:	bd10      	pop	{r4, pc}

000d4198 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode>:
            config_.flags |= f.value();
        }
        return *this;
    }

    SystemSleepConfiguration& gpio(pin_t pin, InterruptMode mode) {
   d4198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (valid_) {
   d419a:	7d03      	ldrb	r3, [r0, #20]
    SystemSleepConfiguration& gpio(pin_t pin, InterruptMode mode) {
   d419c:	4605      	mov	r5, r0
   d419e:	460f      	mov	r7, r1
   d41a0:	4616      	mov	r6, r2
        if (valid_) {
   d41a2:	b18b      	cbz	r3, d41c8 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x30>
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   d41a4:	6803      	ldr	r3, [r0, #0]
   d41a6:	68db      	ldr	r3, [r3, #12]
        if (!start) {
   d41a8:	b183      	cbz	r3, d41cc <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x34>
            if (start->type == type) {
   d41aa:	889a      	ldrh	r2, [r3, #4]
   d41ac:	2a01      	cmp	r2, #1
   d41ae:	d006      	beq.n	d41be <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x26>
            start = start->next;
   d41b0:	689b      	ldr	r3, [r3, #8]
        while (start) {
   d41b2:	e7f9      	b.n	d41a8 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x10>
                auto gpioWakeup = reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeup);
                if (gpioWakeup->pin == pin) {
                    gpioWakeup->mode = mode;
                    return *this;
                }
                wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_GPIO, wakeup->next);
   d41b4:	689b      	ldr	r3, [r3, #8]
        if (!start) {
   d41b6:	b14b      	cbz	r3, d41cc <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x34>
            if (start->type == type) {
   d41b8:	889a      	ldrh	r2, [r3, #4]
   d41ba:	2a01      	cmp	r2, #1
   d41bc:	d1fa      	bne.n	d41b4 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x1c>
            while (wakeup) {
   d41be:	b12b      	cbz	r3, d41cc <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x34>
                if (gpioWakeup->pin == pin) {
   d41c0:	899a      	ldrh	r2, [r3, #12]
   d41c2:	42ba      	cmp	r2, r7
   d41c4:	d1f6      	bne.n	d41b4 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x1c>
                    gpioWakeup->mode = mode;
   d41c6:	739e      	strb	r6, [r3, #14]
            wakeupSource->pin = pin;
            wakeupSource->mode = mode;
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
        }
        return *this;
    }
   d41c8:	4628      	mov	r0, r5
   d41ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_gpio_t();
   d41cc:	490a      	ldr	r1, [pc, #40]	; (d41f8 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x60>)
   d41ce:	2010      	movs	r0, #16
   d41d0:	f006 fc74 	bl	daabc <_ZnwjRKSt9nothrow_t>
   d41d4:	4604      	mov	r4, r0
   d41d6:	b168      	cbz	r0, d41f4 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x5c>
   d41d8:	2210      	movs	r2, #16
   d41da:	2100      	movs	r1, #0
   d41dc:	f007 fcd0 	bl	dbb80 <memset>
            wakeupSource->base.size = sizeof(hal_wakeup_source_gpio_t);
   d41e0:	4b06      	ldr	r3, [pc, #24]	; (d41fc <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x64>)
   d41e2:	6023      	str	r3, [r4, #0]
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_GPIO;
   d41e4:	2301      	movs	r3, #1
   d41e6:	80a3      	strh	r3, [r4, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   d41e8:	692b      	ldr	r3, [r5, #16]
   d41ea:	60a3      	str	r3, [r4, #8]
            wakeupSource->pin = pin;
   d41ec:	81a7      	strh	r7, [r4, #12]
            wakeupSource->mode = mode;
   d41ee:	73a6      	strb	r6, [r4, #14]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   d41f0:	612c      	str	r4, [r5, #16]
   d41f2:	e7e9      	b.n	d41c8 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x30>
                valid_ = false;
   d41f4:	7528      	strb	r0, [r5, #20]
                return *this;
   d41f6:	e7e7      	b.n	d41c8 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x30>
   d41f8:	000dca7c 	.word	0x000dca7c
   d41fc:	00030010 	.word	0x00030010

000d4200 <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   d4200:	b40e      	push	{r1, r2, r3}
   d4202:	b510      	push	{r4, lr}
   d4204:	b08d      	sub	sp, #52	; 0x34
   d4206:	aa0f      	add	r2, sp, #60	; 0x3c
    va_list args;
    va_start(args, fmt);
    log(LOG_LEVEL_INFO, fmt, args);
   d4208:	6801      	ldr	r1, [r0, #0]
inline void spark::Logger::info(const char *fmt, ...) const {
   d420a:	f852 4b04 	ldr.w	r4, [r2], #4
    va_start(args, fmt);
   d420e:	9203      	str	r2, [sp, #12]
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   d4210:	2300      	movs	r3, #0
   d4212:	2020      	movs	r0, #32
   d4214:	e9cd 0304 	strd	r0, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d4218:	e9cd 4200 	strd	r4, r2, [sp]
   d421c:	201e      	movs	r0, #30
   d421e:	aa04      	add	r2, sp, #16
   d4220:	f003 fb7a 	bl	d7918 <log_message_v>
}
   d4224:	b00d      	add	sp, #52	; 0x34
   d4226:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d422a:	b003      	add	sp, #12
   d422c:	4770      	bx	lr
	...

000d4230 <_Z9setupPMICv>:
void setupPMIC(){
   d4230:	b508      	push	{r3, lr}
	pmic.begin();						// Don't need PMIC for this - only to prevent charging - would put in a function where you test temp and determine whether to charge
   d4232:	480a      	ldr	r0, [pc, #40]	; (d425c <_Z9setupPMICv+0x2c>)
   d4234:	f005 fcc1 	bl	d9bba <_ZN4PMIC5beginEv>

    SystemPowerConfiguration(SystemPowerConfiguration&&) = default;
    SystemPowerConfiguration& operator=(SystemPowerConfiguration&&) = default;

    SystemPowerConfiguration& powerSourceMinVoltage(uint16_t voltage) {
        conf_.vin_min_voltage = voltage;
   d4238:	4809      	ldr	r0, [pc, #36]	; (d4260 <_Z9setupPMICv+0x30>)
   d423a:	f241 03cc 	movw	r3, #4300	; 0x10cc
   d423e:	80c3      	strh	r3, [r0, #6]
        return *this;
    }

    SystemPowerConfiguration& powerSourceMaxCurrent(uint16_t current) {
        conf_.vin_max_current = current;
   d4240:	4b08      	ldr	r3, [pc, #32]	; (d4264 <_Z9setupPMICv+0x34>)
   d4242:	6083      	str	r3, [r0, #8]
        return (hal_timer_millis(nullptr) / 1000);
    }

#if HAL_PLATFORM_POWER_MANAGEMENT
    int setPowerConfiguration(const particle::SystemPowerConfiguration& conf) {
        return system_power_management_set_config(conf.config(), nullptr);
   d4244:	2100      	movs	r1, #0
        return *this;
    }

    SystemPowerConfiguration& batteryChargeVoltage(uint16_t voltage) {
        conf_.termination_voltage = voltage;
   d4246:	f241 0372 	movw	r3, #4210	; 0x1072
   d424a:	8183      	strh	r3, [r0, #12]
   d424c:	f003 fbda 	bl	d7a04 <system_power_management_set_config>
    Log.info("setPowerConfiguration=%d", res);
   d4250:	4905      	ldr	r1, [pc, #20]	; (d4268 <_Z9setupPMICv+0x38>)
   d4252:	4602      	mov	r2, r0
   d4254:	4805      	ldr	r0, [pc, #20]	; (d426c <_Z9setupPMICv+0x3c>)
   d4256:	f7ff ffd3 	bl	d4200 <_ZNK5spark6Logger4infoEPKcz>
}
   d425a:	bd08      	pop	{r3, pc}
   d425c:	2003e56c 	.word	0x2003e56c
   d4260:	2003e3d4 	.word	0x2003e3d4
   d4264:	03840384 	.word	0x03840384
   d4268:	000dbed0 	.word	0x000dbed0
   d426c:	2003e63c 	.word	0x2003e63c

000d4270 <_Z14getTemperaturev>:


///////////////////////////////////////////////////////////////////////////
// Carrier Board Temp Value
//
bool getTemperature() {
   d4270:	b510      	push	{r4, lr}
	int reading = analogRead(tmp36Pin);   //getting the voltage reading from the temperature sensor
   d4272:	200f      	movs	r0, #15
bool getTemperature() {
   d4274:	ed2d 8b02 	vpush	{d8}
	int reading = analogRead(tmp36Pin);   //getting the voltage reading from the temperature sensor
   d4278:	f006 fb8c 	bl	da994 <analogRead>
	delay(1000);
   d427c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d4280:	f003 fcec 	bl	d7c5c <delay>
	reading = analogRead(tmp36Pin);   //getting the voltage reading from the temperature sensor
   d4284:	200f      	movs	r0, #15
   d4286:	f006 fb85 	bl	da994 <analogRead>
   d428a:	4604      	mov	r4, r0
	delay(1000);
   d428c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d4290:	f003 fce4 	bl	d7c5c <delay>
	float voltage = reading * 3.3;        // converting that reading to voltage, for 3.3v arduino use 3.3
   d4294:	4620      	mov	r0, r4
   d4296:	f007 f84f 	bl	db338 <__aeabi_i2d>
   d429a:	a32b      	add	r3, pc, #172	; (adr r3, d4348 <_Z14getTemperaturev+0xd8>)
   d429c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d42a0:	f007 f8b4 	bl	db40c <__aeabi_dmul>
   d42a4:	f007 fb82 	bl	db9ac <__aeabi_d2f>
	voltage /= 4096.0;                    // Electron is different than the Arduino where there are only 1024 steps
	carrierBoardTempSensor = (voltage - 0.5) * 100.0;  //converting from 10 mv per degree with 500 mV offset to degrees ((voltage - 500mV) times 100) - 5 degree calibration
   d42a8:	eddf 7a1f 	vldr	s15, [pc, #124]	; d4328 <_Z14getTemperaturev+0xb8>
   d42ac:	ee07 0a10 	vmov	s14, r0
   d42b0:	ee67 7a27 	vmul.f32	s15, s14, s15
   d42b4:	ee17 0a90 	vmov	r0, s15
   d42b8:	f007 f850 	bl	db35c <__aeabi_f2d>
   d42bc:	4b1b      	ldr	r3, [pc, #108]	; (d432c <_Z14getTemperaturev+0xbc>)
   d42be:	2200      	movs	r2, #0
   d42c0:	f006 feec 	bl	db09c <__aeabi_dsub>
   d42c4:	2200      	movs	r2, #0
   d42c6:	4b1a      	ldr	r3, [pc, #104]	; (d4330 <_Z14getTemperaturev+0xc0>)
   d42c8:	f007 f8a0 	bl	db40c <__aeabi_dmul>
   d42cc:	f007 fb6e 	bl	db9ac <__aeabi_d2f>
   d42d0:	4b18      	ldr	r3, [pc, #96]	; (d4334 <_Z14getTemperaturev+0xc4>)
   d42d2:	6018      	str	r0, [r3, #0]
   d42d4:	ee08 0a10 	vmov	s16, r0
	carrierBoardTempSensorF = (carrierBoardTempSensor * 9.0 / 5.0) + 32.0;  // now convert to Fahrenheit
   d42d8:	f007 f840 	bl	db35c <__aeabi_f2d>
   d42dc:	4b16      	ldr	r3, [pc, #88]	; (d4338 <_Z14getTemperaturev+0xc8>)
   d42de:	2200      	movs	r2, #0
   d42e0:	f007 f894 	bl	db40c <__aeabi_dmul>
   d42e4:	4b15      	ldr	r3, [pc, #84]	; (d433c <_Z14getTemperaturev+0xcc>)
   d42e6:	2200      	movs	r2, #0
   d42e8:	f007 f9ba 	bl	db660 <__aeabi_ddiv>
   d42ec:	4b14      	ldr	r3, [pc, #80]	; (d4340 <_Z14getTemperaturev+0xd0>)
   d42ee:	2200      	movs	r2, #0
   d42f0:	f006 fed6 	bl	db0a0 <__adddf3>
   d42f4:	f007 fb5a 	bl	db9ac <__aeabi_d2f>

	if(carrierBoardTempSensor < -20.0 || carrierBoardTempSensor > 30.0) {             // Reasonable range for garage temperature
   d42f8:	eefb 7a04 	vmov.f32	s15, #180	; 0xc1a00000 -20.0
	carrierBoardTempSensorF = (carrierBoardTempSensor * 9.0 / 5.0) + 32.0;  // now convert to Fahrenheit
   d42fc:	4b11      	ldr	r3, [pc, #68]	; (d4344 <_Z14getTemperaturev+0xd4>)
	if(carrierBoardTempSensor < -20.0 || carrierBoardTempSensor > 30.0) {             // Reasonable range for garage temperature
   d42fe:	eeb4 8ae7 	vcmpe.f32	s16, s15
   d4302:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	carrierBoardTempSensorF = (carrierBoardTempSensor * 9.0 / 5.0) + 32.0;  // now convert to Fahrenheit
   d4306:	6018      	str	r0, [r3, #0]
	if(carrierBoardTempSensor < -20.0 || carrierBoardTempSensor > 30.0) {             // Reasonable range for garage temperature
   d4308:	d40b      	bmi.n	d4322 <_Z14getTemperaturev+0xb2>
   d430a:	eef3 7a0e 	vmov.f32	s15, #62	; 0x41f00000  30.0
   d430e:	eeb4 8ae7 	vcmpe.f32	s16, s15
   d4312:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4316:	bfd4      	ite	le
   d4318:	2001      	movle	r0, #1
   d431a:	2000      	movgt	r0, #0
	}
	else {
		// snprintf(resultStr, sizeof(resultStr),"Temperature is: %3.1f", carrierBoardTempSensorF);
		return 1;
	}
}
   d431c:	ecbd 8b02 	vpop	{d8}
   d4320:	bd10      	pop	{r4, pc}
		return 0;
   d4322:	2000      	movs	r0, #0
   d4324:	e7fa      	b.n	d431c <_Z14getTemperaturev+0xac>
   d4326:	bf00      	nop
   d4328:	39800000 	.word	0x39800000
   d432c:	3fe00000 	.word	0x3fe00000
   d4330:	40590000 	.word	0x40590000
   d4334:	2003e3c4 	.word	0x2003e3c4
   d4338:	40220000 	.word	0x40220000
   d433c:	40140000 	.word	0x40140000
   d4340:	40400000 	.word	0x40400000
   d4344:	2003e3cc 	.word	0x2003e3cc
   d4348:	66666666 	.word	0x66666666
   d434c:	400a6666 	.word	0x400a6666

000d4350 <_Z20meterParticlePublishv>:


///////////////////////////////////////////////////////////////////////////
// Meter the data to Particle
//
bool meterParticlePublish(void){                           // Enforces Particle's limit on 1 publish a second
   d4350:	b510      	push	{r4, lr}
  static unsigned long lastPublish = 0;                    // Initialize and store value here
  if(millis() - lastPublish >= 1000) {                     // Particle rate limits at 1 publish per second
   d4352:	4c07      	ldr	r4, [pc, #28]	; (d4370 <_Z20meterParticlePublishv+0x20>)
   d4354:	f003 f918 	bl	d7588 <HAL_Timer_Get_Milli_Seconds>
   d4358:	6823      	ldr	r3, [r4, #0]
   d435a:	1ac0      	subs	r0, r0, r3
   d435c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   d4360:	d304      	bcc.n	d436c <_Z20meterParticlePublishv+0x1c>
   d4362:	f003 f911 	bl	d7588 <HAL_Timer_Get_Milli_Seconds>
    lastPublish = millis();
   d4366:	6020      	str	r0, [r4, #0]
   d4368:	2001      	movs	r0, #1
    return 1;
  }
  else return 0;
}
   d436a:	bd10      	pop	{r4, pc}
  else return 0;
   d436c:	2000      	movs	r0, #0
   d436e:	e7fc      	b.n	d436a <_Z20meterParticlePublishv+0x1a>
   d4370:	2003e368 	.word	0x2003e368

000d4374 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d4374:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d4376:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   d4378:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   d437a:	b17c      	cbz	r4, d439c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   d437c:	6863      	ldr	r3, [r4, #4]
   d437e:	3b01      	subs	r3, #1
   d4380:	6063      	str	r3, [r4, #4]
   d4382:	b95b      	cbnz	r3, d439c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   d4384:	6823      	ldr	r3, [r4, #0]
   d4386:	4620      	mov	r0, r4
   d4388:	689b      	ldr	r3, [r3, #8]
   d438a:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d438c:	68a3      	ldr	r3, [r4, #8]
   d438e:	3b01      	subs	r3, #1
   d4390:	60a3      	str	r3, [r4, #8]
   d4392:	b91b      	cbnz	r3, d439c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d4394:	6823      	ldr	r3, [r4, #0]
   d4396:	4620      	mov	r0, r4
   d4398:	68db      	ldr	r3, [r3, #12]
   d439a:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   d439c:	4628      	mov	r0, r5
   d439e:	bd38      	pop	{r3, r4, r5, pc}

000d43a0 <_Z7logData6StringS_bb>:
bool logData(String tempEvent, String tempData, bool tempLogSerial, bool tempLogParticle){
   d43a0:	b570      	push	{r4, r5, r6, lr}
   d43a2:	4604      	mov	r4, r0
   d43a4:	b086      	sub	sp, #24
   d43a6:	460d      	mov	r5, r1
   d43a8:	461e      	mov	r6, r3
	if(tempLogSerial){
   d43aa:	b18a      	cbz	r2, d43d0 <_Z7logData6StringS_bb+0x30>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d43ac:	4601      	mov	r1, r0
   d43ae:	a802      	add	r0, sp, #8
   d43b0:	f005 fdf5 	bl	d9f9e <_ZN6StringC1ERKS_>
		Log.info(tempEvent + ": " + tempData);
   d43b4:	4913      	ldr	r1, [pc, #76]	; (d4404 <_Z7logData6StringS_bb+0x64>)
   d43b6:	a802      	add	r0, sp, #8
   d43b8:	f005 fe1f 	bl	d9ffa <_ZplRK15StringSumHelperPKc>
   d43bc:	4629      	mov	r1, r5
   d43be:	f005 fe10 	bl	d9fe2 <_ZplRK15StringSumHelperRK6String>
   d43c2:	6801      	ldr	r1, [r0, #0]
   d43c4:	4810      	ldr	r0, [pc, #64]	; (d4408 <_Z7logData6StringS_bb+0x68>)
   d43c6:	f7ff ff1b 	bl	d4200 <_ZNK5spark6Logger4infoEPKcz>
class StringSumHelper : public String
   d43ca:	a802      	add	r0, sp, #8
   d43cc:	f005 fd51 	bl	d9e72 <_ZN6StringD1Ev>
	if(tempLogParticle){
   d43d0:	b1a6      	cbz	r6, d43fc <_Z7logData6StringS_bb+0x5c>
		waitUntil(meterParticlePublish);
   d43d2:	f7ff ffbd 	bl	d4350 <_Z20meterParticlePublishv>
        while (_while() && !_condition()) {
   d43d6:	b910      	cbnz	r0, d43de <_Z7logData6StringS_bb+0x3e>
            spark_process();
   d43d8:	f003 fb38 	bl	d7a4c <spark_process>
        while (_while() && !_condition()) {
   d43dc:	e7f9      	b.n	d43d2 <_Z7logData6StringS_bb+0x32>
   d43de:	f7ff ffb7 	bl	d4350 <_Z20meterParticlePublishv>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   d43e2:	4b0a      	ldr	r3, [pc, #40]	; (d440c <_Z7logData6StringS_bb+0x6c>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d43e4:	682a      	ldr	r2, [r5, #0]
   d43e6:	781b      	ldrb	r3, [r3, #0]
   d43e8:	f88d 3000 	strb.w	r3, [sp]
   d43ec:	a802      	add	r0, sp, #8
   d43ee:	6821      	ldr	r1, [r4, #0]
   d43f0:	233c      	movs	r3, #60	; 0x3c
   d43f2:	f003 fe05 	bl	d8000 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d43f6:	a803      	add	r0, sp, #12
   d43f8:	f7ff ffbc 	bl	d4374 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d43fc:	2001      	movs	r0, #1
   d43fe:	b006      	add	sp, #24
   d4400:	bd70      	pop	{r4, r5, r6, pc}
   d4402:	bf00      	nop
   d4404:	000dc8d2 	.word	0x000dc8d2
   d4408:	2003e63c 	.word	0x2003e63c
   d440c:	2003e364 	.word	0x2003e364

000d4410 <_Z13setSensorType6String>:
int setSensorType(String command) {
   d4410:	b510      	push	{r4, lr}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d4412:	4952      	ldr	r1, [pc, #328]	; (d455c <_Z13setSensorType6String+0x14c>)
   d4414:	b094      	sub	sp, #80	; 0x50
   d4416:	4604      	mov	r4, r0
   d4418:	f005 fe04 	bl	da024 <_ZNK6String6equalsEPKc>
	if(command == "0"){
   d441c:	2800      	cmp	r0, #0
   d441e:	d03f      	beq.n	d44a0 <_Z13setSensorType6String+0x90>
		sysStatus.sensorType = 0;
   d4420:	4b4f      	ldr	r3, [pc, #316]	; (d4560 <_Z13setSensorType6String+0x150>)
   d4422:	2200      	movs	r2, #0
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
   d4424:	4c4e      	ldr	r4, [pc, #312]	; (d4560 <_Z13setSensorType6String+0x150>)
		sysStatus.sensorType = 8;
   d4426:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
   d442a:	2112      	movs	r1, #18
   d442c:	232c      	movs	r3, #44	; 0x2c
   d442e:	4622      	mov	r2, r4
   d4430:	484c      	ldr	r0, [pc, #304]	; (d4564 <_Z13setSensorType6String+0x154>)
   d4432:	f002 fa5a 	bl	d68ea <_ZN6MB85RC9writeDataEjPKhj>
        readData(framAddr, (uint8_t *)&t, sizeof(T));
   d4436:	232c      	movs	r3, #44	; 0x2c
   d4438:	aa09      	add	r2, sp, #36	; 0x24
   d443a:	484a      	ldr	r0, [pc, #296]	; (d4564 <_Z13setSensorType6String+0x154>)
   d443c:	2112      	movs	r1, #18
   d443e:	f002 fa09 	bl	d6854 <_ZN6MB85RC8readDataEjPhj>
		if(tempSysStatus.sensorType == sysStatus.sensorType){
   d4442:	f894 202a 	ldrb.w	r2, [r4, #42]	; 0x2a
   d4446:	f89d 304e 	ldrb.w	r3, [sp, #78]	; 0x4e
   d444a:	4293      	cmp	r3, r2
   d444c:	4a46      	ldr	r2, [pc, #280]	; (d4568 <_Z13setSensorType6String+0x158>)
   d444e:	d168      	bne.n	d4522 <_Z13setSensorType6String+0x112>
			sensorType = sysStatus.sensorType;										// Set sensorType from sysStatus.sensorType
   d4450:	6013      	str	r3, [r2, #0]
			snprintf(data, sizeof(data), "{\"Sensor Type updated: \":%d}", sensorType);
   d4452:	f44f 7180 	mov.w	r1, #256	; 0x100
   d4456:	4a45      	ldr	r2, [pc, #276]	; (d456c <_Z13setSensorType6String+0x15c>)
   d4458:	4845      	ldr	r0, [pc, #276]	; (d4570 <_Z13setSensorType6String+0x160>)
   d445a:	f003 fbaf 	bl	d7bbc <snprintf>
			logData("OK", data, true, true);
   d445e:	4945      	ldr	r1, [pc, #276]	; (d4574 <_Z13setSensorType6String+0x164>)
   d4460:	a801      	add	r0, sp, #4
   d4462:	f005 fd51 	bl	d9f08 <_ZN6StringC1EPKc>
   d4466:	4942      	ldr	r1, [pc, #264]	; (d4570 <_Z13setSensorType6String+0x160>)
   d4468:	a805      	add	r0, sp, #20
   d446a:	f005 fd4d 	bl	d9f08 <_ZN6StringC1EPKc>
   d446e:	2301      	movs	r3, #1
   d4470:	461a      	mov	r2, r3
   d4472:	a905      	add	r1, sp, #20
   d4474:	a801      	add	r0, sp, #4
   d4476:	f7ff ff93 	bl	d43a0 <_Z7logData6StringS_bb>
   d447a:	a805      	add	r0, sp, #20
   d447c:	f005 fcf9 	bl	d9e72 <_ZN6StringD1Ev>
   d4480:	a801      	add	r0, sp, #4
   d4482:	f005 fcf6 	bl	d9e72 <_ZN6StringD1Ev>
			startSampling("OK");
   d4486:	493b      	ldr	r1, [pc, #236]	; (d4574 <_Z13setSensorType6String+0x164>)
   d4488:	a805      	add	r0, sp, #20
   d448a:	f005 fd3d 	bl	d9f08 <_ZN6StringC1EPKc>
   d448e:	a805      	add	r0, sp, #20
   d4490:	f7ff fe20 	bl	d40d4 <_Z13startSampling6String>
   d4494:	a805      	add	r0, sp, #20
   d4496:	f005 fcec 	bl	d9e72 <_ZN6StringD1Ev>
			tempSetSensorFlag = 1;
   d449a:	2001      	movs	r0, #1
}
   d449c:	b014      	add	sp, #80	; 0x50
   d449e:	bd10      	pop	{r4, pc}
   d44a0:	4935      	ldr	r1, [pc, #212]	; (d4578 <_Z13setSensorType6String+0x168>)
   d44a2:	4620      	mov	r0, r4
   d44a4:	f005 fdbe 	bl	da024 <_ZNK6String6equalsEPKc>
	} else if(command == "1"){
   d44a8:	b110      	cbz	r0, d44b0 <_Z13setSensorType6String+0xa0>
		sysStatus.sensorType = 1;
   d44aa:	4b2d      	ldr	r3, [pc, #180]	; (d4560 <_Z13setSensorType6String+0x150>)
   d44ac:	2201      	movs	r2, #1
   d44ae:	e7b9      	b.n	d4424 <_Z13setSensorType6String+0x14>
   d44b0:	4932      	ldr	r1, [pc, #200]	; (d457c <_Z13setSensorType6String+0x16c>)
   d44b2:	4620      	mov	r0, r4
   d44b4:	f005 fdb6 	bl	da024 <_ZNK6String6equalsEPKc>
	} else if(command == "2"){
   d44b8:	b110      	cbz	r0, d44c0 <_Z13setSensorType6String+0xb0>
		sysStatus.sensorType = 2;
   d44ba:	4b29      	ldr	r3, [pc, #164]	; (d4560 <_Z13setSensorType6String+0x150>)
   d44bc:	2202      	movs	r2, #2
   d44be:	e7b1      	b.n	d4424 <_Z13setSensorType6String+0x14>
   d44c0:	492f      	ldr	r1, [pc, #188]	; (d4580 <_Z13setSensorType6String+0x170>)
   d44c2:	4620      	mov	r0, r4
   d44c4:	f005 fdae 	bl	da024 <_ZNK6String6equalsEPKc>
	} else if(command == "3"){
   d44c8:	b110      	cbz	r0, d44d0 <_Z13setSensorType6String+0xc0>
		sysStatus.sensorType = 3;
   d44ca:	4b25      	ldr	r3, [pc, #148]	; (d4560 <_Z13setSensorType6String+0x150>)
   d44cc:	2203      	movs	r2, #3
   d44ce:	e7a9      	b.n	d4424 <_Z13setSensorType6String+0x14>
   d44d0:	492c      	ldr	r1, [pc, #176]	; (d4584 <_Z13setSensorType6String+0x174>)
   d44d2:	4620      	mov	r0, r4
   d44d4:	f005 fda6 	bl	da024 <_ZNK6String6equalsEPKc>
	} else if(command == "4"){
   d44d8:	b110      	cbz	r0, d44e0 <_Z13setSensorType6String+0xd0>
		sysStatus.sensorType = 4;
   d44da:	4b21      	ldr	r3, [pc, #132]	; (d4560 <_Z13setSensorType6String+0x150>)
   d44dc:	2204      	movs	r2, #4
   d44de:	e7a1      	b.n	d4424 <_Z13setSensorType6String+0x14>
   d44e0:	4929      	ldr	r1, [pc, #164]	; (d4588 <_Z13setSensorType6String+0x178>)
   d44e2:	4620      	mov	r0, r4
   d44e4:	f005 fd9e 	bl	da024 <_ZNK6String6equalsEPKc>
	} else if(command == "5"){
   d44e8:	b110      	cbz	r0, d44f0 <_Z13setSensorType6String+0xe0>
		sysStatus.sensorType = 5;
   d44ea:	4b1d      	ldr	r3, [pc, #116]	; (d4560 <_Z13setSensorType6String+0x150>)
   d44ec:	2205      	movs	r2, #5
   d44ee:	e799      	b.n	d4424 <_Z13setSensorType6String+0x14>
   d44f0:	4926      	ldr	r1, [pc, #152]	; (d458c <_Z13setSensorType6String+0x17c>)
   d44f2:	4620      	mov	r0, r4
   d44f4:	f005 fd96 	bl	da024 <_ZNK6String6equalsEPKc>
	} else if(command == "6"){
   d44f8:	b110      	cbz	r0, d4500 <_Z13setSensorType6String+0xf0>
		sysStatus.sensorType = 6;
   d44fa:	4b19      	ldr	r3, [pc, #100]	; (d4560 <_Z13setSensorType6String+0x150>)
   d44fc:	2206      	movs	r2, #6
   d44fe:	e791      	b.n	d4424 <_Z13setSensorType6String+0x14>
   d4500:	4923      	ldr	r1, [pc, #140]	; (d4590 <_Z13setSensorType6String+0x180>)
   d4502:	4620      	mov	r0, r4
   d4504:	f005 fd8e 	bl	da024 <_ZNK6String6equalsEPKc>
	} else if(command == "7"){
   d4508:	b110      	cbz	r0, d4510 <_Z13setSensorType6String+0x100>
		sysStatus.sensorType = 7;
   d450a:	4b15      	ldr	r3, [pc, #84]	; (d4560 <_Z13setSensorType6String+0x150>)
   d450c:	2207      	movs	r2, #7
   d450e:	e789      	b.n	d4424 <_Z13setSensorType6String+0x14>
   d4510:	4920      	ldr	r1, [pc, #128]	; (d4594 <_Z13setSensorType6String+0x184>)
   d4512:	4620      	mov	r0, r4
   d4514:	f005 fd86 	bl	da024 <_ZNK6String6equalsEPKc>
	} else if(command == "8"){
   d4518:	2800      	cmp	r0, #0
   d451a:	d0bf      	beq.n	d449c <_Z13setSensorType6String+0x8c>
		sysStatus.sensorType = 8;
   d451c:	4b10      	ldr	r3, [pc, #64]	; (d4560 <_Z13setSensorType6String+0x150>)
   d451e:	2208      	movs	r2, #8
   d4520:	e780      	b.n	d4424 <_Z13setSensorType6String+0x14>
			snprintf(data, sizeof(data), "{\"Sensor Type NOT updated: \":%d}", sensorType);
   d4522:	6813      	ldr	r3, [r2, #0]
   d4524:	4812      	ldr	r0, [pc, #72]	; (d4570 <_Z13setSensorType6String+0x160>)
   d4526:	4a1c      	ldr	r2, [pc, #112]	; (d4598 <_Z13setSensorType6String+0x188>)
   d4528:	f44f 7180 	mov.w	r1, #256	; 0x100
   d452c:	f003 fb46 	bl	d7bbc <snprintf>
			logData("ERROR_STATE", data, true, true);
   d4530:	491a      	ldr	r1, [pc, #104]	; (d459c <_Z13setSensorType6String+0x18c>)
   d4532:	a801      	add	r0, sp, #4
   d4534:	f005 fce8 	bl	d9f08 <_ZN6StringC1EPKc>
   d4538:	490d      	ldr	r1, [pc, #52]	; (d4570 <_Z13setSensorType6String+0x160>)
   d453a:	a805      	add	r0, sp, #20
   d453c:	f005 fce4 	bl	d9f08 <_ZN6StringC1EPKc>
   d4540:	2301      	movs	r3, #1
   d4542:	461a      	mov	r2, r3
   d4544:	a905      	add	r1, sp, #20
   d4546:	a801      	add	r0, sp, #4
   d4548:	f7ff ff2a 	bl	d43a0 <_Z7logData6StringS_bb>
   d454c:	a805      	add	r0, sp, #20
   d454e:	f005 fc90 	bl	d9e72 <_ZN6StringD1Ev>
   d4552:	a801      	add	r0, sp, #4
   d4554:	f005 fc8d 	bl	d9e72 <_ZN6StringD1Ev>
			tempSetSensorFlag = 0;
   d4558:	2000      	movs	r0, #0
   d455a:	e79f      	b.n	d449c <_Z13setSensorType6String+0x8c>
   d455c:	000dc5d6 	.word	0x000dc5d6
   d4560:	2003e5bc 	.word	0x2003e5bc
   d4564:	2003e508 	.word	0x2003e508
   d4568:	2003e280 	.word	0x2003e280
   d456c:	000dbef5 	.word	0x000dbef5
   d4570:	2003e3f4 	.word	0x2003e3f4
   d4574:	000dbf12 	.word	0x000dbf12
   d4578:	000dc8a8 	.word	0x000dc8a8
   d457c:	000dbee9 	.word	0x000dbee9
   d4580:	000dc5fa 	.word	0x000dc5fa
   d4584:	000dbeeb 	.word	0x000dbeeb
   d4588:	000dbeed 	.word	0x000dbeed
   d458c:	000dbeef 	.word	0x000dbeef
   d4590:	000dbef1 	.word	0x000dbef1
   d4594:	000dbef3 	.word	0x000dbef3
   d4598:	000dbf15 	.word	0x000dbf15
   d459c:	000dbf36 	.word	0x000dbf36

000d45a0 <_Z18saveSystemDefaultsv>:
int saveSystemDefaults() {                                           // Default settings for the device - connected, not-low power and always on
   d45a0:	b530      	push	{r4, r5, lr}
   d45a2:	b089      	sub	sp, #36	; 0x24
	logData("MODE", "Saving system defaults", true, true);
   d45a4:	491e      	ldr	r1, [pc, #120]	; (d4620 <_Z18saveSystemDefaultsv+0x80>)
	fram.erase();                                                      	// Reset the FRAM to correct the issue
   d45a6:	4c1f      	ldr	r4, [pc, #124]	; (d4624 <_Z18saveSystemDefaultsv+0x84>)
   d45a8:	4d1f      	ldr	r5, [pc, #124]	; (d4628 <_Z18saveSystemDefaultsv+0x88>)
	logData("MODE", "Saving system defaults", true, true);
   d45aa:	4668      	mov	r0, sp
   d45ac:	f005 fcac 	bl	d9f08 <_ZN6StringC1EPKc>
   d45b0:	491e      	ldr	r1, [pc, #120]	; (d462c <_Z18saveSystemDefaultsv+0x8c>)
   d45b2:	a804      	add	r0, sp, #16
   d45b4:	f005 fca8 	bl	d9f08 <_ZN6StringC1EPKc>
   d45b8:	2301      	movs	r3, #1
   d45ba:	461a      	mov	r2, r3
   d45bc:	a904      	add	r1, sp, #16
   d45be:	4668      	mov	r0, sp
   d45c0:	f7ff feee 	bl	d43a0 <_Z7logData6StringS_bb>
   d45c4:	a804      	add	r0, sp, #16
   d45c6:	f005 fc54 	bl	d9e72 <_ZN6StringD1Ev>
   d45ca:	4668      	mov	r0, sp
   d45cc:	f005 fc51 	bl	d9e72 <_ZN6StringD1Ev>
	fram.erase();                                                      	// Reset the FRAM to correct the issue
   d45d0:	4620      	mov	r0, r4
   d45d2:	f002 f907 	bl	d67e4 <_ZN6MB85RC5eraseEv>
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
   d45d6:	4a16      	ldr	r2, [pc, #88]	; (d4630 <_Z18saveSystemDefaultsv+0x90>)
   d45d8:	2304      	movs	r3, #4
   d45da:	2100      	movs	r1, #0
   d45dc:	4620      	mov	r0, r4
   d45de:	f002 f984 	bl	d68ea <_ZN6MB85RC9writeDataEjPKhj>
        readData(framAddr, (uint8_t *)&t, sizeof(T));
   d45e2:	462a      	mov	r2, r5
   d45e4:	2304      	movs	r3, #4
   d45e6:	2100      	movs	r1, #0
   d45e8:	4620      	mov	r0, r4
   d45ea:	f002 f933 	bl	d6854 <_ZN6MB85RC8readDataEjPhj>
	sysStatus.structuresVersion = 1;
   d45ee:	4a11      	ldr	r2, [pc, #68]	; (d4634 <_Z18saveSystemDefaultsv+0x94>)
	sysStatus.timezone = -5;                                            // Default is East Coast Time
   d45f0:	4811      	ldr	r0, [pc, #68]	; (d4638 <_Z18saveSystemDefaultsv+0x98>)
   d45f2:	6150      	str	r0, [r2, #20]
	sysStatus.dstOffset = 1;
   d45f4:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
	sysStatus.verboseCounts = false;
   d45f8:	2300      	movs	r3, #0
	sysStatus.structuresVersion = 1;
   d45fa:	2101      	movs	r1, #1
	sysStatus.dstOffset = 1;
   d45fc:	6190      	str	r0, [r2, #24]
	sysStatus.verboseMode = false;
   d45fe:	f44f 7080 	mov.w	r0, #256	; 0x100
	sysStatus.structuresVersion = 1;
   d4602:	7011      	strb	r1, [r2, #0]
	sysStatus.verboseCounts = false;
   d4604:	7093      	strb	r3, [r2, #2]
	sysStatus.lowBatteryMode = false;
   d4606:	71d3      	strb	r3, [r2, #7]
	sysStatus.verboseMode = false;
   d4608:	8090      	strh	r0, [r2, #4]
	sysStatus.lastConnectionDuration = 0;                               // New measure
   d460a:	8513      	strh	r3, [r2, #40]	; 0x28
	sysStatus.sensorType = 1;											// By default - no sensor
   d460c:	f882 102a 	strb.w	r1, [r2, #42]	; 0x2a
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
   d4610:	232c      	movs	r3, #44	; 0x2c
   d4612:	2112      	movs	r1, #18
   d4614:	4620      	mov	r0, r4
   d4616:	f002 f968 	bl	d68ea <_ZN6MB85RC9writeDataEjPKhj>
}
   d461a:	6828      	ldr	r0, [r5, #0]
   d461c:	b009      	add	sp, #36	; 0x24
   d461e:	bd30      	pop	{r4, r5, pc}
   d4620:	000dbf42 	.word	0x000dbf42
   d4624:	2003e508 	.word	0x2003e508
   d4628:	2003e5e8 	.word	0x2003e5e8
   d462c:	000dbf47 	.word	0x000dbf47
   d4630:	000dc5cc 	.word	0x000dc5cc
   d4634:	2003e5bc 	.word	0x2003e5bc
   d4638:	c0a00000 	.word	0xc0a00000

000d463c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d463c:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d463e:	e9d0 5300 	ldrd	r5, r3, [r0]
   d4642:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   d4644:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d4646:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   d464a:	42ae      	cmp	r6, r5
   d464c:	d004      	beq.n	d4658 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
   d464e:	4628      	mov	r0, r5
   d4650:	f005 fc0f 	bl	d9e72 <_ZN6StringD1Ev>
   d4654:	3514      	adds	r5, #20
   d4656:	e7f8      	b.n	d464a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   d4658:	6820      	ldr	r0, [r4, #0]
   d465a:	f003 fa97 	bl	d7b8c <free>
    AllocatorT::free(data_);
}
   d465e:	4620      	mov	r0, r4
   d4660:	bd70      	pop	{r4, r5, r6, pc}

000d4662 <_ZN6MB85RC3putIhEERKT_jS3_>:
    template <typename T> const T &put(size_t framAddr, const T &t) {
   d4662:	b538      	push	{r3, r4, r5, lr}
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
   d4664:	6803      	ldr	r3, [r0, #0]
    template <typename T> const T &put(size_t framAddr, const T &t) {
   d4666:	4614      	mov	r4, r2
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
   d4668:	68dd      	ldr	r5, [r3, #12]
   d466a:	2301      	movs	r3, #1
   d466c:	47a8      	blx	r5
    }
   d466e:	4620      	mov	r0, r4
   d4670:	bd38      	pop	{r3, r4, r5, pc}
	...

000d4674 <_Z11watchdogISRv>:
void watchdogISR(){
   d4674:	b570      	push	{r4, r5, r6, lr}
	fram.put(FRAM::pirAddr, pirState);
   d4676:	4d0f      	ldr	r5, [pc, #60]	; (d46b4 <_Z11watchdogISRv+0x40>)
	pirState = 0;
   d4678:	4a0f      	ldr	r2, [pc, #60]	; (d46b8 <_Z11watchdogISRv+0x44>)
   d467a:	2400      	movs	r4, #0
	fram.put(FRAM::pirAddr, pirState);
   d467c:	2111      	movs	r1, #17
   d467e:	4628      	mov	r0, r5
	pirState = 0;
   d4680:	7014      	strb	r4, [r2, #0]
	fram.put(FRAM::pirAddr, pirState);
   d4682:	f7ff ffee 	bl	d4662 <_ZN6MB85RC3putIhEERKT_jS3_>
	rtcState = 0;
   d4686:	4a0d      	ldr	r2, [pc, #52]	; (d46bc <_Z11watchdogISRv+0x48>)
	fram.put(FRAM::rtcAddr, rtcState);
   d4688:	2109      	movs	r1, #9
   d468a:	4628      	mov	r0, r5
	rtcState = 0;
   d468c:	7014      	strb	r4, [r2, #0]
	fram.put(FRAM::rtcAddr, rtcState);
   d468e:	f7ff ffe8 	bl	d4662 <_ZN6MB85RC3putIhEERKT_jS3_>
	watchdogState = 1;
   d4692:	4a0b      	ldr	r2, [pc, #44]	; (d46c0 <_Z11watchdogISRv+0x4c>)
   d4694:	2601      	movs	r6, #1
	fram.put(FRAM::watchdogAddr, watchdogState);
   d4696:	2110      	movs	r1, #16
   d4698:	4628      	mov	r0, r5
	watchdogState = 1;
   d469a:	7016      	strb	r6, [r2, #0]
	fram.put(FRAM::watchdogAddr, watchdogState);
   d469c:	f7ff ffe1 	bl	d4662 <_ZN6MB85RC3putIhEERKT_jS3_>
	digitalWrite(donePin, HIGH);                           // Pet the watchdog
   d46a0:	4631      	mov	r1, r6
   d46a2:	2005      	movs	r0, #5
   d46a4:	f006 f95d 	bl	da962 <digitalWrite>
	digitalWrite(donePin, LOW);
   d46a8:	4621      	mov	r1, r4
   d46aa:	2005      	movs	r0, #5
}
   d46ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	digitalWrite(donePin, LOW);
   d46b0:	f006 b957 	b.w	da962 <digitalWrite>
   d46b4:	2003e508 	.word	0x2003e508
   d46b8:	2003e56b 	.word	0x2003e56b
   d46bc:	2003e5ac 	.word	0x2003e5ac
   d46c0:	2003e5ec 	.word	0x2003e5ec

000d46c4 <setup>:
void setup() {
   d46c4:	b513      	push	{r0, r1, r4, lr}
	Serial.begin(9600);
   d46c6:	f006 f823 	bl	da710 <_Z16_fetch_usbserialv>
        return register_function(call_raw_user_function, (void*)func, funcKey);
   d46ca:	4c36      	ldr	r4, [pc, #216]	; (d47a4 <setup+0xe0>)
   d46cc:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d46d0:	f006 f80e 	bl	da6f0 <_ZN9USBSerial5beginEl>
	Serial1.begin(9600);
   d46d4:	f005 ff7a 	bl	da5cc <_Z22__fetch_global_Serial1v>
   d46d8:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d46dc:	f005 ff70 	bl	da5c0 <_ZN11USARTSerial5beginEm>
	setupPMIC();
   d46e0:	f7ff fda6 	bl	d4230 <_Z9setupPMICv>
   d46e4:	4a30      	ldr	r2, [pc, #192]	; (d47a8 <setup+0xe4>)
   d46e6:	4931      	ldr	r1, [pc, #196]	; (d47ac <setup+0xe8>)
   d46e8:	4620      	mov	r0, r4
   d46ea:	f003 fb84 	bl	d7df6 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d46ee:	4a30      	ldr	r2, [pc, #192]	; (d47b0 <setup+0xec>)
   d46f0:	4930      	ldr	r1, [pc, #192]	; (d47b4 <setup+0xf0>)
   d46f2:	4620      	mov	r0, r4
   d46f4:	f003 fb7f 	bl	d7df6 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d46f8:	4a2f      	ldr	r2, [pc, #188]	; (d47b8 <setup+0xf4>)
   d46fa:	4930      	ldr	r1, [pc, #192]	; (d47bc <setup+0xf8>)
   d46fc:	4620      	mov	r0, r4
   d46fe:	f003 fb7a 	bl	d7df6 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d4702:	2300      	movs	r3, #0
   d4704:	2202      	movs	r2, #2
   d4706:	492e      	ldr	r1, [pc, #184]	; (d47c0 <setup+0xfc>)
   d4708:	482e      	ldr	r0, [pc, #184]	; (d47c4 <setup+0x100>)
   d470a:	f003 f98f 	bl	d7a2c <spark_variable>
	pinMode(userSwitch, INPUT);										// Button for user input
   d470e:	2100      	movs	r1, #0
   d4710:	2004      	movs	r0, #4
   d4712:	f006 f915 	bl	da940 <pinMode>
	pinMode(wakeUpPin, INPUT_PULLDOWN);								// This pin is active HIGH
   d4716:	2103      	movs	r1, #3
   d4718:	2008      	movs	r0, #8
   d471a:	f006 f911 	bl	da940 <pinMode>
	pinMode(BUILT_IN_LED, OUTPUT);									// declare the Blue LED Pin as an output
   d471e:	2101      	movs	r1, #1
   d4720:	2007      	movs	r0, #7
   d4722:	f006 f90d 	bl	da940 <pinMode>
	pinMode(donePin, OUTPUT);										// Allows us to pet the watchdog
   d4726:	2101      	movs	r1, #1
   d4728:	2005      	movs	r0, #5
   d472a:	f006 f909 	bl	da940 <pinMode>
	digitalWrite(donePin, HIGH);
   d472e:	2101      	movs	r1, #1
   d4730:	2005      	movs	r0, #5
   d4732:	f006 f916 	bl	da962 <digitalWrite>
	digitalWrite(donePin, LOW);										// Pet the watchdog
   d4736:	2100      	movs	r1, #0
   d4738:	2005      	movs	r0, #5
   d473a:	f006 f912 	bl	da962 <digitalWrite>
	pinMode(DeepSleepPin , OUTPUT);									// For a hard reset active HIGH
   d473e:	2101      	movs	r1, #1
   d4740:	2006      	movs	r0, #6
   d4742:	f006 f8fd 	bl	da940 <pinMode>
	pinMode(PIRPin, INPUT_PULLDOWN);								// PIR Sensor Digital
   d4746:	2103      	movs	r1, #3
   d4748:	2010      	movs	r0, #16
   d474a:	f006 f8f9 	bl	da940 <pinMode>
	pinMode(CAPACITANCE_SIGNAL_1, INPUT_PULLDOWN);					// Cap PCB
   d474e:	2103      	movs	r1, #3
   d4750:	2013      	movs	r0, #19
   d4752:	f006 f8f5 	bl	da940 <pinMode>
	pinMode(RESISTANCE_SIGNAL_1, INPUT_PULLDOWN);					// Cap PCB
   d4756:	2103      	movs	r1, #3
   d4758:	2012      	movs	r0, #18
   d475a:	f006 f8f1 	bl	da940 <pinMode>
	Time.zone(-5 + Time.getDSTOffset());
   d475e:	f005 fd83 	bl	da268 <_ZN9TimeClass12getDSTOffsetEv>
   d4762:	eef1 7a04 	vmov.f32	s15, #20	; 0x40a00000  5.0
   d4766:	ee30 0a67 	vsub.f32	s0, s0, s15
   d476a:	f005 fd5d 	bl	da228 <_ZN9TimeClass4zoneEf>
	rtc.setup();
   d476e:	4816      	ldr	r0, [pc, #88]	; (d47c8 <setup+0x104>)
   d4770:	f002 fb92 	bl	d6e98 <_ZN8MCP794105setupEv>
	delay(100);
   d4774:	2064      	movs	r0, #100	; 0x64
   d4776:	f003 fa71 	bl	d7c5c <delay>
	fram.begin();									  				// Initializes Wire but does not return a boolean on successful initialization
   d477a:	4814      	ldr	r0, [pc, #80]	; (d47cc <setup+0x108>)
   d477c:	f002 f828 	bl	d67d0 <_ZN6MB85RC5beginEv>
	delay(100);
   d4780:	2064      	movs	r0, #100	; 0x64
   d4782:	f003 fa6b 	bl	d7c5c <delay>
	attachInterrupt(wakeUpPin, watchdogISR, RISING);  				// Need to pet the watchdog when needed
   d4786:	2300      	movs	r3, #0
   d4788:	9300      	str	r3, [sp, #0]
   d478a:	4911      	ldr	r1, [pc, #68]	; (d47d0 <setup+0x10c>)
   d478c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d4790:	2201      	movs	r2, #1
   d4792:	2008      	movs	r0, #8
   d4794:	f003 ff1a 	bl	d85cc <_Z15attachInterrupttPFvvE13InterruptModeah>
}
   d4798:	b002      	add	sp, #8
   d479a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	watchdogISR();
   d479e:	f7ff bf69 	b.w	d4674 <_Z11watchdogISRv>
   d47a2:	bf00      	nop
   d47a4:	000d7dcb 	.word	0x000d7dcb
   d47a8:	000dbf5e 	.word	0x000dbf5e
   d47ac:	000d40d5 	.word	0x000d40d5
   d47b0:	000dbf6c 	.word	0x000dbf6c
   d47b4:	000d4411 	.word	0x000d4411
   d47b8:	000dbf7a 	.word	0x000dbf7a
   d47bc:	000d4119 	.word	0x000d4119
   d47c0:	2003e280 	.word	0x2003e280
   d47c4:	000dbf6f 	.word	0x000dbf6f
   d47c8:	2003e590 	.word	0x2003e590
   d47cc:	2003e508 	.word	0x2003e508
   d47d0:	000d4675 	.word	0x000d4675
   d47d4:	00000000 	.word	0x00000000

000d47d8 <loop>:
void loop() {
   d47d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d47dc:	ed2d 8b0c 	vpush	{d8-d13}
	switch(sensorType){
   d47e0:	4cb0      	ldr	r4, [pc, #704]	; (d4aa4 <loop+0x2cc>)
	rtc.loop();									  							// Need to run this in the main loop
   d47e2:	48b1      	ldr	r0, [pc, #708]	; (d4aa8 <loop+0x2d0>)
void loop() {
   d47e4:	b0af      	sub	sp, #188	; 0xbc
	rtc.loop();									  							// Need to run this in the main loop
   d47e6:	f002 fc5d 	bl	d70a4 <_ZN8MCP794104loopEv>
	switch(sensorType){
   d47ea:	6823      	ldr	r3, [r4, #0]
   d47ec:	3b05      	subs	r3, #5
   d47ee:	2b01      	cmp	r3, #1
   d47f0:	d847      	bhi.n	d4882 <loop+0xaa>
			if(Serial1.available() > 0){
   d47f2:	f005 feeb 	bl	da5cc <_Z22__fetch_global_Serial1v>
   d47f6:	6803      	ldr	r3, [r0, #0]
   d47f8:	691b      	ldr	r3, [r3, #16]
   d47fa:	4798      	blx	r3
   d47fc:	2800      	cmp	r0, #0
   d47fe:	dd40      	ble.n	d4882 <loop+0xaa>
				distance = 0;
   d4800:	4faa      	ldr	r7, [pc, #680]	; (d4aac <loop+0x2d4>)
   d4802:	2300      	movs	r3, #0
				delay(4);
   d4804:	2004      	movs	r0, #4
				distance = 0;
   d4806:	603b      	str	r3, [r7, #0]
				delay(4);
   d4808:	f003 fa28 	bl	d7c5c <delay>
				if (Serial1.read() == 0xff) {
   d480c:	f005 fede 	bl	da5cc <_Z22__fetch_global_Serial1v>
   d4810:	6803      	ldr	r3, [r0, #0]
   d4812:	695b      	ldr	r3, [r3, #20]
   d4814:	4798      	blx	r3
   d4816:	28ff      	cmp	r0, #255	; 0xff
   d4818:	d133      	bne.n	d4882 <loop+0xaa>
					data_buffer[0] = 0xff;
   d481a:	4da5      	ldr	r5, [pc, #660]	; (d4ab0 <loop+0x2d8>)
					for (int i = 1; i < 4; i++) {
   d481c:	2601      	movs	r6, #1
					data_buffer[0] = 0xff;
   d481e:	7028      	strb	r0, [r5, #0]
						data_buffer[i] = Serial1.read();
   d4820:	f005 fed4 	bl	da5cc <_Z22__fetch_global_Serial1v>
   d4824:	6803      	ldr	r3, [r0, #0]
   d4826:	695b      	ldr	r3, [r3, #20]
   d4828:	4798      	blx	r3
   d482a:	55a8      	strb	r0, [r5, r6]
					for (int i = 1; i < 4; i++) {
   d482c:	3601      	adds	r6, #1
   d482e:	2e04      	cmp	r6, #4
   d4830:	d1f6      	bne.n	d4820 <loop+0x48>
					CS = data_buffer[0] + data_buffer[1] + data_buffer[2];
   d4832:	7869      	ldrb	r1, [r5, #1]
   d4834:	782a      	ldrb	r2, [r5, #0]
   d4836:	78ab      	ldrb	r3, [r5, #2]
   d4838:	489e      	ldr	r0, [pc, #632]	; (d4ab4 <loop+0x2dc>)
   d483a:	440a      	add	r2, r1
   d483c:	441a      	add	r2, r3
   d483e:	b2d2      	uxtb	r2, r2
   d4840:	7002      	strb	r2, [r0, #0]
					if (data_buffer[3] == CS) {
   d4842:	78e8      	ldrb	r0, [r5, #3]
   d4844:	4290      	cmp	r0, r2
   d4846:	d11c      	bne.n	d4882 <loop+0xaa>
						distance = (data_buffer[1] << 8) + data_buffer[2];
   d4848:	eb03 2301 	add.w	r3, r3, r1, lsl #8
						snprintf(data, sizeof(data), "Distance: %d mm", distance);
   d484c:	4a9a      	ldr	r2, [pc, #616]	; (d4ab8 <loop+0x2e0>)
   d484e:	489b      	ldr	r0, [pc, #620]	; (d4abc <loop+0x2e4>)
						distance = (data_buffer[1] << 8) + data_buffer[2];
   d4850:	603b      	str	r3, [r7, #0]
						snprintf(data, sizeof(data), "Distance: %d mm", distance);
   d4852:	f44f 7180 	mov.w	r1, #256	; 0x100
   d4856:	f003 f9b1 	bl	d7bbc <snprintf>
						logData("Distance", data, true, false);
   d485a:	4999      	ldr	r1, [pc, #612]	; (d4ac0 <loop+0x2e8>)
   d485c:	a821      	add	r0, sp, #132	; 0x84
   d485e:	f005 fb53 	bl	d9f08 <_ZN6StringC1EPKc>
   d4862:	4996      	ldr	r1, [pc, #600]	; (d4abc <loop+0x2e4>)
   d4864:	a825      	add	r0, sp, #148	; 0x94
   d4866:	f005 fb4f 	bl	d9f08 <_ZN6StringC1EPKc>
   d486a:	2300      	movs	r3, #0
   d486c:	2201      	movs	r2, #1
   d486e:	a925      	add	r1, sp, #148	; 0x94
   d4870:	a821      	add	r0, sp, #132	; 0x84
   d4872:	f7ff fd95 	bl	d43a0 <_Z7logData6StringS_bb>
   d4876:	a825      	add	r0, sp, #148	; 0x94
   d4878:	f005 fafb 	bl	d9e72 <_ZN6StringD1Ev>
   d487c:	a821      	add	r0, sp, #132	; 0x84
   d487e:	f005 faf8 	bl	d9e72 <_ZN6StringD1Ev>
	switch(state){
   d4882:	4a90      	ldr	r2, [pc, #576]	; (d4ac4 <loop+0x2ec>)
   d4884:	7813      	ldrb	r3, [r2, #0]
   d4886:	3b02      	subs	r3, #2
   d4888:	4692      	mov	sl, r2
   d488a:	2b07      	cmp	r3, #7
   d488c:	f200 8524 	bhi.w	d52d8 <loop+0xb00>
   d4890:	e8df f013 	tbh	[pc, r3, lsl #1]
   d4894:	017f0008 	.word	0x017f0008
   d4898:	032101f5 	.word	0x032101f5
   d489c:	04c104a0 	.word	0x04c104a0
   d48a0:	075406fe 	.word	0x075406fe
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d48a4:	f003 f8e2 	bl	d7a6c <spark_cloud_flag_connected>
   d48a8:	4f87      	ldr	r7, [pc, #540]	; (d4ac8 <loop+0x2f0>)
			if(Particle.connected()){
   d48aa:	2800      	cmp	r0, #0
   d48ac:	f000 814c 	beq.w	d4b48 <loop+0x370>
				logData("PARTICLE", "PARTICLE CONNECTED", true, true);
   d48b0:	4986      	ldr	r1, [pc, #536]	; (d4acc <loop+0x2f4>)
        readData(framAddr, (uint8_t *)&t, sizeof(T));
   d48b2:	4e87      	ldr	r6, [pc, #540]	; (d4ad0 <loop+0x2f8>)
   d48b4:	a821      	add	r0, sp, #132	; 0x84
   d48b6:	f005 fb27 	bl	d9f08 <_ZN6StringC1EPKc>
   d48ba:	4986      	ldr	r1, [pc, #536]	; (d4ad4 <loop+0x2fc>)
   d48bc:	a825      	add	r0, sp, #148	; 0x94
   d48be:	f005 fb23 	bl	d9f08 <_ZN6StringC1EPKc>
   d48c2:	2301      	movs	r3, #1
   d48c4:	461a      	mov	r2, r3
   d48c6:	a925      	add	r1, sp, #148	; 0x94
   d48c8:	a821      	add	r0, sp, #132	; 0x84
   d48ca:	f7ff fd69 	bl	d43a0 <_Z7logData6StringS_bb>
   d48ce:	a825      	add	r0, sp, #148	; 0x94
   d48d0:	f005 facf 	bl	d9e72 <_ZN6StringD1Ev>
   d48d4:	a821      	add	r0, sp, #132	; 0x84
   d48d6:	f005 facc 	bl	d9e72 <_ZN6StringD1Ev>
   d48da:	487f      	ldr	r0, [pc, #508]	; (d4ad8 <loop+0x300>)
   d48dc:	2304      	movs	r3, #4
   d48de:	4632      	mov	r2, r6
   d48e0:	2100      	movs	r1, #0
   d48e2:	f001 ffb7 	bl	d6854 <_ZN6MB85RC8readDataEjPhj>
				if(tempFRAMversionNumber == FRAMversionNumber){
   d48e6:	f8d6 8000 	ldr.w	r8, [r6]
   d48ea:	f1b8 0f01 	cmp.w	r8, #1
   d48ee:	f040 8089 	bne.w	d4a04 <loop+0x22c>
					snprintf(data, sizeof(data), "FRAMversionNumber = %d, tempFRAMversionNumber = %d", FRAMversionNumber, tempFRAMversionNumber);
   d48f2:	4a7a      	ldr	r2, [pc, #488]	; (d4adc <loop+0x304>)
   d48f4:	4871      	ldr	r0, [pc, #452]	; (d4abc <loop+0x2e4>)
   d48f6:	f8cd 8000 	str.w	r8, [sp]
   d48fa:	4643      	mov	r3, r8
   d48fc:	f44f 7180 	mov.w	r1, #256	; 0x100
   d4900:	f003 f95c 	bl	d7bbc <snprintf>
					logData("tempFRAMversionNumber RESULT", data, true, false);
   d4904:	4976      	ldr	r1, [pc, #472]	; (d4ae0 <loop+0x308>)
   d4906:	a821      	add	r0, sp, #132	; 0x84
   d4908:	f005 fafe 	bl	d9f08 <_ZN6StringC1EPKc>
   d490c:	496b      	ldr	r1, [pc, #428]	; (d4abc <loop+0x2e4>)
   d490e:	a825      	add	r0, sp, #148	; 0x94
   d4910:	f005 fafa 	bl	d9f08 <_ZN6StringC1EPKc>
   d4914:	2300      	movs	r3, #0
   d4916:	4642      	mov	r2, r8
						logData("ERROR_STATE", "Device will not work without FRAM", true, true);
   d4918:	a925      	add	r1, sp, #148	; 0x94
   d491a:	a821      	add	r0, sp, #132	; 0x84
   d491c:	f7ff fd40 	bl	d43a0 <_Z7logData6StringS_bb>
   d4920:	a825      	add	r0, sp, #148	; 0x94
   d4922:	f005 faa6 	bl	d9e72 <_ZN6StringD1Ev>
   d4926:	a821      	add	r0, sp, #132	; 0x84
   d4928:	f005 faa3 	bl	d9e72 <_ZN6StringD1Ev>
				if(tempFRAMversionNumber == FRAMversionNumber){
   d492c:	6833      	ldr	r3, [r6, #0]
   d492e:	2b01      	cmp	r3, #1
   d4930:	d13e      	bne.n	d49b0 <loop+0x1d8>
   d4932:	4d6c      	ldr	r5, [pc, #432]	; (d4ae4 <loop+0x30c>)
   d4934:	4868      	ldr	r0, [pc, #416]	; (d4ad8 <loop+0x300>)
   d4936:	232c      	movs	r3, #44	; 0x2c
   d4938:	462a      	mov	r2, r5
   d493a:	2112      	movs	r1, #18
   d493c:	f001 ff8a 	bl	d6854 <_ZN6MB85RC8readDataEjPhj>
					if(sysStatus.sensorType > -1 && sysStatus.sensorType < 9){
   d4940:	f895 302a 	ldrb.w	r3, [r5, #42]	; 0x2a
					snprintf(data, sizeof(data), "SensorType = %d", sensorType);
   d4944:	4a68      	ldr	r2, [pc, #416]	; (d4ae8 <loop+0x310>)
   d4946:	485d      	ldr	r0, [pc, #372]	; (d4abc <loop+0x2e4>)
					if(sysStatus.sensorType > -1 && sysStatus.sensorType < 9){
   d4948:	2b08      	cmp	r3, #8
						sensorType = sysStatus.sensorType;									// Set sensorType from sysStatus.sensorType
   d494a:	bf98      	it	ls
   d494c:	6023      	strls	r3, [r4, #0]
					snprintf(data, sizeof(data), "SensorType = %d", sensorType);
   d494e:	6823      	ldr	r3, [r4, #0]
   d4950:	f44f 7180 	mov.w	r1, #256	; 0x100
   d4954:	f003 f932 	bl	d7bbc <snprintf>
					logData("FRAM SensorType RESULT", data, true, true);
   d4958:	4964      	ldr	r1, [pc, #400]	; (d4aec <loop+0x314>)
   d495a:	a821      	add	r0, sp, #132	; 0x84
   d495c:	f005 fad4 	bl	d9f08 <_ZN6StringC1EPKc>
   d4960:	4956      	ldr	r1, [pc, #344]	; (d4abc <loop+0x2e4>)
   d4962:	a825      	add	r0, sp, #148	; 0x94
   d4964:	f005 fad0 	bl	d9f08 <_ZN6StringC1EPKc>
   d4968:	2301      	movs	r3, #1
   d496a:	461a      	mov	r2, r3
   d496c:	a925      	add	r1, sp, #148	; 0x94
   d496e:	a821      	add	r0, sp, #132	; 0x84
   d4970:	f7ff fd16 	bl	d43a0 <_Z7logData6StringS_bb>
   d4974:	a825      	add	r0, sp, #148	; 0x94
   d4976:	f005 fa7c 	bl	d9e72 <_ZN6StringD1Ev>
   d497a:	a821      	add	r0, sp, #132	; 0x84
   d497c:	f005 fa79 	bl	d9e72 <_ZN6StringD1Ev>
					if(watchdogState){
   d4980:	4b5b      	ldr	r3, [pc, #364]	; (d4af0 <loop+0x318>)
   d4982:	781b      	ldrb	r3, [r3, #0]
   d4984:	2b00      	cmp	r3, #0
   d4986:	d075      	beq.n	d4a74 <loop+0x29c>
						logData("SLEEP RESULT", "Woke By Watcdhdog", true, true);
   d4988:	495a      	ldr	r1, [pc, #360]	; (d4af4 <loop+0x31c>)
   d498a:	a821      	add	r0, sp, #132	; 0x84
   d498c:	f005 fabc 	bl	d9f08 <_ZN6StringC1EPKc>
   d4990:	4959      	ldr	r1, [pc, #356]	; (d4af8 <loop+0x320>)
							logData("SLEEP RESULT", "Woke By PIR", true, true);
   d4992:	a825      	add	r0, sp, #148	; 0x94
   d4994:	f005 fab8 	bl	d9f08 <_ZN6StringC1EPKc>
   d4998:	2301      	movs	r3, #1
   d499a:	461a      	mov	r2, r3
   d499c:	a925      	add	r1, sp, #148	; 0x94
   d499e:	a821      	add	r0, sp, #132	; 0x84
   d49a0:	f7ff fcfe 	bl	d43a0 <_Z7logData6StringS_bb>
   d49a4:	a825      	add	r0, sp, #148	; 0x94
   d49a6:	f005 fa64 	bl	d9e72 <_ZN6StringD1Ev>
   d49aa:	a821      	add	r0, sp, #132	; 0x84
   d49ac:	f005 fa61 	bl	d9e72 <_ZN6StringD1Ev>
				if(sensorType == 4){
   d49b0:	6823      	ldr	r3, [r4, #0]
   d49b2:	2b04      	cmp	r3, #4
   d49b4:	d121      	bne.n	d49fa <loop+0x222>
					mpu6050.initialize();
   d49b6:	4851      	ldr	r0, [pc, #324]	; (d4afc <loop+0x324>)
   d49b8:	f002 fd87 	bl	d74ca <_ZN7MPU605010initializeEv>
					delay(500);
   d49bc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d49c0:	f003 f94c 	bl	d7c5c <delay>
					if(mpu6050.getSleepEnabled()){
   d49c4:	484d      	ldr	r0, [pc, #308]	; (d4afc <loop+0x324>)
   d49c6:	f002 fd5b 	bl	d7480 <_ZN7MPU605015getSleepEnabledEv>
   d49ca:	4604      	mov	r4, r0
						logData("mpu6050.getSleepEnabled", "True", true, false);
   d49cc:	494c      	ldr	r1, [pc, #304]	; (d4b00 <loop+0x328>)
   d49ce:	a821      	add	r0, sp, #132	; 0x84
					if(mpu6050.getSleepEnabled()){
   d49d0:	2c00      	cmp	r4, #0
   d49d2:	f000 80b1 	beq.w	d4b38 <loop+0x360>
						logData("mpu6050.getSleepEnabled", "True", true, false);
   d49d6:	f005 fa97 	bl	d9f08 <_ZN6StringC1EPKc>
   d49da:	494a      	ldr	r1, [pc, #296]	; (d4b04 <loop+0x32c>)
   d49dc:	a825      	add	r0, sp, #148	; 0x94
   d49de:	f005 fa93 	bl	d9f08 <_ZN6StringC1EPKc>
   d49e2:	2300      	movs	r3, #0
						logData("mpu6050.getSleepEnabled", "False", true, false);
   d49e4:	2201      	movs	r2, #1
   d49e6:	a925      	add	r1, sp, #148	; 0x94
   d49e8:	a821      	add	r0, sp, #132	; 0x84
   d49ea:	f7ff fcd9 	bl	d43a0 <_Z7logData6StringS_bb>
   d49ee:	a825      	add	r0, sp, #148	; 0x94
   d49f0:	f005 fa3f 	bl	d9e72 <_ZN6StringD1Ev>
   d49f4:	a821      	add	r0, sp, #132	; 0x84
   d49f6:	f005 fa3c 	bl	d9e72 <_ZN6StringD1Ev>
   d49fa:	f002 fdc5 	bl	d7588 <HAL_Timer_Get_Milli_Seconds>
				stateTime = millis();
   d49fe:	6038      	str	r0, [r7, #0]
					state = SAMPLE_SETUP_STATE;
   d4a00:	2303      	movs	r3, #3
   d4a02:	e0c3      	b.n	d4b8c <loop+0x3b4>
					logData("OK", "Device will load defaults to FRAM", true, false);
   d4a04:	4940      	ldr	r1, [pc, #256]	; (d4b08 <loop+0x330>)
   d4a06:	a821      	add	r0, sp, #132	; 0x84
   d4a08:	f005 fa7e 	bl	d9f08 <_ZN6StringC1EPKc>
   d4a0c:	493f      	ldr	r1, [pc, #252]	; (d4b0c <loop+0x334>)
   d4a0e:	a825      	add	r0, sp, #148	; 0x94
   d4a10:	f005 fa7a 	bl	d9f08 <_ZN6StringC1EPKc>
   d4a14:	2300      	movs	r3, #0
   d4a16:	2201      	movs	r2, #1
   d4a18:	a925      	add	r1, sp, #148	; 0x94
   d4a1a:	a821      	add	r0, sp, #132	; 0x84
   d4a1c:	f7ff fcc0 	bl	d43a0 <_Z7logData6StringS_bb>
   d4a20:	a825      	add	r0, sp, #148	; 0x94
   d4a22:	f005 fa26 	bl	d9e72 <_ZN6StringD1Ev>
   d4a26:	a821      	add	r0, sp, #132	; 0x84
   d4a28:	f005 fa23 	bl	d9e72 <_ZN6StringD1Ev>
					tempFRAMversionNumber = saveSystemDefaults();
   d4a2c:	f7ff fdb8 	bl	d45a0 <_Z18saveSystemDefaultsv>
					if(tempFRAMversionNumber == FRAMversionNumber){
   d4a30:	2801      	cmp	r0, #1
					tempFRAMversionNumber = saveSystemDefaults();
   d4a32:	4605      	mov	r5, r0
   d4a34:	6030      	str	r0, [r6, #0]
					if(tempFRAMversionNumber == FRAMversionNumber){
   d4a36:	d112      	bne.n	d4a5e <loop+0x286>
						snprintf(data, sizeof(data), "FRAMversionNumber = %d, tempFRAMversionNumber = %d", FRAMversionNumber, tempFRAMversionNumber);
   d4a38:	4603      	mov	r3, r0
   d4a3a:	4a28      	ldr	r2, [pc, #160]	; (d4adc <loop+0x304>)
   d4a3c:	9000      	str	r0, [sp, #0]
   d4a3e:	f44f 7180 	mov.w	r1, #256	; 0x100
   d4a42:	481e      	ldr	r0, [pc, #120]	; (d4abc <loop+0x2e4>)
   d4a44:	f003 f8ba 	bl	d7bbc <snprintf>
						logData("tempFRAMversionNumber RESULT", data, true, false);
   d4a48:	4925      	ldr	r1, [pc, #148]	; (d4ae0 <loop+0x308>)
   d4a4a:	a821      	add	r0, sp, #132	; 0x84
   d4a4c:	f005 fa5c 	bl	d9f08 <_ZN6StringC1EPKc>
   d4a50:	491a      	ldr	r1, [pc, #104]	; (d4abc <loop+0x2e4>)
   d4a52:	a825      	add	r0, sp, #148	; 0x94
   d4a54:	f005 fa58 	bl	d9f08 <_ZN6StringC1EPKc>
   d4a58:	2300      	movs	r3, #0
   d4a5a:	462a      	mov	r2, r5
   d4a5c:	e75c      	b.n	d4918 <loop+0x140>
						logData("ERROR_STATE", "Device will not work without FRAM", true, true);
   d4a5e:	492c      	ldr	r1, [pc, #176]	; (d4b10 <loop+0x338>)
   d4a60:	a821      	add	r0, sp, #132	; 0x84
   d4a62:	f005 fa51 	bl	d9f08 <_ZN6StringC1EPKc>
   d4a66:	492b      	ldr	r1, [pc, #172]	; (d4b14 <loop+0x33c>)
   d4a68:	a825      	add	r0, sp, #148	; 0x94
   d4a6a:	f005 fa4d 	bl	d9f08 <_ZN6StringC1EPKc>
   d4a6e:	2301      	movs	r3, #1
   d4a70:	461a      	mov	r2, r3
   d4a72:	e751      	b.n	d4918 <loop+0x140>
   d4a74:	4e28      	ldr	r6, [pc, #160]	; (d4b18 <loop+0x340>)
   d4a76:	4d29      	ldr	r5, [pc, #164]	; (d4b1c <loop+0x344>)
   d4a78:	4817      	ldr	r0, [pc, #92]	; (d4ad8 <loop+0x300>)
   d4a7a:	2301      	movs	r3, #1
   d4a7c:	4632      	mov	r2, r6
   d4a7e:	2109      	movs	r1, #9
   d4a80:	f001 fee8 	bl	d6854 <_ZN6MB85RC8readDataEjPhj>
   d4a84:	2301      	movs	r3, #1
   d4a86:	4814      	ldr	r0, [pc, #80]	; (d4ad8 <loop+0x300>)
   d4a88:	462a      	mov	r2, r5
   d4a8a:	2111      	movs	r1, #17
   d4a8c:	f001 fee2 	bl	d6854 <_ZN6MB85RC8readDataEjPhj>
						if(rtcState){
   d4a90:	7833      	ldrb	r3, [r6, #0]
   d4a92:	2b00      	cmp	r3, #0
   d4a94:	d046      	beq.n	d4b24 <loop+0x34c>
							logData("SLEEP RESULT", "Woke By RTC", true, true);
   d4a96:	4917      	ldr	r1, [pc, #92]	; (d4af4 <loop+0x31c>)
   d4a98:	a821      	add	r0, sp, #132	; 0x84
   d4a9a:	f005 fa35 	bl	d9f08 <_ZN6StringC1EPKc>
   d4a9e:	4920      	ldr	r1, [pc, #128]	; (d4b20 <loop+0x348>)
   d4aa0:	e777      	b.n	d4992 <loop+0x1ba>
   d4aa2:	bf00      	nop
   d4aa4:	2003e280 	.word	0x2003e280
   d4aa8:	2003e590 	.word	0x2003e590
   d4aac:	2003e4fc 	.word	0x2003e4fc
   d4ab0:	2003e4f4 	.word	0x2003e4f4
   d4ab4:	2003e340 	.word	0x2003e340
   d4ab8:	000dbf89 	.word	0x000dbf89
   d4abc:	2003e3f4 	.word	0x2003e3f4
   d4ac0:	000dbf99 	.word	0x000dbf99
   d4ac4:	2003e284 	.word	0x2003e284
   d4ac8:	2003e5b8 	.word	0x2003e5b8
   d4acc:	000dbfa2 	.word	0x000dbfa2
   d4ad0:	2003e5e8 	.word	0x2003e5e8
   d4ad4:	000dbfab 	.word	0x000dbfab
   d4ad8:	2003e508 	.word	0x2003e508
   d4adc:	000dbfbe 	.word	0x000dbfbe
   d4ae0:	000dbff1 	.word	0x000dbff1
   d4ae4:	2003e5bc 	.word	0x2003e5bc
   d4ae8:	000dc052 	.word	0x000dc052
   d4aec:	000dc062 	.word	0x000dc062
   d4af0:	2003e5ec 	.word	0x2003e5ec
   d4af4:	000dc079 	.word	0x000dc079
   d4af8:	000dc086 	.word	0x000dc086
   d4afc:	2003e55c 	.word	0x2003e55c
   d4b00:	000dc0b0 	.word	0x000dc0b0
   d4b04:	000dc0c8 	.word	0x000dc0c8
   d4b08:	000dbf12 	.word	0x000dbf12
   d4b0c:	000dc00e 	.word	0x000dc00e
   d4b10:	000dbf36 	.word	0x000dbf36
   d4b14:	000dc030 	.word	0x000dc030
   d4b18:	2003e5ac 	.word	0x2003e5ac
   d4b1c:	2003e56b 	.word	0x2003e56b
   d4b20:	000dc098 	.word	0x000dc098
						} else if(pirState){
   d4b24:	782b      	ldrb	r3, [r5, #0]
   d4b26:	2b00      	cmp	r3, #0
   d4b28:	f43f af42 	beq.w	d49b0 <loop+0x1d8>
							logData("SLEEP RESULT", "Woke By PIR", true, true);
   d4b2c:	4981      	ldr	r1, [pc, #516]	; (d4d34 <loop+0x55c>)
   d4b2e:	a821      	add	r0, sp, #132	; 0x84
   d4b30:	f005 f9ea 	bl	d9f08 <_ZN6StringC1EPKc>
   d4b34:	4980      	ldr	r1, [pc, #512]	; (d4d38 <loop+0x560>)
   d4b36:	e72c      	b.n	d4992 <loop+0x1ba>
						logData("mpu6050.getSleepEnabled", "False", true, false);
   d4b38:	f005 f9e6 	bl	d9f08 <_ZN6StringC1EPKc>
   d4b3c:	497f      	ldr	r1, [pc, #508]	; (d4d3c <loop+0x564>)
   d4b3e:	a825      	add	r0, sp, #148	; 0x94
   d4b40:	f005 f9e2 	bl	d9f08 <_ZN6StringC1EPKc>
   d4b44:	4623      	mov	r3, r4
   d4b46:	e74d      	b.n	d49e4 <loop+0x20c>
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
   d4b48:	f002 ff88 	bl	d7a5c <spark_cloud_flag_connect>
   d4b4c:	f002 fd1c 	bl	d7588 <HAL_Timer_Get_Milli_Seconds>
				if(millis() - stateTime > MAX_TIME_TO_WAIT_FOR_CONNECT_MS){
   d4b50:	683b      	ldr	r3, [r7, #0]
   d4b52:	1ac0      	subs	r0, r0, r3
   d4b54:	4b7a      	ldr	r3, [pc, #488]	; (d4d40 <loop+0x568>)
   d4b56:	4298      	cmp	r0, r3
   d4b58:	f240 83be 	bls.w	d52d8 <loop+0xb00>
					logData("PARTICLE", "PARTICLE FAILED TO CONNECT", true, true);
   d4b5c:	4979      	ldr	r1, [pc, #484]	; (d4d44 <loop+0x56c>)
   d4b5e:	a821      	add	r0, sp, #132	; 0x84
   d4b60:	f005 f9d2 	bl	d9f08 <_ZN6StringC1EPKc>
   d4b64:	4978      	ldr	r1, [pc, #480]	; (d4d48 <loop+0x570>)
   d4b66:	a825      	add	r0, sp, #148	; 0x94
   d4b68:	f005 f9ce 	bl	d9f08 <_ZN6StringC1EPKc>
   d4b6c:	2301      	movs	r3, #1
   d4b6e:	461a      	mov	r2, r3
   d4b70:	a925      	add	r1, sp, #148	; 0x94
   d4b72:	a821      	add	r0, sp, #132	; 0x84
   d4b74:	f7ff fc14 	bl	d43a0 <_Z7logData6StringS_bb>
   d4b78:	a825      	add	r0, sp, #148	; 0x94
   d4b7a:	f005 f97a 	bl	d9e72 <_ZN6StringD1Ev>
   d4b7e:	a821      	add	r0, sp, #132	; 0x84
   d4b80:	f005 f977 	bl	d9e72 <_ZN6StringD1Ev>
   d4b84:	f002 fd00 	bl	d7588 <HAL_Timer_Get_Milli_Seconds>
					state = SLEEP_WAIT_STATE;
   d4b88:	2308      	movs	r3, #8
					stateTime = millis();
   d4b8a:	6038      	str	r0, [r7, #0]
					state = SAMPLE_SETUP_STATE;
   d4b8c:	f88a 3000 	strb.w	r3, [sl]
}
   d4b90:	e3a2      	b.n	d52d8 <loop+0xb00>
			if(millis() - stateTime >= MAX_TIME_TO_SAMPLE_SETUP_WAIT){
   d4b92:	4e6e      	ldr	r6, [pc, #440]	; (d4d4c <loop+0x574>)
   d4b94:	f002 fcf8 	bl	d7588 <HAL_Timer_Get_Milli_Seconds>
   d4b98:	6832      	ldr	r2, [r6, #0]
   d4b9a:	1a80      	subs	r0, r0, r2
   d4b9c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   d4ba0:	f0c0 839a 	bcc.w	d52d8 <loop+0xb00>
				logData("SAMPLE_SETUP_STATE", "START SAMPLING", true, true);
   d4ba4:	496a      	ldr	r1, [pc, #424]	; (d4d50 <loop+0x578>)
				debug = false;
   d4ba6:	4f6b      	ldr	r7, [pc, #428]	; (d4d54 <loop+0x57c>)
				logData("SAMPLE_SETUP_STATE", "START SAMPLING", true, true);
   d4ba8:	a821      	add	r0, sp, #132	; 0x84
   d4baa:	f005 f9ad 	bl	d9f08 <_ZN6StringC1EPKc>
   d4bae:	496a      	ldr	r1, [pc, #424]	; (d4d58 <loop+0x580>)
   d4bb0:	a825      	add	r0, sp, #148	; 0x94
   d4bb2:	f005 f9a9 	bl	d9f08 <_ZN6StringC1EPKc>
   d4bb6:	2301      	movs	r3, #1
   d4bb8:	461a      	mov	r2, r3
   d4bba:	a925      	add	r1, sp, #148	; 0x94
   d4bbc:	a821      	add	r0, sp, #132	; 0x84
   d4bbe:	f7ff fbef 	bl	d43a0 <_Z7logData6StringS_bb>
   d4bc2:	a825      	add	r0, sp, #148	; 0x94
				debug = false;
   d4bc4:	2500      	movs	r5, #0
				logData("SAMPLE_SETUP_STATE", "START SAMPLING", true, true);
   d4bc6:	f005 f954 	bl	d9e72 <_ZN6StringD1Ev>
   d4bca:	a821      	add	r0, sp, #132	; 0x84
   d4bcc:	f005 f951 	bl	d9e72 <_ZN6StringD1Ev>
				digitalWrite(BUILT_IN_LED,LOW);                                    	// Turns off the LED
   d4bd0:	4629      	mov	r1, r5
   d4bd2:	2007      	movs	r0, #7
				debug = false;
   d4bd4:	703d      	strb	r5, [r7, #0]
				digitalWrite(BUILT_IN_LED,LOW);                                    	// Turns off the LED
   d4bd6:	f005 fec4 	bl	da962 <digitalWrite>
				sampleCounter = 1;
   d4bda:	4b60      	ldr	r3, [pc, #384]	; (d4d5c <loop+0x584>)
				carrierBoardTempSensorSum = 0;
   d4bdc:	4a60      	ldr	r2, [pc, #384]	; (d4d60 <loop+0x588>)
				sampleCounter = 1;
   d4bde:	2101      	movs	r1, #1
   d4be0:	6019      	str	r1, [r3, #0]
				carrierBoardTempSensorSum = 0;
   d4be2:	2300      	movs	r3, #0
   d4be4:	6013      	str	r3, [r2, #0]
				ax_ADXL343 = 0;
   d4be6:	4a5f      	ldr	r2, [pc, #380]	; (d4d64 <loop+0x58c>)
   d4be8:	6013      	str	r3, [r2, #0]
				ay_ADXL343 = 0;
   d4bea:	4a5f      	ldr	r2, [pc, #380]	; (d4d68 <loop+0x590>)
   d4bec:	6013      	str	r3, [r2, #0]
				az_ADXL343 = 0;
   d4bee:	4a5f      	ldr	r2, [pc, #380]	; (d4d6c <loop+0x594>)
   d4bf0:	6013      	str	r3, [r2, #0]
				c_Reading = 0;
   d4bf2:	4a5f      	ldr	r2, [pc, #380]	; (d4d70 <loop+0x598>)
   d4bf4:	6013      	str	r3, [r2, #0]
				c_Average = 0;
   d4bf6:	4a5f      	ldr	r2, [pc, #380]	; (d4d74 <loop+0x59c>)
   d4bf8:	6013      	str	r3, [r2, #0]
				ax_MPU6050_Reading = 0;
   d4bfa:	4a5f      	ldr	r2, [pc, #380]	; (d4d78 <loop+0x5a0>)
   d4bfc:	8015      	strh	r5, [r2, #0]
				ay_MPU6050_Reading = 0;
   d4bfe:	4a5f      	ldr	r2, [pc, #380]	; (d4d7c <loop+0x5a4>)
   d4c00:	8015      	strh	r5, [r2, #0]
				az_MPU6050_Reading = 0;
   d4c02:	4a5f      	ldr	r2, [pc, #380]	; (d4d80 <loop+0x5a8>)
   d4c04:	8015      	strh	r5, [r2, #0]
				ax_MPU6050_Average = 0;
   d4c06:	4a5f      	ldr	r2, [pc, #380]	; (d4d84 <loop+0x5ac>)
   d4c08:	6013      	str	r3, [r2, #0]
				ay_MPU6050_Average = 0;
   d4c0a:	4a5f      	ldr	r2, [pc, #380]	; (d4d88 <loop+0x5b0>)
   d4c0c:	6013      	str	r3, [r2, #0]
				az_MPU6050_Average = 0;
   d4c0e:	4a5f      	ldr	r2, [pc, #380]	; (d4d8c <loop+0x5b4>)
   d4c10:	6013      	str	r3, [r2, #0]
				axDegrees_MPU6050_Average = 0;
   d4c12:	4a5f      	ldr	r2, [pc, #380]	; (d4d90 <loop+0x5b8>)
   d4c14:	6013      	str	r3, [r2, #0]
				ayDegrees_MPU6050_Average = 0;
   d4c16:	4a5f      	ldr	r2, [pc, #380]	; (d4d94 <loop+0x5bc>)
   d4c18:	6013      	str	r3, [r2, #0]
				capacitanceSampleSum = 0;
   d4c1a:	4b5f      	ldr	r3, [pc, #380]	; (d4d98 <loop+0x5c0>)
   d4c1c:	601d      	str	r5, [r3, #0]
				capacitanceSampleAverage = 0;
   d4c1e:	4b5f      	ldr	r3, [pc, #380]	; (d4d9c <loop+0x5c4>)
   d4c20:	601d      	str	r5, [r3, #0]
				capacitanceSamplePercentage = 0;
   d4c22:	4b5f      	ldr	r3, [pc, #380]	; (d4da0 <loop+0x5c8>)
   d4c24:	601d      	str	r5, [r3, #0]
				switch(sensorType){
   d4c26:	6823      	ldr	r3, [r4, #0]
   d4c28:	2b03      	cmp	r3, #3
   d4c2a:	dc07      	bgt.n	d4c3c <loop+0x464>
   d4c2c:	428b      	cmp	r3, r1
   d4c2e:	dc10      	bgt.n	d4c52 <loop+0x47a>
   d4c30:	b153      	cbz	r3, d4c48 <loop+0x470>
   d4c32:	f002 fca9 	bl	d7588 <HAL_Timer_Get_Milli_Seconds>
				state = SAMPLE_STATE;
   d4c36:	2304      	movs	r3, #4
				stateTime = millis();
   d4c38:	6030      	str	r0, [r6, #0]
				state = SAMPLE_STATE;
   d4c3a:	e7a7      	b.n	d4b8c <loop+0x3b4>
   d4c3c:	3b05      	subs	r3, #5
   d4c3e:	2b01      	cmp	r3, #1
   d4c40:	d8f7      	bhi.n	d4c32 <loop+0x45a>
						distanceSum = 0;
   d4c42:	4b58      	ldr	r3, [pc, #352]	; (d4da4 <loop+0x5cc>)
   d4c44:	601d      	str	r5, [r3, #0]
						break;
   d4c46:	e7f4      	b.n	d4c32 <loop+0x45a>
						digitalWrite(BUILT_IN_LED,HIGH);									// If sensorType is N/A then turn on BLUELED
   d4c48:	2007      	movs	r0, #7
						debug = true;
   d4c4a:	7039      	strb	r1, [r7, #0]
						digitalWrite(BUILT_IN_LED,HIGH);									// If sensorType is N/A then turn on BLUELED
   d4c4c:	f005 fe89 	bl	da962 <digitalWrite>
						break;
   d4c50:	e7ef      	b.n	d4c32 <loop+0x45a>
						ADXL343.begin();
   d4c52:	2153      	movs	r1, #83	; 0x53
   d4c54:	4854      	ldr	r0, [pc, #336]	; (d4da8 <loop+0x5d0>)
   d4c56:	f001 f975 	bl	d5f44 <_ZN16Adafruit_ADXL3435beginEh>
						delay(50);
   d4c5a:	2032      	movs	r0, #50	; 0x32
   d4c5c:	f002 fffe 	bl	d7c5c <delay>
						ADXL343.setRange(ADXL343_RANGE_2_G);
   d4c60:	4851      	ldr	r0, [pc, #324]	; (d4da8 <loop+0x5d0>)
   d4c62:	4629      	mov	r1, r5
   d4c64:	f001 f9de 	bl	d6024 <_ZN16Adafruit_ADXL3438setRangeE7range_t>
						if(sensorType == 3) ADT7410.begin();
   d4c68:	6823      	ldr	r3, [r4, #0]
   d4c6a:	2b03      	cmp	r3, #3
   d4c6c:	d1e1      	bne.n	d4c32 <loop+0x45a>
   d4c6e:	f005 fedb 	bl	daa28 <_Z19__fetch_global_Wirev>
   d4c72:	2148      	movs	r1, #72	; 0x48
   d4c74:	4602      	mov	r2, r0
   d4c76:	484d      	ldr	r0, [pc, #308]	; (d4dac <loop+0x5d4>)
   d4c78:	f001 f826 	bl	d5cc8 <_ZN16Adafruit_ADT74105beginEhP7TwoWire>
   d4c7c:	e7d9      	b.n	d4c32 <loop+0x45a>
			switch(sensorType){
   d4c7e:	6823      	ldr	r3, [r4, #0]
   d4c80:	2b08      	cmp	r3, #8
   d4c82:	d84a      	bhi.n	d4d1a <loop+0x542>
   d4c84:	e8df f013 	tbh	[pc, r3, lsl #1]
   d4c88:	00490049 	.word	0x00490049
   d4c8c:	00090009 	.word	0x00090009
   d4c90:	01160096 	.word	0x01160096
   d4c94:	011d0116 	.word	0x011d0116
   d4c98:	0049      	.short	0x0049
					ADXL343.getEvent(&event);
   d4c9a:	a925      	add	r1, sp, #148	; 0x94
   d4c9c:	4842      	ldr	r0, [pc, #264]	; (d4da8 <loop+0x5d0>)
   d4c9e:	f001 f8eb 	bl	d5e78 <_ZN16Adafruit_ADXL3438getEventEP15sensors_event_t>
					ax_ADXL343 = ax_ADXL343 + event.acceleration.x;
   d4ca2:	4b30      	ldr	r3, [pc, #192]	; (d4d64 <loop+0x58c>)
   d4ca4:	eddd 7a2a 	vldr	s15, [sp, #168]	; 0xa8
   d4ca8:	ed93 7a00 	vldr	s14, [r3]
   d4cac:	ee77 7a87 	vadd.f32	s15, s15, s14
					delay(50);
   d4cb0:	2032      	movs	r0, #50	; 0x32
					ax_ADXL343 = ax_ADXL343 + event.acceleration.x;
   d4cb2:	edc3 7a00 	vstr	s15, [r3]
					ay_ADXL343 = ay_ADXL343 + event.acceleration.y;
   d4cb6:	4b2c      	ldr	r3, [pc, #176]	; (d4d68 <loop+0x590>)
   d4cb8:	eddd 7a2b 	vldr	s15, [sp, #172]	; 0xac
   d4cbc:	ed93 7a00 	vldr	s14, [r3]
   d4cc0:	ee77 7a87 	vadd.f32	s15, s15, s14
   d4cc4:	edc3 7a00 	vstr	s15, [r3]
					az_ADXL343 = az_ADXL343 + event.acceleration.z;
   d4cc8:	4b28      	ldr	r3, [pc, #160]	; (d4d6c <loop+0x594>)
   d4cca:	eddd 7a2c 	vldr	s15, [sp, #176]	; 0xb0
   d4cce:	ed93 7a00 	vldr	s14, [r3]
   d4cd2:	ee77 7a87 	vadd.f32	s15, s15, s14
   d4cd6:	edc3 7a00 	vstr	s15, [r3]
					delay(50);
   d4cda:	f002 ffbf 	bl	d7c5c <delay>
					if(sensorType == 3){
   d4cde:	6823      	ldr	r3, [r4, #0]
   d4ce0:	2b03      	cmp	r3, #3
   d4ce2:	d11a      	bne.n	d4d1a <loop+0x542>
						c_Reading = ADT7410.readTempC();               			// Read ADT7410 temp
   d4ce4:	4831      	ldr	r0, [pc, #196]	; (d4dac <loop+0x5d4>)
   d4ce6:	f001 f821 	bl	d5d2c <_ZN16Adafruit_ADT74109readTempCEv>
						if(c_Reading > -20 && c_Reading < 40){
   d4cea:	eefb 7a04 	vmov.f32	s15, #180	; 0xc1a00000 -20.0
						c_Reading = ADT7410.readTempC();               			// Read ADT7410 temp
   d4cee:	4b20      	ldr	r3, [pc, #128]	; (d4d70 <loop+0x598>)
						if(c_Reading > -20 && c_Reading < 40){
   d4cf0:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d4cf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
						c_Reading = ADT7410.readTempC();               			// Read ADT7410 temp
   d4cf8:	ed83 0a00 	vstr	s0, [r3]
						if(c_Reading > -20 && c_Reading < 40){
   d4cfc:	dd0d      	ble.n	d4d1a <loop+0x542>
   d4cfe:	eddf 7a2c 	vldr	s15, [pc, #176]	; d4db0 <loop+0x5d8>
   d4d02:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d4d06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4d0a:	d506      	bpl.n	d4d1a <loop+0x542>
							c_Average = c_Average + c_Reading;
   d4d0c:	4b19      	ldr	r3, [pc, #100]	; (d4d74 <loop+0x59c>)
   d4d0e:	edd3 7a00 	vldr	s15, [r3]
   d4d12:	ee37 0a80 	vadd.f32	s0, s15, s0
   d4d16:	ed83 0a00 	vstr	s0, [r3]
			if(sampleCounter++ > MAX_COUNT_TEST_SAMPLING){
   d4d1a:	4a10      	ldr	r2, [pc, #64]	; (d4d5c <loop+0x584>)
   d4d1c:	6813      	ldr	r3, [r2, #0]
   d4d1e:	1c59      	adds	r1, r3, #1
   d4d20:	2b0a      	cmp	r3, #10
   d4d22:	6011      	str	r1, [r2, #0]
   d4d24:	f340 82d8 	ble.w	d52d8 <loop+0xb00>
   d4d28:	f002 fc2e 	bl	d7588 <HAL_Timer_Get_Milli_Seconds>
				stateTime = millis();
   d4d2c:	4b07      	ldr	r3, [pc, #28]	; (d4d4c <loop+0x574>)
   d4d2e:	6018      	str	r0, [r3, #0]
				state = SAMPLE_PROCESS_STATE;
   d4d30:	2305      	movs	r3, #5
   d4d32:	e72b      	b.n	d4b8c <loop+0x3b4>
   d4d34:	000dc079 	.word	0x000dc079
   d4d38:	000dc0a4 	.word	0x000dc0a4
   d4d3c:	000dc0cd 	.word	0x000dc0cd
   d4d40:	000493e0 	.word	0x000493e0
   d4d44:	000dbfa2 	.word	0x000dbfa2
   d4d48:	000dc0d3 	.word	0x000dc0d3
   d4d4c:	2003e5b8 	.word	0x2003e5b8
   d4d50:	000dc0ee 	.word	0x000dc0ee
   d4d54:	2003e4f8 	.word	0x2003e4f8
   d4d58:	000dc101 	.word	0x000dc101
   d4d5c:	2003e5b0 	.word	0x2003e5b0
   d4d60:	2003e3d0 	.word	0x2003e3d0
   d4d64:	2003e370 	.word	0x2003e370
   d4d68:	2003e380 	.word	0x2003e380
   d4d6c:	2003e38c 	.word	0x2003e38c
   d4d70:	2003e3b0 	.word	0x2003e3b0
   d4d74:	2003e3ac 	.word	0x2003e3ac
   d4d78:	2003e378 	.word	0x2003e378
   d4d7c:	2003e388 	.word	0x2003e388
   d4d80:	2003e394 	.word	0x2003e394
   d4d84:	2003e374 	.word	0x2003e374
   d4d88:	2003e384 	.word	0x2003e384
   d4d8c:	2003e390 	.word	0x2003e390
   d4d90:	2003e36c 	.word	0x2003e36c
   d4d94:	2003e37c 	.word	0x2003e37c
   d4d98:	2003e3bc 	.word	0x2003e3bc
   d4d9c:	2003e3b4 	.word	0x2003e3b4
   d4da0:	2003e3b8 	.word	0x2003e3b8
   d4da4:	2003e504 	.word	0x2003e504
   d4da8:	2003e320 	.word	0x2003e320
   d4dac:	2003e310 	.word	0x2003e310
   d4db0:	42200000 	.word	0x42200000
					if(mpu6050.testConnection()){
   d4db4:	4878      	ldr	r0, [pc, #480]	; (d4f98 <loop+0x7c0>)
   d4db6:	f002 fbaf 	bl	d7518 <_ZN7MPU605014testConnectionEv>
   d4dba:	2800      	cmp	r0, #0
   d4dbc:	d0ad      	beq.n	d4d1a <loop+0x542>
						mpu6050.getMotion6(&ax_MPU6050_Reading, &ay_MPU6050_Reading, &az_MPU6050_Reading, &gx_MPU6050_Reading, &gy_MPU6050_Reading, &gz_MPU6050_Reading);
   d4dbe:	4f77      	ldr	r7, [pc, #476]	; (d4f9c <loop+0x7c4>)
   d4dc0:	f8df 823c 	ldr.w	r8, [pc, #572]	; d5000 <loop+0x828>
   d4dc4:	f8df 923c 	ldr.w	r9, [pc, #572]	; d5004 <loop+0x82c>
   d4dc8:	4c75      	ldr	r4, [pc, #468]	; (d4fa0 <loop+0x7c8>)
   d4dca:	4d76      	ldr	r5, [pc, #472]	; (d4fa4 <loop+0x7cc>)
   d4dcc:	4e76      	ldr	r6, [pc, #472]	; (d4fa8 <loop+0x7d0>)
   d4dce:	4872      	ldr	r0, [pc, #456]	; (d4f98 <loop+0x7c0>)
   d4dd0:	9402      	str	r4, [sp, #8]
   d4dd2:	463b      	mov	r3, r7
   d4dd4:	4642      	mov	r2, r8
   d4dd6:	4649      	mov	r1, r9
   d4dd8:	9501      	str	r5, [sp, #4]
   d4dda:	9600      	str	r6, [sp, #0]
   d4ddc:	f002 fb06 	bl	d73ec <_ZN7MPU605010getMotion6EPsS0_S0_S0_S0_S0_>
						c_Reading = (mpu6050.getTemperature() / 340.00) + 36.53;
   d4de0:	486d      	ldr	r0, [pc, #436]	; (d4f98 <loop+0x7c0>)
   d4de2:	f002 fb37 	bl	d7454 <_ZN7MPU605014getTemperatureEv>
   d4de6:	f006 faa7 	bl	db338 <__aeabi_i2d>
   d4dea:	4b70      	ldr	r3, [pc, #448]	; (d4fac <loop+0x7d4>)
   d4dec:	2200      	movs	r2, #0
   d4dee:	f006 fc37 	bl	db660 <__aeabi_ddiv>
   d4df2:	a367      	add	r3, pc, #412	; (adr r3, d4f90 <loop+0x7b8>)
   d4df4:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4df8:	f006 f952 	bl	db0a0 <__adddf3>
   d4dfc:	f006 fdd6 	bl	db9ac <__aeabi_d2f>
   d4e00:	4b6b      	ldr	r3, [pc, #428]	; (d4fb0 <loop+0x7d8>)
						ax_MPU6050_Average = ax_MPU6050_Average + ax_MPU6050_Reading;
   d4e02:	f9b9 2000 	ldrsh.w	r2, [r9]
						c_Reading = (mpu6050.getTemperature() / 340.00) + 36.53;
   d4e06:	6018      	str	r0, [r3, #0]
						ax_MPU6050_Average = ax_MPU6050_Average + ax_MPU6050_Reading;
   d4e08:	ee07 2a90 	vmov	s15, r2
   d4e0c:	4b69      	ldr	r3, [pc, #420]	; (d4fb4 <loop+0x7dc>)
						ay_MPU6050_Average = ay_MPU6050_Average + ay_MPU6050_Reading;
   d4e0e:	f9b8 2000 	ldrsh.w	r2, [r8]
						ax_MPU6050_Average = ax_MPU6050_Average + ax_MPU6050_Reading;
   d4e12:	edd3 6a00 	vldr	s13, [r3]
   d4e16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
						c_Reading = (mpu6050.getTemperature() / 340.00) + 36.53;
   d4e1a:	ee07 0a10 	vmov	s14, r0
						ax_MPU6050_Average = ax_MPU6050_Average + ax_MPU6050_Reading;
   d4e1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
   d4e22:	edc3 7a00 	vstr	s15, [r3]
						ay_MPU6050_Average = ay_MPU6050_Average + ay_MPU6050_Reading;
   d4e26:	4b64      	ldr	r3, [pc, #400]	; (d4fb8 <loop+0x7e0>)
   d4e28:	ee07 2a90 	vmov	s15, r2
   d4e2c:	edd3 6a00 	vldr	s13, [r3]
						az_MPU6050_Average = az_MPU6050_Average + az_MPU6050_Reading;
   d4e30:	f9b7 2000 	ldrsh.w	r2, [r7]
						ay_MPU6050_Average = ay_MPU6050_Average + ay_MPU6050_Reading;
   d4e34:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d4e38:	ee77 7aa6 	vadd.f32	s15, s15, s13
   d4e3c:	edc3 7a00 	vstr	s15, [r3]
						az_MPU6050_Average = az_MPU6050_Average + az_MPU6050_Reading;
   d4e40:	4b5e      	ldr	r3, [pc, #376]	; (d4fbc <loop+0x7e4>)
   d4e42:	ee07 2a90 	vmov	s15, r2
   d4e46:	edd3 6a00 	vldr	s13, [r3]
						gx_MPU6050_Average = gx_MPU6050_Average + gx_MPU6050_Reading;
   d4e4a:	f9b6 2000 	ldrsh.w	r2, [r6]
						az_MPU6050_Average = az_MPU6050_Average + az_MPU6050_Reading;
   d4e4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d4e52:	ee77 7aa6 	vadd.f32	s15, s15, s13
   d4e56:	edc3 7a00 	vstr	s15, [r3]
						gx_MPU6050_Average = gx_MPU6050_Average + gx_MPU6050_Reading;
   d4e5a:	4b59      	ldr	r3, [pc, #356]	; (d4fc0 <loop+0x7e8>)
   d4e5c:	ee07 2a90 	vmov	s15, r2
   d4e60:	edd3 6a00 	vldr	s13, [r3]
						gy_MPU6050_Average = gy_MPU6050_Average + gy_MPU6050_Reading;
   d4e64:	f9b5 2000 	ldrsh.w	r2, [r5]
						gx_MPU6050_Average = gx_MPU6050_Average + gx_MPU6050_Reading;
   d4e68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d4e6c:	ee77 7aa6 	vadd.f32	s15, s15, s13
   d4e70:	edc3 7a00 	vstr	s15, [r3]
						gy_MPU6050_Average = gy_MPU6050_Average + gy_MPU6050_Reading;
   d4e74:	4b53      	ldr	r3, [pc, #332]	; (d4fc4 <loop+0x7ec>)
   d4e76:	ee07 2a90 	vmov	s15, r2
   d4e7a:	edd3 6a00 	vldr	s13, [r3]
						gz_MPU6050_Average = gz_MPU6050_Average + gz_MPU6050_Reading;
   d4e7e:	f9b4 2000 	ldrsh.w	r2, [r4]
						gy_MPU6050_Average = gy_MPU6050_Average + gy_MPU6050_Reading;
   d4e82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d4e86:	ee77 7aa6 	vadd.f32	s15, s15, s13
   d4e8a:	edc3 7a00 	vstr	s15, [r3]
						gz_MPU6050_Average = gz_MPU6050_Average + gz_MPU6050_Reading;
   d4e8e:	4b4e      	ldr	r3, [pc, #312]	; (d4fc8 <loop+0x7f0>)
   d4e90:	ee07 2a90 	vmov	s15, r2
   d4e94:	edd3 6a00 	vldr	s13, [r3]
   d4e98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d4e9c:	ee77 7aa6 	vadd.f32	s15, s15, s13
   d4ea0:	edc3 7a00 	vstr	s15, [r3]
						c_Average = c_Average + c_Reading;
   d4ea4:	4b49      	ldr	r3, [pc, #292]	; (d4fcc <loop+0x7f4>)
   d4ea6:	edd3 7a00 	vldr	s15, [r3]
   d4eaa:	ee37 7a87 	vadd.f32	s14, s15, s14
   d4eae:	ed83 7a00 	vstr	s14, [r3]
   d4eb2:	e732      	b.n	d4d1a <loop+0x542>
						distanceSum = distanceSum + distance;
   d4eb4:	4a46      	ldr	r2, [pc, #280]	; (d4fd0 <loop+0x7f8>)
   d4eb6:	4947      	ldr	r1, [pc, #284]	; (d4fd4 <loop+0x7fc>)
   d4eb8:	6813      	ldr	r3, [r2, #0]
   d4eba:	6809      	ldr	r1, [r1, #0]
   d4ebc:	440b      	add	r3, r1
   d4ebe:	6013      	str	r3, [r2, #0]
					break;
   d4ec0:	e72b      	b.n	d4d1a <loop+0x542>
					capacitanceSampleValue = analogRead(CAPACITANCE_SIGNAL_1);
   d4ec2:	2013      	movs	r0, #19
   d4ec4:	f005 fd66 	bl	da994 <analogRead>
   d4ec8:	4b43      	ldr	r3, [pc, #268]	; (d4fd8 <loop+0x800>)
					capacitanceSampleSum = capacitanceSampleSum + capacitanceSampleValue;
   d4eca:	4a44      	ldr	r2, [pc, #272]	; (d4fdc <loop+0x804>)
					capacitanceSampleValue = analogRead(CAPACITANCE_SIGNAL_1);
   d4ecc:	6018      	str	r0, [r3, #0]
					capacitanceSampleSum = capacitanceSampleSum + capacitanceSampleValue;
   d4ece:	6813      	ldr	r3, [r2, #0]
   d4ed0:	4418      	add	r0, r3
   d4ed2:	6010      	str	r0, [r2, #0]
					break;
   d4ed4:	e721      	b.n	d4d1a <loop+0x542>
        AbstractDiagnosticData(id, name, type) {
}

template<typename UnderlyingTypeT>
inline int AbstractTypeDiagnosticData<UnderlyingTypeT>::get(DiagnosticDataId id, UnderlyingTypeT& val) {
    const diag_source* src = nullptr;
   d4ed6:	2200      	movs	r2, #0
    const int ret = diag_get_source(id, &src, nullptr);
   d4ed8:	a921      	add	r1, sp, #132	; 0x84
   d4eda:	2007      	movs	r0, #7
    const diag_source* src = nullptr;
   d4edc:	9221      	str	r2, [sp, #132]	; 0x84
    const int ret = diag_get_source(id, &src, nullptr);
   d4ede:	f002 fd33 	bl	d7948 <diag_get_source>
    if (ret != SYSTEM_ERROR_NONE) {
   d4ee2:	b9b8      	cbnz	r0, d4f14 <loop+0x73c>
        return ret;
    }
    return get(src, val);
   d4ee4:	9d21      	ldr	r5, [sp, #132]	; 0x84
    SPARK_ASSERT(src && src->callback);
   d4ee6:	b10d      	cbz	r5, d4eec <loop+0x714>
   d4ee8:	692b      	ldr	r3, [r5, #16]
   d4eea:	b923      	cbnz	r3, d4ef6 <loop+0x71e>
   d4eec:	4a3c      	ldr	r2, [pc, #240]	; (d4fe0 <loop+0x808>)
   d4eee:	2100      	movs	r1, #0
   d4ef0:	200a      	movs	r0, #10
   d4ef2:	f002 fd01 	bl	d78f8 <panic_>
    diag_source_get_cmd_data d = { sizeof(diag_source_get_cmd_data), 0 /* reserved */, data, size };
   d4ef6:	2300      	movs	r3, #0
   d4ef8:	f8ad 3096 	strh.w	r3, [sp, #150]	; 0x96
   d4efc:	230c      	movs	r3, #12
   d4efe:	f8ad 3094 	strh.w	r3, [sp, #148]	; 0x94
   d4f02:	ab1d      	add	r3, sp, #116	; 0x74
   d4f04:	9326      	str	r3, [sp, #152]	; 0x98
   d4f06:	2304      	movs	r3, #4
   d4f08:	9327      	str	r3, [sp, #156]	; 0x9c
    const int ret = src->callback(src, DIAG_SOURCE_CMD_GET, &d);
   d4f0a:	692b      	ldr	r3, [r5, #16]
   d4f0c:	aa25      	add	r2, sp, #148	; 0x94
   d4f0e:	2101      	movs	r1, #1
   d4f10:	4628      	mov	r0, r5
   d4f12:	4798      	blx	r3
    }

    int batteryState() const {
        particle::AbstractIntegerDiagnosticData::IntType val;
        const auto r = particle::AbstractIntegerDiagnosticData::get(DIAG_ID_SYSTEM_BATTERY_STATE, val);
        if (r < 0) {
   d4f14:	2800      	cmp	r0, #0
				batteryState = System.batteryState();
   d4f16:	4b33      	ldr	r3, [pc, #204]	; (d4fe4 <loop+0x80c>)
            return r;
        }
        return val;
   d4f18:	bfa8      	it	ge
   d4f1a:	981d      	ldrge	r0, [sp, #116]	; 0x74
   d4f1c:	6018      	str	r0, [r3, #0]
				if(getTemperature()){
   d4f1e:	f7ff f9a7 	bl	d4270 <_Z14getTemperaturev>
   d4f22:	b178      	cbz	r0, d4f44 <loop+0x76c>
					carrierBoardTempSensorC = carrierBoardTempSensor;
   d4f24:	4b30      	ldr	r3, [pc, #192]	; (d4fe8 <loop+0x810>)
   d4f26:	681b      	ldr	r3, [r3, #0]
   d4f28:	4a30      	ldr	r2, [pc, #192]	; (d4fec <loop+0x814>)
   d4f2a:	6013      	str	r3, [r2, #0]
				switch(sensorType){
   d4f2c:	6823      	ldr	r3, [r4, #0]
   d4f2e:	3b02      	subs	r3, #2
   d4f30:	2b05      	cmp	r3, #5
   d4f32:	d827      	bhi.n	d4f84 <loop+0x7ac>
   d4f34:	e8df f013 	tbh	[pc, r3, lsl #1]
   d4f38:	00080008 	.word	0x00080008
   d4f3c:	01390068 	.word	0x01390068
   d4f40:	01410139 	.word	0x01410139
					carrierBoardTempSensorC = 0;
   d4f44:	2300      	movs	r3, #0
   d4f46:	e7ef      	b.n	d4f28 <loop+0x750>
						ax_ADXL343 = ax_ADXL343 / MAX_COUNT_TEST_SAMPLING;
   d4f48:	4b29      	ldr	r3, [pc, #164]	; (d4ff0 <loop+0x818>)
   d4f4a:	edd3 6a00 	vldr	s13, [r3]
   d4f4e:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
   d4f52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
   d4f56:	ed83 7a00 	vstr	s14, [r3]
						ay_ADXL343 = ay_ADXL343 / MAX_COUNT_TEST_SAMPLING;
   d4f5a:	4b26      	ldr	r3, [pc, #152]	; (d4ff4 <loop+0x81c>)
   d4f5c:	edd3 6a00 	vldr	s13, [r3]
   d4f60:	ee86 7aa7 	vdiv.f32	s14, s13, s15
   d4f64:	ed83 7a00 	vstr	s14, [r3]
						az_ADXL343 = az_ADXL343 / MAX_COUNT_TEST_SAMPLING;
   d4f68:	4b23      	ldr	r3, [pc, #140]	; (d4ff8 <loop+0x820>)
   d4f6a:	edd3 6a00 	vldr	s13, [r3]
   d4f6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
   d4f72:	ed83 7a00 	vstr	s14, [r3]
						c_Average = c_Average / MAX_COUNT_TEST_SAMPLING;
   d4f76:	4b15      	ldr	r3, [pc, #84]	; (d4fcc <loop+0x7f4>)
   d4f78:	edd3 6a00 	vldr	s13, [r3]
   d4f7c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
   d4f80:	ed83 7a00 	vstr	s14, [r3]
   d4f84:	f002 fb00 	bl	d7588 <HAL_Timer_Get_Milli_Seconds>
				stateTime = millis();
   d4f88:	4b1c      	ldr	r3, [pc, #112]	; (d4ffc <loop+0x824>)
   d4f8a:	6018      	str	r0, [r3, #0]
				state = PUBLISH_WAIT_STATE;
   d4f8c:	2306      	movs	r3, #6
   d4f8e:	e5fd      	b.n	d4b8c <loop+0x3b4>
   d4f90:	0a3d70a4 	.word	0x0a3d70a4
   d4f94:	404243d7 	.word	0x404243d7
   d4f98:	2003e55c 	.word	0x2003e55c
   d4f9c:	2003e394 	.word	0x2003e394
   d4fa0:	2003e534 	.word	0x2003e534
   d4fa4:	2003e52c 	.word	0x2003e52c
   d4fa8:	2003e524 	.word	0x2003e524
   d4fac:	40754000 	.word	0x40754000
   d4fb0:	2003e3b0 	.word	0x2003e3b0
   d4fb4:	2003e374 	.word	0x2003e374
   d4fb8:	2003e384 	.word	0x2003e384
   d4fbc:	2003e390 	.word	0x2003e390
   d4fc0:	2003e520 	.word	0x2003e520
   d4fc4:	2003e528 	.word	0x2003e528
   d4fc8:	2003e530 	.word	0x2003e530
   d4fcc:	2003e3ac 	.word	0x2003e3ac
   d4fd0:	2003e504 	.word	0x2003e504
   d4fd4:	2003e4fc 	.word	0x2003e4fc
   d4fd8:	2003e3c0 	.word	0x2003e3c0
   d4fdc:	2003e3bc 	.word	0x2003e3bc
   d4fe0:	000d7579 	.word	0x000d7579
   d4fe4:	2003e3a8 	.word	0x2003e3a8
   d4fe8:	2003e3c4 	.word	0x2003e3c4
   d4fec:	2003e3c8 	.word	0x2003e3c8
   d4ff0:	2003e370 	.word	0x2003e370
   d4ff4:	2003e380 	.word	0x2003e380
   d4ff8:	2003e38c 	.word	0x2003e38c
   d4ffc:	2003e5b8 	.word	0x2003e5b8
   d5000:	2003e388 	.word	0x2003e388
   d5004:	2003e378 	.word	0x2003e378
						ax_MPU6050_Average = ax_MPU6050_Average / MAX_COUNT_TEST_SAMPLING;
   d5008:	49bd      	ldr	r1, [pc, #756]	; (d5300 <loop+0xb28>)
						ay_MPU6050_Average = ay_MPU6050_Average / MAX_COUNT_TEST_SAMPLING;
   d500a:	4abe      	ldr	r2, [pc, #760]	; (d5304 <loop+0xb2c>)
						ax_MPU6050_Average = ax_MPU6050_Average / MAX_COUNT_TEST_SAMPLING;
   d500c:	edd1 6a00 	vldr	s13, [r1]
						az_MPU6050_Average = az_MPU6050_Average / MAX_COUNT_TEST_SAMPLING;
   d5010:	4bbd      	ldr	r3, [pc, #756]	; (d5308 <loop+0xb30>)
						gx_MPU6050_Average = gx_MPU6050_Average / MAX_COUNT_TEST_SAMPLING;
   d5012:	48be      	ldr	r0, [pc, #760]	; (d530c <loop+0xb34>)
						ax_MPU6050_Average = ax_MPU6050_Average / MAX_COUNT_TEST_SAMPLING;
   d5014:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
   d5018:	ee86 7aa7 	vdiv.f32	s14, s13, s15
   d501c:	4689      	mov	r9, r1
   d501e:	4690      	mov	r8, r2
   d5020:	469b      	mov	fp, r3
						ay_MPU6050_Average = ay_MPU6050_Average / MAX_COUNT_TEST_SAMPLING;
   d5022:	edd2 6a00 	vldr	s13, [r2]
						gx_MPU6050_Average = gx_MPU6050_Average / MAX_COUNT_TEST_SAMPLING;
   d5026:	ed90 6a00 	vldr	s12, [r0]
						ax_MPU6050_Average = ax_MPU6050_Average / MAX_COUNT_TEST_SAMPLING;
   d502a:	ed81 7a00 	vstr	s14, [r1]
						ay_MPU6050_Average = ay_MPU6050_Average / MAX_COUNT_TEST_SAMPLING;
   d502e:	eec6 8aa7 	vdiv.f32	s17, s13, s15
						az_MPU6050_Average = az_MPU6050_Average / MAX_COUNT_TEST_SAMPLING;
   d5032:	edd3 6a00 	vldr	s13, [r3]
						ay_MPU6050_Average = ay_MPU6050_Average / MAX_COUNT_TEST_SAMPLING;
   d5036:	edc2 8a00 	vstr	s17, [r2]
						az_MPU6050_Average = az_MPU6050_Average / MAX_COUNT_TEST_SAMPLING;
   d503a:	ee86 9aa7 	vdiv.f32	s18, s13, s15
						gx_MPU6050_Average = gx_MPU6050_Average / MAX_COUNT_TEST_SAMPLING;
   d503e:	eec6 6a27 	vdiv.f32	s13, s12, s15
						if(!(ax_MPU6050_Average == 0 && ay_MPU6050_Average == 0 && az_MPU6050_Average == 0)){
   d5042:	eeb5 7a40 	vcmp.f32	s14, #0.0
						gx_MPU6050_Average = gx_MPU6050_Average / MAX_COUNT_TEST_SAMPLING;
   d5046:	edc0 6a00 	vstr	s13, [r0]
						gy_MPU6050_Average = gy_MPU6050_Average / MAX_COUNT_TEST_SAMPLING;
   d504a:	48b1      	ldr	r0, [pc, #708]	; (d5310 <loop+0xb38>)
						az_MPU6050_Average = az_MPU6050_Average / MAX_COUNT_TEST_SAMPLING;
   d504c:	ed83 9a00 	vstr	s18, [r3]
						gy_MPU6050_Average = gy_MPU6050_Average / MAX_COUNT_TEST_SAMPLING;
   d5050:	ed90 6a00 	vldr	s12, [r0]
   d5054:	eec6 6a27 	vdiv.f32	s13, s12, s15
						if(!(ax_MPU6050_Average == 0 && ay_MPU6050_Average == 0 && az_MPU6050_Average == 0)){
   d5058:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
						gy_MPU6050_Average = gy_MPU6050_Average / MAX_COUNT_TEST_SAMPLING;
   d505c:	edc0 6a00 	vstr	s13, [r0]
						gz_MPU6050_Average = gz_MPU6050_Average / MAX_COUNT_TEST_SAMPLING;
   d5060:	48ac      	ldr	r0, [pc, #688]	; (d5314 <loop+0xb3c>)
   d5062:	ed90 6a00 	vldr	s12, [r0]
   d5066:	eec6 6a27 	vdiv.f32	s13, s12, s15
   d506a:	eeb0 8a67 	vmov.f32	s16, s15
   d506e:	edc0 6a00 	vstr	s13, [r0]
						if(!(ax_MPU6050_Average == 0 && ay_MPU6050_Average == 0 && az_MPU6050_Average == 0)){
   d5072:	d10a      	bne.n	d508a <loop+0x8b2>
   d5074:	eef5 8a40 	vcmp.f32	s17, #0.0
   d5078:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d507c:	d105      	bne.n	d508a <loop+0x8b2>
   d507e:	eeb5 9a40 	vcmp.f32	s18, #0.0
   d5082:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d5086:	f000 8088 	beq.w	d519a <loop+0x9c2>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
   d508a:	ee17 0a10 	vmov	r0, s14
   d508e:	f006 f965 	bl	db35c <__aeabi_f2d>
   d5092:	4606      	mov	r6, r0
   d5094:	ee19 0a10 	vmov	r0, s18
   d5098:	460f      	mov	r7, r1
   d509a:	f006 f95f 	bl	db35c <__aeabi_f2d>
   d509e:	4602      	mov	r2, r0
   d50a0:	460b      	mov	r3, r1
   d50a2:	f006 f9b3 	bl	db40c <__aeabi_dmul>
   d50a6:	4632      	mov	r2, r6
   d50a8:	4604      	mov	r4, r0
   d50aa:	460d      	mov	r5, r1
   d50ac:	463b      	mov	r3, r7
   d50ae:	4630      	mov	r0, r6
   d50b0:	4639      	mov	r1, r7
   d50b2:	f006 f9ab 	bl	db40c <__aeabi_dmul>
   d50b6:	4602      	mov	r2, r0
   d50b8:	460b      	mov	r3, r1
							axDegrees_MPU6050_Average = (atan(ay_MPU6050_Average / sqrt(pow(ax_MPU6050_Average, 2) + pow(az_MPU6050_Average, 2))) * 180 / PI) - 0.58; // AccErrorX ~(0.58) See the calculate_IMU_error()custom function for more details
   d50ba:	4620      	mov	r0, r4
   d50bc:	4629      	mov	r1, r5
   d50be:	f005 ffef 	bl	db0a0 <__adddf3>
   d50c2:	ec41 0b10 	vmov	d0, r0, r1
   d50c6:	f005 fec1 	bl	dae4c <sqrt>
   d50ca:	ec55 4b10 	vmov	r4, r5, d0
   d50ce:	ee18 0a90 	vmov	r0, s17
   d50d2:	f006 f943 	bl	db35c <__aeabi_f2d>
   d50d6:	4622      	mov	r2, r4
   d50d8:	462b      	mov	r3, r5
   d50da:	f006 fac1 	bl	db660 <__aeabi_ddiv>
   d50de:	ec41 0b10 	vmov	d0, r0, r1
   d50e2:	f005 fcf5 	bl	daad0 <atan>
   d50e6:	4b8c      	ldr	r3, [pc, #560]	; (d5318 <loop+0xb40>)
   d50e8:	ec51 0b10 	vmov	r0, r1, d0
   d50ec:	2200      	movs	r2, #0
   d50ee:	f006 f98d 	bl	db40c <__aeabi_dmul>
   d50f2:	a37d      	add	r3, pc, #500	; (adr r3, d52e8 <loop+0xb10>)
   d50f4:	e9d3 2300 	ldrd	r2, r3, [r3]
   d50f8:	f006 fab2 	bl	db660 <__aeabi_ddiv>
   d50fc:	a37c      	add	r3, pc, #496	; (adr r3, d52f0 <loop+0xb18>)
   d50fe:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5102:	f005 ffcb 	bl	db09c <__aeabi_dsub>
   d5106:	f006 fc51 	bl	db9ac <__aeabi_d2f>
   d510a:	4b84      	ldr	r3, [pc, #528]	; (d531c <loop+0xb44>)
   d510c:	6018      	str	r0, [r3, #0]
							ayDegrees_MPU6050_Average = (atan(-1 * ax_MPU6050_Average / sqrt(pow(ay_MPU6050_Average, 2) + pow(az_MPU6050_Average, 2))) * 180 / PI) + 1.58; // AccErrorY ~(-1.58)
   d510e:	f8d9 0000 	ldr.w	r0, [r9]
   d5112:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   d5116:	f006 f921 	bl	db35c <__aeabi_f2d>
   d511a:	4604      	mov	r4, r0
   d511c:	f8d8 0000 	ldr.w	r0, [r8]
   d5120:	460d      	mov	r5, r1
   d5122:	f006 f91b 	bl	db35c <__aeabi_f2d>
   d5126:	4680      	mov	r8, r0
   d5128:	f8db 0000 	ldr.w	r0, [fp]
   d512c:	4689      	mov	r9, r1
   d512e:	f006 f915 	bl	db35c <__aeabi_f2d>
   d5132:	4602      	mov	r2, r0
   d5134:	460b      	mov	r3, r1
   d5136:	f006 f969 	bl	db40c <__aeabi_dmul>
   d513a:	4642      	mov	r2, r8
   d513c:	4606      	mov	r6, r0
   d513e:	460f      	mov	r7, r1
   d5140:	464b      	mov	r3, r9
   d5142:	4640      	mov	r0, r8
   d5144:	4649      	mov	r1, r9
   d5146:	f006 f961 	bl	db40c <__aeabi_dmul>
   d514a:	4602      	mov	r2, r0
   d514c:	460b      	mov	r3, r1
   d514e:	4630      	mov	r0, r6
   d5150:	4639      	mov	r1, r7
   d5152:	f005 ffa5 	bl	db0a0 <__adddf3>
   d5156:	ec41 0b10 	vmov	d0, r0, r1
   d515a:	f005 fe77 	bl	dae4c <sqrt>
   d515e:	4620      	mov	r0, r4
   d5160:	ec53 2b10 	vmov	r2, r3, d0
   d5164:	4629      	mov	r1, r5
   d5166:	f006 fa7b 	bl	db660 <__aeabi_ddiv>
   d516a:	ec41 0b10 	vmov	d0, r0, r1
   d516e:	f005 fcaf 	bl	daad0 <atan>
   d5172:	4b69      	ldr	r3, [pc, #420]	; (d5318 <loop+0xb40>)
   d5174:	ec51 0b10 	vmov	r0, r1, d0
   d5178:	2200      	movs	r2, #0
   d517a:	f006 f947 	bl	db40c <__aeabi_dmul>
   d517e:	a35a      	add	r3, pc, #360	; (adr r3, d52e8 <loop+0xb10>)
   d5180:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5184:	f006 fa6c 	bl	db660 <__aeabi_ddiv>
   d5188:	a35b      	add	r3, pc, #364	; (adr r3, d52f8 <loop+0xb20>)
   d518a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d518e:	f005 ff87 	bl	db0a0 <__adddf3>
   d5192:	f006 fc0b 	bl	db9ac <__aeabi_d2f>
   d5196:	4b62      	ldr	r3, [pc, #392]	; (d5320 <loop+0xb48>)
   d5198:	6018      	str	r0, [r3, #0]
						c_Average = c_Average / MAX_COUNT_TEST_SAMPLING;
   d519a:	4b62      	ldr	r3, [pc, #392]	; (d5324 <loop+0xb4c>)
   d519c:	ed93 7a00 	vldr	s14, [r3]
   d51a0:	eec7 7a08 	vdiv.f32	s15, s14, s16
   d51a4:	edc3 7a00 	vstr	s15, [r3]
						break;
   d51a8:	e6ec      	b.n	d4f84 <loop+0x7ac>
						distanceFinal = distanceSum / MAX_COUNT_TEST_SAMPLING;
   d51aa:	4b5f      	ldr	r3, [pc, #380]	; (d5328 <loop+0xb50>)
   d51ac:	220a      	movs	r2, #10
   d51ae:	681b      	ldr	r3, [r3, #0]
   d51b0:	fb93 f3f2 	sdiv	r3, r3, r2
   d51b4:	4a5d      	ldr	r2, [pc, #372]	; (d532c <loop+0xb54>)
						capacitanceSamplePercentage = capacitanceSampleAverage / 4096;
   d51b6:	6013      	str	r3, [r2, #0]
						break;
   d51b8:	e6e4      	b.n	d4f84 <loop+0x7ac>
						capacitanceSampleAverage = capacitanceSampleSum / MAX_COUNT_TEST_SAMPLING;
   d51ba:	4b5d      	ldr	r3, [pc, #372]	; (d5330 <loop+0xb58>)
   d51bc:	495d      	ldr	r1, [pc, #372]	; (d5334 <loop+0xb5c>)
   d51be:	681b      	ldr	r3, [r3, #0]
   d51c0:	220a      	movs	r2, #10
   d51c2:	fb93 f2f2 	sdiv	r2, r3, r2
   d51c6:	600a      	str	r2, [r1, #0]
						capacitanceSamplePercentage = capacitanceSampleAverage / 4096;
   d51c8:	f44f 4220 	mov.w	r2, #40960	; 0xa000
   d51cc:	fb93 f3f2 	sdiv	r3, r3, r2
   d51d0:	4a59      	ldr	r2, [pc, #356]	; (d5338 <loop+0xb60>)
   d51d2:	e7f0      	b.n	d51b6 <loop+0x9de>
			if(millis() - stateTime >= MAX_TIME_TO_WAIT_PUBLISH_MS){
   d51d4:	4c59      	ldr	r4, [pc, #356]	; (d533c <loop+0xb64>)
   d51d6:	f002 f9d7 	bl	d7588 <HAL_Timer_Get_Milli_Seconds>
   d51da:	6823      	ldr	r3, [r4, #0]
   d51dc:	1ac0      	subs	r0, r0, r3
   d51de:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   d51e2:	d379      	bcc.n	d52d8 <loop+0xb00>
				logData("PUBLISHING", "START PUBLISH_STATE", true, false);
   d51e4:	4956      	ldr	r1, [pc, #344]	; (d5340 <loop+0xb68>)
   d51e6:	a821      	add	r0, sp, #132	; 0x84
   d51e8:	f004 fe8e 	bl	d9f08 <_ZN6StringC1EPKc>
   d51ec:	4955      	ldr	r1, [pc, #340]	; (d5344 <loop+0xb6c>)
   d51ee:	a825      	add	r0, sp, #148	; 0x94
   d51f0:	f004 fe8a 	bl	d9f08 <_ZN6StringC1EPKc>
   d51f4:	2300      	movs	r3, #0
   d51f6:	2201      	movs	r2, #1
   d51f8:	a925      	add	r1, sp, #148	; 0x94
   d51fa:	a821      	add	r0, sp, #132	; 0x84
   d51fc:	f7ff f8d0 	bl	d43a0 <_Z7logData6StringS_bb>
   d5200:	a825      	add	r0, sp, #148	; 0x94
   d5202:	f004 fe36 	bl	d9e72 <_ZN6StringD1Ev>
   d5206:	a821      	add	r0, sp, #132	; 0x84
   d5208:	f004 fe33 	bl	d9e72 <_ZN6StringD1Ev>
   d520c:	f002 f9bc 	bl	d7588 <HAL_Timer_Get_Milli_Seconds>
				state = PUBLISH_STATE;
   d5210:	2307      	movs	r3, #7
				stateTime = millis();
   d5212:	6020      	str	r0, [r4, #0]
				state = PUBLISH_STATE;
   d5214:	e4ba      	b.n	d4b8c <loop+0x3b4>
			switch(sensorType){
   d5216:	6823      	ldr	r3, [r4, #0]
   d5218:	2b08      	cmp	r3, #8
   d521a:	d82d      	bhi.n	d5278 <loop+0xaa0>
   d521c:	e8df f013 	tbh	[pc, r3, lsl #1]
   d5220:	00090009 	.word	0x00090009
   d5224:	00eb00ac 	.word	0x00eb00ac
   d5228:	01a10132 	.word	0x01a10132
   d522c:	01c801a1 	.word	0x01c801a1
   d5230:	01c8      	.short	0x01c8
					snprintf(data, sizeof(data), "{\"cb_temp\":%.2f, \"battery\":%.2f, \"batterystate\":\"%s\", \"timestamp\":%lu000}", carrierBoardTempSensorC, fuel.getVCell(), batteryStates[std::max(0, batteryState)], Time.now());
   d5232:	4b45      	ldr	r3, [pc, #276]	; (d5348 <loop+0xb70>)
   d5234:	6818      	ldr	r0, [r3, #0]
   d5236:	f006 f891 	bl	db35c <__aeabi_f2d>
   d523a:	4604      	mov	r4, r0
   d523c:	4843      	ldr	r0, [pc, #268]	; (d534c <loop+0xb74>)
   d523e:	460d      	mov	r5, r1
   d5240:	f003 f8fa 	bl	d8438 <_ZN9FuelGauge8getVCellEv>
    max(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
   d5244:	4b42      	ldr	r3, [pc, #264]	; (d5350 <loop+0xb78>)
   d5246:	4a43      	ldr	r2, [pc, #268]	; (d5354 <loop+0xb7c>)
   d5248:	681b      	ldr	r3, [r3, #0]
   d524a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   d524e:	ee10 6a10 	vmov	r6, s0
   d5252:	f852 7023 	ldr.w	r7, [r2, r3, lsl #2]
   d5256:	f005 f934 	bl	da4c2 <_ZN9TimeClass3nowEv>
   d525a:	e9cd 7004 	strd	r7, r0, [sp, #16]
   d525e:	4630      	mov	r0, r6
   d5260:	f006 f87c 	bl	db35c <__aeabi_f2d>
   d5264:	e9cd 4500 	strd	r4, r5, [sp]
   d5268:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d526c:	4a3a      	ldr	r2, [pc, #232]	; (d5358 <loop+0xb80>)
   d526e:	483b      	ldr	r0, [pc, #236]	; (d535c <loop+0xb84>)
   d5270:	f44f 7180 	mov.w	r1, #256	; 0x100
   d5274:	f002 fca2 	bl	d7bbc <snprintf>
			switch(sensorType){
   d5278:	4b39      	ldr	r3, [pc, #228]	; (d5360 <loop+0xb88>)
   d527a:	4a3a      	ldr	r2, [pc, #232]	; (d5364 <loop+0xb8c>)
   d527c:	681b      	ldr	r3, [r3, #0]
   d527e:	7812      	ldrb	r2, [r2, #0]
   d5280:	2b04      	cmp	r3, #4
   d5282:	f300 81c0 	bgt.w	d5606 <loop+0xe2e>
   d5286:	2b02      	cmp	r3, #2
   d5288:	f340 81c0 	ble.w	d560c <loop+0xe34>
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d528c:	f88d 2000 	strb.w	r2, [sp]
   d5290:	4935      	ldr	r1, [pc, #212]	; (d5368 <loop+0xb90>)
   d5292:	4a32      	ldr	r2, [pc, #200]	; (d535c <loop+0xb84>)
   d5294:	233c      	movs	r3, #60	; 0x3c
   d5296:	a825      	add	r0, sp, #148	; 0x94
   d5298:	f002 feb2 	bl	d8000 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d529c:	a826      	add	r0, sp, #152	; 0x98
   d529e:	f7ff f869 	bl	d4374 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
			logData("PUBLISH_STATE", "START SLEEP_WAIT_STATE", true, true);
   d52a2:	4932      	ldr	r1, [pc, #200]	; (d536c <loop+0xb94>)
   d52a4:	a821      	add	r0, sp, #132	; 0x84
   d52a6:	f004 fe2f 	bl	d9f08 <_ZN6StringC1EPKc>
   d52aa:	4931      	ldr	r1, [pc, #196]	; (d5370 <loop+0xb98>)
   d52ac:	a825      	add	r0, sp, #148	; 0x94
   d52ae:	f004 fe2b 	bl	d9f08 <_ZN6StringC1EPKc>
   d52b2:	2301      	movs	r3, #1
   d52b4:	461a      	mov	r2, r3
   d52b6:	a925      	add	r1, sp, #148	; 0x94
   d52b8:	a821      	add	r0, sp, #132	; 0x84
   d52ba:	f7ff f871 	bl	d43a0 <_Z7logData6StringS_bb>
   d52be:	a825      	add	r0, sp, #148	; 0x94
   d52c0:	f004 fdd7 	bl	d9e72 <_ZN6StringD1Ev>
   d52c4:	a821      	add	r0, sp, #132	; 0x84
   d52c6:	f004 fdd4 	bl	d9e72 <_ZN6StringD1Ev>
   d52ca:	f002 f95d 	bl	d7588 <HAL_Timer_Get_Milli_Seconds>
			stateTime = millis();
   d52ce:	4b1b      	ldr	r3, [pc, #108]	; (d533c <loop+0xb64>)
   d52d0:	6018      	str	r0, [r3, #0]
			state = SLEEP_WAIT_STATE;
   d52d2:	4b28      	ldr	r3, [pc, #160]	; (d5374 <loop+0xb9c>)
   d52d4:	2208      	movs	r2, #8
   d52d6:	701a      	strb	r2, [r3, #0]
}
   d52d8:	b02f      	add	sp, #188	; 0xbc
   d52da:	ecbd 8b0c 	vpop	{d8-d13}
   d52de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d52e2:	bf00      	nop
   d52e4:	f3af 8000 	nop.w
   d52e8:	54442d18 	.word	0x54442d18
   d52ec:	400921fb 	.word	0x400921fb
   d52f0:	28f5c28f 	.word	0x28f5c28f
   d52f4:	3fe28f5c 	.word	0x3fe28f5c
   d52f8:	147ae148 	.word	0x147ae148
   d52fc:	3ff947ae 	.word	0x3ff947ae
   d5300:	2003e374 	.word	0x2003e374
   d5304:	2003e384 	.word	0x2003e384
   d5308:	2003e390 	.word	0x2003e390
   d530c:	2003e520 	.word	0x2003e520
   d5310:	2003e528 	.word	0x2003e528
   d5314:	2003e530 	.word	0x2003e530
   d5318:	40668000 	.word	0x40668000
   d531c:	2003e36c 	.word	0x2003e36c
   d5320:	2003e37c 	.word	0x2003e37c
   d5324:	2003e3ac 	.word	0x2003e3ac
   d5328:	2003e504 	.word	0x2003e504
   d532c:	2003e500 	.word	0x2003e500
   d5330:	2003e3bc 	.word	0x2003e3bc
   d5334:	2003e3b4 	.word	0x2003e3b4
   d5338:	2003e3b8 	.word	0x2003e3b8
   d533c:	2003e5b8 	.word	0x2003e5b8
   d5340:	000dc110 	.word	0x000dc110
   d5344:	000dc11b 	.word	0x000dc11b
   d5348:	2003e3c8 	.word	0x2003e3c8
   d534c:	2003e518 	.word	0x2003e518
   d5350:	2003e3a8 	.word	0x2003e3a8
   d5354:	000dc5b0 	.word	0x000dc5b0
   d5358:	000dc12f 	.word	0x000dc12f
   d535c:	2003e3f4 	.word	0x2003e3f4
   d5360:	2003e280 	.word	0x2003e280
   d5364:	2003e364 	.word	0x2003e364
   d5368:	000dc42a 	.word	0x000dc42a
   d536c:	000dc121 	.word	0x000dc121
   d5370:	000dc45e 	.word	0x000dc45e
   d5374:	2003e284 	.word	0x2003e284
					snprintf(data, sizeof(data), "{\"cb_temp\":%.2f, \"accel_x\":%.2f, \"accel_y\":%.2f, \"accel_z\":%.2f, \"battery\":%.2f, \"batterystate\":\"%s\", \"timestamp\":%lu000}", carrierBoardTempSensorC, ax_ADXL343, ay_ADXL343, az_ADXL343, fuel.getVCell(), batteryStates[std::max(0, batteryState)], Time.now());
   d5378:	4baa      	ldr	r3, [pc, #680]	; (d5624 <loop+0xe4c>)
   d537a:	6818      	ldr	r0, [r3, #0]
   d537c:	f005 ffee 	bl	db35c <__aeabi_f2d>
   d5380:	4ba9      	ldr	r3, [pc, #676]	; (d5628 <loop+0xe50>)
   d5382:	4604      	mov	r4, r0
   d5384:	6818      	ldr	r0, [r3, #0]
   d5386:	460d      	mov	r5, r1
   d5388:	f005 ffe8 	bl	db35c <__aeabi_f2d>
   d538c:	4ba7      	ldr	r3, [pc, #668]	; (d562c <loop+0xe54>)
   d538e:	4606      	mov	r6, r0
   d5390:	6818      	ldr	r0, [r3, #0]
   d5392:	460f      	mov	r7, r1
   d5394:	f005 ffe2 	bl	db35c <__aeabi_f2d>
   d5398:	4ba5      	ldr	r3, [pc, #660]	; (d5630 <loop+0xe58>)
   d539a:	4680      	mov	r8, r0
   d539c:	6818      	ldr	r0, [r3, #0]
   d539e:	4689      	mov	r9, r1
   d53a0:	f005 ffdc 	bl	db35c <__aeabi_f2d>
   d53a4:	4682      	mov	sl, r0
   d53a6:	48a3      	ldr	r0, [pc, #652]	; (d5634 <loop+0xe5c>)
   d53a8:	468b      	mov	fp, r1
   d53aa:	f003 f845 	bl	d8438 <_ZN9FuelGauge8getVCellEv>
   d53ae:	4ba2      	ldr	r3, [pc, #648]	; (d5638 <loop+0xe60>)
   d53b0:	49a2      	ldr	r1, [pc, #648]	; (d563c <loop+0xe64>)
   d53b2:	681b      	ldr	r3, [r3, #0]
   d53b4:	ed8d 0a19 	vstr	s0, [sp, #100]	; 0x64
   d53b8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   d53bc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   d53c0:	9318      	str	r3, [sp, #96]	; 0x60
   d53c2:	f005 f87e 	bl	da4c2 <_ZN9TimeClass3nowEv>
   d53c6:	9a19      	ldr	r2, [sp, #100]	; 0x64
   d53c8:	9b18      	ldr	r3, [sp, #96]	; 0x60
   d53ca:	900b      	str	r0, [sp, #44]	; 0x2c
   d53cc:	4610      	mov	r0, r2
   d53ce:	930a      	str	r3, [sp, #40]	; 0x28
   d53d0:	f005 ffc4 	bl	db35c <__aeabi_f2d>
   d53d4:	e9cd ab06 	strd	sl, fp, [sp, #24]
   d53d8:	e9cd 0108 	strd	r0, r1, [sp, #32]
   d53dc:	e9cd 8904 	strd	r8, r9, [sp, #16]
   d53e0:	e9cd 6702 	strd	r6, r7, [sp, #8]
   d53e4:	e9cd 4500 	strd	r4, r5, [sp]
   d53e8:	4a95      	ldr	r2, [pc, #596]	; (d5640 <loop+0xe68>)
   d53ea:	4896      	ldr	r0, [pc, #600]	; (d5644 <loop+0xe6c>)
   d53ec:	f44f 7180 	mov.w	r1, #256	; 0x100
   d53f0:	f002 fbe4 	bl	d7bbc <snprintf>
					break;
   d53f4:	e740      	b.n	d5278 <loop+0xaa0>
					snprintf(data, sizeof(data), "{\"cb_temp\":%.2f, \"sensor_temp\":%.2f, \"accel_x\":%.2f, \"accel_y\":%.2f, \"accel_z\":%.2f, \"battery\":%.2f, \"batterystate\":\"%s\", \"timestamp\":%lu000}", carrierBoardTempSensorC, c_Average, ax_ADXL343, ay_ADXL343, az_ADXL343, fuel.getVCell(), batteryStates[std::max(0, batteryState)], Time.now());
   d53f6:	4b8b      	ldr	r3, [pc, #556]	; (d5624 <loop+0xe4c>)
   d53f8:	6818      	ldr	r0, [r3, #0]
   d53fa:	f005 ffaf 	bl	db35c <__aeabi_f2d>
   d53fe:	4b92      	ldr	r3, [pc, #584]	; (d5648 <loop+0xe70>)
   d5400:	4604      	mov	r4, r0
   d5402:	6818      	ldr	r0, [r3, #0]
   d5404:	460d      	mov	r5, r1
   d5406:	f005 ffa9 	bl	db35c <__aeabi_f2d>
   d540a:	4b87      	ldr	r3, [pc, #540]	; (d5628 <loop+0xe50>)
   d540c:	4606      	mov	r6, r0
   d540e:	6818      	ldr	r0, [r3, #0]
   d5410:	460f      	mov	r7, r1
   d5412:	f005 ffa3 	bl	db35c <__aeabi_f2d>
   d5416:	4b85      	ldr	r3, [pc, #532]	; (d562c <loop+0xe54>)
   d5418:	4680      	mov	r8, r0
   d541a:	6818      	ldr	r0, [r3, #0]
   d541c:	4689      	mov	r9, r1
   d541e:	f005 ff9d 	bl	db35c <__aeabi_f2d>
   d5422:	4b83      	ldr	r3, [pc, #524]	; (d5630 <loop+0xe58>)
   d5424:	4682      	mov	sl, r0
   d5426:	6818      	ldr	r0, [r3, #0]
   d5428:	468b      	mov	fp, r1
   d542a:	f005 ff97 	bl	db35c <__aeabi_f2d>
   d542e:	ec41 0b18 	vmov	d8, r0, r1
   d5432:	4880      	ldr	r0, [pc, #512]	; (d5634 <loop+0xe5c>)
   d5434:	f003 f800 	bl	d8438 <_ZN9FuelGauge8getVCellEv>
   d5438:	4a7f      	ldr	r2, [pc, #508]	; (d5638 <loop+0xe60>)
   d543a:	4980      	ldr	r1, [pc, #512]	; (d563c <loop+0xe64>)
   d543c:	6812      	ldr	r2, [r2, #0]
   d543e:	ed8d 0a19 	vstr	s0, [sp, #100]	; 0x64
   d5442:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
   d5446:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
   d544a:	9218      	str	r2, [sp, #96]	; 0x60
   d544c:	f005 f839 	bl	da4c2 <_ZN9TimeClass3nowEv>
   d5450:	9b19      	ldr	r3, [sp, #100]	; 0x64
   d5452:	9a18      	ldr	r2, [sp, #96]	; 0x60
   d5454:	900d      	str	r0, [sp, #52]	; 0x34
   d5456:	4618      	mov	r0, r3
   d5458:	920c      	str	r2, [sp, #48]	; 0x30
   d545a:	f005 ff7f 	bl	db35c <__aeabi_f2d>
   d545e:	ed8d 8b08 	vstr	d8, [sp, #32]
   d5462:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   d5466:	e9cd ab06 	strd	sl, fp, [sp, #24]
   d546a:	e9cd 8904 	strd	r8, r9, [sp, #16]
   d546e:	e9cd 6702 	strd	r6, r7, [sp, #8]
   d5472:	e9cd 4500 	strd	r4, r5, [sp]
   d5476:	4a75      	ldr	r2, [pc, #468]	; (d564c <loop+0xe74>)
   d5478:	4872      	ldr	r0, [pc, #456]	; (d5644 <loop+0xe6c>)
   d547a:	f44f 7180 	mov.w	r1, #256	; 0x100
   d547e:	f002 fb9d 	bl	d7bbc <snprintf>
					break;
   d5482:	e6f9      	b.n	d5278 <loop+0xaa0>
					snprintf(data, sizeof(data), "{\"cb_temp\":%.2f, \"sensor_temp\":%.2f, \"accel_x\":%.2f, \"accel_y\":%.2f, \"accel_z\":%.2f, \"g_x\":%.2f, \"g_y\":%.2f, \"g_z\":%.2f, \"degrees_x\":%.2f, \"degrees_y\":%.2f, \"battery\":%.2f, \"batterystate\":\"%s\", \"timestamp\":%lu000}", carrierBoardTempSensorC, c_Average, ax_MPU6050_Average, ay_MPU6050_Average, az_MPU6050_Average, gx_MPU6050_Average, gy_MPU6050_Average, gz_MPU6050_Average, axDegrees_MPU6050_Average, ayDegrees_MPU6050_Average, fuel.getVCell(), batteryStates[std::max(0, batteryState)], Time.now());
   d5484:	4b67      	ldr	r3, [pc, #412]	; (d5624 <loop+0xe4c>)
   d5486:	6818      	ldr	r0, [r3, #0]
   d5488:	f005 ff68 	bl	db35c <__aeabi_f2d>
   d548c:	4b6e      	ldr	r3, [pc, #440]	; (d5648 <loop+0xe70>)
   d548e:	ec41 0b1d 	vmov	d13, r0, r1
   d5492:	6818      	ldr	r0, [r3, #0]
   d5494:	f005 ff62 	bl	db35c <__aeabi_f2d>
   d5498:	4b6d      	ldr	r3, [pc, #436]	; (d5650 <loop+0xe78>)
   d549a:	ec41 0b1c 	vmov	d12, r0, r1
   d549e:	6818      	ldr	r0, [r3, #0]
   d54a0:	f005 ff5c 	bl	db35c <__aeabi_f2d>
   d54a4:	4b6b      	ldr	r3, [pc, #428]	; (d5654 <loop+0xe7c>)
   d54a6:	ec41 0b1b 	vmov	d11, r0, r1
   d54aa:	6818      	ldr	r0, [r3, #0]
   d54ac:	f005 ff56 	bl	db35c <__aeabi_f2d>
   d54b0:	4b69      	ldr	r3, [pc, #420]	; (d5658 <loop+0xe80>)
   d54b2:	ec41 0b1a 	vmov	d10, r0, r1
   d54b6:	6818      	ldr	r0, [r3, #0]
   d54b8:	f005 ff50 	bl	db35c <__aeabi_f2d>
   d54bc:	4b67      	ldr	r3, [pc, #412]	; (d565c <loop+0xe84>)
   d54be:	ec41 0b19 	vmov	d9, r0, r1
   d54c2:	6818      	ldr	r0, [r3, #0]
   d54c4:	f005 ff4a 	bl	db35c <__aeabi_f2d>
   d54c8:	4b65      	ldr	r3, [pc, #404]	; (d5660 <loop+0xe88>)
   d54ca:	4604      	mov	r4, r0
   d54cc:	6818      	ldr	r0, [r3, #0]
   d54ce:	460d      	mov	r5, r1
   d54d0:	f005 ff44 	bl	db35c <__aeabi_f2d>
   d54d4:	4b63      	ldr	r3, [pc, #396]	; (d5664 <loop+0xe8c>)
   d54d6:	4606      	mov	r6, r0
   d54d8:	6818      	ldr	r0, [r3, #0]
   d54da:	460f      	mov	r7, r1
   d54dc:	f005 ff3e 	bl	db35c <__aeabi_f2d>
   d54e0:	4b61      	ldr	r3, [pc, #388]	; (d5668 <loop+0xe90>)
   d54e2:	4680      	mov	r8, r0
   d54e4:	6818      	ldr	r0, [r3, #0]
   d54e6:	4689      	mov	r9, r1
   d54e8:	f005 ff38 	bl	db35c <__aeabi_f2d>
   d54ec:	4b5f      	ldr	r3, [pc, #380]	; (d566c <loop+0xe94>)
   d54ee:	4682      	mov	sl, r0
   d54f0:	6818      	ldr	r0, [r3, #0]
   d54f2:	468b      	mov	fp, r1
   d54f4:	f005 ff32 	bl	db35c <__aeabi_f2d>
   d54f8:	ec41 0b18 	vmov	d8, r0, r1
   d54fc:	484d      	ldr	r0, [pc, #308]	; (d5634 <loop+0xe5c>)
   d54fe:	f002 ff9b 	bl	d8438 <_ZN9FuelGauge8getVCellEv>
   d5502:	4a4d      	ldr	r2, [pc, #308]	; (d5638 <loop+0xe60>)
   d5504:	494d      	ldr	r1, [pc, #308]	; (d563c <loop+0xe64>)
   d5506:	6812      	ldr	r2, [r2, #0]
   d5508:	ed8d 0a19 	vstr	s0, [sp, #100]	; 0x64
   d550c:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
   d5510:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
   d5514:	9218      	str	r2, [sp, #96]	; 0x60
   d5516:	f004 ffd4 	bl	da4c2 <_ZN9TimeClass3nowEv>
   d551a:	9b19      	ldr	r3, [sp, #100]	; 0x64
   d551c:	9a18      	ldr	r2, [sp, #96]	; 0x60
   d551e:	9017      	str	r0, [sp, #92]	; 0x5c
   d5520:	4618      	mov	r0, r3
   d5522:	9216      	str	r2, [sp, #88]	; 0x58
   d5524:	f005 ff1a 	bl	db35c <__aeabi_f2d>
   d5528:	ed8d 8b12 	vstr	d8, [sp, #72]	; 0x48
   d552c:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
   d5530:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
   d5534:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
   d5538:	e9cd 670c 	strd	r6, r7, [sp, #48]	; 0x30
   d553c:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
   d5540:	ed8d 9b08 	vstr	d9, [sp, #32]
   d5544:	ed8d ab06 	vstr	d10, [sp, #24]
   d5548:	ed8d bb04 	vstr	d11, [sp, #16]
   d554c:	ed8d cb02 	vstr	d12, [sp, #8]
   d5550:	ed8d db00 	vstr	d13, [sp]
   d5554:	4a46      	ldr	r2, [pc, #280]	; (d5670 <loop+0xe98>)
   d5556:	483b      	ldr	r0, [pc, #236]	; (d5644 <loop+0xe6c>)
   d5558:	f44f 7180 	mov.w	r1, #256	; 0x100
   d555c:	f002 fb2e 	bl	d7bbc <snprintf>
					break;
   d5560:	e68a      	b.n	d5278 <loop+0xaa0>
					snprintf(data, sizeof(data), "{\"cb_temp\":%.2f, \"distance\":%d, \"battery\":%.2f, \"batterystate\":\"%s\", \"timestamp\":%lu000}", carrierBoardTempSensorC, distance, fuel.getVCell(), batteryStates[std::max(0, batteryState)], Time.now());
   d5562:	4b30      	ldr	r3, [pc, #192]	; (d5624 <loop+0xe4c>)
   d5564:	6818      	ldr	r0, [r3, #0]
   d5566:	f005 fef9 	bl	db35c <__aeabi_f2d>
   d556a:	4b42      	ldr	r3, [pc, #264]	; (d5674 <loop+0xe9c>)
   d556c:	4604      	mov	r4, r0
   d556e:	4831      	ldr	r0, [pc, #196]	; (d5634 <loop+0xe5c>)
   d5570:	681f      	ldr	r7, [r3, #0]
   d5572:	460d      	mov	r5, r1
   d5574:	f002 ff60 	bl	d8438 <_ZN9FuelGauge8getVCellEv>
   d5578:	4b2f      	ldr	r3, [pc, #188]	; (d5638 <loop+0xe60>)
   d557a:	4a30      	ldr	r2, [pc, #192]	; (d563c <loop+0xe64>)
   d557c:	681b      	ldr	r3, [r3, #0]
   d557e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   d5582:	ee10 6a10 	vmov	r6, s0
   d5586:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
   d558a:	f004 ff9a 	bl	da4c2 <_ZN9TimeClass3nowEv>
   d558e:	e9cd 8006 	strd	r8, r0, [sp, #24]
   d5592:	4630      	mov	r0, r6
   d5594:	f005 fee2 	bl	db35c <__aeabi_f2d>
   d5598:	e9cd 4500 	strd	r4, r5, [sp]
   d559c:	e9cd 0104 	strd	r0, r1, [sp, #16]
   d55a0:	4a35      	ldr	r2, [pc, #212]	; (d5678 <loop+0xea0>)
   d55a2:	9702      	str	r7, [sp, #8]
   d55a4:	f44f 7180 	mov.w	r1, #256	; 0x100
   d55a8:	4826      	ldr	r0, [pc, #152]	; (d5644 <loop+0xe6c>)
   d55aa:	f002 fb07 	bl	d7bbc <snprintf>
					break;
   d55ae:	e663      	b.n	d5278 <loop+0xaa0>
					snprintf(data, sizeof(data), "{\"cb_temp\":%.2f, \"capacitance_raw\":%d, \"capacitance_percent\":%d, \"battery\":%.2f, \"batterystate\":\"%s\", \"timestamp\":%lu000}", carrierBoardTempSensorC, capacitanceSampleAverage, capacitanceSamplePercentage, fuel.getVCell(), batteryStates[std::max(0, batteryState)], Time.now());
   d55b0:	4b1c      	ldr	r3, [pc, #112]	; (d5624 <loop+0xe4c>)
   d55b2:	6818      	ldr	r0, [r3, #0]
   d55b4:	f005 fed2 	bl	db35c <__aeabi_f2d>
   d55b8:	4b30      	ldr	r3, [pc, #192]	; (d567c <loop+0xea4>)
   d55ba:	681f      	ldr	r7, [r3, #0]
   d55bc:	4b30      	ldr	r3, [pc, #192]	; (d5680 <loop+0xea8>)
   d55be:	4604      	mov	r4, r0
   d55c0:	481c      	ldr	r0, [pc, #112]	; (d5634 <loop+0xe5c>)
   d55c2:	f8d3 8000 	ldr.w	r8, [r3]
   d55c6:	460d      	mov	r5, r1
   d55c8:	f002 ff36 	bl	d8438 <_ZN9FuelGauge8getVCellEv>
   d55cc:	4b1a      	ldr	r3, [pc, #104]	; (d5638 <loop+0xe60>)
   d55ce:	4a1b      	ldr	r2, [pc, #108]	; (d563c <loop+0xe64>)
   d55d0:	681b      	ldr	r3, [r3, #0]
   d55d2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   d55d6:	ee10 6a10 	vmov	r6, s0
   d55da:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
   d55de:	f004 ff70 	bl	da4c2 <_ZN9TimeClass3nowEv>
   d55e2:	e9cd 9006 	strd	r9, r0, [sp, #24]
   d55e6:	4630      	mov	r0, r6
   d55e8:	f005 feb8 	bl	db35c <__aeabi_f2d>
   d55ec:	e9cd 7802 	strd	r7, r8, [sp, #8]
   d55f0:	e9cd 0104 	strd	r0, r1, [sp, #16]
   d55f4:	e9cd 4500 	strd	r4, r5, [sp]
   d55f8:	4a22      	ldr	r2, [pc, #136]	; (d5684 <loop+0xeac>)
   d55fa:	4812      	ldr	r0, [pc, #72]	; (d5644 <loop+0xe6c>)
   d55fc:	f44f 7180 	mov.w	r1, #256	; 0x100
   d5600:	f002 fadc 	bl	d7bbc <snprintf>
					break;
   d5604:	e638      	b.n	d5278 <loop+0xaa0>
   d5606:	3b05      	subs	r3, #5
   d5608:	2b01      	cmp	r3, #1
   d560a:	d905      	bls.n	d5618 <loop+0xe40>
   d560c:	f88d 2000 	strb.w	r2, [sp]
   d5610:	491d      	ldr	r1, [pc, #116]	; (d5688 <loop+0xeb0>)
   d5612:	4a0c      	ldr	r2, [pc, #48]	; (d5644 <loop+0xe6c>)
   d5614:	233c      	movs	r3, #60	; 0x3c
   d5616:	e63e      	b.n	d5296 <loop+0xabe>
   d5618:	f88d 2000 	strb.w	r2, [sp]
   d561c:	491b      	ldr	r1, [pc, #108]	; (d568c <loop+0xeb4>)
   d561e:	4a09      	ldr	r2, [pc, #36]	; (d5644 <loop+0xe6c>)
   d5620:	233c      	movs	r3, #60	; 0x3c
   d5622:	e638      	b.n	d5296 <loop+0xabe>
   d5624:	2003e3c8 	.word	0x2003e3c8
   d5628:	2003e370 	.word	0x2003e370
   d562c:	2003e380 	.word	0x2003e380
   d5630:	2003e38c 	.word	0x2003e38c
   d5634:	2003e518 	.word	0x2003e518
   d5638:	2003e3a8 	.word	0x2003e3a8
   d563c:	000dc5b0 	.word	0x000dc5b0
   d5640:	000dc179 	.word	0x000dc179
   d5644:	2003e3f4 	.word	0x2003e3f4
   d5648:	2003e3ac 	.word	0x2003e3ac
   d564c:	000dc1f3 	.word	0x000dc1f3
   d5650:	2003e374 	.word	0x2003e374
   d5654:	2003e384 	.word	0x2003e384
   d5658:	2003e390 	.word	0x2003e390
   d565c:	2003e520 	.word	0x2003e520
   d5660:	2003e528 	.word	0x2003e528
   d5664:	2003e530 	.word	0x2003e530
   d5668:	2003e36c 	.word	0x2003e36c
   d566c:	2003e37c 	.word	0x2003e37c
   d5670:	000dc281 	.word	0x000dc281
   d5674:	2003e4fc 	.word	0x2003e4fc
   d5678:	000dc357 	.word	0x000dc357
   d567c:	2003e3b4 	.word	0x2003e3b4
   d5680:	2003e3b8 	.word	0x2003e3b8
   d5684:	000dc3b0 	.word	0x000dc3b0
   d5688:	000dc44e 	.word	0x000dc44e
   d568c:	000dc43a 	.word	0x000dc43a
			if(millis() - stateTime >= MAX_TIME_TO_WAIT_BEFORE_SLEEP_MS){
   d5690:	4ea8      	ldr	r6, [pc, #672]	; (d5934 <loop+0x115c>)
   d5692:	f001 ff79 	bl	d7588 <HAL_Timer_Get_Milli_Seconds>
   d5696:	6832      	ldr	r2, [r6, #0]
   d5698:	1a80      	subs	r0, r0, r2
   d569a:	4aa7      	ldr	r2, [pc, #668]	; (d5938 <loop+0x1160>)
   d569c:	6812      	ldr	r2, [r2, #0]
   d569e:	4290      	cmp	r0, r2
   d56a0:	f4ff ae1a 	bcc.w	d52d8 <loop+0xb00>
				switch(sensorType){
   d56a4:	6823      	ldr	r3, [r4, #0]
   d56a6:	2b04      	cmp	r3, #4
   d56a8:	d11f      	bne.n	d56ea <loop+0xf12>
						sensorSleepState = true;
   d56aa:	4ba4      	ldr	r3, [pc, #656]	; (d593c <loop+0x1164>)
						mpu6050.setSleepEnabled(sensorSleepState);
   d56ac:	48a4      	ldr	r0, [pc, #656]	; (d5940 <loop+0x1168>)
						sensorSleepState = true;
   d56ae:	2401      	movs	r4, #1
						mpu6050.setSleepEnabled(sensorSleepState);
   d56b0:	4621      	mov	r1, r4
						sensorSleepState = true;
   d56b2:	701c      	strb	r4, [r3, #0]
						mpu6050.setSleepEnabled(sensorSleepState);
   d56b4:	f001 fef8 	bl	d74a8 <_ZN7MPU605015setSleepEnabledEb>
						if(mpu6050.getSleepEnabled()){
   d56b8:	48a1      	ldr	r0, [pc, #644]	; (d5940 <loop+0x1168>)
   d56ba:	f001 fee1 	bl	d7480 <_ZN7MPU605015getSleepEnabledEv>
   d56be:	4605      	mov	r5, r0
							logData("mpu6050.getSleepEnabled", "True", true, false);
   d56c0:	49a0      	ldr	r1, [pc, #640]	; (d5944 <loop+0x116c>)
   d56c2:	a821      	add	r0, sp, #132	; 0x84
						if(mpu6050.getSleepEnabled()){
   d56c4:	b375      	cbz	r5, d5724 <loop+0xf4c>
							logData("mpu6050.getSleepEnabled", "True", true, false);
   d56c6:	f004 fc1f 	bl	d9f08 <_ZN6StringC1EPKc>
   d56ca:	499f      	ldr	r1, [pc, #636]	; (d5948 <loop+0x1170>)
   d56cc:	a825      	add	r0, sp, #148	; 0x94
   d56ce:	f004 fc1b 	bl	d9f08 <_ZN6StringC1EPKc>
   d56d2:	2300      	movs	r3, #0
							logData("mpu6050.getSleepEnabled", "False", true, false);
   d56d4:	4622      	mov	r2, r4
   d56d6:	a925      	add	r1, sp, #148	; 0x94
   d56d8:	a821      	add	r0, sp, #132	; 0x84
   d56da:	f7fe fe61 	bl	d43a0 <_Z7logData6StringS_bb>
   d56de:	a825      	add	r0, sp, #148	; 0x94
   d56e0:	f004 fbc7 	bl	d9e72 <_ZN6StringD1Ev>
   d56e4:	a821      	add	r0, sp, #132	; 0x84
   d56e6:	f004 fbc4 	bl	d9e72 <_ZN6StringD1Ev>
				if(debug){
   d56ea:	4b98      	ldr	r3, [pc, #608]	; (d594c <loop+0x1174>)
					logData("SLEEP", "DEBUG NO SLEEP", true, true);
   d56ec:	4998      	ldr	r1, [pc, #608]	; (d5950 <loop+0x1178>)
				if(debug){
   d56ee:	781b      	ldrb	r3, [r3, #0]
					logData("SLEEP", "DEBUG NO SLEEP", true, true);
   d56f0:	a821      	add	r0, sp, #132	; 0x84
				if(debug){
   d56f2:	b1fb      	cbz	r3, d5734 <loop+0xf5c>
					logData("SLEEP", "DEBUG NO SLEEP", true, true);
   d56f4:	f004 fc08 	bl	d9f08 <_ZN6StringC1EPKc>
   d56f8:	4996      	ldr	r1, [pc, #600]	; (d5954 <loop+0x117c>)
					logData("SLEEP", "GOING TO SLEEP", true, true);
   d56fa:	a825      	add	r0, sp, #148	; 0x94
   d56fc:	f004 fc04 	bl	d9f08 <_ZN6StringC1EPKc>
   d5700:	2301      	movs	r3, #1
   d5702:	461a      	mov	r2, r3
   d5704:	a925      	add	r1, sp, #148	; 0x94
   d5706:	a821      	add	r0, sp, #132	; 0x84
   d5708:	f7fe fe4a 	bl	d43a0 <_Z7logData6StringS_bb>
   d570c:	a825      	add	r0, sp, #148	; 0x94
   d570e:	f004 fbb0 	bl	d9e72 <_ZN6StringD1Ev>
   d5712:	a821      	add	r0, sp, #132	; 0x84
   d5714:	f004 fbad 	bl	d9e72 <_ZN6StringD1Ev>
   d5718:	f001 ff36 	bl	d7588 <HAL_Timer_Get_Milli_Seconds>
				state = SLEEP_STATE;
   d571c:	2309      	movs	r3, #9
				stateTime = millis();
   d571e:	6030      	str	r0, [r6, #0]
				state = SLEEP_STATE;
   d5720:	f7ff ba34 	b.w	d4b8c <loop+0x3b4>
							logData("mpu6050.getSleepEnabled", "False", true, false);
   d5724:	f004 fbf0 	bl	d9f08 <_ZN6StringC1EPKc>
   d5728:	498b      	ldr	r1, [pc, #556]	; (d5958 <loop+0x1180>)
   d572a:	a825      	add	r0, sp, #148	; 0x94
   d572c:	f004 fbec 	bl	d9f08 <_ZN6StringC1EPKc>
   d5730:	462b      	mov	r3, r5
   d5732:	e7cf      	b.n	d56d4 <loop+0xefc>
					logData("SLEEP", "GOING TO SLEEP", true, true);
   d5734:	f004 fbe8 	bl	d9f08 <_ZN6StringC1EPKc>
   d5738:	4988      	ldr	r1, [pc, #544]	; (d595c <loop+0x1184>)
   d573a:	e7de      	b.n	d56fa <loop+0xf22>
			if(!debug){
   d573c:	4b83      	ldr	r3, [pc, #524]	; (d594c <loop+0x1174>)
   d573e:	781c      	ldrb	r4, [r3, #0]
   d5740:	2c00      	cmp	r4, #0
   d5742:	f040 8141 	bne.w	d59c8 <loop+0x11f0>
				logData("SLEEP", "SLEEP STOP SLEEP", true, true);
   d5746:	4982      	ldr	r1, [pc, #520]	; (d5950 <loop+0x1178>)
				pirState = 0;
   d5748:	4e85      	ldr	r6, [pc, #532]	; (d5960 <loop+0x1188>)
				rtcState = 0;
   d574a:	4d86      	ldr	r5, [pc, #536]	; (d5964 <loop+0x118c>)
				logData("SLEEP", "SLEEP STOP SLEEP", true, true);
   d574c:	a821      	add	r0, sp, #132	; 0x84
   d574e:	f004 fbdb 	bl	d9f08 <_ZN6StringC1EPKc>
   d5752:	4985      	ldr	r1, [pc, #532]	; (d5968 <loop+0x1190>)
   d5754:	a825      	add	r0, sp, #148	; 0x94
   d5756:	f004 fbd7 	bl	d9f08 <_ZN6StringC1EPKc>
   d575a:	2301      	movs	r3, #1
   d575c:	461a      	mov	r2, r3
   d575e:	a925      	add	r1, sp, #148	; 0x94
   d5760:	a821      	add	r0, sp, #132	; 0x84
   d5762:	f7fe fe1d 	bl	d43a0 <_Z7logData6StringS_bb>
   d5766:	a825      	add	r0, sp, #148	; 0x94
   d5768:	f004 fb83 	bl	d9e72 <_ZN6StringD1Ev>
   d576c:	a821      	add	r0, sp, #132	; 0x84
   d576e:	f004 fb80 	bl	d9e72 <_ZN6StringD1Ev>
				fram.put(FRAM::pirAddr, pirState);
   d5772:	4632      	mov	r2, r6
   d5774:	2111      	movs	r1, #17
   d5776:	487d      	ldr	r0, [pc, #500]	; (d596c <loop+0x1194>)
				pirState = 0;
   d5778:	7034      	strb	r4, [r6, #0]
				fram.put(FRAM::pirAddr, pirState);
   d577a:	f7fe ff72 	bl	d4662 <_ZN6MB85RC3putIhEERKT_jS3_>
				fram.put(FRAM::rtcAddr, rtcState);
   d577e:	462a      	mov	r2, r5
   d5780:	2109      	movs	r1, #9
   d5782:	487a      	ldr	r0, [pc, #488]	; (d596c <loop+0x1194>)
				rtcState = 0;
   d5784:	702c      	strb	r4, [r5, #0]
				fram.put(FRAM::rtcAddr, rtcState);
   d5786:	f7fe ff6c 	bl	d4662 <_ZN6MB85RC3putIhEERKT_jS3_>
				watchdogState = 0;
   d578a:	4a79      	ldr	r2, [pc, #484]	; (d5970 <loop+0x1198>)
				fram.put(FRAM::watchdogAddr, watchdogState);
   d578c:	4877      	ldr	r0, [pc, #476]	; (d596c <loop+0x1194>)
				watchdogState = 0;
   d578e:	7014      	strb	r4, [r2, #0]
				fram.put(FRAM::watchdogAddr, watchdogState);
   d5790:	2110      	movs	r1, #16
   d5792:	f7fe ff66 	bl	d4662 <_ZN6MB85RC3putIhEERKT_jS3_>
				if(fuel.getVCell() < BATTERY_SAVER_VOLTAGE){
   d5796:	4877      	ldr	r0, [pc, #476]	; (d5974 <loop+0x119c>)
   d5798:	f002 fe4e 	bl	d8438 <_ZN9FuelGauge8getVCellEv>
   d579c:	eef0 7a0e 	vmov.f32	s15, #14	; 0x40700000  3.750
   d57a0:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d57a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
					MAX_TIME_TO_SLEEP_MS = (BATTERY_SAVER_MODE_SEC * 1000);				// sleep for [60] minutes in milliseconds
   d57a8:	bf42      	ittt	mi
   d57aa:	4b73      	ldrmi	r3, [pc, #460]	; (d5978 <loop+0x11a0>)
   d57ac:	4a73      	ldrmi	r2, [pc, #460]	; (d597c <loop+0x11a4>)
   d57ae:	601a      	strmi	r2, [r3, #0]
        : config_(config) {
   d57b0:	ab26      	add	r3, sp, #152	; 0x98
   d57b2:	9325      	str	r3, [sp, #148]	; 0x94
              valid_(true) {
   d57b4:	2300      	movs	r3, #0
   d57b6:	2201      	movs	r2, #1
        config_.wakeup_sources = nullptr;
   d57b8:	e9cd 3328 	strd	r3, r3, [sp, #160]	; 0xa0
              valid_(true) {
   d57bc:	f8ad 309d 	strh.w	r3, [sp, #157]	; 0x9d
   d57c0:	f88d 309f 	strb.w	r3, [sp, #159]	; 0x9f
						.gpio(PIRPin, RISING)
   d57c4:	2110      	movs	r1, #16
        config_.size = sizeof(hal_sleep_config_t);
   d57c6:	4b6e      	ldr	r3, [pc, #440]	; (d5980 <loop+0x11a8>)
   d57c8:	9326      	str	r3, [sp, #152]	; 0x98
   d57ca:	a825      	add	r0, sp, #148	; 0x94
              valid_(true) {
   d57cc:	f88d 20a8 	strb.w	r2, [sp, #168]	; 0xa8
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
   d57d0:	f88d 209c 	strb.w	r2, [sp, #156]	; 0x9c
   d57d4:	f7fe fce0 	bl	d4198 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode>

    SystemSleepConfiguration& duration(system_tick_t ms) {
        if (valid_) {
   d57d8:	7d03      	ldrb	r3, [r0, #20]
   d57da:	4607      	mov	r7, r0
   d57dc:	b1fb      	cbz	r3, d581e <loop+0x1046>
						.duration(MAX_TIME_TO_SLEEP_MS);
   d57de:	4b66      	ldr	r3, [pc, #408]	; (d5978 <loop+0x11a0>)
   d57e0:	f8d3 8000 	ldr.w	r8, [r3]
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   d57e4:	6803      	ldr	r3, [r0, #0]
   d57e6:	68db      	ldr	r3, [r3, #12]
        if (!start) {
   d57e8:	b12b      	cbz	r3, d57f6 <loop+0x101e>
            if (start->type == type) {
   d57ea:	889a      	ldrh	r2, [r3, #4]
   d57ec:	2a04      	cmp	r2, #4
   d57ee:	f000 80fc 	beq.w	d59ea <loop+0x1212>
            start = start->next;
   d57f2:	689b      	ldr	r3, [r3, #8]
        while (start) {
   d57f4:	e7f8      	b.n	d57e8 <loop+0x1010>
            if (wakeup) {
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
                return *this;
            }
            // Otherwise, configure RTC as wakeup source.
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
   d57f6:	4963      	ldr	r1, [pc, #396]	; (d5984 <loop+0x11ac>)
   d57f8:	2010      	movs	r0, #16
   d57fa:	f005 f95f 	bl	daabc <_ZnwjRKSt9nothrow_t>
   d57fe:	4604      	mov	r4, r0
   d5800:	2800      	cmp	r0, #0
   d5802:	f000 80f0 	beq.w	d59e6 <loop+0x120e>
   d5806:	2210      	movs	r2, #16
   d5808:	2100      	movs	r1, #0
   d580a:	f006 f9b9 	bl	dbb80 <memset>
            if (!wakeupSource) {
                valid_ = false;
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_rtc_t);
   d580e:	4b5c      	ldr	r3, [pc, #368]	; (d5980 <loop+0x11a8>)
   d5810:	6023      	str	r3, [r4, #0]
            wakeupSource->base.version = HAL_SLEEP_VERSION;
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_RTC;
   d5812:	2304      	movs	r3, #4
   d5814:	80a3      	strh	r3, [r4, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   d5816:	693b      	ldr	r3, [r7, #16]
            wakeupSource->ms = ms;
   d5818:	e9c4 3802 	strd	r3, r8, [r4, #8]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   d581c:	613c      	str	r4, [r7, #16]
				SystemSleepResult result = System.sleep(config);
   d581e:	a925      	add	r1, sp, #148	; 0x94
   d5820:	a81a      	add	r0, sp, #104	; 0x68
   d5822:	f004 fc47 	bl	da0b4 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>
				digitalWrite(PIRPin, LOW);												// Pet the watchdog
   d5826:	2100      	movs	r1, #0
   d5828:	2010      	movs	r0, #16
   d582a:	f005 f89a 	bl	da962 <digitalWrite>
				if(result.wakeupReason() == SystemSleepWakeupReason::BY_GPIO){
   d582e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
        if (wakeupSource_) {
   d5830:	b303      	cbz	r3, d5874 <loop+0x109c>
   d5832:	889c      	ldrh	r4, [r3, #4]
   d5834:	2c01      	cmp	r4, #1
   d5836:	d11d      	bne.n	d5874 <loop+0x109c>
					if(whichPin == A0){
   d5838:	899b      	ldrh	r3, [r3, #12]
						logData("SLEEP RESULT", "Woke By BY_GPIO PIR", true, true);
   d583a:	4953      	ldr	r1, [pc, #332]	; (d5988 <loop+0x11b0>)
					if(whichPin == A0){
   d583c:	2b13      	cmp	r3, #19
						logData("SLEEP RESULT", "Woke By BY_GPIO PIR", true, true);
   d583e:	a81d      	add	r0, sp, #116	; 0x74
					if(whichPin == A0){
   d5840:	f040 80ac 	bne.w	d599c <loop+0x11c4>
						logData("SLEEP RESULT", "Woke By BY_GPIO PIR", true, true);
   d5844:	f004 fb60 	bl	d9f08 <_ZN6StringC1EPKc>
   d5848:	4950      	ldr	r1, [pc, #320]	; (d598c <loop+0x11b4>)
   d584a:	a821      	add	r0, sp, #132	; 0x84
   d584c:	f004 fb5c 	bl	d9f08 <_ZN6StringC1EPKc>
   d5850:	4622      	mov	r2, r4
   d5852:	a921      	add	r1, sp, #132	; 0x84
   d5854:	4623      	mov	r3, r4
   d5856:	a81d      	add	r0, sp, #116	; 0x74
   d5858:	f7fe fda2 	bl	d43a0 <_Z7logData6StringS_bb>
   d585c:	a821      	add	r0, sp, #132	; 0x84
   d585e:	f004 fb08 	bl	d9e72 <_ZN6StringD1Ev>
   d5862:	a81d      	add	r0, sp, #116	; 0x74
   d5864:	f004 fb05 	bl	d9e72 <_ZN6StringD1Ev>
						fram.put(FRAM::pirAddr, pirState);
   d5868:	4a3d      	ldr	r2, [pc, #244]	; (d5960 <loop+0x1188>)
						pirState = 1;
   d586a:	7034      	strb	r4, [r6, #0]
						fram.put(FRAM::pirAddr, pirState);
   d586c:	2111      	movs	r1, #17
						fram.put(FRAM::rtcAddr, rtcState);
   d586e:	483f      	ldr	r0, [pc, #252]	; (d596c <loop+0x1194>)
   d5870:	f7fe fef7 	bl	d4662 <_ZN6MB85RC3putIhEERKT_jS3_>
				if(result.wakeupReason() == SystemSleepWakeupReason::BY_RTC){
   d5874:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   d5876:	b1b3      	cbz	r3, d58a6 <loop+0x10ce>
   d5878:	889b      	ldrh	r3, [r3, #4]
   d587a:	2b04      	cmp	r3, #4
   d587c:	d113      	bne.n	d58a6 <loop+0x10ce>
					logData("SLEEP RESULT", "SLEEP RESULT - Woke BY_RTC", true, true);
   d587e:	4942      	ldr	r1, [pc, #264]	; (d5988 <loop+0x11b0>)
   d5880:	a81d      	add	r0, sp, #116	; 0x74
   d5882:	f004 fb41 	bl	d9f08 <_ZN6StringC1EPKc>
   d5886:	4942      	ldr	r1, [pc, #264]	; (d5990 <loop+0x11b8>)
   d5888:	a821      	add	r0, sp, #132	; 0x84
   d588a:	f004 fb3d 	bl	d9f08 <_ZN6StringC1EPKc>
   d588e:	2301      	movs	r3, #1
   d5890:	461a      	mov	r2, r3
   d5892:	a921      	add	r1, sp, #132	; 0x84
   d5894:	a81d      	add	r0, sp, #116	; 0x74
   d5896:	f7fe fd83 	bl	d43a0 <_Z7logData6StringS_bb>
   d589a:	a821      	add	r0, sp, #132	; 0x84
   d589c:	f004 fae9 	bl	d9e72 <_ZN6StringD1Ev>
   d58a0:	a81d      	add	r0, sp, #116	; 0x74
   d58a2:	f004 fae6 	bl	d9e72 <_ZN6StringD1Ev>
				if(result.wakeupReason() == SystemSleepWakeupReason::BY_NETWORK){
   d58a6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   d58a8:	b1b3      	cbz	r3, d58d8 <loop+0x1100>
   d58aa:	889b      	ldrh	r3, [r3, #4]
   d58ac:	2b0e      	cmp	r3, #14
   d58ae:	d113      	bne.n	d58d8 <loop+0x1100>
					logData("SLEEP RESULT", "SLEEP RESULT - Woke BY_NETWORK", true, true);
   d58b0:	4935      	ldr	r1, [pc, #212]	; (d5988 <loop+0x11b0>)
   d58b2:	a81d      	add	r0, sp, #116	; 0x74
   d58b4:	f004 fb28 	bl	d9f08 <_ZN6StringC1EPKc>
   d58b8:	4936      	ldr	r1, [pc, #216]	; (d5994 <loop+0x11bc>)
   d58ba:	a821      	add	r0, sp, #132	; 0x84
   d58bc:	f004 fb24 	bl	d9f08 <_ZN6StringC1EPKc>
   d58c0:	2301      	movs	r3, #1
   d58c2:	461a      	mov	r2, r3
   d58c4:	a921      	add	r1, sp, #132	; 0x84
   d58c6:	a81d      	add	r0, sp, #116	; 0x74
   d58c8:	f7fe fd6a 	bl	d43a0 <_Z7logData6StringS_bb>
   d58cc:	a821      	add	r0, sp, #132	; 0x84
   d58ce:	f004 fad0 	bl	d9e72 <_ZN6StringD1Ev>
   d58d2:	a81d      	add	r0, sp, #116	; 0x74
   d58d4:	f004 facd 	bl	d9e72 <_ZN6StringD1Ev>
				if(result.wakeupReason() == SystemSleepWakeupReason::UNKNOWN) {
   d58d8:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   d58da:	b10b      	cbz	r3, d58e0 <loop+0x1108>
   d58dc:	889b      	ldrh	r3, [r3, #4]
   d58de:	b99b      	cbnz	r3, d5908 <loop+0x1130>
					logData("SLEEP RESULT", "SLEEP RESULT - Woke By UNKNOWN", true, true);
   d58e0:	4929      	ldr	r1, [pc, #164]	; (d5988 <loop+0x11b0>)
   d58e2:	a81d      	add	r0, sp, #116	; 0x74
   d58e4:	f004 fb10 	bl	d9f08 <_ZN6StringC1EPKc>
   d58e8:	492b      	ldr	r1, [pc, #172]	; (d5998 <loop+0x11c0>)
   d58ea:	a821      	add	r0, sp, #132	; 0x84
   d58ec:	f004 fb0c 	bl	d9f08 <_ZN6StringC1EPKc>
   d58f0:	2301      	movs	r3, #1
   d58f2:	461a      	mov	r2, r3
   d58f4:	a921      	add	r1, sp, #132	; 0x84
   d58f6:	a81d      	add	r0, sp, #116	; 0x74
   d58f8:	f7fe fd52 	bl	d43a0 <_Z7logData6StringS_bb>
   d58fc:	a821      	add	r0, sp, #132	; 0x84
   d58fe:	f004 fab8 	bl	d9e72 <_ZN6StringD1Ev>
   d5902:	a81d      	add	r0, sp, #116	; 0x74
   d5904:	f004 fab5 	bl	d9e72 <_ZN6StringD1Ev>
   d5908:	f001 fe3e 	bl	d7588 <HAL_Timer_Get_Milli_Seconds>
				stateTime = millis();
   d590c:	4b09      	ldr	r3, [pc, #36]	; (d5934 <loop+0x115c>)
   d590e:	6018      	str	r0, [r3, #0]
        if (wakeupSource_) {
   d5910:	981a      	ldr	r0, [sp, #104]	; 0x68
				state = PARTICLE_CONNECT_WAIT_STATE;
   d5912:	2302      	movs	r3, #2
   d5914:	f88a 3000 	strb.w	r3, [sl]
   d5918:	b108      	cbz	r0, d591e <loop+0x1146>
            free(wakeupSource_);
   d591a:	f002 f937 	bl	d7b8c <free>
        auto wakeupSource = config_.wakeup_sources;
   d591e:	9829      	ldr	r0, [sp, #164]	; 0xa4
        while (wakeupSource) {
   d5920:	2800      	cmp	r0, #0
   d5922:	f43f acd9 	beq.w	d52d8 <loop+0xb00>
            auto next = wakeupSource->next;
   d5926:	6884      	ldr	r4, [r0, #8]
            delete wakeupSource;
   d5928:	210c      	movs	r1, #12
   d592a:	f005 f8c5 	bl	daab8 <_ZdlPvj>
            wakeupSource = next;
   d592e:	4620      	mov	r0, r4
        while (wakeupSource) {
   d5930:	e7f6      	b.n	d5920 <loop+0x1148>
   d5932:	bf00      	nop
   d5934:	2003e5b8 	.word	0x2003e5b8
   d5938:	2003e27c 	.word	0x2003e27c
   d593c:	2003e5b4 	.word	0x2003e5b4
   d5940:	2003e55c 	.word	0x2003e55c
   d5944:	000dc0b0 	.word	0x000dc0b0
   d5948:	000dc0c8 	.word	0x000dc0c8
   d594c:	2003e4f8 	.word	0x2003e4f8
   d5950:	000dc47e 	.word	0x000dc47e
   d5954:	000dc475 	.word	0x000dc475
   d5958:	000dc0cd 	.word	0x000dc0cd
   d595c:	000dc484 	.word	0x000dc484
   d5960:	2003e56b 	.word	0x2003e56b
   d5964:	2003e5ac 	.word	0x2003e5ac
   d5968:	000dc493 	.word	0x000dc493
   d596c:	2003e508 	.word	0x2003e508
   d5970:	2003e5ec 	.word	0x2003e5ec
   d5974:	2003e518 	.word	0x2003e518
   d5978:	2003e278 	.word	0x2003e278
   d597c:	002932e0 	.word	0x002932e0
   d5980:	00030010 	.word	0x00030010
   d5984:	000dca7c 	.word	0x000dca7c
   d5988:	000dc079 	.word	0x000dc079
   d598c:	000dc4a4 	.word	0x000dc4a4
   d5990:	000dc4cc 	.word	0x000dc4cc
   d5994:	000dc4e7 	.word	0x000dc4e7
   d5998:	000dc506 	.word	0x000dc506
						logData("SLEEP RESULT", "Woke By BY_GPIO RTC", true, true);
   d599c:	f004 fab4 	bl	d9f08 <_ZN6StringC1EPKc>
   d59a0:	4913      	ldr	r1, [pc, #76]	; (d59f0 <loop+0x1218>)
   d59a2:	a821      	add	r0, sp, #132	; 0x84
   d59a4:	f004 fab0 	bl	d9f08 <_ZN6StringC1EPKc>
   d59a8:	4622      	mov	r2, r4
   d59aa:	a921      	add	r1, sp, #132	; 0x84
   d59ac:	4623      	mov	r3, r4
   d59ae:	a81d      	add	r0, sp, #116	; 0x74
   d59b0:	f7fe fcf6 	bl	d43a0 <_Z7logData6StringS_bb>
   d59b4:	a821      	add	r0, sp, #132	; 0x84
   d59b6:	f004 fa5c 	bl	d9e72 <_ZN6StringD1Ev>
   d59ba:	a81d      	add	r0, sp, #116	; 0x74
   d59bc:	f004 fa59 	bl	d9e72 <_ZN6StringD1Ev>
						fram.put(FRAM::rtcAddr, rtcState);
   d59c0:	4a0c      	ldr	r2, [pc, #48]	; (d59f4 <loop+0x121c>)
						rtcState = 1;
   d59c2:	702c      	strb	r4, [r5, #0]
						fram.put(FRAM::rtcAddr, rtcState);
   d59c4:	2109      	movs	r1, #9
   d59c6:	e752      	b.n	d586e <loop+0x1096>
				if(millis() - stateTime >= MAX_TIME_TO_SLEEP_MS){
   d59c8:	4c0b      	ldr	r4, [pc, #44]	; (d59f8 <loop+0x1220>)
   d59ca:	f001 fddd 	bl	d7588 <HAL_Timer_Get_Milli_Seconds>
   d59ce:	6823      	ldr	r3, [r4, #0]
   d59d0:	1ac0      	subs	r0, r0, r3
   d59d2:	4b0a      	ldr	r3, [pc, #40]	; (d59fc <loop+0x1224>)
   d59d4:	681b      	ldr	r3, [r3, #0]
   d59d6:	4298      	cmp	r0, r3
   d59d8:	f4ff ac7e 	bcc.w	d52d8 <loop+0xb00>
   d59dc:	f001 fdd4 	bl	d7588 <HAL_Timer_Get_Milli_Seconds>
					stateTime = millis();
   d59e0:	6020      	str	r0, [r4, #0]
   d59e2:	f7ff b80d 	b.w	d4a00 <loop+0x228>
                valid_ = false;
   d59e6:	7538      	strb	r0, [r7, #20]
                return *this;
   d59e8:	e719      	b.n	d581e <loop+0x1046>
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
   d59ea:	f8c3 800c 	str.w	r8, [r3, #12]
                return *this;
   d59ee:	e716      	b.n	d581e <loop+0x1046>
   d59f0:	000dc4b8 	.word	0x000dc4b8
   d59f4:	2003e5ac 	.word	0x2003e5ac
   d59f8:	2003e5b8 	.word	0x2003e5b8
   d59fc:	2003e278 	.word	0x2003e278

000d5a00 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   d5a00:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d5a02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5a04:	4604      	mov	r4, r0
   d5a06:	460d      	mov	r5, r1
   d5a08:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   d5a0a:	d916      	bls.n	d5a3a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
   d5a0c:	4290      	cmp	r0, r2
   d5a0e:	d215      	bcs.n	d5a3c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
   d5a10:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   d5a14:	1a75      	subs	r5, r6, r1
   d5a16:	f1a1 0714 	sub.w	r7, r1, #20
   d5a1a:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   d5a1c:	42b7      	cmp	r7, r6
   d5a1e:	d01c      	beq.n	d5a5a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
   d5a20:	b12c      	cbz	r4, d5a2e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
   d5a22:	4631      	mov	r1, r6
   d5a24:	4620      	mov	r0, r4
   d5a26:	f004 faa0 	bl	d9f6a <_ZN6StringC1EOS_>
   d5a2a:	7c33      	ldrb	r3, [r6, #16]
   d5a2c:	7423      	strb	r3, [r4, #16]
   d5a2e:	4630      	mov	r0, r6
   d5a30:	f004 fa1f 	bl	d9e72 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   d5a34:	3e14      	subs	r6, #20
   d5a36:	3c14      	subs	r4, #20
   d5a38:	e7f0      	b.n	d5a1c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   d5a3a:	d00e      	beq.n	d5a5a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
   d5a3c:	42b5      	cmp	r5, r6
   d5a3e:	d00c      	beq.n	d5a5a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
   d5a40:	b12c      	cbz	r4, d5a4e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
   d5a42:	4629      	mov	r1, r5
   d5a44:	4620      	mov	r0, r4
   d5a46:	f004 fa90 	bl	d9f6a <_ZN6StringC1EOS_>
   d5a4a:	7c2b      	ldrb	r3, [r5, #16]
   d5a4c:	7423      	strb	r3, [r4, #16]
   d5a4e:	4628      	mov	r0, r5
   d5a50:	f004 fa0f 	bl	d9e72 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   d5a54:	3514      	adds	r5, #20
   d5a56:	3414      	adds	r4, #20
   d5a58:	e7f0      	b.n	d5a3c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
   d5a5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5a5c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d5a5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   d5a60:	2300      	movs	r3, #0
   d5a62:	e9c0 3300 	strd	r3, r3, [r0]
   d5a66:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d5a68:	684f      	ldr	r7, [r1, #4]
   d5a6a:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d5a6c:	4604      	mov	r4, r0
   d5a6e:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d5a70:	dd23      	ble.n	d5aba <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   d5a72:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
   d5a76:	fb08 f007 	mul.w	r0, r8, r7
   d5a7a:	f002 f87f 	bl	d7b7c <malloc>
            if (!d) {
   d5a7e:	4605      	mov	r5, r0
   d5a80:	b1d8      	cbz	r0, d5aba <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            move(d, data_, data_ + size_);
   d5a82:	e9d4 1200 	ldrd	r1, r2, [r4]
   d5a86:	fb08 1202 	mla	r2, r8, r2, r1
   d5a8a:	f7ff ffb9 	bl	d5a00 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   d5a8e:	6820      	ldr	r0, [r4, #0]
   d5a90:	f002 f87c 	bl	d7b8c <free>
        data_ = d;
   d5a94:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   d5a96:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   d5a98:	e9d6 7300 	ldrd	r7, r3, [r6]
   d5a9c:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
   d5aa0:	45b8      	cmp	r8, r7
   d5aa2:	d008      	beq.n	d5ab6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5a>
   d5aa4:	4639      	mov	r1, r7
   d5aa6:	4628      	mov	r0, r5
   d5aa8:	f004 fa79 	bl	d9f9e <_ZN6StringC1ERKS_>
   d5aac:	7c3b      	ldrb	r3, [r7, #16]
   d5aae:	742b      	strb	r3, [r5, #16]
   d5ab0:	3714      	adds	r7, #20
   d5ab2:	3514      	adds	r5, #20
   d5ab4:	e7f4      	b.n	d5aa0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
   d5ab6:	6873      	ldr	r3, [r6, #4]
   d5ab8:	6063      	str	r3, [r4, #4]
}
   d5aba:	4620      	mov	r0, r4
   d5abc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d5ac0 <_GLOBAL__sub_I___appProductID>:
		digitalWrite(ANTSW1, 0);
	#else
		digitalWrite(ANTSW1, 0);
		digitalWrite(ANTSW2, 1);
	#endif
}
   d5ac0:	b5f0      	push	{r4, r5, r6, r7, lr}
        val_(val) {
   d5ac2:	4b4a      	ldr	r3, [pc, #296]	; (d5bec <_GLOBAL__sub_I___appProductID+0x12c>)
        filter_(level, filters) {
   d5ac4:	4d4a      	ldr	r5, [pc, #296]	; (d5bf0 <_GLOBAL__sub_I___appProductID+0x130>)
   d5ac6:	2401      	movs	r4, #1
   d5ac8:	b08d      	sub	sp, #52	; 0x34
   d5aca:	701c      	strb	r4, [r3, #0]
#include "spark_protocol_functions.h"


struct __ApplicationProductID {
    __ApplicationProductID(product_id_t id) {
        spark_protocol_set_product_id(spark_protocol_instance(), id);
   d5acc:	f004 fee2 	bl	da894 <spark_protocol_instance>
   d5ad0:	2300      	movs	r3, #0
   d5ad2:	461a      	mov	r2, r3
   d5ad4:	f643 41a6 	movw	r1, #15526	; 0x3ca6
   d5ad8:	f004 fee4 	bl	da8a4 <spark_protocol_set_product_id>
    }
};

struct __ApplicationProductVersion {
    __ApplicationProductVersion(product_firmware_version_t version) {
        spark_protocol_set_product_firmware_version(spark_protocol_instance(), version);
   d5adc:	f004 feda 	bl	da894 <spark_protocol_instance>
   d5ae0:	2300      	movs	r3, #0
   d5ae2:	461a      	mov	r2, r3
   d5ae4:	2125      	movs	r1, #37	; 0x25
   d5ae6:	f004 fee5 	bl	da8b4 <spark_protocol_set_product_firmware_version>
SYSTEM_THREAD(ENABLED)
   d5aea:	2100      	movs	r1, #0
   d5aec:	4620      	mov	r0, r4
        capacity_(0) {
   d5aee:	2400      	movs	r4, #0
   d5af0:	f001 ff4c 	bl	d798c <system_thread_set_state>
   d5af4:	e9cd 4400 	strd	r4, r4, [sp]
   d5af8:	9402      	str	r4, [sp, #8]
            StreamLogHandler(Serial, level, filters) {
   d5afa:	f004 fe09 	bl	da710 <_Z16_fetch_usbserialv>
   d5afe:	4669      	mov	r1, sp
   d5b00:	4606      	mov	r6, r0
   d5b02:	a803      	add	r0, sp, #12
   d5b04:	f7ff ffaa 	bl	d5a5c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d5b08:	462f      	mov	r7, r5
        stream_(&stream) {
   d5b0a:	a903      	add	r1, sp, #12
   d5b0c:	a806      	add	r0, sp, #24
   d5b0e:	f7ff ffa5 	bl	d5a5c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   d5b12:	4b38      	ldr	r3, [pc, #224]	; (d5bf4 <_GLOBAL__sub_I___appProductID+0x134>)
   d5b14:	f847 3b04 	str.w	r3, [r7], #4
   d5b18:	a906      	add	r1, sp, #24
   d5b1a:	a809      	add	r0, sp, #36	; 0x24
   d5b1c:	f7ff ff9e 	bl	d5a5c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d5b20:	aa09      	add	r2, sp, #36	; 0x24
   d5b22:	211e      	movs	r1, #30
   d5b24:	4638      	mov	r0, r7
   d5b26:	f003 fc6e 	bl	d9406 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d5b2a:	a809      	add	r0, sp, #36	; 0x24
   d5b2c:	f7fe fd86 	bl	d463c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   d5b30:	a806      	add	r0, sp, #24
   d5b32:	f7fe fd83 	bl	d463c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d5b36:	4b30      	ldr	r3, [pc, #192]	; (d5bf8 <_GLOBAL__sub_I___appProductID+0x138>)
   d5b38:	602b      	str	r3, [r5, #0]
   d5b3a:	622e      	str	r6, [r5, #32]
   d5b3c:	a803      	add	r0, sp, #12
   d5b3e:	f7fe fd7d 	bl	d463c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d5b42:	4b2e      	ldr	r3, [pc, #184]	; (d5bfc <_GLOBAL__sub_I___appProductID+0x13c>)
   d5b44:	602b      	str	r3, [r5, #0]
        Serial.begin();
   d5b46:	f004 fde3 	bl	da710 <_Z16_fetch_usbserialv>
   d5b4a:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d5b4e:	f004 fdcf 	bl	da6f0 <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
   d5b52:	f003 f8fd 	bl	d8d50 <_ZN5spark10LogManager8instanceEv>
   d5b56:	4629      	mov	r1, r5
   d5b58:	f003 fbe7 	bl	d932a <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler logHandler;			// Sends everything
   d5b5c:	4668      	mov	r0, sp
   d5b5e:	f7fe fd6d 	bl	d463c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
MCP79410 rtc;											// Rickkas MCP79410 libarary
   d5b62:	f004 ff61 	bl	daa28 <_Z19__fetch_global_Wirev>
   d5b66:	4601      	mov	r1, r0
   d5b68:	4825      	ldr	r0, [pc, #148]	; (d5c00 <_GLOBAL__sub_I___appProductID+0x140>)
	 *
	 * @param addr The address 0-7 based on the setting of A0, A1 and A2.
	 *
	 * You typically create one of these objects as a global variable.
	 */
	MB85RC64(TwoWire &wire, int addr = 0) : MB85RC(wire, 8192, addr) {};
   d5b6a:	4d26      	ldr	r5, [pc, #152]	; (d5c04 <_GLOBAL__sub_I___appProductID+0x144>)
   d5b6c:	f001 f89c 	bl	d6ca8 <_ZN8MCP79410C1ER7TwoWire>
MB85RC64 fram(Wire, 0);
   d5b70:	f004 ff5a 	bl	daa28 <_Z19__fetch_global_Wirev>
   d5b74:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   d5b78:	4601      	mov	r1, r0
   d5b7a:	4623      	mov	r3, r4
   d5b7c:	4628      	mov	r0, r5
   d5b7e:	f000 fe1d 	bl	d67bc <_ZN6MB85RCC1ER7TwoWireji>
   d5b82:	4b21      	ldr	r3, [pc, #132]	; (d5c08 <_GLOBAL__sub_I___appProductID+0x148>)
   d5b84:	602b      	str	r3, [r5, #0]
Adafruit_ADXL343 ADXL343 = Adafruit_ADXL343(12345);
   d5b86:	f243 0139 	movw	r1, #12345	; 0x3039
   d5b8a:	4820      	ldr	r0, [pc, #128]	; (d5c0c <_GLOBAL__sub_I___appProductID+0x14c>)
String powerSString;
   d5b8c:	4d20      	ldr	r5, [pc, #128]	; (d5c10 <_GLOBAL__sub_I___appProductID+0x150>)
Adafruit_ADXL343 ADXL343 = Adafruit_ADXL343(12345);
   d5b8e:	f000 f9c7 	bl	d5f20 <_ZN16Adafruit_ADXL343C1El>
Adafruit_ADT7410 ADT7410 = Adafruit_ADT7410();
   d5b92:	4820      	ldr	r0, [pc, #128]	; (d5c14 <_GLOBAL__sub_I___appProductID+0x154>)
   d5b94:	f000 f878 	bl	d5c88 <_ZN16Adafruit_ADT7410C1Ev>
MPU6050 mpu6050;
   d5b98:	481f      	ldr	r0, [pc, #124]	; (d5c18 <_GLOBAL__sub_I___appProductID+0x158>)
   d5b9a:	f001 fc0d 	bl	d73b8 <_ZN7MPU6050C1Ev>
String powerSString;
   d5b9e:	4629      	mov	r1, r5
   d5ba0:	481e      	ldr	r0, [pc, #120]	; (d5c1c <_GLOBAL__sub_I___appProductID+0x15c>)
   d5ba2:	f004 f9b1 	bl	d9f08 <_ZN6StringC1EPKc>
String powerBSString;
   d5ba6:	4629      	mov	r1, r5
   d5ba8:	481d      	ldr	r0, [pc, #116]	; (d5c20 <_GLOBAL__sub_I___appProductID+0x160>)
   d5baa:	f004 f9ad 	bl	d9f08 <_ZN6StringC1EPKc>
String batterySocString;
   d5bae:	4629      	mov	r1, r5
   d5bb0:	481c      	ldr	r0, [pc, #112]	; (d5c24 <_GLOBAL__sub_I___appProductID+0x164>)
   d5bb2:	f004 f9a9 	bl	d9f08 <_ZN6StringC1EPKc>
PMIC pmic;
   d5bb6:	4621      	mov	r1, r4
   d5bb8:	481b      	ldr	r0, [pc, #108]	; (d5c28 <_GLOBAL__sub_I___appProductID+0x168>)
   d5bba:	f003 fff6 	bl	d9baa <_ZN4PMICC1Eb>
            : conf_{} {
   d5bbe:	4b1b      	ldr	r3, [pc, #108]	; (d5c2c <_GLOBAL__sub_I___appProductID+0x16c>)
   d5bc0:	2620      	movs	r6, #32
   d5bc2:	4632      	mov	r2, r6
   d5bc4:	4618      	mov	r0, r3
   d5bc6:	4621      	mov	r1, r4
   d5bc8:	f005 ffda 	bl	dbb80 <memset>
FuelGauge fuel;
   d5bcc:	4621      	mov	r1, r4
        conf_.size = sizeof(conf_);
   d5bce:	7146      	strb	r6, [r0, #5]
   d5bd0:	4817      	ldr	r0, [pc, #92]	; (d5c30 <_GLOBAL__sub_I___appProductID+0x170>)
   d5bd2:	f002 fbe3 	bl	d839c <_ZN9FuelGaugeC1Eb>
String VCellString;
   d5bd6:	4629      	mov	r1, r5
   d5bd8:	4816      	ldr	r0, [pc, #88]	; (d5c34 <_GLOBAL__sub_I___appProductID+0x174>)
   d5bda:	f004 f995 	bl	d9f08 <_ZN6StringC1EPKc>
String SoCString;
   d5bde:	4629      	mov	r1, r5
   d5be0:	4815      	ldr	r0, [pc, #84]	; (d5c38 <_GLOBAL__sub_I___appProductID+0x178>)
   d5be2:	f004 f991 	bl	d9f08 <_ZN6StringC1EPKc>
}
   d5be6:	b00d      	add	sp, #52	; 0x34
   d5be8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5bea:	bf00      	nop
   d5bec:	2003e364 	.word	0x2003e364
   d5bf0:	2003e538 	.word	0x2003e538
   d5bf4:	000dc530 	.word	0x000dc530
   d5bf8:	000dc928 	.word	0x000dc928
   d5bfc:	000dc548 	.word	0x000dc548
   d5c00:	2003e590 	.word	0x2003e590
   d5c04:	2003e508 	.word	0x2003e508
   d5c08:	000dc560 	.word	0x000dc560
   d5c0c:	2003e320 	.word	0x2003e320
   d5c10:	000dc8f0 	.word	0x000dc8f0
   d5c14:	2003e310 	.word	0x2003e310
   d5c18:	2003e55c 	.word	0x2003e55c
   d5c1c:	2003e580 	.word	0x2003e580
   d5c20:	2003e570 	.word	0x2003e570
   d5c24:	2003e398 	.word	0x2003e398
   d5c28:	2003e56c 	.word	0x2003e56c
   d5c2c:	2003e3d4 	.word	0x2003e3d4
   d5c30:	2003e518 	.word	0x2003e518
   d5c34:	2003e354 	.word	0x2003e354
   d5c38:	2003e344 	.word	0x2003e344

000d5c3c <_ZN15Adafruit_Sensor15enableAutoRangeEb>:
  // Constructor(s)
  Adafruit_Sensor() {}
  virtual ~Adafruit_Sensor() {}

  // These must be defined by the subclass
  virtual void enableAutoRange(bool enabled) {};
   d5c3c:	4770      	bx	lr

000d5c3e <_ZN16Adafruit_ADT7410D1Ev>:

/*!
 *    @brief  Class that stores state and functions for interacting with
 *            ADT7410 Temp Sensor
 */
class Adafruit_ADT7410 : public Adafruit_Sensor {
   d5c3e:	4770      	bx	lr

000d5c40 <_ZN16Adafruit_ADT7410D0Ev>:
   d5c40:	b510      	push	{r4, lr}
   d5c42:	2110      	movs	r1, #16
   d5c44:	4604      	mov	r4, r0
   d5c46:	f004 ff37 	bl	daab8 <_ZdlPvj>
   d5c4a:	4620      	mov	r0, r4
   d5c4c:	bd10      	pop	{r4, pc}
	...

000d5c50 <_ZN16Adafruit_ADT74109getSensorEP8sensor_t>:
    @brief  Gets the sensor_t device data, Adafruit Unified Sensor format
    @param  sensor Pointer to an Adafruit Unified sensor_t object that we'll
   fill in
*/
/**************************************************************************/
void Adafruit_ADT7410::getSensor(sensor_t *sensor) {
   d5c50:	460b      	mov	r3, r1
   d5c52:	b510      	push	{r4, lr}
  /* Clear the sensor_t object */
  memset(sensor, 0, sizeof(sensor_t));
   d5c54:	2228      	movs	r2, #40	; 0x28
void Adafruit_ADT7410::getSensor(sensor_t *sensor) {
   d5c56:	4604      	mov	r4, r0
  memset(sensor, 0, sizeof(sensor_t));
   d5c58:	2100      	movs	r1, #0
   d5c5a:	4618      	mov	r0, r3
   d5c5c:	f005 ff90 	bl	dbb80 <memset>

  /* Insert the sensor name in the fixed length char array */
  strncpy(sensor->name, "ADT7410", sizeof(sensor->name) - 1);
   d5c60:	4908      	ldr	r1, [pc, #32]	; (d5c84 <_ZN16Adafruit_ADT74109getSensorEP8sensor_t+0x34>)
   d5c62:	220b      	movs	r2, #11
   d5c64:	f006 f819 	bl	dbc9a <strncpy>
  sensor->name[sizeof(sensor->name) - 1] = 0;
   d5c68:	2200      	movs	r2, #0
  sensor->version = 1;
   d5c6a:	2101      	movs	r1, #1
  sensor->name[sizeof(sensor->name) - 1] = 0;
   d5c6c:	72c2      	strb	r2, [r0, #11]
  sensor->version = 1;
   d5c6e:	60c1      	str	r1, [r0, #12]
  sensor->sensor_id = _sensorID;
   d5c70:	68a1      	ldr	r1, [r4, #8]
   d5c72:	6101      	str	r1, [r0, #16]
  sensor->type = SENSOR_TYPE_AMBIENT_TEMPERATURE;
  sensor->min_delay = 0;
   d5c74:	6242      	str	r2, [r0, #36]	; 0x24
  sensor->type = SENSOR_TYPE_AMBIENT_TEMPERATURE;
   d5c76:	210d      	movs	r1, #13
  sensor->max_value = 0;
   d5c78:	2200      	movs	r2, #0
  sensor->type = SENSOR_TYPE_AMBIENT_TEMPERATURE;
   d5c7a:	6141      	str	r1, [r0, #20]
  sensor->max_value = 0;
   d5c7c:	6182      	str	r2, [r0, #24]
  sensor->min_value = 0;
   d5c7e:	61c2      	str	r2, [r0, #28]
  sensor->resolution = 0;
   d5c80:	6202      	str	r2, [r0, #32]
}
   d5c82:	bd10      	pop	{r4, pc}
   d5c84:	000dc5d0 	.word	0x000dc5d0

000d5c88 <_ZN16Adafruit_ADT7410C1Ev>:
Adafruit_ADT7410::Adafruit_ADT7410(void) {}
   d5c88:	4a03      	ldr	r2, [pc, #12]	; (d5c98 <_ZN16Adafruit_ADT7410C1Ev+0x10>)
   d5c8a:	6002      	str	r2, [r0, #0]
   d5c8c:	f641 41f2 	movw	r1, #7410	; 0x1cf2
   d5c90:	2200      	movs	r2, #0
   d5c92:	e9c0 1202 	strd	r1, r2, [r0, #8]
   d5c96:	4770      	bx	lr
   d5c98:	000dc5e0 	.word	0x000dc5e0

000d5c9c <_ZN16Adafruit_ADT74105resetEv>:
bool Adafruit_ADT7410::reset(void) {
   d5c9c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint8_t cmd = ADT7410_REG__ADT7410_SWRST;
   d5c9e:	232f      	movs	r3, #47	; 0x2f
   d5ca0:	f88d 300f 	strb.w	r3, [sp, #15]
  if (!i2c_dev->write(&cmd, 1)) {
   d5ca4:	2300      	movs	r3, #0
   d5ca6:	e9cd 3300 	strd	r3, r3, [sp]
   d5caa:	2301      	movs	r3, #1
   d5cac:	68c0      	ldr	r0, [r0, #12]
   d5cae:	461a      	mov	r2, r3
   d5cb0:	f10d 010f 	add.w	r1, sp, #15
   d5cb4:	f000 fae2 	bl	d627c <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
   d5cb8:	4604      	mov	r4, r0
   d5cba:	b110      	cbz	r0, d5cc2 <_ZN16Adafruit_ADT74105resetEv+0x26>
  delay(10);
   d5cbc:	200a      	movs	r0, #10
   d5cbe:	f001 ffcd 	bl	d7c5c <delay>
}
   d5cc2:	4620      	mov	r0, r4
   d5cc4:	b004      	add	sp, #16
   d5cc6:	bd10      	pop	{r4, pc}

000d5cc8 <_ZN16Adafruit_ADT74105beginEhP7TwoWire>:
bool Adafruit_ADT7410::begin(uint8_t addr, TwoWire *wire) {
   d5cc8:	b5f0      	push	{r4, r5, r6, r7, lr}
   d5cca:	4604      	mov	r4, r0
  if (i2c_dev) {
   d5ccc:	68c0      	ldr	r0, [r0, #12]
bool Adafruit_ADT7410::begin(uint8_t addr, TwoWire *wire) {
   d5cce:	b089      	sub	sp, #36	; 0x24
   d5cd0:	460e      	mov	r6, r1
   d5cd2:	4617      	mov	r7, r2
  if (i2c_dev) {
   d5cd4:	b110      	cbz	r0, d5cdc <_ZN16Adafruit_ADT74105beginEhP7TwoWire+0x14>
    delete i2c_dev; // remove old interface
   d5cd6:	2110      	movs	r1, #16
   d5cd8:	f004 feee 	bl	daab8 <_ZdlPvj>
  i2c_dev = new Adafruit_I2CDevice(addr, wire);
   d5cdc:	2010      	movs	r0, #16
   d5cde:	f7fe f9da 	bl	d4096 <_Znwj>
   d5ce2:	4605      	mov	r5, r0
   d5ce4:	b118      	cbz	r0, d5cee <_ZN16Adafruit_ADT74105beginEhP7TwoWire+0x26>
   d5ce6:	463a      	mov	r2, r7
   d5ce8:	4631      	mov	r1, r6
   d5cea:	f000 fa9c 	bl	d6226 <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>
   d5cee:	60e5      	str	r5, [r4, #12]
  if (!i2c_dev->begin()) {
   d5cf0:	4628      	mov	r0, r5
   d5cf2:	2101      	movs	r1, #1
   d5cf4:	f000 fab3 	bl	d625e <_ZN18Adafruit_I2CDevice5beginEb>
   d5cf8:	4605      	mov	r5, r0
   d5cfa:	b190      	cbz	r0, d5d22 <_ZN16Adafruit_ADT74105beginEhP7TwoWire+0x5a>
      Adafruit_BusIO_Register(i2c_dev, ADT7410_REG__ADT7410_ID, 1);
   d5cfc:	2301      	movs	r3, #1
   d5cfe:	2600      	movs	r6, #0
   d5d00:	e9cd 6300 	strd	r6, r3, [sp]
   d5d04:	68e1      	ldr	r1, [r4, #12]
   d5d06:	220b      	movs	r2, #11
   d5d08:	a802      	add	r0, sp, #8
   d5d0a:	f000 f9b3 	bl	d6074 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  if ((chip_id.read() & 0xF8) != 0xC8) {
   d5d0e:	a802      	add	r0, sp, #8
   d5d10:	f000 fa4f 	bl	d61b2 <_ZN23Adafruit_BusIO_Register4readEv>
   d5d14:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
   d5d18:	28c8      	cmp	r0, #200	; 0xc8
   d5d1a:	d105      	bne.n	d5d28 <_ZN16Adafruit_ADT74105beginEhP7TwoWire+0x60>
  reset();
   d5d1c:	4620      	mov	r0, r4
   d5d1e:	f7ff ffbd 	bl	d5c9c <_ZN16Adafruit_ADT74105resetEv>
}
   d5d22:	4628      	mov	r0, r5
   d5d24:	b009      	add	sp, #36	; 0x24
   d5d26:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return false;
   d5d28:	4635      	mov	r5, r6
   d5d2a:	e7fa      	b.n	d5d22 <_ZN16Adafruit_ADT74105beginEhP7TwoWire+0x5a>

000d5d2c <_ZN16Adafruit_ADT74109readTempCEv>:
float Adafruit_ADT7410::readTempC() {
   d5d2c:	b500      	push	{lr}
      i2c_dev, ADT7410_REG__ADT7410_TEMPMSB, 2, MSBFIRST);
   d5d2e:	2301      	movs	r3, #1
float Adafruit_ADT7410::readTempC() {
   d5d30:	b089      	sub	sp, #36	; 0x24
      i2c_dev, ADT7410_REG__ADT7410_TEMPMSB, 2, MSBFIRST);
   d5d32:	e9cd 3300 	strd	r3, r3, [sp]
   d5d36:	2200      	movs	r2, #0
   d5d38:	68c1      	ldr	r1, [r0, #12]
   d5d3a:	2302      	movs	r3, #2
   d5d3c:	a802      	add	r0, sp, #8
   d5d3e:	f000 f999 	bl	d6074 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  uint16_t t = temp_reg.read();
   d5d42:	a802      	add	r0, sp, #8
   d5d44:	f000 fa35 	bl	d61b2 <_ZN23Adafruit_BusIO_Register4readEv>
  float temp = (int16_t)t;
   d5d48:	b203      	sxth	r3, r0
   d5d4a:	ee00 3a10 	vmov	s0, r3
}
   d5d4e:	eeba 0aec 	vcvt.f32.s32	s0, s0, #7
   d5d52:	b009      	add	sp, #36	; 0x24
   d5d54:	f85d fb04 	ldr.w	pc, [sp], #4

000d5d58 <_ZN16Adafruit_ADT74108getEventEP15sensors_event_t>:
    @param  event Pointer to an Adafruit Unified sensor_event_t object that
   we'll fill in
    @returns True on successful read
*/
/**************************************************************************/
bool Adafruit_ADT7410::getEvent(sensors_event_t *event) {
   d5d58:	b538      	push	{r3, r4, r5, lr}
   d5d5a:	460c      	mov	r4, r1
   d5d5c:	4605      	mov	r5, r0
  /* Clear the event */
  memset(event, 0, sizeof(sensors_event_t));
   d5d5e:	2220      	movs	r2, #32
   d5d60:	2100      	movs	r1, #0
   d5d62:	1d20      	adds	r0, r4, #4
   d5d64:	f005 ff0c 	bl	dbb80 <memset>

  event->version = sizeof(sensors_event_t);
   d5d68:	2324      	movs	r3, #36	; 0x24
   d5d6a:	6023      	str	r3, [r4, #0]
  event->sensor_id = _sensorID;
   d5d6c:	68ab      	ldr	r3, [r5, #8]
   d5d6e:	6063      	str	r3, [r4, #4]
  event->type = SENSOR_TYPE_AMBIENT_TEMPERATURE;
   d5d70:	230d      	movs	r3, #13
   d5d72:	60a3      	str	r3, [r4, #8]
  event->timestamp = 0;
   d5d74:	2300      	movs	r3, #0

  event->temperature = readTempC();
   d5d76:	4628      	mov	r0, r5
  event->timestamp = 0;
   d5d78:	6123      	str	r3, [r4, #16]
  event->temperature = readTempC();
   d5d7a:	f7ff ffd7 	bl	d5d2c <_ZN16Adafruit_ADT74109readTempCEv>

  return true;
}
   d5d7e:	2001      	movs	r0, #1
  event->temperature = readTempC();
   d5d80:	ed84 0a05 	vstr	s0, [r4, #20]
}
   d5d84:	bd38      	pop	{r3, r4, r5, pc}

000d5d86 <_ZN16Adafruit_ADXL343D1Ev>:
typedef enum { ADXL343_INT1 = 0, ADXL343_INT2 = 1 } int_pin;

/**
 * Driver for the Adafruit ADXL343 breakout.
 */
class Adafruit_ADXL343 : public Adafruit_Sensor {
   d5d86:	4770      	bx	lr

000d5d88 <_ZN16Adafruit_ADXL343D0Ev>:
   d5d88:	b510      	push	{r4, lr}
   d5d8a:	2120      	movs	r1, #32
   d5d8c:	4604      	mov	r4, r0
   d5d8e:	f004 fe93 	bl	daab8 <_ZdlPvj>
   d5d92:	4620      	mov	r0, r4
   d5d94:	bd10      	pop	{r4, pc}
	...

000d5d98 <_ZN16Adafruit_ADXL3439getSensorEP8sensor_t>:
    @brief  Gets the sensor_t data

    @param sensor Pointer to the sensor_t placeholder.
*/
/**************************************************************************/
void Adafruit_ADXL343::getSensor(sensor_t *sensor) {
   d5d98:	460b      	mov	r3, r1
   d5d9a:	b510      	push	{r4, lr}
  /* Clear the sensor_t object */
  memset(sensor, 0, sizeof(sensor_t));
   d5d9c:	2228      	movs	r2, #40	; 0x28
void Adafruit_ADXL343::getSensor(sensor_t *sensor) {
   d5d9e:	4604      	mov	r4, r0
  memset(sensor, 0, sizeof(sensor_t));
   d5da0:	2100      	movs	r1, #0
   d5da2:	4618      	mov	r0, r3
   d5da4:	f005 feec 	bl	dbb80 <memset>

  /* Insert the sensor name in the fixed length char array */
  strncpy(sensor->name, "ADXL343", sizeof(sensor->name) - 1);
   d5da8:	4909      	ldr	r1, [pc, #36]	; (d5dd0 <_ZN16Adafruit_ADXL3439getSensorEP8sensor_t+0x38>)
   d5daa:	220b      	movs	r2, #11
   d5dac:	f005 ff75 	bl	dbc9a <strncpy>
  sensor->name[sizeof(sensor->name) - 1] = 0;
   d5db0:	2200      	movs	r2, #0
  sensor->version = 1;
   d5db2:	2101      	movs	r1, #1
  sensor->name[sizeof(sensor->name) - 1] = 0;
   d5db4:	72c2      	strb	r2, [r0, #11]
  strncpy(sensor->name, "ADXL343", sizeof(sensor->name) - 1);
   d5db6:	4603      	mov	r3, r0
  sensor->version = 1;
   d5db8:	60c1      	str	r1, [r0, #12]
  sensor->sensor_id = _sensorID;
   d5dba:	6960      	ldr	r0, [r4, #20]
  sensor->type = SENSOR_TYPE_ACCELEROMETER;
  sensor->min_delay = 0;
   d5dbc:	625a      	str	r2, [r3, #36]	; 0x24
  sensor->min_value = -156.9064F; /*  -16g = 156.9064 m/s^2  */
   d5dbe:	4a05      	ldr	r2, [pc, #20]	; (d5dd4 <_ZN16Adafruit_ADXL3439getSensorEP8sensor_t+0x3c>)
   d5dc0:	61da      	str	r2, [r3, #28]
  sensor->type = SENSOR_TYPE_ACCELEROMETER;
   d5dc2:	e9c3 0104 	strd	r0, r1, [r3, #16]
  sensor->max_value = 156.9064F;  /* 16g = 156.9064 m/s^2  */
   d5dc6:	4a04      	ldr	r2, [pc, #16]	; (d5dd8 <_ZN16Adafruit_ADXL3439getSensorEP8sensor_t+0x40>)
   d5dc8:	619a      	str	r2, [r3, #24]
  sensor->resolution = 0.03923F;  /*  4mg = 0.0392266 m/s^2 */
   d5dca:	4a04      	ldr	r2, [pc, #16]	; (d5ddc <_ZN16Adafruit_ADXL3439getSensorEP8sensor_t+0x44>)
   d5dcc:	621a      	str	r2, [r3, #32]
}
   d5dce:	bd10      	pop	{r4, pc}
   d5dd0:	000dc5f4 	.word	0x000dc5f4
   d5dd4:	c31ce80a 	.word	0xc31ce80a
   d5dd8:	431ce80a 	.word	0x431ce80a
   d5ddc:	3d20afa3 	.word	0x3d20afa3

000d5de0 <_ZN16Adafruit_ADXL34313writeRegisterEhh>:
void Adafruit_ADXL343::writeRegister(uint8_t reg, uint8_t value) {
   d5de0:	b530      	push	{r4, r5, lr}
      i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC, reg, 1);
   d5de2:	2301      	movs	r3, #1
void Adafruit_ADXL343::writeRegister(uint8_t reg, uint8_t value) {
   d5de4:	b08b      	sub	sp, #44	; 0x2c
      i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC, reg, 1);
   d5de6:	2500      	movs	r5, #0
   d5de8:	e9cd 5302 	strd	r5, r3, [sp, #8]
   d5dec:	e9cd 1300 	strd	r1, r3, [sp]
void Adafruit_ADXL343::writeRegister(uint8_t reg, uint8_t value) {
   d5df0:	4614      	mov	r4, r2
      i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC, reg, 1);
   d5df2:	e9d0 2102 	ldrd	r2, r1, [r0, #8]
   d5df6:	a804      	add	r0, sp, #16
   d5df8:	f000 f94a 	bl	d6090 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  reg_obj.write(value);
   d5dfc:	462a      	mov	r2, r5
   d5dfe:	4621      	mov	r1, r4
   d5e00:	a804      	add	r0, sp, #16
   d5e02:	f000 f989 	bl	d6118 <_ZN23Adafruit_BusIO_Register5writeEmh>
}
   d5e06:	b00b      	add	sp, #44	; 0x2c
   d5e08:	bd30      	pop	{r4, r5, pc}

000d5e0a <_ZN16Adafruit_ADXL34312readRegisterEh>:
uint8_t Adafruit_ADXL343::readRegister(uint8_t reg) {
   d5e0a:	b500      	push	{lr}
      i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC, reg, 1);
   d5e0c:	2301      	movs	r3, #1
uint8_t Adafruit_ADXL343::readRegister(uint8_t reg) {
   d5e0e:	b08b      	sub	sp, #44	; 0x2c
      i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC, reg, 1);
   d5e10:	2200      	movs	r2, #0
   d5e12:	e9cd 2302 	strd	r2, r3, [sp, #8]
   d5e16:	e9cd 1300 	strd	r1, r3, [sp]
   d5e1a:	e9d0 2102 	ldrd	r2, r1, [r0, #8]
   d5e1e:	a804      	add	r0, sp, #16
   d5e20:	f000 f936 	bl	d6090 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  return ((uint8_t)reg_obj.read());
   d5e24:	a804      	add	r0, sp, #16
   d5e26:	f000 f9c4 	bl	d61b2 <_ZN23Adafruit_BusIO_Register4readEv>
}
   d5e2a:	b2c0      	uxtb	r0, r0
   d5e2c:	b00b      	add	sp, #44	; 0x2c
   d5e2e:	f85d fb04 	ldr.w	pc, [sp], #4

000d5e32 <_ZN16Adafruit_ADXL3436read16Eh>:
int16_t Adafruit_ADXL343::read16(uint8_t reg) {
   d5e32:	b500      	push	{lr}
      i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC, reg, 2);
   d5e34:	2301      	movs	r3, #1
int16_t Adafruit_ADXL343::read16(uint8_t reg) {
   d5e36:	b08b      	sub	sp, #44	; 0x2c
      i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC, reg, 2);
   d5e38:	2200      	movs	r2, #0
   d5e3a:	e9cd 2302 	strd	r2, r3, [sp, #8]
   d5e3e:	2202      	movs	r2, #2
   d5e40:	e9cd 1200 	strd	r1, r2, [sp]
   d5e44:	e9d0 2102 	ldrd	r2, r1, [r0, #8]
   d5e48:	a804      	add	r0, sp, #16
   d5e4a:	f000 f921 	bl	d6090 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  return ((uint16_t)reg_obj.read());
   d5e4e:	a804      	add	r0, sp, #16
   d5e50:	f000 f9af 	bl	d61b2 <_ZN23Adafruit_BusIO_Register4readEv>
}
   d5e54:	b200      	sxth	r0, r0
   d5e56:	b00b      	add	sp, #44	; 0x2c
   d5e58:	f85d fb04 	ldr.w	pc, [sp], #4

000d5e5c <_ZN16Adafruit_ADXL34311getDeviceIDEv>:
  return readRegister(ADXL343_REG_DEVID);
   d5e5c:	2100      	movs	r1, #0
   d5e5e:	f7ff bfd4 	b.w	d5e0a <_ZN16Adafruit_ADXL34312readRegisterEh>

000d5e62 <_ZN16Adafruit_ADXL3434getXEv>:
int16_t Adafruit_ADXL343::getX(void) { return read16(ADXL343_REG_DATAX0); }
   d5e62:	2132      	movs	r1, #50	; 0x32
   d5e64:	f7ff bfe5 	b.w	d5e32 <_ZN16Adafruit_ADXL3436read16Eh>

000d5e68 <_ZN16Adafruit_ADXL3434getYEv>:
int16_t Adafruit_ADXL343::getY(void) { return read16(ADXL343_REG_DATAY0); }
   d5e68:	2134      	movs	r1, #52	; 0x34
   d5e6a:	f7ff bfe2 	b.w	d5e32 <_ZN16Adafruit_ADXL3436read16Eh>

000d5e6e <_ZN16Adafruit_ADXL3434getZEv>:
int16_t Adafruit_ADXL343::getZ(void) { return read16(ADXL343_REG_DATAZ0); }
   d5e6e:	2136      	movs	r1, #54	; 0x36
   d5e70:	f7ff bfdf 	b.w	d5e32 <_ZN16Adafruit_ADXL3436read16Eh>
   d5e74:	0000      	movs	r0, r0
	...

000d5e78 <_ZN16Adafruit_ADXL3438getEventEP15sensors_event_t>:
bool Adafruit_ADXL343::getEvent(sensors_event_t *event) {
   d5e78:	b570      	push	{r4, r5, r6, lr}
   d5e7a:	460c      	mov	r4, r1
   d5e7c:	4605      	mov	r5, r0
  memset(event, 0, sizeof(sensors_event_t));
   d5e7e:	2220      	movs	r2, #32
   d5e80:	2100      	movs	r1, #0
   d5e82:	1d20      	adds	r0, r4, #4
   d5e84:	f005 fe7c 	bl	dbb80 <memset>
  event->version = sizeof(sensors_event_t);
   d5e88:	2324      	movs	r3, #36	; 0x24
   d5e8a:	6023      	str	r3, [r4, #0]
  event->sensor_id = _sensorID;
   d5e8c:	696b      	ldr	r3, [r5, #20]
   d5e8e:	6063      	str	r3, [r4, #4]
  event->type = SENSOR_TYPE_ACCELEROMETER;
   d5e90:	2601      	movs	r6, #1
   d5e92:	60a6      	str	r6, [r4, #8]
   d5e94:	f001 fb78 	bl	d7588 <HAL_Timer_Get_Milli_Seconds>
  event->timestamp = millis();
   d5e98:	6120      	str	r0, [r4, #16]
      getX() * ADXL343_MG2G_MULTIPLIER * SENSORS_GRAVITY_STANDARD;
   d5e9a:	4628      	mov	r0, r5
   d5e9c:	f7ff ffe1 	bl	d5e62 <_ZN16Adafruit_ADXL3434getXEv>
   d5ea0:	f005 fa4a 	bl	db338 <__aeabi_i2d>
   d5ea4:	a31a      	add	r3, pc, #104	; (adr r3, d5f10 <_ZN16Adafruit_ADXL3438getEventEP15sensors_event_t+0x98>)
   d5ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5eaa:	f005 faaf 	bl	db40c <__aeabi_dmul>
   d5eae:	a31a      	add	r3, pc, #104	; (adr r3, d5f18 <_ZN16Adafruit_ADXL3438getEventEP15sensors_event_t+0xa0>)
   d5eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5eb4:	f005 faaa 	bl	db40c <__aeabi_dmul>
   d5eb8:	f005 fd78 	bl	db9ac <__aeabi_d2f>
   d5ebc:	6160      	str	r0, [r4, #20]
      getY() * ADXL343_MG2G_MULTIPLIER * SENSORS_GRAVITY_STANDARD;
   d5ebe:	4628      	mov	r0, r5
   d5ec0:	f7ff ffd2 	bl	d5e68 <_ZN16Adafruit_ADXL3434getYEv>
   d5ec4:	f005 fa38 	bl	db338 <__aeabi_i2d>
   d5ec8:	a311      	add	r3, pc, #68	; (adr r3, d5f10 <_ZN16Adafruit_ADXL3438getEventEP15sensors_event_t+0x98>)
   d5eca:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5ece:	f005 fa9d 	bl	db40c <__aeabi_dmul>
   d5ed2:	a311      	add	r3, pc, #68	; (adr r3, d5f18 <_ZN16Adafruit_ADXL3438getEventEP15sensors_event_t+0xa0>)
   d5ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5ed8:	f005 fa98 	bl	db40c <__aeabi_dmul>
   d5edc:	f005 fd66 	bl	db9ac <__aeabi_d2f>
   d5ee0:	61a0      	str	r0, [r4, #24]
      getZ() * ADXL343_MG2G_MULTIPLIER * SENSORS_GRAVITY_STANDARD;
   d5ee2:	4628      	mov	r0, r5
   d5ee4:	f7ff ffc3 	bl	d5e6e <_ZN16Adafruit_ADXL3434getZEv>
   d5ee8:	f005 fa26 	bl	db338 <__aeabi_i2d>
   d5eec:	a308      	add	r3, pc, #32	; (adr r3, d5f10 <_ZN16Adafruit_ADXL3438getEventEP15sensors_event_t+0x98>)
   d5eee:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5ef2:	f005 fa8b 	bl	db40c <__aeabi_dmul>
   d5ef6:	a308      	add	r3, pc, #32	; (adr r3, d5f18 <_ZN16Adafruit_ADXL3438getEventEP15sensors_event_t+0xa0>)
   d5ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5efc:	f005 fa86 	bl	db40c <__aeabi_dmul>
   d5f00:	f005 fd54 	bl	db9ac <__aeabi_d2f>
   d5f04:	61e0      	str	r0, [r4, #28]
}
   d5f06:	4630      	mov	r0, r6
   d5f08:	bd70      	pop	{r4, r5, r6, pc}
   d5f0a:	bf00      	nop
   d5f0c:	f3af 8000 	nop.w
   d5f10:	d2f1a9fc 	.word	0xd2f1a9fc
   d5f14:	3f70624d 	.word	0x3f70624d
   d5f18:	40000000 	.word	0x40000000
   d5f1c:	40239d01 	.word	0x40239d01

000d5f20 <_ZN16Adafruit_ADXL343C1El>:
Adafruit_ADXL343::Adafruit_ADXL343(int32_t sensorID) {
   d5f20:	4b07      	ldr	r3, [pc, #28]	; (d5f40 <_ZN16Adafruit_ADXL343C1El+0x20>)
   d5f22:	b510      	push	{r4, lr}
   d5f24:	6003      	str	r3, [r0, #0]
   d5f26:	2300      	movs	r3, #0
   d5f28:	e9c0 3302 	strd	r3, r3, [r0, #8]
  _i2c = true;
   d5f2c:	2301      	movs	r3, #1
  _sensorID = sensorID;
   d5f2e:	6141      	str	r1, [r0, #20]
  _i2c = true;
   d5f30:	7743      	strb	r3, [r0, #29]
Adafruit_ADXL343::Adafruit_ADXL343(int32_t sensorID) {
   d5f32:	4604      	mov	r4, r0
  _wire = &Wire;
   d5f34:	f004 fd78 	bl	daa28 <_Z19__fetch_global_Wirev>
   d5f38:	6120      	str	r0, [r4, #16]
}
   d5f3a:	4620      	mov	r0, r4
   d5f3c:	bd10      	pop	{r4, pc}
   d5f3e:	bf00      	nop
   d5f40:	000dc604 	.word	0x000dc604

000d5f44 <_ZN16Adafruit_ADXL3435beginEh>:
bool Adafruit_ADXL343::begin(uint8_t i2caddr) {
   d5f44:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  if (_i2c) {
   d5f46:	7f43      	ldrb	r3, [r0, #29]
bool Adafruit_ADXL343::begin(uint8_t i2caddr) {
   d5f48:	4604      	mov	r4, r0
   d5f4a:	460e      	mov	r6, r1
  if (_i2c) {
   d5f4c:	b1db      	cbz	r3, d5f86 <_ZN16Adafruit_ADXL3435beginEh+0x42>
    if (i2c_dev) {
   d5f4e:	68c0      	ldr	r0, [r0, #12]
   d5f50:	b110      	cbz	r0, d5f58 <_ZN16Adafruit_ADXL3435beginEh+0x14>
      delete i2c_dev; // remove old interface
   d5f52:	2110      	movs	r1, #16
   d5f54:	f004 fdb0 	bl	daab8 <_ZdlPvj>
    i2c_dev = new Adafruit_I2CDevice(i2caddr, _wire);
   d5f58:	2010      	movs	r0, #16
   d5f5a:	f7fe f89c 	bl	d4096 <_Znwj>
   d5f5e:	4605      	mov	r5, r0
   d5f60:	b118      	cbz	r0, d5f6a <_ZN16Adafruit_ADXL3435beginEh+0x26>
   d5f62:	6922      	ldr	r2, [r4, #16]
   d5f64:	4631      	mov	r1, r6
   d5f66:	f000 f95e 	bl	d6226 <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>
   d5f6a:	60e5      	str	r5, [r4, #12]
    if (!i2c_dev->begin()) {
   d5f6c:	2101      	movs	r1, #1
   d5f6e:	4628      	mov	r0, r5
   d5f70:	f000 f975 	bl	d625e <_ZN18Adafruit_I2CDevice5beginEb>
   d5f74:	b120      	cbz	r0, d5f80 <_ZN16Adafruit_ADXL3435beginEh+0x3c>
  uint8_t deviceid = getDeviceID();
   d5f76:	4620      	mov	r0, r4
   d5f78:	f7ff ff70 	bl	d5e5c <_ZN16Adafruit_ADXL34311getDeviceIDEv>
  if (deviceid != 0xE5) {
   d5f7c:	28e5      	cmp	r0, #229	; 0xe5
   d5f7e:	d027      	beq.n	d5fd0 <_ZN16Adafruit_ADXL3435beginEh+0x8c>
      return false;
   d5f80:	2000      	movs	r0, #0
}
   d5f82:	b004      	add	sp, #16
   d5f84:	bd70      	pop	{r4, r5, r6, pc}
    if (spi_dev) {
   d5f86:	6885      	ldr	r5, [r0, #8]
    i2c_dev = NULL;
   d5f88:	60c3      	str	r3, [r0, #12]
    if (spi_dev) {
   d5f8a:	b135      	cbz	r5, d5f9a <_ZN16Adafruit_ADXL3435beginEh+0x56>
      delete spi_dev; // remove old interface
   d5f8c:	4628      	mov	r0, r5
   d5f8e:	f000 fa9f 	bl	d64d0 <_ZN18Adafruit_SPIDeviceD1Ev>
   d5f92:	2138      	movs	r1, #56	; 0x38
   d5f94:	4628      	mov	r0, r5
   d5f96:	f004 fd8f 	bl	daab8 <_ZdlPvj>
                                     SPI_MODE3);            // data mode
   d5f9a:	2038      	movs	r0, #56	; 0x38
   d5f9c:	f7fe f87b 	bl	d4096 <_Znwj>
   d5fa0:	4605      	mov	r5, r0
   d5fa2:	b180      	cbz	r0, d5fc6 <_ZN16Adafruit_ADXL3435beginEh+0x82>
   d5fa4:	2301      	movs	r3, #1
   d5fa6:	2203      	movs	r2, #3
   d5fa8:	e9cd 3202 	strd	r3, r2, [sp, #8]
   d5fac:	4b1c      	ldr	r3, [pc, #112]	; (d6020 <_ZN16Adafruit_ADXL3435beginEh+0xdc>)
   d5fae:	9301      	str	r3, [sp, #4]
   d5fb0:	f994 301a 	ldrsb.w	r3, [r4, #26]
   d5fb4:	9300      	str	r3, [sp, #0]
   d5fb6:	f994 2019 	ldrsb.w	r2, [r4, #25]
   d5fba:	f994 301b 	ldrsb.w	r3, [r4, #27]
   d5fbe:	f994 101c 	ldrsb.w	r1, [r4, #28]
   d5fc2:	f000 fa05 	bl	d63d0 <_ZN18Adafruit_SPIDeviceC1Eaaaam9_BitOrderh>
    spi_dev = new Adafruit_SPIDevice(_cs, _clk, _di, _do,
   d5fc6:	60a5      	str	r5, [r4, #8]
    if (!spi_dev->begin()) {
   d5fc8:	4628      	mov	r0, r5
   d5fca:	f000 fa8a 	bl	d64e2 <_ZN18Adafruit_SPIDevice5beginEv>
   d5fce:	e7d1      	b.n	d5f74 <_ZN16Adafruit_ADXL3435beginEh+0x30>
  _range = ADXL343_RANGE_2_G;
   d5fd0:	2500      	movs	r5, #0
  writeRegister(ADXL343_REG_INT_ENABLE, 0);  // Disable interrupts to start
   d5fd2:	462a      	mov	r2, r5
   d5fd4:	212e      	movs	r1, #46	; 0x2e
   d5fd6:	4620      	mov	r0, r4
  _range = ADXL343_RANGE_2_G;
   d5fd8:	7625      	strb	r5, [r4, #24]
  writeRegister(ADXL343_REG_INT_ENABLE, 0);  // Disable interrupts to start
   d5fda:	f7ff ff01 	bl	d5de0 <_ZN16Adafruit_ADXL34313writeRegisterEhh>
  writeRegister(ADXL343_REG_THRESH_TAP, 20); // 62.5 mg/LSB (so 0xFF = 16 g)
   d5fde:	2214      	movs	r2, #20
   d5fe0:	211d      	movs	r1, #29
   d5fe2:	4620      	mov	r0, r4
   d5fe4:	f7ff fefc 	bl	d5de0 <_ZN16Adafruit_ADXL34313writeRegisterEhh>
  writeRegister(ADXL343_REG_DUR, 50);        // Max tap duration, 625 µs/LSB
   d5fe8:	2232      	movs	r2, #50	; 0x32
   d5fea:	2121      	movs	r1, #33	; 0x21
   d5fec:	4620      	mov	r0, r4
   d5fee:	f7ff fef7 	bl	d5de0 <_ZN16Adafruit_ADXL34313writeRegisterEhh>
  writeRegister(ADXL343_REG_LATENT,
   d5ff2:	462a      	mov	r2, r5
   d5ff4:	2122      	movs	r1, #34	; 0x22
   d5ff6:	4620      	mov	r0, r4
   d5ff8:	f7ff fef2 	bl	d5de0 <_ZN16Adafruit_ADXL34313writeRegisterEhh>
  writeRegister(ADXL343_REG_WINDOW,
   d5ffc:	462a      	mov	r2, r5
   d5ffe:	2123      	movs	r1, #35	; 0x23
   d6000:	4620      	mov	r0, r4
   d6002:	f7ff feed 	bl	d5de0 <_ZN16Adafruit_ADXL34313writeRegisterEhh>
  writeRegister(ADXL343_REG_TAP_AXES, 0x7); // Enable the XYZ axis for tap
   d6006:	2207      	movs	r2, #7
   d6008:	212a      	movs	r1, #42	; 0x2a
   d600a:	4620      	mov	r0, r4
   d600c:	f7ff fee8 	bl	d5de0 <_ZN16Adafruit_ADXL34313writeRegisterEhh>
  writeRegister(ADXL343_REG_POWER_CTL, 0x08);
   d6010:	4620      	mov	r0, r4
   d6012:	2208      	movs	r2, #8
   d6014:	212d      	movs	r1, #45	; 0x2d
   d6016:	f7ff fee3 	bl	d5de0 <_ZN16Adafruit_ADXL34313writeRegisterEhh>
  return true;
   d601a:	2001      	movs	r0, #1
   d601c:	e7b1      	b.n	d5f82 <_ZN16Adafruit_ADXL3435beginEh+0x3e>
   d601e:	bf00      	nop
   d6020:	000f4240 	.word	0x000f4240

000d6024 <_ZN16Adafruit_ADXL3438setRangeE7range_t>:
void Adafruit_ADXL343::setRange(range_t range) {
   d6024:	b5f0      	push	{r4, r5, r6, r7, lr}
                              ADXL343_REG_DATA_FORMAT, 1);
   d6026:	2501      	movs	r5, #1
void Adafruit_ADXL343::setRange(range_t range) {
   d6028:	b08f      	sub	sp, #60	; 0x3c
                              ADXL343_REG_DATA_FORMAT, 1);
   d602a:	2700      	movs	r7, #0
   d602c:	e9cd 7502 	strd	r7, r5, [sp, #8]
   d6030:	2331      	movs	r3, #49	; 0x31
   d6032:	9300      	str	r3, [sp, #0]
   d6034:	9501      	str	r5, [sp, #4]
void Adafruit_ADXL343::setRange(range_t range) {
   d6036:	460e      	mov	r6, r1
   d6038:	4604      	mov	r4, r0
                              ADXL343_REG_DATA_FORMAT, 1);
   d603a:	e9d0 2102 	ldrd	r2, r1, [r0, #8]
   d603e:	462b      	mov	r3, r5
   d6040:	a808      	add	r0, sp, #32
   d6042:	f000 f825 	bl	d6090 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
      Adafruit_BusIO_RegisterBits(&data_format_reg, 2, 0);
   d6046:	463b      	mov	r3, r7
   d6048:	a908      	add	r1, sp, #32
   d604a:	2202      	movs	r2, #2
   d604c:	a804      	add	r0, sp, #16
   d604e:	f000 f8cc 	bl	d61ea <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
      Adafruit_BusIO_RegisterBits(&data_format_reg, 1, 3);
   d6052:	2303      	movs	r3, #3
   d6054:	462a      	mov	r2, r5
   d6056:	a908      	add	r1, sp, #32
   d6058:	a806      	add	r0, sp, #24
   d605a:	f000 f8c6 	bl	d61ea <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
  range_bits.write(range);
   d605e:	4631      	mov	r1, r6
   d6060:	a804      	add	r0, sp, #16
   d6062:	f000 f8c7 	bl	d61f4 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>
  full_range_bit.write(true);
   d6066:	4629      	mov	r1, r5
   d6068:	a806      	add	r0, sp, #24
   d606a:	f000 f8c3 	bl	d61f4 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>
  _range = range;
   d606e:	7626      	strb	r6, [r4, #24]
}
   d6070:	b00f      	add	sp, #60	; 0x3c
   d6072:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6074 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>:
 *    @param  byteorder The byte order of the register (used when width is > 1),
 * defaults to LSBFIRST
 *    @param  address_width The width of the register address itself, defaults
 * to 1 byte
 */
Adafruit_BusIO_Register::Adafruit_BusIO_Register(Adafruit_I2CDevice *i2cdevice,
   d6074:	b530      	push	{r4, r5, lr}
                                                 uint16_t reg_addr,
                                                 uint8_t width,
                                                 uint8_t byteorder,
                                                 uint8_t address_width) {
   d6076:	2500      	movs	r5, #0
  _i2cdevice = i2cdevice;
  _spidevice = NULL;
   d6078:	e9c0 1500 	strd	r1, r5, [r0]
  _addrwidth = address_width;
  _address = reg_addr;
   d607c:	8142      	strh	r2, [r0, #10]
  _addrwidth = address_width;
   d607e:	f89d 1010 	ldrb.w	r1, [sp, #16]
  _byteorder = byteorder;
   d6082:	f89d 200c 	ldrb.w	r2, [sp, #12]
                                                 uint8_t address_width) {
   d6086:	6145      	str	r5, [r0, #20]
  _addrwidth = address_width;
   d6088:	7341      	strb	r1, [r0, #13]
  _byteorder = byteorder;
   d608a:	7382      	strb	r2, [r0, #14]
  _width = width;
   d608c:	7303      	strb	r3, [r0, #12]
}
   d608e:	bd30      	pop	{r4, r5, pc}

000d6090 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>:
 *    @param  byteorder The byte order of the register (used when width is > 1),
 * defaults to LSBFIRST
 *    @param  address_width The width of the register address itself, defaults
 * to 1 byte
 */
Adafruit_BusIO_Register::Adafruit_BusIO_Register(
   d6090:	b530      	push	{r4, r5, lr}
    Adafruit_I2CDevice *i2cdevice, Adafruit_SPIDevice *spidevice,
    Adafruit_BusIO_SPIRegType type, uint16_t reg_addr, uint8_t width,
    uint8_t byteorder, uint8_t address_width) {
  _spidevice = spidevice;
  _i2cdevice = i2cdevice;
  _spiregtype = type;
   d6092:	7203      	strb	r3, [r0, #8]
  _addrwidth = address_width;
   d6094:	f89d 3018 	ldrb.w	r3, [sp, #24]
   d6098:	7343      	strb	r3, [r0, #13]
  _address = reg_addr;
   d609a:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   d609e:	8143      	strh	r3, [r0, #10]
  _byteorder = byteorder;
   d60a0:	f89d 3014 	ldrb.w	r3, [sp, #20]
   d60a4:	7383      	strb	r3, [r0, #14]
    uint8_t byteorder, uint8_t address_width) {
   d60a6:	2500      	movs	r5, #0
  _width = width;
   d60a8:	f89d 3010 	ldrb.w	r3, [sp, #16]
    uint8_t byteorder, uint8_t address_width) {
   d60ac:	6145      	str	r5, [r0, #20]
  _i2cdevice = i2cdevice;
   d60ae:	e9c0 1200 	strd	r1, r2, [r0]
  _width = width;
   d60b2:	7303      	strb	r3, [r0, #12]
}
   d60b4:	bd30      	pop	{r4, r5, pc}

000d60b6 <_ZN23Adafruit_BusIO_Register5writeEPhh>:
 *    @param  buffer Pointer to data to write
 *    @param  len Number of bytes to write
 *    @return True on successful write (only really useful for I2C as SPI is
 * uncheckable)
 */
bool Adafruit_BusIO_Register::write(uint8_t *buffer, uint8_t len) {
   d60b6:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d60b8:	4604      	mov	r4, r0

  uint8_t addrbuffer[2] = {(uint8_t)(_address & 0xFF),
                           (uint8_t)(_address >> 8)};
   d60ba:	8940      	ldrh	r0, [r0, #10]
   d60bc:	f8ad 000c 	strh.w	r0, [sp, #12]
   d60c0:	b2c3      	uxtb	r3, r0

  if (_i2cdevice) {
   d60c2:	6820      	ldr	r0, [r4, #0]
bool Adafruit_BusIO_Register::write(uint8_t *buffer, uint8_t len) {
   d60c4:	460d      	mov	r5, r1
   d60c6:	4616      	mov	r6, r2
  if (_i2cdevice) {
   d60c8:	b140      	cbz	r0, d60dc <_ZN23Adafruit_BusIO_Register5writeEPhh+0x26>
    return _i2cdevice->write(buffer, len, true, addrbuffer, _addrwidth);
   d60ca:	7b63      	ldrb	r3, [r4, #13]
   d60cc:	9301      	str	r3, [sp, #4]
   d60ce:	ab03      	add	r3, sp, #12
   d60d0:	9300      	str	r3, [sp, #0]
   d60d2:	2301      	movs	r3, #1
   d60d4:	f000 f8d2 	bl	d627c <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
      addrbuffer[0] |= 0x40;
    }
    return _spidevice->write(buffer, len, addrbuffer, _addrwidth);
  }
  return false;
}
   d60d8:	b004      	add	sp, #16
   d60da:	bd70      	pop	{r4, r5, r6, pc}
  if (_spidevice) {
   d60dc:	6860      	ldr	r0, [r4, #4]
   d60de:	2800      	cmp	r0, #0
   d60e0:	d0fa      	beq.n	d60d8 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x22>
    if (_spiregtype == ADDRBIT8_HIGH_TOREAD) {
   d60e2:	7a22      	ldrb	r2, [r4, #8]
   d60e4:	b922      	cbnz	r2, d60f0 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x3a>
      addrbuffer[0] &= ~0x80;
   d60e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
      addrbuffer[0] |= 0x40;
   d60ea:	f88d 300c 	strb.w	r3, [sp, #12]
   d60ee:	e003      	b.n	d60f8 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x42>
    if (_spiregtype == ADDRBIT8_HIGH_TOWRITE) {
   d60f0:	2a02      	cmp	r2, #2
   d60f2:	d009      	beq.n	d6108 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x52>
    if (_spiregtype == AD8_HIGH_TOREAD_AD7_HIGH_TOINC) {
   d60f4:	2a01      	cmp	r2, #1
   d60f6:	d00a      	beq.n	d610e <_ZN23Adafruit_BusIO_Register5writeEPhh+0x58>
    return _spidevice->write(buffer, len, addrbuffer, _addrwidth);
   d60f8:	7b63      	ldrb	r3, [r4, #13]
   d60fa:	9300      	str	r3, [sp, #0]
   d60fc:	4632      	mov	r2, r6
   d60fe:	ab03      	add	r3, sp, #12
   d6100:	4629      	mov	r1, r5
   d6102:	f000 fae0 	bl	d66c6 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j>
   d6106:	e7e7      	b.n	d60d8 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x22>
      addrbuffer[0] |= 0x80;
   d6108:	f063 037f 	orn	r3, r3, #127	; 0x7f
   d610c:	e7ed      	b.n	d60ea <_ZN23Adafruit_BusIO_Register5writeEPhh+0x34>
      addrbuffer[0] &= ~0x80;
   d610e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
      addrbuffer[0] |= 0x40;
   d6112:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   d6116:	e7e8      	b.n	d60ea <_ZN23Adafruit_BusIO_Register5writeEPhh+0x34>

000d6118 <_ZN23Adafruit_BusIO_Register5writeEmh>:
 *    @param  value Data to write
 *    @param  numbytes How many bytes from 'value' to write
 *    @return True on successful write (only really useful for I2C as SPI is
 * uncheckable)
 */
bool Adafruit_BusIO_Register::write(uint32_t value, uint8_t numbytes) {
   d6118:	b4f0      	push	{r4, r5, r6, r7}
   d611a:	460b      	mov	r3, r1
  if (numbytes == 0) {
   d611c:	b902      	cbnz	r2, d6120 <_ZN23Adafruit_BusIO_Register5writeEmh+0x8>
    numbytes = _width;
   d611e:	7b02      	ldrb	r2, [r0, #12]
  }
  if (numbytes > 4) {
   d6120:	2a04      	cmp	r2, #4
   d6122:	d814      	bhi.n	d614e <_ZN23Adafruit_BusIO_Register5writeEmh+0x36>
    return false;
  }

  // store a copy
  _cached = value;
   d6124:	f100 050f 	add.w	r5, r0, #15
   d6128:	6143      	str	r3, [r0, #20]

  for (int i = 0; i < numbytes; i++) {
   d612a:	1884      	adds	r4, r0, r2
   d612c:	4629      	mov	r1, r5
   d612e:	4284      	cmp	r4, r0
   d6130:	d009      	beq.n	d6146 <_ZN23Adafruit_BusIO_Register5writeEmh+0x2e>
    if (_byteorder == LSBFIRST) {
   d6132:	7b87      	ldrb	r7, [r0, #14]
   d6134:	b2de      	uxtb	r6, r3
   d6136:	b927      	cbnz	r7, d6142 <_ZN23Adafruit_BusIO_Register5writeEmh+0x2a>
      _buffer[i] = value & 0xFF;
   d6138:	702e      	strb	r6, [r5, #0]
    } else {
      _buffer[numbytes - i - 1] = value & 0xFF;
    }
    value >>= 8;
   d613a:	0a1b      	lsrs	r3, r3, #8
  for (int i = 0; i < numbytes; i++) {
   d613c:	3501      	adds	r5, #1
   d613e:	3c01      	subs	r4, #1
   d6140:	e7f5      	b.n	d612e <_ZN23Adafruit_BusIO_Register5writeEmh+0x16>
      _buffer[numbytes - i - 1] = value & 0xFF;
   d6142:	73a6      	strb	r6, [r4, #14]
   d6144:	e7f9      	b.n	d613a <_ZN23Adafruit_BusIO_Register5writeEmh+0x22>
  }
  return write(_buffer, numbytes);
   d6146:	4620      	mov	r0, r4
}
   d6148:	bcf0      	pop	{r4, r5, r6, r7}
  return write(_buffer, numbytes);
   d614a:	f7ff bfb4 	b.w	d60b6 <_ZN23Adafruit_BusIO_Register5writeEPhh>
}
   d614e:	2000      	movs	r0, #0
   d6150:	bcf0      	pop	{r4, r5, r6, r7}
   d6152:	4770      	bx	lr

000d6154 <_ZN23Adafruit_BusIO_Register4readEPhh>:
 *    @param  buffer Pointer to data to read into
 *    @param  len Number of bytes to read
 *    @return True on successful write (only really useful for I2C as SPI is
 * uncheckable)
 */
bool Adafruit_BusIO_Register::read(uint8_t *buffer, uint8_t len) {
   d6154:	b530      	push	{r4, r5, lr}
   d6156:	460b      	mov	r3, r1
   d6158:	b085      	sub	sp, #20
  uint8_t addrbuffer[2] = {(uint8_t)(_address & 0xFF),
                           (uint8_t)(_address >> 8)};
   d615a:	8941      	ldrh	r1, [r0, #10]
   d615c:	f8ad 100c 	strh.w	r1, [sp, #12]
bool Adafruit_BusIO_Register::read(uint8_t *buffer, uint8_t len) {
   d6160:	4605      	mov	r5, r0

  if (_i2cdevice) {
   d6162:	6800      	ldr	r0, [r0, #0]
                           (uint8_t)(_address >> 8)};
   d6164:	b2cc      	uxtb	r4, r1
  if (_i2cdevice) {
   d6166:	b140      	cbz	r0, d617a <_ZN23Adafruit_BusIO_Register4readEPhh+0x26>
    return _i2cdevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
   d6168:	2100      	movs	r1, #0
   d616a:	e9cd 2100 	strd	r2, r1, [sp]
   d616e:	7b6a      	ldrb	r2, [r5, #13]
   d6170:	a903      	add	r1, sp, #12
   d6172:	f000 f8d5 	bl	d6320 <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb>
      addrbuffer[0] |= 0x80 | 0x40;
    }
    return _spidevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
  }
  return false;
}
   d6176:	b005      	add	sp, #20
   d6178:	bd30      	pop	{r4, r5, pc}
  if (_spidevice) {
   d617a:	6868      	ldr	r0, [r5, #4]
   d617c:	2800      	cmp	r0, #0
   d617e:	d0fa      	beq.n	d6176 <_ZN23Adafruit_BusIO_Register4readEPhh+0x22>
    if (_spiregtype == ADDRBIT8_HIGH_TOREAD) {
   d6180:	7a29      	ldrb	r1, [r5, #8]
   d6182:	b921      	cbnz	r1, d618e <_ZN23Adafruit_BusIO_Register4readEPhh+0x3a>
      addrbuffer[0] |= 0x80;
   d6184:	f064 047f 	orn	r4, r4, #127	; 0x7f
      addrbuffer[0] |= 0x80 | 0x40;
   d6188:	f88d 400c 	strb.w	r4, [sp, #12]
   d618c:	e003      	b.n	d6196 <_ZN23Adafruit_BusIO_Register4readEPhh+0x42>
    if (_spiregtype == ADDRBIT8_HIGH_TOWRITE) {
   d618e:	2902      	cmp	r1, #2
   d6190:	d009      	beq.n	d61a6 <_ZN23Adafruit_BusIO_Register4readEPhh+0x52>
    if (_spiregtype == AD8_HIGH_TOREAD_AD7_HIGH_TOINC) {
   d6192:	2901      	cmp	r1, #1
   d6194:	d00a      	beq.n	d61ac <_ZN23Adafruit_BusIO_Register4readEPhh+0x58>
    return _spidevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
   d6196:	21ff      	movs	r1, #255	; 0xff
   d6198:	e9cd 2100 	strd	r2, r1, [sp]
   d619c:	7b6a      	ldrb	r2, [r5, #13]
   d619e:	a903      	add	r1, sp, #12
   d61a0:	f000 fac3 	bl	d672a <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh>
   d61a4:	e7e7      	b.n	d6176 <_ZN23Adafruit_BusIO_Register4readEPhh+0x22>
      addrbuffer[0] &= ~0x80;
   d61a6:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   d61aa:	e7ed      	b.n	d6188 <_ZN23Adafruit_BusIO_Register4readEPhh+0x34>
      addrbuffer[0] |= 0x80 | 0x40;
   d61ac:	f064 043f 	orn	r4, r4, #63	; 0x3f
   d61b0:	e7ea      	b.n	d6188 <_ZN23Adafruit_BusIO_Register4readEPhh+0x34>

000d61b2 <_ZN23Adafruit_BusIO_Register4readEv>:
uint32_t Adafruit_BusIO_Register::read(void) {
   d61b2:	b538      	push	{r3, r4, r5, lr}
  if (!read(_buffer, _width)) {
   d61b4:	f100 050f 	add.w	r5, r0, #15
   d61b8:	7b02      	ldrb	r2, [r0, #12]
   d61ba:	4629      	mov	r1, r5
uint32_t Adafruit_BusIO_Register::read(void) {
   d61bc:	4604      	mov	r4, r0
  if (!read(_buffer, _width)) {
   d61be:	f7ff ffc9 	bl	d6154 <_ZN23Adafruit_BusIO_Register4readEPhh>
   d61c2:	b178      	cbz	r0, d61e4 <_ZN23Adafruit_BusIO_Register4readEv+0x32>
   d61c4:	7b22      	ldrb	r2, [r4, #12]
   d61c6:	4629      	mov	r1, r5
   d61c8:	4422      	add	r2, r4
  uint32_t value = 0;
   d61ca:	2000      	movs	r0, #0
  for (int i = 0; i < _width; i++) {
   d61cc:	42a2      	cmp	r2, r4
   d61ce:	d00b      	beq.n	d61e8 <_ZN23Adafruit_BusIO_Register4readEv+0x36>
    value <<= 8;
   d61d0:	0203      	lsls	r3, r0, #8
    if (_byteorder == LSBFIRST) {
   d61d2:	7ba0      	ldrb	r0, [r4, #14]
   d61d4:	b920      	cbnz	r0, d61e0 <_ZN23Adafruit_BusIO_Register4readEv+0x2e>
      value |= _buffer[_width - i - 1];
   d61d6:	7b90      	ldrb	r0, [r2, #14]
      value |= _buffer[i];
   d61d8:	4318      	orrs	r0, r3
  for (int i = 0; i < _width; i++) {
   d61da:	3a01      	subs	r2, #1
   d61dc:	3101      	adds	r1, #1
   d61de:	e7f5      	b.n	d61cc <_ZN23Adafruit_BusIO_Register4readEv+0x1a>
      value |= _buffer[i];
   d61e0:	7808      	ldrb	r0, [r1, #0]
   d61e2:	e7f9      	b.n	d61d8 <_ZN23Adafruit_BusIO_Register4readEv+0x26>
    return -1;
   d61e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   d61e8:	bd38      	pop	{r3, r4, r5, pc}

000d61ea <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>:
 * touching other bits
 *    @param  reg The Adafruit_BusIO_Register which defines the bus/register
 *    @param  bits The number of bits wide we are slicing
 *    @param  shift The number of bits that our bit-slice is shifted from LSB
 */
Adafruit_BusIO_RegisterBits::Adafruit_BusIO_RegisterBits(
   d61ea:	b510      	push	{r4, lr}
    Adafruit_BusIO_Register *reg, uint8_t bits, uint8_t shift) {
  _register = reg;
   d61ec:	6001      	str	r1, [r0, #0]
  _bits = bits;
   d61ee:	7102      	strb	r2, [r0, #4]
  _shift = shift;
   d61f0:	7143      	strb	r3, [r0, #5]
}
   d61f2:	bd10      	pop	{r4, pc}

000d61f4 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>:
 *    @brief  Write 4 bytes of data to the register
 *    @param  data The 4 bytes to write
 *    @return True on successful write (only really useful for I2C as SPI is
 * uncheckable)
 */
bool Adafruit_BusIO_RegisterBits::write(uint32_t data) {
   d61f4:	b570      	push	{r4, r5, r6, lr}
   d61f6:	4604      	mov	r4, r0
  uint32_t val = _register->read();
   d61f8:	6800      	ldr	r0, [r0, #0]
bool Adafruit_BusIO_RegisterBits::write(uint32_t data) {
   d61fa:	460e      	mov	r6, r1
  uint32_t val = _register->read();
   d61fc:	f7ff ffd9 	bl	d61b2 <_ZN23Adafruit_BusIO_Register4readEv>

  // mask off the data before writing
  uint32_t mask = (1 << (_bits)) - 1;
   d6200:	7923      	ldrb	r3, [r4, #4]
   d6202:	2201      	movs	r2, #1
   d6204:	409a      	lsls	r2, r3
   d6206:	1e53      	subs	r3, r2, #1
  data &= mask;

  mask <<= _shift;
   d6208:	7962      	ldrb	r2, [r4, #5]
   d620a:	fa03 f502 	lsl.w	r5, r3, r2
  val &= ~mask;          // remove the current data at that spot
   d620e:	ea20 0505 	bic.w	r5, r0, r5
  data &= mask;
   d6212:	ea03 0106 	and.w	r1, r3, r6
  val |= data << _shift; // and add in the new data

  return _register->write(val, _register->width());
   d6216:	6820      	ldr	r0, [r4, #0]
  val |= data << _shift; // and add in the new data
   d6218:	4091      	lsls	r1, r2
  return _register->write(val, _register->width());
   d621a:	4329      	orrs	r1, r5
   d621c:	7b02      	ldrb	r2, [r0, #12]
}
   d621e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return _register->write(val, _register->width());
   d6222:	f7ff bf79 	b.w	d6118 <_ZN23Adafruit_BusIO_Register5writeEmh>

000d6226 <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>:
 *    @param  addr The 7-bit I2C address for the device
 *    @param  theWire The I2C bus to use, defaults to &Wire
 */
Adafruit_I2CDevice::Adafruit_I2CDevice(uint8_t addr, TwoWire *theWire) {
  _addr = addr;
  _wire = theWire;
   d6226:	6042      	str	r2, [r0, #4]
  _begun = false;
   d6228:	2200      	movs	r2, #0
   d622a:	7202      	strb	r2, [r0, #8]
#ifdef ARDUINO_ARCH_SAMD
  _maxBufferSize = 250; // as defined in Wire.h's RingBuffer
#else
  _maxBufferSize = 32;
   d622c:	2220      	movs	r2, #32
  _addr = addr;
   d622e:	7001      	strb	r1, [r0, #0]
  _maxBufferSize = 32;
   d6230:	60c2      	str	r2, [r0, #12]
#endif
}
   d6232:	4770      	bx	lr

000d6234 <_ZN18Adafruit_I2CDevice8detectedEv>:
/*!
 *    @brief  Scans I2C for the address - note will give a false-positive
 *    if there's no pullups on I2C
 *    @return True if I2C initialized and a device with the addr found
 */
bool Adafruit_I2CDevice::detected(void) {
   d6234:	b510      	push	{r4, lr}
  // Init I2C if not done yet
  if (!_begun && !begin()) {
   d6236:	7a03      	ldrb	r3, [r0, #8]
bool Adafruit_I2CDevice::detected(void) {
   d6238:	4604      	mov	r4, r0
  if (!_begun && !begin()) {
   d623a:	b153      	cbz	r3, d6252 <_ZN18Adafruit_I2CDevice8detectedEv+0x1e>
    return false;
  }

  // A basic scanner, see if it ACK's
  _wire->beginTransmission(_addr);
   d623c:	7821      	ldrb	r1, [r4, #0]
   d623e:	6860      	ldr	r0, [r4, #4]
   d6240:	f002 f986 	bl	d8550 <_ZN7TwoWire17beginTransmissionEh>
  if (_wire->endTransmission() == 0) {
   d6244:	6860      	ldr	r0, [r4, #4]
   d6246:	f002 f9a6 	bl	d8596 <_ZN7TwoWire15endTransmissionEv>
   d624a:	fab0 f080 	clz	r0, r0
   d624e:	0940      	lsrs	r0, r0, #5
    return true;
  }
  return false;
}
   d6250:	bd10      	pop	{r4, pc}
  if (!_begun && !begin()) {
   d6252:	2101      	movs	r1, #1
   d6254:	f000 f803 	bl	d625e <_ZN18Adafruit_I2CDevice5beginEb>
   d6258:	2800      	cmp	r0, #0
   d625a:	d1ef      	bne.n	d623c <_ZN18Adafruit_I2CDevice8detectedEv+0x8>
   d625c:	e7f8      	b.n	d6250 <_ZN18Adafruit_I2CDevice8detectedEv+0x1c>

000d625e <_ZN18Adafruit_I2CDevice5beginEb>:
bool Adafruit_I2CDevice::begin(bool addr_detect) {
   d625e:	b538      	push	{r3, r4, r5, lr}
   d6260:	4604      	mov	r4, r0
  _wire->begin();
   d6262:	6840      	ldr	r0, [r0, #4]
bool Adafruit_I2CDevice::begin(bool addr_detect) {
   d6264:	460d      	mov	r5, r1
  _wire->begin();
   d6266:	f002 f941 	bl	d84ec <_ZN7TwoWire5beginEv>
  _begun = true;
   d626a:	2001      	movs	r0, #1
   d626c:	7220      	strb	r0, [r4, #8]
  if (addr_detect) {
   d626e:	b125      	cbz	r5, d627a <_ZN18Adafruit_I2CDevice5beginEb+0x1c>
    return detected();
   d6270:	4620      	mov	r0, r4
}
   d6272:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return detected();
   d6276:	f7ff bfdd 	b.w	d6234 <_ZN18Adafruit_I2CDevice8detectedEv>
}
   d627a:	bd38      	pop	{r3, r4, r5, pc}

000d627c <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>:
 *    @param  stop Whether to send an I2C STOP signal on write
 *    @return True if write was successful, otherwise false.
 */
bool Adafruit_I2CDevice::write(const uint8_t *buffer, size_t len, bool stop,
                               const uint8_t *prefix_buffer,
                               size_t prefix_len) {
   d627c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d6280:	e9dd 9608 	ldrd	r9, r6, [sp, #32]
   d6284:	461f      	mov	r7, r3
  if ((len + prefix_len) > maxBufferSize()) {
   d6286:	68c3      	ldr	r3, [r0, #12]
                               size_t prefix_len) {
   d6288:	4615      	mov	r5, r2
  if ((len + prefix_len) > maxBufferSize()) {
   d628a:	4432      	add	r2, r6
   d628c:	429a      	cmp	r2, r3
                               size_t prefix_len) {
   d628e:	4604      	mov	r4, r0
   d6290:	4688      	mov	r8, r1
  if ((len + prefix_len) > maxBufferSize()) {
   d6292:	d902      	bls.n	d629a <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x1e>
    // we will need to find out if some platforms have larger
    // I2C buffer sizes :/
#ifdef DEBUG_SERIAL
    DEBUG_SERIAL.println(F("\tI2CDevice could not write such a large buffer"));
#endif
    return false;
   d6294:	2000      	movs	r0, #0
#ifdef DEBUG_SERIAL
    DEBUG_SERIAL.println("Failed to send!");
#endif
    return false;
  }
}
   d6296:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  _wire->beginTransmission(_addr);
   d629a:	7801      	ldrb	r1, [r0, #0]
   d629c:	6840      	ldr	r0, [r0, #4]
   d629e:	f002 f957 	bl	d8550 <_ZN7TwoWire17beginTransmissionEh>
  if ((prefix_len != 0) && (prefix_buffer != NULL)) {
   d62a2:	b97e      	cbnz	r6, d62c4 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x48>
  if (_wire->write(buffer, len) != len) {
   d62a4:	6860      	ldr	r0, [r4, #4]
   d62a6:	6803      	ldr	r3, [r0, #0]
   d62a8:	462a      	mov	r2, r5
   d62aa:	68db      	ldr	r3, [r3, #12]
   d62ac:	4641      	mov	r1, r8
   d62ae:	4798      	blx	r3
   d62b0:	4285      	cmp	r5, r0
   d62b2:	d1ef      	bne.n	d6294 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x18>
  if (_wire->endTransmission(stop) == 0) {
   d62b4:	6860      	ldr	r0, [r4, #4]
   d62b6:	4639      	mov	r1, r7
   d62b8:	f002 f969 	bl	d858e <_ZN7TwoWire15endTransmissionEh>
   d62bc:	fab0 f080 	clz	r0, r0
   d62c0:	0940      	lsrs	r0, r0, #5
   d62c2:	e7e8      	b.n	d6296 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x1a>
  if ((prefix_len != 0) && (prefix_buffer != NULL)) {
   d62c4:	f1b9 0f00 	cmp.w	r9, #0
   d62c8:	d0ec      	beq.n	d62a4 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x28>
   d62ca:	6860      	ldr	r0, [r4, #4]
    if (_wire->write(prefix_buffer, prefix_len) != prefix_len) {
   d62cc:	6803      	ldr	r3, [r0, #0]
   d62ce:	4632      	mov	r2, r6
   d62d0:	68db      	ldr	r3, [r3, #12]
   d62d2:	4649      	mov	r1, r9
   d62d4:	4798      	blx	r3
   d62d6:	42b0      	cmp	r0, r6
   d62d8:	d1dc      	bne.n	d6294 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x18>
   d62da:	e7e3      	b.n	d62a4 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x28>

000d62dc <_ZN18Adafruit_I2CDevice4readEPhjb>:
 *    @param  buffer Pointer to buffer of data to read into
 *    @param  len Number of bytes from buffer to read.
 *    @param  stop Whether to send an I2C STOP signal on read
 *    @return True if read was successful, otherwise false.
 */
bool Adafruit_I2CDevice::read(uint8_t *buffer, size_t len, bool stop) {
   d62dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d62e0:	4615      	mov	r5, r2
  if (len > maxBufferSize()) {
   d62e2:	68c2      	ldr	r2, [r0, #12]
   d62e4:	4295      	cmp	r5, r2
bool Adafruit_I2CDevice::read(uint8_t *buffer, size_t len, bool stop) {
   d62e6:	4604      	mov	r4, r0
   d62e8:	460e      	mov	r6, r1
  if (len > maxBufferSize()) {
   d62ea:	d814      	bhi.n	d6316 <_ZN18Adafruit_I2CDevice4readEPhjb+0x3a>
    DEBUG_SERIAL.println(F("\tI2CDevice could not read such a large buffer"));
#endif
    return false;
  }

  size_t recv = _wire->requestFrom((uint8_t)_addr, (uint8_t)len, (uint8_t)stop);
   d62ec:	7801      	ldrb	r1, [r0, #0]
   d62ee:	6840      	ldr	r0, [r0, #4]
   d62f0:	b2ea      	uxtb	r2, r5
   d62f2:	f002 f918 	bl	d8526 <_ZN7TwoWire11requestFromEhjh>
  if (recv != len) {
   d62f6:	4285      	cmp	r5, r0
   d62f8:	d10d      	bne.n	d6316 <_ZN18Adafruit_I2CDevice4readEPhjb+0x3a>
   d62fa:	2700      	movs	r7, #0
    DEBUG_SERIAL.println(recv);
#endif
    return false;
  }

  for (uint16_t i = 0; i < len; i++) {
   d62fc:	fa1f f887 	uxth.w	r8, r7
   d6300:	4545      	cmp	r5, r8
   d6302:	f107 0701 	add.w	r7, r7, #1
   d6306:	d909      	bls.n	d631c <_ZN18Adafruit_I2CDevice4readEPhjb+0x40>
    buffer[i] = _wire->read();
   d6308:	6860      	ldr	r0, [r4, #4]
   d630a:	6803      	ldr	r3, [r0, #0]
   d630c:	695b      	ldr	r3, [r3, #20]
   d630e:	4798      	blx	r3
   d6310:	f806 0008 	strb.w	r0, [r6, r8]
  for (uint16_t i = 0; i < len; i++) {
   d6314:	e7f2      	b.n	d62fc <_ZN18Adafruit_I2CDevice4readEPhjb+0x20>
    return false;
   d6316:	2000      	movs	r0, #0
  }
  DEBUG_SERIAL.println();
#endif

  return true;
}
   d6318:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d631c:	2001      	movs	r0, #1
   d631e:	e7fb      	b.n	d6318 <_ZN18Adafruit_I2CDevice4readEPhjb+0x3c>

000d6320 <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb>:
 *    @param  stop Whether to send an I2C STOP signal between the write and read
 *    @return True if write & read was successful, otherwise false.
 */
bool Adafruit_I2CDevice::write_then_read(const uint8_t *write_buffer,
                                         size_t write_len, uint8_t *read_buffer,
                                         size_t read_len, bool stop) {
   d6320:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d6322:	461d      	mov	r5, r3
  if (!write(write_buffer, write_len, stop)) {
   d6324:	2300      	movs	r3, #0
   d6326:	e9cd 3300 	strd	r3, r3, [sp]
   d632a:	f89d 301c 	ldrb.w	r3, [sp, #28]
                                         size_t read_len, bool stop) {
   d632e:	9e06      	ldr	r6, [sp, #24]
   d6330:	4604      	mov	r4, r0
  if (!write(write_buffer, write_len, stop)) {
   d6332:	f7ff ffa3 	bl	d627c <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
   d6336:	b140      	cbz	r0, d634a <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb+0x2a>
    return false;
  }

  return read(read_buffer, read_len);
   d6338:	2301      	movs	r3, #1
   d633a:	4632      	mov	r2, r6
   d633c:	4629      	mov	r1, r5
   d633e:	4620      	mov	r0, r4
}
   d6340:	b002      	add	sp, #8
   d6342:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return read(read_buffer, read_len);
   d6346:	f7ff bfc9 	b.w	d62dc <_ZN18Adafruit_I2CDevice4readEPhjb>
}
   d634a:	b002      	add	sp, #8
   d634c:	bd70      	pop	{r4, r5, r6, pc}

000d634e <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   d634e:	4770      	bx	lr

000d6350 <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   d6350:	b510      	push	{r4, lr}
  }
   d6352:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   d6354:	4604      	mov	r4, r0
  }
   d6356:	f004 fbaf 	bl	daab8 <_ZdlPvj>
   d635a:	4620      	mov	r0, r4
   d635c:	bd10      	pop	{r4, pc}

000d635e <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d635e:	b40e      	push	{r1, r2, r3}
   d6360:	b503      	push	{r0, r1, lr}
   d6362:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   d6364:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d6366:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   d636a:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   d636c:	f003 fc8e 	bl	d9c8c <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   d6370:	b002      	add	sp, #8
   d6372:	f85d eb04 	ldr.w	lr, [sp], #4
   d6376:	b003      	add	sp, #12
   d6378:	4770      	bx	lr
	...

000d637c <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   d637c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d637e:	4604      	mov	r4, r0
   d6380:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   d6382:	7922      	ldrb	r2, [r4, #4]
   d6384:	68a3      	ldr	r3, [r4, #8]
   d6386:	b132      	cbz	r2, d6396 <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   d6388:	b9a3      	cbnz	r3, d63b4 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   d638a:	490b      	ldr	r1, [pc, #44]	; (d63b8 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   d638c:	b002      	add	sp, #8
   d638e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   d6392:	f003 bc4a 	b.w	d9c2a <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   d6396:	4a09      	ldr	r2, [pc, #36]	; (d63bc <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   d6398:	7b26      	ldrb	r6, [r4, #12]
   d639a:	4d09      	ldr	r5, [pc, #36]	; (d63c0 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   d639c:	4909      	ldr	r1, [pc, #36]	; (d63c4 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   d639e:	7b64      	ldrb	r4, [r4, #13]
   d63a0:	2e01      	cmp	r6, #1
   d63a2:	bf18      	it	ne
   d63a4:	4629      	movne	r1, r5
   d63a6:	e9cd 1400 	strd	r1, r4, [sp]
   d63aa:	4907      	ldr	r1, [pc, #28]	; (d63c8 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   d63ac:	f7ff ffd7 	bl	d635e <_ZN5Print6printfEPKcz>
  }
   d63b0:	b002      	add	sp, #8
   d63b2:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   d63b4:	4a05      	ldr	r2, [pc, #20]	; (d63cc <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   d63b6:	e7ef      	b.n	d6398 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   d63b8:	000dc629 	.word	0x000dc629
   d63bc:	000dc8f0 	.word	0x000dc8f0
   d63c0:	000dc625 	.word	0x000dc625
   d63c4:	000dc621 	.word	0x000dc621
   d63c8:	000dc63f 	.word	0x000dc63f
   d63cc:	000dc618 	.word	0x000dc618

000d63d0 <_ZN18Adafruit_SPIDeviceC1Eaaaam9_BitOrderh>:
 *    @param  freq The SPI clock frequency to use, defaults to 1MHz
 *    @param  dataOrder The SPI data order to use for bits within each byte,
 * defaults to SPI_BITORDER_MSBFIRST
 *    @param  dataMode The SPI mode to use, defaults to SPI_MODE0
 */
Adafruit_SPIDevice::Adafruit_SPIDevice(int8_t cspin, int8_t sckpin,
   d63d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d63d4:	f99d 9028 	ldrsb.w	r9, [sp, #40]	; 0x28
                                       int8_t misopin, int8_t mosipin,
                                       uint32_t freq, BitOrder dataOrder,
                                       uint8_t dataMode) {
  _cs = cspin;
   d63d8:	7381      	strb	r1, [r0, #14]
  _sck = sckpin;
   d63da:	73c2      	strb	r2, [r0, #15]
  _miso = misopin;
   d63dc:	7443      	strb	r3, [r0, #17]
  _mosi = mosipin;
   d63de:	f880 9010 	strb.w	r9, [r0, #16]
Adafruit_SPIDevice::Adafruit_SPIDevice(int8_t cspin, int8_t sckpin,
   d63e2:	4604      	mov	r4, r0
   d63e4:	468a      	mov	sl, r1
   d63e6:	4616      	mov	r6, r2
   d63e8:	461d      	mov	r5, r3
   d63ea:	f89d 8030 	ldrb.w	r8, [sp, #48]	; 0x30
   d63ee:	f89d 7034 	ldrb.w	r7, [sp, #52]	; 0x34

#ifdef BUSIO_USE_FAST_PINIO
  csPort = (BusIO_PortReg *)portOutputRegister(digitalPinToPort(cspin));
   d63f2:	f8df b0d4 	ldr.w	fp, [pc, #212]	; d64c8 <_ZN18Adafruit_SPIDeviceC1Eaaaam9_BitOrderh+0xf8>
   d63f6:	f001 f8e7 	bl	d75c8 <HAL_Pin_Map>
   d63fa:	ea4f 1a0a 	mov.w	sl, sl, lsl #4
   d63fe:	f810 200a 	ldrb.w	r2, [r0, sl]
   d6402:	2a00      	cmp	r2, #0
   d6404:	bf14      	ite	ne
   d6406:	465a      	movne	r2, fp
   d6408:	f04f 42a0 	moveq.w	r2, #1342177280	; 0x50000000
   d640c:	f202 5204 	addw	r2, r2, #1284	; 0x504
   d6410:	6222      	str	r2, [r4, #32]
  csPinMask = digitalPinToBitMask(cspin);
   d6412:	f001 f8d9 	bl	d75c8 <HAL_Pin_Map>
   d6416:	4482      	add	sl, r0
  if (mosipin != -1) {
   d6418:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
  csPinMask = digitalPinToBitMask(cspin);
   d641c:	f89a 2001 	ldrb.w	r2, [sl, #1]
   d6420:	6322      	str	r2, [r4, #48]	; 0x30
  if (mosipin != -1) {
   d6422:	d012      	beq.n	d644a <_ZN18Adafruit_SPIDeviceC1Eaaaam9_BitOrderh+0x7a>
    mosiPort = (BusIO_PortReg *)portOutputRegister(digitalPinToPort(mosipin));
   d6424:	f001 f8d0 	bl	d75c8 <HAL_Pin_Map>
   d6428:	ea4f 1a09 	mov.w	sl, r9, lsl #4
   d642c:	f810 300a 	ldrb.w	r3, [r0, sl]
   d6430:	2b00      	cmp	r3, #0
   d6432:	bf14      	ite	ne
   d6434:	465b      	movne	r3, fp
   d6436:	f04f 43a0 	moveq.w	r3, #1342177280	; 0x50000000
   d643a:	f203 5304 	addw	r3, r3, #1284	; 0x504
   d643e:	6163      	str	r3, [r4, #20]
    mosiPinMask = digitalPinToBitMask(mosipin);
   d6440:	f001 f8c2 	bl	d75c8 <HAL_Pin_Map>
   d6444:	4450      	add	r0, sl
   d6446:	7843      	ldrb	r3, [r0, #1]
   d6448:	6263      	str	r3, [r4, #36]	; 0x24
  }
  if (misopin != -1) {
   d644a:	1c6b      	adds	r3, r5, #1
   d644c:	d010      	beq.n	d6470 <_ZN18Adafruit_SPIDeviceC1Eaaaam9_BitOrderh+0xa0>
    misoPort = (BusIO_PortReg *)portInputRegister(digitalPinToPort(misopin));
   d644e:	f001 f8bb 	bl	d75c8 <HAL_Pin_Map>
   d6452:	012d      	lsls	r5, r5, #4
   d6454:	4a1c      	ldr	r2, [pc, #112]	; (d64c8 <_ZN18Adafruit_SPIDeviceC1Eaaaam9_BitOrderh+0xf8>)
   d6456:	5d43      	ldrb	r3, [r0, r5]
   d6458:	2b00      	cmp	r3, #0
   d645a:	bf08      	it	eq
   d645c:	f04f 42a0 	moveq.w	r2, #1342177280	; 0x50000000
   d6460:	f502 62a2 	add.w	r2, r2, #1296	; 0x510
   d6464:	61e2      	str	r2, [r4, #28]
    misoPinMask = digitalPinToBitMask(misopin);
   d6466:	f001 f8af 	bl	d75c8 <HAL_Pin_Map>
   d646a:	4428      	add	r0, r5
   d646c:	7843      	ldrb	r3, [r0, #1]
   d646e:	62a3      	str	r3, [r4, #40]	; 0x28
  }
  clkPort = (BusIO_PortReg *)portOutputRegister(digitalPinToPort(sckpin));
   d6470:	f001 f8aa 	bl	d75c8 <HAL_Pin_Map>
   d6474:	0136      	lsls	r6, r6, #4
#endif

  _freq = freq;
  _dataOrder = dataOrder;
  _dataMode = dataMode;
  _begun = false;
   d6476:	2500      	movs	r5, #0
  clkPort = (BusIO_PortReg *)portOutputRegister(digitalPinToPort(sckpin));
   d6478:	5d83      	ldrb	r3, [r0, r6]
   d647a:	2b00      	cmp	r3, #0
   d647c:	4b12      	ldr	r3, [pc, #72]	; (d64c8 <_ZN18Adafruit_SPIDeviceC1Eaaaam9_BitOrderh+0xf8>)
   d647e:	bf08      	it	eq
   d6480:	f04f 43a0 	moveq.w	r3, #1342177280	; 0x50000000
   d6484:	f203 5304 	addw	r3, r3, #1284	; 0x504
   d6488:	61a3      	str	r3, [r4, #24]
  clkPinMask = digitalPinToBitMask(sckpin);
   d648a:	f001 f89d 	bl	d75c8 <HAL_Pin_Map>
   d648e:	4406      	add	r6, r0
  _spiSetting = new SPISettings(freq, dataOrder, dataMode);
   d6490:	2010      	movs	r0, #16
  clkPinMask = digitalPinToBitMask(sckpin);
   d6492:	7873      	ldrb	r3, [r6, #1]
   d6494:	62e3      	str	r3, [r4, #44]	; 0x2c
  _freq = freq;
   d6496:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   d6498:	60a3      	str	r3, [r4, #8]
  _dataOrder = dataOrder;
   d649a:	f884 800c 	strb.w	r8, [r4, #12]
  _dataMode = dataMode;
   d649e:	7367      	strb	r7, [r4, #13]
  _begun = false;
   d64a0:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
  _spiSetting = new SPISettings(freq, dataOrder, dataMode);
   d64a4:	f7fd fdf7 	bl	d4096 <_Znwj>
   d64a8:	b138      	cbz	r0, d64ba <_ZN18Adafruit_SPIDeviceC1Eaaaam9_BitOrderh+0xea>
      dataMode_{dataMode}
   d64aa:	4b08      	ldr	r3, [pc, #32]	; (d64cc <_ZN18Adafruit_SPIDeviceC1Eaaaam9_BitOrderh+0xfc>)
   d64ac:	6003      	str	r3, [r0, #0]
   d64ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   d64b0:	7105      	strb	r5, [r0, #4]
   d64b2:	6083      	str	r3, [r0, #8]
   d64b4:	f880 800c 	strb.w	r8, [r0, #12]
   d64b8:	7347      	strb	r7, [r0, #13]
  _spi = NULL;
   d64ba:	2300      	movs	r3, #0
  _spiSetting = new SPISettings(freq, dataOrder, dataMode);
   d64bc:	6060      	str	r0, [r4, #4]
  _spi = NULL;
   d64be:	6023      	str	r3, [r4, #0]
}
   d64c0:	4620      	mov	r0, r4
   d64c2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d64c6:	bf00      	nop
   d64c8:	50000300 	.word	0x50000300
   d64cc:	000dc664 	.word	0x000dc664

000d64d0 <_ZN18Adafruit_SPIDeviceD1Ev>:

/*!
 *    @brief  Release memory allocated in constructors
 */
Adafruit_SPIDevice::~Adafruit_SPIDevice() {
   d64d0:	b510      	push	{r4, lr}
   d64d2:	4604      	mov	r4, r0
  if (_spiSetting) {
   d64d4:	6840      	ldr	r0, [r0, #4]
   d64d6:	b110      	cbz	r0, d64de <_ZN18Adafruit_SPIDeviceD1Ev+0xe>
    delete _spiSetting;
   d64d8:	6803      	ldr	r3, [r0, #0]
   d64da:	689b      	ldr	r3, [r3, #8]
   d64dc:	4798      	blx	r3
    _spiSetting = nullptr;
  }
}
   d64de:	4620      	mov	r0, r4
   d64e0:	bd10      	pop	{r4, pc}

000d64e2 <_ZN18Adafruit_SPIDevice5beginEv>:
/*!
 *    @brief  Initializes SPI bus and sets CS pin high
 *    @return Always returns true because there's no way to test success of SPI
 * init
 */
bool Adafruit_SPIDevice::begin(void) {
   d64e2:	b538      	push	{r3, r4, r5, lr}
   d64e4:	4604      	mov	r4, r0
  pinMode(_cs, OUTPUT);
   d64e6:	f990 000e 	ldrsb.w	r0, [r0, #14]
   d64ea:	2101      	movs	r1, #1
   d64ec:	b280      	uxth	r0, r0
   d64ee:	f004 fa27 	bl	da940 <pinMode>
  digitalWrite(_cs, HIGH);
   d64f2:	f994 000e 	ldrsb.w	r0, [r4, #14]
   d64f6:	2101      	movs	r1, #1
   d64f8:	b280      	uxth	r0, r0
   d64fa:	f004 fa32 	bl	da962 <digitalWrite>

  if (_spi) { // hardware SPI
   d64fe:	6825      	ldr	r5, [r4, #0]
   d6500:	b135      	cbz	r5, d6510 <_ZN18Adafruit_SPIDevice5beginEv+0x2e>
    _spi->begin();
   d6502:	4628      	mov	r0, r5
   d6504:	f003 fc0a 	bl	d9d1c <_ZN8SPIClass5beginEv>
    if (_miso != -1) {
      pinMode(_miso, INPUT);
    }
  }

  _begun = true;
   d6508:	2001      	movs	r0, #1
   d650a:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  return true;
}
   d650e:	bd38      	pop	{r3, r4, r5, pc}
    pinMode(_sck, OUTPUT);
   d6510:	f994 000f 	ldrsb.w	r0, [r4, #15]
   d6514:	2101      	movs	r1, #1
   d6516:	b280      	uxth	r0, r0
   d6518:	f004 fa12 	bl	da940 <pinMode>
    if ((_dataMode == SPI_MODE0) || (_dataMode == SPI_MODE1)) {
   d651c:	7b63      	ldrb	r3, [r4, #13]
   d651e:	f994 000f 	ldrsb.w	r0, [r4, #15]
   d6522:	2b01      	cmp	r3, #1
      digitalWrite(_sck, LOW);
   d6524:	bf94      	ite	ls
   d6526:	4629      	movls	r1, r5
      digitalWrite(_sck, HIGH);
   d6528:	2101      	movhi	r1, #1
   d652a:	b280      	uxth	r0, r0
   d652c:	f004 fa19 	bl	da962 <digitalWrite>
    if (_mosi != -1) {
   d6530:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d6534:	1c42      	adds	r2, r0, #1
   d6536:	d009      	beq.n	d654c <_ZN18Adafruit_SPIDevice5beginEv+0x6a>
      pinMode(_mosi, OUTPUT);
   d6538:	2101      	movs	r1, #1
   d653a:	b280      	uxth	r0, r0
   d653c:	f004 fa00 	bl	da940 <pinMode>
      digitalWrite(_mosi, HIGH);
   d6540:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d6544:	2101      	movs	r1, #1
   d6546:	b280      	uxth	r0, r0
   d6548:	f004 fa0b 	bl	da962 <digitalWrite>
    if (_miso != -1) {
   d654c:	f994 0011 	ldrsb.w	r0, [r4, #17]
   d6550:	1c43      	adds	r3, r0, #1
   d6552:	d0d9      	beq.n	d6508 <_ZN18Adafruit_SPIDevice5beginEv+0x26>
      pinMode(_miso, INPUT);
   d6554:	2100      	movs	r1, #0
   d6556:	b280      	uxth	r0, r0
   d6558:	f004 f9f2 	bl	da940 <pinMode>
   d655c:	e7d4      	b.n	d6508 <_ZN18Adafruit_SPIDevice5beginEv+0x26>
	...

000d6560 <_ZN18Adafruit_SPIDevice8transferEPhj>:
/*!
 *    @brief  Transfer (send/receive) one byte over hard/soft SPI
 *    @param  buffer The buffer to send and receive at the same time
 *    @param  len    The number of bytes to transfer
 */
void Adafruit_SPIDevice::transfer(uint8_t *buffer, size_t len) {
   d6560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6564:	4604      	mov	r4, r0
  if (_spi) {
   d6566:	6800      	ldr	r0, [r0, #0]
void Adafruit_SPIDevice::transfer(uint8_t *buffer, size_t len) {
   d6568:	b085      	sub	sp, #20
   d656a:	460d      	mov	r5, r1
  if (_spi) {
   d656c:	b140      	cbz	r0, d6580 <_ZN18Adafruit_SPIDevice8transferEPhj+0x20>
    // hardware SPI is easy

#if defined(SPARK)
    _spi->transfer(buffer, buffer, len, NULL);
   d656e:	2300      	movs	r3, #0
   d6570:	9300      	str	r3, [sp, #0]
   d6572:	4613      	mov	r3, r2
   d6574:	460a      	mov	r2, r1
   d6576:	f003 fc69 	bl	d9e4c <_ZN8SPIClass8transferEPvS0_jPFvvE>
        buffer[i] = reply;
      }
    }
  }
  return;
}
   d657a:	b005      	add	sp, #20
   d657c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (_dataOrder == SPI_BITORDER_LSBFIRST) {
   d6580:	7b23      	ldrb	r3, [r4, #12]
  uint8_t bitdelay_us = (1000000 / _freq) / 2;
   d6582:	68a0      	ldr	r0, [r4, #8]
   d6584:	4f48      	ldr	r7, [pc, #288]	; (d66a8 <_ZN18Adafruit_SPIDevice8transferEPhj+0x148>)
   d6586:	fbb7 f7f0 	udiv	r7, r7, r0
    startbit = 0x80;
   d658a:	2b00      	cmp	r3, #0
  bool towrite, lastmosi = !(buffer[0] & startbit);
   d658c:	780b      	ldrb	r3, [r1, #0]
    startbit = 0x80;
   d658e:	bf0c      	ite	eq
   d6590:	f04f 0b01 	moveq.w	fp, #1
   d6594:	f04f 0b80 	movne.w	fp, #128	; 0x80
  bool towrite, lastmosi = !(buffer[0] & startbit);
   d6598:	ea1b 0f03 	tst.w	fp, r3
   d659c:	eb01 0302 	add.w	r3, r1, r2
   d65a0:	bf0c      	ite	eq
   d65a2:	f04f 0901 	moveq.w	r9, #1
   d65a6:	f04f 0900 	movne.w	r9, #0
  uint8_t bitdelay_us = (1000000 / _freq) / 2;
   d65aa:	b2ff      	uxtb	r7, r7
  for (size_t i = 0; i < len; i++) {
   d65ac:	9303      	str	r3, [sp, #12]
   d65ae:	9b03      	ldr	r3, [sp, #12]
   d65b0:	42ab      	cmp	r3, r5
   d65b2:	d0e2      	beq.n	d657a <_ZN18Adafruit_SPIDevice8transferEPhj+0x1a>
    uint8_t send = buffer[i];
   d65b4:	f895 a000 	ldrb.w	sl, [r5]
    for (uint8_t b = startbit; b != 0;
   d65b8:	465e      	mov	r6, fp
    uint8_t reply = 0;
   d65ba:	f04f 0800 	mov.w	r8, #0
      if (bitdelay_us) {
   d65be:	b117      	cbz	r7, d65c6 <_ZN18Adafruit_SPIDevice8transferEPhj+0x66>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   d65c0:	4638      	mov	r0, r7
   d65c2:	f000 ffd9 	bl	d7578 <HAL_Delay_Microseconds>
      if (_dataMode == SPI_MODE0 || _dataMode == SPI_MODE2) {
   d65c6:	7b63      	ldrb	r3, [r4, #13]
   d65c8:	f013 0ffd 	tst.w	r3, #253	; 0xfd
   d65cc:	d141      	bne.n	d6652 <_ZN18Adafruit_SPIDevice8transferEPhj+0xf2>
        if ((_mosi != -1) && (lastmosi != towrite)) {
   d65ce:	f994 3010 	ldrsb.w	r3, [r4, #16]
   d65d2:	1c5a      	adds	r2, r3, #1
   d65d4:	d00f      	beq.n	d65f6 <_ZN18Adafruit_SPIDevice8transferEPhj+0x96>
        towrite = send & b;
   d65d6:	ea1a 0106 	ands.w	r1, sl, r6
        if ((_mosi != -1) && (lastmosi != towrite)) {
   d65da:	bf14      	ite	ne
   d65dc:	2301      	movne	r3, #1
   d65de:	2300      	moveq	r3, #0
   d65e0:	454b      	cmp	r3, r9
   d65e2:	d008      	beq.n	d65f6 <_ZN18Adafruit_SPIDevice8transferEPhj+0x96>
          if (towrite)
   d65e4:	6963      	ldr	r3, [r4, #20]
   d65e6:	6a60      	ldr	r0, [r4, #36]	; 0x24
            *mosiPort |= mosiPinMask;
   d65e8:	681a      	ldr	r2, [r3, #0]
          if (towrite)
   d65ea:	2900      	cmp	r1, #0
   d65ec:	d02c      	beq.n	d6648 <_ZN18Adafruit_SPIDevice8transferEPhj+0xe8>
            *mosiPort |= mosiPinMask;
   d65ee:	4302      	orrs	r2, r0
   d65f0:	601a      	str	r2, [r3, #0]
   d65f2:	f04f 0901 	mov.w	r9, #1
        *clkPort |= clkPinMask; // Clock high
   d65f6:	69a1      	ldr	r1, [r4, #24]
   d65f8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   d65fa:	680a      	ldr	r2, [r1, #0]
   d65fc:	4313      	orrs	r3, r2
   d65fe:	600b      	str	r3, [r1, #0]
        if (bitdelay_us) {
   d6600:	b117      	cbz	r7, d6608 <_ZN18Adafruit_SPIDevice8transferEPhj+0xa8>
   d6602:	4638      	mov	r0, r7
   d6604:	f000 ffb8 	bl	d7578 <HAL_Delay_Microseconds>
        if (_miso != -1) {
   d6608:	f994 3011 	ldrsb.w	r3, [r4, #17]
   d660c:	3301      	adds	r3, #1
   d660e:	d006      	beq.n	d661e <_ZN18Adafruit_SPIDevice8transferEPhj+0xbe>
          if (*misoPort & misoPinMask) {
   d6610:	69e3      	ldr	r3, [r4, #28]
   d6612:	681a      	ldr	r2, [r3, #0]
   d6614:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   d6616:	421a      	tst	r2, r3
            reply |= b;
   d6618:	bf18      	it	ne
   d661a:	ea46 0808 	orrne.w	r8, r6, r8
        *clkPort &= ~clkPinMask; // Clock low
   d661e:	69a1      	ldr	r1, [r4, #24]
   d6620:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   d6622:	680a      	ldr	r2, [r1, #0]
   d6624:	ea22 0303 	bic.w	r3, r2, r3
   d6628:	600b      	str	r3, [r1, #0]
      if (_miso != -1) {
   d662a:	f994 3011 	ldrsb.w	r3, [r4, #17]
   d662e:	3301      	adds	r3, #1
        buffer[i] = reply;
   d6630:	bf18      	it	ne
   d6632:	f885 8000 	strbne.w	r8, [r5]
    for (uint8_t b = startbit; b != 0;
   d6636:	7b23      	ldrb	r3, [r4, #12]
   d6638:	2b00      	cmp	r3, #0
   d663a:	d132      	bne.n	d66a2 <_ZN18Adafruit_SPIDevice8transferEPhj+0x142>
   d663c:	0076      	lsls	r6, r6, #1
   d663e:	b2f6      	uxtb	r6, r6
   d6640:	2e00      	cmp	r6, #0
   d6642:	d1bc      	bne.n	d65be <_ZN18Adafruit_SPIDevice8transferEPhj+0x5e>
  for (size_t i = 0; i < len; i++) {
   d6644:	3501      	adds	r5, #1
   d6646:	e7b2      	b.n	d65ae <_ZN18Adafruit_SPIDevice8transferEPhj+0x4e>
            *mosiPort &= ~mosiPinMask;
   d6648:	ea22 0200 	bic.w	r2, r2, r0
   d664c:	601a      	str	r2, [r3, #0]
   d664e:	4689      	mov	r9, r1
   d6650:	e7d1      	b.n	d65f6 <_ZN18Adafruit_SPIDevice8transferEPhj+0x96>
        *clkPort |= clkPinMask; // Clock high
   d6652:	69a1      	ldr	r1, [r4, #24]
   d6654:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   d6656:	680a      	ldr	r2, [r1, #0]
   d6658:	4313      	orrs	r3, r2
   d665a:	600b      	str	r3, [r1, #0]
        if (bitdelay_us) {
   d665c:	b117      	cbz	r7, d6664 <_ZN18Adafruit_SPIDevice8transferEPhj+0x104>
   d665e:	4638      	mov	r0, r7
   d6660:	f000 ff8a 	bl	d7578 <HAL_Delay_Microseconds>
        if (_mosi != -1) {
   d6664:	f994 3010 	ldrsb.w	r3, [r4, #16]
   d6668:	3301      	adds	r3, #1
   d666a:	d008      	beq.n	d667e <_ZN18Adafruit_SPIDevice8transferEPhj+0x11e>
          if (send & b)
   d666c:	6963      	ldr	r3, [r4, #20]
   d666e:	6a61      	ldr	r1, [r4, #36]	; 0x24
            *mosiPort |= mosiPinMask;
   d6670:	681a      	ldr	r2, [r3, #0]
          if (send & b)
   d6672:	ea1a 0f06 	tst.w	sl, r6
            *mosiPort |= mosiPinMask;
   d6676:	bf14      	ite	ne
   d6678:	430a      	orrne	r2, r1
            *mosiPort &= ~mosiPinMask;
   d667a:	438a      	biceq	r2, r1
   d667c:	601a      	str	r2, [r3, #0]
        *clkPort &= ~clkPinMask; // Clock low
   d667e:	69a1      	ldr	r1, [r4, #24]
   d6680:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   d6682:	680a      	ldr	r2, [r1, #0]
   d6684:	ea22 0303 	bic.w	r3, r2, r3
   d6688:	600b      	str	r3, [r1, #0]
        if (_miso != -1) {
   d668a:	f994 3011 	ldrsb.w	r3, [r4, #17]
   d668e:	3301      	adds	r3, #1
   d6690:	d0cb      	beq.n	d662a <_ZN18Adafruit_SPIDevice8transferEPhj+0xca>
          if (*misoPort & misoPinMask) {
   d6692:	69e3      	ldr	r3, [r4, #28]
   d6694:	681a      	ldr	r2, [r3, #0]
   d6696:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   d6698:	421a      	tst	r2, r3
            reply |= b;
   d669a:	bf18      	it	ne
   d669c:	ea46 0808 	orrne.w	r8, r6, r8
   d66a0:	e7c3      	b.n	d662a <_ZN18Adafruit_SPIDevice8transferEPhj+0xca>
    for (uint8_t b = startbit; b != 0;
   d66a2:	0876      	lsrs	r6, r6, #1
   d66a4:	e7cc      	b.n	d6640 <_ZN18Adafruit_SPIDevice8transferEPhj+0xe0>
   d66a6:	bf00      	nop
   d66a8:	0007a120 	.word	0x0007a120

000d66ac <_ZN18Adafruit_SPIDevice8transferEh>:
/*!
 *    @brief  Transfer (send/receive) one byte over hard/soft SPI
 *    @param  send The byte to send
 *    @return The byte received while transmitting
 */
uint8_t Adafruit_SPIDevice::transfer(uint8_t send) {
   d66ac:	b507      	push	{r0, r1, r2, lr}
  uint8_t data = send;
  transfer(&data, 1);
   d66ae:	2201      	movs	r2, #1
  uint8_t data = send;
   d66b0:	f88d 1007 	strb.w	r1, [sp, #7]
  transfer(&data, 1);
   d66b4:	f10d 0107 	add.w	r1, sp, #7
   d66b8:	f7ff ff52 	bl	d6560 <_ZN18Adafruit_SPIDevice8transferEPhj>
  return data;
}
   d66bc:	f89d 0007 	ldrb.w	r0, [sp, #7]
   d66c0:	b003      	add	sp, #12
   d66c2:	f85d fb04 	ldr.w	pc, [sp], #4

000d66c6 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j>:
 *    @param  prefix_len Number of bytes from prefix buffer to write
 *    @return Always returns true because there's no way to test success of SPI
 * writes
 */
bool Adafruit_SPIDevice::write(uint8_t *buffer, size_t len,
                               uint8_t *prefix_buffer, size_t prefix_len) {
   d66c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d66ca:	4604      	mov	r4, r0
  if (_spi) {
   d66cc:	6800      	ldr	r0, [r0, #0]
                               uint8_t *prefix_buffer, size_t prefix_len) {
   d66ce:	460e      	mov	r6, r1
   d66d0:	4617      	mov	r7, r2
   d66d2:	461d      	mov	r5, r3
  if (_spi) {
   d66d4:	b110      	cbz	r0, d66dc <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x16>
    _spi->beginTransaction(*_spiSetting);
   d66d6:	6861      	ldr	r1, [r4, #4]
   d66d8:	f003 fb4a 	bl	d9d70 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
  }

  digitalWrite(_cs, LOW);
   d66dc:	f994 000e 	ldrsb.w	r0, [r4, #14]
   d66e0:	2100      	movs	r1, #0
   d66e2:	b280      	uxth	r0, r0
   d66e4:	f004 f93d 	bl	da962 <digitalWrite>
  // do the writing
  for (size_t i = 0; i < prefix_len; i++) {
   d66e8:	9b06      	ldr	r3, [sp, #24]
   d66ea:	eb05 0803 	add.w	r8, r5, r3
   d66ee:	4545      	cmp	r5, r8
   d66f0:	d108      	bne.n	d6704 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x3e>
   d66f2:	4437      	add	r7, r6
    transfer(prefix_buffer[i]);
  }
  for (size_t i = 0; i < len; i++) {
   d66f4:	42b7      	cmp	r7, r6
   d66f6:	d00b      	beq.n	d6710 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x4a>
    transfer(buffer[i]);
   d66f8:	f816 1b01 	ldrb.w	r1, [r6], #1
   d66fc:	4620      	mov	r0, r4
   d66fe:	f7ff ffd5 	bl	d66ac <_ZN18Adafruit_SPIDevice8transferEh>
  for (size_t i = 0; i < len; i++) {
   d6702:	e7f7      	b.n	d66f4 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x2e>
    transfer(prefix_buffer[i]);
   d6704:	f815 1b01 	ldrb.w	r1, [r5], #1
   d6708:	4620      	mov	r0, r4
   d670a:	f7ff ffcf 	bl	d66ac <_ZN18Adafruit_SPIDevice8transferEh>
  for (size_t i = 0; i < prefix_len; i++) {
   d670e:	e7ee      	b.n	d66ee <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x28>
  }
  digitalWrite(_cs, HIGH);
   d6710:	f994 000e 	ldrsb.w	r0, [r4, #14]
   d6714:	2101      	movs	r1, #1
   d6716:	b280      	uxth	r0, r0
   d6718:	f004 f923 	bl	da962 <digitalWrite>

  if (_spi) {
   d671c:	6820      	ldr	r0, [r4, #0]
   d671e:	b108      	cbz	r0, d6724 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x5e>
    _spi->endTransaction();
   d6720:	f003 fb0d 	bl	d9d3e <_ZN8SPIClass14endTransactionEv>
  }
  DEBUG_SERIAL.println();
#endif

  return true;
}
   d6724:	2001      	movs	r0, #1
   d6726:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d672a <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh>:
 *    @return Always returns true because there's no way to test success of SPI
 * writes
 */
bool Adafruit_SPIDevice::write_then_read(uint8_t *write_buffer,
                                         size_t write_len, uint8_t *read_buffer,
                                         size_t read_len, uint8_t sendvalue) {
   d672a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d672e:	4604      	mov	r4, r0
  if (_spi) {
   d6730:	6800      	ldr	r0, [r0, #0]
                                         size_t read_len, uint8_t sendvalue) {
   d6732:	f89d 801c 	ldrb.w	r8, [sp, #28]
   d6736:	460e      	mov	r6, r1
   d6738:	4617      	mov	r7, r2
   d673a:	461d      	mov	r5, r3
  if (_spi) {
   d673c:	b110      	cbz	r0, d6744 <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x1a>
    _spi->beginTransaction(*_spiSetting);
   d673e:	6861      	ldr	r1, [r4, #4]
   d6740:	f003 fb16 	bl	d9d70 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
  }

  digitalWrite(_cs, LOW);
   d6744:	f994 000e 	ldrsb.w	r0, [r4, #14]
   d6748:	2100      	movs	r1, #0
   d674a:	b280      	uxth	r0, r0
   d674c:	f004 f909 	bl	da962 <digitalWrite>
  // do the writing
  for (size_t i = 0; i < write_len; i++) {
   d6750:	4437      	add	r7, r6
   d6752:	42be      	cmp	r6, r7
   d6754:	d10a      	bne.n	d676c <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x42>
   d6756:	9b06      	ldr	r3, [sp, #24]
   d6758:	18ee      	adds	r6, r5, r3
  }
  DEBUG_SERIAL.println();
#endif

  // do the reading
  for (size_t i = 0; i < read_len; i++) {
   d675a:	42ae      	cmp	r6, r5
   d675c:	d00c      	beq.n	d6778 <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x4e>
    read_buffer[i] = transfer(sendvalue);
   d675e:	4641      	mov	r1, r8
   d6760:	4620      	mov	r0, r4
   d6762:	f7ff ffa3 	bl	d66ac <_ZN18Adafruit_SPIDevice8transferEh>
   d6766:	f805 0b01 	strb.w	r0, [r5], #1
  for (size_t i = 0; i < read_len; i++) {
   d676a:	e7f6      	b.n	d675a <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x30>
    transfer(write_buffer[i]);
   d676c:	f816 1b01 	ldrb.w	r1, [r6], #1
   d6770:	4620      	mov	r0, r4
   d6772:	f7ff ff9b 	bl	d66ac <_ZN18Adafruit_SPIDevice8transferEh>
  for (size_t i = 0; i < write_len; i++) {
   d6776:	e7ec      	b.n	d6752 <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x28>
    }
  }
  DEBUG_SERIAL.println();
#endif

  digitalWrite(_cs, HIGH);
   d6778:	f994 000e 	ldrsb.w	r0, [r4, #14]
   d677c:	2101      	movs	r1, #1
   d677e:	b280      	uxth	r0, r0
   d6780:	f004 f8ef 	bl	da962 <digitalWrite>

  if (_spi) {
   d6784:	6820      	ldr	r0, [r4, #0]
   d6786:	b108      	cbz	r0, d678c <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x62>
    _spi->endTransaction();
   d6788:	f003 fad9 	bl	d9d3e <_ZN8SPIClass14endTransactionEv>
  }

  return true;
}
   d678c:	2001      	movs	r0, #1
   d678e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d6792 <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d6792:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d6794:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d6796:	4604      	mov	r4, r0
      if (_M_manager)
   d6798:	b113      	cbz	r3, d67a0 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d679a:	2203      	movs	r2, #3
   d679c:	4601      	mov	r1, r0
   d679e:	4798      	blx	r3
    }
   d67a0:	4620      	mov	r0, r4
   d67a2:	bd10      	pop	{r4, pc}

000d67a4 <_ZN6MB85RCD1Ev>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
	wire(wire), memorySize(memorySize), addr(addr) {
}

MB85RC::~MB85RC() {
}
   d67a4:	4770      	bx	lr

000d67a6 <_ZN6MB85RCD0Ev>:
MB85RC::~MB85RC() {
   d67a6:	b510      	push	{r4, lr}
}
   d67a8:	2110      	movs	r1, #16
MB85RC::~MB85RC() {
   d67aa:	4604      	mov	r4, r0
}
   d67ac:	f004 f984 	bl	daab8 <_ZdlPvj>
   d67b0:	4620      	mov	r0, r4
   d67b2:	bd10      	pop	{r4, pc}

000d67b4 <_ZN7TwoWire5writeEj>:
  bool lock();
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
   d67b4:	6803      	ldr	r3, [r0, #0]
   d67b6:	b2c9      	uxtb	r1, r1
   d67b8:	689b      	ldr	r3, [r3, #8]
   d67ba:	4718      	bx	r3

000d67bc <_ZN6MB85RCC1ER7TwoWireji>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
   d67bc:	b530      	push	{r4, r5, lr}
	wire(wire), memorySize(memorySize), addr(addr) {
   d67be:	4d03      	ldr	r5, [pc, #12]	; (d67cc <_ZN6MB85RCC1ER7TwoWireji+0x10>)
   d67c0:	e9c0 2302 	strd	r2, r3, [r0, #8]
   d67c4:	e9c0 5100 	strd	r5, r1, [r0]
}
   d67c8:	bd30      	pop	{r4, r5, pc}
   d67ca:	bf00      	nop
   d67cc:	000dc6a4 	.word	0x000dc6a4

000d67d0 <_ZN6MB85RC5beginEv>:

void MB85RC::begin() {
	wire.begin();
   d67d0:	6840      	ldr	r0, [r0, #4]
   d67d2:	f001 be8b 	b.w	d84ec <_ZN7TwoWire5beginEv>

000d67d6 <_ZNSt10lock_guardIR7TwoWireED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   d67d6:	b510      	push	{r4, lr}
   d67d8:	4604      	mov	r4, r0
      { _M_device.unlock(); }
   d67da:	6800      	ldr	r0, [r0, #0]
   d67dc:	f001 feeb 	bl	d85b6 <_ZN7TwoWire6unlockEv>
   d67e0:	4620      	mov	r0, r4
   d67e2:	bd10      	pop	{r4, pc}

000d67e4 <_ZN6MB85RC5eraseEv>:
}

bool MB85RC::erase() {
   d67e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d67e8:	b08a      	sub	sp, #40	; 0x28
   d67ea:	4604      	mov	r4, r0

	WITH_LOCK(wire) {
   d67ec:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d67ee:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d67f0:	f001 fed8 	bl	d85a4 <_ZN7TwoWire4lockEv>
		size_t framAddr = 0;
		size_t totalLen = memorySize;

		uint8_t zero[30];
		memset(zero, 0, sizeof(zero));
   d67f4:	221e      	movs	r2, #30
   d67f6:	2100      	movs	r1, #0
   d67f8:	a802      	add	r0, sp, #8
		size_t totalLen = memorySize;
   d67fa:	68a7      	ldr	r7, [r4, #8]
		memset(zero, 0, sizeof(zero));
   d67fc:	f005 f9c0 	bl	dbb80 <memset>
		size_t framAddr = 0;
   d6800:	2600      	movs	r6, #0

		while(totalLen > 0) {
   d6802:	b1ef      	cbz	r7, d6840 <_ZN6MB85RC5eraseEv+0x5c>
			size_t count = totalLen;
			if (count > sizeof(zero)) {
				count = sizeof(zero);
			}

			bool result = writeData(framAddr, zero, count);
   d6804:	6823      	ldr	r3, [r4, #0]
   d6806:	2f1e      	cmp	r7, #30
   d6808:	46b8      	mov	r8, r7
   d680a:	bf28      	it	cs
   d680c:	f04f 081e 	movcs.w	r8, #30
   d6810:	68dd      	ldr	r5, [r3, #12]
   d6812:	aa02      	add	r2, sp, #8
   d6814:	4643      	mov	r3, r8
   d6816:	4631      	mov	r1, r6
   d6818:	4620      	mov	r0, r4
   d681a:	47a8      	blx	r5
			if (!result) {
   d681c:	4605      	mov	r5, r0
   d681e:	b958      	cbnz	r0, d6838 <_ZN6MB85RC5eraseEv+0x54>
				Log.info("writeData failed during erase framAddr=%u", framAddr);
   d6820:	480a      	ldr	r0, [pc, #40]	; (d684c <_ZN6MB85RC5eraseEv+0x68>)
   d6822:	490b      	ldr	r1, [pc, #44]	; (d6850 <_ZN6MB85RC5eraseEv+0x6c>)
   d6824:	4632      	mov	r2, r6
   d6826:	f7fd fceb 	bl	d4200 <_ZNK5spark6Logger4infoEPKcz>
	WITH_LOCK(wire) {
   d682a:	a801      	add	r0, sp, #4
   d682c:	f7ff ffd3 	bl	d67d6 <_ZNSt10lock_guardIR7TwoWireED1Ev>
			framAddr += count;
		}
	}

	return true;
}
   d6830:	4628      	mov	r0, r5
   d6832:	b00a      	add	sp, #40	; 0x28
   d6834:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			totalLen -= count;
   d6838:	eba7 0708 	sub.w	r7, r7, r8
			framAddr += count;
   d683c:	4446      	add	r6, r8
		while(totalLen > 0) {
   d683e:	e7e0      	b.n	d6802 <_ZN6MB85RC5eraseEv+0x1e>
	WITH_LOCK(wire) {
   d6840:	a801      	add	r0, sp, #4
   d6842:	f7ff ffc8 	bl	d67d6 <_ZNSt10lock_guardIR7TwoWireED1Ev>
	return true;
   d6846:	2501      	movs	r5, #1
   d6848:	e7f2      	b.n	d6830 <_ZN6MB85RC5eraseEv+0x4c>
   d684a:	bf00      	nop
   d684c:	2003e63c 	.word	0x2003e63c
   d6850:	000dc670 	.word	0x000dc670

000d6854 <_ZN6MB85RC8readDataEjPhj>:


bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   d6854:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d6858:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   d685a:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d685c:	9001      	str	r0, [sp, #4]
bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   d685e:	460d      	mov	r5, r1
   d6860:	4616      	mov	r6, r2
   d6862:	461f      	mov	r7, r3
      { _M_device.lock(); }
   d6864:	f001 fe9e 	bl	d85a4 <_ZN7TwoWire4lockEv>

		while(dataLen > 0) {
   d6868:	b1a7      	cbz	r7, d6894 <_ZN6MB85RC8readDataEjPhj+0x40>
			wire.beginTransmission(addr | DEVICE_ADDR);
   d686a:	68e1      	ldr	r1, [r4, #12]
   d686c:	6860      	ldr	r0, [r4, #4]
   d686e:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d6872:	f001 fe71 	bl	d8558 <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   d6876:	0a29      	lsrs	r1, r5, #8
   d6878:	6860      	ldr	r0, [r4, #4]
   d687a:	f7ff ff9b 	bl	d67b4 <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   d687e:	4629      	mov	r1, r5
   d6880:	6860      	ldr	r0, [r4, #4]
   d6882:	f7ff ff97 	bl	d67b4 <_ZN7TwoWire5writeEj>
			int stat = wire.endTransmission(false);
   d6886:	6860      	ldr	r0, [r4, #4]
   d6888:	2100      	movs	r1, #0
   d688a:	f001 fe80 	bl	d858e <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   d688e:	b148      	cbz	r0, d68a4 <_ZN6MB85RC8readDataEjPhj+0x50>
				//Serial.printlnf("read set address failed %d", stat);
				result = false;
   d6890:	2400      	movs	r4, #0
   d6892:	e000      	b.n	d6896 <_ZN6MB85RC8readDataEjPhj+0x42>
   d6894:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
   d6896:	a801      	add	r0, sp, #4
   d6898:	f7ff ff9d 	bl	d67d6 <_ZNSt10lock_guardIR7TwoWireED1Ev>
				dataLen--;
			}
		}
	}
	return result;
}
   d689c:	4620      	mov	r0, r4
   d689e:	b003      	add	sp, #12
   d68a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			if (bytesToRead > 32) {
   d68a4:	2f20      	cmp	r7, #32
			wire.requestFrom((uint8_t)(addr | DEVICE_ADDR), bytesToRead, (uint8_t) true);
   d68a6:	7b21      	ldrb	r1, [r4, #12]
   d68a8:	6860      	ldr	r0, [r4, #4]
   d68aa:	46b8      	mov	r8, r7
   d68ac:	bf28      	it	cs
   d68ae:	f04f 0820 	movcs.w	r8, #32
   d68b2:	2301      	movs	r3, #1
   d68b4:	4642      	mov	r2, r8
   d68b6:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d68ba:	f001 fe34 	bl	d8526 <_ZN7TwoWire11requestFromEhjh>
			if (Wire.available() < (int) bytesToRead) {
   d68be:	f004 f8b3 	bl	daa28 <_Z19__fetch_global_Wirev>
   d68c2:	6803      	ldr	r3, [r0, #0]
   d68c4:	691b      	ldr	r3, [r3, #16]
   d68c6:	4798      	blx	r3
   d68c8:	4540      	cmp	r0, r8
   d68ca:	dbe1      	blt.n	d6890 <_ZN6MB85RC8readDataEjPhj+0x3c>
   d68cc:	eb06 0908 	add.w	r9, r6, r8
				*data++ = Wire.read();    // receive a byte as character
   d68d0:	f004 f8aa 	bl	daa28 <_Z19__fetch_global_Wirev>
   d68d4:	6803      	ldr	r3, [r0, #0]
   d68d6:	695b      	ldr	r3, [r3, #20]
   d68d8:	4798      	blx	r3
   d68da:	f806 0b01 	strb.w	r0, [r6], #1
			for(size_t ii = 0; ii < bytesToRead; ii++) {
   d68de:	454e      	cmp	r6, r9
   d68e0:	d1f6      	bne.n	d68d0 <_ZN6MB85RC8readDataEjPhj+0x7c>
   d68e2:	4445      	add	r5, r8
   d68e4:	eba7 0708 	sub.w	r7, r7, r8
   d68e8:	e7be      	b.n	d6868 <_ZN6MB85RC8readDataEjPhj+0x14>

000d68ea <_ZN6MB85RC9writeDataEjPKhj>:


bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   d68ea:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d68ee:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   d68f0:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d68f2:	9001      	str	r0, [sp, #4]
bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   d68f4:	460e      	mov	r6, r1
   d68f6:	4690      	mov	r8, r2
   d68f8:	461d      	mov	r5, r3
      { _M_device.lock(); }
   d68fa:	f001 fe53 	bl	d85a4 <_ZN7TwoWire4lockEv>
   d68fe:	f04f 0901 	mov.w	r9, #1
	WITH_LOCK(wire) {
   d6902:	f1b9 0f00 	cmp.w	r9, #0
   d6906:	d02a      	beq.n	d695e <_ZN6MB85RC9writeDataEjPKhj+0x74>
		while(dataLen > 0) {
   d6908:	b34d      	cbz	r5, d695e <_ZN6MB85RC9writeDataEjPKhj+0x74>
			wire.beginTransmission(addr | DEVICE_ADDR);
   d690a:	68e1      	ldr	r1, [r4, #12]
   d690c:	6860      	ldr	r0, [r4, #4]
   d690e:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d6912:	f001 fe21 	bl	d8558 <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   d6916:	0a31      	lsrs	r1, r6, #8
   d6918:	6860      	ldr	r0, [r4, #4]
   d691a:	f7ff ff4b 	bl	d67b4 <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   d691e:	6860      	ldr	r0, [r4, #4]
   d6920:	4631      	mov	r1, r6
   d6922:	f7ff ff47 	bl	d67b4 <_ZN7TwoWire5writeEj>

			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   d6926:	f1a5 0a1e 	sub.w	sl, r5, #30
			wire.write(framAddr);
   d692a:	4647      	mov	r7, r8
   d692c:	eba6 0b08 	sub.w	fp, r6, r8
				wire.write(*data);
   d6930:	6860      	ldr	r0, [r4, #4]
   d6932:	f817 1b01 	ldrb.w	r1, [r7], #1
   d6936:	6803      	ldr	r3, [r0, #0]
				framAddr++;
				data++;
				dataLen--;
   d6938:	3d01      	subs	r5, #1
				wire.write(*data);
   d693a:	689b      	ldr	r3, [r3, #8]
   d693c:	4798      	blx	r3
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   d693e:	4555      	cmp	r5, sl
   d6940:	eb0b 0607 	add.w	r6, fp, r7
				data++;
   d6944:	46b8      	mov	r8, r7
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   d6946:	d001      	beq.n	d694c <_ZN6MB85RC9writeDataEjPKhj+0x62>
   d6948:	2d00      	cmp	r5, #0
   d694a:	d1f1      	bne.n	d6930 <_ZN6MB85RC9writeDataEjPKhj+0x46>
			}

			int stat = wire.endTransmission(true);
   d694c:	6860      	ldr	r0, [r4, #4]
   d694e:	2101      	movs	r1, #1
   d6950:	f001 fe1d 	bl	d858e <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   d6954:	2800      	cmp	r0, #0
   d6956:	d0d7      	beq.n	d6908 <_ZN6MB85RC9writeDataEjPKhj+0x1e>
				//Serial.printlnf("write failed %d", stat);
				result = false;
   d6958:	f04f 0900 	mov.w	r9, #0
   d695c:	e7d1      	b.n	d6902 <_ZN6MB85RC9writeDataEjPKhj+0x18>
	WITH_LOCK(wire) {
   d695e:	a801      	add	r0, sp, #4
   d6960:	f7ff ff39 	bl	d67d6 <_ZNSt10lock_guardIR7TwoWireED1Ev>
				break;
			}
		}
	}
	return result;
}
   d6964:	4648      	mov	r0, r9
   d6966:	b003      	add	sp, #12
   d6968:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d696c <_ZN6MB85RC8moveDataEjjj>:


bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   d696c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d6970:	b08b      	sub	sp, #44	; 0x2c
   d6972:	460e      	mov	r6, r1
   d6974:	4615      	mov	r5, r2
   d6976:	4680      	mov	r8, r0
	bool result = true;

	// Maximum number of bytes we can write is 30
	uint8_t buf[30];

	WITH_LOCK(wire) {
   d6978:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d697a:	9001      	str	r0, [sp, #4]
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   d697c:	461c      	mov	r4, r3
      { _M_device.lock(); }
   d697e:	f001 fe11 	bl	d85a4 <_ZN7TwoWire4lockEv>
		if (framAddrFrom < framAddrTo) {
   d6982:	42ae      	cmp	r6, r5
   d6984:	d229      	bcs.n	d69da <_ZN6MB85RC8moveDataEjjj+0x6e>
			// Moving to a higher address - copy from the end of the from buffer
			framAddrFrom += numBytes;
   d6986:	4426      	add	r6, r4
			framAddrTo += numBytes;
   d6988:	4425      	add	r5, r4
			while(numBytes > 0) {
   d698a:	b18c      	cbz	r4, d69b0 <_ZN6MB85RC8moveDataEjjj+0x44>
				size_t count = numBytes;
				if (count > sizeof(buf)) {
   d698c:	2c1e      	cmp	r4, #30
   d698e:	4627      	mov	r7, r4
					count = sizeof(buf);
				}
				framAddrFrom -= count;
				framAddrTo -= count;

				result = readData(framAddrFrom, buf, count);
   d6990:	f8d8 3000 	ldr.w	r3, [r8]
   d6994:	bf28      	it	cs
   d6996:	271e      	movcs	r7, #30
				framAddrFrom -= count;
   d6998:	1bf6      	subs	r6, r6, r7
				result = readData(framAddrFrom, buf, count);
   d699a:	f8d3 9008 	ldr.w	r9, [r3, #8]
   d699e:	aa02      	add	r2, sp, #8
   d69a0:	463b      	mov	r3, r7
   d69a2:	4631      	mov	r1, r6
   d69a4:	4640      	mov	r0, r8
				framAddrTo -= count;
   d69a6:	1bed      	subs	r5, r5, r7
				result = readData(framAddrFrom, buf, count);
   d69a8:	47c8      	blx	r9
				if (!result) {
   d69aa:	b948      	cbnz	r0, d69c0 <_ZN6MB85RC8moveDataEjjj+0x54>
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   d69ac:	2400      	movs	r4, #0
   d69ae:	e000      	b.n	d69b2 <_ZN6MB85RC8moveDataEjjj+0x46>
   d69b0:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
   d69b2:	a801      	add	r0, sp, #4
   d69b4:	f7ff ff0f 	bl	d67d6 <_ZNSt10lock_guardIR7TwoWireED1Ev>
				numBytes -= count;
			}
		}
	}
	return result;
}
   d69b8:	4620      	mov	r0, r4
   d69ba:	b00b      	add	sp, #44	; 0x2c
   d69bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				result = writeData(framAddrTo, buf, count);
   d69c0:	f8d8 3000 	ldr.w	r3, [r8]
   d69c4:	aa02      	add	r2, sp, #8
   d69c6:	f8d3 900c 	ldr.w	r9, [r3, #12]
   d69ca:	4629      	mov	r1, r5
   d69cc:	463b      	mov	r3, r7
   d69ce:	4640      	mov	r0, r8
   d69d0:	47c8      	blx	r9
				if (!result) {
   d69d2:	2800      	cmp	r0, #0
   d69d4:	d0ea      	beq.n	d69ac <_ZN6MB85RC8moveDataEjjj+0x40>
				numBytes -= count;
   d69d6:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
   d69d8:	e7d7      	b.n	d698a <_ZN6MB85RC8moveDataEjjj+0x1e>
		if (framAddrFrom > framAddrTo) {
   d69da:	d9e9      	bls.n	d69b0 <_ZN6MB85RC8moveDataEjjj+0x44>
			while(numBytes > 0) {
   d69dc:	2c00      	cmp	r4, #0
   d69de:	d0e7      	beq.n	d69b0 <_ZN6MB85RC8moveDataEjjj+0x44>
				result = readData(framAddrFrom, buf, count);
   d69e0:	f8d8 3000 	ldr.w	r3, [r8]
   d69e4:	2c1e      	cmp	r4, #30
   d69e6:	4627      	mov	r7, r4
   d69e8:	bf28      	it	cs
   d69ea:	271e      	movcs	r7, #30
   d69ec:	f8d3 9008 	ldr.w	r9, [r3, #8]
   d69f0:	aa02      	add	r2, sp, #8
   d69f2:	463b      	mov	r3, r7
   d69f4:	4631      	mov	r1, r6
   d69f6:	4640      	mov	r0, r8
   d69f8:	47c8      	blx	r9
				if (!result) {
   d69fa:	2800      	cmp	r0, #0
   d69fc:	d0d6      	beq.n	d69ac <_ZN6MB85RC8moveDataEjjj+0x40>
				result = writeData(framAddrTo, buf, count);
   d69fe:	f8d8 3000 	ldr.w	r3, [r8]
   d6a02:	aa02      	add	r2, sp, #8
   d6a04:	f8d3 900c 	ldr.w	r9, [r3, #12]
   d6a08:	4629      	mov	r1, r5
   d6a0a:	463b      	mov	r3, r7
   d6a0c:	4640      	mov	r0, r8
   d6a0e:	47c8      	blx	r9
				if (!result) {
   d6a10:	2800      	cmp	r0, #0
   d6a12:	d0cb      	beq.n	d69ac <_ZN6MB85RC8moveDataEjjj+0x40>
				framAddrFrom += count;
   d6a14:	443e      	add	r6, r7
				framAddrTo += count;
   d6a16:	443d      	add	r5, r7
				numBytes -= count;
   d6a18:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
   d6a1a:	e7df      	b.n	d69dc <_ZN6MB85RC8moveDataEjjj+0x70>

000d6a1c <_ZNK12MCP79410SRAM6lengthEv>:
	virtual ~MCP79410SRAM();

	/**
	 * @brief Returns the length (64)
	 */
	virtual size_t length() const { return 64; };
   d6a1c:	2040      	movs	r0, #64	; 0x40
   d6a1e:	4770      	bx	lr

000d6a20 <_ZNK12MCP79410SRAM10eraseValueEv>:
	/**
	 * @brief Erase erases to 0
	 *
	 * Note that on cold power up, the values are random, not zero!
	 */
	virtual uint8_t eraseValue() const { return 0; };
   d6a20:	2000      	movs	r0, #0
   d6a22:	4770      	bx	lr

000d6a24 <_ZNK14MCP79410EEPROM6lengthEv>:
	bool protectedBlockRead(uint8_t *buf);

	/**
	 * @brief Returns the length (128)
	 */
	virtual size_t length() const { return 128; };
   d6a24:	2080      	movs	r0, #128	; 0x80
   d6a26:	4770      	bx	lr

000d6a28 <_ZNK14MCP79410EEPROM10eraseValueEv>:

	/**
	 * @brief Erased value is 0xff.
	 */
	virtual uint8_t eraseValue() const { return 0xff; };
   d6a28:	20ff      	movs	r0, #255	; 0xff
   d6a2a:	4770      	bx	lr

000d6a2c <_ZN12MCP79410SRAMD1Ev>:

}

MCP79410SRAM::~MCP79410SRAM() {

}
   d6a2c:	4770      	bx	lr

000d6a2e <_ZN14MCP79410EEPROMD1Ev>:

}

MCP79410EEPROM::~MCP79410EEPROM() {

}
   d6a2e:	4770      	bx	lr

000d6a30 <_ZN12MCP79410TimeD1Ev>:
	clear();
}

MCP79410Time::~MCP79410Time() {

}
   d6a30:	4770      	bx	lr

000d6a32 <_ZN8MCP79410D1Ev>:
}


MCP79410::~MCP79410() {

}
   d6a32:	4770      	bx	lr

000d6a34 <_ZN12MCP79410TimeD0Ev>:
MCP79410Time::~MCP79410Time() {
   d6a34:	b510      	push	{r4, lr}
}
   d6a36:	2114      	movs	r1, #20
MCP79410Time::~MCP79410Time() {
   d6a38:	4604      	mov	r4, r0
}
   d6a3a:	f004 f83d 	bl	daab8 <_ZdlPvj>
   d6a3e:	4620      	mov	r0, r4
   d6a40:	bd10      	pop	{r4, pc}

000d6a42 <_ZN12MCP79410SRAMD0Ev>:
MCP79410SRAM::~MCP79410SRAM() {
   d6a42:	b510      	push	{r4, lr}
}
   d6a44:	2108      	movs	r1, #8
MCP79410SRAM::~MCP79410SRAM() {
   d6a46:	4604      	mov	r4, r0
}
   d6a48:	f004 f836 	bl	daab8 <_ZdlPvj>
   d6a4c:	4620      	mov	r0, r4
   d6a4e:	bd10      	pop	{r4, pc}

000d6a50 <_ZN14MCP79410EEPROMD0Ev>:
MCP79410EEPROM::~MCP79410EEPROM() {
   d6a50:	b510      	push	{r4, lr}
}
   d6a52:	2108      	movs	r1, #8
MCP79410EEPROM::~MCP79410EEPROM() {
   d6a54:	4604      	mov	r4, r0
}
   d6a56:	f004 f82f 	bl	daab8 <_ZdlPvj>
   d6a5a:	4620      	mov	r0, r4
   d6a5c:	bd10      	pop	{r4, pc}

000d6a5e <_ZN8MCP79410D0Ev>:
MCP79410::~MCP79410() {
   d6a5e:	b510      	push	{r4, lr}
}
   d6a60:	211c      	movs	r1, #28
MCP79410::~MCP79410() {
   d6a62:	4604      	mov	r4, r0
}
   d6a64:	f004 f828 	bl	daab8 <_ZdlPvj>
   d6a68:	4620      	mov	r0, r4
   d6a6a:	bd10      	pop	{r4, pc}

000d6a6c <_ZN18MCP79410MemoryBase5eraseEv>:
bool MCP79410MemoryBase::erase() {
   d6a6c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	memset(buf, eraseValue(), sizeof(buf));
   d6a70:	6803      	ldr	r3, [r0, #0]
   d6a72:	68db      	ldr	r3, [r3, #12]
bool MCP79410MemoryBase::erase() {
   d6a74:	4604      	mov	r4, r0
	memset(buf, eraseValue(), sizeof(buf));
   d6a76:	4798      	blx	r3
   d6a78:	2210      	movs	r2, #16
   d6a7a:	4601      	mov	r1, r0
   d6a7c:	4668      	mov	r0, sp
   d6a7e:	f005 f87f 	bl	dbb80 <memset>
	size_t len = length();
   d6a82:	6823      	ldr	r3, [r4, #0]
   d6a84:	4620      	mov	r0, r4
   d6a86:	689b      	ldr	r3, [r3, #8]
   d6a88:	4798      	blx	r3
	size_t offset = 0;
   d6a8a:	2500      	movs	r5, #0
	size_t len = length();
   d6a8c:	4607      	mov	r7, r0
	bool bResult = false;
   d6a8e:	4628      	mov	r0, r5
	while(offset < len) {
   d6a90:	42bd      	cmp	r5, r7
   d6a92:	d20e      	bcs.n	d6ab2 <_ZN18MCP79410MemoryBase5eraseEv+0x46>
		if (count > (len - offset)) {
   d6a94:	1b7e      	subs	r6, r7, r5
		bResult = writeData(offset, buf, count);
   d6a96:	6823      	ldr	r3, [r4, #0]
		size_t count = sizeof(buf);
   d6a98:	2e10      	cmp	r6, #16
   d6a9a:	bf28      	it	cs
   d6a9c:	2610      	movcs	r6, #16
		bResult = writeData(offset, buf, count);
   d6a9e:	f8d3 8018 	ldr.w	r8, [r3, #24]
   d6aa2:	466a      	mov	r2, sp
   d6aa4:	4633      	mov	r3, r6
   d6aa6:	4629      	mov	r1, r5
   d6aa8:	4620      	mov	r0, r4
   d6aaa:	47c0      	blx	r8
		if (!bResult) {
   d6aac:	b108      	cbz	r0, d6ab2 <_ZN18MCP79410MemoryBase5eraseEv+0x46>
		offset += count;
   d6aae:	4435      	add	r5, r6
	while(offset < len) {
   d6ab0:	e7ee      	b.n	d6a90 <_ZN18MCP79410MemoryBase5eraseEv+0x24>
}
   d6ab2:	b004      	add	sp, #16
   d6ab4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d6ab8 <_ZN12MCP79410Time5clearEv>:
	rawYear = 0;
   d6ab8:	f44f 7380 	mov.w	r3, #256	; 0x100
   d6abc:	8143      	strh	r3, [r0, #10]
	rawDayOfMonth = 1;
   d6abe:	f240 1301 	movw	r3, #257	; 0x101
   d6ac2:	60c3      	str	r3, [r0, #12]
	rawSecond = 0;
   d6ac4:	2300      	movs	r3, #0
   d6ac6:	8203      	strh	r3, [r0, #16]
}
   d6ac8:	4770      	bx	lr
	...

000d6acc <_ZN12MCP79410TimeC1Ev>:
MCP79410Time::MCP79410Time() {
   d6acc:	b508      	push	{r3, lr}
   d6ace:	4b06      	ldr	r3, [pc, #24]	; (d6ae8 <_ZN12MCP79410TimeC1Ev+0x1c>)
   d6ad0:	6003      	str	r3, [r0, #0]
   d6ad2:	4b06      	ldr	r3, [pc, #24]	; (d6aec <_ZN12MCP79410TimeC1Ev+0x20>)
   d6ad4:	6043      	str	r3, [r0, #4]
   d6ad6:	f240 7304 	movw	r3, #1796	; 0x704
   d6ada:	8103      	strh	r3, [r0, #8]
   d6adc:	2300      	movs	r3, #0
   d6ade:	7443      	strb	r3, [r0, #17]
	clear();
   d6ae0:	f7ff ffea 	bl	d6ab8 <_ZN12MCP79410Time5clearEv>
}
   d6ae4:	bd08      	pop	{r3, pc}
   d6ae6:	bf00      	nop
   d6ae8:	000dc784 	.word	0x000dc784
   d6aec:	03020100 	.word	0x03020100

000d6af0 <_ZN12MCP79410Time8bcdToIntEh>:
	return ((value >> 4) & 0xf) * 10 + (value & 0xf);
   d6af0:	0903      	lsrs	r3, r0, #4
}
   d6af2:	220a      	movs	r2, #10
	return ((value >> 4) & 0xf) * 10 + (value & 0xf);
   d6af4:	f000 000f 	and.w	r0, r0, #15
}
   d6af8:	fb02 0003 	mla	r0, r2, r3, r0
   d6afc:	4770      	bx	lr

000d6afe <_ZNK12MCP79410Time7getYearEv>:
int MCP79410Time::getYear() const {
   d6afe:	b508      	push	{r3, lr}
	return bcdToInt(rawYear) + 2000;
   d6b00:	7a80      	ldrb	r0, [r0, #10]
   d6b02:	f7ff fff5 	bl	d6af0 <_ZN12MCP79410Time8bcdToIntEh>
}
   d6b06:	f500 60fa 	add.w	r0, r0, #2000	; 0x7d0
   d6b0a:	bd08      	pop	{r3, pc}

000d6b0c <_ZNK12MCP79410Time8getMonthEv>:
	return bcdToInt(rawMonth & 0x1f);
   d6b0c:	7ac0      	ldrb	r0, [r0, #11]
   d6b0e:	f000 001f 	and.w	r0, r0, #31
   d6b12:	f7ff bfed 	b.w	d6af0 <_ZN12MCP79410Time8bcdToIntEh>

000d6b16 <_ZNK12MCP79410Time13getDayOfMonthEv>:
	return bcdToInt(rawDayOfMonth & 0x3f);
   d6b16:	7b00      	ldrb	r0, [r0, #12]
   d6b18:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   d6b1c:	f7ff bfe8 	b.w	d6af0 <_ZN12MCP79410Time8bcdToIntEh>

000d6b20 <_ZNK12MCP79410Time7getHourEv>:
int MCP79410Time::getHour() const {
   d6b20:	b508      	push	{r3, lr}
	if (rawHour & 0x40) {
   d6b22:	7b81      	ldrb	r1, [r0, #14]
   d6b24:	064a      	lsls	r2, r1, #25
   d6b26:	d50d      	bpl.n	d6b44 <_ZNK12MCP79410Time7getHourEv+0x24>
		int hour12 = bcdToInt(rawHour & 0x1f);
   d6b28:	f001 001f 	and.w	r0, r1, #31
   d6b2c:	f7ff ffe0 	bl	d6af0 <_ZN12MCP79410Time8bcdToIntEh>
		if (rawHour & 0x20) {
   d6b30:	068b      	lsls	r3, r1, #26
   d6b32:	d503      	bpl.n	d6b3c <_ZNK12MCP79410Time7getHourEv+0x1c>
			if (hour12 == 12) {
   d6b34:	280c      	cmp	r0, #12
   d6b36:	d000      	beq.n	d6b3a <_ZNK12MCP79410Time7getHourEv+0x1a>
				return hour12 + 12;
   d6b38:	300c      	adds	r0, #12
}
   d6b3a:	bd08      	pop	{r3, pc}
				return 0;
   d6b3c:	280c      	cmp	r0, #12
   d6b3e:	bf08      	it	eq
   d6b40:	2000      	moveq	r0, #0
   d6b42:	e7fa      	b.n	d6b3a <_ZNK12MCP79410Time7getHourEv+0x1a>
}
   d6b44:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		return bcdToInt(rawHour & 0x3f);
   d6b48:	f001 003f 	and.w	r0, r1, #63	; 0x3f
   d6b4c:	f7ff bfd0 	b.w	d6af0 <_ZN12MCP79410Time8bcdToIntEh>

000d6b50 <_ZNK12MCP79410Time9getMinuteEv>:
	return bcdToInt(rawMinute & 0x7f);
   d6b50:	7bc0      	ldrb	r0, [r0, #15]
   d6b52:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   d6b56:	f7ff bfcb 	b.w	d6af0 <_ZN12MCP79410Time8bcdToIntEh>

000d6b5a <_ZNK12MCP79410Time9getSecondEv>:
	return bcdToInt(rawSecond & 0x7f);
   d6b5a:	7c00      	ldrb	r0, [r0, #16]
   d6b5c:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   d6b60:	f7ff bfc6 	b.w	d6af0 <_ZN12MCP79410Time8bcdToIntEh>

000d6b64 <_ZNK12MCP79410Time10toUnixTimeEv>:
time_t MCP79410Time::toUnixTime() const {
   d6b64:	b510      	push	{r4, lr}
   d6b66:	b08a      	sub	sp, #40	; 0x28
	memset(&tm, 0, sizeof(struct tm));
   d6b68:	2224      	movs	r2, #36	; 0x24
time_t MCP79410Time::toUnixTime() const {
   d6b6a:	4604      	mov	r4, r0
	memset(&tm, 0, sizeof(struct tm));
   d6b6c:	2100      	movs	r1, #0
   d6b6e:	a801      	add	r0, sp, #4
   d6b70:	f005 f806 	bl	dbb80 <memset>
	tm.tm_year = getYear() - 1900; // tm_year is years since 1900
   d6b74:	4620      	mov	r0, r4
   d6b76:	f7ff ffc2 	bl	d6afe <_ZNK12MCP79410Time7getYearEv>
   d6b7a:	f2a0 706c 	subw	r0, r0, #1900	; 0x76c
   d6b7e:	9006      	str	r0, [sp, #24]
	tm.tm_mon = getMonth() - 1; // tm_mon is 0-11!
   d6b80:	4620      	mov	r0, r4
   d6b82:	f7ff ffc3 	bl	d6b0c <_ZNK12MCP79410Time8getMonthEv>
   d6b86:	3801      	subs	r0, #1
   d6b88:	9005      	str	r0, [sp, #20]
	tm.tm_mday = getDayOfMonth(); // 1-31
   d6b8a:	4620      	mov	r0, r4
   d6b8c:	f7ff ffc3 	bl	d6b16 <_ZNK12MCP79410Time13getDayOfMonthEv>
   d6b90:	9004      	str	r0, [sp, #16]
	tm.tm_hour = getHour();
   d6b92:	4620      	mov	r0, r4
   d6b94:	f7ff ffc4 	bl	d6b20 <_ZNK12MCP79410Time7getHourEv>
   d6b98:	9003      	str	r0, [sp, #12]
	tm.tm_min = getMinute();
   d6b9a:	4620      	mov	r0, r4
   d6b9c:	f7ff ffd8 	bl	d6b50 <_ZNK12MCP79410Time9getMinuteEv>
   d6ba0:	9002      	str	r0, [sp, #8]
	tm.tm_sec = getSecond();
   d6ba2:	4620      	mov	r0, r4
   d6ba4:	f7ff ffd9 	bl	d6b5a <_ZNK12MCP79410Time9getSecondEv>
   d6ba8:	9001      	str	r0, [sp, #4]
	return mktime(&tm);
   d6baa:	a801      	add	r0, sp, #4
   d6bac:	f001 f84e 	bl	d7c4c <mktime>
}
   d6bb0:	b00a      	add	sp, #40	; 0x28
   d6bb2:	bd10      	pop	{r4, pc}

000d6bb4 <_ZN12MCP79410Time8intToBcdEi>:
	result = (uint8_t) (((value / 10) % 10) << 4);
   d6bb4:	210a      	movs	r1, #10
   d6bb6:	fb90 f2f1 	sdiv	r2, r0, r1
   d6bba:	fb92 f3f1 	sdiv	r3, r2, r1
   d6bbe:	fb01 2313 	mls	r3, r1, r3, r2
   d6bc2:	011b      	lsls	r3, r3, #4
   d6bc4:	b2db      	uxtb	r3, r3
	result |= (uint8_t) (value % 10);
   d6bc6:	fb01 0012 	mls	r0, r1, r2, r0
   d6bca:	4318      	orrs	r0, r3
}
   d6bcc:	b2c0      	uxtb	r0, r0
   d6bce:	4770      	bx	lr

000d6bd0 <_ZN12MCP79410Time7setYearEi>:
	rawYear = intToBcd(value % 100);
   d6bd0:	2364      	movs	r3, #100	; 0x64
void MCP79410Time::setYear(int value) {
   d6bd2:	b510      	push	{r4, lr}
   d6bd4:	4604      	mov	r4, r0
	rawYear = intToBcd(value % 100);
   d6bd6:	fb91 f0f3 	sdiv	r0, r1, r3
   d6bda:	fb00 1013 	mls	r0, r0, r3, r1
   d6bde:	f7ff ffe9 	bl	d6bb4 <_ZN12MCP79410Time8intToBcdEi>
   d6be2:	72a0      	strb	r0, [r4, #10]
}
   d6be4:	bd10      	pop	{r4, pc}

000d6be6 <_ZN12MCP79410Time8setMonthEi>:
void MCP79410Time::setMonth(int value) {
   d6be6:	b510      	push	{r4, lr}
   d6be8:	4604      	mov	r4, r0
	rawMonth = intToBcd(value);
   d6bea:	4608      	mov	r0, r1
   d6bec:	f7ff ffe2 	bl	d6bb4 <_ZN12MCP79410Time8intToBcdEi>
   d6bf0:	72e0      	strb	r0, [r4, #11]
}
   d6bf2:	bd10      	pop	{r4, pc}

000d6bf4 <_ZN12MCP79410Time13setDayOfMonthEi>:
void MCP79410Time::setDayOfMonth(int value) {
   d6bf4:	b510      	push	{r4, lr}
   d6bf6:	4604      	mov	r4, r0
	rawDayOfMonth |= intToBcd(value);
   d6bf8:	4608      	mov	r0, r1
   d6bfa:	f7ff ffdb 	bl	d6bb4 <_ZN12MCP79410Time8intToBcdEi>
	rawDayOfMonth &= ~0x3f;
   d6bfe:	7b23      	ldrb	r3, [r4, #12]
   d6c00:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
	rawDayOfMonth |= intToBcd(value);
   d6c04:	4318      	orrs	r0, r3
   d6c06:	7320      	strb	r0, [r4, #12]
}
   d6c08:	bd10      	pop	{r4, pc}

000d6c0a <_ZN12MCP79410Time12setDayOfWeekEi>:
void MCP79410Time::setDayOfWeek(int value) {
   d6c0a:	b510      	push	{r4, lr}
   d6c0c:	4604      	mov	r4, r0
	rawDayOfWeek |= intToBcd(value + 1);
   d6c0e:	1c48      	adds	r0, r1, #1
   d6c10:	f7ff ffd0 	bl	d6bb4 <_ZN12MCP79410Time8intToBcdEi>
	rawDayOfWeek &= ~0x7;
   d6c14:	7b63      	ldrb	r3, [r4, #13]
   d6c16:	f023 0307 	bic.w	r3, r3, #7
	rawDayOfWeek |= intToBcd(value + 1);
   d6c1a:	4318      	orrs	r0, r3
   d6c1c:	7360      	strb	r0, [r4, #13]
}
   d6c1e:	bd10      	pop	{r4, pc}

000d6c20 <_ZN12MCP79410Time7setHourEi>:
void MCP79410Time::setHour(int value) {
   d6c20:	b510      	push	{r4, lr}
   d6c22:	4604      	mov	r4, r0
	rawHour = intToBcd(value);
   d6c24:	4608      	mov	r0, r1
   d6c26:	f7ff ffc5 	bl	d6bb4 <_ZN12MCP79410Time8intToBcdEi>
   d6c2a:	73a0      	strb	r0, [r4, #14]
}
   d6c2c:	bd10      	pop	{r4, pc}

000d6c2e <_ZN12MCP79410Time9setMinuteEi>:
void MCP79410Time::setMinute(int value) {
   d6c2e:	b510      	push	{r4, lr}
   d6c30:	4604      	mov	r4, r0
	rawMinute = intToBcd(value);
   d6c32:	4608      	mov	r0, r1
   d6c34:	f7ff ffbe 	bl	d6bb4 <_ZN12MCP79410Time8intToBcdEi>
   d6c38:	73e0      	strb	r0, [r4, #15]
}
   d6c3a:	bd10      	pop	{r4, pc}

000d6c3c <_ZN12MCP79410Time9setSecondEi>:
void MCP79410Time::setSecond(int value) {
   d6c3c:	b510      	push	{r4, lr}
   d6c3e:	4604      	mov	r4, r0
	rawSecond |= intToBcd(value);
   d6c40:	4608      	mov	r0, r1
   d6c42:	f7ff ffb7 	bl	d6bb4 <_ZN12MCP79410Time8intToBcdEi>
	rawSecond &= ~0x7f;
   d6c46:	7c23      	ldrb	r3, [r4, #16]
   d6c48:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
	rawSecond |= intToBcd(value);
   d6c4c:	4318      	orrs	r0, r3
   d6c4e:	7420      	strb	r0, [r4, #16]
}
   d6c50:	bd10      	pop	{r4, pc}

000d6c52 <_ZN12MCP79410Time12fromUnixTimeEx>:
void MCP79410Time::fromUnixTime(time_t time) {
   d6c52:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d6c54:	4604      	mov	r4, r0
	struct tm *tm = gmtime(&time);
   d6c56:	4668      	mov	r0, sp
void MCP79410Time::fromUnixTime(time_t time) {
   d6c58:	e9cd 2300 	strd	r2, r3, [sp]
	struct tm *tm = gmtime(&time);
   d6c5c:	f004 ff56 	bl	dbb0c <gmtime>
   d6c60:	4605      	mov	r5, r0
	setYear(tm->tm_year);
   d6c62:	6941      	ldr	r1, [r0, #20]
   d6c64:	4620      	mov	r0, r4
   d6c66:	f7ff ffb3 	bl	d6bd0 <_ZN12MCP79410Time7setYearEi>
	setMonth(tm->tm_mon + 1);
   d6c6a:	6929      	ldr	r1, [r5, #16]
   d6c6c:	4620      	mov	r0, r4
   d6c6e:	3101      	adds	r1, #1
   d6c70:	f7ff ffb9 	bl	d6be6 <_ZN12MCP79410Time8setMonthEi>
	setDayOfMonth(tm->tm_mday);
   d6c74:	68e9      	ldr	r1, [r5, #12]
   d6c76:	4620      	mov	r0, r4
   d6c78:	f7ff ffbc 	bl	d6bf4 <_ZN12MCP79410Time13setDayOfMonthEi>
	setDayOfWeek(tm->tm_wday);
   d6c7c:	69a9      	ldr	r1, [r5, #24]
   d6c7e:	4620      	mov	r0, r4
   d6c80:	f7ff ffc3 	bl	d6c0a <_ZN12MCP79410Time12setDayOfWeekEi>
	setHour(tm->tm_hour); // tm_hour is 0-23
   d6c84:	68a9      	ldr	r1, [r5, #8]
   d6c86:	4620      	mov	r0, r4
   d6c88:	f7ff ffca 	bl	d6c20 <_ZN12MCP79410Time7setHourEi>
	setMinute(tm->tm_min); // tm_min is 0-59
   d6c8c:	6869      	ldr	r1, [r5, #4]
   d6c8e:	4620      	mov	r0, r4
   d6c90:	f7ff ffcd 	bl	d6c2e <_ZN12MCP79410Time9setMinuteEi>
	setSecond(tm->tm_sec < 60 ? tm->tm_sec : 59); // tm_sec is 0-61, inclusive, because of leap seconds.
   d6c94:	6829      	ldr	r1, [r5, #0]
   d6c96:	293b      	cmp	r1, #59	; 0x3b
   d6c98:	bfa8      	it	ge
   d6c9a:	213b      	movge	r1, #59	; 0x3b
   d6c9c:	4620      	mov	r0, r4
   d6c9e:	f7ff ffcd 	bl	d6c3c <_ZN12MCP79410Time9setSecondEi>
}
   d6ca2:	b003      	add	sp, #12
   d6ca4:	bd30      	pop	{r4, r5, pc}
	...

000d6ca8 <_ZN8MCP79410C1ER7TwoWire>:
MCP79410::MCP79410(TwoWire &wire) : wire(wire), sramObj(this), eepromObj(this) {
   d6ca8:	4a05      	ldr	r2, [pc, #20]	; (d6cc0 <_ZN8MCP79410C1ER7TwoWire+0x18>)
MCP79410MemoryBase::MCP79410MemoryBase(MCP79410 *parent) : parent(parent) {
   d6caa:	6100      	str	r0, [r0, #16]
MCP79410::MCP79410(TwoWire &wire) : wire(wire), sramObj(this), eepromObj(this) {
   d6cac:	e9c0 2100 	strd	r2, r1, [r0]
   d6cb0:	4a04      	ldr	r2, [pc, #16]	; (d6cc4 <_ZN8MCP79410C1ER7TwoWire+0x1c>)
   d6cb2:	6082      	str	r2, [r0, #8]
MCP79410SRAM::MCP79410SRAM(MCP79410 *parent) : MCP79410MemoryBase(parent) {
   d6cb4:	4a04      	ldr	r2, [pc, #16]	; (d6cc8 <_ZN8MCP79410C1ER7TwoWire+0x20>)
   d6cb6:	60c2      	str	r2, [r0, #12]
MCP79410EEPROM::MCP79410EEPROM(MCP79410 *parent) : MCP79410MemoryBase(parent) {
   d6cb8:	4a04      	ldr	r2, [pc, #16]	; (d6ccc <_ZN8MCP79410C1ER7TwoWire+0x24>)
MCP79410MemoryBase::MCP79410MemoryBase(MCP79410 *parent) : parent(parent) {
   d6cba:	6180      	str	r0, [r0, #24]
MCP79410EEPROM::MCP79410EEPROM(MCP79410 *parent) : MCP79410MemoryBase(parent) {
   d6cbc:	6142      	str	r2, [r0, #20]
}
   d6cbe:	4770      	bx	lr
   d6cc0:	000dc7b8 	.word	0x000dc7b8
   d6cc4:	03010000 	.word	0x03010000
   d6cc8:	000dc760 	.word	0x000dc760
   d6ccc:	000dc794 	.word	0x000dc794

000d6cd0 <_ZNK8MCP7941010deviceReadEhhPhj>:
	return deviceWriteRegisterByte(addr, value);
}



int MCP79410::deviceRead(uint8_t i2cAddr, uint8_t addr, uint8_t *buf, size_t bufLen) const {
   d6cd0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6cd4:	4604      	mov	r4, r0
   d6cd6:	460f      	mov	r7, r1
   d6cd8:	4690      	mov	r8, r2
   d6cda:	4699      	mov	r9, r3
	// log.trace("deviceRead i2cAddr=%02x addr=%02x bufLen=%u", i2cAddr, addr, bufLen);

	int stat = 0;
	size_t offset = 0;
   d6cdc:	2600      	movs	r6, #0

	while(offset < bufLen) {
   d6cde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d6ce0:	429e      	cmp	r6, r3
   d6ce2:	d231      	bcs.n	d6d48 <_ZNK8MCP7941010deviceReadEhhPhj+0x78>
		wire.beginTransmission(i2cAddr);
   d6ce4:	6860      	ldr	r0, [r4, #4]
   d6ce6:	4639      	mov	r1, r7
   d6ce8:	f001 fc32 	bl	d8550 <_ZN7TwoWire17beginTransmissionEh>
		wire.write(addr + offset);
   d6cec:	eb08 0106 	add.w	r1, r8, r6
   d6cf0:	6860      	ldr	r0, [r4, #4]
   d6cf2:	f7ff fd5f 	bl	d67b4 <_ZN7TwoWire5writeEj>
		stat = wire.endTransmission(false);
   d6cf6:	6860      	ldr	r0, [r4, #4]
   d6cf8:	2100      	movs	r1, #0
   d6cfa:	f001 fc48 	bl	d858e <_ZN7TwoWire15endTransmissionEh>
		if (stat == 0) {
   d6cfe:	4605      	mov	r5, r0
   d6d00:	b9d0      	cbnz	r0, d6d38 <_ZNK8MCP7941010deviceReadEhhPhj+0x68>
			// Maximum read is 32 because of the limitation of the Wire implementation
			size_t count = bufLen - offset;
   d6d02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
				count = 32;
			}

			// log.trace("deviceRead addr=%u count=%u", addr + offset, count);

			count = wire.requestFrom(i2cAddr, count, (uint8_t) true);
   d6d04:	6860      	ldr	r0, [r4, #4]
			size_t count = bufLen - offset;
   d6d06:	1b9a      	subs	r2, r3, r6
			count = wire.requestFrom(i2cAddr, count, (uint8_t) true);
   d6d08:	2a20      	cmp	r2, #32
   d6d0a:	f04f 0301 	mov.w	r3, #1
   d6d0e:	bf28      	it	cs
   d6d10:	2220      	movcs	r2, #32
   d6d12:	4639      	mov	r1, r7
   d6d14:	f001 fc07 	bl	d8526 <_ZN7TwoWire11requestFromEhjh>
   d6d18:	eb09 0b06 	add.w	fp, r9, r6
   d6d1c:	4605      	mov	r5, r0
			for(size_t ii = 0; ii < count; ii++) {
   d6d1e:	eb0b 0a00 	add.w	sl, fp, r0
   d6d22:	45da      	cmp	sl, fp
   d6d24:	d006      	beq.n	d6d34 <_ZNK8MCP7941010deviceReadEhhPhj+0x64>
				buf[ii + offset] = wire.read();
   d6d26:	6860      	ldr	r0, [r4, #4]
   d6d28:	6803      	ldr	r3, [r0, #0]
   d6d2a:	695b      	ldr	r3, [r3, #20]
   d6d2c:	4798      	blx	r3
   d6d2e:	f80b 0b01 	strb.w	r0, [fp], #1
			for(size_t ii = 0; ii < count; ii++) {
   d6d32:	e7f6      	b.n	d6d22 <_ZNK8MCP7941010deviceReadEhhPhj+0x52>
			}
			offset += count;
   d6d34:	442e      	add	r6, r5
	while(offset < bufLen) {
   d6d36:	e7d2      	b.n	d6cde <_ZNK8MCP7941010deviceReadEhhPhj+0xe>
		}
		else {
			log.info("deviceRead failed stat=%d", stat);
   d6d38:	4602      	mov	r2, r0
   d6d3a:	4904      	ldr	r1, [pc, #16]	; (d6d4c <_ZNK8MCP7941010deviceReadEhhPhj+0x7c>)
   d6d3c:	4804      	ldr	r0, [pc, #16]	; (d6d50 <_ZNK8MCP7941010deviceReadEhhPhj+0x80>)
   d6d3e:	f7fd fa5f 	bl	d4200 <_ZNK5spark6Logger4infoEPKcz>
			break;
		}
	}
	return stat;
}
   d6d42:	4628      	mov	r0, r5
   d6d44:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6d48:	2500      	movs	r5, #0
	return stat;
   d6d4a:	e7fa      	b.n	d6d42 <_ZNK8MCP7941010deviceReadEhhPhj+0x72>
   d6d4c:	000dc6b8 	.word	0x000dc6b8
   d6d50:	2003e5f0 	.word	0x2003e5f0

000d6d54 <_ZN12MCP79410SRAM8readDataEjPhj>:
bool MCP79410SRAM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d6d54:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if ((addr + dataLen) > length()) {
   d6d58:	eb01 0803 	add.w	r8, r1, r3
bool MCP79410SRAM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d6d5c:	461e      	mov	r6, r3
	if ((addr + dataLen) > length()) {
   d6d5e:	6803      	ldr	r3, [r0, #0]
   d6d60:	689b      	ldr	r3, [r3, #8]
bool MCP79410SRAM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d6d62:	4605      	mov	r5, r0
   d6d64:	460c      	mov	r4, r1
   d6d66:	4617      	mov	r7, r2
	if ((addr + dataLen) > length()) {
   d6d68:	4798      	blx	r3
   d6d6a:	4580      	cmp	r8, r0
   d6d6c:	d80d      	bhi.n	d6d8a <_ZN12MCP79410SRAM8readDataEjPhj+0x36>
	int stat = parent->deviceRead(MCP79410::REG_I2C_ADDR, MCP79410::REG_SRAM + addr, data, dataLen);
   d6d6e:	3420      	adds	r4, #32
   d6d70:	6868      	ldr	r0, [r5, #4]
   d6d72:	9600      	str	r6, [sp, #0]
   d6d74:	463b      	mov	r3, r7
   d6d76:	b2e2      	uxtb	r2, r4
   d6d78:	216f      	movs	r1, #111	; 0x6f
   d6d7a:	f7ff ffa9 	bl	d6cd0 <_ZNK8MCP7941010deviceReadEhhPhj>
	return (stat == 0);
   d6d7e:	fab0 f080 	clz	r0, r0
   d6d82:	0940      	lsrs	r0, r0, #5
}
   d6d84:	b002      	add	sp, #8
   d6d86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return false;
   d6d8a:	2000      	movs	r0, #0
   d6d8c:	e7fa      	b.n	d6d84 <_ZN12MCP79410SRAM8readDataEjPhj+0x30>

000d6d8e <_ZN14MCP79410EEPROM8readDataEjPhj>:
bool MCP79410EEPROM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d6d8e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if ((addr + dataLen) > length()) {
   d6d92:	eb01 0803 	add.w	r8, r1, r3
bool MCP79410EEPROM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d6d96:	461e      	mov	r6, r3
	if ((addr + dataLen) > length()) {
   d6d98:	6803      	ldr	r3, [r0, #0]
   d6d9a:	689b      	ldr	r3, [r3, #8]
bool MCP79410EEPROM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d6d9c:	4604      	mov	r4, r0
   d6d9e:	460d      	mov	r5, r1
   d6da0:	4617      	mov	r7, r2
	if ((addr + dataLen) > length()) {
   d6da2:	4798      	blx	r3
   d6da4:	4580      	cmp	r8, r0
   d6da6:	d80c      	bhi.n	d6dc2 <_ZN14MCP79410EEPROM8readDataEjPhj+0x34>
	int stat = parent->deviceRead(MCP79410::EEPROM_I2C_ADDR, addr, data, dataLen);
   d6da8:	6860      	ldr	r0, [r4, #4]
   d6daa:	9600      	str	r6, [sp, #0]
   d6dac:	463b      	mov	r3, r7
   d6dae:	b2ea      	uxtb	r2, r5
   d6db0:	2157      	movs	r1, #87	; 0x57
   d6db2:	f7ff ff8d 	bl	d6cd0 <_ZNK8MCP7941010deviceReadEhhPhj>
	return (stat == 0);
   d6db6:	fab0 f080 	clz	r0, r0
   d6dba:	0940      	lsrs	r0, r0, #5
}
   d6dbc:	b002      	add	sp, #8
   d6dbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return false;
   d6dc2:	2000      	movs	r0, #0
   d6dc4:	e7fa      	b.n	d6dbc <_ZN14MCP79410EEPROM8readDataEjPhj+0x2e>

000d6dc6 <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei.part.0>:
int MCP79410::deviceReadTime(uint8_t addr, MCP79410Time &time, int timeMode) const {
   d6dc6:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
		size_t numBytes = (timeMode == TIME_MODE_RTC) ? 7 : 6;
   d6dc8:	1e1e      	subs	r6, r3, #0
   d6dca:	bf0c      	ite	eq
   d6dcc:	2307      	moveq	r3, #7
   d6dce:	2306      	movne	r3, #6
		stat = deviceRead(REG_I2C_ADDR, addr, buf, numBytes);
   d6dd0:	9300      	str	r3, [sp, #0]
int MCP79410::deviceReadTime(uint8_t addr, MCP79410Time &time, int timeMode) const {
   d6dd2:	4614      	mov	r4, r2
		stat = deviceRead(REG_I2C_ADDR, addr, buf, numBytes);
   d6dd4:	ab02      	add	r3, sp, #8
   d6dd6:	460a      	mov	r2, r1
   d6dd8:	216f      	movs	r1, #111	; 0x6f
   d6dda:	f7ff ff79 	bl	d6cd0 <_ZNK8MCP7941010deviceReadEhhPhj>
		if (stat == 0) {
   d6dde:	4605      	mov	r5, r0
   d6de0:	b9a8      	cbnz	r0, d6e0e <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei.part.0+0x48>
			time.rawSecond = buf[0];
   d6de2:	f89d 3008 	ldrb.w	r3, [sp, #8]
   d6de6:	7423      	strb	r3, [r4, #16]
			time.rawMinute = buf[1];
   d6de8:	f89d 3009 	ldrb.w	r3, [sp, #9]
   d6dec:	73e3      	strb	r3, [r4, #15]
			time.rawHour = buf[2];
   d6dee:	f89d 300a 	ldrb.w	r3, [sp, #10]
   d6df2:	73a3      	strb	r3, [r4, #14]
			time.rawDayOfWeek = buf[3];
   d6df4:	f89d 300b 	ldrb.w	r3, [sp, #11]
   d6df8:	7363      	strb	r3, [r4, #13]
			time.rawDayOfMonth = buf[4];
   d6dfa:	f89d 300c 	ldrb.w	r3, [sp, #12]
   d6dfe:	7323      	strb	r3, [r4, #12]
			time.rawMonth = buf[5];
   d6e00:	f89d 300d 	ldrb.w	r3, [sp, #13]
   d6e04:	72e3      	strb	r3, [r4, #11]
			if (timeMode == TIME_MODE_RTC) {
   d6e06:	b92e      	cbnz	r6, d6e14 <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei.part.0+0x4e>
				time.rawYear = buf[6];
   d6e08:	f89d 300e 	ldrb.w	r3, [sp, #14]
   d6e0c:	72a3      	strb	r3, [r4, #10]
}
   d6e0e:	4628      	mov	r0, r5
   d6e10:	b004      	add	sp, #16
   d6e12:	bd70      	pop	{r4, r5, r6, pc}
				time.rawYear = MCP79410Time::intToBcd(Time.year());
   d6e14:	f003 fb66 	bl	da4e4 <_ZN9TimeClass4yearEv>
   d6e18:	f7ff fecc 	bl	d6bb4 <_ZN12MCP79410Time8intToBcdEi>
   d6e1c:	72a0      	strb	r0, [r4, #10]
	return stat;
   d6e1e:	e7f6      	b.n	d6e0e <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei.part.0+0x48>

000d6e20 <_ZNK8MCP7941022deviceReadRegisterByteEh>:
uint8_t MCP79410::deviceReadRegisterByte(uint8_t addr) const {
   d6e20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	if (deviceRead(REG_I2C_ADDR, addr, buf, 1) == 0) {
   d6e22:	2301      	movs	r3, #1
uint8_t MCP79410::deviceReadRegisterByte(uint8_t addr) const {
   d6e24:	460a      	mov	r2, r1
	if (deviceRead(REG_I2C_ADDR, addr, buf, 1) == 0) {
   d6e26:	9300      	str	r3, [sp, #0]
   d6e28:	216f      	movs	r1, #111	; 0x6f
   d6e2a:	ab03      	add	r3, sp, #12
   d6e2c:	f7ff ff50 	bl	d6cd0 <_ZNK8MCP7941010deviceReadEhhPhj>
   d6e30:	b920      	cbnz	r0, d6e3c <_ZNK8MCP7941022deviceReadRegisterByteEh+0x1c>
		return buf[0];
   d6e32:	f89d 000c 	ldrb.w	r0, [sp, #12]
}
   d6e36:	b005      	add	sp, #20
   d6e38:	f85d fb04 	ldr.w	pc, [sp], #4
		return 0;
   d6e3c:	2000      	movs	r0, #0
   d6e3e:	e7fa      	b.n	d6e36 <_ZNK8MCP7941022deviceReadRegisterByteEh+0x16>

000d6e40 <_ZNK8MCP7941020getOscillatorRunningEv>:
bool MCP79410::getOscillatorRunning() const {
   d6e40:	b508      	push	{r3, lr}
	return (deviceReadRegisterByte(REG_RTCWKDAY) & REG_RTCWKDAY_OSCRUN) != 0;
   d6e42:	2103      	movs	r1, #3
   d6e44:	f7ff ffec 	bl	d6e20 <_ZNK8MCP7941022deviceReadRegisterByteEh>
}
   d6e48:	f3c0 1040 	ubfx	r0, r0, #5, #1
   d6e4c:	bd08      	pop	{r3, pc}

000d6e4e <_ZNK8MCP7941010getRTCTimeER12MCP79410Time>:
bool MCP79410::getRTCTime(MCP79410Time &time) const {
   d6e4e:	b538      	push	{r3, r4, r5, lr}
   d6e50:	2300      	movs	r3, #0
   d6e52:	460c      	mov	r4, r1
   d6e54:	460a      	mov	r2, r1
   d6e56:	4619      	mov	r1, r3
   d6e58:	4605      	mov	r5, r0
	if (timeMode == TIME_MODE_RTC || timeMode == TIME_MODE_ALARM) {
   d6e5a:	f7ff ffb4 	bl	d6dc6 <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei.part.0>
	if (stat == 0) {
   d6e5e:	b930      	cbnz	r0, d6e6e <_ZNK8MCP7941010getRTCTimeER12MCP79410Time+0x20>
		if (time.rawYear > 0 && getOscillatorRunning()) {
   d6e60:	7aa3      	ldrb	r3, [r4, #10]
   d6e62:	b123      	cbz	r3, d6e6e <_ZNK8MCP7941010getRTCTimeER12MCP79410Time+0x20>
   d6e64:	4628      	mov	r0, r5
}
   d6e66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		if (time.rawYear > 0 && getOscillatorRunning()) {
   d6e6a:	f7ff bfe9 	b.w	d6e40 <_ZNK8MCP7941020getOscillatorRunningEv>
}
   d6e6e:	2000      	movs	r0, #0
   d6e70:	bd38      	pop	{r3, r4, r5, pc}

000d6e72 <_ZNK8MCP7941010getRTCTimeEv>:
time_t MCP79410::getRTCTime() const {
   d6e72:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d6e74:	4602      	mov	r2, r0
	MCP79410Time time;
   d6e76:	a801      	add	r0, sp, #4
   d6e78:	f7ff fe28 	bl	d6acc <_ZN12MCP79410TimeC1Ev>
	bool bResult = getRTCTime(time);
   d6e7c:	a901      	add	r1, sp, #4
   d6e7e:	4610      	mov	r0, r2
   d6e80:	f7ff ffe5 	bl	d6e4e <_ZNK8MCP7941010getRTCTimeER12MCP79410Time>
	if (bResult) {
   d6e84:	b128      	cbz	r0, d6e92 <_ZNK8MCP7941010getRTCTimeEv+0x20>
		return time.toUnixTime();
   d6e86:	a801      	add	r0, sp, #4
   d6e88:	f7ff fe6c 	bl	d6b64 <_ZNK12MCP79410Time10toUnixTimeEv>
}
   d6e8c:	b007      	add	sp, #28
   d6e8e:	f85d fb04 	ldr.w	pc, [sp], #4
		return 0;
   d6e92:	2000      	movs	r0, #0
   d6e94:	4601      	mov	r1, r0
   d6e96:	e7f9      	b.n	d6e8c <_ZNK8MCP7941010getRTCTimeEv+0x1a>

000d6e98 <_ZN8MCP794105setupEv>:
void MCP79410::setup() {
   d6e98:	b5d0      	push	{r4, r6, r7, lr}
   d6e9a:	4604      	mov	r4, r0
   d6e9c:	b086      	sub	sp, #24
	wire.begin();
   d6e9e:	6840      	ldr	r0, [r0, #4]
   d6ea0:	f001 fb24 	bl	d84ec <_ZN7TwoWire5beginEv>
	if (!Time.isValid()) {
   d6ea4:	f003 faf0 	bl	da488 <_ZN9TimeClass7isValidEv>
   d6ea8:	b9e8      	cbnz	r0, d6ee6 <_ZN8MCP794105setupEv+0x4e>
		if ((timeSyncMode & TIME_SYNC_RTC_TO_TIME) != 0) {
   d6eaa:	7ae3      	ldrb	r3, [r4, #11]
   d6eac:	079b      	lsls	r3, r3, #30
   d6eae:	d51a      	bpl.n	d6ee6 <_ZN8MCP794105setupEv+0x4e>
			time_t rtcTime = getRTCTime();
   d6eb0:	4620      	mov	r0, r4
   d6eb2:	f7ff ffde 	bl	d6e72 <_ZNK8MCP7941010getRTCTimeEv>
   d6eb6:	4606      	mov	r6, r0
   d6eb8:	460f      	mov	r7, r1
			if (rtcTime != 0) {
   d6eba:	ea56 0307 	orrs.w	r3, r6, r7
   d6ebe:	d012      	beq.n	d6ee6 <_ZN8MCP794105setupEv+0x4e>
				Time.setTime(rtcTime);
   d6ec0:	f003 f9e8 	bl	da294 <_ZN9TimeClass7setTimeEx>
				log.info("set Time from RTC %s", Time.format(rtcTime, TIME_FORMAT_DEFAULT).c_str());
   d6ec4:	4b0a      	ldr	r3, [pc, #40]	; (d6ef0 <_ZN8MCP794105setupEv+0x58>)
   d6ec6:	490b      	ldr	r1, [pc, #44]	; (d6ef4 <_ZN8MCP794105setupEv+0x5c>)
   d6ec8:	681b      	ldr	r3, [r3, #0]
   d6eca:	9300      	str	r3, [sp, #0]
   d6ecc:	4632      	mov	r2, r6
   d6ece:	463b      	mov	r3, r7
   d6ed0:	a802      	add	r0, sp, #8
   d6ed2:	f003 fa97 	bl	da404 <_ZN9TimeClass6formatExPKc>
   d6ed6:	4808      	ldr	r0, [pc, #32]	; (d6ef8 <_ZN8MCP794105setupEv+0x60>)
   d6ed8:	9a02      	ldr	r2, [sp, #8]
   d6eda:	4908      	ldr	r1, [pc, #32]	; (d6efc <_ZN8MCP794105setupEv+0x64>)
   d6edc:	f7fd f990 	bl	d4200 <_ZNK5spark6Logger4infoEPKcz>
   d6ee0:	a802      	add	r0, sp, #8
   d6ee2:	f002 ffc6 	bl	d9e72 <_ZN6StringD1Ev>
	setupDone = true;
   d6ee6:	2301      	movs	r3, #1
   d6ee8:	7223      	strb	r3, [r4, #8]
}
   d6eea:	b006      	add	sp, #24
   d6eec:	bdd0      	pop	{r4, r6, r7, pc}
   d6eee:	bf00      	nop
   d6ef0:	2003e290 	.word	0x2003e290
   d6ef4:	2003e690 	.word	0x2003e690
   d6ef8:	2003e5f0 	.word	0x2003e5f0
   d6efc:	000dc6d2 	.word	0x000dc6d2

000d6f00 <_ZN8MCP7941011deviceWriteEhhPKhj>:

int MCP79410::deviceWrite(uint8_t i2cAddr, uint8_t addr, const uint8_t *buf, size_t bufLen) {
   d6f00:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6f04:	4606      	mov	r6, r0
   d6f06:	4688      	mov	r8, r1
   d6f08:	4691      	mov	r9, r2
   d6f0a:	469a      	mov	sl, r3
	// log.trace("deviceWrite i2cAddr=%02x addr=%02x bufLen=%u", i2cAddr, addr, bufLen);

	int stat = 0;
	size_t offset = 0;
   d6f0c:	2500      	movs	r5, #0

	while(offset < bufLen) {
   d6f0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d6f10:	429d      	cmp	r5, r3
   d6f12:	d229      	bcs.n	d6f68 <_ZN8MCP7941011deviceWriteEhhPKhj+0x68>
		wire.beginTransmission(i2cAddr);
   d6f14:	6870      	ldr	r0, [r6, #4]
   d6f16:	4641      	mov	r1, r8
   d6f18:	f001 fb1a 	bl	d8550 <_ZN7TwoWire17beginTransmissionEh>
		wire.write(addr + offset);
   d6f1c:	6870      	ldr	r0, [r6, #4]
   d6f1e:	eb09 0105 	add.w	r1, r9, r5
   d6f22:	f7ff fc47 	bl	d67b4 <_ZN7TwoWire5writeEj>

		// Maximum write is 31, not 32, because of the address byte
		size_t count = bufLen - offset;
   d6f26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d6f28:	1b5f      	subs	r7, r3, r5
		if (count > 31) {
   d6f2a:	2f1f      	cmp	r7, #31
   d6f2c:	bf28      	it	cs
   d6f2e:	271f      	movcs	r7, #31
			count = 31;
		}

		// log.trace("deviceWrite addr=%u count=%u", addr + offset, count);

		for(size_t ii = 0; ii < count; ii++) {
   d6f30:	eb0a 0405 	add.w	r4, sl, r5
   d6f34:	eb07 0b04 	add.w	fp, r7, r4
			wire.write(buf[ii + offset]);
   d6f38:	6870      	ldr	r0, [r6, #4]
   d6f3a:	f814 1b01 	ldrb.w	r1, [r4], #1
   d6f3e:	6802      	ldr	r2, [r0, #0]
   d6f40:	6892      	ldr	r2, [r2, #8]
   d6f42:	4790      	blx	r2
		for(size_t ii = 0; ii < count; ii++) {
   d6f44:	45a3      	cmp	fp, r4
   d6f46:	d1f7      	bne.n	d6f38 <_ZN8MCP7941011deviceWriteEhhPKhj+0x38>
		}

		stat = wire.endTransmission(true);
   d6f48:	6870      	ldr	r0, [r6, #4]
   d6f4a:	2101      	movs	r1, #1
   d6f4c:	f001 fb1f 	bl	d858e <_ZN7TwoWire15endTransmissionEh>
		if (stat != 0) {
   d6f50:	4604      	mov	r4, r0
   d6f52:	b138      	cbz	r0, d6f64 <_ZN8MCP7941011deviceWriteEhhPKhj+0x64>
			log.info("deviceWrite failed stat=%d", stat);
   d6f54:	4602      	mov	r2, r0
   d6f56:	4905      	ldr	r1, [pc, #20]	; (d6f6c <_ZN8MCP7941011deviceWriteEhhPKhj+0x6c>)
   d6f58:	4805      	ldr	r0, [pc, #20]	; (d6f70 <_ZN8MCP7941011deviceWriteEhhPKhj+0x70>)
   d6f5a:	f7fd f951 	bl	d4200 <_ZNK5spark6Logger4infoEPKcz>

		offset += count;
	}

	return stat;
}
   d6f5e:	4620      	mov	r0, r4
   d6f60:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		offset += count;
   d6f64:	443d      	add	r5, r7
	while(offset < bufLen) {
   d6f66:	e7d2      	b.n	d6f0e <_ZN8MCP7941011deviceWriteEhhPKhj+0xe>
   d6f68:	2400      	movs	r4, #0
	return stat;
   d6f6a:	e7f8      	b.n	d6f5e <_ZN8MCP7941011deviceWriteEhhPKhj+0x5e>
   d6f6c:	000dc6e7 	.word	0x000dc6e7
   d6f70:	2003e5f0 	.word	0x2003e5f0

000d6f74 <_ZN12MCP79410SRAM9writeDataEjPKhj>:
bool MCP79410SRAM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d6f74:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if ((addr + dataLen) > length()) {
   d6f78:	eb01 0803 	add.w	r8, r1, r3
bool MCP79410SRAM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d6f7c:	461e      	mov	r6, r3
	if ((addr + dataLen) > length()) {
   d6f7e:	6803      	ldr	r3, [r0, #0]
   d6f80:	689b      	ldr	r3, [r3, #8]
bool MCP79410SRAM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d6f82:	4605      	mov	r5, r0
   d6f84:	460c      	mov	r4, r1
   d6f86:	4617      	mov	r7, r2
	if ((addr + dataLen) > length()) {
   d6f88:	4798      	blx	r3
   d6f8a:	4580      	cmp	r8, r0
   d6f8c:	d80d      	bhi.n	d6faa <_ZN12MCP79410SRAM9writeDataEjPKhj+0x36>
	int stat = parent->deviceWrite(MCP79410::REG_I2C_ADDR, MCP79410::REG_SRAM + addr, data, dataLen);
   d6f8e:	3420      	adds	r4, #32
   d6f90:	6868      	ldr	r0, [r5, #4]
   d6f92:	9600      	str	r6, [sp, #0]
   d6f94:	463b      	mov	r3, r7
   d6f96:	b2e2      	uxtb	r2, r4
   d6f98:	216f      	movs	r1, #111	; 0x6f
   d6f9a:	f7ff ffb1 	bl	d6f00 <_ZN8MCP7941011deviceWriteEhhPKhj>
	return (stat == 0);
   d6f9e:	fab0 f080 	clz	r0, r0
   d6fa2:	0940      	lsrs	r0, r0, #5
}
   d6fa4:	b002      	add	sp, #8
   d6fa6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return false;
   d6faa:	2000      	movs	r0, #0
   d6fac:	e7fa      	b.n	d6fa4 <_ZN12MCP79410SRAM9writeDataEjPKhj+0x30>

000d6fae <_ZN8MCP7941018deviceWriteRTCTimeEhRK12MCP79410Time>:
int MCP79410::deviceWriteRTCTime(uint8_t addr, const MCP79410Time &time) {
   d6fae:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	buf[0] = time.rawSecond;
   d6fb0:	7c13      	ldrb	r3, [r2, #16]
   d6fb2:	f88d 3008 	strb.w	r3, [sp, #8]
	buf[1] = time.rawMinute;
   d6fb6:	7bd3      	ldrb	r3, [r2, #15]
   d6fb8:	f88d 3009 	strb.w	r3, [sp, #9]
	buf[2] = time.rawHour;
   d6fbc:	7b93      	ldrb	r3, [r2, #14]
   d6fbe:	f88d 300a 	strb.w	r3, [sp, #10]
	buf[3] = time.rawDayOfWeek;
   d6fc2:	7b53      	ldrb	r3, [r2, #13]
   d6fc4:	f88d 300b 	strb.w	r3, [sp, #11]
	buf[4] = time.rawDayOfMonth;
   d6fc8:	7b13      	ldrb	r3, [r2, #12]
   d6fca:	f88d 300c 	strb.w	r3, [sp, #12]
	buf[5] = time.rawMonth;
   d6fce:	7ad3      	ldrb	r3, [r2, #11]
   d6fd0:	f88d 300d 	strb.w	r3, [sp, #13]
	buf[6] = time.rawYear;
   d6fd4:	7a93      	ldrb	r3, [r2, #10]
   d6fd6:	f88d 300e 	strb.w	r3, [sp, #14]
	return deviceWrite(REG_I2C_ADDR, addr, buf, sizeof(buf));
   d6fda:	2307      	movs	r3, #7
   d6fdc:	9300      	str	r3, [sp, #0]
   d6fde:	460a      	mov	r2, r1
   d6fe0:	ab02      	add	r3, sp, #8
   d6fe2:	216f      	movs	r1, #111	; 0x6f
   d6fe4:	f7ff ff8c 	bl	d6f00 <_ZN8MCP7941011deviceWriteEhhPKhj>
}
   d6fe8:	b005      	add	sp, #20
   d6fea:	f85d fb04 	ldr.w	pc, [sp], #4

000d6fee <_ZN8MCP7941010setRTCTimeEx>:
bool MCP79410::setRTCTime(time_t unixTime) {
   d6fee:	b510      	push	{r4, lr}
   d6ff0:	b088      	sub	sp, #32
   d6ff2:	4604      	mov	r4, r0
	MCP79410Time time;
   d6ff4:	a803      	add	r0, sp, #12
bool MCP79410::setRTCTime(time_t unixTime) {
   d6ff6:	9301      	str	r3, [sp, #4]
	MCP79410Time time;
   d6ff8:	f7ff fd68 	bl	d6acc <_ZN12MCP79410TimeC1Ev>
	time.fromUnixTime(unixTime);
   d6ffc:	9b01      	ldr	r3, [sp, #4]
   d6ffe:	a803      	add	r0, sp, #12
   d7000:	f7ff fe27 	bl	d6c52 <_ZN12MCP79410Time12fromUnixTimeEx>
	time.rawSecond |= REG_DATE_RTCSEC_ST;
   d7004:	f89d 301c 	ldrb.w	r3, [sp, #28]
	if (batteryEnable) {
   d7008:	7aa2      	ldrb	r2, [r4, #10]
	time.rawSecond |= REG_DATE_RTCSEC_ST;
   d700a:	f063 037f 	orn	r3, r3, #127	; 0x7f
   d700e:	f88d 301c 	strb.w	r3, [sp, #28]
	if (batteryEnable) {
   d7012:	f89d 3019 	ldrb.w	r3, [sp, #25]
   d7016:	b16a      	cbz	r2, d7034 <_ZN8MCP7941010setRTCTimeEx+0x46>
		time.rawDayOfWeek |= REG_RTCWKDAY_VBATEN;
   d7018:	f043 0308 	orr.w	r3, r3, #8
	return deviceWriteRTCTime(REG_DATE_TIME, time) == 0;
   d701c:	aa03      	add	r2, sp, #12
   d701e:	2100      	movs	r1, #0
   d7020:	4620      	mov	r0, r4
   d7022:	f88d 3019 	strb.w	r3, [sp, #25]
   d7026:	f7ff ffc2 	bl	d6fae <_ZN8MCP7941018deviceWriteRTCTimeEhRK12MCP79410Time>
}
   d702a:	fab0 f080 	clz	r0, r0
   d702e:	0940      	lsrs	r0, r0, #5
   d7030:	b008      	add	sp, #32
   d7032:	bd10      	pop	{r4, pc}
		time.rawDayOfWeek &= ~REG_RTCWKDAY_VBATEN;
   d7034:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
   d7038:	e7f0      	b.n	d701c <_ZN8MCP7941010setRTCTimeEx+0x2e>
	...

000d703c <_ZN8MCP7941015setRTCFromCloudEv>:
bool MCP79410::setRTCFromCloud() {
   d703c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d703e:	b087      	sub	sp, #28
   d7040:	4605      	mov	r5, r0
	if (Time.isValid()) {
   d7042:	f003 fa21 	bl	da488 <_ZN9TimeClass7isValidEv>
   d7046:	4604      	mov	r4, r0
   d7048:	b1e8      	cbz	r0, d7086 <_ZN8MCP7941015setRTCFromCloudEv+0x4a>
		time_t now = Time.now();
   d704a:	f003 fa3a 	bl	da4c2 <_ZN9TimeClass3nowEv>
   d704e:	17c7      	asrs	r7, r0, #31
		bResult = setRTCTime(now);
   d7050:	4602      	mov	r2, r0
		time_t now = Time.now();
   d7052:	4606      	mov	r6, r0
		bResult = setRTCTime(now);
   d7054:	463b      	mov	r3, r7
   d7056:	4628      	mov	r0, r5
   d7058:	f7ff ffc9 	bl	d6fee <_ZN8MCP7941010setRTCTimeEx>
		log.info("set RTC from cloud %s", Time.format(now, TIME_FORMAT_DEFAULT).c_str());
   d705c:	4b0c      	ldr	r3, [pc, #48]	; (d7090 <_ZN8MCP7941015setRTCFromCloudEv+0x54>)
   d705e:	490d      	ldr	r1, [pc, #52]	; (d7094 <_ZN8MCP7941015setRTCFromCloudEv+0x58>)
   d7060:	681b      	ldr	r3, [r3, #0]
   d7062:	9300      	str	r3, [sp, #0]
   d7064:	4632      	mov	r2, r6
   d7066:	463b      	mov	r3, r7
		bResult = setRTCTime(now);
   d7068:	4604      	mov	r4, r0
		log.info("set RTC from cloud %s", Time.format(now, TIME_FORMAT_DEFAULT).c_str());
   d706a:	a802      	add	r0, sp, #8
   d706c:	f003 f9ca 	bl	da404 <_ZN9TimeClass6formatExPKc>
   d7070:	4809      	ldr	r0, [pc, #36]	; (d7098 <_ZN8MCP7941015setRTCFromCloudEv+0x5c>)
   d7072:	9a02      	ldr	r2, [sp, #8]
   d7074:	4909      	ldr	r1, [pc, #36]	; (d709c <_ZN8MCP7941015setRTCFromCloudEv+0x60>)
   d7076:	f7fd f8c3 	bl	d4200 <_ZNK5spark6Logger4infoEPKcz>
   d707a:	a802      	add	r0, sp, #8
   d707c:	f002 fef9 	bl	d9e72 <_ZN6StringD1Ev>
}
   d7080:	4620      	mov	r0, r4
   d7082:	b007      	add	sp, #28
   d7084:	bdf0      	pop	{r4, r5, r6, r7, pc}
		log.info("cloud time not valid");
   d7086:	4906      	ldr	r1, [pc, #24]	; (d70a0 <_ZN8MCP7941015setRTCFromCloudEv+0x64>)
   d7088:	4803      	ldr	r0, [pc, #12]	; (d7098 <_ZN8MCP7941015setRTCFromCloudEv+0x5c>)
   d708a:	f7fd f8b9 	bl	d4200 <_ZNK5spark6Logger4infoEPKcz>
   d708e:	e7f7      	b.n	d7080 <_ZN8MCP7941015setRTCFromCloudEv+0x44>
   d7090:	2003e290 	.word	0x2003e290
   d7094:	2003e690 	.word	0x2003e690
   d7098:	2003e5f0 	.word	0x2003e5f0
   d709c:	000dc702 	.word	0x000dc702
   d70a0:	000dc718 	.word	0x000dc718

000d70a4 <_ZN8MCP794104loopEv>:
void MCP79410::loop() {
   d70a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (!timeSet) {
   d70a6:	7a45      	ldrb	r5, [r0, #9]
void MCP79410::loop() {
   d70a8:	4604      	mov	r4, r0
	if (!timeSet) {
   d70aa:	b99d      	cbnz	r5, d70d4 <_ZN8MCP794104loopEv+0x30>
		if (Time.isValid()) {
   d70ac:	f003 f9ec 	bl	da488 <_ZN9TimeClass7isValidEv>
   d70b0:	b180      	cbz	r0, d70d4 <_ZN8MCP794104loopEv+0x30>
        tm = 0;
   d70b2:	2200      	movs	r2, #0
   d70b4:	2300      	movs	r3, #0
        return spark_sync_time_last(nullptr, &tm);
   d70b6:	4669      	mov	r1, sp
   d70b8:	4628      	mov	r0, r5
        tm = 0;
   d70ba:	e9cd 2300 	strd	r2, r3, [sp]
        return spark_sync_time_last(nullptr, &tm);
   d70be:	f000 fced 	bl	d7a9c <spark_sync_time_last>
			if (lastSync != 0) {
   d70c2:	b138      	cbz	r0, d70d4 <_ZN8MCP794104loopEv+0x30>
				if ((timeSyncMode & TIME_SYNC_CLOUD_TO_RTC) != 0) {
   d70c4:	7ae3      	ldrb	r3, [r4, #11]
   d70c6:	07db      	lsls	r3, r3, #31
   d70c8:	d502      	bpl.n	d70d0 <_ZN8MCP794104loopEv+0x2c>
					setRTCFromCloud();
   d70ca:	4620      	mov	r0, r4
   d70cc:	f7ff ffb6 	bl	d703c <_ZN8MCP7941015setRTCFromCloudEv>
				timeSet = true;
   d70d0:	2301      	movs	r3, #1
   d70d2:	7263      	strb	r3, [r4, #9]
}
   d70d4:	b003      	add	sp, #12
   d70d6:	bd30      	pop	{r4, r5, pc}

000d70d8 <_ZN8MCP7941013waitForEEPROMEv>:
	}

	return stat;
}

void MCP79410::waitForEEPROM() {
   d70d8:	b538      	push	{r3, r4, r5, lr}
   d70da:	4604      	mov	r4, r0
   d70dc:	2532      	movs	r5, #50	; 0x32
	for(size_t tries = 0; tries < 50; tries++) {
		wire.beginTransmission(EEPROM_I2C_ADDR);
   d70de:	6860      	ldr	r0, [r4, #4]
   d70e0:	2157      	movs	r1, #87	; 0x57
   d70e2:	f001 fa35 	bl	d8550 <_ZN7TwoWire17beginTransmissionEh>
		int stat = wire.endTransmission(true);
   d70e6:	6860      	ldr	r0, [r4, #4]
   d70e8:	2101      	movs	r1, #1
   d70ea:	f001 fa50 	bl	d858e <_ZN7TwoWire15endTransmissionEh>
		if (stat == 0) {
   d70ee:	b108      	cbz	r0, d70f4 <_ZN8MCP7941013waitForEEPROMEv+0x1c>
	for(size_t tries = 0; tries < 50; tries++) {
   d70f0:	3d01      	subs	r5, #1
   d70f2:	d1f4      	bne.n	d70de <_ZN8MCP7941013waitForEEPROMEv+0x6>
			// log.trace("deviceWriteEEPROM got ack after %u tries", tries);
			break;
		}
	}
}
   d70f4:	bd38      	pop	{r3, r4, r5, pc}
	...

000d70f8 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj>:
int MCP79410::deviceWriteEEPROM(uint8_t addr, const uint8_t *buf, size_t bufLen) {
   d70f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d70fc:	4604      	mov	r4, r0
   d70fe:	460f      	mov	r7, r1
   d7100:	4616      	mov	r6, r2
   d7102:	eb02 0803 	add.w	r8, r2, r3
	while(offset < bufLen) {
   d7106:	45b0      	cmp	r8, r6
   d7108:	d020      	beq.n	d714c <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x54>
		wire.beginTransmission(EEPROM_I2C_ADDR);
   d710a:	6860      	ldr	r0, [r4, #4]
   d710c:	2157      	movs	r1, #87	; 0x57
   d710e:	f001 fa1f 	bl	d8550 <_ZN7TwoWire17beginTransmissionEh>
		wire.write(addr + offset);
   d7112:	4639      	mov	r1, r7
   d7114:	6860      	ldr	r0, [r4, #4]
   d7116:	f7ff fb4d 	bl	d67b4 <_ZN7TwoWire5writeEj>
			wire.write(buf[ii + offset]);
   d711a:	6860      	ldr	r0, [r4, #4]
   d711c:	f816 1b01 	ldrb.w	r1, [r6], #1
   d7120:	6803      	ldr	r3, [r0, #0]
   d7122:	689b      	ldr	r3, [r3, #8]
   d7124:	4798      	blx	r3
		stat = wire.endTransmission(true);
   d7126:	6860      	ldr	r0, [r4, #4]
   d7128:	2101      	movs	r1, #1
   d712a:	f001 fa30 	bl	d858e <_ZN7TwoWire15endTransmissionEh>
		if (stat != 0) {
   d712e:	3701      	adds	r7, #1
   d7130:	4605      	mov	r5, r0
   d7132:	b138      	cbz	r0, d7144 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x4c>
			log.info("deviceWriteEEPROM failed stat=%d", stat);
   d7134:	4602      	mov	r2, r0
   d7136:	4906      	ldr	r1, [pc, #24]	; (d7150 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x58>)
   d7138:	4806      	ldr	r0, [pc, #24]	; (d7154 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x5c>)
   d713a:	f7fd f861 	bl	d4200 <_ZNK5spark6Logger4infoEPKcz>
}
   d713e:	4628      	mov	r0, r5
   d7140:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		waitForEEPROM();
   d7144:	4620      	mov	r0, r4
   d7146:	f7ff ffc7 	bl	d70d8 <_ZN8MCP7941013waitForEEPROMEv>
	while(offset < bufLen) {
   d714a:	e7dc      	b.n	d7106 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0xe>
   d714c:	2500      	movs	r5, #0
	return stat;
   d714e:	e7f6      	b.n	d713e <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x46>
   d7150:	000dc72d 	.word	0x000dc72d
   d7154:	2003e5f0 	.word	0x2003e5f0

000d7158 <_ZN14MCP79410EEPROM9writeDataEjPKhj>:
bool MCP79410EEPROM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d7158:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if ((addr + dataLen) > length()) {
   d715a:	18cf      	adds	r7, r1, r3
bool MCP79410EEPROM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d715c:	461e      	mov	r6, r3
	if ((addr + dataLen) > length()) {
   d715e:	6803      	ldr	r3, [r0, #0]
bool MCP79410EEPROM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d7160:	9201      	str	r2, [sp, #4]
	if ((addr + dataLen) > length()) {
   d7162:	689b      	ldr	r3, [r3, #8]
bool MCP79410EEPROM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d7164:	4604      	mov	r4, r0
   d7166:	460d      	mov	r5, r1
	if ((addr + dataLen) > length()) {
   d7168:	4798      	blx	r3
   d716a:	4287      	cmp	r7, r0
   d716c:	d80a      	bhi.n	d7184 <_ZN14MCP79410EEPROM9writeDataEjPKhj+0x2c>
	int stat = parent->deviceWriteEEPROM(addr, data, dataLen);
   d716e:	9a01      	ldr	r2, [sp, #4]
   d7170:	6860      	ldr	r0, [r4, #4]
   d7172:	4633      	mov	r3, r6
   d7174:	b2e9      	uxtb	r1, r5
   d7176:	f7ff ffbf 	bl	d70f8 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj>
	return (stat == 0);
   d717a:	fab0 f080 	clz	r0, r0
   d717e:	0940      	lsrs	r0, r0, #5
}
   d7180:	b003      	add	sp, #12
   d7182:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return false;
   d7184:	2000      	movs	r0, #0
   d7186:	e7fb      	b.n	d7180 <_ZN14MCP79410EEPROM9writeDataEjPKhj+0x28>

000d7188 <_GLOBAL__sub_I__ZN18MCP79410MemoryBaseC2EP8MCP79410>:
        name_(name) {
   d7188:	4b01      	ldr	r3, [pc, #4]	; (d7190 <_GLOBAL__sub_I__ZN18MCP79410MemoryBaseC2EP8MCP79410+0x8>)
   d718a:	4a02      	ldr	r2, [pc, #8]	; (d7194 <_GLOBAL__sub_I__ZN18MCP79410MemoryBaseC2EP8MCP79410+0xc>)
   d718c:	601a      	str	r2, [r3, #0]
}
   d718e:	4770      	bx	lr
   d7190:	2003e5f0 	.word	0x2003e5f0
   d7194:	000dc74e 	.word	0x000dc74e

000d7198 <_ZN6I2Cdev9readBytesEhhhPht>:
 * @param length Number of bytes to read
 * @param data Buffer to store read data in
 * @param timeout Optional read timeout in milliseconds (0 to disable, leave off to use default class value in I2Cdev::readTimeout)
 * @return Number of bytes read (-1 indicates failure)
 */
int8_t I2Cdev::readBytes(uint8_t devAddr, uint8_t regAddr, uint8_t length, uint8_t *data, uint16_t timeout) {
   d7198:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d719c:	4616      	mov	r6, r2
   d719e:	469b      	mov	fp, r3
   d71a0:	f8bd 8030 	ldrh.w	r8, [sp, #48]	; 0x30
   d71a4:	4607      	mov	r7, r0
   d71a6:	468a      	mov	sl, r1
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d71a8:	f000 f9ee 	bl	d7588 <HAL_Timer_Get_Milli_Seconds>
max (T a, U b) { return ((a)>(b)?(a):(b)); }

template <typename T, typename U>
static inline
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }
   d71ac:	2e20      	cmp	r6, #32
   d71ae:	4633      	mov	r3, r6
            // Adds official support for repeated start condition, yay!

            // I2C/TWI subsystem uses internal buffer that breaks with large data requests
            // so if user requests more than BUFFER_LENGTH bytes, we have to do it in
            // smaller chunks instead of all at once
            for (uint8_t k = 0; k < length; k += min(length, BUFFER_LENGTH)) {
   d71b0:	f04f 0500 	mov.w	r5, #0
   d71b4:	bfa8      	it	ge
   d71b6:	2320      	movge	r3, #32
   d71b8:	4681      	mov	r9, r0
    int8_t count = 0;
   d71ba:	462c      	mov	r4, r5
   d71bc:	9301      	str	r3, [sp, #4]
            for (uint8_t k = 0; k < length; k += min(length, BUFFER_LENGTH)) {
   d71be:	42b5      	cmp	r5, r6
   d71c0:	d23a      	bcs.n	d7238 <_ZN6I2Cdev9readBytesEhhhPht+0xa0>
                Wire.beginTransmission(devAddr);
   d71c2:	f003 fc31 	bl	daa28 <_Z19__fetch_global_Wirev>
   d71c6:	4639      	mov	r1, r7
   d71c8:	f001 f9c2 	bl	d8550 <_ZN7TwoWire17beginTransmissionEh>
                Wire.write(regAddr);
   d71cc:	f003 fc2c 	bl	daa28 <_Z19__fetch_global_Wirev>
   d71d0:	6803      	ldr	r3, [r0, #0]
   d71d2:	4651      	mov	r1, sl
   d71d4:	689b      	ldr	r3, [r3, #8]
   d71d6:	4798      	blx	r3
                Wire.endTransmission();
   d71d8:	f003 fc26 	bl	daa28 <_Z19__fetch_global_Wirev>
   d71dc:	f001 f9db 	bl	d8596 <_ZN7TwoWire15endTransmissionEv>
                Wire.beginTransmission(devAddr);
   d71e0:	f003 fc22 	bl	daa28 <_Z19__fetch_global_Wirev>
   d71e4:	4639      	mov	r1, r7
   d71e6:	f001 f9b3 	bl	d8550 <_ZN7TwoWire17beginTransmissionEh>
                Wire.requestFrom(devAddr, (uint8_t)min(length - k, BUFFER_LENGTH));
   d71ea:	f003 fc1d 	bl	daa28 <_Z19__fetch_global_Wirev>
   d71ee:	1b72      	subs	r2, r6, r5
   d71f0:	2a20      	cmp	r2, #32
   d71f2:	bfa8      	it	ge
   d71f4:	2220      	movge	r2, #32
   d71f6:	b2d2      	uxtb	r2, r2
   d71f8:	4639      	mov	r1, r7
   d71fa:	f001 f9a6 	bl	d854a <_ZN7TwoWire11requestFromEhj>
        
                for (; Wire.available() && (timeout == 0 || millis() - t1 < timeout); count++) {
   d71fe:	f003 fc13 	bl	daa28 <_Z19__fetch_global_Wirev>
   d7202:	6803      	ldr	r3, [r0, #0]
   d7204:	691b      	ldr	r3, [r3, #16]
   d7206:	4798      	blx	r3
   d7208:	b190      	cbz	r0, d7230 <_ZN6I2Cdev9readBytesEhhhPht+0x98>
   d720a:	f1b8 0f00 	cmp.w	r8, #0
   d720e:	d109      	bne.n	d7224 <_ZN6I2Cdev9readBytesEhhhPht+0x8c>
                    data[count] = Wire.read();
   d7210:	f003 fc0a 	bl	daa28 <_Z19__fetch_global_Wirev>
   d7214:	6803      	ldr	r3, [r0, #0]
   d7216:	695b      	ldr	r3, [r3, #20]
   d7218:	4798      	blx	r3
   d721a:	f80b 0004 	strb.w	r0, [fp, r4]
                for (; Wire.available() && (timeout == 0 || millis() - t1 < timeout); count++) {
   d721e:	3401      	adds	r4, #1
   d7220:	b264      	sxtb	r4, r4
   d7222:	e7ec      	b.n	d71fe <_ZN6I2Cdev9readBytesEhhhPht+0x66>
   d7224:	f000 f9b0 	bl	d7588 <HAL_Timer_Get_Milli_Seconds>
   d7228:	eba0 0009 	sub.w	r0, r0, r9
   d722c:	4540      	cmp	r0, r8
   d722e:	d3ef      	bcc.n	d7210 <_ZN6I2Cdev9readBytesEhhhPht+0x78>
            for (uint8_t k = 0; k < length; k += min(length, BUFFER_LENGTH)) {
   d7230:	9b01      	ldr	r3, [sp, #4]
   d7232:	441d      	add	r5, r3
   d7234:	b2ed      	uxtb	r5, r5
   d7236:	e7c2      	b.n	d71be <_ZN6I2Cdev9readBytesEhhhPht+0x26>
        }

    #endif

    // check for timeout
    if (timeout > 0 && millis() - t1 >= timeout && count < length) count = -1; // timeout
   d7238:	f1b8 0f00 	cmp.w	r8, #0
   d723c:	d009      	beq.n	d7252 <_ZN6I2Cdev9readBytesEhhhPht+0xba>
   d723e:	f000 f9a3 	bl	d7588 <HAL_Timer_Get_Milli_Seconds>
   d7242:	eba0 0009 	sub.w	r0, r0, r9
   d7246:	4540      	cmp	r0, r8
   d7248:	d303      	bcc.n	d7252 <_ZN6I2Cdev9readBytesEhhhPht+0xba>
   d724a:	42b4      	cmp	r4, r6
   d724c:	bfb8      	it	lt
   d724e:	f04f 34ff 	movlt.w	r4, #4294967295	; 0xffffffff
        Serial.print(count, DEC);
        Serial.println(" read).");
    #endif

    return count;
}
   d7252:	4620      	mov	r0, r4
   d7254:	b003      	add	sp, #12
   d7256:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d725a <_ZN6I2Cdev8readByteEhhPht>:
int8_t I2Cdev::readByte(uint8_t devAddr, uint8_t regAddr, uint8_t *data, uint16_t timeout) {
   d725a:	b507      	push	{r0, r1, r2, lr}
    return readBytes(devAddr, regAddr, 1, data, timeout);
   d725c:	9300      	str	r3, [sp, #0]
   d725e:	4613      	mov	r3, r2
   d7260:	2201      	movs	r2, #1
   d7262:	f7ff ff99 	bl	d7198 <_ZN6I2Cdev9readBytesEhhhPht>
}
   d7266:	b003      	add	sp, #12
   d7268:	f85d fb04 	ldr.w	pc, [sp], #4

000d726c <_ZN6I2Cdev7readBitEhhhPht>:
int8_t I2Cdev::readBit(uint8_t devAddr, uint8_t regAddr, uint8_t bitNum, uint8_t *data, uint16_t timeout) {
   d726c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d726e:	4615      	mov	r5, r2
   d7270:	461c      	mov	r4, r3
    uint8_t count = readByte(devAddr, regAddr, &b, timeout);
   d7272:	f10d 0207 	add.w	r2, sp, #7
   d7276:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   d727a:	f7ff ffee 	bl	d725a <_ZN6I2Cdev8readByteEhhPht>
    *data = b & (1 << bitNum);
   d727e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d7282:	2101      	movs	r1, #1
   d7284:	fa01 f205 	lsl.w	r2, r1, r5
   d7288:	401a      	ands	r2, r3
   d728a:	7022      	strb	r2, [r4, #0]
}
   d728c:	b003      	add	sp, #12
   d728e:	bd30      	pop	{r4, r5, pc}

000d7290 <_ZN6I2Cdev8readBitsEhhhhPht>:
int8_t I2Cdev::readBits(uint8_t devAddr, uint8_t regAddr, uint8_t bitStart, uint8_t length, uint8_t *data, uint16_t timeout) {
   d7290:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d7292:	4614      	mov	r4, r2
   d7294:	461d      	mov	r5, r3
    if ((count = readByte(devAddr, regAddr, &b, timeout)) != 0) {
   d7296:	f10d 0207 	add.w	r2, sp, #7
   d729a:	f8bd 301c 	ldrh.w	r3, [sp, #28]
   d729e:	f7ff ffdc 	bl	d725a <_ZN6I2Cdev8readByteEhhPht>
   d72a2:	b160      	cbz	r0, d72be <_ZN6I2Cdev8readBitsEhhhhPht+0x2e>
        uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);
   d72a4:	2201      	movs	r2, #1
   d72a6:	fa02 f305 	lsl.w	r3, r2, r5
   d72aa:	1b61      	subs	r1, r4, r5
        b &= mask;
   d72ac:	f89d 2007 	ldrb.w	r2, [sp, #7]
        uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);
   d72b0:	3101      	adds	r1, #1
   d72b2:	3b01      	subs	r3, #1
   d72b4:	408b      	lsls	r3, r1
        b >>= (bitStart - length + 1);
   d72b6:	4013      	ands	r3, r2
   d72b8:	9a06      	ldr	r2, [sp, #24]
   d72ba:	410b      	asrs	r3, r1
   d72bc:	7013      	strb	r3, [r2, #0]
}
   d72be:	b003      	add	sp, #12
   d72c0:	bd30      	pop	{r4, r5, pc}

000d72c2 <_ZN6I2Cdev10writeBytesEhhhPh>:
 * @param regAddr First register address to write to
 * @param length Number of bytes to write
 * @param data Buffer to copy new data from
 * @return Status of operation (true = success)
 */
bool I2Cdev::writeBytes(uint8_t devAddr, uint8_t regAddr, uint8_t length, uint8_t* data) {
   d72c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d72c4:	4607      	mov	r7, r0
   d72c6:	4615      	mov	r5, r2
   d72c8:	461c      	mov	r4, r3
   d72ca:	460e      	mov	r6, r1
        Serial.print(regAddr, HEX);
        Serial.print("...");
    #endif
    uint8_t status = 0;
	#if defined (PARTICLE)
        Wire.beginTransmission(devAddr);
   d72cc:	f003 fbac 	bl	daa28 <_Z19__fetch_global_Wirev>
   d72d0:	4639      	mov	r1, r7
   d72d2:	f001 f93d 	bl	d8550 <_ZN7TwoWire17beginTransmissionEh>
        Wire.write((uint8_t) regAddr); // send address
   d72d6:	f003 fba7 	bl	daa28 <_Z19__fetch_global_Wirev>
   d72da:	6803      	ldr	r3, [r0, #0]
   d72dc:	4631      	mov	r1, r6
   d72de:	689b      	ldr	r3, [r3, #8]
   d72e0:	4798      	blx	r3
        Wire.write((uint8_t) regAddr); // send address
    #elif (I2CDEV_IMPLEMENTATION == I2CDEV_BUILTIN_FASTWIRE)
        Fastwire::beginTransmission(devAddr);
        Fastwire::write(regAddr);
    #endif
    for (uint8_t i = 0; i < length; i++) {
   d72e2:	4425      	add	r5, r4
   d72e4:	42ac      	cmp	r4, r5
   d72e6:	d007      	beq.n	d72f8 <_ZN6I2Cdev10writeBytesEhhhPh+0x36>
        #ifdef I2CDEV_SERIAL_DEBUG
            Serial.print(data[i], HEX);
            if (i + 1 < length) Serial.print(" ");
        #endif
		#if defined (PARTICLE)
            Wire.write((uint8_t) data[i]);
   d72e8:	f003 fb9e 	bl	daa28 <_Z19__fetch_global_Wirev>
   d72ec:	6803      	ldr	r3, [r0, #0]
   d72ee:	f814 1b01 	ldrb.w	r1, [r4], #1
   d72f2:	689b      	ldr	r3, [r3, #8]
   d72f4:	4798      	blx	r3
    for (uint8_t i = 0; i < length; i++) {
   d72f6:	e7f5      	b.n	d72e4 <_ZN6I2Cdev10writeBytesEhhhPh+0x22>
        #elif (I2CDEV_IMPLEMENTATION == I2CDEV_BUILTIN_FASTWIRE)
            Fastwire::write((uint8_t) data[i]);
        #endif
    }
	#if defined (PARTICLE)
        status = Wire.endTransmission();
   d72f8:	f003 fb96 	bl	daa28 <_Z19__fetch_global_Wirev>
   d72fc:	f001 f94b 	bl	d8596 <_ZN7TwoWire15endTransmissionEv>
    #endif
    #ifdef I2CDEV_SERIAL_DEBUG
        Serial.println(". Done.");
    #endif
    return status == 0;
}
   d7300:	fab0 f080 	clz	r0, r0
   d7304:	0940      	lsrs	r0, r0, #5
   d7306:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7308 <_ZN6I2Cdev9writeByteEhhh>:
bool I2Cdev::writeByte(uint8_t devAddr, uint8_t regAddr, uint8_t data) {
   d7308:	b507      	push	{r0, r1, r2, lr}
   d730a:	f88d 2007 	strb.w	r2, [sp, #7]
    return writeBytes(devAddr, regAddr, 1, &data);
   d730e:	f10d 0307 	add.w	r3, sp, #7
   d7312:	2201      	movs	r2, #1
   d7314:	f7ff ffd5 	bl	d72c2 <_ZN6I2Cdev10writeBytesEhhhPh>
}
   d7318:	b003      	add	sp, #12
   d731a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d7320 <_ZN6I2Cdev8writeBitEhhhh>:
bool I2Cdev::writeBit(uint8_t devAddr, uint8_t regAddr, uint8_t bitNum, uint8_t data) {
   d7320:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d7324:	461f      	mov	r7, r3
    readByte(devAddr, regAddr, &b);
   d7326:	4b0f      	ldr	r3, [pc, #60]	; (d7364 <_ZN6I2Cdev8writeBitEhhhh+0x44>)
bool I2Cdev::writeBit(uint8_t devAddr, uint8_t regAddr, uint8_t bitNum, uint8_t data) {
   d7328:	4690      	mov	r8, r2
   d732a:	2401      	movs	r4, #1
    readByte(devAddr, regAddr, &b);
   d732c:	f10d 0207 	add.w	r2, sp, #7
   d7330:	881b      	ldrh	r3, [r3, #0]
bool I2Cdev::writeBit(uint8_t devAddr, uint8_t regAddr, uint8_t bitNum, uint8_t data) {
   d7332:	4605      	mov	r5, r0
   d7334:	460e      	mov	r6, r1
    readByte(devAddr, regAddr, &b);
   d7336:	f7ff ff90 	bl	d725a <_ZN6I2Cdev8readByteEhhPht>
    b = (data != 0) ? (b | (1 << bitNum)) : (b & ~(1 << bitNum));
   d733a:	fa04 f208 	lsl.w	r2, r4, r8
   d733e:	b252      	sxtb	r2, r2
   d7340:	f89d 4007 	ldrb.w	r4, [sp, #7]
   d7344:	b157      	cbz	r7, d735c <_ZN6I2Cdev8writeBitEhhhh+0x3c>
   d7346:	4322      	orrs	r2, r4
   d7348:	b2d2      	uxtb	r2, r2
    return writeByte(devAddr, regAddr, b);
   d734a:	4631      	mov	r1, r6
   d734c:	4628      	mov	r0, r5
    b = (data != 0) ? (b | (1 << bitNum)) : (b & ~(1 << bitNum));
   d734e:	f88d 2007 	strb.w	r2, [sp, #7]
    return writeByte(devAddr, regAddr, b);
   d7352:	f7ff ffd9 	bl	d7308 <_ZN6I2Cdev9writeByteEhhh>
}
   d7356:	b002      	add	sp, #8
   d7358:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b = (data != 0) ? (b | (1 << bitNum)) : (b & ~(1 << bitNum));
   d735c:	ea24 0202 	bic.w	r2, r4, r2
   d7360:	e7f3      	b.n	d734a <_ZN6I2Cdev8writeBitEhhhh+0x2a>
   d7362:	bf00      	nop
   d7364:	2003e286 	.word	0x2003e286

000d7368 <_ZN6I2Cdev9writeBitsEhhhhh>:
bool I2Cdev::writeBits(uint8_t devAddr, uint8_t regAddr, uint8_t bitStart, uint8_t length, uint8_t data) {
   d7368:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d736a:	461f      	mov	r7, r3
    if (readByte(devAddr, regAddr, &b) != 0) {
   d736c:	4b11      	ldr	r3, [pc, #68]	; (d73b4 <_ZN6I2Cdev9writeBitsEhhhhh+0x4c>)
bool I2Cdev::writeBits(uint8_t devAddr, uint8_t regAddr, uint8_t bitStart, uint8_t length, uint8_t data) {
   d736e:	4616      	mov	r6, r2
    if (readByte(devAddr, regAddr, &b) != 0) {
   d7370:	881b      	ldrh	r3, [r3, #0]
   d7372:	f10d 0207 	add.w	r2, sp, #7
bool I2Cdev::writeBits(uint8_t devAddr, uint8_t regAddr, uint8_t bitStart, uint8_t length, uint8_t data) {
   d7376:	4604      	mov	r4, r0
   d7378:	460d      	mov	r5, r1
    if (readByte(devAddr, regAddr, &b) != 0) {
   d737a:	f7ff ff6e 	bl	d725a <_ZN6I2Cdev8readByteEhhPht>
   d737e:	b1b8      	cbz	r0, d73b0 <_ZN6I2Cdev9writeBitsEhhhhh+0x48>
        uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);
   d7380:	2201      	movs	r2, #1
   d7382:	fa02 f307 	lsl.w	r3, r2, r7
   d7386:	1bf1      	subs	r1, r6, r7
        data <<= (bitStart - length + 1); // shift data into correct position
   d7388:	f89d 2020 	ldrb.w	r2, [sp, #32]
        uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);
   d738c:	3101      	adds	r1, #1
   d738e:	3b01      	subs	r3, #1
   d7390:	408b      	lsls	r3, r1
        data <<= (bitStart - length + 1); // shift data into correct position
   d7392:	fa02 f101 	lsl.w	r1, r2, r1
        b &= ~(mask); // zero all important bits in existing byte
   d7396:	f89d 2007 	ldrb.w	r2, [sp, #7]
        data <<= (bitStart - length + 1); // shift data into correct position
   d739a:	b2c9      	uxtb	r1, r1
        b &= ~(mask); // zero all important bits in existing byte
   d739c:	ea22 0203 	bic.w	r2, r2, r3
        data &= mask; // zero all non-important bits in data
   d73a0:	400b      	ands	r3, r1
        b |= data; // combine data with existing byte
   d73a2:	431a      	orrs	r2, r3
        return writeByte(devAddr, regAddr, b);
   d73a4:	4629      	mov	r1, r5
   d73a6:	4620      	mov	r0, r4
        b |= data; // combine data with existing byte
   d73a8:	f88d 2007 	strb.w	r2, [sp, #7]
        return writeByte(devAddr, regAddr, b);
   d73ac:	f7ff ffac 	bl	d7308 <_ZN6I2Cdev9writeByteEhhh>
}
   d73b0:	b003      	add	sp, #12
   d73b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d73b4:	2003e286 	.word	0x2003e286

000d73b8 <_ZN7MPU6050C1Ev>:

/** Default constructor, uses default I2C address.
 * @see MPU6050_DEFAULT_ADDRESS
 */
MPU6050::MPU6050() {
    devAddr = MPU6050_DEFAULT_ADDRESS;
   d73b8:	2368      	movs	r3, #104	; 0x68
   d73ba:	7003      	strb	r3, [r0, #0]
}
   d73bc:	4770      	bx	lr

000d73be <_ZN7MPU605021setFullScaleGyroRangeEh>:
 * @see MPU6050_GYRO_FS_250
 * @see MPU6050_RA_GYRO_CONFIG
 * @see MPU6050_GCONFIG_FS_SEL_BIT
 * @see MPU6050_GCONFIG_FS_SEL_LENGTH
 */
void MPU6050::setFullScaleGyroRange(uint8_t range) {
   d73be:	b507      	push	{r0, r1, r2, lr}
    I2Cdev::writeBits(devAddr, MPU6050_RA_GYRO_CONFIG, MPU6050_GCONFIG_FS_SEL_BIT, MPU6050_GCONFIG_FS_SEL_LENGTH, range);
   d73c0:	2302      	movs	r3, #2
   d73c2:	7800      	ldrb	r0, [r0, #0]
   d73c4:	9100      	str	r1, [sp, #0]
   d73c6:	2204      	movs	r2, #4
   d73c8:	211b      	movs	r1, #27
   d73ca:	f7ff ffcd 	bl	d7368 <_ZN6I2Cdev9writeBitsEhhhhh>
}
   d73ce:	b003      	add	sp, #12
   d73d0:	f85d fb04 	ldr.w	pc, [sp], #4

000d73d4 <_ZN7MPU605022setFullScaleAccelRangeEh>:
}
/** Set full-scale accelerometer range.
 * @param range New full-scale accelerometer range setting
 * @see getFullScaleAccelRange()
 */
void MPU6050::setFullScaleAccelRange(uint8_t range) {
   d73d4:	b507      	push	{r0, r1, r2, lr}
    I2Cdev::writeBits(devAddr, MPU6050_RA_ACCEL_CONFIG, MPU6050_ACONFIG_AFS_SEL_BIT, MPU6050_ACONFIG_AFS_SEL_LENGTH, range);
   d73d6:	2302      	movs	r3, #2
   d73d8:	7800      	ldrb	r0, [r0, #0]
   d73da:	9100      	str	r1, [sp, #0]
   d73dc:	2204      	movs	r2, #4
   d73de:	211c      	movs	r1, #28
   d73e0:	f7ff ffc2 	bl	d7368 <_ZN6I2Cdev9writeBitsEhhhhh>
}
   d73e4:	b003      	add	sp, #12
   d73e6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d73ec <_ZN7MPU605010getMotion6EPsS0_S0_S0_S0_S0_>:
 * @param gz 16-bit signed integer container for gyroscope Z-axis value
 * @see getAcceleration()
 * @see getRotation()
 * @see MPU6050_RA_ACCEL_XOUT_H
 */
void MPU6050::getMotion6(int16_t* ax, int16_t* ay, int16_t* az, int16_t* gx, int16_t* gy, int16_t* gz) {
   d73ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d73ee:	4616      	mov	r6, r2
    I2Cdev::readBytes(devAddr, MPU6050_RA_ACCEL_XOUT_H, 14, buffer);
   d73f0:	4a17      	ldr	r2, [pc, #92]	; (d7450 <_ZN7MPU605010getMotion6EPsS0_S0_S0_S0_S0_+0x64>)
void MPU6050::getMotion6(int16_t* ax, int16_t* ay, int16_t* az, int16_t* gx, int16_t* gy, int16_t* gz) {
   d73f2:	461d      	mov	r5, r3
    I2Cdev::readBytes(devAddr, MPU6050_RA_ACCEL_XOUT_H, 14, buffer);
   d73f4:	4603      	mov	r3, r0
void MPU6050::getMotion6(int16_t* ax, int16_t* ay, int16_t* az, int16_t* gx, int16_t* gy, int16_t* gz) {
   d73f6:	4604      	mov	r4, r0
    I2Cdev::readBytes(devAddr, MPU6050_RA_ACCEL_XOUT_H, 14, buffer);
   d73f8:	8812      	ldrh	r2, [r2, #0]
   d73fa:	f813 0b01 	ldrb.w	r0, [r3], #1
   d73fe:	9200      	str	r2, [sp, #0]
void MPU6050::getMotion6(int16_t* ax, int16_t* ay, int16_t* az, int16_t* gx, int16_t* gy, int16_t* gz) {
   d7400:	460f      	mov	r7, r1
    I2Cdev::readBytes(devAddr, MPU6050_RA_ACCEL_XOUT_H, 14, buffer);
   d7402:	220e      	movs	r2, #14
   d7404:	213b      	movs	r1, #59	; 0x3b
   d7406:	f7ff fec7 	bl	d7198 <_ZN6I2Cdev9readBytesEhhhPht>
    *ax = (((int16_t)buffer[0]) << 8) | buffer[1];
   d740a:	7862      	ldrb	r2, [r4, #1]
   d740c:	78a3      	ldrb	r3, [r4, #2]
   d740e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d7412:	803b      	strh	r3, [r7, #0]
    *ay = (((int16_t)buffer[2]) << 8) | buffer[3];
   d7414:	78e2      	ldrb	r2, [r4, #3]
   d7416:	7923      	ldrb	r3, [r4, #4]
   d7418:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d741c:	8033      	strh	r3, [r6, #0]
    *az = (((int16_t)buffer[4]) << 8) | buffer[5];
   d741e:	7962      	ldrb	r2, [r4, #5]
   d7420:	79a3      	ldrb	r3, [r4, #6]
   d7422:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d7426:	802b      	strh	r3, [r5, #0]
    *gx = (((int16_t)buffer[8]) << 8) | buffer[9];
   d7428:	7a62      	ldrb	r2, [r4, #9]
   d742a:	7aa3      	ldrb	r3, [r4, #10]
   d742c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d7430:	9a08      	ldr	r2, [sp, #32]
   d7432:	8013      	strh	r3, [r2, #0]
    *gy = (((int16_t)buffer[10]) << 8) | buffer[11];
   d7434:	7ae2      	ldrb	r2, [r4, #11]
   d7436:	7b23      	ldrb	r3, [r4, #12]
   d7438:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d743c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   d743e:	8013      	strh	r3, [r2, #0]
    *gz = (((int16_t)buffer[12]) << 8) | buffer[13];
   d7440:	7b62      	ldrb	r2, [r4, #13]
   d7442:	7ba3      	ldrb	r3, [r4, #14]
   d7444:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d7448:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   d744a:	8013      	strh	r3, [r2, #0]
}
   d744c:	b003      	add	sp, #12
   d744e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d7450:	2003e286 	.word	0x2003e286

000d7454 <_ZN7MPU605014getTemperatureEv>:

/** Get current internal temperature.
 * @return Temperature reading in 16-bit 2's complement format
 * @see MPU6050_RA_TEMP_OUT_H
 */
int16_t MPU6050::getTemperature() {
   d7454:	b513      	push	{r0, r1, r4, lr}
    I2Cdev::readBytes(devAddr, MPU6050_RA_TEMP_OUT_H, 2, buffer);
   d7456:	4a09      	ldr	r2, [pc, #36]	; (d747c <_ZN7MPU605014getTemperatureEv+0x28>)
   d7458:	4603      	mov	r3, r0
int16_t MPU6050::getTemperature() {
   d745a:	4604      	mov	r4, r0
    I2Cdev::readBytes(devAddr, MPU6050_RA_TEMP_OUT_H, 2, buffer);
   d745c:	8812      	ldrh	r2, [r2, #0]
   d745e:	f813 0b01 	ldrb.w	r0, [r3], #1
   d7462:	9200      	str	r2, [sp, #0]
   d7464:	2141      	movs	r1, #65	; 0x41
   d7466:	2202      	movs	r2, #2
   d7468:	f7ff fe96 	bl	d7198 <_ZN6I2Cdev9readBytesEhhhPht>
    return (((int16_t)buffer[0]) << 8) | buffer[1];
   d746c:	7863      	ldrb	r3, [r4, #1]
   d746e:	78a0      	ldrb	r0, [r4, #2]
   d7470:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
}
   d7474:	b200      	sxth	r0, r0
   d7476:	b002      	add	sp, #8
   d7478:	bd10      	pop	{r4, pc}
   d747a:	bf00      	nop
   d747c:	2003e286 	.word	0x2003e286

000d7480 <_ZN7MPU605015getSleepEnabledEv>:
 * by the application.
 * @return Current sleep mode enabled status
 * @see MPU6050_RA_PWR_MGMT_1
 * @see MPU6050_PWR1_SLEEP_BIT
 */
bool MPU6050::getSleepEnabled() {
   d7480:	b513      	push	{r0, r1, r4, lr}
    I2Cdev::readBit(devAddr, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_SLEEP_BIT, buffer);
   d7482:	4a08      	ldr	r2, [pc, #32]	; (d74a4 <_ZN7MPU605015getSleepEnabledEv+0x24>)
   d7484:	4603      	mov	r3, r0
   d7486:	8812      	ldrh	r2, [r2, #0]
bool MPU6050::getSleepEnabled() {
   d7488:	4604      	mov	r4, r0
    I2Cdev::readBit(devAddr, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_SLEEP_BIT, buffer);
   d748a:	216b      	movs	r1, #107	; 0x6b
   d748c:	f813 0b01 	ldrb.w	r0, [r3], #1
   d7490:	9200      	str	r2, [sp, #0]
   d7492:	2206      	movs	r2, #6
   d7494:	f7ff feea 	bl	d726c <_ZN6I2Cdev7readBitEhhhPht>
    return buffer[0];
   d7498:	7860      	ldrb	r0, [r4, #1]
}
   d749a:	3800      	subs	r0, #0
   d749c:	bf18      	it	ne
   d749e:	2001      	movne	r0, #1
   d74a0:	b002      	add	sp, #8
   d74a2:	bd10      	pop	{r4, pc}
   d74a4:	2003e286 	.word	0x2003e286

000d74a8 <_ZN7MPU605015setSleepEnabledEb>:
 * @param enabled New sleep mode enabled status
 * @see getSleepEnabled()
 * @see MPU6050_RA_PWR_MGMT_1
 * @see MPU6050_PWR1_SLEEP_BIT
 */
void MPU6050::setSleepEnabled(bool enabled) {
   d74a8:	460b      	mov	r3, r1
    I2Cdev::writeBit(devAddr, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_SLEEP_BIT, enabled);
   d74aa:	7800      	ldrb	r0, [r0, #0]
   d74ac:	2206      	movs	r2, #6
   d74ae:	216b      	movs	r1, #107	; 0x6b
   d74b0:	f7ff bf36 	b.w	d7320 <_ZN6I2Cdev8writeBitEhhhh>

000d74b4 <_ZN7MPU605014setClockSourceEh>:
 * @see getClockSource()
 * @see MPU6050_RA_PWR_MGMT_1
 * @see MPU6050_PWR1_CLKSEL_BIT
 * @see MPU6050_PWR1_CLKSEL_LENGTH
 */
void MPU6050::setClockSource(uint8_t source) {
   d74b4:	b507      	push	{r0, r1, r2, lr}
    I2Cdev::writeBits(devAddr, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_CLKSEL_BIT, MPU6050_PWR1_CLKSEL_LENGTH, source);
   d74b6:	2303      	movs	r3, #3
   d74b8:	7800      	ldrb	r0, [r0, #0]
   d74ba:	9100      	str	r1, [sp, #0]
   d74bc:	2202      	movs	r2, #2
   d74be:	216b      	movs	r1, #107	; 0x6b
   d74c0:	f7ff ff52 	bl	d7368 <_ZN6I2Cdev9writeBitsEhhhhh>
}
   d74c4:	b003      	add	sp, #12
   d74c6:	f85d fb04 	ldr.w	pc, [sp], #4

000d74ca <_ZN7MPU605010initializeEv>:
void MPU6050::initialize() {
   d74ca:	b510      	push	{r4, lr}
    setClockSource(MPU6050_CLOCK_PLL_XGYRO);
   d74cc:	2101      	movs	r1, #1
void MPU6050::initialize() {
   d74ce:	4604      	mov	r4, r0
    setClockSource(MPU6050_CLOCK_PLL_XGYRO);
   d74d0:	f7ff fff0 	bl	d74b4 <_ZN7MPU605014setClockSourceEh>
    setFullScaleGyroRange(MPU6050_GYRO_FS_250);
   d74d4:	4620      	mov	r0, r4
   d74d6:	2100      	movs	r1, #0
   d74d8:	f7ff ff71 	bl	d73be <_ZN7MPU605021setFullScaleGyroRangeEh>
    setFullScaleAccelRange(MPU6050_ACCEL_FS_2);
   d74dc:	4620      	mov	r0, r4
   d74de:	2100      	movs	r1, #0
   d74e0:	f7ff ff78 	bl	d73d4 <_ZN7MPU605022setFullScaleAccelRangeEh>
    setSleepEnabled(false); // thanks to Jack Elston for pointing this one out!
   d74e4:	4620      	mov	r0, r4
   d74e6:	2100      	movs	r1, #0
}
   d74e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    setSleepEnabled(false); // thanks to Jack Elston for pointing this one out!
   d74ec:	f7ff bfdc 	b.w	d74a8 <_ZN7MPU605015setSleepEnabledEb>

000d74f0 <_ZN7MPU605011getDeviceIDEv>:
 * @return Device ID (6 bits only! should be 0x34)
 * @see MPU6050_RA_WHO_AM_I
 * @see MPU6050_WHO_AM_I_BIT
 * @see MPU6050_WHO_AM_I_LENGTH
 */
uint8_t MPU6050::getDeviceID() {
   d74f0:	b513      	push	{r0, r1, r4, lr}
    I2Cdev::readBits(devAddr, MPU6050_RA_WHO_AM_I, MPU6050_WHO_AM_I_BIT, MPU6050_WHO_AM_I_LENGTH, buffer);
   d74f2:	4603      	mov	r3, r0
   d74f4:	4a07      	ldr	r2, [pc, #28]	; (d7514 <_ZN7MPU605011getDeviceIDEv+0x24>)
uint8_t MPU6050::getDeviceID() {
   d74f6:	4604      	mov	r4, r0
    I2Cdev::readBits(devAddr, MPU6050_RA_WHO_AM_I, MPU6050_WHO_AM_I_BIT, MPU6050_WHO_AM_I_LENGTH, buffer);
   d74f8:	8812      	ldrh	r2, [r2, #0]
   d74fa:	f813 0b01 	ldrb.w	r0, [r3], #1
   d74fe:	e9cd 3200 	strd	r3, r2, [sp]
   d7502:	2306      	movs	r3, #6
   d7504:	461a      	mov	r2, r3
   d7506:	2175      	movs	r1, #117	; 0x75
   d7508:	f7ff fec2 	bl	d7290 <_ZN6I2Cdev8readBitsEhhhhPht>
    return buffer[0];
}
   d750c:	7860      	ldrb	r0, [r4, #1]
   d750e:	b002      	add	sp, #8
   d7510:	bd10      	pop	{r4, pc}
   d7512:	bf00      	nop
   d7514:	2003e286 	.word	0x2003e286

000d7518 <_ZN7MPU605014testConnectionEv>:
bool MPU6050::testConnection() {
   d7518:	b508      	push	{r3, lr}
    return getDeviceID() == 0x34;
   d751a:	f7ff ffe9 	bl	d74f0 <_ZN7MPU605011getDeviceIDEv>
}
   d751e:	f1a0 0334 	sub.w	r3, r0, #52	; 0x34
   d7522:	4258      	negs	r0, r3
   d7524:	4158      	adcs	r0, r3
   d7526:	bd08      	pop	{r3, pc}

000d7528 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d7528:	b508      	push	{r3, lr}
   d752a:	4b02      	ldr	r3, [pc, #8]	; (d7534 <os_mutex_recursive_create+0xc>)
   d752c:	681b      	ldr	r3, [r3, #0]
   d752e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d7530:	9301      	str	r3, [sp, #4]
   d7532:	bd08      	pop	{r3, pc}
   d7534:	00030248 	.word	0x00030248

000d7538 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d7538:	b508      	push	{r3, lr}
   d753a:	4b02      	ldr	r3, [pc, #8]	; (d7544 <os_mutex_recursive_destroy+0xc>)
   d753c:	681b      	ldr	r3, [r3, #0]
   d753e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d7540:	9301      	str	r3, [sp, #4]
   d7542:	bd08      	pop	{r3, pc}
   d7544:	00030248 	.word	0x00030248

000d7548 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   d7548:	b508      	push	{r3, lr}
   d754a:	4b02      	ldr	r3, [pc, #8]	; (d7554 <os_mutex_recursive_lock+0xc>)
   d754c:	681b      	ldr	r3, [r3, #0]
   d754e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d7550:	9301      	str	r3, [sp, #4]
   d7552:	bd08      	pop	{r3, pc}
   d7554:	00030248 	.word	0x00030248

000d7558 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   d7558:	b508      	push	{r3, lr}
   d755a:	4b02      	ldr	r3, [pc, #8]	; (d7564 <os_mutex_recursive_unlock+0xc>)
   d755c:	681b      	ldr	r3, [r3, #0]
   d755e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d7560:	9301      	str	r3, [sp, #4]
   d7562:	bd08      	pop	{r3, pc}
   d7564:	00030248 	.word	0x00030248

000d7568 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d7568:	b508      	push	{r3, lr}
   d756a:	4b02      	ldr	r3, [pc, #8]	; (d7574 <HAL_RNG_GetRandomNumber+0xc>)
   d756c:	681b      	ldr	r3, [r3, #0]
   d756e:	685b      	ldr	r3, [r3, #4]
   d7570:	9301      	str	r3, [sp, #4]
   d7572:	bd08      	pop	{r3, pc}
   d7574:	00030218 	.word	0x00030218

000d7578 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d7578:	b508      	push	{r3, lr}
   d757a:	4b02      	ldr	r3, [pc, #8]	; (d7584 <HAL_Delay_Microseconds+0xc>)
   d757c:	681b      	ldr	r3, [r3, #0]
   d757e:	68db      	ldr	r3, [r3, #12]
   d7580:	9301      	str	r3, [sp, #4]
   d7582:	bd08      	pop	{r3, pc}
   d7584:	00030218 	.word	0x00030218

000d7588 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d7588:	b508      	push	{r3, lr}
   d758a:	4b02      	ldr	r3, [pc, #8]	; (d7594 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d758c:	681b      	ldr	r3, [r3, #0]
   d758e:	695b      	ldr	r3, [r3, #20]
   d7590:	9301      	str	r3, [sp, #4]
   d7592:	bd08      	pop	{r3, pc}
   d7594:	00030218 	.word	0x00030218

000d7598 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   d7598:	b508      	push	{r3, lr}
   d759a:	4b02      	ldr	r3, [pc, #8]	; (d75a4 <hal_rtc_time_is_valid+0xc>)
   d759c:	681b      	ldr	r3, [r3, #0]
   d759e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d75a0:	9301      	str	r3, [sp, #4]
   d75a2:	bd08      	pop	{r3, pc}
   d75a4:	00030218 	.word	0x00030218

000d75a8 <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   d75a8:	b508      	push	{r3, lr}
   d75aa:	4b02      	ldr	r3, [pc, #8]	; (d75b4 <hal_rtc_get_time+0xc>)
   d75ac:	681b      	ldr	r3, [r3, #0]
   d75ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   d75b0:	9301      	str	r3, [sp, #4]
   d75b2:	bd08      	pop	{r3, pc}
   d75b4:	00030218 	.word	0x00030218

000d75b8 <hal_rtc_set_time>:
DYNALIB_FN(BASE_IDX + 24, hal, hal_rtc_set_time, int(const struct timeval*, void*))
   d75b8:	b508      	push	{r3, lr}
   d75ba:	4b02      	ldr	r3, [pc, #8]	; (d75c4 <hal_rtc_set_time+0xc>)
   d75bc:	681b      	ldr	r3, [r3, #0]
   d75be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   d75c0:	9301      	str	r3, [sp, #4]
   d75c2:	bd08      	pop	{r3, pc}
   d75c4:	00030218 	.word	0x00030218

000d75c8 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d75c8:	b508      	push	{r3, lr}
   d75ca:	4b02      	ldr	r3, [pc, #8]	; (d75d4 <HAL_Pin_Map+0xc>)
   d75cc:	681b      	ldr	r3, [r3, #0]
   d75ce:	681b      	ldr	r3, [r3, #0]
   d75d0:	9301      	str	r3, [sp, #4]
   d75d2:	bd08      	pop	{r3, pc}
   d75d4:	0003022c 	.word	0x0003022c

000d75d8 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d75d8:	b508      	push	{r3, lr}
   d75da:	4b02      	ldr	r3, [pc, #8]	; (d75e4 <HAL_Validate_Pin_Function+0xc>)
   d75dc:	681b      	ldr	r3, [r3, #0]
   d75de:	685b      	ldr	r3, [r3, #4]
   d75e0:	9301      	str	r3, [sp, #4]
   d75e2:	bd08      	pop	{r3, pc}
   d75e4:	0003022c 	.word	0x0003022c

000d75e8 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d75e8:	b508      	push	{r3, lr}
   d75ea:	4b02      	ldr	r3, [pc, #8]	; (d75f4 <HAL_Pin_Mode+0xc>)
   d75ec:	681b      	ldr	r3, [r3, #0]
   d75ee:	689b      	ldr	r3, [r3, #8]
   d75f0:	9301      	str	r3, [sp, #4]
   d75f2:	bd08      	pop	{r3, pc}
   d75f4:	0003022c 	.word	0x0003022c

000d75f8 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d75f8:	b508      	push	{r3, lr}
   d75fa:	4b02      	ldr	r3, [pc, #8]	; (d7604 <HAL_Get_Pin_Mode+0xc>)
   d75fc:	681b      	ldr	r3, [r3, #0]
   d75fe:	68db      	ldr	r3, [r3, #12]
   d7600:	9301      	str	r3, [sp, #4]
   d7602:	bd08      	pop	{r3, pc}
   d7604:	0003022c 	.word	0x0003022c

000d7608 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d7608:	b508      	push	{r3, lr}
   d760a:	4b02      	ldr	r3, [pc, #8]	; (d7614 <HAL_GPIO_Write+0xc>)
   d760c:	681b      	ldr	r3, [r3, #0]
   d760e:	691b      	ldr	r3, [r3, #16]
   d7610:	9301      	str	r3, [sp, #4]
   d7612:	bd08      	pop	{r3, pc}
   d7614:	0003022c 	.word	0x0003022c

000d7618 <HAL_Interrupts_Attach>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   d7618:	b508      	push	{r3, lr}
   d761a:	4b02      	ldr	r3, [pc, #8]	; (d7624 <HAL_Interrupts_Attach+0xc>)
   d761c:	681b      	ldr	r3, [r3, #0]
   d761e:	699b      	ldr	r3, [r3, #24]
   d7620:	9301      	str	r3, [sp, #4]
   d7622:	bd08      	pop	{r3, pc}
   d7624:	0003022c 	.word	0x0003022c

000d7628 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   d7628:	b508      	push	{r3, lr}
   d762a:	4b02      	ldr	r3, [pc, #8]	; (d7634 <HAL_Interrupts_Detach+0xc>)
   d762c:	681b      	ldr	r3, [r3, #0]
   d762e:	69db      	ldr	r3, [r3, #28]
   d7630:	9301      	str	r3, [sp, #4]
   d7632:	bd08      	pop	{r3, pc}
   d7634:	0003022c 	.word	0x0003022c

000d7638 <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   d7638:	b508      	push	{r3, lr}
   d763a:	4b02      	ldr	r3, [pc, #8]	; (d7644 <hal_adc_read+0xc>)
   d763c:	681b      	ldr	r3, [r3, #0]
   d763e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d7640:	9301      	str	r3, [sp, #4]
   d7642:	bd08      	pop	{r3, pc}
   d7644:	0003022c 	.word	0x0003022c

000d7648 <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   d7648:	b508      	push	{r3, lr}
   d764a:	4b02      	ldr	r3, [pc, #8]	; (d7654 <hal_i2c_begin+0xc>)
   d764c:	681b      	ldr	r3, [r3, #0]
   d764e:	68db      	ldr	r3, [r3, #12]
   d7650:	9301      	str	r3, [sp, #4]
   d7652:	bd08      	pop	{r3, pc}
   d7654:	00030228 	.word	0x00030228

000d7658 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   d7658:	b508      	push	{r3, lr}
   d765a:	4b02      	ldr	r3, [pc, #8]	; (d7664 <hal_i2c_begin_transmission+0xc>)
   d765c:	681b      	ldr	r3, [r3, #0]
   d765e:	699b      	ldr	r3, [r3, #24]
   d7660:	9301      	str	r3, [sp, #4]
   d7662:	bd08      	pop	{r3, pc}
   d7664:	00030228 	.word	0x00030228

000d7668 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   d7668:	b508      	push	{r3, lr}
   d766a:	4b02      	ldr	r3, [pc, #8]	; (d7674 <hal_i2c_end_transmission+0xc>)
   d766c:	681b      	ldr	r3, [r3, #0]
   d766e:	69db      	ldr	r3, [r3, #28]
   d7670:	9301      	str	r3, [sp, #4]
   d7672:	bd08      	pop	{r3, pc}
   d7674:	00030228 	.word	0x00030228

000d7678 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d7678:	b508      	push	{r3, lr}
   d767a:	4b02      	ldr	r3, [pc, #8]	; (d7684 <hal_i2c_write+0xc>)
   d767c:	681b      	ldr	r3, [r3, #0]
   d767e:	6a1b      	ldr	r3, [r3, #32]
   d7680:	9301      	str	r3, [sp, #4]
   d7682:	bd08      	pop	{r3, pc}
   d7684:	00030228 	.word	0x00030228

000d7688 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d7688:	b508      	push	{r3, lr}
   d768a:	4b02      	ldr	r3, [pc, #8]	; (d7694 <hal_i2c_available+0xc>)
   d768c:	681b      	ldr	r3, [r3, #0]
   d768e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d7690:	9301      	str	r3, [sp, #4]
   d7692:	bd08      	pop	{r3, pc}
   d7694:	00030228 	.word	0x00030228

000d7698 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d7698:	b508      	push	{r3, lr}
   d769a:	4b02      	ldr	r3, [pc, #8]	; (d76a4 <hal_i2c_read+0xc>)
   d769c:	681b      	ldr	r3, [r3, #0]
   d769e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d76a0:	9301      	str	r3, [sp, #4]
   d76a2:	bd08      	pop	{r3, pc}
   d76a4:	00030228 	.word	0x00030228

000d76a8 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d76a8:	b508      	push	{r3, lr}
   d76aa:	4b02      	ldr	r3, [pc, #8]	; (d76b4 <hal_i2c_peek+0xc>)
   d76ac:	681b      	ldr	r3, [r3, #0]
   d76ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d76b0:	9301      	str	r3, [sp, #4]
   d76b2:	bd08      	pop	{r3, pc}
   d76b4:	00030228 	.word	0x00030228

000d76b8 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d76b8:	b508      	push	{r3, lr}
   d76ba:	4b02      	ldr	r3, [pc, #8]	; (d76c4 <hal_i2c_flush+0xc>)
   d76bc:	681b      	ldr	r3, [r3, #0]
   d76be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d76c0:	9301      	str	r3, [sp, #4]
   d76c2:	bd08      	pop	{r3, pc}
   d76c4:	00030228 	.word	0x00030228

000d76c8 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d76c8:	b508      	push	{r3, lr}
   d76ca:	4b02      	ldr	r3, [pc, #8]	; (d76d4 <hal_i2c_is_enabled+0xc>)
   d76cc:	681b      	ldr	r3, [r3, #0]
   d76ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d76d0:	9301      	str	r3, [sp, #4]
   d76d2:	bd08      	pop	{r3, pc}
   d76d4:	00030228 	.word	0x00030228

000d76d8 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d76d8:	b508      	push	{r3, lr}
   d76da:	4b02      	ldr	r3, [pc, #8]	; (d76e4 <hal_i2c_init+0xc>)
   d76dc:	681b      	ldr	r3, [r3, #0]
   d76de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d76e0:	9301      	str	r3, [sp, #4]
   d76e2:	bd08      	pop	{r3, pc}
   d76e4:	00030228 	.word	0x00030228

000d76e8 <hal_i2c_lock>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
   d76e8:	b508      	push	{r3, lr}
   d76ea:	4b02      	ldr	r3, [pc, #8]	; (d76f4 <hal_i2c_lock+0xc>)
   d76ec:	681b      	ldr	r3, [r3, #0]
   d76ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d76f0:	9301      	str	r3, [sp, #4]
   d76f2:	bd08      	pop	{r3, pc}
   d76f4:	00030228 	.word	0x00030228

000d76f8 <hal_i2c_unlock>:
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
   d76f8:	b508      	push	{r3, lr}
   d76fa:	4b02      	ldr	r3, [pc, #8]	; (d7704 <hal_i2c_unlock+0xc>)
   d76fc:	681b      	ldr	r3, [r3, #0]
   d76fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d7700:	9301      	str	r3, [sp, #4]
   d7702:	bd08      	pop	{r3, pc}
   d7704:	00030228 	.word	0x00030228

000d7708 <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   d7708:	b508      	push	{r3, lr}
   d770a:	4b02      	ldr	r3, [pc, #8]	; (d7714 <hal_i2c_request_ex+0xc>)
   d770c:	681b      	ldr	r3, [r3, #0]
   d770e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d7710:	9301      	str	r3, [sp, #4]
   d7712:	bd08      	pop	{r3, pc}
   d7714:	00030228 	.word	0x00030228

000d7718 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d7718:	b508      	push	{r3, lr}
   d771a:	4b02      	ldr	r3, [pc, #8]	; (d7724 <inet_inet_ntop+0xc>)
   d771c:	681b      	ldr	r3, [r3, #0]
   d771e:	695b      	ldr	r3, [r3, #20]
   d7720:	9301      	str	r3, [sp, #4]
   d7722:	bd08      	pop	{r3, pc}
   d7724:	00030264 	.word	0x00030264

000d7728 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d7728:	b508      	push	{r3, lr}
   d772a:	4b02      	ldr	r3, [pc, #8]	; (d7734 <netdb_freeaddrinfo+0xc>)
   d772c:	681b      	ldr	r3, [r3, #0]
   d772e:	689b      	ldr	r3, [r3, #8]
   d7730:	9301      	str	r3, [sp, #4]
   d7732:	bd08      	pop	{r3, pc}
   d7734:	00030268 	.word	0x00030268

000d7738 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d7738:	b508      	push	{r3, lr}
   d773a:	4b02      	ldr	r3, [pc, #8]	; (d7744 <netdb_getaddrinfo+0xc>)
   d773c:	681b      	ldr	r3, [r3, #0]
   d773e:	68db      	ldr	r3, [r3, #12]
   d7740:	9301      	str	r3, [sp, #4]
   d7742:	bd08      	pop	{r3, pc}
   d7744:	00030268 	.word	0x00030268

000d7748 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   d7748:	b508      	push	{r3, lr}
   d774a:	4b02      	ldr	r3, [pc, #8]	; (d7754 <hal_spi_begin+0xc>)
   d774c:	681b      	ldr	r3, [r3, #0]
   d774e:	681b      	ldr	r3, [r3, #0]
   d7750:	9301      	str	r3, [sp, #4]
   d7752:	bd08      	pop	{r3, pc}
   d7754:	00030230 	.word	0x00030230

000d7758 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d7758:	b508      	push	{r3, lr}
   d775a:	4b02      	ldr	r3, [pc, #8]	; (d7764 <hal_spi_init+0xc>)
   d775c:	681b      	ldr	r3, [r3, #0]
   d775e:	69db      	ldr	r3, [r3, #28]
   d7760:	9301      	str	r3, [sp, #4]
   d7762:	bd08      	pop	{r3, pc}
   d7764:	00030230 	.word	0x00030230

000d7768 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d7768:	b508      	push	{r3, lr}
   d776a:	4b02      	ldr	r3, [pc, #8]	; (d7774 <hal_spi_is_enabled+0xc>)
   d776c:	681b      	ldr	r3, [r3, #0]
   d776e:	6a1b      	ldr	r3, [r3, #32]
   d7770:	9301      	str	r3, [sp, #4]
   d7772:	bd08      	pop	{r3, pc}
   d7774:	00030230 	.word	0x00030230

000d7778 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   d7778:	b508      	push	{r3, lr}
   d777a:	4b02      	ldr	r3, [pc, #8]	; (d7784 <hal_spi_info+0xc>)
   d777c:	681b      	ldr	r3, [r3, #0]
   d777e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d7780:	9301      	str	r3, [sp, #4]
   d7782:	bd08      	pop	{r3, pc}
   d7784:	00030230 	.word	0x00030230

000d7788 <hal_spi_transfer_dma>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, void*, void*, uint32_t, hal_spi_dma_user_callback))
   d7788:	b508      	push	{r3, lr}
   d778a:	4b02      	ldr	r3, [pc, #8]	; (d7794 <hal_spi_transfer_dma+0xc>)
   d778c:	681b      	ldr	r3, [r3, #0]
   d778e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d7790:	9301      	str	r3, [sp, #4]
   d7792:	bd08      	pop	{r3, pc}
   d7794:	00030230 	.word	0x00030230

000d7798 <hal_spi_transfer_dma_status>:
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
   d7798:	b508      	push	{r3, lr}
   d779a:	4b02      	ldr	r3, [pc, #8]	; (d77a4 <hal_spi_transfer_dma_status+0xc>)
   d779c:	681b      	ldr	r3, [r3, #0]
   d779e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d77a0:	9301      	str	r3, [sp, #4]
   d77a2:	bd08      	pop	{r3, pc}
   d77a4:	00030230 	.word	0x00030230

000d77a8 <hal_spi_set_settings>:
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   d77a8:	b508      	push	{r3, lr}
   d77aa:	4b02      	ldr	r3, [pc, #8]	; (d77b4 <hal_spi_set_settings+0xc>)
   d77ac:	681b      	ldr	r3, [r3, #0]
   d77ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d77b0:	9301      	str	r3, [sp, #4]
   d77b2:	bd08      	pop	{r3, pc}
   d77b4:	00030230 	.word	0x00030230

000d77b8 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   d77b8:	b508      	push	{r3, lr}
   d77ba:	4b02      	ldr	r3, [pc, #8]	; (d77c4 <hal_spi_acquire+0xc>)
   d77bc:	681b      	ldr	r3, [r3, #0]
   d77be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d77c0:	9301      	str	r3, [sp, #4]
   d77c2:	bd08      	pop	{r3, pc}
   d77c4:	00030230 	.word	0x00030230

000d77c8 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   d77c8:	b508      	push	{r3, lr}
   d77ca:	4b02      	ldr	r3, [pc, #8]	; (d77d4 <hal_spi_release+0xc>)
   d77cc:	681b      	ldr	r3, [r3, #0]
   d77ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d77d0:	9301      	str	r3, [sp, #4]
   d77d2:	bd08      	pop	{r3, pc}
   d77d4:	00030230 	.word	0x00030230

000d77d8 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d77d8:	b508      	push	{r3, lr}
   d77da:	4b02      	ldr	r3, [pc, #8]	; (d77e4 <hal_usart_init+0xc>)
   d77dc:	681b      	ldr	r3, [r3, #0]
   d77de:	681b      	ldr	r3, [r3, #0]
   d77e0:	9301      	str	r3, [sp, #4]
   d77e2:	bd08      	pop	{r3, pc}
   d77e4:	0003023c 	.word	0x0003023c

000d77e8 <hal_usart_end>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
   d77e8:	b508      	push	{r3, lr}
   d77ea:	4b02      	ldr	r3, [pc, #8]	; (d77f4 <hal_usart_end+0xc>)
   d77ec:	681b      	ldr	r3, [r3, #0]
   d77ee:	689b      	ldr	r3, [r3, #8]
   d77f0:	9301      	str	r3, [sp, #4]
   d77f2:	bd08      	pop	{r3, pc}
   d77f4:	0003023c 	.word	0x0003023c

000d77f8 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d77f8:	b508      	push	{r3, lr}
   d77fa:	4b02      	ldr	r3, [pc, #8]	; (d7804 <hal_usart_write+0xc>)
   d77fc:	681b      	ldr	r3, [r3, #0]
   d77fe:	68db      	ldr	r3, [r3, #12]
   d7800:	9301      	str	r3, [sp, #4]
   d7802:	bd08      	pop	{r3, pc}
   d7804:	0003023c 	.word	0x0003023c

000d7808 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d7808:	b508      	push	{r3, lr}
   d780a:	4b02      	ldr	r3, [pc, #8]	; (d7814 <hal_usart_available+0xc>)
   d780c:	681b      	ldr	r3, [r3, #0]
   d780e:	691b      	ldr	r3, [r3, #16]
   d7810:	9301      	str	r3, [sp, #4]
   d7812:	bd08      	pop	{r3, pc}
   d7814:	0003023c 	.word	0x0003023c

000d7818 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d7818:	b508      	push	{r3, lr}
   d781a:	4b02      	ldr	r3, [pc, #8]	; (d7824 <hal_usart_read+0xc>)
   d781c:	681b      	ldr	r3, [r3, #0]
   d781e:	695b      	ldr	r3, [r3, #20]
   d7820:	9301      	str	r3, [sp, #4]
   d7822:	bd08      	pop	{r3, pc}
   d7824:	0003023c 	.word	0x0003023c

000d7828 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d7828:	b508      	push	{r3, lr}
   d782a:	4b02      	ldr	r3, [pc, #8]	; (d7834 <hal_usart_peek+0xc>)
   d782c:	681b      	ldr	r3, [r3, #0]
   d782e:	699b      	ldr	r3, [r3, #24]
   d7830:	9301      	str	r3, [sp, #4]
   d7832:	bd08      	pop	{r3, pc}
   d7834:	0003023c 	.word	0x0003023c

000d7838 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d7838:	b508      	push	{r3, lr}
   d783a:	4b02      	ldr	r3, [pc, #8]	; (d7844 <hal_usart_flush+0xc>)
   d783c:	681b      	ldr	r3, [r3, #0]
   d783e:	69db      	ldr	r3, [r3, #28]
   d7840:	9301      	str	r3, [sp, #4]
   d7842:	bd08      	pop	{r3, pc}
   d7844:	0003023c 	.word	0x0003023c

000d7848 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d7848:	b508      	push	{r3, lr}
   d784a:	4b02      	ldr	r3, [pc, #8]	; (d7854 <hal_usart_is_enabled+0xc>)
   d784c:	681b      	ldr	r3, [r3, #0]
   d784e:	6a1b      	ldr	r3, [r3, #32]
   d7850:	9301      	str	r3, [sp, #4]
   d7852:	bd08      	pop	{r3, pc}
   d7854:	0003023c 	.word	0x0003023c

000d7858 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d7858:	b508      	push	{r3, lr}
   d785a:	4b02      	ldr	r3, [pc, #8]	; (d7864 <hal_usart_available_data_for_write+0xc>)
   d785c:	681b      	ldr	r3, [r3, #0]
   d785e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d7860:	9301      	str	r3, [sp, #4]
   d7862:	bd08      	pop	{r3, pc}
   d7864:	0003023c 	.word	0x0003023c

000d7868 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   d7868:	b508      	push	{r3, lr}
   d786a:	4b02      	ldr	r3, [pc, #8]	; (d7874 <hal_usart_begin_config+0xc>)
   d786c:	681b      	ldr	r3, [r3, #0]
   d786e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d7870:	9301      	str	r3, [sp, #4]
   d7872:	bd08      	pop	{r3, pc}
   d7874:	0003023c 	.word	0x0003023c

000d7878 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d7878:	b508      	push	{r3, lr}
   d787a:	4b02      	ldr	r3, [pc, #8]	; (d7884 <HAL_USB_USART_Init+0xc>)
   d787c:	681b      	ldr	r3, [r3, #0]
   d787e:	681b      	ldr	r3, [r3, #0]
   d7880:	9301      	str	r3, [sp, #4]
   d7882:	bd08      	pop	{r3, pc}
   d7884:	0003024c 	.word	0x0003024c

000d7888 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d7888:	b508      	push	{r3, lr}
   d788a:	4b02      	ldr	r3, [pc, #8]	; (d7894 <HAL_USB_USART_Begin+0xc>)
   d788c:	681b      	ldr	r3, [r3, #0]
   d788e:	685b      	ldr	r3, [r3, #4]
   d7890:	9301      	str	r3, [sp, #4]
   d7892:	bd08      	pop	{r3, pc}
   d7894:	0003024c 	.word	0x0003024c

000d7898 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   d7898:	b508      	push	{r3, lr}
   d789a:	4b02      	ldr	r3, [pc, #8]	; (d78a4 <HAL_USB_USART_End+0xc>)
   d789c:	681b      	ldr	r3, [r3, #0]
   d789e:	689b      	ldr	r3, [r3, #8]
   d78a0:	9301      	str	r3, [sp, #4]
   d78a2:	bd08      	pop	{r3, pc}
   d78a4:	0003024c 	.word	0x0003024c

000d78a8 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d78a8:	b508      	push	{r3, lr}
   d78aa:	4b02      	ldr	r3, [pc, #8]	; (d78b4 <HAL_USB_USART_Available_Data+0xc>)
   d78ac:	681b      	ldr	r3, [r3, #0]
   d78ae:	691b      	ldr	r3, [r3, #16]
   d78b0:	9301      	str	r3, [sp, #4]
   d78b2:	bd08      	pop	{r3, pc}
   d78b4:	0003024c 	.word	0x0003024c

000d78b8 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d78b8:	b508      	push	{r3, lr}
   d78ba:	4b02      	ldr	r3, [pc, #8]	; (d78c4 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d78bc:	681b      	ldr	r3, [r3, #0]
   d78be:	695b      	ldr	r3, [r3, #20]
   d78c0:	9301      	str	r3, [sp, #4]
   d78c2:	bd08      	pop	{r3, pc}
   d78c4:	0003024c 	.word	0x0003024c

000d78c8 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d78c8:	b508      	push	{r3, lr}
   d78ca:	4b02      	ldr	r3, [pc, #8]	; (d78d4 <HAL_USB_USART_Receive_Data+0xc>)
   d78cc:	681b      	ldr	r3, [r3, #0]
   d78ce:	699b      	ldr	r3, [r3, #24]
   d78d0:	9301      	str	r3, [sp, #4]
   d78d2:	bd08      	pop	{r3, pc}
   d78d4:	0003024c 	.word	0x0003024c

000d78d8 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d78d8:	b508      	push	{r3, lr}
   d78da:	4b02      	ldr	r3, [pc, #8]	; (d78e4 <HAL_USB_USART_Send_Data+0xc>)
   d78dc:	681b      	ldr	r3, [r3, #0]
   d78de:	69db      	ldr	r3, [r3, #28]
   d78e0:	9301      	str	r3, [sp, #4]
   d78e2:	bd08      	pop	{r3, pc}
   d78e4:	0003024c 	.word	0x0003024c

000d78e8 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d78e8:	b508      	push	{r3, lr}
   d78ea:	4b02      	ldr	r3, [pc, #8]	; (d78f4 <HAL_USB_USART_Flush_Data+0xc>)
   d78ec:	681b      	ldr	r3, [r3, #0]
   d78ee:	6a1b      	ldr	r3, [r3, #32]
   d78f0:	9301      	str	r3, [sp, #4]
   d78f2:	bd08      	pop	{r3, pc}
   d78f4:	0003024c 	.word	0x0003024c

000d78f8 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d78f8:	b508      	push	{r3, lr}
   d78fa:	4b02      	ldr	r3, [pc, #8]	; (d7904 <panic_+0xc>)
   d78fc:	681b      	ldr	r3, [r3, #0]
   d78fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d7900:	9301      	str	r3, [sp, #4]
   d7902:	bd08      	pop	{r3, pc}
   d7904:	00030260 	.word	0x00030260

000d7908 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d7908:	b508      	push	{r3, lr}
   d790a:	4b02      	ldr	r3, [pc, #8]	; (d7914 <log_message+0xc>)
   d790c:	681b      	ldr	r3, [r3, #0]
   d790e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d7910:	9301      	str	r3, [sp, #4]
   d7912:	bd08      	pop	{r3, pc}
   d7914:	00030260 	.word	0x00030260

000d7918 <log_message_v>:
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   d7918:	b508      	push	{r3, lr}
   d791a:	4b02      	ldr	r3, [pc, #8]	; (d7924 <log_message_v+0xc>)
   d791c:	681b      	ldr	r3, [r3, #0]
   d791e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d7920:	9301      	str	r3, [sp, #4]
   d7922:	bd08      	pop	{r3, pc}
   d7924:	00030260 	.word	0x00030260

000d7928 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   d7928:	b508      	push	{r3, lr}
   d792a:	4b02      	ldr	r3, [pc, #8]	; (d7934 <log_level_name+0xc>)
   d792c:	681b      	ldr	r3, [r3, #0]
   d792e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d7930:	9301      	str	r3, [sp, #4]
   d7932:	bd08      	pop	{r3, pc}
   d7934:	00030260 	.word	0x00030260

000d7938 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   d7938:	b508      	push	{r3, lr}
   d793a:	4b02      	ldr	r3, [pc, #8]	; (d7944 <log_set_callbacks+0xc>)
   d793c:	681b      	ldr	r3, [r3, #0]
   d793e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   d7940:	9301      	str	r3, [sp, #4]
   d7942:	bd08      	pop	{r3, pc}
   d7944:	00030260 	.word	0x00030260

000d7948 <diag_get_source>:
DYNALIB_FN(34, services, led_update_enabled, int(void*))
DYNALIB_FN(35, services, led_update, void(system_tick_t, LEDStatusData*, void*))

DYNALIB_FN(36, services, diag_register_source, int(const diag_source*, void*))
DYNALIB_FN(37, services, diag_enum_sources, int(diag_enum_sources_callback, size_t*, void*, void*))
DYNALIB_FN(38, services, diag_get_source, int(uint16_t, const diag_source**, void*))
   d7948:	b508      	push	{r3, lr}
   d794a:	4b03      	ldr	r3, [pc, #12]	; (d7958 <diag_get_source+0x10>)
   d794c:	681b      	ldr	r3, [r3, #0]
   d794e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   d7952:	9301      	str	r3, [sp, #4]
   d7954:	bd08      	pop	{r3, pc}
   d7956:	0000      	.short	0x0000
   d7958:	00030260 	.word	0x00030260

000d795c <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d795c:	b508      	push	{r3, lr}
   d795e:	4b02      	ldr	r3, [pc, #8]	; (d7968 <system_mode+0xc>)
   d7960:	681b      	ldr	r3, [r3, #0]
   d7962:	681b      	ldr	r3, [r3, #0]
   d7964:	9301      	str	r3, [sp, #4]
   d7966:	bd08      	pop	{r3, pc}
   d7968:	00030220 	.word	0x00030220

000d796c <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d796c:	b508      	push	{r3, lr}
   d796e:	4b02      	ldr	r3, [pc, #8]	; (d7978 <set_system_mode+0xc>)
   d7970:	681b      	ldr	r3, [r3, #0]
   d7972:	685b      	ldr	r3, [r3, #4]
   d7974:	9301      	str	r3, [sp, #4]
   d7976:	bd08      	pop	{r3, pc}
   d7978:	00030220 	.word	0x00030220

000d797c <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d797c:	b508      	push	{r3, lr}
   d797e:	4b02      	ldr	r3, [pc, #8]	; (d7988 <system_delay_ms+0xc>)
   d7980:	681b      	ldr	r3, [r3, #0]
   d7982:	695b      	ldr	r3, [r3, #20]
   d7984:	9301      	str	r3, [sp, #4]
   d7986:	bd08      	pop	{r3, pc}
   d7988:	00030220 	.word	0x00030220

000d798c <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d798c:	b508      	push	{r3, lr}
   d798e:	4b02      	ldr	r3, [pc, #8]	; (d7998 <system_thread_set_state+0xc>)
   d7990:	681b      	ldr	r3, [r3, #0]
   d7992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d7994:	9301      	str	r3, [sp, #4]
   d7996:	bd08      	pop	{r3, pc}
   d7998:	00030220 	.word	0x00030220

000d799c <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d799c:	b508      	push	{r3, lr}
   d799e:	4b02      	ldr	r3, [pc, #8]	; (d79a8 <application_thread_current+0xc>)
   d79a0:	681b      	ldr	r3, [r3, #0]
   d79a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d79a4:	9301      	str	r3, [sp, #4]
   d79a6:	bd08      	pop	{r3, pc}
   d79a8:	00030220 	.word	0x00030220

000d79ac <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d79ac:	b508      	push	{r3, lr}
   d79ae:	4b02      	ldr	r3, [pc, #8]	; (d79b8 <application_thread_invoke+0xc>)
   d79b0:	681b      	ldr	r3, [r3, #0]
   d79b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d79b4:	9301      	str	r3, [sp, #4]
   d79b6:	bd08      	pop	{r3, pc}
   d79b8:	00030220 	.word	0x00030220

000d79bc <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d79bc:	b508      	push	{r3, lr}
   d79be:	4b02      	ldr	r3, [pc, #8]	; (d79c8 <system_thread_get_state+0xc>)
   d79c0:	681b      	ldr	r3, [r3, #0]
   d79c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d79c4:	9301      	str	r3, [sp, #4]
   d79c6:	bd08      	pop	{r3, pc}
   d79c8:	00030220 	.word	0x00030220

000d79cc <system_notify_time_changed>:
DYNALIB_FN(23, system, system_notify_time_changed, void(uint32_t, void*, void*))
   d79cc:	b508      	push	{r3, lr}
   d79ce:	4b02      	ldr	r3, [pc, #8]	; (d79d8 <system_notify_time_changed+0xc>)
   d79d0:	681b      	ldr	r3, [r3, #0]
   d79d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   d79d4:	9301      	str	r3, [sp, #4]
   d79d6:	bd08      	pop	{r3, pc}
   d79d8:	00030220 	.word	0x00030220

000d79dc <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d79dc:	b508      	push	{r3, lr}
   d79de:	4b03      	ldr	r3, [pc, #12]	; (d79ec <system_ctrl_set_app_request_handler+0x10>)
   d79e0:	681b      	ldr	r3, [r3, #0]
   d79e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d79e6:	9301      	str	r3, [sp, #4]
   d79e8:	bd08      	pop	{r3, pc}
   d79ea:	0000      	.short	0x0000
   d79ec:	00030220 	.word	0x00030220

000d79f0 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d79f0:	b508      	push	{r3, lr}
   d79f2:	4b03      	ldr	r3, [pc, #12]	; (d7a00 <system_ctrl_set_result+0x10>)
   d79f4:	681b      	ldr	r3, [r3, #0]
   d79f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d79fa:	9301      	str	r3, [sp, #4]
   d79fc:	bd08      	pop	{r3, pc}
   d79fe:	0000      	.short	0x0000
   d7a00:	00030220 	.word	0x00030220

000d7a04 <system_power_management_set_config>:
DYNALIB_FN(BASE_IDX + 14, system, system_pool_free, void(void*, void*))
DYNALIB_FN(BASE_IDX + 15, system, system_sleep_pins, int(const uint16_t*, size_t, const InterruptMode*, size_t, long, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 16, system, system_invoke_event_handler, int(uint16_t handlerInfoSize, FilteringEventHandler* handlerInfo, const char* event_name, const char* event_data, void* reserved))

#if HAL_PLATFORM_POWER_MANAGEMENT
DYNALIB_FN(BASE_IDX + 17, system, system_power_management_set_config, int(const hal_power_config*, void*))
   d7a04:	b508      	push	{r3, lr}
   d7a06:	4b03      	ldr	r3, [pc, #12]	; (d7a14 <system_power_management_set_config+0x10>)
   d7a08:	681b      	ldr	r3, [r3, #0]
   d7a0a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   d7a0e:	9301      	str	r3, [sp, #4]
   d7a10:	bd08      	pop	{r3, pc}
   d7a12:	0000      	.short	0x0000
   d7a14:	00030220 	.word	0x00030220

000d7a18 <system_sleep_ext>:
#define BASE_IDX1 (BASE_IDX + 18)
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
   d7a18:	b508      	push	{r3, lr}
   d7a1a:	4b03      	ldr	r3, [pc, #12]	; (d7a28 <system_sleep_ext+0x10>)
   d7a1c:	681b      	ldr	r3, [r3, #0]
   d7a1e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
   d7a22:	9301      	str	r3, [sp, #4]
   d7a24:	bd08      	pop	{r3, pc}
   d7a26:	0000      	.short	0x0000
   d7a28:	00030220 	.word	0x00030220

000d7a2c <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   d7a2c:	b508      	push	{r3, lr}
   d7a2e:	4b02      	ldr	r3, [pc, #8]	; (d7a38 <spark_variable+0xc>)
   d7a30:	681b      	ldr	r3, [r3, #0]
   d7a32:	681b      	ldr	r3, [r3, #0]
   d7a34:	9301      	str	r3, [sp, #4]
   d7a36:	bd08      	pop	{r3, pc}
   d7a38:	00030244 	.word	0x00030244

000d7a3c <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   d7a3c:	b508      	push	{r3, lr}
   d7a3e:	4b02      	ldr	r3, [pc, #8]	; (d7a48 <spark_function+0xc>)
   d7a40:	681b      	ldr	r3, [r3, #0]
   d7a42:	685b      	ldr	r3, [r3, #4]
   d7a44:	9301      	str	r3, [sp, #4]
   d7a46:	bd08      	pop	{r3, pc}
   d7a48:	00030244 	.word	0x00030244

000d7a4c <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d7a4c:	b508      	push	{r3, lr}
   d7a4e:	4b02      	ldr	r3, [pc, #8]	; (d7a58 <spark_process+0xc>)
   d7a50:	681b      	ldr	r3, [r3, #0]
   d7a52:	689b      	ldr	r3, [r3, #8]
   d7a54:	9301      	str	r3, [sp, #4]
   d7a56:	bd08      	pop	{r3, pc}
   d7a58:	00030244 	.word	0x00030244

000d7a5c <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   d7a5c:	b508      	push	{r3, lr}
   d7a5e:	4b02      	ldr	r3, [pc, #8]	; (d7a68 <spark_cloud_flag_connect+0xc>)
   d7a60:	681b      	ldr	r3, [r3, #0]
   d7a62:	68db      	ldr	r3, [r3, #12]
   d7a64:	9301      	str	r3, [sp, #4]
   d7a66:	bd08      	pop	{r3, pc}
   d7a68:	00030244 	.word	0x00030244

000d7a6c <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d7a6c:	b508      	push	{r3, lr}
   d7a6e:	4b02      	ldr	r3, [pc, #8]	; (d7a78 <spark_cloud_flag_connected+0xc>)
   d7a70:	681b      	ldr	r3, [r3, #0]
   d7a72:	695b      	ldr	r3, [r3, #20]
   d7a74:	9301      	str	r3, [sp, #4]
   d7a76:	bd08      	pop	{r3, pc}
   d7a78:	00030244 	.word	0x00030244

000d7a7c <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d7a7c:	b508      	push	{r3, lr}
   d7a7e:	4b02      	ldr	r3, [pc, #8]	; (d7a88 <spark_send_event+0xc>)
   d7a80:	681b      	ldr	r3, [r3, #0]
   d7a82:	6a1b      	ldr	r3, [r3, #32]
   d7a84:	9301      	str	r3, [sp, #4]
   d7a86:	bd08      	pop	{r3, pc}
   d7a88:	00030244 	.word	0x00030244

000d7a8c <spark_sync_time_pending>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d7a8c:	b508      	push	{r3, lr}
   d7a8e:	4b02      	ldr	r3, [pc, #8]	; (d7a98 <spark_sync_time_pending+0xc>)
   d7a90:	681b      	ldr	r3, [r3, #0]
   d7a92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d7a94:	9301      	str	r3, [sp, #4]
   d7a96:	bd08      	pop	{r3, pc}
   d7a98:	00030244 	.word	0x00030244

000d7a9c <spark_sync_time_last>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
   d7a9c:	b508      	push	{r3, lr}
   d7a9e:	4b02      	ldr	r3, [pc, #8]	; (d7aa8 <spark_sync_time_last+0xc>)
   d7aa0:	681b      	ldr	r3, [r3, #0]
   d7aa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d7aa4:	9301      	str	r3, [sp, #4]
   d7aa6:	bd08      	pop	{r3, pc}
   d7aa8:	00030244 	.word	0x00030244

000d7aac <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d7aac:	b508      	push	{r3, lr}
   d7aae:	4b02      	ldr	r3, [pc, #8]	; (d7ab8 <spark_set_random_seed_from_cloud_handler+0xc>)
   d7ab0:	681b      	ldr	r3, [r3, #0]
   d7ab2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d7ab4:	9301      	str	r3, [sp, #4]
   d7ab6:	bd08      	pop	{r3, pc}
   d7ab8:	00030244 	.word	0x00030244

000d7abc <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d7abc:	b508      	push	{r3, lr}
   d7abe:	4b02      	ldr	r3, [pc, #8]	; (d7ac8 <network_connect+0xc>)
   d7ac0:	681b      	ldr	r3, [r3, #0]
   d7ac2:	685b      	ldr	r3, [r3, #4]
   d7ac4:	9301      	str	r3, [sp, #4]
   d7ac6:	bd08      	pop	{r3, pc}
   d7ac8:	00030240 	.word	0x00030240

000d7acc <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d7acc:	b508      	push	{r3, lr}
   d7ace:	4b02      	ldr	r3, [pc, #8]	; (d7ad8 <network_connecting+0xc>)
   d7ad0:	681b      	ldr	r3, [r3, #0]
   d7ad2:	689b      	ldr	r3, [r3, #8]
   d7ad4:	9301      	str	r3, [sp, #4]
   d7ad6:	bd08      	pop	{r3, pc}
   d7ad8:	00030240 	.word	0x00030240

000d7adc <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d7adc:	b508      	push	{r3, lr}
   d7ade:	4b02      	ldr	r3, [pc, #8]	; (d7ae8 <network_disconnect+0xc>)
   d7ae0:	681b      	ldr	r3, [r3, #0]
   d7ae2:	68db      	ldr	r3, [r3, #12]
   d7ae4:	9301      	str	r3, [sp, #4]
   d7ae6:	bd08      	pop	{r3, pc}
   d7ae8:	00030240 	.word	0x00030240

000d7aec <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d7aec:	b508      	push	{r3, lr}
   d7aee:	4b02      	ldr	r3, [pc, #8]	; (d7af8 <network_ready+0xc>)
   d7af0:	681b      	ldr	r3, [r3, #0]
   d7af2:	691b      	ldr	r3, [r3, #16]
   d7af4:	9301      	str	r3, [sp, #4]
   d7af6:	bd08      	pop	{r3, pc}
   d7af8:	00030240 	.word	0x00030240

000d7afc <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d7afc:	b508      	push	{r3, lr}
   d7afe:	4b02      	ldr	r3, [pc, #8]	; (d7b08 <network_on+0xc>)
   d7b00:	681b      	ldr	r3, [r3, #0]
   d7b02:	695b      	ldr	r3, [r3, #20]
   d7b04:	9301      	str	r3, [sp, #4]
   d7b06:	bd08      	pop	{r3, pc}
   d7b08:	00030240 	.word	0x00030240

000d7b0c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d7b0c:	b508      	push	{r3, lr}
   d7b0e:	4b02      	ldr	r3, [pc, #8]	; (d7b18 <network_off+0xc>)
   d7b10:	681b      	ldr	r3, [r3, #0]
   d7b12:	699b      	ldr	r3, [r3, #24]
   d7b14:	9301      	str	r3, [sp, #4]
   d7b16:	bd08      	pop	{r3, pc}
   d7b18:	00030240 	.word	0x00030240

000d7b1c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d7b1c:	b508      	push	{r3, lr}
   d7b1e:	4b02      	ldr	r3, [pc, #8]	; (d7b28 <network_listen+0xc>)
   d7b20:	681b      	ldr	r3, [r3, #0]
   d7b22:	69db      	ldr	r3, [r3, #28]
   d7b24:	9301      	str	r3, [sp, #4]
   d7b26:	bd08      	pop	{r3, pc}
   d7b28:	00030240 	.word	0x00030240

000d7b2c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d7b2c:	b508      	push	{r3, lr}
   d7b2e:	4b02      	ldr	r3, [pc, #8]	; (d7b38 <network_listening+0xc>)
   d7b30:	681b      	ldr	r3, [r3, #0]
   d7b32:	6a1b      	ldr	r3, [r3, #32]
   d7b34:	9301      	str	r3, [sp, #4]
   d7b36:	bd08      	pop	{r3, pc}
   d7b38:	00030240 	.word	0x00030240

000d7b3c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d7b3c:	b508      	push	{r3, lr}
   d7b3e:	4b02      	ldr	r3, [pc, #8]	; (d7b48 <network_set_listen_timeout+0xc>)
   d7b40:	681b      	ldr	r3, [r3, #0]
   d7b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d7b44:	9301      	str	r3, [sp, #4]
   d7b46:	bd08      	pop	{r3, pc}
   d7b48:	00030240 	.word	0x00030240

000d7b4c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d7b4c:	b508      	push	{r3, lr}
   d7b4e:	4b02      	ldr	r3, [pc, #8]	; (d7b58 <network_get_listen_timeout+0xc>)
   d7b50:	681b      	ldr	r3, [r3, #0]
   d7b52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d7b54:	9301      	str	r3, [sp, #4]
   d7b56:	bd08      	pop	{r3, pc}
   d7b58:	00030240 	.word	0x00030240

000d7b5c <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   d7b5c:	b508      	push	{r3, lr}
   d7b5e:	4b02      	ldr	r3, [pc, #8]	; (d7b68 <network_is_on+0xc>)
   d7b60:	681b      	ldr	r3, [r3, #0]
   d7b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d7b64:	9301      	str	r3, [sp, #4]
   d7b66:	bd08      	pop	{r3, pc}
   d7b68:	00030240 	.word	0x00030240

000d7b6c <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   d7b6c:	b508      	push	{r3, lr}
   d7b6e:	4b02      	ldr	r3, [pc, #8]	; (d7b78 <network_is_off+0xc>)
   d7b70:	681b      	ldr	r3, [r3, #0]
   d7b72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d7b74:	9301      	str	r3, [sp, #4]
   d7b76:	bd08      	pop	{r3, pc}
   d7b78:	00030240 	.word	0x00030240

000d7b7c <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d7b7c:	b508      	push	{r3, lr}
   d7b7e:	4b02      	ldr	r3, [pc, #8]	; (d7b88 <malloc+0xc>)
   d7b80:	681b      	ldr	r3, [r3, #0]
   d7b82:	681b      	ldr	r3, [r3, #0]
   d7b84:	9301      	str	r3, [sp, #4]
   d7b86:	bd08      	pop	{r3, pc}
   d7b88:	0003021c 	.word	0x0003021c

000d7b8c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d7b8c:	b508      	push	{r3, lr}
   d7b8e:	4b02      	ldr	r3, [pc, #8]	; (d7b98 <free+0xc>)
   d7b90:	681b      	ldr	r3, [r3, #0]
   d7b92:	685b      	ldr	r3, [r3, #4]
   d7b94:	9301      	str	r3, [sp, #4]
   d7b96:	bd08      	pop	{r3, pc}
   d7b98:	0003021c 	.word	0x0003021c

000d7b9c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d7b9c:	b508      	push	{r3, lr}
   d7b9e:	4b02      	ldr	r3, [pc, #8]	; (d7ba8 <realloc+0xc>)
   d7ba0:	681b      	ldr	r3, [r3, #0]
   d7ba2:	689b      	ldr	r3, [r3, #8]
   d7ba4:	9301      	str	r3, [sp, #4]
   d7ba6:	bd08      	pop	{r3, pc}
   d7ba8:	0003021c 	.word	0x0003021c

000d7bac <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   d7bac:	b508      	push	{r3, lr}
   d7bae:	4b02      	ldr	r3, [pc, #8]	; (d7bb8 <siprintf+0xc>)
   d7bb0:	681b      	ldr	r3, [r3, #0]
   d7bb2:	691b      	ldr	r3, [r3, #16]
   d7bb4:	9301      	str	r3, [sp, #4]
   d7bb6:	bd08      	pop	{r3, pc}
   d7bb8:	0003021c 	.word	0x0003021c

000d7bbc <snprintf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   d7bbc:	b508      	push	{r3, lr}
   d7bbe:	4b02      	ldr	r3, [pc, #8]	; (d7bc8 <snprintf+0xc>)
   d7bc0:	681b      	ldr	r3, [r3, #0]
   d7bc2:	69db      	ldr	r3, [r3, #28]
   d7bc4:	9301      	str	r3, [sp, #4]
   d7bc6:	bd08      	pop	{r3, pc}
   d7bc8:	0003021c 	.word	0x0003021c

000d7bcc <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d7bcc:	b508      	push	{r3, lr}
   d7bce:	4b02      	ldr	r3, [pc, #8]	; (d7bd8 <vsnprintf+0xc>)
   d7bd0:	681b      	ldr	r3, [r3, #0]
   d7bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d7bd4:	9301      	str	r3, [sp, #4]
   d7bd6:	bd08      	pop	{r3, pc}
   d7bd8:	0003021c 	.word	0x0003021c

000d7bdc <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d7bdc:	b508      	push	{r3, lr}
   d7bde:	4b02      	ldr	r3, [pc, #8]	; (d7be8 <abort+0xc>)
   d7be0:	681b      	ldr	r3, [r3, #0]
   d7be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d7be4:	9301      	str	r3, [sp, #4]
   d7be6:	bd08      	pop	{r3, pc}
   d7be8:	0003021c 	.word	0x0003021c

000d7bec <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d7bec:	b508      	push	{r3, lr}
   d7bee:	4b02      	ldr	r3, [pc, #8]	; (d7bf8 <_malloc_r+0xc>)
   d7bf0:	681b      	ldr	r3, [r3, #0]
   d7bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d7bf4:	9301      	str	r3, [sp, #4]
   d7bf6:	bd08      	pop	{r3, pc}
   d7bf8:	0003021c 	.word	0x0003021c

000d7bfc <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d7bfc:	b508      	push	{r3, lr}
   d7bfe:	4b02      	ldr	r3, [pc, #8]	; (d7c08 <__errno+0xc>)
   d7c00:	681b      	ldr	r3, [r3, #0]
   d7c02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d7c04:	9301      	str	r3, [sp, #4]
   d7c06:	bd08      	pop	{r3, pc}
   d7c08:	0003021c 	.word	0x0003021c

000d7c0c <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d7c0c:	b508      	push	{r3, lr}
   d7c0e:	4b02      	ldr	r3, [pc, #8]	; (d7c18 <newlib_impure_ptr_callback+0xc>)
   d7c10:	681b      	ldr	r3, [r3, #0]
   d7c12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d7c14:	9301      	str	r3, [sp, #4]
   d7c16:	bd08      	pop	{r3, pc}
   d7c18:	0003021c 	.word	0x0003021c

000d7c1c <strftime>:
// Electron has some of these exported from a different system part through services2 dynalib
// Photon/P1 do not have enough space in system-part2
#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
   d7c1c:	b508      	push	{r3, lr}
   d7c1e:	4b02      	ldr	r3, [pc, #8]	; (d7c28 <strftime+0xc>)
   d7c20:	681b      	ldr	r3, [r3, #0]
   d7c22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d7c24:	9301      	str	r3, [sp, #4]
   d7c26:	bd08      	pop	{r3, pc}
   d7c28:	0003021c 	.word	0x0003021c

000d7c2c <localtime_r>:
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   d7c2c:	b508      	push	{r3, lr}
   d7c2e:	4b02      	ldr	r3, [pc, #8]	; (d7c38 <localtime_r+0xc>)
   d7c30:	681b      	ldr	r3, [r3, #0]
   d7c32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d7c34:	9301      	str	r3, [sp, #4]
   d7c36:	bd08      	pop	{r3, pc}
   d7c38:	0003021c 	.word	0x0003021c

000d7c3c <gmtime_r>:
DYNALIB_FN(20, rt, gmtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   d7c3c:	b508      	push	{r3, lr}
   d7c3e:	4b02      	ldr	r3, [pc, #8]	; (d7c48 <gmtime_r+0xc>)
   d7c40:	681b      	ldr	r3, [r3, #0]
   d7c42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d7c44:	9301      	str	r3, [sp, #4]
   d7c46:	bd08      	pop	{r3, pc}
   d7c48:	0003021c 	.word	0x0003021c

000d7c4c <mktime>:
DYNALIB_FN(21, rt, mktime, time_t(struct tm*))
   d7c4c:	b508      	push	{r3, lr}
   d7c4e:	4b02      	ldr	r3, [pc, #8]	; (d7c58 <mktime+0xc>)
   d7c50:	681b      	ldr	r3, [r3, #0]
   d7c52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d7c54:	9301      	str	r3, [sp, #4]
   d7c56:	bd08      	pop	{r3, pc}
   d7c58:	0003021c 	.word	0x0003021c

000d7c5c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d7c5c:	2100      	movs	r1, #0
   d7c5e:	f7ff be8d 	b.w	d797c <system_delay_ms>

000d7c62 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d7c62:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d7c64:	6883      	ldr	r3, [r0, #8]
   d7c66:	4604      	mov	r4, r0
   d7c68:	b90b      	cbnz	r3, d7c6e <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d7c6a:	f002 ff2b 	bl	daac4 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d7c6e:	68c3      	ldr	r3, [r0, #12]
   d7c70:	4798      	blx	r3
      if (_M_manager)
   d7c72:	68a3      	ldr	r3, [r4, #8]
   d7c74:	b11b      	cbz	r3, d7c7e <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d7c76:	2203      	movs	r2, #3
   d7c78:	4621      	mov	r1, r4
   d7c7a:	4620      	mov	r0, r4
   d7c7c:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d7c7e:	4620      	mov	r0, r4
   d7c80:	2110      	movs	r1, #16
}
   d7c82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   d7c86:	f002 bf17 	b.w	daab8 <_ZdlPvj>

000d7c8a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   d7c8a:	680b      	ldr	r3, [r1, #0]
   d7c8c:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   d7c8e:	b113      	cbz	r3, d7c96 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   d7c90:	685a      	ldr	r2, [r3, #4]
   d7c92:	3201      	adds	r2, #1
   d7c94:	605a      	str	r2, [r3, #4]
      }
   d7c96:	4770      	bx	lr

000d7c98 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d7c98:	4802      	ldr	r0, [pc, #8]	; (d7ca4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   d7c9a:	2300      	movs	r3, #0
   d7c9c:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   d7c9e:	f7ff bc43 	b.w	d7528 <os_mutex_recursive_create>
   d7ca2:	bf00      	nop
   d7ca4:	2003e5f4 	.word	0x2003e5f4

000d7ca8 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d7ca8:	2200      	movs	r2, #0
   d7caa:	6840      	ldr	r0, [r0, #4]
   d7cac:	4611      	mov	r1, r2
   d7cae:	f7ff bf1d 	b.w	d7aec <network_ready>

000d7cb2 <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   d7cb2:	2200      	movs	r2, #0
   d7cb4:	6840      	ldr	r0, [r0, #4]
   d7cb6:	4611      	mov	r1, r2
   d7cb8:	f7ff bf38 	b.w	d7b2c <network_listening>

000d7cbc <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d7cbc:	2200      	movs	r2, #0
   d7cbe:	6840      	ldr	r0, [r0, #4]
   d7cc0:	4611      	mov	r1, r2
   d7cc2:	f7ff bf43 	b.w	d7b4c <network_get_listen_timeout>

000d7cc6 <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d7cc6:	6840      	ldr	r0, [r0, #4]
   d7cc8:	2200      	movs	r2, #0
   d7cca:	f7ff bf37 	b.w	d7b3c <network_set_listen_timeout>

000d7cce <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d7cce:	6840      	ldr	r0, [r0, #4]
   d7cd0:	2200      	movs	r2, #0
   d7cd2:	f081 0101 	eor.w	r1, r1, #1
   d7cd6:	f7ff bf21 	b.w	d7b1c <network_listen>

000d7cda <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d7cda:	2300      	movs	r3, #0
   d7cdc:	6840      	ldr	r0, [r0, #4]
   d7cde:	461a      	mov	r2, r3
   d7ce0:	4619      	mov	r1, r3
   d7ce2:	f7ff bf13 	b.w	d7b0c <network_off>

000d7ce6 <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d7ce6:	2300      	movs	r3, #0
   d7ce8:	6840      	ldr	r0, [r0, #4]
   d7cea:	461a      	mov	r2, r3
   d7cec:	4619      	mov	r1, r3
   d7cee:	f7ff bf05 	b.w	d7afc <network_on>

000d7cf2 <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d7cf2:	2200      	movs	r2, #0
   d7cf4:	6840      	ldr	r0, [r0, #4]
   d7cf6:	4611      	mov	r1, r2
   d7cf8:	f7ff bee8 	b.w	d7acc <network_connecting>

000d7cfc <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d7cfc:	6840      	ldr	r0, [r0, #4]
   d7cfe:	2200      	movs	r2, #0
   d7d00:	2102      	movs	r1, #2
   d7d02:	f7ff beeb 	b.w	d7adc <network_disconnect>

000d7d06 <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d7d06:	2300      	movs	r3, #0
   d7d08:	6840      	ldr	r0, [r0, #4]
   d7d0a:	461a      	mov	r2, r3
   d7d0c:	f7ff bed6 	b.w	d7abc <network_connect>

000d7d10 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d7d10:	4b08      	ldr	r3, [pc, #32]	; (d7d34 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d7d12:	b510      	push	{r4, lr}
   d7d14:	2428      	movs	r4, #40	; 0x28
   d7d16:	4622      	mov	r2, r4
   d7d18:	4618      	mov	r0, r3
   d7d1a:	2100      	movs	r1, #0
   d7d1c:	f003 ff30 	bl	dbb80 <memset>
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d7d20:	4b05      	ldr	r3, [pc, #20]	; (d7d38 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   d7d22:	8004      	strh	r4, [r0, #0]
        cid = -1;
   d7d24:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d7d28:	6042      	str	r2, [r0, #4]
   d7d2a:	2204      	movs	r2, #4
   d7d2c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d7d2e:	4a03      	ldr	r2, [pc, #12]	; (d7d3c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d7d30:	601a      	str	r2, [r3, #0]
   d7d32:	bd10      	pop	{r4, pc}
   d7d34:	2003e600 	.word	0x2003e600
   d7d38:	2003e5f8 	.word	0x2003e5f8
   d7d3c:	000dc7c8 	.word	0x000dc7c8

000d7d40 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d7d40:	4770      	bx	lr

000d7d42 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   d7d42:	2000      	movs	r0, #0
   d7d44:	4770      	bx	lr

000d7d46 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d7d46:	b510      	push	{r4, lr}
   d7d48:	2110      	movs	r1, #16
   d7d4a:	4604      	mov	r4, r0
   d7d4c:	f002 feb4 	bl	daab8 <_ZdlPvj>
   d7d50:	4620      	mov	r0, r4
   d7d52:	bd10      	pop	{r4, pc}

000d7d54 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   d7d54:	b508      	push	{r3, lr}
      { delete this; }
   d7d56:	f7ff fff6 	bl	d7d46 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d7d5a:	bd08      	pop	{r3, pc}

000d7d5c <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d7d5c:	b530      	push	{r4, r5, lr}
        type_(type) {
   d7d5e:	2200      	movs	r2, #0
   d7d60:	f64f 749c 	movw	r4, #65436	; 0xff9c
   d7d64:	6002      	str	r2, [r0, #0]
   d7d66:	8084      	strh	r4, [r0, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d7d68:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d7d6a:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   d7d6c:	680c      	ldr	r4, [r1, #0]
   d7d6e:	8085      	strh	r5, [r0, #4]
   d7d70:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d7d72:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   d7d74:	bd30      	pop	{r4, r5, pc}

000d7d76 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d7d76:	b510      	push	{r4, lr}
   d7d78:	4604      	mov	r4, r0
    free((void*)msg_);
   d7d7a:	6800      	ldr	r0, [r0, #0]
   d7d7c:	f7ff ff06 	bl	d7b8c <free>
}
   d7d80:	4620      	mov	r0, r4
   d7d82:	bd10      	pop	{r4, pc}

000d7d84 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d7d84:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d7d86:	68c4      	ldr	r4, [r0, #12]
   d7d88:	b1f4      	cbz	r4, d7dc8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   d7d8a:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d7d8c:	2b02      	cmp	r3, #2
   d7d8e:	d103      	bne.n	d7d98 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d7d90:	f104 000c 	add.w	r0, r4, #12
   d7d94:	f7ff ffef 	bl	d7d76 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   d7d98:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   d7d9a:	b135      	cbz	r5, d7daa <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   d7d9c:	4628      	mov	r0, r5
   d7d9e:	f7fe fcf8 	bl	d6792 <_ZNSt14_Function_baseD1Ev>
   d7da2:	2110      	movs	r1, #16
   d7da4:	4628      	mov	r0, r5
   d7da6:	f002 fe87 	bl	daab8 <_ZdlPvj>
   d7daa:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d7dac:	b135      	cbz	r5, d7dbc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d7dae:	4628      	mov	r0, r5
   d7db0:	f7fe fcef 	bl	d6792 <_ZNSt14_Function_baseD1Ev>
   d7db4:	2110      	movs	r1, #16
   d7db6:	4628      	mov	r0, r5
   d7db8:	f002 fe7e 	bl	daab8 <_ZdlPvj>
   d7dbc:	4620      	mov	r0, r4
   d7dbe:	2114      	movs	r1, #20
   d7dc0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d7dc4:	f002 be78 	b.w	daab8 <_ZdlPvj>
   d7dc8:	bd38      	pop	{r3, r4, r5, pc}

000d7dca <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
    }
    return CloudDisconnectOptions(options->flags, options->timeout, options->graceful, clearSession);
}

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
   d7dca:	b510      	push	{r4, lr}
   d7dcc:	b088      	sub	sp, #32
   d7dce:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d7dd0:	4668      	mov	r0, sp
   d7dd2:	f002 f899 	bl	d9f08 <_ZN6StringC1EPKc>
    return (*fn)(p);
   d7dd6:	4669      	mov	r1, sp
   d7dd8:	a804      	add	r0, sp, #16
   d7dda:	f002 f8e0 	bl	d9f9e <_ZN6StringC1ERKS_>
   d7dde:	a804      	add	r0, sp, #16
   d7de0:	47a0      	blx	r4
   d7de2:	4604      	mov	r4, r0
   d7de4:	a804      	add	r0, sp, #16
   d7de6:	f002 f844 	bl	d9e72 <_ZN6StringD1Ev>
    String p(param);
   d7dea:	4668      	mov	r0, sp
   d7dec:	f002 f841 	bl	d9e72 <_ZN6StringD1Ev>
}
   d7df0:	4620      	mov	r0, r4
   d7df2:	b008      	add	sp, #32
   d7df4:	bd10      	pop	{r4, pc}

000d7df6 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   d7df6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
   d7df8:	2300      	movs	r3, #0
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
   d7dfa:	e9cd 0102 	strd	r0, r1, [sp, #8]
    desc.funcKey = funcKey;
   d7dfe:	9201      	str	r2, [sp, #4]
         size = sizeof(*this);
   d7e00:	2410      	movs	r4, #16
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d7e02:	461a      	mov	r2, r3
   d7e04:	4669      	mov	r1, sp
   d7e06:	4618      	mov	r0, r3
         memset(this, 0, sizeof(*this));
   d7e08:	f8ad 3002 	strh.w	r3, [sp, #2]
         size = sizeof(*this);
   d7e0c:	f8ad 4000 	strh.w	r4, [sp]
   d7e10:	f7ff fe14 	bl	d7a3c <spark_function>
}
   d7e14:	b004      	add	sp, #16
   d7e16:	bd10      	pop	{r4, pc}

000d7e18 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d7e18:	b573      	push	{r0, r1, r4, r5, r6, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d7e1a:	460e      	mov	r6, r1
   d7e1c:	4604      	mov	r4, r0
   d7e1e:	f856 3b04 	ldr.w	r3, [r6], #4
   d7e22:	9300      	str	r3, [sp, #0]
   d7e24:	460d      	mov	r5, r1
   d7e26:	a801      	add	r0, sp, #4
   d7e28:	4631      	mov	r1, r6
   d7e2a:	f7ff ff2e 	bl	d7c8a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d7e2e:	9a01      	ldr	r2, [sp, #4]
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d7e30:	9b00      	ldr	r3, [sp, #0]
	_M_pi = __tmp;
   d7e32:	6062      	str	r2, [r4, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d7e34:	6023      	str	r3, [r4, #0]
      ~__shared_ptr() = default;
   d7e36:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   d7e38:	2300      	movs	r3, #0
   d7e3a:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d7e3c:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   d7e3e:	f7fc fa99 	bl	d4374 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d7e42:	4630      	mov	r0, r6
   d7e44:	f7fc fa96 	bl	d4374 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   d7e48:	4628      	mov	r0, r5
   d7e4a:	2108      	movs	r1, #8
   d7e4c:	f002 fe34 	bl	daab8 <_ZdlPvj>
        return p;
    }
   d7e50:	4620      	mov	r0, r4
   d7e52:	b002      	add	sp, #8
   d7e54:	bd70      	pop	{r4, r5, r6, pc}

000d7e56 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   d7e56:	b513      	push	{r0, r1, r4, lr}
   d7e58:	460b      	mov	r3, r1
   d7e5a:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7e5c:	e9d0 0100 	ldrd	r0, r1, [r0]
   d7e60:	466c      	mov	r4, sp
   d7e62:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d7e66:	e893 0003 	ldmia.w	r3, {r0, r1}
   d7e6a:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d7e6e:	e894 0003 	ldmia.w	r4, {r0, r1}
   d7e72:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d7e76:	b002      	add	sp, #8
   d7e78:	bd10      	pop	{r4, pc}

000d7e7a <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   d7e7a:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d7e7c:	b510      	push	{r4, lr}
      if (_M_empty())
   d7e7e:	b90a      	cbnz	r2, d7e84 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d7e80:	f002 fe20 	bl	daac4 <_ZSt25__throw_bad_function_callv>
    }
   d7e84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d7e88:	68c3      	ldr	r3, [r0, #12]
   d7e8a:	4718      	bx	r3

000d7e8c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d7e8c:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d7e8e:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   d7e90:	f100 0110 	add.w	r1, r0, #16
   d7e94:	f7ff fff1 	bl	d7e7a <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   d7e98:	bd08      	pop	{r3, pc}

000d7e9a <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   d7e9a:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d7e9c:	b510      	push	{r4, lr}
      if (_M_empty())
   d7e9e:	b90a      	cbnz	r2, d7ea4 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d7ea0:	f002 fe10 	bl	daac4 <_ZSt25__throw_bad_function_callv>
    }
   d7ea4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d7ea8:	68c3      	ldr	r3, [r0, #12]
   d7eaa:	4718      	bx	r3

000d7eac <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d7eac:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d7eae:	6800      	ldr	r0, [r0, #0]
   d7eb0:	f100 0110 	add.w	r1, r0, #16
   d7eb4:	f7ff fff1 	bl	d7e9a <_ZNKSt8functionIFvRKbEEclES1_>
      }
   d7eb8:	bd08      	pop	{r3, pc}
	...

000d7ebc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   d7ebc:	b538      	push	{r3, r4, r5, lr}
   d7ebe:	2300      	movs	r3, #0
   d7ec0:	4604      	mov	r4, r0
   d7ec2:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d7ec4:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   d7ec6:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d7ec8:	f7fc f8e5 	bl	d4096 <_Znwj>
   d7ecc:	b128      	cbz	r0, d7eda <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   d7ece:	2301      	movs	r3, #1
   d7ed0:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   d7ed4:	4b02      	ldr	r3, [pc, #8]	; (d7ee0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d7ed6:	6003      	str	r3, [r0, #0]
   d7ed8:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d7eda:	6020      	str	r0, [r4, #0]
	}
   d7edc:	4620      	mov	r0, r4
   d7ede:	bd38      	pop	{r3, r4, r5, pc}
   d7ee0:	000dc804 	.word	0x000dc804

000d7ee4 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   d7ee4:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d7ee6:	2300      	movs	r3, #0
   d7ee8:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d7eea:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d7eec:	4604      	mov	r4, r0
   d7eee:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d7ef0:	b12b      	cbz	r3, d7efe <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d7ef2:	2202      	movs	r2, #2
   d7ef4:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d7ef6:	68eb      	ldr	r3, [r5, #12]
   d7ef8:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d7efa:	68ab      	ldr	r3, [r5, #8]
   d7efc:	60a3      	str	r3, [r4, #8]
    }
   d7efe:	4620      	mov	r0, r4
   d7f00:	bd38      	pop	{r3, r4, r5, pc}
	...

000d7f04 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   d7f04:	b5f0      	push	{r4, r5, r6, r7, lr}
   d7f06:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d7f08:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d7f0a:	4668      	mov	r0, sp
   d7f0c:	f7ff ff26 	bl	d7d5c <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d7f10:	f04f 0302 	mov.w	r3, #2
   d7f14:	e8d4 2f4f 	ldrexb	r2, [r4]
   d7f18:	2a00      	cmp	r2, #0
   d7f1a:	d103      	bne.n	d7f24 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   d7f1c:	e8c4 3f41 	strexb	r1, r3, [r4]
   d7f20:	2900      	cmp	r1, #0
   d7f22:	d1f7      	bne.n	d7f14 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   d7f24:	d125      	bne.n	d7f72 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   d7f26:	f104 050c 	add.w	r5, r4, #12
   d7f2a:	4669      	mov	r1, sp
   d7f2c:	4628      	mov	r0, r5
   d7f2e:	f7ff ff15 	bl	d7d5c <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   d7f32:	f3bf 8f5b 	dmb	ish
   d7f36:	2301      	movs	r3, #1
   d7f38:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d7f3a:	2000      	movs	r0, #0
   d7f3c:	f104 0308 	add.w	r3, r4, #8
   d7f40:	f3bf 8f5b 	dmb	ish
   d7f44:	e853 6f00 	ldrex	r6, [r3]
   d7f48:	e843 0200 	strex	r2, r0, [r3]
   d7f4c:	2a00      	cmp	r2, #0
   d7f4e:	d1f9      	bne.n	d7f44 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   d7f50:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d7f54:	b16e      	cbz	r6, d7f72 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   d7f56:	f7ff fd21 	bl	d799c <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d7f5a:	b178      	cbz	r0, d7f7c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d7f5c:	4629      	mov	r1, r5
   d7f5e:	4630      	mov	r0, r6
   d7f60:	f7ff ff8b 	bl	d7e7a <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   d7f64:	4630      	mov	r0, r6
   d7f66:	f7fe fc14 	bl	d6792 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d7f6a:	2110      	movs	r1, #16
   d7f6c:	4630      	mov	r0, r6
   d7f6e:	f002 fda3 	bl	daab8 <_ZdlPvj>
        p_->setError(std::move(error));
   d7f72:	4668      	mov	r0, sp
   d7f74:	f7ff feff 	bl	d7d76 <_ZN8particle5ErrorD1Ev>
    }
   d7f78:	b009      	add	sp, #36	; 0x24
   d7f7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  typename __cv_quals<_Bound_args>::type...>;

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d7f7c:	4631      	mov	r1, r6
   d7f7e:	a802      	add	r0, sp, #8
   d7f80:	f7ff ffb0 	bl	d7ee4 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d7f84:	68e0      	ldr	r0, [r4, #12]
   d7f86:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d7f8a:	b108      	cbz	r0, d7f90 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   d7f8c:	f003 fe4e 	bl	dbc2c <strdup>
        type_(type) {
   d7f90:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d7f92:	2010      	movs	r0, #16
   d7f94:	f8ad 501c 	strh.w	r5, [sp, #28]
   d7f98:	f7fc f87d 	bl	d4096 <_Znwj>
   d7f9c:	4605      	mov	r5, r0
   d7f9e:	b1e8      	cbz	r0, d7fdc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   d7fa0:	2700      	movs	r7, #0
   d7fa2:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d7fa4:	2018      	movs	r0, #24
   d7fa6:	f7fc f876 	bl	d4096 <_Znwj>
   d7faa:	4604      	mov	r4, r0
   d7fac:	b188      	cbz	r0, d7fd2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   d7fae:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   d7fb0:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d7fb2:	a802      	add	r0, sp, #8
   d7fb4:	f7ff ff4f 	bl	d7e56 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7fb8:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d7fba:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d7fbc:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7fbe:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d7fc0:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d7fc2:	a906      	add	r1, sp, #24
   d7fc4:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d7fc6:	60e3      	str	r3, [r4, #12]
   d7fc8:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   d7fcc:	9205      	str	r2, [sp, #20]
   d7fce:	f7ff fec5 	bl	d7d5c <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   d7fd2:	4b08      	ldr	r3, [pc, #32]	; (d7ff4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   d7fd4:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d7fd6:	4b08      	ldr	r3, [pc, #32]	; (d7ff8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d7fd8:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d7fda:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   d7fdc:	a806      	add	r0, sp, #24
   d7fde:	f7ff feca 	bl	d7d76 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d7fe2:	a802      	add	r0, sp, #8
   d7fe4:	f7fe fbd5 	bl	d6792 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d7fe8:	2200      	movs	r2, #0
   d7fea:	4629      	mov	r1, r5
   d7fec:	4803      	ldr	r0, [pc, #12]	; (d7ffc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   d7fee:	f7ff fcdd 	bl	d79ac <application_thread_invoke>
   d7ff2:	e7b7      	b.n	d7f64 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   d7ff4:	000d7e8d 	.word	0x000d7e8d
   d7ff8:	000d8125 	.word	0x000d8125
   d7ffc:	000d7c63 	.word	0x000d7c63

000d8000 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d8000:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d8004:	b08a      	sub	sp, #40	; 0x28
   d8006:	4605      	mov	r5, r0
   d8008:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
   d800c:	460c      	mov	r4, r1
   d800e:	4617      	mov	r7, r2
   d8010:	4698      	mov	r8, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d8012:	f7ff fd2b 	bl	d7a6c <spark_cloud_flag_connected>
   d8016:	ae07      	add	r6, sp, #28
    if (!connected()) {
   d8018:	4682      	mov	sl, r0
   d801a:	bb38      	cbnz	r0, d806c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   d801c:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d8020:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d8022:	a905      	add	r1, sp, #20
   d8024:	4630      	mov	r0, r6
   d8026:	f8ad 3018 	strh.w	r3, [sp, #24]
   d802a:	f7ff fe97 	bl	d7d5c <_ZN8particle5ErrorC1EOS0_>
   d802e:	2014      	movs	r0, #20
   d8030:	f7fc f831 	bl	d4096 <_Znwj>
   d8034:	4604      	mov	r4, r0
   d8036:	b148      	cbz	r0, d804c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d8038:	2302      	movs	r3, #2
   d803a:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d803c:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d803e:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d8042:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   d8044:	4631      	mov	r1, r6
   d8046:	300c      	adds	r0, #12
   d8048:	f7ff fe88 	bl	d7d5c <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d804c:	4628      	mov	r0, r5
	: __shared_count(__p)
   d804e:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d8050:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   d8054:	f7ff ff32 	bl	d7ebc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d8058:	4630      	mov	r0, r6
   d805a:	f7ff fe8c 	bl	d7d76 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d805e:	a805      	add	r0, sp, #20
   d8060:	f7ff fe89 	bl	d7d76 <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   d8064:	4628      	mov	r0, r5
   d8066:	b00a      	add	sp, #40	; 0x28
   d8068:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d806c:	230c      	movs	r3, #12
   d806e:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d8072:	2014      	movs	r0, #20
   d8074:	e9cd aa08 	strd	sl, sl, [sp, #32]
   d8078:	9307      	str	r3, [sp, #28]
   d807a:	f7fc f80c 	bl	d4096 <_Znwj>
   d807e:	4601      	mov	r1, r0
   d8080:	b128      	cbz	r0, d808e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d8082:	e9c0 aa01 	strd	sl, sl, [r0, #4]
   d8086:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d808a:	f880 a001 	strb.w	sl, [r0, #1]
   d808e:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d8090:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   d8092:	f7ff ff13 	bl	d7ebc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   d8096:	4b22      	ldr	r3, [pc, #136]	; (d8120 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
   d8098:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d809a:	2008      	movs	r0, #8
   d809c:	f7fb fffb 	bl	d4096 <_Znwj>
   d80a0:	4682      	mov	sl, r0
   d80a2:	b128      	cbz	r0, d80b0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d80a4:	9b03      	ldr	r3, [sp, #12]
   d80a6:	f840 3b04 	str.w	r3, [r0], #4
   d80aa:	a904      	add	r1, sp, #16
   d80ac:	f7ff fded 	bl	d7c8a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d80b0:	9600      	str	r6, [sp, #0]
   d80b2:	fa5f f389 	uxtb.w	r3, r9
   d80b6:	4642      	mov	r2, r8
   d80b8:	4639      	mov	r1, r7
   d80ba:	4620      	mov	r0, r4
    d.handler_data = p.dataPtr();
   d80bc:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d80c0:	f7ff fcdc 	bl	d7a7c <spark_send_event>
   d80c4:	b9b8      	cbnz	r0, d80f6 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
   d80c6:	9b03      	ldr	r3, [sp, #12]
   d80c8:	785b      	ldrb	r3, [r3, #1]
   d80ca:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d80ce:	b993      	cbnz	r3, d80f6 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
   d80d0:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   d80d4:	a905      	add	r1, sp, #20
   d80d6:	a803      	add	r0, sp, #12
   d80d8:	9205      	str	r2, [sp, #20]
   d80da:	f8ad 3018 	strh.w	r3, [sp, #24]
   d80de:	f7ff ff11 	bl	d7f04 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d80e2:	a805      	add	r0, sp, #20
   d80e4:	f7ff fe47 	bl	d7d76 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d80e8:	a805      	add	r0, sp, #20
   d80ea:	9909      	ldr	r1, [sp, #36]	; 0x24
   d80ec:	f7ff fe94 	bl	d7e18 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   d80f0:	a806      	add	r0, sp, #24
   d80f2:	f7fc f93f 	bl	d4374 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d80f6:	9b03      	ldr	r3, [sp, #12]
   d80f8:	9305      	str	r3, [sp, #20]
   d80fa:	a904      	add	r1, sp, #16
   d80fc:	a806      	add	r0, sp, #24
   d80fe:	f7ff fdc4 	bl	d7c8a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   d8102:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d8104:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d8106:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   d8108:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   d810a:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   d810c:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   d810e:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   d8110:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   d8112:	f7fc f92f 	bl	d4374 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d8116:	a804      	add	r0, sp, #16
   d8118:	f7fc f92c 	bl	d4374 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   d811c:	e7a2      	b.n	d8064 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   d811e:	bf00      	nop
   d8120:	000d81e9 	.word	0x000d81e9

000d8124 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
   d8124:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d8126:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d8128:	4605      	mov	r5, r0
	  switch (__op)
   d812a:	d007      	beq.n	d813c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
   d812c:	2a03      	cmp	r2, #3
   d812e:	d018      	beq.n	d8162 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
   d8130:	2a01      	cmp	r2, #1
   d8132:	d101      	bne.n	d8138 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d8134:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d8136:	6003      	str	r3, [r0, #0]
	}
   d8138:	2000      	movs	r0, #0
   d813a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d813c:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   d813e:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d8140:	f7fb ffa9 	bl	d4096 <_Znwj>
   d8144:	4604      	mov	r4, r0
   d8146:	b150      	cbz	r0, d815e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d8148:	4631      	mov	r1, r6
   d814a:	f7ff fecb 	bl	d7ee4 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d814e:	6930      	ldr	r0, [r6, #16]
   d8150:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d8154:	b108      	cbz	r0, d815a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   d8156:	f003 fd69 	bl	dbc2c <strdup>
        type_(type) {
   d815a:	6120      	str	r0, [r4, #16]
   d815c:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   d815e:	602c      	str	r4, [r5, #0]
	}
   d8160:	e7ea      	b.n	d8138 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d8162:	6804      	ldr	r4, [r0, #0]
   d8164:	2c00      	cmp	r4, #0
   d8166:	d0e7      	beq.n	d8138 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
   d8168:	f104 0010 	add.w	r0, r4, #16
   d816c:	f7ff fe03 	bl	d7d76 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d8170:	4620      	mov	r0, r4
   d8172:	f7fe fb0e 	bl	d6792 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d8176:	2118      	movs	r1, #24
   d8178:	4620      	mov	r0, r4
   d817a:	f002 fc9d 	bl	daab8 <_ZdlPvj>
   d817e:	e7db      	b.n	d8138 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

000d8180 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   d8180:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d8182:	2300      	movs	r3, #0
   d8184:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d8186:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d8188:	4604      	mov	r4, r0
   d818a:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d818c:	b12b      	cbz	r3, d819a <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d818e:	2202      	movs	r2, #2
   d8190:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d8192:	68eb      	ldr	r3, [r5, #12]
   d8194:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d8196:	68ab      	ldr	r3, [r5, #8]
   d8198:	60a3      	str	r3, [r4, #8]
    }
   d819a:	4620      	mov	r0, r4
   d819c:	bd38      	pop	{r3, r4, r5, pc}

000d819e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
   d819e:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d81a0:	b570      	push	{r4, r5, r6, lr}
   d81a2:	4604      	mov	r4, r0
	  switch (__op)
   d81a4:	d007      	beq.n	d81b6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
   d81a6:	2a03      	cmp	r2, #3
   d81a8:	d012      	beq.n	d81d0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
   d81aa:	2a01      	cmp	r2, #1
   d81ac:	d101      	bne.n	d81b2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d81ae:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d81b0:	6003      	str	r3, [r0, #0]
	}
   d81b2:	2000      	movs	r0, #0
   d81b4:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d81b6:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   d81b8:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d81ba:	f7fb ff6c 	bl	d4096 <_Znwj>
   d81be:	4605      	mov	r5, r0
   d81c0:	b120      	cbz	r0, d81cc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   d81c2:	4631      	mov	r1, r6
   d81c4:	f7ff ffdc 	bl	d8180 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d81c8:	7c33      	ldrb	r3, [r6, #16]
   d81ca:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   d81cc:	6025      	str	r5, [r4, #0]
	}
   d81ce:	e7f0      	b.n	d81b2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d81d0:	6804      	ldr	r4, [r0, #0]
   d81d2:	2c00      	cmp	r4, #0
   d81d4:	d0ed      	beq.n	d81b2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
   d81d6:	4620      	mov	r0, r4
   d81d8:	f7fe fadb 	bl	d6792 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d81dc:	2114      	movs	r1, #20
   d81de:	4620      	mov	r0, r4
   d81e0:	f002 fc6a 	bl	daab8 <_ZdlPvj>
   d81e4:	e7e5      	b.n	d81b2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

000d81e8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d81e8:	b5f0      	push	{r4, r5, r6, r7, lr}
   d81ea:	b089      	sub	sp, #36	; 0x24
   d81ec:	4604      	mov	r4, r0
   d81ee:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d81f0:	a801      	add	r0, sp, #4
   d81f2:	4611      	mov	r1, r2
   d81f4:	f7ff fe10 	bl	d7e18 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d81f8:	b1a4      	cbz	r4, d8224 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   d81fa:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d81fc:	b11d      	cbz	r5, d8206 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   d81fe:	4628      	mov	r0, r5
   d8200:	f003 fd14 	bl	dbc2c <strdup>
   d8204:	4605      	mov	r5, r0
   d8206:	a801      	add	r0, sp, #4
   d8208:	a903      	add	r1, sp, #12
        type_(type) {
   d820a:	9503      	str	r5, [sp, #12]
   d820c:	f8ad 4010 	strh.w	r4, [sp, #16]
   d8210:	f7ff fe78 	bl	d7f04 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d8214:	a803      	add	r0, sp, #12
   d8216:	f7ff fdae 	bl	d7d76 <_ZN8particle5ErrorD1Ev>
   d821a:	a802      	add	r0, sp, #8
   d821c:	f7fc f8aa 	bl	d4374 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d8220:	b009      	add	sp, #36	; 0x24
   d8222:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d8224:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d8226:	2301      	movs	r3, #1
   d8228:	e8d5 2f4f 	ldrexb	r2, [r5]
   d822c:	2a00      	cmp	r2, #0
   d822e:	d103      	bne.n	d8238 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   d8230:	e8c5 3f41 	strexb	r1, r3, [r5]
   d8234:	2900      	cmp	r1, #0
   d8236:	d1f7      	bne.n	d8228 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   d8238:	d1ef      	bne.n	d821a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   d823a:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   d823c:	f3bf 8f5b 	dmb	ish
   d8240:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d8242:	1d2b      	adds	r3, r5, #4
   d8244:	f3bf 8f5b 	dmb	ish
   d8248:	e853 6f00 	ldrex	r6, [r3]
   d824c:	e843 4200 	strex	r2, r4, [r3]
   d8250:	2a00      	cmp	r2, #0
   d8252:	d1f9      	bne.n	d8248 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   d8254:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d8258:	2e00      	cmp	r6, #0
   d825a:	d0de      	beq.n	d821a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   d825c:	4620      	mov	r0, r4
   d825e:	f7ff fb9d 	bl	d799c <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d8262:	4607      	mov	r7, r0
   d8264:	b160      	cbz	r0, d8280 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d8266:	f105 010c 	add.w	r1, r5, #12
   d826a:	4630      	mov	r0, r6
   d826c:	f7ff fe15 	bl	d7e9a <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   d8270:	4630      	mov	r0, r6
   d8272:	f7fe fa8e 	bl	d6792 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d8276:	2110      	movs	r1, #16
   d8278:	4630      	mov	r0, r6
   d827a:	f002 fc1d 	bl	daab8 <_ZdlPvj>
   d827e:	e7cc      	b.n	d821a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d8280:	4631      	mov	r1, r6
   d8282:	a803      	add	r0, sp, #12
   d8284:	f7ff ff7c 	bl	d8180 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d8288:	7b2b      	ldrb	r3, [r5, #12]
   d828a:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d828e:	2010      	movs	r0, #16
   d8290:	f7fb ff01 	bl	d4096 <_Znwj>
   d8294:	4605      	mov	r5, r0
   d8296:	b1d0      	cbz	r0, d82ce <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   d8298:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d829a:	2014      	movs	r0, #20
   d829c:	f7fb fefb 	bl	d4096 <_Znwj>
   d82a0:	4604      	mov	r4, r0
   d82a2:	b178      	cbz	r0, d82c4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   d82a4:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d82a6:	4601      	mov	r1, r0
   d82a8:	a803      	add	r0, sp, #12
   d82aa:	f7ff fdd4 	bl	d7e56 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d82ae:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d82b0:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d82b2:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d82b4:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   d82b6:	9205      	str	r2, [sp, #20]
   d82b8:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d82ba:	60e3      	str	r3, [r4, #12]
   d82bc:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   d82c0:	9206      	str	r2, [sp, #24]
   d82c2:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   d82c4:	4b06      	ldr	r3, [pc, #24]	; (d82e0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   d82c6:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d82c8:	4b06      	ldr	r3, [pc, #24]	; (d82e4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d82ca:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d82cc:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   d82ce:	a803      	add	r0, sp, #12
   d82d0:	f7fe fa5f 	bl	d6792 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d82d4:	2200      	movs	r2, #0
   d82d6:	4629      	mov	r1, r5
   d82d8:	4803      	ldr	r0, [pc, #12]	; (d82e8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   d82da:	f7ff fb67 	bl	d79ac <application_thread_invoke>
   d82de:	e7c7      	b.n	d8270 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   d82e0:	000d7ead 	.word	0x000d7ead
   d82e4:	000d819f 	.word	0x000d819f
   d82e8:	000d7c63 	.word	0x000d7c63

000d82ec <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d82ec:	2200      	movs	r2, #0
   d82ee:	6840      	ldr	r0, [r0, #4]
   d82f0:	4611      	mov	r1, r2
   d82f2:	f7ff bc1b 	b.w	d7b2c <network_listening>

000d82f6 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d82f6:	2200      	movs	r2, #0
   d82f8:	6840      	ldr	r0, [r0, #4]
   d82fa:	4611      	mov	r1, r2
   d82fc:	f7ff bc26 	b.w	d7b4c <network_get_listen_timeout>

000d8300 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d8300:	6840      	ldr	r0, [r0, #4]
   d8302:	2200      	movs	r2, #0
   d8304:	f7ff bc1a 	b.w	d7b3c <network_set_listen_timeout>

000d8308 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d8308:	6840      	ldr	r0, [r0, #4]
   d830a:	2200      	movs	r2, #0
   d830c:	f081 0101 	eor.w	r1, r1, #1
   d8310:	f7ff bc04 	b.w	d7b1c <network_listen>

000d8314 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d8314:	2300      	movs	r3, #0
   d8316:	6840      	ldr	r0, [r0, #4]
   d8318:	461a      	mov	r2, r3
   d831a:	4619      	mov	r1, r3
   d831c:	f7ff bbf6 	b.w	d7b0c <network_off>

000d8320 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d8320:	2300      	movs	r3, #0
   d8322:	6840      	ldr	r0, [r0, #4]
   d8324:	461a      	mov	r2, r3
   d8326:	4619      	mov	r1, r3
   d8328:	f7ff bbe8 	b.w	d7afc <network_on>

000d832c <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d832c:	2200      	movs	r2, #0
   d832e:	6840      	ldr	r0, [r0, #4]
   d8330:	4611      	mov	r1, r2
   d8332:	f7ff bbdb 	b.w	d7aec <network_ready>

000d8336 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d8336:	2200      	movs	r2, #0
   d8338:	6840      	ldr	r0, [r0, #4]
   d833a:	4611      	mov	r1, r2
   d833c:	f7ff bbc6 	b.w	d7acc <network_connecting>

000d8340 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d8340:	6840      	ldr	r0, [r0, #4]
   d8342:	2200      	movs	r2, #0
   d8344:	2102      	movs	r1, #2
   d8346:	f7ff bbc9 	b.w	d7adc <network_disconnect>

000d834a <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d834a:	2300      	movs	r3, #0
   d834c:	6840      	ldr	r0, [r0, #4]
   d834e:	461a      	mov	r2, r3
   d8350:	f7ff bbb4 	b.w	d7abc <network_connect>

000d8354 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   d8354:	4b02      	ldr	r3, [pc, #8]	; (d8360 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d8356:	2203      	movs	r2, #3
   d8358:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d835a:	4a02      	ldr	r2, [pc, #8]	; (d8364 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d835c:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d835e:	4770      	bx	lr
   d8360:	2003e628 	.word	0x2003e628
   d8364:	000dc820 	.word	0x000dc820

000d8368 <_ZN8particle6detail9_getVCellEhh>:

namespace particle { namespace detail {
    // Converts VCELL_REGISTER reading to Battery Voltage
    float _getVCell(byte MSB, byte LSB) {
        // VCELL = 12-bit value, 1.25mV (1V/800) per bit
        float value = (float)((MSB << 4) | (LSB >> 4));
   d8368:	0909      	lsrs	r1, r1, #4
   d836a:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
   d836e:	ee07 1a90 	vmov	s15, r1
   d8372:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
        return value / 800.0;
    }
   d8376:	eddf 7a02 	vldr	s15, [pc, #8]	; d8380 <_ZN8particle6detail9_getVCellEhh+0x18>
   d837a:	ee80 0a27 	vdiv.f32	s0, s0, s15
   d837e:	4770      	bx	lr
   d8380:	44480000 	.word	0x44480000

000d8384 <_ZN9FuelGauge4lockEv>:
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
    return SYSTEM_ERROR_NONE;
}

bool FuelGauge::lock() {
    return i2c_.lock();
   d8384:	6800      	ldr	r0, [r0, #0]
   d8386:	f000 b90d 	b.w	d85a4 <_ZN7TwoWire4lockEv>

000d838a <_ZN9FuelGaugeC1ER7TwoWireb>:
FuelGauge::FuelGauge(TwoWire& i2c, bool _lock)
   d838a:	b510      	push	{r4, lr}
   d838c:	4604      	mov	r4, r0
      lock_(_lock) {
   d838e:	6001      	str	r1, [r0, #0]
   d8390:	7102      	strb	r2, [r0, #4]
    if (lock_) {
   d8392:	b10a      	cbz	r2, d8398 <_ZN9FuelGaugeC1ER7TwoWireb+0xe>
        lock();
   d8394:	f7ff fff6 	bl	d8384 <_ZN9FuelGauge4lockEv>
}
   d8398:	4620      	mov	r0, r4
   d839a:	bd10      	pop	{r4, pc}

000d839c <_ZN9FuelGaugeC1Eb>:
FuelGauge::FuelGauge(bool _lock)
   d839c:	b513      	push	{r0, r1, r4, lr}
   d839e:	4604      	mov	r4, r0
   d83a0:	9101      	str	r1, [sp, #4]
            return &Wire1;
   d83a2:	f002 fb65 	bl	daa70 <_Z20__fetch_global_Wire1v>
        : FuelGauge(*fuelWireInstance(), _lock)
   d83a6:	9a01      	ldr	r2, [sp, #4]
            return &Wire1;
   d83a8:	4601      	mov	r1, r0
        : FuelGauge(*fuelWireInstance(), _lock)
   d83aa:	4620      	mov	r0, r4
   d83ac:	f7ff ffed 	bl	d838a <_ZN9FuelGaugeC1ER7TwoWireb>
}
   d83b0:	4620      	mov	r0, r4
   d83b2:	b002      	add	sp, #8
   d83b4:	bd10      	pop	{r4, pc}

000d83b6 <_ZN9FuelGauge6unlockEv>:
}

bool FuelGauge::unlock() {
    return i2c_.unlock();
   d83b6:	6800      	ldr	r0, [r0, #0]
   d83b8:	f000 b8fd 	b.w	d85b6 <_ZN7TwoWire6unlockEv>

000d83bc <_ZN9FuelGauge12readRegisterEhRhS0_>:
int FuelGauge::readRegister(byte startAddress, byte &MSB, byte &LSB) {
   d83bc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   d83c0:	4604      	mov	r4, r0
   d83c2:	460d      	mov	r5, r1
   d83c4:	4617      	mov	r7, r2
   d83c6:	461e      	mov	r6, r3
   d83c8:	f7ff ffdc 	bl	d8384 <_ZN9FuelGauge4lockEv>
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d83cc:	2336      	movs	r3, #54	; 0x36
   d83ce:	f88d 3000 	strb.w	r3, [sp]
   d83d2:	2300      	movs	r3, #0
    i2c_.beginTransmission(config);
   d83d4:	6820      	ldr	r0, [r4, #0]
   d83d6:	9301      	str	r3, [sp, #4]
   d83d8:	f04f 0801 	mov.w	r8, #1
    size_ = size;
    return *this;
  }

  WireTransmission& timeout(system_tick_t ms) {
    timeout_ = ms;
   d83dc:	230a      	movs	r3, #10
   d83de:	4669      	mov	r1, sp
   d83e0:	9303      	str	r3, [sp, #12]
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d83e2:	f88d 8008 	strb.w	r8, [sp, #8]
   d83e6:	f000 f8ba 	bl	d855e <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
    i2c_.write(startAddress);
   d83ea:	6820      	ldr	r0, [r4, #0]
   d83ec:	6803      	ldr	r3, [r0, #0]
   d83ee:	4629      	mov	r1, r5
   d83f0:	689b      	ldr	r3, [r3, #8]
   d83f2:	4798      	blx	r3
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
   d83f4:	6820      	ldr	r0, [r4, #0]
   d83f6:	4641      	mov	r1, r8
   d83f8:	f000 f8c9 	bl	d858e <_ZN7TwoWire15endTransmissionEh>
   d83fc:	4605      	mov	r5, r0
   d83fe:	b140      	cbz	r0, d8412 <_ZN9FuelGauge12readRegisterEhRhS0_+0x56>
   d8400:	f06f 059f 	mvn.w	r5, #159	; 0x9f
      { _M_device.unlock(); }
   d8404:	4620      	mov	r0, r4
   d8406:	f7ff ffd6 	bl	d83b6 <_ZN9FuelGauge6unlockEv>
}
   d840a:	4628      	mov	r0, r5
   d840c:	b004      	add	sp, #16
   d840e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_ = size;
   d8412:	2302      	movs	r3, #2
    CHECK_TRUE(i2c_.requestFrom(config) == 2, SYSTEM_ERROR_TIMEOUT);
   d8414:	6820      	ldr	r0, [r4, #0]
   d8416:	9301      	str	r3, [sp, #4]
   d8418:	4669      	mov	r1, sp
   d841a:	f000 f86d 	bl	d84f8 <_ZN7TwoWire11requestFromERK16WireTransmission>
   d841e:	2802      	cmp	r0, #2
   d8420:	d1ee      	bne.n	d8400 <_ZN9FuelGauge12readRegisterEhRhS0_+0x44>
    MSB = i2c_.read();
   d8422:	6820      	ldr	r0, [r4, #0]
   d8424:	6803      	ldr	r3, [r0, #0]
   d8426:	695b      	ldr	r3, [r3, #20]
   d8428:	4798      	blx	r3
   d842a:	7038      	strb	r0, [r7, #0]
    LSB = i2c_.read();
   d842c:	6820      	ldr	r0, [r4, #0]
   d842e:	6803      	ldr	r3, [r0, #0]
   d8430:	695b      	ldr	r3, [r3, #20]
   d8432:	4798      	blx	r3
   d8434:	7030      	strb	r0, [r6, #0]
    return SYSTEM_ERROR_NONE;
   d8436:	e7e5      	b.n	d8404 <_ZN9FuelGauge12readRegisterEhRhS0_+0x48>

000d8438 <_ZN9FuelGauge8getVCellEv>:
float FuelGauge::getVCell() {
   d8438:	b507      	push	{r0, r1, r2, lr}
    byte MSB = 0;
   d843a:	2300      	movs	r3, #0
   d843c:	f88d 3006 	strb.w	r3, [sp, #6]
    byte LSB = 0;
   d8440:	f88d 3007 	strb.w	r3, [sp, #7]
    if (readRegister(VCELL_REGISTER, MSB, LSB) != SYSTEM_ERROR_NONE) {
   d8444:	f10d 0206 	add.w	r2, sp, #6
   d8448:	f10d 0307 	add.w	r3, sp, #7
   d844c:	2102      	movs	r1, #2
   d844e:	f7ff ffb5 	bl	d83bc <_ZN9FuelGauge12readRegisterEhRhS0_>
   d8452:	b940      	cbnz	r0, d8466 <_ZN9FuelGauge8getVCellEv+0x2e>
    return particle::detail::_getVCell(MSB, LSB);
   d8454:	f89d 1007 	ldrb.w	r1, [sp, #7]
   d8458:	f89d 0006 	ldrb.w	r0, [sp, #6]
}
   d845c:	b003      	add	sp, #12
   d845e:	f85d eb04 	ldr.w	lr, [sp], #4
    return particle::detail::_getVCell(MSB, LSB);
   d8462:	f7ff bf81 	b.w	d8368 <_ZN8particle6detail9_getVCellEhh>
}
   d8466:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
   d846a:	b003      	add	sp, #12
   d846c:	f85d fb04 	ldr.w	pc, [sp], #4

000d8470 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d8470:	4770      	bx	lr

000d8472 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d8472:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d8474:	4606      	mov	r6, r0
   d8476:	4615      	mov	r5, r2
   d8478:	460c      	mov	r4, r1
   d847a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d847c:	42bc      	cmp	r4, r7
   d847e:	d006      	beq.n	d848e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d8480:	6833      	ldr	r3, [r6, #0]
   d8482:	f814 1b01 	ldrb.w	r1, [r4], #1
   d8486:	689b      	ldr	r3, [r3, #8]
   d8488:	4630      	mov	r0, r6
   d848a:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d848c:	e7f6      	b.n	d847c <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d848e:	4628      	mov	r0, r5
   d8490:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d8492 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d8492:	7c00      	ldrb	r0, [r0, #16]
   d8494:	2200      	movs	r2, #0
   d8496:	f7ff b8ef 	b.w	d7678 <hal_i2c_write>

000d849a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d849a:	7c00      	ldrb	r0, [r0, #16]
   d849c:	2100      	movs	r1, #0
   d849e:	f7ff b8f3 	b.w	d7688 <hal_i2c_available>

000d84a2 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d84a2:	7c00      	ldrb	r0, [r0, #16]
   d84a4:	2100      	movs	r1, #0
   d84a6:	f7ff b8f7 	b.w	d7698 <hal_i2c_read>

000d84aa <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d84aa:	7c00      	ldrb	r0, [r0, #16]
   d84ac:	2100      	movs	r1, #0
   d84ae:	f7ff b8fb 	b.w	d76a8 <hal_i2c_peek>

000d84b2 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d84b2:	7c00      	ldrb	r0, [r0, #16]
   d84b4:	2100      	movs	r1, #0
   d84b6:	f7ff b8ff 	b.w	d76b8 <hal_i2c_flush>

000d84ba <_ZN7TwoWireD0Ev>:
   d84ba:	b510      	push	{r4, lr}
   d84bc:	2114      	movs	r1, #20
   d84be:	4604      	mov	r4, r0
   d84c0:	f002 fafa 	bl	daab8 <_ZdlPvj>
   d84c4:	4620      	mov	r0, r4
   d84c6:	bd10      	pop	{r4, pc}

000d84c8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d84c8:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d84ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d84ce:	4604      	mov	r4, r0
   d84d0:	4608      	mov	r0, r1
   d84d2:	2100      	movs	r1, #0
   d84d4:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d84d8:	4b03      	ldr	r3, [pc, #12]	; (d84e8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d84da:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d84dc:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d84de:	4611      	mov	r1, r2
   d84e0:	f7ff f8fa 	bl	d76d8 <hal_i2c_init>
}
   d84e4:	4620      	mov	r0, r4
   d84e6:	bd10      	pop	{r4, pc}
   d84e8:	000dc85c 	.word	0x000dc85c

000d84ec <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d84ec:	2300      	movs	r3, #0
   d84ee:	7c00      	ldrb	r0, [r0, #16]
   d84f0:	461a      	mov	r2, r3
   d84f2:	4619      	mov	r1, r3
   d84f4:	f7ff b8a8 	b.w	d7648 <hal_i2c_begin>

000d84f8 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d84f8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   d84fa:	2200      	movs	r2, #0
   d84fc:	2314      	movs	r3, #20
   d84fe:	e9cd 2201 	strd	r2, r2, [sp, #4]
   d8502:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   d8506:	780b      	ldrb	r3, [r1, #0]
   d8508:	f88d 3008 	strb.w	r3, [sp, #8]
   d850c:	684b      	ldr	r3, [r1, #4]
   d850e:	9303      	str	r3, [sp, #12]
   d8510:	68cb      	ldr	r3, [r1, #12]
   d8512:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   d8514:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   d8516:	7a0b      	ldrb	r3, [r1, #8]
   d8518:	9305      	str	r3, [sp, #20]
   d851a:	a901      	add	r1, sp, #4
   d851c:	f7ff f8f4 	bl	d7708 <hal_i2c_request_ex>
}
   d8520:	b007      	add	sp, #28
   d8522:	f85d fb04 	ldr.w	pc, [sp], #4

000d8526 <_ZN7TwoWire11requestFromEhjh>:
{
   d8526:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d8528:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d852a:	f88d 1000 	strb.w	r1, [sp]
   d852e:	f04f 0164 	mov.w	r1, #100	; 0x64
   d8532:	9103      	str	r1, [sp, #12]
   d8534:	bf18      	it	ne
   d8536:	2301      	movne	r3, #1
   d8538:	4669      	mov	r1, sp
    size_ = size;
   d853a:	9201      	str	r2, [sp, #4]
   d853c:	f88d 3008 	strb.w	r3, [sp, #8]
   d8540:	f7ff ffda 	bl	d84f8 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d8544:	b005      	add	sp, #20
   d8546:	f85d fb04 	ldr.w	pc, [sp], #4

000d854a <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   d854a:	2301      	movs	r3, #1
   d854c:	f7ff bfeb 	b.w	d8526 <_ZN7TwoWire11requestFromEhjh>

000d8550 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   d8550:	7c00      	ldrb	r0, [r0, #16]
   d8552:	2200      	movs	r2, #0
   d8554:	f7ff b880 	b.w	d7658 <hal_i2c_begin_transmission>

000d8558 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   d8558:	b2c9      	uxtb	r1, r1
   d855a:	f7ff bff9 	b.w	d8550 <_ZN7TwoWire17beginTransmissionEh>

000d855e <_ZN7TwoWire17beginTransmissionERK16WireTransmission>:
void TwoWire::beginTransmission(const WireTransmission& transfer) {
   d855e:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   d8560:	2300      	movs	r3, #0
   d8562:	e9cd 3301 	strd	r3, r3, [sp, #4]
    };
   d8566:	684a      	ldr	r2, [r1, #4]
   d8568:	9203      	str	r2, [sp, #12]
    hal_i2c_transmission_config_t conf = {
   d856a:	2314      	movs	r3, #20
    };
   d856c:	68ca      	ldr	r2, [r1, #12]
    hal_i2c_transmission_config_t conf = {
   d856e:	f8ad 3004 	strh.w	r3, [sp, #4]
      .address = address_,
   d8572:	780b      	ldrb	r3, [r1, #0]
    };
   d8574:	9204      	str	r2, [sp, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   d8576:	7a0a      	ldrb	r2, [r1, #8]
   d8578:	9205      	str	r2, [sp, #20]
  hal_i2c_begin_transmission(_i2c, conf.address, &conf);
   d857a:	7c00      	ldrb	r0, [r0, #16]
    };
   d857c:	f88d 3008 	strb.w	r3, [sp, #8]
   d8580:	aa01      	add	r2, sp, #4
   d8582:	4619      	mov	r1, r3
   d8584:	f7ff f868 	bl	d7658 <hal_i2c_begin_transmission>
}
   d8588:	b007      	add	sp, #28
   d858a:	f85d fb04 	ldr.w	pc, [sp], #4

000d858e <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   d858e:	7c00      	ldrb	r0, [r0, #16]
   d8590:	2200      	movs	r2, #0
   d8592:	f7ff b869 	b.w	d7668 <hal_i2c_end_transmission>

000d8596 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   d8596:	2101      	movs	r1, #1
   d8598:	f7ff bff9 	b.w	d858e <_ZN7TwoWire15endTransmissionEh>

000d859c <_ZN7TwoWire9isEnabledEv>:
  hal_i2c_set_callback_on_requested(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return hal_i2c_is_enabled(_i2c, NULL);
   d859c:	7c00      	ldrb	r0, [r0, #16]
   d859e:	2100      	movs	r1, #0
   d85a0:	f7ff b892 	b.w	d76c8 <hal_i2c_is_enabled>

000d85a4 <_ZN7TwoWire4lockEv>:
{
  hal_i2c_reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
   d85a4:	b508      	push	{r3, lr}
  return hal_i2c_lock(_i2c, NULL) == 0;
   d85a6:	2100      	movs	r1, #0
   d85a8:	7c00      	ldrb	r0, [r0, #16]
   d85aa:	f7ff f89d 	bl	d76e8 <hal_i2c_lock>
}
   d85ae:	fab0 f080 	clz	r0, r0
   d85b2:	0940      	lsrs	r0, r0, #5
   d85b4:	bd08      	pop	{r3, pc}

000d85b6 <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
   d85b6:	b508      	push	{r3, lr}
  return hal_i2c_unlock(_i2c, NULL) == 0;
   d85b8:	2100      	movs	r1, #0
   d85ba:	7c00      	ldrb	r0, [r0, #16]
   d85bc:	f7ff f89c 	bl	d76f8 <hal_i2c_unlock>
}
   d85c0:	fab0 f080 	clz	r0, r0
   d85c4:	0940      	lsrs	r0, r0, #5
   d85c6:	bd08      	pop	{r3, pc}

000d85c8 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   d85c8:	4700      	bx	r0
	...

000d85cc <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   d85cc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
   d85d0:	2400      	movs	r4, #0
{
   d85d2:	461d      	mov	r5, r3
   d85d4:	460f      	mov	r7, r1
   d85d6:	4690      	mov	r8, r2
   d85d8:	4606      	mov	r6, r0
    HAL_Interrupts_Detach(pin);
   d85da:	f7ff f825 	bl	d7628 <HAL_Interrupts_Detach>
  if (priority >= 0) {
   d85de:	42a5      	cmp	r5, r4
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d85e0:	f04f 0304 	mov.w	r3, #4
    HAL_InterruptExtraConfiguration extra = {0};
   d85e4:	f8ad 400d 	strh.w	r4, [sp, #13]
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d85e8:	f88d 300c 	strb.w	r3, [sp, #12]
    HAL_InterruptExtraConfiguration extra = {0};
   d85ec:	f88d 400f 	strb.w	r4, [sp, #15]
    extra.IRQChannelSubPriority = subpriority;
   d85f0:	bfa2      	ittt	ge
   d85f2:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   d85f6:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
   d85fa:	ac03      	addge	r4, sp, #12
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d85fc:	4907      	ldr	r1, [pc, #28]	; (d861c <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)
   d85fe:	9400      	str	r4, [sp, #0]
   d8600:	4643      	mov	r3, r8
   d8602:	463a      	mov	r2, r7
   d8604:	4630      	mov	r0, r6
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   d8606:	bfa8      	it	ge
   d8608:	f88d 500d 	strbge.w	r5, [sp, #13]
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d860c:	f7ff f804 	bl	d7618 <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
   d8610:	fab0 f080 	clz	r0, r0
   d8614:	0940      	lsrs	r0, r0, #5
   d8616:	b004      	add	sp, #16
   d8618:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d861c:	000d85c9 	.word	0x000d85c9

000d8620 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d8620:	4770      	bx	lr

000d8622 <_ZN9IPAddressD0Ev>:
   d8622:	b510      	push	{r4, lr}
   d8624:	2118      	movs	r1, #24
   d8626:	4604      	mov	r4, r0
   d8628:	f002 fa46 	bl	daab8 <_ZdlPvj>
   d862c:	4620      	mov	r0, r4
   d862e:	bd10      	pop	{r4, pc}

000d8630 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d8630:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d8632:	7d03      	ldrb	r3, [r0, #20]
   d8634:	2b06      	cmp	r3, #6
{
   d8636:	b08d      	sub	sp, #52	; 0x34
   d8638:	460e      	mov	r6, r1
   d863a:	f100 0704 	add.w	r7, r0, #4
   d863e:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d8642:	d012      	beq.n	d866a <_ZNK9IPAddress7printToER5Print+0x3a>
   d8644:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d8648:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d864c:	220a      	movs	r2, #10
   d864e:	4630      	mov	r0, r6
   d8650:	f001 fafe 	bl	d9c50 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d8654:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d8656:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d8658:	d019      	beq.n	d868e <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d865a:	2c00      	cmp	r4, #0
   d865c:	d0f4      	beq.n	d8648 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d865e:	212e      	movs	r1, #46	; 0x2e
   d8660:	4630      	mov	r0, r6
   d8662:	f001 fae6 	bl	d9c32 <_ZN5Print5printEc>
   d8666:	4404      	add	r4, r0
   d8668:	e7ee      	b.n	d8648 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d866a:	232f      	movs	r3, #47	; 0x2f
   d866c:	466a      	mov	r2, sp
   d866e:	4639      	mov	r1, r7
   d8670:	200a      	movs	r0, #10
		buf[0] = 0;
   d8672:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d8676:	f7ff f84f 	bl	d7718 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d867a:	4668      	mov	r0, sp
   d867c:	f003 faf3 	bl	dbc66 <strlen>
   d8680:	6833      	ldr	r3, [r6, #0]
   d8682:	4602      	mov	r2, r0
   d8684:	68db      	ldr	r3, [r3, #12]
   d8686:	4669      	mov	r1, sp
   d8688:	4630      	mov	r0, r6
   d868a:	4798      	blx	r3
   d868c:	4604      	mov	r4, r0
    }
    return n;
}
   d868e:	4620      	mov	r0, r4
   d8690:	b00d      	add	sp, #52	; 0x34
   d8692:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d8694 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d8694:	b510      	push	{r4, lr}
   d8696:	4b05      	ldr	r3, [pc, #20]	; (d86ac <_ZN9IPAddressC1Ev+0x18>)
   d8698:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d869a:	2211      	movs	r2, #17
   d869c:	f840 3b04 	str.w	r3, [r0], #4
   d86a0:	2100      	movs	r1, #0
   d86a2:	f003 fa6d 	bl	dbb80 <memset>
}
   d86a6:	4620      	mov	r0, r4
   d86a8:	bd10      	pop	{r4, pc}
   d86aa:	bf00      	nop
   d86ac:	000dc884 	.word	0x000dc884

000d86b0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d86b0:	4603      	mov	r3, r0
   d86b2:	4a07      	ldr	r2, [pc, #28]	; (d86d0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d86b4:	b510      	push	{r4, lr}
   d86b6:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d86ba:	f101 0210 	add.w	r2, r1, #16
   d86be:	f851 4b04 	ldr.w	r4, [r1], #4
   d86c2:	f843 4b04 	str.w	r4, [r3], #4
   d86c6:	4291      	cmp	r1, r2
   d86c8:	d1f9      	bne.n	d86be <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d86ca:	780a      	ldrb	r2, [r1, #0]
   d86cc:	701a      	strb	r2, [r3, #0]
}
   d86ce:	bd10      	pop	{r4, pc}
   d86d0:	000dc884 	.word	0x000dc884

000d86d4 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d86d4:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d86d6:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d86da:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d86de:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d86e2:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d86e6:	2304      	movs	r3, #4
   d86e8:	6041      	str	r1, [r0, #4]
   d86ea:	7503      	strb	r3, [r0, #20]
}
   d86ec:	bd10      	pop	{r4, pc}

000d86ee <_ZN9IPAddressaSEPKh>:
{
   d86ee:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d86f0:	78cb      	ldrb	r3, [r1, #3]
   d86f2:	9300      	str	r3, [sp, #0]
   d86f4:	788b      	ldrb	r3, [r1, #2]
   d86f6:	784a      	ldrb	r2, [r1, #1]
   d86f8:	7809      	ldrb	r1, [r1, #0]
   d86fa:	f7ff ffeb 	bl	d86d4 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d86fe:	b002      	add	sp, #8
   d8700:	bd10      	pop	{r4, pc}

000d8702 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
   d8702:	f100 0310 	add.w	r3, r0, #16
   d8706:	2201      	movs	r2, #1
    do {
        if (t->type == JSMN_OBJECT) {
   d8708:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   d870c:	2901      	cmp	r1, #1
   d870e:	4618      	mov	r0, r3
   d8710:	d108      	bne.n	d8724 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
   d8712:	f853 1c04 	ldr.w	r1, [r3, #-4]
   d8716:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
   d871a:	3a01      	subs	r2, #1
   d871c:	f103 0310 	add.w	r3, r3, #16
   d8720:	d1f2      	bne.n	d8708 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
   d8722:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
   d8724:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   d8726:	bf04      	itt	eq
   d8728:	f853 1c04 	ldreq.w	r1, [r3, #-4]
   d872c:	1852      	addeq	r2, r2, r1
   d872e:	e7f4      	b.n	d871a <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

000d8730 <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   d8730:	b40e      	push	{r1, r2, r3}
   d8732:	b5f0      	push	{r4, r5, r6, r7, lr}
   d8734:	b088      	sub	sp, #32
   d8736:	af00      	add	r7, sp, #0
   d8738:	f107 0534 	add.w	r5, r7, #52	; 0x34
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d873c:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
   d873e:	f855 2b04 	ldr.w	r2, [r5], #4
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d8742:	607a      	str	r2, [r7, #4]
void spark::JSONWriter::printf(const char *fmt, ...) {
   d8744:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d8746:	462b      	mov	r3, r5
   d8748:	1878      	adds	r0, r7, r1
    va_start(args, fmt);
   d874a:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d874c:	f7ff fa3e 	bl	d7bcc <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   d8750:	280f      	cmp	r0, #15
   d8752:	687a      	ldr	r2, [r7, #4]
   d8754:	d91a      	bls.n	d878c <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
   d8756:	f100 0308 	add.w	r3, r0, #8
   d875a:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   d875e:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
   d8760:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   d8764:	1c41      	adds	r1, r0, #1
   d8766:	462b      	mov	r3, r5
   d8768:	4668      	mov	r0, sp
        va_start(args, fmt);
   d876a:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   d876c:	f7ff fa2e 	bl	d7bcc <vsnprintf>
        if (n > 0) {
   d8770:	1e02      	subs	r2, r0, #0
   d8772:	dd04      	ble.n	d877e <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
   d8774:	6823      	ldr	r3, [r4, #0]
   d8776:	4669      	mov	r1, sp
   d8778:	689b      	ldr	r3, [r3, #8]
   d877a:	4620      	mov	r0, r4
   d877c:	4798      	blx	r3
   d877e:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
   d8780:	3720      	adds	r7, #32
   d8782:	46bd      	mov	sp, r7
   d8784:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   d8788:	b003      	add	sp, #12
   d878a:	4770      	bx	lr
    } else if (n > 0) {
   d878c:	2800      	cmp	r0, #0
   d878e:	d0f7      	beq.n	d8780 <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
   d8790:	6823      	ldr	r3, [r4, #0]
   d8792:	4602      	mov	r2, r0
   d8794:	689b      	ldr	r3, [r3, #8]
   d8796:	f107 0110 	add.w	r1, r7, #16
   d879a:	4620      	mov	r0, r4
   d879c:	4798      	blx	r3
}
   d879e:	e7ef      	b.n	d8780 <_ZN5spark10JSONWriter6printfEPKcz+0x50>

000d87a0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d87a0:	b510      	push	{r4, lr}
          _M_dispose();
   d87a2:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d87a4:	4604      	mov	r4, r0
          _M_dispose();
   d87a6:	689b      	ldr	r3, [r3, #8]
   d87a8:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d87aa:	68a3      	ldr	r3, [r4, #8]
   d87ac:	3b01      	subs	r3, #1
   d87ae:	60a3      	str	r3, [r4, #8]
   d87b0:	b92b      	cbnz	r3, d87be <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
   d87b2:	6823      	ldr	r3, [r4, #0]
   d87b4:	4620      	mov	r0, r4
   d87b6:	68db      	ldr	r3, [r3, #12]
    }
   d87b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   d87bc:	4718      	bx	r3
    }
   d87be:	bd10      	pop	{r4, pc}

000d87c0 <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   d87c0:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   d87c2:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
   d87c4:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   d87c8:	689b      	ldr	r3, [r3, #8]
   d87ca:	2201      	movs	r2, #1
   d87cc:	f10d 0107 	add.w	r1, sp, #7
   d87d0:	4798      	blx	r3
}
   d87d2:	b003      	add	sp, #12
   d87d4:	f85d fb04 	ldr.w	pc, [sp], #4

000d87d8 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>:
    class __shared_ptr
   d87d8:	b538      	push	{r3, r4, r5, lr}
   d87da:	680b      	ldr	r3, [r1, #0]
   d87dc:	6003      	str	r3, [r0, #0]
   d87de:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
   d87e0:	6843      	ldr	r3, [r0, #4]
   d87e2:	429d      	cmp	r5, r3
    class __shared_ptr
   d87e4:	4604      	mov	r4, r0
	if (__tmp != _M_pi)
   d87e6:	d00c      	beq.n	d8802 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x2a>
	    if (__tmp != 0)
   d87e8:	b115      	cbz	r5, d87f0 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x18>
    { ++_M_use_count; }
   d87ea:	686b      	ldr	r3, [r5, #4]
   d87ec:	3301      	adds	r3, #1
   d87ee:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   d87f0:	6860      	ldr	r0, [r4, #4]
   d87f2:	b128      	cbz	r0, d8800 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x28>
      if (--_M_use_count == 0)
   d87f4:	6843      	ldr	r3, [r0, #4]
   d87f6:	3b01      	subs	r3, #1
   d87f8:	6043      	str	r3, [r0, #4]
   d87fa:	b90b      	cbnz	r3, d8800 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x28>
   d87fc:	f7ff ffd0 	bl	d87a0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
	    _M_pi = __tmp;
   d8800:	6065      	str	r5, [r4, #4]
    class __shared_ptr
   d8802:	4620      	mov	r0, r4
   d8804:	bd38      	pop	{r3, r4, r5, pc}

000d8806 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   d8806:	460b      	mov	r3, r1
   d8808:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
   d880a:	2200      	movs	r2, #0
   d880c:	b510      	push	{r4, lr}
      constexpr __shared_count() noexcept : _M_pi(0)
   d880e:	e9c0 2200 	strd	r2, r2, [r0]
   d8812:	4604      	mov	r4, r0
        t_ = t;
   d8814:	6083      	str	r3, [r0, #8]
    if (t) {
   d8816:	b90b      	cbnz	r3, d881c <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
   d8818:	4620      	mov	r0, r4
   d881a:	bd10      	pop	{r4, pc}
   *
   *  The object pointed to is deleted when the last shared_ptr pointing to
   *  it is destroyed or reset.
  */
  template<typename _Tp>
    class shared_ptr : public __shared_ptr<_Tp>
   d881c:	f7ff ffdc 	bl	d87d8 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
   d8820:	e7fa      	b.n	d8818 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

000d8822 <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
   d8822:	6883      	ldr	r3, [r0, #8]
   d8824:	b1eb      	cbz	r3, d8862 <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
   d8826:	781a      	ldrb	r2, [r3, #0]
   d8828:	2a03      	cmp	r2, #3
   d882a:	d81a      	bhi.n	d8862 <_ZNK5spark9JSONValue4typeEv+0x40>
   d882c:	e8df f002 	tbb	[pc, r2]
   d8830:	1b021704 	.word	0x1b021704
   d8834:	2005      	movs	r0, #5
   d8836:	4770      	bx	lr
        const char c = d_->json[t_->start];
   d8838:	6802      	ldr	r2, [r0, #0]
   d883a:	685b      	ldr	r3, [r3, #4]
   d883c:	6852      	ldr	r2, [r2, #4]
   d883e:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   d8840:	282d      	cmp	r0, #45	; 0x2d
   d8842:	d012      	beq.n	d886a <_ZNK5spark9JSONValue4typeEv+0x48>
   d8844:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d8848:	2b09      	cmp	r3, #9
   d884a:	d90e      	bls.n	d886a <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   d884c:	2874      	cmp	r0, #116	; 0x74
   d884e:	d00e      	beq.n	d886e <_ZNK5spark9JSONValue4typeEv+0x4c>
   d8850:	2866      	cmp	r0, #102	; 0x66
   d8852:	d00c      	beq.n	d886e <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
   d8854:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   d8858:	4258      	negs	r0, r3
   d885a:	4158      	adcs	r0, r3
   d885c:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
   d885e:	2006      	movs	r0, #6
   d8860:	4770      	bx	lr
        return JSON_TYPE_INVALID;
   d8862:	2000      	movs	r0, #0
   d8864:	4770      	bx	lr
        return JSON_TYPE_STRING;
   d8866:	2004      	movs	r0, #4
   d8868:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
   d886a:	2003      	movs	r0, #3
   d886c:	4770      	bx	lr
            return JSON_TYPE_BOOL;
   d886e:	2002      	movs	r0, #2
}
   d8870:	4770      	bx	lr

000d8872 <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
   d8872:	b510      	push	{r4, lr}
   d8874:	4604      	mov	r4, r0
    switch (type()) {
   d8876:	f7ff ffd4 	bl	d8822 <_ZNK5spark9JSONValue4typeEv>
   d887a:	2802      	cmp	r0, #2
   d887c:	d00e      	beq.n	d889c <_ZNK5spark9JSONValue5toIntEv+0x2a>
   d887e:	1ec3      	subs	r3, r0, #3
   d8880:	b2db      	uxtb	r3, r3
   d8882:	2b01      	cmp	r3, #1
   d8884:	d814      	bhi.n	d88b0 <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
   d8886:	6822      	ldr	r2, [r4, #0]
   d8888:	68a3      	ldr	r3, [r4, #8]
   d888a:	6850      	ldr	r0, [r2, #4]
   d888c:	685b      	ldr	r3, [r3, #4]
}
   d888e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
   d8892:	220a      	movs	r2, #10
   d8894:	2100      	movs	r1, #0
   d8896:	4418      	add	r0, r3
   d8898:	f003 baa0 	b.w	dbddc <strtol>
        const char* const s = d_->json + t_->start;
   d889c:	6822      	ldr	r2, [r4, #0]
   d889e:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   d88a0:	6852      	ldr	r2, [r2, #4]
   d88a2:	685b      	ldr	r3, [r3, #4]
   d88a4:	5cd0      	ldrb	r0, [r2, r3]
   d88a6:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   d88aa:	4258      	negs	r0, r3
   d88ac:	4158      	adcs	r0, r3
}
   d88ae:	bd10      	pop	{r4, pc}
    switch (type()) {
   d88b0:	2000      	movs	r0, #0
   d88b2:	e7fc      	b.n	d88ae <_ZNK5spark9JSONValue5toIntEv+0x3c>

000d88b4 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   d88b4:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   d88b6:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   d88b8:	e9c0 3300 	strd	r3, r3, [r0]
   d88bc:	4604      	mov	r4, r0
        n_(0) {
   d88be:	480e      	ldr	r0, [pc, #56]	; (d88f8 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
   d88c0:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   d88c4:	b1a9      	cbz	r1, d88f2 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
   d88c6:	780b      	ldrb	r3, [r1, #0]
   d88c8:	2b03      	cmp	r3, #3
   d88ca:	d006      	beq.n	d88da <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   d88cc:	b98b      	cbnz	r3, d88f2 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   d88ce:	6813      	ldr	r3, [r2, #0]
   d88d0:	6858      	ldr	r0, [r3, #4]
   d88d2:	684b      	ldr	r3, [r1, #4]
   d88d4:	5cc3      	ldrb	r3, [r0, r3]
   d88d6:	2b6e      	cmp	r3, #110	; 0x6e
   d88d8:	d007      	beq.n	d88ea <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
   d88da:	6813      	ldr	r3, [r2, #0]
   d88dc:	684d      	ldr	r5, [r1, #4]
   d88de:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
   d88e0:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
   d88e2:	4428      	add	r0, r5
            n_ = t->end - t->start;
   d88e4:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
   d88e6:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
   d88e8:	60e3      	str	r3, [r4, #12]
   d88ea:	4611      	mov	r1, r2
   d88ec:	4620      	mov	r0, r4
   d88ee:	f7ff ff73 	bl	d87d8 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
}
   d88f2:	4620      	mov	r0, r4
   d88f4:	bd38      	pop	{r3, r4, r5, pc}
   d88f6:	bf00      	nop
   d88f8:	000dc8f0 	.word	0x000dc8f0

000d88fc <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   d88fc:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   d88fe:	2500      	movs	r5, #0
   d8900:	460b      	mov	r3, r1
      constexpr __shared_count() noexcept : _M_pi(0)
   d8902:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
   d8906:	e9c0 5502 	strd	r5, r5, [r0, #8]
   d890a:	e9c0 5504 	strd	r5, r5, [r0, #16]
   d890e:	4604      	mov	r4, r0
   d8910:	4611      	mov	r1, r2
    if (t && t->type == JSMN_OBJECT) {
   d8912:	b14b      	cbz	r3, d8928 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
   d8914:	781a      	ldrb	r2, [r3, #0]
   d8916:	2a01      	cmp	r2, #1
   d8918:	d106      	bne.n	d8928 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
   d891a:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
   d891e:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
   d8920:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
   d8922:	6143      	str	r3, [r0, #20]
   d8924:	f7ff ff58 	bl	d87d8 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
}
   d8928:	4620      	mov	r0, r4
   d892a:	bd38      	pop	{r3, r4, r5, pc}

000d892c <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
   d892c:	b510      	push	{r4, lr}
    if (!n_) {
   d892e:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
   d8930:	4604      	mov	r4, r0
    if (!n_) {
   d8932:	b163      	cbz	r3, d894e <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
   d8934:	6880      	ldr	r0, [r0, #8]
   d8936:	60e0      	str	r0, [r4, #12]
    --n_;
   d8938:	3b01      	subs	r3, #1
    ++t_;
   d893a:	3010      	adds	r0, #16
   d893c:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   d893e:	6120      	str	r0, [r4, #16]
    --n_;
   d8940:	6163      	str	r3, [r4, #20]
    if (n_) {
   d8942:	b113      	cbz	r3, d894a <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
   d8944:	f7ff fedd 	bl	d8702 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   d8948:	60a0      	str	r0, [r4, #8]
    return true;
   d894a:	2001      	movs	r0, #1
   d894c:	e000      	b.n	d8950 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
   d894e:	4618      	mov	r0, r3
}
   d8950:	bd10      	pop	{r4, pc}

000d8952 <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
   d8952:	b510      	push	{r4, lr}
    write('}');
   d8954:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
   d8956:	4604      	mov	r4, r0
    write('}');
   d8958:	f7ff ff32 	bl	d87c0 <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   d895c:	2301      	movs	r3, #1
   d895e:	7123      	strb	r3, [r4, #4]
}
   d8960:	4620      	mov	r0, r4
   d8962:	bd10      	pop	{r4, pc}

000d8964 <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
   d8964:	b508      	push	{r3, lr}
    switch (state_) {
   d8966:	7903      	ldrb	r3, [r0, #4]
   d8968:	2b01      	cmp	r3, #1
   d896a:	d002      	beq.n	d8972 <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   d896c:	2b02      	cmp	r3, #2
   d896e:	d004      	beq.n	d897a <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
   d8970:	bd08      	pop	{r3, pc}
        write(',');
   d8972:	212c      	movs	r1, #44	; 0x2c
        write(':');
   d8974:	f7ff ff24 	bl	d87c0 <_ZN5spark10JSONWriter5writeEc>
}
   d8978:	e7fa      	b.n	d8970 <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
   d897a:	213a      	movs	r1, #58	; 0x3a
   d897c:	e7fa      	b.n	d8974 <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

000d897e <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
   d897e:	b510      	push	{r4, lr}
   d8980:	4604      	mov	r4, r0
    writeSeparator();
   d8982:	f7ff ffef 	bl	d8964 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   d8986:	4620      	mov	r0, r4
   d8988:	217b      	movs	r1, #123	; 0x7b
   d898a:	f7ff ff19 	bl	d87c0 <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   d898e:	2300      	movs	r3, #0
   d8990:	7123      	strb	r3, [r4, #4]
}
   d8992:	4620      	mov	r0, r4
   d8994:	bd10      	pop	{r4, pc}
	...

000d8998 <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
   d8998:	b513      	push	{r0, r1, r4, lr}
   d899a:	4604      	mov	r4, r0
   d899c:	9101      	str	r1, [sp, #4]
    writeSeparator();
   d899e:	f7ff ffe1 	bl	d8964 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   d89a2:	6823      	ldr	r3, [r4, #0]
   d89a4:	9a01      	ldr	r2, [sp, #4]
   d89a6:	68db      	ldr	r3, [r3, #12]
   d89a8:	4903      	ldr	r1, [pc, #12]	; (d89b8 <_ZN5spark10JSONWriter5valueEi+0x20>)
   d89aa:	4620      	mov	r0, r4
   d89ac:	4798      	blx	r3
    state_ = NEXT;
   d89ae:	2301      	movs	r3, #1
}
   d89b0:	4620      	mov	r0, r4
    state_ = NEXT;
   d89b2:	7123      	strb	r3, [r4, #4]
}
   d89b4:	b002      	add	sp, #8
   d89b6:	bd10      	pop	{r4, pc}
   d89b8:	000dc05f 	.word	0x000dc05f

000d89bc <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   d89bc:	b513      	push	{r0, r1, r4, lr}
   d89be:	4604      	mov	r4, r0
   d89c0:	9101      	str	r1, [sp, #4]
    writeSeparator();
   d89c2:	f7ff ffcf 	bl	d8964 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   d89c6:	6823      	ldr	r3, [r4, #0]
   d89c8:	9a01      	ldr	r2, [sp, #4]
   d89ca:	68db      	ldr	r3, [r3, #12]
   d89cc:	4903      	ldr	r1, [pc, #12]	; (d89dc <_ZN5spark10JSONWriter5valueEj+0x20>)
   d89ce:	4620      	mov	r0, r4
   d89d0:	4798      	blx	r3
    state_ = NEXT;
   d89d2:	2301      	movs	r3, #1
}
   d89d4:	4620      	mov	r0, r4
    state_ = NEXT;
   d89d6:	7123      	strb	r3, [r4, #4]
}
   d89d8:	b002      	add	sp, #8
   d89da:	bd10      	pop	{r4, pc}
   d89dc:	000dc697 	.word	0x000dc697

000d89e0 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   d89e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d89e4:	460d      	mov	r5, r1
   d89e6:	4617      	mov	r7, r2
    write('"');
   d89e8:	2122      	movs	r1, #34	; 0x22
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   d89ea:	f8df 80a0 	ldr.w	r8, [pc, #160]	; d8a8c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xac>
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   d89ee:	4604      	mov	r4, r0
    const char* const end = str + size;
   d89f0:	442f      	add	r7, r5
    write('"');
   d89f2:	f7ff fee5 	bl	d87c0 <_ZN5spark10JSONWriter5writeEc>
    const char* const end = str + size;
   d89f6:	4629      	mov	r1, r5
    while (s != end) {
   d89f8:	42bd      	cmp	r5, r7
   d89fa:	462a      	mov	r2, r5
   d89fc:	d038      	beq.n	d8a70 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x90>
        const char c = *s;
   d89fe:	f815 6b01 	ldrb.w	r6, [r5], #1
        if (c == '"' || c == '\\' || (c >= 0 && c <= 0x1f)) {
   d8a02:	2e22      	cmp	r6, #34	; 0x22
   d8a04:	d003      	beq.n	d8a0e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2e>
   d8a06:	2e5c      	cmp	r6, #92	; 0x5c
   d8a08:	d001      	beq.n	d8a0e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2e>
   d8a0a:	2e1f      	cmp	r6, #31
   d8a0c:	d8f4      	bhi.n	d89f8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
   d8a0e:	6823      	ldr	r3, [r4, #0]
   d8a10:	1a52      	subs	r2, r2, r1
   d8a12:	689b      	ldr	r3, [r3, #8]
   d8a14:	4620      	mov	r0, r4
   d8a16:	4798      	blx	r3
            write('\\');
   d8a18:	215c      	movs	r1, #92	; 0x5c
   d8a1a:	4620      	mov	r0, r4
   d8a1c:	f7ff fed0 	bl	d87c0 <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   d8a20:	2e0d      	cmp	r6, #13
   d8a22:	d80a      	bhi.n	d8a3a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x5a>
   d8a24:	2e07      	cmp	r6, #7
   d8a26:	d91c      	bls.n	d8a62 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
   d8a28:	f1a6 0308 	sub.w	r3, r6, #8
   d8a2c:	2b05      	cmp	r3, #5
   d8a2e:	d818      	bhi.n	d8a62 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
   d8a30:	e8df f003 	tbb	[pc, r3]
   d8a34:	17110f0d 	.word	0x17110f0d
   d8a38:	1513      	.short	0x1513
   d8a3a:	2e22      	cmp	r6, #34	; 0x22
   d8a3c:	d001      	beq.n	d8a42 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x62>
   d8a3e:	2e5c      	cmp	r6, #92	; 0x5c
   d8a40:	d10f      	bne.n	d8a62 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
                write(c);
   d8a42:	4631      	mov	r1, r6
                write('b');
   d8a44:	4620      	mov	r0, r4
   d8a46:	f7ff febb 	bl	d87c0 <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
   d8a4a:	4629      	mov	r1, r5
    while (s != end) {
   d8a4c:	e7d4      	b.n	d89f8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
   d8a4e:	2162      	movs	r1, #98	; 0x62
   d8a50:	e7f8      	b.n	d8a44 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('t');
   d8a52:	2174      	movs	r1, #116	; 0x74
   d8a54:	e7f6      	b.n	d8a44 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('n');
   d8a56:	216e      	movs	r1, #110	; 0x6e
   d8a58:	e7f4      	b.n	d8a44 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('f');
   d8a5a:	2166      	movs	r1, #102	; 0x66
   d8a5c:	e7f2      	b.n	d8a44 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('r');
   d8a5e:	2172      	movs	r1, #114	; 0x72
   d8a60:	e7f0      	b.n	d8a44 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                printf("u%04x", (unsigned)c);
   d8a62:	6823      	ldr	r3, [r4, #0]
   d8a64:	4632      	mov	r2, r6
   d8a66:	68db      	ldr	r3, [r3, #12]
   d8a68:	4641      	mov	r1, r8
   d8a6a:	4620      	mov	r0, r4
   d8a6c:	4798      	blx	r3
                break;
   d8a6e:	e7ec      	b.n	d8a4a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6a>
        }
        ++s;
    }
    if (s != str) {
   d8a70:	428d      	cmp	r5, r1
   d8a72:	d004      	beq.n	d8a7e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9e>
        write(str, s - str); // Write remaining characters
   d8a74:	6823      	ldr	r3, [r4, #0]
   d8a76:	1a6a      	subs	r2, r5, r1
   d8a78:	689b      	ldr	r3, [r3, #8]
   d8a7a:	4620      	mov	r0, r4
   d8a7c:	4798      	blx	r3
    }
    write('"');
   d8a7e:	2122      	movs	r1, #34	; 0x22
   d8a80:	4620      	mov	r0, r4
   d8a82:	f7ff fe9d 	bl	d87c0 <_ZN5spark10JSONWriter5writeEc>
}
   d8a86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d8a8a:	bf00      	nop
   d8a8c:	000dc890 	.word	0x000dc890

000d8a90 <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   d8a90:	b513      	push	{r0, r1, r4, lr}
   d8a92:	4604      	mov	r4, r0
   d8a94:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   d8a98:	f7ff ff64 	bl	d8964 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   d8a9c:	4620      	mov	r0, r4
   d8a9e:	e9dd 2100 	ldrd	r2, r1, [sp]
   d8aa2:	f7ff ff9d 	bl	d89e0 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   d8aa6:	2302      	movs	r3, #2
}
   d8aa8:	4620      	mov	r0, r4
    state_ = VALUE;
   d8aaa:	7123      	strb	r3, [r4, #4]
}
   d8aac:	b002      	add	sp, #8
   d8aae:	bd10      	pop	{r4, pc}

000d8ab0 <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   d8ab0:	b513      	push	{r0, r1, r4, lr}
   d8ab2:	4604      	mov	r4, r0
   d8ab4:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   d8ab8:	f7ff ff54 	bl	d8964 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   d8abc:	4620      	mov	r0, r4
   d8abe:	e9dd 2100 	ldrd	r2, r1, [sp]
   d8ac2:	f7ff ff8d 	bl	d89e0 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   d8ac6:	2301      	movs	r3, #1
}
   d8ac8:	4620      	mov	r0, r4
    state_ = NEXT;
   d8aca:	7123      	strb	r3, [r4, #4]
}
   d8acc:	b002      	add	sp, #8
   d8ace:	bd10      	pop	{r4, pc}

000d8ad0 <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
   d8ad0:	6880      	ldr	r0, [r0, #8]
   d8ad2:	6803      	ldr	r3, [r0, #0]
   d8ad4:	68db      	ldr	r3, [r3, #12]
   d8ad6:	4718      	bx	r3

000d8ad8 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
   d8ad8:	4770      	bx	lr

000d8ada <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   d8ada:	4608      	mov	r0, r1
   d8adc:	b111      	cbz	r1, d8ae4 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   d8ade:	680b      	ldr	r3, [r1, #0]
   d8ae0:	685b      	ldr	r3, [r3, #4]
   d8ae2:	4718      	bx	r3
}
   d8ae4:	4770      	bx	lr

000d8ae6 <__tcf_0>:
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
    static DefaultLogHandlerFactory factory;
   d8ae6:	4770      	bx	lr

000d8ae8 <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   d8ae8:	4770      	bx	lr

000d8aea <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
   d8aea:	4770      	bx	lr

000d8aec <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
   d8aec:	4770      	bx	lr

000d8aee <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
const char* nextSubcategoryName(const char* &category, size_t &size) {
   d8aee:	b538      	push	{r3, r4, r5, lr}
   d8af0:	4604      	mov	r4, r0
   d8af2:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   d8af4:	6800      	ldr	r0, [r0, #0]
   d8af6:	212e      	movs	r1, #46	; 0x2e
   d8af8:	f003 f87b 	bl	dbbf2 <strchrnul>
    size = s - category;
   d8afc:	6823      	ldr	r3, [r4, #0]
   d8afe:	1ac3      	subs	r3, r0, r3
   d8b00:	602b      	str	r3, [r5, #0]
    if (size) {
   d8b02:	b123      	cbz	r3, d8b0e <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   d8b04:	7803      	ldrb	r3, [r0, #0]
   d8b06:	b103      	cbz	r3, d8b0a <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   d8b08:	3001      	adds	r0, #1
   d8b0a:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d8b0c:	6020      	str	r0, [r4, #0]
}
   d8b0e:	4618      	mov	r0, r3
   d8b10:	bd38      	pop	{r3, r4, r5, pc}

000d8b12 <_ZN5spark16JSONStreamWriterD0Ev>:
   d8b12:	b510      	push	{r4, lr}
   d8b14:	210c      	movs	r1, #12
   d8b16:	4604      	mov	r4, r0
   d8b18:	f001 ffce 	bl	daab8 <_ZdlPvj>
   d8b1c:	4620      	mov	r0, r4
   d8b1e:	bd10      	pop	{r4, pc}

000d8b20 <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   d8b20:	b510      	push	{r4, lr}
   d8b22:	2104      	movs	r1, #4
   d8b24:	4604      	mov	r4, r0
   d8b26:	f001 ffc7 	bl	daab8 <_ZdlPvj>
   d8b2a:	4620      	mov	r0, r4
   d8b2c:	bd10      	pop	{r4, pc}

000d8b2e <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   d8b2e:	b510      	push	{r4, lr}
   d8b30:	2104      	movs	r1, #4
   d8b32:	4604      	mov	r4, r0
   d8b34:	f001 ffc0 	bl	daab8 <_ZdlPvj>
   d8b38:	4620      	mov	r0, r4
   d8b3a:	bd10      	pop	{r4, pc}

000d8b3c <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
   d8b3c:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   d8b3e:	f003 f862 	bl	dbc06 <strcmp>
}
   d8b42:	fab0 f080 	clz	r0, r0
   d8b46:	0940      	lsrs	r0, r0, #5
   d8b48:	bd08      	pop	{r3, pc}

000d8b4a <__tcf_1>:
   d8b4a:	4770      	bx	lr

000d8b4c <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != 3
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   d8b4c:	b510      	push	{r4, lr}
   d8b4e:	460c      	mov	r4, r1
#if PLATFORM_ID != 3
    if (stream == &Serial) {
   d8b50:	f001 fdde 	bl	da710 <_Z16_fetch_usbserialv>
   d8b54:	4284      	cmp	r4, r0
   d8b56:	d010      	beq.n	d8b7a <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   d8b58:	f001 fd38 	bl	da5cc <_Z22__fetch_global_Serial1v>
   d8b5c:	4284      	cmp	r4, r0
   d8b5e:	d105      	bne.n	d8b6c <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x20>
        Serial1.end();
   d8b60:	f001 fd34 	bl	da5cc <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
}
   d8b64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
   d8b68:	f001 bd2d 	b.w	da5c6 <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   d8b6c:	b12c      	cbz	r4, d8b7a <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
   d8b6e:	6823      	ldr	r3, [r4, #0]
   d8b70:	4620      	mov	r0, r4
   d8b72:	685b      	ldr	r3, [r3, #4]
}
   d8b74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d8b78:	4718      	bx	r3
   d8b7a:	bd10      	pop	{r4, pc}

000d8b7c <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   d8b7c:	b513      	push	{r0, r1, r4, lr}
   d8b7e:	4604      	mov	r4, r0
    return value(val, strlen(val));
   d8b80:	4608      	mov	r0, r1
   d8b82:	9101      	str	r1, [sp, #4]
   d8b84:	f003 f86f 	bl	dbc66 <strlen>
   d8b88:	9901      	ldr	r1, [sp, #4]
   d8b8a:	4602      	mov	r2, r0
   d8b8c:	4620      	mov	r0, r4
}
   d8b8e:	b002      	add	sp, #8
   d8b90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
   d8b94:	f7ff bf8c 	b.w	d8ab0 <_ZN5spark10JSONWriter5valueEPKcj>

000d8b98 <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
   d8b98:	b513      	push	{r0, r1, r4, lr}
   d8b9a:	4604      	mov	r4, r0
    write(str, strlen(str));
   d8b9c:	4608      	mov	r0, r1
   d8b9e:	9101      	str	r1, [sp, #4]
   d8ba0:	f003 f861 	bl	dbc66 <strlen>
   d8ba4:	6823      	ldr	r3, [r4, #0]
   d8ba6:	9901      	ldr	r1, [sp, #4]
   d8ba8:	68db      	ldr	r3, [r3, #12]
   d8baa:	4602      	mov	r2, r0
   d8bac:	4620      	mov	r0, r4
}
   d8bae:	b002      	add	sp, #8
   d8bb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
   d8bb4:	4718      	bx	r3

000d8bb6 <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
   d8bb6:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   d8bb8:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
   d8bba:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   d8bbe:	68db      	ldr	r3, [r3, #12]
   d8bc0:	2201      	movs	r2, #1
   d8bc2:	f10d 0107 	add.w	r1, sp, #7
   d8bc6:	4798      	blx	r3
}
   d8bc8:	b003      	add	sp, #12
   d8bca:	f85d fb04 	ldr.w	pc, [sp], #4

000d8bce <_ZN5spark16StreamLogHandler6printfEPKcz>:
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   d8bce:	b40e      	push	{r1, r2, r3}
   d8bd0:	b503      	push	{r0, r1, lr}
   d8bd2:	ab03      	add	r3, sp, #12
    stream_->vprintf(false, fmt, args);
   d8bd4:	2100      	movs	r1, #0
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   d8bd6:	f853 2b04 	ldr.w	r2, [r3], #4
    stream_->vprintf(false, fmt, args);
   d8bda:	6a00      	ldr	r0, [r0, #32]
    va_start(args, fmt);
   d8bdc:	9301      	str	r3, [sp, #4]
    stream_->vprintf(false, fmt, args);
   d8bde:	f001 f855 	bl	d9c8c <_ZN5Print7vprintfEbPKcSt9__va_list>
}
   d8be2:	b002      	add	sp, #8
   d8be4:	f85d eb04 	ldr.w	lr, [sp], #4
   d8be8:	b003      	add	sp, #12
   d8bea:	4770      	bx	lr

000d8bec <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   d8bec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
   d8bf0:	e9d0 9500 	ldrd	r9, r5, [r0]
   d8bf4:	f04f 0814 	mov.w	r8, #20
   d8bf8:	fb08 f505 	mul.w	r5, r8, r5
   d8bfc:	9300      	str	r3, [sp, #0]
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   d8bfe:	10ab      	asrs	r3, r5, #2
   d8c00:	4d18      	ldr	r5, [pc, #96]	; (d8c64 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x78>)
   d8c02:	4617      	mov	r7, r2
   d8c04:	435d      	muls	r5, r3
   d8c06:	464c      	mov	r4, r9
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
   d8c08:	2d00      	cmp	r5, #0
   d8c0a:	dd23      	ble.n	d8c54 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x68>
	{
	  _DistanceType __half = __len >> 1;
   d8c0c:	106e      	asrs	r6, r5, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
   d8c0e:	fb08 f006 	mul.w	r0, r8, r6
   d8c12:	eb04 0a00 	add.w	sl, r4, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   d8c16:	463a      	mov	r2, r7
   d8c18:	f8ba b004 	ldrh.w	fp, [sl, #4]
   d8c1c:	5820      	ldr	r0, [r4, r0]
   d8c1e:	9101      	str	r1, [sp, #4]
   d8c20:	455f      	cmp	r7, fp
   d8c22:	bf28      	it	cs
   d8c24:	465a      	movcs	r2, fp
   d8c26:	f003 f826 	bl	dbc76 <strncmp>
                if (cmp == 0) {
   d8c2a:	9901      	ldr	r1, [sp, #4]
   d8c2c:	2301      	movs	r3, #1
   d8c2e:	b978      	cbnz	r0, d8c50 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
                    if (node.size == value.second) { // Lengths are equal
   d8c30:	455f      	cmp	r7, fp
   d8c32:	d103      	bne.n	d8c3c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   d8c34:	9a00      	ldr	r2, [sp, #0]
   d8c36:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   d8c38:	4635      	mov	r5, r6
   d8c3a:	e7e5      	b.n	d8c08 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
                    return node.size < value.second;
   d8c3c:	bf8c      	ite	hi
   d8c3e:	2001      	movhi	r0, #1
   d8c40:	2000      	movls	r0, #0
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
   d8c42:	2800      	cmp	r0, #0
   d8c44:	d0f8      	beq.n	d8c38 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x4c>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   d8c46:	1bae      	subs	r6, r5, r6
	      ++__first;
   d8c48:	f10a 0414 	add.w	r4, sl, #20
	      __len = __len - __half - 1;
   d8c4c:	3e01      	subs	r6, #1
   d8c4e:	e7f3      	b.n	d8c38 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x4c>
                return cmp < 0;
   d8c50:	0fc0      	lsrs	r0, r0, #31
   d8c52:	e7f6      	b.n	d8c42 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
      return __last - __first;
   d8c54:	eba4 0409 	sub.w	r4, r4, r9
}
   d8c58:	4802      	ldr	r0, [pc, #8]	; (d8c64 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x78>)
   d8c5a:	10a4      	asrs	r4, r4, #2
   d8c5c:	4360      	muls	r0, r4
   d8c5e:	b003      	add	sp, #12
   d8c60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d8c64:	cccccccd 	.word	0xcccccccd

000d8c68 <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
   d8c68:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
   d8c6a:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
   d8c6c:	7e06      	ldrb	r6, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
   d8c6e:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
   d8c70:	b30b      	cbz	r3, d8cb6 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
   d8c72:	b301      	cbz	r1, d8cb6 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
        size_t size = 0; // Name length
   d8c74:	2500      	movs	r5, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   d8c76:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
   d8c7a:	9503      	str	r5, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
   d8c7c:	a903      	add	r1, sp, #12
   d8c7e:	a801      	add	r0, sp, #4
   d8c80:	f7ff ff35 	bl	d8aee <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   d8c84:	4601      	mov	r1, r0
   d8c86:	b1b0      	cbz	r0, d8cb6 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
            const int index = nodeIndex(*pNodes, name, size, found);
   d8c88:	f10d 030b 	add.w	r3, sp, #11
   d8c8c:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
   d8c8e:	f88d 500b 	strb.w	r5, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
   d8c92:	4620      	mov	r0, r4
   d8c94:	f7ff ffaa 	bl	d8bec <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   d8c98:	f89d 300b 	ldrb.w	r3, [sp, #11]
   d8c9c:	b15b      	cbz	r3, d8cb6 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
    return data_[i];
   d8c9e:	6824      	ldr	r4, [r4, #0]
   d8ca0:	2314      	movs	r3, #20
   d8ca2:	fb03 4000 	mla	r0, r3, r0, r4
            pNodes = &node.nodes;
   d8ca6:	f100 0408 	add.w	r4, r0, #8
            if (node.level >= 0) {
   d8caa:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
   d8cae:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   d8cb0:	bfa8      	it	ge
   d8cb2:	b2de      	uxtbge	r6, r3
        while ((name = nextSubcategoryName(category, size))) {
   d8cb4:	e7e2      	b.n	d8c7c <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
   d8cb6:	4630      	mov	r0, r6
   d8cb8:	b004      	add	sp, #16
   d8cba:	bd70      	pop	{r4, r5, r6, pc}

000d8cbc <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   d8cbc:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   d8cbe:	4c09      	ldr	r4, [pc, #36]	; (d8ce4 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
   d8cc0:	7823      	ldrb	r3, [r4, #0]
   d8cc2:	f3bf 8f5b 	dmb	ish
   d8cc6:	07db      	lsls	r3, r3, #31
   d8cc8:	d409      	bmi.n	d8cde <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   d8cca:	4620      	mov	r0, r4
   d8ccc:	f7fb f9f4 	bl	d40b8 <__cxa_guard_acquire>
   d8cd0:	b128      	cbz	r0, d8cde <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   d8cd2:	4620      	mov	r0, r4
   d8cd4:	f7fb f9f5 	bl	d40c2 <__cxa_guard_release>
   d8cd8:	4803      	ldr	r0, [pc, #12]	; (d8ce8 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   d8cda:	f002 ff11 	bl	dbb00 <atexit>
}
   d8cde:	4803      	ldr	r0, [pc, #12]	; (d8cec <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   d8ce0:	bd10      	pop	{r4, pc}
   d8ce2:	bf00      	nop
   d8ce4:	2003e634 	.word	0x2003e634
   d8ce8:	000d8ae7 	.word	0x000d8ae7
   d8cec:	2003e288 	.word	0x2003e288

000d8cf0 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   d8cf0:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   d8cf2:	4c09      	ldr	r4, [pc, #36]	; (d8d18 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
   d8cf4:	7823      	ldrb	r3, [r4, #0]
   d8cf6:	f3bf 8f5b 	dmb	ish
   d8cfa:	07db      	lsls	r3, r3, #31
   d8cfc:	d409      	bmi.n	d8d12 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   d8cfe:	4620      	mov	r0, r4
   d8d00:	f7fb f9da 	bl	d40b8 <__cxa_guard_acquire>
   d8d04:	b128      	cbz	r0, d8d12 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   d8d06:	4620      	mov	r0, r4
   d8d08:	f7fb f9db 	bl	d40c2 <__cxa_guard_release>
   d8d0c:	4803      	ldr	r0, [pc, #12]	; (d8d1c <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   d8d0e:	f002 fef7 	bl	dbb00 <atexit>
    return &factory;
}
   d8d12:	4803      	ldr	r0, [pc, #12]	; (d8d20 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   d8d14:	bd10      	pop	{r4, pc}
   d8d16:	bf00      	nop
   d8d18:	2003e638 	.word	0x2003e638
   d8d1c:	000d8b4b 	.word	0x000d8b4b
   d8d20:	2003e28c 	.word	0x2003e28c

000d8d24 <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   d8d24:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   d8d26:	2500      	movs	r5, #0
   d8d28:	4604      	mov	r4, r0
   d8d2a:	e9c0 5500 	strd	r5, r5, [r0]
   d8d2e:	e9c0 5504 	strd	r5, r5, [r0, #16]
   d8d32:	6085      	str	r5, [r0, #8]
   d8d34:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
   d8d36:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
   d8d3a:	f7fe fbf5 	bl	d7528 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   d8d3e:	f7ff ffbd 	bl	d8cbc <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   d8d42:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   d8d44:	f7ff ffd4 	bl	d8cf0 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   d8d48:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   d8d4a:	6220      	str	r0, [r4, #32]
}
   d8d4c:	4620      	mov	r0, r4
   d8d4e:	bd38      	pop	{r3, r4, r5, pc}

000d8d50 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   d8d50:	b510      	push	{r4, lr}
    static LogManager mgr;
   d8d52:	4c0a      	ldr	r4, [pc, #40]	; (d8d7c <_ZN5spark10LogManager8instanceEv+0x2c>)
   d8d54:	7823      	ldrb	r3, [r4, #0]
   d8d56:	f3bf 8f5b 	dmb	ish
   d8d5a:	07db      	lsls	r3, r3, #31
   d8d5c:	d40c      	bmi.n	d8d78 <_ZN5spark10LogManager8instanceEv+0x28>
   d8d5e:	4620      	mov	r0, r4
   d8d60:	f7fb f9aa 	bl	d40b8 <__cxa_guard_acquire>
   d8d64:	b140      	cbz	r0, d8d78 <_ZN5spark10LogManager8instanceEv+0x28>
   d8d66:	4806      	ldr	r0, [pc, #24]	; (d8d80 <_ZN5spark10LogManager8instanceEv+0x30>)
   d8d68:	f7ff ffdc 	bl	d8d24 <_ZN5spark10LogManagerC1Ev>
   d8d6c:	4620      	mov	r0, r4
   d8d6e:	f7fb f9a8 	bl	d40c2 <__cxa_guard_release>
   d8d72:	4804      	ldr	r0, [pc, #16]	; (d8d84 <_ZN5spark10LogManager8instanceEv+0x34>)
   d8d74:	f002 fec4 	bl	dbb00 <atexit>
    return &mgr;
}
   d8d78:	4801      	ldr	r0, [pc, #4]	; (d8d80 <_ZN5spark10LogManager8instanceEv+0x30>)
   d8d7a:	bd10      	pop	{r4, pc}
   d8d7c:	2003e630 	.word	0x2003e630
   d8d80:	2003e640 	.word	0x2003e640
   d8d84:	000d9231 	.word	0x000d9231

000d8d88 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   d8d88:	4a02      	ldr	r2, [pc, #8]	; (d8d94 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   d8d8a:	4903      	ldr	r1, [pc, #12]	; (d8d98 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   d8d8c:	4803      	ldr	r0, [pc, #12]	; (d8d9c <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   d8d8e:	2300      	movs	r3, #0
   d8d90:	f7fe bdd2 	b.w	d7938 <log_set_callbacks>
   d8d94:	000d90b9 	.word	0x000d90b9
   d8d98:	000d9045 	.word	0x000d9045
   d8d9c:	000d8fc5 	.word	0x000d8fc5

000d8da0 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   d8da0:	2300      	movs	r3, #0
   d8da2:	461a      	mov	r2, r3
   d8da4:	4619      	mov	r1, r3
   d8da6:	4618      	mov	r0, r3
   d8da8:	f7fe bdc6 	b.w	d7938 <log_set_callbacks>

000d8dac <_ZNK5spark18JSONObjectIterator5valueEv>:
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   d8dac:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONValue(v_, d_);
   d8dae:	690d      	ldr	r5, [r1, #16]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d8db0:	f851 3b04 	ldr.w	r3, [r1], #4
   d8db4:	9300      	str	r3, [sp, #0]
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   d8db6:	4604      	mov	r4, r0
   d8db8:	a801      	add	r0, sp, #4
   d8dba:	f7fe ff66 	bl	d7c8a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return JSONValue(v_, d_);
   d8dbe:	466a      	mov	r2, sp
   d8dc0:	4629      	mov	r1, r5
   d8dc2:	4620      	mov	r0, r4
   d8dc4:	f7ff fd1f 	bl	d8806 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d8dc8:	a801      	add	r0, sp, #4
   d8dca:	f7fb fad3 	bl	d4374 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d8dce:	4620      	mov	r0, r4
   d8dd0:	b003      	add	sp, #12
   d8dd2:	bd30      	pop	{r4, r5, pc}

000d8dd4 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   d8dd4:	b537      	push	{r0, r1, r2, r4, r5, lr}
        JSONObjectIterator(value.t_, value.d_) {
   d8dd6:	688d      	ldr	r5, [r1, #8]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d8dd8:	f851 3b04 	ldr.w	r3, [r1], #4
   d8ddc:	9300      	str	r3, [sp, #0]
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   d8dde:	4604      	mov	r4, r0
   d8de0:	a801      	add	r0, sp, #4
   d8de2:	f7fe ff52 	bl	d7c8a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        JSONObjectIterator(value.t_, value.d_) {
   d8de6:	466a      	mov	r2, sp
   d8de8:	4629      	mov	r1, r5
   d8dea:	4620      	mov	r0, r4
   d8dec:	f7ff fd86 	bl	d88fc <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d8df0:	a801      	add	r0, sp, #4
   d8df2:	f7fb fabf 	bl	d4374 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d8df6:	4620      	mov	r0, r4
   d8df8:	b003      	add	sp, #12
   d8dfa:	bd30      	pop	{r4, r5, pc}

000d8dfc <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
   d8dfc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONString(k_, d_);
   d8dfe:	68cd      	ldr	r5, [r1, #12]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d8e00:	f851 3b04 	ldr.w	r3, [r1], #4
   d8e04:	9300      	str	r3, [sp, #0]
inline spark::JSONString spark::JSONObjectIterator::name() const {
   d8e06:	4604      	mov	r4, r0
   d8e08:	a801      	add	r0, sp, #4
   d8e0a:	f7fe ff3e 	bl	d7c8a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return JSONString(k_, d_);
   d8e0e:	466a      	mov	r2, sp
   d8e10:	4629      	mov	r1, r5
   d8e12:	4620      	mov	r0, r4
   d8e14:	f7ff fd4e 	bl	d88b4 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d8e18:	a801      	add	r0, sp, #4
   d8e1a:	f7fb faab 	bl	d4374 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d8e1e:	4620      	mov	r0, r4
   d8e20:	b003      	add	sp, #12
   d8e22:	bd30      	pop	{r4, r5, pc}

000d8e24 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   d8e24:	b570      	push	{r4, r5, r6, lr}
   d8e26:	b08a      	sub	sp, #40	; 0x28
   d8e28:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   d8e2a:	4601      	mov	r1, r0
   d8e2c:	a804      	add	r0, sp, #16
   d8e2e:	f7ff ffd1 	bl	d8dd4 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
   d8e32:	4e14      	ldr	r6, [pc, #80]	; (d8e84 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
   d8e34:	a804      	add	r0, sp, #16
   d8e36:	f7ff fd79 	bl	d892c <_ZN5spark18JSONObjectIterator4nextEv>
   d8e3a:	b1e8      	cbz	r0, d8e78 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
   d8e3c:	a904      	add	r1, sp, #16
   d8e3e:	4668      	mov	r0, sp
   d8e40:	f7ff ffdc 	bl	d8dfc <_ZNK5spark18JSONObjectIterator4nameEv>
   d8e44:	9802      	ldr	r0, [sp, #8]
   d8e46:	4631      	mov	r1, r6
   d8e48:	f7ff fe78 	bl	d8b3c <_ZNK5spark10JSONStringeqEPKc.isra.0>
   d8e4c:	4604      	mov	r4, r0
   d8e4e:	b110      	cbz	r0, d8e56 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
   d8e50:	1e2c      	subs	r4, r5, #0
   d8e52:	bf18      	it	ne
   d8e54:	2401      	movne	r4, #1
   d8e56:	a801      	add	r0, sp, #4
   d8e58:	f7fb fa8c 	bl	d4374 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d8e5c:	2c00      	cmp	r4, #0
   d8e5e:	d0e9      	beq.n	d8e34 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
   d8e60:	a904      	add	r1, sp, #16
   d8e62:	4668      	mov	r0, sp
   d8e64:	f7ff ffa2 	bl	d8dac <_ZNK5spark18JSONObjectIterator5valueEv>
   d8e68:	4668      	mov	r0, sp
   d8e6a:	f7ff fd02 	bl	d8872 <_ZNK5spark9JSONValue5toIntEv>
   d8e6e:	6028      	str	r0, [r5, #0]
   d8e70:	a801      	add	r0, sp, #4
   d8e72:	f7fb fa7f 	bl	d4374 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d8e76:	e7dd      	b.n	d8e34 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
   d8e78:	a805      	add	r0, sp, #20
   d8e7a:	f7fb fa7b 	bl	d4374 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d8e7e:	b00a      	add	sp, #40	; 0x28
   d8e80:	bd70      	pop	{r4, r5, r6, pc}
   d8e82:	bf00      	nop
   d8e84:	000dc896 	.word	0x000dc896

000d8e88 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   d8e88:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d8e8a:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
   d8e8c:	4620      	mov	r0, r4
   d8e8e:	4912      	ldr	r1, [pc, #72]	; (d8ed8 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>)
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   d8e90:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
   d8e92:	f002 feb8 	bl	dbc06 <strcmp>
   d8e96:	b948      	cbnz	r0, d8eac <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x24>
        Serial.begin();
   d8e98:	f001 fc3a 	bl	da710 <_Z16_fetch_usbserialv>
   d8e9c:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d8ea0:	f001 fc26 	bl	da6f0 <_ZN9USBSerial5beginEl>
        return &Serial;
   d8ea4:	f001 fc34 	bl	da710 <_Z16_fetch_usbserialv>
}
   d8ea8:	b003      	add	sp, #12
   d8eaa:	bd30      	pop	{r4, r5, pc}
    if (strcmp(type, "Serial1") == 0) {
   d8eac:	490b      	ldr	r1, [pc, #44]	; (d8edc <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
   d8eae:	4620      	mov	r0, r4
   d8eb0:	f002 fea9 	bl	dbc06 <strcmp>
   d8eb4:	b970      	cbnz	r0, d8ed4 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
        int baud = 9600;
   d8eb6:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
   d8eba:	a901      	add	r1, sp, #4
   d8ebc:	4628      	mov	r0, r5
        int baud = 9600;
   d8ebe:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
   d8ec0:	f7ff ffb0 	bl	d8e24 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   d8ec4:	f001 fb82 	bl	da5cc <_Z22__fetch_global_Serial1v>
   d8ec8:	9901      	ldr	r1, [sp, #4]
   d8eca:	f001 fb79 	bl	da5c0 <_ZN11USARTSerial5beginEm>
        return &Serial1;
   d8ece:	f001 fb7d 	bl	da5cc <_Z22__fetch_global_Serial1v>
   d8ed2:	e7e9      	b.n	d8ea8 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x20>
    return nullptr;
   d8ed4:	2000      	movs	r0, #0
   d8ed6:	e7e7      	b.n	d8ea8 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x20>
   d8ed8:	000dc89b 	.word	0x000dc89b
   d8edc:	000dc8a2 	.word	0x000dc8a2

000d8ee0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   d8ee0:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d8ee2:	e9d0 5300 	ldrd	r5, r3, [r0]
   d8ee6:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   d8ee8:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d8eea:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   d8eee:	42ae      	cmp	r6, r5
   d8ef0:	d005      	beq.n	d8efe <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
   d8ef2:	f105 0008 	add.w	r0, r5, #8
   d8ef6:	f7ff fff3 	bl	d8ee0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d8efa:	3514      	adds	r5, #20
   d8efc:	e7f7      	b.n	d8eee <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   d8efe:	6820      	ldr	r0, [r4, #0]
   d8f00:	f7fe fe44 	bl	d7b8c <free>
}
   d8f04:	4620      	mov	r0, r4
   d8f06:	bd70      	pop	{r4, r5, r6, pc}

000d8f08 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   d8f08:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d8f0a:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   d8f0e:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d8f10:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
   d8f14:	42ae      	cmp	r6, r5
   d8f16:	d004      	beq.n	d8f22 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   d8f18:	4628      	mov	r0, r5
   d8f1a:	f000 ffaa 	bl	d9e72 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
   d8f1e:	3510      	adds	r5, #16
   d8f20:	e7f8      	b.n	d8f14 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   d8f22:	6820      	ldr	r0, [r4, #0]
   d8f24:	f7fe fe32 	bl	d7b8c <free>
}
   d8f28:	4620      	mov	r0, r4
   d8f2a:	bd70      	pop	{r4, r5, r6, pc}

000d8f2c <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
   d8f2c:	b510      	push	{r4, lr}
   d8f2e:	4604      	mov	r4, r0
   d8f30:	300c      	adds	r0, #12
   d8f32:	f7ff ffd5 	bl	d8ee0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d8f36:	4620      	mov	r0, r4
   d8f38:	f7ff ffe6 	bl	d8f08 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   d8f3c:	4620      	mov	r0, r4
   d8f3e:	bd10      	pop	{r4, pc}

000d8f40 <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
   d8f40:	b510      	push	{r4, lr}
    virtual ~LogHandler() = default;
   d8f42:	4b04      	ldr	r3, [pc, #16]	; (d8f54 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
class StreamLogHandler: public LogHandler {
   d8f44:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
   d8f46:	f840 3b04 	str.w	r3, [r0], #4
   d8f4a:	f7ff ffef 	bl	d8f2c <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
   d8f4e:	4620      	mov	r0, r4
   d8f50:	bd10      	pop	{r4, pc}
   d8f52:	bf00      	nop
   d8f54:	000dc530 	.word	0x000dc530

000d8f58 <_ZN5spark16StreamLogHandlerD0Ev>:
   d8f58:	b510      	push	{r4, lr}
   d8f5a:	4604      	mov	r4, r0
   d8f5c:	f7ff fff0 	bl	d8f40 <_ZN5spark16StreamLogHandlerD1Ev>
   d8f60:	4620      	mov	r0, r4
   d8f62:	2124      	movs	r1, #36	; 0x24
   d8f64:	f001 fda8 	bl	daab8 <_ZdlPvj>
   d8f68:	4620      	mov	r0, r4
   d8f6a:	bd10      	pop	{r4, pc}

000d8f6c <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
   d8f6c:	b510      	push	{r4, lr}
   d8f6e:	4b03      	ldr	r3, [pc, #12]	; (d8f7c <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   d8f70:	6003      	str	r3, [r0, #0]
   d8f72:	4604      	mov	r4, r0
   d8f74:	f7ff ffe4 	bl	d8f40 <_ZN5spark16StreamLogHandlerD1Ev>
   d8f78:	4620      	mov	r0, r4
   d8f7a:	bd10      	pop	{r4, pc}
   d8f7c:	000dc940 	.word	0x000dc940

000d8f80 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   d8f80:	b510      	push	{r4, lr}
   d8f82:	4604      	mov	r4, r0
   d8f84:	f7ff fff2 	bl	d8f6c <_ZN5spark20JSONStreamLogHandlerD1Ev>
   d8f88:	4620      	mov	r0, r4
   d8f8a:	2124      	movs	r1, #36	; 0x24
   d8f8c:	f001 fd94 	bl	daab8 <_ZdlPvj>
   d8f90:	4620      	mov	r0, r4
   d8f92:	bd10      	pop	{r4, pc}

000d8f94 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
   d8f94:	2200      	movs	r2, #0
   d8f96:	e9c0 2200 	strd	r2, r2, [r0]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   d8f9a:	b510      	push	{r4, lr}
        capacity_(0) {
   d8f9c:	6082      	str	r2, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   d8f9e:	680c      	ldr	r4, [r1, #0]
   d8fa0:	6004      	str	r4, [r0, #0]
   d8fa2:	684c      	ldr	r4, [r1, #4]
   d8fa4:	6044      	str	r4, [r0, #4]
   d8fa6:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d8fa8:	600a      	str	r2, [r1, #0]
   d8faa:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   d8fac:	6084      	str	r4, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d8fae:	608a      	str	r2, [r1, #8]
}
   d8fb0:	bd10      	pop	{r4, pc}

000d8fb2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      ~lock_guard()
   d8fb2:	b510      	push	{r4, lr}
      { _M_device.unlock(); }
   d8fb4:	6803      	ldr	r3, [r0, #0]
      ~lock_guard()
   d8fb6:	4604      	mov	r4, r0
    }

    void lock() { os_mutex_recursive_lock(handle_); }
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d8fb8:	6818      	ldr	r0, [r3, #0]
   d8fba:	f7fe facd 	bl	d7558 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   d8fbe:	4620      	mov	r0, r4
   d8fc0:	bd10      	pop	{r4, pc}
	...

000d8fc4 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   d8fc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d8fc8:	b087      	sub	sp, #28
   d8fca:	4680      	mov	r8, r0
   d8fcc:	9303      	str	r3, [sp, #12]
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   d8fce:	4b1c      	ldr	r3, [pc, #112]	; (d9040 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
   d8fd0:	685b      	ldr	r3, [r3, #4]
   d8fd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
   d8fd6:	4689      	mov	r9, r1
   d8fd8:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d8fda:	b96b      	cbnz	r3, d8ff8 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
   d8fdc:	f7ff feb8 	bl	d8d50 <_ZN5spark10LogManager8instanceEv>
   d8fe0:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   d8fe2:	f100 0324 	add.w	r3, r0, #36	; 0x24
    void lock() { os_mutex_recursive_lock(handle_); }
   d8fe6:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d8fe8:	9305      	str	r3, [sp, #20]
   d8fea:	f7fe faad 	bl	d7548 <os_mutex_recursive_lock>
        // prevent re-entry
        if (that->isActive()) {
   d8fee:	7b23      	ldrb	r3, [r4, #12]
   d8ff0:	b12b      	cbz	r3, d8ffe <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
   d8ff2:	a805      	add	r0, sp, #20
   d8ff4:	f7ff ffdd 	bl	d8fb2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   d8ff8:	b007      	add	sp, #28
   d8ffa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   d8ffe:	2301      	movs	r3, #1
   d9000:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
   d9002:	e9d4 5300 	ldrd	r5, r3, [r4]
            handler->message(msg, (LogLevel)level, category, *attr);
   d9006:	fa5f f989 	uxtb.w	r9, r9
   d900a:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   d900e:	45aa      	cmp	sl, r5
   d9010:	d012      	beq.n	d9038 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
   d9012:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
   d9016:	4631      	mov	r1, r6
   d9018:	1d38      	adds	r0, r7, #4
   d901a:	f7ff fe25 	bl	d8c68 <_ZNK5spark6detail9LogFilter5levelEPKc>
   d901e:	4581      	cmp	r9, r0
   d9020:	d3f5      	bcc.n	d900e <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
   d9022:	683b      	ldr	r3, [r7, #0]
   d9024:	9a03      	ldr	r2, [sp, #12]
   d9026:	9200      	str	r2, [sp, #0]
   d9028:	f8d3 b008 	ldr.w	fp, [r3, #8]
   d902c:	464a      	mov	r2, r9
   d902e:	4633      	mov	r3, r6
   d9030:	4641      	mov	r1, r8
   d9032:	4638      	mov	r0, r7
   d9034:	47d8      	blx	fp
   d9036:	e7ea      	b.n	d900e <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
   d9038:	2300      	movs	r3, #0
   d903a:	7323      	strb	r3, [r4, #12]
   d903c:	e7d9      	b.n	d8ff2 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
   d903e:	bf00      	nop
   d9040:	e000ed00 	.word	0xe000ed00

000d9044 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   d9044:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d9048:	469b      	mov	fp, r3
   d904a:	4b1a      	ldr	r3, [pc, #104]	; (d90b4 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
   d904c:	685b      	ldr	r3, [r3, #4]
   d904e:	f3c3 0308 	ubfx	r3, r3, #0, #9
   d9052:	4680      	mov	r8, r0
   d9054:	4689      	mov	r9, r1
   d9056:	4616      	mov	r6, r2
    if (HAL_IsISR()) {
   d9058:	b96b      	cbnz	r3, d9076 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
   d905a:	f7ff fe79 	bl	d8d50 <_ZN5spark10LogManager8instanceEv>
   d905e:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   d9060:	f100 0324 	add.w	r3, r0, #36	; 0x24
   d9064:	6a40      	ldr	r0, [r0, #36]	; 0x24
   d9066:	9301      	str	r3, [sp, #4]
   d9068:	f7fe fa6e 	bl	d7548 <os_mutex_recursive_lock>
        if (that->isActive()) {
   d906c:	7b23      	ldrb	r3, [r4, #12]
   d906e:	b12b      	cbz	r3, d907c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
   d9070:	a801      	add	r0, sp, #4
   d9072:	f7ff ff9e 	bl	d8fb2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   d9076:	b003      	add	sp, #12
   d9078:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
   d907c:	2301      	movs	r3, #1
   d907e:	7323      	strb	r3, [r4, #12]
   d9080:	e9d4 5300 	ldrd	r5, r3, [r4]
    if (level >= filter_.level(category)) {
   d9084:	b2f6      	uxtb	r6, r6
   d9086:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   d908a:	4555      	cmp	r5, sl
   d908c:	d00e      	beq.n	d90ac <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
   d908e:	f855 7b04 	ldr.w	r7, [r5], #4
   d9092:	4659      	mov	r1, fp
   d9094:	1d38      	adds	r0, r7, #4
   d9096:	f7ff fde7 	bl	d8c68 <_ZNK5spark6detail9LogFilter5levelEPKc>
   d909a:	4286      	cmp	r6, r0
   d909c:	d3f5      	bcc.n	d908a <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
   d909e:	683b      	ldr	r3, [r7, #0]
   d90a0:	464a      	mov	r2, r9
   d90a2:	68db      	ldr	r3, [r3, #12]
   d90a4:	4641      	mov	r1, r8
   d90a6:	4638      	mov	r0, r7
   d90a8:	4798      	blx	r3
   d90aa:	e7ee      	b.n	d908a <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
   d90ac:	2300      	movs	r3, #0
   d90ae:	7323      	strb	r3, [r4, #12]
   d90b0:	e7de      	b.n	d9070 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
   d90b2:	bf00      	nop
   d90b4:	e000ed00 	.word	0xe000ed00

000d90b8 <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   d90b8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d90bc:	4b16      	ldr	r3, [pc, #88]	; (d9118 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
   d90be:	685b      	ldr	r3, [r3, #4]
   d90c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
   d90c4:	4605      	mov	r5, r0
   d90c6:	460f      	mov	r7, r1
    if (HAL_IsISR()) {
   d90c8:	bb1b      	cbnz	r3, d9112 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
   d90ca:	f7ff fe41 	bl	d8d50 <_ZN5spark10LogManager8instanceEv>
    LOG_WITH_LOCK(that->mutex_) {
   d90ce:	f100 0324 	add.w	r3, r0, #36	; 0x24
    LogManager *that = instance();
   d90d2:	4604      	mov	r4, r0
   d90d4:	6a40      	ldr	r0, [r0, #36]	; 0x24
   d90d6:	9301      	str	r3, [sp, #4]
   d90d8:	f7fe fa36 	bl	d7548 <os_mutex_recursive_lock>
   d90dc:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
   d90e0:	2446      	movs	r4, #70	; 0x46
   d90e2:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   d90e6:	45b0      	cmp	r8, r6
   d90e8:	d109      	bne.n	d90fe <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
   d90ea:	a801      	add	r0, sp, #4
   d90ec:	f7ff ff61 	bl	d8fb2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
   d90f0:	42a5      	cmp	r5, r4
   d90f2:	bfb4      	ite	lt
   d90f4:	2000      	movlt	r0, #0
   d90f6:	2001      	movge	r0, #1
}
   d90f8:	b002      	add	sp, #8
   d90fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
   d90fe:	f856 0b04 	ldr.w	r0, [r6], #4
   d9102:	4639      	mov	r1, r7
   d9104:	3004      	adds	r0, #4
   d9106:	f7ff fdaf 	bl	d8c68 <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
   d910a:	4284      	cmp	r4, r0
   d910c:	bfa8      	it	ge
   d910e:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
   d9110:	e7e9      	b.n	d90e6 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
   d9112:	2000      	movs	r0, #0
   d9114:	e7f0      	b.n	d90f8 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
   d9116:	bf00      	nop
   d9118:	e000ed00 	.word	0xe000ed00

000d911c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d911c:	b570      	push	{r4, r5, r6, lr}
   d911e:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   d9120:	e9d0 0200 	ldrd	r0, r2, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d9124:	460b      	mov	r3, r1
    T* const p = find(data_, data_ + size_, value);
   d9126:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
   d912a:	4282      	cmp	r2, r0
   d912c:	d007      	beq.n	d913e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x22>
   d912e:	4601      	mov	r1, r0
            if (*p == value) {
   d9130:	681d      	ldr	r5, [r3, #0]
   d9132:	f851 6b04 	ldr.w	r6, [r1], #4
   d9136:	42ae      	cmp	r6, r5
   d9138:	d003      	beq.n	d9142 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x26>
   d913a:	4608      	mov	r0, r1
   d913c:	e7f5      	b.n	d912a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
   d913e:	2000      	movs	r0, #0
}
   d9140:	bd70      	pop	{r4, r5, r6, pc}
        ::memmove(dest, p, (end - p) * sizeof(T));
   d9142:	1a52      	subs	r2, r2, r1
   d9144:	f002 fd02 	bl	dbb4c <memmove>
    --size_;
   d9148:	6863      	ldr	r3, [r4, #4]
   d914a:	3b01      	subs	r3, #1
   d914c:	6063      	str	r3, [r4, #4]
    return true;
   d914e:	2001      	movs	r0, #1
   d9150:	e7f6      	b.n	d9140 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x24>

000d9152 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
   d9152:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    LOG_WITH_LOCK(mutex_) {
   d9154:	f100 0324 	add.w	r3, r0, #36	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
   d9158:	4604      	mov	r4, r0
   d915a:	6a40      	ldr	r0, [r0, #36]	; 0x24
   d915c:	9101      	str	r1, [sp, #4]
   d915e:	9303      	str	r3, [sp, #12]
   d9160:	f7fe f9f2 	bl	d7548 <os_mutex_recursive_lock>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   d9164:	a901      	add	r1, sp, #4
   d9166:	4620      	mov	r0, r4
   d9168:	f7ff ffd8 	bl	d911c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   d916c:	b118      	cbz	r0, d9176 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
   d916e:	6863      	ldr	r3, [r4, #4]
   d9170:	b90b      	cbnz	r3, d9176 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
   d9172:	f7ff fe15 	bl	d8da0 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   d9176:	a803      	add	r0, sp, #12
   d9178:	f7ff ff1b 	bl	d8fb2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   d917c:	b004      	add	sp, #16
   d917e:	bd10      	pop	{r4, pc}

000d9180 <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
void spark::LogManager::destroyFactoryHandlers() {
   d9180:	b570      	push	{r4, r5, r6, lr}
    return data_ + size_;
   d9182:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
   d9186:	2318      	movs	r3, #24
   d9188:	4604      	mov	r4, r0
   d918a:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   d918e:	42ae      	cmp	r6, r5
   d9190:	d015      	beq.n	d91be <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   d9192:	f105 0110 	add.w	r1, r5, #16
   d9196:	4620      	mov	r0, r4
   d9198:	f7ff ffc0 	bl	d911c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   d919c:	6863      	ldr	r3, [r4, #4]
   d919e:	b90b      	cbnz	r3, d91a4 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   d91a0:	f7ff fdfe 	bl	d8da0 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
   d91a4:	69e0      	ldr	r0, [r4, #28]
   d91a6:	6929      	ldr	r1, [r5, #16]
   d91a8:	6803      	ldr	r3, [r0, #0]
   d91aa:	68db      	ldr	r3, [r3, #12]
   d91ac:	4798      	blx	r3
        if (h.stream) {
   d91ae:	6969      	ldr	r1, [r5, #20]
   d91b0:	b119      	cbz	r1, d91ba <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   d91b2:	6a20      	ldr	r0, [r4, #32]
   d91b4:	6803      	ldr	r3, [r0, #0]
   d91b6:	68db      	ldr	r3, [r3, #12]
   d91b8:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
   d91ba:	3518      	adds	r5, #24
   d91bc:	e7e7      	b.n	d918e <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
   d91be:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   d91c2:	2618      	movs	r6, #24
   d91c4:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   d91c8:	42ae      	cmp	r6, r5
   d91ca:	d004      	beq.n	d91d6 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
   d91cc:	4628      	mov	r0, r5
   d91ce:	f000 fe50 	bl	d9e72 <_ZN6StringD1Ev>
   d91d2:	3518      	adds	r5, #24
   d91d4:	e7f8      	b.n	d91c8 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
   d91d6:	2300      	movs	r3, #0
   d91d8:	6163      	str	r3, [r4, #20]
}
   d91da:	bd70      	pop	{r4, r5, r6, pc}

000d91dc <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
   d91dc:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d91de:	4604      	mov	r4, r0
    resetSystemCallbacks();
   d91e0:	f7ff fdde 	bl	d8da0 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   d91e4:	f104 0324 	add.w	r3, r4, #36	; 0x24
   d91e8:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d91ea:	9301      	str	r3, [sp, #4]
   d91ec:	f7fe f9ac 	bl	d7548 <os_mutex_recursive_lock>
         destroyFactoryHandlers();
   d91f0:	4620      	mov	r0, r4
   d91f2:	f7ff ffc5 	bl	d9180 <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
   d91f6:	a801      	add	r0, sp, #4
   d91f8:	f7ff fedb 	bl	d8fb2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
   d91fc:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d91fe:	b108      	cbz	r0, d9204 <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
   d9200:	f7fe f99a 	bl	d7538 <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
   d9204:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   d9208:	2618      	movs	r6, #24
   d920a:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   d920e:	42ae      	cmp	r6, r5
   d9210:	d004      	beq.n	d921c <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
   d9212:	4628      	mov	r0, r5
   d9214:	f000 fe2d 	bl	d9e72 <_ZN6StringD1Ev>
   d9218:	3518      	adds	r5, #24
   d921a:	e7f8      	b.n	d920e <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
   d921c:	6920      	ldr	r0, [r4, #16]
   d921e:	f7fe fcb5 	bl	d7b8c <free>
   d9222:	6820      	ldr	r0, [r4, #0]
   d9224:	f7fe fcb2 	bl	d7b8c <free>
}
   d9228:	4620      	mov	r0, r4
   d922a:	b002      	add	sp, #8
   d922c:	bd70      	pop	{r4, r5, r6, pc}
	...

000d9230 <__tcf_2>:
    static LogManager mgr;
   d9230:	4801      	ldr	r0, [pc, #4]	; (d9238 <__tcf_2+0x8>)
   d9232:	f7ff bfd3 	b.w	d91dc <_ZN5spark10LogManagerD1Ev>
   d9236:	bf00      	nop
   d9238:	2003e640 	.word	0x2003e640

000d923c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
   d923c:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d923e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d9240:	4606      	mov	r6, r0
   d9242:	460c      	mov	r4, r1
   d9244:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d9246:	d927      	bls.n	d9298 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x5c>
   d9248:	4290      	cmp	r0, r2
   d924a:	d226      	bcs.n	d929a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x5e>
            --end;
   d924c:	f1a2 0514 	sub.w	r5, r2, #20
            dest += end - p - 1;
   d9250:	1a6c      	subs	r4, r5, r1
   d9252:	f1a1 0714 	sub.w	r7, r1, #20
   d9256:	4404      	add	r4, r0
        capacity_(0) {
   d9258:	2600      	movs	r6, #0
            for (; end != p; --end, --dest) {
   d925a:	42af      	cmp	r7, r5
   d925c:	d03d      	beq.n	d92da <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
                new(dest) T(std::move(*end));
   d925e:	b1a4      	cbz	r4, d928a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x4e>
struct spark::detail::LogFilter::Node {
   d9260:	682b      	ldr	r3, [r5, #0]
   d9262:	6023      	str	r3, [r4, #0]
   d9264:	88ab      	ldrh	r3, [r5, #4]
   d9266:	80a3      	strh	r3, [r4, #4]
   d9268:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
   d926c:	80e3      	strh	r3, [r4, #6]
        capacity_(0) {
   d926e:	e9c4 6602 	strd	r6, r6, [r4, #8]
   d9272:	6126      	str	r6, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   d9274:	68ab      	ldr	r3, [r5, #8]
   d9276:	60a3      	str	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d9278:	60ae      	str	r6, [r5, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d927a:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   d927c:	68ea      	ldr	r2, [r5, #12]
   d927e:	60e2      	str	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d9280:	60eb      	str	r3, [r5, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d9282:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   d9284:	692a      	ldr	r2, [r5, #16]
   d9286:	6122      	str	r2, [r4, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d9288:	612b      	str	r3, [r5, #16]
   d928a:	f105 0008 	add.w	r0, r5, #8
   d928e:	f7ff fe27 	bl	d8ee0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
   d9292:	3d14      	subs	r5, #20
   d9294:	3c14      	subs	r4, #20
   d9296:	e7e0      	b.n	d925a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1e>
        } else if (dest != p) {
   d9298:	d01f      	beq.n	d92da <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
        capacity_(0) {
   d929a:	2700      	movs	r7, #0
            for (; p != end; ++p, ++dest) {
   d929c:	42ac      	cmp	r4, r5
   d929e:	d01c      	beq.n	d92da <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
                new(dest) T(std::move(*p));
   d92a0:	b1a6      	cbz	r6, d92cc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x90>
   d92a2:	6823      	ldr	r3, [r4, #0]
   d92a4:	6033      	str	r3, [r6, #0]
   d92a6:	88a3      	ldrh	r3, [r4, #4]
   d92a8:	80b3      	strh	r3, [r6, #4]
   d92aa:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
   d92ae:	80f3      	strh	r3, [r6, #6]
        capacity_(0) {
   d92b0:	e9c6 7702 	strd	r7, r7, [r6, #8]
   d92b4:	6137      	str	r7, [r6, #16]
      __a = _GLIBCXX_MOVE(__b);
   d92b6:	68a3      	ldr	r3, [r4, #8]
   d92b8:	60b3      	str	r3, [r6, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d92ba:	60a7      	str	r7, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d92bc:	68f3      	ldr	r3, [r6, #12]
      __a = _GLIBCXX_MOVE(__b);
   d92be:	68e2      	ldr	r2, [r4, #12]
   d92c0:	60f2      	str	r2, [r6, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d92c2:	60e3      	str	r3, [r4, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d92c4:	6933      	ldr	r3, [r6, #16]
      __a = _GLIBCXX_MOVE(__b);
   d92c6:	6922      	ldr	r2, [r4, #16]
   d92c8:	6132      	str	r2, [r6, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d92ca:	6123      	str	r3, [r4, #16]
   d92cc:	f104 0008 	add.w	r0, r4, #8
   d92d0:	f7ff fe06 	bl	d8ee0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
   d92d4:	3414      	adds	r4, #20
   d92d6:	3614      	adds	r6, #20
   d92d8:	e7e0      	b.n	d929c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x60>
    }
   d92da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d92dc <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   d92dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d92de:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
   d92e2:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   d92e4:	4604      	mov	r4, r0
   d92e6:	460e      	mov	r6, r1
   d92e8:	4617      	mov	r7, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d92ea:	db0d      	blt.n	d9308 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x2c>
   d92ec:	3501      	adds	r5, #1
        if (n > 0) {
   d92ee:	2d00      	cmp	r5, #0
   d92f0:	6800      	ldr	r0, [r0, #0]
   d92f2:	dd04      	ble.n	d92fe <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x22>
    return ::realloc(ptr, size);
   d92f4:	00a9      	lsls	r1, r5, #2
   d92f6:	f7fe fc51 	bl	d7b9c <realloc>
            if (!d) {
   d92fa:	b918      	cbnz	r0, d9304 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x28>
}
   d92fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
   d92fe:	f7fe fc45 	bl	d7b8c <free>
        T* d = nullptr;
   d9302:	2000      	movs	r0, #0
        data_ = d;
   d9304:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   d9306:	60a5      	str	r5, [r4, #8]
    T* const p = data_ + i;
   d9308:	6825      	ldr	r5, [r4, #0]
    move(p + 1, p, data_ + size_);
   d930a:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   d930c:	eb05 0186 	add.w	r1, r5, r6, lsl #2
    move(p + 1, p, data_ + size_);
   d9310:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
   d9312:	eba2 0286 	sub.w	r2, r2, r6, lsl #2
   d9316:	1d08      	adds	r0, r1, #4
   d9318:	f002 fc18 	bl	dbb4c <memmove>
    new(p) T(std::move(value));
   d931c:	f845 7026 	str.w	r7, [r5, r6, lsl #2]
    ++size_;
   d9320:	6863      	ldr	r3, [r4, #4]
   d9322:	3301      	adds	r3, #1
   d9324:	6063      	str	r3, [r4, #4]
    return true;
   d9326:	2001      	movs	r0, #1
   d9328:	e7e8      	b.n	d92fc <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x20>

000d932a <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
   d932a:	b537      	push	{r0, r1, r2, r4, r5, lr}
    LOG_WITH_LOCK(mutex_) {
   d932c:	f100 0324 	add.w	r3, r0, #36	; 0x24
bool spark::LogManager::addHandler(LogHandler *handler) {
   d9330:	4604      	mov	r4, r0
    void lock() { os_mutex_recursive_lock(handle_); }
   d9332:	6a40      	ldr	r0, [r0, #36]	; 0x24
   d9334:	9301      	str	r3, [sp, #4]
   d9336:	460d      	mov	r5, r1
   d9338:	f7fe f906 	bl	d7548 <os_mutex_recursive_lock>
    return find(data_, data_ + size_, value);
   d933c:	e9d4 3100 	ldrd	r3, r1, [r4]
   d9340:	eb03 0081 	add.w	r0, r3, r1, lsl #2
        for (; p != end; ++p) {
   d9344:	4283      	cmp	r3, r0
   d9346:	461a      	mov	r2, r3
   d9348:	d00b      	beq.n	d9362 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x38>
            if (*p == value) {
   d934a:	6812      	ldr	r2, [r2, #0]
   d934c:	42aa      	cmp	r2, r5
   d934e:	f103 0304 	add.w	r3, r3, #4
   d9352:	d1f7      	bne.n	d9344 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
    LOG_WITH_LOCK(mutex_) {
   d9354:	a801      	add	r0, sp, #4
   d9356:	f7ff fe2c 	bl	d8fb2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
            return false;
   d935a:	2500      	movs	r5, #0
}
   d935c:	4628      	mov	r0, r5
   d935e:	b003      	add	sp, #12
   d9360:	bd30      	pop	{r4, r5, pc}
    return insert(size_, std::move(value));
   d9362:	462a      	mov	r2, r5
   d9364:	4620      	mov	r0, r4
   d9366:	f7ff ffb9 	bl	d92dc <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   d936a:	4605      	mov	r5, r0
   d936c:	2800      	cmp	r0, #0
   d936e:	d0f1      	beq.n	d9354 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x2a>
        if (activeHandlers_.size() == 1) {
   d9370:	6863      	ldr	r3, [r4, #4]
   d9372:	2b01      	cmp	r3, #1
   d9374:	d101      	bne.n	d937a <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x50>
            setSystemCallbacks();
   d9376:	f7ff fd07 	bl	d8d88 <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   d937a:	a801      	add	r0, sp, #4
   d937c:	f7ff fe19 	bl	d8fb2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   d9380:	e7ec      	b.n	d935c <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x32>

000d9382 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   d9382:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d9384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d9386:	4604      	mov	r4, r0
   d9388:	460d      	mov	r5, r1
   d938a:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   d938c:	d914      	bls.n	d93b8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   d938e:	4290      	cmp	r0, r2
   d9390:	d213      	bcs.n	d93ba <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
   d9392:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
   d9396:	1a75      	subs	r5, r6, r1
   d9398:	f1a1 0710 	sub.w	r7, r1, #16
   d939c:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   d939e:	42b7      	cmp	r7, r6
   d93a0:	d018      	beq.n	d93d4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   d93a2:	b11c      	cbz	r4, d93ac <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   d93a4:	4631      	mov	r1, r6
   d93a6:	4620      	mov	r0, r4
   d93a8:	f000 fddf 	bl	d9f6a <_ZN6StringC1EOS_>
                end->~T();
   d93ac:	4630      	mov	r0, r6
   d93ae:	f000 fd60 	bl	d9e72 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   d93b2:	3e10      	subs	r6, #16
   d93b4:	3c10      	subs	r4, #16
   d93b6:	e7f2      	b.n	d939e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   d93b8:	d00c      	beq.n	d93d4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   d93ba:	42b5      	cmp	r5, r6
   d93bc:	d00a      	beq.n	d93d4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   d93be:	b11c      	cbz	r4, d93c8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   d93c0:	4629      	mov	r1, r5
   d93c2:	4620      	mov	r0, r4
   d93c4:	f000 fdd1 	bl	d9f6a <_ZN6StringC1EOS_>
                p->~T();
   d93c8:	4628      	mov	r0, r5
   d93ca:	f000 fd52 	bl	d9e72 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   d93ce:	3510      	adds	r5, #16
   d93d0:	3410      	adds	r4, #16
   d93d2:	e7f2      	b.n	d93ba <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
   d93d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d93d6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
   d93d6:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   d93d8:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   d93da:	4605      	mov	r5, r0
        if (n > 0) {
   d93dc:	dd11      	ble.n	d9402 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
   d93de:	0130      	lsls	r0, r6, #4
   d93e0:	f7fe fbcc 	bl	d7b7c <malloc>
            if (!d) {
   d93e4:	4604      	mov	r4, r0
   d93e6:	b158      	cbz	r0, d9400 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   d93e8:	e9d5 1200 	ldrd	r1, r2, [r5]
   d93ec:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   d93f0:	f7ff ffc7 	bl	d9382 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   d93f4:	6828      	ldr	r0, [r5, #0]
   d93f6:	f7fe fbc9 	bl	d7b8c <free>
        data_ = d;
   d93fa:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d93fc:	60ae      	str	r6, [r5, #8]
        return true;
   d93fe:	2001      	movs	r0, #1
    }
   d9400:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   d9402:	2400      	movs	r4, #0
   d9404:	e7f6      	b.n	d93f4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

000d9406 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   d9406:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d940a:	4691      	mov	r9, r2
   d940c:	b097      	sub	sp, #92	; 0x5c
        capacity_(0) {
   d940e:	2300      	movs	r3, #0
   d9410:	9103      	str	r1, [sp, #12]
    if (!cats.reserve(filters.size())) {
   d9412:	f8d9 1004 	ldr.w	r1, [r9, #4]
   d9416:	930c      	str	r3, [sp, #48]	; 0x30
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   d9418:	2246      	movs	r2, #70	; 0x46
    if (n > capacity_ && !realloc(n)) {
   d941a:	4299      	cmp	r1, r3
        capacity_(0) {
   d941c:	e9c0 3300 	strd	r3, r3, [r0]
   d9420:	e9c0 3302 	strd	r3, r3, [r0, #8]
   d9424:	e9c0 3304 	strd	r3, r3, [r0, #16]
   d9428:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   d942c:	4604      	mov	r4, r0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   d942e:	7602      	strb	r2, [r0, #24]
    if (n > capacity_ && !realloc(n)) {
   d9430:	dc23      	bgt.n	d947a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
   d9432:	e9d9 5700 	ldrd	r5, r7, [r9]
   d9436:	2314      	movs	r3, #20
   d9438:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
   d943c:	42af      	cmp	r7, r5
   d943e:	d03b      	beq.n	d94b8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
   d9440:	4629      	mov	r1, r5
   d9442:	a80d      	add	r0, sp, #52	; 0x34
   d9444:	f000 fd91 	bl	d9f6a <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
   d9448:	a90d      	add	r1, sp, #52	; 0x34
   d944a:	a811      	add	r0, sp, #68	; 0x44
   d944c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   d944e:	f000 fd8c 	bl	d9f6a <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d9452:	e9dd 130b 	ldrd	r1, r3, [sp, #44]	; 0x2c
   d9456:	4299      	cmp	r1, r3
   d9458:	da1b      	bge.n	d9492 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
   d945a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    move(p + 1, p, data_ + size_);
   d945c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    T* const p = data_ + i;
   d945e:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   d9462:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   d9466:	4631      	mov	r1, r6
   d9468:	f106 0010 	add.w	r0, r6, #16
   d946c:	f7ff ff89 	bl	d9382 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   d9470:	b9ee      	cbnz	r6, d94ae <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
   d9472:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   d9474:	3301      	adds	r3, #1
   d9476:	930b      	str	r3, [sp, #44]	; 0x2c
    return true;
   d9478:	e011      	b.n	d949e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
   d947a:	a80a      	add	r0, sp, #40	; 0x28
   d947c:	f7ff ffab 	bl	d93d6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   d9480:	2800      	cmp	r0, #0
   d9482:	d1d6      	bne.n	d9432 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
    Vector<String> cats;
   d9484:	a80a      	add	r0, sp, #40	; 0x28
   d9486:	f7ff fd3f 	bl	d8f08 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   d948a:	4620      	mov	r0, r4
   d948c:	b017      	add	sp, #92	; 0x5c
   d948e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d9492:	3101      	adds	r1, #1
   d9494:	a80a      	add	r0, sp, #40	; 0x28
   d9496:	f7ff ff9e 	bl	d93d6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   d949a:	2800      	cmp	r0, #0
   d949c:	d1dd      	bne.n	d945a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
   d949e:	a811      	add	r0, sp, #68	; 0x44
   d94a0:	f000 fce7 	bl	d9e72 <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
   d94a4:	a80d      	add	r0, sp, #52	; 0x34
   d94a6:	f000 fce4 	bl	d9e72 <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
   d94aa:	3514      	adds	r5, #20
   d94ac:	e7c6      	b.n	d943c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
   d94ae:	a911      	add	r1, sp, #68	; 0x44
   d94b0:	4630      	mov	r0, r6
   d94b2:	f000 fd5a 	bl	d9f6a <_ZN6StringC1EOS_>
   d94b6:	e7dc      	b.n	d9472 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
   d94b8:	2600      	movs	r6, #0
   d94ba:	e9cd 660d 	strd	r6, r6, [sp, #52]	; 0x34
   d94be:	960f      	str	r6, [sp, #60]	; 0x3c
        size_t size = 0; // Name length
   d94c0:	4637      	mov	r7, r6
   d94c2:	f04f 0a14 	mov.w	sl, #20
    for (int i = 0; i < cats.size(); ++i) {
   d94c6:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   d94ca:	429e      	cmp	r6, r3
   d94cc:	f280 8097 	bge.w	d95fe <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f8>
        const char *category = cats.at(i).c_str();
   d94d0:	0133      	lsls	r3, r6, #4
   d94d2:	58d3      	ldr	r3, [r2, r3]
   d94d4:	9308      	str	r3, [sp, #32]
        if (!category) {
   d94d6:	b90b      	cbnz	r3, d94dc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd6>
    for (int i = 0; i < cats.size(); ++i) {
   d94d8:	3601      	adds	r6, #1
   d94da:	e7f4      	b.n	d94c6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xc0>
        size_t size = 0; // Name length
   d94dc:	fb0a f306 	mul.w	r3, sl, r6
   d94e0:	9709      	str	r7, [sp, #36]	; 0x24
   d94e2:	9302      	str	r3, [sp, #8]
        Vector<Node> *pNodes = &nodes; // Root nodes
   d94e4:	ad0d      	add	r5, sp, #52	; 0x34
        while ((name = nextSubcategoryName(category, size))) {
   d94e6:	a909      	add	r1, sp, #36	; 0x24
   d94e8:	a808      	add	r0, sp, #32
   d94ea:	f7ff fb00 	bl	d8aee <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   d94ee:	4683      	mov	fp, r0
   d94f0:	2800      	cmp	r0, #0
   d94f2:	d0f1      	beq.n	d94d8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
            const int index = nodeIndex(*pNodes, name, size, found);
   d94f4:	4601      	mov	r1, r0
   d94f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
            bool found = false;
   d94f8:	f88d 701f 	strb.w	r7, [sp, #31]
            const int index = nodeIndex(*pNodes, name, size, found);
   d94fc:	f10d 031f 	add.w	r3, sp, #31
   d9500:	4628      	mov	r0, r5
   d9502:	f7ff fb73 	bl	d8bec <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d9506:	f89d 801f 	ldrb.w	r8, [sp, #31]
            const int index = nodeIndex(*pNodes, name, size, found);
   d950a:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d950c:	f1b8 0f00 	cmp.w	r8, #0
   d9510:	d166      	bne.n	d95e0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1da>
   d9512:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
            level(-1) {
   d9516:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
   d951a:	e9cd 8813 	strd	r8, r8, [sp, #76]	; 0x4c
   d951e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d9522:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
   d9526:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
   d952a:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d952e:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   d9532:	4293      	cmp	r3, r2
   d9534:	db1a      	blt.n	d956c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x166>
   d9536:	f103 0b01 	add.w	fp, r3, #1
        if (n > 0) {
   d953a:	f1bb 0f00 	cmp.w	fp, #0
   d953e:	dd4a      	ble.n	d95d6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d0>
    return ::malloc(size);
   d9540:	fb0a f00b 	mul.w	r0, sl, fp
   d9544:	f7fe fb1a 	bl	d7b7c <malloc>
            if (!d) {
   d9548:	9004      	str	r0, [sp, #16]
   d954a:	2800      	cmp	r0, #0
   d954c:	d045      	beq.n	d95da <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d4>
            move(d, data_, data_ + size_);
   d954e:	e9d5 1200 	ldrd	r1, r2, [r5]
   d9552:	fb0a 1202 	mla	r2, sl, r2, r1
   d9556:	f7ff fe71 	bl	d923c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
   d955a:	9b04      	ldr	r3, [sp, #16]
    ::free(ptr);
   d955c:	6828      	ldr	r0, [r5, #0]
   d955e:	9304      	str	r3, [sp, #16]
   d9560:	f7fe fb14 	bl	d7b8c <free>
        data_ = d;
   d9564:	9b04      	ldr	r3, [sp, #16]
   d9566:	602b      	str	r3, [r5, #0]
        capacity_ = n;
   d9568:	f8c5 b008 	str.w	fp, [r5, #8]
    T* const p = data_ + i;
   d956c:	9b01      	ldr	r3, [sp, #4]
   d956e:	f8d5 b000 	ldr.w	fp, [r5]
    move(p + 1, p, data_ + size_);
   d9572:	686a      	ldr	r2, [r5, #4]
    T* const p = data_ + i;
   d9574:	fb0a f303 	mul.w	r3, sl, r3
   d9578:	eb0b 0103 	add.w	r1, fp, r3
    move(p + 1, p, data_ + size_);
   d957c:	f101 0014 	add.w	r0, r1, #20
   d9580:	fb0a b202 	mla	r2, sl, r2, fp
   d9584:	9104      	str	r1, [sp, #16]
    T* const p = data_ + i;
   d9586:	9305      	str	r3, [sp, #20]
    move(p + 1, p, data_ + size_);
   d9588:	f7ff fe58 	bl	d923c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   d958c:	9904      	ldr	r1, [sp, #16]
   d958e:	b1a9      	cbz	r1, d95bc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1b6>
struct spark::detail::LogFilter::Node {
   d9590:	9b05      	ldr	r3, [sp, #20]
   d9592:	9a11      	ldr	r2, [sp, #68]	; 0x44
   d9594:	f84b 2003 	str.w	r2, [fp, r3]
   d9598:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
   d959c:	808b      	strh	r3, [r1, #4]
   d959e:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
   d95a2:	80cb      	strh	r3, [r1, #6]
        capacity_(0) {
   d95a4:	e9c1 7702 	strd	r7, r7, [r1, #8]
   d95a8:	610f      	str	r7, [r1, #16]
      __a = _GLIBCXX_MOVE(__b);
   d95aa:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   d95ac:	608b      	str	r3, [r1, #8]
   d95ae:	9b14      	ldr	r3, [sp, #80]	; 0x50
      __b = _GLIBCXX_MOVE(__tmp);
   d95b0:	9713      	str	r7, [sp, #76]	; 0x4c
      __a = _GLIBCXX_MOVE(__b);
   d95b2:	60cb      	str	r3, [r1, #12]
   d95b4:	9b15      	ldr	r3, [sp, #84]	; 0x54
      __b = _GLIBCXX_MOVE(__tmp);
   d95b6:	9714      	str	r7, [sp, #80]	; 0x50
      __a = _GLIBCXX_MOVE(__b);
   d95b8:	610b      	str	r3, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d95ba:	9715      	str	r7, [sp, #84]	; 0x54
    ++size_;
   d95bc:	686b      	ldr	r3, [r5, #4]
   d95be:	3301      	adds	r3, #1
   d95c0:	606b      	str	r3, [r5, #4]
   d95c2:	a813      	add	r0, sp, #76	; 0x4c
   d95c4:	f7ff fc8c 	bl	d8ee0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d95c8:	f1b8 0f00 	cmp.w	r8, #0
   d95cc:	d008      	beq.n	d95e0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1da>
    Vector<Node> nodes;
   d95ce:	a80d      	add	r0, sp, #52	; 0x34
   d95d0:	f7ff fc86 	bl	d8ee0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d95d4:	e756      	b.n	d9484 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
   d95d6:	4643      	mov	r3, r8
   d95d8:	e7c0      	b.n	d955c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x156>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d95da:	f04f 0801 	mov.w	r8, #1
   d95de:	e7f0      	b.n	d95c2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
    return data_[i];
   d95e0:	9b01      	ldr	r3, [sp, #4]
   d95e2:	682d      	ldr	r5, [r5, #0]
   d95e4:	fb0a 5503 	mla	r5, sl, r3, r5
            if (!*category) { // Check if it's last subcategory
   d95e8:	9b08      	ldr	r3, [sp, #32]
   d95ea:	781b      	ldrb	r3, [r3, #0]
   d95ec:	b92b      	cbnz	r3, d95fa <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f4>
                node.level = filters.at(i).level_;
   d95ee:	f8d9 3000 	ldr.w	r3, [r9]
   d95f2:	9a02      	ldr	r2, [sp, #8]
   d95f4:	4413      	add	r3, r2
   d95f6:	7c1b      	ldrb	r3, [r3, #16]
   d95f8:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
   d95fa:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
   d95fc:	e773      	b.n	d94e6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xe0>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d95fe:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d9600:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d9602:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   d9604:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d9606:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d9608:	920b      	str	r2, [sp, #44]	; 0x2c
      __a = _GLIBCXX_MOVE(__b);
   d960a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
   d960c:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d960e:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   d9610:	60a2      	str	r2, [r4, #8]
   d9612:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
   d9614:	930d      	str	r3, [sp, #52]	; 0x34
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d9616:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   d9618:	60e2      	str	r2, [r4, #12]
   d961a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
      __b = _GLIBCXX_MOVE(__tmp);
   d961c:	930e      	str	r3, [sp, #56]	; 0x38
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d961e:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
   d9620:	6122      	str	r2, [r4, #16]
   d9622:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
      __b = _GLIBCXX_MOVE(__tmp);
   d9624:	930f      	str	r3, [sp, #60]	; 0x3c
    level_ = level;
   d9626:	9b03      	ldr	r3, [sp, #12]
   d9628:	910a      	str	r1, [sp, #40]	; 0x28
      __a = _GLIBCXX_MOVE(__b);
   d962a:	6162      	str	r2, [r4, #20]
   d962c:	7623      	strb	r3, [r4, #24]
   d962e:	e7ce      	b.n	d95ce <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c8>

000d9630 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
   d9630:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
        filter_(level, filters) {
   d9632:	4605      	mov	r5, r0
   d9634:	4b09      	ldr	r3, [pc, #36]	; (d965c <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>)
   d9636:	f845 3b04 	str.w	r3, [r5], #4
inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
   d963a:	4604      	mov	r4, r0
   d963c:	460e      	mov	r6, r1
        filter_(level, filters) {
   d963e:	a801      	add	r0, sp, #4
   d9640:	4611      	mov	r1, r2
   d9642:	f7fc fa0b 	bl	d5a5c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d9646:	aa01      	add	r2, sp, #4
   d9648:	4631      	mov	r1, r6
   d964a:	4628      	mov	r0, r5
   d964c:	f7ff fedb 	bl	d9406 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d9650:	a801      	add	r0, sp, #4
   d9652:	f7fa fff3 	bl	d463c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}
   d9656:	4620      	mov	r0, r4
   d9658:	b004      	add	sp, #16
   d965a:	bd70      	pop	{r4, r5, r6, pc}
   d965c:	000dc530 	.word	0x000dc530

000d9660 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
   d9660:	b5f0      	push	{r4, r5, r6, r7, lr}
   d9662:	460f      	mov	r7, r1
   d9664:	b087      	sub	sp, #28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d9666:	4926      	ldr	r1, [pc, #152]	; (d9700 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa0>)
            Print *stream, const JSONValue &params) {
   d9668:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d966a:	4638      	mov	r0, r7
            Print *stream, const JSONValue &params) {
   d966c:	4616      	mov	r6, r2
   d966e:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d9670:	f002 fac9 	bl	dbc06 <strcmp>
   d9674:	bb00      	cbnz	r0, d96b8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x58>
        if (!stream) {
   d9676:	b1e4      	cbz	r4, d96b2 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   d9678:	4629      	mov	r1, r5
   d967a:	4668      	mov	r0, sp
   d967c:	f7ff fc8a 	bl	d8f94 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   d9680:	4920      	ldr	r1, [pc, #128]	; (d9704 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa4>)
   d9682:	2024      	movs	r0, #36	; 0x24
   d9684:	f001 fa1a 	bl	daabc <_ZnwjRKSt9nothrow_t>
   d9688:	4605      	mov	r5, r0
   d968a:	b170      	cbz	r0, d96aa <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
        stream_(&stream) {
   d968c:	4669      	mov	r1, sp
   d968e:	a803      	add	r0, sp, #12
   d9690:	f7fc f9e4 	bl	d5a5c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d9694:	aa03      	add	r2, sp, #12
   d9696:	4631      	mov	r1, r6
   d9698:	4628      	mov	r0, r5
   d969a:	f7ff ffc9 	bl	d9630 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d969e:	a803      	add	r0, sp, #12
   d96a0:	f7fa ffcc 	bl	d463c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
    using StreamLogHandler::StreamLogHandler;
   d96a4:	4b18      	ldr	r3, [pc, #96]	; (d9708 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa8>)
        stream_(&stream) {
   d96a6:	622c      	str	r4, [r5, #32]
    using StreamLogHandler::StreamLogHandler;
   d96a8:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   d96aa:	4668      	mov	r0, sp
   d96ac:	f7fa ffc6 	bl	d463c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d96b0:	462c      	mov	r4, r5
}
   d96b2:	4620      	mov	r0, r4
   d96b4:	b007      	add	sp, #28
   d96b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   d96b8:	4914      	ldr	r1, [pc, #80]	; (d970c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xac>)
   d96ba:	4638      	mov	r0, r7
   d96bc:	f002 faa3 	bl	dbc06 <strcmp>
   d96c0:	b9e0      	cbnz	r0, d96fc <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x9c>
        if (!stream) {
   d96c2:	2c00      	cmp	r4, #0
   d96c4:	d0f5      	beq.n	d96b2 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   d96c6:	4629      	mov	r1, r5
   d96c8:	4668      	mov	r0, sp
   d96ca:	f7ff fc63 	bl	d8f94 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   d96ce:	490d      	ldr	r1, [pc, #52]	; (d9704 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa4>)
   d96d0:	2024      	movs	r0, #36	; 0x24
   d96d2:	f001 f9f3 	bl	daabc <_ZnwjRKSt9nothrow_t>
   d96d6:	4605      	mov	r5, r0
   d96d8:	2800      	cmp	r0, #0
   d96da:	d0e6      	beq.n	d96aa <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
        stream_(&stream) {
   d96dc:	4669      	mov	r1, sp
   d96de:	a803      	add	r0, sp, #12
   d96e0:	f7fc f9bc 	bl	d5a5c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d96e4:	aa03      	add	r2, sp, #12
   d96e6:	4631      	mov	r1, r6
   d96e8:	4628      	mov	r0, r5
   d96ea:	f7ff ffa1 	bl	d9630 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d96ee:	a803      	add	r0, sp, #12
   d96f0:	f7fa ffa4 	bl	d463c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d96f4:	4b06      	ldr	r3, [pc, #24]	; (d9710 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb0>)
   d96f6:	602b      	str	r3, [r5, #0]
   d96f8:	622c      	str	r4, [r5, #32]
}
   d96fa:	e7d6      	b.n	d96aa <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
            return nullptr; // Output stream is not specified
   d96fc:	2400      	movs	r4, #0
   d96fe:	e7d8      	b.n	d96b2 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
   d9700:	000dc8aa 	.word	0x000dc8aa
   d9704:	000dca7c 	.word	0x000dca7c
   d9708:	000dc940 	.word	0x000dc940
   d970c:	000dc8ae 	.word	0x000dc8ae
   d9710:	000dc928 	.word	0x000dc928

000d9714 <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
   d9714:	4b01      	ldr	r3, [pc, #4]	; (d971c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d9716:	4a02      	ldr	r2, [pc, #8]	; (d9720 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d9718:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d971a:	4770      	bx	lr
   d971c:	2003e63c 	.word	0x2003e63c
   d9720:	000dc8bf 	.word	0x000dc8bf

000d9724 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d9724:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d9728:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
   d972a:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d972e:	4604      	mov	r4, r0
   d9730:	460e      	mov	r6, r1
   d9732:	4617      	mov	r7, r2
   d9734:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
   d9736:	f000 ffeb 	bl	da710 <_Z16_fetch_usbserialv>
   d973a:	4581      	cmp	r9, r0
   d973c:	d04c      	beq.n	d97d8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb4>
    if (attr.has_time) {
   d973e:	792b      	ldrb	r3, [r5, #4]
   d9740:	0719      	lsls	r1, r3, #28
   d9742:	d504      	bpl.n	d974e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
   d9744:	696a      	ldr	r2, [r5, #20]
   d9746:	4954      	ldr	r1, [pc, #336]	; (d9898 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   d9748:	4620      	mov	r0, r4
   d974a:	f7ff fa40 	bl	d8bce <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
   d974e:	f1b8 0f00 	cmp.w	r8, #0
   d9752:	d00d      	beq.n	d9770 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
   d9754:	215b      	movs	r1, #91	; 0x5b
   d9756:	4620      	mov	r0, r4
   d9758:	f7ff fa2d 	bl	d8bb6 <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   d975c:	4641      	mov	r1, r8
   d975e:	4620      	mov	r0, r4
   d9760:	f7ff fa1a 	bl	d8b98 <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   d9764:	6823      	ldr	r3, [r4, #0]
   d9766:	494d      	ldr	r1, [pc, #308]	; (d989c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
   d9768:	68db      	ldr	r3, [r3, #12]
   d976a:	2202      	movs	r2, #2
   d976c:	4620      	mov	r0, r4
   d976e:	4798      	blx	r3
    if (attr.has_file) {
   d9770:	792b      	ldrb	r3, [r5, #4]
   d9772:	07da      	lsls	r2, r3, #31
   d9774:	d523      	bpl.n	d97be <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9a>
        s = extractFileName(attr.file); // Strip directory path
   d9776:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
   d977a:	212f      	movs	r1, #47	; 0x2f
   d977c:	4640      	mov	r0, r8
   d977e:	f002 fa9f 	bl	dbcc0 <strrchr>
    if (s1) {
   d9782:	b108      	cbz	r0, d9788 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
   d9784:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
   d9788:	4641      	mov	r1, r8
   d978a:	4620      	mov	r0, r4
   d978c:	f7ff fa04 	bl	d8b98 <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   d9790:	792b      	ldrb	r3, [r5, #4]
   d9792:	079b      	lsls	r3, r3, #30
   d9794:	d508      	bpl.n	d97a8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
   d9796:	213a      	movs	r1, #58	; 0x3a
   d9798:	4620      	mov	r0, r4
   d979a:	f7ff fa0c 	bl	d8bb6 <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
   d979e:	68ea      	ldr	r2, [r5, #12]
   d97a0:	493f      	ldr	r1, [pc, #252]	; (d98a0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
   d97a2:	4620      	mov	r0, r4
   d97a4:	f7ff fa13 	bl	d8bce <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
   d97a8:	792a      	ldrb	r2, [r5, #4]
   d97aa:	6823      	ldr	r3, [r4, #0]
   d97ac:	f012 0f04 	tst.w	r2, #4
   d97b0:	68db      	ldr	r3, [r3, #12]
            write(", ", 2);
   d97b2:	bf14      	ite	ne
   d97b4:	493b      	ldrne	r1, [pc, #236]	; (d98a4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
            write(": ", 2);
   d97b6:	493c      	ldreq	r1, [pc, #240]	; (d98a8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(", ", 2);
   d97b8:	2202      	movs	r2, #2
            write(": ", 2);
   d97ba:	4620      	mov	r0, r4
   d97bc:	4798      	blx	r3
    if (attr.has_function) {
   d97be:	792b      	ldrb	r3, [r5, #4]
   d97c0:	0758      	lsls	r0, r3, #29
   d97c2:	d51d      	bpl.n	d9800 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xdc>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   d97c4:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
   d97c6:	460b      	mov	r3, r1
   d97c8:	461a      	mov	r2, r3
    for (; *s; ++s) {
   d97ca:	f813 0b01 	ldrb.w	r0, [r3], #1
   d97ce:	b160      	cbz	r0, d97ea <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
        if (*s == ' ') {
   d97d0:	2820      	cmp	r0, #32
   d97d2:	d108      	bne.n	d97e6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
            s1 = s + 1; // Skip return type
   d97d4:	4619      	mov	r1, r3
   d97d6:	e7f7      	b.n	d97c8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
    if (stream_ == &Serial && Network.listening()) {
   d97d8:	4834      	ldr	r0, [pc, #208]	; (d98ac <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   d97da:	f000 f966 	bl	d9aaa <_ZN5spark12NetworkClass9listeningEv>
   d97de:	2800      	cmp	r0, #0
   d97e0:	d0ad      	beq.n	d973e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
   d97e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
   d97e6:	2828      	cmp	r0, #40	; 0x28
   d97e8:	d1ee      	bne.n	d97c8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
        write(s, n);
   d97ea:	6823      	ldr	r3, [r4, #0]
   d97ec:	1a52      	subs	r2, r2, r1
   d97ee:	68db      	ldr	r3, [r3, #12]
   d97f0:	4620      	mov	r0, r4
   d97f2:	4798      	blx	r3
        write("(): ", 4);
   d97f4:	6823      	ldr	r3, [r4, #0]
   d97f6:	492e      	ldr	r1, [pc, #184]	; (d98b0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   d97f8:	68db      	ldr	r3, [r3, #12]
   d97fa:	2204      	movs	r2, #4
   d97fc:	4620      	mov	r0, r4
   d97fe:	4798      	blx	r3
    return log_level_name(level, nullptr);
   d9800:	2100      	movs	r1, #0
   d9802:	4638      	mov	r0, r7
   d9804:	f7fe f890 	bl	d7928 <log_level_name>
   d9808:	4601      	mov	r1, r0
    write(s);
   d980a:	4620      	mov	r0, r4
   d980c:	f7ff f9c4 	bl	d8b98 <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   d9810:	6823      	ldr	r3, [r4, #0]
   d9812:	4925      	ldr	r1, [pc, #148]	; (d98a8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   d9814:	68db      	ldr	r3, [r3, #12]
   d9816:	2202      	movs	r2, #2
   d9818:	4620      	mov	r0, r4
   d981a:	4798      	blx	r3
    if (msg) {
   d981c:	b11e      	cbz	r6, d9826 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x102>
        write(msg);
   d981e:	4631      	mov	r1, r6
   d9820:	4620      	mov	r0, r4
   d9822:	f7ff f9b9 	bl	d8b98 <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
   d9826:	792b      	ldrb	r3, [r5, #4]
   d9828:	f013 0f30 	tst.w	r3, #48	; 0x30
   d982c:	d02c      	beq.n	d9888 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>
        write(" [", 2);
   d982e:	6823      	ldr	r3, [r4, #0]
   d9830:	4920      	ldr	r1, [pc, #128]	; (d98b4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   d9832:	68db      	ldr	r3, [r3, #12]
   d9834:	2202      	movs	r2, #2
   d9836:	4620      	mov	r0, r4
   d9838:	4798      	blx	r3
        if (attr.has_code) {
   d983a:	792b      	ldrb	r3, [r5, #4]
   d983c:	06d9      	lsls	r1, r3, #27
   d983e:	d50a      	bpl.n	d9856 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x132>
            write("code = ", 7);
   d9840:	6823      	ldr	r3, [r4, #0]
   d9842:	491d      	ldr	r1, [pc, #116]	; (d98b8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   d9844:	68db      	ldr	r3, [r3, #12]
   d9846:	2207      	movs	r2, #7
   d9848:	4620      	mov	r0, r4
   d984a:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
   d984c:	69aa      	ldr	r2, [r5, #24]
   d984e:	491b      	ldr	r1, [pc, #108]	; (d98bc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
   d9850:	4620      	mov	r0, r4
   d9852:	f7ff f9bc 	bl	d8bce <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
   d9856:	792b      	ldrb	r3, [r5, #4]
   d9858:	069a      	lsls	r2, r3, #26
   d985a:	d511      	bpl.n	d9880 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>
            if (attr.has_code) {
   d985c:	06db      	lsls	r3, r3, #27
   d985e:	d505      	bpl.n	d986c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>
                write(", ", 2);
   d9860:	6823      	ldr	r3, [r4, #0]
   d9862:	4910      	ldr	r1, [pc, #64]	; (d98a4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
   d9864:	68db      	ldr	r3, [r3, #12]
   d9866:	2202      	movs	r2, #2
   d9868:	4620      	mov	r0, r4
   d986a:	4798      	blx	r3
            write("details = ", 10);
   d986c:	6823      	ldr	r3, [r4, #0]
   d986e:	4914      	ldr	r1, [pc, #80]	; (d98c0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
   d9870:	68db      	ldr	r3, [r3, #12]
   d9872:	4620      	mov	r0, r4
   d9874:	220a      	movs	r2, #10
   d9876:	4798      	blx	r3
            write(attr.details);
   d9878:	69e9      	ldr	r1, [r5, #28]
   d987a:	4620      	mov	r0, r4
   d987c:	f7ff f98c 	bl	d8b98 <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
   d9880:	215d      	movs	r1, #93	; 0x5d
   d9882:	4620      	mov	r0, r4
   d9884:	f7ff f997 	bl	d8bb6 <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
   d9888:	6823      	ldr	r3, [r4, #0]
   d988a:	490e      	ldr	r1, [pc, #56]	; (d98c4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
   d988c:	68db      	ldr	r3, [r3, #12]
   d988e:	4620      	mov	r0, r4
   d9890:	2202      	movs	r2, #2
}
   d9892:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
   d9896:	4718      	bx	r3
   d9898:	000dc8c3 	.word	0x000dc8c3
   d989c:	000dc8ca 	.word	0x000dc8ca
   d98a0:	000dc05f 	.word	0x000dc05f
   d98a4:	000dc8cd 	.word	0x000dc8cd
   d98a8:	000dc8d2 	.word	0x000dc8d2
   d98ac:	2003e668 	.word	0x2003e668
   d98b0:	000dc8d0 	.word	0x000dc8d0
   d98b4:	000dc8d5 	.word	0x000dc8d5
   d98b8:	000dc8d8 	.word	0x000dc8d8
   d98bc:	000dc8e0 	.word	0x000dc8e0
   d98c0:	000dc8e3 	.word	0x000dc8e3
   d98c4:	000dc8ee 	.word	0x000dc8ee

000d98c8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d98c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d98cc:	b085      	sub	sp, #20
    if (this->stream() == &Serial && Network.listening()) {
   d98ce:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d98d2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   d98d4:	4605      	mov	r5, r0
   d98d6:	460f      	mov	r7, r1
   d98d8:	4690      	mov	r8, r2
   d98da:	461e      	mov	r6, r3
    if (this->stream() == &Serial && Network.listening()) {
   d98dc:	f000 ff18 	bl	da710 <_Z16_fetch_usbserialv>
   d98e0:	4581      	cmp	r9, r0
   d98e2:	d105      	bne.n	d98f0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
   d98e4:	4849      	ldr	r0, [pc, #292]	; (d9a0c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
   d98e6:	f000 f8e0 	bl	d9aaa <_ZN5spark12NetworkClass9listeningEv>
   d98ea:	2800      	cmp	r0, #0
   d98ec:	f040 808a 	bne.w	d9a04 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
    JSONStreamWriter json(*this->stream());
   d98f0:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
   d98f2:	4a47      	ldr	r2, [pc, #284]	; (d9a10 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   d98f4:	9201      	str	r2, [sp, #4]
        state_(BEGIN) {
   d98f6:	f04f 0900 	mov.w	r9, #0
    json.beginObject();
   d98fa:	a801      	add	r0, sp, #4
        strm_(stream) {
   d98fc:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
   d98fe:	f88d 9008 	strb.w	r9, [sp, #8]
   d9902:	f7ff f83c 	bl	d897e <_ZN5spark10JSONWriter11beginObjectEv>
   d9906:	4649      	mov	r1, r9
   d9908:	4640      	mov	r0, r8
   d990a:	f7fe f80d 	bl	d7928 <log_level_name>
    json.name("l", 1).value(s);
   d990e:	4941      	ldr	r1, [pc, #260]	; (d9a14 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   d9910:	4680      	mov	r8, r0
   d9912:	2201      	movs	r2, #1
   d9914:	a801      	add	r0, sp, #4
   d9916:	f7ff f8bb 	bl	d8a90 <_ZN5spark10JSONWriter4nameEPKcj>
   d991a:	4641      	mov	r1, r8
   d991c:	f7ff f92e 	bl	d8b7c <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
   d9920:	b13f      	cbz	r7, d9932 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
   d9922:	493d      	ldr	r1, [pc, #244]	; (d9a18 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   d9924:	2201      	movs	r2, #1
   d9926:	a801      	add	r0, sp, #4
   d9928:	f7ff f8b2 	bl	d8a90 <_ZN5spark10JSONWriter4nameEPKcj>
   d992c:	4639      	mov	r1, r7
   d992e:	f7ff f925 	bl	d8b7c <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
   d9932:	b13e      	cbz	r6, d9944 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
   d9934:	4939      	ldr	r1, [pc, #228]	; (d9a1c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   d9936:	2201      	movs	r2, #1
   d9938:	a801      	add	r0, sp, #4
   d993a:	f7ff f8a9 	bl	d8a90 <_ZN5spark10JSONWriter4nameEPKcj>
   d993e:	4631      	mov	r1, r6
   d9940:	f7ff f91c 	bl	d8b7c <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
   d9944:	7923      	ldrb	r3, [r4, #4]
   d9946:	07df      	lsls	r7, r3, #31
   d9948:	d50e      	bpl.n	d9968 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
   d994a:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
   d994c:	212f      	movs	r1, #47	; 0x2f
   d994e:	4630      	mov	r0, r6
   d9950:	f002 f9b6 	bl	dbcc0 <strrchr>
    if (s1) {
   d9954:	b100      	cbz	r0, d9958 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
   d9956:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
   d9958:	4931      	ldr	r1, [pc, #196]	; (d9a20 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   d995a:	2201      	movs	r2, #1
   d995c:	a801      	add	r0, sp, #4
   d995e:	f7ff f897 	bl	d8a90 <_ZN5spark10JSONWriter4nameEPKcj>
   d9962:	4631      	mov	r1, r6
   d9964:	f7ff f90a 	bl	d8b7c <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
   d9968:	7923      	ldrb	r3, [r4, #4]
   d996a:	079e      	lsls	r6, r3, #30
   d996c:	d507      	bpl.n	d997e <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
   d996e:	492d      	ldr	r1, [pc, #180]	; (d9a24 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
   d9970:	2202      	movs	r2, #2
   d9972:	a801      	add	r0, sp, #4
   d9974:	f7ff f88c 	bl	d8a90 <_ZN5spark10JSONWriter4nameEPKcj>
   d9978:	68e1      	ldr	r1, [r4, #12]
   d997a:	f7ff f80d 	bl	d8998 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
   d997e:	7923      	ldrb	r3, [r4, #4]
   d9980:	0758      	lsls	r0, r3, #29
   d9982:	d514      	bpl.n	d99ae <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   d9984:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
   d9986:	4633      	mov	r3, r6
   d9988:	461f      	mov	r7, r3
    for (; *s; ++s) {
   d998a:	f813 2b01 	ldrb.w	r2, [r3], #1
   d998e:	b12a      	cbz	r2, d999c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
   d9990:	2a20      	cmp	r2, #32
   d9992:	d101      	bne.n	d9998 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
   d9994:	461e      	mov	r6, r3
   d9996:	e7f7      	b.n	d9988 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
   d9998:	2a28      	cmp	r2, #40	; 0x28
   d999a:	d1f5      	bne.n	d9988 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
   d999c:	4922      	ldr	r1, [pc, #136]	; (d9a28 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
   d999e:	2202      	movs	r2, #2
   d99a0:	a801      	add	r0, sp, #4
   d99a2:	f7ff f875 	bl	d8a90 <_ZN5spark10JSONWriter4nameEPKcj>
   d99a6:	1bba      	subs	r2, r7, r6
   d99a8:	4631      	mov	r1, r6
   d99aa:	f7ff f881 	bl	d8ab0 <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
   d99ae:	7923      	ldrb	r3, [r4, #4]
   d99b0:	0719      	lsls	r1, r3, #28
   d99b2:	d507      	bpl.n	d99c4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
   d99b4:	491d      	ldr	r1, [pc, #116]	; (d9a2c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
   d99b6:	2201      	movs	r2, #1
   d99b8:	a801      	add	r0, sp, #4
   d99ba:	f7ff f869 	bl	d8a90 <_ZN5spark10JSONWriter4nameEPKcj>
   d99be:	6961      	ldr	r1, [r4, #20]
   d99c0:	f7fe fffc 	bl	d89bc <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
   d99c4:	7923      	ldrb	r3, [r4, #4]
   d99c6:	06da      	lsls	r2, r3, #27
   d99c8:	d508      	bpl.n	d99dc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
   d99ca:	2204      	movs	r2, #4
   d99cc:	4918      	ldr	r1, [pc, #96]	; (d9a30 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   d99ce:	eb0d 0002 	add.w	r0, sp, r2
   d99d2:	f7ff f85d 	bl	d8a90 <_ZN5spark10JSONWriter4nameEPKcj>
   d99d6:	69a1      	ldr	r1, [r4, #24]
   d99d8:	f7fe ffde 	bl	d8998 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
   d99dc:	7923      	ldrb	r3, [r4, #4]
   d99de:	069b      	lsls	r3, r3, #26
   d99e0:	d507      	bpl.n	d99f2 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
   d99e2:	4914      	ldr	r1, [pc, #80]	; (d9a34 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   d99e4:	2206      	movs	r2, #6
   d99e6:	a801      	add	r0, sp, #4
   d99e8:	f7ff f852 	bl	d8a90 <_ZN5spark10JSONWriter4nameEPKcj>
   d99ec:	69e1      	ldr	r1, [r4, #28]
   d99ee:	f7ff f8c5 	bl	d8b7c <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
   d99f2:	a801      	add	r0, sp, #4
   d99f4:	f7fe ffad 	bl	d8952 <_ZN5spark10JSONWriter9endObjectEv>
    this->stream()->write((const uint8_t*)"\r\n", 2);
   d99f8:	6a28      	ldr	r0, [r5, #32]
   d99fa:	490f      	ldr	r1, [pc, #60]	; (d9a38 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   d99fc:	6803      	ldr	r3, [r0, #0]
   d99fe:	2202      	movs	r2, #2
   d9a00:	68db      	ldr	r3, [r3, #12]
   d9a02:	4798      	blx	r3
}
   d9a04:	b005      	add	sp, #20
   d9a06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d9a0a:	bf00      	nop
   d9a0c:	2003e668 	.word	0x2003e668
   d9a10:	000dc910 	.word	0x000dc910
   d9a14:	000dc8a0 	.word	0x000dc8a0
   d9a18:	000dbf97 	.word	0x000dbf97
   d9a1c:	000dc44c 	.word	0x000dc44c
   d9a20:	000dc8f1 	.word	0x000dc8f1
   d9a24:	000dc8f3 	.word	0x000dc8f3
   d9a28:	000dc8f6 	.word	0x000dc8f6
   d9a2c:	000dc5a1 	.word	0x000dc5a1
   d9a30:	000dc8f9 	.word	0x000dc8f9
   d9a34:	000dc8fe 	.word	0x000dc8fe
   d9a38:	000dc8ee 	.word	0x000dc8ee

000d9a3c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d9a3c:	2300      	movs	r3, #0
   d9a3e:	6840      	ldr	r0, [r0, #4]
   d9a40:	461a      	mov	r2, r3
   d9a42:	f7fe b83b 	b.w	d7abc <network_connect>

000d9a46 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d9a46:	6840      	ldr	r0, [r0, #4]
   d9a48:	2200      	movs	r2, #0
   d9a4a:	2102      	movs	r1, #2
   d9a4c:	f7fe b846 	b.w	d7adc <network_disconnect>

000d9a50 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d9a50:	2200      	movs	r2, #0
   d9a52:	6840      	ldr	r0, [r0, #4]
   d9a54:	4611      	mov	r1, r2
   d9a56:	f7fe b839 	b.w	d7acc <network_connecting>

000d9a5a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d9a5a:	2200      	movs	r2, #0
   d9a5c:	6840      	ldr	r0, [r0, #4]
   d9a5e:	4611      	mov	r1, r2
   d9a60:	f7fe b844 	b.w	d7aec <network_ready>

000d9a64 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d9a64:	2300      	movs	r3, #0
   d9a66:	6840      	ldr	r0, [r0, #4]
   d9a68:	461a      	mov	r2, r3
   d9a6a:	4619      	mov	r1, r3
   d9a6c:	f7fe b846 	b.w	d7afc <network_on>

000d9a70 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d9a70:	2300      	movs	r3, #0
   d9a72:	6840      	ldr	r0, [r0, #4]
   d9a74:	461a      	mov	r2, r3
   d9a76:	4619      	mov	r1, r3
   d9a78:	f7fe b848 	b.w	d7b0c <network_off>

000d9a7c <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   d9a7c:	6840      	ldr	r0, [r0, #4]
   d9a7e:	2100      	movs	r1, #0
   d9a80:	f7fe b86c 	b.w	d7b5c <network_is_on>

000d9a84 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   d9a84:	6840      	ldr	r0, [r0, #4]
   d9a86:	2100      	movs	r1, #0
   d9a88:	f7fe b870 	b.w	d7b6c <network_is_off>

000d9a8c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d9a8c:	6840      	ldr	r0, [r0, #4]
   d9a8e:	2200      	movs	r2, #0
   d9a90:	f081 0101 	eor.w	r1, r1, #1
   d9a94:	f7fe b842 	b.w	d7b1c <network_listen>

000d9a98 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d9a98:	6840      	ldr	r0, [r0, #4]
   d9a9a:	2200      	movs	r2, #0
   d9a9c:	f7fe b84e 	b.w	d7b3c <network_set_listen_timeout>

000d9aa0 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d9aa0:	2200      	movs	r2, #0
   d9aa2:	6840      	ldr	r0, [r0, #4]
   d9aa4:	4611      	mov	r1, r2
   d9aa6:	f7fe b851 	b.w	d7b4c <network_get_listen_timeout>

000d9aaa <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d9aaa:	2200      	movs	r2, #0
   d9aac:	6840      	ldr	r0, [r0, #4]
   d9aae:	4611      	mov	r1, r2
   d9ab0:	f7fe b83c 	b.w	d7b2c <network_listening>

000d9ab4 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d9ab4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d9ab8:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d9aba:	b095      	sub	sp, #84	; 0x54
   d9abc:	4616      	mov	r6, r2
   d9abe:	460d      	mov	r5, r1
   d9ac0:	4607      	mov	r7, r0
    IPAddress addr;
   d9ac2:	f7fe fde7 	bl	d8694 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d9ac6:	4621      	mov	r1, r4
   d9ac8:	2218      	movs	r2, #24
   d9aca:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d9acc:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d9ace:	f002 f857 	bl	dbb80 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d9ad2:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d9ad4:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d9ad8:	4621      	mov	r1, r4
   d9ada:	466b      	mov	r3, sp
   d9adc:	aa0c      	add	r2, sp, #48	; 0x30
   d9ade:	4630      	mov	r0, r6
   d9ae0:	f7fd fe2a 	bl	d7738 <netdb_getaddrinfo>
    if (!r) {
   d9ae4:	4604      	mov	r4, r0
   d9ae6:	2800      	cmp	r0, #0
   d9ae8:	d146      	bne.n	d9b78 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d9aea:	4602      	mov	r2, r0
   d9aec:	2101      	movs	r1, #1
   d9aee:	6868      	ldr	r0, [r5, #4]
   d9af0:	f7fd fffc 	bl	d7aec <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d9af4:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d9af6:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d9af8:	4622      	mov	r2, r4
   d9afa:	6868      	ldr	r0, [r5, #4]
   d9afc:	f7fd fff6 	bl	d7aec <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d9b00:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d9b02:	4681      	mov	r9, r0
        bool ok = false;
   d9b04:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d9b06:	2e00      	cmp	r6, #0
   d9b08:	d036      	beq.n	d9b78 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
   d9b0a:	2900      	cmp	r1, #0
   d9b0c:	d134      	bne.n	d9b78 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d9b0e:	6873      	ldr	r3, [r6, #4]
   d9b10:	2b02      	cmp	r3, #2
   d9b12:	d003      	beq.n	d9b1c <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d9b14:	2b0a      	cmp	r3, #10
   d9b16:	d00b      	beq.n	d9b30 <_ZN5spark12NetworkClass7resolveEPKc+0x7c>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d9b18:	69f6      	ldr	r6, [r6, #28]
   d9b1a:	e7f4      	b.n	d9b06 <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d9b1c:	f1b8 0f00 	cmp.w	r8, #0
   d9b20:	d004      	beq.n	d9b2c <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d9b22:	6971      	ldr	r1, [r6, #20]
   d9b24:	4638      	mov	r0, r7
   d9b26:	3104      	adds	r1, #4
   d9b28:	f7fe fde1 	bl	d86ee <_ZN9IPAddressaSEPKh>
                    ok = true;
                    break;
   d9b2c:	4641      	mov	r1, r8
   d9b2e:	e7f3      	b.n	d9b18 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                }
                case AF_INET6: {
                    if (!ipv6) {
   d9b30:	f1b9 0f00 	cmp.w	r9, #0
   d9b34:	d101      	bne.n	d9b3a <_ZN5spark12NetworkClass7resolveEPKc+0x86>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d9b36:	4649      	mov	r1, r9
   d9b38:	e7ee      	b.n	d9b18 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d9b3a:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d9b3c:	2210      	movs	r2, #16
   d9b3e:	a801      	add	r0, sp, #4
   d9b40:	f002 f81e 	bl	dbb80 <memset>
                    a.v = 6;
   d9b44:	2306      	movs	r3, #6
   d9b46:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d9b4a:	ad01      	add	r5, sp, #4
   d9b4c:	f104 0308 	add.w	r3, r4, #8
   d9b50:	3418      	adds	r4, #24
   d9b52:	6818      	ldr	r0, [r3, #0]
   d9b54:	6859      	ldr	r1, [r3, #4]
   d9b56:	462a      	mov	r2, r5
   d9b58:	c203      	stmia	r2!, {r0, r1}
   d9b5a:	3308      	adds	r3, #8
   d9b5c:	42a3      	cmp	r3, r4
   d9b5e:	4615      	mov	r5, r2
   d9b60:	d1f7      	bne.n	d9b52 <_ZN5spark12NetworkClass7resolveEPKc+0x9e>
                    addr = IPAddress(a);
   d9b62:	a901      	add	r1, sp, #4
   d9b64:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d9b66:	ad07      	add	r5, sp, #28
   d9b68:	f7fe fda2 	bl	d86b0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d9b6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d9b6e:	1d3c      	adds	r4, r7, #4
   d9b70:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d9b72:	682b      	ldr	r3, [r5, #0]
   d9b74:	7023      	strb	r3, [r4, #0]
   d9b76:	e7de      	b.n	d9b36 <_ZN5spark12NetworkClass7resolveEPKc+0x82>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d9b78:	9800      	ldr	r0, [sp, #0]
   d9b7a:	f7fd fdd5 	bl	d7728 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d9b7e:	4638      	mov	r0, r7
   d9b80:	b015      	add	sp, #84	; 0x54
   d9b82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d9b88 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d9b88:	4b02      	ldr	r3, [pc, #8]	; (d9b94 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d9b8a:	4a03      	ldr	r2, [pc, #12]	; (d9b98 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d9b8c:	601a      	str	r2, [r3, #0]
   d9b8e:	2200      	movs	r2, #0
   d9b90:	605a      	str	r2, [r3, #4]

} // spark
   d9b92:	4770      	bx	lr
   d9b94:	2003e668 	.word	0x2003e668
   d9b98:	000dc988 	.word	0x000dc988

000d9b9c <_ZN4PMIC4lockEv.constprop.0>:
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
   d9b9c:	b508      	push	{r3, lr}
            return &Wire1;
   d9b9e:	f000 ff67 	bl	daa70 <_Z20__fetch_global_Wire1v>
    return pmicWireInstance()->lock();
}
   d9ba2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return pmicWireInstance()->lock();
   d9ba6:	f7fe bcfd 	b.w	d85a4 <_ZN7TwoWire4lockEv>

000d9baa <_ZN4PMICC1Eb>:
PMIC::PMIC(bool _lock) :
   d9baa:	b510      	push	{r4, lr}
   d9bac:	4604      	mov	r4, r0
    lock_(_lock)
   d9bae:	7001      	strb	r1, [r0, #0]
    if (lock_) {
   d9bb0:	b109      	cbz	r1, d9bb6 <_ZN4PMICC1Eb+0xc>
        lock();
   d9bb2:	f7ff fff3 	bl	d9b9c <_ZN4PMIC4lockEv.constprop.0>
}
   d9bb6:	4620      	mov	r0, r4
   d9bb8:	bd10      	pop	{r4, pc}

000d9bba <_ZN4PMIC5beginEv>:
{
   d9bba:	b508      	push	{r3, lr}
            return &Wire1;
   d9bbc:	f000 ff58 	bl	daa70 <_Z20__fetch_global_Wire1v>
    if (!pmicWireInstance()->isEnabled()) {
   d9bc0:	f7fe fcec 	bl	d859c <_ZN7TwoWire9isEnabledEv>
   d9bc4:	b918      	cbnz	r0, d9bce <_ZN4PMIC5beginEv+0x14>
            return &Wire1;
   d9bc6:	f000 ff53 	bl	daa70 <_Z20__fetch_global_Wire1v>
        pmicWireInstance()->begin();
   d9bca:	f7fe fc8f 	bl	d84ec <_ZN7TwoWire5beginEv>
            return &Wire1;
   d9bce:	f000 ff4f 	bl	daa70 <_Z20__fetch_global_Wire1v>
}
   d9bd2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return pmicWireInstance()->isEnabled();
   d9bd6:	f7fe bce1 	b.w	d859c <_ZN7TwoWire9isEnabledEv>

000d9bda <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d9bda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d9bdc:	4606      	mov	r6, r0
   d9bde:	460d      	mov	r5, r1
  size_t n = 0;
   d9be0:	188f      	adds	r7, r1, r2
   d9be2:	2400      	movs	r4, #0
  while (size--) {
   d9be4:	42bd      	cmp	r5, r7
   d9be6:	d00c      	beq.n	d9c02 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d9be8:	6833      	ldr	r3, [r6, #0]
   d9bea:	f815 1b01 	ldrb.w	r1, [r5], #1
   d9bee:	689b      	ldr	r3, [r3, #8]
   d9bf0:	4630      	mov	r0, r6
   d9bf2:	4798      	blx	r3
     if (chunk>=0)
   d9bf4:	1e03      	subs	r3, r0, #0
   d9bf6:	db01      	blt.n	d9bfc <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d9bf8:	441c      	add	r4, r3
  while (size--) {
   d9bfa:	e7f3      	b.n	d9be4 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d9bfc:	2c00      	cmp	r4, #0
   d9bfe:	bf08      	it	eq
   d9c00:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d9c02:	4620      	mov	r0, r4
   d9c04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d9c06 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   d9c06:	b513      	push	{r0, r1, r4, lr}
   d9c08:	4604      	mov	r4, r0
    }
   d9c0a:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d9c0c:	b159      	cbz	r1, d9c26 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d9c0e:	9101      	str	r1, [sp, #4]
   d9c10:	f002 f829 	bl	dbc66 <strlen>
   d9c14:	6823      	ldr	r3, [r4, #0]
   d9c16:	9901      	ldr	r1, [sp, #4]
   d9c18:	68db      	ldr	r3, [r3, #12]
   d9c1a:	4602      	mov	r2, r0
   d9c1c:	4620      	mov	r0, r4
    }
   d9c1e:	b002      	add	sp, #8
   d9c20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d9c24:	4718      	bx	r3
    }
   d9c26:	b002      	add	sp, #8
   d9c28:	bd10      	pop	{r4, pc}

000d9c2a <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   d9c2a:	b508      	push	{r3, lr}
  return write(str);
   d9c2c:	f7ff ffeb 	bl	d9c06 <_ZN5Print5writeEPKc>
}
   d9c30:	bd08      	pop	{r3, pc}

000d9c32 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   d9c32:	6803      	ldr	r3, [r0, #0]
   d9c34:	689b      	ldr	r3, [r3, #8]
   d9c36:	4718      	bx	r3

000d9c38 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d9c38:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d9c3a:	210d      	movs	r1, #13
{
   d9c3c:	4605      	mov	r5, r0
  size_t n = print('\r');
   d9c3e:	f7ff fff8 	bl	d9c32 <_ZN5Print5printEc>
  n += print('\n');
   d9c42:	210a      	movs	r1, #10
  size_t n = print('\r');
   d9c44:	4604      	mov	r4, r0
  n += print('\n');
   d9c46:	4628      	mov	r0, r5
   d9c48:	f7ff fff3 	bl	d9c32 <_ZN5Print5printEc>
  return n;
}
   d9c4c:	4420      	add	r0, r4
   d9c4e:	bd38      	pop	{r3, r4, r5, pc}

000d9c50 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d9c50:	b530      	push	{r4, r5, lr}
   d9c52:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d9c54:	2300      	movs	r3, #0
   d9c56:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d9c5a:	2a01      	cmp	r2, #1
   d9c5c:	bf98      	it	ls
   d9c5e:	220a      	movls	r2, #10
   d9c60:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d9c62:	460d      	mov	r5, r1
   d9c64:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d9c68:	fb01 5312 	mls	r3, r1, r2, r5
   d9c6c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d9c70:	2b09      	cmp	r3, #9
   d9c72:	bf94      	ite	ls
   d9c74:	3330      	addls	r3, #48	; 0x30
   d9c76:	3337      	addhi	r3, #55	; 0x37
   d9c78:	b2db      	uxtb	r3, r3
  } while(n);
   d9c7a:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d9c7c:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d9c80:	d9ef      	bls.n	d9c62 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d9c82:	4621      	mov	r1, r4
   d9c84:	f7ff ffbf 	bl	d9c06 <_ZN5Print5writeEPKc>
}
   d9c88:	b00b      	add	sp, #44	; 0x2c
   d9c8a:	bd30      	pop	{r4, r5, pc}

000d9c8c <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   d9c8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d9c90:	b086      	sub	sp, #24
   d9c92:	af00      	add	r7, sp, #0
   d9c94:	4605      	mov	r5, r0
   d9c96:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   d9c98:	1d38      	adds	r0, r7, #4
   d9c9a:	2114      	movs	r1, #20
{
   d9c9c:	4614      	mov	r4, r2
    va_copy(args2, args);
   d9c9e:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   d9ca0:	f7fd ff94 	bl	d7bcc <vsnprintf>

    if (n<bufsize)
   d9ca4:	2813      	cmp	r0, #19
   d9ca6:	d80e      	bhi.n	d9cc6 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   d9ca8:	1d39      	adds	r1, r7, #4
   d9caa:	4628      	mov	r0, r5
   d9cac:	f7ff ffab 	bl	d9c06 <_ZN5Print5writeEPKc>
   d9cb0:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   d9cb2:	b11e      	cbz	r6, d9cbc <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   d9cb4:	4628      	mov	r0, r5
   d9cb6:	f7ff ffbf 	bl	d9c38 <_ZN5Print7printlnEv>
   d9cba:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   d9cbc:	4620      	mov	r0, r4
   d9cbe:	3718      	adds	r7, #24
   d9cc0:	46bd      	mov	sp, r7
   d9cc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   d9cc6:	f100 0308 	add.w	r3, r0, #8
   d9cca:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   d9cce:	46e8      	mov	r8, sp
        char bigger[n+1];
   d9cd0:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   d9cd4:	4622      	mov	r2, r4
   d9cd6:	1c41      	adds	r1, r0, #1
   d9cd8:	683b      	ldr	r3, [r7, #0]
   d9cda:	4668      	mov	r0, sp
   d9cdc:	f7fd ff76 	bl	d7bcc <vsnprintf>
  return write(str);
   d9ce0:	4669      	mov	r1, sp
   d9ce2:	4628      	mov	r0, r5
   d9ce4:	f7ff ff8f 	bl	d9c06 <_ZN5Print5writeEPKc>
   d9ce8:	4604      	mov	r4, r0
   d9cea:	46c5      	mov	sp, r8
   d9cec:	e7e1      	b.n	d9cb2 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>
	...

000d9cf0 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d9cf0:	4b01      	ldr	r3, [pc, #4]	; (d9cf8 <_GLOBAL__sub_I_RGB+0x8>)
   d9cf2:	2200      	movs	r2, #0
   d9cf4:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   d9cf6:	4770      	bx	lr
   d9cf8:	2003e670 	.word	0x2003e670

000d9cfc <_ZN8SPIClass4lockEv.isra.0>:
  }

  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return hal_spi_acquire(_spi, nullptr);
   d9cfc:	2100      	movs	r1, #0
   d9cfe:	f7fd bd5b 	b.w	d77b8 <hal_spi_acquire>

000d9d02 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   d9d02:	2100      	movs	r1, #0
   d9d04:	f7fd bd60 	b.w	d77c8 <hal_spi_release>

000d9d08 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d9d08:	b510      	push	{r4, lr}
   d9d0a:	4604      	mov	r4, r0
   d9d0c:	4608      	mov	r0, r1
{
    _spi = spi;
   d9d0e:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d9d10:	f7fd fd22 	bl	d7758 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d9d14:	2300      	movs	r3, #0
   d9d16:	6063      	str	r3, [r4, #4]
}
   d9d18:	4620      	mov	r0, r4
   d9d1a:	bd10      	pop	{r4, pc}

000d9d1c <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   d9d1c:	b510      	push	{r4, lr}
   d9d1e:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   d9d20:	7800      	ldrb	r0, [r0, #0]
   d9d22:	f7ff ffeb 	bl	d9cfc <_ZN8SPIClass4lockEv.isra.0>
   d9d26:	b948      	cbnz	r0, d9d3c <_ZN8SPIClass5beginEv+0x20>
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   d9d28:	7820      	ldrb	r0, [r4, #0]
   d9d2a:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d9d2e:	f7fd fd0b 	bl	d7748 <hal_spi_begin>
        unlock();
   d9d32:	7820      	ldrb	r0, [r4, #0]
    }
}
   d9d34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        unlock();
   d9d38:	f7ff bfe3 	b.w	d9d02 <_ZN8SPIClass6unlockEv.isra.0>
}
   d9d3c:	bd10      	pop	{r4, pc}

000d9d3e <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   d9d3e:	7800      	ldrb	r0, [r0, #0]
   d9d40:	f7ff bfdf 	b.w	d9d02 <_ZN8SPIClass6unlockEv.isra.0>

000d9d44 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d9d44:	0840      	lsrs	r0, r0, #1
{
   d9d46:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   d9d48:	6018      	str	r0, [r3, #0]
   d9d4a:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   d9d4c:	6818      	ldr	r0, [r3, #0]
   d9d4e:	4288      	cmp	r0, r1
   d9d50:	b2e5      	uxtb	r5, r4
   d9d52:	d906      	bls.n	d9d62 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d9d54:	3401      	adds	r4, #1
   d9d56:	2c08      	cmp	r4, #8
   d9d58:	d002      	beq.n	d9d60 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   d9d5a:	0840      	lsrs	r0, r0, #1
   d9d5c:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   d9d5e:	e7f5      	b.n	d9d4c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d9d60:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   d9d62:	4b02      	ldr	r3, [pc, #8]	; (d9d6c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d9d64:	5d5b      	ldrb	r3, [r3, r5]
   d9d66:	7013      	strb	r3, [r2, #0]
}
   d9d68:	bd30      	pop	{r4, r5, pc}
   d9d6a:	bf00      	nop
   d9d6c:	000dc9bc 	.word	0x000dc9bc

000d9d70 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   d9d70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d9d74:	4606      	mov	r6, r0
   d9d76:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   d9d78:	7800      	ldrb	r0, [r0, #0]
{
   d9d7a:	460c      	mov	r4, r1
    CHECK(lock());
   d9d7c:	f7ff ffbe 	bl	d9cfc <_ZN8SPIClass4lockEv.isra.0>
   d9d80:	2800      	cmp	r0, #0
   d9d82:	db1b      	blt.n	d9dbc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   d9d84:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   d9d86:	2214      	movs	r2, #20
   d9d88:	2100      	movs	r1, #0
   d9d8a:	a809      	add	r0, sp, #36	; 0x24
   d9d8c:	f001 fef8 	bl	dbb80 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d9d90:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   d9d92:	2200      	movs	r2, #0
   d9d94:	a909      	add	r1, sp, #36	; 0x24
   d9d96:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   d9d98:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   d9d9c:	f7fd fcec 	bl	d7778 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   d9da0:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   d9da4:	b113      	cbz	r3, d9dac <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   d9da6:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   d9daa:	b155      	cbz	r5, d9dc2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   d9dac:	2700      	movs	r7, #0
   d9dae:	46b9      	mov	r9, r7
   d9db0:	46b8      	mov	r8, r7
   d9db2:	2501      	movs	r5, #1
    if (default_ && other.default_)
   d9db4:	7923      	ldrb	r3, [r4, #4]
   d9db6:	b15d      	cbz	r5, d9dd0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   d9db8:	b1c3      	cbz	r3, d9dec <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   d9dba:	2000      	movs	r0, #0
}
   d9dbc:	b00f      	add	sp, #60	; 0x3c
   d9dbe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   d9dc2:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   d9dc6:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   d9dca:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   d9dce:	e7f1      	b.n	d9db4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   d9dd0:	2b00      	cmp	r3, #0
   d9dd2:	d135      	bne.n	d9e40 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   d9dd4:	68a3      	ldr	r3, [r4, #8]
   d9dd6:	4543      	cmp	r3, r8
   d9dd8:	d108      	bne.n	d9dec <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   d9dda:	f88d 9020 	strb.w	r9, [sp, #32]
   d9dde:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   d9de2:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d9de6:	89a3      	ldrh	r3, [r4, #12]
   d9de8:	429a      	cmp	r2, r3
   d9dea:	d0e6      	beq.n	d9dba <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   d9dec:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   d9dee:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   d9df0:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   d9df4:	980a      	ldr	r0, [sp, #40]	; 0x28
   d9df6:	ab04      	add	r3, sp, #16
   d9df8:	f10d 020f 	add.w	r2, sp, #15
   d9dfc:	f7ff ffa2 	bl	d9d44 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   d9e00:	7921      	ldrb	r1, [r4, #4]
   d9e02:	b985      	cbnz	r5, d9e26 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   d9e04:	b989      	cbnz	r1, d9e2a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   d9e06:	68a3      	ldr	r3, [r4, #8]
   d9e08:	4543      	cmp	r3, r8
   d9e0a:	d30e      	bcc.n	d9e2a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   d9e0c:	f88d 9020 	strb.w	r9, [sp, #32]
   d9e10:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   d9e14:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d9e18:	89a3      	ldrh	r3, [r4, #12]
   d9e1a:	429a      	cmp	r2, r3
   d9e1c:	d105      	bne.n	d9e2a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   d9e1e:	9b04      	ldr	r3, [sp, #16]
   d9e20:	4543      	cmp	r3, r8
   d9e22:	d102      	bne.n	d9e2a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   d9e24:	e7c9      	b.n	d9dba <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   d9e26:	2900      	cmp	r1, #0
   d9e28:	d1f9      	bne.n	d9e1e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   d9e2a:	2300      	movs	r3, #0
   d9e2c:	9301      	str	r3, [sp, #4]
   d9e2e:	7b63      	ldrb	r3, [r4, #13]
   d9e30:	9300      	str	r3, [sp, #0]
   d9e32:	f89d 200f 	ldrb.w	r2, [sp, #15]
   d9e36:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   d9e38:	7830      	ldrb	r0, [r6, #0]
   d9e3a:	f7fd fcb5 	bl	d77a8 <hal_spi_set_settings>
   d9e3e:	e7bc      	b.n	d9dba <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   d9e40:	e9cd 5500 	strd	r5, r5, [sp]
   d9e44:	462b      	mov	r3, r5
   d9e46:	462a      	mov	r2, r5
   d9e48:	2101      	movs	r1, #1
   d9e4a:	e7f5      	b.n	d9e38 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000d9e4c <_ZN8SPIClass8transferEPvS0_jPFvvE>:
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
}

void SPIClass::transfer(void* tx_buffer, void* rx_buffer, size_t length,
                        wiring_spi_dma_transfercomplete_callback_t user_callback)
{
   d9e4c:	b530      	push	{r4, r5, lr}
   d9e4e:	b087      	sub	sp, #28
   d9e50:	4604      	mov	r4, r0
   d9e52:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    hal_spi_transfer_dma(_spi, tx_buffer, rx_buffer, length, user_callback);
   d9e54:	9500      	str	r5, [sp, #0]
   d9e56:	7800      	ldrb	r0, [r0, #0]
   d9e58:	f7fd fc96 	bl	d7788 <hal_spi_transfer_dma>
    if (user_callback == NULL)
   d9e5c:	b93d      	cbnz	r5, d9e6e <_ZN8SPIClass8transferEPvS0_jPFvvE+0x22>
    {
        hal_spi_transfer_status_t st;
        do
        {
            hal_spi_transfer_dma_status(_spi, &st);
   d9e5e:	7820      	ldrb	r0, [r4, #0]
   d9e60:	a902      	add	r1, sp, #8
   d9e62:	f7fd fc99 	bl	d7798 <hal_spi_transfer_dma_status>
        } while (st.transfer_ongoing);
   d9e66:	f89d 3014 	ldrb.w	r3, [sp, #20]
   d9e6a:	07db      	lsls	r3, r3, #31
   d9e6c:	d4f7      	bmi.n	d9e5e <_ZN8SPIClass8transferEPvS0_jPFvvE+0x12>
    }
}
   d9e6e:	b007      	add	sp, #28
   d9e70:	bd30      	pop	{r4, r5, pc}

000d9e72 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d9e72:	b510      	push	{r4, lr}
   d9e74:	4604      	mov	r4, r0
{
	free(buffer);
   d9e76:	6800      	ldr	r0, [r0, #0]
   d9e78:	f7fd fe88 	bl	d7b8c <free>
}
   d9e7c:	4620      	mov	r0, r4
   d9e7e:	bd10      	pop	{r4, pc}

000d9e80 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d9e80:	b510      	push	{r4, lr}
   d9e82:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d9e84:	6800      	ldr	r0, [r0, #0]
   d9e86:	b108      	cbz	r0, d9e8c <_ZN6String10invalidateEv+0xc>
   d9e88:	f7fd fe80 	bl	d7b8c <free>
	buffer = NULL;
   d9e8c:	2300      	movs	r3, #0
	capacity = len = 0;
   d9e8e:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   d9e92:	6023      	str	r3, [r4, #0]
}
   d9e94:	bd10      	pop	{r4, pc}

000d9e96 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d9e96:	b538      	push	{r3, r4, r5, lr}
   d9e98:	4604      	mov	r4, r0
   d9e9a:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d9e9c:	6800      	ldr	r0, [r0, #0]
   d9e9e:	3101      	adds	r1, #1
   d9ea0:	f7fd fe7c 	bl	d7b9c <realloc>
	if (newbuffer) {
   d9ea4:	b110      	cbz	r0, d9eac <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d9ea6:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   d9eaa:	2001      	movs	r0, #1
	}
	return 0;
}
   d9eac:	bd38      	pop	{r3, r4, r5, pc}

000d9eae <_ZN6String7reserveEj>:
{
   d9eae:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d9eb0:	6803      	ldr	r3, [r0, #0]
{
   d9eb2:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d9eb4:	b123      	cbz	r3, d9ec0 <_ZN6String7reserveEj+0x12>
   d9eb6:	6843      	ldr	r3, [r0, #4]
   d9eb8:	428b      	cmp	r3, r1
   d9eba:	d301      	bcc.n	d9ec0 <_ZN6String7reserveEj+0x12>
   d9ebc:	2001      	movs	r0, #1
}
   d9ebe:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   d9ec0:	4620      	mov	r0, r4
   d9ec2:	f7ff ffe8 	bl	d9e96 <_ZN6String12changeBufferEj>
   d9ec6:	2800      	cmp	r0, #0
   d9ec8:	d0f9      	beq.n	d9ebe <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   d9eca:	68a3      	ldr	r3, [r4, #8]
   d9ecc:	2b00      	cmp	r3, #0
   d9ece:	d1f5      	bne.n	d9ebc <_ZN6String7reserveEj+0xe>
   d9ed0:	6822      	ldr	r2, [r4, #0]
   d9ed2:	7013      	strb	r3, [r2, #0]
   d9ed4:	e7f2      	b.n	d9ebc <_ZN6String7reserveEj+0xe>

000d9ed6 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d9ed6:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d9ed8:	460d      	mov	r5, r1
	if (!reserve(length)) {
   d9eda:	4611      	mov	r1, r2
   d9edc:	9201      	str	r2, [sp, #4]
{
   d9ede:	4604      	mov	r4, r0
	if (!reserve(length)) {
   d9ee0:	f7ff ffe5 	bl	d9eae <_ZN6String7reserveEj>
   d9ee4:	9a01      	ldr	r2, [sp, #4]
   d9ee6:	b928      	cbnz	r0, d9ef4 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   d9ee8:	4620      	mov	r0, r4
   d9eea:	f7ff ffc9 	bl	d9e80 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   d9eee:	4620      	mov	r0, r4
   d9ef0:	b003      	add	sp, #12
   d9ef2:	bd30      	pop	{r4, r5, pc}
	len = length;
   d9ef4:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   d9ef6:	4629      	mov	r1, r5
   d9ef8:	6820      	ldr	r0, [r4, #0]
   d9efa:	f001 fe19 	bl	dbb30 <memcpy>
	buffer[len] = 0;
   d9efe:	6822      	ldr	r2, [r4, #0]
   d9f00:	68a3      	ldr	r3, [r4, #8]
   d9f02:	2100      	movs	r1, #0
   d9f04:	54d1      	strb	r1, [r2, r3]
	return *this;
   d9f06:	e7f2      	b.n	d9eee <_ZN6String4copyEPKcj+0x18>

000d9f08 <_ZN6StringC1EPKc>:
	buffer = NULL;
   d9f08:	2300      	movs	r3, #0
String::String(const char *cstr)
   d9f0a:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   d9f0c:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const char *cstr)
   d9f10:	4604      	mov	r4, r0
	len = 0;
   d9f12:	6083      	str	r3, [r0, #8]
	flags = 0;
   d9f14:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   d9f16:	b141      	cbz	r1, d9f2a <_ZN6StringC1EPKc+0x22>
   d9f18:	4608      	mov	r0, r1
   d9f1a:	9101      	str	r1, [sp, #4]
   d9f1c:	f001 fea3 	bl	dbc66 <strlen>
   d9f20:	9901      	ldr	r1, [sp, #4]
   d9f22:	4602      	mov	r2, r0
   d9f24:	4620      	mov	r0, r4
   d9f26:	f7ff ffd6 	bl	d9ed6 <_ZN6String4copyEPKcj>
}
   d9f2a:	4620      	mov	r0, r4
   d9f2c:	b002      	add	sp, #8
   d9f2e:	bd10      	pop	{r4, pc}

000d9f30 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   d9f30:	b538      	push	{r3, r4, r5, lr}
   d9f32:	4605      	mov	r5, r0
	if (buffer) {
   d9f34:	6800      	ldr	r0, [r0, #0]
{
   d9f36:	460c      	mov	r4, r1
	if (buffer) {
   d9f38:	b168      	cbz	r0, d9f56 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   d9f3a:	686a      	ldr	r2, [r5, #4]
   d9f3c:	688b      	ldr	r3, [r1, #8]
   d9f3e:	429a      	cmp	r2, r3
   d9f40:	d307      	bcc.n	d9f52 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   d9f42:	6809      	ldr	r1, [r1, #0]
   d9f44:	f001 fe69 	bl	dbc1a <strcpy>
			len = rhs.len;
   d9f48:	68a3      	ldr	r3, [r4, #8]
   d9f4a:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   d9f4c:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   d9f4e:	60a3      	str	r3, [r4, #8]
}
   d9f50:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   d9f52:	f7fd fe1b 	bl	d7b8c <free>
	buffer = rhs.buffer;
   d9f56:	6823      	ldr	r3, [r4, #0]
   d9f58:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   d9f5a:	6863      	ldr	r3, [r4, #4]
   d9f5c:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   d9f5e:	68a3      	ldr	r3, [r4, #8]
   d9f60:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   d9f62:	2300      	movs	r3, #0
	rhs.capacity = 0;
   d9f64:	e9c4 3300 	strd	r3, r3, [r4]
   d9f68:	e7f1      	b.n	d9f4e <_ZN6String4moveERS_+0x1e>

000d9f6a <_ZN6StringC1EOS_>:
String::String(String &&rval)
   d9f6a:	b510      	push	{r4, lr}
	buffer = NULL;
   d9f6c:	2300      	movs	r3, #0
	capacity = 0;
   d9f6e:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   d9f72:	4604      	mov	r4, r0
	len = 0;
   d9f74:	6083      	str	r3, [r0, #8]
	flags = 0;
   d9f76:	7303      	strb	r3, [r0, #12]
	move(rval);
   d9f78:	f7ff ffda 	bl	d9f30 <_ZN6String4moveERS_>
}
   d9f7c:	4620      	mov	r0, r4
   d9f7e:	bd10      	pop	{r4, pc}

000d9f80 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d9f80:	4288      	cmp	r0, r1
{
   d9f82:	b510      	push	{r4, lr}
   d9f84:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d9f86:	d005      	beq.n	d9f94 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d9f88:	680b      	ldr	r3, [r1, #0]
   d9f8a:	b12b      	cbz	r3, d9f98 <_ZN6StringaSERKS_+0x18>
   d9f8c:	688a      	ldr	r2, [r1, #8]
   d9f8e:	4619      	mov	r1, r3
   d9f90:	f7ff ffa1 	bl	d9ed6 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d9f94:	4620      	mov	r0, r4
   d9f96:	bd10      	pop	{r4, pc}
	else invalidate();
   d9f98:	f7ff ff72 	bl	d9e80 <_ZN6String10invalidateEv>
   d9f9c:	e7fa      	b.n	d9f94 <_ZN6StringaSERKS_+0x14>

000d9f9e <_ZN6StringC1ERKS_>:
String::String(const String &value)
   d9f9e:	b510      	push	{r4, lr}
	buffer = NULL;
   d9fa0:	2300      	movs	r3, #0
String::String(const String &value)
   d9fa2:	4604      	mov	r4, r0
	capacity = 0;
   d9fa4:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   d9fa8:	6083      	str	r3, [r0, #8]
	flags = 0;
   d9faa:	7303      	strb	r3, [r0, #12]
	*this = value;
   d9fac:	f7ff ffe8 	bl	d9f80 <_ZN6StringaSERKS_>
}
   d9fb0:	4620      	mov	r0, r4
   d9fb2:	bd10      	pop	{r4, pc}

000d9fb4 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   d9fb4:	b570      	push	{r4, r5, r6, lr}
   d9fb6:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   d9fb8:	460e      	mov	r6, r1
   d9fba:	b909      	cbnz	r1, d9fc0 <_ZN6String6concatEPKcj+0xc>
   d9fbc:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   d9fbe:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   d9fc0:	b16a      	cbz	r2, d9fde <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   d9fc2:	6884      	ldr	r4, [r0, #8]
   d9fc4:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   d9fc6:	4621      	mov	r1, r4
   d9fc8:	f7ff ff71 	bl	d9eae <_ZN6String7reserveEj>
   d9fcc:	2800      	cmp	r0, #0
   d9fce:	d0f5      	beq.n	d9fbc <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   d9fd0:	6828      	ldr	r0, [r5, #0]
   d9fd2:	68ab      	ldr	r3, [r5, #8]
   d9fd4:	4631      	mov	r1, r6
   d9fd6:	4418      	add	r0, r3
   d9fd8:	f001 fe1f 	bl	dbc1a <strcpy>
	len = newlen;
   d9fdc:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   d9fde:	2001      	movs	r0, #1
   d9fe0:	e7ed      	b.n	d9fbe <_ZN6String6concatEPKcj+0xa>

000d9fe2 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   d9fe2:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   d9fe4:	688a      	ldr	r2, [r1, #8]
   d9fe6:	6809      	ldr	r1, [r1, #0]
{
   d9fe8:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   d9fea:	f7ff ffe3 	bl	d9fb4 <_ZN6String6concatEPKcj>
   d9fee:	b910      	cbnz	r0, d9ff6 <_ZplRK15StringSumHelperRK6String+0x14>
   d9ff0:	4620      	mov	r0, r4
   d9ff2:	f7ff ff45 	bl	d9e80 <_ZN6String10invalidateEv>
	return a;
}
   d9ff6:	4620      	mov	r0, r4
   d9ff8:	bd10      	pop	{r4, pc}

000d9ffa <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   d9ffa:	b513      	push	{r0, r1, r4, lr}
   d9ffc:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   d9ffe:	b929      	cbnz	r1, da00c <_ZplRK15StringSumHelperPKc+0x12>
   da000:	4620      	mov	r0, r4
   da002:	f7ff ff3d 	bl	d9e80 <_ZN6String10invalidateEv>
	return a;
}
   da006:	4620      	mov	r0, r4
   da008:	b002      	add	sp, #8
   da00a:	bd10      	pop	{r4, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   da00c:	4608      	mov	r0, r1
   da00e:	9101      	str	r1, [sp, #4]
   da010:	f001 fe29 	bl	dbc66 <strlen>
   da014:	9901      	ldr	r1, [sp, #4]
   da016:	4602      	mov	r2, r0
   da018:	4620      	mov	r0, r4
   da01a:	f7ff ffcb 	bl	d9fb4 <_ZN6String6concatEPKcj>
   da01e:	2800      	cmp	r0, #0
   da020:	d0ee      	beq.n	da000 <_ZplRK15StringSumHelperPKc+0x6>
   da022:	e7f0      	b.n	da006 <_ZplRK15StringSumHelperPKc+0xc>

000da024 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   da024:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   da026:	6882      	ldr	r2, [r0, #8]
   da028:	b93a      	cbnz	r2, da03a <_ZNK6String6equalsEPKc+0x16>
   da02a:	b121      	cbz	r1, da036 <_ZNK6String6equalsEPKc+0x12>
   da02c:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
   da02e:	fab0 f080 	clz	r0, r0
   da032:	0940      	lsrs	r0, r0, #5
   da034:	e000      	b.n	da038 <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
   da036:	2001      	movs	r0, #1
}
   da038:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   da03a:	6800      	ldr	r0, [r0, #0]
   da03c:	b909      	cbnz	r1, da042 <_ZNK6String6equalsEPKc+0x1e>
   da03e:	7800      	ldrb	r0, [r0, #0]
   da040:	e7f5      	b.n	da02e <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
   da042:	f001 fde0 	bl	dbc06 <strcmp>
   da046:	e7f2      	b.n	da02e <_ZNK6String6equalsEPKc+0xa>

000da048 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   da048:	b510      	push	{r4, lr}
   da04a:	4604      	mov	r4, r0
        if (wakeupSource_) {
   da04c:	6800      	ldr	r0, [r0, #0]
   da04e:	b118      	cbz	r0, da058 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
   da050:	f7fd fd9c 	bl	d7b8c <free>
            wakeupSource_ = nullptr;
   da054:	2300      	movs	r3, #0
   da056:	6023      	str	r3, [r4, #0]
        }
    }
   da058:	bd10      	pop	{r4, pc}

000da05a <_ZN17SystemSleepResultaSEOS_>:
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   da05a:	b538      	push	{r3, r4, r5, lr}
        error_ = result.error_;
   da05c:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
   da060:	8083      	strh	r3, [r0, #4]
        compatResult_ = result.compatResult_;
   da062:	460b      	mov	r3, r1
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   da064:	460d      	mov	r5, r1
        compatResult_ = result.compatResult_;
   da066:	f853 2f06 	ldr.w	r2, [r3, #6]!
   da06a:	f8c0 2006 	str.w	r2, [r0, #6]
   da06e:	889b      	ldrh	r3, [r3, #4]
   da070:	8143      	strh	r3, [r0, #10]
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   da072:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
   da074:	f7ff ffe8 	bl	da048 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
        if (result.wakeupSource_) {
   da078:	682b      	ldr	r3, [r5, #0]
   da07a:	b113      	cbz	r3, da082 <_ZN17SystemSleepResultaSEOS_+0x28>
            wakeupSource_ = result.wakeupSource_;
   da07c:	6023      	str	r3, [r4, #0]
            result.wakeupSource_ = nullptr;
   da07e:	2300      	movs	r3, #0
   da080:	602b      	str	r3, [r5, #0]
    }
   da082:	4620      	mov	r0, r4
   da084:	bd38      	pop	{r3, r4, r5, pc}
	...

000da088 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>:

    int copyWakeupSource(hal_wakeup_source_base_t* source) {
   da088:	b538      	push	{r3, r4, r5, lr}
   da08a:	460c      	mov	r4, r1
   da08c:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
   da08e:	f7ff ffdb 	bl	da048 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
        if (source) {
   da092:	b144      	cbz	r4, da0a6 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x1e>
            wakeupSource_ = (hal_wakeup_source_base_t*)malloc(source->size);
   da094:	8820      	ldrh	r0, [r4, #0]
   da096:	f7fd fd71 	bl	d7b7c <malloc>
   da09a:	6028      	str	r0, [r5, #0]
            if (wakeupSource_) {
   da09c:	b128      	cbz	r0, da0aa <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x22>
                memcpy(wakeupSource_, source, source->size);
   da09e:	8822      	ldrh	r2, [r4, #0]
   da0a0:	4621      	mov	r1, r4
   da0a2:	f001 fd45 	bl	dbb30 <memcpy>
            } else {
                return SYSTEM_ERROR_NO_MEMORY;
            }
        }
        return SYSTEM_ERROR_NONE;
   da0a6:	2000      	movs	r0, #0
    }
   da0a8:	bd38      	pop	{r3, r4, r5, pc}
                return SYSTEM_ERROR_NO_MEMORY;
   da0aa:	4801      	ldr	r0, [pc, #4]	; (da0b0 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x28>)
   da0ac:	e7fc      	b.n	da0a8 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x20>
   da0ae:	bf00      	nop
   da0b0:	fffffefc 	.word	0xfffffefc

000da0b4 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>:
void SystemClass::enterSafeMode(SystemResetFlags flags)
{
    system_reset(SYSTEM_RESET_MODE_SAFE, 0, 0, flags.value(), nullptr);
}

SystemSleepResult SystemClass::sleep(const particle::SystemSleepConfiguration& config) {
   da0b4:	b5f0      	push	{r4, r5, r6, r7, lr}
   da0b6:	4d2d      	ldr	r5, [pc, #180]	; (da16c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
    }

    // It doesn't guarantee the combination of sleep mode and
    // wakeup sources that the platform supports.
    bool valid() const {
        if (!valid_) {
   da0b8:	7d0b      	ldrb	r3, [r1, #20]
   da0ba:	4604      	mov	r4, r0
   da0bc:	b08b      	sub	sp, #44	; 0x2c
   da0be:	4608      	mov	r0, r1
   da0c0:	1daf      	adds	r7, r5, #6
   da0c2:	2b00      	cmp	r3, #0
   da0c4:	d038      	beq.n	da138 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x84>
        return static_cast<SystemSleepMode>(config_->mode);
   da0c6:	680b      	ldr	r3, [r1, #0]
            return valid_;
        }
        if (sleepMode() == SystemSleepMode::NONE) {
   da0c8:	791b      	ldrb	r3, [r3, #4]
   da0ca:	2b00      	cmp	r3, #0
   da0cc:	d034      	beq.n	da138 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x84>
              error_(SYSTEM_ERROR_NONE) {
   da0ce:	2200      	movs	r2, #0
    SleepResult() {}
   da0d0:	4b27      	ldr	r3, [pc, #156]	; (da170 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
   da0d2:	9304      	str	r3, [sp, #16]
    if (!config.valid()) {
        LOG(ERROR, "System sleep configuration is invalid.");
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
    } else {
        SystemSleepResult result;
        int ret = system_sleep_ext(config.halConfig(), result.halWakeupSource(), nullptr);
   da0d4:	a902      	add	r1, sp, #8
   da0d6:	3004      	adds	r0, #4
              error_(SYSTEM_ERROR_NONE) {
   da0d8:	9202      	str	r2, [sp, #8]
   da0da:	f8ad 200c 	strh.w	r2, [sp, #12]
    SleepResult() {}
   da0de:	f88d 200e 	strb.w	r2, [sp, #14]
   da0e2:	f7fd fc99 	bl	d7a18 <system_sleep_ext>
        compatResult_ = result.compatResult_;
   da0e6:	f8dd 300e 	ldr.w	r3, [sp, #14]
   da0ea:	f8c5 3006 	str.w	r3, [r5, #6]
        result.setError(static_cast<system_error_t>(ret));
   da0ee:	b200      	sxth	r0, r0
   da0f0:	f8bd 3012 	ldrh.w	r3, [sp, #18]
        error_ = error;
   da0f4:	f8ad 000c 	strh.w	r0, [sp, #12]
        error_ = result.error_;
   da0f8:	80a8      	strh	r0, [r5, #4]
        copyWakeupSource(result.wakeupSource_);
   da0fa:	9902      	ldr	r1, [sp, #8]
        compatResult_ = result.compatResult_;
   da0fc:	80bb      	strh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   da0fe:	4628      	mov	r0, r5
   da100:	f7ff ffc2 	bl	da088 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>
        freeWakeupSourceMemory();
   da104:	a802      	add	r0, sp, #8
   da106:	f7ff ff9f 	bl	da048 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
              error_(SYSTEM_ERROR_NONE) {
   da10a:	2300      	movs	r3, #0
   da10c:	6023      	str	r3, [r4, #0]
   da10e:	80a3      	strh	r3, [r4, #4]
    SleepResult() {}
   da110:	71a3      	strb	r3, [r4, #6]
   da112:	8123      	strh	r3, [r4, #8]
   da114:	f64f 73ff 	movw	r3, #65535	; 0xffff
   da118:	8163      	strh	r3, [r4, #10]
        error_ = result.error_;
   da11a:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
   da11e:	80a3      	strh	r3, [r4, #4]
        compatResult_ = result.compatResult_;
   da120:	683b      	ldr	r3, [r7, #0]
   da122:	f8c4 3006 	str.w	r3, [r4, #6]
   da126:	88bb      	ldrh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   da128:	6829      	ldr	r1, [r5, #0]
        compatResult_ = result.compatResult_;
   da12a:	8163      	strh	r3, [r4, #10]
        copyWakeupSource(result.wakeupSource_);
   da12c:	4620      	mov	r0, r4
   da12e:	f7ff ffab 	bl	da088 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>
        System.systemSleepResult_ = result;
    }
    return System.systemSleepResult_;
}
   da132:	4620      	mov	r0, r4
   da134:	b00b      	add	sp, #44	; 0x2c
   da136:	bdf0      	pop	{r4, r5, r6, r7, pc}
        LOG(ERROR, "System sleep configuration is invalid.");
   da138:	2600      	movs	r6, #0
   da13a:	2320      	movs	r3, #32
   da13c:	e9cd 3602 	strd	r3, r6, [sp, #8]
   da140:	4b0c      	ldr	r3, [pc, #48]	; (da174 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xc0>)
   da142:	9300      	str	r3, [sp, #0]
   da144:	490c      	ldr	r1, [pc, #48]	; (da178 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xc4>)
   da146:	4633      	mov	r3, r6
   da148:	aa02      	add	r2, sp, #8
   da14a:	2032      	movs	r0, #50	; 0x32
   da14c:	f7fd fbdc 	bl	d7908 <log_message>
    SleepResult() {}
   da150:	4b07      	ldr	r3, [pc, #28]	; (da170 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
   da152:	9304      	str	r3, [sp, #16]
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
   da154:	a902      	add	r1, sp, #8
        error_ = error;
   da156:	f64f 63f2 	movw	r3, #65266	; 0xfef2
   da15a:	4804      	ldr	r0, [pc, #16]	; (da16c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
              error_(SYSTEM_ERROR_NONE) {
   da15c:	9602      	str	r6, [sp, #8]
    SleepResult() {}
   da15e:	f88d 600e 	strb.w	r6, [sp, #14]
        error_ = error;
   da162:	f8ad 300c 	strh.w	r3, [sp, #12]
   da166:	f7ff ff78 	bl	da05a <_ZN17SystemSleepResultaSEOS_>
   da16a:	e7cb      	b.n	da104 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x50>
   da16c:	2003e680 	.word	0x2003e680
   da170:	ffff0000 	.word	0xffff0000
   da174:	000dc9cb 	.word	0x000dc9cb
   da178:	000dc9c4 	.word	0x000dc9c4

000da17c <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   da17c:	4b05      	ldr	r3, [pc, #20]	; (da194 <_GLOBAL__sub_I_System+0x18>)
   da17e:	2202      	movs	r2, #2
   da180:	601a      	str	r2, [r3, #0]
              error_(SYSTEM_ERROR_NONE) {
   da182:	4b05      	ldr	r3, [pc, #20]	; (da198 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   da184:	4a05      	ldr	r2, [pc, #20]	; (da19c <_GLOBAL__sub_I_System+0x20>)
   da186:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   da188:	2000      	movs	r0, #0
   da18a:	6018      	str	r0, [r3, #0]
   da18c:	8098      	strh	r0, [r3, #4]
    SleepResult() {}
   da18e:	7198      	strb	r0, [r3, #6]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   da190:	f7fd bbec 	b.w	d796c <set_system_mode>
   da194:	2003e68c 	.word	0x2003e68c
   da198:	2003e680 	.word	0x2003e680
   da19c:	ffff0000 	.word	0xffff0000

000da1a0 <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   da1a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
   da1a4:	4a15      	ldr	r2, [pc, #84]	; (da1fc <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   da1a6:	f8df 8060 	ldr.w	r8, [pc, #96]	; da208 <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
   da1aa:	e9d2 3200 	ldrd	r3, r2, [r2]
   da1ae:	18c0      	adds	r0, r0, r3
   da1b0:	eb42 0101 	adc.w	r1, r2, r1
    unix_time += dst_current_cache;
   da1b4:	4a12      	ldr	r2, [pc, #72]	; (da200 <_ZL22Refresh_UnixTime_Cachex+0x60>)
   da1b6:	e9d2 3200 	ldrd	r3, r2, [r2]
   da1ba:	18c6      	adds	r6, r0, r3
   da1bc:	eb41 0702 	adc.w	r7, r1, r2
    if(unix_time != unix_time_cache)
   da1c0:	e9d8 2300 	ldrd	r2, r3, [r8]
   da1c4:	42bb      	cmp	r3, r7
   da1c6:	bf08      	it	eq
   da1c8:	42b2      	cmpeq	r2, r6
{
   da1ca:	b08c      	sub	sp, #48	; 0x30
    if(unix_time != unix_time_cache)
   da1cc:	d013      	beq.n	da1f6 <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
   da1ce:	a903      	add	r1, sp, #12
   da1d0:	4668      	mov	r0, sp
   da1d2:	e9cd 6700 	strd	r6, r7, [sp]
   da1d6:	f7fd fd29 	bl	d7c2c <localtime_r>
	calendar_time.tm_year += 1900;
   da1da:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   da1dc:	4d09      	ldr	r5, [pc, #36]	; (da204 <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
   da1de:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   da1e2:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
   da1e4:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   da1e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   da1e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   da1ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   da1ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   da1ee:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   da1f2:	6823      	ldr	r3, [r4, #0]
   da1f4:	602b      	str	r3, [r5, #0]
    }
}
   da1f6:	b00c      	add	sp, #48	; 0x30
   da1f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   da1fc:	2003e6c8 	.word	0x2003e6c8
   da200:	2003e6c0 	.word	0x2003e6c0
   da204:	2003e698 	.word	0x2003e698
   da208:	2003e6d0 	.word	0x2003e6d0

000da20c <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
   da20c:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
   da20e:	2000      	movs	r0, #0
   da210:	f7fd fc3c 	bl	d7a8c <spark_sync_time_pending>
   da214:	b128      	cbz	r0, da222 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   da216:	f7fd fc29 	bl	d7a6c <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   da21a:	f080 0001 	eor.w	r0, r0, #1
   da21e:	b2c0      	uxtb	r0, r0
    }
   da220:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   da222:	2001      	movs	r0, #1
   da224:	e7fc      	b.n	da220 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

000da228 <_ZN9TimeClass4zoneEf>:
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
	if(GMT_Offset < -12 || GMT_Offset > 14)
   da228:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
   da22c:	eeb4 0ae7 	vcmpe.f32	s0, s15
   da230:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
   da234:	b508      	push	{r3, lr}
	if(GMT_Offset < -12 || GMT_Offset > 14)
   da236:	d411      	bmi.n	da25c <_ZN9TimeClass4zoneEf+0x34>
   da238:	eef2 7a0c 	vmov.f32	s15, #44	; 0x41600000  14.0
   da23c:	eeb4 0ae7 	vcmpe.f32	s0, s15
   da240:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   da244:	dc0a      	bgt.n	da25c <_ZN9TimeClass4zoneEf+0x34>
	{
		return;
	}
	time_zone_cache = GMT_Offset * 3600;
   da246:	eddf 7a06 	vldr	s15, [pc, #24]	; da260 <_ZN9TimeClass4zoneEf+0x38>
   da24a:	ee60 7a27 	vmul.f32	s15, s0, s15
   da24e:	ee17 0a90 	vmov	r0, s15
   da252:	f001 fbfb 	bl	dba4c <__aeabi_f2lz>
   da256:	4b03      	ldr	r3, [pc, #12]	; (da264 <_ZN9TimeClass4zoneEf+0x3c>)
   da258:	e9c3 0100 	strd	r0, r1, [r3]
}
   da25c:	bd08      	pop	{r3, pc}
   da25e:	bf00      	nop
   da260:	45610000 	.word	0x45610000
   da264:	2003e6c8 	.word	0x2003e6c8

000da268 <_ZN9TimeClass12getDSTOffsetEv>:
{
	return time_zone_cache / 3600.0;
}

float TimeClass::getDSTOffset()
{
   da268:	b508      	push	{r3, lr}
    return dst_cache / 3600.0;
   da26a:	4b09      	ldr	r3, [pc, #36]	; (da290 <_ZN9TimeClass12getDSTOffsetEv+0x28>)
   da26c:	e9d3 0100 	ldrd	r0, r1, [r3]
   da270:	f001 f89e 	bl	db3b0 <__aeabi_l2d>
   da274:	a304      	add	r3, pc, #16	; (adr r3, da288 <_ZN9TimeClass12getDSTOffsetEv+0x20>)
   da276:	e9d3 2300 	ldrd	r2, r3, [r3]
   da27a:	f001 f9f1 	bl	db660 <__aeabi_ddiv>
   da27e:	f001 fb95 	bl	db9ac <__aeabi_d2f>
}
   da282:	ee00 0a10 	vmov	s0, r0
   da286:	bd08      	pop	{r3, pc}
   da288:	00000000 	.word	0x00000000
   da28c:	40ac2000 	.word	0x40ac2000
   da290:	2003e298 	.word	0x2003e298

000da294 <_ZN9TimeClass7setTimeEx>:
    return !(dst_current_cache == 0);
}

/* set the given time as unix/rtc time */
void TimeClass::setTime(time_t t)
{
   da294:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   da296:	4602      	mov	r2, r0
   da298:	460b      	mov	r3, r1
    struct timeval tv = {
        .tv_sec = t,
        .tv_usec = 0
    };
    if (!hal_rtc_set_time(&tv, nullptr)) {
   da29a:	4668      	mov	r0, sp
    struct timeval tv = {
   da29c:	2100      	movs	r1, #0
    };
   da29e:	e9cd 2300 	strd	r2, r3, [sp]
    struct timeval tv = {
   da2a2:	e9cd 1102 	strd	r1, r1, [sp, #8]
    if (!hal_rtc_set_time(&tv, nullptr)) {
   da2a6:	f7fd f987 	bl	d75b8 <hal_rtc_set_time>
   da2aa:	4602      	mov	r2, r0
   da2ac:	b910      	cbnz	r0, da2b4 <_ZN9TimeClass7setTimeEx+0x20>
        system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
   da2ae:	4601      	mov	r1, r0
   da2b0:	f7fd fb8c 	bl	d79cc <system_notify_time_changed>
    }
}
   da2b4:	b005      	add	sp, #20
   da2b6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000da2bc <_ZN9TimeClass7timeStrEx>:

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   da2bc:	b530      	push	{r4, r5, lr}
   da2be:	4604      	mov	r4, r0
    t += time_zone_cache;
   da2c0:	4818      	ldr	r0, [pc, #96]	; (da324 <_ZN9TimeClass7timeStrEx+0x68>)
   da2c2:	e9d0 1000 	ldrd	r1, r0, [r0]
   da2c6:	1852      	adds	r2, r2, r1
   da2c8:	eb40 0303 	adc.w	r3, r0, r3
    t += dst_current_cache;
   da2cc:	4816      	ldr	r0, [pc, #88]	; (da328 <_ZN9TimeClass7timeStrEx+0x6c>)
   da2ce:	e9d0 1000 	ldrd	r1, r0, [r0]
   da2d2:	1852      	adds	r2, r2, r1
{
   da2d4:	b093      	sub	sp, #76	; 0x4c
    t += dst_current_cache;
   da2d6:	eb40 0303 	adc.w	r3, r0, r3
   da2da:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm calendar_time = {};
   da2de:	2224      	movs	r2, #36	; 0x24
   da2e0:	eb0d 0002 	add.w	r0, sp, r2
   da2e4:	2100      	movs	r1, #0
   da2e6:	f001 fc4b 	bl	dbb80 <memset>
    localtime_r(&t, &calendar_time);
    char ascstr[26] = {};
   da2ea:	2500      	movs	r5, #0
    localtime_r(&t, &calendar_time);
   da2ec:	a909      	add	r1, sp, #36	; 0x24
   da2ee:	4668      	mov	r0, sp
   da2f0:	f7fd fc9c 	bl	d7c2c <localtime_r>
    char ascstr[26] = {};
   da2f4:	2216      	movs	r2, #22
   da2f6:	4629      	mov	r1, r5
   da2f8:	a803      	add	r0, sp, #12
   da2fa:	9502      	str	r5, [sp, #8]
   da2fc:	f001 fc40 	bl	dbb80 <memset>
    asctime_r(&calendar_time, ascstr);
   da300:	a902      	add	r1, sp, #8
   da302:	a809      	add	r0, sp, #36	; 0x24
   da304:	f001 fbd6 	bl	dbab4 <asctime_r>
    int len = strlen(ascstr);
   da308:	a802      	add	r0, sp, #8
   da30a:	f001 fcac 	bl	dbc66 <strlen>
    ascstr[len-1] = 0; // remove final newline
   da30e:	ab12      	add	r3, sp, #72	; 0x48
   da310:	4418      	add	r0, r3
    return String(ascstr);
   da312:	a902      	add	r1, sp, #8
    ascstr[len-1] = 0; // remove final newline
   da314:	f800 5c41 	strb.w	r5, [r0, #-65]
    return String(ascstr);
   da318:	4620      	mov	r0, r4
   da31a:	f7ff fdf5 	bl	d9f08 <_ZN6StringC1EPKc>
}
   da31e:	4620      	mov	r0, r4
   da320:	b013      	add	sp, #76	; 0x4c
   da322:	bd30      	pop	{r4, r5, pc}
   da324:	2003e6c8 	.word	0x2003e6c8
   da328:	2003e6c0 	.word	0x2003e6c0

000da32c <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    localtime_r(&t, &calendar_time);
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   da32c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   da330:	b0a5      	sub	sp, #148	; 0x94
   da332:	4607      	mov	r7, r0
   da334:	4688      	mov	r8, r1
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   da336:	a814      	add	r0, sp, #80	; 0x50
{
   da338:	4611      	mov	r1, r2
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   da33a:	223f      	movs	r2, #63	; 0x3f
{
   da33c:	461d      	mov	r5, r3
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   da33e:	f001 fcac 	bl	dbc9a <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   da342:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   da344:	a814      	add	r0, sp, #80	; 0x50
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   da346:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   da34a:	f001 fc8c 	bl	dbc66 <strlen>
   da34e:	4604      	mov	r4, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
   da350:	bb5d      	cbnz	r5, da3aa <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x7e>
        strcpy(time_zone_str, "Z");
   da352:	492a      	ldr	r1, [pc, #168]	; (da3fc <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd0>)
   da354:	a803      	add	r0, sp, #12
   da356:	f001 fc60 	bl	dbc1a <strcpy>
   da35a:	ae14      	add	r6, sp, #80	; 0x50
{
   da35c:	2500      	movs	r5, #0
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
   da35e:	f104 3bff 	add.w	fp, r4, #4294967295	; 0xffffffff
   da362:	45ab      	cmp	fp, r5
   da364:	d936      	bls.n	da3d4 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xa8>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
   da366:	46b1      	mov	r9, r6
   da368:	f105 0a01 	add.w	sl, r5, #1
   da36c:	f819 3b01 	ldrb.w	r3, [r9], #1
   da370:	2b25      	cmp	r3, #37	; 0x25
   da372:	d117      	bne.n	da3a4 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x78>
   da374:	7873      	ldrb	r3, [r6, #1]
   da376:	2b7a      	cmp	r3, #122	; 0x7a
   da378:	d114      	bne.n	da3a4 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x78>
        {
            size_t tzlen = strlen(time_zone_str);
   da37a:	a803      	add	r0, sp, #12
   da37c:	f001 fc73 	bl	dbc66 <strlen>
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   da380:	ab14      	add	r3, sp, #80	; 0x50
            size_t tzlen = strlen(time_zone_str);
   da382:	4604      	mov	r4, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   da384:	1828      	adds	r0, r5, r0
   da386:	4418      	add	r0, r3
   da388:	ebab 0205 	sub.w	r2, fp, r5
   da38c:	1cb1      	adds	r1, r6, #2
   da38e:	f001 fbcf 	bl	dbb30 <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
   da392:	4622      	mov	r2, r4
   da394:	a903      	add	r1, sp, #12
   da396:	4630      	mov	r0, r6
   da398:	f001 fbca 	bl	dbb30 <memcpy>
            len = strlen(format_str);
   da39c:	a814      	add	r0, sp, #80	; 0x50
   da39e:	f001 fc62 	bl	dbc66 <strlen>
   da3a2:	4604      	mov	r4, r0
    for (size_t i=0; i<len-1; i++)
   da3a4:	464e      	mov	r6, r9
   da3a6:	4655      	mov	r5, sl
   da3a8:	e7d9      	b.n	da35e <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x32>
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
   da3aa:	213c      	movs	r1, #60	; 0x3c
   da3ac:	fb95 f3f1 	sdiv	r3, r5, r1
   da3b0:	2b00      	cmp	r3, #0
   da3b2:	bfb8      	it	lt
   da3b4:	425b      	neglt	r3, r3
   da3b6:	fbb3 f2f1 	udiv	r2, r3, r1
   da3ba:	fb01 3312 	mls	r3, r1, r2, r3
   da3be:	9300      	str	r3, [sp, #0]
   da3c0:	4a0f      	ldr	r2, [pc, #60]	; (da400 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd4>)
   da3c2:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   da3c6:	2110      	movs	r1, #16
   da3c8:	a803      	add	r0, sp, #12
   da3ca:	fb95 f3f3 	sdiv	r3, r5, r3
   da3ce:	f7fd fbf5 	bl	d7bbc <snprintf>
   da3d2:	e7c2      	b.n	da35a <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x2e>
        }
    }

    char buf[50] = {};
   da3d4:	2100      	movs	r1, #0
   da3d6:	222e      	movs	r2, #46	; 0x2e
   da3d8:	a808      	add	r0, sp, #32
   da3da:	9107      	str	r1, [sp, #28]
   da3dc:	f001 fbd0 	bl	dbb80 <memset>
    strftime(buf, sizeof(buf), format_str, calendar_time);
   da3e0:	4643      	mov	r3, r8
   da3e2:	aa14      	add	r2, sp, #80	; 0x50
   da3e4:	2132      	movs	r1, #50	; 0x32
   da3e6:	a807      	add	r0, sp, #28
   da3e8:	f7fd fc18 	bl	d7c1c <strftime>
    return String(buf);
   da3ec:	a907      	add	r1, sp, #28
   da3ee:	4638      	mov	r0, r7
   da3f0:	f7ff fd8a 	bl	d9f08 <_ZN6StringC1EPKc>
}
   da3f4:	4638      	mov	r0, r7
   da3f6:	b025      	add	sp, #148	; 0x94
   da3f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   da3fc:	000dc9f2 	.word	0x000dc9f2
   da400:	000dc9f4 	.word	0x000dc9f4

000da404 <_ZN9TimeClass6formatExPKc>:
{
   da404:	b5f0      	push	{r4, r5, r6, r7, lr}
   da406:	b08d      	sub	sp, #52	; 0x34
   da408:	e9cd 2300 	strd	r2, r3, [sp]
   da40c:	9d12      	ldr	r5, [sp, #72]	; 0x48
   da40e:	4604      	mov	r4, r0
    if (format_spec == nullptr)
   da410:	b915      	cbnz	r5, da418 <_ZN9TimeClass6formatExPKc+0x14>
        format_spec = this->format_spec;
   da412:	4b19      	ldr	r3, [pc, #100]	; (da478 <_ZN9TimeClass6formatExPKc+0x74>)
   da414:	681d      	ldr	r5, [r3, #0]
    if (!format_spec || !strcmp(format_spec, TIME_FORMAT_DEFAULT)) {
   da416:	b12d      	cbz	r5, da424 <_ZN9TimeClass6formatExPKc+0x20>
   da418:	4b18      	ldr	r3, [pc, #96]	; (da47c <_ZN9TimeClass6formatExPKc+0x78>)
   da41a:	4628      	mov	r0, r5
   da41c:	6819      	ldr	r1, [r3, #0]
   da41e:	f001 fbf2 	bl	dbc06 <strcmp>
   da422:	b938      	cbnz	r0, da434 <_ZN9TimeClass6formatExPKc+0x30>
        return timeStr(t);
   da424:	e9dd 2300 	ldrd	r2, r3, [sp]
   da428:	4620      	mov	r0, r4
   da42a:	f7ff ff47 	bl	da2bc <_ZN9TimeClass7timeStrEx>
}
   da42e:	4620      	mov	r0, r4
   da430:	b00d      	add	sp, #52	; 0x34
   da432:	bdf0      	pop	{r4, r5, r6, r7, pc}
    t += time_zone_cache;
   da434:	4e12      	ldr	r6, [pc, #72]	; (da480 <_ZN9TimeClass6formatExPKc+0x7c>)
   da436:	9900      	ldr	r1, [sp, #0]
    t += dst_current_cache;
   da438:	4f12      	ldr	r7, [pc, #72]	; (da484 <_ZN9TimeClass6formatExPKc+0x80>)
    t += time_zone_cache;
   da43a:	e9d6 3200 	ldrd	r3, r2, [r6]
   da43e:	185b      	adds	r3, r3, r1
   da440:	9901      	ldr	r1, [sp, #4]
   da442:	eb41 0202 	adc.w	r2, r1, r2
    t += dst_current_cache;
   da446:	e9d7 0100 	ldrd	r0, r1, [r7]
   da44a:	181b      	adds	r3, r3, r0
   da44c:	eb41 0202 	adc.w	r2, r1, r2
   da450:	e9cd 3200 	strd	r3, r2, [sp]
    struct tm calendar_time = {};
   da454:	2100      	movs	r1, #0
   da456:	2224      	movs	r2, #36	; 0x24
   da458:	a803      	add	r0, sp, #12
   da45a:	f001 fb91 	bl	dbb80 <memset>
    localtime_r(&t, &calendar_time);
   da45e:	a903      	add	r1, sp, #12
   da460:	4668      	mov	r0, sp
   da462:	f7fd fbe3 	bl	d7c2c <localtime_r>
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
   da466:	6832      	ldr	r2, [r6, #0]
   da468:	683b      	ldr	r3, [r7, #0]
   da46a:	a903      	add	r1, sp, #12
   da46c:	4413      	add	r3, r2
   da46e:	4620      	mov	r0, r4
   da470:	462a      	mov	r2, r5
   da472:	f7ff ff5b 	bl	da32c <_ZN9TimeClass14timeFormatImplEP2tmPKci>
   da476:	e7da      	b.n	da42e <_ZN9TimeClass6formatExPKc+0x2a>
   da478:	2003e694 	.word	0x2003e694
   da47c:	2003e290 	.word	0x2003e290
   da480:	2003e6c8 	.word	0x2003e6c8
   da484:	2003e6c0 	.word	0x2003e6c0

000da488 <_ZN9TimeClass7isValidEv>:

bool TimeClass::isValid()
{
   da488:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   da48a:	2000      	movs	r0, #0
   da48c:	f7fd f884 	bl	d7598 <hal_rtc_time_is_valid>
    if (rtcstate)
   da490:	4604      	mov	r4, r0
   da492:	b9a0      	cbnz	r0, da4be <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   da494:	f7fd fa62 	bl	d795c <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   da498:	2801      	cmp	r0, #1
   da49a:	d110      	bne.n	da4be <_ZN9TimeClass7isValidEv+0x36>
   da49c:	4620      	mov	r0, r4
   da49e:	f7fd fa8d 	bl	d79bc <system_thread_get_state>
   da4a2:	b960      	cbnz	r0, da4be <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   da4a4:	f7ff feb2 	bl	da20c <_ZN10CloudClass12syncTimeDoneEv.isra.0>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   da4a8:	b910      	cbnz	r0, da4b0 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   da4aa:	f7fd facf 	bl	d7a4c <spark_process>
        while (_while() && !_condition()) {
   da4ae:	e7f9      	b.n	da4a4 <_ZN9TimeClass7isValidEv+0x1c>
   da4b0:	f7ff feac 	bl	da20c <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   da4b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   da4b8:	2000      	movs	r0, #0
   da4ba:	f7fd b86d 	b.w	d7598 <hal_rtc_time_is_valid>
}
   da4be:	4620      	mov	r0, r4
   da4c0:	bd10      	pop	{r4, pc}

000da4c2 <_ZN9TimeClass3nowEv>:
{
   da4c2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   da4c4:	f7ff ffe0 	bl	da488 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   da4c8:	2210      	movs	r2, #16
   da4ca:	2100      	movs	r1, #0
   da4cc:	4668      	mov	r0, sp
   da4ce:	f001 fb57 	bl	dbb80 <memset>
    hal_rtc_get_time(&tv, nullptr);
   da4d2:	2100      	movs	r1, #0
   da4d4:	4668      	mov	r0, sp
   da4d6:	f7fd f867 	bl	d75a8 <hal_rtc_get_time>
}
   da4da:	9800      	ldr	r0, [sp, #0]
   da4dc:	b005      	add	sp, #20
   da4de:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000da4e4 <_ZN9TimeClass4yearEv>:
{
   da4e4:	b508      	push	{r3, lr}
	return year(now());
   da4e6:	f7ff ffec 	bl	da4c2 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   da4ea:	17c1      	asrs	r1, r0, #31
   da4ec:	f7ff fe58 	bl	da1a0 <_ZL22Refresh_UnixTime_Cachex>
}
   da4f0:	4b01      	ldr	r3, [pc, #4]	; (da4f8 <_ZN9TimeClass4yearEv+0x14>)
   da4f2:	6958      	ldr	r0, [r3, #20]
   da4f4:	bd08      	pop	{r3, pc}
   da4f6:	bf00      	nop
   da4f8:	2003e698 	.word	0x2003e698

000da4fc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   da4fc:	4b02      	ldr	r3, [pc, #8]	; (da508 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   da4fe:	681a      	ldr	r2, [r3, #0]
   da500:	4b02      	ldr	r3, [pc, #8]	; (da50c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   da502:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   da504:	4770      	bx	lr
   da506:	bf00      	nop
   da508:	2003e290 	.word	0x2003e290
   da50c:	2003e694 	.word	0x2003e694

000da510 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   da510:	4770      	bx	lr

000da512 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   da512:	7441      	strb	r1, [r0, #17]
}
   da514:	4770      	bx	lr

000da516 <__tcf_0>:
    serial1_rx_buffer = new hal_usart_ring_buffer_t();
  }
  if (!serial1_tx_buffer) {
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
   da516:	4770      	bx	lr

000da518 <_ZN11USARTSerial17availableForWriteEv>:
{
   da518:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   da51a:	7c00      	ldrb	r0, [r0, #16]
   da51c:	f7fd f99c 	bl	d7858 <hal_usart_available_data_for_write>
}
   da520:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   da524:	bd08      	pop	{r3, pc}

000da526 <_ZN11USARTSerial9availableEv>:
{
   da526:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   da528:	7c00      	ldrb	r0, [r0, #16]
   da52a:	f7fd f96d 	bl	d7808 <hal_usart_available>
}
   da52e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   da532:	bd08      	pop	{r3, pc}

000da534 <_ZN11USARTSerial4peekEv>:
{
   da534:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   da536:	7c00      	ldrb	r0, [r0, #16]
   da538:	f7fd f976 	bl	d7828 <hal_usart_peek>
}
   da53c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   da540:	bd08      	pop	{r3, pc}

000da542 <_ZN11USARTSerial4readEv>:
{
   da542:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   da544:	7c00      	ldrb	r0, [r0, #16]
   da546:	f7fd f967 	bl	d7818 <hal_usart_read>
}
   da54a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   da54e:	bd08      	pop	{r3, pc}

000da550 <_ZN11USARTSerial5flushEv>:
  hal_usart_flush(_serial);
   da550:	7c00      	ldrb	r0, [r0, #16]
   da552:	f7fd b971 	b.w	d7838 <hal_usart_flush>

000da556 <_ZN11USARTSerial5writeEh>:
{
   da556:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   da558:	7c45      	ldrb	r5, [r0, #17]
{
   da55a:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   da55c:	b12d      	cbz	r5, da56a <_ZN11USARTSerial5writeEh+0x14>
	  return hal_usart_write(_serial, c);
   da55e:	7c20      	ldrb	r0, [r4, #16]
}
   da560:	b003      	add	sp, #12
   da562:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   da566:	f7fd b947 	b.w	d77f8 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   da56a:	7c00      	ldrb	r0, [r0, #16]
   da56c:	9101      	str	r1, [sp, #4]
   da56e:	f7fd f973 	bl	d7858 <hal_usart_available_data_for_write>
   da572:	2800      	cmp	r0, #0
   da574:	9901      	ldr	r1, [sp, #4]
   da576:	dcf2      	bgt.n	da55e <_ZN11USARTSerial5writeEh+0x8>
}
   da578:	4628      	mov	r0, r5
   da57a:	b003      	add	sp, #12
   da57c:	bd30      	pop	{r4, r5, pc}

000da57e <_ZN11USARTSerialD0Ev>:
   da57e:	b510      	push	{r4, lr}
   da580:	2114      	movs	r1, #20
   da582:	4604      	mov	r4, r0
   da584:	f000 fa98 	bl	daab8 <_ZdlPvj>
   da588:	4620      	mov	r0, r4
   da58a:	bd10      	pop	{r4, pc}

000da58c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   da58c:	b510      	push	{r4, lr}
   da58e:	f04f 0c00 	mov.w	ip, #0
   da592:	4604      	mov	r4, r0
   da594:	4608      	mov	r0, r1
   da596:	4611      	mov	r1, r2
   da598:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   da59c:	e9c4 c201 	strd	ip, r2, [r4, #4]
   da5a0:	4a04      	ldr	r2, [pc, #16]	; (da5b4 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   da5a2:	6022      	str	r2, [r4, #0]
  _blocking = true;
   da5a4:	2201      	movs	r2, #1
  _serial = serial;
   da5a6:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   da5a8:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   da5aa:	461a      	mov	r2, r3
   da5ac:	f7fd f914 	bl	d77d8 <hal_usart_init>
}
   da5b0:	4620      	mov	r0, r4
   da5b2:	bd10      	pop	{r4, pc}
   da5b4:	000dca24 	.word	0x000dca24

000da5b8 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   da5b8:	7c00      	ldrb	r0, [r0, #16]
   da5ba:	2300      	movs	r3, #0
   da5bc:	f7fd b954 	b.w	d7868 <hal_usart_begin_config>

000da5c0 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   da5c0:	2200      	movs	r2, #0
   da5c2:	f7ff bff9 	b.w	da5b8 <_ZN11USARTSerial5beginEmm>

000da5c6 <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
   da5c6:	7c00      	ldrb	r0, [r0, #16]
   da5c8:	f7fd b90e 	b.w	d77e8 <hal_usart_end>

000da5cc <_Z22__fetch_global_Serial1v>:
{
   da5cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if (!serial1_rx_buffer) {
   da5ce:	4c1a      	ldr	r4, [pc, #104]	; (da638 <_Z22__fetch_global_Serial1v+0x6c>)
   da5d0:	6826      	ldr	r6, [r4, #0]
   da5d2:	b94e      	cbnz	r6, da5e8 <_Z22__fetch_global_Serial1v+0x1c>
    serial1_rx_buffer = new hal_usart_ring_buffer_t();
   da5d4:	2084      	movs	r0, #132	; 0x84
   da5d6:	f7f9 fd5e 	bl	d4096 <_Znwj>
   da5da:	4605      	mov	r5, r0
   da5dc:	b118      	cbz	r0, da5e6 <_Z22__fetch_global_Serial1v+0x1a>
   da5de:	2284      	movs	r2, #132	; 0x84
   da5e0:	4631      	mov	r1, r6
   da5e2:	f001 facd 	bl	dbb80 <memset>
   da5e6:	6025      	str	r5, [r4, #0]
  if (!serial1_tx_buffer) {
   da5e8:	4d14      	ldr	r5, [pc, #80]	; (da63c <_Z22__fetch_global_Serial1v+0x70>)
   da5ea:	682f      	ldr	r7, [r5, #0]
   da5ec:	b94f      	cbnz	r7, da602 <_Z22__fetch_global_Serial1v+0x36>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
   da5ee:	2084      	movs	r0, #132	; 0x84
   da5f0:	f7f9 fd51 	bl	d4096 <_Znwj>
   da5f4:	4606      	mov	r6, r0
   da5f6:	b118      	cbz	r0, da600 <_Z22__fetch_global_Serial1v+0x34>
   da5f8:	2284      	movs	r2, #132	; 0x84
   da5fa:	4639      	mov	r1, r7
   da5fc:	f001 fac0 	bl	dbb80 <memset>
   da600:	602e      	str	r6, [r5, #0]
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
   da602:	4e0f      	ldr	r6, [pc, #60]	; (da640 <_Z22__fetch_global_Serial1v+0x74>)
   da604:	7831      	ldrb	r1, [r6, #0]
   da606:	f3bf 8f5b 	dmb	ish
   da60a:	f011 0101 	ands.w	r1, r1, #1
   da60e:	d110      	bne.n	da632 <_Z22__fetch_global_Serial1v+0x66>
   da610:	4630      	mov	r0, r6
   da612:	9101      	str	r1, [sp, #4]
   da614:	f7f9 fd50 	bl	d40b8 <__cxa_guard_acquire>
   da618:	9901      	ldr	r1, [sp, #4]
   da61a:	b150      	cbz	r0, da632 <_Z22__fetch_global_Serial1v+0x66>
   da61c:	682b      	ldr	r3, [r5, #0]
   da61e:	6822      	ldr	r2, [r4, #0]
   da620:	4808      	ldr	r0, [pc, #32]	; (da644 <_Z22__fetch_global_Serial1v+0x78>)
   da622:	f7ff ffb3 	bl	da58c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   da626:	4630      	mov	r0, r6
   da628:	f7f9 fd4b 	bl	d40c2 <__cxa_guard_release>
   da62c:	4806      	ldr	r0, [pc, #24]	; (da648 <_Z22__fetch_global_Serial1v+0x7c>)
   da62e:	f001 fa67 	bl	dbb00 <atexit>
#endif
	return serial1;
}
   da632:	4804      	ldr	r0, [pc, #16]	; (da644 <_Z22__fetch_global_Serial1v+0x78>)
   da634:	b003      	add	sp, #12
   da636:	bdf0      	pop	{r4, r5, r6, r7, pc}
   da638:	2003e6dc 	.word	0x2003e6dc
   da63c:	2003e6e0 	.word	0x2003e6e0
   da640:	2003e6d8 	.word	0x2003e6d8
   da644:	2003e6e4 	.word	0x2003e6e4
   da648:	000da517 	.word	0x000da517

000da64c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   da64c:	7441      	strb	r1, [r0, #17]
}
   da64e:	4770      	bx	lr

000da650 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   da650:	4770      	bx	lr

000da652 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   da652:	4770      	bx	lr

000da654 <_ZN9USBSerial4readEv>:
{
   da654:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   da656:	2100      	movs	r1, #0
   da658:	7c00      	ldrb	r0, [r0, #16]
   da65a:	f7fd f935 	bl	d78c8 <HAL_USB_USART_Receive_Data>
}
   da65e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   da662:	bd08      	pop	{r3, pc}

000da664 <_ZN9USBSerial4peekEv>:
{
   da664:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   da666:	2101      	movs	r1, #1
   da668:	7c00      	ldrb	r0, [r0, #16]
   da66a:	f7fd f92d 	bl	d78c8 <HAL_USB_USART_Receive_Data>
}
   da66e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   da672:	bd08      	pop	{r3, pc}

000da674 <_ZN9USBSerial17availableForWriteEv>:
{
   da674:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   da676:	7c00      	ldrb	r0, [r0, #16]
   da678:	f7fd f91e 	bl	d78b8 <HAL_USB_USART_Available_Data_For_Write>
}
   da67c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   da680:	bd08      	pop	{r3, pc}

000da682 <_ZN9USBSerial9availableEv>:
{
   da682:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   da684:	7c00      	ldrb	r0, [r0, #16]
   da686:	f7fd f90f 	bl	d78a8 <HAL_USB_USART_Available_Data>
}
   da68a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   da68e:	bd08      	pop	{r3, pc}

000da690 <_ZN9USBSerial5writeEh>:
{
   da690:	b513      	push	{r0, r1, r4, lr}
   da692:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   da694:	7c00      	ldrb	r0, [r0, #16]
{
   da696:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   da698:	f7fd f90e 	bl	d78b8 <HAL_USB_USART_Available_Data_For_Write>
   da69c:	2800      	cmp	r0, #0
   da69e:	9901      	ldr	r1, [sp, #4]
   da6a0:	dc01      	bgt.n	da6a6 <_ZN9USBSerial5writeEh+0x16>
   da6a2:	7c60      	ldrb	r0, [r4, #17]
   da6a4:	b120      	cbz	r0, da6b0 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   da6a6:	7c20      	ldrb	r0, [r4, #16]
   da6a8:	f7fd f916 	bl	d78d8 <HAL_USB_USART_Send_Data>
   da6ac:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   da6b0:	b002      	add	sp, #8
   da6b2:	bd10      	pop	{r4, pc}

000da6b4 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   da6b4:	7c00      	ldrb	r0, [r0, #16]
   da6b6:	f7fd b917 	b.w	d78e8 <HAL_USB_USART_Flush_Data>

000da6ba <_ZN9USBSerialD0Ev>:
   da6ba:	b510      	push	{r4, lr}
   da6bc:	2114      	movs	r1, #20
   da6be:	4604      	mov	r4, r0
   da6c0:	f000 f9fa 	bl	daab8 <_ZdlPvj>
   da6c4:	4620      	mov	r0, r4
   da6c6:	bd10      	pop	{r4, pc}

000da6c8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   da6c8:	b510      	push	{r4, lr}
   da6ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   da6ce:	4604      	mov	r4, r0
   da6d0:	4608      	mov	r0, r1
   da6d2:	2100      	movs	r1, #0
   da6d4:	e9c4 1301 	strd	r1, r3, [r4, #4]
   da6d8:	4b04      	ldr	r3, [pc, #16]	; (da6ec <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   da6da:	6023      	str	r3, [r4, #0]
  _blocking = true;
   da6dc:	2301      	movs	r3, #1
  _serial = serial;
   da6de:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   da6e0:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   da6e2:	4611      	mov	r1, r2
   da6e4:	f7fd f8c8 	bl	d7878 <HAL_USB_USART_Init>
}
   da6e8:	4620      	mov	r0, r4
   da6ea:	bd10      	pop	{r4, pc}
   da6ec:	000dca54 	.word	0x000dca54

000da6f0 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   da6f0:	7c00      	ldrb	r0, [r0, #16]
   da6f2:	2200      	movs	r2, #0
   da6f4:	f7fd b8c8 	b.w	d7888 <HAL_USB_USART_Begin>

000da6f8 <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
   da6f8:	7c00      	ldrb	r0, [r0, #16]
   da6fa:	f7fd b8cd 	b.w	d7898 <HAL_USB_USART_End>

000da6fe <_Z19acquireSerialBufferv>:
{
   da6fe:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   da700:	2214      	movs	r2, #20
{
   da702:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   da704:	2100      	movs	r1, #0
   da706:	f001 fa3b 	bl	dbb80 <memset>
}
   da70a:	4620      	mov	r0, r4
   da70c:	bd10      	pop	{r4, pc}
	...

000da710 <_Z16_fetch_usbserialv>:
{
   da710:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   da712:	4c0f      	ldr	r4, [pc, #60]	; (da750 <_Z16_fetch_usbserialv+0x40>)
{
   da714:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   da716:	a803      	add	r0, sp, #12
   da718:	f7ff fff1 	bl	da6fe <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   da71c:	7821      	ldrb	r1, [r4, #0]
   da71e:	f3bf 8f5b 	dmb	ish
   da722:	f011 0101 	ands.w	r1, r1, #1
   da726:	d10f      	bne.n	da748 <_Z16_fetch_usbserialv+0x38>
   da728:	4620      	mov	r0, r4
   da72a:	9101      	str	r1, [sp, #4]
   da72c:	f7f9 fcc4 	bl	d40b8 <__cxa_guard_acquire>
   da730:	9901      	ldr	r1, [sp, #4]
   da732:	b148      	cbz	r0, da748 <_Z16_fetch_usbserialv+0x38>
   da734:	aa03      	add	r2, sp, #12
   da736:	4807      	ldr	r0, [pc, #28]	; (da754 <_Z16_fetch_usbserialv+0x44>)
   da738:	f7ff ffc6 	bl	da6c8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   da73c:	4620      	mov	r0, r4
   da73e:	f7f9 fcc0 	bl	d40c2 <__cxa_guard_release>
   da742:	4805      	ldr	r0, [pc, #20]	; (da758 <_Z16_fetch_usbserialv+0x48>)
   da744:	f001 f9dc 	bl	dbb00 <atexit>
	return _usbserial;
}
   da748:	4802      	ldr	r0, [pc, #8]	; (da754 <_Z16_fetch_usbserialv+0x44>)
   da74a:	b008      	add	sp, #32
   da74c:	bd10      	pop	{r4, pc}
   da74e:	bf00      	nop
   da750:	2003e6f8 	.word	0x2003e6f8
   da754:	2003e6fc 	.word	0x2003e6fc
   da758:	000da651 	.word	0x000da651

000da75c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   da75c:	4b01      	ldr	r3, [pc, #4]	; (da764 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   da75e:	6018      	str	r0, [r3, #0]
    }, nullptr);
   da760:	4770      	bx	lr
   da762:	bf00      	nop
   da764:	2003e2a4 	.word	0x2003e2a4

000da768 <serialEventRun>:
{
   da768:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   da76a:	4b0b      	ldr	r3, [pc, #44]	; (da798 <serialEventRun+0x30>)
   da76c:	b143      	cbz	r3, da780 <serialEventRun+0x18>
   da76e:	f7ff ffcf 	bl	da710 <_Z16_fetch_usbserialv>
   da772:	6803      	ldr	r3, [r0, #0]
   da774:	691b      	ldr	r3, [r3, #16]
   da776:	4798      	blx	r3
   da778:	2800      	cmp	r0, #0
   da77a:	dd01      	ble.n	da780 <serialEventRun+0x18>
        serialEvent();
   da77c:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   da780:	4b06      	ldr	r3, [pc, #24]	; (da79c <serialEventRun+0x34>)
   da782:	b143      	cbz	r3, da796 <serialEventRun+0x2e>
   da784:	f7ff ff22 	bl	da5cc <_Z22__fetch_global_Serial1v>
   da788:	6803      	ldr	r3, [r0, #0]
   da78a:	691b      	ldr	r3, [r3, #16]
   da78c:	4798      	blx	r3
   da78e:	2800      	cmp	r0, #0
   da790:	dd01      	ble.n	da796 <serialEventRun+0x2e>
        serialEvent1();
   da792:	f3af 8000 	nop.w
}
   da796:	bd08      	pop	{r3, pc}
	...

000da7a0 <_post_loop>:
{
   da7a0:	b508      	push	{r3, lr}
	serialEventRun();
   da7a2:	f7ff ffe1 	bl	da768 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   da7a6:	f7fc feef 	bl	d7588 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   da7aa:	4b01      	ldr	r3, [pc, #4]	; (da7b0 <_post_loop+0x10>)
   da7ac:	6018      	str	r0, [r3, #0]
}
   da7ae:	bd08      	pop	{r3, pc}
   da7b0:	2003e724 	.word	0x2003e724

000da7b4 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   da7b4:	4805      	ldr	r0, [pc, #20]	; (da7cc <_Z33system_initialize_user_backup_ramv+0x18>)
   da7b6:	4a06      	ldr	r2, [pc, #24]	; (da7d0 <_Z33system_initialize_user_backup_ramv+0x1c>)
   da7b8:	4906      	ldr	r1, [pc, #24]	; (da7d4 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   da7ba:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   da7bc:	1a12      	subs	r2, r2, r0
   da7be:	f001 f9b7 	bl	dbb30 <memcpy>
    __backup_sram_signature = signature;
   da7c2:	4b05      	ldr	r3, [pc, #20]	; (da7d8 <_Z33system_initialize_user_backup_ramv+0x24>)
   da7c4:	4a05      	ldr	r2, [pc, #20]	; (da7dc <_Z33system_initialize_user_backup_ramv+0x28>)
   da7c6:	601a      	str	r2, [r3, #0]
}
   da7c8:	bd08      	pop	{r3, pc}
   da7ca:	bf00      	nop
   da7cc:	2003f400 	.word	0x2003f400
   da7d0:	2003f404 	.word	0x2003f404
   da7d4:	000dcc50 	.word	0x000dcc50
   da7d8:	2003f400 	.word	0x2003f400
   da7dc:	9a271c1e 	.word	0x9a271c1e

000da7e0 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   da7e0:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   da7e2:	2300      	movs	r3, #0
   da7e4:	9300      	str	r3, [sp, #0]
   da7e6:	461a      	mov	r2, r3
   da7e8:	f06f 0177 	mvn.w	r1, #119	; 0x77
   da7ec:	f7fd f900 	bl	d79f0 <system_ctrl_set_result>
}
   da7f0:	b003      	add	sp, #12
   da7f2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000da7f8 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   da7f8:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   da7fa:	8843      	ldrh	r3, [r0, #2]
   da7fc:	2b0a      	cmp	r3, #10
   da7fe:	d008      	beq.n	da812 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   da800:	2b50      	cmp	r3, #80	; 0x50
   da802:	d10b      	bne.n	da81c <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   da804:	4b09      	ldr	r3, [pc, #36]	; (da82c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   da806:	681b      	ldr	r3, [r3, #0]
   da808:	b14b      	cbz	r3, da81e <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   da80a:	b003      	add	sp, #12
   da80c:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   da810:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   da812:	f7ff ffe5 	bl	da7e0 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   da816:	b003      	add	sp, #12
   da818:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   da81c:	2300      	movs	r3, #0
   da81e:	9300      	str	r3, [sp, #0]
   da820:	461a      	mov	r2, r3
   da822:	f06f 0177 	mvn.w	r1, #119	; 0x77
   da826:	f7fd f8e3 	bl	d79f0 <system_ctrl_set_result>
}
   da82a:	e7f4      	b.n	da816 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   da82c:	2003e714 	.word	0x2003e714

000da830 <module_user_init_hook>:
{
   da830:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   da832:	4812      	ldr	r0, [pc, #72]	; (da87c <module_user_init_hook+0x4c>)
   da834:	2100      	movs	r1, #0
   da836:	f7fd f9e9 	bl	d7c0c <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   da83a:	4b11      	ldr	r3, [pc, #68]	; (da880 <module_user_init_hook+0x50>)
   da83c:	681a      	ldr	r2, [r3, #0]
   da83e:	4b11      	ldr	r3, [pc, #68]	; (da884 <module_user_init_hook+0x54>)
   da840:	429a      	cmp	r2, r3
   da842:	4b11      	ldr	r3, [pc, #68]	; (da888 <module_user_init_hook+0x58>)
   da844:	bf0c      	ite	eq
   da846:	2201      	moveq	r2, #1
   da848:	2200      	movne	r2, #0
   da84a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   da84c:	d001      	beq.n	da852 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   da84e:	f7ff ffb1 	bl	da7b4 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   da852:	f7fc fe89 	bl	d7568 <HAL_RNG_GetRandomNumber>
   da856:	4604      	mov	r4, r0
    srand(seed);
   da858:	f001 f99a 	bl	dbb90 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   da85c:	4b0b      	ldr	r3, [pc, #44]	; (da88c <module_user_init_hook+0x5c>)
   da85e:	b113      	cbz	r3, da866 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   da860:	4620      	mov	r0, r4
   da862:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   da866:	2100      	movs	r1, #0
   da868:	4808      	ldr	r0, [pc, #32]	; (da88c <module_user_init_hook+0x5c>)
   da86a:	f7fd f91f 	bl	d7aac <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   da86e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   da872:	4807      	ldr	r0, [pc, #28]	; (da890 <module_user_init_hook+0x60>)
   da874:	2100      	movs	r1, #0
   da876:	f7fd b8b1 	b.w	d79dc <system_ctrl_set_app_request_handler>
   da87a:	bf00      	nop
   da87c:	000da75d 	.word	0x000da75d
   da880:	2003f400 	.word	0x2003f400
   da884:	9a271c1e 	.word	0x9a271c1e
   da888:	2003e710 	.word	0x2003e710
   da88c:	00000000 	.word	0x00000000
   da890:	000da7f9 	.word	0x000da7f9

000da894 <spark_protocol_instance>:
extern "C" {
#endif

DYNALIB_BEGIN(communication)

DYNALIB_FN(0, communication, spark_protocol_instance, ProtocolFacade*(void))
   da894:	b508      	push	{r3, lr}
   da896:	4b02      	ldr	r3, [pc, #8]	; (da8a0 <spark_protocol_instance+0xc>)
   da898:	681b      	ldr	r3, [r3, #0]
   da89a:	681b      	ldr	r3, [r3, #0]
   da89c:	9301      	str	r3, [sp, #4]
   da89e:	bd08      	pop	{r3, pc}
   da8a0:	0003025c 	.word	0x0003025c

000da8a4 <spark_protocol_set_product_id>:
DYNALIB_FN(1, communication, spark_protocol_set_product_id, void(ProtocolFacade*, product_id_t, unsigned, void*))
   da8a4:	b508      	push	{r3, lr}
   da8a6:	4b02      	ldr	r3, [pc, #8]	; (da8b0 <spark_protocol_set_product_id+0xc>)
   da8a8:	681b      	ldr	r3, [r3, #0]
   da8aa:	685b      	ldr	r3, [r3, #4]
   da8ac:	9301      	str	r3, [sp, #4]
   da8ae:	bd08      	pop	{r3, pc}
   da8b0:	0003025c 	.word	0x0003025c

000da8b4 <spark_protocol_set_product_firmware_version>:
DYNALIB_FN(2, communication, spark_protocol_set_product_firmware_version, void(ProtocolFacade*, product_firmware_version_t, unsigned, void*))
   da8b4:	b508      	push	{r3, lr}
   da8b6:	4b02      	ldr	r3, [pc, #8]	; (da8c0 <spark_protocol_set_product_firmware_version+0xc>)
   da8b8:	681b      	ldr	r3, [r3, #0]
   da8ba:	689b      	ldr	r3, [r3, #8]
   da8bc:	9301      	str	r3, [sp, #4]
   da8be:	bd08      	pop	{r3, pc}
   da8c0:	0003025c 	.word	0x0003025c

000da8c4 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   da8c4:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   da8c6:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   da8c8:	d902      	bls.n	da8d0 <pinAvailable+0xc>
    return false;
   da8ca:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   da8cc:	b002      	add	sp, #8
   da8ce:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   da8d0:	f1a0 030b 	sub.w	r3, r0, #11
   da8d4:	2b02      	cmp	r3, #2
   da8d6:	d81a      	bhi.n	da90e <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   da8d8:	4c17      	ldr	r4, [pc, #92]	; (da938 <pinAvailable+0x74>)
   da8da:	7821      	ldrb	r1, [r4, #0]
   da8dc:	f3bf 8f5b 	dmb	ish
   da8e0:	f011 0101 	ands.w	r1, r1, #1
   da8e4:	d10b      	bne.n	da8fe <pinAvailable+0x3a>
   da8e6:	4620      	mov	r0, r4
   da8e8:	9101      	str	r1, [sp, #4]
   da8ea:	f7f9 fbe5 	bl	d40b8 <__cxa_guard_acquire>
   da8ee:	9901      	ldr	r1, [sp, #4]
   da8f0:	b128      	cbz	r0, da8fe <pinAvailable+0x3a>
   da8f2:	4812      	ldr	r0, [pc, #72]	; (da93c <pinAvailable+0x78>)
   da8f4:	f7ff fa08 	bl	d9d08 <_ZN8SPIClassC1E19hal_spi_interface_t>
   da8f8:	4620      	mov	r0, r4
   da8fa:	f7f9 fbe2 	bl	d40c2 <__cxa_guard_release>
   da8fe:	4b0f      	ldr	r3, [pc, #60]	; (da93c <pinAvailable+0x78>)
   da900:	7818      	ldrb	r0, [r3, #0]
   da902:	f7fc ff31 	bl	d7768 <hal_spi_is_enabled>
   da906:	2800      	cmp	r0, #0
   da908:	d1df      	bne.n	da8ca <pinAvailable+0x6>
  return true; // 'pin' is available
   da90a:	2001      	movs	r0, #1
   da90c:	e7de      	b.n	da8cc <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   da90e:	2801      	cmp	r0, #1
   da910:	d809      	bhi.n	da926 <pinAvailable+0x62>
   da912:	f000 f889 	bl	daa28 <_Z19__fetch_global_Wirev>
   da916:	2100      	movs	r1, #0
   da918:	7c00      	ldrb	r0, [r0, #16]
   da91a:	f7fc fed5 	bl	d76c8 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   da91e:	f080 0001 	eor.w	r0, r0, #1
   da922:	b2c0      	uxtb	r0, r0
   da924:	e7d2      	b.n	da8cc <pinAvailable+0x8>
   da926:	3809      	subs	r0, #9
   da928:	2801      	cmp	r0, #1
   da92a:	d8ee      	bhi.n	da90a <pinAvailable+0x46>
   da92c:	f7ff fe4e 	bl	da5cc <_Z22__fetch_global_Serial1v>
   da930:	7c00      	ldrb	r0, [r0, #16]
   da932:	f7fc ff89 	bl	d7848 <hal_usart_is_enabled>
   da936:	e7f2      	b.n	da91e <pinAvailable+0x5a>
   da938:	2003e718 	.word	0x2003e718
   da93c:	2003e71c 	.word	0x2003e71c

000da940 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   da940:	2823      	cmp	r0, #35	; 0x23
{
   da942:	b538      	push	{r3, r4, r5, lr}
   da944:	4604      	mov	r4, r0
   da946:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   da948:	d80a      	bhi.n	da960 <pinMode+0x20>
   da94a:	29ff      	cmp	r1, #255	; 0xff
   da94c:	d008      	beq.n	da960 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   da94e:	f7ff ffb9 	bl	da8c4 <pinAvailable>
   da952:	b128      	cbz	r0, da960 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   da954:	4629      	mov	r1, r5
   da956:	4620      	mov	r0, r4
}
   da958:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   da95c:	f7fc be44 	b.w	d75e8 <HAL_Pin_Mode>
}
   da960:	bd38      	pop	{r3, r4, r5, pc}

000da962 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   da962:	b538      	push	{r3, r4, r5, lr}
   da964:	4604      	mov	r4, r0
   da966:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   da968:	f7fc fe46 	bl	d75f8 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   da96c:	28ff      	cmp	r0, #255	; 0xff
   da96e:	d010      	beq.n	da992 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   da970:	2806      	cmp	r0, #6
   da972:	d804      	bhi.n	da97e <digitalWrite+0x1c>
   da974:	234d      	movs	r3, #77	; 0x4d
   da976:	fa23 f000 	lsr.w	r0, r3, r0
   da97a:	07c3      	lsls	r3, r0, #31
   da97c:	d409      	bmi.n	da992 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   da97e:	4620      	mov	r0, r4
   da980:	f7ff ffa0 	bl	da8c4 <pinAvailable>
   da984:	b128      	cbz	r0, da992 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   da986:	4629      	mov	r1, r5
   da988:	4620      	mov	r0, r4
}
   da98a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   da98e:	f7fc be3b 	b.w	d7608 <HAL_GPIO_Write>
}
   da992:	bd38      	pop	{r3, r4, r5, pc}

000da994 <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   da994:	280d      	cmp	r0, #13
{
   da996:	b510      	push	{r4, lr}
   da998:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   da99a:	bf9c      	itt	ls
   da99c:	340e      	addls	r4, #14
   da99e:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   da9a0:	4620      	mov	r0, r4
   da9a2:	f7ff ff8f 	bl	da8c4 <pinAvailable>
   da9a6:	b150      	cbz	r0, da9be <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   da9a8:	2103      	movs	r1, #3
   da9aa:	4620      	mov	r0, r4
   da9ac:	f7fc fe14 	bl	d75d8 <HAL_Validate_Pin_Function>
   da9b0:	2803      	cmp	r0, #3
   da9b2:	d104      	bne.n	da9be <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   da9b4:	4620      	mov	r0, r4
}
   da9b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   da9ba:	f7fc be3d 	b.w	d7638 <hal_adc_read>
}
   da9be:	2000      	movs	r0, #0
   da9c0:	bd10      	pop	{r4, pc}

000da9c2 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   da9c2:	4770      	bx	lr

000da9c4 <__tcf_1>:
   da9c4:	4770      	bx	lr
	...

000da9c8 <_Z17acquireWireBufferv>:
{
   da9c8:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   da9ca:	2300      	movs	r3, #0
   da9cc:	2520      	movs	r5, #32
   da9ce:	8043      	strh	r3, [r0, #2]
   da9d0:	2314      	movs	r3, #20
{
   da9d2:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   da9d4:	8003      	strh	r3, [r0, #0]
   da9d6:	6085      	str	r5, [r0, #8]
   da9d8:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   da9da:	4906      	ldr	r1, [pc, #24]	; (da9f4 <_Z17acquireWireBufferv+0x2c>)
   da9dc:	4628      	mov	r0, r5
   da9de:	f000 f86f 	bl	daac0 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   da9e2:	4904      	ldr	r1, [pc, #16]	; (da9f4 <_Z17acquireWireBufferv+0x2c>)
	};
   da9e4:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   da9e6:	4628      	mov	r0, r5
   da9e8:	f000 f86a 	bl	daac0 <_ZnajRKSt9nothrow_t>
	};
   da9ec:	60e0      	str	r0, [r4, #12]
}
   da9ee:	4620      	mov	r0, r4
   da9f0:	bd38      	pop	{r3, r4, r5, pc}
   da9f2:	bf00      	nop
   da9f4:	000dca7c 	.word	0x000dca7c

000da9f8 <_Z18acquireWire1Bufferv>:
   da9f8:	b538      	push	{r3, r4, r5, lr}
   da9fa:	2300      	movs	r3, #0
   da9fc:	2520      	movs	r5, #32
   da9fe:	8043      	strh	r3, [r0, #2]
   daa00:	2314      	movs	r3, #20
   daa02:	4604      	mov	r4, r0
   daa04:	8003      	strh	r3, [r0, #0]
   daa06:	6085      	str	r5, [r0, #8]
   daa08:	6105      	str	r5, [r0, #16]
   daa0a:	4906      	ldr	r1, [pc, #24]	; (daa24 <_Z18acquireWire1Bufferv+0x2c>)
   daa0c:	4628      	mov	r0, r5
   daa0e:	f000 f857 	bl	daac0 <_ZnajRKSt9nothrow_t>
   daa12:	4904      	ldr	r1, [pc, #16]	; (daa24 <_Z18acquireWire1Bufferv+0x2c>)
   daa14:	6060      	str	r0, [r4, #4]
   daa16:	4628      	mov	r0, r5
   daa18:	f000 f852 	bl	daac0 <_ZnajRKSt9nothrow_t>
   daa1c:	60e0      	str	r0, [r4, #12]
   daa1e:	4620      	mov	r0, r4
   daa20:	bd38      	pop	{r3, r4, r5, pc}
   daa22:	bf00      	nop
   daa24:	000dca7c 	.word	0x000dca7c

000daa28 <_Z19__fetch_global_Wirev>:
{
   daa28:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   daa2a:	4d0e      	ldr	r5, [pc, #56]	; (daa64 <_Z19__fetch_global_Wirev+0x3c>)
   daa2c:	7829      	ldrb	r1, [r5, #0]
   daa2e:	f3bf 8f5b 	dmb	ish
   daa32:	f011 0401 	ands.w	r4, r1, #1
{
   daa36:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   daa38:	d111      	bne.n	daa5e <_Z19__fetch_global_Wirev+0x36>
   daa3a:	4628      	mov	r0, r5
   daa3c:	f7f9 fb3c 	bl	d40b8 <__cxa_guard_acquire>
   daa40:	b168      	cbz	r0, daa5e <_Z19__fetch_global_Wirev+0x36>
   daa42:	a801      	add	r0, sp, #4
   daa44:	f7ff ffc0 	bl	da9c8 <_Z17acquireWireBufferv>
   daa48:	aa01      	add	r2, sp, #4
   daa4a:	4621      	mov	r1, r4
   daa4c:	4806      	ldr	r0, [pc, #24]	; (daa68 <_Z19__fetch_global_Wirev+0x40>)
   daa4e:	f7fd fd3b 	bl	d84c8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   daa52:	4628      	mov	r0, r5
   daa54:	f7f9 fb35 	bl	d40c2 <__cxa_guard_release>
   daa58:	4804      	ldr	r0, [pc, #16]	; (daa6c <_Z19__fetch_global_Wirev+0x44>)
   daa5a:	f001 f851 	bl	dbb00 <atexit>
	return wire;
}
   daa5e:	4802      	ldr	r0, [pc, #8]	; (daa68 <_Z19__fetch_global_Wirev+0x40>)
   daa60:	b007      	add	sp, #28
   daa62:	bd30      	pop	{r4, r5, pc}
   daa64:	2003e728 	.word	0x2003e728
   daa68:	2003e730 	.word	0x2003e730
   daa6c:	000da9c3 	.word	0x000da9c3

000daa70 <_Z20__fetch_global_Wire1v>:

#if Wiring_Wire1
TwoWire& __fetch_global_Wire1()
{
   daa70:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   daa72:	4c0e      	ldr	r4, [pc, #56]	; (daaac <_Z20__fetch_global_Wire1v+0x3c>)
   daa74:	7823      	ldrb	r3, [r4, #0]
   daa76:	f3bf 8f5b 	dmb	ish
   daa7a:	07db      	lsls	r3, r3, #31
{
   daa7c:	b086      	sub	sp, #24
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   daa7e:	d411      	bmi.n	daaa4 <_Z20__fetch_global_Wire1v+0x34>
   daa80:	4620      	mov	r0, r4
   daa82:	f7f9 fb19 	bl	d40b8 <__cxa_guard_acquire>
   daa86:	b168      	cbz	r0, daaa4 <_Z20__fetch_global_Wire1v+0x34>
   daa88:	a801      	add	r0, sp, #4
   daa8a:	f7ff ffb5 	bl	da9f8 <_Z18acquireWire1Bufferv>
   daa8e:	aa01      	add	r2, sp, #4
   daa90:	2101      	movs	r1, #1
   daa92:	4807      	ldr	r0, [pc, #28]	; (daab0 <_Z20__fetch_global_Wire1v+0x40>)
   daa94:	f7fd fd18 	bl	d84c8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   daa98:	4620      	mov	r0, r4
   daa9a:	f7f9 fb12 	bl	d40c2 <__cxa_guard_release>
   daa9e:	4805      	ldr	r0, [pc, #20]	; (daab4 <_Z20__fetch_global_Wire1v+0x44>)
   daaa0:	f001 f82e 	bl	dbb00 <atexit>
	return wire;
}
   daaa4:	4802      	ldr	r0, [pc, #8]	; (daab0 <_Z20__fetch_global_Wire1v+0x40>)
   daaa6:	b006      	add	sp, #24
   daaa8:	bd10      	pop	{r4, pc}
   daaaa:	bf00      	nop
   daaac:	2003e72c 	.word	0x2003e72c
   daab0:	2003e744 	.word	0x2003e744
   daab4:	000da9c5 	.word	0x000da9c5

000daab8 <_ZdlPvj>:
   daab8:	f7f9 baf1 	b.w	d409e <_ZdlPv>

000daabc <_ZnwjRKSt9nothrow_t>:
   daabc:	f7f9 baeb 	b.w	d4096 <_Znwj>

000daac0 <_ZnajRKSt9nothrow_t>:
   daac0:	f7f9 baeb 	b.w	d409a <_Znaj>

000daac4 <_ZSt25__throw_bad_function_callv>:
   daac4:	b508      	push	{r3, lr}
   daac6:	f7fd f889 	bl	d7bdc <abort>
   daaca:	0000      	movs	r0, r0
   daacc:	0000      	movs	r0, r0
	...

000daad0 <atan>:
   daad0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   daad4:	ec55 4b10 	vmov	r4, r5, d0
   daad8:	4bcd      	ldr	r3, [pc, #820]	; (dae10 <atan+0x340>)
   daada:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
   daade:	429e      	cmp	r6, r3
   daae0:	46aa      	mov	sl, r5
   daae2:	dd0d      	ble.n	dab00 <atan+0x30>
   daae4:	4bcb      	ldr	r3, [pc, #812]	; (dae14 <atan+0x344>)
   daae6:	429e      	cmp	r6, r3
   daae8:	f300 80b5 	bgt.w	dac56 <atan+0x186>
   daaec:	f000 80b0 	beq.w	dac50 <atan+0x180>
   daaf0:	f1ba 0f00 	cmp.w	sl, #0
   daaf4:	f340 80f6 	ble.w	dace4 <atan+0x214>
   daaf8:	ed9f 0ba9 	vldr	d0, [pc, #676]	; dada0 <atan+0x2d0>
   daafc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dab00:	4bc5      	ldr	r3, [pc, #788]	; (dae18 <atan+0x348>)
   dab02:	429e      	cmp	r6, r3
   dab04:	f300 80c3 	bgt.w	dac8e <atan+0x1be>
   dab08:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
   dab0c:	429e      	cmp	r6, r3
   dab0e:	f340 80ac 	ble.w	dac6a <atan+0x19a>
   dab12:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
   dab16:	4622      	mov	r2, r4
   dab18:	462b      	mov	r3, r5
   dab1a:	4620      	mov	r0, r4
   dab1c:	4629      	mov	r1, r5
   dab1e:	f000 fc75 	bl	db40c <__aeabi_dmul>
   dab22:	4602      	mov	r2, r0
   dab24:	460b      	mov	r3, r1
   dab26:	4680      	mov	r8, r0
   dab28:	4689      	mov	r9, r1
   dab2a:	f000 fc6f 	bl	db40c <__aeabi_dmul>
   dab2e:	a39e      	add	r3, pc, #632	; (adr r3, dada8 <atan+0x2d8>)
   dab30:	e9d3 2300 	ldrd	r2, r3, [r3]
   dab34:	4606      	mov	r6, r0
   dab36:	460f      	mov	r7, r1
   dab38:	f000 fc68 	bl	db40c <__aeabi_dmul>
   dab3c:	a39c      	add	r3, pc, #624	; (adr r3, dadb0 <atan+0x2e0>)
   dab3e:	e9d3 2300 	ldrd	r2, r3, [r3]
   dab42:	f000 faad 	bl	db0a0 <__adddf3>
   dab46:	4632      	mov	r2, r6
   dab48:	463b      	mov	r3, r7
   dab4a:	f000 fc5f 	bl	db40c <__aeabi_dmul>
   dab4e:	a39a      	add	r3, pc, #616	; (adr r3, dadb8 <atan+0x2e8>)
   dab50:	e9d3 2300 	ldrd	r2, r3, [r3]
   dab54:	f000 faa4 	bl	db0a0 <__adddf3>
   dab58:	4632      	mov	r2, r6
   dab5a:	463b      	mov	r3, r7
   dab5c:	f000 fc56 	bl	db40c <__aeabi_dmul>
   dab60:	a397      	add	r3, pc, #604	; (adr r3, dadc0 <atan+0x2f0>)
   dab62:	e9d3 2300 	ldrd	r2, r3, [r3]
   dab66:	f000 fa9b 	bl	db0a0 <__adddf3>
   dab6a:	4632      	mov	r2, r6
   dab6c:	463b      	mov	r3, r7
   dab6e:	f000 fc4d 	bl	db40c <__aeabi_dmul>
   dab72:	a395      	add	r3, pc, #596	; (adr r3, dadc8 <atan+0x2f8>)
   dab74:	e9d3 2300 	ldrd	r2, r3, [r3]
   dab78:	f000 fa92 	bl	db0a0 <__adddf3>
   dab7c:	4632      	mov	r2, r6
   dab7e:	463b      	mov	r3, r7
   dab80:	f000 fc44 	bl	db40c <__aeabi_dmul>
   dab84:	a392      	add	r3, pc, #584	; (adr r3, dadd0 <atan+0x300>)
   dab86:	e9d3 2300 	ldrd	r2, r3, [r3]
   dab8a:	f000 fa89 	bl	db0a0 <__adddf3>
   dab8e:	4642      	mov	r2, r8
   dab90:	464b      	mov	r3, r9
   dab92:	f000 fc3b 	bl	db40c <__aeabi_dmul>
   dab96:	a390      	add	r3, pc, #576	; (adr r3, dadd8 <atan+0x308>)
   dab98:	e9d3 2300 	ldrd	r2, r3, [r3]
   dab9c:	4680      	mov	r8, r0
   dab9e:	4689      	mov	r9, r1
   daba0:	4630      	mov	r0, r6
   daba2:	4639      	mov	r1, r7
   daba4:	f000 fc32 	bl	db40c <__aeabi_dmul>
   daba8:	a38d      	add	r3, pc, #564	; (adr r3, dade0 <atan+0x310>)
   dabaa:	e9d3 2300 	ldrd	r2, r3, [r3]
   dabae:	f000 fa75 	bl	db09c <__aeabi_dsub>
   dabb2:	4632      	mov	r2, r6
   dabb4:	463b      	mov	r3, r7
   dabb6:	f000 fc29 	bl	db40c <__aeabi_dmul>
   dabba:	a38b      	add	r3, pc, #556	; (adr r3, dade8 <atan+0x318>)
   dabbc:	e9d3 2300 	ldrd	r2, r3, [r3]
   dabc0:	f000 fa6c 	bl	db09c <__aeabi_dsub>
   dabc4:	4632      	mov	r2, r6
   dabc6:	463b      	mov	r3, r7
   dabc8:	f000 fc20 	bl	db40c <__aeabi_dmul>
   dabcc:	a388      	add	r3, pc, #544	; (adr r3, dadf0 <atan+0x320>)
   dabce:	e9d3 2300 	ldrd	r2, r3, [r3]
   dabd2:	f000 fa63 	bl	db09c <__aeabi_dsub>
   dabd6:	4632      	mov	r2, r6
   dabd8:	463b      	mov	r3, r7
   dabda:	f000 fc17 	bl	db40c <__aeabi_dmul>
   dabde:	a386      	add	r3, pc, #536	; (adr r3, dadf8 <atan+0x328>)
   dabe0:	e9d3 2300 	ldrd	r2, r3, [r3]
   dabe4:	f000 fa5a 	bl	db09c <__aeabi_dsub>
   dabe8:	4632      	mov	r2, r6
   dabea:	463b      	mov	r3, r7
   dabec:	f000 fc0e 	bl	db40c <__aeabi_dmul>
   dabf0:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
   dabf4:	4602      	mov	r2, r0
   dabf6:	460b      	mov	r3, r1
   dabf8:	d078      	beq.n	dacec <atan+0x21c>
   dabfa:	4640      	mov	r0, r8
   dabfc:	4649      	mov	r1, r9
   dabfe:	f000 fa4f 	bl	db0a0 <__adddf3>
   dac02:	4e86      	ldr	r6, [pc, #536]	; (dae1c <atan+0x34c>)
   dac04:	4622      	mov	r2, r4
   dac06:	462b      	mov	r3, r5
   dac08:	f000 fc00 	bl	db40c <__aeabi_dmul>
   dac0c:	4b84      	ldr	r3, [pc, #528]	; (dae20 <atan+0x350>)
   dac0e:	eb06 06cb 	add.w	r6, r6, fp, lsl #3
   dac12:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
   dac16:	449b      	add	fp, r3
   dac18:	e9db 2300 	ldrd	r2, r3, [fp]
   dac1c:	f000 fa3e 	bl	db09c <__aeabi_dsub>
   dac20:	4622      	mov	r2, r4
   dac22:	462b      	mov	r3, r5
   dac24:	f000 fa3a 	bl	db09c <__aeabi_dsub>
   dac28:	4602      	mov	r2, r0
   dac2a:	460b      	mov	r3, r1
   dac2c:	e9d6 0100 	ldrd	r0, r1, [r6]
   dac30:	f000 fa34 	bl	db09c <__aeabi_dsub>
   dac34:	f1ba 0f00 	cmp.w	sl, #0
   dac38:	ec41 0b10 	vmov	d0, r0, r1
   dac3c:	da13      	bge.n	dac66 <atan+0x196>
   dac3e:	ee10 1a90 	vmov	r1, s1
   dac42:	4602      	mov	r2, r0
   dac44:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   dac48:	ec43 2b10 	vmov	d0, r2, r3
   dac4c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dac50:	2c00      	cmp	r4, #0
   dac52:	f43f af4d 	beq.w	daaf0 <atan+0x20>
   dac56:	4622      	mov	r2, r4
   dac58:	462b      	mov	r3, r5
   dac5a:	4620      	mov	r0, r4
   dac5c:	4629      	mov	r1, r5
   dac5e:	f000 fa1f 	bl	db0a0 <__adddf3>
   dac62:	ec41 0b10 	vmov	d0, r0, r1
   dac66:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dac6a:	a365      	add	r3, pc, #404	; (adr r3, dae00 <atan+0x330>)
   dac6c:	e9d3 2300 	ldrd	r2, r3, [r3]
   dac70:	ee10 0a10 	vmov	r0, s0
   dac74:	4629      	mov	r1, r5
   dac76:	f000 fa13 	bl	db0a0 <__adddf3>
   dac7a:	4b6a      	ldr	r3, [pc, #424]	; (dae24 <atan+0x354>)
   dac7c:	2200      	movs	r2, #0
   dac7e:	f000 fe55 	bl	db92c <__aeabi_dcmpgt>
   dac82:	2800      	cmp	r0, #0
   dac84:	f43f af45 	beq.w	dab12 <atan+0x42>
   dac88:	ec45 4b10 	vmov	d0, r4, r5
   dac8c:	e7eb      	b.n	dac66 <atan+0x196>
   dac8e:	f000 f8d3 	bl	dae38 <fabs>
   dac92:	4b65      	ldr	r3, [pc, #404]	; (dae28 <atan+0x358>)
   dac94:	429e      	cmp	r6, r3
   dac96:	ec55 4b10 	vmov	r4, r5, d0
   dac9a:	dc39      	bgt.n	dad10 <atan+0x240>
   dac9c:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
   daca0:	429e      	cmp	r6, r3
   daca2:	dc62      	bgt.n	dad6a <atan+0x29a>
   daca4:	ee10 2a10 	vmov	r2, s0
   daca8:	ee10 0a10 	vmov	r0, s0
   dacac:	462b      	mov	r3, r5
   dacae:	4629      	mov	r1, r5
   dacb0:	f000 f9f6 	bl	db0a0 <__adddf3>
   dacb4:	4b5b      	ldr	r3, [pc, #364]	; (dae24 <atan+0x354>)
   dacb6:	2200      	movs	r2, #0
   dacb8:	f000 f9f0 	bl	db09c <__aeabi_dsub>
   dacbc:	2200      	movs	r2, #0
   dacbe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   dacc2:	4606      	mov	r6, r0
   dacc4:	460f      	mov	r7, r1
   dacc6:	4620      	mov	r0, r4
   dacc8:	4629      	mov	r1, r5
   dacca:	f000 f9e9 	bl	db0a0 <__adddf3>
   dacce:	4602      	mov	r2, r0
   dacd0:	460b      	mov	r3, r1
   dacd2:	4630      	mov	r0, r6
   dacd4:	4639      	mov	r1, r7
   dacd6:	f000 fcc3 	bl	db660 <__aeabi_ddiv>
   dacda:	f04f 0b00 	mov.w	fp, #0
   dacde:	4604      	mov	r4, r0
   dace0:	460d      	mov	r5, r1
   dace2:	e718      	b.n	dab16 <atan+0x46>
   dace4:	ed9f 0b48 	vldr	d0, [pc, #288]	; dae08 <atan+0x338>
   dace8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dacec:	4640      	mov	r0, r8
   dacee:	4649      	mov	r1, r9
   dacf0:	f000 f9d6 	bl	db0a0 <__adddf3>
   dacf4:	4622      	mov	r2, r4
   dacf6:	462b      	mov	r3, r5
   dacf8:	f000 fb88 	bl	db40c <__aeabi_dmul>
   dacfc:	4602      	mov	r2, r0
   dacfe:	460b      	mov	r3, r1
   dad00:	4620      	mov	r0, r4
   dad02:	4629      	mov	r1, r5
   dad04:	f000 f9ca 	bl	db09c <__aeabi_dsub>
   dad08:	ec41 0b10 	vmov	d0, r0, r1
   dad0c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dad10:	4b46      	ldr	r3, [pc, #280]	; (dae2c <atan+0x35c>)
   dad12:	429e      	cmp	r6, r3
   dad14:	da1d      	bge.n	dad52 <atan+0x282>
   dad16:	ee10 0a10 	vmov	r0, s0
   dad1a:	4b45      	ldr	r3, [pc, #276]	; (dae30 <atan+0x360>)
   dad1c:	2200      	movs	r2, #0
   dad1e:	4629      	mov	r1, r5
   dad20:	f000 f9bc 	bl	db09c <__aeabi_dsub>
   dad24:	4b42      	ldr	r3, [pc, #264]	; (dae30 <atan+0x360>)
   dad26:	4606      	mov	r6, r0
   dad28:	460f      	mov	r7, r1
   dad2a:	2200      	movs	r2, #0
   dad2c:	4620      	mov	r0, r4
   dad2e:	4629      	mov	r1, r5
   dad30:	f000 fb6c 	bl	db40c <__aeabi_dmul>
   dad34:	4b3b      	ldr	r3, [pc, #236]	; (dae24 <atan+0x354>)
   dad36:	2200      	movs	r2, #0
   dad38:	f000 f9b2 	bl	db0a0 <__adddf3>
   dad3c:	4602      	mov	r2, r0
   dad3e:	460b      	mov	r3, r1
   dad40:	4630      	mov	r0, r6
   dad42:	4639      	mov	r1, r7
   dad44:	f000 fc8c 	bl	db660 <__aeabi_ddiv>
   dad48:	f04f 0b02 	mov.w	fp, #2
   dad4c:	4604      	mov	r4, r0
   dad4e:	460d      	mov	r5, r1
   dad50:	e6e1      	b.n	dab16 <atan+0x46>
   dad52:	462b      	mov	r3, r5
   dad54:	ee10 2a10 	vmov	r2, s0
   dad58:	4936      	ldr	r1, [pc, #216]	; (dae34 <atan+0x364>)
   dad5a:	2000      	movs	r0, #0
   dad5c:	f000 fc80 	bl	db660 <__aeabi_ddiv>
   dad60:	f04f 0b03 	mov.w	fp, #3
   dad64:	4604      	mov	r4, r0
   dad66:	460d      	mov	r5, r1
   dad68:	e6d5      	b.n	dab16 <atan+0x46>
   dad6a:	ee10 0a10 	vmov	r0, s0
   dad6e:	4b2d      	ldr	r3, [pc, #180]	; (dae24 <atan+0x354>)
   dad70:	2200      	movs	r2, #0
   dad72:	4629      	mov	r1, r5
   dad74:	f000 f992 	bl	db09c <__aeabi_dsub>
   dad78:	4b2a      	ldr	r3, [pc, #168]	; (dae24 <atan+0x354>)
   dad7a:	2200      	movs	r2, #0
   dad7c:	4606      	mov	r6, r0
   dad7e:	460f      	mov	r7, r1
   dad80:	4620      	mov	r0, r4
   dad82:	4629      	mov	r1, r5
   dad84:	f000 f98c 	bl	db0a0 <__adddf3>
   dad88:	4602      	mov	r2, r0
   dad8a:	460b      	mov	r3, r1
   dad8c:	4630      	mov	r0, r6
   dad8e:	4639      	mov	r1, r7
   dad90:	f000 fc66 	bl	db660 <__aeabi_ddiv>
   dad94:	f04f 0b01 	mov.w	fp, #1
   dad98:	4604      	mov	r4, r0
   dad9a:	460d      	mov	r5, r1
   dad9c:	e6bb      	b.n	dab16 <atan+0x46>
   dad9e:	bf00      	nop
   dada0:	54442d18 	.word	0x54442d18
   dada4:	3ff921fb 	.word	0x3ff921fb
   dada8:	e322da11 	.word	0xe322da11
   dadac:	3f90ad3a 	.word	0x3f90ad3a
   dadb0:	24760deb 	.word	0x24760deb
   dadb4:	3fa97b4b 	.word	0x3fa97b4b
   dadb8:	a0d03d51 	.word	0xa0d03d51
   dadbc:	3fb10d66 	.word	0x3fb10d66
   dadc0:	c54c206e 	.word	0xc54c206e
   dadc4:	3fb745cd 	.word	0x3fb745cd
   dadc8:	920083ff 	.word	0x920083ff
   dadcc:	3fc24924 	.word	0x3fc24924
   dadd0:	5555550d 	.word	0x5555550d
   dadd4:	3fd55555 	.word	0x3fd55555
   dadd8:	2c6a6c2f 	.word	0x2c6a6c2f
   daddc:	bfa2b444 	.word	0xbfa2b444
   dade0:	52defd9a 	.word	0x52defd9a
   dade4:	3fadde2d 	.word	0x3fadde2d
   dade8:	af749a6d 	.word	0xaf749a6d
   dadec:	3fb3b0f2 	.word	0x3fb3b0f2
   dadf0:	fe231671 	.word	0xfe231671
   dadf4:	3fbc71c6 	.word	0x3fbc71c6
   dadf8:	9998ebc4 	.word	0x9998ebc4
   dadfc:	3fc99999 	.word	0x3fc99999
   dae00:	8800759c 	.word	0x8800759c
   dae04:	7e37e43c 	.word	0x7e37e43c
   dae08:	54442d18 	.word	0x54442d18
   dae0c:	bff921fb 	.word	0xbff921fb
   dae10:	440fffff 	.word	0x440fffff
   dae14:	7ff00000 	.word	0x7ff00000
   dae18:	3fdbffff 	.word	0x3fdbffff
   dae1c:	000dca80 	.word	0x000dca80
   dae20:	000dcaa0 	.word	0x000dcaa0
   dae24:	3ff00000 	.word	0x3ff00000
   dae28:	3ff2ffff 	.word	0x3ff2ffff
   dae2c:	40038000 	.word	0x40038000
   dae30:	3ff80000 	.word	0x3ff80000
   dae34:	bff00000 	.word	0xbff00000

000dae38 <fabs>:
   dae38:	ec51 0b10 	vmov	r0, r1, d0
   dae3c:	ee10 2a10 	vmov	r2, s0
   dae40:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   dae44:	ec43 2b10 	vmov	d0, r2, r3
   dae48:	4770      	bx	lr
   dae4a:	bf00      	nop

000dae4c <sqrt>:
   dae4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   dae50:	ed2d 8b02 	vpush	{d8}
   dae54:	b08b      	sub	sp, #44	; 0x2c
   dae56:	ec55 4b10 	vmov	r4, r5, d0
   dae5a:	f000 f855 	bl	daf08 <__ieee754_sqrt>
   dae5e:	4b28      	ldr	r3, [pc, #160]	; (daf00 <sqrt+0xb4>)
   dae60:	eeb0 8a40 	vmov.f32	s16, s0
   dae64:	eef0 8a60 	vmov.f32	s17, s1
   dae68:	f993 7000 	ldrsb.w	r7, [r3]
   dae6c:	1c7b      	adds	r3, r7, #1
   dae6e:	d012      	beq.n	dae96 <sqrt+0x4a>
   dae70:	4622      	mov	r2, r4
   dae72:	462b      	mov	r3, r5
   dae74:	4620      	mov	r0, r4
   dae76:	4629      	mov	r1, r5
   dae78:	f000 fd62 	bl	db940 <__aeabi_dcmpun>
   dae7c:	4606      	mov	r6, r0
   dae7e:	b950      	cbnz	r0, dae96 <sqrt+0x4a>
   dae80:	f04f 0800 	mov.w	r8, #0
   dae84:	f04f 0900 	mov.w	r9, #0
   dae88:	4620      	mov	r0, r4
   dae8a:	4629      	mov	r1, r5
   dae8c:	4642      	mov	r2, r8
   dae8e:	464b      	mov	r3, r9
   dae90:	f000 fd2e 	bl	db8f0 <__aeabi_dcmplt>
   dae94:	b940      	cbnz	r0, daea8 <sqrt+0x5c>
   dae96:	eeb0 0a48 	vmov.f32	s0, s16
   dae9a:	eef0 0a68 	vmov.f32	s1, s17
   dae9e:	b00b      	add	sp, #44	; 0x2c
   daea0:	ecbd 8b02 	vpop	{d8}
   daea4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   daea8:	4b16      	ldr	r3, [pc, #88]	; (daf04 <sqrt+0xb8>)
   daeaa:	9608      	str	r6, [sp, #32]
   daeac:	2201      	movs	r2, #1
   daeae:	e9cd 4504 	strd	r4, r5, [sp, #16]
   daeb2:	e9cd 4502 	strd	r4, r5, [sp, #8]
   daeb6:	9200      	str	r2, [sp, #0]
   daeb8:	9301      	str	r3, [sp, #4]
   daeba:	b197      	cbz	r7, daee2 <sqrt+0x96>
   daebc:	4642      	mov	r2, r8
   daebe:	464b      	mov	r3, r9
   daec0:	4640      	mov	r0, r8
   daec2:	4649      	mov	r1, r9
   daec4:	f000 fbcc 	bl	db660 <__aeabi_ddiv>
   daec8:	2f02      	cmp	r7, #2
   daeca:	e9cd 0106 	strd	r0, r1, [sp, #24]
   daece:	d10a      	bne.n	daee6 <sqrt+0x9a>
   daed0:	f7fc fe94 	bl	d7bfc <__errno>
   daed4:	2321      	movs	r3, #33	; 0x21
   daed6:	6003      	str	r3, [r0, #0]
   daed8:	9b08      	ldr	r3, [sp, #32]
   daeda:	b963      	cbnz	r3, daef6 <sqrt+0xaa>
   daedc:	ed9d 8b06 	vldr	d8, [sp, #24]
   daee0:	e7d9      	b.n	dae96 <sqrt+0x4a>
   daee2:	e9cd 8906 	strd	r8, r9, [sp, #24]
   daee6:	4668      	mov	r0, sp
   daee8:	f000 f8d2 	bl	db090 <matherr>
   daeec:	2800      	cmp	r0, #0
   daeee:	d0ef      	beq.n	daed0 <sqrt+0x84>
   daef0:	9b08      	ldr	r3, [sp, #32]
   daef2:	2b00      	cmp	r3, #0
   daef4:	d0f2      	beq.n	daedc <sqrt+0x90>
   daef6:	f7fc fe81 	bl	d7bfc <__errno>
   daefa:	9b08      	ldr	r3, [sp, #32]
   daefc:	6003      	str	r3, [r0, #0]
   daefe:	e7ed      	b.n	daedc <sqrt+0x90>
   daf00:	2003e2a0 	.word	0x2003e2a0
   daf04:	000dcac0 	.word	0x000dcac0

000daf08 <__ieee754_sqrt>:
   daf08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   daf0c:	4a5f      	ldr	r2, [pc, #380]	; (db08c <__ieee754_sqrt+0x184>)
   daf0e:	ec57 6b10 	vmov	r6, r7, d0
   daf12:	43ba      	bics	r2, r7
   daf14:	f000 8098 	beq.w	db048 <__ieee754_sqrt+0x140>
   daf18:	2f00      	cmp	r7, #0
   daf1a:	ee10 4a10 	vmov	r4, s0
   daf1e:	463b      	mov	r3, r7
   daf20:	dd4e      	ble.n	dafc0 <__ieee754_sqrt+0xb8>
   daf22:	1539      	asrs	r1, r7, #20
   daf24:	d05b      	beq.n	dafde <__ieee754_sqrt+0xd6>
   daf26:	f3c3 0313 	ubfx	r3, r3, #0, #20
   daf2a:	07ca      	lsls	r2, r1, #31
   daf2c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   daf30:	f2a1 3eff 	subw	lr, r1, #1023	; 0x3ff
   daf34:	d403      	bmi.n	daf3e <__ieee754_sqrt+0x36>
   daf36:	005b      	lsls	r3, r3, #1
   daf38:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
   daf3c:	0064      	lsls	r4, r4, #1
   daf3e:	0fe2      	lsrs	r2, r4, #31
   daf40:	f04f 0c00 	mov.w	ip, #0
   daf44:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   daf48:	ea4f 0e6e 	mov.w	lr, lr, asr #1
   daf4c:	0064      	lsls	r4, r4, #1
   daf4e:	4666      	mov	r6, ip
   daf50:	2516      	movs	r5, #22
   daf52:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   daf56:	18b1      	adds	r1, r6, r2
   daf58:	4299      	cmp	r1, r3
   daf5a:	dc02      	bgt.n	daf62 <__ieee754_sqrt+0x5a>
   daf5c:	1a5b      	subs	r3, r3, r1
   daf5e:	188e      	adds	r6, r1, r2
   daf60:	4494      	add	ip, r2
   daf62:	005b      	lsls	r3, r3, #1
   daf64:	3d01      	subs	r5, #1
   daf66:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
   daf6a:	ea4f 0252 	mov.w	r2, r2, lsr #1
   daf6e:	ea4f 0444 	mov.w	r4, r4, lsl #1
   daf72:	d1f0      	bne.n	daf56 <__ieee754_sqrt+0x4e>
   daf74:	462f      	mov	r7, r5
   daf76:	2020      	movs	r0, #32
   daf78:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   daf7c:	e009      	b.n	daf92 <__ieee754_sqrt+0x8a>
   daf7e:	d03e      	beq.n	daffe <__ieee754_sqrt+0xf6>
   daf80:	0fe1      	lsrs	r1, r4, #31
   daf82:	3801      	subs	r0, #1
   daf84:	ea4f 0252 	mov.w	r2, r2, lsr #1
   daf88:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   daf8c:	ea4f 0444 	mov.w	r4, r4, lsl #1
   daf90:	d03e      	beq.n	db010 <__ieee754_sqrt+0x108>
   daf92:	42b3      	cmp	r3, r6
   daf94:	eb02 0105 	add.w	r1, r2, r5
   daf98:	ddf1      	ble.n	daf7e <__ieee754_sqrt+0x76>
   daf9a:	2900      	cmp	r1, #0
   daf9c:	eb01 0502 	add.w	r5, r1, r2
   dafa0:	db09      	blt.n	dafb6 <__ieee754_sqrt+0xae>
   dafa2:	46b0      	mov	r8, r6
   dafa4:	1b9b      	subs	r3, r3, r6
   dafa6:	42a1      	cmp	r1, r4
   dafa8:	bf88      	it	hi
   dafaa:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
   dafae:	1a64      	subs	r4, r4, r1
   dafb0:	4417      	add	r7, r2
   dafb2:	4646      	mov	r6, r8
   dafb4:	e7e4      	b.n	daf80 <__ieee754_sqrt+0x78>
   dafb6:	2d00      	cmp	r5, #0
   dafb8:	dbf3      	blt.n	dafa2 <__ieee754_sqrt+0x9a>
   dafba:	f106 0801 	add.w	r8, r6, #1
   dafbe:	e7f1      	b.n	dafa4 <__ieee754_sqrt+0x9c>
   dafc0:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
   dafc4:	4332      	orrs	r2, r6
   dafc6:	d036      	beq.n	db036 <__ieee754_sqrt+0x12e>
   dafc8:	2f00      	cmp	r7, #0
   dafca:	d14d      	bne.n	db068 <__ieee754_sqrt+0x160>
   dafcc:	4639      	mov	r1, r7
   dafce:	0ae2      	lsrs	r2, r4, #11
   dafd0:	3915      	subs	r1, #21
   dafd2:	0564      	lsls	r4, r4, #21
   dafd4:	4613      	mov	r3, r2
   dafd6:	2a00      	cmp	r2, #0
   dafd8:	d0f9      	beq.n	dafce <__ieee754_sqrt+0xc6>
   dafda:	02d7      	lsls	r7, r2, #11
   dafdc:	d451      	bmi.n	db082 <__ieee754_sqrt+0x17a>
   dafde:	2000      	movs	r0, #0
   dafe0:	005b      	lsls	r3, r3, #1
   dafe2:	02de      	lsls	r6, r3, #11
   dafe4:	4605      	mov	r5, r0
   dafe6:	f100 0001 	add.w	r0, r0, #1
   dafea:	d5f9      	bpl.n	dafe0 <__ieee754_sqrt+0xd8>
   dafec:	461a      	mov	r2, r3
   dafee:	4623      	mov	r3, r4
   daff0:	4084      	lsls	r4, r0
   daff2:	f1c0 0020 	rsb	r0, r0, #32
   daff6:	40c3      	lsrs	r3, r0
   daff8:	4313      	orrs	r3, r2
   daffa:	1b49      	subs	r1, r1, r5
   daffc:	e793      	b.n	daf26 <__ieee754_sqrt+0x1e>
   daffe:	42a1      	cmp	r1, r4
   db000:	d8be      	bhi.n	daf80 <__ieee754_sqrt+0x78>
   db002:	2900      	cmp	r1, #0
   db004:	eb01 0502 	add.w	r5, r1, r2
   db008:	dbd5      	blt.n	dafb6 <__ieee754_sqrt+0xae>
   db00a:	4698      	mov	r8, r3
   db00c:	2300      	movs	r3, #0
   db00e:	e7ce      	b.n	dafae <__ieee754_sqrt+0xa6>
   db010:	4323      	orrs	r3, r4
   db012:	d112      	bne.n	db03a <__ieee754_sqrt+0x132>
   db014:	0878      	lsrs	r0, r7, #1
   db016:	ea4f 016c 	mov.w	r1, ip, asr #1
   db01a:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
   db01e:	f01c 0f01 	tst.w	ip, #1
   db022:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
   db026:	bf18      	it	ne
   db028:	f040 4000 	orrne.w	r0, r0, #2147483648	; 0x80000000
   db02c:	eb01 530e 	add.w	r3, r1, lr, lsl #20
   db030:	4602      	mov	r2, r0
   db032:	ec43 2b10 	vmov	d0, r2, r3
   db036:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   db03a:	1c7b      	adds	r3, r7, #1
   db03c:	bf16      	itet	ne
   db03e:	1c78      	addne	r0, r7, #1
   db040:	f10c 0c01 	addeq.w	ip, ip, #1
   db044:	0840      	lsrne	r0, r0, #1
   db046:	e7e6      	b.n	db016 <__ieee754_sqrt+0x10e>
   db048:	ee10 2a10 	vmov	r2, s0
   db04c:	ee10 0a10 	vmov	r0, s0
   db050:	463b      	mov	r3, r7
   db052:	4639      	mov	r1, r7
   db054:	f000 f9da 	bl	db40c <__aeabi_dmul>
   db058:	4632      	mov	r2, r6
   db05a:	463b      	mov	r3, r7
   db05c:	f000 f820 	bl	db0a0 <__adddf3>
   db060:	ec41 0b10 	vmov	d0, r0, r1
   db064:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   db068:	ee10 2a10 	vmov	r2, s0
   db06c:	4630      	mov	r0, r6
   db06e:	4639      	mov	r1, r7
   db070:	f000 f814 	bl	db09c <__aeabi_dsub>
   db074:	4602      	mov	r2, r0
   db076:	460b      	mov	r3, r1
   db078:	f000 faf2 	bl	db660 <__aeabi_ddiv>
   db07c:	ec41 0b10 	vmov	d0, r0, r1
   db080:	e7d9      	b.n	db036 <__ieee754_sqrt+0x12e>
   db082:	4623      	mov	r3, r4
   db084:	2020      	movs	r0, #32
   db086:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   db08a:	e7b4      	b.n	daff6 <__ieee754_sqrt+0xee>
   db08c:	7ff00000 	.word	0x7ff00000

000db090 <matherr>:
   db090:	2000      	movs	r0, #0
   db092:	4770      	bx	lr

000db094 <__aeabi_drsub>:
   db094:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   db098:	e002      	b.n	db0a0 <__adddf3>
   db09a:	bf00      	nop

000db09c <__aeabi_dsub>:
   db09c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000db0a0 <__adddf3>:
   db0a0:	b530      	push	{r4, r5, lr}
   db0a2:	ea4f 0441 	mov.w	r4, r1, lsl #1
   db0a6:	ea4f 0543 	mov.w	r5, r3, lsl #1
   db0aa:	ea94 0f05 	teq	r4, r5
   db0ae:	bf08      	it	eq
   db0b0:	ea90 0f02 	teqeq	r0, r2
   db0b4:	bf1f      	itttt	ne
   db0b6:	ea54 0c00 	orrsne.w	ip, r4, r0
   db0ba:	ea55 0c02 	orrsne.w	ip, r5, r2
   db0be:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   db0c2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   db0c6:	f000 80e2 	beq.w	db28e <__adddf3+0x1ee>
   db0ca:	ea4f 5454 	mov.w	r4, r4, lsr #21
   db0ce:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   db0d2:	bfb8      	it	lt
   db0d4:	426d      	neglt	r5, r5
   db0d6:	dd0c      	ble.n	db0f2 <__adddf3+0x52>
   db0d8:	442c      	add	r4, r5
   db0da:	ea80 0202 	eor.w	r2, r0, r2
   db0de:	ea81 0303 	eor.w	r3, r1, r3
   db0e2:	ea82 0000 	eor.w	r0, r2, r0
   db0e6:	ea83 0101 	eor.w	r1, r3, r1
   db0ea:	ea80 0202 	eor.w	r2, r0, r2
   db0ee:	ea81 0303 	eor.w	r3, r1, r3
   db0f2:	2d36      	cmp	r5, #54	; 0x36
   db0f4:	bf88      	it	hi
   db0f6:	bd30      	pophi	{r4, r5, pc}
   db0f8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   db0fc:	ea4f 3101 	mov.w	r1, r1, lsl #12
   db100:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   db104:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   db108:	d002      	beq.n	db110 <__adddf3+0x70>
   db10a:	4240      	negs	r0, r0
   db10c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   db110:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   db114:	ea4f 3303 	mov.w	r3, r3, lsl #12
   db118:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   db11c:	d002      	beq.n	db124 <__adddf3+0x84>
   db11e:	4252      	negs	r2, r2
   db120:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   db124:	ea94 0f05 	teq	r4, r5
   db128:	f000 80a7 	beq.w	db27a <__adddf3+0x1da>
   db12c:	f1a4 0401 	sub.w	r4, r4, #1
   db130:	f1d5 0e20 	rsbs	lr, r5, #32
   db134:	db0d      	blt.n	db152 <__adddf3+0xb2>
   db136:	fa02 fc0e 	lsl.w	ip, r2, lr
   db13a:	fa22 f205 	lsr.w	r2, r2, r5
   db13e:	1880      	adds	r0, r0, r2
   db140:	f141 0100 	adc.w	r1, r1, #0
   db144:	fa03 f20e 	lsl.w	r2, r3, lr
   db148:	1880      	adds	r0, r0, r2
   db14a:	fa43 f305 	asr.w	r3, r3, r5
   db14e:	4159      	adcs	r1, r3
   db150:	e00e      	b.n	db170 <__adddf3+0xd0>
   db152:	f1a5 0520 	sub.w	r5, r5, #32
   db156:	f10e 0e20 	add.w	lr, lr, #32
   db15a:	2a01      	cmp	r2, #1
   db15c:	fa03 fc0e 	lsl.w	ip, r3, lr
   db160:	bf28      	it	cs
   db162:	f04c 0c02 	orrcs.w	ip, ip, #2
   db166:	fa43 f305 	asr.w	r3, r3, r5
   db16a:	18c0      	adds	r0, r0, r3
   db16c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   db170:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   db174:	d507      	bpl.n	db186 <__adddf3+0xe6>
   db176:	f04f 0e00 	mov.w	lr, #0
   db17a:	f1dc 0c00 	rsbs	ip, ip, #0
   db17e:	eb7e 0000 	sbcs.w	r0, lr, r0
   db182:	eb6e 0101 	sbc.w	r1, lr, r1
   db186:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   db18a:	d31b      	bcc.n	db1c4 <__adddf3+0x124>
   db18c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   db190:	d30c      	bcc.n	db1ac <__adddf3+0x10c>
   db192:	0849      	lsrs	r1, r1, #1
   db194:	ea5f 0030 	movs.w	r0, r0, rrx
   db198:	ea4f 0c3c 	mov.w	ip, ip, rrx
   db19c:	f104 0401 	add.w	r4, r4, #1
   db1a0:	ea4f 5244 	mov.w	r2, r4, lsl #21
   db1a4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   db1a8:	f080 809a 	bcs.w	db2e0 <__adddf3+0x240>
   db1ac:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   db1b0:	bf08      	it	eq
   db1b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   db1b6:	f150 0000 	adcs.w	r0, r0, #0
   db1ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   db1be:	ea41 0105 	orr.w	r1, r1, r5
   db1c2:	bd30      	pop	{r4, r5, pc}
   db1c4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   db1c8:	4140      	adcs	r0, r0
   db1ca:	eb41 0101 	adc.w	r1, r1, r1
   db1ce:	3c01      	subs	r4, #1
   db1d0:	bf28      	it	cs
   db1d2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   db1d6:	d2e9      	bcs.n	db1ac <__adddf3+0x10c>
   db1d8:	f091 0f00 	teq	r1, #0
   db1dc:	bf04      	itt	eq
   db1de:	4601      	moveq	r1, r0
   db1e0:	2000      	moveq	r0, #0
   db1e2:	fab1 f381 	clz	r3, r1
   db1e6:	bf08      	it	eq
   db1e8:	3320      	addeq	r3, #32
   db1ea:	f1a3 030b 	sub.w	r3, r3, #11
   db1ee:	f1b3 0220 	subs.w	r2, r3, #32
   db1f2:	da0c      	bge.n	db20e <__adddf3+0x16e>
   db1f4:	320c      	adds	r2, #12
   db1f6:	dd08      	ble.n	db20a <__adddf3+0x16a>
   db1f8:	f102 0c14 	add.w	ip, r2, #20
   db1fc:	f1c2 020c 	rsb	r2, r2, #12
   db200:	fa01 f00c 	lsl.w	r0, r1, ip
   db204:	fa21 f102 	lsr.w	r1, r1, r2
   db208:	e00c      	b.n	db224 <__adddf3+0x184>
   db20a:	f102 0214 	add.w	r2, r2, #20
   db20e:	bfd8      	it	le
   db210:	f1c2 0c20 	rsble	ip, r2, #32
   db214:	fa01 f102 	lsl.w	r1, r1, r2
   db218:	fa20 fc0c 	lsr.w	ip, r0, ip
   db21c:	bfdc      	itt	le
   db21e:	ea41 010c 	orrle.w	r1, r1, ip
   db222:	4090      	lslle	r0, r2
   db224:	1ae4      	subs	r4, r4, r3
   db226:	bfa2      	ittt	ge
   db228:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   db22c:	4329      	orrge	r1, r5
   db22e:	bd30      	popge	{r4, r5, pc}
   db230:	ea6f 0404 	mvn.w	r4, r4
   db234:	3c1f      	subs	r4, #31
   db236:	da1c      	bge.n	db272 <__adddf3+0x1d2>
   db238:	340c      	adds	r4, #12
   db23a:	dc0e      	bgt.n	db25a <__adddf3+0x1ba>
   db23c:	f104 0414 	add.w	r4, r4, #20
   db240:	f1c4 0220 	rsb	r2, r4, #32
   db244:	fa20 f004 	lsr.w	r0, r0, r4
   db248:	fa01 f302 	lsl.w	r3, r1, r2
   db24c:	ea40 0003 	orr.w	r0, r0, r3
   db250:	fa21 f304 	lsr.w	r3, r1, r4
   db254:	ea45 0103 	orr.w	r1, r5, r3
   db258:	bd30      	pop	{r4, r5, pc}
   db25a:	f1c4 040c 	rsb	r4, r4, #12
   db25e:	f1c4 0220 	rsb	r2, r4, #32
   db262:	fa20 f002 	lsr.w	r0, r0, r2
   db266:	fa01 f304 	lsl.w	r3, r1, r4
   db26a:	ea40 0003 	orr.w	r0, r0, r3
   db26e:	4629      	mov	r1, r5
   db270:	bd30      	pop	{r4, r5, pc}
   db272:	fa21 f004 	lsr.w	r0, r1, r4
   db276:	4629      	mov	r1, r5
   db278:	bd30      	pop	{r4, r5, pc}
   db27a:	f094 0f00 	teq	r4, #0
   db27e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   db282:	bf06      	itte	eq
   db284:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   db288:	3401      	addeq	r4, #1
   db28a:	3d01      	subne	r5, #1
   db28c:	e74e      	b.n	db12c <__adddf3+0x8c>
   db28e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   db292:	bf18      	it	ne
   db294:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   db298:	d029      	beq.n	db2ee <__adddf3+0x24e>
   db29a:	ea94 0f05 	teq	r4, r5
   db29e:	bf08      	it	eq
   db2a0:	ea90 0f02 	teqeq	r0, r2
   db2a4:	d005      	beq.n	db2b2 <__adddf3+0x212>
   db2a6:	ea54 0c00 	orrs.w	ip, r4, r0
   db2aa:	bf04      	itt	eq
   db2ac:	4619      	moveq	r1, r3
   db2ae:	4610      	moveq	r0, r2
   db2b0:	bd30      	pop	{r4, r5, pc}
   db2b2:	ea91 0f03 	teq	r1, r3
   db2b6:	bf1e      	ittt	ne
   db2b8:	2100      	movne	r1, #0
   db2ba:	2000      	movne	r0, #0
   db2bc:	bd30      	popne	{r4, r5, pc}
   db2be:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   db2c2:	d105      	bne.n	db2d0 <__adddf3+0x230>
   db2c4:	0040      	lsls	r0, r0, #1
   db2c6:	4149      	adcs	r1, r1
   db2c8:	bf28      	it	cs
   db2ca:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   db2ce:	bd30      	pop	{r4, r5, pc}
   db2d0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   db2d4:	bf3c      	itt	cc
   db2d6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   db2da:	bd30      	popcc	{r4, r5, pc}
   db2dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   db2e0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   db2e4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   db2e8:	f04f 0000 	mov.w	r0, #0
   db2ec:	bd30      	pop	{r4, r5, pc}
   db2ee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   db2f2:	bf1a      	itte	ne
   db2f4:	4619      	movne	r1, r3
   db2f6:	4610      	movne	r0, r2
   db2f8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   db2fc:	bf1c      	itt	ne
   db2fe:	460b      	movne	r3, r1
   db300:	4602      	movne	r2, r0
   db302:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   db306:	bf06      	itte	eq
   db308:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   db30c:	ea91 0f03 	teqeq	r1, r3
   db310:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   db314:	bd30      	pop	{r4, r5, pc}
   db316:	bf00      	nop

000db318 <__aeabi_ui2d>:
   db318:	f090 0f00 	teq	r0, #0
   db31c:	bf04      	itt	eq
   db31e:	2100      	moveq	r1, #0
   db320:	4770      	bxeq	lr
   db322:	b530      	push	{r4, r5, lr}
   db324:	f44f 6480 	mov.w	r4, #1024	; 0x400
   db328:	f104 0432 	add.w	r4, r4, #50	; 0x32
   db32c:	f04f 0500 	mov.w	r5, #0
   db330:	f04f 0100 	mov.w	r1, #0
   db334:	e750      	b.n	db1d8 <__adddf3+0x138>
   db336:	bf00      	nop

000db338 <__aeabi_i2d>:
   db338:	f090 0f00 	teq	r0, #0
   db33c:	bf04      	itt	eq
   db33e:	2100      	moveq	r1, #0
   db340:	4770      	bxeq	lr
   db342:	b530      	push	{r4, r5, lr}
   db344:	f44f 6480 	mov.w	r4, #1024	; 0x400
   db348:	f104 0432 	add.w	r4, r4, #50	; 0x32
   db34c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   db350:	bf48      	it	mi
   db352:	4240      	negmi	r0, r0
   db354:	f04f 0100 	mov.w	r1, #0
   db358:	e73e      	b.n	db1d8 <__adddf3+0x138>
   db35a:	bf00      	nop

000db35c <__aeabi_f2d>:
   db35c:	0042      	lsls	r2, r0, #1
   db35e:	ea4f 01e2 	mov.w	r1, r2, asr #3
   db362:	ea4f 0131 	mov.w	r1, r1, rrx
   db366:	ea4f 7002 	mov.w	r0, r2, lsl #28
   db36a:	bf1f      	itttt	ne
   db36c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   db370:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   db374:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   db378:	4770      	bxne	lr
   db37a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   db37e:	bf08      	it	eq
   db380:	4770      	bxeq	lr
   db382:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   db386:	bf04      	itt	eq
   db388:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   db38c:	4770      	bxeq	lr
   db38e:	b530      	push	{r4, r5, lr}
   db390:	f44f 7460 	mov.w	r4, #896	; 0x380
   db394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   db398:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   db39c:	e71c      	b.n	db1d8 <__adddf3+0x138>
   db39e:	bf00      	nop

000db3a0 <__aeabi_ul2d>:
   db3a0:	ea50 0201 	orrs.w	r2, r0, r1
   db3a4:	bf08      	it	eq
   db3a6:	4770      	bxeq	lr
   db3a8:	b530      	push	{r4, r5, lr}
   db3aa:	f04f 0500 	mov.w	r5, #0
   db3ae:	e00a      	b.n	db3c6 <__aeabi_l2d+0x16>

000db3b0 <__aeabi_l2d>:
   db3b0:	ea50 0201 	orrs.w	r2, r0, r1
   db3b4:	bf08      	it	eq
   db3b6:	4770      	bxeq	lr
   db3b8:	b530      	push	{r4, r5, lr}
   db3ba:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   db3be:	d502      	bpl.n	db3c6 <__aeabi_l2d+0x16>
   db3c0:	4240      	negs	r0, r0
   db3c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   db3c6:	f44f 6480 	mov.w	r4, #1024	; 0x400
   db3ca:	f104 0432 	add.w	r4, r4, #50	; 0x32
   db3ce:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   db3d2:	f43f aed8 	beq.w	db186 <__adddf3+0xe6>
   db3d6:	f04f 0203 	mov.w	r2, #3
   db3da:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   db3de:	bf18      	it	ne
   db3e0:	3203      	addne	r2, #3
   db3e2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   db3e6:	bf18      	it	ne
   db3e8:	3203      	addne	r2, #3
   db3ea:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   db3ee:	f1c2 0320 	rsb	r3, r2, #32
   db3f2:	fa00 fc03 	lsl.w	ip, r0, r3
   db3f6:	fa20 f002 	lsr.w	r0, r0, r2
   db3fa:	fa01 fe03 	lsl.w	lr, r1, r3
   db3fe:	ea40 000e 	orr.w	r0, r0, lr
   db402:	fa21 f102 	lsr.w	r1, r1, r2
   db406:	4414      	add	r4, r2
   db408:	e6bd      	b.n	db186 <__adddf3+0xe6>
   db40a:	bf00      	nop

000db40c <__aeabi_dmul>:
   db40c:	b570      	push	{r4, r5, r6, lr}
   db40e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   db412:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   db416:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   db41a:	bf1d      	ittte	ne
   db41c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   db420:	ea94 0f0c 	teqne	r4, ip
   db424:	ea95 0f0c 	teqne	r5, ip
   db428:	f000 f8de 	bleq	db5e8 <__aeabi_dmul+0x1dc>
   db42c:	442c      	add	r4, r5
   db42e:	ea81 0603 	eor.w	r6, r1, r3
   db432:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   db436:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   db43a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   db43e:	bf18      	it	ne
   db440:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   db444:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   db448:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   db44c:	d038      	beq.n	db4c0 <__aeabi_dmul+0xb4>
   db44e:	fba0 ce02 	umull	ip, lr, r0, r2
   db452:	f04f 0500 	mov.w	r5, #0
   db456:	fbe1 e502 	umlal	lr, r5, r1, r2
   db45a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   db45e:	fbe0 e503 	umlal	lr, r5, r0, r3
   db462:	f04f 0600 	mov.w	r6, #0
   db466:	fbe1 5603 	umlal	r5, r6, r1, r3
   db46a:	f09c 0f00 	teq	ip, #0
   db46e:	bf18      	it	ne
   db470:	f04e 0e01 	orrne.w	lr, lr, #1
   db474:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   db478:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   db47c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   db480:	d204      	bcs.n	db48c <__aeabi_dmul+0x80>
   db482:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   db486:	416d      	adcs	r5, r5
   db488:	eb46 0606 	adc.w	r6, r6, r6
   db48c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   db490:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   db494:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   db498:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   db49c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   db4a0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   db4a4:	bf88      	it	hi
   db4a6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   db4aa:	d81e      	bhi.n	db4ea <__aeabi_dmul+0xde>
   db4ac:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   db4b0:	bf08      	it	eq
   db4b2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   db4b6:	f150 0000 	adcs.w	r0, r0, #0
   db4ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   db4be:	bd70      	pop	{r4, r5, r6, pc}
   db4c0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   db4c4:	ea46 0101 	orr.w	r1, r6, r1
   db4c8:	ea40 0002 	orr.w	r0, r0, r2
   db4cc:	ea81 0103 	eor.w	r1, r1, r3
   db4d0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   db4d4:	bfc2      	ittt	gt
   db4d6:	ebd4 050c 	rsbsgt	r5, r4, ip
   db4da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   db4de:	bd70      	popgt	{r4, r5, r6, pc}
   db4e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   db4e4:	f04f 0e00 	mov.w	lr, #0
   db4e8:	3c01      	subs	r4, #1
   db4ea:	f300 80ab 	bgt.w	db644 <__aeabi_dmul+0x238>
   db4ee:	f114 0f36 	cmn.w	r4, #54	; 0x36
   db4f2:	bfde      	ittt	le
   db4f4:	2000      	movle	r0, #0
   db4f6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   db4fa:	bd70      	pople	{r4, r5, r6, pc}
   db4fc:	f1c4 0400 	rsb	r4, r4, #0
   db500:	3c20      	subs	r4, #32
   db502:	da35      	bge.n	db570 <__aeabi_dmul+0x164>
   db504:	340c      	adds	r4, #12
   db506:	dc1b      	bgt.n	db540 <__aeabi_dmul+0x134>
   db508:	f104 0414 	add.w	r4, r4, #20
   db50c:	f1c4 0520 	rsb	r5, r4, #32
   db510:	fa00 f305 	lsl.w	r3, r0, r5
   db514:	fa20 f004 	lsr.w	r0, r0, r4
   db518:	fa01 f205 	lsl.w	r2, r1, r5
   db51c:	ea40 0002 	orr.w	r0, r0, r2
   db520:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   db524:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   db528:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   db52c:	fa21 f604 	lsr.w	r6, r1, r4
   db530:	eb42 0106 	adc.w	r1, r2, r6
   db534:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   db538:	bf08      	it	eq
   db53a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   db53e:	bd70      	pop	{r4, r5, r6, pc}
   db540:	f1c4 040c 	rsb	r4, r4, #12
   db544:	f1c4 0520 	rsb	r5, r4, #32
   db548:	fa00 f304 	lsl.w	r3, r0, r4
   db54c:	fa20 f005 	lsr.w	r0, r0, r5
   db550:	fa01 f204 	lsl.w	r2, r1, r4
   db554:	ea40 0002 	orr.w	r0, r0, r2
   db558:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   db55c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   db560:	f141 0100 	adc.w	r1, r1, #0
   db564:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   db568:	bf08      	it	eq
   db56a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   db56e:	bd70      	pop	{r4, r5, r6, pc}
   db570:	f1c4 0520 	rsb	r5, r4, #32
   db574:	fa00 f205 	lsl.w	r2, r0, r5
   db578:	ea4e 0e02 	orr.w	lr, lr, r2
   db57c:	fa20 f304 	lsr.w	r3, r0, r4
   db580:	fa01 f205 	lsl.w	r2, r1, r5
   db584:	ea43 0302 	orr.w	r3, r3, r2
   db588:	fa21 f004 	lsr.w	r0, r1, r4
   db58c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   db590:	fa21 f204 	lsr.w	r2, r1, r4
   db594:	ea20 0002 	bic.w	r0, r0, r2
   db598:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   db59c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   db5a0:	bf08      	it	eq
   db5a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   db5a6:	bd70      	pop	{r4, r5, r6, pc}
   db5a8:	f094 0f00 	teq	r4, #0
   db5ac:	d10f      	bne.n	db5ce <__aeabi_dmul+0x1c2>
   db5ae:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   db5b2:	0040      	lsls	r0, r0, #1
   db5b4:	eb41 0101 	adc.w	r1, r1, r1
   db5b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   db5bc:	bf08      	it	eq
   db5be:	3c01      	subeq	r4, #1
   db5c0:	d0f7      	beq.n	db5b2 <__aeabi_dmul+0x1a6>
   db5c2:	ea41 0106 	orr.w	r1, r1, r6
   db5c6:	f095 0f00 	teq	r5, #0
   db5ca:	bf18      	it	ne
   db5cc:	4770      	bxne	lr
   db5ce:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   db5d2:	0052      	lsls	r2, r2, #1
   db5d4:	eb43 0303 	adc.w	r3, r3, r3
   db5d8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   db5dc:	bf08      	it	eq
   db5de:	3d01      	subeq	r5, #1
   db5e0:	d0f7      	beq.n	db5d2 <__aeabi_dmul+0x1c6>
   db5e2:	ea43 0306 	orr.w	r3, r3, r6
   db5e6:	4770      	bx	lr
   db5e8:	ea94 0f0c 	teq	r4, ip
   db5ec:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   db5f0:	bf18      	it	ne
   db5f2:	ea95 0f0c 	teqne	r5, ip
   db5f6:	d00c      	beq.n	db612 <__aeabi_dmul+0x206>
   db5f8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   db5fc:	bf18      	it	ne
   db5fe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   db602:	d1d1      	bne.n	db5a8 <__aeabi_dmul+0x19c>
   db604:	ea81 0103 	eor.w	r1, r1, r3
   db608:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   db60c:	f04f 0000 	mov.w	r0, #0
   db610:	bd70      	pop	{r4, r5, r6, pc}
   db612:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   db616:	bf06      	itte	eq
   db618:	4610      	moveq	r0, r2
   db61a:	4619      	moveq	r1, r3
   db61c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   db620:	d019      	beq.n	db656 <__aeabi_dmul+0x24a>
   db622:	ea94 0f0c 	teq	r4, ip
   db626:	d102      	bne.n	db62e <__aeabi_dmul+0x222>
   db628:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   db62c:	d113      	bne.n	db656 <__aeabi_dmul+0x24a>
   db62e:	ea95 0f0c 	teq	r5, ip
   db632:	d105      	bne.n	db640 <__aeabi_dmul+0x234>
   db634:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   db638:	bf1c      	itt	ne
   db63a:	4610      	movne	r0, r2
   db63c:	4619      	movne	r1, r3
   db63e:	d10a      	bne.n	db656 <__aeabi_dmul+0x24a>
   db640:	ea81 0103 	eor.w	r1, r1, r3
   db644:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   db648:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   db64c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   db650:	f04f 0000 	mov.w	r0, #0
   db654:	bd70      	pop	{r4, r5, r6, pc}
   db656:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   db65a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   db65e:	bd70      	pop	{r4, r5, r6, pc}

000db660 <__aeabi_ddiv>:
   db660:	b570      	push	{r4, r5, r6, lr}
   db662:	f04f 0cff 	mov.w	ip, #255	; 0xff
   db666:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   db66a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   db66e:	bf1d      	ittte	ne
   db670:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   db674:	ea94 0f0c 	teqne	r4, ip
   db678:	ea95 0f0c 	teqne	r5, ip
   db67c:	f000 f8a7 	bleq	db7ce <__aeabi_ddiv+0x16e>
   db680:	eba4 0405 	sub.w	r4, r4, r5
   db684:	ea81 0e03 	eor.w	lr, r1, r3
   db688:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   db68c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   db690:	f000 8088 	beq.w	db7a4 <__aeabi_ddiv+0x144>
   db694:	ea4f 3303 	mov.w	r3, r3, lsl #12
   db698:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   db69c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   db6a0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   db6a4:	ea4f 2202 	mov.w	r2, r2, lsl #8
   db6a8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   db6ac:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   db6b0:	ea4f 2600 	mov.w	r6, r0, lsl #8
   db6b4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   db6b8:	429d      	cmp	r5, r3
   db6ba:	bf08      	it	eq
   db6bc:	4296      	cmpeq	r6, r2
   db6be:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   db6c2:	f504 7440 	add.w	r4, r4, #768	; 0x300
   db6c6:	d202      	bcs.n	db6ce <__aeabi_ddiv+0x6e>
   db6c8:	085b      	lsrs	r3, r3, #1
   db6ca:	ea4f 0232 	mov.w	r2, r2, rrx
   db6ce:	1ab6      	subs	r6, r6, r2
   db6d0:	eb65 0503 	sbc.w	r5, r5, r3
   db6d4:	085b      	lsrs	r3, r3, #1
   db6d6:	ea4f 0232 	mov.w	r2, r2, rrx
   db6da:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   db6de:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   db6e2:	ebb6 0e02 	subs.w	lr, r6, r2
   db6e6:	eb75 0e03 	sbcs.w	lr, r5, r3
   db6ea:	bf22      	ittt	cs
   db6ec:	1ab6      	subcs	r6, r6, r2
   db6ee:	4675      	movcs	r5, lr
   db6f0:	ea40 000c 	orrcs.w	r0, r0, ip
   db6f4:	085b      	lsrs	r3, r3, #1
   db6f6:	ea4f 0232 	mov.w	r2, r2, rrx
   db6fa:	ebb6 0e02 	subs.w	lr, r6, r2
   db6fe:	eb75 0e03 	sbcs.w	lr, r5, r3
   db702:	bf22      	ittt	cs
   db704:	1ab6      	subcs	r6, r6, r2
   db706:	4675      	movcs	r5, lr
   db708:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   db70c:	085b      	lsrs	r3, r3, #1
   db70e:	ea4f 0232 	mov.w	r2, r2, rrx
   db712:	ebb6 0e02 	subs.w	lr, r6, r2
   db716:	eb75 0e03 	sbcs.w	lr, r5, r3
   db71a:	bf22      	ittt	cs
   db71c:	1ab6      	subcs	r6, r6, r2
   db71e:	4675      	movcs	r5, lr
   db720:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   db724:	085b      	lsrs	r3, r3, #1
   db726:	ea4f 0232 	mov.w	r2, r2, rrx
   db72a:	ebb6 0e02 	subs.w	lr, r6, r2
   db72e:	eb75 0e03 	sbcs.w	lr, r5, r3
   db732:	bf22      	ittt	cs
   db734:	1ab6      	subcs	r6, r6, r2
   db736:	4675      	movcs	r5, lr
   db738:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   db73c:	ea55 0e06 	orrs.w	lr, r5, r6
   db740:	d018      	beq.n	db774 <__aeabi_ddiv+0x114>
   db742:	ea4f 1505 	mov.w	r5, r5, lsl #4
   db746:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   db74a:	ea4f 1606 	mov.w	r6, r6, lsl #4
   db74e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   db752:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   db756:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   db75a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   db75e:	d1c0      	bne.n	db6e2 <__aeabi_ddiv+0x82>
   db760:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   db764:	d10b      	bne.n	db77e <__aeabi_ddiv+0x11e>
   db766:	ea41 0100 	orr.w	r1, r1, r0
   db76a:	f04f 0000 	mov.w	r0, #0
   db76e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   db772:	e7b6      	b.n	db6e2 <__aeabi_ddiv+0x82>
   db774:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   db778:	bf04      	itt	eq
   db77a:	4301      	orreq	r1, r0
   db77c:	2000      	moveq	r0, #0
   db77e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   db782:	bf88      	it	hi
   db784:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   db788:	f63f aeaf 	bhi.w	db4ea <__aeabi_dmul+0xde>
   db78c:	ebb5 0c03 	subs.w	ip, r5, r3
   db790:	bf04      	itt	eq
   db792:	ebb6 0c02 	subseq.w	ip, r6, r2
   db796:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   db79a:	f150 0000 	adcs.w	r0, r0, #0
   db79e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   db7a2:	bd70      	pop	{r4, r5, r6, pc}
   db7a4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   db7a8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   db7ac:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   db7b0:	bfc2      	ittt	gt
   db7b2:	ebd4 050c 	rsbsgt	r5, r4, ip
   db7b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   db7ba:	bd70      	popgt	{r4, r5, r6, pc}
   db7bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   db7c0:	f04f 0e00 	mov.w	lr, #0
   db7c4:	3c01      	subs	r4, #1
   db7c6:	e690      	b.n	db4ea <__aeabi_dmul+0xde>
   db7c8:	ea45 0e06 	orr.w	lr, r5, r6
   db7cc:	e68d      	b.n	db4ea <__aeabi_dmul+0xde>
   db7ce:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   db7d2:	ea94 0f0c 	teq	r4, ip
   db7d6:	bf08      	it	eq
   db7d8:	ea95 0f0c 	teqeq	r5, ip
   db7dc:	f43f af3b 	beq.w	db656 <__aeabi_dmul+0x24a>
   db7e0:	ea94 0f0c 	teq	r4, ip
   db7e4:	d10a      	bne.n	db7fc <__aeabi_ddiv+0x19c>
   db7e6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   db7ea:	f47f af34 	bne.w	db656 <__aeabi_dmul+0x24a>
   db7ee:	ea95 0f0c 	teq	r5, ip
   db7f2:	f47f af25 	bne.w	db640 <__aeabi_dmul+0x234>
   db7f6:	4610      	mov	r0, r2
   db7f8:	4619      	mov	r1, r3
   db7fa:	e72c      	b.n	db656 <__aeabi_dmul+0x24a>
   db7fc:	ea95 0f0c 	teq	r5, ip
   db800:	d106      	bne.n	db810 <__aeabi_ddiv+0x1b0>
   db802:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   db806:	f43f aefd 	beq.w	db604 <__aeabi_dmul+0x1f8>
   db80a:	4610      	mov	r0, r2
   db80c:	4619      	mov	r1, r3
   db80e:	e722      	b.n	db656 <__aeabi_dmul+0x24a>
   db810:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   db814:	bf18      	it	ne
   db816:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   db81a:	f47f aec5 	bne.w	db5a8 <__aeabi_dmul+0x19c>
   db81e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   db822:	f47f af0d 	bne.w	db640 <__aeabi_dmul+0x234>
   db826:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   db82a:	f47f aeeb 	bne.w	db604 <__aeabi_dmul+0x1f8>
   db82e:	e712      	b.n	db656 <__aeabi_dmul+0x24a>

000db830 <__gedf2>:
   db830:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   db834:	e006      	b.n	db844 <__cmpdf2+0x4>
   db836:	bf00      	nop

000db838 <__ledf2>:
   db838:	f04f 0c01 	mov.w	ip, #1
   db83c:	e002      	b.n	db844 <__cmpdf2+0x4>
   db83e:	bf00      	nop

000db840 <__cmpdf2>:
   db840:	f04f 0c01 	mov.w	ip, #1
   db844:	f84d cd04 	str.w	ip, [sp, #-4]!
   db848:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   db84c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   db850:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   db854:	bf18      	it	ne
   db856:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   db85a:	d01b      	beq.n	db894 <__cmpdf2+0x54>
   db85c:	b001      	add	sp, #4
   db85e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   db862:	bf0c      	ite	eq
   db864:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   db868:	ea91 0f03 	teqne	r1, r3
   db86c:	bf02      	ittt	eq
   db86e:	ea90 0f02 	teqeq	r0, r2
   db872:	2000      	moveq	r0, #0
   db874:	4770      	bxeq	lr
   db876:	f110 0f00 	cmn.w	r0, #0
   db87a:	ea91 0f03 	teq	r1, r3
   db87e:	bf58      	it	pl
   db880:	4299      	cmppl	r1, r3
   db882:	bf08      	it	eq
   db884:	4290      	cmpeq	r0, r2
   db886:	bf2c      	ite	cs
   db888:	17d8      	asrcs	r0, r3, #31
   db88a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   db88e:	f040 0001 	orr.w	r0, r0, #1
   db892:	4770      	bx	lr
   db894:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   db898:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   db89c:	d102      	bne.n	db8a4 <__cmpdf2+0x64>
   db89e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   db8a2:	d107      	bne.n	db8b4 <__cmpdf2+0x74>
   db8a4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   db8a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   db8ac:	d1d6      	bne.n	db85c <__cmpdf2+0x1c>
   db8ae:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   db8b2:	d0d3      	beq.n	db85c <__cmpdf2+0x1c>
   db8b4:	f85d 0b04 	ldr.w	r0, [sp], #4
   db8b8:	4770      	bx	lr
   db8ba:	bf00      	nop

000db8bc <__aeabi_cdrcmple>:
   db8bc:	4684      	mov	ip, r0
   db8be:	4610      	mov	r0, r2
   db8c0:	4662      	mov	r2, ip
   db8c2:	468c      	mov	ip, r1
   db8c4:	4619      	mov	r1, r3
   db8c6:	4663      	mov	r3, ip
   db8c8:	e000      	b.n	db8cc <__aeabi_cdcmpeq>
   db8ca:	bf00      	nop

000db8cc <__aeabi_cdcmpeq>:
   db8cc:	b501      	push	{r0, lr}
   db8ce:	f7ff ffb7 	bl	db840 <__cmpdf2>
   db8d2:	2800      	cmp	r0, #0
   db8d4:	bf48      	it	mi
   db8d6:	f110 0f00 	cmnmi.w	r0, #0
   db8da:	bd01      	pop	{r0, pc}

000db8dc <__aeabi_dcmpeq>:
   db8dc:	f84d ed08 	str.w	lr, [sp, #-8]!
   db8e0:	f7ff fff4 	bl	db8cc <__aeabi_cdcmpeq>
   db8e4:	bf0c      	ite	eq
   db8e6:	2001      	moveq	r0, #1
   db8e8:	2000      	movne	r0, #0
   db8ea:	f85d fb08 	ldr.w	pc, [sp], #8
   db8ee:	bf00      	nop

000db8f0 <__aeabi_dcmplt>:
   db8f0:	f84d ed08 	str.w	lr, [sp, #-8]!
   db8f4:	f7ff ffea 	bl	db8cc <__aeabi_cdcmpeq>
   db8f8:	bf34      	ite	cc
   db8fa:	2001      	movcc	r0, #1
   db8fc:	2000      	movcs	r0, #0
   db8fe:	f85d fb08 	ldr.w	pc, [sp], #8
   db902:	bf00      	nop

000db904 <__aeabi_dcmple>:
   db904:	f84d ed08 	str.w	lr, [sp, #-8]!
   db908:	f7ff ffe0 	bl	db8cc <__aeabi_cdcmpeq>
   db90c:	bf94      	ite	ls
   db90e:	2001      	movls	r0, #1
   db910:	2000      	movhi	r0, #0
   db912:	f85d fb08 	ldr.w	pc, [sp], #8
   db916:	bf00      	nop

000db918 <__aeabi_dcmpge>:
   db918:	f84d ed08 	str.w	lr, [sp, #-8]!
   db91c:	f7ff ffce 	bl	db8bc <__aeabi_cdrcmple>
   db920:	bf94      	ite	ls
   db922:	2001      	movls	r0, #1
   db924:	2000      	movhi	r0, #0
   db926:	f85d fb08 	ldr.w	pc, [sp], #8
   db92a:	bf00      	nop

000db92c <__aeabi_dcmpgt>:
   db92c:	f84d ed08 	str.w	lr, [sp, #-8]!
   db930:	f7ff ffc4 	bl	db8bc <__aeabi_cdrcmple>
   db934:	bf34      	ite	cc
   db936:	2001      	movcc	r0, #1
   db938:	2000      	movcs	r0, #0
   db93a:	f85d fb08 	ldr.w	pc, [sp], #8
   db93e:	bf00      	nop

000db940 <__aeabi_dcmpun>:
   db940:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   db944:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   db948:	d102      	bne.n	db950 <__aeabi_dcmpun+0x10>
   db94a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   db94e:	d10a      	bne.n	db966 <__aeabi_dcmpun+0x26>
   db950:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   db954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   db958:	d102      	bne.n	db960 <__aeabi_dcmpun+0x20>
   db95a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   db95e:	d102      	bne.n	db966 <__aeabi_dcmpun+0x26>
   db960:	f04f 0000 	mov.w	r0, #0
   db964:	4770      	bx	lr
   db966:	f04f 0001 	mov.w	r0, #1
   db96a:	4770      	bx	lr

000db96c <__aeabi_d2uiz>:
   db96c:	004a      	lsls	r2, r1, #1
   db96e:	d211      	bcs.n	db994 <__aeabi_d2uiz+0x28>
   db970:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   db974:	d211      	bcs.n	db99a <__aeabi_d2uiz+0x2e>
   db976:	d50d      	bpl.n	db994 <__aeabi_d2uiz+0x28>
   db978:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   db97c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   db980:	d40e      	bmi.n	db9a0 <__aeabi_d2uiz+0x34>
   db982:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   db986:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   db98a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   db98e:	fa23 f002 	lsr.w	r0, r3, r2
   db992:	4770      	bx	lr
   db994:	f04f 0000 	mov.w	r0, #0
   db998:	4770      	bx	lr
   db99a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   db99e:	d102      	bne.n	db9a6 <__aeabi_d2uiz+0x3a>
   db9a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   db9a4:	4770      	bx	lr
   db9a6:	f04f 0000 	mov.w	r0, #0
   db9aa:	4770      	bx	lr

000db9ac <__aeabi_d2f>:
   db9ac:	ea4f 0241 	mov.w	r2, r1, lsl #1
   db9b0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   db9b4:	bf24      	itt	cs
   db9b6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   db9ba:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   db9be:	d90d      	bls.n	db9dc <__aeabi_d2f+0x30>
   db9c0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   db9c4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   db9c8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   db9cc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   db9d0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   db9d4:	bf08      	it	eq
   db9d6:	f020 0001 	biceq.w	r0, r0, #1
   db9da:	4770      	bx	lr
   db9dc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   db9e0:	d121      	bne.n	dba26 <__aeabi_d2f+0x7a>
   db9e2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   db9e6:	bfbc      	itt	lt
   db9e8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   db9ec:	4770      	bxlt	lr
   db9ee:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   db9f2:	ea4f 5252 	mov.w	r2, r2, lsr #21
   db9f6:	f1c2 0218 	rsb	r2, r2, #24
   db9fa:	f1c2 0c20 	rsb	ip, r2, #32
   db9fe:	fa10 f30c 	lsls.w	r3, r0, ip
   dba02:	fa20 f002 	lsr.w	r0, r0, r2
   dba06:	bf18      	it	ne
   dba08:	f040 0001 	orrne.w	r0, r0, #1
   dba0c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   dba10:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   dba14:	fa03 fc0c 	lsl.w	ip, r3, ip
   dba18:	ea40 000c 	orr.w	r0, r0, ip
   dba1c:	fa23 f302 	lsr.w	r3, r3, r2
   dba20:	ea4f 0343 	mov.w	r3, r3, lsl #1
   dba24:	e7cc      	b.n	db9c0 <__aeabi_d2f+0x14>
   dba26:	ea7f 5362 	mvns.w	r3, r2, asr #21
   dba2a:	d107      	bne.n	dba3c <__aeabi_d2f+0x90>
   dba2c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   dba30:	bf1e      	ittt	ne
   dba32:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   dba36:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   dba3a:	4770      	bxne	lr
   dba3c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   dba40:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   dba44:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   dba48:	4770      	bx	lr
   dba4a:	bf00      	nop

000dba4c <__aeabi_f2lz>:
   dba4c:	ee07 0a90 	vmov	s15, r0
   dba50:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   dba54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   dba58:	d401      	bmi.n	dba5e <__aeabi_f2lz+0x12>
   dba5a:	f000 b80b 	b.w	dba74 <__aeabi_f2ulz>
   dba5e:	eef1 7a67 	vneg.f32	s15, s15
   dba62:	b508      	push	{r3, lr}
   dba64:	ee17 0a90 	vmov	r0, s15
   dba68:	f000 f804 	bl	dba74 <__aeabi_f2ulz>
   dba6c:	4240      	negs	r0, r0
   dba6e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   dba72:	bd08      	pop	{r3, pc}

000dba74 <__aeabi_f2ulz>:
   dba74:	b5d0      	push	{r4, r6, r7, lr}
   dba76:	f7ff fc71 	bl	db35c <__aeabi_f2d>
   dba7a:	4b0c      	ldr	r3, [pc, #48]	; (dbaac <__aeabi_f2ulz+0x38>)
   dba7c:	2200      	movs	r2, #0
   dba7e:	4606      	mov	r6, r0
   dba80:	460f      	mov	r7, r1
   dba82:	f7ff fcc3 	bl	db40c <__aeabi_dmul>
   dba86:	f7ff ff71 	bl	db96c <__aeabi_d2uiz>
   dba8a:	4604      	mov	r4, r0
   dba8c:	f7ff fc44 	bl	db318 <__aeabi_ui2d>
   dba90:	4b07      	ldr	r3, [pc, #28]	; (dbab0 <__aeabi_f2ulz+0x3c>)
   dba92:	2200      	movs	r2, #0
   dba94:	f7ff fcba 	bl	db40c <__aeabi_dmul>
   dba98:	4602      	mov	r2, r0
   dba9a:	460b      	mov	r3, r1
   dba9c:	4630      	mov	r0, r6
   dba9e:	4639      	mov	r1, r7
   dbaa0:	f7ff fafc 	bl	db09c <__aeabi_dsub>
   dbaa4:	f7ff ff62 	bl	db96c <__aeabi_d2uiz>
   dbaa8:	4621      	mov	r1, r4
   dbaaa:	bdd0      	pop	{r4, r6, r7, pc}
   dbaac:	3df00000 	.word	0x3df00000
   dbab0:	41f00000 	.word	0x41f00000

000dbab4 <asctime_r>:
   dbab4:	b510      	push	{r4, lr}
   dbab6:	460c      	mov	r4, r1
   dbab8:	6941      	ldr	r1, [r0, #20]
   dbaba:	6903      	ldr	r3, [r0, #16]
   dbabc:	6982      	ldr	r2, [r0, #24]
   dbabe:	b086      	sub	sp, #24
   dbac0:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   dbac4:	9104      	str	r1, [sp, #16]
   dbac6:	6801      	ldr	r1, [r0, #0]
   dbac8:	9103      	str	r1, [sp, #12]
   dbaca:	6841      	ldr	r1, [r0, #4]
   dbacc:	9102      	str	r1, [sp, #8]
   dbace:	6881      	ldr	r1, [r0, #8]
   dbad0:	9101      	str	r1, [sp, #4]
   dbad2:	68c1      	ldr	r1, [r0, #12]
   dbad4:	9100      	str	r1, [sp, #0]
   dbad6:	4907      	ldr	r1, [pc, #28]	; (dbaf4 <asctime_r+0x40>)
   dbad8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   dbadc:	440b      	add	r3, r1
   dbade:	4906      	ldr	r1, [pc, #24]	; (dbaf8 <asctime_r+0x44>)
   dbae0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   dbae4:	440a      	add	r2, r1
   dbae6:	4620      	mov	r0, r4
   dbae8:	4904      	ldr	r1, [pc, #16]	; (dbafc <asctime_r+0x48>)
   dbaea:	f7fc f85f 	bl	d7bac <siprintf>
   dbaee:	4620      	mov	r0, r4
   dbaf0:	b006      	add	sp, #24
   dbaf2:	bd10      	pop	{r4, pc}
   dbaf4:	000dcafa 	.word	0x000dcafa
   dbaf8:	000dcae5 	.word	0x000dcae5
   dbafc:	000dcac5 	.word	0x000dcac5

000dbb00 <atexit>:
   dbb00:	2300      	movs	r3, #0
   dbb02:	4601      	mov	r1, r0
   dbb04:	461a      	mov	r2, r3
   dbb06:	4618      	mov	r0, r3
   dbb08:	f000 b972 	b.w	dbdf0 <__register_exitproc>

000dbb0c <gmtime>:
   dbb0c:	b538      	push	{r3, r4, r5, lr}
   dbb0e:	4b07      	ldr	r3, [pc, #28]	; (dbb2c <gmtime+0x20>)
   dbb10:	681d      	ldr	r5, [r3, #0]
   dbb12:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   dbb14:	4604      	mov	r4, r0
   dbb16:	b91b      	cbnz	r3, dbb20 <gmtime+0x14>
   dbb18:	2024      	movs	r0, #36	; 0x24
   dbb1a:	f7fc f82f 	bl	d7b7c <malloc>
   dbb1e:	63e8      	str	r0, [r5, #60]	; 0x3c
   dbb20:	6be9      	ldr	r1, [r5, #60]	; 0x3c
   dbb22:	4620      	mov	r0, r4
   dbb24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   dbb28:	f7fc b888 	b.w	d7c3c <gmtime_r>
   dbb2c:	2003e2a4 	.word	0x2003e2a4

000dbb30 <memcpy>:
   dbb30:	440a      	add	r2, r1
   dbb32:	4291      	cmp	r1, r2
   dbb34:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   dbb38:	d100      	bne.n	dbb3c <memcpy+0xc>
   dbb3a:	4770      	bx	lr
   dbb3c:	b510      	push	{r4, lr}
   dbb3e:	f811 4b01 	ldrb.w	r4, [r1], #1
   dbb42:	f803 4f01 	strb.w	r4, [r3, #1]!
   dbb46:	4291      	cmp	r1, r2
   dbb48:	d1f9      	bne.n	dbb3e <memcpy+0xe>
   dbb4a:	bd10      	pop	{r4, pc}

000dbb4c <memmove>:
   dbb4c:	4288      	cmp	r0, r1
   dbb4e:	b510      	push	{r4, lr}
   dbb50:	eb01 0402 	add.w	r4, r1, r2
   dbb54:	d902      	bls.n	dbb5c <memmove+0x10>
   dbb56:	4284      	cmp	r4, r0
   dbb58:	4623      	mov	r3, r4
   dbb5a:	d807      	bhi.n	dbb6c <memmove+0x20>
   dbb5c:	1e43      	subs	r3, r0, #1
   dbb5e:	42a1      	cmp	r1, r4
   dbb60:	d008      	beq.n	dbb74 <memmove+0x28>
   dbb62:	f811 2b01 	ldrb.w	r2, [r1], #1
   dbb66:	f803 2f01 	strb.w	r2, [r3, #1]!
   dbb6a:	e7f8      	b.n	dbb5e <memmove+0x12>
   dbb6c:	4402      	add	r2, r0
   dbb6e:	4601      	mov	r1, r0
   dbb70:	428a      	cmp	r2, r1
   dbb72:	d100      	bne.n	dbb76 <memmove+0x2a>
   dbb74:	bd10      	pop	{r4, pc}
   dbb76:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   dbb7a:	f802 4d01 	strb.w	r4, [r2, #-1]!
   dbb7e:	e7f7      	b.n	dbb70 <memmove+0x24>

000dbb80 <memset>:
   dbb80:	4402      	add	r2, r0
   dbb82:	4603      	mov	r3, r0
   dbb84:	4293      	cmp	r3, r2
   dbb86:	d100      	bne.n	dbb8a <memset+0xa>
   dbb88:	4770      	bx	lr
   dbb8a:	f803 1b01 	strb.w	r1, [r3], #1
   dbb8e:	e7f9      	b.n	dbb84 <memset+0x4>

000dbb90 <srand>:
   dbb90:	b538      	push	{r3, r4, r5, lr}
   dbb92:	4b0d      	ldr	r3, [pc, #52]	; (dbbc8 <srand+0x38>)
   dbb94:	681d      	ldr	r5, [r3, #0]
   dbb96:	6bab      	ldr	r3, [r5, #56]	; 0x38
   dbb98:	4604      	mov	r4, r0
   dbb9a:	b97b      	cbnz	r3, dbbbc <srand+0x2c>
   dbb9c:	2018      	movs	r0, #24
   dbb9e:	f7fb ffed 	bl	d7b7c <malloc>
   dbba2:	4a0a      	ldr	r2, [pc, #40]	; (dbbcc <srand+0x3c>)
   dbba4:	4b0a      	ldr	r3, [pc, #40]	; (dbbd0 <srand+0x40>)
   dbba6:	63a8      	str	r0, [r5, #56]	; 0x38
   dbba8:	e9c0 2300 	strd	r2, r3, [r0]
   dbbac:	4b09      	ldr	r3, [pc, #36]	; (dbbd4 <srand+0x44>)
   dbbae:	6083      	str	r3, [r0, #8]
   dbbb0:	230b      	movs	r3, #11
   dbbb2:	8183      	strh	r3, [r0, #12]
   dbbb4:	2201      	movs	r2, #1
   dbbb6:	2300      	movs	r3, #0
   dbbb8:	e9c0 2304 	strd	r2, r3, [r0, #16]
   dbbbc:	6bab      	ldr	r3, [r5, #56]	; 0x38
   dbbbe:	2200      	movs	r2, #0
   dbbc0:	611c      	str	r4, [r3, #16]
   dbbc2:	615a      	str	r2, [r3, #20]
   dbbc4:	bd38      	pop	{r3, r4, r5, pc}
   dbbc6:	bf00      	nop
   dbbc8:	2003e2a4 	.word	0x2003e2a4
   dbbcc:	abcd330e 	.word	0xabcd330e
   dbbd0:	e66d1234 	.word	0xe66d1234
   dbbd4:	0005deec 	.word	0x0005deec

000dbbd8 <strchr>:
   dbbd8:	b2c9      	uxtb	r1, r1
   dbbda:	4603      	mov	r3, r0
   dbbdc:	f810 2b01 	ldrb.w	r2, [r0], #1
   dbbe0:	b11a      	cbz	r2, dbbea <strchr+0x12>
   dbbe2:	428a      	cmp	r2, r1
   dbbe4:	d1f9      	bne.n	dbbda <strchr+0x2>
   dbbe6:	4618      	mov	r0, r3
   dbbe8:	4770      	bx	lr
   dbbea:	2900      	cmp	r1, #0
   dbbec:	bf18      	it	ne
   dbbee:	2300      	movne	r3, #0
   dbbf0:	e7f9      	b.n	dbbe6 <strchr+0xe>

000dbbf2 <strchrnul>:
   dbbf2:	b510      	push	{r4, lr}
   dbbf4:	4604      	mov	r4, r0
   dbbf6:	f7ff ffef 	bl	dbbd8 <strchr>
   dbbfa:	b918      	cbnz	r0, dbc04 <strchrnul+0x12>
   dbbfc:	4620      	mov	r0, r4
   dbbfe:	f000 f832 	bl	dbc66 <strlen>
   dbc02:	4420      	add	r0, r4
   dbc04:	bd10      	pop	{r4, pc}

000dbc06 <strcmp>:
   dbc06:	f810 2b01 	ldrb.w	r2, [r0], #1
   dbc0a:	f811 3b01 	ldrb.w	r3, [r1], #1
   dbc0e:	2a01      	cmp	r2, #1
   dbc10:	bf28      	it	cs
   dbc12:	429a      	cmpcs	r2, r3
   dbc14:	d0f7      	beq.n	dbc06 <strcmp>
   dbc16:	1ad0      	subs	r0, r2, r3
   dbc18:	4770      	bx	lr

000dbc1a <strcpy>:
   dbc1a:	4603      	mov	r3, r0
   dbc1c:	f811 2b01 	ldrb.w	r2, [r1], #1
   dbc20:	f803 2b01 	strb.w	r2, [r3], #1
   dbc24:	2a00      	cmp	r2, #0
   dbc26:	d1f9      	bne.n	dbc1c <strcpy+0x2>
   dbc28:	4770      	bx	lr
	...

000dbc2c <strdup>:
   dbc2c:	4b02      	ldr	r3, [pc, #8]	; (dbc38 <strdup+0xc>)
   dbc2e:	4601      	mov	r1, r0
   dbc30:	6818      	ldr	r0, [r3, #0]
   dbc32:	f000 b803 	b.w	dbc3c <_strdup_r>
   dbc36:	bf00      	nop
   dbc38:	2003e2a4 	.word	0x2003e2a4

000dbc3c <_strdup_r>:
   dbc3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   dbc3e:	4604      	mov	r4, r0
   dbc40:	4608      	mov	r0, r1
   dbc42:	460d      	mov	r5, r1
   dbc44:	f000 f80f 	bl	dbc66 <strlen>
   dbc48:	1c42      	adds	r2, r0, #1
   dbc4a:	4611      	mov	r1, r2
   dbc4c:	4620      	mov	r0, r4
   dbc4e:	9201      	str	r2, [sp, #4]
   dbc50:	f7fb ffcc 	bl	d7bec <_malloc_r>
   dbc54:	4604      	mov	r4, r0
   dbc56:	b118      	cbz	r0, dbc60 <_strdup_r+0x24>
   dbc58:	9a01      	ldr	r2, [sp, #4]
   dbc5a:	4629      	mov	r1, r5
   dbc5c:	f7ff ff68 	bl	dbb30 <memcpy>
   dbc60:	4620      	mov	r0, r4
   dbc62:	b003      	add	sp, #12
   dbc64:	bd30      	pop	{r4, r5, pc}

000dbc66 <strlen>:
   dbc66:	4603      	mov	r3, r0
   dbc68:	f813 2b01 	ldrb.w	r2, [r3], #1
   dbc6c:	2a00      	cmp	r2, #0
   dbc6e:	d1fb      	bne.n	dbc68 <strlen+0x2>
   dbc70:	1a18      	subs	r0, r3, r0
   dbc72:	3801      	subs	r0, #1
   dbc74:	4770      	bx	lr

000dbc76 <strncmp>:
   dbc76:	b510      	push	{r4, lr}
   dbc78:	b16a      	cbz	r2, dbc96 <strncmp+0x20>
   dbc7a:	3901      	subs	r1, #1
   dbc7c:	1884      	adds	r4, r0, r2
   dbc7e:	f810 3b01 	ldrb.w	r3, [r0], #1
   dbc82:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   dbc86:	4293      	cmp	r3, r2
   dbc88:	d103      	bne.n	dbc92 <strncmp+0x1c>
   dbc8a:	42a0      	cmp	r0, r4
   dbc8c:	d001      	beq.n	dbc92 <strncmp+0x1c>
   dbc8e:	2b00      	cmp	r3, #0
   dbc90:	d1f5      	bne.n	dbc7e <strncmp+0x8>
   dbc92:	1a98      	subs	r0, r3, r2
   dbc94:	bd10      	pop	{r4, pc}
   dbc96:	4610      	mov	r0, r2
   dbc98:	e7fc      	b.n	dbc94 <strncmp+0x1e>

000dbc9a <strncpy>:
   dbc9a:	b510      	push	{r4, lr}
   dbc9c:	3901      	subs	r1, #1
   dbc9e:	4603      	mov	r3, r0
   dbca0:	b132      	cbz	r2, dbcb0 <strncpy+0x16>
   dbca2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   dbca6:	f803 4b01 	strb.w	r4, [r3], #1
   dbcaa:	3a01      	subs	r2, #1
   dbcac:	2c00      	cmp	r4, #0
   dbcae:	d1f7      	bne.n	dbca0 <strncpy+0x6>
   dbcb0:	441a      	add	r2, r3
   dbcb2:	2100      	movs	r1, #0
   dbcb4:	4293      	cmp	r3, r2
   dbcb6:	d100      	bne.n	dbcba <strncpy+0x20>
   dbcb8:	bd10      	pop	{r4, pc}
   dbcba:	f803 1b01 	strb.w	r1, [r3], #1
   dbcbe:	e7f9      	b.n	dbcb4 <strncpy+0x1a>

000dbcc0 <strrchr>:
   dbcc0:	b538      	push	{r3, r4, r5, lr}
   dbcc2:	4603      	mov	r3, r0
   dbcc4:	460c      	mov	r4, r1
   dbcc6:	b969      	cbnz	r1, dbce4 <strrchr+0x24>
   dbcc8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   dbccc:	f7ff bf84 	b.w	dbbd8 <strchr>
   dbcd0:	1c43      	adds	r3, r0, #1
   dbcd2:	4605      	mov	r5, r0
   dbcd4:	4621      	mov	r1, r4
   dbcd6:	4618      	mov	r0, r3
   dbcd8:	f7ff ff7e 	bl	dbbd8 <strchr>
   dbcdc:	2800      	cmp	r0, #0
   dbcde:	d1f7      	bne.n	dbcd0 <strrchr+0x10>
   dbce0:	4628      	mov	r0, r5
   dbce2:	bd38      	pop	{r3, r4, r5, pc}
   dbce4:	2500      	movs	r5, #0
   dbce6:	e7f5      	b.n	dbcd4 <strrchr+0x14>

000dbce8 <_strtol_l.isra.0>:
   dbce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   dbcec:	4e3a      	ldr	r6, [pc, #232]	; (dbdd8 <_strtol_l.isra.0+0xf0>)
   dbcee:	4686      	mov	lr, r0
   dbcf0:	468c      	mov	ip, r1
   dbcf2:	4660      	mov	r0, ip
   dbcf4:	f81c 4b01 	ldrb.w	r4, [ip], #1
   dbcf8:	5da5      	ldrb	r5, [r4, r6]
   dbcfa:	f015 0508 	ands.w	r5, r5, #8
   dbcfe:	d1f8      	bne.n	dbcf2 <_strtol_l.isra.0+0xa>
   dbd00:	2c2d      	cmp	r4, #45	; 0x2d
   dbd02:	d133      	bne.n	dbd6c <_strtol_l.isra.0+0x84>
   dbd04:	f89c 4000 	ldrb.w	r4, [ip]
   dbd08:	f04f 0801 	mov.w	r8, #1
   dbd0c:	f100 0c02 	add.w	ip, r0, #2
   dbd10:	2b00      	cmp	r3, #0
   dbd12:	d05c      	beq.n	dbdce <_strtol_l.isra.0+0xe6>
   dbd14:	2b10      	cmp	r3, #16
   dbd16:	d10c      	bne.n	dbd32 <_strtol_l.isra.0+0x4a>
   dbd18:	2c30      	cmp	r4, #48	; 0x30
   dbd1a:	d10a      	bne.n	dbd32 <_strtol_l.isra.0+0x4a>
   dbd1c:	f89c 0000 	ldrb.w	r0, [ip]
   dbd20:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   dbd24:	2858      	cmp	r0, #88	; 0x58
   dbd26:	d14d      	bne.n	dbdc4 <_strtol_l.isra.0+0xdc>
   dbd28:	f89c 4001 	ldrb.w	r4, [ip, #1]
   dbd2c:	2310      	movs	r3, #16
   dbd2e:	f10c 0c02 	add.w	ip, ip, #2
   dbd32:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
   dbd36:	3f01      	subs	r7, #1
   dbd38:	2600      	movs	r6, #0
   dbd3a:	fbb7 f9f3 	udiv	r9, r7, r3
   dbd3e:	4630      	mov	r0, r6
   dbd40:	fb03 7a19 	mls	sl, r3, r9, r7
   dbd44:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
   dbd48:	2d09      	cmp	r5, #9
   dbd4a:	d818      	bhi.n	dbd7e <_strtol_l.isra.0+0x96>
   dbd4c:	462c      	mov	r4, r5
   dbd4e:	42a3      	cmp	r3, r4
   dbd50:	dd24      	ble.n	dbd9c <_strtol_l.isra.0+0xb4>
   dbd52:	1c75      	adds	r5, r6, #1
   dbd54:	d007      	beq.n	dbd66 <_strtol_l.isra.0+0x7e>
   dbd56:	4581      	cmp	r9, r0
   dbd58:	d31d      	bcc.n	dbd96 <_strtol_l.isra.0+0xae>
   dbd5a:	d101      	bne.n	dbd60 <_strtol_l.isra.0+0x78>
   dbd5c:	45a2      	cmp	sl, r4
   dbd5e:	db1a      	blt.n	dbd96 <_strtol_l.isra.0+0xae>
   dbd60:	fb00 4003 	mla	r0, r0, r3, r4
   dbd64:	2601      	movs	r6, #1
   dbd66:	f81c 4b01 	ldrb.w	r4, [ip], #1
   dbd6a:	e7eb      	b.n	dbd44 <_strtol_l.isra.0+0x5c>
   dbd6c:	2c2b      	cmp	r4, #43	; 0x2b
   dbd6e:	bf08      	it	eq
   dbd70:	f89c 4000 	ldrbeq.w	r4, [ip]
   dbd74:	46a8      	mov	r8, r5
   dbd76:	bf08      	it	eq
   dbd78:	f100 0c02 	addeq.w	ip, r0, #2
   dbd7c:	e7c8      	b.n	dbd10 <_strtol_l.isra.0+0x28>
   dbd7e:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
   dbd82:	2d19      	cmp	r5, #25
   dbd84:	d801      	bhi.n	dbd8a <_strtol_l.isra.0+0xa2>
   dbd86:	3c37      	subs	r4, #55	; 0x37
   dbd88:	e7e1      	b.n	dbd4e <_strtol_l.isra.0+0x66>
   dbd8a:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
   dbd8e:	2d19      	cmp	r5, #25
   dbd90:	d804      	bhi.n	dbd9c <_strtol_l.isra.0+0xb4>
   dbd92:	3c57      	subs	r4, #87	; 0x57
   dbd94:	e7db      	b.n	dbd4e <_strtol_l.isra.0+0x66>
   dbd96:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   dbd9a:	e7e4      	b.n	dbd66 <_strtol_l.isra.0+0x7e>
   dbd9c:	1c73      	adds	r3, r6, #1
   dbd9e:	d106      	bne.n	dbdae <_strtol_l.isra.0+0xc6>
   dbda0:	2322      	movs	r3, #34	; 0x22
   dbda2:	f8ce 3000 	str.w	r3, [lr]
   dbda6:	4638      	mov	r0, r7
   dbda8:	b942      	cbnz	r2, dbdbc <_strtol_l.isra.0+0xd4>
   dbdaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dbdae:	f1b8 0f00 	cmp.w	r8, #0
   dbdb2:	d000      	beq.n	dbdb6 <_strtol_l.isra.0+0xce>
   dbdb4:	4240      	negs	r0, r0
   dbdb6:	2a00      	cmp	r2, #0
   dbdb8:	d0f7      	beq.n	dbdaa <_strtol_l.isra.0+0xc2>
   dbdba:	b10e      	cbz	r6, dbdc0 <_strtol_l.isra.0+0xd8>
   dbdbc:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
   dbdc0:	6011      	str	r1, [r2, #0]
   dbdc2:	e7f2      	b.n	dbdaa <_strtol_l.isra.0+0xc2>
   dbdc4:	2430      	movs	r4, #48	; 0x30
   dbdc6:	2b00      	cmp	r3, #0
   dbdc8:	d1b3      	bne.n	dbd32 <_strtol_l.isra.0+0x4a>
   dbdca:	2308      	movs	r3, #8
   dbdcc:	e7b1      	b.n	dbd32 <_strtol_l.isra.0+0x4a>
   dbdce:	2c30      	cmp	r4, #48	; 0x30
   dbdd0:	d0a4      	beq.n	dbd1c <_strtol_l.isra.0+0x34>
   dbdd2:	230a      	movs	r3, #10
   dbdd4:	e7ad      	b.n	dbd32 <_strtol_l.isra.0+0x4a>
   dbdd6:	bf00      	nop
   dbdd8:	000dcb1f 	.word	0x000dcb1f

000dbddc <strtol>:
   dbddc:	4613      	mov	r3, r2
   dbdde:	460a      	mov	r2, r1
   dbde0:	4601      	mov	r1, r0
   dbde2:	4802      	ldr	r0, [pc, #8]	; (dbdec <strtol+0x10>)
   dbde4:	6800      	ldr	r0, [r0, #0]
   dbde6:	f7ff bf7f 	b.w	dbce8 <_strtol_l.isra.0>
   dbdea:	bf00      	nop
   dbdec:	2003e2a4 	.word	0x2003e2a4

000dbdf0 <__register_exitproc>:
   dbdf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   dbdf4:	f8df 80b8 	ldr.w	r8, [pc, #184]	; dbeb0 <__register_exitproc+0xc0>
   dbdf8:	4606      	mov	r6, r0
   dbdfa:	f8d8 0000 	ldr.w	r0, [r8]
   dbdfe:	461f      	mov	r7, r3
   dbe00:	460d      	mov	r5, r1
   dbe02:	4691      	mov	r9, r2
   dbe04:	f000 f856 	bl	dbeb4 <__retarget_lock_acquire_recursive>
   dbe08:	4b25      	ldr	r3, [pc, #148]	; (dbea0 <__register_exitproc+0xb0>)
   dbe0a:	681c      	ldr	r4, [r3, #0]
   dbe0c:	b934      	cbnz	r4, dbe1c <__register_exitproc+0x2c>
   dbe0e:	4c25      	ldr	r4, [pc, #148]	; (dbea4 <__register_exitproc+0xb4>)
   dbe10:	601c      	str	r4, [r3, #0]
   dbe12:	4b25      	ldr	r3, [pc, #148]	; (dbea8 <__register_exitproc+0xb8>)
   dbe14:	b113      	cbz	r3, dbe1c <__register_exitproc+0x2c>
   dbe16:	681b      	ldr	r3, [r3, #0]
   dbe18:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   dbe1c:	6863      	ldr	r3, [r4, #4]
   dbe1e:	2b1f      	cmp	r3, #31
   dbe20:	dd07      	ble.n	dbe32 <__register_exitproc+0x42>
   dbe22:	f8d8 0000 	ldr.w	r0, [r8]
   dbe26:	f000 f847 	bl	dbeb8 <__retarget_lock_release_recursive>
   dbe2a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   dbe2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   dbe32:	b34e      	cbz	r6, dbe88 <__register_exitproc+0x98>
   dbe34:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   dbe38:	b988      	cbnz	r0, dbe5e <__register_exitproc+0x6e>
   dbe3a:	4b1c      	ldr	r3, [pc, #112]	; (dbeac <__register_exitproc+0xbc>)
   dbe3c:	b923      	cbnz	r3, dbe48 <__register_exitproc+0x58>
   dbe3e:	f8d8 0000 	ldr.w	r0, [r8]
   dbe42:	f000 f838 	bl	dbeb6 <__retarget_lock_release>
   dbe46:	e7f0      	b.n	dbe2a <__register_exitproc+0x3a>
   dbe48:	f44f 7084 	mov.w	r0, #264	; 0x108
   dbe4c:	f7fb fe96 	bl	d7b7c <malloc>
   dbe50:	2800      	cmp	r0, #0
   dbe52:	d0f4      	beq.n	dbe3e <__register_exitproc+0x4e>
   dbe54:	2300      	movs	r3, #0
   dbe56:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   dbe5a:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   dbe5e:	6863      	ldr	r3, [r4, #4]
   dbe60:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   dbe64:	2201      	movs	r2, #1
   dbe66:	409a      	lsls	r2, r3
   dbe68:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   dbe6c:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   dbe70:	4313      	orrs	r3, r2
   dbe72:	2e02      	cmp	r6, #2
   dbe74:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   dbe78:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   dbe7c:	bf02      	ittt	eq
   dbe7e:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   dbe82:	431a      	orreq	r2, r3
   dbe84:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
   dbe88:	6863      	ldr	r3, [r4, #4]
   dbe8a:	f8d8 0000 	ldr.w	r0, [r8]
   dbe8e:	1c5a      	adds	r2, r3, #1
   dbe90:	3302      	adds	r3, #2
   dbe92:	6062      	str	r2, [r4, #4]
   dbe94:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   dbe98:	f000 f80e 	bl	dbeb8 <__retarget_lock_release_recursive>
   dbe9c:	2000      	movs	r0, #0
   dbe9e:	e7c6      	b.n	dbe2e <__register_exitproc+0x3e>
   dbea0:	2003e7e4 	.word	0x2003e7e4
   dbea4:	2003e758 	.word	0x2003e758
   dbea8:	00000000 	.word	0x00000000
   dbeac:	000d7b7d 	.word	0x000d7b7d
   dbeb0:	2003e308 	.word	0x2003e308

000dbeb4 <__retarget_lock_acquire_recursive>:
   dbeb4:	4770      	bx	lr

000dbeb6 <__retarget_lock_release>:
   dbeb6:	4770      	bx	lr

000dbeb8 <__retarget_lock_release_recursive>:
   dbeb8:	4770      	bx	lr

000dbeba <link_code_end>:
	...

000dbebc <dynalib_user>:
   dbebc:	4021 000d 405d 000d 4085 000d 4089 000d     !@..]@...@...@..
   dbecc:	0000 0000 6573 5074 776f 7265 6f43 666e     ....setPowerConf
   dbedc:	6769 7275 7461 6f69 3d6e 6425 3200 3400     iguration=%d.2.4
   dbeec:	3500 3600 3700 3800 7b00 5322 6e65 6f73     .5.6.7.8.{"Senso
   dbefc:	2072 7954 6570 7520 6470 7461 6465 203a     r Type updated: 
   dbf0c:	3a22 6425 007d 4b4f 7b00 5322 6e65 6f73     ":%d}.OK.{"Senso
   dbf1c:	2072 7954 6570 4e20 544f 7520 6470 7461     r Type NOT updat
   dbf2c:	6465 203a 3a22 6425 007d 5245 4f52 5f52     ed: ":%d}.ERROR_
   dbf3c:	5453 5441 0045 4f4d 4544 5300 7661 6e69     STATE.MODE.Savin
   dbf4c:	2067 7973 7473 6d65 6420 6665 7561 746c     g system default
   dbf5c:	0073 7453 7261 5374 6d61 6c70 6e69 0067     s.StartSampling.
   dbf6c:	6553 5374 6e65 6f73 5472 7079 0065 6553     SetSensorType.Se
   dbf7c:	5374 6e65 6f73 5372 6174 6574 4400 7369     tSensorState.Dis
   dbf8c:	6174 636e 3a65 2520 2064 6d6d 4400 7369     tance: %d mm.Dis
   dbf9c:	6174 636e 0065 4150 5452 4349 454c 5000     tance.PARTICLE.P
   dbfac:	5241 4954 4c43 2045 4f43 4e4e 4345 4554     ARTICLE CONNECTE
   dbfbc:	0044 5246 4d41 6576 7372 6f69 4e6e 6d75     D.FRAMversionNum
   dbfcc:	6562 2072 203d 6425 202c 6574 706d 5246     ber = %d, tempFR
   dbfdc:	4d41 6576 7372 6f69 4e6e 6d75 6562 2072     AMversionNumber 
   dbfec:	203d 6425 7400 6d65 4670 4152 764d 7265     = %d.tempFRAMver
   dbffc:	6973 6e6f 754e 626d 7265 5220 5345 4c55     sionNumber RESUL
   dc00c:	0054 6544 6976 6563 7720 6c69 206c 6f6c     T.Device will lo
   dc01c:	6461 6420 6665 7561 746c 2073 6f74 4620     ad defaults to F
   dc02c:	4152 004d 6544 6976 6563 7720 6c69 206c     RAM.Device will 
   dc03c:	6f6e 2074 6f77 6b72 7720 7469 6f68 7475     not work without
   dc04c:	4620 4152 004d 6553 736e 726f 7954 6570      FRAM.SensorType
   dc05c:	3d20 2520 0064 5246 4d41 5320 6e65 6f73      = %d.FRAM Senso
   dc06c:	5472 7079 2065 4552 5553 544c 5300 454c     rType RESULT.SLE
   dc07c:	5045 5220 5345 4c55 0054 6f57 656b 4220     EP RESULT.Woke B
   dc08c:	2079 6157 6374 6864 6f64 0067 6f57 656b     y Watcdhdog.Woke
   dc09c:	4220 2079 5452 0043 6f57 656b 4220 2079      By RTC.Woke By 
   dc0ac:	4950 0052 706d 3675 3530 2e30 6567 5374     PIR.mpu6050.getS
   dc0bc:	656c 7065 6e45 6261 656c 0064 7254 6575     leepEnabled.True
   dc0cc:	4600 6c61 6573 5000 5241 4954 4c43 2045     .False.PARTICLE 
   dc0dc:	4146 4c49 4445 5420 204f 4f43 4e4e 4345     FAILED TO CONNEC
   dc0ec:	0054 4153 504d 454c 535f 5445 5055 535f     T.SAMPLE_SETUP_S
   dc0fc:	4154 4554 5300 4154 5452 5320 4d41 4c50     TATE.START SAMPL
   dc10c:	4e49 0047 5550 4c42 5349 4948 474e 5300     ING.PUBLISHING.S
   dc11c:	4154 5452 5020 4255 494c 4853 535f 4154     TART PUBLISH_STA
   dc12c:	4554 7b00 6322 5f62 6574 706d 3a22 2e25     TE.{"cb_temp":%.
   dc13c:	6632 202c 6222 7461 6574 7972 3a22 2e25     2f, "battery":%.
   dc14c:	6632 202c 6222 7461 6574 7972 7473 7461     2f, "batterystat
   dc15c:	2265 223a 7325 2c22 2220 6974 656d 7473     e":"%s", "timest
   dc16c:	6d61 2270 253a 756c 3030 7d30 7b00 6322     amp":%lu000}.{"c
   dc17c:	5f62 6574 706d 3a22 2e25 6632 202c 6122     b_temp":%.2f, "a
   dc18c:	6363 6c65 785f 3a22 2e25 6632 202c 6122     ccel_x":%.2f, "a
   dc19c:	6363 6c65 795f 3a22 2e25 6632 202c 6122     ccel_y":%.2f, "a
   dc1ac:	6363 6c65 7a5f 3a22 2e25 6632 202c 6222     ccel_z":%.2f, "b
   dc1bc:	7461 6574 7972 3a22 2e25 6632 202c 6222     attery":%.2f, "b
   dc1cc:	7461 6574 7972 7473 7461 2265 223a 7325     atterystate":"%s
   dc1dc:	2c22 2220 6974 656d 7473 6d61 2270 253a     ", "timestamp":%
   dc1ec:	756c 3030 7d30 7b00 6322 5f62 6574 706d     lu000}.{"cb_temp
   dc1fc:	3a22 2e25 6632 202c 7322 6e65 6f73 5f72     ":%.2f, "sensor_
   dc20c:	6574 706d 3a22 2e25 6632 202c 6122 6363     temp":%.2f, "acc
   dc21c:	6c65 785f 3a22 2e25 6632 202c 6122 6363     el_x":%.2f, "acc
   dc22c:	6c65 795f 3a22 2e25 6632 202c 6122 6363     el_y":%.2f, "acc
   dc23c:	6c65 7a5f 3a22 2e25 6632 202c 6222 7461     el_z":%.2f, "bat
   dc24c:	6574 7972 3a22 2e25 6632 202c 6222 7461     tery":%.2f, "bat
   dc25c:	6574 7972 7473 7461 2265 223a 7325 2c22     terystate":"%s",
   dc26c:	2220 6974 656d 7473 6d61 2270 253a 756c      "timestamp":%lu
   dc27c:	3030 7d30 7b00 6322 5f62 6574 706d 3a22     000}.{"cb_temp":
   dc28c:	2e25 6632 202c 7322 6e65 6f73 5f72 6574     %.2f, "sensor_te
   dc29c:	706d 3a22 2e25 6632 202c 6122 6363 6c65     mp":%.2f, "accel
   dc2ac:	785f 3a22 2e25 6632 202c 6122 6363 6c65     _x":%.2f, "accel
   dc2bc:	795f 3a22 2e25 6632 202c 6122 6363 6c65     _y":%.2f, "accel
   dc2cc:	7a5f 3a22 2e25 6632 202c 6722 785f 3a22     _z":%.2f, "g_x":
   dc2dc:	2e25 6632 202c 6722 795f 3a22 2e25 6632     %.2f, "g_y":%.2f
   dc2ec:	202c 6722 7a5f 3a22 2e25 6632 202c 6422     , "g_z":%.2f, "d
   dc2fc:	6765 6572 7365 785f 3a22 2e25 6632 202c     egrees_x":%.2f, 
   dc30c:	6422 6765 6572 7365 795f 3a22 2e25 6632     "degrees_y":%.2f
   dc31c:	202c 6222 7461 6574 7972 3a22 2e25 6632     , "battery":%.2f
   dc32c:	202c 6222 7461 6574 7972 7473 7461 2265     , "batterystate"
   dc33c:	223a 7325 2c22 2220 6974 656d 7473 6d61     :"%s", "timestam
   dc34c:	2270 253a 756c 3030 7d30 7b00 6322 5f62     p":%lu000}.{"cb_
   dc35c:	6574 706d 3a22 2e25 6632 202c 6422 7369     temp":%.2f, "dis
   dc36c:	6174 636e 2265 253a 2c64 2220 6162 7474     tance":%d, "batt
   dc37c:	7265 2279 253a 322e 2c66 2220 6162 7474     ery":%.2f, "batt
   dc38c:	7265 7379 6174 6574 3a22 2522 2273 202c     erystate":"%s", 
   dc39c:	7422 6d69 7365 6174 706d 3a22 6c25 3075     "timestamp":%lu0
   dc3ac:	3030 007d 227b 6263 745f 6d65 2270 253a     00}.{"cb_temp":%
   dc3bc:	322e 2c66 2220 6163 6170 6963 6174 636e     .2f, "capacitanc
   dc3cc:	5f65 6172 2277 253a 2c64 2220 6163 6170     e_raw":%d, "capa
   dc3dc:	6963 6174 636e 5f65 6570 6372 6e65 2274     citance_percent"
   dc3ec:	253a 2c64 2220 6162 7474 7265 2279 253a     :%d, "battery":%
   dc3fc:	322e 2c66 2220 6162 7474 7265 7379 6174     .2f, "batterysta
   dc40c:	6574 3a22 2522 2273 202c 7422 6d69 7365     te":"%s", "times
   dc41c:	6174 706d 3a22 6c25 3075 3030 007d 6255     tamp":%lu000}.Ub
   dc42c:	6469 746f 2d73 504d 3655 3530 0030 6255     idots-MPU6050.Ub
   dc43c:	6469 746f 2d73 654c 6576 2d6c 6f53 696e     idots-Level-Soni
   dc44c:	0063 6255 6469 746f 2d73 694d 696e 756d     c.Ubidots-Minimu
   dc45c:	006d 5453 5241 2054 4c53 4545 5f50 4157     m.START SLEEP_WA
   dc46c:	5449 535f 4154 4554 4400 4245 4755 4e20     IT_STATE.DEBUG N
   dc47c:	204f 4c53 4545 0050 4f47 4e49 2047 4f54     O SLEEP.GOING TO
   dc48c:	5320 454c 5045 5300 454c 5045 5320 4f54      SLEEP.SLEEP STO
   dc49c:	2050 4c53 4545 0050 6f57 656b 4220 2079     P SLEEP.Woke By 
   dc4ac:	5942 475f 4950 204f 4950 0052 6f57 656b     BY_GPIO PIR.Woke
   dc4bc:	4220 2079 5942 475f 4950 204f 5452 0043      By BY_GPIO RTC.
   dc4cc:	4c53 4545 2050 4552 5553 544c 2d20 5720     SLEEP RESULT - W
   dc4dc:	6b6f 2065 5942 525f 4354 5300 454c 5045     oke BY_RTC.SLEEP
   dc4ec:	5220 5345 4c55 2054 202d 6f57 656b 4220      RESULT - Woke B
   dc4fc:	5f59 454e 5754 524f 004b 4c53 4545 2050     Y_NETWORK.SLEEP 
   dc50c:	4552 5553 544c 2d20 5720 6b6f 2065 7942     RESULT - Woke By
   dc51c:	5520 4b4e 4f4e 4e57 0000 0000                UNKNOWN....

000dc528 <_ZTVN5spark10LogHandlerE>:
	...
   dc538:	40a5 000d 40c9 000d                         .@...@..

000dc540 <_ZTVN5spark16SerialLogHandlerE>:
	...
   dc548:	4151 000d 4185 000d 9725 000d 40cb 000d     QA...A..%....@..

000dc558 <_ZTV8MB85RC64>:
	...
   dc560:	40f1 000d 4105 000d 6855 000d 68eb 000d     .@...A..Uh...h..
   dc570:	696d 000d 6e75 6e6b 776f 006e 6f6e 2074     mi..unknown.not 
   dc580:	6863 7261 6967 676e 6300 6168 6772 6465     charging.charged
   dc590:	6400 7369 6863 7261 6967 676e 6600 7561     .discharging.fau
   dc5a0:	746c 6400 7369 6f63 6e6e 6365 6574 0064     lt.disconnected.

000dc5b0 <_ZL13batteryStates>:
   dc5b0:	c574 000d c57c 000d c580 000d c589 000d     t...|...........
   dc5c0:	c591 000d c59d 000d c5a3 000d               ............

000dc5cc <_ZL17FRAMversionNumber>:
   dc5cc:	0001 0000 4441 3754 3134 0030               ....ADT7410.

000dc5d8 <_ZTV16Adafruit_ADT7410>:
	...
   dc5e0:	5c3f 000d 5c41 000d 5c3d 000d 5d59 000d     ?\..A\..=\..Y]..
   dc5f0:	5c51 000d 4441 4c58 3433 0033               Q\..ADXL343.

000dc5fc <_ZTV16Adafruit_ADXL343>:
	...
   dc604:	5d87 000d 5d89 000d 5c3d 000d 5e79 000d     .]...]..=\..y^..
   dc614:	5d99 000d 6564 6166 6c75 2074 4d00 4253     .]..default .MSB
   dc624:	4c00 4253 3c00 5053 5349 7465 6974 676e     .LSB.<SPISetting
   dc634:	2073 6564 6166 6c75 3e74 3c00 5053 5349     s default>.<SPIS
   dc644:	7465 6974 676e 2073 7325 7525 2520 2073     ettings %s%u %s 
   dc654:	4f4d 4544 7525 003e                         MODE%u>.

000dc65c <_ZTVN8particle11SPISettingsE>:
	...
   dc664:	637d 000d 634f 000d 6351 000d 7277 7469     }c..Oc..Qc..writ
   dc674:	4465 7461 2061 6166 6c69 6465 6420 7275     eData failed dur
   dc684:	6e69 2067 7265 7361 2065 7266 6d61 6441     ing erase framAd
   dc694:	7264 253d 0075 0000                         dr=%u...

000dc69c <_ZTV6MB85RC>:
	...
   dc6a4:	67a5 000d 67a7 000d 6855 000d 68eb 000d     .g...g..Uh...h..
   dc6b4:	696d 000d 6564 6976 6563 6552 6461 6620     mi..deviceRead f
   dc6c4:	6961 656c 2064 7473 7461 253d 0064 6573     ailed stat=%d.se
   dc6d4:	2074 6954 656d 6620 6f72 206d 5452 2043     t Time from RTC 
   dc6e4:	7325 6400 7665 6369 5765 6972 6574 6620     %s.deviceWrite f
   dc6f4:	6961 656c 2064 7473 7461 253d 0064 6573     ailed stat=%d.se
   dc704:	2074 5452 2043 7266 6d6f 6320 6f6c 6475     t RTC from cloud
   dc714:	2520 0073 6c63 756f 2064 6974 656d 6e20      %s.cloud time n
   dc724:	746f 7620 6c61 6469 6400 7665 6369 5765     ot valid.deviceW
   dc734:	6972 6574 4545 5250 4d4f 6620 6961 656c     riteEEPROM faile
   dc744:	2064 7473 7461 253d 0064 7061 2e70 7472     d stat=%d.app.rt
   dc754:	0063 0000                                   c...

000dc758 <_ZTV12MCP79410SRAM>:
	...
   dc760:	6a2d 000d 6a43 000d 6a1d 000d 6a21 000d     -j..Cj...j..!j..
   dc770:	6a6d 000d 6d55 000d 6f75 000d               mj..Um..uo..

000dc77c <_ZTV12MCP79410Time>:
	...
   dc784:	6a31 000d 6a35 000d                         1j..5j..

000dc78c <_ZTV14MCP79410EEPROM>:
	...
   dc794:	6a2f 000d 6a51 000d 6a25 000d 6a29 000d     /j..Qj..%j..)j..
   dc7a4:	6a6d 000d 6d8f 000d 7159 000d               mj...m..Yq..

000dc7b0 <_ZTV8MCP79410>:
	...
   dc7b8:	6a33 000d 6a5f 000d                         3j.._j..

000dc7c0 <_ZTVN5spark13CellularClassE>:
	...
   dc7c8:	7d07 000d 7cfd 000d 7cf3 000d 7ca9 000d     .}...|...|...|..
   dc7d8:	7ce7 000d 7cdb 000d 9a7d 000d 9a85 000d     .|...|..}.......
   dc7e8:	7ccf 000d 7cc7 000d 7cbd 000d 7cb3 000d     .|...|...|...|..
   dc7f8:	9ab5 000d                                   ....

000dc7fc <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   dc804:	7d41 000d 7d47 000d 7d85 000d 7d55 000d     A}..G}...}..U}..
   dc814:	7d43 000d                                   C}..

000dc818 <_ZTVN5spark13EthernetClassE>:
	...
   dc820:	834b 000d 8341 000d 8337 000d 832d 000d     K...A...7...-...
   dc830:	8321 000d 8315 000d 9a7d 000d 9a85 000d     !.......}.......
   dc840:	8309 000d 8301 000d 82f7 000d 82ed 000d     ................
   dc850:	9ab5 000d                                   ....

000dc854 <_ZTV7TwoWire>:
	...
   dc85c:	8471 000d 84bb 000d 8493 000d 8473 000d     q...........s...
   dc86c:	849b 000d 84a3 000d 84ab 000d 84b3 000d     ................

000dc87c <_ZTV9IPAddress>:
	...
   dc884:	8631 000d 8621 000d 8623 000d 2575 3430     1...!...#...u%04
   dc894:	0078 6162 6475 5300 7265 6169 006c 6553     x.baud.Serial.Se
   dc8a4:	6972 6c61 0031 534a 4e4f 7453 6572 6d61     rial1.JSONStream
   dc8b4:	6f4c 4867 6e61 6c64 7265 6100 7070 2500     LogHandler.app.%
   dc8c4:	3130 7530 0020 205d 2c00 0020 2928 203a     010u .] ., .(): 
   dc8d4:	2000 005b 6f63 6564 3d20 0020 6925 6400     . [.code = .%i.d
   dc8e4:	7465 6961 736c 3d20 0020 0a0d 6600 6c00     etails = ....f.l
   dc8f4:	006e 6e66 6300 646f 0065 6564 6174 6c69     n.fn.code.detail
   dc904:	0000 0000                                   ....

000dc908 <_ZTVN5spark16JSONStreamWriterE>:
	...
   dc910:	8aed 000d 8b13 000d 8ad1 000d 8731 000d     ............1...

000dc920 <_ZTVN5spark16StreamLogHandlerE>:
	...
   dc928:	8f41 000d 8f59 000d 9725 000d 40cb 000d     A...Y...%....@..

000dc938 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   dc940:	8f6d 000d 8f81 000d 98c9 000d 8ad9 000d     m...............

000dc950 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   dc958:	8aeb 000d 8b21 000d 9661 000d 8adb 000d     ....!...a.......

000dc968 <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   dc970:	8ae9 000d 8b2f 000d 8e89 000d 8b4d 000d     ..../.......M...

000dc980 <_ZTVN5spark12NetworkClassE>:
	...
   dc988:	9a3d 000d 9a47 000d 9a51 000d 9a5b 000d     =...G...Q...[...
   dc998:	9a65 000d 9a71 000d 9a7d 000d 9a85 000d     e...q...}.......
   dc9a8:	9a8d 000d 9a99 000d 9aa1 000d 9aab 000d     ................
   dc9b8:	9ab5 000d                                   ....

000dc9bc <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   dc9bc:	0800 1810 2820 3830 6977 6972 676e 5300     .... (08wiring.S
   dc9cc:	7379 6574 206d 6c73 6565 2070 6f63 666e     ystem sleep conf
   dc9dc:	6769 7275 7461 6f69 206e 7369 6920 766e     iguration is inv
   dc9ec:	6c61 6469 002e 005a 2b25 3330 3a64 3025     alid..Z.%+03d:%0
   dc9fc:	7532 2500 2d59 6d25 252d 5464 4825 253a     2u.%Y-%m-%dT%H:%
   dca0c:	3a4d 5325 7a25 6100 6373 6974 656d 0000     M:%S%z.asctime..

000dca1c <_ZTV11USARTSerial>:
	...
   dca24:	a511 000d a57f 000d a557 000d 9bdb 000d     ........W.......
   dca34:	a527 000d a543 000d a535 000d a551 000d     '...C...5...Q...
   dca44:	a513 000d a519 000d                         ........

000dca4c <_ZTV9USBSerial>:
	...
   dca54:	a653 000d a6bb 000d a691 000d 9bdb 000d     S...............
   dca64:	a683 000d a655 000d a665 000d a6b5 000d     ....U...e.......
   dca74:	a675 000d a64d 000d                         u...M...

000dca7c <_ZSt7nothrow>:
   dca7c:	0000 0000                                   ....

000dca80 <atanhi>:
   dca80:	bb4f 0561 ac67 3fdd 2d18 5444 21fb 3fe9     O.a.g..?.-DT.!.?
   dca90:	f69b d281 730b 3fef 2d18 5444 21fb 3ff9     .....s.?.-DT.!.?

000dcaa0 <atanlo>:
   dcaa0:	65e2 222f 2b7f 3c7a 5c07 3314 a626 3c81     .e/".+z<.\.3&..<
   dcab0:	cbbd 7af0 0788 3c70 5c07 3314 a626 3c91     ...z..p<.\.3&..<
   dcac0:	7173 7472 2500 332e 2073 2e25 7333 3325     sqrt.%.3s %.3s%3
   dcad0:	2064 2e25 6432 253a 322e 3a64 2e25 6432     d %.2d:%.2d:%.2d
   dcae0:	2520 0a64                                     %d..

000dcae5 <day_name.6145>:
   dcae5:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
   dcaf5:	6972 6153                                    riSat

000dcafa <mon_name.6146>:
   dcafa:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
   dcb0a:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
   dcb1a:	4476 6365                                   vDec

000dcb1e <_ctype_>:
   dcb1e:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   dcb2e:	2020 2020 2020 2020 2020 2020 2020 2020                     
   dcb3e:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   dcb4e:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   dcb5e:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   dcb6e:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   dcb7e:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   dcb8e:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   dcb9e:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000dcc1f <link_const_variable_data_end>:
	...

000dcc20 <link_constructors_location>:
   dcc20:	000d5ac1 	.word	0x000d5ac1
   dcc24:	000d7189 	.word	0x000d7189
   dcc28:	000d7c99 	.word	0x000d7c99
   dcc2c:	000d7d11 	.word	0x000d7d11
   dcc30:	000d8355 	.word	0x000d8355
   dcc34:	000d9715 	.word	0x000d9715
   dcc38:	000d9b89 	.word	0x000d9b89
   dcc3c:	000d9cf1 	.word	0x000d9cf1
   dcc40:	000da17d 	.word	0x000da17d
   dcc44:	000da4fd 	.word	0x000da4fd

000dcc48 <link_constructors_end>:
	...
