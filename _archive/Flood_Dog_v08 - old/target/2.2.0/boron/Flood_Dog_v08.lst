
/Users/philipchatterton/IoCP/Particle/Flood_Dog/Flood_Dog_v08/target/2.2.0/boron/Flood_Dog_v08.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00002aa4  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d6ac0  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000074  2003e4cc  000d6ac4  0001e4cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000002b0  2003e540  2003e540  0002e540  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d6b38  000d6b38  00026b38  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d6b60  000d6b60  00026b60  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000e5ed1  00000000  00000000  00026b64  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00010017  00000000  00000000  0010ca35  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00025249  00000000  00000000  0011ca4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002158  00000000  00000000  00141c95  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00006650  00000000  00000000  00143ded  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0002fe0f  00000000  00000000  0014a43d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0002a1f6  00000000  00000000  0017a24c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    001025df  00000000  00000000  001a4442  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00005d30  00000000  00000000  002a6a24  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f002 f9cd 	bl	d63cc <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f002 f9ef 	bl	d641c <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e4cc 	.word	0x2003e4cc
   d4048:	000d6ac4 	.word	0x000d6ac4
   d404c:	2003e540 	.word	0x2003e540
   d4050:	2003e540 	.word	0x2003e540
   d4054:	2003e7ed 	.word	0x2003e7ed

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405a:	4e07      	ldr	r6, [pc, #28]	; (d4078 <module_user_init+0x20>)
   d405c:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
    module_user_init_hook();
   d405e:	f002 f979 	bl	d6354 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4062:	1ba4      	subs	r4, r4, r6
   d4064:	08a4      	lsrs	r4, r4, #2
   d4066:	2500      	movs	r5, #0
   d4068:	42a5      	cmp	r5, r4
   d406a:	d100      	bne.n	d406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d406e:	f856 3b04 	ldr.w	r3, [r6], #4
   d4072:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f7      	b.n	d4068 <module_user_init+0x10>
   d4078:	000d6a90 	.word	0x000d6a90
   d407c:	000d6ab4 	.word	0x000d6ab4

000d4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4080:	f000 b85f 	b.w	d4142 <setup>

000d4084 <module_user_loop>:
}

void module_user_loop() {
   d4084:	b508      	push	{r3, lr}
    loop();
   d4086:	f000 f86b 	bl	d4160 <loop>
    _post_loop();
}
   d408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d408e:	f002 b919 	b.w	d62c4 <_post_loop>

000d4092 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4092:	f000 baf3 	b.w	d467c <malloc>

000d4096 <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d4096:	f000 baf9 	b.w	d468c <free>
	...

000d409c <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d409c:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d409e:	4a03      	ldr	r2, [pc, #12]	; (d40ac <__cxa_pure_virtual+0x10>)
   d40a0:	2100      	movs	r1, #0
   d40a2:	200c      	movs	r0, #12
   d40a4:	f000 fa3e 	bl	d4524 <panic_>
  while (1);
   d40a8:	e7fe      	b.n	d40a8 <__cxa_pure_virtual+0xc>
   d40aa:	bf00      	nop
   d40ac:	000d43c5 	.word	0x000d43c5

000d40b0 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40b0:	7800      	ldrb	r0, [r0, #0]
   d40b2:	fab0 f080 	clz	r0, r0
   d40b6:	0940      	lsrs	r0, r0, #5
   d40b8:	4770      	bx	lr

000d40ba <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40ba:	2301      	movs	r3, #1
   d40bc:	7003      	strb	r3, [r0, #0]
   d40be:	4770      	bx	lr

000d40c0 <_ZN5spark10LogHandler5writeEPKcj>:
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
    // Default implementation does nothing
}
   d40c0:	4770      	bx	lr

000d40c2 <_ZN5spark16StreamLogHandler5writeEPKcj>:
inline Print* spark::StreamLogHandler::stream() const {
    return stream_;
}

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
   d40c2:	6a00      	ldr	r0, [r0, #32]
   d40c4:	6803      	ldr	r3, [r0, #0]
   d40c6:	68db      	ldr	r3, [r3, #12]
   d40c8:	4718      	bx	r3
	...

000d40cc <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   d40cc:	4b0a      	ldr	r3, [pc, #40]	; (d40f8 <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
   d40ce:	b510      	push	{r4, lr}
   d40d0:	4604      	mov	r4, r0
   d40d2:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   d40d4:	f000 ff52 	bl	d4f7c <_ZN5spark10LogManager8instanceEv>
   d40d8:	4621      	mov	r1, r4
   d40da:	f001 f950 	bl	d537e <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
   d40de:	f002 f8a9 	bl	d6234 <_Z16_fetch_usbserialv>
   d40e2:	f002 f89b 	bl	d621c <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
   d40e6:	4620      	mov	r0, r4
   d40e8:	4b04      	ldr	r3, [pc, #16]	; (d40fc <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
   d40ea:	f840 3b04 	str.w	r3, [r0], #4
   d40ee:	f001 f833 	bl	d5158 <_ZN5spark6detail9LogFilterD1Ev>
    }
   d40f2:	4620      	mov	r0, r4
   d40f4:	bd10      	pop	{r4, pc}
   d40f6:	bf00      	nop
   d40f8:	000d674c 	.word	0x000d674c
   d40fc:	000d6734 	.word	0x000d6734

000d4100 <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
   d4100:	b510      	push	{r4, lr}
   d4102:	4604      	mov	r4, r0
    }
   d4104:	f7ff ffe2 	bl	d40cc <_ZN5spark16SerialLogHandlerD1Ev>
   d4108:	4620      	mov	r0, r4
   d410a:	2124      	movs	r1, #36	; 0x24
   d410c:	f002 f954 	bl	d63b8 <_ZdlPvj>
   d4110:	4620      	mov	r0, r4
   d4112:	bd10      	pop	{r4, pc}

000d4114 <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   d4114:	b40e      	push	{r1, r2, r3}
   d4116:	b510      	push	{r4, lr}
   d4118:	b08d      	sub	sp, #52	; 0x34
   d411a:	aa0f      	add	r2, sp, #60	; 0x3c
    va_list args;
    va_start(args, fmt);
    log(LOG_LEVEL_INFO, fmt, args);
   d411c:	6801      	ldr	r1, [r0, #0]
inline void spark::Logger::info(const char *fmt, ...) const {
   d411e:	f852 4b04 	ldr.w	r4, [r2], #4
    va_start(args, fmt);
   d4122:	9203      	str	r2, [sp, #12]
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   d4124:	2300      	movs	r3, #0
   d4126:	2020      	movs	r0, #32
   d4128:	e9cd 0304 	strd	r0, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d412c:	e9cd 4200 	strd	r4, r2, [sp]
   d4130:	201e      	movs	r0, #30
   d4132:	aa04      	add	r2, sp, #16
   d4134:	f000 f9fe 	bl	d4534 <log_message_v>
}
   d4138:	b00d      	add	sp, #52	; 0x34
   d413a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d413e:	b003      	add	sp, #12
   d4140:	4770      	bx	lr

000d4142 <setup>:
unsigned char CS;

// Object to represent software serial port
// SoftwareSerial Serial1(pinRX, pinTX);

void setup() {
   d4142:	b508      	push	{r3, lr}
  // Set up serial monitor
  Serial.begin(9600);
   d4144:	f002 f876 	bl	d6234 <_Z16_fetch_usbserialv>
   d4148:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d414c:	f002 f862 	bl	d6214 <_ZN9USBSerial5beginEl>
  // Set up software serial port
  Serial1.begin(9600);
   d4150:	f001 ffce 	bl	d60f0 <_Z22__fetch_global_Serial1v>
}
   d4154:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  Serial1.begin(9600);
   d4158:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d415c:	f001 bfc2 	b.w	d60e4 <_ZN11USARTSerial5beginEm>

000d4160 <loop>:

void loop() {
   d4160:	b538      	push	{r3, r4, r5, lr}
  Log.info("Serial");
   d4162:	491f      	ldr	r1, [pc, #124]	; (d41e0 <loop+0x80>)
   d4164:	481f      	ldr	r0, [pc, #124]	; (d41e4 <loop+0x84>)
   d4166:	f7ff ffd5 	bl	d4114 <_ZNK5spark6Logger4infoEPKcz>

  // Run if data available
  if (Serial1.available() > 0) {
   d416a:	f001 ffc1 	bl	d60f0 <_Z22__fetch_global_Serial1v>
   d416e:	6803      	ldr	r3, [r0, #0]
   d4170:	691b      	ldr	r3, [r3, #16]
   d4172:	4798      	blx	r3
   d4174:	2800      	cmp	r0, #0
   d4176:	dd32      	ble.n	d41de <loop+0x7e>
    Log.info("Serial1");
   d4178:	491b      	ldr	r1, [pc, #108]	; (d41e8 <loop+0x88>)
   d417a:	481a      	ldr	r0, [pc, #104]	; (d41e4 <loop+0x84>)
   d417c:	f7ff ffca 	bl	d4114 <_ZNK5spark6Logger4infoEPKcz>

    delay(4);
   d4180:	2004      	movs	r0, #4
   d4182:	f000 faab 	bl	d46dc <delay>

    // Check for packet header character 0xff
    if (Serial1.read() == 0xff) {
   d4186:	f001 ffb3 	bl	d60f0 <_Z22__fetch_global_Serial1v>
   d418a:	6803      	ldr	r3, [r0, #0]
   d418c:	695b      	ldr	r3, [r3, #20]
   d418e:	4798      	blx	r3
   d4190:	28ff      	cmp	r0, #255	; 0xff
   d4192:	d124      	bne.n	d41de <loop+0x7e>
      // Insert header into array
      data_buffer[0] = 0xff;
   d4194:	4c15      	ldr	r4, [pc, #84]	; (d41ec <loop+0x8c>)
      // Read remaining 3 characters of data and insert into array
      for (int i = 1; i < 4; i++) {
   d4196:	2501      	movs	r5, #1
      data_buffer[0] = 0xff;
   d4198:	7020      	strb	r0, [r4, #0]
        data_buffer[i] = Serial1.read();
   d419a:	f001 ffa9 	bl	d60f0 <_Z22__fetch_global_Serial1v>
   d419e:	6803      	ldr	r3, [r0, #0]
   d41a0:	695b      	ldr	r3, [r3, #20]
   d41a2:	4798      	blx	r3
   d41a4:	5560      	strb	r0, [r4, r5]
      for (int i = 1; i < 4; i++) {
   d41a6:	3501      	adds	r5, #1
   d41a8:	2d04      	cmp	r5, #4
   d41aa:	d1f6      	bne.n	d419a <loop+0x3a>
      }

      //Compute checksum
      CS = data_buffer[0] + data_buffer[1] + data_buffer[2];
   d41ac:	7861      	ldrb	r1, [r4, #1]
   d41ae:	7822      	ldrb	r2, [r4, #0]
   d41b0:	78a3      	ldrb	r3, [r4, #2]
   d41b2:	480f      	ldr	r0, [pc, #60]	; (d41f0 <loop+0x90>)
   d41b4:	440a      	add	r2, r1
   d41b6:	441a      	add	r2, r3
   d41b8:	b2d2      	uxtb	r2, r2
   d41ba:	7002      	strb	r2, [r0, #0]
      // If checksum is valid compose distance from data
      if (data_buffer[3] == CS) {
   d41bc:	78e0      	ldrb	r0, [r4, #3]
   d41be:	4290      	cmp	r0, r2
   d41c0:	d10d      	bne.n	d41de <loop+0x7e>
        distance = (data_buffer[1] << 8) + data_buffer[2];
   d41c2:	4a0c      	ldr	r2, [pc, #48]	; (d41f4 <loop+0x94>)
        // Print to serial monitor
        snprintf(data, sizeof(data), "{\"distance\":%d}", distance);
   d41c4:	480c      	ldr	r0, [pc, #48]	; (d41f8 <loop+0x98>)
        distance = (data_buffer[1] << 8) + data_buffer[2];
   d41c6:	eb03 2301 	add.w	r3, r3, r1, lsl #8
   d41ca:	6013      	str	r3, [r2, #0]
        snprintf(data, sizeof(data), "{\"distance\":%d}", distance);
   d41cc:	f44f 7180 	mov.w	r1, #256	; 0x100
   d41d0:	4a0a      	ldr	r2, [pc, #40]	; (d41fc <loop+0x9c>)
   d41d2:	f000 fa6b 	bl	d46ac <snprintf>
        Log.info(data);
   d41d6:	4908      	ldr	r1, [pc, #32]	; (d41f8 <loop+0x98>)
   d41d8:	4802      	ldr	r0, [pc, #8]	; (d41e4 <loop+0x84>)
   d41da:	f7ff ff9b 	bl	d4114 <_ZNK5spark6Logger4infoEPKcz>
        // Serial.print(distance);
        // Serial.println(" mm");
      }
    }
  }
   d41de:	bd38      	pop	{r3, r4, r5, pc}
   d41e0:	000d670c 	.word	0x000d670c
   d41e4:	2003e6b8 	.word	0x2003e6b8
   d41e8:	000d6713 	.word	0x000d6713
   d41ec:	2003e641 	.word	0x2003e641
   d41f0:	2003e540 	.word	0x2003e540
   d41f4:	2003e648 	.word	0x2003e648
   d41f8:	2003e541 	.word	0x2003e541
   d41fc:	000d671b 	.word	0x000d671b

000d4200 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d4200:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d4202:	e9d0 5300 	ldrd	r5, r3, [r0]
   d4206:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   d4208:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d420a:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   d420e:	42ae      	cmp	r6, r5
   d4210:	d004      	beq.n	d421c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
   d4212:	4628      	mov	r0, r5
   d4214:	f001 fe64 	bl	d5ee0 <_ZN6StringD1Ev>
   d4218:	3514      	adds	r5, #20
   d421a:	e7f8      	b.n	d420e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   d421c:	6820      	ldr	r0, [r4, #0]
   d421e:	f000 fa35 	bl	d468c <free>
    AllocatorT::free(data_);
}
   d4222:	4620      	mov	r0, r4
   d4224:	bd70      	pop	{r4, r5, r6, pc}

000d4226 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   d4226:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d4228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d422a:	4604      	mov	r4, r0
   d422c:	460d      	mov	r5, r1
   d422e:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   d4230:	d916      	bls.n	d4260 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
   d4232:	4290      	cmp	r0, r2
   d4234:	d215      	bcs.n	d4262 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
   d4236:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   d423a:	1a75      	subs	r5, r6, r1
   d423c:	f1a1 0714 	sub.w	r7, r1, #20
   d4240:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   d4242:	42b7      	cmp	r7, r6
   d4244:	d01c      	beq.n	d4280 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
   d4246:	b12c      	cbz	r4, d4254 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
   d4248:	4631      	mov	r1, r6
   d424a:	4620      	mov	r0, r4
   d424c:	f001 feb0 	bl	d5fb0 <_ZN6StringC1EOS_>
   d4250:	7c33      	ldrb	r3, [r6, #16]
   d4252:	7423      	strb	r3, [r4, #16]
   d4254:	4630      	mov	r0, r6
   d4256:	f001 fe43 	bl	d5ee0 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   d425a:	3e14      	subs	r6, #20
   d425c:	3c14      	subs	r4, #20
   d425e:	e7f0      	b.n	d4242 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   d4260:	d00e      	beq.n	d4280 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
   d4262:	42b5      	cmp	r5, r6
   d4264:	d00c      	beq.n	d4280 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
   d4266:	b12c      	cbz	r4, d4274 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
   d4268:	4629      	mov	r1, r5
   d426a:	4620      	mov	r0, r4
   d426c:	f001 fea0 	bl	d5fb0 <_ZN6StringC1EOS_>
   d4270:	7c2b      	ldrb	r3, [r5, #16]
   d4272:	7423      	strb	r3, [r4, #16]
   d4274:	4628      	mov	r0, r5
   d4276:	f001 fe33 	bl	d5ee0 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   d427a:	3514      	adds	r5, #20
   d427c:	3414      	adds	r4, #20
   d427e:	e7f0      	b.n	d4262 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
   d4280:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4282 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d4282:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   d4286:	2300      	movs	r3, #0
   d4288:	e9c0 3300 	strd	r3, r3, [r0]
   d428c:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d428e:	684f      	ldr	r7, [r1, #4]
   d4290:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d4292:	4604      	mov	r4, r0
   d4294:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d4296:	dd23      	ble.n	d42e0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   d4298:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
   d429c:	fb08 f007 	mul.w	r0, r8, r7
   d42a0:	f000 f9ec 	bl	d467c <malloc>
            if (!d) {
   d42a4:	4605      	mov	r5, r0
   d42a6:	b1d8      	cbz	r0, d42e0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            move(d, data_, data_ + size_);
   d42a8:	e9d4 1200 	ldrd	r1, r2, [r4]
   d42ac:	fb08 1202 	mla	r2, r8, r2, r1
   d42b0:	f7ff ffb9 	bl	d4226 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   d42b4:	6820      	ldr	r0, [r4, #0]
   d42b6:	f000 f9e9 	bl	d468c <free>
        data_ = d;
   d42ba:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   d42bc:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   d42be:	e9d6 7300 	ldrd	r7, r3, [r6]
   d42c2:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
   d42c6:	45b8      	cmp	r8, r7
   d42c8:	d008      	beq.n	d42dc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5a>
   d42ca:	4639      	mov	r1, r7
   d42cc:	4628      	mov	r0, r5
   d42ce:	f001 fe89 	bl	d5fe4 <_ZN6StringC1ERKS_>
   d42d2:	7c3b      	ldrb	r3, [r7, #16]
   d42d4:	742b      	strb	r3, [r5, #16]
   d42d6:	3714      	adds	r7, #20
   d42d8:	3514      	adds	r5, #20
   d42da:	e7f4      	b.n	d42c6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
   d42dc:	6873      	ldr	r3, [r6, #4]
   d42de:	6063      	str	r3, [r4, #4]
}
   d42e0:	4620      	mov	r0, r4
   d42e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000d42e8 <_GLOBAL__sub_I_logHandler>:
   d42e8:	b570      	push	{r4, r5, r6, lr}
   d42ea:	b08c      	sub	sp, #48	; 0x30
        capacity_(0) {
   d42ec:	2300      	movs	r3, #0
   d42ee:	e9cd 3300 	strd	r3, r3, [sp]
   d42f2:	9302      	str	r3, [sp, #8]
            StreamLogHandler(Serial, level, filters) {
   d42f4:	f001 ff9e 	bl	d6234 <_Z16_fetch_usbserialv>
        filter_(level, filters) {
   d42f8:	4c1a      	ldr	r4, [pc, #104]	; (d4364 <_GLOBAL__sub_I_logHandler+0x7c>)
   d42fa:	4605      	mov	r5, r0
   d42fc:	4669      	mov	r1, sp
   d42fe:	a803      	add	r0, sp, #12
   d4300:	f7ff ffbf 	bl	d4282 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d4304:	4626      	mov	r6, r4
        stream_(&stream) {
   d4306:	a903      	add	r1, sp, #12
   d4308:	a806      	add	r0, sp, #24
   d430a:	f7ff ffba 	bl	d4282 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   d430e:	4b16      	ldr	r3, [pc, #88]	; (d4368 <_GLOBAL__sub_I_logHandler+0x80>)
   d4310:	f846 3b04 	str.w	r3, [r6], #4
   d4314:	a906      	add	r1, sp, #24
   d4316:	a809      	add	r0, sp, #36	; 0x24
   d4318:	f7ff ffb3 	bl	d4282 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d431c:	aa09      	add	r2, sp, #36	; 0x24
   d431e:	211e      	movs	r1, #30
   d4320:	4630      	mov	r0, r6
   d4322:	f001 f986 	bl	d5632 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d4326:	a809      	add	r0, sp, #36	; 0x24
   d4328:	f7ff ff6a 	bl	d4200 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   d432c:	a806      	add	r0, sp, #24
   d432e:	f7ff ff67 	bl	d4200 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d4332:	4b0e      	ldr	r3, [pc, #56]	; (d436c <_GLOBAL__sub_I_logHandler+0x84>)
   d4334:	6023      	str	r3, [r4, #0]
   d4336:	a803      	add	r0, sp, #12
   d4338:	6225      	str	r5, [r4, #32]
   d433a:	f7ff ff61 	bl	d4200 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d433e:	4b0c      	ldr	r3, [pc, #48]	; (d4370 <_GLOBAL__sub_I_logHandler+0x88>)
   d4340:	6023      	str	r3, [r4, #0]
        Serial.begin();
   d4342:	f001 ff77 	bl	d6234 <_Z16_fetch_usbserialv>
   d4346:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d434a:	f001 ff63 	bl	d6214 <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
   d434e:	f000 fe15 	bl	d4f7c <_ZN5spark10LogManager8instanceEv>
   d4352:	4621      	mov	r1, r4
   d4354:	f001 f8ff 	bl	d5556 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler logHandler;
   d4358:	4668      	mov	r0, sp
   d435a:	f7ff ff51 	bl	d4200 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d435e:	b00c      	add	sp, #48	; 0x30
   d4360:	bd70      	pop	{r4, r5, r6, pc}
   d4362:	bf00      	nop
   d4364:	2003e64c 	.word	0x2003e64c
   d4368:	000d6734 	.word	0x000d6734
   d436c:	000d687c 	.word	0x000d687c
   d4370:	000d674c 	.word	0x000d674c

000d4374 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4374:	b508      	push	{r3, lr}
   d4376:	4b02      	ldr	r3, [pc, #8]	; (d4380 <os_mutex_recursive_create+0xc>)
   d4378:	681b      	ldr	r3, [r3, #0]
   d437a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d437c:	9301      	str	r3, [sp, #4]
   d437e:	bd08      	pop	{r3, pc}
   d4380:	00030248 	.word	0x00030248

000d4384 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d4384:	b508      	push	{r3, lr}
   d4386:	4b02      	ldr	r3, [pc, #8]	; (d4390 <os_mutex_recursive_destroy+0xc>)
   d4388:	681b      	ldr	r3, [r3, #0]
   d438a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d438c:	9301      	str	r3, [sp, #4]
   d438e:	bd08      	pop	{r3, pc}
   d4390:	00030248 	.word	0x00030248

000d4394 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   d4394:	b508      	push	{r3, lr}
   d4396:	4b02      	ldr	r3, [pc, #8]	; (d43a0 <os_mutex_recursive_lock+0xc>)
   d4398:	681b      	ldr	r3, [r3, #0]
   d439a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d439c:	9301      	str	r3, [sp, #4]
   d439e:	bd08      	pop	{r3, pc}
   d43a0:	00030248 	.word	0x00030248

000d43a4 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   d43a4:	b508      	push	{r3, lr}
   d43a6:	4b02      	ldr	r3, [pc, #8]	; (d43b0 <os_mutex_recursive_unlock+0xc>)
   d43a8:	681b      	ldr	r3, [r3, #0]
   d43aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d43ac:	9301      	str	r3, [sp, #4]
   d43ae:	bd08      	pop	{r3, pc}
   d43b0:	00030248 	.word	0x00030248

000d43b4 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d43b4:	b508      	push	{r3, lr}
   d43b6:	4b02      	ldr	r3, [pc, #8]	; (d43c0 <HAL_RNG_GetRandomNumber+0xc>)
   d43b8:	681b      	ldr	r3, [r3, #0]
   d43ba:	685b      	ldr	r3, [r3, #4]
   d43bc:	9301      	str	r3, [sp, #4]
   d43be:	bd08      	pop	{r3, pc}
   d43c0:	00030218 	.word	0x00030218

000d43c4 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d43c4:	b508      	push	{r3, lr}
   d43c6:	4b02      	ldr	r3, [pc, #8]	; (d43d0 <HAL_Delay_Microseconds+0xc>)
   d43c8:	681b      	ldr	r3, [r3, #0]
   d43ca:	68db      	ldr	r3, [r3, #12]
   d43cc:	9301      	str	r3, [sp, #4]
   d43ce:	bd08      	pop	{r3, pc}
   d43d0:	00030218 	.word	0x00030218

000d43d4 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d43d4:	b508      	push	{r3, lr}
   d43d6:	4b02      	ldr	r3, [pc, #8]	; (d43e0 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d43d8:	681b      	ldr	r3, [r3, #0]
   d43da:	695b      	ldr	r3, [r3, #20]
   d43dc:	9301      	str	r3, [sp, #4]
   d43de:	bd08      	pop	{r3, pc}
   d43e0:	00030218 	.word	0x00030218

000d43e4 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d43e4:	b508      	push	{r3, lr}
   d43e6:	4b02      	ldr	r3, [pc, #8]	; (d43f0 <inet_inet_ntop+0xc>)
   d43e8:	681b      	ldr	r3, [r3, #0]
   d43ea:	695b      	ldr	r3, [r3, #20]
   d43ec:	9301      	str	r3, [sp, #4]
   d43ee:	bd08      	pop	{r3, pc}
   d43f0:	00030264 	.word	0x00030264

000d43f4 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d43f4:	b508      	push	{r3, lr}
   d43f6:	4b02      	ldr	r3, [pc, #8]	; (d4400 <netdb_freeaddrinfo+0xc>)
   d43f8:	681b      	ldr	r3, [r3, #0]
   d43fa:	689b      	ldr	r3, [r3, #8]
   d43fc:	9301      	str	r3, [sp, #4]
   d43fe:	bd08      	pop	{r3, pc}
   d4400:	00030268 	.word	0x00030268

000d4404 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d4404:	b508      	push	{r3, lr}
   d4406:	4b02      	ldr	r3, [pc, #8]	; (d4410 <netdb_getaddrinfo+0xc>)
   d4408:	681b      	ldr	r3, [r3, #0]
   d440a:	68db      	ldr	r3, [r3, #12]
   d440c:	9301      	str	r3, [sp, #4]
   d440e:	bd08      	pop	{r3, pc}
   d4410:	00030268 	.word	0x00030268

000d4414 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d4414:	b508      	push	{r3, lr}
   d4416:	4b02      	ldr	r3, [pc, #8]	; (d4420 <hal_usart_init+0xc>)
   d4418:	681b      	ldr	r3, [r3, #0]
   d441a:	681b      	ldr	r3, [r3, #0]
   d441c:	9301      	str	r3, [sp, #4]
   d441e:	bd08      	pop	{r3, pc}
   d4420:	0003023c 	.word	0x0003023c

000d4424 <hal_usart_end>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
   d4424:	b508      	push	{r3, lr}
   d4426:	4b02      	ldr	r3, [pc, #8]	; (d4430 <hal_usart_end+0xc>)
   d4428:	681b      	ldr	r3, [r3, #0]
   d442a:	689b      	ldr	r3, [r3, #8]
   d442c:	9301      	str	r3, [sp, #4]
   d442e:	bd08      	pop	{r3, pc}
   d4430:	0003023c 	.word	0x0003023c

000d4434 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d4434:	b508      	push	{r3, lr}
   d4436:	4b02      	ldr	r3, [pc, #8]	; (d4440 <hal_usart_write+0xc>)
   d4438:	681b      	ldr	r3, [r3, #0]
   d443a:	68db      	ldr	r3, [r3, #12]
   d443c:	9301      	str	r3, [sp, #4]
   d443e:	bd08      	pop	{r3, pc}
   d4440:	0003023c 	.word	0x0003023c

000d4444 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d4444:	b508      	push	{r3, lr}
   d4446:	4b02      	ldr	r3, [pc, #8]	; (d4450 <hal_usart_available+0xc>)
   d4448:	681b      	ldr	r3, [r3, #0]
   d444a:	691b      	ldr	r3, [r3, #16]
   d444c:	9301      	str	r3, [sp, #4]
   d444e:	bd08      	pop	{r3, pc}
   d4450:	0003023c 	.word	0x0003023c

000d4454 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d4454:	b508      	push	{r3, lr}
   d4456:	4b02      	ldr	r3, [pc, #8]	; (d4460 <hal_usart_read+0xc>)
   d4458:	681b      	ldr	r3, [r3, #0]
   d445a:	695b      	ldr	r3, [r3, #20]
   d445c:	9301      	str	r3, [sp, #4]
   d445e:	bd08      	pop	{r3, pc}
   d4460:	0003023c 	.word	0x0003023c

000d4464 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d4464:	b508      	push	{r3, lr}
   d4466:	4b02      	ldr	r3, [pc, #8]	; (d4470 <hal_usart_peek+0xc>)
   d4468:	681b      	ldr	r3, [r3, #0]
   d446a:	699b      	ldr	r3, [r3, #24]
   d446c:	9301      	str	r3, [sp, #4]
   d446e:	bd08      	pop	{r3, pc}
   d4470:	0003023c 	.word	0x0003023c

000d4474 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d4474:	b508      	push	{r3, lr}
   d4476:	4b02      	ldr	r3, [pc, #8]	; (d4480 <hal_usart_flush+0xc>)
   d4478:	681b      	ldr	r3, [r3, #0]
   d447a:	69db      	ldr	r3, [r3, #28]
   d447c:	9301      	str	r3, [sp, #4]
   d447e:	bd08      	pop	{r3, pc}
   d4480:	0003023c 	.word	0x0003023c

000d4484 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d4484:	b508      	push	{r3, lr}
   d4486:	4b02      	ldr	r3, [pc, #8]	; (d4490 <hal_usart_available_data_for_write+0xc>)
   d4488:	681b      	ldr	r3, [r3, #0]
   d448a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d448c:	9301      	str	r3, [sp, #4]
   d448e:	bd08      	pop	{r3, pc}
   d4490:	0003023c 	.word	0x0003023c

000d4494 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   d4494:	b508      	push	{r3, lr}
   d4496:	4b02      	ldr	r3, [pc, #8]	; (d44a0 <hal_usart_begin_config+0xc>)
   d4498:	681b      	ldr	r3, [r3, #0]
   d449a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d449c:	9301      	str	r3, [sp, #4]
   d449e:	bd08      	pop	{r3, pc}
   d44a0:	0003023c 	.word	0x0003023c

000d44a4 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d44a4:	b508      	push	{r3, lr}
   d44a6:	4b02      	ldr	r3, [pc, #8]	; (d44b0 <HAL_USB_USART_Init+0xc>)
   d44a8:	681b      	ldr	r3, [r3, #0]
   d44aa:	681b      	ldr	r3, [r3, #0]
   d44ac:	9301      	str	r3, [sp, #4]
   d44ae:	bd08      	pop	{r3, pc}
   d44b0:	0003024c 	.word	0x0003024c

000d44b4 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d44b4:	b508      	push	{r3, lr}
   d44b6:	4b02      	ldr	r3, [pc, #8]	; (d44c0 <HAL_USB_USART_Begin+0xc>)
   d44b8:	681b      	ldr	r3, [r3, #0]
   d44ba:	685b      	ldr	r3, [r3, #4]
   d44bc:	9301      	str	r3, [sp, #4]
   d44be:	bd08      	pop	{r3, pc}
   d44c0:	0003024c 	.word	0x0003024c

000d44c4 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   d44c4:	b508      	push	{r3, lr}
   d44c6:	4b02      	ldr	r3, [pc, #8]	; (d44d0 <HAL_USB_USART_End+0xc>)
   d44c8:	681b      	ldr	r3, [r3, #0]
   d44ca:	689b      	ldr	r3, [r3, #8]
   d44cc:	9301      	str	r3, [sp, #4]
   d44ce:	bd08      	pop	{r3, pc}
   d44d0:	0003024c 	.word	0x0003024c

000d44d4 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d44d4:	b508      	push	{r3, lr}
   d44d6:	4b02      	ldr	r3, [pc, #8]	; (d44e0 <HAL_USB_USART_Available_Data+0xc>)
   d44d8:	681b      	ldr	r3, [r3, #0]
   d44da:	691b      	ldr	r3, [r3, #16]
   d44dc:	9301      	str	r3, [sp, #4]
   d44de:	bd08      	pop	{r3, pc}
   d44e0:	0003024c 	.word	0x0003024c

000d44e4 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d44e4:	b508      	push	{r3, lr}
   d44e6:	4b02      	ldr	r3, [pc, #8]	; (d44f0 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d44e8:	681b      	ldr	r3, [r3, #0]
   d44ea:	695b      	ldr	r3, [r3, #20]
   d44ec:	9301      	str	r3, [sp, #4]
   d44ee:	bd08      	pop	{r3, pc}
   d44f0:	0003024c 	.word	0x0003024c

000d44f4 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d44f4:	b508      	push	{r3, lr}
   d44f6:	4b02      	ldr	r3, [pc, #8]	; (d4500 <HAL_USB_USART_Receive_Data+0xc>)
   d44f8:	681b      	ldr	r3, [r3, #0]
   d44fa:	699b      	ldr	r3, [r3, #24]
   d44fc:	9301      	str	r3, [sp, #4]
   d44fe:	bd08      	pop	{r3, pc}
   d4500:	0003024c 	.word	0x0003024c

000d4504 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4504:	b508      	push	{r3, lr}
   d4506:	4b02      	ldr	r3, [pc, #8]	; (d4510 <HAL_USB_USART_Send_Data+0xc>)
   d4508:	681b      	ldr	r3, [r3, #0]
   d450a:	69db      	ldr	r3, [r3, #28]
   d450c:	9301      	str	r3, [sp, #4]
   d450e:	bd08      	pop	{r3, pc}
   d4510:	0003024c 	.word	0x0003024c

000d4514 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4514:	b508      	push	{r3, lr}
   d4516:	4b02      	ldr	r3, [pc, #8]	; (d4520 <HAL_USB_USART_Flush_Data+0xc>)
   d4518:	681b      	ldr	r3, [r3, #0]
   d451a:	6a1b      	ldr	r3, [r3, #32]
   d451c:	9301      	str	r3, [sp, #4]
   d451e:	bd08      	pop	{r3, pc}
   d4520:	0003024c 	.word	0x0003024c

000d4524 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d4524:	b508      	push	{r3, lr}
   d4526:	4b02      	ldr	r3, [pc, #8]	; (d4530 <panic_+0xc>)
   d4528:	681b      	ldr	r3, [r3, #0]
   d452a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d452c:	9301      	str	r3, [sp, #4]
   d452e:	bd08      	pop	{r3, pc}
   d4530:	00030260 	.word	0x00030260

000d4534 <log_message_v>:
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   d4534:	b508      	push	{r3, lr}
   d4536:	4b02      	ldr	r3, [pc, #8]	; (d4540 <log_message_v+0xc>)
   d4538:	681b      	ldr	r3, [r3, #0]
   d453a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d453c:	9301      	str	r3, [sp, #4]
   d453e:	bd08      	pop	{r3, pc}
   d4540:	00030260 	.word	0x00030260

000d4544 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   d4544:	b508      	push	{r3, lr}
   d4546:	4b02      	ldr	r3, [pc, #8]	; (d4550 <log_level_name+0xc>)
   d4548:	681b      	ldr	r3, [r3, #0]
   d454a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d454c:	9301      	str	r3, [sp, #4]
   d454e:	bd08      	pop	{r3, pc}
   d4550:	00030260 	.word	0x00030260

000d4554 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   d4554:	b508      	push	{r3, lr}
   d4556:	4b02      	ldr	r3, [pc, #8]	; (d4560 <log_set_callbacks+0xc>)
   d4558:	681b      	ldr	r3, [r3, #0]
   d455a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   d455c:	9301      	str	r3, [sp, #4]
   d455e:	bd08      	pop	{r3, pc}
   d4560:	00030260 	.word	0x00030260

000d4564 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4564:	b508      	push	{r3, lr}
   d4566:	4b02      	ldr	r3, [pc, #8]	; (d4570 <set_system_mode+0xc>)
   d4568:	681b      	ldr	r3, [r3, #0]
   d456a:	685b      	ldr	r3, [r3, #4]
   d456c:	9301      	str	r3, [sp, #4]
   d456e:	bd08      	pop	{r3, pc}
   d4570:	00030220 	.word	0x00030220

000d4574 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d4574:	b508      	push	{r3, lr}
   d4576:	4b02      	ldr	r3, [pc, #8]	; (d4580 <system_delay_ms+0xc>)
   d4578:	681b      	ldr	r3, [r3, #0]
   d457a:	695b      	ldr	r3, [r3, #20]
   d457c:	9301      	str	r3, [sp, #4]
   d457e:	bd08      	pop	{r3, pc}
   d4580:	00030220 	.word	0x00030220

000d4584 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4584:	b508      	push	{r3, lr}
   d4586:	4b03      	ldr	r3, [pc, #12]	; (d4594 <system_ctrl_set_app_request_handler+0x10>)
   d4588:	681b      	ldr	r3, [r3, #0]
   d458a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d458e:	9301      	str	r3, [sp, #4]
   d4590:	bd08      	pop	{r3, pc}
   d4592:	0000      	.short	0x0000
   d4594:	00030220 	.word	0x00030220

000d4598 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d4598:	b508      	push	{r3, lr}
   d459a:	4b03      	ldr	r3, [pc, #12]	; (d45a8 <system_ctrl_set_result+0x10>)
   d459c:	681b      	ldr	r3, [r3, #0]
   d459e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d45a2:	9301      	str	r3, [sp, #4]
   d45a4:	bd08      	pop	{r3, pc}
   d45a6:	0000      	.short	0x0000
   d45a8:	00030220 	.word	0x00030220

000d45ac <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d45ac:	b508      	push	{r3, lr}
   d45ae:	4b02      	ldr	r3, [pc, #8]	; (d45b8 <spark_set_random_seed_from_cloud_handler+0xc>)
   d45b0:	681b      	ldr	r3, [r3, #0]
   d45b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d45b4:	9301      	str	r3, [sp, #4]
   d45b6:	bd08      	pop	{r3, pc}
   d45b8:	00030244 	.word	0x00030244

000d45bc <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d45bc:	b508      	push	{r3, lr}
   d45be:	4b02      	ldr	r3, [pc, #8]	; (d45c8 <network_connect+0xc>)
   d45c0:	681b      	ldr	r3, [r3, #0]
   d45c2:	685b      	ldr	r3, [r3, #4]
   d45c4:	9301      	str	r3, [sp, #4]
   d45c6:	bd08      	pop	{r3, pc}
   d45c8:	00030240 	.word	0x00030240

000d45cc <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d45cc:	b508      	push	{r3, lr}
   d45ce:	4b02      	ldr	r3, [pc, #8]	; (d45d8 <network_connecting+0xc>)
   d45d0:	681b      	ldr	r3, [r3, #0]
   d45d2:	689b      	ldr	r3, [r3, #8]
   d45d4:	9301      	str	r3, [sp, #4]
   d45d6:	bd08      	pop	{r3, pc}
   d45d8:	00030240 	.word	0x00030240

000d45dc <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d45dc:	b508      	push	{r3, lr}
   d45de:	4b02      	ldr	r3, [pc, #8]	; (d45e8 <network_disconnect+0xc>)
   d45e0:	681b      	ldr	r3, [r3, #0]
   d45e2:	68db      	ldr	r3, [r3, #12]
   d45e4:	9301      	str	r3, [sp, #4]
   d45e6:	bd08      	pop	{r3, pc}
   d45e8:	00030240 	.word	0x00030240

000d45ec <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d45ec:	b508      	push	{r3, lr}
   d45ee:	4b02      	ldr	r3, [pc, #8]	; (d45f8 <network_ready+0xc>)
   d45f0:	681b      	ldr	r3, [r3, #0]
   d45f2:	691b      	ldr	r3, [r3, #16]
   d45f4:	9301      	str	r3, [sp, #4]
   d45f6:	bd08      	pop	{r3, pc}
   d45f8:	00030240 	.word	0x00030240

000d45fc <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d45fc:	b508      	push	{r3, lr}
   d45fe:	4b02      	ldr	r3, [pc, #8]	; (d4608 <network_on+0xc>)
   d4600:	681b      	ldr	r3, [r3, #0]
   d4602:	695b      	ldr	r3, [r3, #20]
   d4604:	9301      	str	r3, [sp, #4]
   d4606:	bd08      	pop	{r3, pc}
   d4608:	00030240 	.word	0x00030240

000d460c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d460c:	b508      	push	{r3, lr}
   d460e:	4b02      	ldr	r3, [pc, #8]	; (d4618 <network_off+0xc>)
   d4610:	681b      	ldr	r3, [r3, #0]
   d4612:	699b      	ldr	r3, [r3, #24]
   d4614:	9301      	str	r3, [sp, #4]
   d4616:	bd08      	pop	{r3, pc}
   d4618:	00030240 	.word	0x00030240

000d461c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d461c:	b508      	push	{r3, lr}
   d461e:	4b02      	ldr	r3, [pc, #8]	; (d4628 <network_listen+0xc>)
   d4620:	681b      	ldr	r3, [r3, #0]
   d4622:	69db      	ldr	r3, [r3, #28]
   d4624:	9301      	str	r3, [sp, #4]
   d4626:	bd08      	pop	{r3, pc}
   d4628:	00030240 	.word	0x00030240

000d462c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d462c:	b508      	push	{r3, lr}
   d462e:	4b02      	ldr	r3, [pc, #8]	; (d4638 <network_listening+0xc>)
   d4630:	681b      	ldr	r3, [r3, #0]
   d4632:	6a1b      	ldr	r3, [r3, #32]
   d4634:	9301      	str	r3, [sp, #4]
   d4636:	bd08      	pop	{r3, pc}
   d4638:	00030240 	.word	0x00030240

000d463c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d463c:	b508      	push	{r3, lr}
   d463e:	4b02      	ldr	r3, [pc, #8]	; (d4648 <network_set_listen_timeout+0xc>)
   d4640:	681b      	ldr	r3, [r3, #0]
   d4642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4644:	9301      	str	r3, [sp, #4]
   d4646:	bd08      	pop	{r3, pc}
   d4648:	00030240 	.word	0x00030240

000d464c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d464c:	b508      	push	{r3, lr}
   d464e:	4b02      	ldr	r3, [pc, #8]	; (d4658 <network_get_listen_timeout+0xc>)
   d4650:	681b      	ldr	r3, [r3, #0]
   d4652:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4654:	9301      	str	r3, [sp, #4]
   d4656:	bd08      	pop	{r3, pc}
   d4658:	00030240 	.word	0x00030240

000d465c <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   d465c:	b508      	push	{r3, lr}
   d465e:	4b02      	ldr	r3, [pc, #8]	; (d4668 <network_is_on+0xc>)
   d4660:	681b      	ldr	r3, [r3, #0]
   d4662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4664:	9301      	str	r3, [sp, #4]
   d4666:	bd08      	pop	{r3, pc}
   d4668:	00030240 	.word	0x00030240

000d466c <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   d466c:	b508      	push	{r3, lr}
   d466e:	4b02      	ldr	r3, [pc, #8]	; (d4678 <network_is_off+0xc>)
   d4670:	681b      	ldr	r3, [r3, #0]
   d4672:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4674:	9301      	str	r3, [sp, #4]
   d4676:	bd08      	pop	{r3, pc}
   d4678:	00030240 	.word	0x00030240

000d467c <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d467c:	b508      	push	{r3, lr}
   d467e:	4b02      	ldr	r3, [pc, #8]	; (d4688 <malloc+0xc>)
   d4680:	681b      	ldr	r3, [r3, #0]
   d4682:	681b      	ldr	r3, [r3, #0]
   d4684:	9301      	str	r3, [sp, #4]
   d4686:	bd08      	pop	{r3, pc}
   d4688:	0003021c 	.word	0x0003021c

000d468c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d468c:	b508      	push	{r3, lr}
   d468e:	4b02      	ldr	r3, [pc, #8]	; (d4698 <free+0xc>)
   d4690:	681b      	ldr	r3, [r3, #0]
   d4692:	685b      	ldr	r3, [r3, #4]
   d4694:	9301      	str	r3, [sp, #4]
   d4696:	bd08      	pop	{r3, pc}
   d4698:	0003021c 	.word	0x0003021c

000d469c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d469c:	b508      	push	{r3, lr}
   d469e:	4b02      	ldr	r3, [pc, #8]	; (d46a8 <realloc+0xc>)
   d46a0:	681b      	ldr	r3, [r3, #0]
   d46a2:	689b      	ldr	r3, [r3, #8]
   d46a4:	9301      	str	r3, [sp, #4]
   d46a6:	bd08      	pop	{r3, pc}
   d46a8:	0003021c 	.word	0x0003021c

000d46ac <snprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   d46ac:	b508      	push	{r3, lr}
   d46ae:	4b02      	ldr	r3, [pc, #8]	; (d46b8 <snprintf+0xc>)
   d46b0:	681b      	ldr	r3, [r3, #0]
   d46b2:	69db      	ldr	r3, [r3, #28]
   d46b4:	9301      	str	r3, [sp, #4]
   d46b6:	bd08      	pop	{r3, pc}
   d46b8:	0003021c 	.word	0x0003021c

000d46bc <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d46bc:	b508      	push	{r3, lr}
   d46be:	4b02      	ldr	r3, [pc, #8]	; (d46c8 <vsnprintf+0xc>)
   d46c0:	681b      	ldr	r3, [r3, #0]
   d46c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d46c4:	9301      	str	r3, [sp, #4]
   d46c6:	bd08      	pop	{r3, pc}
   d46c8:	0003021c 	.word	0x0003021c

000d46cc <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d46cc:	b508      	push	{r3, lr}
   d46ce:	4b02      	ldr	r3, [pc, #8]	; (d46d8 <newlib_impure_ptr_callback+0xc>)
   d46d0:	681b      	ldr	r3, [r3, #0]
   d46d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d46d4:	9301      	str	r3, [sp, #4]
   d46d6:	bd08      	pop	{r3, pc}
   d46d8:	0003021c 	.word	0x0003021c

000d46dc <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d46dc:	2100      	movs	r1, #0
   d46de:	f7ff bf49 	b.w	d4574 <system_delay_ms>

000d46e2 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d46e2:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d46e4:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d46e6:	4604      	mov	r4, r0
          _M_dispose();
   d46e8:	689b      	ldr	r3, [r3, #8]
   d46ea:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d46ec:	68a3      	ldr	r3, [r4, #8]
   d46ee:	3b01      	subs	r3, #1
   d46f0:	60a3      	str	r3, [r4, #8]
   d46f2:	b92b      	cbnz	r3, d4700 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
   d46f4:	6823      	ldr	r3, [r4, #0]
   d46f6:	4620      	mov	r0, r4
   d46f8:	68db      	ldr	r3, [r3, #12]
        }
    }
   d46fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   d46fe:	4718      	bx	r3
    }
   d4700:	bd10      	pop	{r4, pc}

000d4702 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d4702:	680b      	ldr	r3, [r1, #0]
   d4704:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d4706:	b113      	cbz	r3, d470e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   d4708:	685a      	ldr	r2, [r3, #4]
   d470a:	3201      	adds	r2, #1
   d470c:	605a      	str	r2, [r3, #4]
	  _M_pi->_M_add_ref_copy();
      }
   d470e:	4770      	bx	lr

000d4710 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   d4710:	b510      	push	{r4, lr}
   d4712:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   d4714:	6800      	ldr	r0, [r0, #0]
   d4716:	b128      	cbz	r0, d4724 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
      if (--_M_use_count == 0)
   d4718:	6843      	ldr	r3, [r0, #4]
   d471a:	3b01      	subs	r3, #1
   d471c:	6043      	str	r3, [r0, #4]
   d471e:	b90b      	cbnz	r3, d4724 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
   d4720:	f7ff ffdf 	bl	d46e2 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
      }
   d4724:	4620      	mov	r0, r4
   d4726:	bd10      	pop	{r4, pc}

000d4728 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d4728:	4802      	ldr	r0, [pc, #8]	; (d4734 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   d472a:	2300      	movs	r3, #0
   d472c:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   d472e:	f7ff be21 	b.w	d4374 <os_mutex_recursive_create>
   d4732:	bf00      	nop
   d4734:	2003e670 	.word	0x2003e670

000d4738 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d4738:	2200      	movs	r2, #0
   d473a:	6840      	ldr	r0, [r0, #4]
   d473c:	4611      	mov	r1, r2
   d473e:	f7ff bf55 	b.w	d45ec <network_ready>

000d4742 <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   d4742:	2200      	movs	r2, #0
   d4744:	6840      	ldr	r0, [r0, #4]
   d4746:	4611      	mov	r1, r2
   d4748:	f7ff bf70 	b.w	d462c <network_listening>

000d474c <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d474c:	2200      	movs	r2, #0
   d474e:	6840      	ldr	r0, [r0, #4]
   d4750:	4611      	mov	r1, r2
   d4752:	f7ff bf7b 	b.w	d464c <network_get_listen_timeout>

000d4756 <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d4756:	6840      	ldr	r0, [r0, #4]
   d4758:	2200      	movs	r2, #0
   d475a:	f7ff bf6f 	b.w	d463c <network_set_listen_timeout>

000d475e <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d475e:	6840      	ldr	r0, [r0, #4]
   d4760:	2200      	movs	r2, #0
   d4762:	f081 0101 	eor.w	r1, r1, #1
   d4766:	f7ff bf59 	b.w	d461c <network_listen>

000d476a <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d476a:	2300      	movs	r3, #0
   d476c:	6840      	ldr	r0, [r0, #4]
   d476e:	461a      	mov	r2, r3
   d4770:	4619      	mov	r1, r3
   d4772:	f7ff bf4b 	b.w	d460c <network_off>

000d4776 <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d4776:	2300      	movs	r3, #0
   d4778:	6840      	ldr	r0, [r0, #4]
   d477a:	461a      	mov	r2, r3
   d477c:	4619      	mov	r1, r3
   d477e:	f7ff bf3d 	b.w	d45fc <network_on>

000d4782 <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d4782:	2200      	movs	r2, #0
   d4784:	6840      	ldr	r0, [r0, #4]
   d4786:	4611      	mov	r1, r2
   d4788:	f7ff bf20 	b.w	d45cc <network_connecting>

000d478c <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d478c:	6840      	ldr	r0, [r0, #4]
   d478e:	2200      	movs	r2, #0
   d4790:	2102      	movs	r1, #2
   d4792:	f7ff bf23 	b.w	d45dc <network_disconnect>

000d4796 <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d4796:	2300      	movs	r3, #0
   d4798:	6840      	ldr	r0, [r0, #4]
   d479a:	461a      	mov	r2, r3
   d479c:	f7ff bf0e 	b.w	d45bc <network_connect>

000d47a0 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d47a0:	4b08      	ldr	r3, [pc, #32]	; (d47c4 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d47a2:	b510      	push	{r4, lr}
   d47a4:	2428      	movs	r4, #40	; 0x28
   d47a6:	4622      	mov	r2, r4
   d47a8:	4618      	mov	r0, r3
   d47aa:	2100      	movs	r1, #0
   d47ac:	f001 fe36 	bl	d641c <memset>
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d47b0:	4b05      	ldr	r3, [pc, #20]	; (d47c8 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   d47b2:	8004      	strh	r4, [r0, #0]
        cid = -1;
   d47b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d47b8:	6042      	str	r2, [r0, #4]
   d47ba:	2204      	movs	r2, #4
   d47bc:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d47be:	4a03      	ldr	r2, [pc, #12]	; (d47cc <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d47c0:	601a      	str	r2, [r3, #0]
   d47c2:	bd10      	pop	{r4, pc}
   d47c4:	2003e67c 	.word	0x2003e67c
   d47c8:	2003e674 	.word	0x2003e674
   d47cc:	000d6764 	.word	0x000d6764

000d47d0 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d47d0:	2200      	movs	r2, #0
   d47d2:	6840      	ldr	r0, [r0, #4]
   d47d4:	4611      	mov	r1, r2
   d47d6:	f7ff bf29 	b.w	d462c <network_listening>

000d47da <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d47da:	2200      	movs	r2, #0
   d47dc:	6840      	ldr	r0, [r0, #4]
   d47de:	4611      	mov	r1, r2
   d47e0:	f7ff bf34 	b.w	d464c <network_get_listen_timeout>

000d47e4 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d47e4:	6840      	ldr	r0, [r0, #4]
   d47e6:	2200      	movs	r2, #0
   d47e8:	f7ff bf28 	b.w	d463c <network_set_listen_timeout>

000d47ec <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d47ec:	6840      	ldr	r0, [r0, #4]
   d47ee:	2200      	movs	r2, #0
   d47f0:	f081 0101 	eor.w	r1, r1, #1
   d47f4:	f7ff bf12 	b.w	d461c <network_listen>

000d47f8 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d47f8:	2300      	movs	r3, #0
   d47fa:	6840      	ldr	r0, [r0, #4]
   d47fc:	461a      	mov	r2, r3
   d47fe:	4619      	mov	r1, r3
   d4800:	f7ff bf04 	b.w	d460c <network_off>

000d4804 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d4804:	2300      	movs	r3, #0
   d4806:	6840      	ldr	r0, [r0, #4]
   d4808:	461a      	mov	r2, r3
   d480a:	4619      	mov	r1, r3
   d480c:	f7ff bef6 	b.w	d45fc <network_on>

000d4810 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4810:	2200      	movs	r2, #0
   d4812:	6840      	ldr	r0, [r0, #4]
   d4814:	4611      	mov	r1, r2
   d4816:	f7ff bee9 	b.w	d45ec <network_ready>

000d481a <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d481a:	2200      	movs	r2, #0
   d481c:	6840      	ldr	r0, [r0, #4]
   d481e:	4611      	mov	r1, r2
   d4820:	f7ff bed4 	b.w	d45cc <network_connecting>

000d4824 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4824:	6840      	ldr	r0, [r0, #4]
   d4826:	2200      	movs	r2, #0
   d4828:	2102      	movs	r1, #2
   d482a:	f7ff bed7 	b.w	d45dc <network_disconnect>

000d482e <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d482e:	2300      	movs	r3, #0
   d4830:	6840      	ldr	r0, [r0, #4]
   d4832:	461a      	mov	r2, r3
   d4834:	f7ff bec2 	b.w	d45bc <network_connect>

000d4838 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   d4838:	4b02      	ldr	r3, [pc, #8]	; (d4844 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d483a:	2203      	movs	r2, #3
   d483c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d483e:	4a02      	ldr	r2, [pc, #8]	; (d4848 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d4840:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d4842:	4770      	bx	lr
   d4844:	2003e6a4 	.word	0x2003e6a4
   d4848:	000d67a0 	.word	0x000d67a0

000d484c <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d484c:	4770      	bx	lr

000d484e <_ZN9IPAddressD0Ev>:
   d484e:	b510      	push	{r4, lr}
   d4850:	2118      	movs	r1, #24
   d4852:	4604      	mov	r4, r0
   d4854:	f001 fdb0 	bl	d63b8 <_ZdlPvj>
   d4858:	4620      	mov	r0, r4
   d485a:	bd10      	pop	{r4, pc}

000d485c <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d485c:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d485e:	7d03      	ldrb	r3, [r0, #20]
   d4860:	2b06      	cmp	r3, #6
{
   d4862:	b08d      	sub	sp, #52	; 0x34
   d4864:	460e      	mov	r6, r1
   d4866:	f100 0704 	add.w	r7, r0, #4
   d486a:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d486e:	d012      	beq.n	d4896 <_ZNK9IPAddress7printToER5Print+0x3a>
   d4870:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d4874:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d4878:	220a      	movs	r2, #10
   d487a:	4630      	mov	r0, r6
   d487c:	f001 fadb 	bl	d5e36 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d4880:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d4882:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d4884:	d019      	beq.n	d48ba <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d4886:	2c00      	cmp	r4, #0
   d4888:	d0f4      	beq.n	d4874 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d488a:	212e      	movs	r1, #46	; 0x2e
   d488c:	4630      	mov	r0, r6
   d488e:	f001 fac3 	bl	d5e18 <_ZN5Print5printEc>
   d4892:	4404      	add	r4, r0
   d4894:	e7ee      	b.n	d4874 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d4896:	232f      	movs	r3, #47	; 0x2f
   d4898:	466a      	mov	r2, sp
   d489a:	4639      	mov	r1, r7
   d489c:	200a      	movs	r0, #10
		buf[0] = 0;
   d489e:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d48a2:	f7ff fd9f 	bl	d43e4 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d48a6:	4668      	mov	r0, sp
   d48a8:	f001 fe0d 	bl	d64c6 <strlen>
   d48ac:	6833      	ldr	r3, [r6, #0]
   d48ae:	4602      	mov	r2, r0
   d48b0:	68db      	ldr	r3, [r3, #12]
   d48b2:	4669      	mov	r1, sp
   d48b4:	4630      	mov	r0, r6
   d48b6:	4798      	blx	r3
   d48b8:	4604      	mov	r4, r0
    }
    return n;
}
   d48ba:	4620      	mov	r0, r4
   d48bc:	b00d      	add	sp, #52	; 0x34
   d48be:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d48c0 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d48c0:	b510      	push	{r4, lr}
   d48c2:	4b05      	ldr	r3, [pc, #20]	; (d48d8 <_ZN9IPAddressC1Ev+0x18>)
   d48c4:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d48c6:	2211      	movs	r2, #17
   d48c8:	f840 3b04 	str.w	r3, [r0], #4
   d48cc:	2100      	movs	r1, #0
   d48ce:	f001 fda5 	bl	d641c <memset>
}
   d48d2:	4620      	mov	r0, r4
   d48d4:	bd10      	pop	{r4, pc}
   d48d6:	bf00      	nop
   d48d8:	000d67dc 	.word	0x000d67dc

000d48dc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d48dc:	4603      	mov	r3, r0
   d48de:	4a07      	ldr	r2, [pc, #28]	; (d48fc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d48e0:	b510      	push	{r4, lr}
   d48e2:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d48e6:	f101 0210 	add.w	r2, r1, #16
   d48ea:	f851 4b04 	ldr.w	r4, [r1], #4
   d48ee:	f843 4b04 	str.w	r4, [r3], #4
   d48f2:	4291      	cmp	r1, r2
   d48f4:	d1f9      	bne.n	d48ea <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d48f6:	780a      	ldrb	r2, [r1, #0]
   d48f8:	701a      	strb	r2, [r3, #0]
}
   d48fa:	bd10      	pop	{r4, pc}
   d48fc:	000d67dc 	.word	0x000d67dc

000d4900 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d4900:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d4902:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d4906:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d490a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d490e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d4912:	2304      	movs	r3, #4
   d4914:	6041      	str	r1, [r0, #4]
   d4916:	7503      	strb	r3, [r0, #20]
}
   d4918:	bd10      	pop	{r4, pc}

000d491a <_ZN9IPAddressaSEPKh>:
{
   d491a:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d491c:	78cb      	ldrb	r3, [r1, #3]
   d491e:	9300      	str	r3, [sp, #0]
   d4920:	788b      	ldrb	r3, [r1, #2]
   d4922:	784a      	ldrb	r2, [r1, #1]
   d4924:	7809      	ldrb	r1, [r1, #0]
   d4926:	f7ff ffeb 	bl	d4900 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d492a:	b002      	add	sp, #8
   d492c:	bd10      	pop	{r4, pc}

000d492e <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
   d492e:	f100 0310 	add.w	r3, r0, #16
   d4932:	2201      	movs	r2, #1
    do {
        if (t->type == JSMN_OBJECT) {
   d4934:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   d4938:	2901      	cmp	r1, #1
   d493a:	4618      	mov	r0, r3
   d493c:	d108      	bne.n	d4950 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
   d493e:	f853 1c04 	ldr.w	r1, [r3, #-4]
   d4942:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
   d4946:	3a01      	subs	r2, #1
   d4948:	f103 0310 	add.w	r3, r3, #16
   d494c:	d1f2      	bne.n	d4934 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
   d494e:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
   d4950:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   d4952:	bf04      	itt	eq
   d4954:	f853 1c04 	ldreq.w	r1, [r3, #-4]
   d4958:	1852      	addeq	r2, r2, r1
   d495a:	e7f4      	b.n	d4946 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

000d495c <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   d495c:	b40e      	push	{r1, r2, r3}
   d495e:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4960:	b088      	sub	sp, #32
   d4962:	af00      	add	r7, sp, #0
   d4964:	f107 0534 	add.w	r5, r7, #52	; 0x34
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d4968:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
   d496a:	f855 2b04 	ldr.w	r2, [r5], #4
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d496e:	607a      	str	r2, [r7, #4]
void spark::JSONWriter::printf(const char *fmt, ...) {
   d4970:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d4972:	462b      	mov	r3, r5
   d4974:	1878      	adds	r0, r7, r1
    va_start(args, fmt);
   d4976:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d4978:	f7ff fea0 	bl	d46bc <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   d497c:	280f      	cmp	r0, #15
   d497e:	687a      	ldr	r2, [r7, #4]
   d4980:	d91a      	bls.n	d49b8 <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
   d4982:	f100 0308 	add.w	r3, r0, #8
   d4986:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   d498a:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
   d498c:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   d4990:	1c41      	adds	r1, r0, #1
   d4992:	462b      	mov	r3, r5
   d4994:	4668      	mov	r0, sp
        va_start(args, fmt);
   d4996:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   d4998:	f7ff fe90 	bl	d46bc <vsnprintf>
        if (n > 0) {
   d499c:	1e02      	subs	r2, r0, #0
   d499e:	dd04      	ble.n	d49aa <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
   d49a0:	6823      	ldr	r3, [r4, #0]
   d49a2:	4669      	mov	r1, sp
   d49a4:	689b      	ldr	r3, [r3, #8]
   d49a6:	4620      	mov	r0, r4
   d49a8:	4798      	blx	r3
   d49aa:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
   d49ac:	3720      	adds	r7, #32
   d49ae:	46bd      	mov	sp, r7
   d49b0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   d49b4:	b003      	add	sp, #12
   d49b6:	4770      	bx	lr
    } else if (n > 0) {
   d49b8:	2800      	cmp	r0, #0
   d49ba:	d0f7      	beq.n	d49ac <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
   d49bc:	6823      	ldr	r3, [r4, #0]
   d49be:	4602      	mov	r2, r0
   d49c0:	689b      	ldr	r3, [r3, #8]
   d49c2:	f107 0110 	add.w	r1, r7, #16
   d49c6:	4620      	mov	r0, r4
   d49c8:	4798      	blx	r3
}
   d49ca:	e7ef      	b.n	d49ac <_ZN5spark10JSONWriter6printfEPKcz+0x50>

000d49cc <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d49cc:	b510      	push	{r4, lr}
          _M_dispose();
   d49ce:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d49d0:	4604      	mov	r4, r0
          _M_dispose();
   d49d2:	689b      	ldr	r3, [r3, #8]
   d49d4:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d49d6:	68a3      	ldr	r3, [r4, #8]
   d49d8:	3b01      	subs	r3, #1
   d49da:	60a3      	str	r3, [r4, #8]
   d49dc:	b92b      	cbnz	r3, d49ea <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
   d49de:	6823      	ldr	r3, [r4, #0]
   d49e0:	4620      	mov	r0, r4
   d49e2:	68db      	ldr	r3, [r3, #12]
    }
   d49e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   d49e8:	4718      	bx	r3
    }
   d49ea:	bd10      	pop	{r4, pc}

000d49ec <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   d49ec:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   d49ee:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
   d49f0:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   d49f4:	689b      	ldr	r3, [r3, #8]
   d49f6:	2201      	movs	r2, #1
   d49f8:	f10d 0107 	add.w	r1, sp, #7
   d49fc:	4798      	blx	r3
}
   d49fe:	b003      	add	sp, #12
   d4a00:	f85d fb04 	ldr.w	pc, [sp], #4

000d4a04 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>:
      _M_get() const noexcept
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
    };

  template<typename _Tp, _Lock_policy _Lp>
    class __shared_ptr
   d4a04:	b538      	push	{r3, r4, r5, lr}
   d4a06:	680b      	ldr	r3, [r1, #0]
   d4a08:	6003      	str	r3, [r0, #0]
   d4a0a:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
   d4a0c:	6843      	ldr	r3, [r0, #4]
   d4a0e:	429d      	cmp	r5, r3
    class __shared_ptr
   d4a10:	4604      	mov	r4, r0
	if (__tmp != _M_pi)
   d4a12:	d00c      	beq.n	d4a2e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x2a>
	    if (__tmp != 0)
   d4a14:	b115      	cbz	r5, d4a1c <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x18>
    { ++_M_use_count; }
   d4a16:	686b      	ldr	r3, [r5, #4]
   d4a18:	3301      	adds	r3, #1
   d4a1a:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   d4a1c:	6860      	ldr	r0, [r4, #4]
   d4a1e:	b128      	cbz	r0, d4a2c <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x28>
      if (--_M_use_count == 0)
   d4a20:	6843      	ldr	r3, [r0, #4]
   d4a22:	3b01      	subs	r3, #1
   d4a24:	6043      	str	r3, [r0, #4]
   d4a26:	b90b      	cbnz	r3, d4a2c <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x28>
   d4a28:	f7ff ffd0 	bl	d49cc <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
	    _M_pi = __tmp;
   d4a2c:	6065      	str	r5, [r4, #4]
    class __shared_ptr
   d4a2e:	4620      	mov	r0, r4
   d4a30:	bd38      	pop	{r3, r4, r5, pc}

000d4a32 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   d4a32:	460b      	mov	r3, r1
   d4a34:	4611      	mov	r1, r2
#if __cplusplus > 201402L
      using weak_type = __weak_ptr<_Tp, _Lp>;
#endif

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   d4a36:	2200      	movs	r2, #0
   d4a38:	b510      	push	{r4, lr}
      constexpr __shared_count() noexcept : _M_pi(0)
   d4a3a:	e9c0 2200 	strd	r2, r2, [r0]
   d4a3e:	4604      	mov	r4, r0
        t_ = t;
   d4a40:	6083      	str	r3, [r0, #8]
    if (t) {
   d4a42:	b90b      	cbnz	r3, d4a48 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
   d4a44:	4620      	mov	r0, r4
   d4a46:	bd10      	pop	{r4, pc}
   *
   *  The object pointed to is deleted when the last shared_ptr pointing to
   *  it is destroyed or reset.
  */
  template<typename _Tp>
    class shared_ptr : public __shared_ptr<_Tp>
   d4a48:	f7ff ffdc 	bl	d4a04 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
   d4a4c:	e7fa      	b.n	d4a44 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

000d4a4e <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
   d4a4e:	6883      	ldr	r3, [r0, #8]
   d4a50:	b1eb      	cbz	r3, d4a8e <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
   d4a52:	781a      	ldrb	r2, [r3, #0]
   d4a54:	2a03      	cmp	r2, #3
   d4a56:	d81a      	bhi.n	d4a8e <_ZNK5spark9JSONValue4typeEv+0x40>
   d4a58:	e8df f002 	tbb	[pc, r2]
   d4a5c:	1b021704 	.word	0x1b021704
   d4a60:	2005      	movs	r0, #5
   d4a62:	4770      	bx	lr
        const char c = d_->json[t_->start];
   d4a64:	6802      	ldr	r2, [r0, #0]
   d4a66:	685b      	ldr	r3, [r3, #4]
   d4a68:	6852      	ldr	r2, [r2, #4]
   d4a6a:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   d4a6c:	282d      	cmp	r0, #45	; 0x2d
   d4a6e:	d012      	beq.n	d4a96 <_ZNK5spark9JSONValue4typeEv+0x48>
   d4a70:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d4a74:	2b09      	cmp	r3, #9
   d4a76:	d90e      	bls.n	d4a96 <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   d4a78:	2874      	cmp	r0, #116	; 0x74
   d4a7a:	d00e      	beq.n	d4a9a <_ZNK5spark9JSONValue4typeEv+0x4c>
   d4a7c:	2866      	cmp	r0, #102	; 0x66
   d4a7e:	d00c      	beq.n	d4a9a <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
   d4a80:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   d4a84:	4258      	negs	r0, r3
   d4a86:	4158      	adcs	r0, r3
   d4a88:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
   d4a8a:	2006      	movs	r0, #6
   d4a8c:	4770      	bx	lr
        return JSON_TYPE_INVALID;
   d4a8e:	2000      	movs	r0, #0
   d4a90:	4770      	bx	lr
        return JSON_TYPE_STRING;
   d4a92:	2004      	movs	r0, #4
   d4a94:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
   d4a96:	2003      	movs	r0, #3
   d4a98:	4770      	bx	lr
            return JSON_TYPE_BOOL;
   d4a9a:	2002      	movs	r0, #2
}
   d4a9c:	4770      	bx	lr

000d4a9e <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
   d4a9e:	b510      	push	{r4, lr}
   d4aa0:	4604      	mov	r4, r0
    switch (type()) {
   d4aa2:	f7ff ffd4 	bl	d4a4e <_ZNK5spark9JSONValue4typeEv>
   d4aa6:	2802      	cmp	r0, #2
   d4aa8:	d00e      	beq.n	d4ac8 <_ZNK5spark9JSONValue5toIntEv+0x2a>
   d4aaa:	1ec3      	subs	r3, r0, #3
   d4aac:	b2db      	uxtb	r3, r3
   d4aae:	2b01      	cmp	r3, #1
   d4ab0:	d814      	bhi.n	d4adc <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
   d4ab2:	6822      	ldr	r2, [r4, #0]
   d4ab4:	68a3      	ldr	r3, [r4, #8]
   d4ab6:	6850      	ldr	r0, [r2, #4]
   d4ab8:	685b      	ldr	r3, [r3, #4]
}
   d4aba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
   d4abe:	220a      	movs	r2, #10
   d4ac0:	2100      	movs	r1, #0
   d4ac2:	4418      	add	r0, r3
   d4ac4:	f001 bda8 	b.w	d6618 <strtol>
        const char* const s = d_->json + t_->start;
   d4ac8:	6822      	ldr	r2, [r4, #0]
   d4aca:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   d4acc:	6852      	ldr	r2, [r2, #4]
   d4ace:	685b      	ldr	r3, [r3, #4]
   d4ad0:	5cd0      	ldrb	r0, [r2, r3]
   d4ad2:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   d4ad6:	4258      	negs	r0, r3
   d4ad8:	4158      	adcs	r0, r3
}
   d4ada:	bd10      	pop	{r4, pc}
    switch (type()) {
   d4adc:	2000      	movs	r0, #0
   d4ade:	e7fc      	b.n	d4ada <_ZNK5spark9JSONValue5toIntEv+0x3c>

000d4ae0 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   d4ae0:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   d4ae2:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   d4ae4:	e9c0 3300 	strd	r3, r3, [r0]
   d4ae8:	4604      	mov	r4, r0
        n_(0) {
   d4aea:	480e      	ldr	r0, [pc, #56]	; (d4b24 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
   d4aec:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   d4af0:	b1a9      	cbz	r1, d4b1e <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
   d4af2:	780b      	ldrb	r3, [r1, #0]
   d4af4:	2b03      	cmp	r3, #3
   d4af6:	d006      	beq.n	d4b06 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   d4af8:	b98b      	cbnz	r3, d4b1e <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   d4afa:	6813      	ldr	r3, [r2, #0]
   d4afc:	6858      	ldr	r0, [r3, #4]
   d4afe:	684b      	ldr	r3, [r1, #4]
   d4b00:	5cc3      	ldrb	r3, [r0, r3]
   d4b02:	2b6e      	cmp	r3, #110	; 0x6e
   d4b04:	d007      	beq.n	d4b16 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
   d4b06:	6813      	ldr	r3, [r2, #0]
   d4b08:	684d      	ldr	r5, [r1, #4]
   d4b0a:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
   d4b0c:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
   d4b0e:	4428      	add	r0, r5
            n_ = t->end - t->start;
   d4b10:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
   d4b12:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
   d4b14:	60e3      	str	r3, [r4, #12]
   d4b16:	4611      	mov	r1, r2
   d4b18:	4620      	mov	r0, r4
   d4b1a:	f7ff ff73 	bl	d4a04 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
}
   d4b1e:	4620      	mov	r0, r4
   d4b20:	bd38      	pop	{r3, r4, r5, pc}
   d4b22:	bf00      	nop
   d4b24:	000d683f 	.word	0x000d683f

000d4b28 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   d4b28:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   d4b2a:	2500      	movs	r5, #0
   d4b2c:	460b      	mov	r3, r1
      constexpr __shared_count() noexcept : _M_pi(0)
   d4b2e:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
   d4b32:	e9c0 5502 	strd	r5, r5, [r0, #8]
   d4b36:	e9c0 5504 	strd	r5, r5, [r0, #16]
   d4b3a:	4604      	mov	r4, r0
   d4b3c:	4611      	mov	r1, r2
    if (t && t->type == JSMN_OBJECT) {
   d4b3e:	b14b      	cbz	r3, d4b54 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
   d4b40:	781a      	ldrb	r2, [r3, #0]
   d4b42:	2a01      	cmp	r2, #1
   d4b44:	d106      	bne.n	d4b54 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
   d4b46:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
   d4b4a:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
   d4b4c:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
   d4b4e:	6143      	str	r3, [r0, #20]
   d4b50:	f7ff ff58 	bl	d4a04 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
}
   d4b54:	4620      	mov	r0, r4
   d4b56:	bd38      	pop	{r3, r4, r5, pc}

000d4b58 <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
   d4b58:	b510      	push	{r4, lr}
    if (!n_) {
   d4b5a:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
   d4b5c:	4604      	mov	r4, r0
    if (!n_) {
   d4b5e:	b163      	cbz	r3, d4b7a <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
   d4b60:	6880      	ldr	r0, [r0, #8]
   d4b62:	60e0      	str	r0, [r4, #12]
    --n_;
   d4b64:	3b01      	subs	r3, #1
    ++t_;
   d4b66:	3010      	adds	r0, #16
   d4b68:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   d4b6a:	6120      	str	r0, [r4, #16]
    --n_;
   d4b6c:	6163      	str	r3, [r4, #20]
    if (n_) {
   d4b6e:	b113      	cbz	r3, d4b76 <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
   d4b70:	f7ff fedd 	bl	d492e <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   d4b74:	60a0      	str	r0, [r4, #8]
    return true;
   d4b76:	2001      	movs	r0, #1
   d4b78:	e000      	b.n	d4b7c <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
   d4b7a:	4618      	mov	r0, r3
}
   d4b7c:	bd10      	pop	{r4, pc}

000d4b7e <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
   d4b7e:	b510      	push	{r4, lr}
    write('}');
   d4b80:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
   d4b82:	4604      	mov	r4, r0
    write('}');
   d4b84:	f7ff ff32 	bl	d49ec <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   d4b88:	2301      	movs	r3, #1
   d4b8a:	7123      	strb	r3, [r4, #4]
}
   d4b8c:	4620      	mov	r0, r4
   d4b8e:	bd10      	pop	{r4, pc}

000d4b90 <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
   d4b90:	b508      	push	{r3, lr}
    switch (state_) {
   d4b92:	7903      	ldrb	r3, [r0, #4]
   d4b94:	2b01      	cmp	r3, #1
   d4b96:	d002      	beq.n	d4b9e <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   d4b98:	2b02      	cmp	r3, #2
   d4b9a:	d004      	beq.n	d4ba6 <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
   d4b9c:	bd08      	pop	{r3, pc}
        write(',');
   d4b9e:	212c      	movs	r1, #44	; 0x2c
        write(':');
   d4ba0:	f7ff ff24 	bl	d49ec <_ZN5spark10JSONWriter5writeEc>
}
   d4ba4:	e7fa      	b.n	d4b9c <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
   d4ba6:	213a      	movs	r1, #58	; 0x3a
   d4ba8:	e7fa      	b.n	d4ba0 <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

000d4baa <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
   d4baa:	b510      	push	{r4, lr}
   d4bac:	4604      	mov	r4, r0
    writeSeparator();
   d4bae:	f7ff ffef 	bl	d4b90 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   d4bb2:	4620      	mov	r0, r4
   d4bb4:	217b      	movs	r1, #123	; 0x7b
   d4bb6:	f7ff ff19 	bl	d49ec <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   d4bba:	2300      	movs	r3, #0
   d4bbc:	7123      	strb	r3, [r4, #4]
}
   d4bbe:	4620      	mov	r0, r4
   d4bc0:	bd10      	pop	{r4, pc}
	...

000d4bc4 <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
   d4bc4:	b513      	push	{r0, r1, r4, lr}
   d4bc6:	4604      	mov	r4, r0
   d4bc8:	9101      	str	r1, [sp, #4]
    writeSeparator();
   d4bca:	f7ff ffe1 	bl	d4b90 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   d4bce:	6823      	ldr	r3, [r4, #0]
   d4bd0:	9a01      	ldr	r2, [sp, #4]
   d4bd2:	68db      	ldr	r3, [r3, #12]
   d4bd4:	4903      	ldr	r1, [pc, #12]	; (d4be4 <_ZN5spark10JSONWriter5valueEi+0x20>)
   d4bd6:	4620      	mov	r0, r4
   d4bd8:	4798      	blx	r3
    state_ = NEXT;
   d4bda:	2301      	movs	r3, #1
}
   d4bdc:	4620      	mov	r0, r4
    state_ = NEXT;
   d4bde:	7123      	strb	r3, [r4, #4]
}
   d4be0:	b002      	add	sp, #8
   d4be2:	bd10      	pop	{r4, pc}
   d4be4:	000d67e8 	.word	0x000d67e8

000d4be8 <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   d4be8:	b513      	push	{r0, r1, r4, lr}
   d4bea:	4604      	mov	r4, r0
   d4bec:	9101      	str	r1, [sp, #4]
    writeSeparator();
   d4bee:	f7ff ffcf 	bl	d4b90 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   d4bf2:	6823      	ldr	r3, [r4, #0]
   d4bf4:	9a01      	ldr	r2, [sp, #4]
   d4bf6:	68db      	ldr	r3, [r3, #12]
   d4bf8:	4903      	ldr	r1, [pc, #12]	; (d4c08 <_ZN5spark10JSONWriter5valueEj+0x20>)
   d4bfa:	4620      	mov	r0, r4
   d4bfc:	4798      	blx	r3
    state_ = NEXT;
   d4bfe:	2301      	movs	r3, #1
}
   d4c00:	4620      	mov	r0, r4
    state_ = NEXT;
   d4c02:	7123      	strb	r3, [r4, #4]
}
   d4c04:	b002      	add	sp, #8
   d4c06:	bd10      	pop	{r4, pc}
   d4c08:	000d67eb 	.word	0x000d67eb

000d4c0c <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   d4c0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d4c10:	460d      	mov	r5, r1
   d4c12:	4617      	mov	r7, r2
    write('"');
   d4c14:	2122      	movs	r1, #34	; 0x22
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   d4c16:	f8df 80a0 	ldr.w	r8, [pc, #160]	; d4cb8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xac>
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   d4c1a:	4604      	mov	r4, r0
    const char* const end = str + size;
   d4c1c:	442f      	add	r7, r5
    write('"');
   d4c1e:	f7ff fee5 	bl	d49ec <_ZN5spark10JSONWriter5writeEc>
    const char* const end = str + size;
   d4c22:	4629      	mov	r1, r5
    while (s != end) {
   d4c24:	42bd      	cmp	r5, r7
   d4c26:	462a      	mov	r2, r5
   d4c28:	d038      	beq.n	d4c9c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x90>
        const char c = *s;
   d4c2a:	f815 6b01 	ldrb.w	r6, [r5], #1
        if (c == '"' || c == '\\' || (c >= 0 && c <= 0x1f)) {
   d4c2e:	2e22      	cmp	r6, #34	; 0x22
   d4c30:	d003      	beq.n	d4c3a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2e>
   d4c32:	2e5c      	cmp	r6, #92	; 0x5c
   d4c34:	d001      	beq.n	d4c3a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2e>
   d4c36:	2e1f      	cmp	r6, #31
   d4c38:	d8f4      	bhi.n	d4c24 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
   d4c3a:	6823      	ldr	r3, [r4, #0]
   d4c3c:	1a52      	subs	r2, r2, r1
   d4c3e:	689b      	ldr	r3, [r3, #8]
   d4c40:	4620      	mov	r0, r4
   d4c42:	4798      	blx	r3
            write('\\');
   d4c44:	215c      	movs	r1, #92	; 0x5c
   d4c46:	4620      	mov	r0, r4
   d4c48:	f7ff fed0 	bl	d49ec <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   d4c4c:	2e0d      	cmp	r6, #13
   d4c4e:	d80a      	bhi.n	d4c66 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x5a>
   d4c50:	2e07      	cmp	r6, #7
   d4c52:	d91c      	bls.n	d4c8e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
   d4c54:	f1a6 0308 	sub.w	r3, r6, #8
   d4c58:	2b05      	cmp	r3, #5
   d4c5a:	d818      	bhi.n	d4c8e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
   d4c5c:	e8df f003 	tbb	[pc, r3]
   d4c60:	17110f0d 	.word	0x17110f0d
   d4c64:	1513      	.short	0x1513
   d4c66:	2e22      	cmp	r6, #34	; 0x22
   d4c68:	d001      	beq.n	d4c6e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x62>
   d4c6a:	2e5c      	cmp	r6, #92	; 0x5c
   d4c6c:	d10f      	bne.n	d4c8e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
                write(c);
   d4c6e:	4631      	mov	r1, r6
                write('b');
   d4c70:	4620      	mov	r0, r4
   d4c72:	f7ff febb 	bl	d49ec <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
   d4c76:	4629      	mov	r1, r5
    while (s != end) {
   d4c78:	e7d4      	b.n	d4c24 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
   d4c7a:	2162      	movs	r1, #98	; 0x62
   d4c7c:	e7f8      	b.n	d4c70 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('t');
   d4c7e:	2174      	movs	r1, #116	; 0x74
   d4c80:	e7f6      	b.n	d4c70 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('n');
   d4c82:	216e      	movs	r1, #110	; 0x6e
   d4c84:	e7f4      	b.n	d4c70 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('f');
   d4c86:	2166      	movs	r1, #102	; 0x66
   d4c88:	e7f2      	b.n	d4c70 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('r');
   d4c8a:	2172      	movs	r1, #114	; 0x72
   d4c8c:	e7f0      	b.n	d4c70 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                printf("u%04x", (unsigned)c);
   d4c8e:	6823      	ldr	r3, [r4, #0]
   d4c90:	4632      	mov	r2, r6
   d4c92:	68db      	ldr	r3, [r3, #12]
   d4c94:	4641      	mov	r1, r8
   d4c96:	4620      	mov	r0, r4
   d4c98:	4798      	blx	r3
                break;
   d4c9a:	e7ec      	b.n	d4c76 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6a>
        }
        ++s;
    }
    if (s != str) {
   d4c9c:	428d      	cmp	r5, r1
   d4c9e:	d004      	beq.n	d4caa <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9e>
        write(str, s - str); // Write remaining characters
   d4ca0:	6823      	ldr	r3, [r4, #0]
   d4ca2:	1a6a      	subs	r2, r5, r1
   d4ca4:	689b      	ldr	r3, [r3, #8]
   d4ca6:	4620      	mov	r0, r4
   d4ca8:	4798      	blx	r3
    }
    write('"');
   d4caa:	2122      	movs	r1, #34	; 0x22
   d4cac:	4620      	mov	r0, r4
   d4cae:	f7ff fe9d 	bl	d49ec <_ZN5spark10JSONWriter5writeEc>
}
   d4cb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4cb6:	bf00      	nop
   d4cb8:	000d67ee 	.word	0x000d67ee

000d4cbc <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   d4cbc:	b513      	push	{r0, r1, r4, lr}
   d4cbe:	4604      	mov	r4, r0
   d4cc0:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   d4cc4:	f7ff ff64 	bl	d4b90 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   d4cc8:	4620      	mov	r0, r4
   d4cca:	e9dd 2100 	ldrd	r2, r1, [sp]
   d4cce:	f7ff ff9d 	bl	d4c0c <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   d4cd2:	2302      	movs	r3, #2
}
   d4cd4:	4620      	mov	r0, r4
    state_ = VALUE;
   d4cd6:	7123      	strb	r3, [r4, #4]
}
   d4cd8:	b002      	add	sp, #8
   d4cda:	bd10      	pop	{r4, pc}

000d4cdc <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   d4cdc:	b513      	push	{r0, r1, r4, lr}
   d4cde:	4604      	mov	r4, r0
   d4ce0:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   d4ce4:	f7ff ff54 	bl	d4b90 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   d4ce8:	4620      	mov	r0, r4
   d4cea:	e9dd 2100 	ldrd	r2, r1, [sp]
   d4cee:	f7ff ff8d 	bl	d4c0c <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   d4cf2:	2301      	movs	r3, #1
}
   d4cf4:	4620      	mov	r0, r4
    state_ = NEXT;
   d4cf6:	7123      	strb	r3, [r4, #4]
}
   d4cf8:	b002      	add	sp, #8
   d4cfa:	bd10      	pop	{r4, pc}

000d4cfc <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
   d4cfc:	6880      	ldr	r0, [r0, #8]
   d4cfe:	6803      	ldr	r3, [r0, #0]
   d4d00:	68db      	ldr	r3, [r3, #12]
   d4d02:	4718      	bx	r3

000d4d04 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
   d4d04:	4770      	bx	lr

000d4d06 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   d4d06:	4608      	mov	r0, r1
   d4d08:	b111      	cbz	r1, d4d10 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   d4d0a:	680b      	ldr	r3, [r1, #0]
   d4d0c:	685b      	ldr	r3, [r3, #4]
   d4d0e:	4718      	bx	r3
}
   d4d10:	4770      	bx	lr

000d4d12 <__tcf_0>:
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
    static DefaultLogHandlerFactory factory;
   d4d12:	4770      	bx	lr

000d4d14 <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   d4d14:	4770      	bx	lr

000d4d16 <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
   d4d16:	4770      	bx	lr

000d4d18 <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
   d4d18:	4770      	bx	lr

000d4d1a <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
const char* nextSubcategoryName(const char* &category, size_t &size) {
   d4d1a:	b538      	push	{r3, r4, r5, lr}
   d4d1c:	4604      	mov	r4, r0
   d4d1e:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   d4d20:	6800      	ldr	r0, [r0, #0]
   d4d22:	212e      	movs	r1, #46	; 0x2e
   d4d24:	f001 fbb3 	bl	d648e <strchrnul>
    size = s - category;
   d4d28:	6823      	ldr	r3, [r4, #0]
   d4d2a:	1ac3      	subs	r3, r0, r3
   d4d2c:	602b      	str	r3, [r5, #0]
    if (size) {
   d4d2e:	b123      	cbz	r3, d4d3a <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   d4d30:	7803      	ldrb	r3, [r0, #0]
   d4d32:	b103      	cbz	r3, d4d36 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   d4d34:	3001      	adds	r0, #1
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d4d36:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d4d38:	6020      	str	r0, [r4, #0]
}
   d4d3a:	4618      	mov	r0, r3
   d4d3c:	bd38      	pop	{r3, r4, r5, pc}

000d4d3e <_ZN5spark16JSONStreamWriterD0Ev>:
   d4d3e:	b510      	push	{r4, lr}
   d4d40:	210c      	movs	r1, #12
   d4d42:	4604      	mov	r4, r0
   d4d44:	f001 fb38 	bl	d63b8 <_ZdlPvj>
   d4d48:	4620      	mov	r0, r4
   d4d4a:	bd10      	pop	{r4, pc}

000d4d4c <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   d4d4c:	b510      	push	{r4, lr}
   d4d4e:	2104      	movs	r1, #4
   d4d50:	4604      	mov	r4, r0
   d4d52:	f001 fb31 	bl	d63b8 <_ZdlPvj>
   d4d56:	4620      	mov	r0, r4
   d4d58:	bd10      	pop	{r4, pc}

000d4d5a <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   d4d5a:	b510      	push	{r4, lr}
   d4d5c:	2104      	movs	r1, #4
   d4d5e:	4604      	mov	r4, r0
   d4d60:	f001 fb2a 	bl	d63b8 <_ZdlPvj>
   d4d64:	4620      	mov	r0, r4
   d4d66:	bd10      	pop	{r4, pc}

000d4d68 <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
   d4d68:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   d4d6a:	f001 fb9a 	bl	d64a2 <strcmp>
}
   d4d6e:	fab0 f080 	clz	r0, r0
   d4d72:	0940      	lsrs	r0, r0, #5
   d4d74:	bd08      	pop	{r3, pc}

000d4d76 <__tcf_1>:
   d4d76:	4770      	bx	lr

000d4d78 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != 3
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   d4d78:	b510      	push	{r4, lr}
   d4d7a:	460c      	mov	r4, r1
#if PLATFORM_ID != 3
    if (stream == &Serial) {
   d4d7c:	f001 fa5a 	bl	d6234 <_Z16_fetch_usbserialv>
   d4d80:	4284      	cmp	r4, r0
   d4d82:	d010      	beq.n	d4da6 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   d4d84:	f001 f9b4 	bl	d60f0 <_Z22__fetch_global_Serial1v>
   d4d88:	4284      	cmp	r4, r0
   d4d8a:	d105      	bne.n	d4d98 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x20>
        Serial1.end();
   d4d8c:	f001 f9b0 	bl	d60f0 <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
}
   d4d90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
   d4d94:	f001 b9a9 	b.w	d60ea <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   d4d98:	b12c      	cbz	r4, d4da6 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
   d4d9a:	6823      	ldr	r3, [r4, #0]
   d4d9c:	4620      	mov	r0, r4
   d4d9e:	685b      	ldr	r3, [r3, #4]
}
   d4da0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d4da4:	4718      	bx	r3
   d4da6:	bd10      	pop	{r4, pc}

000d4da8 <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   d4da8:	b513      	push	{r0, r1, r4, lr}
   d4daa:	4604      	mov	r4, r0
    return value(val, strlen(val));
   d4dac:	4608      	mov	r0, r1
   d4dae:	9101      	str	r1, [sp, #4]
   d4db0:	f001 fb89 	bl	d64c6 <strlen>
   d4db4:	9901      	ldr	r1, [sp, #4]
   d4db6:	4602      	mov	r2, r0
   d4db8:	4620      	mov	r0, r4
}
   d4dba:	b002      	add	sp, #8
   d4dbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
   d4dc0:	f7ff bf8c 	b.w	d4cdc <_ZN5spark10JSONWriter5valueEPKcj>

000d4dc4 <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
   d4dc4:	b513      	push	{r0, r1, r4, lr}
   d4dc6:	4604      	mov	r4, r0
    write(str, strlen(str));
   d4dc8:	4608      	mov	r0, r1
   d4dca:	9101      	str	r1, [sp, #4]
   d4dcc:	f001 fb7b 	bl	d64c6 <strlen>
   d4dd0:	6823      	ldr	r3, [r4, #0]
   d4dd2:	9901      	ldr	r1, [sp, #4]
   d4dd4:	68db      	ldr	r3, [r3, #12]
   d4dd6:	4602      	mov	r2, r0
   d4dd8:	4620      	mov	r0, r4
}
   d4dda:	b002      	add	sp, #8
   d4ddc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
   d4de0:	4718      	bx	r3

000d4de2 <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
   d4de2:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   d4de4:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
   d4de6:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   d4dea:	68db      	ldr	r3, [r3, #12]
   d4dec:	2201      	movs	r2, #1
   d4dee:	f10d 0107 	add.w	r1, sp, #7
   d4df2:	4798      	blx	r3
}
   d4df4:	b003      	add	sp, #12
   d4df6:	f85d fb04 	ldr.w	pc, [sp], #4

000d4dfa <_ZN5spark16StreamLogHandler6printfEPKcz>:
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   d4dfa:	b40e      	push	{r1, r2, r3}
   d4dfc:	b503      	push	{r0, r1, lr}
   d4dfe:	ab03      	add	r3, sp, #12
    stream_->vprintf(false, fmt, args);
   d4e00:	2100      	movs	r1, #0
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   d4e02:	f853 2b04 	ldr.w	r2, [r3], #4
    stream_->vprintf(false, fmt, args);
   d4e06:	6a00      	ldr	r0, [r0, #32]
    va_start(args, fmt);
   d4e08:	9301      	str	r3, [sp, #4]
    stream_->vprintf(false, fmt, args);
   d4e0a:	f001 f832 	bl	d5e72 <_ZN5Print7vprintfEbPKcSt9__va_list>
}
   d4e0e:	b002      	add	sp, #8
   d4e10:	f85d eb04 	ldr.w	lr, [sp], #4
   d4e14:	b003      	add	sp, #12
   d4e16:	4770      	bx	lr

000d4e18 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   d4e18:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
   d4e1c:	e9d0 9500 	ldrd	r9, r5, [r0]
   d4e20:	f04f 0814 	mov.w	r8, #20
   d4e24:	fb08 f505 	mul.w	r5, r8, r5
   d4e28:	9300      	str	r3, [sp, #0]
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   d4e2a:	10ab      	asrs	r3, r5, #2
   d4e2c:	4d18      	ldr	r5, [pc, #96]	; (d4e90 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x78>)
   d4e2e:	4617      	mov	r7, r2
   d4e30:	435d      	muls	r5, r3
   d4e32:	464c      	mov	r4, r9
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
   d4e34:	2d00      	cmp	r5, #0
   d4e36:	dd23      	ble.n	d4e80 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x68>
	{
	  _DistanceType __half = __len >> 1;
   d4e38:	106e      	asrs	r6, r5, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
   d4e3a:	fb08 f006 	mul.w	r0, r8, r6
   d4e3e:	eb04 0a00 	add.w	sl, r4, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   d4e42:	463a      	mov	r2, r7
   d4e44:	f8ba b004 	ldrh.w	fp, [sl, #4]
   d4e48:	5820      	ldr	r0, [r4, r0]
   d4e4a:	9101      	str	r1, [sp, #4]
   d4e4c:	455f      	cmp	r7, fp
   d4e4e:	bf28      	it	cs
   d4e50:	465a      	movcs	r2, fp
   d4e52:	f001 fb40 	bl	d64d6 <strncmp>
                if (cmp == 0) {
   d4e56:	9901      	ldr	r1, [sp, #4]
   d4e58:	2301      	movs	r3, #1
   d4e5a:	b978      	cbnz	r0, d4e7c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
                    if (node.size == value.second) { // Lengths are equal
   d4e5c:	455f      	cmp	r7, fp
   d4e5e:	d103      	bne.n	d4e68 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   d4e60:	9a00      	ldr	r2, [sp, #0]
   d4e62:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   d4e64:	4635      	mov	r5, r6
   d4e66:	e7e5      	b.n	d4e34 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
                    return node.size < value.second;
   d4e68:	bf8c      	ite	hi
   d4e6a:	2001      	movhi	r0, #1
   d4e6c:	2000      	movls	r0, #0
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
   d4e6e:	2800      	cmp	r0, #0
   d4e70:	d0f8      	beq.n	d4e64 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x4c>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   d4e72:	1bae      	subs	r6, r5, r6
	      ++__first;
   d4e74:	f10a 0414 	add.w	r4, sl, #20
	      __len = __len - __half - 1;
   d4e78:	3e01      	subs	r6, #1
   d4e7a:	e7f3      	b.n	d4e64 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x4c>
                return cmp < 0;
   d4e7c:	0fc0      	lsrs	r0, r0, #31
   d4e7e:	e7f6      	b.n	d4e6e <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
      return __last - __first;
   d4e80:	eba4 0409 	sub.w	r4, r4, r9
}
   d4e84:	4802      	ldr	r0, [pc, #8]	; (d4e90 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x78>)
   d4e86:	10a4      	asrs	r4, r4, #2
   d4e88:	4360      	muls	r0, r4
   d4e8a:	b003      	add	sp, #12
   d4e8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d4e90:	cccccccd 	.word	0xcccccccd

000d4e94 <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
   d4e94:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
   d4e96:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
   d4e98:	7e06      	ldrb	r6, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
   d4e9a:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
   d4e9c:	b30b      	cbz	r3, d4ee2 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
   d4e9e:	b301      	cbz	r1, d4ee2 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
        size_t size = 0; // Name length
   d4ea0:	2500      	movs	r5, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   d4ea2:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
   d4ea6:	9503      	str	r5, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
   d4ea8:	a903      	add	r1, sp, #12
   d4eaa:	a801      	add	r0, sp, #4
   d4eac:	f7ff ff35 	bl	d4d1a <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   d4eb0:	4601      	mov	r1, r0
   d4eb2:	b1b0      	cbz	r0, d4ee2 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
            const int index = nodeIndex(*pNodes, name, size, found);
   d4eb4:	f10d 030b 	add.w	r3, sp, #11
   d4eb8:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
   d4eba:	f88d 500b 	strb.w	r5, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
   d4ebe:	4620      	mov	r0, r4
   d4ec0:	f7ff ffaa 	bl	d4e18 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   d4ec4:	f89d 300b 	ldrb.w	r3, [sp, #11]
   d4ec8:	b15b      	cbz	r3, d4ee2 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
    return data_[i];
   d4eca:	6824      	ldr	r4, [r4, #0]
   d4ecc:	2314      	movs	r3, #20
   d4ece:	fb03 4000 	mla	r0, r3, r0, r4
            pNodes = &node.nodes;
   d4ed2:	f100 0408 	add.w	r4, r0, #8
            if (node.level >= 0) {
   d4ed6:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
   d4eda:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   d4edc:	bfa8      	it	ge
   d4ede:	b2de      	uxtbge	r6, r3
        while ((name = nextSubcategoryName(category, size))) {
   d4ee0:	e7e2      	b.n	d4ea8 <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
   d4ee2:	4630      	mov	r0, r6
   d4ee4:	b004      	add	sp, #16
   d4ee6:	bd70      	pop	{r4, r5, r6, pc}

000d4ee8 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   d4ee8:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   d4eea:	4c09      	ldr	r4, [pc, #36]	; (d4f10 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
   d4eec:	7823      	ldrb	r3, [r4, #0]
   d4eee:	f3bf 8f5b 	dmb	ish
   d4ef2:	07db      	lsls	r3, r3, #31
   d4ef4:	d409      	bmi.n	d4f0a <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   d4ef6:	4620      	mov	r0, r4
   d4ef8:	f7ff f8da 	bl	d40b0 <__cxa_guard_acquire>
   d4efc:	b128      	cbz	r0, d4f0a <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   d4efe:	4620      	mov	r0, r4
   d4f00:	f7ff f8db 	bl	d40ba <__cxa_guard_release>
   d4f04:	4803      	ldr	r0, [pc, #12]	; (d4f14 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   d4f06:	f001 fa5b 	bl	d63c0 <atexit>
}
   d4f0a:	4803      	ldr	r0, [pc, #12]	; (d4f18 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   d4f0c:	bd10      	pop	{r4, pc}
   d4f0e:	bf00      	nop
   d4f10:	2003e6b0 	.word	0x2003e6b0
   d4f14:	000d4d13 	.word	0x000d4d13
   d4f18:	2003e4cc 	.word	0x2003e4cc

000d4f1c <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   d4f1c:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   d4f1e:	4c09      	ldr	r4, [pc, #36]	; (d4f44 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
   d4f20:	7823      	ldrb	r3, [r4, #0]
   d4f22:	f3bf 8f5b 	dmb	ish
   d4f26:	07db      	lsls	r3, r3, #31
   d4f28:	d409      	bmi.n	d4f3e <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   d4f2a:	4620      	mov	r0, r4
   d4f2c:	f7ff f8c0 	bl	d40b0 <__cxa_guard_acquire>
   d4f30:	b128      	cbz	r0, d4f3e <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   d4f32:	4620      	mov	r0, r4
   d4f34:	f7ff f8c1 	bl	d40ba <__cxa_guard_release>
   d4f38:	4803      	ldr	r0, [pc, #12]	; (d4f48 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   d4f3a:	f001 fa41 	bl	d63c0 <atexit>
    return &factory;
}
   d4f3e:	4803      	ldr	r0, [pc, #12]	; (d4f4c <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   d4f40:	bd10      	pop	{r4, pc}
   d4f42:	bf00      	nop
   d4f44:	2003e6b4 	.word	0x2003e6b4
   d4f48:	000d4d77 	.word	0x000d4d77
   d4f4c:	2003e4d0 	.word	0x2003e4d0

000d4f50 <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   d4f50:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   d4f52:	2500      	movs	r5, #0
   d4f54:	4604      	mov	r4, r0
   d4f56:	e9c0 5500 	strd	r5, r5, [r0]
   d4f5a:	e9c0 5504 	strd	r5, r5, [r0, #16]
   d4f5e:	6085      	str	r5, [r0, #8]
   d4f60:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
   d4f62:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
   d4f66:	f7ff fa05 	bl	d4374 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   d4f6a:	f7ff ffbd 	bl	d4ee8 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   d4f6e:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   d4f70:	f7ff ffd4 	bl	d4f1c <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   d4f74:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   d4f76:	6220      	str	r0, [r4, #32]
}
   d4f78:	4620      	mov	r0, r4
   d4f7a:	bd38      	pop	{r3, r4, r5, pc}

000d4f7c <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   d4f7c:	b510      	push	{r4, lr}
    static LogManager mgr;
   d4f7e:	4c0a      	ldr	r4, [pc, #40]	; (d4fa8 <_ZN5spark10LogManager8instanceEv+0x2c>)
   d4f80:	7823      	ldrb	r3, [r4, #0]
   d4f82:	f3bf 8f5b 	dmb	ish
   d4f86:	07db      	lsls	r3, r3, #31
   d4f88:	d40c      	bmi.n	d4fa4 <_ZN5spark10LogManager8instanceEv+0x28>
   d4f8a:	4620      	mov	r0, r4
   d4f8c:	f7ff f890 	bl	d40b0 <__cxa_guard_acquire>
   d4f90:	b140      	cbz	r0, d4fa4 <_ZN5spark10LogManager8instanceEv+0x28>
   d4f92:	4806      	ldr	r0, [pc, #24]	; (d4fac <_ZN5spark10LogManager8instanceEv+0x30>)
   d4f94:	f7ff ffdc 	bl	d4f50 <_ZN5spark10LogManagerC1Ev>
   d4f98:	4620      	mov	r0, r4
   d4f9a:	f7ff f88e 	bl	d40ba <__cxa_guard_release>
   d4f9e:	4804      	ldr	r0, [pc, #16]	; (d4fb0 <_ZN5spark10LogManager8instanceEv+0x34>)
   d4fa0:	f001 fa0e 	bl	d63c0 <atexit>
    return &mgr;
}
   d4fa4:	4801      	ldr	r0, [pc, #4]	; (d4fac <_ZN5spark10LogManager8instanceEv+0x30>)
   d4fa6:	bd10      	pop	{r4, pc}
   d4fa8:	2003e6ac 	.word	0x2003e6ac
   d4fac:	2003e6bc 	.word	0x2003e6bc
   d4fb0:	000d545d 	.word	0x000d545d

000d4fb4 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   d4fb4:	4a02      	ldr	r2, [pc, #8]	; (d4fc0 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   d4fb6:	4903      	ldr	r1, [pc, #12]	; (d4fc4 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   d4fb8:	4803      	ldr	r0, [pc, #12]	; (d4fc8 <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   d4fba:	2300      	movs	r3, #0
   d4fbc:	f7ff baca 	b.w	d4554 <log_set_callbacks>
   d4fc0:	000d52e5 	.word	0x000d52e5
   d4fc4:	000d5271 	.word	0x000d5271
   d4fc8:	000d51f1 	.word	0x000d51f1

000d4fcc <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   d4fcc:	2300      	movs	r3, #0
   d4fce:	461a      	mov	r2, r3
   d4fd0:	4619      	mov	r1, r3
   d4fd2:	4618      	mov	r0, r3
   d4fd4:	f7ff babe 	b.w	d4554 <log_set_callbacks>

000d4fd8 <_ZNK5spark18JSONObjectIterator5valueEv>:
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   d4fd8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONValue(v_, d_);
   d4fda:	690d      	ldr	r5, [r1, #16]
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r,
		     element_type* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4fdc:	f851 3b04 	ldr.w	r3, [r1], #4
   d4fe0:	9300      	str	r3, [sp, #0]
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   d4fe2:	4604      	mov	r4, r0
   d4fe4:	a801      	add	r0, sp, #4
   d4fe6:	f7ff fb8c 	bl	d4702 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return JSONValue(v_, d_);
   d4fea:	466a      	mov	r2, sp
   d4fec:	4629      	mov	r1, r5
   d4fee:	4620      	mov	r0, r4
   d4ff0:	f7ff fd1f 	bl	d4a32 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4ff4:	a801      	add	r0, sp, #4
   d4ff6:	f7ff fb8b 	bl	d4710 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d4ffa:	4620      	mov	r0, r4
   d4ffc:	b003      	add	sp, #12
   d4ffe:	bd30      	pop	{r4, r5, pc}

000d5000 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   d5000:	b537      	push	{r0, r1, r2, r4, r5, lr}
        JSONObjectIterator(value.t_, value.d_) {
   d5002:	688d      	ldr	r5, [r1, #8]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5004:	f851 3b04 	ldr.w	r3, [r1], #4
   d5008:	9300      	str	r3, [sp, #0]
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   d500a:	4604      	mov	r4, r0
   d500c:	a801      	add	r0, sp, #4
   d500e:	f7ff fb78 	bl	d4702 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        JSONObjectIterator(value.t_, value.d_) {
   d5012:	466a      	mov	r2, sp
   d5014:	4629      	mov	r1, r5
   d5016:	4620      	mov	r0, r4
   d5018:	f7ff fd86 	bl	d4b28 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d501c:	a801      	add	r0, sp, #4
   d501e:	f7ff fb77 	bl	d4710 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d5022:	4620      	mov	r0, r4
   d5024:	b003      	add	sp, #12
   d5026:	bd30      	pop	{r4, r5, pc}

000d5028 <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
   d5028:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONString(k_, d_);
   d502a:	68cd      	ldr	r5, [r1, #12]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d502c:	f851 3b04 	ldr.w	r3, [r1], #4
   d5030:	9300      	str	r3, [sp, #0]
inline spark::JSONString spark::JSONObjectIterator::name() const {
   d5032:	4604      	mov	r4, r0
   d5034:	a801      	add	r0, sp, #4
   d5036:	f7ff fb64 	bl	d4702 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return JSONString(k_, d_);
   d503a:	466a      	mov	r2, sp
   d503c:	4629      	mov	r1, r5
   d503e:	4620      	mov	r0, r4
   d5040:	f7ff fd4e 	bl	d4ae0 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d5044:	a801      	add	r0, sp, #4
   d5046:	f7ff fb63 	bl	d4710 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d504a:	4620      	mov	r0, r4
   d504c:	b003      	add	sp, #12
   d504e:	bd30      	pop	{r4, r5, pc}

000d5050 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   d5050:	b570      	push	{r4, r5, r6, lr}
   d5052:	b08a      	sub	sp, #40	; 0x28
   d5054:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   d5056:	4601      	mov	r1, r0
   d5058:	a804      	add	r0, sp, #16
   d505a:	f7ff ffd1 	bl	d5000 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
   d505e:	4e14      	ldr	r6, [pc, #80]	; (d50b0 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
   d5060:	a804      	add	r0, sp, #16
   d5062:	f7ff fd79 	bl	d4b58 <_ZN5spark18JSONObjectIterator4nextEv>
   d5066:	b1e8      	cbz	r0, d50a4 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
   d5068:	a904      	add	r1, sp, #16
   d506a:	4668      	mov	r0, sp
   d506c:	f7ff ffdc 	bl	d5028 <_ZNK5spark18JSONObjectIterator4nameEv>
   d5070:	9802      	ldr	r0, [sp, #8]
   d5072:	4631      	mov	r1, r6
   d5074:	f7ff fe78 	bl	d4d68 <_ZNK5spark10JSONStringeqEPKc.isra.0>
   d5078:	4604      	mov	r4, r0
   d507a:	b110      	cbz	r0, d5082 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
   d507c:	1e2c      	subs	r4, r5, #0
   d507e:	bf18      	it	ne
   d5080:	2401      	movne	r4, #1
   d5082:	a801      	add	r0, sp, #4
   d5084:	f7ff fb44 	bl	d4710 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5088:	2c00      	cmp	r4, #0
   d508a:	d0e9      	beq.n	d5060 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
   d508c:	a904      	add	r1, sp, #16
   d508e:	4668      	mov	r0, sp
   d5090:	f7ff ffa2 	bl	d4fd8 <_ZNK5spark18JSONObjectIterator5valueEv>
   d5094:	4668      	mov	r0, sp
   d5096:	f7ff fd02 	bl	d4a9e <_ZNK5spark9JSONValue5toIntEv>
   d509a:	6028      	str	r0, [r5, #0]
   d509c:	a801      	add	r0, sp, #4
   d509e:	f7ff fb37 	bl	d4710 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d50a2:	e7dd      	b.n	d5060 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
   d50a4:	a805      	add	r0, sp, #20
   d50a6:	f7ff fb33 	bl	d4710 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d50aa:	b00a      	add	sp, #40	; 0x28
   d50ac:	bd70      	pop	{r4, r5, r6, pc}
   d50ae:	bf00      	nop
   d50b0:	000d67f4 	.word	0x000d67f4

000d50b4 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   d50b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d50b6:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
   d50b8:	4620      	mov	r0, r4
   d50ba:	4912      	ldr	r1, [pc, #72]	; (d5104 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>)
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   d50bc:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
   d50be:	f001 f9f0 	bl	d64a2 <strcmp>
   d50c2:	b948      	cbnz	r0, d50d8 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x24>
        Serial.begin();
   d50c4:	f001 f8b6 	bl	d6234 <_Z16_fetch_usbserialv>
   d50c8:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d50cc:	f001 f8a2 	bl	d6214 <_ZN9USBSerial5beginEl>
        return &Serial;
   d50d0:	f001 f8b0 	bl	d6234 <_Z16_fetch_usbserialv>
}
   d50d4:	b003      	add	sp, #12
   d50d6:	bd30      	pop	{r4, r5, pc}
    if (strcmp(type, "Serial1") == 0) {
   d50d8:	490b      	ldr	r1, [pc, #44]	; (d5108 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
   d50da:	4620      	mov	r0, r4
   d50dc:	f001 f9e1 	bl	d64a2 <strcmp>
   d50e0:	b970      	cbnz	r0, d5100 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
        int baud = 9600;
   d50e2:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
   d50e6:	a901      	add	r1, sp, #4
   d50e8:	4628      	mov	r0, r5
        int baud = 9600;
   d50ea:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
   d50ec:	f7ff ffb0 	bl	d5050 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   d50f0:	f000 fffe 	bl	d60f0 <_Z22__fetch_global_Serial1v>
   d50f4:	9901      	ldr	r1, [sp, #4]
   d50f6:	f000 fff5 	bl	d60e4 <_ZN11USARTSerial5beginEm>
        return &Serial1;
   d50fa:	f000 fff9 	bl	d60f0 <_Z22__fetch_global_Serial1v>
   d50fe:	e7e9      	b.n	d50d4 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x20>
    return nullptr;
   d5100:	2000      	movs	r0, #0
   d5102:	e7e7      	b.n	d50d4 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x20>
   d5104:	000d670c 	.word	0x000d670c
   d5108:	000d6713 	.word	0x000d6713

000d510c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   d510c:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d510e:	e9d0 5300 	ldrd	r5, r3, [r0]
   d5112:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   d5114:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d5116:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   d511a:	42ae      	cmp	r6, r5
   d511c:	d005      	beq.n	d512a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
   d511e:	f105 0008 	add.w	r0, r5, #8
   d5122:	f7ff fff3 	bl	d510c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d5126:	3514      	adds	r5, #20
   d5128:	e7f7      	b.n	d511a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   d512a:	6820      	ldr	r0, [r4, #0]
   d512c:	f7ff faae 	bl	d468c <free>
}
   d5130:	4620      	mov	r0, r4
   d5132:	bd70      	pop	{r4, r5, r6, pc}

000d5134 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   d5134:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d5136:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   d513a:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d513c:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
   d5140:	42ae      	cmp	r6, r5
   d5142:	d004      	beq.n	d514e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   d5144:	4628      	mov	r0, r5
   d5146:	f000 fecb 	bl	d5ee0 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
   d514a:	3510      	adds	r5, #16
   d514c:	e7f8      	b.n	d5140 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   d514e:	6820      	ldr	r0, [r4, #0]
   d5150:	f7ff fa9c 	bl	d468c <free>
}
   d5154:	4620      	mov	r0, r4
   d5156:	bd70      	pop	{r4, r5, r6, pc}

000d5158 <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
   d5158:	b510      	push	{r4, lr}
   d515a:	4604      	mov	r4, r0
   d515c:	300c      	adds	r0, #12
   d515e:	f7ff ffd5 	bl	d510c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d5162:	4620      	mov	r0, r4
   d5164:	f7ff ffe6 	bl	d5134 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   d5168:	4620      	mov	r0, r4
   d516a:	bd10      	pop	{r4, pc}

000d516c <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
   d516c:	b510      	push	{r4, lr}
    virtual ~LogHandler() = default;
   d516e:	4b04      	ldr	r3, [pc, #16]	; (d5180 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
class StreamLogHandler: public LogHandler {
   d5170:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
   d5172:	f840 3b04 	str.w	r3, [r0], #4
   d5176:	f7ff ffef 	bl	d5158 <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
   d517a:	4620      	mov	r0, r4
   d517c:	bd10      	pop	{r4, pc}
   d517e:	bf00      	nop
   d5180:	000d6734 	.word	0x000d6734

000d5184 <_ZN5spark16StreamLogHandlerD0Ev>:
   d5184:	b510      	push	{r4, lr}
   d5186:	4604      	mov	r4, r0
   d5188:	f7ff fff0 	bl	d516c <_ZN5spark16StreamLogHandlerD1Ev>
   d518c:	4620      	mov	r0, r4
   d518e:	2124      	movs	r1, #36	; 0x24
   d5190:	f001 f912 	bl	d63b8 <_ZdlPvj>
   d5194:	4620      	mov	r0, r4
   d5196:	bd10      	pop	{r4, pc}

000d5198 <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
   d5198:	b510      	push	{r4, lr}
   d519a:	4b03      	ldr	r3, [pc, #12]	; (d51a8 <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   d519c:	6003      	str	r3, [r0, #0]
   d519e:	4604      	mov	r4, r0
   d51a0:	f7ff ffe4 	bl	d516c <_ZN5spark16StreamLogHandlerD1Ev>
   d51a4:	4620      	mov	r0, r4
   d51a6:	bd10      	pop	{r4, pc}
   d51a8:	000d6894 	.word	0x000d6894

000d51ac <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   d51ac:	b510      	push	{r4, lr}
   d51ae:	4604      	mov	r4, r0
   d51b0:	f7ff fff2 	bl	d5198 <_ZN5spark20JSONStreamLogHandlerD1Ev>
   d51b4:	4620      	mov	r0, r4
   d51b6:	2124      	movs	r1, #36	; 0x24
   d51b8:	f001 f8fe 	bl	d63b8 <_ZdlPvj>
   d51bc:	4620      	mov	r0, r4
   d51be:	bd10      	pop	{r4, pc}

000d51c0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
   d51c0:	2200      	movs	r2, #0
   d51c2:	e9c0 2200 	strd	r2, r2, [r0]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   d51c6:	b510      	push	{r4, lr}
        capacity_(0) {
   d51c8:	6082      	str	r2, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   d51ca:	680c      	ldr	r4, [r1, #0]
   d51cc:	6004      	str	r4, [r0, #0]
   d51ce:	684c      	ldr	r4, [r1, #4]
   d51d0:	6044      	str	r4, [r0, #4]
   d51d2:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d51d4:	600a      	str	r2, [r1, #0]
   d51d6:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   d51d8:	6084      	str	r4, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d51da:	608a      	str	r2, [r1, #8]
}
   d51dc:	bd10      	pop	{r4, pc}

000d51de <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   d51de:	b510      	push	{r4, lr}
      { _M_device.unlock(); }
   d51e0:	6803      	ldr	r3, [r0, #0]
      ~lock_guard()
   d51e2:	4604      	mov	r4, r0
    }

    void lock() { os_mutex_recursive_lock(handle_); }
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d51e4:	6818      	ldr	r0, [r3, #0]
   d51e6:	f7ff f8dd 	bl	d43a4 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   d51ea:	4620      	mov	r0, r4
   d51ec:	bd10      	pop	{r4, pc}
	...

000d51f0 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   d51f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d51f4:	b087      	sub	sp, #28
   d51f6:	4680      	mov	r8, r0
   d51f8:	9303      	str	r3, [sp, #12]
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   d51fa:	4b1c      	ldr	r3, [pc, #112]	; (d526c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
   d51fc:	685b      	ldr	r3, [r3, #4]
   d51fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
   d5202:	4689      	mov	r9, r1
   d5204:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d5206:	b96b      	cbnz	r3, d5224 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
   d5208:	f7ff feb8 	bl	d4f7c <_ZN5spark10LogManager8instanceEv>
   d520c:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   d520e:	f100 0324 	add.w	r3, r0, #36	; 0x24
    void lock() { os_mutex_recursive_lock(handle_); }
   d5212:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d5214:	9305      	str	r3, [sp, #20]
   d5216:	f7ff f8bd 	bl	d4394 <os_mutex_recursive_lock>
        // prevent re-entry
        if (that->isActive()) {
   d521a:	7b23      	ldrb	r3, [r4, #12]
   d521c:	b12b      	cbz	r3, d522a <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
   d521e:	a805      	add	r0, sp, #20
   d5220:	f7ff ffdd 	bl	d51de <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   d5224:	b007      	add	sp, #28
   d5226:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   d522a:	2301      	movs	r3, #1
   d522c:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
   d522e:	e9d4 5300 	ldrd	r5, r3, [r4]
            handler->message(msg, (LogLevel)level, category, *attr);
   d5232:	fa5f f989 	uxtb.w	r9, r9
   d5236:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   d523a:	45aa      	cmp	sl, r5
   d523c:	d012      	beq.n	d5264 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
   d523e:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
   d5242:	4631      	mov	r1, r6
   d5244:	1d38      	adds	r0, r7, #4
   d5246:	f7ff fe25 	bl	d4e94 <_ZNK5spark6detail9LogFilter5levelEPKc>
   d524a:	4581      	cmp	r9, r0
   d524c:	d3f5      	bcc.n	d523a <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
   d524e:	683b      	ldr	r3, [r7, #0]
   d5250:	9a03      	ldr	r2, [sp, #12]
   d5252:	9200      	str	r2, [sp, #0]
   d5254:	f8d3 b008 	ldr.w	fp, [r3, #8]
   d5258:	464a      	mov	r2, r9
   d525a:	4633      	mov	r3, r6
   d525c:	4641      	mov	r1, r8
   d525e:	4638      	mov	r0, r7
   d5260:	47d8      	blx	fp
   d5262:	e7ea      	b.n	d523a <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
   d5264:	2300      	movs	r3, #0
   d5266:	7323      	strb	r3, [r4, #12]
   d5268:	e7d9      	b.n	d521e <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
   d526a:	bf00      	nop
   d526c:	e000ed00 	.word	0xe000ed00

000d5270 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   d5270:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5274:	469b      	mov	fp, r3
   d5276:	4b1a      	ldr	r3, [pc, #104]	; (d52e0 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
   d5278:	685b      	ldr	r3, [r3, #4]
   d527a:	f3c3 0308 	ubfx	r3, r3, #0, #9
   d527e:	4680      	mov	r8, r0
   d5280:	4689      	mov	r9, r1
   d5282:	4616      	mov	r6, r2
    if (HAL_IsISR()) {
   d5284:	b96b      	cbnz	r3, d52a2 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
   d5286:	f7ff fe79 	bl	d4f7c <_ZN5spark10LogManager8instanceEv>
   d528a:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   d528c:	f100 0324 	add.w	r3, r0, #36	; 0x24
   d5290:	6a40      	ldr	r0, [r0, #36]	; 0x24
   d5292:	9301      	str	r3, [sp, #4]
   d5294:	f7ff f87e 	bl	d4394 <os_mutex_recursive_lock>
        if (that->isActive()) {
   d5298:	7b23      	ldrb	r3, [r4, #12]
   d529a:	b12b      	cbz	r3, d52a8 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
   d529c:	a801      	add	r0, sp, #4
   d529e:	f7ff ff9e 	bl	d51de <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   d52a2:	b003      	add	sp, #12
   d52a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
   d52a8:	2301      	movs	r3, #1
   d52aa:	7323      	strb	r3, [r4, #12]
   d52ac:	e9d4 5300 	ldrd	r5, r3, [r4]
    if (level >= filter_.level(category)) {
   d52b0:	b2f6      	uxtb	r6, r6
   d52b2:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   d52b6:	4555      	cmp	r5, sl
   d52b8:	d00e      	beq.n	d52d8 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
   d52ba:	f855 7b04 	ldr.w	r7, [r5], #4
   d52be:	4659      	mov	r1, fp
   d52c0:	1d38      	adds	r0, r7, #4
   d52c2:	f7ff fde7 	bl	d4e94 <_ZNK5spark6detail9LogFilter5levelEPKc>
   d52c6:	4286      	cmp	r6, r0
   d52c8:	d3f5      	bcc.n	d52b6 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
   d52ca:	683b      	ldr	r3, [r7, #0]
   d52cc:	464a      	mov	r2, r9
   d52ce:	68db      	ldr	r3, [r3, #12]
   d52d0:	4641      	mov	r1, r8
   d52d2:	4638      	mov	r0, r7
   d52d4:	4798      	blx	r3
   d52d6:	e7ee      	b.n	d52b6 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
   d52d8:	2300      	movs	r3, #0
   d52da:	7323      	strb	r3, [r4, #12]
   d52dc:	e7de      	b.n	d529c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
   d52de:	bf00      	nop
   d52e0:	e000ed00 	.word	0xe000ed00

000d52e4 <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   d52e4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d52e8:	4b16      	ldr	r3, [pc, #88]	; (d5344 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
   d52ea:	685b      	ldr	r3, [r3, #4]
   d52ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
   d52f0:	4605      	mov	r5, r0
   d52f2:	460f      	mov	r7, r1
    if (HAL_IsISR()) {
   d52f4:	bb1b      	cbnz	r3, d533e <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
   d52f6:	f7ff fe41 	bl	d4f7c <_ZN5spark10LogManager8instanceEv>
    LOG_WITH_LOCK(that->mutex_) {
   d52fa:	f100 0324 	add.w	r3, r0, #36	; 0x24
    LogManager *that = instance();
   d52fe:	4604      	mov	r4, r0
   d5300:	6a40      	ldr	r0, [r0, #36]	; 0x24
   d5302:	9301      	str	r3, [sp, #4]
   d5304:	f7ff f846 	bl	d4394 <os_mutex_recursive_lock>
   d5308:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
   d530c:	2446      	movs	r4, #70	; 0x46
   d530e:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   d5312:	45b0      	cmp	r8, r6
   d5314:	d109      	bne.n	d532a <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
   d5316:	a801      	add	r0, sp, #4
   d5318:	f7ff ff61 	bl	d51de <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
   d531c:	42a5      	cmp	r5, r4
   d531e:	bfb4      	ite	lt
   d5320:	2000      	movlt	r0, #0
   d5322:	2001      	movge	r0, #1
}
   d5324:	b002      	add	sp, #8
   d5326:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
   d532a:	f856 0b04 	ldr.w	r0, [r6], #4
   d532e:	4639      	mov	r1, r7
   d5330:	3004      	adds	r0, #4
   d5332:	f7ff fdaf 	bl	d4e94 <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
   d5336:	4284      	cmp	r4, r0
   d5338:	bfa8      	it	ge
   d533a:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
   d533c:	e7e9      	b.n	d5312 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
   d533e:	2000      	movs	r0, #0
   d5340:	e7f0      	b.n	d5324 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
   d5342:	bf00      	nop
   d5344:	e000ed00 	.word	0xe000ed00

000d5348 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d5348:	b570      	push	{r4, r5, r6, lr}
   d534a:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   d534c:	e9d0 0200 	ldrd	r0, r2, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d5350:	460b      	mov	r3, r1
    T* const p = find(data_, data_ + size_, value);
   d5352:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
   d5356:	4282      	cmp	r2, r0
   d5358:	d007      	beq.n	d536a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x22>
   d535a:	4601      	mov	r1, r0
            if (*p == value) {
   d535c:	681d      	ldr	r5, [r3, #0]
   d535e:	f851 6b04 	ldr.w	r6, [r1], #4
   d5362:	42ae      	cmp	r6, r5
   d5364:	d003      	beq.n	d536e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x26>
   d5366:	4608      	mov	r0, r1
   d5368:	e7f5      	b.n	d5356 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
   d536a:	2000      	movs	r0, #0
}
   d536c:	bd70      	pop	{r4, r5, r6, pc}
        ::memmove(dest, p, (end - p) * sizeof(T));
   d536e:	1a52      	subs	r2, r2, r1
   d5370:	f001 f83a 	bl	d63e8 <memmove>
    --size_;
   d5374:	6863      	ldr	r3, [r4, #4]
   d5376:	3b01      	subs	r3, #1
   d5378:	6063      	str	r3, [r4, #4]
    return true;
   d537a:	2001      	movs	r0, #1
   d537c:	e7f6      	b.n	d536c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x24>

000d537e <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
   d537e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    LOG_WITH_LOCK(mutex_) {
   d5380:	f100 0324 	add.w	r3, r0, #36	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
   d5384:	4604      	mov	r4, r0
   d5386:	6a40      	ldr	r0, [r0, #36]	; 0x24
   d5388:	9101      	str	r1, [sp, #4]
   d538a:	9303      	str	r3, [sp, #12]
   d538c:	f7ff f802 	bl	d4394 <os_mutex_recursive_lock>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   d5390:	a901      	add	r1, sp, #4
   d5392:	4620      	mov	r0, r4
   d5394:	f7ff ffd8 	bl	d5348 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   d5398:	b118      	cbz	r0, d53a2 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
   d539a:	6863      	ldr	r3, [r4, #4]
   d539c:	b90b      	cbnz	r3, d53a2 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
   d539e:	f7ff fe15 	bl	d4fcc <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   d53a2:	a803      	add	r0, sp, #12
   d53a4:	f7ff ff1b 	bl	d51de <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   d53a8:	b004      	add	sp, #16
   d53aa:	bd10      	pop	{r4, pc}

000d53ac <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
void spark::LogManager::destroyFactoryHandlers() {
   d53ac:	b570      	push	{r4, r5, r6, lr}
    return data_ + size_;
   d53ae:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
   d53b2:	2318      	movs	r3, #24
   d53b4:	4604      	mov	r4, r0
   d53b6:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   d53ba:	42ae      	cmp	r6, r5
   d53bc:	d015      	beq.n	d53ea <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   d53be:	f105 0110 	add.w	r1, r5, #16
   d53c2:	4620      	mov	r0, r4
   d53c4:	f7ff ffc0 	bl	d5348 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   d53c8:	6863      	ldr	r3, [r4, #4]
   d53ca:	b90b      	cbnz	r3, d53d0 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   d53cc:	f7ff fdfe 	bl	d4fcc <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
   d53d0:	69e0      	ldr	r0, [r4, #28]
   d53d2:	6929      	ldr	r1, [r5, #16]
   d53d4:	6803      	ldr	r3, [r0, #0]
   d53d6:	68db      	ldr	r3, [r3, #12]
   d53d8:	4798      	blx	r3
        if (h.stream) {
   d53da:	6969      	ldr	r1, [r5, #20]
   d53dc:	b119      	cbz	r1, d53e6 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   d53de:	6a20      	ldr	r0, [r4, #32]
   d53e0:	6803      	ldr	r3, [r0, #0]
   d53e2:	68db      	ldr	r3, [r3, #12]
   d53e4:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
   d53e6:	3518      	adds	r5, #24
   d53e8:	e7e7      	b.n	d53ba <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
   d53ea:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   d53ee:	2618      	movs	r6, #24
   d53f0:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   d53f4:	42ae      	cmp	r6, r5
   d53f6:	d004      	beq.n	d5402 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
   d53f8:	4628      	mov	r0, r5
   d53fa:	f000 fd71 	bl	d5ee0 <_ZN6StringD1Ev>
   d53fe:	3518      	adds	r5, #24
   d5400:	e7f8      	b.n	d53f4 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
   d5402:	2300      	movs	r3, #0
   d5404:	6163      	str	r3, [r4, #20]
}
   d5406:	bd70      	pop	{r4, r5, r6, pc}

000d5408 <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
   d5408:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d540a:	4604      	mov	r4, r0
    resetSystemCallbacks();
   d540c:	f7ff fdde 	bl	d4fcc <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   d5410:	f104 0324 	add.w	r3, r4, #36	; 0x24
   d5414:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d5416:	9301      	str	r3, [sp, #4]
   d5418:	f7fe ffbc 	bl	d4394 <os_mutex_recursive_lock>
         destroyFactoryHandlers();
   d541c:	4620      	mov	r0, r4
   d541e:	f7ff ffc5 	bl	d53ac <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
   d5422:	a801      	add	r0, sp, #4
   d5424:	f7ff fedb 	bl	d51de <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
   d5428:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d542a:	b108      	cbz	r0, d5430 <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
   d542c:	f7fe ffaa 	bl	d4384 <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
   d5430:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   d5434:	2618      	movs	r6, #24
   d5436:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   d543a:	42ae      	cmp	r6, r5
   d543c:	d004      	beq.n	d5448 <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
   d543e:	4628      	mov	r0, r5
   d5440:	f000 fd4e 	bl	d5ee0 <_ZN6StringD1Ev>
   d5444:	3518      	adds	r5, #24
   d5446:	e7f8      	b.n	d543a <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
   d5448:	6920      	ldr	r0, [r4, #16]
   d544a:	f7ff f91f 	bl	d468c <free>
   d544e:	6820      	ldr	r0, [r4, #0]
   d5450:	f7ff f91c 	bl	d468c <free>
}
   d5454:	4620      	mov	r0, r4
   d5456:	b002      	add	sp, #8
   d5458:	bd70      	pop	{r4, r5, r6, pc}
	...

000d545c <__tcf_2>:
    static LogManager mgr;
   d545c:	4801      	ldr	r0, [pc, #4]	; (d5464 <__tcf_2+0x8>)
   d545e:	f7ff bfd3 	b.w	d5408 <_ZN5spark10LogManagerD1Ev>
   d5462:	bf00      	nop
   d5464:	2003e6bc 	.word	0x2003e6bc

000d5468 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
   d5468:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d546a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d546c:	4606      	mov	r6, r0
   d546e:	460c      	mov	r4, r1
   d5470:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d5472:	d927      	bls.n	d54c4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x5c>
   d5474:	4290      	cmp	r0, r2
   d5476:	d226      	bcs.n	d54c6 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x5e>
            --end;
   d5478:	f1a2 0514 	sub.w	r5, r2, #20
            dest += end - p - 1;
   d547c:	1a6c      	subs	r4, r5, r1
   d547e:	f1a1 0714 	sub.w	r7, r1, #20
   d5482:	4404      	add	r4, r0
        capacity_(0) {
   d5484:	2600      	movs	r6, #0
            for (; end != p; --end, --dest) {
   d5486:	42af      	cmp	r7, r5
   d5488:	d03d      	beq.n	d5506 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
                new(dest) T(std::move(*end));
   d548a:	b1a4      	cbz	r4, d54b6 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x4e>
struct spark::detail::LogFilter::Node {
   d548c:	682b      	ldr	r3, [r5, #0]
   d548e:	6023      	str	r3, [r4, #0]
   d5490:	88ab      	ldrh	r3, [r5, #4]
   d5492:	80a3      	strh	r3, [r4, #4]
   d5494:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
   d5498:	80e3      	strh	r3, [r4, #6]
        capacity_(0) {
   d549a:	e9c4 6602 	strd	r6, r6, [r4, #8]
   d549e:	6126      	str	r6, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   d54a0:	68ab      	ldr	r3, [r5, #8]
   d54a2:	60a3      	str	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d54a4:	60ae      	str	r6, [r5, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d54a6:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   d54a8:	68ea      	ldr	r2, [r5, #12]
   d54aa:	60e2      	str	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d54ac:	60eb      	str	r3, [r5, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d54ae:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   d54b0:	692a      	ldr	r2, [r5, #16]
   d54b2:	6122      	str	r2, [r4, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d54b4:	612b      	str	r3, [r5, #16]
   d54b6:	f105 0008 	add.w	r0, r5, #8
   d54ba:	f7ff fe27 	bl	d510c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
   d54be:	3d14      	subs	r5, #20
   d54c0:	3c14      	subs	r4, #20
   d54c2:	e7e0      	b.n	d5486 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1e>
        } else if (dest != p) {
   d54c4:	d01f      	beq.n	d5506 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
        capacity_(0) {
   d54c6:	2700      	movs	r7, #0
            for (; p != end; ++p, ++dest) {
   d54c8:	42ac      	cmp	r4, r5
   d54ca:	d01c      	beq.n	d5506 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
                new(dest) T(std::move(*p));
   d54cc:	b1a6      	cbz	r6, d54f8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x90>
   d54ce:	6823      	ldr	r3, [r4, #0]
   d54d0:	6033      	str	r3, [r6, #0]
   d54d2:	88a3      	ldrh	r3, [r4, #4]
   d54d4:	80b3      	strh	r3, [r6, #4]
   d54d6:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
   d54da:	80f3      	strh	r3, [r6, #6]
        capacity_(0) {
   d54dc:	e9c6 7702 	strd	r7, r7, [r6, #8]
   d54e0:	6137      	str	r7, [r6, #16]
      __a = _GLIBCXX_MOVE(__b);
   d54e2:	68a3      	ldr	r3, [r4, #8]
   d54e4:	60b3      	str	r3, [r6, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d54e6:	60a7      	str	r7, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d54e8:	68f3      	ldr	r3, [r6, #12]
      __a = _GLIBCXX_MOVE(__b);
   d54ea:	68e2      	ldr	r2, [r4, #12]
   d54ec:	60f2      	str	r2, [r6, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d54ee:	60e3      	str	r3, [r4, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d54f0:	6933      	ldr	r3, [r6, #16]
      __a = _GLIBCXX_MOVE(__b);
   d54f2:	6922      	ldr	r2, [r4, #16]
   d54f4:	6132      	str	r2, [r6, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d54f6:	6123      	str	r3, [r4, #16]
   d54f8:	f104 0008 	add.w	r0, r4, #8
   d54fc:	f7ff fe06 	bl	d510c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
   d5500:	3414      	adds	r4, #20
   d5502:	3614      	adds	r6, #20
   d5504:	e7e0      	b.n	d54c8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x60>
    }
   d5506:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5508 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   d5508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d550a:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
   d550e:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   d5510:	4604      	mov	r4, r0
   d5512:	460e      	mov	r6, r1
   d5514:	4617      	mov	r7, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d5516:	db0d      	blt.n	d5534 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x2c>
   d5518:	3501      	adds	r5, #1
        if (n > 0) {
   d551a:	2d00      	cmp	r5, #0
   d551c:	6800      	ldr	r0, [r0, #0]
   d551e:	dd04      	ble.n	d552a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x22>
    return ::realloc(ptr, size);
   d5520:	00a9      	lsls	r1, r5, #2
   d5522:	f7ff f8bb 	bl	d469c <realloc>
            if (!d) {
   d5526:	b918      	cbnz	r0, d5530 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x28>
}
   d5528:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
   d552a:	f7ff f8af 	bl	d468c <free>
        T* d = nullptr;
   d552e:	2000      	movs	r0, #0
        data_ = d;
   d5530:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   d5532:	60a5      	str	r5, [r4, #8]
    T* const p = data_ + i;
   d5534:	6825      	ldr	r5, [r4, #0]
    move(p + 1, p, data_ + size_);
   d5536:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   d5538:	eb05 0186 	add.w	r1, r5, r6, lsl #2
    move(p + 1, p, data_ + size_);
   d553c:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
   d553e:	eba2 0286 	sub.w	r2, r2, r6, lsl #2
   d5542:	1d08      	adds	r0, r1, #4
   d5544:	f000 ff50 	bl	d63e8 <memmove>
    new(p) T(std::move(value));
   d5548:	f845 7026 	str.w	r7, [r5, r6, lsl #2]
    ++size_;
   d554c:	6863      	ldr	r3, [r4, #4]
   d554e:	3301      	adds	r3, #1
   d5550:	6063      	str	r3, [r4, #4]
    return true;
   d5552:	2001      	movs	r0, #1
   d5554:	e7e8      	b.n	d5528 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x20>

000d5556 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
   d5556:	b537      	push	{r0, r1, r2, r4, r5, lr}
    LOG_WITH_LOCK(mutex_) {
   d5558:	f100 0324 	add.w	r3, r0, #36	; 0x24
bool spark::LogManager::addHandler(LogHandler *handler) {
   d555c:	4604      	mov	r4, r0
    void lock() { os_mutex_recursive_lock(handle_); }
   d555e:	6a40      	ldr	r0, [r0, #36]	; 0x24
   d5560:	9301      	str	r3, [sp, #4]
   d5562:	460d      	mov	r5, r1
   d5564:	f7fe ff16 	bl	d4394 <os_mutex_recursive_lock>
    return find(data_, data_ + size_, value);
   d5568:	e9d4 3100 	ldrd	r3, r1, [r4]
   d556c:	eb03 0081 	add.w	r0, r3, r1, lsl #2
        for (; p != end; ++p) {
   d5570:	4283      	cmp	r3, r0
   d5572:	461a      	mov	r2, r3
   d5574:	d00b      	beq.n	d558e <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x38>
            if (*p == value) {
   d5576:	6812      	ldr	r2, [r2, #0]
   d5578:	42aa      	cmp	r2, r5
   d557a:	f103 0304 	add.w	r3, r3, #4
   d557e:	d1f7      	bne.n	d5570 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
    LOG_WITH_LOCK(mutex_) {
   d5580:	a801      	add	r0, sp, #4
   d5582:	f7ff fe2c 	bl	d51de <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
            return false;
   d5586:	2500      	movs	r5, #0
}
   d5588:	4628      	mov	r0, r5
   d558a:	b003      	add	sp, #12
   d558c:	bd30      	pop	{r4, r5, pc}
    return insert(size_, std::move(value));
   d558e:	462a      	mov	r2, r5
   d5590:	4620      	mov	r0, r4
   d5592:	f7ff ffb9 	bl	d5508 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   d5596:	4605      	mov	r5, r0
   d5598:	2800      	cmp	r0, #0
   d559a:	d0f1      	beq.n	d5580 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x2a>
        if (activeHandlers_.size() == 1) {
   d559c:	6863      	ldr	r3, [r4, #4]
   d559e:	2b01      	cmp	r3, #1
   d55a0:	d101      	bne.n	d55a6 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x50>
            setSystemCallbacks();
   d55a2:	f7ff fd07 	bl	d4fb4 <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   d55a6:	a801      	add	r0, sp, #4
   d55a8:	f7ff fe19 	bl	d51de <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   d55ac:	e7ec      	b.n	d5588 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x32>

000d55ae <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   d55ae:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d55b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d55b2:	4604      	mov	r4, r0
   d55b4:	460d      	mov	r5, r1
   d55b6:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   d55b8:	d914      	bls.n	d55e4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   d55ba:	4290      	cmp	r0, r2
   d55bc:	d213      	bcs.n	d55e6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
   d55be:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
   d55c2:	1a75      	subs	r5, r6, r1
   d55c4:	f1a1 0710 	sub.w	r7, r1, #16
   d55c8:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   d55ca:	42b7      	cmp	r7, r6
   d55cc:	d018      	beq.n	d5600 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   d55ce:	b11c      	cbz	r4, d55d8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   d55d0:	4631      	mov	r1, r6
   d55d2:	4620      	mov	r0, r4
   d55d4:	f000 fcec 	bl	d5fb0 <_ZN6StringC1EOS_>
                end->~T();
   d55d8:	4630      	mov	r0, r6
   d55da:	f000 fc81 	bl	d5ee0 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   d55de:	3e10      	subs	r6, #16
   d55e0:	3c10      	subs	r4, #16
   d55e2:	e7f2      	b.n	d55ca <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   d55e4:	d00c      	beq.n	d5600 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   d55e6:	42b5      	cmp	r5, r6
   d55e8:	d00a      	beq.n	d5600 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   d55ea:	b11c      	cbz	r4, d55f4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   d55ec:	4629      	mov	r1, r5
   d55ee:	4620      	mov	r0, r4
   d55f0:	f000 fcde 	bl	d5fb0 <_ZN6StringC1EOS_>
                p->~T();
   d55f4:	4628      	mov	r0, r5
   d55f6:	f000 fc73 	bl	d5ee0 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   d55fa:	3510      	adds	r5, #16
   d55fc:	3410      	adds	r4, #16
   d55fe:	e7f2      	b.n	d55e6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
   d5600:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5602 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
   d5602:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   d5604:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   d5606:	4605      	mov	r5, r0
        if (n > 0) {
   d5608:	dd11      	ble.n	d562e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
   d560a:	0130      	lsls	r0, r6, #4
   d560c:	f7ff f836 	bl	d467c <malloc>
            if (!d) {
   d5610:	4604      	mov	r4, r0
   d5612:	b158      	cbz	r0, d562c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   d5614:	e9d5 1200 	ldrd	r1, r2, [r5]
   d5618:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   d561c:	f7ff ffc7 	bl	d55ae <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   d5620:	6828      	ldr	r0, [r5, #0]
   d5622:	f7ff f833 	bl	d468c <free>
        data_ = d;
   d5626:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d5628:	60ae      	str	r6, [r5, #8]
        return true;
   d562a:	2001      	movs	r0, #1
    }
   d562c:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   d562e:	2400      	movs	r4, #0
   d5630:	e7f6      	b.n	d5620 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

000d5632 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   d5632:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5636:	4691      	mov	r9, r2
   d5638:	b097      	sub	sp, #92	; 0x5c
        capacity_(0) {
   d563a:	2300      	movs	r3, #0
   d563c:	9103      	str	r1, [sp, #12]
    if (!cats.reserve(filters.size())) {
   d563e:	f8d9 1004 	ldr.w	r1, [r9, #4]
   d5642:	930c      	str	r3, [sp, #48]	; 0x30
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   d5644:	2246      	movs	r2, #70	; 0x46
    if (n > capacity_ && !realloc(n)) {
   d5646:	4299      	cmp	r1, r3
        capacity_(0) {
   d5648:	e9c0 3300 	strd	r3, r3, [r0]
   d564c:	e9c0 3302 	strd	r3, r3, [r0, #8]
   d5650:	e9c0 3304 	strd	r3, r3, [r0, #16]
   d5654:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   d5658:	4604      	mov	r4, r0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   d565a:	7602      	strb	r2, [r0, #24]
    if (n > capacity_ && !realloc(n)) {
   d565c:	dc23      	bgt.n	d56a6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
   d565e:	e9d9 5700 	ldrd	r5, r7, [r9]
   d5662:	2314      	movs	r3, #20
   d5664:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
   d5668:	42af      	cmp	r7, r5
   d566a:	d03b      	beq.n	d56e4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
   d566c:	4629      	mov	r1, r5
   d566e:	a80d      	add	r0, sp, #52	; 0x34
   d5670:	f000 fc9e 	bl	d5fb0 <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
   d5674:	a90d      	add	r1, sp, #52	; 0x34
   d5676:	a811      	add	r0, sp, #68	; 0x44
   d5678:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   d567a:	f000 fc99 	bl	d5fb0 <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d567e:	e9dd 130b 	ldrd	r1, r3, [sp, #44]	; 0x2c
   d5682:	4299      	cmp	r1, r3
   d5684:	da1b      	bge.n	d56be <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
   d5686:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    move(p + 1, p, data_ + size_);
   d5688:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    T* const p = data_ + i;
   d568a:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   d568e:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   d5692:	4631      	mov	r1, r6
   d5694:	f106 0010 	add.w	r0, r6, #16
   d5698:	f7ff ff89 	bl	d55ae <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   d569c:	b9ee      	cbnz	r6, d56da <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
   d569e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   d56a0:	3301      	adds	r3, #1
   d56a2:	930b      	str	r3, [sp, #44]	; 0x2c
    return true;
   d56a4:	e011      	b.n	d56ca <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
   d56a6:	a80a      	add	r0, sp, #40	; 0x28
   d56a8:	f7ff ffab 	bl	d5602 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   d56ac:	2800      	cmp	r0, #0
   d56ae:	d1d6      	bne.n	d565e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
    Vector<String> cats;
   d56b0:	a80a      	add	r0, sp, #40	; 0x28
   d56b2:	f7ff fd3f 	bl	d5134 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   d56b6:	4620      	mov	r0, r4
   d56b8:	b017      	add	sp, #92	; 0x5c
   d56ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d56be:	3101      	adds	r1, #1
   d56c0:	a80a      	add	r0, sp, #40	; 0x28
   d56c2:	f7ff ff9e 	bl	d5602 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   d56c6:	2800      	cmp	r0, #0
   d56c8:	d1dd      	bne.n	d5686 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
   d56ca:	a811      	add	r0, sp, #68	; 0x44
   d56cc:	f000 fc08 	bl	d5ee0 <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
   d56d0:	a80d      	add	r0, sp, #52	; 0x34
   d56d2:	f000 fc05 	bl	d5ee0 <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
   d56d6:	3514      	adds	r5, #20
   d56d8:	e7c6      	b.n	d5668 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
   d56da:	a911      	add	r1, sp, #68	; 0x44
   d56dc:	4630      	mov	r0, r6
   d56de:	f000 fc67 	bl	d5fb0 <_ZN6StringC1EOS_>
   d56e2:	e7dc      	b.n	d569e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
   d56e4:	2600      	movs	r6, #0
   d56e6:	e9cd 660d 	strd	r6, r6, [sp, #52]	; 0x34
   d56ea:	960f      	str	r6, [sp, #60]	; 0x3c
        size_t size = 0; // Name length
   d56ec:	4637      	mov	r7, r6
   d56ee:	f04f 0a14 	mov.w	sl, #20
    for (int i = 0; i < cats.size(); ++i) {
   d56f2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   d56f6:	429e      	cmp	r6, r3
   d56f8:	f280 8097 	bge.w	d582a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f8>
        const char *category = cats.at(i).c_str();
   d56fc:	0133      	lsls	r3, r6, #4
   d56fe:	58d3      	ldr	r3, [r2, r3]
   d5700:	9308      	str	r3, [sp, #32]
        if (!category) {
   d5702:	b90b      	cbnz	r3, d5708 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd6>
    for (int i = 0; i < cats.size(); ++i) {
   d5704:	3601      	adds	r6, #1
   d5706:	e7f4      	b.n	d56f2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xc0>
        size_t size = 0; // Name length
   d5708:	fb0a f306 	mul.w	r3, sl, r6
   d570c:	9709      	str	r7, [sp, #36]	; 0x24
   d570e:	9302      	str	r3, [sp, #8]
        Vector<Node> *pNodes = &nodes; // Root nodes
   d5710:	ad0d      	add	r5, sp, #52	; 0x34
        while ((name = nextSubcategoryName(category, size))) {
   d5712:	a909      	add	r1, sp, #36	; 0x24
   d5714:	a808      	add	r0, sp, #32
   d5716:	f7ff fb00 	bl	d4d1a <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   d571a:	4683      	mov	fp, r0
   d571c:	2800      	cmp	r0, #0
   d571e:	d0f1      	beq.n	d5704 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
            const int index = nodeIndex(*pNodes, name, size, found);
   d5720:	4601      	mov	r1, r0
   d5722:	9a09      	ldr	r2, [sp, #36]	; 0x24
            bool found = false;
   d5724:	f88d 701f 	strb.w	r7, [sp, #31]
            const int index = nodeIndex(*pNodes, name, size, found);
   d5728:	f10d 031f 	add.w	r3, sp, #31
   d572c:	4628      	mov	r0, r5
   d572e:	f7ff fb73 	bl	d4e18 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d5732:	f89d 801f 	ldrb.w	r8, [sp, #31]
            const int index = nodeIndex(*pNodes, name, size, found);
   d5736:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d5738:	f1b8 0f00 	cmp.w	r8, #0
   d573c:	d166      	bne.n	d580c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1da>
   d573e:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
            level(-1) {
   d5742:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
   d5746:	e9cd 8813 	strd	r8, r8, [sp, #76]	; 0x4c
   d574a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d574e:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
   d5752:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
   d5756:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d575a:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   d575e:	4293      	cmp	r3, r2
   d5760:	db1a      	blt.n	d5798 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x166>
   d5762:	f103 0b01 	add.w	fp, r3, #1
        if (n > 0) {
   d5766:	f1bb 0f00 	cmp.w	fp, #0
   d576a:	dd4a      	ble.n	d5802 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d0>
    return ::malloc(size);
   d576c:	fb0a f00b 	mul.w	r0, sl, fp
   d5770:	f7fe ff84 	bl	d467c <malloc>
            if (!d) {
   d5774:	9004      	str	r0, [sp, #16]
   d5776:	2800      	cmp	r0, #0
   d5778:	d045      	beq.n	d5806 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d4>
            move(d, data_, data_ + size_);
   d577a:	e9d5 1200 	ldrd	r1, r2, [r5]
   d577e:	fb0a 1202 	mla	r2, sl, r2, r1
   d5782:	f7ff fe71 	bl	d5468 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
   d5786:	9b04      	ldr	r3, [sp, #16]
    ::free(ptr);
   d5788:	6828      	ldr	r0, [r5, #0]
   d578a:	9304      	str	r3, [sp, #16]
   d578c:	f7fe ff7e 	bl	d468c <free>
        data_ = d;
   d5790:	9b04      	ldr	r3, [sp, #16]
   d5792:	602b      	str	r3, [r5, #0]
        capacity_ = n;
   d5794:	f8c5 b008 	str.w	fp, [r5, #8]
    T* const p = data_ + i;
   d5798:	9b01      	ldr	r3, [sp, #4]
   d579a:	f8d5 b000 	ldr.w	fp, [r5]
    move(p + 1, p, data_ + size_);
   d579e:	686a      	ldr	r2, [r5, #4]
    T* const p = data_ + i;
   d57a0:	fb0a f303 	mul.w	r3, sl, r3
   d57a4:	eb0b 0103 	add.w	r1, fp, r3
    move(p + 1, p, data_ + size_);
   d57a8:	f101 0014 	add.w	r0, r1, #20
   d57ac:	fb0a b202 	mla	r2, sl, r2, fp
   d57b0:	9104      	str	r1, [sp, #16]
    T* const p = data_ + i;
   d57b2:	9305      	str	r3, [sp, #20]
    move(p + 1, p, data_ + size_);
   d57b4:	f7ff fe58 	bl	d5468 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   d57b8:	9904      	ldr	r1, [sp, #16]
   d57ba:	b1a9      	cbz	r1, d57e8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1b6>
struct spark::detail::LogFilter::Node {
   d57bc:	9b05      	ldr	r3, [sp, #20]
   d57be:	9a11      	ldr	r2, [sp, #68]	; 0x44
   d57c0:	f84b 2003 	str.w	r2, [fp, r3]
   d57c4:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
   d57c8:	808b      	strh	r3, [r1, #4]
   d57ca:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
   d57ce:	80cb      	strh	r3, [r1, #6]
        capacity_(0) {
   d57d0:	e9c1 7702 	strd	r7, r7, [r1, #8]
   d57d4:	610f      	str	r7, [r1, #16]
      __a = _GLIBCXX_MOVE(__b);
   d57d6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   d57d8:	608b      	str	r3, [r1, #8]
   d57da:	9b14      	ldr	r3, [sp, #80]	; 0x50
      __b = _GLIBCXX_MOVE(__tmp);
   d57dc:	9713      	str	r7, [sp, #76]	; 0x4c
      __a = _GLIBCXX_MOVE(__b);
   d57de:	60cb      	str	r3, [r1, #12]
   d57e0:	9b15      	ldr	r3, [sp, #84]	; 0x54
      __b = _GLIBCXX_MOVE(__tmp);
   d57e2:	9714      	str	r7, [sp, #80]	; 0x50
      __a = _GLIBCXX_MOVE(__b);
   d57e4:	610b      	str	r3, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d57e6:	9715      	str	r7, [sp, #84]	; 0x54
    ++size_;
   d57e8:	686b      	ldr	r3, [r5, #4]
   d57ea:	3301      	adds	r3, #1
   d57ec:	606b      	str	r3, [r5, #4]
   d57ee:	a813      	add	r0, sp, #76	; 0x4c
   d57f0:	f7ff fc8c 	bl	d510c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d57f4:	f1b8 0f00 	cmp.w	r8, #0
   d57f8:	d008      	beq.n	d580c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1da>
    Vector<Node> nodes;
   d57fa:	a80d      	add	r0, sp, #52	; 0x34
   d57fc:	f7ff fc86 	bl	d510c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d5800:	e756      	b.n	d56b0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
   d5802:	4643      	mov	r3, r8
   d5804:	e7c0      	b.n	d5788 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x156>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d5806:	f04f 0801 	mov.w	r8, #1
   d580a:	e7f0      	b.n	d57ee <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
    return data_[i];
   d580c:	9b01      	ldr	r3, [sp, #4]
   d580e:	682d      	ldr	r5, [r5, #0]
   d5810:	fb0a 5503 	mla	r5, sl, r3, r5
            if (!*category) { // Check if it's last subcategory
   d5814:	9b08      	ldr	r3, [sp, #32]
   d5816:	781b      	ldrb	r3, [r3, #0]
   d5818:	b92b      	cbnz	r3, d5826 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f4>
                node.level = filters.at(i).level_;
   d581a:	f8d9 3000 	ldr.w	r3, [r9]
   d581e:	9a02      	ldr	r2, [sp, #8]
   d5820:	4413      	add	r3, r2
   d5822:	7c1b      	ldrb	r3, [r3, #16]
   d5824:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
   d5826:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
   d5828:	e773      	b.n	d5712 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xe0>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d582a:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d582c:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d582e:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   d5830:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5832:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d5834:	920b      	str	r2, [sp, #44]	; 0x2c
      __a = _GLIBCXX_MOVE(__b);
   d5836:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
   d5838:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d583a:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   d583c:	60a2      	str	r2, [r4, #8]
   d583e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
   d5840:	930d      	str	r3, [sp, #52]	; 0x34
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5842:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   d5844:	60e2      	str	r2, [r4, #12]
   d5846:	9a0e      	ldr	r2, [sp, #56]	; 0x38
      __b = _GLIBCXX_MOVE(__tmp);
   d5848:	930e      	str	r3, [sp, #56]	; 0x38
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d584a:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
   d584c:	6122      	str	r2, [r4, #16]
   d584e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
      __b = _GLIBCXX_MOVE(__tmp);
   d5850:	930f      	str	r3, [sp, #60]	; 0x3c
    level_ = level;
   d5852:	9b03      	ldr	r3, [sp, #12]
   d5854:	910a      	str	r1, [sp, #40]	; 0x28
      __a = _GLIBCXX_MOVE(__b);
   d5856:	6162      	str	r2, [r4, #20]
   d5858:	7623      	strb	r3, [r4, #24]
   d585a:	e7ce      	b.n	d57fa <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c8>

000d585c <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
   d585c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
        filter_(level, filters) {
   d585e:	4605      	mov	r5, r0
   d5860:	4b09      	ldr	r3, [pc, #36]	; (d5888 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>)
   d5862:	f845 3b04 	str.w	r3, [r5], #4
inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
   d5866:	4604      	mov	r4, r0
   d5868:	460e      	mov	r6, r1
        filter_(level, filters) {
   d586a:	a801      	add	r0, sp, #4
   d586c:	4611      	mov	r1, r2
   d586e:	f7fe fd08 	bl	d4282 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d5872:	aa01      	add	r2, sp, #4
   d5874:	4631      	mov	r1, r6
   d5876:	4628      	mov	r0, r5
   d5878:	f7ff fedb 	bl	d5632 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d587c:	a801      	add	r0, sp, #4
   d587e:	f7fe fcbf 	bl	d4200 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}
   d5882:	4620      	mov	r0, r4
   d5884:	b004      	add	sp, #16
   d5886:	bd70      	pop	{r4, r5, r6, pc}
   d5888:	000d6734 	.word	0x000d6734

000d588c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
   d588c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d588e:	460f      	mov	r7, r1
   d5890:	b087      	sub	sp, #28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d5892:	4926      	ldr	r1, [pc, #152]	; (d592c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa0>)
            Print *stream, const JSONValue &params) {
   d5894:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d5896:	4638      	mov	r0, r7
            Print *stream, const JSONValue &params) {
   d5898:	4616      	mov	r6, r2
   d589a:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d589c:	f000 fe01 	bl	d64a2 <strcmp>
   d58a0:	bb00      	cbnz	r0, d58e4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x58>
        if (!stream) {
   d58a2:	b1e4      	cbz	r4, d58de <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   d58a4:	4629      	mov	r1, r5
   d58a6:	4668      	mov	r0, sp
   d58a8:	f7ff fc8a 	bl	d51c0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   d58ac:	4920      	ldr	r1, [pc, #128]	; (d5930 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa4>)
   d58ae:	2024      	movs	r0, #36	; 0x24
   d58b0:	f000 fd84 	bl	d63bc <_ZnwjRKSt9nothrow_t>
   d58b4:	4605      	mov	r5, r0
   d58b6:	b170      	cbz	r0, d58d6 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
        stream_(&stream) {
   d58b8:	4669      	mov	r1, sp
   d58ba:	a803      	add	r0, sp, #12
   d58bc:	f7fe fce1 	bl	d4282 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d58c0:	aa03      	add	r2, sp, #12
   d58c2:	4631      	mov	r1, r6
   d58c4:	4628      	mov	r0, r5
   d58c6:	f7ff ffc9 	bl	d585c <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d58ca:	a803      	add	r0, sp, #12
   d58cc:	f7fe fc98 	bl	d4200 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
    using StreamLogHandler::StreamLogHandler;
   d58d0:	4b18      	ldr	r3, [pc, #96]	; (d5934 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa8>)
        stream_(&stream) {
   d58d2:	622c      	str	r4, [r5, #32]
    using StreamLogHandler::StreamLogHandler;
   d58d4:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   d58d6:	4668      	mov	r0, sp
   d58d8:	f7fe fc92 	bl	d4200 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d58dc:	462c      	mov	r4, r5
}
   d58de:	4620      	mov	r0, r4
   d58e0:	b007      	add	sp, #28
   d58e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   d58e4:	4914      	ldr	r1, [pc, #80]	; (d5938 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xac>)
   d58e6:	4638      	mov	r0, r7
   d58e8:	f000 fddb 	bl	d64a2 <strcmp>
   d58ec:	b9e0      	cbnz	r0, d5928 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x9c>
        if (!stream) {
   d58ee:	2c00      	cmp	r4, #0
   d58f0:	d0f5      	beq.n	d58de <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   d58f2:	4629      	mov	r1, r5
   d58f4:	4668      	mov	r0, sp
   d58f6:	f7ff fc63 	bl	d51c0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   d58fa:	490d      	ldr	r1, [pc, #52]	; (d5930 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa4>)
   d58fc:	2024      	movs	r0, #36	; 0x24
   d58fe:	f000 fd5d 	bl	d63bc <_ZnwjRKSt9nothrow_t>
   d5902:	4605      	mov	r5, r0
   d5904:	2800      	cmp	r0, #0
   d5906:	d0e6      	beq.n	d58d6 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
        stream_(&stream) {
   d5908:	4669      	mov	r1, sp
   d590a:	a803      	add	r0, sp, #12
   d590c:	f7fe fcb9 	bl	d4282 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d5910:	aa03      	add	r2, sp, #12
   d5912:	4631      	mov	r1, r6
   d5914:	4628      	mov	r0, r5
   d5916:	f7ff ffa1 	bl	d585c <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d591a:	a803      	add	r0, sp, #12
   d591c:	f7fe fc70 	bl	d4200 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d5920:	4b06      	ldr	r3, [pc, #24]	; (d593c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb0>)
   d5922:	602b      	str	r3, [r5, #0]
   d5924:	622c      	str	r4, [r5, #32]
}
   d5926:	e7d6      	b.n	d58d6 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
            return nullptr; // Output stream is not specified
   d5928:	2400      	movs	r4, #0
   d592a:	e7d8      	b.n	d58de <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
   d592c:	000d67f9 	.word	0x000d67f9
   d5930:	000d698c 	.word	0x000d698c
   d5934:	000d6894 	.word	0x000d6894
   d5938:	000d67fd 	.word	0x000d67fd
   d593c:	000d687c 	.word	0x000d687c

000d5940 <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
   d5940:	4b01      	ldr	r3, [pc, #4]	; (d5948 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d5942:	4a02      	ldr	r2, [pc, #8]	; (d594c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d5944:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d5946:	4770      	bx	lr
   d5948:	2003e6b8 	.word	0x2003e6b8
   d594c:	000d680e 	.word	0x000d680e

000d5950 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d5950:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d5954:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
   d5956:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d595a:	4604      	mov	r4, r0
   d595c:	460e      	mov	r6, r1
   d595e:	4617      	mov	r7, r2
   d5960:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
   d5962:	f000 fc67 	bl	d6234 <_Z16_fetch_usbserialv>
   d5966:	4581      	cmp	r9, r0
   d5968:	d04c      	beq.n	d5a04 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb4>
    if (attr.has_time) {
   d596a:	792b      	ldrb	r3, [r5, #4]
   d596c:	0719      	lsls	r1, r3, #28
   d596e:	d504      	bpl.n	d597a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
   d5970:	696a      	ldr	r2, [r5, #20]
   d5972:	4954      	ldr	r1, [pc, #336]	; (d5ac4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   d5974:	4620      	mov	r0, r4
   d5976:	f7ff fa40 	bl	d4dfa <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
   d597a:	f1b8 0f00 	cmp.w	r8, #0
   d597e:	d00d      	beq.n	d599c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
   d5980:	215b      	movs	r1, #91	; 0x5b
   d5982:	4620      	mov	r0, r4
   d5984:	f7ff fa2d 	bl	d4de2 <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   d5988:	4641      	mov	r1, r8
   d598a:	4620      	mov	r0, r4
   d598c:	f7ff fa1a 	bl	d4dc4 <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   d5990:	6823      	ldr	r3, [r4, #0]
   d5992:	494d      	ldr	r1, [pc, #308]	; (d5ac8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
   d5994:	68db      	ldr	r3, [r3, #12]
   d5996:	2202      	movs	r2, #2
   d5998:	4620      	mov	r0, r4
   d599a:	4798      	blx	r3
    if (attr.has_file) {
   d599c:	792b      	ldrb	r3, [r5, #4]
   d599e:	07da      	lsls	r2, r3, #31
   d59a0:	d523      	bpl.n	d59ea <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9a>
        s = extractFileName(attr.file); // Strip directory path
   d59a2:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
   d59a6:	212f      	movs	r1, #47	; 0x2f
   d59a8:	4640      	mov	r0, r8
   d59aa:	f000 fda6 	bl	d64fa <strrchr>
    if (s1) {
   d59ae:	b108      	cbz	r0, d59b4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
   d59b0:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
   d59b4:	4641      	mov	r1, r8
   d59b6:	4620      	mov	r0, r4
   d59b8:	f7ff fa04 	bl	d4dc4 <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   d59bc:	792b      	ldrb	r3, [r5, #4]
   d59be:	079b      	lsls	r3, r3, #30
   d59c0:	d508      	bpl.n	d59d4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
   d59c2:	213a      	movs	r1, #58	; 0x3a
   d59c4:	4620      	mov	r0, r4
   d59c6:	f7ff fa0c 	bl	d4de2 <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
   d59ca:	68ea      	ldr	r2, [r5, #12]
   d59cc:	493f      	ldr	r1, [pc, #252]	; (d5acc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
   d59ce:	4620      	mov	r0, r4
   d59d0:	f7ff fa13 	bl	d4dfa <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
   d59d4:	792a      	ldrb	r2, [r5, #4]
   d59d6:	6823      	ldr	r3, [r4, #0]
   d59d8:	f012 0f04 	tst.w	r2, #4
   d59dc:	68db      	ldr	r3, [r3, #12]
            write(", ", 2);
   d59de:	bf14      	ite	ne
   d59e0:	493b      	ldrne	r1, [pc, #236]	; (d5ad0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
            write(": ", 2);
   d59e2:	493c      	ldreq	r1, [pc, #240]	; (d5ad4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(", ", 2);
   d59e4:	2202      	movs	r2, #2
            write(": ", 2);
   d59e6:	4620      	mov	r0, r4
   d59e8:	4798      	blx	r3
    if (attr.has_function) {
   d59ea:	792b      	ldrb	r3, [r5, #4]
   d59ec:	0758      	lsls	r0, r3, #29
   d59ee:	d51d      	bpl.n	d5a2c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xdc>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   d59f0:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
   d59f2:	460b      	mov	r3, r1
   d59f4:	461a      	mov	r2, r3
    for (; *s; ++s) {
   d59f6:	f813 0b01 	ldrb.w	r0, [r3], #1
   d59fa:	b160      	cbz	r0, d5a16 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
        if (*s == ' ') {
   d59fc:	2820      	cmp	r0, #32
   d59fe:	d108      	bne.n	d5a12 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
            s1 = s + 1; // Skip return type
   d5a00:	4619      	mov	r1, r3
   d5a02:	e7f7      	b.n	d59f4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
    if (stream_ == &Serial && Network.listening()) {
   d5a04:	4834      	ldr	r0, [pc, #208]	; (d5ad8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   d5a06:	f000 f966 	bl	d5cd6 <_ZN5spark12NetworkClass9listeningEv>
   d5a0a:	2800      	cmp	r0, #0
   d5a0c:	d0ad      	beq.n	d596a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
   d5a0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
   d5a12:	2828      	cmp	r0, #40	; 0x28
   d5a14:	d1ee      	bne.n	d59f4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
        write(s, n);
   d5a16:	6823      	ldr	r3, [r4, #0]
   d5a18:	1a52      	subs	r2, r2, r1
   d5a1a:	68db      	ldr	r3, [r3, #12]
   d5a1c:	4620      	mov	r0, r4
   d5a1e:	4798      	blx	r3
        write("(): ", 4);
   d5a20:	6823      	ldr	r3, [r4, #0]
   d5a22:	492e      	ldr	r1, [pc, #184]	; (d5adc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   d5a24:	68db      	ldr	r3, [r3, #12]
   d5a26:	2204      	movs	r2, #4
   d5a28:	4620      	mov	r0, r4
   d5a2a:	4798      	blx	r3
    return log_level_name(level, nullptr);
   d5a2c:	2100      	movs	r1, #0
   d5a2e:	4638      	mov	r0, r7
   d5a30:	f7fe fd88 	bl	d4544 <log_level_name>
   d5a34:	4601      	mov	r1, r0
    write(s);
   d5a36:	4620      	mov	r0, r4
   d5a38:	f7ff f9c4 	bl	d4dc4 <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   d5a3c:	6823      	ldr	r3, [r4, #0]
   d5a3e:	4925      	ldr	r1, [pc, #148]	; (d5ad4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   d5a40:	68db      	ldr	r3, [r3, #12]
   d5a42:	2202      	movs	r2, #2
   d5a44:	4620      	mov	r0, r4
   d5a46:	4798      	blx	r3
    if (msg) {
   d5a48:	b11e      	cbz	r6, d5a52 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x102>
        write(msg);
   d5a4a:	4631      	mov	r1, r6
   d5a4c:	4620      	mov	r0, r4
   d5a4e:	f7ff f9b9 	bl	d4dc4 <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
   d5a52:	792b      	ldrb	r3, [r5, #4]
   d5a54:	f013 0f30 	tst.w	r3, #48	; 0x30
   d5a58:	d02c      	beq.n	d5ab4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>
        write(" [", 2);
   d5a5a:	6823      	ldr	r3, [r4, #0]
   d5a5c:	4920      	ldr	r1, [pc, #128]	; (d5ae0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   d5a5e:	68db      	ldr	r3, [r3, #12]
   d5a60:	2202      	movs	r2, #2
   d5a62:	4620      	mov	r0, r4
   d5a64:	4798      	blx	r3
        if (attr.has_code) {
   d5a66:	792b      	ldrb	r3, [r5, #4]
   d5a68:	06d9      	lsls	r1, r3, #27
   d5a6a:	d50a      	bpl.n	d5a82 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x132>
            write("code = ", 7);
   d5a6c:	6823      	ldr	r3, [r4, #0]
   d5a6e:	491d      	ldr	r1, [pc, #116]	; (d5ae4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   d5a70:	68db      	ldr	r3, [r3, #12]
   d5a72:	2207      	movs	r2, #7
   d5a74:	4620      	mov	r0, r4
   d5a76:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
   d5a78:	69aa      	ldr	r2, [r5, #24]
   d5a7a:	491b      	ldr	r1, [pc, #108]	; (d5ae8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
   d5a7c:	4620      	mov	r0, r4
   d5a7e:	f7ff f9bc 	bl	d4dfa <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
   d5a82:	792b      	ldrb	r3, [r5, #4]
   d5a84:	069a      	lsls	r2, r3, #26
   d5a86:	d511      	bpl.n	d5aac <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>
            if (attr.has_code) {
   d5a88:	06db      	lsls	r3, r3, #27
   d5a8a:	d505      	bpl.n	d5a98 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>
                write(", ", 2);
   d5a8c:	6823      	ldr	r3, [r4, #0]
   d5a8e:	4910      	ldr	r1, [pc, #64]	; (d5ad0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
   d5a90:	68db      	ldr	r3, [r3, #12]
   d5a92:	2202      	movs	r2, #2
   d5a94:	4620      	mov	r0, r4
   d5a96:	4798      	blx	r3
            write("details = ", 10);
   d5a98:	6823      	ldr	r3, [r4, #0]
   d5a9a:	4914      	ldr	r1, [pc, #80]	; (d5aec <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
   d5a9c:	68db      	ldr	r3, [r3, #12]
   d5a9e:	4620      	mov	r0, r4
   d5aa0:	220a      	movs	r2, #10
   d5aa2:	4798      	blx	r3
            write(attr.details);
   d5aa4:	69e9      	ldr	r1, [r5, #28]
   d5aa6:	4620      	mov	r0, r4
   d5aa8:	f7ff f98c 	bl	d4dc4 <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
   d5aac:	215d      	movs	r1, #93	; 0x5d
   d5aae:	4620      	mov	r0, r4
   d5ab0:	f7ff f997 	bl	d4de2 <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
   d5ab4:	6823      	ldr	r3, [r4, #0]
   d5ab6:	490e      	ldr	r1, [pc, #56]	; (d5af0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
   d5ab8:	68db      	ldr	r3, [r3, #12]
   d5aba:	4620      	mov	r0, r4
   d5abc:	2202      	movs	r2, #2
}
   d5abe:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
   d5ac2:	4718      	bx	r3
   d5ac4:	000d6812 	.word	0x000d6812
   d5ac8:	000d6819 	.word	0x000d6819
   d5acc:	000d67e8 	.word	0x000d67e8
   d5ad0:	000d681c 	.word	0x000d681c
   d5ad4:	000d6821 	.word	0x000d6821
   d5ad8:	2003e6e4 	.word	0x2003e6e4
   d5adc:	000d681f 	.word	0x000d681f
   d5ae0:	000d6824 	.word	0x000d6824
   d5ae4:	000d6827 	.word	0x000d6827
   d5ae8:	000d682f 	.word	0x000d682f
   d5aec:	000d6832 	.word	0x000d6832
   d5af0:	000d683d 	.word	0x000d683d

000d5af4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d5af4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d5af8:	b085      	sub	sp, #20
    if (this->stream() == &Serial && Network.listening()) {
   d5afa:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d5afe:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   d5b00:	4605      	mov	r5, r0
   d5b02:	460f      	mov	r7, r1
   d5b04:	4690      	mov	r8, r2
   d5b06:	461e      	mov	r6, r3
    if (this->stream() == &Serial && Network.listening()) {
   d5b08:	f000 fb94 	bl	d6234 <_Z16_fetch_usbserialv>
   d5b0c:	4581      	cmp	r9, r0
   d5b0e:	d105      	bne.n	d5b1c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
   d5b10:	4849      	ldr	r0, [pc, #292]	; (d5c38 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
   d5b12:	f000 f8e0 	bl	d5cd6 <_ZN5spark12NetworkClass9listeningEv>
   d5b16:	2800      	cmp	r0, #0
   d5b18:	f040 808a 	bne.w	d5c30 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
    JSONStreamWriter json(*this->stream());
   d5b1c:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
   d5b1e:	4a47      	ldr	r2, [pc, #284]	; (d5c3c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   d5b20:	9201      	str	r2, [sp, #4]
        state_(BEGIN) {
   d5b22:	f04f 0900 	mov.w	r9, #0
    json.beginObject();
   d5b26:	a801      	add	r0, sp, #4
        strm_(stream) {
   d5b28:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
   d5b2a:	f88d 9008 	strb.w	r9, [sp, #8]
   d5b2e:	f7ff f83c 	bl	d4baa <_ZN5spark10JSONWriter11beginObjectEv>
   d5b32:	4649      	mov	r1, r9
   d5b34:	4640      	mov	r0, r8
   d5b36:	f7fe fd05 	bl	d4544 <log_level_name>
    json.name("l", 1).value(s);
   d5b3a:	4941      	ldr	r1, [pc, #260]	; (d5c40 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   d5b3c:	4680      	mov	r8, r0
   d5b3e:	2201      	movs	r2, #1
   d5b40:	a801      	add	r0, sp, #4
   d5b42:	f7ff f8bb 	bl	d4cbc <_ZN5spark10JSONWriter4nameEPKcj>
   d5b46:	4641      	mov	r1, r8
   d5b48:	f7ff f92e 	bl	d4da8 <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
   d5b4c:	b13f      	cbz	r7, d5b5e <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
   d5b4e:	493d      	ldr	r1, [pc, #244]	; (d5c44 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   d5b50:	2201      	movs	r2, #1
   d5b52:	a801      	add	r0, sp, #4
   d5b54:	f7ff f8b2 	bl	d4cbc <_ZN5spark10JSONWriter4nameEPKcj>
   d5b58:	4639      	mov	r1, r7
   d5b5a:	f7ff f925 	bl	d4da8 <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
   d5b5e:	b13e      	cbz	r6, d5b70 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
   d5b60:	4939      	ldr	r1, [pc, #228]	; (d5c48 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   d5b62:	2201      	movs	r2, #1
   d5b64:	a801      	add	r0, sp, #4
   d5b66:	f7ff f8a9 	bl	d4cbc <_ZN5spark10JSONWriter4nameEPKcj>
   d5b6a:	4631      	mov	r1, r6
   d5b6c:	f7ff f91c 	bl	d4da8 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
   d5b70:	7923      	ldrb	r3, [r4, #4]
   d5b72:	07df      	lsls	r7, r3, #31
   d5b74:	d50e      	bpl.n	d5b94 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
   d5b76:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
   d5b78:	212f      	movs	r1, #47	; 0x2f
   d5b7a:	4630      	mov	r0, r6
   d5b7c:	f000 fcbd 	bl	d64fa <strrchr>
    if (s1) {
   d5b80:	b100      	cbz	r0, d5b84 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
   d5b82:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
   d5b84:	4931      	ldr	r1, [pc, #196]	; (d5c4c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   d5b86:	2201      	movs	r2, #1
   d5b88:	a801      	add	r0, sp, #4
   d5b8a:	f7ff f897 	bl	d4cbc <_ZN5spark10JSONWriter4nameEPKcj>
   d5b8e:	4631      	mov	r1, r6
   d5b90:	f7ff f90a 	bl	d4da8 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
   d5b94:	7923      	ldrb	r3, [r4, #4]
   d5b96:	079e      	lsls	r6, r3, #30
   d5b98:	d507      	bpl.n	d5baa <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
   d5b9a:	492d      	ldr	r1, [pc, #180]	; (d5c50 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
   d5b9c:	2202      	movs	r2, #2
   d5b9e:	a801      	add	r0, sp, #4
   d5ba0:	f7ff f88c 	bl	d4cbc <_ZN5spark10JSONWriter4nameEPKcj>
   d5ba4:	68e1      	ldr	r1, [r4, #12]
   d5ba6:	f7ff f80d 	bl	d4bc4 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
   d5baa:	7923      	ldrb	r3, [r4, #4]
   d5bac:	0758      	lsls	r0, r3, #29
   d5bae:	d514      	bpl.n	d5bda <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   d5bb0:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
   d5bb2:	4633      	mov	r3, r6
   d5bb4:	461f      	mov	r7, r3
    for (; *s; ++s) {
   d5bb6:	f813 2b01 	ldrb.w	r2, [r3], #1
   d5bba:	b12a      	cbz	r2, d5bc8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
   d5bbc:	2a20      	cmp	r2, #32
   d5bbe:	d101      	bne.n	d5bc4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
   d5bc0:	461e      	mov	r6, r3
   d5bc2:	e7f7      	b.n	d5bb4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
   d5bc4:	2a28      	cmp	r2, #40	; 0x28
   d5bc6:	d1f5      	bne.n	d5bb4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
   d5bc8:	4922      	ldr	r1, [pc, #136]	; (d5c54 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
   d5bca:	2202      	movs	r2, #2
   d5bcc:	a801      	add	r0, sp, #4
   d5bce:	f7ff f875 	bl	d4cbc <_ZN5spark10JSONWriter4nameEPKcj>
   d5bd2:	1bba      	subs	r2, r7, r6
   d5bd4:	4631      	mov	r1, r6
   d5bd6:	f7ff f881 	bl	d4cdc <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
   d5bda:	7923      	ldrb	r3, [r4, #4]
   d5bdc:	0719      	lsls	r1, r3, #28
   d5bde:	d507      	bpl.n	d5bf0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
   d5be0:	491d      	ldr	r1, [pc, #116]	; (d5c58 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
   d5be2:	2201      	movs	r2, #1
   d5be4:	a801      	add	r0, sp, #4
   d5be6:	f7ff f869 	bl	d4cbc <_ZN5spark10JSONWriter4nameEPKcj>
   d5bea:	6961      	ldr	r1, [r4, #20]
   d5bec:	f7fe fffc 	bl	d4be8 <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
   d5bf0:	7923      	ldrb	r3, [r4, #4]
   d5bf2:	06da      	lsls	r2, r3, #27
   d5bf4:	d508      	bpl.n	d5c08 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
   d5bf6:	2204      	movs	r2, #4
   d5bf8:	4918      	ldr	r1, [pc, #96]	; (d5c5c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   d5bfa:	eb0d 0002 	add.w	r0, sp, r2
   d5bfe:	f7ff f85d 	bl	d4cbc <_ZN5spark10JSONWriter4nameEPKcj>
   d5c02:	69a1      	ldr	r1, [r4, #24]
   d5c04:	f7fe ffde 	bl	d4bc4 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
   d5c08:	7923      	ldrb	r3, [r4, #4]
   d5c0a:	069b      	lsls	r3, r3, #26
   d5c0c:	d507      	bpl.n	d5c1e <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
   d5c0e:	4914      	ldr	r1, [pc, #80]	; (d5c60 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   d5c10:	2206      	movs	r2, #6
   d5c12:	a801      	add	r0, sp, #4
   d5c14:	f7ff f852 	bl	d4cbc <_ZN5spark10JSONWriter4nameEPKcj>
   d5c18:	69e1      	ldr	r1, [r4, #28]
   d5c1a:	f7ff f8c5 	bl	d4da8 <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
   d5c1e:	a801      	add	r0, sp, #4
   d5c20:	f7fe ffad 	bl	d4b7e <_ZN5spark10JSONWriter9endObjectEv>
    this->stream()->write((const uint8_t*)"\r\n", 2);
   d5c24:	6a28      	ldr	r0, [r5, #32]
   d5c26:	490f      	ldr	r1, [pc, #60]	; (d5c64 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   d5c28:	6803      	ldr	r3, [r0, #0]
   d5c2a:	2202      	movs	r2, #2
   d5c2c:	68db      	ldr	r3, [r3, #12]
   d5c2e:	4798      	blx	r3
}
   d5c30:	b005      	add	sp, #20
   d5c32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d5c36:	bf00      	nop
   d5c38:	2003e6e4 	.word	0x2003e6e4
   d5c3c:	000d6864 	.word	0x000d6864
   d5c40:	000d6711 	.word	0x000d6711
   d5c44:	000d6840 	.word	0x000d6840
   d5c48:	000d6842 	.word	0x000d6842
   d5c4c:	000d6844 	.word	0x000d6844
   d5c50:	000d6846 	.word	0x000d6846
   d5c54:	000d6849 	.word	0x000d6849
   d5c58:	000d684c 	.word	0x000d684c
   d5c5c:	000d684e 	.word	0x000d684e
   d5c60:	000d6853 	.word	0x000d6853
   d5c64:	000d683d 	.word	0x000d683d

000d5c68 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d5c68:	2300      	movs	r3, #0
   d5c6a:	6840      	ldr	r0, [r0, #4]
   d5c6c:	461a      	mov	r2, r3
   d5c6e:	f7fe bca5 	b.w	d45bc <network_connect>

000d5c72 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d5c72:	6840      	ldr	r0, [r0, #4]
   d5c74:	2200      	movs	r2, #0
   d5c76:	2102      	movs	r1, #2
   d5c78:	f7fe bcb0 	b.w	d45dc <network_disconnect>

000d5c7c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d5c7c:	2200      	movs	r2, #0
   d5c7e:	6840      	ldr	r0, [r0, #4]
   d5c80:	4611      	mov	r1, r2
   d5c82:	f7fe bca3 	b.w	d45cc <network_connecting>

000d5c86 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d5c86:	2200      	movs	r2, #0
   d5c88:	6840      	ldr	r0, [r0, #4]
   d5c8a:	4611      	mov	r1, r2
   d5c8c:	f7fe bcae 	b.w	d45ec <network_ready>

000d5c90 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d5c90:	2300      	movs	r3, #0
   d5c92:	6840      	ldr	r0, [r0, #4]
   d5c94:	461a      	mov	r2, r3
   d5c96:	4619      	mov	r1, r3
   d5c98:	f7fe bcb0 	b.w	d45fc <network_on>

000d5c9c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d5c9c:	2300      	movs	r3, #0
   d5c9e:	6840      	ldr	r0, [r0, #4]
   d5ca0:	461a      	mov	r2, r3
   d5ca2:	4619      	mov	r1, r3
   d5ca4:	f7fe bcb2 	b.w	d460c <network_off>

000d5ca8 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   d5ca8:	6840      	ldr	r0, [r0, #4]
   d5caa:	2100      	movs	r1, #0
   d5cac:	f7fe bcd6 	b.w	d465c <network_is_on>

000d5cb0 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   d5cb0:	6840      	ldr	r0, [r0, #4]
   d5cb2:	2100      	movs	r1, #0
   d5cb4:	f7fe bcda 	b.w	d466c <network_is_off>

000d5cb8 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d5cb8:	6840      	ldr	r0, [r0, #4]
   d5cba:	2200      	movs	r2, #0
   d5cbc:	f081 0101 	eor.w	r1, r1, #1
   d5cc0:	f7fe bcac 	b.w	d461c <network_listen>

000d5cc4 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d5cc4:	6840      	ldr	r0, [r0, #4]
   d5cc6:	2200      	movs	r2, #0
   d5cc8:	f7fe bcb8 	b.w	d463c <network_set_listen_timeout>

000d5ccc <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d5ccc:	2200      	movs	r2, #0
   d5cce:	6840      	ldr	r0, [r0, #4]
   d5cd0:	4611      	mov	r1, r2
   d5cd2:	f7fe bcbb 	b.w	d464c <network_get_listen_timeout>

000d5cd6 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d5cd6:	2200      	movs	r2, #0
   d5cd8:	6840      	ldr	r0, [r0, #4]
   d5cda:	4611      	mov	r1, r2
   d5cdc:	f7fe bca6 	b.w	d462c <network_listening>

000d5ce0 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d5ce0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5ce4:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d5ce6:	b095      	sub	sp, #84	; 0x54
   d5ce8:	4616      	mov	r6, r2
   d5cea:	460d      	mov	r5, r1
   d5cec:	4607      	mov	r7, r0
    IPAddress addr;
   d5cee:	f7fe fde7 	bl	d48c0 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d5cf2:	4621      	mov	r1, r4
   d5cf4:	2218      	movs	r2, #24
   d5cf6:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d5cf8:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d5cfa:	f000 fb8f 	bl	d641c <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d5cfe:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d5d00:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d5d04:	4621      	mov	r1, r4
   d5d06:	466b      	mov	r3, sp
   d5d08:	aa0c      	add	r2, sp, #48	; 0x30
   d5d0a:	4630      	mov	r0, r6
   d5d0c:	f7fe fb7a 	bl	d4404 <netdb_getaddrinfo>
    if (!r) {
   d5d10:	4604      	mov	r4, r0
   d5d12:	2800      	cmp	r0, #0
   d5d14:	d146      	bne.n	d5da4 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5d16:	4602      	mov	r2, r0
   d5d18:	2101      	movs	r1, #1
   d5d1a:	6868      	ldr	r0, [r5, #4]
   d5d1c:	f7fe fc66 	bl	d45ec <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5d20:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5d22:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5d24:	4622      	mov	r2, r4
   d5d26:	6868      	ldr	r0, [r5, #4]
   d5d28:	f7fe fc60 	bl	d45ec <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5d2c:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5d2e:	4681      	mov	r9, r0
        bool ok = false;
   d5d30:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5d32:	2e00      	cmp	r6, #0
   d5d34:	d036      	beq.n	d5da4 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
   d5d36:	2900      	cmp	r1, #0
   d5d38:	d134      	bne.n	d5da4 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d5d3a:	6873      	ldr	r3, [r6, #4]
   d5d3c:	2b02      	cmp	r3, #2
   d5d3e:	d003      	beq.n	d5d48 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d5d40:	2b0a      	cmp	r3, #10
   d5d42:	d00b      	beq.n	d5d5c <_ZN5spark12NetworkClass7resolveEPKc+0x7c>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5d44:	69f6      	ldr	r6, [r6, #28]
   d5d46:	e7f4      	b.n	d5d32 <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d5d48:	f1b8 0f00 	cmp.w	r8, #0
   d5d4c:	d004      	beq.n	d5d58 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d5d4e:	6971      	ldr	r1, [r6, #20]
   d5d50:	4638      	mov	r0, r7
   d5d52:	3104      	adds	r1, #4
   d5d54:	f7fe fde1 	bl	d491a <_ZN9IPAddressaSEPKh>
                    ok = true;
                    break;
   d5d58:	4641      	mov	r1, r8
   d5d5a:	e7f3      	b.n	d5d44 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                }
                case AF_INET6: {
                    if (!ipv6) {
   d5d5c:	f1b9 0f00 	cmp.w	r9, #0
   d5d60:	d101      	bne.n	d5d66 <_ZN5spark12NetworkClass7resolveEPKc+0x86>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d5d62:	4649      	mov	r1, r9
   d5d64:	e7ee      	b.n	d5d44 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d5d66:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d5d68:	2210      	movs	r2, #16
   d5d6a:	a801      	add	r0, sp, #4
   d5d6c:	f000 fb56 	bl	d641c <memset>
                    a.v = 6;
   d5d70:	2306      	movs	r3, #6
   d5d72:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d5d76:	ad01      	add	r5, sp, #4
   d5d78:	f104 0308 	add.w	r3, r4, #8
   d5d7c:	3418      	adds	r4, #24
   d5d7e:	6818      	ldr	r0, [r3, #0]
   d5d80:	6859      	ldr	r1, [r3, #4]
   d5d82:	462a      	mov	r2, r5
   d5d84:	c203      	stmia	r2!, {r0, r1}
   d5d86:	3308      	adds	r3, #8
   d5d88:	42a3      	cmp	r3, r4
   d5d8a:	4615      	mov	r5, r2
   d5d8c:	d1f7      	bne.n	d5d7e <_ZN5spark12NetworkClass7resolveEPKc+0x9e>
                    addr = IPAddress(a);
   d5d8e:	a901      	add	r1, sp, #4
   d5d90:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d5d92:	ad07      	add	r5, sp, #28
   d5d94:	f7fe fda2 	bl	d48dc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d5d98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5d9a:	1d3c      	adds	r4, r7, #4
   d5d9c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5d9e:	682b      	ldr	r3, [r5, #0]
   d5da0:	7023      	strb	r3, [r4, #0]
   d5da2:	e7de      	b.n	d5d62 <_ZN5spark12NetworkClass7resolveEPKc+0x82>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d5da4:	9800      	ldr	r0, [sp, #0]
   d5da6:	f7fe fb25 	bl	d43f4 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d5daa:	4638      	mov	r0, r7
   d5dac:	b015      	add	sp, #84	; 0x54
   d5dae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d5db4 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d5db4:	4b02      	ldr	r3, [pc, #8]	; (d5dc0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d5db6:	4a03      	ldr	r2, [pc, #12]	; (d5dc4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d5db8:	601a      	str	r2, [r3, #0]
   d5dba:	2200      	movs	r2, #0
   d5dbc:	605a      	str	r2, [r3, #4]

} // spark
   d5dbe:	4770      	bx	lr
   d5dc0:	2003e6e4 	.word	0x2003e6e4
   d5dc4:	000d68dc 	.word	0x000d68dc

000d5dc8 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d5dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5dca:	4606      	mov	r6, r0
   d5dcc:	460d      	mov	r5, r1
  size_t n = 0;
   d5dce:	188f      	adds	r7, r1, r2
   d5dd0:	2400      	movs	r4, #0
  while (size--) {
   d5dd2:	42bd      	cmp	r5, r7
   d5dd4:	d00c      	beq.n	d5df0 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d5dd6:	6833      	ldr	r3, [r6, #0]
   d5dd8:	f815 1b01 	ldrb.w	r1, [r5], #1
   d5ddc:	689b      	ldr	r3, [r3, #8]
   d5dde:	4630      	mov	r0, r6
   d5de0:	4798      	blx	r3
     if (chunk>=0)
   d5de2:	1e03      	subs	r3, r0, #0
   d5de4:	db01      	blt.n	d5dea <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d5de6:	441c      	add	r4, r3
  while (size--) {
   d5de8:	e7f3      	b.n	d5dd2 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d5dea:	2c00      	cmp	r4, #0
   d5dec:	bf08      	it	eq
   d5dee:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d5df0:	4620      	mov	r0, r4
   d5df2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5df4 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   d5df4:	b513      	push	{r0, r1, r4, lr}
   d5df6:	4604      	mov	r4, r0
    }
   d5df8:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d5dfa:	b159      	cbz	r1, d5e14 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d5dfc:	9101      	str	r1, [sp, #4]
   d5dfe:	f000 fb62 	bl	d64c6 <strlen>
   d5e02:	6823      	ldr	r3, [r4, #0]
   d5e04:	9901      	ldr	r1, [sp, #4]
   d5e06:	68db      	ldr	r3, [r3, #12]
   d5e08:	4602      	mov	r2, r0
   d5e0a:	4620      	mov	r0, r4
    }
   d5e0c:	b002      	add	sp, #8
   d5e0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d5e12:	4718      	bx	r3
    }
   d5e14:	b002      	add	sp, #8
   d5e16:	bd10      	pop	{r4, pc}

000d5e18 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d5e18:	6803      	ldr	r3, [r0, #0]
   d5e1a:	689b      	ldr	r3, [r3, #8]
   d5e1c:	4718      	bx	r3

000d5e1e <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d5e1e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d5e20:	210d      	movs	r1, #13
{
   d5e22:	4605      	mov	r5, r0
  size_t n = print('\r');
   d5e24:	f7ff fff8 	bl	d5e18 <_ZN5Print5printEc>
  n += print('\n');
   d5e28:	210a      	movs	r1, #10
  size_t n = print('\r');
   d5e2a:	4604      	mov	r4, r0
  n += print('\n');
   d5e2c:	4628      	mov	r0, r5
   d5e2e:	f7ff fff3 	bl	d5e18 <_ZN5Print5printEc>
  return n;
}
   d5e32:	4420      	add	r0, r4
   d5e34:	bd38      	pop	{r3, r4, r5, pc}

000d5e36 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d5e36:	b530      	push	{r4, r5, lr}
   d5e38:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d5e3a:	2300      	movs	r3, #0
   d5e3c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d5e40:	2a01      	cmp	r2, #1
   d5e42:	bf98      	it	ls
   d5e44:	220a      	movls	r2, #10
   d5e46:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d5e48:	460d      	mov	r5, r1
   d5e4a:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d5e4e:	fb01 5312 	mls	r3, r1, r2, r5
   d5e52:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d5e56:	2b09      	cmp	r3, #9
   d5e58:	bf94      	ite	ls
   d5e5a:	3330      	addls	r3, #48	; 0x30
   d5e5c:	3337      	addhi	r3, #55	; 0x37
   d5e5e:	b2db      	uxtb	r3, r3
  } while(n);
   d5e60:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d5e62:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d5e66:	d9ef      	bls.n	d5e48 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d5e68:	4621      	mov	r1, r4
   d5e6a:	f7ff ffc3 	bl	d5df4 <_ZN5Print5writeEPKc>
}
   d5e6e:	b00b      	add	sp, #44	; 0x2c
   d5e70:	bd30      	pop	{r4, r5, pc}

000d5e72 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   d5e72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5e76:	b086      	sub	sp, #24
   d5e78:	af00      	add	r7, sp, #0
   d5e7a:	4605      	mov	r5, r0
   d5e7c:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   d5e7e:	1d38      	adds	r0, r7, #4
   d5e80:	2114      	movs	r1, #20
{
   d5e82:	4614      	mov	r4, r2
    va_copy(args2, args);
   d5e84:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   d5e86:	f7fe fc19 	bl	d46bc <vsnprintf>

    if (n<bufsize)
   d5e8a:	2813      	cmp	r0, #19
   d5e8c:	d80e      	bhi.n	d5eac <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   d5e8e:	1d39      	adds	r1, r7, #4
   d5e90:	4628      	mov	r0, r5
   d5e92:	f7ff ffaf 	bl	d5df4 <_ZN5Print5writeEPKc>
   d5e96:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   d5e98:	b11e      	cbz	r6, d5ea2 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   d5e9a:	4628      	mov	r0, r5
   d5e9c:	f7ff ffbf 	bl	d5e1e <_ZN5Print7printlnEv>
   d5ea0:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   d5ea2:	4620      	mov	r0, r4
   d5ea4:	3718      	adds	r7, #24
   d5ea6:	46bd      	mov	sp, r7
   d5ea8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   d5eac:	f100 0308 	add.w	r3, r0, #8
   d5eb0:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   d5eb4:	46e8      	mov	r8, sp
        char bigger[n+1];
   d5eb6:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   d5eba:	4622      	mov	r2, r4
   d5ebc:	1c41      	adds	r1, r0, #1
   d5ebe:	683b      	ldr	r3, [r7, #0]
   d5ec0:	4668      	mov	r0, sp
   d5ec2:	f7fe fbfb 	bl	d46bc <vsnprintf>
  return write(str);
   d5ec6:	4669      	mov	r1, sp
   d5ec8:	4628      	mov	r0, r5
   d5eca:	f7ff ff93 	bl	d5df4 <_ZN5Print5writeEPKc>
   d5ece:	4604      	mov	r4, r0
   d5ed0:	46c5      	mov	sp, r8
   d5ed2:	e7e1      	b.n	d5e98 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000d5ed4 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   d5ed4:	4b01      	ldr	r3, [pc, #4]	; (d5edc <_GLOBAL__sub_I_RGB+0x8>)
   d5ed6:	2200      	movs	r2, #0
   d5ed8:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   d5eda:	4770      	bx	lr
   d5edc:	2003e6ec 	.word	0x2003e6ec

000d5ee0 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d5ee0:	b510      	push	{r4, lr}
   d5ee2:	4604      	mov	r4, r0
{
	free(buffer);
   d5ee4:	6800      	ldr	r0, [r0, #0]
   d5ee6:	f7fe fbd1 	bl	d468c <free>
}
   d5eea:	4620      	mov	r0, r4
   d5eec:	bd10      	pop	{r4, pc}

000d5eee <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d5eee:	b510      	push	{r4, lr}
   d5ef0:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d5ef2:	6800      	ldr	r0, [r0, #0]
   d5ef4:	b108      	cbz	r0, d5efa <_ZN6String10invalidateEv+0xc>
   d5ef6:	f7fe fbc9 	bl	d468c <free>
	buffer = NULL;
   d5efa:	2300      	movs	r3, #0
	capacity = len = 0;
   d5efc:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   d5f00:	6023      	str	r3, [r4, #0]
}
   d5f02:	bd10      	pop	{r4, pc}

000d5f04 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d5f04:	b538      	push	{r3, r4, r5, lr}
   d5f06:	4604      	mov	r4, r0
   d5f08:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d5f0a:	6800      	ldr	r0, [r0, #0]
   d5f0c:	3101      	adds	r1, #1
   d5f0e:	f7fe fbc5 	bl	d469c <realloc>
	if (newbuffer) {
   d5f12:	b110      	cbz	r0, d5f1a <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d5f14:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   d5f18:	2001      	movs	r0, #1
	}
	return 0;
}
   d5f1a:	bd38      	pop	{r3, r4, r5, pc}

000d5f1c <_ZN6String7reserveEj>:
{
   d5f1c:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d5f1e:	6803      	ldr	r3, [r0, #0]
{
   d5f20:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d5f22:	b123      	cbz	r3, d5f2e <_ZN6String7reserveEj+0x12>
   d5f24:	6843      	ldr	r3, [r0, #4]
   d5f26:	428b      	cmp	r3, r1
   d5f28:	d301      	bcc.n	d5f2e <_ZN6String7reserveEj+0x12>
   d5f2a:	2001      	movs	r0, #1
}
   d5f2c:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   d5f2e:	4620      	mov	r0, r4
   d5f30:	f7ff ffe8 	bl	d5f04 <_ZN6String12changeBufferEj>
   d5f34:	2800      	cmp	r0, #0
   d5f36:	d0f9      	beq.n	d5f2c <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   d5f38:	68a3      	ldr	r3, [r4, #8]
   d5f3a:	2b00      	cmp	r3, #0
   d5f3c:	d1f5      	bne.n	d5f2a <_ZN6String7reserveEj+0xe>
   d5f3e:	6822      	ldr	r2, [r4, #0]
   d5f40:	7013      	strb	r3, [r2, #0]
   d5f42:	e7f2      	b.n	d5f2a <_ZN6String7reserveEj+0xe>

000d5f44 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d5f44:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d5f46:	460d      	mov	r5, r1
	if (!reserve(length)) {
   d5f48:	4611      	mov	r1, r2
   d5f4a:	9201      	str	r2, [sp, #4]
{
   d5f4c:	4604      	mov	r4, r0
	if (!reserve(length)) {
   d5f4e:	f7ff ffe5 	bl	d5f1c <_ZN6String7reserveEj>
   d5f52:	9a01      	ldr	r2, [sp, #4]
   d5f54:	b928      	cbnz	r0, d5f62 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   d5f56:	4620      	mov	r0, r4
   d5f58:	f7ff ffc9 	bl	d5eee <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   d5f5c:	4620      	mov	r0, r4
   d5f5e:	b003      	add	sp, #12
   d5f60:	bd30      	pop	{r4, r5, pc}
	len = length;
   d5f62:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   d5f64:	4629      	mov	r1, r5
   d5f66:	6820      	ldr	r0, [r4, #0]
   d5f68:	f000 fa30 	bl	d63cc <memcpy>
	buffer[len] = 0;
   d5f6c:	6822      	ldr	r2, [r4, #0]
   d5f6e:	68a3      	ldr	r3, [r4, #8]
   d5f70:	2100      	movs	r1, #0
   d5f72:	54d1      	strb	r1, [r2, r3]
	return *this;
   d5f74:	e7f2      	b.n	d5f5c <_ZN6String4copyEPKcj+0x18>

000d5f76 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   d5f76:	b538      	push	{r3, r4, r5, lr}
   d5f78:	4605      	mov	r5, r0
	if (buffer) {
   d5f7a:	6800      	ldr	r0, [r0, #0]
{
   d5f7c:	460c      	mov	r4, r1
	if (buffer) {
   d5f7e:	b168      	cbz	r0, d5f9c <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   d5f80:	686a      	ldr	r2, [r5, #4]
   d5f82:	688b      	ldr	r3, [r1, #8]
   d5f84:	429a      	cmp	r2, r3
   d5f86:	d307      	bcc.n	d5f98 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   d5f88:	6809      	ldr	r1, [r1, #0]
   d5f8a:	f000 fa94 	bl	d64b6 <strcpy>
			len = rhs.len;
   d5f8e:	68a3      	ldr	r3, [r4, #8]
   d5f90:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   d5f92:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   d5f94:	60a3      	str	r3, [r4, #8]
}
   d5f96:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   d5f98:	f7fe fb78 	bl	d468c <free>
	buffer = rhs.buffer;
   d5f9c:	6823      	ldr	r3, [r4, #0]
   d5f9e:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   d5fa0:	6863      	ldr	r3, [r4, #4]
   d5fa2:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   d5fa4:	68a3      	ldr	r3, [r4, #8]
   d5fa6:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   d5fa8:	2300      	movs	r3, #0
	rhs.capacity = 0;
   d5faa:	e9c4 3300 	strd	r3, r3, [r4]
   d5fae:	e7f1      	b.n	d5f94 <_ZN6String4moveERS_+0x1e>

000d5fb0 <_ZN6StringC1EOS_>:
String::String(String &&rval)
   d5fb0:	b510      	push	{r4, lr}
	buffer = NULL;
   d5fb2:	2300      	movs	r3, #0
	capacity = 0;
   d5fb4:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   d5fb8:	4604      	mov	r4, r0
	len = 0;
   d5fba:	6083      	str	r3, [r0, #8]
	flags = 0;
   d5fbc:	7303      	strb	r3, [r0, #12]
	move(rval);
   d5fbe:	f7ff ffda 	bl	d5f76 <_ZN6String4moveERS_>
}
   d5fc2:	4620      	mov	r0, r4
   d5fc4:	bd10      	pop	{r4, pc}

000d5fc6 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d5fc6:	4288      	cmp	r0, r1
{
   d5fc8:	b510      	push	{r4, lr}
   d5fca:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d5fcc:	d005      	beq.n	d5fda <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d5fce:	680b      	ldr	r3, [r1, #0]
   d5fd0:	b12b      	cbz	r3, d5fde <_ZN6StringaSERKS_+0x18>
   d5fd2:	688a      	ldr	r2, [r1, #8]
   d5fd4:	4619      	mov	r1, r3
   d5fd6:	f7ff ffb5 	bl	d5f44 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d5fda:	4620      	mov	r0, r4
   d5fdc:	bd10      	pop	{r4, pc}
	else invalidate();
   d5fde:	f7ff ff86 	bl	d5eee <_ZN6String10invalidateEv>
   d5fe2:	e7fa      	b.n	d5fda <_ZN6StringaSERKS_+0x14>

000d5fe4 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   d5fe4:	b510      	push	{r4, lr}
	buffer = NULL;
   d5fe6:	2300      	movs	r3, #0
String::String(const String &value)
   d5fe8:	4604      	mov	r4, r0
	capacity = 0;
   d5fea:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   d5fee:	6083      	str	r3, [r0, #8]
	flags = 0;
   d5ff0:	7303      	strb	r3, [r0, #12]
	*this = value;
   d5ff2:	f7ff ffe8 	bl	d5fc6 <_ZN6StringaSERKS_>
}
   d5ff6:	4620      	mov	r0, r4
   d5ff8:	bd10      	pop	{r4, pc}
	...

000d5ffc <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d5ffc:	4b05      	ldr	r3, [pc, #20]	; (d6014 <_GLOBAL__sub_I_System+0x18>)
   d5ffe:	2202      	movs	r2, #2
   d6000:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d6002:	4b05      	ldr	r3, [pc, #20]	; (d6018 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   d6004:	4a05      	ldr	r2, [pc, #20]	; (d601c <_GLOBAL__sub_I_System+0x20>)
   d6006:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   d6008:	2000      	movs	r0, #0
   d600a:	6018      	str	r0, [r3, #0]
   d600c:	8098      	strh	r0, [r3, #4]
    SleepResult() {}
   d600e:	7198      	strb	r0, [r3, #6]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d6010:	f7fe baa8 	b.w	d4564 <set_system_mode>
   d6014:	2003e708 	.word	0x2003e708
   d6018:	2003e6fc 	.word	0x2003e6fc
   d601c:	ffff0000 	.word	0xffff0000

000d6020 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d6020:	4b02      	ldr	r3, [pc, #8]	; (d602c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d6022:	681a      	ldr	r2, [r3, #0]
   d6024:	4b02      	ldr	r3, [pc, #8]	; (d6030 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d6026:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d6028:	4770      	bx	lr
   d602a:	bf00      	nop
   d602c:	2003e4d4 	.word	0x2003e4d4
   d6030:	2003e70c 	.word	0x2003e70c

000d6034 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d6034:	4770      	bx	lr

000d6036 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d6036:	7441      	strb	r1, [r0, #17]
}
   d6038:	4770      	bx	lr

000d603a <__tcf_0>:
    serial1_rx_buffer = new hal_usart_ring_buffer_t();
  }
  if (!serial1_tx_buffer) {
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
   d603a:	4770      	bx	lr

000d603c <_ZN11USARTSerial17availableForWriteEv>:
{
   d603c:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d603e:	7c00      	ldrb	r0, [r0, #16]
   d6040:	f7fe fa20 	bl	d4484 <hal_usart_available_data_for_write>
}
   d6044:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6048:	bd08      	pop	{r3, pc}

000d604a <_ZN11USARTSerial9availableEv>:
{
   d604a:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d604c:	7c00      	ldrb	r0, [r0, #16]
   d604e:	f7fe f9f9 	bl	d4444 <hal_usart_available>
}
   d6052:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6056:	bd08      	pop	{r3, pc}

000d6058 <_ZN11USARTSerial4peekEv>:
{
   d6058:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d605a:	7c00      	ldrb	r0, [r0, #16]
   d605c:	f7fe fa02 	bl	d4464 <hal_usart_peek>
}
   d6060:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d6064:	bd08      	pop	{r3, pc}

000d6066 <_ZN11USARTSerial4readEv>:
{
   d6066:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d6068:	7c00      	ldrb	r0, [r0, #16]
   d606a:	f7fe f9f3 	bl	d4454 <hal_usart_read>
}
   d606e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d6072:	bd08      	pop	{r3, pc}

000d6074 <_ZN11USARTSerial5flushEv>:
  hal_usart_flush(_serial);
   d6074:	7c00      	ldrb	r0, [r0, #16]
   d6076:	f7fe b9fd 	b.w	d4474 <hal_usart_flush>

000d607a <_ZN11USARTSerial5writeEh>:
{
   d607a:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d607c:	7c45      	ldrb	r5, [r0, #17]
{
   d607e:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d6080:	b12d      	cbz	r5, d608e <_ZN11USARTSerial5writeEh+0x14>
	  return hal_usart_write(_serial, c);
   d6082:	7c20      	ldrb	r0, [r4, #16]
}
   d6084:	b003      	add	sp, #12
   d6086:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d608a:	f7fe b9d3 	b.w	d4434 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d608e:	7c00      	ldrb	r0, [r0, #16]
   d6090:	9101      	str	r1, [sp, #4]
   d6092:	f7fe f9f7 	bl	d4484 <hal_usart_available_data_for_write>
   d6096:	2800      	cmp	r0, #0
   d6098:	9901      	ldr	r1, [sp, #4]
   d609a:	dcf2      	bgt.n	d6082 <_ZN11USARTSerial5writeEh+0x8>
}
   d609c:	4628      	mov	r0, r5
   d609e:	b003      	add	sp, #12
   d60a0:	bd30      	pop	{r4, r5, pc}

000d60a2 <_ZN11USARTSerialD0Ev>:
   d60a2:	b510      	push	{r4, lr}
   d60a4:	2114      	movs	r1, #20
   d60a6:	4604      	mov	r4, r0
   d60a8:	f000 f986 	bl	d63b8 <_ZdlPvj>
   d60ac:	4620      	mov	r0, r4
   d60ae:	bd10      	pop	{r4, pc}

000d60b0 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d60b0:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d60b2:	f04f 0c00 	mov.w	ip, #0
   d60b6:	4604      	mov	r4, r0
   d60b8:	4608      	mov	r0, r1
   d60ba:	4611      	mov	r1, r2
   d60bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d60c0:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d60c4:	4a04      	ldr	r2, [pc, #16]	; (d60d8 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d60c6:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d60c8:	2201      	movs	r2, #1
  _serial = serial;
   d60ca:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d60cc:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d60ce:	461a      	mov	r2, r3
   d60d0:	f7fe f9a0 	bl	d4414 <hal_usart_init>
}
   d60d4:	4620      	mov	r0, r4
   d60d6:	bd10      	pop	{r4, pc}
   d60d8:	000d6934 	.word	0x000d6934

000d60dc <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   d60dc:	7c00      	ldrb	r0, [r0, #16]
   d60de:	2300      	movs	r3, #0
   d60e0:	f7fe b9d8 	b.w	d4494 <hal_usart_begin_config>

000d60e4 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   d60e4:	2200      	movs	r2, #0
   d60e6:	f7ff bff9 	b.w	d60dc <_ZN11USARTSerial5beginEmm>

000d60ea <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
   d60ea:	7c00      	ldrb	r0, [r0, #16]
   d60ec:	f7fe b99a 	b.w	d4424 <hal_usart_end>

000d60f0 <_Z22__fetch_global_Serial1v>:
{
   d60f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if (!serial1_rx_buffer) {
   d60f2:	4c1a      	ldr	r4, [pc, #104]	; (d615c <_Z22__fetch_global_Serial1v+0x6c>)
   d60f4:	6826      	ldr	r6, [r4, #0]
   d60f6:	b94e      	cbnz	r6, d610c <_Z22__fetch_global_Serial1v+0x1c>
    serial1_rx_buffer = new hal_usart_ring_buffer_t();
   d60f8:	2084      	movs	r0, #132	; 0x84
   d60fa:	f7fd ffca 	bl	d4092 <_Znwj>
   d60fe:	4605      	mov	r5, r0
   d6100:	b118      	cbz	r0, d610a <_Z22__fetch_global_Serial1v+0x1a>
   d6102:	2284      	movs	r2, #132	; 0x84
   d6104:	4631      	mov	r1, r6
   d6106:	f000 f989 	bl	d641c <memset>
   d610a:	6025      	str	r5, [r4, #0]
  if (!serial1_tx_buffer) {
   d610c:	4d14      	ldr	r5, [pc, #80]	; (d6160 <_Z22__fetch_global_Serial1v+0x70>)
   d610e:	682f      	ldr	r7, [r5, #0]
   d6110:	b94f      	cbnz	r7, d6126 <_Z22__fetch_global_Serial1v+0x36>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
   d6112:	2084      	movs	r0, #132	; 0x84
   d6114:	f7fd ffbd 	bl	d4092 <_Znwj>
   d6118:	4606      	mov	r6, r0
   d611a:	b118      	cbz	r0, d6124 <_Z22__fetch_global_Serial1v+0x34>
   d611c:	2284      	movs	r2, #132	; 0x84
   d611e:	4639      	mov	r1, r7
   d6120:	f000 f97c 	bl	d641c <memset>
   d6124:	602e      	str	r6, [r5, #0]
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
   d6126:	4e0f      	ldr	r6, [pc, #60]	; (d6164 <_Z22__fetch_global_Serial1v+0x74>)
   d6128:	7831      	ldrb	r1, [r6, #0]
   d612a:	f3bf 8f5b 	dmb	ish
   d612e:	f011 0101 	ands.w	r1, r1, #1
   d6132:	d110      	bne.n	d6156 <_Z22__fetch_global_Serial1v+0x66>
   d6134:	4630      	mov	r0, r6
   d6136:	9101      	str	r1, [sp, #4]
   d6138:	f7fd ffba 	bl	d40b0 <__cxa_guard_acquire>
   d613c:	9901      	ldr	r1, [sp, #4]
   d613e:	b150      	cbz	r0, d6156 <_Z22__fetch_global_Serial1v+0x66>
   d6140:	682b      	ldr	r3, [r5, #0]
   d6142:	6822      	ldr	r2, [r4, #0]
   d6144:	4808      	ldr	r0, [pc, #32]	; (d6168 <_Z22__fetch_global_Serial1v+0x78>)
   d6146:	f7ff ffb3 	bl	d60b0 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d614a:	4630      	mov	r0, r6
   d614c:	f7fd ffb5 	bl	d40ba <__cxa_guard_release>
   d6150:	4806      	ldr	r0, [pc, #24]	; (d616c <_Z22__fetch_global_Serial1v+0x7c>)
   d6152:	f000 f935 	bl	d63c0 <atexit>
#endif
	return serial1;
}
   d6156:	4804      	ldr	r0, [pc, #16]	; (d6168 <_Z22__fetch_global_Serial1v+0x78>)
   d6158:	b003      	add	sp, #12
   d615a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d615c:	2003e714 	.word	0x2003e714
   d6160:	2003e718 	.word	0x2003e718
   d6164:	2003e710 	.word	0x2003e710
   d6168:	2003e71c 	.word	0x2003e71c
   d616c:	000d603b 	.word	0x000d603b

000d6170 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d6170:	7441      	strb	r1, [r0, #17]
}
   d6172:	4770      	bx	lr

000d6174 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d6174:	4770      	bx	lr

000d6176 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d6176:	4770      	bx	lr

000d6178 <_ZN9USBSerial4readEv>:
{
   d6178:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d617a:	2100      	movs	r1, #0
   d617c:	7c00      	ldrb	r0, [r0, #16]
   d617e:	f7fe f9b9 	bl	d44f4 <HAL_USB_USART_Receive_Data>
}
   d6182:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d6186:	bd08      	pop	{r3, pc}

000d6188 <_ZN9USBSerial4peekEv>:
{
   d6188:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d618a:	2101      	movs	r1, #1
   d618c:	7c00      	ldrb	r0, [r0, #16]
   d618e:	f7fe f9b1 	bl	d44f4 <HAL_USB_USART_Receive_Data>
}
   d6192:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d6196:	bd08      	pop	{r3, pc}

000d6198 <_ZN9USBSerial17availableForWriteEv>:
{
   d6198:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d619a:	7c00      	ldrb	r0, [r0, #16]
   d619c:	f7fe f9a2 	bl	d44e4 <HAL_USB_USART_Available_Data_For_Write>
}
   d61a0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d61a4:	bd08      	pop	{r3, pc}

000d61a6 <_ZN9USBSerial9availableEv>:
{
   d61a6:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d61a8:	7c00      	ldrb	r0, [r0, #16]
   d61aa:	f7fe f993 	bl	d44d4 <HAL_USB_USART_Available_Data>
}
   d61ae:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d61b2:	bd08      	pop	{r3, pc}

000d61b4 <_ZN9USBSerial5writeEh>:
{
   d61b4:	b513      	push	{r0, r1, r4, lr}
   d61b6:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d61b8:	7c00      	ldrb	r0, [r0, #16]
{
   d61ba:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d61bc:	f7fe f992 	bl	d44e4 <HAL_USB_USART_Available_Data_For_Write>
   d61c0:	2800      	cmp	r0, #0
   d61c2:	9901      	ldr	r1, [sp, #4]
   d61c4:	dc01      	bgt.n	d61ca <_ZN9USBSerial5writeEh+0x16>
   d61c6:	7c60      	ldrb	r0, [r4, #17]
   d61c8:	b120      	cbz	r0, d61d4 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d61ca:	7c20      	ldrb	r0, [r4, #16]
   d61cc:	f7fe f99a 	bl	d4504 <HAL_USB_USART_Send_Data>
   d61d0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d61d4:	b002      	add	sp, #8
   d61d6:	bd10      	pop	{r4, pc}

000d61d8 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d61d8:	7c00      	ldrb	r0, [r0, #16]
   d61da:	f7fe b99b 	b.w	d4514 <HAL_USB_USART_Flush_Data>

000d61de <_ZN9USBSerialD0Ev>:
   d61de:	b510      	push	{r4, lr}
   d61e0:	2114      	movs	r1, #20
   d61e2:	4604      	mov	r4, r0
   d61e4:	f000 f8e8 	bl	d63b8 <_ZdlPvj>
   d61e8:	4620      	mov	r0, r4
   d61ea:	bd10      	pop	{r4, pc}

000d61ec <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d61ec:	b510      	push	{r4, lr}
   d61ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d61f2:	4604      	mov	r4, r0
   d61f4:	4608      	mov	r0, r1
   d61f6:	2100      	movs	r1, #0
   d61f8:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d61fc:	4b04      	ldr	r3, [pc, #16]	; (d6210 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d61fe:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d6200:	2301      	movs	r3, #1
  _serial = serial;
   d6202:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d6204:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d6206:	4611      	mov	r1, r2
   d6208:	f7fe f94c 	bl	d44a4 <HAL_USB_USART_Init>
}
   d620c:	4620      	mov	r0, r4
   d620e:	bd10      	pop	{r4, pc}
   d6210:	000d6964 	.word	0x000d6964

000d6214 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d6214:	7c00      	ldrb	r0, [r0, #16]
   d6216:	2200      	movs	r2, #0
   d6218:	f7fe b94c 	b.w	d44b4 <HAL_USB_USART_Begin>

000d621c <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
   d621c:	7c00      	ldrb	r0, [r0, #16]
   d621e:	f7fe b951 	b.w	d44c4 <HAL_USB_USART_End>

000d6222 <_Z19acquireSerialBufferv>:
{
   d6222:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d6224:	2214      	movs	r2, #20
{
   d6226:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d6228:	2100      	movs	r1, #0
   d622a:	f000 f8f7 	bl	d641c <memset>
}
   d622e:	4620      	mov	r0, r4
   d6230:	bd10      	pop	{r4, pc}
	...

000d6234 <_Z16_fetch_usbserialv>:
{
   d6234:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d6236:	4c0f      	ldr	r4, [pc, #60]	; (d6274 <_Z16_fetch_usbserialv+0x40>)
{
   d6238:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d623a:	a803      	add	r0, sp, #12
   d623c:	f7ff fff1 	bl	d6222 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d6240:	7821      	ldrb	r1, [r4, #0]
   d6242:	f3bf 8f5b 	dmb	ish
   d6246:	f011 0101 	ands.w	r1, r1, #1
   d624a:	d10f      	bne.n	d626c <_Z16_fetch_usbserialv+0x38>
   d624c:	4620      	mov	r0, r4
   d624e:	9101      	str	r1, [sp, #4]
   d6250:	f7fd ff2e 	bl	d40b0 <__cxa_guard_acquire>
   d6254:	9901      	ldr	r1, [sp, #4]
   d6256:	b148      	cbz	r0, d626c <_Z16_fetch_usbserialv+0x38>
   d6258:	aa03      	add	r2, sp, #12
   d625a:	4807      	ldr	r0, [pc, #28]	; (d6278 <_Z16_fetch_usbserialv+0x44>)
   d625c:	f7ff ffc6 	bl	d61ec <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d6260:	4620      	mov	r0, r4
   d6262:	f7fd ff2a 	bl	d40ba <__cxa_guard_release>
   d6266:	4805      	ldr	r0, [pc, #20]	; (d627c <_Z16_fetch_usbserialv+0x48>)
   d6268:	f000 f8aa 	bl	d63c0 <atexit>
	return _usbserial;
}
   d626c:	4802      	ldr	r0, [pc, #8]	; (d6278 <_Z16_fetch_usbserialv+0x44>)
   d626e:	b008      	add	sp, #32
   d6270:	bd10      	pop	{r4, pc}
   d6272:	bf00      	nop
   d6274:	2003e730 	.word	0x2003e730
   d6278:	2003e734 	.word	0x2003e734
   d627c:	000d6175 	.word	0x000d6175

000d6280 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d6280:	4b01      	ldr	r3, [pc, #4]	; (d6288 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d6282:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d6284:	4770      	bx	lr
   d6286:	bf00      	nop
   d6288:	2003e4d8 	.word	0x2003e4d8

000d628c <serialEventRun>:
{
   d628c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d628e:	4b0b      	ldr	r3, [pc, #44]	; (d62bc <serialEventRun+0x30>)
   d6290:	b143      	cbz	r3, d62a4 <serialEventRun+0x18>
   d6292:	f7ff ffcf 	bl	d6234 <_Z16_fetch_usbserialv>
   d6296:	6803      	ldr	r3, [r0, #0]
   d6298:	691b      	ldr	r3, [r3, #16]
   d629a:	4798      	blx	r3
   d629c:	2800      	cmp	r0, #0
   d629e:	dd01      	ble.n	d62a4 <serialEventRun+0x18>
        serialEvent();
   d62a0:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d62a4:	4b06      	ldr	r3, [pc, #24]	; (d62c0 <serialEventRun+0x34>)
   d62a6:	b143      	cbz	r3, d62ba <serialEventRun+0x2e>
   d62a8:	f7ff ff22 	bl	d60f0 <_Z22__fetch_global_Serial1v>
   d62ac:	6803      	ldr	r3, [r0, #0]
   d62ae:	691b      	ldr	r3, [r3, #16]
   d62b0:	4798      	blx	r3
   d62b2:	2800      	cmp	r0, #0
   d62b4:	dd01      	ble.n	d62ba <serialEventRun+0x2e>
        serialEvent1();
   d62b6:	f3af 8000 	nop.w
}
   d62ba:	bd08      	pop	{r3, pc}
	...

000d62c4 <_post_loop>:
{
   d62c4:	b508      	push	{r3, lr}
	serialEventRun();
   d62c6:	f7ff ffe1 	bl	d628c <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d62ca:	f7fe f883 	bl	d43d4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d62ce:	4b01      	ldr	r3, [pc, #4]	; (d62d4 <_post_loop+0x10>)
   d62d0:	6018      	str	r0, [r3, #0]
}
   d62d2:	bd08      	pop	{r3, pc}
   d62d4:	2003e750 	.word	0x2003e750

000d62d8 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d62d8:	4805      	ldr	r0, [pc, #20]	; (d62f0 <_Z33system_initialize_user_backup_ramv+0x18>)
   d62da:	4a06      	ldr	r2, [pc, #24]	; (d62f4 <_Z33system_initialize_user_backup_ramv+0x1c>)
   d62dc:	4906      	ldr	r1, [pc, #24]	; (d62f8 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   d62de:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d62e0:	1a12      	subs	r2, r2, r0
   d62e2:	f000 f873 	bl	d63cc <memcpy>
    __backup_sram_signature = signature;
   d62e6:	4b05      	ldr	r3, [pc, #20]	; (d62fc <_Z33system_initialize_user_backup_ramv+0x24>)
   d62e8:	4a05      	ldr	r2, [pc, #20]	; (d6300 <_Z33system_initialize_user_backup_ramv+0x28>)
   d62ea:	601a      	str	r2, [r3, #0]
}
   d62ec:	bd08      	pop	{r3, pc}
   d62ee:	bf00      	nop
   d62f0:	2003f400 	.word	0x2003f400
   d62f4:	2003f404 	.word	0x2003f404
   d62f8:	000d6ac0 	.word	0x000d6ac0
   d62fc:	2003f400 	.word	0x2003f400
   d6300:	9a271c1e 	.word	0x9a271c1e

000d6304 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d6304:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d6306:	2300      	movs	r3, #0
   d6308:	9300      	str	r3, [sp, #0]
   d630a:	461a      	mov	r2, r3
   d630c:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d6310:	f7fe f942 	bl	d4598 <system_ctrl_set_result>
}
   d6314:	b003      	add	sp, #12
   d6316:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d631c <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d631c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d631e:	8843      	ldrh	r3, [r0, #2]
   d6320:	2b0a      	cmp	r3, #10
   d6322:	d008      	beq.n	d6336 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d6324:	2b50      	cmp	r3, #80	; 0x50
   d6326:	d10b      	bne.n	d6340 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d6328:	4b09      	ldr	r3, [pc, #36]	; (d6350 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d632a:	681b      	ldr	r3, [r3, #0]
   d632c:	b14b      	cbz	r3, d6342 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d632e:	b003      	add	sp, #12
   d6330:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d6334:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d6336:	f7ff ffe5 	bl	d6304 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d633a:	b003      	add	sp, #12
   d633c:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d6340:	2300      	movs	r3, #0
   d6342:	9300      	str	r3, [sp, #0]
   d6344:	461a      	mov	r2, r3
   d6346:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d634a:	f7fe f925 	bl	d4598 <system_ctrl_set_result>
}
   d634e:	e7f4      	b.n	d633a <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d6350:	2003e74c 	.word	0x2003e74c

000d6354 <module_user_init_hook>:
{
   d6354:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d6356:	4812      	ldr	r0, [pc, #72]	; (d63a0 <module_user_init_hook+0x4c>)
   d6358:	2100      	movs	r1, #0
   d635a:	f7fe f9b7 	bl	d46cc <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   d635e:	4b11      	ldr	r3, [pc, #68]	; (d63a4 <module_user_init_hook+0x50>)
   d6360:	681a      	ldr	r2, [r3, #0]
   d6362:	4b11      	ldr	r3, [pc, #68]	; (d63a8 <module_user_init_hook+0x54>)
   d6364:	429a      	cmp	r2, r3
   d6366:	4b11      	ldr	r3, [pc, #68]	; (d63ac <module_user_init_hook+0x58>)
   d6368:	bf0c      	ite	eq
   d636a:	2201      	moveq	r2, #1
   d636c:	2200      	movne	r2, #0
   d636e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d6370:	d001      	beq.n	d6376 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   d6372:	f7ff ffb1 	bl	d62d8 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d6376:	f7fe f81d 	bl	d43b4 <HAL_RNG_GetRandomNumber>
   d637a:	4604      	mov	r4, r0
    srand(seed);
   d637c:	f000 f856 	bl	d642c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d6380:	4b0b      	ldr	r3, [pc, #44]	; (d63b0 <module_user_init_hook+0x5c>)
   d6382:	b113      	cbz	r3, d638a <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   d6384:	4620      	mov	r0, r4
   d6386:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d638a:	2100      	movs	r1, #0
   d638c:	4808      	ldr	r0, [pc, #32]	; (d63b0 <module_user_init_hook+0x5c>)
   d638e:	f7fe f90d 	bl	d45ac <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d6392:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d6396:	4807      	ldr	r0, [pc, #28]	; (d63b4 <module_user_init_hook+0x60>)
   d6398:	2100      	movs	r1, #0
   d639a:	f7fe b8f3 	b.w	d4584 <system_ctrl_set_app_request_handler>
   d639e:	bf00      	nop
   d63a0:	000d6281 	.word	0x000d6281
   d63a4:	2003f400 	.word	0x2003f400
   d63a8:	9a271c1e 	.word	0x9a271c1e
   d63ac:	2003e748 	.word	0x2003e748
   d63b0:	00000000 	.word	0x00000000
   d63b4:	000d631d 	.word	0x000d631d

000d63b8 <_ZdlPvj>:
   d63b8:	f7fd be6d 	b.w	d4096 <_ZdlPv>

000d63bc <_ZnwjRKSt9nothrow_t>:
   d63bc:	f7fd be69 	b.w	d4092 <_Znwj>

000d63c0 <atexit>:
   d63c0:	2300      	movs	r3, #0
   d63c2:	4601      	mov	r1, r0
   d63c4:	461a      	mov	r2, r3
   d63c6:	4618      	mov	r0, r3
   d63c8:	f000 b930 	b.w	d662c <__register_exitproc>

000d63cc <memcpy>:
   d63cc:	440a      	add	r2, r1
   d63ce:	4291      	cmp	r1, r2
   d63d0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   d63d4:	d100      	bne.n	d63d8 <memcpy+0xc>
   d63d6:	4770      	bx	lr
   d63d8:	b510      	push	{r4, lr}
   d63da:	f811 4b01 	ldrb.w	r4, [r1], #1
   d63de:	f803 4f01 	strb.w	r4, [r3, #1]!
   d63e2:	4291      	cmp	r1, r2
   d63e4:	d1f9      	bne.n	d63da <memcpy+0xe>
   d63e6:	bd10      	pop	{r4, pc}

000d63e8 <memmove>:
   d63e8:	4288      	cmp	r0, r1
   d63ea:	b510      	push	{r4, lr}
   d63ec:	eb01 0402 	add.w	r4, r1, r2
   d63f0:	d902      	bls.n	d63f8 <memmove+0x10>
   d63f2:	4284      	cmp	r4, r0
   d63f4:	4623      	mov	r3, r4
   d63f6:	d807      	bhi.n	d6408 <memmove+0x20>
   d63f8:	1e43      	subs	r3, r0, #1
   d63fa:	42a1      	cmp	r1, r4
   d63fc:	d008      	beq.n	d6410 <memmove+0x28>
   d63fe:	f811 2b01 	ldrb.w	r2, [r1], #1
   d6402:	f803 2f01 	strb.w	r2, [r3, #1]!
   d6406:	e7f8      	b.n	d63fa <memmove+0x12>
   d6408:	4402      	add	r2, r0
   d640a:	4601      	mov	r1, r0
   d640c:	428a      	cmp	r2, r1
   d640e:	d100      	bne.n	d6412 <memmove+0x2a>
   d6410:	bd10      	pop	{r4, pc}
   d6412:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   d6416:	f802 4d01 	strb.w	r4, [r2, #-1]!
   d641a:	e7f7      	b.n	d640c <memmove+0x24>

000d641c <memset>:
   d641c:	4402      	add	r2, r0
   d641e:	4603      	mov	r3, r0
   d6420:	4293      	cmp	r3, r2
   d6422:	d100      	bne.n	d6426 <memset+0xa>
   d6424:	4770      	bx	lr
   d6426:	f803 1b01 	strb.w	r1, [r3], #1
   d642a:	e7f9      	b.n	d6420 <memset+0x4>

000d642c <srand>:
   d642c:	b538      	push	{r3, r4, r5, lr}
   d642e:	4b0d      	ldr	r3, [pc, #52]	; (d6464 <srand+0x38>)
   d6430:	681d      	ldr	r5, [r3, #0]
   d6432:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d6434:	4604      	mov	r4, r0
   d6436:	b97b      	cbnz	r3, d6458 <srand+0x2c>
   d6438:	2018      	movs	r0, #24
   d643a:	f7fe f91f 	bl	d467c <malloc>
   d643e:	4a0a      	ldr	r2, [pc, #40]	; (d6468 <srand+0x3c>)
   d6440:	4b0a      	ldr	r3, [pc, #40]	; (d646c <srand+0x40>)
   d6442:	63a8      	str	r0, [r5, #56]	; 0x38
   d6444:	e9c0 2300 	strd	r2, r3, [r0]
   d6448:	4b09      	ldr	r3, [pc, #36]	; (d6470 <srand+0x44>)
   d644a:	6083      	str	r3, [r0, #8]
   d644c:	230b      	movs	r3, #11
   d644e:	8183      	strh	r3, [r0, #12]
   d6450:	2201      	movs	r2, #1
   d6452:	2300      	movs	r3, #0
   d6454:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d6458:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d645a:	2200      	movs	r2, #0
   d645c:	611c      	str	r4, [r3, #16]
   d645e:	615a      	str	r2, [r3, #20]
   d6460:	bd38      	pop	{r3, r4, r5, pc}
   d6462:	bf00      	nop
   d6464:	2003e4d8 	.word	0x2003e4d8
   d6468:	abcd330e 	.word	0xabcd330e
   d646c:	e66d1234 	.word	0xe66d1234
   d6470:	0005deec 	.word	0x0005deec

000d6474 <strchr>:
   d6474:	b2c9      	uxtb	r1, r1
   d6476:	4603      	mov	r3, r0
   d6478:	f810 2b01 	ldrb.w	r2, [r0], #1
   d647c:	b11a      	cbz	r2, d6486 <strchr+0x12>
   d647e:	428a      	cmp	r2, r1
   d6480:	d1f9      	bne.n	d6476 <strchr+0x2>
   d6482:	4618      	mov	r0, r3
   d6484:	4770      	bx	lr
   d6486:	2900      	cmp	r1, #0
   d6488:	bf18      	it	ne
   d648a:	2300      	movne	r3, #0
   d648c:	e7f9      	b.n	d6482 <strchr+0xe>

000d648e <strchrnul>:
   d648e:	b510      	push	{r4, lr}
   d6490:	4604      	mov	r4, r0
   d6492:	f7ff ffef 	bl	d6474 <strchr>
   d6496:	b918      	cbnz	r0, d64a0 <strchrnul+0x12>
   d6498:	4620      	mov	r0, r4
   d649a:	f000 f814 	bl	d64c6 <strlen>
   d649e:	4420      	add	r0, r4
   d64a0:	bd10      	pop	{r4, pc}

000d64a2 <strcmp>:
   d64a2:	f810 2b01 	ldrb.w	r2, [r0], #1
   d64a6:	f811 3b01 	ldrb.w	r3, [r1], #1
   d64aa:	2a01      	cmp	r2, #1
   d64ac:	bf28      	it	cs
   d64ae:	429a      	cmpcs	r2, r3
   d64b0:	d0f7      	beq.n	d64a2 <strcmp>
   d64b2:	1ad0      	subs	r0, r2, r3
   d64b4:	4770      	bx	lr

000d64b6 <strcpy>:
   d64b6:	4603      	mov	r3, r0
   d64b8:	f811 2b01 	ldrb.w	r2, [r1], #1
   d64bc:	f803 2b01 	strb.w	r2, [r3], #1
   d64c0:	2a00      	cmp	r2, #0
   d64c2:	d1f9      	bne.n	d64b8 <strcpy+0x2>
   d64c4:	4770      	bx	lr

000d64c6 <strlen>:
   d64c6:	4603      	mov	r3, r0
   d64c8:	f813 2b01 	ldrb.w	r2, [r3], #1
   d64cc:	2a00      	cmp	r2, #0
   d64ce:	d1fb      	bne.n	d64c8 <strlen+0x2>
   d64d0:	1a18      	subs	r0, r3, r0
   d64d2:	3801      	subs	r0, #1
   d64d4:	4770      	bx	lr

000d64d6 <strncmp>:
   d64d6:	b510      	push	{r4, lr}
   d64d8:	b16a      	cbz	r2, d64f6 <strncmp+0x20>
   d64da:	3901      	subs	r1, #1
   d64dc:	1884      	adds	r4, r0, r2
   d64de:	f810 3b01 	ldrb.w	r3, [r0], #1
   d64e2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   d64e6:	4293      	cmp	r3, r2
   d64e8:	d103      	bne.n	d64f2 <strncmp+0x1c>
   d64ea:	42a0      	cmp	r0, r4
   d64ec:	d001      	beq.n	d64f2 <strncmp+0x1c>
   d64ee:	2b00      	cmp	r3, #0
   d64f0:	d1f5      	bne.n	d64de <strncmp+0x8>
   d64f2:	1a98      	subs	r0, r3, r2
   d64f4:	bd10      	pop	{r4, pc}
   d64f6:	4610      	mov	r0, r2
   d64f8:	e7fc      	b.n	d64f4 <strncmp+0x1e>

000d64fa <strrchr>:
   d64fa:	b538      	push	{r3, r4, r5, lr}
   d64fc:	4603      	mov	r3, r0
   d64fe:	460c      	mov	r4, r1
   d6500:	b969      	cbnz	r1, d651e <strrchr+0x24>
   d6502:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d6506:	f7ff bfb5 	b.w	d6474 <strchr>
   d650a:	1c43      	adds	r3, r0, #1
   d650c:	4605      	mov	r5, r0
   d650e:	4621      	mov	r1, r4
   d6510:	4618      	mov	r0, r3
   d6512:	f7ff ffaf 	bl	d6474 <strchr>
   d6516:	2800      	cmp	r0, #0
   d6518:	d1f7      	bne.n	d650a <strrchr+0x10>
   d651a:	4628      	mov	r0, r5
   d651c:	bd38      	pop	{r3, r4, r5, pc}
   d651e:	2500      	movs	r5, #0
   d6520:	e7f5      	b.n	d650e <strrchr+0x14>
	...

000d6524 <_strtol_l.isra.0>:
   d6524:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d6528:	4e3a      	ldr	r6, [pc, #232]	; (d6614 <_strtol_l.isra.0+0xf0>)
   d652a:	4686      	mov	lr, r0
   d652c:	468c      	mov	ip, r1
   d652e:	4660      	mov	r0, ip
   d6530:	f81c 4b01 	ldrb.w	r4, [ip], #1
   d6534:	5da5      	ldrb	r5, [r4, r6]
   d6536:	f015 0508 	ands.w	r5, r5, #8
   d653a:	d1f8      	bne.n	d652e <_strtol_l.isra.0+0xa>
   d653c:	2c2d      	cmp	r4, #45	; 0x2d
   d653e:	d133      	bne.n	d65a8 <_strtol_l.isra.0+0x84>
   d6540:	f89c 4000 	ldrb.w	r4, [ip]
   d6544:	f04f 0801 	mov.w	r8, #1
   d6548:	f100 0c02 	add.w	ip, r0, #2
   d654c:	2b00      	cmp	r3, #0
   d654e:	d05c      	beq.n	d660a <_strtol_l.isra.0+0xe6>
   d6550:	2b10      	cmp	r3, #16
   d6552:	d10c      	bne.n	d656e <_strtol_l.isra.0+0x4a>
   d6554:	2c30      	cmp	r4, #48	; 0x30
   d6556:	d10a      	bne.n	d656e <_strtol_l.isra.0+0x4a>
   d6558:	f89c 0000 	ldrb.w	r0, [ip]
   d655c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d6560:	2858      	cmp	r0, #88	; 0x58
   d6562:	d14d      	bne.n	d6600 <_strtol_l.isra.0+0xdc>
   d6564:	f89c 4001 	ldrb.w	r4, [ip, #1]
   d6568:	2310      	movs	r3, #16
   d656a:	f10c 0c02 	add.w	ip, ip, #2
   d656e:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
   d6572:	3f01      	subs	r7, #1
   d6574:	2600      	movs	r6, #0
   d6576:	fbb7 f9f3 	udiv	r9, r7, r3
   d657a:	4630      	mov	r0, r6
   d657c:	fb03 7a19 	mls	sl, r3, r9, r7
   d6580:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
   d6584:	2d09      	cmp	r5, #9
   d6586:	d818      	bhi.n	d65ba <_strtol_l.isra.0+0x96>
   d6588:	462c      	mov	r4, r5
   d658a:	42a3      	cmp	r3, r4
   d658c:	dd24      	ble.n	d65d8 <_strtol_l.isra.0+0xb4>
   d658e:	1c75      	adds	r5, r6, #1
   d6590:	d007      	beq.n	d65a2 <_strtol_l.isra.0+0x7e>
   d6592:	4581      	cmp	r9, r0
   d6594:	d31d      	bcc.n	d65d2 <_strtol_l.isra.0+0xae>
   d6596:	d101      	bne.n	d659c <_strtol_l.isra.0+0x78>
   d6598:	45a2      	cmp	sl, r4
   d659a:	db1a      	blt.n	d65d2 <_strtol_l.isra.0+0xae>
   d659c:	fb00 4003 	mla	r0, r0, r3, r4
   d65a0:	2601      	movs	r6, #1
   d65a2:	f81c 4b01 	ldrb.w	r4, [ip], #1
   d65a6:	e7eb      	b.n	d6580 <_strtol_l.isra.0+0x5c>
   d65a8:	2c2b      	cmp	r4, #43	; 0x2b
   d65aa:	bf08      	it	eq
   d65ac:	f89c 4000 	ldrbeq.w	r4, [ip]
   d65b0:	46a8      	mov	r8, r5
   d65b2:	bf08      	it	eq
   d65b4:	f100 0c02 	addeq.w	ip, r0, #2
   d65b8:	e7c8      	b.n	d654c <_strtol_l.isra.0+0x28>
   d65ba:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
   d65be:	2d19      	cmp	r5, #25
   d65c0:	d801      	bhi.n	d65c6 <_strtol_l.isra.0+0xa2>
   d65c2:	3c37      	subs	r4, #55	; 0x37
   d65c4:	e7e1      	b.n	d658a <_strtol_l.isra.0+0x66>
   d65c6:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
   d65ca:	2d19      	cmp	r5, #25
   d65cc:	d804      	bhi.n	d65d8 <_strtol_l.isra.0+0xb4>
   d65ce:	3c57      	subs	r4, #87	; 0x57
   d65d0:	e7db      	b.n	d658a <_strtol_l.isra.0+0x66>
   d65d2:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   d65d6:	e7e4      	b.n	d65a2 <_strtol_l.isra.0+0x7e>
   d65d8:	1c73      	adds	r3, r6, #1
   d65da:	d106      	bne.n	d65ea <_strtol_l.isra.0+0xc6>
   d65dc:	2322      	movs	r3, #34	; 0x22
   d65de:	f8ce 3000 	str.w	r3, [lr]
   d65e2:	4638      	mov	r0, r7
   d65e4:	b942      	cbnz	r2, d65f8 <_strtol_l.isra.0+0xd4>
   d65e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d65ea:	f1b8 0f00 	cmp.w	r8, #0
   d65ee:	d000      	beq.n	d65f2 <_strtol_l.isra.0+0xce>
   d65f0:	4240      	negs	r0, r0
   d65f2:	2a00      	cmp	r2, #0
   d65f4:	d0f7      	beq.n	d65e6 <_strtol_l.isra.0+0xc2>
   d65f6:	b10e      	cbz	r6, d65fc <_strtol_l.isra.0+0xd8>
   d65f8:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
   d65fc:	6011      	str	r1, [r2, #0]
   d65fe:	e7f2      	b.n	d65e6 <_strtol_l.isra.0+0xc2>
   d6600:	2430      	movs	r4, #48	; 0x30
   d6602:	2b00      	cmp	r3, #0
   d6604:	d1b3      	bne.n	d656e <_strtol_l.isra.0+0x4a>
   d6606:	2308      	movs	r3, #8
   d6608:	e7b1      	b.n	d656e <_strtol_l.isra.0+0x4a>
   d660a:	2c30      	cmp	r4, #48	; 0x30
   d660c:	d0a4      	beq.n	d6558 <_strtol_l.isra.0+0x34>
   d660e:	230a      	movs	r3, #10
   d6610:	e7ad      	b.n	d656e <_strtol_l.isra.0+0x4a>
   d6612:	bf00      	nop
   d6614:	000d698e 	.word	0x000d698e

000d6618 <strtol>:
   d6618:	4613      	mov	r3, r2
   d661a:	460a      	mov	r2, r1
   d661c:	4601      	mov	r1, r0
   d661e:	4802      	ldr	r0, [pc, #8]	; (d6628 <strtol+0x10>)
   d6620:	6800      	ldr	r0, [r0, #0]
   d6622:	f7ff bf7f 	b.w	d6524 <_strtol_l.isra.0>
   d6626:	bf00      	nop
   d6628:	2003e4d8 	.word	0x2003e4d8

000d662c <__register_exitproc>:
   d662c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d6630:	f8df 80b8 	ldr.w	r8, [pc, #184]	; d66ec <__register_exitproc+0xc0>
   d6634:	4606      	mov	r6, r0
   d6636:	f8d8 0000 	ldr.w	r0, [r8]
   d663a:	461f      	mov	r7, r3
   d663c:	460d      	mov	r5, r1
   d663e:	4691      	mov	r9, r2
   d6640:	f000 f856 	bl	d66f0 <__retarget_lock_acquire_recursive>
   d6644:	4b25      	ldr	r3, [pc, #148]	; (d66dc <__register_exitproc+0xb0>)
   d6646:	681c      	ldr	r4, [r3, #0]
   d6648:	b934      	cbnz	r4, d6658 <__register_exitproc+0x2c>
   d664a:	4c25      	ldr	r4, [pc, #148]	; (d66e0 <__register_exitproc+0xb4>)
   d664c:	601c      	str	r4, [r3, #0]
   d664e:	4b25      	ldr	r3, [pc, #148]	; (d66e4 <__register_exitproc+0xb8>)
   d6650:	b113      	cbz	r3, d6658 <__register_exitproc+0x2c>
   d6652:	681b      	ldr	r3, [r3, #0]
   d6654:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   d6658:	6863      	ldr	r3, [r4, #4]
   d665a:	2b1f      	cmp	r3, #31
   d665c:	dd07      	ble.n	d666e <__register_exitproc+0x42>
   d665e:	f8d8 0000 	ldr.w	r0, [r8]
   d6662:	f000 f847 	bl	d66f4 <__retarget_lock_release_recursive>
   d6666:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d666a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d666e:	b34e      	cbz	r6, d66c4 <__register_exitproc+0x98>
   d6670:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   d6674:	b988      	cbnz	r0, d669a <__register_exitproc+0x6e>
   d6676:	4b1c      	ldr	r3, [pc, #112]	; (d66e8 <__register_exitproc+0xbc>)
   d6678:	b923      	cbnz	r3, d6684 <__register_exitproc+0x58>
   d667a:	f8d8 0000 	ldr.w	r0, [r8]
   d667e:	f000 f838 	bl	d66f2 <__retarget_lock_release>
   d6682:	e7f0      	b.n	d6666 <__register_exitproc+0x3a>
   d6684:	f44f 7084 	mov.w	r0, #264	; 0x108
   d6688:	f7fd fff8 	bl	d467c <malloc>
   d668c:	2800      	cmp	r0, #0
   d668e:	d0f4      	beq.n	d667a <__register_exitproc+0x4e>
   d6690:	2300      	movs	r3, #0
   d6692:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   d6696:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   d669a:	6863      	ldr	r3, [r4, #4]
   d669c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   d66a0:	2201      	movs	r2, #1
   d66a2:	409a      	lsls	r2, r3
   d66a4:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   d66a8:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   d66ac:	4313      	orrs	r3, r2
   d66ae:	2e02      	cmp	r6, #2
   d66b0:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   d66b4:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   d66b8:	bf02      	ittt	eq
   d66ba:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   d66be:	431a      	orreq	r2, r3
   d66c0:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
   d66c4:	6863      	ldr	r3, [r4, #4]
   d66c6:	f8d8 0000 	ldr.w	r0, [r8]
   d66ca:	1c5a      	adds	r2, r3, #1
   d66cc:	3302      	adds	r3, #2
   d66ce:	6062      	str	r2, [r4, #4]
   d66d0:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   d66d4:	f000 f80e 	bl	d66f4 <__retarget_lock_release_recursive>
   d66d8:	2000      	movs	r0, #0
   d66da:	e7c6      	b.n	d666a <__register_exitproc+0x3e>
   d66dc:	2003e7e0 	.word	0x2003e7e0
   d66e0:	2003e754 	.word	0x2003e754
   d66e4:	00000000 	.word	0x00000000
   d66e8:	000d467d 	.word	0x000d467d
   d66ec:	2003e53c 	.word	0x2003e53c

000d66f0 <__retarget_lock_acquire_recursive>:
   d66f0:	4770      	bx	lr

000d66f2 <__retarget_lock_release>:
   d66f2:	4770      	bx	lr

000d66f4 <__retarget_lock_release_recursive>:
   d66f4:	4770      	bx	lr

000d66f6 <link_code_end>:
	...

000d66f8 <dynalib_user>:
   d66f8:	401d 000d 4059 000d 4081 000d 4085 000d     .@..Y@...@...@..
   d6708:	0000 0000 6553 6972 6c61 5300 7265 6169     ....Serial.Seria
   d6718:	316c 7b00 6422 7369 6174 636e 2265 253a     l1.{"distance":%
   d6728:	7d64 0000                                   d}..

000d672c <_ZTVN5spark10LogHandlerE>:
	...
   d673c:	409d 000d 40c1 000d                         .@...@..

000d6744 <_ZTVN5spark16SerialLogHandlerE>:
	...
   d674c:	40cd 000d 4101 000d 5951 000d 40c3 000d     .@...A..QY...@..

000d675c <_ZTVN5spark13CellularClassE>:
	...
   d6764:	4797 000d 478d 000d 4783 000d 4739 000d     .G...G...G..9G..
   d6774:	4777 000d 476b 000d 5ca9 000d 5cb1 000d     wG..kG...\...\..
   d6784:	475f 000d 4757 000d 474d 000d 4743 000d     _G..WG..MG..CG..
   d6794:	5ce1 000d                                   .\..

000d6798 <_ZTVN5spark13EthernetClassE>:
	...
   d67a0:	482f 000d 4825 000d 481b 000d 4811 000d     /H..%H...H...H..
   d67b0:	4805 000d 47f9 000d 5ca9 000d 5cb1 000d     .H...G...\...\..
   d67c0:	47ed 000d 47e5 000d 47db 000d 47d1 000d     .G...G...G...G..
   d67d0:	5ce1 000d                                   .\..

000d67d4 <_ZTV9IPAddress>:
	...
   d67dc:	485d 000d 484d 000d 484f 000d 6425 2500     ]H..MH..OH..%d.%
   d67ec:	0075 2575 3430 0078 6162 6475 4a00 4f53     u.u%04x.baud.JSO
   d67fc:	534e 7274 6165 4c6d 676f 6148 646e 656c     NStreamLogHandle
   d680c:	0072 7061 0070 3025 3031 2075 5d00 0020     r.app.%010u .] .
   d681c:	202c 2800 3a29 0020 5b20 6300 646f 2065     , .(): . [.code 
   d682c:	203d 2500 0069 6564 6174 6c69 2073 203d     = .%i.details = 
   d683c:	0d00 000a 006d 0063 0066 6e6c 6600 006e     ....m.c.f.ln.fn.
   d684c:	0074 6f63 6564 6400 7465 6961 006c 0000     t.code.detail...

000d685c <_ZTVN5spark16JSONStreamWriterE>:
	...
   d6864:	4d19 000d 4d3f 000d 4cfd 000d 495d 000d     .M..?M...L..]I..

000d6874 <_ZTVN5spark16StreamLogHandlerE>:
	...
   d687c:	516d 000d 5185 000d 5951 000d 40c3 000d     mQ...Q..QY...@..

000d688c <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   d6894:	5199 000d 51ad 000d 5af5 000d 4d05 000d     .Q...Q...Z...M..

000d68a4 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   d68ac:	4d17 000d 4d4d 000d 588d 000d 4d07 000d     .M..MM...X...M..

000d68bc <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   d68c4:	4d15 000d 4d5b 000d 50b5 000d 4d79 000d     .M..[M...P..yM..

000d68d4 <_ZTVN5spark12NetworkClassE>:
	...
   d68dc:	5c69 000d 5c73 000d 5c7d 000d 5c87 000d     i\..s\..}\...\..
   d68ec:	5c91 000d 5c9d 000d 5ca9 000d 5cb1 000d     .\...\...\...\..
   d68fc:	5cb9 000d 5cc5 000d 5ccd 000d 5cd7 000d     .\...\...\...\..
   d690c:	5ce1 000d 5925 252d 2d6d 6425 2554 3a48     .\..%Y-%m-%dT%H:
   d691c:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000d692c <_ZTV11USARTSerial>:
	...
   d6934:	6035 000d 60a3 000d 607b 000d 5dc9 000d     5`...`..{`...]..
   d6944:	604b 000d 6067 000d 6059 000d 6075 000d     K`..g`..Y`..u`..
   d6954:	6037 000d 603d 000d                         7`..=`..

000d695c <_ZTV9USBSerial>:
	...
   d6964:	6177 000d 61df 000d 61b5 000d 5dc9 000d     wa...a...a...]..
   d6974:	61a7 000d 6179 000d 6189 000d 61d9 000d     .a..ya...a...a..
   d6984:	6199 000d 6171 000d                         .a..qa..

000d698c <_ZSt7nothrow>:
	...

000d698d <_ctype_>:
   d698d:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   d699d:	2020 2020 2020 2020 2020 2020 2020 2020                     
   d69ad:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   d69bd:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   d69cd:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   d69dd:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   d69ed:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   d69fd:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   d6a0d:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000d6a8e <link_const_variable_data_end>:
	...

000d6a90 <link_constructors_location>:
   d6a90:	000d42e9 	.word	0x000d42e9
   d6a94:	000d4729 	.word	0x000d4729
   d6a98:	000d47a1 	.word	0x000d47a1
   d6a9c:	000d4839 	.word	0x000d4839
   d6aa0:	000d5941 	.word	0x000d5941
   d6aa4:	000d5db5 	.word	0x000d5db5
   d6aa8:	000d5ed5 	.word	0x000d5ed5
   d6aac:	000d5ffd 	.word	0x000d5ffd
   d6ab0:	000d6021 	.word	0x000d6021

000d6ab4 <link_constructors_end>:
	...
