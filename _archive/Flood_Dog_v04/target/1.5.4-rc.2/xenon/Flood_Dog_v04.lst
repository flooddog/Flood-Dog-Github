
/Users/philipchatterton/IoCP/Particle/Flood_Dog/Flood_Dog_v04/target/1.5.4-rc.2/xenon/Flood_Dog_v04.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000044a4  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d84c0  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000080  2003e388  000d84c4  0001e388  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000003e8  2003e408  2003e408  0002e408  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d8544  000d8544  00028544  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d856c  000d856c  0002856c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000e9429  00000000  00000000  00028570  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000117e3  00000000  00000000  00111999  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00020f33  00000000  00000000  0012317c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000027a8  00000000  00000000  001440af  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00004be8  00000000  00000000  00146857  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000346d8  00000000  00000000  0014b43f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00028be6  00000000  00000000  0017fb17  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00106e2a  00000000  00000000  001a86fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000d8d8  00000000  00000000  002af528  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f003 fdab 	bl	d7b88 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f003 fdcb 	bl	d7bd4 <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e388 	.word	0x2003e388
   d4048:	000d84c4 	.word	0x000d84c4
   d404c:	2003e408 	.word	0x2003e408
   d4050:	2003e408 	.word	0x2003e408
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f003 f991 	bl	d7380 <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d84b4 	.word	0x000d84b4
   d4080:	000d8480 	.word	0x000d8480

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 bb48 	b.w	d4718 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f8c3 	bl	d4214 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f003 b937 	b.w	d7304 <_post_loop>

000d4096 <_Znwj>:
   d4096:	f000 beb1 	b.w	d4dfc <malloc>

000d409a <_ZdlPv>:
   d409a:	f000 beb7 	b.w	d4e0c <free>

000d409e <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409e:	f000 beb5 	b.w	d4e0c <free>
	...

000d40a4 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40a6:	4a03      	ldr	r2, [pc, #12]	; (d40b4 <__cxa_pure_virtual+0x10>)
   d40a8:	2100      	movs	r1, #0
   d40aa:	200c      	movs	r0, #12
   d40ac:	f000 fdda 	bl	d4c64 <panic_>
   d40b0:	e7fe      	b.n	d40b0 <__cxa_pure_virtual+0xc>
   d40b2:	bf00      	nop
   d40b4:	000d4a15 	.word	0x000d4a15

000d40b8 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40b8:	7800      	ldrb	r0, [r0, #0]
   d40ba:	fab0 f080 	clz	r0, r0
   d40be:	0940      	lsrs	r0, r0, #5
   d40c0:	4770      	bx	lr

000d40c2 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40c2:	2301      	movs	r3, #1
   d40c4:	7003      	strb	r3, [r0, #0]
   d40c6:	4770      	bx	lr

000d40c8 <_ZN5spark10LogHandler5writeEPKcj>:
    if (level >= filter_.level(category)) {
        write(data, size);
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
   d40c8:	4770      	bx	lr

000d40ca <_ZN5spark16StreamLogHandler5writeEPKcj>:
inline Print* spark::StreamLogHandler::stream() const {
    return stream_;
}

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
   d40ca:	6a00      	ldr	r0, [r0, #32]
   d40cc:	6803      	ldr	r3, [r0, #0]
   d40ce:	68db      	ldr	r3, [r3, #12]
   d40d0:	4718      	bx	r3
	...

000d40d4 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   d40d4:	4b0a      	ldr	r3, [pc, #40]	; (d4100 <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
   d40d6:	b510      	push	{r4, lr}
   d40d8:	4604      	mov	r4, r0
   d40da:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   d40dc:	f001 fe00 	bl	d5ce0 <_ZN5spark10LogManager8instanceEv>
   d40e0:	4621      	mov	r1, r4
   d40e2:	f001 ffed 	bl	d60c0 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
   d40e6:	f003 f8c1 	bl	d726c <_Z16_fetch_usbserialv>
   d40ea:	f003 f8b3 	bl	d7254 <_ZN9USBSerial3endEv>
    */
    LogHandler(LogLevel level, LogCategoryFilters filters);
    /*!
        \brief Destructor.
    */
    virtual ~LogHandler() = default;
   d40ee:	4620      	mov	r0, r4
   d40f0:	4b04      	ldr	r3, [pc, #16]	; (d4104 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
   d40f2:	f840 3b04 	str.w	r3, [r0], #4
   d40f6:	f001 fee9 	bl	d5ecc <_ZN5spark6detail9LogFilterD1Ev>
    }
   d40fa:	4620      	mov	r0, r4
   d40fc:	bd10      	pop	{r4, pc}
   d40fe:	bf00      	nop
   d4100:	000d7e74 	.word	0x000d7e74
   d4104:	000d7e5c 	.word	0x000d7e5c

000d4108 <_ZN5spark16SerialLogHandlerD0Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   d4108:	b510      	push	{r4, lr}
   d410a:	4604      	mov	r4, r0
        LogManager::instance()->removeHandler(this);
        Serial.end();
    }
   d410c:	f7ff ffe2 	bl	d40d4 <_ZN5spark16SerialLogHandlerD1Ev>
   d4110:	4620      	mov	r0, r4
   d4112:	2124      	movs	r1, #36	; 0x24
   d4114:	f003 fa0b 	bl	d752e <_ZdlPvj>
   d4118:	4620      	mov	r0, r4
   d411a:	bd10      	pop	{r4, pc}

000d411c <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   d411c:	b40e      	push	{r1, r2, r3}
   d411e:	b500      	push	{lr}
   d4120:	b08c      	sub	sp, #48	; 0x30
   d4122:	aa0d      	add	r2, sp, #52	; 0x34
    va_end(args);
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
   d4124:	2320      	movs	r3, #32
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   d4126:	f852 1b04 	ldr.w	r1, [r2], #4
    va_list args;
    va_start(args, fmt);
   d412a:	9203      	str	r2, [sp, #12]

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d412c:	e88d 0006 	stmia.w	sp, {r1, r2}
    va_end(args);
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
   d4130:	9304      	str	r3, [sp, #16]
    attr.flags = 0;
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d4132:	6801      	ldr	r1, [r0, #0]
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   d4134:	2300      	movs	r3, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d4136:	aa04      	add	r2, sp, #16
   d4138:	201e      	movs	r0, #30
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   d413a:	9305      	str	r3, [sp, #20]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d413c:	f000 fd9a 	bl	d4c74 <log_message_v>
inline void spark::Logger::info(const char *fmt, ...) const {
    va_list args;
    va_start(args, fmt);
    log(LOG_LEVEL_INFO, fmt, args);
    va_end(args);
}
   d4140:	b00c      	add	sp, #48	; 0x30
   d4142:	f85d eb04 	ldr.w	lr, [sp], #4
   d4146:	b003      	add	sp, #12
   d4148:	4770      	bx	lr
	...

000d414c <_Z20meterParticlePublishv>:
		Particle.publish(tempEvent, tempData, 60, PRIVATE);
	}
	return true;
}

bool meterParticlePublish(void) {                                       // Enforces Particle's limit on 1 publish a second
   d414c:	b510      	push	{r4, lr}
  static unsigned long lastPublish=0;                                   // Initialize and store value here
  if(millis() - lastPublish >= 1000) {                                  // Particle rate limits at 1 publish per second
   d414e:	4c07      	ldr	r4, [pc, #28]	; (d416c <_Z20meterParticlePublishv+0x20>)

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4150:	f000 fc68 	bl	d4a24 <HAL_Timer_Get_Milli_Seconds>
   d4154:	6823      	ldr	r3, [r4, #0]
   d4156:	1ac0      	subs	r0, r0, r3
   d4158:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   d415c:	d304      	bcc.n	d4168 <_Z20meterParticlePublishv+0x1c>
   d415e:	f000 fc61 	bl	d4a24 <HAL_Timer_Get_Milli_Seconds>
    lastPublish = millis();
   d4162:	6020      	str	r0, [r4, #0]
   d4164:	2001      	movs	r0, #1
   d4166:	bd10      	pop	{r4, pc}
    return 1;
  }
  else return 0;
   d4168:	2000      	movs	r0, #0
}
   d416a:	bd10      	pop	{r4, pc}
   d416c:	2003e41c 	.word	0x2003e41c

000d4170 <_Z7logData6StringS_bb.part.10>:
			}
			break;
	}
}

bool logData(String tempEvent, String tempData, bool tempLogSerial, bool tempLogParticle){
   d4170:	b530      	push	{r4, r5, lr}
   d4172:	4604      	mov	r4, r0
   d4174:	b085      	sub	sp, #20
   d4176:	460d      	mov	r5, r1
	if (tempLogSerial){
		Log.info(tempEvent + ": " + tempData);
	}
	if (tempLogParticle){
		waitUntil(meterParticlePublish);
   d4178:	f7ff ffe8 	bl	d414c <_Z20meterParticlePublishv>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d417c:	b1f0      	cbz	r0, d41bc <_Z7logData6StringS_bb.part.10+0x4c>
   d417e:	f7ff ffe5 	bl	d414c <_Z20meterParticlePublishv>
   d4182:	4b11      	ldr	r3, [pc, #68]	; (d41c8 <_Z7logData6StringS_bb.part.10+0x58>)
   d4184:	6821      	ldr	r1, [r4, #0]
   d4186:	781b      	ldrb	r3, [r3, #0]
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d4188:	f88d 3000 	strb.w	r3, [sp]
   d418c:	682a      	ldr	r2, [r5, #0]
   d418e:	233c      	movs	r3, #60	; 0x3c
   d4190:	a802      	add	r0, sp, #8
   d4192:	f001 f831 	bl	d51f8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d4196:	9c03      	ldr	r4, [sp, #12]
   d4198:	b19c      	cbz	r4, d41c2 <_Z7logData6StringS_bb.part.10+0x52>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d419a:	6863      	ldr	r3, [r4, #4]
   d419c:	3b01      	subs	r3, #1
   d419e:	6063      	str	r3, [r4, #4]
   d41a0:	b97b      	cbnz	r3, d41c2 <_Z7logData6StringS_bb.part.10+0x52>
        {
          _M_dispose();
   d41a2:	6823      	ldr	r3, [r4, #0]
   d41a4:	4620      	mov	r0, r4
   d41a6:	689b      	ldr	r3, [r3, #8]
   d41a8:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d41aa:	68a3      	ldr	r3, [r4, #8]
   d41ac:	3b01      	subs	r3, #1
   d41ae:	60a3      	str	r3, [r4, #8]
   d41b0:	b93b      	cbnz	r3, d41c2 <_Z7logData6StringS_bb.part.10+0x52>
            _M_destroy();
   d41b2:	6823      	ldr	r3, [r4, #0]
   d41b4:	4620      	mov	r0, r4
   d41b6:	68db      	ldr	r3, [r3, #12]
   d41b8:	4798      	blx	r3
   d41ba:	e002      	b.n	d41c2 <_Z7logData6StringS_bb.part.10+0x52>
            spark_process();
   d41bc:	f000 fda6 	bl	d4d0c <spark_process>
   d41c0:	e7da      	b.n	d4178 <_Z7logData6StringS_bb.part.10+0x8>
		Particle.publish(tempEvent, tempData, 60, PRIVATE);
	}
	return true;
}
   d41c2:	2000      	movs	r0, #0
   d41c4:	b005      	add	sp, #20
   d41c6:	bd30      	pop	{r4, r5, pc}
   d41c8:	2003e43c 	.word	0x2003e43c

000d41cc <_Z7logData6StringS_bb>:
			}
			break;
	}
}

bool logData(String tempEvent, String tempData, bool tempLogSerial, bool tempLogParticle){
   d41cc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d41ce:	4604      	mov	r4, r0
   d41d0:	460d      	mov	r5, r1
   d41d2:	461e      	mov	r6, r3
	if (tempLogSerial){
   d41d4:	b18a      	cbz	r2, d41fa <_Z7logData6StringS_bb+0x2e>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d41d6:	4601      	mov	r1, r0
   d41d8:	4668      	mov	r0, sp
   d41da:	f002 fe8d 	bl	d6ef8 <_ZN6StringC1ERKS_>
		Log.info(tempEvent + ": " + tempData);
   d41de:	490b      	ldr	r1, [pc, #44]	; (d420c <_Z7logData6StringS_bb+0x40>)
   d41e0:	4668      	mov	r0, sp
   d41e2:	f002 fec8 	bl	d6f76 <_ZplRK15StringSumHelperPKc>
   d41e6:	4629      	mov	r1, r5
   d41e8:	f002 feb9 	bl	d6f5e <_ZplRK15StringSumHelperRK6String>
   d41ec:	6801      	ldr	r1, [r0, #0]
   d41ee:	4808      	ldr	r0, [pc, #32]	; (d4210 <_Z7logData6StringS_bb+0x44>)
   d41f0:	f7ff ff94 	bl	d411c <_ZNK5spark6Logger4infoEPKcz>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d41f4:	4668      	mov	r0, sp
   d41f6:	f002 fe16 	bl	d6e26 <_ZN6StringD1Ev>
	}
	if (tempLogParticle){
   d41fa:	b11e      	cbz	r6, d4204 <_Z7logData6StringS_bb+0x38>
   d41fc:	4629      	mov	r1, r5
   d41fe:	4620      	mov	r0, r4
   d4200:	f7ff ffb6 	bl	d4170 <_Z7logData6StringS_bb.part.10>
		waitUntil(meterParticlePublish);
		Particle.publish(tempEvent, tempData, 60, PRIVATE);
	}
	return true;
}
   d4204:	2001      	movs	r0, #1
   d4206:	b004      	add	sp, #16
   d4208:	bd70      	pop	{r4, r5, r6, pc}
   d420a:	bf00      	nop
   d420c:	000d8186 	.word	0x000d8186
   d4210:	2003e4e4 	.word	0x2003e4e4

000d4214 <loop>:
	state = PARTICLE_CONNECT_WAIT_STATE;

	logData("SETUP", "SETUP COMPLETE", true, false);
}

void loop(){
   d4214:	b5f0      	push	{r4, r5, r6, r7, lr}
	switch(state){
   d4216:	4c9d      	ldr	r4, [pc, #628]	; (d448c <loop+0x278>)
   d4218:	7823      	ldrb	r3, [r4, #0]
	state = PARTICLE_CONNECT_WAIT_STATE;

	logData("SETUP", "SETUP COMPLETE", true, false);
}

void loop(){
   d421a:	b08b      	sub	sp, #44	; 0x2c
	switch(state){
   d421c:	2b09      	cmp	r3, #9
   d421e:	f200 8244 	bhi.w	d46aa <loop+0x496>
   d4222:	e8df f013 	tbh	[pc, r3, lsl #1]
   d4226:	000a      	.short	0x000a
   d4228:	02420051 	.word	0x02420051
   d422c:	00950242 	.word	0x00950242
   d4230:	00ef00c0 	.word	0x00ef00c0
   d4234:	02000111 	.word	0x02000111
   d4238:	0221      	.short	0x0221
   d423a:	4f95      	ldr	r7, [pc, #596]	; (d4490 <loop+0x27c>)
   d423c:	4e95      	ldr	r6, [pc, #596]	; (d4494 <loop+0x280>)
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d423e:	6878      	ldr	r0, [r7, #4]
   d4240:	2200      	movs	r2, #0
   d4242:	4611      	mov	r1, r2
   d4244:	f000 fda2 	bl	d4d8c <network_ready>
		case MESH_CONNECT_WAIT_STATE:			
			if(Mesh.ready()){
   d4248:	4605      	mov	r5, r0
   d424a:	b1b8      	cbz	r0, d427c <loop+0x68>
				logData("MESH", "MESH CONNECTED", true, false);
   d424c:	4992      	ldr	r1, [pc, #584]	; (d4498 <loop+0x284>)
   d424e:	a802      	add	r0, sp, #8
   d4250:	f002 fe30 	bl	d6eb4 <_ZN6StringC1EPK19__FlashStringHelper>
   d4254:	4991      	ldr	r1, [pc, #580]	; (d449c <loop+0x288>)
   d4256:	a806      	add	r0, sp, #24
   d4258:	f002 fe2c 	bl	d6eb4 <_ZN6StringC1EPK19__FlashStringHelper>
   d425c:	2300      	movs	r3, #0
   d425e:	2201      	movs	r2, #1
   d4260:	a906      	add	r1, sp, #24
   d4262:	a802      	add	r0, sp, #8
   d4264:	f7ff ffb2 	bl	d41cc <_Z7logData6StringS_bb>
   d4268:	a806      	add	r0, sp, #24
   d426a:	f002 fddc 	bl	d6e26 <_ZN6StringD1Ev>
   d426e:	a802      	add	r0, sp, #8
   d4270:	f002 fdd9 	bl	d6e26 <_ZN6StringD1Ev>
   d4274:	f000 fbd6 	bl	d4a24 <HAL_Timer_Get_Milli_Seconds>

				stateTime = millis();
   d4278:	6030      	str	r0, [r6, #0]
   d427a:	e214      	b.n	d46a6 <loop+0x492>
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d427c:	4603      	mov	r3, r0
   d427e:	4602      	mov	r2, r0
   d4280:	4601      	mov	r1, r0
   d4282:	6878      	ldr	r0, [r7, #4]
   d4284:	f000 fd6a 	bl	d4d5c <network_connect>
   d4288:	f000 fbcc 	bl	d4a24 <HAL_Timer_Get_Milli_Seconds>

				state = PARTICLE_CONNECT_WAIT_STATE;
			} else {
				Mesh.connect();

				if(millis() - stateTime > MAX_TIME_TO_WAIT_FOR_CONNECT_MS){
   d428c:	6833      	ldr	r3, [r6, #0]
   d428e:	1ac0      	subs	r0, r0, r3
   d4290:	4b83      	ldr	r3, [pc, #524]	; (d44a0 <loop+0x28c>)
   d4292:	4298      	cmp	r0, r3
   d4294:	f240 8209 	bls.w	d46aa <loop+0x496>
					logData("MESH", "MESH FAILED TO CONNECT", true, false);
   d4298:	497f      	ldr	r1, [pc, #508]	; (d4498 <loop+0x284>)
   d429a:	a802      	add	r0, sp, #8
   d429c:	f002 fe0a 	bl	d6eb4 <_ZN6StringC1EPK19__FlashStringHelper>
   d42a0:	4980      	ldr	r1, [pc, #512]	; (d44a4 <loop+0x290>)
   d42a2:	a806      	add	r0, sp, #24
   d42a4:	f002 fe06 	bl	d6eb4 <_ZN6StringC1EPK19__FlashStringHelper>
   d42a8:	462b      	mov	r3, r5
   d42aa:	2201      	movs	r2, #1
   d42ac:	a906      	add	r1, sp, #24
   d42ae:	a802      	add	r0, sp, #8
   d42b0:	f7ff ff8c 	bl	d41cc <_Z7logData6StringS_bb>
   d42b4:	a806      	add	r0, sp, #24
   d42b6:	f002 fdb6 	bl	d6e26 <_ZN6StringD1Ev>
   d42ba:	a802      	add	r0, sp, #8
   d42bc:	f002 fdb3 	bl	d6e26 <_ZN6StringD1Ev>
   d42c0:	f000 fbb0 	bl	d4a24 <HAL_Timer_Get_Milli_Seconds>
					
					stateTime = millis();
   d42c4:	6030      	str	r0, [r6, #0]
   d42c6:	e1ac      	b.n	d4622 <loop+0x40e>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d42c8:	f000 fd30 	bl	d4d2c <spark_cloud_flag_connected>
   d42cc:	4d71      	ldr	r5, [pc, #452]	; (d4494 <loop+0x280>)
				}
			}
			break;

		case PARTICLE_CONNECT_WAIT_STATE:			
			if (Particle.connected()) {
   d42ce:	4606      	mov	r6, r0
   d42d0:	b1e0      	cbz	r0, d430c <loop+0xf8>
				logData("PARTICLE", "PARTICLE CONNECTED", true, false);
   d42d2:	4975      	ldr	r1, [pc, #468]	; (d44a8 <loop+0x294>)
   d42d4:	a802      	add	r0, sp, #8
   d42d6:	f002 fded 	bl	d6eb4 <_ZN6StringC1EPK19__FlashStringHelper>
   d42da:	4974      	ldr	r1, [pc, #464]	; (d44ac <loop+0x298>)
   d42dc:	a806      	add	r0, sp, #24
   d42de:	f002 fde9 	bl	d6eb4 <_ZN6StringC1EPK19__FlashStringHelper>
   d42e2:	2300      	movs	r3, #0
   d42e4:	2201      	movs	r2, #1
   d42e6:	a906      	add	r1, sp, #24
   d42e8:	a802      	add	r0, sp, #8
   d42ea:	f7ff ff6f 	bl	d41cc <_Z7logData6StringS_bb>
   d42ee:	a806      	add	r0, sp, #24
   d42f0:	f002 fd99 	bl	d6e26 <_ZN6StringD1Ev>
   d42f4:	a802      	add	r0, sp, #8
   d42f6:	f002 fd96 	bl	d6e26 <_ZN6StringD1Ev>

				digitalWrite(BUILT_IN_LED, HIGH);
   d42fa:	2101      	movs	r1, #1
   d42fc:	2007      	movs	r0, #7
   d42fe:	f003 f8a1 	bl	d7444 <digitalWrite>
   d4302:	f000 fb8f 	bl	d4a24 <HAL_Timer_Get_Milli_Seconds>

				stateTime = millis();

				state = SAMPLING_WAIT_STATE;
   d4306:	2304      	movs	r3, #4
			if (Particle.connected()) {
				logData("PARTICLE", "PARTICLE CONNECTED", true, false);

				digitalWrite(BUILT_IN_LED, HIGH);

				stateTime = millis();
   d4308:	6028      	str	r0, [r5, #0]
   d430a:	e1cd      	b.n	d46a8 <loop+0x494>
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
   d430c:	f000 fd06 	bl	d4d1c <spark_cloud_flag_connect>
   d4310:	f000 fb88 	bl	d4a24 <HAL_Timer_Get_Milli_Seconds>

				state = SAMPLING_WAIT_STATE;
			} else {
				Particle.connect();

				if(millis() - stateTime > MAX_TIME_TO_WAIT_FOR_CONNECT_MS){
   d4314:	682b      	ldr	r3, [r5, #0]
   d4316:	1ac0      	subs	r0, r0, r3
   d4318:	4b61      	ldr	r3, [pc, #388]	; (d44a0 <loop+0x28c>)
   d431a:	4298      	cmp	r0, r3
   d431c:	f240 81c5 	bls.w	d46aa <loop+0x496>
					logData("PARTICLE", "PARTICLE FAILED TO CONNECT", true, false);
   d4320:	4961      	ldr	r1, [pc, #388]	; (d44a8 <loop+0x294>)
   d4322:	a802      	add	r0, sp, #8
   d4324:	f002 fdc6 	bl	d6eb4 <_ZN6StringC1EPK19__FlashStringHelper>
   d4328:	4961      	ldr	r1, [pc, #388]	; (d44b0 <loop+0x29c>)
   d432a:	a806      	add	r0, sp, #24
   d432c:	f002 fdc2 	bl	d6eb4 <_ZN6StringC1EPK19__FlashStringHelper>
   d4330:	4633      	mov	r3, r6
   d4332:	2201      	movs	r2, #1
   d4334:	a906      	add	r1, sp, #24
   d4336:	a802      	add	r0, sp, #8
   d4338:	f7ff ff48 	bl	d41cc <_Z7logData6StringS_bb>
   d433c:	a806      	add	r0, sp, #24
   d433e:	f002 fd72 	bl	d6e26 <_ZN6StringD1Ev>
   d4342:	a802      	add	r0, sp, #8
   d4344:	f002 fd6f 	bl	d6e26 <_ZN6StringD1Ev>
   d4348:	f000 fb6c 	bl	d4a24 <HAL_Timer_Get_Milli_Seconds>
					
					stateTime = millis();
   d434c:	6028      	str	r0, [r5, #0]
   d434e:	e168      	b.n	d4622 <loop+0x40e>
				}
			}
			break;

		case SAMPLING_WAIT_STATE:
			if(millis() - stateTime >= MAX_TIME_TO_SAMPLE_WAIT){
   d4350:	4d50      	ldr	r5, [pc, #320]	; (d4494 <loop+0x280>)
   d4352:	f000 fb67 	bl	d4a24 <HAL_Timer_Get_Milli_Seconds>
   d4356:	682b      	ldr	r3, [r5, #0]
   d4358:	1ac0      	subs	r0, r0, r3
   d435a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   d435e:	f0c0 81a4 	bcc.w	d46aa <loop+0x496>
				logData("SAMPLING_WAIT_STATE", "START SAMPLING", true, false);
   d4362:	4954      	ldr	r1, [pc, #336]	; (d44b4 <loop+0x2a0>)
   d4364:	a802      	add	r0, sp, #8
   d4366:	f002 fda5 	bl	d6eb4 <_ZN6StringC1EPK19__FlashStringHelper>
   d436a:	4953      	ldr	r1, [pc, #332]	; (d44b8 <loop+0x2a4>)
   d436c:	a806      	add	r0, sp, #24
   d436e:	f002 fda1 	bl	d6eb4 <_ZN6StringC1EPK19__FlashStringHelper>
   d4372:	2300      	movs	r3, #0
   d4374:	2201      	movs	r2, #1
   d4376:	a906      	add	r1, sp, #24
   d4378:	a802      	add	r0, sp, #8
   d437a:	f7ff ff27 	bl	d41cc <_Z7logData6StringS_bb>
   d437e:	a806      	add	r0, sp, #24
   d4380:	f002 fd51 	bl	d6e26 <_ZN6StringD1Ev>
   d4384:	a802      	add	r0, sp, #8
   d4386:	f002 fd4e 	bl	d6e26 <_ZN6StringD1Ev>

				sampleCounter = 1;
   d438a:	4b4c      	ldr	r3, [pc, #304]	; (d44bc <loop+0x2a8>)
   d438c:	2201      	movs	r2, #1
   d438e:	601a      	str	r2, [r3, #0]
				sampleSum = 0;
   d4390:	4b4b      	ldr	r3, [pc, #300]	; (d44c0 <loop+0x2ac>)
   d4392:	2200      	movs	r2, #0
   d4394:	601a      	str	r2, [r3, #0]
				sampleAverage = 0;
   d4396:	4b4b      	ldr	r3, [pc, #300]	; (d44c4 <loop+0x2b0>)
   d4398:	2200      	movs	r2, #0
   d439a:	601a      	str	r2, [r3, #0]
   d439c:	f000 fb42 	bl	d4a24 <HAL_Timer_Get_Milli_Seconds>

				stateTime = millis();

				state = SAMPLE_STATE;
   d43a0:	2305      	movs	r3, #5

				sampleCounter = 1;
				sampleSum = 0;
				sampleAverage = 0;

				stateTime = millis();
   d43a2:	6028      	str	r0, [r5, #0]
   d43a4:	e180      	b.n	d46a8 <loop+0x494>
				state = SAMPLE_STATE;
			}
			break;

		case SAMPLE_STATE:
			analogValue = analogRead(ANALOG_DETECTOR);
   d43a6:	200e      	movs	r0, #14
   d43a8:	f003 f865 	bl	d7476 <analogRead>

			sampleSum = sampleSum + analogValue;
   d43ac:	4d44      	ldr	r5, [pc, #272]	; (d44c0 <loop+0x2ac>)
				state = SAMPLE_STATE;
			}
			break;

		case SAMPLE_STATE:
			analogValue = analogRead(ANALOG_DETECTOR);
   d43ae:	4a46      	ldr	r2, [pc, #280]	; (d44c8 <loop+0x2b4>)

			sampleSum = sampleSum + analogValue;

			if(sampleCounter++ > sampleTotalCount){
   d43b0:	4e46      	ldr	r6, [pc, #280]	; (d44cc <loop+0x2b8>)
				state = SAMPLE_STATE;
			}
			break;

		case SAMPLE_STATE:
			analogValue = analogRead(ANALOG_DETECTOR);
   d43b2:	6010      	str	r0, [r2, #0]

			sampleSum = sampleSum + analogValue;
   d43b4:	682a      	ldr	r2, [r5, #0]
				state = SAMPLE_STATE;
			}
			break;

		case SAMPLE_STATE:
			analogValue = analogRead(ANALOG_DETECTOR);
   d43b6:	4603      	mov	r3, r0

			sampleSum = sampleSum + analogValue;
   d43b8:	4413      	add	r3, r2

			if(sampleCounter++ > sampleTotalCount){
   d43ba:	4a40      	ldr	r2, [pc, #256]	; (d44bc <loop+0x2a8>)
			break;

		case SAMPLE_STATE:
			analogValue = analogRead(ANALOG_DETECTOR);

			sampleSum = sampleSum + analogValue;
   d43bc:	602b      	str	r3, [r5, #0]

			if(sampleCounter++ > sampleTotalCount){
   d43be:	6813      	ldr	r3, [r2, #0]
   d43c0:	1c59      	adds	r1, r3, #1
   d43c2:	6011      	str	r1, [r2, #0]
   d43c4:	6832      	ldr	r2, [r6, #0]
   d43c6:	4293      	cmp	r3, r2
   d43c8:	f340 816f 	ble.w	d46aa <loop+0x496>
				digitalValue = map(analogValue, minValue, maxValue, 0, 100);
   d43cc:	2364      	movs	r3, #100	; 0x64
   d43ce:	4a40      	ldr	r2, [pc, #256]	; (d44d0 <loop+0x2bc>)
   d43d0:	4940      	ldr	r1, [pc, #256]	; (d44d4 <loop+0x2c0>)
   d43d2:	9300      	str	r3, [sp, #0]
   d43d4:	6812      	ldr	r2, [r2, #0]
   d43d6:	6809      	ldr	r1, [r1, #0]
   d43d8:	2300      	movs	r3, #0
   d43da:	f000 fd3f 	bl	d4e5c <_Z3mapiiiii>
   d43de:	4b3e      	ldr	r3, [pc, #248]	; (d44d8 <loop+0x2c4>)
				
				sampleAverage = sampleSum / sampleTotalCount;
   d43e0:	6832      	ldr	r2, [r6, #0]
			analogValue = analogRead(ANALOG_DETECTOR);

			sampleSum = sampleSum + analogValue;

			if(sampleCounter++ > sampleTotalCount){
				digitalValue = map(analogValue, minValue, maxValue, 0, 100);
   d43e2:	6018      	str	r0, [r3, #0]
				
				sampleAverage = sampleSum / sampleTotalCount;
   d43e4:	682b      	ldr	r3, [r5, #0]
   d43e6:	fb93 f3f2 	sdiv	r3, r3, r2
   d43ea:	ee07 3a90 	vmov	s15, r3
   d43ee:	4b35      	ldr	r3, [pc, #212]	; (d44c4 <loop+0x2b0>)
   d43f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d43f4:	edc3 7a00 	vstr	s15, [r3]
   d43f8:	f000 fb14 	bl	d4a24 <HAL_Timer_Get_Milli_Seconds>

				stateTime = millis();
   d43fc:	4b25      	ldr	r3, [pc, #148]	; (d4494 <loop+0x280>)
   d43fe:	6018      	str	r0, [r3, #0]

				state = PUBLISH_WAIT_STATE;
   d4400:	2306      	movs	r3, #6
   d4402:	e151      	b.n	d46a8 <loop+0x494>
			}
			break;

		case PUBLISH_WAIT_STATE:
			if(millis() - stateTime >= MAX_TIME_TO_WAIT_PUBLISH_MS){
   d4404:	4d23      	ldr	r5, [pc, #140]	; (d4494 <loop+0x280>)
   d4406:	f000 fb0d 	bl	d4a24 <HAL_Timer_Get_Milli_Seconds>
   d440a:	682b      	ldr	r3, [r5, #0]
   d440c:	1ac0      	subs	r0, r0, r3
   d440e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   d4412:	f0c0 814a 	bcc.w	d46aa <loop+0x496>
				logData("PUBLISH_WAIT_STATE", "START PUBLISH_STATE", true, false);
   d4416:	4931      	ldr	r1, [pc, #196]	; (d44dc <loop+0x2c8>)
   d4418:	a802      	add	r0, sp, #8
   d441a:	f002 fd4b 	bl	d6eb4 <_ZN6StringC1EPK19__FlashStringHelper>
   d441e:	4930      	ldr	r1, [pc, #192]	; (d44e0 <loop+0x2cc>)
   d4420:	a806      	add	r0, sp, #24
   d4422:	f002 fd47 	bl	d6eb4 <_ZN6StringC1EPK19__FlashStringHelper>
   d4426:	2300      	movs	r3, #0
   d4428:	2201      	movs	r2, #1
   d442a:	a906      	add	r1, sp, #24
   d442c:	a802      	add	r0, sp, #8
   d442e:	f7ff fecd 	bl	d41cc <_Z7logData6StringS_bb>
   d4432:	a806      	add	r0, sp, #24
   d4434:	f002 fcf7 	bl	d6e26 <_ZN6StringD1Ev>
   d4438:	a802      	add	r0, sp, #8
   d443a:	f002 fcf4 	bl	d6e26 <_ZN6StringD1Ev>
   d443e:	f000 faf1 	bl	d4a24 <HAL_Timer_Get_Milli_Seconds>

				stateTime = millis();

				state = PUBLISH_STATE;
   d4442:	2307      	movs	r3, #7

		case PUBLISH_WAIT_STATE:
			if(millis() - stateTime >= MAX_TIME_TO_WAIT_PUBLISH_MS){
				logData("PUBLISH_WAIT_STATE", "START PUBLISH_STATE", true, false);

				stateTime = millis();
   d4444:	6028      	str	r0, [r5, #0]
   d4446:	e12f      	b.n	d46a8 <loop+0x494>
				state = PUBLISH_STATE;
			}
			break;

		case PUBLISH_STATE:
			Serial.println(analogValue);
   d4448:	f002 ff10 	bl	d726c <_Z16_fetch_usbserialv>
   d444c:	4b1e      	ldr	r3, [pc, #120]	; (d44c8 <loop+0x2b4>)
   d444e:	681d      	ldr	r5, [r3, #0]
        return write(n);
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
   d4450:	2d00      	cmp	r5, #0
   d4452:	4606      	mov	r6, r0
   d4454:	da04      	bge.n	d4460 <loop+0x24c>
            t = print('-');
   d4456:	212d      	movs	r1, #45	; 0x2d
   d4458:	f002 fc4a 	bl	d6cf0 <_ZN5Print5printEc>
            val = -n;
   d445c:	4269      	negs	r1, r5
   d445e:	e000      	b.n	d4462 <loop+0x24e>
        } else {
            val = n;
   d4460:	4629      	mov	r1, r5
        }
        return printNumber(val, base) + t;
   d4462:	220a      	movs	r2, #10
   d4464:	4630      	mov	r0, r6
   d4466:	f002 fc52 	bl	d6d0e <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
   d446a:	4630      	mov	r0, r6
   d446c:	f002 fc43 	bl	d6cf6 <_ZN5Print7printlnEv>
			Serial.println(digitalValue);
   d4470:	f002 fefc 	bl	d726c <_Z16_fetch_usbserialv>
   d4474:	4b18      	ldr	r3, [pc, #96]	; (d44d8 <loop+0x2c4>)
   d4476:	681d      	ldr	r5, [r3, #0]
        return write(n);
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
   d4478:	2d00      	cmp	r5, #0
   d447a:	4607      	mov	r7, r0
   d447c:	461e      	mov	r6, r3
   d447e:	da31      	bge.n	d44e4 <loop+0x2d0>
            t = print('-');
   d4480:	212d      	movs	r1, #45	; 0x2d
   d4482:	f002 fc35 	bl	d6cf0 <_ZN5Print5printEc>
            val = -n;
   d4486:	4269      	negs	r1, r5
   d4488:	e02d      	b.n	d44e6 <loop+0x2d2>
   d448a:	bf00      	nop
   d448c:	2003e390 	.word	0x2003e390
   d4490:	2003e4e8 	.word	0x2003e4e8
   d4494:	2003e4a0 	.word	0x2003e4a0
   d4498:	000d7e84 	.word	0x000d7e84
   d449c:	000d7e89 	.word	0x000d7e89
   d44a0:	000493e0 	.word	0x000493e0
   d44a4:	000d7e98 	.word	0x000d7e98
   d44a8:	000d7eaf 	.word	0x000d7eaf
   d44ac:	000d7eb8 	.word	0x000d7eb8
   d44b0:	000d7ecb 	.word	0x000d7ecb
   d44b4:	000d7ee6 	.word	0x000d7ee6
   d44b8:	000d7efa 	.word	0x000d7efa
   d44bc:	2003e454 	.word	0x2003e454
   d44c0:	2003e428 	.word	0x2003e428
   d44c4:	2003e420 	.word	0x2003e420
   d44c8:	2003e458 	.word	0x2003e458
   d44cc:	2003e388 	.word	0x2003e388
   d44d0:	2003e38c 	.word	0x2003e38c
   d44d4:	2003e450 	.word	0x2003e450
   d44d8:	2003e424 	.word	0x2003e424
   d44dc:	000d7f09 	.word	0x000d7f09
   d44e0:	000d7f1c 	.word	0x000d7f1c
        } else {
            val = n;
   d44e4:	4629      	mov	r1, r5
        }
        return printNumber(val, base) + t;
   d44e6:	220a      	movs	r2, #10
   d44e8:	4638      	mov	r0, r7
   d44ea:	f002 fc10 	bl	d6d0e <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
   d44ee:	4638      	mov	r0, r7
   d44f0:	f002 fc01 	bl	d6cf6 <_ZN5Print7printlnEv>

			//GET https://api.thingspeak.com/update?api_key=GU5AZ7DOWIVLK5BG&field1=0


			// if(analogValue > 0){
				feedName = "Garden-Lady-Bug-04-Cap";
   d44f4:	496e      	ldr	r1, [pc, #440]	; (d46b0 <loop+0x49c>)
   d44f6:	486f      	ldr	r0, [pc, #444]	; (d46b4 <loop+0x4a0>)
   d44f8:	f002 fd09 	bl	d6f0e <_ZN6StringaSEPKc>
				feedID = "6cUonqXsLchfn8t5F6UsUrxF58qE";
   d44fc:	496e      	ldr	r1, [pc, #440]	; (d46b8 <loop+0x4a4>)
   d44fe:	486f      	ldr	r0, [pc, #444]	; (d46bc <loop+0x4a8>)
   d4500:	f002 fd05 	bl	d6f0e <_ZN6StringaSEPKc>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   d4504:	496e      	ldr	r1, [pc, #440]	; (d46c0 <loop+0x4ac>)
   d4506:	a806      	add	r0, sp, #24
   d4508:	f002 fcd4 	bl	d6eb4 <_ZN6StringC1EPK19__FlashStringHelper>
				feedData = "{ \"value\": \"" + String::format("%.2f", sampleAverage) + "\", \"feedID\": \"" + feedID + "\"}";
   d450c:	4b6d      	ldr	r3, [pc, #436]	; (d46c4 <loop+0x4b0>)
   d450e:	6818      	ldr	r0, [r3, #0]
   d4510:	f003 fad8 	bl	d7ac4 <__aeabi_f2d>
   d4514:	4602      	mov	r2, r0
   d4516:	460b      	mov	r3, r1
   d4518:	a802      	add	r0, sp, #8
   d451a:	496b      	ldr	r1, [pc, #428]	; (d46c8 <loop+0x4b4>)
   d451c:	f002 fd3e 	bl	d6f9c <_ZN6String6formatEPKcz>
   d4520:	a902      	add	r1, sp, #8
   d4522:	a806      	add	r0, sp, #24
   d4524:	f002 fd1b 	bl	d6f5e <_ZplRK15StringSumHelperRK6String>
   d4528:	4968      	ldr	r1, [pc, #416]	; (d46cc <loop+0x4b8>)
   d452a:	f002 fd24 	bl	d6f76 <_ZplRK15StringSumHelperPKc>
   d452e:	4963      	ldr	r1, [pc, #396]	; (d46bc <loop+0x4a8>)
   d4530:	f002 fd15 	bl	d6f5e <_ZplRK15StringSumHelperRK6String>
   d4534:	4966      	ldr	r1, [pc, #408]	; (d46d0 <loop+0x4bc>)
   d4536:	f002 fd1e 	bl	d6f76 <_ZplRK15StringSumHelperPKc>
   d453a:	4601      	mov	r1, r0
   d453c:	4865      	ldr	r0, [pc, #404]	; (d46d4 <loop+0x4c0>)
   d453e:	f002 fccc 	bl	d6eda <_ZN6StringaSERKS_>
   d4542:	a802      	add	r0, sp, #8
   d4544:	f002 fc6f 	bl	d6e26 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d4548:	a806      	add	r0, sp, #24
   d454a:	f002 fc6c 	bl	d6e26 <_ZN6StringD1Ev>
				logData(feedName, feedData, true, true);
   d454e:	4959      	ldr	r1, [pc, #356]	; (d46b4 <loop+0x4a0>)
   d4550:	a802      	add	r0, sp, #8
   d4552:	f002 fcd1 	bl	d6ef8 <_ZN6StringC1ERKS_>
   d4556:	495f      	ldr	r1, [pc, #380]	; (d46d4 <loop+0x4c0>)
   d4558:	a806      	add	r0, sp, #24
   d455a:	f002 fccd 	bl	d6ef8 <_ZN6StringC1ERKS_>
   d455e:	2301      	movs	r3, #1
   d4560:	461a      	mov	r2, r3
   d4562:	a906      	add	r1, sp, #24
   d4564:	a802      	add	r0, sp, #8
   d4566:	f7ff fe31 	bl	d41cc <_Z7logData6StringS_bb>
   d456a:	a806      	add	r0, sp, #24
   d456c:	f002 fc5b 	bl	d6e26 <_ZN6StringD1Ev>
   d4570:	a802      	add	r0, sp, #8
   d4572:	f002 fc58 	bl	d6e26 <_ZN6StringD1Ev>

				feedName = "Garden-Lady-Bug-04-Cap-Percentage";
   d4576:	4958      	ldr	r1, [pc, #352]	; (d46d8 <loop+0x4c4>)
   d4578:	484e      	ldr	r0, [pc, #312]	; (d46b4 <loop+0x4a0>)
   d457a:	f002 fcc8 	bl	d6f0e <_ZN6StringaSEPKc>
				feedID = "n8epcPsCFksb9UWYtgXtoe4Kjhkv";
   d457e:	4957      	ldr	r1, [pc, #348]	; (d46dc <loop+0x4c8>)
   d4580:	484e      	ldr	r0, [pc, #312]	; (d46bc <loop+0x4a8>)
   d4582:	f002 fcc4 	bl	d6f0e <_ZN6StringaSEPKc>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   d4586:	494e      	ldr	r1, [pc, #312]	; (d46c0 <loop+0x4ac>)
   d4588:	a806      	add	r0, sp, #24
   d458a:	f002 fc93 	bl	d6eb4 <_ZN6StringC1EPK19__FlashStringHelper>
				feedData = "{ \"value\": \"" + String::format("%d", digitalValue) + "\", \"feedID\": \"" + feedID + "\"}";
   d458e:	6832      	ldr	r2, [r6, #0]
   d4590:	4953      	ldr	r1, [pc, #332]	; (d46e0 <loop+0x4cc>)
   d4592:	a802      	add	r0, sp, #8
   d4594:	f002 fd02 	bl	d6f9c <_ZN6String6formatEPKcz>
   d4598:	a902      	add	r1, sp, #8
   d459a:	a806      	add	r0, sp, #24
   d459c:	f002 fcdf 	bl	d6f5e <_ZplRK15StringSumHelperRK6String>
   d45a0:	494a      	ldr	r1, [pc, #296]	; (d46cc <loop+0x4b8>)
   d45a2:	f002 fce8 	bl	d6f76 <_ZplRK15StringSumHelperPKc>
   d45a6:	4945      	ldr	r1, [pc, #276]	; (d46bc <loop+0x4a8>)
   d45a8:	f002 fcd9 	bl	d6f5e <_ZplRK15StringSumHelperRK6String>
   d45ac:	4948      	ldr	r1, [pc, #288]	; (d46d0 <loop+0x4bc>)
   d45ae:	f002 fce2 	bl	d6f76 <_ZplRK15StringSumHelperPKc>
   d45b2:	4601      	mov	r1, r0
   d45b4:	4847      	ldr	r0, [pc, #284]	; (d46d4 <loop+0x4c0>)
   d45b6:	f002 fc90 	bl	d6eda <_ZN6StringaSERKS_>
   d45ba:	a802      	add	r0, sp, #8
   d45bc:	f002 fc33 	bl	d6e26 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d45c0:	a806      	add	r0, sp, #24
   d45c2:	f002 fc30 	bl	d6e26 <_ZN6StringD1Ev>
				logData(feedName, feedData, false, true);    
   d45c6:	493b      	ldr	r1, [pc, #236]	; (d46b4 <loop+0x4a0>)
   d45c8:	a802      	add	r0, sp, #8
   d45ca:	f002 fc95 	bl	d6ef8 <_ZN6StringC1ERKS_>
   d45ce:	4941      	ldr	r1, [pc, #260]	; (d46d4 <loop+0x4c0>)
   d45d0:	a806      	add	r0, sp, #24
   d45d2:	f002 fc91 	bl	d6ef8 <_ZN6StringC1ERKS_>
   d45d6:	a906      	add	r1, sp, #24
   d45d8:	a802      	add	r0, sp, #8
   d45da:	f7ff fdc9 	bl	d4170 <_Z7logData6StringS_bb.part.10>
   d45de:	a806      	add	r0, sp, #24
   d45e0:	f002 fc21 	bl	d6e26 <_ZN6StringD1Ev>
   d45e4:	a802      	add	r0, sp, #8
   d45e6:	f002 fc1e 	bl	d6e26 <_ZN6StringD1Ev>
			// }

			logData("PUBLISH_STATE", "START SLEEP_WAIT_STATE", true, false);
   d45ea:	493e      	ldr	r1, [pc, #248]	; (d46e4 <loop+0x4d0>)
   d45ec:	a802      	add	r0, sp, #8
   d45ee:	f002 fc61 	bl	d6eb4 <_ZN6StringC1EPK19__FlashStringHelper>
   d45f2:	493d      	ldr	r1, [pc, #244]	; (d46e8 <loop+0x4d4>)
   d45f4:	a806      	add	r0, sp, #24
   d45f6:	f002 fc5d 	bl	d6eb4 <_ZN6StringC1EPK19__FlashStringHelper>
   d45fa:	2300      	movs	r3, #0
   d45fc:	2201      	movs	r2, #1
   d45fe:	a906      	add	r1, sp, #24
   d4600:	a802      	add	r0, sp, #8
   d4602:	f7ff fde3 	bl	d41cc <_Z7logData6StringS_bb>
   d4606:	a806      	add	r0, sp, #24
   d4608:	f002 fc0d 	bl	d6e26 <_ZN6StringD1Ev>
   d460c:	a802      	add	r0, sp, #8
   d460e:	f002 fc0a 	bl	d6e26 <_ZN6StringD1Ev>

			digitalWrite(BUILT_IN_LED, LOW);
   d4612:	2100      	movs	r1, #0
   d4614:	2007      	movs	r0, #7
   d4616:	f002 ff15 	bl	d7444 <digitalWrite>
   d461a:	f000 fa03 	bl	d4a24 <HAL_Timer_Get_Milli_Seconds>
			
			stateTime = millis();
   d461e:	4b33      	ldr	r3, [pc, #204]	; (d46ec <loop+0x4d8>)
   d4620:	6018      	str	r0, [r3, #0]

			state = SLEEP_WAIT_STATE;
   d4622:	2308      	movs	r3, #8
   d4624:	e040      	b.n	d46a8 <loop+0x494>
			break;

		case SLEEP_WAIT_STATE:
			if(millis() - stateTime >= TIME_AFTER_PUBLISH_MS){
   d4626:	4d31      	ldr	r5, [pc, #196]	; (d46ec <loop+0x4d8>)
   d4628:	f000 f9fc 	bl	d4a24 <HAL_Timer_Get_Milli_Seconds>
   d462c:	682b      	ldr	r3, [r5, #0]
   d462e:	1ac0      	subs	r0, r0, r3
   d4630:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   d4634:	d339      	bcc.n	d46aa <loop+0x496>
				logData("SLEEP_WAIT_STATE", "GOING TO SLEEP", true, false);
   d4636:	492e      	ldr	r1, [pc, #184]	; (d46f0 <loop+0x4dc>)
   d4638:	a802      	add	r0, sp, #8
   d463a:	f002 fc3b 	bl	d6eb4 <_ZN6StringC1EPK19__FlashStringHelper>
   d463e:	492d      	ldr	r1, [pc, #180]	; (d46f4 <loop+0x4e0>)
   d4640:	a806      	add	r0, sp, #24
   d4642:	f002 fc37 	bl	d6eb4 <_ZN6StringC1EPK19__FlashStringHelper>
   d4646:	2300      	movs	r3, #0
   d4648:	2201      	movs	r2, #1
   d464a:	a906      	add	r1, sp, #24
   d464c:	a802      	add	r0, sp, #8
   d464e:	f7ff fdbd 	bl	d41cc <_Z7logData6StringS_bb>
   d4652:	a806      	add	r0, sp, #24
   d4654:	f002 fbe7 	bl	d6e26 <_ZN6StringD1Ev>
   d4658:	a802      	add	r0, sp, #8
   d465a:	f002 fbe4 	bl	d6e26 <_ZN6StringD1Ev>
   d465e:	f000 f9e1 	bl	d4a24 <HAL_Timer_Get_Milli_Seconds>

				stateTime = millis();

				state = SLEEP_STATE;
   d4662:	2309      	movs	r3, #9

		case SLEEP_WAIT_STATE:
			if(millis() - stateTime >= TIME_AFTER_PUBLISH_MS){
				logData("SLEEP_WAIT_STATE", "GOING TO SLEEP", true, false);

				stateTime = millis();
   d4664:	6028      	str	r0, [r5, #0]
   d4666:	e01f      	b.n	d46a8 <loop+0x494>
				state = SLEEP_STATE;
			}
			break;

		case SLEEP_STATE:
			if(millis() - stateTime >= TIME_TO_SLEEP_MS){
   d4668:	4d20      	ldr	r5, [pc, #128]	; (d46ec <loop+0x4d8>)
   d466a:	f000 f9db 	bl	d4a24 <HAL_Timer_Get_Milli_Seconds>
   d466e:	682b      	ldr	r3, [r5, #0]
   d4670:	1ac0      	subs	r0, r0, r3
   d4672:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   d4676:	d318      	bcc.n	d46aa <loop+0x496>
				logData("SLEEP_STATE", "WAKE UP", true, false);
   d4678:	491f      	ldr	r1, [pc, #124]	; (d46f8 <loop+0x4e4>)
   d467a:	a802      	add	r0, sp, #8
   d467c:	f002 fc1a 	bl	d6eb4 <_ZN6StringC1EPK19__FlashStringHelper>
   d4680:	491e      	ldr	r1, [pc, #120]	; (d46fc <loop+0x4e8>)
   d4682:	a806      	add	r0, sp, #24
   d4684:	f002 fc16 	bl	d6eb4 <_ZN6StringC1EPK19__FlashStringHelper>
   d4688:	2300      	movs	r3, #0
   d468a:	2201      	movs	r2, #1
   d468c:	a906      	add	r1, sp, #24
   d468e:	a802      	add	r0, sp, #8
   d4690:	f7ff fd9c 	bl	d41cc <_Z7logData6StringS_bb>
   d4694:	a806      	add	r0, sp, #24
   d4696:	f002 fbc6 	bl	d6e26 <_ZN6StringD1Ev>
   d469a:	a802      	add	r0, sp, #8
   d469c:	f002 fbc3 	bl	d6e26 <_ZN6StringD1Ev>
   d46a0:	f000 f9c0 	bl	d4a24 <HAL_Timer_Get_Milli_Seconds>

				stateTime = millis();
   d46a4:	6028      	str	r0, [r5, #0]

				state = PARTICLE_CONNECT_WAIT_STATE;
   d46a6:	2301      	movs	r3, #1
   d46a8:	7023      	strb	r3, [r4, #0]
			}
			break;
	}
}
   d46aa:	b00b      	add	sp, #44	; 0x2c
   d46ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d46ae:	bf00      	nop
   d46b0:	000d7f30 	.word	0x000d7f30
   d46b4:	2003e440 	.word	0x2003e440
   d46b8:	000d7f47 	.word	0x000d7f47
   d46bc:	2003e490 	.word	0x2003e490
   d46c0:	000d7f64 	.word	0x000d7f64
   d46c4:	2003e420 	.word	0x2003e420
   d46c8:	000d7f71 	.word	0x000d7f71
   d46cc:	000d7f76 	.word	0x000d7f76
   d46d0:	000d7f85 	.word	0x000d7f85
   d46d4:	2003e480 	.word	0x2003e480
   d46d8:	000d7f88 	.word	0x000d7f88
   d46dc:	000d7faa 	.word	0x000d7faa
   d46e0:	000d7fc7 	.word	0x000d7fc7
   d46e4:	000d7f22 	.word	0x000d7f22
   d46e8:	000d7fca 	.word	0x000d7fca
   d46ec:	2003e4a0 	.word	0x2003e4a0
   d46f0:	000d7fd0 	.word	0x000d7fd0
   d46f4:	000d7fe1 	.word	0x000d7fe1
   d46f8:	000d7ff0 	.word	0x000d7ff0
   d46fc:	000d7ffc 	.word	0x000d7ffc

000d4700 <_Z25selectExternalMeshAntennav>:
    return 1;
  }
  else return 0;
}

void selectExternalMeshAntenna(){
   d4700:	b508      	push	{r3, lr}
		digitalWrite(ANTSW1, 1);
		digitalWrite(ANTSW2, 0);
	#elif(PLATFORM_ID == PLATFORM_BORON)
		digitalWrite(ANTSW1, 0);
	#else
		digitalWrite(ANTSW1, 0);
   d4702:	2100      	movs	r1, #0
   d4704:	201d      	movs	r0, #29
   d4706:	f002 fe9d 	bl	d7444 <digitalWrite>
		digitalWrite(ANTSW2, 1);
   d470a:	2101      	movs	r1, #1
   d470c:	201e      	movs	r0, #30
	#endif
   d470e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		digitalWrite(ANTSW2, 0);
	#elif(PLATFORM_ID == PLATFORM_BORON)
		digitalWrite(ANTSW1, 0);
	#else
		digitalWrite(ANTSW1, 0);
		digitalWrite(ANTSW2, 1);
   d4712:	f002 be97 	b.w	d7444 <digitalWrite>
	...

000d4718 <setup>:
String feedName;
String feedID;
String feedData;


void setup(){
   d4718:	b510      	push	{r4, lr}
   d471a:	b088      	sub	sp, #32
	selectExternalMeshAntenna();
   d471c:	f7ff fff0 	bl	d4700 <_Z25selectExternalMeshAntennav>

	Serial.begin(9600);
   d4720:	f002 fda4 	bl	d726c <_Z16_fetch_usbserialv>
   d4724:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d4728:	f002 fd90 	bl	d724c <_ZN9USBSerial5beginEl>

	state = PARTICLE_CONNECT_WAIT_STATE;
   d472c:	4b0c      	ldr	r3, [pc, #48]	; (d4760 <setup+0x48>)

	logData("SETUP", "SETUP COMPLETE", true, false);
   d472e:	490d      	ldr	r1, [pc, #52]	; (d4764 <setup+0x4c>)
void setup(){
	selectExternalMeshAntenna();

	Serial.begin(9600);

	state = PARTICLE_CONNECT_WAIT_STATE;
   d4730:	2401      	movs	r4, #1

	logData("SETUP", "SETUP COMPLETE", true, false);
   d4732:	4668      	mov	r0, sp
void setup(){
	selectExternalMeshAntenna();

	Serial.begin(9600);

	state = PARTICLE_CONNECT_WAIT_STATE;
   d4734:	701c      	strb	r4, [r3, #0]

	logData("SETUP", "SETUP COMPLETE", true, false);
   d4736:	f002 fbbd 	bl	d6eb4 <_ZN6StringC1EPK19__FlashStringHelper>
   d473a:	490b      	ldr	r1, [pc, #44]	; (d4768 <setup+0x50>)
   d473c:	a804      	add	r0, sp, #16
   d473e:	f002 fbb9 	bl	d6eb4 <_ZN6StringC1EPK19__FlashStringHelper>
   d4742:	2300      	movs	r3, #0
   d4744:	4622      	mov	r2, r4
   d4746:	a904      	add	r1, sp, #16
   d4748:	4668      	mov	r0, sp
   d474a:	f7ff fd3f 	bl	d41cc <_Z7logData6StringS_bb>
   d474e:	a804      	add	r0, sp, #16
   d4750:	f002 fb69 	bl	d6e26 <_ZN6StringD1Ev>
   d4754:	4668      	mov	r0, sp
   d4756:	f002 fb66 	bl	d6e26 <_ZN6StringD1Ev>
}
   d475a:	b008      	add	sp, #32
   d475c:	bd10      	pop	{r4, pc}
   d475e:	bf00      	nop
   d4760:	2003e390 	.word	0x2003e390
   d4764:	000d8004 	.word	0x000d8004
   d4768:	000d800a 	.word	0x000d800a

000d476c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d476c:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d476e:	6804      	ldr	r4, [r0, #0]
   d4770:	6843      	ldr	r3, [r0, #4]
   d4772:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d4774:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d4776:	fb06 4603 	mla	r6, r6, r3, r4
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d477a:	42a6      	cmp	r6, r4
   d477c:	d004      	beq.n	d4788 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
    static int nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found);
};

} // namespace spark::detail

class LogCategoryFilter {
   d477e:	4620      	mov	r0, r4
   d4780:	f002 fb51 	bl	d6e26 <_ZN6StringD1Ev>
   d4784:	3414      	adds	r4, #20
   d4786:	e7f8      	b.n	d477a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d4788:	6828      	ldr	r0, [r5, #0]
   d478a:	f000 fb3f 	bl	d4e0c <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d478e:	4628      	mov	r0, r5
   d4790:	bd70      	pop	{r4, r5, r6, pc}

000d4792 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d4792:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d4794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4796:	4606      	mov	r6, r0
   d4798:	460c      	mov	r4, r1
   d479a:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d479c:	d916      	bls.n	d47cc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
   d479e:	4290      	cmp	r0, r2
   d47a0:	d215      	bcs.n	d47ce <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            // Move elements in reverse order
            --p;
            --end;
   d47a2:	f1a2 0514 	sub.w	r5, r2, #20
            dest += end - p - 1;
   d47a6:	1a6c      	subs	r4, r5, r1
   d47a8:	f1a1 0714 	sub.w	r7, r1, #20
   d47ac:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   d47ae:	42af      	cmp	r7, r5
   d47b0:	d01c      	beq.n	d47ec <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
   d47b2:	b12c      	cbz	r4, d47c0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
   d47b4:	4629      	mov	r1, r5
   d47b6:	4620      	mov	r0, r4
   d47b8:	f002 fb25 	bl	d6e06 <_ZN6StringC1EOS_>
   d47bc:	7c2b      	ldrb	r3, [r5, #16]
   d47be:	7423      	strb	r3, [r4, #16]
   d47c0:	4628      	mov	r0, r5
   d47c2:	f002 fb30 	bl	d6e26 <_ZN6StringD1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d47c6:	3d14      	subs	r5, #20
   d47c8:	3c14      	subs	r4, #20
   d47ca:	e7f0      	b.n	d47ae <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
   d47cc:	d00e      	beq.n	d47ec <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
   d47ce:	42ac      	cmp	r4, r5
   d47d0:	d00c      	beq.n	d47ec <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
   d47d2:	b12e      	cbz	r6, d47e0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
   d47d4:	4621      	mov	r1, r4
   d47d6:	4630      	mov	r0, r6
   d47d8:	f002 fb15 	bl	d6e06 <_ZN6StringC1EOS_>
   d47dc:	7c23      	ldrb	r3, [r4, #16]
   d47de:	7433      	strb	r3, [r6, #16]
   d47e0:	4620      	mov	r0, r4
   d47e2:	f002 fb20 	bl	d6e26 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d47e6:	3414      	adds	r4, #20
   d47e8:	3614      	adds	r6, #20
   d47ea:	e7f0      	b.n	d47ce <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
   d47ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d47ee <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
        size_ = n;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d47ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d47f2:	2300      	movs	r3, #0
   d47f4:	6003      	str	r3, [r0, #0]
   d47f6:	6043      	str	r3, [r0, #4]
   d47f8:	6083      	str	r3, [r0, #8]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d47fa:	684e      	ldr	r6, [r1, #4]
   d47fc:	429e      	cmp	r6, r3
        size_ = n;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d47fe:	4604      	mov	r4, r0
   d4800:	460f      	mov	r7, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d4802:	dd24      	ble.n	d484e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d4804:	f04f 0814 	mov.w	r8, #20
   d4808:	fb08 f006 	mul.w	r0, r8, r6
   d480c:	f000 faf6 	bl	d4dfc <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d4810:	4605      	mov	r5, r0
   d4812:	b1e0      	cbz	r0, d484e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>
                return false;
            }
            move(d, data_, data_ + size_);
   d4814:	e894 0006 	ldmia.w	r4, {r1, r2}
   d4818:	fb08 1202 	mla	r2, r8, r2, r1
   d481c:	f7ff ffb9 	bl	d4792 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d4820:	6820      	ldr	r0, [r4, #0]
   d4822:	f000 faf3 	bl	d4e0c <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d4826:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   d4828:	60a6      	str	r6, [r4, #8]
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
    if (vector.size_ > 0 && realloc(vector.size_)) {
        copy(data_, vector.data_, vector.data_ + vector.size_);
   d482a:	683e      	ldr	r6, [r7, #0]
   d482c:	687b      	ldr	r3, [r7, #4]
   d482e:	fb08 6803 	mla	r8, r8, r3, r6
        }
    }

    template<typename IteratorT>
    static void copy(IteratorT dest, IteratorT it, IteratorT end) {
        for (; it != end; ++it, ++dest) {
   d4832:	4546      	cmp	r6, r8
   d4834:	d009      	beq.n	d484a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5c>
            new(dest) T(*it);
   d4836:	b12d      	cbz	r5, d4844 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x56>
   d4838:	4631      	mov	r1, r6
   d483a:	4628      	mov	r0, r5
   d483c:	f002 fb5c 	bl	d6ef8 <_ZN6StringC1ERKS_>
   d4840:	7c33      	ldrb	r3, [r6, #16]
   d4842:	742b      	strb	r3, [r5, #16]
        }
    }

    template<typename IteratorT>
    static void copy(IteratorT dest, IteratorT it, IteratorT end) {
        for (; it != end; ++it, ++dest) {
   d4844:	3614      	adds	r6, #20
   d4846:	3514      	adds	r5, #20
   d4848:	e7f3      	b.n	d4832 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
    if (vector.size_ > 0 && realloc(vector.size_)) {
        copy(data_, vector.data_, vector.data_ + vector.size_);
        size_ = vector.size_;
   d484a:	687b      	ldr	r3, [r7, #4]
   d484c:	6063      	str	r3, [r4, #4]
    }
}
   d484e:	4620      	mov	r0, r4
   d4850:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d4854 <_GLOBAL__sub_I_logHandler>:
		digitalWrite(ANTSW1, 0);
	#else
		digitalWrite(ANTSW1, 0);
		digitalWrite(ANTSW2, 1);
	#endif
   d4854:	b5f0      	push	{r4, r5, r6, r7, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d4856:	4b40      	ldr	r3, [pc, #256]	; (d4958 <_GLOBAL__sub_I_logHandler+0x104>)
inline spark::LogHandler::LogHandler(LogLevel level) :
        filter_(level) {
}

inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
        filter_(level, filters) {
   d4858:	4d40      	ldr	r5, [pc, #256]	; (d495c <_GLOBAL__sub_I_logHandler+0x108>)

int minValue = 0;
int maxValue = 4096;

int analogValue = 0;
String analogValueString = "0";
   d485a:	4f41      	ldr	r7, [pc, #260]	; (d4960 <_GLOBAL__sub_I_logHandler+0x10c>)
		digitalWrite(ANTSW1, 0);
	#else
		digitalWrite(ANTSW1, 0);
		digitalWrite(ANTSW2, 1);
	#endif
   d485c:	b08d      	sub	sp, #52	; 0x34
   d485e:	2401      	movs	r4, #1
   d4860:	701c      	strb	r4, [r3, #0]

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d4862:	f000 f8e7 	bl	d4a34 <HAL_Pin_Map>
//                            //
//                            //
//                            //
////////////////////////////////

SYSTEM_THREAD(ENABLED)
   d4866:	2100      	movs	r1, #0
   d4868:	4620      	mov	r0, r4
   d486a:	f000 fa23 	bl	d4cb4 <system_thread_set_state>
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d486e:	2300      	movs	r3, #0
   d4870:	9300      	str	r3, [sp, #0]
   d4872:	9301      	str	r3, [sp, #4]
   d4874:	9302      	str	r3, [sp, #8]
namespace spark {

class SerialLogHandler: public StreamLogHandler {
public:
    explicit SerialLogHandler(LogLevel level = LOG_LEVEL_INFO, LogCategoryFilters filters = {}) :
            StreamLogHandler(Serial, level, filters) {
   d4876:	f002 fcf9 	bl	d726c <_Z16_fetch_usbserialv>
   d487a:	4669      	mov	r1, sp
   d487c:	4606      	mov	r6, r0
   d487e:	a803      	add	r0, sp, #12
   d4880:	f7ff ffb5 	bl	d47ee <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d4884:	462c      	mov	r4, r5
}

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
   d4886:	a903      	add	r1, sp, #12
   d4888:	a806      	add	r0, sp, #24
   d488a:	f7ff ffb0 	bl	d47ee <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
inline spark::LogHandler::LogHandler(LogLevel level) :
        filter_(level) {
}

inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
        filter_(level, filters) {
   d488e:	4b35      	ldr	r3, [pc, #212]	; (d4964 <_GLOBAL__sub_I_logHandler+0x110>)
   d4890:	f844 3b04 	str.w	r3, [r4], #4
   d4894:	a906      	add	r1, sp, #24
   d4896:	a809      	add	r0, sp, #36	; 0x24
   d4898:	f7ff ffa9 	bl	d47ee <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d489c:	aa09      	add	r2, sp, #36	; 0x24
   d489e:	211e      	movs	r1, #30
   d48a0:	4620      	mov	r0, r4
   d48a2:	f001 fd74 	bl	d638e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d48a6:	a809      	add	r0, sp, #36	; 0x24
   d48a8:	f7ff ff60 	bl	d476c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
   d48ac:	a806      	add	r0, sp, #24
   d48ae:	f7ff ff5d 	bl	d476c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d48b2:	4b2d      	ldr	r3, [pc, #180]	; (d4968 <_GLOBAL__sub_I_logHandler+0x114>)
   d48b4:	602b      	str	r3, [r5, #0]
   d48b6:	622e      	str	r6, [r5, #32]
   d48b8:	a803      	add	r0, sp, #12
   d48ba:	f7ff ff57 	bl	d476c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d48be:	4b2b      	ldr	r3, [pc, #172]	; (d496c <_GLOBAL__sub_I_logHandler+0x118>)
   d48c0:	602b      	str	r3, [r5, #0]
        Serial.begin();
   d48c2:	f002 fcd3 	bl	d726c <_Z16_fetch_usbserialv>
   d48c6:	f44f 5116 	mov.w	r1, #9600	; 0x2580

#define BUILT_IN_LED D7       // Built In LED

#define ANALOG_DETECTOR A5

SerialLogHandler logHandler;
   d48ca:	4c29      	ldr	r4, [pc, #164]	; (d4970 <_GLOBAL__sub_I_logHandler+0x11c>)

int minValue = 0;
int maxValue = 4096;

int analogValue = 0;
String analogValueString = "0";
   d48cc:	4e29      	ldr	r6, [pc, #164]	; (d4974 <_GLOBAL__sub_I_logHandler+0x120>)
   d48ce:	f002 fcbd 	bl	d724c <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
   d48d2:	f001 fa05 	bl	d5ce0 <_ZN5spark10LogManager8instanceEv>
   d48d6:	4629      	mov	r1, r5
   d48d8:	f001 fcec 	bl	d62b4 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>

#define BUILT_IN_LED D7       // Built In LED

#define ANALOG_DETECTOR A5

SerialLogHandler logHandler;
   d48dc:	4668      	mov	r0, sp
   d48de:	f7ff ff45 	bl	d476c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d48e2:	4622      	mov	r2, r4
   d48e4:	4924      	ldr	r1, [pc, #144]	; (d4978 <_GLOBAL__sub_I_logHandler+0x124>)
   d48e6:	4628      	mov	r0, r5
   d48e8:	f002 fe1c 	bl	d7524 <__aeabi_atexit>

int minValue = 0;
int maxValue = 4096;

int analogValue = 0;
String analogValueString = "0";
   d48ec:	4d23      	ldr	r5, [pc, #140]	; (d497c <_GLOBAL__sub_I_logHandler+0x128>)
   d48ee:	4639      	mov	r1, r7
   d48f0:	4630      	mov	r0, r6
   d48f2:	f002 fadf 	bl	d6eb4 <_ZN6StringC1EPK19__FlashStringHelper>
   d48f6:	4630      	mov	r0, r6
int digitalValue = 0;
String digitalValueString = "0";
   d48f8:	4e21      	ldr	r6, [pc, #132]	; (d4980 <_GLOBAL__sub_I_logHandler+0x12c>)

int minValue = 0;
int maxValue = 4096;

int analogValue = 0;
String analogValueString = "0";
   d48fa:	4622      	mov	r2, r4
   d48fc:	4629      	mov	r1, r5
   d48fe:	f002 fe11 	bl	d7524 <__aeabi_atexit>
int digitalValue = 0;
String digitalValueString = "0";
   d4902:	4639      	mov	r1, r7
   d4904:	4630      	mov	r0, r6
   d4906:	f002 fad5 	bl	d6eb4 <_ZN6StringC1EPK19__FlashStringHelper>
				SLEEP_STATE
			};
State state = PARTICLE_CONNECT_WAIT_STATE;
unsigned long stateTime = 0;

String feedName;
   d490a:	4f1e      	ldr	r7, [pc, #120]	; (d4984 <_GLOBAL__sub_I_logHandler+0x130>)
int maxValue = 4096;

int analogValue = 0;
String analogValueString = "0";
int digitalValue = 0;
String digitalValueString = "0";
   d490c:	4630      	mov	r0, r6
				SLEEP_STATE
			};
State state = PARTICLE_CONNECT_WAIT_STATE;
unsigned long stateTime = 0;

String feedName;
   d490e:	4e1e      	ldr	r6, [pc, #120]	; (d4988 <_GLOBAL__sub_I_logHandler+0x134>)
int maxValue = 4096;

int analogValue = 0;
String analogValueString = "0";
int digitalValue = 0;
String digitalValueString = "0";
   d4910:	4622      	mov	r2, r4
   d4912:	4629      	mov	r1, r5
   d4914:	f002 fe06 	bl	d7524 <__aeabi_atexit>
				SLEEP_STATE
			};
State state = PARTICLE_CONNECT_WAIT_STATE;
unsigned long stateTime = 0;

String feedName;
   d4918:	4631      	mov	r1, r6
   d491a:	4638      	mov	r0, r7
   d491c:	f002 faca 	bl	d6eb4 <_ZN6StringC1EPK19__FlashStringHelper>
   d4920:	4638      	mov	r0, r7
String feedID;
   d4922:	4f1a      	ldr	r7, [pc, #104]	; (d498c <_GLOBAL__sub_I_logHandler+0x138>)
				SLEEP_STATE
			};
State state = PARTICLE_CONNECT_WAIT_STATE;
unsigned long stateTime = 0;

String feedName;
   d4924:	4622      	mov	r2, r4
   d4926:	4629      	mov	r1, r5
   d4928:	f002 fdfc 	bl	d7524 <__aeabi_atexit>
String feedID;
   d492c:	4631      	mov	r1, r6
   d492e:	4638      	mov	r0, r7
   d4930:	f002 fac0 	bl	d6eb4 <_ZN6StringC1EPK19__FlashStringHelper>
   d4934:	4638      	mov	r0, r7
String feedData;
   d4936:	4f16      	ldr	r7, [pc, #88]	; (d4990 <_GLOBAL__sub_I_logHandler+0x13c>)
			};
State state = PARTICLE_CONNECT_WAIT_STATE;
unsigned long stateTime = 0;

String feedName;
String feedID;
   d4938:	4622      	mov	r2, r4
   d493a:	4629      	mov	r1, r5
   d493c:	f002 fdf2 	bl	d7524 <__aeabi_atexit>
String feedData;
   d4940:	4631      	mov	r1, r6
   d4942:	4638      	mov	r0, r7
   d4944:	f002 fab6 	bl	d6eb4 <_ZN6StringC1EPK19__FlashStringHelper>
   d4948:	4622      	mov	r2, r4
   d494a:	4629      	mov	r1, r5
   d494c:	4638      	mov	r0, r7
   d494e:	f002 fde9 	bl	d7524 <__aeabi_atexit>
		digitalWrite(ANTSW1, 0);
	#else
		digitalWrite(ANTSW1, 0);
		digitalWrite(ANTSW2, 1);
	#endif
   d4952:	b00d      	add	sp, #52	; 0x34
   d4954:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4956:	bf00      	nop
   d4958:	2003e43c 	.word	0x2003e43c
   d495c:	2003e45c 	.word	0x2003e45c
   d4960:	000d80aa 	.word	0x000d80aa
   d4964:	000d7e5c 	.word	0x000d7e5c
   d4968:	000d81e4 	.word	0x000d81e4
   d496c:	000d7e74 	.word	0x000d7e74
   d4970:	2003e408 	.word	0x2003e408
   d4974:	2003e40c 	.word	0x2003e40c
   d4978:	000d40d5 	.word	0x000d40d5
   d497c:	000d6e27 	.word	0x000d6e27
   d4980:	2003e42c 	.word	0x2003e42c
   d4984:	2003e440 	.word	0x2003e440
   d4988:	000d81a4 	.word	0x000d81a4
   d498c:	2003e490 	.word	0x2003e490
   d4990:	2003e480 	.word	0x2003e480

000d4994 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d4994:	b508      	push	{r3, lr}
   d4996:	4b02      	ldr	r3, [pc, #8]	; (d49a0 <os_thread_is_current+0xc>)
   d4998:	681b      	ldr	r3, [r3, #0]
   d499a:	689b      	ldr	r3, [r3, #8]
   d499c:	9301      	str	r3, [sp, #4]
   d499e:	bd08      	pop	{r3, pc}
   d49a0:	00030248 	.word	0x00030248

000d49a4 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d49a4:	b508      	push	{r3, lr}
   d49a6:	4b02      	ldr	r3, [pc, #8]	; (d49b0 <os_thread_join+0xc>)
   d49a8:	681b      	ldr	r3, [r3, #0]
   d49aa:	691b      	ldr	r3, [r3, #16]
   d49ac:	9301      	str	r3, [sp, #4]
   d49ae:	bd08      	pop	{r3, pc}
   d49b0:	00030248 	.word	0x00030248

000d49b4 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d49b4:	b508      	push	{r3, lr}
   d49b6:	4b02      	ldr	r3, [pc, #8]	; (d49c0 <os_thread_cleanup+0xc>)
   d49b8:	681b      	ldr	r3, [r3, #0]
   d49ba:	695b      	ldr	r3, [r3, #20]
   d49bc:	9301      	str	r3, [sp, #4]
   d49be:	bd08      	pop	{r3, pc}
   d49c0:	00030248 	.word	0x00030248

000d49c4 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d49c4:	b508      	push	{r3, lr}
   d49c6:	4b02      	ldr	r3, [pc, #8]	; (d49d0 <os_mutex_recursive_create+0xc>)
   d49c8:	681b      	ldr	r3, [r3, #0]
   d49ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d49cc:	9301      	str	r3, [sp, #4]
   d49ce:	bd08      	pop	{r3, pc}
   d49d0:	00030248 	.word	0x00030248

000d49d4 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d49d4:	b508      	push	{r3, lr}
   d49d6:	4b02      	ldr	r3, [pc, #8]	; (d49e0 <os_mutex_recursive_destroy+0xc>)
   d49d8:	681b      	ldr	r3, [r3, #0]
   d49da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d49dc:	9301      	str	r3, [sp, #4]
   d49de:	bd08      	pop	{r3, pc}
   d49e0:	00030248 	.word	0x00030248

000d49e4 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   d49e4:	b508      	push	{r3, lr}
   d49e6:	4b02      	ldr	r3, [pc, #8]	; (d49f0 <os_mutex_recursive_lock+0xc>)
   d49e8:	681b      	ldr	r3, [r3, #0]
   d49ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d49ec:	9301      	str	r3, [sp, #4]
   d49ee:	bd08      	pop	{r3, pc}
   d49f0:	00030248 	.word	0x00030248

000d49f4 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   d49f4:	b508      	push	{r3, lr}
   d49f6:	4b02      	ldr	r3, [pc, #8]	; (d4a00 <os_mutex_recursive_unlock+0xc>)
   d49f8:	681b      	ldr	r3, [r3, #0]
   d49fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d49fc:	9301      	str	r3, [sp, #4]
   d49fe:	bd08      	pop	{r3, pc}
   d4a00:	00030248 	.word	0x00030248

000d4a04 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d4a04:	b508      	push	{r3, lr}
   d4a06:	4b02      	ldr	r3, [pc, #8]	; (d4a10 <HAL_RNG_GetRandomNumber+0xc>)
   d4a08:	681b      	ldr	r3, [r3, #0]
   d4a0a:	685b      	ldr	r3, [r3, #4]
   d4a0c:	9301      	str	r3, [sp, #4]
   d4a0e:	bd08      	pop	{r3, pc}
   d4a10:	00030218 	.word	0x00030218

000d4a14 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d4a14:	b508      	push	{r3, lr}
   d4a16:	4b02      	ldr	r3, [pc, #8]	; (d4a20 <HAL_Delay_Microseconds+0xc>)
   d4a18:	681b      	ldr	r3, [r3, #0]
   d4a1a:	68db      	ldr	r3, [r3, #12]
   d4a1c:	9301      	str	r3, [sp, #4]
   d4a1e:	bd08      	pop	{r3, pc}
   d4a20:	00030218 	.word	0x00030218

000d4a24 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4a24:	b508      	push	{r3, lr}
   d4a26:	4b02      	ldr	r3, [pc, #8]	; (d4a30 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d4a28:	681b      	ldr	r3, [r3, #0]
   d4a2a:	695b      	ldr	r3, [r3, #20]
   d4a2c:	9301      	str	r3, [sp, #4]
   d4a2e:	bd08      	pop	{r3, pc}
   d4a30:	00030218 	.word	0x00030218

000d4a34 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d4a34:	b508      	push	{r3, lr}
   d4a36:	4b02      	ldr	r3, [pc, #8]	; (d4a40 <HAL_Pin_Map+0xc>)
   d4a38:	681b      	ldr	r3, [r3, #0]
   d4a3a:	681b      	ldr	r3, [r3, #0]
   d4a3c:	9301      	str	r3, [sp, #4]
   d4a3e:	bd08      	pop	{r3, pc}
   d4a40:	0003022c 	.word	0x0003022c

000d4a44 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d4a44:	b508      	push	{r3, lr}
   d4a46:	4b02      	ldr	r3, [pc, #8]	; (d4a50 <HAL_Validate_Pin_Function+0xc>)
   d4a48:	681b      	ldr	r3, [r3, #0]
   d4a4a:	685b      	ldr	r3, [r3, #4]
   d4a4c:	9301      	str	r3, [sp, #4]
   d4a4e:	bd08      	pop	{r3, pc}
   d4a50:	0003022c 	.word	0x0003022c

000d4a54 <HAL_Get_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d4a54:	b508      	push	{r3, lr}
   d4a56:	4b02      	ldr	r3, [pc, #8]	; (d4a60 <HAL_Get_Pin_Mode+0xc>)
   d4a58:	681b      	ldr	r3, [r3, #0]
   d4a5a:	68db      	ldr	r3, [r3, #12]
   d4a5c:	9301      	str	r3, [sp, #4]
   d4a5e:	bd08      	pop	{r3, pc}
   d4a60:	0003022c 	.word	0x0003022c

000d4a64 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d4a64:	b508      	push	{r3, lr}
   d4a66:	4b02      	ldr	r3, [pc, #8]	; (d4a70 <HAL_GPIO_Write+0xc>)
   d4a68:	681b      	ldr	r3, [r3, #0]
   d4a6a:	691b      	ldr	r3, [r3, #16]
   d4a6c:	9301      	str	r3, [sp, #4]
   d4a6e:	bd08      	pop	{r3, pc}
   d4a70:	0003022c 	.word	0x0003022c

000d4a74 <HAL_ADC_Read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
   d4a74:	b508      	push	{r3, lr}
   d4a76:	4b02      	ldr	r3, [pc, #8]	; (d4a80 <HAL_ADC_Read+0xc>)
   d4a78:	681b      	ldr	r3, [r3, #0]
   d4a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4a7c:	9301      	str	r3, [sp, #4]
   d4a7e:	bd08      	pop	{r3, pc}
   d4a80:	0003022c 	.word	0x0003022c

000d4a84 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d4a84:	b508      	push	{r3, lr}
   d4a86:	4b02      	ldr	r3, [pc, #8]	; (d4a90 <HAL_I2C_Write_Data+0xc>)
   d4a88:	681b      	ldr	r3, [r3, #0]
   d4a8a:	6a1b      	ldr	r3, [r3, #32]
   d4a8c:	9301      	str	r3, [sp, #4]
   d4a8e:	bd08      	pop	{r3, pc}
   d4a90:	00030228 	.word	0x00030228

000d4a94 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d4a94:	b508      	push	{r3, lr}
   d4a96:	4b02      	ldr	r3, [pc, #8]	; (d4aa0 <HAL_I2C_Available_Data+0xc>)
   d4a98:	681b      	ldr	r3, [r3, #0]
   d4a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4a9c:	9301      	str	r3, [sp, #4]
   d4a9e:	bd08      	pop	{r3, pc}
   d4aa0:	00030228 	.word	0x00030228

000d4aa4 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d4aa4:	b508      	push	{r3, lr}
   d4aa6:	4b02      	ldr	r3, [pc, #8]	; (d4ab0 <HAL_I2C_Read_Data+0xc>)
   d4aa8:	681b      	ldr	r3, [r3, #0]
   d4aaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4aac:	9301      	str	r3, [sp, #4]
   d4aae:	bd08      	pop	{r3, pc}
   d4ab0:	00030228 	.word	0x00030228

000d4ab4 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d4ab4:	b508      	push	{r3, lr}
   d4ab6:	4b02      	ldr	r3, [pc, #8]	; (d4ac0 <HAL_I2C_Peek_Data+0xc>)
   d4ab8:	681b      	ldr	r3, [r3, #0]
   d4aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4abc:	9301      	str	r3, [sp, #4]
   d4abe:	bd08      	pop	{r3, pc}
   d4ac0:	00030228 	.word	0x00030228

000d4ac4 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d4ac4:	b508      	push	{r3, lr}
   d4ac6:	4b02      	ldr	r3, [pc, #8]	; (d4ad0 <HAL_I2C_Flush_Data+0xc>)
   d4ac8:	681b      	ldr	r3, [r3, #0]
   d4aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4acc:	9301      	str	r3, [sp, #4]
   d4ace:	bd08      	pop	{r3, pc}
   d4ad0:	00030228 	.word	0x00030228

000d4ad4 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d4ad4:	b508      	push	{r3, lr}
   d4ad6:	4b02      	ldr	r3, [pc, #8]	; (d4ae0 <HAL_I2C_Is_Enabled+0xc>)
   d4ad8:	681b      	ldr	r3, [r3, #0]
   d4ada:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4adc:	9301      	str	r3, [sp, #4]
   d4ade:	bd08      	pop	{r3, pc}
   d4ae0:	00030228 	.word	0x00030228

000d4ae4 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
   d4ae4:	b508      	push	{r3, lr}
   d4ae6:	4b02      	ldr	r3, [pc, #8]	; (d4af0 <HAL_I2C_Init+0xc>)
   d4ae8:	681b      	ldr	r3, [r3, #0]
   d4aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4aec:	9301      	str	r3, [sp, #4]
   d4aee:	bd08      	pop	{r3, pc}
   d4af0:	00030228 	.word	0x00030228

000d4af4 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d4af4:	b508      	push	{r3, lr}
   d4af6:	4b02      	ldr	r3, [pc, #8]	; (d4b00 <inet_inet_ntop+0xc>)
   d4af8:	681b      	ldr	r3, [r3, #0]
   d4afa:	695b      	ldr	r3, [r3, #20]
   d4afc:	9301      	str	r3, [sp, #4]
   d4afe:	bd08      	pop	{r3, pc}
   d4b00:	00030264 	.word	0x00030264

000d4b04 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d4b04:	b508      	push	{r3, lr}
   d4b06:	4b02      	ldr	r3, [pc, #8]	; (d4b10 <netdb_freeaddrinfo+0xc>)
   d4b08:	681b      	ldr	r3, [r3, #0]
   d4b0a:	689b      	ldr	r3, [r3, #8]
   d4b0c:	9301      	str	r3, [sp, #4]
   d4b0e:	bd08      	pop	{r3, pc}
   d4b10:	00030268 	.word	0x00030268

000d4b14 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d4b14:	b508      	push	{r3, lr}
   d4b16:	4b02      	ldr	r3, [pc, #8]	; (d4b20 <netdb_getaddrinfo+0xc>)
   d4b18:	681b      	ldr	r3, [r3, #0]
   d4b1a:	68db      	ldr	r3, [r3, #12]
   d4b1c:	9301      	str	r3, [sp, #4]
   d4b1e:	bd08      	pop	{r3, pc}
   d4b20:	00030268 	.word	0x00030268

000d4b24 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d4b24:	b508      	push	{r3, lr}
   d4b26:	4b02      	ldr	r3, [pc, #8]	; (d4b30 <HAL_SPI_Init+0xc>)
   d4b28:	681b      	ldr	r3, [r3, #0]
   d4b2a:	69db      	ldr	r3, [r3, #28]
   d4b2c:	9301      	str	r3, [sp, #4]
   d4b2e:	bd08      	pop	{r3, pc}
   d4b30:	00030230 	.word	0x00030230

000d4b34 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d4b34:	b508      	push	{r3, lr}
   d4b36:	4b02      	ldr	r3, [pc, #8]	; (d4b40 <HAL_SPI_Is_Enabled+0xc>)
   d4b38:	681b      	ldr	r3, [r3, #0]
   d4b3a:	6a1b      	ldr	r3, [r3, #32]
   d4b3c:	9301      	str	r3, [sp, #4]
   d4b3e:	bd08      	pop	{r3, pc}
   d4b40:	00030230 	.word	0x00030230

000d4b44 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d4b44:	b508      	push	{r3, lr}
   d4b46:	4b02      	ldr	r3, [pc, #8]	; (d4b50 <HAL_USART_Init+0xc>)
   d4b48:	681b      	ldr	r3, [r3, #0]
   d4b4a:	681b      	ldr	r3, [r3, #0]
   d4b4c:	9301      	str	r3, [sp, #4]
   d4b4e:	bd08      	pop	{r3, pc}
   d4b50:	0003023c 	.word	0x0003023c

000d4b54 <HAL_USART_End>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
   d4b54:	b508      	push	{r3, lr}
   d4b56:	4b02      	ldr	r3, [pc, #8]	; (d4b60 <HAL_USART_End+0xc>)
   d4b58:	681b      	ldr	r3, [r3, #0]
   d4b5a:	689b      	ldr	r3, [r3, #8]
   d4b5c:	9301      	str	r3, [sp, #4]
   d4b5e:	bd08      	pop	{r3, pc}
   d4b60:	0003023c 	.word	0x0003023c

000d4b64 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d4b64:	b508      	push	{r3, lr}
   d4b66:	4b02      	ldr	r3, [pc, #8]	; (d4b70 <HAL_USART_Write_Data+0xc>)
   d4b68:	681b      	ldr	r3, [r3, #0]
   d4b6a:	68db      	ldr	r3, [r3, #12]
   d4b6c:	9301      	str	r3, [sp, #4]
   d4b6e:	bd08      	pop	{r3, pc}
   d4b70:	0003023c 	.word	0x0003023c

000d4b74 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d4b74:	b508      	push	{r3, lr}
   d4b76:	4b02      	ldr	r3, [pc, #8]	; (d4b80 <HAL_USART_Available_Data+0xc>)
   d4b78:	681b      	ldr	r3, [r3, #0]
   d4b7a:	691b      	ldr	r3, [r3, #16]
   d4b7c:	9301      	str	r3, [sp, #4]
   d4b7e:	bd08      	pop	{r3, pc}
   d4b80:	0003023c 	.word	0x0003023c

000d4b84 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d4b84:	b508      	push	{r3, lr}
   d4b86:	4b02      	ldr	r3, [pc, #8]	; (d4b90 <HAL_USART_Read_Data+0xc>)
   d4b88:	681b      	ldr	r3, [r3, #0]
   d4b8a:	695b      	ldr	r3, [r3, #20]
   d4b8c:	9301      	str	r3, [sp, #4]
   d4b8e:	bd08      	pop	{r3, pc}
   d4b90:	0003023c 	.word	0x0003023c

000d4b94 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d4b94:	b508      	push	{r3, lr}
   d4b96:	4b02      	ldr	r3, [pc, #8]	; (d4ba0 <HAL_USART_Peek_Data+0xc>)
   d4b98:	681b      	ldr	r3, [r3, #0]
   d4b9a:	699b      	ldr	r3, [r3, #24]
   d4b9c:	9301      	str	r3, [sp, #4]
   d4b9e:	bd08      	pop	{r3, pc}
   d4ba0:	0003023c 	.word	0x0003023c

000d4ba4 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d4ba4:	b508      	push	{r3, lr}
   d4ba6:	4b02      	ldr	r3, [pc, #8]	; (d4bb0 <HAL_USART_Flush_Data+0xc>)
   d4ba8:	681b      	ldr	r3, [r3, #0]
   d4baa:	69db      	ldr	r3, [r3, #28]
   d4bac:	9301      	str	r3, [sp, #4]
   d4bae:	bd08      	pop	{r3, pc}
   d4bb0:	0003023c 	.word	0x0003023c

000d4bb4 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d4bb4:	b508      	push	{r3, lr}
   d4bb6:	4b02      	ldr	r3, [pc, #8]	; (d4bc0 <HAL_USART_Is_Enabled+0xc>)
   d4bb8:	681b      	ldr	r3, [r3, #0]
   d4bba:	6a1b      	ldr	r3, [r3, #32]
   d4bbc:	9301      	str	r3, [sp, #4]
   d4bbe:	bd08      	pop	{r3, pc}
   d4bc0:	0003023c 	.word	0x0003023c

000d4bc4 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d4bc4:	b508      	push	{r3, lr}
   d4bc6:	4b02      	ldr	r3, [pc, #8]	; (d4bd0 <HAL_USART_Available_Data_For_Write+0xc>)
   d4bc8:	681b      	ldr	r3, [r3, #0]
   d4bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4bcc:	9301      	str	r3, [sp, #4]
   d4bce:	bd08      	pop	{r3, pc}
   d4bd0:	0003023c 	.word	0x0003023c

000d4bd4 <HAL_USART_BeginConfig>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, HAL_USART_BeginConfig, void(HAL_USART_Serial serial, uint32_t baud, uint32_t config, void *ptr))
   d4bd4:	b508      	push	{r3, lr}
   d4bd6:	4b02      	ldr	r3, [pc, #8]	; (d4be0 <HAL_USART_BeginConfig+0xc>)
   d4bd8:	681b      	ldr	r3, [r3, #0]
   d4bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4bdc:	9301      	str	r3, [sp, #4]
   d4bde:	bd08      	pop	{r3, pc}
   d4be0:	0003023c 	.word	0x0003023c

000d4be4 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4be4:	b508      	push	{r3, lr}
   d4be6:	4b02      	ldr	r3, [pc, #8]	; (d4bf0 <HAL_USB_USART_Init+0xc>)
   d4be8:	681b      	ldr	r3, [r3, #0]
   d4bea:	681b      	ldr	r3, [r3, #0]
   d4bec:	9301      	str	r3, [sp, #4]
   d4bee:	bd08      	pop	{r3, pc}
   d4bf0:	0003024c 	.word	0x0003024c

000d4bf4 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d4bf4:	b508      	push	{r3, lr}
   d4bf6:	4b02      	ldr	r3, [pc, #8]	; (d4c00 <HAL_USB_USART_Begin+0xc>)
   d4bf8:	681b      	ldr	r3, [r3, #0]
   d4bfa:	685b      	ldr	r3, [r3, #4]
   d4bfc:	9301      	str	r3, [sp, #4]
   d4bfe:	bd08      	pop	{r3, pc}
   d4c00:	0003024c 	.word	0x0003024c

000d4c04 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   d4c04:	b508      	push	{r3, lr}
   d4c06:	4b02      	ldr	r3, [pc, #8]	; (d4c10 <HAL_USB_USART_End+0xc>)
   d4c08:	681b      	ldr	r3, [r3, #0]
   d4c0a:	689b      	ldr	r3, [r3, #8]
   d4c0c:	9301      	str	r3, [sp, #4]
   d4c0e:	bd08      	pop	{r3, pc}
   d4c10:	0003024c 	.word	0x0003024c

000d4c14 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d4c14:	b508      	push	{r3, lr}
   d4c16:	4b02      	ldr	r3, [pc, #8]	; (d4c20 <HAL_USB_USART_Available_Data+0xc>)
   d4c18:	681b      	ldr	r3, [r3, #0]
   d4c1a:	691b      	ldr	r3, [r3, #16]
   d4c1c:	9301      	str	r3, [sp, #4]
   d4c1e:	bd08      	pop	{r3, pc}
   d4c20:	0003024c 	.word	0x0003024c

000d4c24 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4c24:	b508      	push	{r3, lr}
   d4c26:	4b02      	ldr	r3, [pc, #8]	; (d4c30 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d4c28:	681b      	ldr	r3, [r3, #0]
   d4c2a:	695b      	ldr	r3, [r3, #20]
   d4c2c:	9301      	str	r3, [sp, #4]
   d4c2e:	bd08      	pop	{r3, pc}
   d4c30:	0003024c 	.word	0x0003024c

000d4c34 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4c34:	b508      	push	{r3, lr}
   d4c36:	4b02      	ldr	r3, [pc, #8]	; (d4c40 <HAL_USB_USART_Receive_Data+0xc>)
   d4c38:	681b      	ldr	r3, [r3, #0]
   d4c3a:	699b      	ldr	r3, [r3, #24]
   d4c3c:	9301      	str	r3, [sp, #4]
   d4c3e:	bd08      	pop	{r3, pc}
   d4c40:	0003024c 	.word	0x0003024c

000d4c44 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4c44:	b508      	push	{r3, lr}
   d4c46:	4b02      	ldr	r3, [pc, #8]	; (d4c50 <HAL_USB_USART_Send_Data+0xc>)
   d4c48:	681b      	ldr	r3, [r3, #0]
   d4c4a:	69db      	ldr	r3, [r3, #28]
   d4c4c:	9301      	str	r3, [sp, #4]
   d4c4e:	bd08      	pop	{r3, pc}
   d4c50:	0003024c 	.word	0x0003024c

000d4c54 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4c54:	b508      	push	{r3, lr}
   d4c56:	4b02      	ldr	r3, [pc, #8]	; (d4c60 <HAL_USB_USART_Flush_Data+0xc>)
   d4c58:	681b      	ldr	r3, [r3, #0]
   d4c5a:	6a1b      	ldr	r3, [r3, #32]
   d4c5c:	9301      	str	r3, [sp, #4]
   d4c5e:	bd08      	pop	{r3, pc}
   d4c60:	0003024c 	.word	0x0003024c

000d4c64 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d4c64:	b508      	push	{r3, lr}
   d4c66:	4b02      	ldr	r3, [pc, #8]	; (d4c70 <panic_+0xc>)
   d4c68:	681b      	ldr	r3, [r3, #0]
   d4c6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4c6c:	9301      	str	r3, [sp, #4]
   d4c6e:	bd08      	pop	{r3, pc}
   d4c70:	00030260 	.word	0x00030260

000d4c74 <log_message_v>:
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   d4c74:	b508      	push	{r3, lr}
   d4c76:	4b02      	ldr	r3, [pc, #8]	; (d4c80 <log_message_v+0xc>)
   d4c78:	681b      	ldr	r3, [r3, #0]
   d4c7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d4c7c:	9301      	str	r3, [sp, #4]
   d4c7e:	bd08      	pop	{r3, pc}
   d4c80:	00030260 	.word	0x00030260

000d4c84 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   d4c84:	b508      	push	{r3, lr}
   d4c86:	4b02      	ldr	r3, [pc, #8]	; (d4c90 <log_level_name+0xc>)
   d4c88:	681b      	ldr	r3, [r3, #0]
   d4c8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d4c8c:	9301      	str	r3, [sp, #4]
   d4c8e:	bd08      	pop	{r3, pc}
   d4c90:	00030260 	.word	0x00030260

000d4c94 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   d4c94:	b508      	push	{r3, lr}
   d4c96:	4b02      	ldr	r3, [pc, #8]	; (d4ca0 <log_set_callbacks+0xc>)
   d4c98:	681b      	ldr	r3, [r3, #0]
   d4c9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   d4c9c:	9301      	str	r3, [sp, #4]
   d4c9e:	bd08      	pop	{r3, pc}
   d4ca0:	00030260 	.word	0x00030260

000d4ca4 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4ca4:	b508      	push	{r3, lr}
   d4ca6:	4b02      	ldr	r3, [pc, #8]	; (d4cb0 <set_system_mode+0xc>)
   d4ca8:	681b      	ldr	r3, [r3, #0]
   d4caa:	685b      	ldr	r3, [r3, #4]
   d4cac:	9301      	str	r3, [sp, #4]
   d4cae:	bd08      	pop	{r3, pc}
   d4cb0:	00030220 	.word	0x00030220

000d4cb4 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d4cb4:	b508      	push	{r3, lr}
   d4cb6:	4b02      	ldr	r3, [pc, #8]	; (d4cc0 <system_thread_set_state+0xc>)
   d4cb8:	681b      	ldr	r3, [r3, #0]
   d4cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4cbc:	9301      	str	r3, [sp, #4]
   d4cbe:	bd08      	pop	{r3, pc}
   d4cc0:	00030220 	.word	0x00030220

000d4cc4 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d4cc4:	b508      	push	{r3, lr}
   d4cc6:	4b02      	ldr	r3, [pc, #8]	; (d4cd0 <application_thread_current+0xc>)
   d4cc8:	681b      	ldr	r3, [r3, #0]
   d4cca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d4ccc:	9301      	str	r3, [sp, #4]
   d4cce:	bd08      	pop	{r3, pc}
   d4cd0:	00030220 	.word	0x00030220

000d4cd4 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d4cd4:	b508      	push	{r3, lr}
   d4cd6:	4b02      	ldr	r3, [pc, #8]	; (d4ce0 <application_thread_invoke+0xc>)
   d4cd8:	681b      	ldr	r3, [r3, #0]
   d4cda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d4cdc:	9301      	str	r3, [sp, #4]
   d4cde:	bd08      	pop	{r3, pc}
   d4ce0:	00030220 	.word	0x00030220

000d4ce4 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4ce4:	b508      	push	{r3, lr}
   d4ce6:	4b03      	ldr	r3, [pc, #12]	; (d4cf4 <system_ctrl_set_app_request_handler+0x10>)
   d4ce8:	681b      	ldr	r3, [r3, #0]
   d4cea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d4cee:	9301      	str	r3, [sp, #4]
   d4cf0:	bd08      	pop	{r3, pc}
   d4cf2:	0000      	.short	0x0000
   d4cf4:	00030220 	.word	0x00030220

000d4cf8 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d4cf8:	b508      	push	{r3, lr}
   d4cfa:	4b03      	ldr	r3, [pc, #12]	; (d4d08 <system_ctrl_set_result+0x10>)
   d4cfc:	681b      	ldr	r3, [r3, #0]
   d4cfe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d4d02:	9301      	str	r3, [sp, #4]
   d4d04:	bd08      	pop	{r3, pc}
   d4d06:	0000      	.short	0x0000
   d4d08:	00030220 	.word	0x00030220

000d4d0c <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d4d0c:	b508      	push	{r3, lr}
   d4d0e:	4b02      	ldr	r3, [pc, #8]	; (d4d18 <spark_process+0xc>)
   d4d10:	681b      	ldr	r3, [r3, #0]
   d4d12:	689b      	ldr	r3, [r3, #8]
   d4d14:	9301      	str	r3, [sp, #4]
   d4d16:	bd08      	pop	{r3, pc}
   d4d18:	00030244 	.word	0x00030244

000d4d1c <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   d4d1c:	b508      	push	{r3, lr}
   d4d1e:	4b02      	ldr	r3, [pc, #8]	; (d4d28 <spark_cloud_flag_connect+0xc>)
   d4d20:	681b      	ldr	r3, [r3, #0]
   d4d22:	68db      	ldr	r3, [r3, #12]
   d4d24:	9301      	str	r3, [sp, #4]
   d4d26:	bd08      	pop	{r3, pc}
   d4d28:	00030244 	.word	0x00030244

000d4d2c <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d4d2c:	b508      	push	{r3, lr}
   d4d2e:	4b02      	ldr	r3, [pc, #8]	; (d4d38 <spark_cloud_flag_connected+0xc>)
   d4d30:	681b      	ldr	r3, [r3, #0]
   d4d32:	695b      	ldr	r3, [r3, #20]
   d4d34:	9301      	str	r3, [sp, #4]
   d4d36:	bd08      	pop	{r3, pc}
   d4d38:	00030244 	.word	0x00030244

000d4d3c <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d4d3c:	b508      	push	{r3, lr}
   d4d3e:	4b02      	ldr	r3, [pc, #8]	; (d4d48 <spark_send_event+0xc>)
   d4d40:	681b      	ldr	r3, [r3, #0]
   d4d42:	6a1b      	ldr	r3, [r3, #32]
   d4d44:	9301      	str	r3, [sp, #4]
   d4d46:	bd08      	pop	{r3, pc}
   d4d48:	00030244 	.word	0x00030244

000d4d4c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d4d4c:	b508      	push	{r3, lr}
   d4d4e:	4b02      	ldr	r3, [pc, #8]	; (d4d58 <spark_set_random_seed_from_cloud_handler+0xc>)
   d4d50:	681b      	ldr	r3, [r3, #0]
   d4d52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4d54:	9301      	str	r3, [sp, #4]
   d4d56:	bd08      	pop	{r3, pc}
   d4d58:	00030244 	.word	0x00030244

000d4d5c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d4d5c:	b508      	push	{r3, lr}
   d4d5e:	4b02      	ldr	r3, [pc, #8]	; (d4d68 <network_connect+0xc>)
   d4d60:	681b      	ldr	r3, [r3, #0]
   d4d62:	685b      	ldr	r3, [r3, #4]
   d4d64:	9301      	str	r3, [sp, #4]
   d4d66:	bd08      	pop	{r3, pc}
   d4d68:	00030240 	.word	0x00030240

000d4d6c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d4d6c:	b508      	push	{r3, lr}
   d4d6e:	4b02      	ldr	r3, [pc, #8]	; (d4d78 <network_connecting+0xc>)
   d4d70:	681b      	ldr	r3, [r3, #0]
   d4d72:	689b      	ldr	r3, [r3, #8]
   d4d74:	9301      	str	r3, [sp, #4]
   d4d76:	bd08      	pop	{r3, pc}
   d4d78:	00030240 	.word	0x00030240

000d4d7c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d4d7c:	b508      	push	{r3, lr}
   d4d7e:	4b02      	ldr	r3, [pc, #8]	; (d4d88 <network_disconnect+0xc>)
   d4d80:	681b      	ldr	r3, [r3, #0]
   d4d82:	68db      	ldr	r3, [r3, #12]
   d4d84:	9301      	str	r3, [sp, #4]
   d4d86:	bd08      	pop	{r3, pc}
   d4d88:	00030240 	.word	0x00030240

000d4d8c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d4d8c:	b508      	push	{r3, lr}
   d4d8e:	4b02      	ldr	r3, [pc, #8]	; (d4d98 <network_ready+0xc>)
   d4d90:	681b      	ldr	r3, [r3, #0]
   d4d92:	691b      	ldr	r3, [r3, #16]
   d4d94:	9301      	str	r3, [sp, #4]
   d4d96:	bd08      	pop	{r3, pc}
   d4d98:	00030240 	.word	0x00030240

000d4d9c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d4d9c:	b508      	push	{r3, lr}
   d4d9e:	4b02      	ldr	r3, [pc, #8]	; (d4da8 <network_on+0xc>)
   d4da0:	681b      	ldr	r3, [r3, #0]
   d4da2:	695b      	ldr	r3, [r3, #20]
   d4da4:	9301      	str	r3, [sp, #4]
   d4da6:	bd08      	pop	{r3, pc}
   d4da8:	00030240 	.word	0x00030240

000d4dac <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d4dac:	b508      	push	{r3, lr}
   d4dae:	4b02      	ldr	r3, [pc, #8]	; (d4db8 <network_off+0xc>)
   d4db0:	681b      	ldr	r3, [r3, #0]
   d4db2:	699b      	ldr	r3, [r3, #24]
   d4db4:	9301      	str	r3, [sp, #4]
   d4db6:	bd08      	pop	{r3, pc}
   d4db8:	00030240 	.word	0x00030240

000d4dbc <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d4dbc:	b508      	push	{r3, lr}
   d4dbe:	4b02      	ldr	r3, [pc, #8]	; (d4dc8 <network_listen+0xc>)
   d4dc0:	681b      	ldr	r3, [r3, #0]
   d4dc2:	69db      	ldr	r3, [r3, #28]
   d4dc4:	9301      	str	r3, [sp, #4]
   d4dc6:	bd08      	pop	{r3, pc}
   d4dc8:	00030240 	.word	0x00030240

000d4dcc <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d4dcc:	b508      	push	{r3, lr}
   d4dce:	4b02      	ldr	r3, [pc, #8]	; (d4dd8 <network_listening+0xc>)
   d4dd0:	681b      	ldr	r3, [r3, #0]
   d4dd2:	6a1b      	ldr	r3, [r3, #32]
   d4dd4:	9301      	str	r3, [sp, #4]
   d4dd6:	bd08      	pop	{r3, pc}
   d4dd8:	00030240 	.word	0x00030240

000d4ddc <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d4ddc:	b508      	push	{r3, lr}
   d4dde:	4b02      	ldr	r3, [pc, #8]	; (d4de8 <network_set_listen_timeout+0xc>)
   d4de0:	681b      	ldr	r3, [r3, #0]
   d4de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4de4:	9301      	str	r3, [sp, #4]
   d4de6:	bd08      	pop	{r3, pc}
   d4de8:	00030240 	.word	0x00030240

000d4dec <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d4dec:	b508      	push	{r3, lr}
   d4dee:	4b02      	ldr	r3, [pc, #8]	; (d4df8 <network_get_listen_timeout+0xc>)
   d4df0:	681b      	ldr	r3, [r3, #0]
   d4df2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4df4:	9301      	str	r3, [sp, #4]
   d4df6:	bd08      	pop	{r3, pc}
   d4df8:	00030240 	.word	0x00030240

000d4dfc <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d4dfc:	b508      	push	{r3, lr}
   d4dfe:	4b02      	ldr	r3, [pc, #8]	; (d4e08 <malloc+0xc>)
   d4e00:	681b      	ldr	r3, [r3, #0]
   d4e02:	681b      	ldr	r3, [r3, #0]
   d4e04:	9301      	str	r3, [sp, #4]
   d4e06:	bd08      	pop	{r3, pc}
   d4e08:	0003021c 	.word	0x0003021c

000d4e0c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d4e0c:	b508      	push	{r3, lr}
   d4e0e:	4b02      	ldr	r3, [pc, #8]	; (d4e18 <free+0xc>)
   d4e10:	681b      	ldr	r3, [r3, #0]
   d4e12:	685b      	ldr	r3, [r3, #4]
   d4e14:	9301      	str	r3, [sp, #4]
   d4e16:	bd08      	pop	{r3, pc}
   d4e18:	0003021c 	.word	0x0003021c

000d4e1c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d4e1c:	b508      	push	{r3, lr}
   d4e1e:	4b02      	ldr	r3, [pc, #8]	; (d4e28 <realloc+0xc>)
   d4e20:	681b      	ldr	r3, [r3, #0]
   d4e22:	689b      	ldr	r3, [r3, #8]
   d4e24:	9301      	str	r3, [sp, #4]
   d4e26:	bd08      	pop	{r3, pc}
   d4e28:	0003021c 	.word	0x0003021c

000d4e2c <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d4e2c:	b508      	push	{r3, lr}
   d4e2e:	4b02      	ldr	r3, [pc, #8]	; (d4e38 <vsnprintf+0xc>)
   d4e30:	681b      	ldr	r3, [r3, #0]
   d4e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4e34:	9301      	str	r3, [sp, #4]
   d4e36:	bd08      	pop	{r3, pc}
   d4e38:	0003021c 	.word	0x0003021c

000d4e3c <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d4e3c:	b508      	push	{r3, lr}
   d4e3e:	4b02      	ldr	r3, [pc, #8]	; (d4e48 <abort+0xc>)
   d4e40:	681b      	ldr	r3, [r3, #0]
   d4e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4e44:	9301      	str	r3, [sp, #4]
   d4e46:	bd08      	pop	{r3, pc}
   d4e48:	0003021c 	.word	0x0003021c

000d4e4c <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d4e4c:	b508      	push	{r3, lr}
   d4e4e:	4b02      	ldr	r3, [pc, #8]	; (d4e58 <_malloc_r+0xc>)
   d4e50:	681b      	ldr	r3, [r3, #0]
   d4e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4e54:	9301      	str	r3, [sp, #4]
   d4e56:	bd08      	pop	{r3, pc}
   d4e58:	0003021c 	.word	0x0003021c

000d4e5c <_Z3mapiiiii>:
    HAL_ADC_Set_Sample_Time(ADC_SampleTime);
}

int map(int value, int fromStart, int fromEnd, int toStart, int toEnd)
{
    if (fromEnd == fromStart) {
   d4e5c:	428a      	cmp	r2, r1
{
    HAL_ADC_Set_Sample_Time(ADC_SampleTime);
}

int map(int value, int fromStart, int fromEnd, int toStart, int toEnd)
{
   d4e5e:	b530      	push	{r4, r5, lr}
    if (fromEnd == fromStart) {
   d4e60:	d007      	beq.n	d4e72 <_Z3mapiiiii+0x16>
        return value;
    }
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
   d4e62:	9d03      	ldr	r5, [sp, #12]
   d4e64:	1a44      	subs	r4, r0, r1
   d4e66:	1aed      	subs	r5, r5, r3
   d4e68:	436c      	muls	r4, r5
   d4e6a:	1a52      	subs	r2, r2, r1
   d4e6c:	fb94 f4f2 	sdiv	r4, r4, r2
   d4e70:	18e0      	adds	r0, r4, r3
}
   d4e72:	bd30      	pop	{r4, r5, pc}

000d4e74 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d4e74:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4e76:	6883      	ldr	r3, [r0, #8]
   d4e78:	4604      	mov	r4, r0
   d4e7a:	b90b      	cbnz	r3, d4e80 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d4e7c:	f002 fb73 	bl	d7566 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4e80:	68c3      	ldr	r3, [r0, #12]
   d4e82:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d4e84:	68a3      	ldr	r3, [r4, #8]
   d4e86:	b11b      	cbz	r3, d4e90 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4e88:	2203      	movs	r2, #3
   d4e8a:	4621      	mov	r1, r4
   d4e8c:	4620      	mov	r0, r4
   d4e8e:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d4e90:	4620      	mov	r0, r4
   d4e92:	2110      	movs	r1, #16
}
   d4e94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d4e98:	f002 bb49 	b.w	d752e <_ZdlPvj>

000d4e9c <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d4e9c:	b510      	push	{r4, lr}
   d4e9e:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d4ea0:	6800      	ldr	r0, [r0, #0]
   d4ea2:	b108      	cbz	r0, d4ea8 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d4ea4:	f7ff fd96 	bl	d49d4 <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d4ea8:	4620      	mov	r0, r4
   d4eaa:	bd10      	pop	{r4, pc}

000d4eac <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d4eac:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d4eae:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d4eb0:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d4eb2:	689b      	ldr	r3, [r3, #8]
   d4eb4:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4eb6:	68a3      	ldr	r3, [r4, #8]
   d4eb8:	3b01      	subs	r3, #1
   d4eba:	60a3      	str	r3, [r4, #8]
   d4ebc:	b92b      	cbnz	r3, d4eca <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112+0x1e>
            _M_destroy();
   d4ebe:	6823      	ldr	r3, [r4, #0]
   d4ec0:	4620      	mov	r0, r4
   d4ec2:	68db      	ldr	r3, [r3, #12]
        }
    }
   d4ec4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   d4ec8:	4718      	bx	r3
   d4eca:	bd10      	pop	{r4, pc}

000d4ecc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d4ecc:	680b      	ldr	r3, [r1, #0]
   d4ece:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d4ed0:	b113      	cbz	r3, d4ed8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d4ed2:	685a      	ldr	r2, [r3, #4]
   d4ed4:	3201      	adds	r2, #1
   d4ed6:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d4ed8:	4770      	bx	lr

000d4eda <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d4eda:	b510      	push	{r4, lr}
   d4edc:	4604      	mov	r4, r0
      {
	if (_M_pi != nullptr)
   d4ede:	6800      	ldr	r0, [r0, #0]
   d4ee0:	b128      	cbz	r0, d4eee <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d4ee2:	6843      	ldr	r3, [r0, #4]
   d4ee4:	3b01      	subs	r3, #1
   d4ee6:	6043      	str	r3, [r0, #4]
   d4ee8:	b90b      	cbnz	r3, d4eee <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
   d4eea:	f7ff ffdf 	bl	d4eac <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112>

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d4eee:	4620      	mov	r0, r4
   d4ef0:	bd10      	pop	{r4, pc}

000d4ef2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>:
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }

      __shared_count&
      operator=(const __shared_count& __r) noexcept
   d4ef2:	b538      	push	{r3, r4, r5, lr}
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d4ef4:	680c      	ldr	r4, [r1, #0]
	if (__tmp != _M_pi)
   d4ef6:	6803      	ldr	r3, [r0, #0]
   d4ef8:	429c      	cmp	r4, r3
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }

      __shared_count&
      operator=(const __shared_count& __r) noexcept
   d4efa:	4605      	mov	r5, r0
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	if (__tmp != _M_pi)
   d4efc:	d00c      	beq.n	d4f18 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x26>
	  {
	    if (__tmp != 0)
   d4efe:	b114      	cbz	r4, d4f06 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x14>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d4f00:	6863      	ldr	r3, [r4, #4]
   d4f02:	3301      	adds	r3, #1
   d4f04:	6063      	str	r3, [r4, #4]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	if (__tmp != _M_pi)
	  {
	    if (__tmp != 0)
	      __tmp->_M_add_ref_copy();
	    if (_M_pi != 0)
   d4f06:	6828      	ldr	r0, [r5, #0]
   d4f08:	b128      	cbz	r0, d4f16 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x24>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d4f0a:	6843      	ldr	r3, [r0, #4]
   d4f0c:	3b01      	subs	r3, #1
   d4f0e:	6043      	str	r3, [r0, #4]
   d4f10:	b90b      	cbnz	r3, d4f16 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x24>
   d4f12:	f7ff ffcb 	bl	d4eac <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112>
	  {
	    if (__tmp != 0)
	      __tmp->_M_add_ref_copy();
	    if (_M_pi != 0)
	      _M_pi->_M_release();
	    _M_pi = __tmp;
   d4f16:	602c      	str	r4, [r5, #0]
	  }
	return *this;
      }
   d4f18:	4628      	mov	r0, r5
   d4f1a:	bd38      	pop	{r3, r4, r5, pc}

000d4f1c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d4f1c:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d4f1e:	4c06      	ldr	r4, [pc, #24]	; (d4f38 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d4f20:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d4f22:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d4f24:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d4f26:	f7ff fd4d 	bl	d49c4 <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d4f2a:	4620      	mov	r0, r4
   d4f2c:	4a03      	ldr	r2, [pc, #12]	; (d4f3c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d4f2e:	4904      	ldr	r1, [pc, #16]	; (d4f40 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d4f30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d4f34:	f002 baf6 	b.w	d7524 <__aeabi_atexit>
   d4f38:	2003e4a4 	.word	0x2003e4a4
   d4f3c:	2003e408 	.word	0x2003e408
   d4f40:	000d4e9d 	.word	0x000d4e9d

000d4f44 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d4f44:	4770      	bx	lr

000d4f46 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
   d4f46:	2000      	movs	r0, #0
   d4f48:	4770      	bx	lr

000d4f4a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d4f4a:	b510      	push	{r4, lr}
   d4f4c:	2110      	movs	r1, #16
   d4f4e:	4604      	mov	r4, r0
   d4f50:	f002 faed 	bl	d752e <_ZdlPvj>
   d4f54:	4620      	mov	r0, r4
   d4f56:	bd10      	pop	{r4, pc}

000d4f58 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
   d4f58:	b508      	push	{r3, lr}
      { delete this; }
   d4f5a:	b108      	cbz	r0, d4f60 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
   d4f5c:	f7ff fff5 	bl	d4f4a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d4f60:	bd08      	pop	{r3, pc}

000d4f62 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4f62:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d4f64:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4f66:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d4f68:	b113      	cbz	r3, d4f70 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4f6a:	2203      	movs	r2, #3
   d4f6c:	4601      	mov	r1, r0
   d4f6e:	4798      	blx	r3
    }
   d4f70:	4620      	mov	r0, r4
   d4f72:	bd10      	pop	{r4, pc}

000d4f74 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d4f74:	2200      	movs	r2, #0
   d4f76:	6002      	str	r2, [r0, #0]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d4f78:	b510      	push	{r4, lr}

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d4f7a:	f64f 729c 	movw	r2, #65436	; 0xff9c
   d4f7e:	8082      	strh	r2, [r0, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d4f80:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
   d4f84:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d4f86:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4f88:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   d4f8a:	680c      	ldr	r4, [r1, #0]
   d4f8c:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d4f8e:	600a      	str	r2, [r1, #0]
}

inline particle::Error::Error(Error&& error) :
        Error() {
    swap(*this, error);
}
   d4f90:	bd10      	pop	{r4, pc}

000d4f92 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d4f92:	b510      	push	{r4, lr}
   d4f94:	4604      	mov	r4, r0
    free((void*)msg_);
   d4f96:	6800      	ldr	r0, [r0, #0]
   d4f98:	f7ff ff38 	bl	d4e0c <free>
}
   d4f9c:	4620      	mov	r0, r4
   d4f9e:	bd10      	pop	{r4, pc}

000d4fa0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
   d4fa0:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d4fa2:	68c4      	ldr	r4, [r0, #12]
   d4fa4:	b1f4      	cbz	r4, d4fe4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
   d4fa6:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d4fa8:	2b02      	cmp	r3, #2
   d4faa:	d103      	bne.n	d4fb4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d4fac:	f104 000c 	add.w	r0, r4, #12
   d4fb0:	f7ff ffef 	bl	d4f92 <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
   d4fb4:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
   d4fb6:	b135      	cbz	r5, d4fc6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4fb8:	4628      	mov	r0, r5
   d4fba:	f7ff ffd2 	bl	d4f62 <_ZNSt14_Function_baseD1Ev>
   d4fbe:	2110      	movs	r1, #16
   d4fc0:	4628      	mov	r0, r5
   d4fc2:	f002 fab4 	bl	d752e <_ZdlPvj>
   d4fc6:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d4fc8:	b135      	cbz	r5, d4fd8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d4fca:	4628      	mov	r0, r5
   d4fcc:	f7ff ffc9 	bl	d4f62 <_ZNSt14_Function_baseD1Ev>
   d4fd0:	2110      	movs	r1, #16
   d4fd2:	4628      	mov	r0, r5
   d4fd4:	f002 faab 	bl	d752e <_ZdlPvj>
   d4fd8:	4620      	mov	r0, r4
   d4fda:	2114      	movs	r1, #20
   d4fdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d4fe0:	f002 baa5 	b.w	d752e <_ZdlPvj>
   d4fe4:	bd38      	pop	{r3, r4, r5, pc}

000d4fe6 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
   d4fe6:	b513      	push	{r0, r1, r4, lr}
   d4fe8:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d4fea:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
   d4fee:	2300      	movs	r3, #0
   d4ff0:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d4ff2:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d4ff4:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d4ff6:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4ff8:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d4ffa:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d4ffc:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4ffe:	f7ff ff6c 	bl	d4eda <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5002:	4620      	mov	r0, r4
   d5004:	b002      	add	sp, #8
   d5006:	bd10      	pop	{r4, pc}

000d5008 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d5008:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d500a:	460c      	mov	r4, r1
   d500c:	ad02      	add	r5, sp, #8
   d500e:	f854 3b04 	ldr.w	r3, [r4], #4
   d5012:	f845 3d08 	str.w	r3, [r5, #-8]!
   d5016:	4606      	mov	r6, r0
   d5018:	460f      	mov	r7, r1
   d501a:	a801      	add	r0, sp, #4
   d501c:	4621      	mov	r1, r4
   d501e:	f7ff ff55 	bl	d4ecc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
   d5022:	4629      	mov	r1, r5
   d5024:	4630      	mov	r0, r6
   d5026:	f7ff ffde 	bl	d4fe6 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d502a:	a801      	add	r0, sp, #4
   d502c:	f7ff ff55 	bl	d4eda <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5030:	4620      	mov	r0, r4
   d5032:	f7ff ff52 	bl	d4eda <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
   d5036:	4638      	mov	r0, r7
   d5038:	2108      	movs	r1, #8
   d503a:	f002 fa78 	bl	d752e <_ZdlPvj>
        return p;
    }
   d503e:	4630      	mov	r0, r6
   d5040:	b003      	add	sp, #12
   d5042:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5044 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   d5044:	b513      	push	{r0, r1, r4, lr}
   d5046:	460b      	mov	r3, r1
   d5048:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d504a:	c803      	ldmia	r0, {r0, r1}
   d504c:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d5050:	e893 0003 	ldmia.w	r3, {r0, r1}
   d5054:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d5058:	e89d 0003 	ldmia.w	sp, {r0, r1}
   d505c:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d5060:	b002      	add	sp, #8
   d5062:	bd10      	pop	{r4, pc}

000d5064 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d5064:	b538      	push	{r3, r4, r5, lr}
   d5066:	2300      	movs	r3, #0
   d5068:	4604      	mov	r4, r0
   d506a:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d506c:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d506e:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d5070:	f7ff f811 	bl	d4096 <_Znwj>
   d5074:	b128      	cbz	r0, d5082 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d5076:	2301      	movs	r3, #1
   d5078:	6043      	str	r3, [r0, #4]
   d507a:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
   d507c:	4b02      	ldr	r3, [pc, #8]	; (d5088 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d507e:	6003      	str	r3, [r0, #0]
   d5080:	60c5      	str	r5, [r0, #12]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d5082:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
   d5084:	4620      	mov	r0, r4
   d5086:	bd38      	pop	{r3, r4, r5, pc}
   d5088:	000d8024 	.word	0x000d8024

000d508c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d508c:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d508e:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5090:	b90a      	cbnz	r2, d5096 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d5092:	f002 fa68 	bl	d7566 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5096:	68c3      	ldr	r3, [r0, #12]
    }
   d5098:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d509c:	4718      	bx	r3

000d509e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d509e:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d50a0:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d50a2:	f100 0110 	add.w	r1, r0, #16
   d50a6:	f7ff fff1 	bl	d508c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d50aa:	bd08      	pop	{r3, pc}

000d50ac <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d50ac:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d50ae:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d50b0:	b90a      	cbnz	r2, d50b6 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d50b2:	f002 fa58 	bl	d7566 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d50b6:	68c3      	ldr	r3, [r0, #12]
    }
   d50b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d50bc:	4718      	bx	r3

000d50be <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d50be:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d50c0:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d50c2:	f100 0110 	add.w	r1, r0, #16
   d50c6:	f7ff fff1 	bl	d50ac <_ZNKSt8functionIFvRKbEEclES1_>
   d50ca:	bd08      	pop	{r3, pc}

000d50cc <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d50cc:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d50ce:	2300      	movs	r3, #0
   d50d0:	6083      	str	r3, [r0, #8]
   d50d2:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d50d4:	4604      	mov	r4, r0
   d50d6:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d50d8:	b12b      	cbz	r3, d50e6 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d50da:	2202      	movs	r2, #2
   d50dc:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d50de:	68eb      	ldr	r3, [r5, #12]
   d50e0:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d50e2:	68ab      	ldr	r3, [r5, #8]
   d50e4:	60a3      	str	r3, [r4, #8]
	}
    }
   d50e6:	4620      	mov	r0, r4
   d50e8:	bd38      	pop	{r3, r4, r5, pc}
	...

000d50ec <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
   d50ec:	b5f0      	push	{r4, r5, r6, r7, lr}
   d50ee:	b089      	sub	sp, #36	; 0x24
   d50f0:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d50f2:	4668      	mov	r0, sp
   d50f4:	f7ff ff3e 	bl	d4f74 <_ZN8particle5ErrorC1EOS0_>
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d50f8:	2300      	movs	r3, #0
   d50fa:	f88d 3008 	strb.w	r3, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d50fe:	f04f 0202 	mov.w	r2, #2
   d5102:	e8d4 3f4f 	ldrexb	r3, [r4]
   d5106:	2b00      	cmp	r3, #0
   d5108:	d103      	bne.n	d5112 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
   d510a:	e8c4 2f41 	strexb	r1, r2, [r4]
   d510e:	2900      	cmp	r1, #0
   d5110:	d1f7      	bne.n	d5102 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
   d5112:	d002      	beq.n	d511a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
   d5114:	f88d 3008 	strb.w	r3, [sp, #8]
   d5118:	e063      	b.n	d51e2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
   d511a:	f114 050c 	adds.w	r5, r4, #12
   d511e:	d003      	beq.n	d5128 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
   d5120:	4669      	mov	r1, sp
   d5122:	4628      	mov	r0, r5
   d5124:	f7ff ff26 	bl	d4f74 <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d5128:	f3bf 8f5f 	dmb	sy
   d512c:	2301      	movs	r3, #1
   d512e:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d5130:	2000      	movs	r0, #0
   d5132:	f104 0308 	add.w	r3, r4, #8
   d5136:	f3bf 8f5f 	dmb	sy
   d513a:	e853 6f00 	ldrex	r6, [r3]
   d513e:	e843 0200 	strex	r2, r0, [r3]
   d5142:	2a00      	cmp	r2, #0
   d5144:	d1f9      	bne.n	d513a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
   d5146:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d514a:	2e00      	cmp	r6, #0
   d514c:	d049      	beq.n	d51e2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d514e:	f7ff fdb9 	bl	d4cc4 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d5152:	b120      	cbz	r0, d515e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d5154:	4629      	mov	r1, r5
   d5156:	4630      	mov	r0, r6
   d5158:	f7ff ff98 	bl	d508c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d515c:	e03a      	b.n	d51d4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d515e:	4631      	mov	r1, r6
   d5160:	a802      	add	r0, sp, #8
   d5162:	f7ff ffb3 	bl	d50cc <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d5166:	68e0      	ldr	r0, [r4, #12]
   d5168:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d516c:	b108      	cbz	r0, d5172 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
   d516e:	f002 fd8b 	bl	d7c88 <strdup>
   d5172:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d5174:	2010      	movs	r0, #16
   d5176:	f8ad 501c 	strh.w	r5, [sp, #28]
   d517a:	f7fe ff8c 	bl	d4096 <_Znwj>
   d517e:	4605      	mov	r5, r0
   d5180:	b1e8      	cbz	r0, d51be <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5182:	2700      	movs	r7, #0
   d5184:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5186:	2018      	movs	r0, #24
   d5188:	f7fe ff85 	bl	d4096 <_Znwj>
   d518c:	4604      	mov	r4, r0
   d518e:	b188      	cbz	r0, d51b4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d5190:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5192:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d5194:	a802      	add	r0, sp, #8
   d5196:	f7ff ff55 	bl	d5044 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d519a:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d519c:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d519e:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d51a0:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d51a2:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d51a4:	a906      	add	r1, sp, #24
   d51a6:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d51a8:	60e3      	str	r3, [r4, #12]
   d51aa:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d51ae:	9205      	str	r2, [sp, #20]
   d51b0:	f7ff fee0 	bl	d4f74 <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d51b4:	4b0d      	ldr	r3, [pc, #52]	; (d51ec <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
   d51b6:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d51b8:	4b0d      	ldr	r3, [pc, #52]	; (d51f0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d51ba:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d51bc:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
   d51be:	a806      	add	r0, sp, #24
   d51c0:	f7ff fee7 	bl	d4f92 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d51c4:	a802      	add	r0, sp, #8
   d51c6:	f7ff fecc 	bl	d4f62 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d51ca:	2200      	movs	r2, #0
   d51cc:	4629      	mov	r1, r5
   d51ce:	4809      	ldr	r0, [pc, #36]	; (d51f4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
   d51d0:	f7ff fd80 	bl	d4cd4 <application_thread_invoke>
   d51d4:	4630      	mov	r0, r6
   d51d6:	f7ff fec4 	bl	d4f62 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d51da:	2110      	movs	r1, #16
   d51dc:	4630      	mov	r0, r6
   d51de:	f002 f9a6 	bl	d752e <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
   d51e2:	4668      	mov	r0, sp
   d51e4:	f7ff fed5 	bl	d4f92 <_ZN8particle5ErrorD1Ev>
    }
   d51e8:	b009      	add	sp, #36	; 0x24
   d51ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d51ec:	000d509f 	.word	0x000d509f
   d51f0:	000d5315 	.word	0x000d5315
   d51f4:	000d4e75 	.word	0x000d4e75

000d51f8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d51f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d51fc:	b08b      	sub	sp, #44	; 0x2c
   d51fe:	4606      	mov	r6, r0
   d5200:	460f      	mov	r7, r1
   d5202:	4690      	mov	r8, r2
   d5204:	4699      	mov	r9, r3
   d5206:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d520a:	f7ff fd8f 	bl	d4d2c <spark_cloud_flag_connected>
   d520e:	ad07      	add	r5, sp, #28
    if (!connected()) {
   d5210:	4683      	mov	fp, r0
   d5212:	bb30      	cbnz	r0, d5262 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d5214:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d5218:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d521a:	a905      	add	r1, sp, #20
   d521c:	4628      	mov	r0, r5
   d521e:	f8ad 3018 	strh.w	r3, [sp, #24]
   d5222:	f7ff fea7 	bl	d4f74 <_ZN8particle5ErrorC1EOS0_>
   d5226:	2014      	movs	r0, #20
   d5228:	f7fe ff35 	bl	d4096 <_Znwj>
   d522c:	4604      	mov	r4, r0
   d522e:	b158      	cbz	r0, d5248 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d5230:	2302      	movs	r3, #2
   d5232:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d5234:	2301      	movs	r3, #1
   d5236:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d5238:	f8c0 b004 	str.w	fp, [r0, #4]
   d523c:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
   d5240:	4629      	mov	r1, r5
   d5242:	300c      	adds	r0, #12
   d5244:	f7ff fe96 	bl	d4f74 <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
   d5248:	4630      	mov	r0, r6
   d524a:	4621      	mov	r1, r4
   d524c:	f840 4b04 	str.w	r4, [r0], #4
   d5250:	f7ff ff08 	bl	d5064 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d5254:	4628      	mov	r0, r5
   d5256:	f7ff fe9c 	bl	d4f92 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d525a:	a805      	add	r0, sp, #20
   d525c:	f7ff fe99 	bl	d4f92 <_ZN8particle5ErrorD1Ev>
   d5260:	e052      	b.n	d5308 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d5262:	2400      	movs	r4, #0
   d5264:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d5266:	2014      	movs	r0, #20
   d5268:	606c      	str	r4, [r5, #4]
   d526a:	60ac      	str	r4, [r5, #8]
   d526c:	9307      	str	r3, [sp, #28]
   d526e:	f7fe ff12 	bl	d4096 <_Znwj>
   d5272:	4601      	mov	r1, r0
   d5274:	b118      	cbz	r0, d527e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
   d5276:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d5278:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d527a:	6044      	str	r4, [r0, #4]
   d527c:	6084      	str	r4, [r0, #8]
   d527e:	a804      	add	r0, sp, #16
   d5280:	9103      	str	r1, [sp, #12]
   d5282:	f7ff feef 	bl	d5064 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
   d5286:	4b22      	ldr	r3, [pc, #136]	; (d5310 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
   d5288:	9308      	str	r3, [sp, #32]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d528a:	2008      	movs	r0, #8
   d528c:	f7fe ff03 	bl	d4096 <_Znwj>
   d5290:	4604      	mov	r4, r0
   d5292:	b128      	cbz	r0, d52a0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5294:	9b03      	ldr	r3, [sp, #12]
   d5296:	f840 3b04 	str.w	r3, [r0], #4
   d529a:	a904      	add	r1, sp, #16
   d529c:	f7ff fe16 	bl	d4ecc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d52a0:	9500      	str	r5, [sp, #0]
   d52a2:	fa5f f38a 	uxtb.w	r3, sl
   d52a6:	464a      	mov	r2, r9
   d52a8:	4641      	mov	r1, r8
   d52aa:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
   d52ac:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d52ae:	f7ff fd45 	bl	d4d3c <spark_send_event>
   d52b2:	b920      	cbnz	r0, d52be <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   d52b4:	9b03      	ldr	r3, [sp, #12]
   d52b6:	785b      	ldrb	r3, [r3, #1]
   d52b8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d52bc:	b183      	cbz	r3, d52e0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   d52be:	9b03      	ldr	r3, [sp, #12]
   d52c0:	9305      	str	r3, [sp, #20]
   d52c2:	a904      	add	r1, sp, #16
   d52c4:	a806      	add	r0, sp, #24
   d52c6:	f7ff fe01 	bl	d4ecc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
   d52ca:	a905      	add	r1, sp, #20
   d52cc:	4630      	mov	r0, r6
   d52ce:	f7ff fe8a 	bl	d4fe6 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d52d2:	a806      	add	r0, sp, #24
   d52d4:	f7ff fe01 	bl	d4eda <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d52d8:	a804      	add	r0, sp, #16
   d52da:	f7ff fdfe 	bl	d4eda <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d52de:	e013      	b.n	d5308 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
   d52e0:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
   d52e4:	a905      	add	r1, sp, #20
   d52e6:	a803      	add	r0, sp, #12
   d52e8:	9205      	str	r2, [sp, #20]
   d52ea:	f8ad 3018 	strh.w	r3, [sp, #24]
   d52ee:	f7ff fefd 	bl	d50ec <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d52f2:	a805      	add	r0, sp, #20
   d52f4:	f7ff fe4d 	bl	d4f92 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d52f8:	a805      	add	r0, sp, #20
   d52fa:	9909      	ldr	r1, [sp, #36]	; 0x24
   d52fc:	f7ff fe84 	bl	d5008 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
   d5300:	a806      	add	r0, sp, #24
   d5302:	f7ff fdea 	bl	d4eda <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5306:	e7da      	b.n	d52be <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
    }

    return p.future();
}
   d5308:	4630      	mov	r0, r6
   d530a:	b00b      	add	sp, #44	; 0x2c
   d530c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5310:	000d5485 	.word	0x000d5485

000d5314 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d5314:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d5316:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5318:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d531a:	d006      	beq.n	d532a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   d531c:	2a03      	cmp	r2, #3
   d531e:	d017      	beq.n	d5350 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
   d5320:	2a01      	cmp	r2, #1
   d5322:	d122      	bne.n	d536a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d5324:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d5326:	6003      	str	r3, [r0, #0]
	      break;
   d5328:	e01f      	b.n	d536a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d532a:	2018      	movs	r0, #24
   d532c:	680e      	ldr	r6, [r1, #0]
   d532e:	f7fe feb2 	bl	d4096 <_Znwj>
   d5332:	4605      	mov	r5, r0
   d5334:	b150      	cbz	r0, d534c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d5336:	4631      	mov	r1, r6
   d5338:	f7ff fec8 	bl	d50cc <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d533c:	6930      	ldr	r0, [r6, #16]
   d533e:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d5342:	b108      	cbz	r0, d5348 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
   d5344:	f002 fca0 	bl	d7c88 <strdup>
   d5348:	6128      	str	r0, [r5, #16]
   d534a:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d534c:	6025      	str	r5, [r4, #0]
   d534e:	e00c      	b.n	d536a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d5350:	6804      	ldr	r4, [r0, #0]
   d5352:	b154      	cbz	r4, d536a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
   d5354:	f104 0010 	add.w	r0, r4, #16
   d5358:	f7ff fe1b 	bl	d4f92 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d535c:	4620      	mov	r0, r4
   d535e:	f7ff fe00 	bl	d4f62 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d5362:	2118      	movs	r1, #24
   d5364:	4620      	mov	r0, r4
   d5366:	f002 f8e2 	bl	d752e <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d536a:	2000      	movs	r0, #0
   d536c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d536e <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d536e:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5370:	2300      	movs	r3, #0
   d5372:	6083      	str	r3, [r0, #8]
   d5374:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d5376:	4604      	mov	r4, r0
   d5378:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d537a:	b12b      	cbz	r3, d5388 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d537c:	2202      	movs	r2, #2
   d537e:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d5380:	68eb      	ldr	r3, [r5, #12]
   d5382:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d5384:	68ab      	ldr	r3, [r5, #8]
   d5386:	60a3      	str	r3, [r4, #8]
	}
    }
   d5388:	4620      	mov	r0, r4
   d538a:	bd38      	pop	{r3, r4, r5, pc}

000d538c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d538c:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d538e:	b570      	push	{r4, r5, r6, lr}
   d5390:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d5392:	d006      	beq.n	d53a2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
   d5394:	2a03      	cmp	r2, #3
   d5396:	d011      	beq.n	d53bc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
   d5398:	2a01      	cmp	r2, #1
   d539a:	d118      	bne.n	d53ce <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d539c:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d539e:	6003      	str	r3, [r0, #0]
	      break;
   d53a0:	e015      	b.n	d53ce <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d53a2:	2014      	movs	r0, #20
   d53a4:	680e      	ldr	r6, [r1, #0]
   d53a6:	f7fe fe76 	bl	d4096 <_Znwj>
   d53aa:	4605      	mov	r5, r0
   d53ac:	b120      	cbz	r0, d53b8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d53ae:	4631      	mov	r1, r6
   d53b0:	f7ff ffdd 	bl	d536e <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d53b4:	7c33      	ldrb	r3, [r6, #16]
   d53b6:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d53b8:	6025      	str	r5, [r4, #0]
   d53ba:	e008      	b.n	d53ce <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d53bc:	6804      	ldr	r4, [r0, #0]
   d53be:	b134      	cbz	r4, d53ce <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d53c0:	4620      	mov	r0, r4
   d53c2:	f7ff fdce 	bl	d4f62 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d53c6:	2114      	movs	r1, #20
   d53c8:	4620      	mov	r0, r4
   d53ca:	f002 f8b0 	bl	d752e <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d53ce:	2000      	movs	r0, #0
   d53d0:	bd70      	pop	{r4, r5, r6, pc}
	...

000d53d4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
   d53d4:	b5f0      	push	{r4, r5, r6, r7, lr}

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d53d6:	2300      	movs	r3, #0
   d53d8:	b087      	sub	sp, #28
   d53da:	460c      	mov	r4, r1
   d53dc:	f3bf 8f5f 	dmb	sy
   d53e0:	e850 6f00 	ldrex	r6, [r0]
   d53e4:	e840 3200 	strex	r2, r3, [r0]
   d53e8:	2a00      	cmp	r2, #0
   d53ea:	d1f9      	bne.n	d53e0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
   d53ec:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d53f0:	2e00      	cmp	r6, #0
   d53f2:	d03f      	beq.n	d5474 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d53f4:	4618      	mov	r0, r3
   d53f6:	f7ff fc65 	bl	d4cc4 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d53fa:	4607      	mov	r7, r0
   d53fc:	b120      	cbz	r0, d5408 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d53fe:	4621      	mov	r1, r4
   d5400:	4630      	mov	r0, r6
   d5402:	f7ff fe53 	bl	d50ac <_ZNKSt8functionIFvRKbEEclES1_>
   d5406:	e02e      	b.n	d5466 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d5408:	4631      	mov	r1, r6
   d540a:	a801      	add	r0, sp, #4
   d540c:	f7ff ffaf 	bl	d536e <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d5410:	7823      	ldrb	r3, [r4, #0]
   d5412:	f88d 3014 	strb.w	r3, [sp, #20]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d5416:	2010      	movs	r0, #16
   d5418:	f7fe fe3d 	bl	d4096 <_Znwj>
   d541c:	4605      	mov	r5, r0
   d541e:	b1d0      	cbz	r0, d5456 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5420:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5422:	2014      	movs	r0, #20
   d5424:	f7fe fe37 	bl	d4096 <_Znwj>
   d5428:	4604      	mov	r4, r0
   d542a:	b178      	cbz	r0, d544c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d542c:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d542e:	4601      	mov	r1, r0
   d5430:	a801      	add	r0, sp, #4
   d5432:	f7ff fe07 	bl	d5044 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5436:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d5438:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d543a:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d543c:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d543e:	9203      	str	r2, [sp, #12]
   d5440:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d5442:	60e3      	str	r3, [r4, #12]
   d5444:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d5448:	9204      	str	r2, [sp, #16]
   d544a:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d544c:	4b0a      	ldr	r3, [pc, #40]	; (d5478 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
   d544e:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d5450:	4b0a      	ldr	r3, [pc, #40]	; (d547c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5452:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d5454:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5456:	a801      	add	r0, sp, #4
   d5458:	f7ff fd83 	bl	d4f62 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d545c:	2200      	movs	r2, #0
   d545e:	4629      	mov	r1, r5
   d5460:	4807      	ldr	r0, [pc, #28]	; (d5480 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
   d5462:	f7ff fc37 	bl	d4cd4 <application_thread_invoke>
   d5466:	4630      	mov	r0, r6
   d5468:	f7ff fd7b 	bl	d4f62 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d546c:	2110      	movs	r1, #16
   d546e:	4630      	mov	r0, r6
   d5470:	f002 f85d 	bl	d752e <_ZdlPvj>
        }
    }
   d5474:	b007      	add	sp, #28
   d5476:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5478:	000d50bf 	.word	0x000d50bf
   d547c:	000d538d 	.word	0x000d538d
   d5480:	000d4e75 	.word	0x000d4e75

000d5484 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:

namespace {

using namespace particle;

void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d5484:	b530      	push	{r4, r5, lr}
   d5486:	b085      	sub	sp, #20
   d5488:	4604      	mov	r4, r0
   d548a:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d548c:	4668      	mov	r0, sp
   d548e:	4611      	mov	r1, r2
   d5490:	f7ff fdba 	bl	d5008 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d5494:	b17c      	cbz	r4, d54b6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
   d5496:	b224      	sxth	r4, r4
   d5498:	4628      	mov	r0, r5
   d549a:	b10d      	cbz	r5, d54a0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
   d549c:	f002 fbf4 	bl	d7c88 <strdup>
   d54a0:	9002      	str	r0, [sp, #8]
   d54a2:	a902      	add	r1, sp, #8
   d54a4:	4668      	mov	r0, sp
   d54a6:	f8ad 400c 	strh.w	r4, [sp, #12]
   d54aa:	f7ff fe1f 	bl	d50ec <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d54ae:	a802      	add	r0, sp, #8
   d54b0:	f7ff fd6f 	bl	d4f92 <_ZN8particle5ErrorD1Ev>
   d54b4:	e01d      	b.n	d54f2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
   d54b6:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d54b8:	f88d 4008 	strb.w	r4, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d54bc:	f04f 0201 	mov.w	r2, #1
   d54c0:	e8d0 3f4f 	ldrexb	r3, [r0]
   d54c4:	42a3      	cmp	r3, r4
   d54c6:	d103      	bne.n	d54d0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
   d54c8:	e8c0 2f41 	strexb	r1, r2, [r0]
   d54cc:	2900      	cmp	r1, #0
   d54ce:	d1f7      	bne.n	d54c0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
   d54d0:	d002      	beq.n	d54d8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
   d54d2:	f88d 3008 	strb.w	r3, [sp, #8]
   d54d6:	e00c      	b.n	d54f2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
   d54d8:	f110 010c 	adds.w	r1, r0, #12
   d54dc:	f04f 0301 	mov.w	r3, #1
   d54e0:	bf18      	it	ne
   d54e2:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d54e4:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
   d54e8:	3004      	adds	r0, #4
   d54ea:	f800 3c03 	strb.w	r3, [r0, #-3]
   d54ee:	f7ff ff71 	bl	d53d4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
   d54f2:	a801      	add	r0, sp, #4
   d54f4:	f7ff fcf1 	bl	d4eda <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
   d54f8:	b005      	add	sp, #20
   d54fa:	bd30      	pop	{r4, r5, pc}

000d54fc <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d54fc:	2200      	movs	r2, #0
   d54fe:	4611      	mov	r1, r2
   d5500:	6840      	ldr	r0, [r0, #4]
   d5502:	f7ff bc63 	b.w	d4dcc <network_listening>

000d5506 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5506:	2200      	movs	r2, #0
   d5508:	4611      	mov	r1, r2
   d550a:	6840      	ldr	r0, [r0, #4]
   d550c:	f7ff bc6e 	b.w	d4dec <network_get_listen_timeout>

000d5510 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5510:	2200      	movs	r2, #0
   d5512:	6840      	ldr	r0, [r0, #4]
   d5514:	f7ff bc62 	b.w	d4ddc <network_set_listen_timeout>

000d5518 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5518:	2200      	movs	r2, #0
   d551a:	f081 0101 	eor.w	r1, r1, #1
   d551e:	6840      	ldr	r0, [r0, #4]
   d5520:	f7ff bc4c 	b.w	d4dbc <network_listen>

000d5524 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d5524:	2300      	movs	r3, #0
   d5526:	461a      	mov	r2, r3
   d5528:	4619      	mov	r1, r3
   d552a:	6840      	ldr	r0, [r0, #4]
   d552c:	f7ff bc3e 	b.w	d4dac <network_off>

000d5530 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d5530:	2300      	movs	r3, #0
   d5532:	461a      	mov	r2, r3
   d5534:	4619      	mov	r1, r3
   d5536:	6840      	ldr	r0, [r0, #4]
   d5538:	f7ff bc30 	b.w	d4d9c <network_on>

000d553c <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d553c:	2200      	movs	r2, #0
   d553e:	4611      	mov	r1, r2
   d5540:	6840      	ldr	r0, [r0, #4]
   d5542:	f7ff bc23 	b.w	d4d8c <network_ready>

000d5546 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5546:	2200      	movs	r2, #0
   d5548:	4611      	mov	r1, r2
   d554a:	6840      	ldr	r0, [r0, #4]
   d554c:	f7ff bc0e 	b.w	d4d6c <network_connecting>

000d5550 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5550:	2200      	movs	r2, #0
   d5552:	2102      	movs	r1, #2
   d5554:	6840      	ldr	r0, [r0, #4]
   d5556:	f7ff bc11 	b.w	d4d7c <network_disconnect>

000d555a <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d555a:	2300      	movs	r3, #0
   d555c:	461a      	mov	r2, r3
   d555e:	6840      	ldr	r0, [r0, #4]
   d5560:	f7ff bbfc 	b.w	d4d5c <network_connect>

000d5564 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d5564:	4b02      	ldr	r3, [pc, #8]	; (d5570 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d5566:	2203      	movs	r2, #3
   d5568:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d556a:	4a02      	ldr	r2, [pc, #8]	; (d5574 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d556c:	601a      	str	r2, [r3, #0]
   d556e:	4770      	bx	lr
   d5570:	2003e4a8 	.word	0x2003e4a8
   d5574:	000d8040 	.word	0x000d8040

000d5578 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
   d5578:	4770      	bx	lr

000d557a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d557a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d557c:	4606      	mov	r6, r0
   d557e:	4615      	mov	r5, r2
   d5580:	460c      	mov	r4, r1
   d5582:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d5584:	42bc      	cmp	r4, r7
   d5586:	d006      	beq.n	d5596 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d5588:	6833      	ldr	r3, [r6, #0]
   d558a:	f814 1b01 	ldrb.w	r1, [r4], #1
   d558e:	689b      	ldr	r3, [r3, #8]
   d5590:	4630      	mov	r0, r6
   d5592:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d5594:	e7f6      	b.n	d5584 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d5596:	4628      	mov	r0, r5
   d5598:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d559a <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d559a:	2200      	movs	r2, #0
   d559c:	7c00      	ldrb	r0, [r0, #16]
   d559e:	f7ff ba71 	b.w	d4a84 <HAL_I2C_Write_Data>

000d55a2 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d55a2:	2100      	movs	r1, #0
   d55a4:	7c00      	ldrb	r0, [r0, #16]
   d55a6:	f7ff ba75 	b.w	d4a94 <HAL_I2C_Available_Data>

000d55aa <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d55aa:	2100      	movs	r1, #0
   d55ac:	7c00      	ldrb	r0, [r0, #16]
   d55ae:	f7ff ba79 	b.w	d4aa4 <HAL_I2C_Read_Data>

000d55b2 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d55b2:	2100      	movs	r1, #0
   d55b4:	7c00      	ldrb	r0, [r0, #16]
   d55b6:	f7ff ba7d 	b.w	d4ab4 <HAL_I2C_Peek_Data>

000d55ba <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d55ba:	2100      	movs	r1, #0
   d55bc:	7c00      	ldrb	r0, [r0, #16]
   d55be:	f7ff ba81 	b.w	d4ac4 <HAL_I2C_Flush_Data>

000d55c2 <_ZN7TwoWireD0Ev>:
   d55c2:	b510      	push	{r4, lr}
   d55c4:	2114      	movs	r1, #20
   d55c6:	4604      	mov	r4, r0
   d55c8:	f001 ffb1 	bl	d752e <_ZdlPvj>
   d55cc:	4620      	mov	r0, r4
   d55ce:	bd10      	pop	{r4, pc}

000d55d0 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d55d0:	b510      	push	{r4, lr}
   d55d2:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d55d4:	2300      	movs	r3, #0
   d55d6:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d55d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d55dc:	60a3      	str	r3, [r4, #8]
   d55de:	4b04      	ldr	r3, [pc, #16]	; (d55f0 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
   d55e0:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d55e2:	4608      	mov	r0, r1
   d55e4:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
   d55e6:	4611      	mov	r1, r2
   d55e8:	f7ff fa7c 	bl	d4ae4 <HAL_I2C_Init>
}
   d55ec:	4620      	mov	r0, r4
   d55ee:	bd10      	pop	{r4, pc}
   d55f0:	000d8074 	.word	0x000d8074

000d55f4 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d55f4:	2100      	movs	r1, #0
   d55f6:	7c00      	ldrb	r0, [r0, #16]
   d55f8:	f7ff ba6c 	b.w	d4ad4 <HAL_I2C_Is_Enabled>

000d55fc <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d55fc:	4770      	bx	lr

000d55fe <_ZN9IPAddressD0Ev>:
   d55fe:	b510      	push	{r4, lr}
   d5600:	2118      	movs	r1, #24
   d5602:	4604      	mov	r4, r0
   d5604:	f001 ff93 	bl	d752e <_ZdlPvj>
   d5608:	4620      	mov	r0, r4
   d560a:	bd10      	pop	{r4, pc}

000d560c <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d560c:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d560e:	7d03      	ldrb	r3, [r0, #20]
   d5610:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5612:	b08d      	sub	sp, #52	; 0x34
   d5614:	460e      	mov	r6, r1
   d5616:	f100 0704 	add.w	r7, r0, #4
   d561a:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d561e:	d002      	beq.n	d5626 <_ZNK9IPAddress7printToER5Print+0x1a>
   d5620:	f100 0508 	add.w	r5, r0, #8
   d5624:	e018      	b.n	d5658 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d5626:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5628:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d562a:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d562e:	232f      	movs	r3, #47	; 0x2f
   d5630:	462a      	mov	r2, r5
   d5632:	200a      	movs	r0, #10
   d5634:	f7ff fa5e 	bl	d4af4 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d5638:	4628      	mov	r0, r5
   d563a:	f002 fb40 	bl	d7cbe <strlen>
   d563e:	6833      	ldr	r3, [r6, #0]
   d5640:	4602      	mov	r2, r0
   d5642:	68db      	ldr	r3, [r3, #12]
   d5644:	4629      	mov	r1, r5
   d5646:	4630      	mov	r0, r6
   d5648:	4798      	blx	r3
   d564a:	e00f      	b.n	d566c <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d564c:	b124      	cbz	r4, d5658 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d564e:	212e      	movs	r1, #46	; 0x2e
   d5650:	4630      	mov	r0, r6
   d5652:	f001 fb4d 	bl	d6cf0 <_ZN5Print5printEc>
   d5656:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d5658:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d565c:	220a      	movs	r2, #10
   d565e:	4630      	mov	r0, r6
   d5660:	f001 fb55 	bl	d6d0e <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5664:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5666:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5668:	d1f0      	bne.n	d564c <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d566a:	4620      	mov	r0, r4
    }
    return n;
}
   d566c:	b00d      	add	sp, #52	; 0x34
   d566e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5670 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d5670:	b510      	push	{r4, lr}
   d5672:	4b05      	ldr	r3, [pc, #20]	; (d5688 <_ZN9IPAddressC1Ev+0x18>)
   d5674:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d5676:	2211      	movs	r2, #17
   d5678:	f840 3b04 	str.w	r3, [r0], #4
   d567c:	2100      	movs	r1, #0
   d567e:	f002 faa9 	bl	d7bd4 <memset>
{
    clear();
}
   d5682:	4620      	mov	r0, r4
   d5684:	bd10      	pop	{r4, pc}
   d5686:	bf00      	nop
   d5688:	000d809c 	.word	0x000d809c

000d568c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d568c:	4603      	mov	r3, r0
   d568e:	4a07      	ldr	r2, [pc, #28]	; (d56ac <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d5690:	b510      	push	{r4, lr}
   d5692:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d5696:	f101 0210 	add.w	r2, r1, #16
   d569a:	f851 4b04 	ldr.w	r4, [r1], #4
   d569e:	f843 4b04 	str.w	r4, [r3], #4
   d56a2:	4291      	cmp	r1, r2
   d56a4:	d1f9      	bne.n	d569a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d56a6:	780a      	ldrb	r2, [r1, #0]
   d56a8:	701a      	strb	r2, [r3, #0]
}
   d56aa:	bd10      	pop	{r4, pc}
   d56ac:	000d809c 	.word	0x000d809c

000d56b0 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d56b0:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d56b2:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d56b6:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d56ba:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d56be:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d56c2:	2304      	movs	r3, #4
   d56c4:	6041      	str	r1, [r0, #4]
   d56c6:	7503      	strb	r3, [r0, #20]
   d56c8:	bd10      	pop	{r4, pc}

000d56ca <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d56ca:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d56cc:	780d      	ldrb	r5, [r1, #0]
   d56ce:	788b      	ldrb	r3, [r1, #2]
   d56d0:	784a      	ldrb	r2, [r1, #1]
   d56d2:	78c9      	ldrb	r1, [r1, #3]
   d56d4:	9100      	str	r1, [sp, #0]
   d56d6:	4629      	mov	r1, r5
   d56d8:	f7ff ffea 	bl	d56b0 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d56dc:	b003      	add	sp, #12
   d56de:	bd30      	pop	{r4, r5, pc}

000d56e0 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:
#include <cstdarg>

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
   d56e0:	f100 0210 	add.w	r2, r0, #16
    size_t n = 1;
   d56e4:	2301      	movs	r3, #1
    do {
        if (t->type == JSMN_OBJECT) {
   d56e6:	f812 1c10 	ldrb.w	r1, [r2, #-16]
   d56ea:	2901      	cmp	r1, #1
   d56ec:	4610      	mov	r0, r2
   d56ee:	d104      	bne.n	d56fa <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x1a>
            n += t->size * 2; // Number of name and value tokens
   d56f0:	f852 1c04 	ldr.w	r1, [r2, #-4]
   d56f4:	eb03 0341 	add.w	r3, r3, r1, lsl #1
   d56f8:	e004      	b.n	d5704 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x24>
        } else if (t->type == JSMN_ARRAY) {
   d56fa:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   d56fc:	bf04      	itt	eq
   d56fe:	f852 1c04 	ldreq.w	r1, [r2, #-4]
   d5702:	185b      	addeq	r3, r3, r1
namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
    do {
   d5704:	3b01      	subs	r3, #1
   d5706:	f102 0210 	add.w	r2, r2, #16
   d570a:	d1ec      	bne.n	d56e6 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
        }
        ++t;
        --n;
    } while (n);
    return t;
}
   d570c:	4770      	bx	lr

000d570e <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   d570e:	b40e      	push	{r1, r2, r3}
   d5710:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5714:	b087      	sub	sp, #28
   d5716:	af00      	add	r7, sp, #0
   d5718:	f107 0434 	add.w	r4, r7, #52	; 0x34
   d571c:	4605      	mov	r5, r0
   d571e:	f854 6b04 	ldr.w	r6, [r4], #4
    char buf[16];
    va_list args;
    va_start(args, fmt);
   d5722:	607c      	str	r4, [r7, #4]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d5724:	4623      	mov	r3, r4
   d5726:	4632      	mov	r2, r6
   d5728:	2110      	movs	r1, #16
   d572a:	f107 0008 	add.w	r0, r7, #8
   d572e:	f7ff fb7d 	bl	d4e2c <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   d5732:	280f      	cmp	r0, #15
   d5734:	d916      	bls.n	d5764 <_ZN5spark10JSONWriter6printfEPKcz+0x56>
        char buf[n + 1]; // Use larger buffer
   d5736:	f100 0308 	add.w	r3, r0, #8
   d573a:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   d573e:	46e8      	mov	r8, sp
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
        char buf[n + 1]; // Use larger buffer
   d5740:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   d5744:	4632      	mov	r2, r6
   d5746:	1c41      	adds	r1, r0, #1
   d5748:	4623      	mov	r3, r4
   d574a:	4668      	mov	r0, sp
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
        char buf[n + 1]; // Use larger buffer
        va_start(args, fmt);
   d574c:	607c      	str	r4, [r7, #4]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   d574e:	f7ff fb6d 	bl	d4e2c <vsnprintf>
        va_end(args);
        if (n > 0) {
   d5752:	1e02      	subs	r2, r0, #0
   d5754:	dd04      	ble.n	d5760 <_ZN5spark10JSONWriter6printfEPKcz+0x52>
            write(buf, n);
   d5756:	682b      	ldr	r3, [r5, #0]
   d5758:	4669      	mov	r1, sp
   d575a:	689b      	ldr	r3, [r3, #8]
   d575c:	4628      	mov	r0, r5
   d575e:	4798      	blx	r3
   d5760:	46c5      	mov	sp, r8
   d5762:	e007      	b.n	d5774 <_ZN5spark10JSONWriter6printfEPKcz+0x66>
        }
    } else if (n > 0) {
   d5764:	b130      	cbz	r0, d5774 <_ZN5spark10JSONWriter6printfEPKcz+0x66>
        write(buf, n);
   d5766:	682b      	ldr	r3, [r5, #0]
   d5768:	4602      	mov	r2, r0
   d576a:	689b      	ldr	r3, [r3, #8]
   d576c:	f107 0108 	add.w	r1, r7, #8
   d5770:	4628      	mov	r0, r5
   d5772:	4798      	blx	r3
    }
}
   d5774:	371c      	adds	r7, #28
   d5776:	46bd      	mov	sp, r7
   d5778:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   d577c:	b003      	add	sp, #12
   d577e:	4770      	bx	lr

000d5780 <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   d5780:	b513      	push	{r0, r1, r4, lr}
   d5782:	ab02      	add	r3, sp, #8
    write(&c, 1);
   d5784:	6802      	ldr	r2, [r0, #0]

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   d5786:	f803 1d01 	strb.w	r1, [r3, #-1]!
    write(&c, 1);
   d578a:	6894      	ldr	r4, [r2, #8]
   d578c:	4619      	mov	r1, r3
   d578e:	2201      	movs	r2, #1
   d5790:	47a0      	blx	r4
}
   d5792:	b002      	add	sp, #8
   d5794:	bd10      	pop	{r4, pc}

000d5796 <_ZNK5spark9JSONValue4typeEv>:
        return 0.0;
    }
}

spark::JSONType spark::JSONValue::type() const {
    if (!t_) {
   d5796:	6883      	ldr	r3, [r0, #8]
   d5798:	b1fb      	cbz	r3, d57da <_ZNK5spark9JSONValue4typeEv+0x44>
        return JSON_TYPE_INVALID;
    }
    switch (t_->type) {
   d579a:	781a      	ldrb	r2, [r3, #0]
   d579c:	2a03      	cmp	r2, #3
   d579e:	d81a      	bhi.n	d57d6 <_ZNK5spark9JSONValue4typeEv+0x40>
   d57a0:	e8df f002 	tbb	[pc, r2]
   d57a4:	1d021704 	.word	0x1d021704
        return JSON_TYPE_INVALID;
    }
    case JSMN_STRING:
        return JSON_TYPE_STRING;
    case JSMN_ARRAY:
        return JSON_TYPE_ARRAY;
   d57a8:	2005      	movs	r0, #5
   d57aa:	4770      	bx	lr
    if (!t_) {
        return JSON_TYPE_INVALID;
    }
    switch (t_->type) {
    case JSMN_PRIMITIVE: {
        const char c = d_->json[t_->start];
   d57ac:	6802      	ldr	r2, [r0, #0]
   d57ae:	685b      	ldr	r3, [r3, #4]
   d57b0:	6852      	ldr	r2, [r2, #4]
   d57b2:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   d57b4:	282d      	cmp	r0, #45	; 0x2d
   d57b6:	d014      	beq.n	d57e2 <_ZNK5spark9JSONValue4typeEv+0x4c>
   d57b8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d57bc:	2b09      	cmp	r3, #9
   d57be:	d910      	bls.n	d57e2 <_ZNK5spark9JSONValue4typeEv+0x4c>
            return JSON_TYPE_NUMBER;
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   d57c0:	2874      	cmp	r0, #116	; 0x74
   d57c2:	d010      	beq.n	d57e6 <_ZNK5spark9JSONValue4typeEv+0x50>
   d57c4:	2866      	cmp	r0, #102	; 0x66
   d57c6:	d00e      	beq.n	d57e6 <_ZNK5spark9JSONValue4typeEv+0x50>
    }
}

spark::JSONType spark::JSONValue::type() const {
    if (!t_) {
        return JSON_TYPE_INVALID;
   d57c8:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   d57cc:	4258      	negs	r0, r3
   d57ce:	4158      	adcs	r0, r3
   d57d0:	4770      	bx	lr
    case JSMN_STRING:
        return JSON_TYPE_STRING;
    case JSMN_ARRAY:
        return JSON_TYPE_ARRAY;
    case JSMN_OBJECT:
        return JSON_TYPE_OBJECT;
   d57d2:	2006      	movs	r0, #6
   d57d4:	4770      	bx	lr
    default:
        return JSON_TYPE_INVALID;
   d57d6:	2000      	movs	r0, #0
   d57d8:	4770      	bx	lr
    }
}

spark::JSONType spark::JSONValue::type() const {
    if (!t_) {
        return JSON_TYPE_INVALID;
   d57da:	4618      	mov	r0, r3
   d57dc:	4770      	bx	lr
            return JSON_TYPE_NULL;
        }
        return JSON_TYPE_INVALID;
    }
    case JSMN_STRING:
        return JSON_TYPE_STRING;
   d57de:	2004      	movs	r0, #4
   d57e0:	4770      	bx	lr
    }
    switch (t_->type) {
    case JSMN_PRIMITIVE: {
        const char c = d_->json[t_->start];
        if (c == '-' || (c >= '0' && c <= '9')) {
            return JSON_TYPE_NUMBER;
   d57e2:	2003      	movs	r0, #3
   d57e4:	4770      	bx	lr
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
            return JSON_TYPE_BOOL;
   d57e6:	2002      	movs	r0, #2
    case JSMN_OBJECT:
        return JSON_TYPE_OBJECT;
    default:
        return JSON_TYPE_INVALID;
    }
}
   d57e8:	4770      	bx	lr

000d57ea <_ZNK5spark9JSONValue5toIntEv>:
    default:
        return false;
    }
}

int spark::JSONValue::toInt() const {
   d57ea:	b510      	push	{r4, lr}
   d57ec:	4604      	mov	r4, r0
    switch (type()) {
   d57ee:	f7ff ffd2 	bl	d5796 <_ZNK5spark9JSONValue4typeEv>
   d57f2:	2802      	cmp	r0, #2
   d57f4:	d00d      	beq.n	d5812 <_ZNK5spark9JSONValue5toIntEv+0x28>
   d57f6:	d316      	bcc.n	d5826 <_ZNK5spark9JSONValue5toIntEv+0x3c>
   d57f8:	2804      	cmp	r0, #4
   d57fa:	d814      	bhi.n	d5826 <_ZNK5spark9JSONValue5toIntEv+0x3c>
    }
    case JSON_TYPE_NUMBER:
    case JSON_TYPE_STRING: {
        // toInt() may produce incorrect results for floating point numbers, since we want to keep
        // compile-time dependency on strtod() optional
        const char* const s = d_->json + t_->start;
   d57fc:	6822      	ldr	r2, [r4, #0]
   d57fe:	68a3      	ldr	r3, [r4, #8]
        return strtol(s, nullptr, 10);
   d5800:	6850      	ldr	r0, [r2, #4]
   d5802:	685b      	ldr	r3, [r3, #4]
   d5804:	220a      	movs	r2, #10
   d5806:	2100      	movs	r1, #0
   d5808:	4418      	add	r0, r3
    }
    default:
        return 0;
    }
}
   d580a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    case JSON_TYPE_NUMBER:
    case JSON_TYPE_STRING: {
        // toInt() may produce incorrect results for floating point numbers, since we want to keep
        // compile-time dependency on strtod() optional
        const char* const s = d_->json + t_->start;
        return strtol(s, nullptr, 10);
   d580e:	f002 bb0d 	b.w	d7e2c <strtol>
}

int spark::JSONValue::toInt() const {
    switch (type()) {
    case JSON_TYPE_BOOL: {
        const char* const s = d_->json + t_->start;
   d5812:	6822      	ldr	r2, [r4, #0]
   d5814:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   d5816:	6852      	ldr	r2, [r2, #4]
   d5818:	685b      	ldr	r3, [r3, #4]
   d581a:	5cd0      	ldrb	r0, [r2, r3]
   d581c:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   d5820:	4258      	negs	r0, r3
   d5822:	4158      	adcs	r0, r3
   d5824:	bd10      	pop	{r4, pc}
        // compile-time dependency on strtod() optional
        const char* const s = d_->json + t_->start;
        return strtol(s, nullptr, 10);
    }
    default:
        return 0;
   d5826:	2000      	movs	r0, #0
    }
}
   d5828:	bd10      	pop	{r4, pc}

000d582a <_ZN5spark18JSONObjectIterator4nextEv>:
        n_ = t->size; // Number of properties
        d_ = d;
    }
}

bool spark::JSONObjectIterator::next() {
   d582a:	b510      	push	{r4, lr}
    if (!n_) {
   d582c:	6943      	ldr	r3, [r0, #20]
        n_ = t->size; // Number of properties
        d_ = d;
    }
}

bool spark::JSONObjectIterator::next() {
   d582e:	4604      	mov	r4, r0
    if (!n_) {
   d5830:	b15b      	cbz	r3, d584a <_ZN5spark18JSONObjectIterator4nextEv+0x20>
        return false;
    }
    k_ = t_; // Name
   d5832:	6880      	ldr	r0, [r0, #8]
   d5834:	60e0      	str	r0, [r4, #12]
    ++t_;
    v_ = t_; // Value
    --n_;
   d5836:	3b01      	subs	r3, #1
bool spark::JSONObjectIterator::next() {
    if (!n_) {
        return false;
    }
    k_ = t_; // Name
    ++t_;
   d5838:	3010      	adds	r0, #16
   d583a:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   d583c:	6120      	str	r0, [r4, #16]
    --n_;
   d583e:	6163      	str	r3, [r4, #20]
    if (n_) {
   d5840:	b12b      	cbz	r3, d584e <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        t_ = skipToken(t_);
   d5842:	f7ff ff4d 	bl	d56e0 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   d5846:	60a0      	str	r0, [r4, #8]
   d5848:	e001      	b.n	d584e <_ZN5spark18JSONObjectIterator4nextEv+0x24>
    }
}

bool spark::JSONObjectIterator::next() {
    if (!n_) {
        return false;
   d584a:	4618      	mov	r0, r3
   d584c:	bd10      	pop	{r4, pc}
    v_ = t_; // Value
    --n_;
    if (n_) {
        t_ = skipToken(t_);
    }
    return true;
   d584e:	2001      	movs	r0, #1
}
   d5850:	bd10      	pop	{r4, pc}

000d5852 <_ZN5spark10JSONWriter9endObjectEv>:
    write('{');
    state_ = BEGIN;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::endObject() {
   d5852:	b510      	push	{r4, lr}
    write('}');
   d5854:	217d      	movs	r1, #125	; 0x7d
    write('{');
    state_ = BEGIN;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::endObject() {
   d5856:	4604      	mov	r4, r0
    write('}');
   d5858:	f7ff ff92 	bl	d5780 <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   d585c:	2301      	movs	r3, #1
   d585e:	7123      	strb	r3, [r4, #4]
    return *this;
}
   d5860:	4620      	mov	r0, r4
   d5862:	bd10      	pop	{r4, pc}

000d5864 <_ZN5spark10JSONWriter14writeSeparatorEv>:
    } else if (n > 0) {
        write(buf, n);
    }
}

void spark::JSONWriter::writeSeparator() {
   d5864:	b508      	push	{r3, lr}
    switch (state_) {
   d5866:	7903      	ldrb	r3, [r0, #4]
   d5868:	2b01      	cmp	r3, #1
   d586a:	d002      	beq.n	d5872 <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   d586c:	2b02      	cmp	r3, #2
   d586e:	d002      	beq.n	d5876 <_ZN5spark10JSONWriter14writeSeparatorEv+0x12>
   d5870:	bd08      	pop	{r3, pc}
    case NEXT:
        write(',');
   d5872:	212c      	movs	r1, #44	; 0x2c
   d5874:	e000      	b.n	d5878 <_ZN5spark10JSONWriter14writeSeparatorEv+0x14>
        break;
    case VALUE:
        write(':');
   d5876:	213a      	movs	r1, #58	; 0x3a
   d5878:	f7ff ff82 	bl	d5780 <_ZN5spark10JSONWriter5writeEc>
   d587c:	bd08      	pop	{r3, pc}

000d587e <_ZN5spark10JSONWriter11beginObjectEv>:
    write(']');
    state_ = NEXT;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::beginObject() {
   d587e:	b510      	push	{r4, lr}
   d5880:	4604      	mov	r4, r0
    writeSeparator();
   d5882:	f7ff ffef 	bl	d5864 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   d5886:	4620      	mov	r0, r4
   d5888:	217b      	movs	r1, #123	; 0x7b
   d588a:	f7ff ff79 	bl	d5780 <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   d588e:	2300      	movs	r3, #0
   d5890:	7123      	strb	r3, [r4, #4]
    return *this;
}
   d5892:	4620      	mov	r0, r4
   d5894:	bd10      	pop	{r4, pc}
	...

000d5898 <_ZN5spark10JSONWriter5valueEi>:
    }
    state_ = NEXT;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::value(int val) {
   d5898:	b538      	push	{r3, r4, r5, lr}
   d589a:	4604      	mov	r4, r0
   d589c:	460d      	mov	r5, r1
    writeSeparator();
   d589e:	f7ff ffe1 	bl	d5864 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   d58a2:	6823      	ldr	r3, [r4, #0]
   d58a4:	4904      	ldr	r1, [pc, #16]	; (d58b8 <_ZN5spark10JSONWriter5valueEi+0x20>)
   d58a6:	68db      	ldr	r3, [r3, #12]
   d58a8:	4620      	mov	r0, r4
   d58aa:	462a      	mov	r2, r5
   d58ac:	4798      	blx	r3
    state_ = NEXT;
   d58ae:	2301      	movs	r3, #1
   d58b0:	7123      	strb	r3, [r4, #4]
    return *this;
}
   d58b2:	4620      	mov	r0, r4
   d58b4:	bd38      	pop	{r3, r4, r5, pc}
   d58b6:	bf00      	nop
   d58b8:	000d7fc7 	.word	0x000d7fc7

000d58bc <_ZN5spark10JSONWriter5valueEj>:

spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   d58bc:	b538      	push	{r3, r4, r5, lr}
   d58be:	4604      	mov	r4, r0
   d58c0:	460d      	mov	r5, r1
    writeSeparator();
   d58c2:	f7ff ffcf 	bl	d5864 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   d58c6:	6823      	ldr	r3, [r4, #0]
   d58c8:	4904      	ldr	r1, [pc, #16]	; (d58dc <_ZN5spark10JSONWriter5valueEj+0x20>)
   d58ca:	68db      	ldr	r3, [r3, #12]
   d58cc:	4620      	mov	r0, r4
   d58ce:	462a      	mov	r2, r5
   d58d0:	4798      	blx	r3
    state_ = NEXT;
   d58d2:	2301      	movs	r3, #1
   d58d4:	7123      	strb	r3, [r4, #4]
    return *this;
}
   d58d6:	4620      	mov	r0, r4
   d58d8:	bd38      	pop	{r3, r4, r5, pc}
   d58da:	bf00      	nop
   d58dc:	000d80b7 	.word	0x000d80b7

000d58e0 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:
    default:
        break;
    }
}

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   d58e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d58e2:	460d      	mov	r5, r1
   d58e4:	4617      	mov	r7, r2
    write('"');
   d58e6:	2122      	movs	r1, #34	; 0x22
    default:
        break;
    }
}

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   d58e8:	4604      	mov	r4, r0
   d58ea:	442f      	add	r7, r5
    write('"');
   d58ec:	f7ff ff48 	bl	d5780 <_ZN5spark10JSONWriter5writeEc>
   d58f0:	462a      	mov	r2, r5
    const char* const end = str + size;
   d58f2:	4629      	mov	r1, r5
    const char *s = str;
    while (s != end) {
   d58f4:	42ba      	cmp	r2, r7
   d58f6:	d038      	beq.n	d596a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8a>
        const char c = *s;
   d58f8:	4616      	mov	r6, r2
   d58fa:	f816 5b01 	ldrb.w	r5, [r6], #1
        if (c == '"' || c == '\\' || (c >= 0 && c <= 0x1f)) {
   d58fe:	2d22      	cmp	r5, #34	; 0x22
   d5900:	d003      	beq.n	d590a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2a>
   d5902:	2d5c      	cmp	r5, #92	; 0x5c
   d5904:	d001      	beq.n	d590a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2a>
   d5906:	2d1f      	cmp	r5, #31
   d5908:	d82d      	bhi.n	d5966 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x86>
            write(str, s - str); // Write preceeding characters
   d590a:	6823      	ldr	r3, [r4, #0]
   d590c:	1a52      	subs	r2, r2, r1
   d590e:	689b      	ldr	r3, [r3, #8]
   d5910:	4620      	mov	r0, r4
   d5912:	4798      	blx	r3
            write('\\');
   d5914:	215c      	movs	r1, #92	; 0x5c
   d5916:	4620      	mov	r0, r4
   d5918:	f7ff ff32 	bl	d5780 <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   d591c:	2d0c      	cmp	r5, #12
   d591e:	d019      	beq.n	d5954 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
   d5920:	d807      	bhi.n	d5932 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x52>
   d5922:	2d09      	cmp	r5, #9
   d5924:	d00f      	beq.n	d5946 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x66>
   d5926:	2d0a      	cmp	r5, #10
   d5928:	d012      	beq.n	d5950 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x70>
   d592a:	2d08      	cmp	r5, #8
   d592c:	d114      	bne.n	d5958 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x78>
            case '"':
            case '\\':
                write(c);
                break;
            case 0x08: // Backspace
                write('b');
   d592e:	2162      	movs	r1, #98	; 0x62
   d5930:	e00a      	b.n	d5948 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
    while (s != end) {
        const char c = *s;
        if (c == '"' || c == '\\' || (c >= 0 && c <= 0x1f)) {
            write(str, s - str); // Write preceeding characters
            write('\\');
            switch (c) {
   d5932:	2d22      	cmp	r5, #34	; 0x22
   d5934:	d005      	beq.n	d5942 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x62>
   d5936:	2d5c      	cmp	r5, #92	; 0x5c
   d5938:	d003      	beq.n	d5942 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x62>
   d593a:	2d0d      	cmp	r5, #13
   d593c:	d10c      	bne.n	d5958 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x78>
                break;
            case 0x0c: // Form feed
                write('f');
                break;
            case 0x0d: // Carriage return
                write('r');
   d593e:	2172      	movs	r1, #114	; 0x72
   d5940:	e002      	b.n	d5948 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
            write(str, s - str); // Write preceeding characters
            write('\\');
            switch (c) {
            case '"':
            case '\\':
                write(c);
   d5942:	4629      	mov	r1, r5
   d5944:	e000      	b.n	d5948 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
                break;
            case 0x08: // Backspace
                write('b');
                break;
            case 0x09: // Tab
                write('t');
   d5946:	2174      	movs	r1, #116	; 0x74
            case '"':
            case '\\':
                write(c);
                break;
            case 0x08: // Backspace
                write('b');
   d5948:	4620      	mov	r0, r4
   d594a:	f7ff ff19 	bl	d5780 <_ZN5spark10JSONWriter5writeEc>
                break;
   d594e:	e009      	b.n	d5964 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x84>
            case 0x09: // Tab
                write('t');
                break;
            case 0x0a: // Line feed
                write('n');
   d5950:	216e      	movs	r1, #110	; 0x6e
   d5952:	e7f9      	b.n	d5948 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
                break;
            case 0x0c: // Form feed
                write('f');
   d5954:	2166      	movs	r1, #102	; 0x66
   d5956:	e7f7      	b.n	d5948 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   d5958:	6823      	ldr	r3, [r4, #0]
   d595a:	490a      	ldr	r1, [pc, #40]	; (d5984 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xa4>)
   d595c:	68db      	ldr	r3, [r3, #12]
   d595e:	462a      	mov	r2, r5
   d5960:	4620      	mov	r0, r4
   d5962:	4798      	blx	r3
                break;
            }
            str = s + 1;
   d5964:	4631      	mov	r1, r6

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
    write('"');
    const char* const end = str + size;
    const char *s = str;
    while (s != end) {
   d5966:	4632      	mov	r2, r6
   d5968:	e7c4      	b.n	d58f4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x14>
            }
            str = s + 1;
        }
        ++s;
    }
    if (s != str) {
   d596a:	4291      	cmp	r1, r2
   d596c:	d004      	beq.n	d5978 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x98>
        write(str, s - str); // Write remaining characters
   d596e:	6823      	ldr	r3, [r4, #0]
   d5970:	1a52      	subs	r2, r2, r1
   d5972:	689d      	ldr	r5, [r3, #8]
   d5974:	4620      	mov	r0, r4
   d5976:	47a8      	blx	r5
    }
    write('"');
   d5978:	2122      	movs	r1, #34	; 0x22
   d597a:	4620      	mov	r0, r4
   d597c:	f7ff ff00 	bl	d5780 <_ZN5spark10JSONWriter5writeEc>
   d5980:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d5982:	bf00      	nop
   d5984:	000d80c8 	.word	0x000d80c8

000d5988 <_ZN5spark10JSONWriter4nameEPKcj>:
    write('}');
    state_ = NEXT;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   d5988:	b570      	push	{r4, r5, r6, lr}
   d598a:	4604      	mov	r4, r0
   d598c:	460d      	mov	r5, r1
   d598e:	4616      	mov	r6, r2
    writeSeparator();
   d5990:	f7ff ff68 	bl	d5864 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   d5994:	4620      	mov	r0, r4
   d5996:	4632      	mov	r2, r6
   d5998:	4629      	mov	r1, r5
   d599a:	f7ff ffa1 	bl	d58e0 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   d599e:	2302      	movs	r3, #2
   d59a0:	7123      	strb	r3, [r4, #4]
    return *this;
}
   d59a2:	4620      	mov	r0, r4
   d59a4:	bd70      	pop	{r4, r5, r6, pc}

000d59a6 <_ZN5spark10JSONWriter5valueEPKcj>:
    printf("%g", val);
    state_ = NEXT;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   d59a6:	b570      	push	{r4, r5, r6, lr}
   d59a8:	4604      	mov	r4, r0
   d59aa:	460d      	mov	r5, r1
   d59ac:	4616      	mov	r6, r2
    writeSeparator();
   d59ae:	f7ff ff59 	bl	d5864 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   d59b2:	4620      	mov	r0, r4
   d59b4:	4632      	mov	r2, r6
   d59b6:	4629      	mov	r1, r5
   d59b8:	f7ff ff92 	bl	d58e0 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   d59bc:	2301      	movs	r3, #1
   d59be:	7123      	strb	r3, [r4, #4]
    return *this;
}
   d59c0:	4620      	mov	r0, r4
   d59c2:	bd70      	pop	{r4, r5, r6, pc}

000d59c4 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
    t->end = str - json; // Update string length
    return true;
}

// spark::JSONString
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   d59c4:	b510      	push	{r4, lr}

    public:
      typedef _Tp   element_type;

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   d59c6:	2300      	movs	r3, #0
   d59c8:	4604      	mov	r4, r0
   d59ca:	6003      	str	r3, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d59cc:	6043      	str	r3, [r0, #4]
}

// spark::JSONString
inline spark::JSONString::JSONString() :
        s_(""),
        n_(0) {
   d59ce:	4810      	ldr	r0, [pc, #64]	; (d5a10 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x4c>)
   d59d0:	60a0      	str	r0, [r4, #8]
   d59d2:	60e3      	str	r3, [r4, #12]
        JSONString() {
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   d59d4:	b1d1      	cbz	r1, d5a0c <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x48>
   d59d6:	780b      	ldrb	r3, [r1, #0]
   d59d8:	2b03      	cmp	r3, #3
   d59da:	d006      	beq.n	d59ea <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   d59dc:	b9b3      	cbnz	r3, d5a0c <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x48>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   d59de:	6813      	ldr	r3, [r2, #0]
   d59e0:	6858      	ldr	r0, [r3, #4]
   d59e2:	684b      	ldr	r3, [r1, #4]
   d59e4:	5cc3      	ldrb	r3, [r0, r3]
   d59e6:	2b6e      	cmp	r3, #110	; 0x6e
   d59e8:	d008      	beq.n	d59fc <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x38>
            s_ = d->json + t->start;
   d59ea:	6813      	ldr	r3, [r2, #0]
   d59ec:	6858      	ldr	r0, [r3, #4]
   d59ee:	684b      	ldr	r3, [r1, #4]
   d59f0:	4403      	add	r3, r0
   d59f2:	60a3      	str	r3, [r4, #8]
            n_ = t->end - t->start;
   d59f4:	688b      	ldr	r3, [r1, #8]
   d59f6:	6849      	ldr	r1, [r1, #4]
   d59f8:	1a5b      	subs	r3, r3, r1
   d59fa:	60e3      	str	r3, [r4, #12]
    __enable_shared_from_this_helper(const __shared_count<_Lp>&, ...) noexcept
    { }


  template<typename _Tp, _Lock_policy _Lp>
    class __shared_ptr
   d59fc:	4611      	mov	r1, r2
   d59fe:	4620      	mov	r0, r4
   d5a00:	f851 3b04 	ldr.w	r3, [r1], #4
   d5a04:	f840 3b04 	str.w	r3, [r0], #4
   d5a08:	f7ff fa73 	bl	d4ef2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
        }
        d_ = d;
    }
}
   d5a0c:	4620      	mov	r0, r4
   d5a0e:	bd10      	pop	{r4, pc}
   d5a10:	000d81a4 	.word	0x000d81a4

000d5a14 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:

    public:
      typedef _Tp   element_type;

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   d5a14:	2300      	movs	r3, #0
bool spark::JSONString::operator==(const JSONString &str) const {
    return n_ == str.n_ && strncmp(s_, str.s_, n_) == 0;
}

// spark::JSONObjectIterator
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   d5a16:	b510      	push	{r4, lr}
   d5a18:	4604      	mov	r4, r0
   d5a1a:	6003      	str	r3, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d5a1c:	6043      	str	r3, [r0, #4]
// spark::JSONObjectIterator
inline spark::JSONObjectIterator::JSONObjectIterator() :
        t_(nullptr),
        k_(nullptr),
        v_(nullptr),
        n_(0) {
   d5a1e:	6083      	str	r3, [r0, #8]
   d5a20:	60c3      	str	r3, [r0, #12]
   d5a22:	6103      	str	r3, [r0, #16]
   d5a24:	6143      	str	r3, [r0, #20]
        JSONObjectIterator() {
    if (t && t->type == JSMN_OBJECT) {
   d5a26:	b171      	cbz	r1, d5a46 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x32>
   d5a28:	780b      	ldrb	r3, [r1, #0]
   d5a2a:	2b01      	cmp	r3, #1
   d5a2c:	d10b      	bne.n	d5a46 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x32>
        t_ = t + 1; // First property's name
   d5a2e:	f101 0310 	add.w	r3, r1, #16
   d5a32:	6083      	str	r3, [r0, #8]
        n_ = t->size; // Number of properties
   d5a34:	68cb      	ldr	r3, [r1, #12]
   d5a36:	6143      	str	r3, [r0, #20]
    __enable_shared_from_this_helper(const __shared_count<_Lp>&, ...) noexcept
    { }


  template<typename _Tp, _Lock_policy _Lp>
    class __shared_ptr
   d5a38:	4611      	mov	r1, r2
   d5a3a:	f851 3b04 	ldr.w	r3, [r1], #4
   d5a3e:	f840 3b04 	str.w	r3, [r0], #4
   d5a42:	f7ff fa56 	bl	d4ef2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
        d_ = d;
    }
}
   d5a46:	4620      	mov	r0, r4
   d5a48:	bd10      	pop	{r4, pc}

000d5a4a <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:

    public:
      typedef _Tp   element_type;

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   d5a4a:	2300      	movs	r3, #0
        }
    }
};

// spark::JSONValue
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   d5a4c:	b510      	push	{r4, lr}
   d5a4e:	4604      	mov	r4, r0
   d5a50:	6003      	str	r3, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d5a52:	6043      	str	r3, [r0, #4]
        JSONValue() {
    if (t) {
        t_ = t;
   d5a54:	6081      	str	r1, [r0, #8]
};

// spark::JSONValue
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
        JSONValue() {
    if (t) {
   d5a56:	b131      	cbz	r1, d5a66 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x1c>
    __enable_shared_from_this_helper(const __shared_count<_Lp>&, ...) noexcept
    { }


  template<typename _Tp, _Lock_policy _Lp>
    class __shared_ptr
   d5a58:	4611      	mov	r1, r2
   d5a5a:	f851 3b04 	ldr.w	r3, [r1], #4
   d5a5e:	f840 3b04 	str.w	r3, [r0], #4
   d5a62:	f7ff fa46 	bl	d4ef2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
        t_ = t;
        d_ = d;
    }
}
   d5a66:	4620      	mov	r0, r4
   d5a68:	bd10      	pop	{r4, pc}

000d5a6a <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
   d5a6a:	6880      	ldr	r0, [r0, #8]
   d5a6c:	6803      	ldr	r3, [r0, #0]
   d5a6e:	68db      	ldr	r3, [r3, #12]
   d5a70:	4718      	bx	r3

000d5a72 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
inline void spark::StreamLogHandler::printf(const char *fmt, ArgsT... args) {
    stream_->printf(fmt, args...);
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
   d5a72:	4770      	bx	lr

000d5a74 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   d5a74:	b119      	cbz	r1, d5a7e <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   d5a76:	680b      	ldr	r3, [r1, #0]
   d5a78:	4608      	mov	r0, r1
   d5a7a:	685b      	ldr	r3, [r3, #4]
   d5a7c:	4718      	bx	r3
   d5a7e:	4770      	bx	lr

000d5a80 <_ZN5spark19OutputStreamFactory13destroyStreamEP5Print>:
}

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   d5a80:	b119      	cbz	r1, d5a8a <_ZN5spark19OutputStreamFactory13destroyStreamEP5Print+0xa>
   d5a82:	680b      	ldr	r3, [r1, #0]
   d5a84:	4608      	mov	r0, r1
   d5a86:	685b      	ldr	r3, [r3, #4]
   d5a88:	4718      	bx	r3
   d5a8a:	4770      	bx	lr

000d5a8c <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:

    virtual Print* createStream(const char *type, const JSONValue &params) = 0;
    virtual void destroyStream(Print *stream);
};

class DefaultOutputStreamFactory: public OutputStreamFactory {
   d5a8c:	4770      	bx	lr

000d5a8e <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
    virtual LogHandler* createHandler(const char *type, LogLevel level, LogCategoryFilters filters, Print *stream,
            const JSONValue &params) = 0; // TODO: Use some generic container or a buffer instead of JSONValue
    virtual void destroyHandler(LogHandler *handler);
};

class DefaultLogHandlerFactory: public LogHandlerFactory {
   d5a8e:	4770      	bx	lr

000d5a90 <_ZN5spark16JSONStreamWriterD1Ev>:
    void writeSeparator();
    void writeEscaped(const char *data, size_t size);
    void write(char c);
};

class JSONStreamWriter: public JSONWriter {
   d5a90:	4770      	bx	lr

000d5a92 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
    return s;
}
#endif

// Iterates over subcategory names separated by '.' character
const char* nextSubcategoryName(const char* &category, size_t &size) {
   d5a92:	b538      	push	{r3, r4, r5, lr}
   d5a94:	4604      	mov	r4, r0
   d5a96:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   d5a98:	6800      	ldr	r0, [r0, #0]
   d5a9a:	212e      	movs	r1, #46	; 0x2e
   d5a9c:	f002 f8d8 	bl	d7c50 <strchrnul>
    size = s - category;
   d5aa0:	6823      	ldr	r3, [r4, #0]
   d5aa2:	1ac3      	subs	r3, r0, r3
   d5aa4:	602b      	str	r3, [r5, #0]
    if (size) {
   d5aa6:	b123      	cbz	r3, d5ab2 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   d5aa8:	7803      	ldrb	r3, [r0, #0]
   d5aaa:	b103      	cbz	r3, d5aae <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   d5aac:	3001      	adds	r0, #1
   d5aae:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d5ab0:	6020      	str	r0, [r4, #0]
        }
        std::swap(s, category);
        return s;
    }
    return nullptr;
   d5ab2:	4618      	mov	r0, r3
}
   d5ab4:	bd38      	pop	{r3, r4, r5, pc}

000d5ab6 <_ZN5spark16JSONStreamWriterD0Ev>:
   d5ab6:	b510      	push	{r4, lr}
   d5ab8:	210c      	movs	r1, #12
   d5aba:	4604      	mov	r4, r0
   d5abc:	f001 fd37 	bl	d752e <_ZdlPvj>
   d5ac0:	4620      	mov	r0, r4
   d5ac2:	bd10      	pop	{r4, pc}

000d5ac4 <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   d5ac4:	b510      	push	{r4, lr}
   d5ac6:	2104      	movs	r1, #4
   d5ac8:	4604      	mov	r4, r0
   d5aca:	f001 fd30 	bl	d752e <_ZdlPvj>
   d5ace:	4620      	mov	r0, r4
   d5ad0:	bd10      	pop	{r4, pc}

000d5ad2 <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:

    virtual Print* createStream(const char *type, const JSONValue &params) = 0;
    virtual void destroyStream(Print *stream);
};

class DefaultOutputStreamFactory: public OutputStreamFactory {
   d5ad2:	b510      	push	{r4, lr}
   d5ad4:	2104      	movs	r1, #4
   d5ad6:	4604      	mov	r4, r0
   d5ad8:	f001 fd29 	bl	d752e <_ZdlPvj>
   d5adc:	4620      	mov	r0, r4
   d5ade:	bd10      	pop	{r4, pc}

000d5ae0 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != 3
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   d5ae0:	b538      	push	{r3, r4, r5, lr}
   d5ae2:	460c      	mov	r4, r1
   d5ae4:	4605      	mov	r5, r0
#if PLATFORM_ID != 3
    if (stream == &Serial) {
   d5ae6:	f001 fbc1 	bl	d726c <_Z16_fetch_usbserialv>
   d5aea:	4284      	cmp	r4, r0
   d5aec:	d00d      	beq.n	d5b0a <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2a>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   d5aee:	f001 fb17 	bl	d7120 <_Z22__fetch_global_Serial1v>
   d5af2:	4284      	cmp	r4, r0
   d5af4:	d105      	bne.n	d5b02 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x22>
        Serial1.end();
   d5af6:	f001 fb13 	bl	d7120 <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
}
   d5afa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
        Serial1.end();
   d5afe:	f001 bb08 	b.w	d7112 <_ZN11USARTSerial3endEv>
        return;
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
   d5b02:	4621      	mov	r1, r4
   d5b04:	4628      	mov	r0, r5
   d5b06:	f7ff ffbb 	bl	d5a80 <_ZN5spark19OutputStreamFactory13destroyStreamEP5Print>
   d5b0a:	bd38      	pop	{r3, r4, r5, pc}

000d5b0c <_ZNK5spark10JSONStringeqEPKc.isra.7>:

inline bool spark::JSONString::isEmpty() const {
    return !n_;
}

inline bool spark::JSONString::operator==(const char *str) const {
   d5b0c:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   d5b0e:	f002 f8a9 	bl	d7c64 <strcmp>
}
   d5b12:	fab0 f080 	clz	r0, r0
   d5b16:	0940      	lsrs	r0, r0, #5
   d5b18:	bd08      	pop	{r3, pc}

000d5b1a <_ZN5spark10JSONWriter5valueEPKc>:

inline spark::JSONWriter& spark::JSONWriter::name(const String &name) {
    return this->name(name.c_str(), name.length());
}

inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   d5b1a:	b538      	push	{r3, r4, r5, lr}
   d5b1c:	4605      	mov	r5, r0
    return value(val, strlen(val));
   d5b1e:	4608      	mov	r0, r1

inline spark::JSONWriter& spark::JSONWriter::name(const String &name) {
    return this->name(name.c_str(), name.length());
}

inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   d5b20:	460c      	mov	r4, r1
    return value(val, strlen(val));
   d5b22:	f002 f8cc 	bl	d7cbe <strlen>
   d5b26:	4621      	mov	r1, r4
   d5b28:	4602      	mov	r2, r0
   d5b2a:	4628      	mov	r0, r5
}
   d5b2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
inline spark::JSONWriter& spark::JSONWriter::name(const String &name) {
    return this->name(name.c_str(), name.length());
}

inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
    return value(val, strlen(val));
   d5b30:	f7ff bf39 	b.w	d59a6 <_ZN5spark10JSONWriter5valueEPKcj>

000d5b34 <_ZN14RecursiveMutex4lockEv>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   d5b34:	6800      	ldr	r0, [r0, #0]
   d5b36:	f7fe bf55 	b.w	d49e4 <os_mutex_recursive_lock>

000d5b3a <_ZN5spark16StreamLogHandler5writeEPKc>:

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
}

inline void spark::StreamLogHandler::write(const char *str) {
   d5b3a:	b570      	push	{r4, r5, r6, lr}
   d5b3c:	4604      	mov	r4, r0
    write(str, strlen(str));
   d5b3e:	4608      	mov	r0, r1

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
}

inline void spark::StreamLogHandler::write(const char *str) {
   d5b40:	460d      	mov	r5, r1
    write(str, strlen(str));
   d5b42:	f002 f8bc 	bl	d7cbe <strlen>
   d5b46:	6823      	ldr	r3, [r4, #0]
   d5b48:	4602      	mov	r2, r0
   d5b4a:	4629      	mov	r1, r5
   d5b4c:	4620      	mov	r0, r4
   d5b4e:	68db      	ldr	r3, [r3, #12]
}
   d5b50:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
}

inline void spark::StreamLogHandler::write(const char *str) {
    write(str, strlen(str));
   d5b54:	4718      	bx	r3

000d5b56 <_ZN5spark16StreamLogHandler5writeEc>:
}

inline void spark::StreamLogHandler::write(char c) {
   d5b56:	b513      	push	{r0, r1, r4, lr}
   d5b58:	ab02      	add	r3, sp, #8
    write(&c, 1);
   d5b5a:	6802      	ldr	r2, [r0, #0]

inline void spark::StreamLogHandler::write(const char *str) {
    write(str, strlen(str));
}

inline void spark::StreamLogHandler::write(char c) {
   d5b5c:	f803 1d01 	strb.w	r1, [r3, #-1]!
    write(&c, 1);
   d5b60:	68d4      	ldr	r4, [r2, #12]
   d5b62:	4619      	mov	r1, r3
   d5b64:	2201      	movs	r2, #1
   d5b66:	47a0      	blx	r4
}
   d5b68:	b002      	add	sp, #8
   d5b6a:	bd10      	pop	{r4, pc}

000d5b6c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
        }
    }
    return level;
}

int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   d5b6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   d5b70:	6845      	ldr	r5, [r0, #4]
   d5b72:	6807      	ldr	r7, [r0, #0]
   d5b74:	b085      	sub	sp, #20
   d5b76:	4691      	mov	r9, r2
   d5b78:	2214      	movs	r2, #20
   d5b7a:	4355      	muls	r5, r2
   d5b7c:	9301      	str	r3, [sp, #4]
   d5b7e:	10ab      	asrs	r3, r5, #2
   d5b80:	4d19      	ldr	r5, [pc, #100]	; (d5be8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x7c>)
              random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      __i += __n;
   d5b82:	9202      	str	r2, [sp, #8]
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   d5b84:	435d      	muls	r5, r3
   d5b86:	468b      	mov	fp, r1
   d5b88:	463c      	mov	r4, r7
    return std::distance(nodes.begin(), std::lower_bound(nodes.begin(), nodes.end(), std::make_pair(name, size),
            [&found](const Node &node, const std::pair<const char*, size_t> &value) {
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
                if (cmp == 0) {
                    if (node.size == value.second) { // Lengths are equal
                        found = true; // Allows caller code to avoid extra call to strncmp()
   d5b8a:	2301      	movs	r3, #1
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
   d5b8c:	2d00      	cmp	r5, #0
   d5b8e:	9303      	str	r3, [sp, #12]
   d5b90:	dd23      	ble.n	d5bda <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x6e>
              random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      __i += __n;
   d5b92:	9b02      	ldr	r3, [sp, #8]
	{
	  _DistanceType __half = __len >> 1;
   d5b94:	106e      	asrs	r6, r5, #1
   d5b96:	fb03 f006 	mul.w	r0, r3, r6
   d5b9a:	eb04 0800 	add.w	r8, r4, r0

int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
    // Using binary search to find existent node or suitable position for new node
    return std::distance(nodes.begin(), std::lower_bound(nodes.begin(), nodes.end(), std::make_pair(name, size),
            [&found](const Node &node, const std::pair<const char*, size_t> &value) {
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   d5b9e:	464a      	mov	r2, r9
   d5ba0:	f8b8 a004 	ldrh.w	sl, [r8, #4]
   d5ba4:	5820      	ldr	r0, [r4, r0]
   d5ba6:	45d1      	cmp	r9, sl
   d5ba8:	bf28      	it	cs
   d5baa:	4652      	movcs	r2, sl
   d5bac:	4659      	mov	r1, fp
   d5bae:	f002 f88e 	bl	d7cce <strncmp>
                if (cmp == 0) {
   d5bb2:	9b03      	ldr	r3, [sp, #12]
   d5bb4:	b948      	cbnz	r0, d5bca <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x5e>
                    if (node.size == value.second) { // Lengths are equal
   d5bb6:	45d1      	cmp	r9, sl
   d5bb8:	d103      	bne.n	d5bc2 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   d5bba:	9a01      	ldr	r2, [sp, #4]
   d5bbc:	7013      	strb	r3, [r2, #0]
        }
    }
    return level;
}

int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   d5bbe:	4635      	mov	r5, r6
   d5bc0:	e7e4      	b.n	d5b8c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x20>
                if (cmp == 0) {
                    if (node.size == value.second) { // Lengths are equal
                        found = true; // Allows caller code to avoid extra call to strncmp()
                        return false;
                    }
                    return node.size < value.second;
   d5bc2:	bf8c      	ite	hi
   d5bc4:	2001      	movhi	r0, #1
   d5bc6:	2000      	movls	r0, #0
   d5bc8:	e000      	b.n	d5bcc <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                }
                return cmp < 0;
   d5bca:	0fc0      	lsrs	r0, r0, #31
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
   d5bcc:	2800      	cmp	r0, #0
   d5bce:	d0f6      	beq.n	d5bbe <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x52>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   d5bd0:	1bae      	subs	r6, r5, r6
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
	    {
	      __first = __middle;
	      ++__first;
   d5bd2:	f108 0414 	add.w	r4, r8, #20
	      __len = __len - __half - 1;
   d5bd6:	3e01      	subs	r6, #1
   d5bd8:	e7f1      	b.n	d5bbe <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x52>
            }));
   d5bda:	1be4      	subs	r4, r4, r7
}
   d5bdc:	4802      	ldr	r0, [pc, #8]	; (d5be8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x7c>)
                        return false;
                    }
                    return node.size < value.second;
                }
                return cmp < 0;
            }));
   d5bde:	10a4      	asrs	r4, r4, #2
}
   d5be0:	4360      	muls	r0, r4
   d5be2:	b005      	add	sp, #20
   d5be4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5be8:	cccccccd 	.word	0xcccccccd

000d5bec <_ZNK5spark6detail9LogFilter5levelEPKc>:
}

spark::detail::LogFilter::~LogFilter() {
}

LogLevel spark::detail::LogFilter::level(const char *category) const {
   d5bec:	b5f0      	push	{r4, r5, r6, r7, lr}
   d5bee:	b085      	sub	sp, #20
    LogLevel level = level_; // Default level
    if (!nodes_.isEmpty() && category) {
   d5bf0:	6903      	ldr	r3, [r0, #16]
}

spark::detail::LogFilter::~LogFilter() {
}

LogLevel spark::detail::LogFilter::level(const char *category) const {
   d5bf2:	9101      	str	r1, [sp, #4]
    LogLevel level = level_; // Default level
   d5bf4:	7e06      	ldrb	r6, [r0, #24]
    if (!nodes_.isEmpty() && category) {
   d5bf6:	b313      	cbz	r3, d5c3e <_ZNK5spark6detail9LogFilter5levelEPKc+0x52>
   d5bf8:	b309      	cbz	r1, d5c3e <_ZNK5spark6detail9LogFilter5levelEPKc+0x52>
        const Vector<Node> *pNodes = &nodes_; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
   d5bfa:	af04      	add	r7, sp, #16
   d5bfc:	2300      	movs	r3, #0
   d5bfe:	f847 3d04 	str.w	r3, [r7, #-4]!
}

LogLevel spark::detail::LogFilter::level(const char *category) const {
    LogLevel level = level_; // Default level
    if (!nodes_.isEmpty() && category) {
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   d5c02:	f100 040c 	add.w	r4, r0, #12
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
   d5c06:	461d      	mov	r5, r3
    LogLevel level = level_; // Default level
    if (!nodes_.isEmpty() && category) {
        const Vector<Node> *pNodes = &nodes_; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
   d5c08:	4639      	mov	r1, r7
   d5c0a:	a801      	add	r0, sp, #4
   d5c0c:	f7ff ff41 	bl	d5a92 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   d5c10:	4601      	mov	r1, r0
   d5c12:	b1a0      	cbz	r0, d5c3e <_ZNK5spark6detail9LogFilter5levelEPKc+0x52>
            bool found = false;
   d5c14:	ab04      	add	r3, sp, #16
            const int index = nodeIndex(*pNodes, name, size, found);
   d5c16:	9a03      	ldr	r2, [sp, #12]
    if (!nodes_.isEmpty() && category) {
        const Vector<Node> *pNodes = &nodes_; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
   d5c18:	f803 5d05 	strb.w	r5, [r3, #-5]!
            const int index = nodeIndex(*pNodes, name, size, found);
   d5c1c:	4620      	mov	r0, r4
   d5c1e:	f7ff ffa5 	bl	d5b6c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   d5c22:	f89d 300b 	ldrb.w	r3, [sp, #11]
   d5c26:	b153      	cbz	r3, d5c3e <_ZNK5spark6detail9LogFilter5levelEPKc+0x52>
    return data_[i];
}

template<typename T, typename AllocatorT>
inline const T& spark::Vector<T, AllocatorT>::at(int i) const {
    return data_[i];
   d5c28:	6823      	ldr	r3, [r4, #0]
   d5c2a:	2414      	movs	r4, #20
   d5c2c:	fb04 3400 	mla	r4, r4, r0, r3
            }
            const Node &node = pNodes->at(index);
            if (node.level >= 0) {
                level = (LogLevel)node.level;
            }
            pNodes = &node.nodes;
   d5c30:	3408      	adds	r4, #8
            const int index = nodeIndex(*pNodes, name, size, found);
            if (!found) {
                break;
            }
            const Node &node = pNodes->at(index);
            if (node.level >= 0) {
   d5c32:	f934 3c02 	ldrsh.w	r3, [r4, #-2]
   d5c36:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   d5c38:	bfa8      	it	ge
   d5c3a:	b2de      	uxtbge	r6, r3
    LogLevel level = level_; // Default level
    if (!nodes_.isEmpty() && category) {
        const Vector<Node> *pNodes = &nodes_; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
   d5c3c:	e7e4      	b.n	d5c08 <_ZNK5spark6detail9LogFilter5levelEPKc+0x1c>
            }
            pNodes = &node.nodes;
        }
    }
    return level;
}
   d5c3e:	4630      	mov	r0, r6
   d5c40:	b005      	add	sp, #20
   d5c42:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5c44 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   d5c44:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   d5c46:	4c09      	ldr	r4, [pc, #36]	; (d5c6c <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
   d5c48:	6823      	ldr	r3, [r4, #0]
   d5c4a:	07db      	lsls	r3, r3, #31
   d5c4c:	d40b      	bmi.n	d5c66 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   d5c4e:	4620      	mov	r0, r4
   d5c50:	f7fe fa32 	bl	d40b8 <__cxa_guard_acquire>
   d5c54:	b138      	cbz	r0, d5c66 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   d5c56:	4620      	mov	r0, r4
   d5c58:	f7fe fa33 	bl	d40c2 <__cxa_guard_release>
   d5c5c:	4a04      	ldr	r2, [pc, #16]	; (d5c70 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   d5c5e:	4905      	ldr	r1, [pc, #20]	; (d5c74 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   d5c60:	4805      	ldr	r0, [pc, #20]	; (d5c78 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x34>)
   d5c62:	f001 fc5f 	bl	d7524 <__aeabi_atexit>
    return &factory;
}
   d5c66:	4804      	ldr	r0, [pc, #16]	; (d5c78 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x34>)
   d5c68:	bd10      	pop	{r4, pc}
   d5c6a:	bf00      	nop
   d5c6c:	2003e4b0 	.word	0x2003e4b0
   d5c70:	2003e408 	.word	0x2003e408
   d5c74:	000d5a8f 	.word	0x000d5a8f
   d5c78:	2003e398 	.word	0x2003e398

000d5c7c <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
}

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   d5c7c:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   d5c7e:	4c09      	ldr	r4, [pc, #36]	; (d5ca4 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
   d5c80:	6823      	ldr	r3, [r4, #0]
   d5c82:	07db      	lsls	r3, r3, #31
   d5c84:	d40b      	bmi.n	d5c9e <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   d5c86:	4620      	mov	r0, r4
   d5c88:	f7fe fa16 	bl	d40b8 <__cxa_guard_acquire>
   d5c8c:	b138      	cbz	r0, d5c9e <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   d5c8e:	4620      	mov	r0, r4
   d5c90:	f7fe fa17 	bl	d40c2 <__cxa_guard_release>
   d5c94:	4a04      	ldr	r2, [pc, #16]	; (d5ca8 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   d5c96:	4905      	ldr	r1, [pc, #20]	; (d5cac <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   d5c98:	4805      	ldr	r0, [pc, #20]	; (d5cb0 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x34>)
   d5c9a:	f001 fc43 	bl	d7524 <__aeabi_atexit>
    return &factory;
}
   d5c9e:	4804      	ldr	r0, [pc, #16]	; (d5cb0 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x34>)
   d5ca0:	bd10      	pop	{r4, pc}
   d5ca2:	bf00      	nop
   d5ca4:	2003e4e0 	.word	0x2003e4e0
   d5ca8:	2003e408 	.word	0x2003e408
   d5cac:	000d5a8d 	.word	0x000d5a8d
   d5cb0:	2003e394 	.word	0x2003e394

000d5cb4 <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   d5cb4:	b538      	push	{r3, r4, r5, lr}
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d5cb6:	2500      	movs	r5, #0
   d5cb8:	4604      	mov	r4, r0
   d5cba:	6005      	str	r5, [r0, #0]
   d5cbc:	6045      	str	r5, [r0, #4]
   d5cbe:	6085      	str	r5, [r0, #8]
   d5cc0:	6105      	str	r5, [r0, #16]
   d5cc2:	6145      	str	r5, [r0, #20]
   d5cc4:	6185      	str	r5, [r0, #24]
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5cc6:	f840 5f24 	str.w	r5, [r0, #36]!
    {
        os_mutex_recursive_create(&handle_);
   d5cca:	f7fe fe7b 	bl	d49c4 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   d5cce:	f7ff ffb9 	bl	d5c44 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   d5cd2:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   d5cd4:	f7ff ffd2 	bl	d5c7c <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   d5cd8:	7325      	strb	r5, [r4, #12]
#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
    streamFactory_ = DefaultOutputStreamFactory::instance();
   d5cda:	6220      	str	r0, [r4, #32]
#endif
    outputActive_ = false;
}
   d5cdc:	4620      	mov	r0, r4
   d5cde:	bd38      	pop	{r3, r4, r5, pc}

000d5ce0 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   d5ce0:	b510      	push	{r4, lr}
    static LogManager mgr;
   d5ce2:	4c0a      	ldr	r4, [pc, #40]	; (d5d0c <_ZN5spark10LogManager8instanceEv+0x2c>)
   d5ce4:	6823      	ldr	r3, [r4, #0]
   d5ce6:	07db      	lsls	r3, r3, #31
   d5ce8:	d40e      	bmi.n	d5d08 <_ZN5spark10LogManager8instanceEv+0x28>
   d5cea:	4620      	mov	r0, r4
   d5cec:	f7fe f9e4 	bl	d40b8 <__cxa_guard_acquire>
   d5cf0:	b150      	cbz	r0, d5d08 <_ZN5spark10LogManager8instanceEv+0x28>
   d5cf2:	4807      	ldr	r0, [pc, #28]	; (d5d10 <_ZN5spark10LogManager8instanceEv+0x30>)
   d5cf4:	f7ff ffde 	bl	d5cb4 <_ZN5spark10LogManagerC1Ev>
   d5cf8:	4620      	mov	r0, r4
   d5cfa:	f7fe f9e2 	bl	d40c2 <__cxa_guard_release>
   d5cfe:	4a05      	ldr	r2, [pc, #20]	; (d5d14 <_ZN5spark10LogManager8instanceEv+0x34>)
   d5d00:	4905      	ldr	r1, [pc, #20]	; (d5d18 <_ZN5spark10LogManager8instanceEv+0x38>)
   d5d02:	4803      	ldr	r0, [pc, #12]	; (d5d10 <_ZN5spark10LogManager8instanceEv+0x30>)
   d5d04:	f001 fc0e 	bl	d7524 <__aeabi_atexit>
    return &mgr;
}
   d5d08:	4801      	ldr	r0, [pc, #4]	; (d5d10 <_ZN5spark10LogManager8instanceEv+0x30>)
   d5d0a:	bd10      	pop	{r4, pc}
   d5d0c:	2003e4b4 	.word	0x2003e4b4
   d5d10:	2003e4b8 	.word	0x2003e4b8
   d5d14:	2003e408 	.word	0x2003e408
   d5d18:	000d614b 	.word	0x000d614b

000d5d1c <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   d5d1c:	2300      	movs	r3, #0
   d5d1e:	4a02      	ldr	r2, [pc, #8]	; (d5d28 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   d5d20:	4902      	ldr	r1, [pc, #8]	; (d5d2c <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   d5d22:	4803      	ldr	r0, [pc, #12]	; (d5d30 <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   d5d24:	f7fe bfb6 	b.w	d4c94 <log_set_callbacks>
   d5d28:	000d602d 	.word	0x000d602d
   d5d2c:	000d5fbd 	.word	0x000d5fbd
   d5d30:	000d5f45 	.word	0x000d5f45

000d5d34 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   d5d34:	2300      	movs	r3, #0
   d5d36:	461a      	mov	r2, r3
   d5d38:	4619      	mov	r1, r3
   d5d3a:	4618      	mov	r0, r3
   d5d3c:	f7fe bfaa 	b.w	d4c94 <log_set_callbacks>

000d5d40 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
        k_(nullptr),
        v_(nullptr),
        n_(0) {
}

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   d5d40:	b573      	push	{r0, r1, r4, r5, r6, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5d42:	ac02      	add	r4, sp, #8
        JSONObjectIterator(value.t_, value.d_) {
   d5d44:	688e      	ldr	r6, [r1, #8]
   d5d46:	f851 3b04 	ldr.w	r3, [r1], #4
   d5d4a:	f844 3d08 	str.w	r3, [r4, #-8]!
        k_(nullptr),
        v_(nullptr),
        n_(0) {
}

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   d5d4e:	4605      	mov	r5, r0
   d5d50:	a801      	add	r0, sp, #4
   d5d52:	f7ff f8bb 	bl	d4ecc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        JSONObjectIterator(value.t_, value.d_) {
   d5d56:	4622      	mov	r2, r4
   d5d58:	4631      	mov	r1, r6
   d5d5a:	4628      	mov	r0, r5
   d5d5c:	f7ff fe5a 	bl	d5a14 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5d60:	a801      	add	r0, sp, #4
   d5d62:	f7ff f8ba 	bl	d4eda <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d5d66:	4628      	mov	r0, r5
   d5d68:	b002      	add	sp, #8
   d5d6a:	bd70      	pop	{r4, r5, r6, pc}

000d5d6c <_ZNK5spark18JSONObjectIterator5valueEv>:

inline spark::JSONString spark::JSONObjectIterator::name() const {
    return JSONString(k_, d_);
}

inline spark::JSONValue spark::JSONObjectIterator::value() const {
   d5d6c:	b573      	push	{r0, r1, r4, r5, r6, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5d6e:	ac02      	add	r4, sp, #8
    return JSONValue(v_, d_);
   d5d70:	690e      	ldr	r6, [r1, #16]
   d5d72:	f851 3b04 	ldr.w	r3, [r1], #4
   d5d76:	f844 3d08 	str.w	r3, [r4, #-8]!

inline spark::JSONString spark::JSONObjectIterator::name() const {
    return JSONString(k_, d_);
}

inline spark::JSONValue spark::JSONObjectIterator::value() const {
   d5d7a:	4605      	mov	r5, r0
   d5d7c:	a801      	add	r0, sp, #4
   d5d7e:	f7ff f8a5 	bl	d4ecc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return JSONValue(v_, d_);
   d5d82:	4622      	mov	r2, r4
   d5d84:	4631      	mov	r1, r6
   d5d86:	4628      	mov	r0, r5
   d5d88:	f7ff fe5f 	bl	d5a4a <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5d8c:	a801      	add	r0, sp, #4
   d5d8e:	f7ff f8a4 	bl	d4eda <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d5d92:	4628      	mov	r0, r5
   d5d94:	b002      	add	sp, #8
   d5d96:	bd70      	pop	{r4, r5, r6, pc}

000d5d98 <_ZNK5spark18JSONObjectIterator4nameEv>:

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
        JSONObjectIterator(value.t_, value.d_) {
}

inline spark::JSONString spark::JSONObjectIterator::name() const {
   d5d98:	b573      	push	{r0, r1, r4, r5, r6, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5d9a:	ac02      	add	r4, sp, #8
    return JSONString(k_, d_);
   d5d9c:	68ce      	ldr	r6, [r1, #12]
   d5d9e:	f851 3b04 	ldr.w	r3, [r1], #4
   d5da2:	f844 3d08 	str.w	r3, [r4, #-8]!

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
        JSONObjectIterator(value.t_, value.d_) {
}

inline spark::JSONString spark::JSONObjectIterator::name() const {
   d5da6:	4605      	mov	r5, r0
   d5da8:	a801      	add	r0, sp, #4
   d5daa:	f7ff f88f 	bl	d4ecc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return JSONString(k_, d_);
   d5dae:	4622      	mov	r2, r4
   d5db0:	4631      	mov	r1, r6
   d5db2:	4628      	mov	r0, r5
   d5db4:	f7ff fe06 	bl	d59c4 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5db8:	a801      	add	r0, sp, #4
   d5dba:	f7ff f88e 	bl	d4eda <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d5dbe:	4628      	mov	r0, r5
   d5dc0:	b002      	add	sp, #8
   d5dc2:	bd70      	pop	{r4, r5, r6, pc}

000d5dc4 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
    static DefaultOutputStreamFactory factory;
    return &factory;
}

void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   d5dc4:	b530      	push	{r4, r5, lr}
   d5dc6:	b08b      	sub	sp, #44	; 0x2c
   d5dc8:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   d5dca:	4601      	mov	r1, r0
   d5dcc:	a804      	add	r0, sp, #16
   d5dce:	f7ff ffb7 	bl	d5d40 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
    while (it.next()) {
   d5dd2:	a804      	add	r0, sp, #16
   d5dd4:	f7ff fd29 	bl	d582a <_ZN5spark18JSONObjectIterator4nextEv>
   d5dd8:	b1e8      	cbz	r0, d5e16 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x52>
        if (it.name() == "baud" && baudRate) {
   d5dda:	a904      	add	r1, sp, #16
   d5ddc:	4668      	mov	r0, sp
   d5dde:	f7ff ffdb 	bl	d5d98 <_ZNK5spark18JSONObjectIterator4nameEv>
   d5de2:	490f      	ldr	r1, [pc, #60]	; (d5e20 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x5c>)
   d5de4:	9802      	ldr	r0, [sp, #8]
   d5de6:	f7ff fe91 	bl	d5b0c <_ZNK5spark10JSONStringeqEPKc.isra.7>
   d5dea:	4604      	mov	r4, r0
   d5dec:	b110      	cbz	r0, d5df4 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x30>
   d5dee:	1c2c      	adds	r4, r5, #0
   d5df0:	bf18      	it	ne
   d5df2:	2401      	movne	r4, #1
   d5df4:	a801      	add	r0, sp, #4
   d5df6:	f7ff f870 	bl	d4eda <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5dfa:	2c00      	cmp	r4, #0
   d5dfc:	d0e9      	beq.n	d5dd2 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0xe>
            *baudRate = it.value().toInt();
   d5dfe:	a904      	add	r1, sp, #16
   d5e00:	4668      	mov	r0, sp
   d5e02:	f7ff ffb3 	bl	d5d6c <_ZNK5spark18JSONObjectIterator5valueEv>
   d5e06:	4668      	mov	r0, sp
   d5e08:	f7ff fcef 	bl	d57ea <_ZNK5spark9JSONValue5toIntEv>
   d5e0c:	6028      	str	r0, [r5, #0]
   d5e0e:	a801      	add	r0, sp, #4
   d5e10:	f7ff f863 	bl	d4eda <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5e14:	e7dd      	b.n	d5dd2 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0xe>
   d5e16:	a805      	add	r0, sp, #20
   d5e18:	f7ff f85f 	bl	d4eda <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        }
    }
}
   d5e1c:	b00b      	add	sp, #44	; 0x2c
   d5e1e:	bd30      	pop	{r4, r5, pc}
   d5e20:	000d8100 	.word	0x000d8100

000d5e24 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
    static DefaultLogHandlerFactory factory;
    return &factory;
}

// spark::DefaultOutputStreamFactory
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   d5e24:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d5e26:	460c      	mov	r4, r1
#if PLATFORM_ID != 3
    if (strcmp(type, "Serial") == 0) {
   d5e28:	4620      	mov	r0, r4
   d5e2a:	4913      	ldr	r1, [pc, #76]	; (d5e78 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
    static DefaultLogHandlerFactory factory;
    return &factory;
}

// spark::DefaultOutputStreamFactory
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   d5e2c:	4615      	mov	r5, r2
#if PLATFORM_ID != 3
    if (strcmp(type, "Serial") == 0) {
   d5e2e:	f001 ff19 	bl	d7c64 <strcmp>
   d5e32:	b940      	cbnz	r0, d5e46 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x22>
        Serial.begin();
   d5e34:	f001 fa1a 	bl	d726c <_Z16_fetch_usbserialv>
   d5e38:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d5e3c:	f001 fa06 	bl	d724c <_ZN9USBSerial5beginEl>
        return &Serial;
   d5e40:	f001 fa14 	bl	d726c <_Z16_fetch_usbserialv>
   d5e44:	e015      	b.n	d5e72 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4e>
    if (strcmp(type, "USBSerial1") == 0) {
        USBSerial1.begin();
        return &USBSerial1;
    }
#endif
    if (strcmp(type, "Serial1") == 0) {
   d5e46:	490d      	ldr	r1, [pc, #52]	; (d5e7c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x58>)
   d5e48:	4620      	mov	r0, r4
   d5e4a:	f001 ff0b 	bl	d7c64 <strcmp>
   d5e4e:	b978      	cbnz	r0, d5e70 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
        int baud = 9600;
   d5e50:	a902      	add	r1, sp, #8
   d5e52:	f44f 5316 	mov.w	r3, #9600	; 0x2580
   d5e56:	f841 3d04 	str.w	r3, [r1, #-4]!
        getParams(params, &baud);
   d5e5a:	4628      	mov	r0, r5
   d5e5c:	f7ff ffb2 	bl	d5dc4 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   d5e60:	f001 f95e 	bl	d7120 <_Z22__fetch_global_Serial1v>
   d5e64:	9901      	ldr	r1, [sp, #4]
   d5e66:	f001 f951 	bl	d710c <_ZN11USARTSerial5beginEm>
        return &Serial1;
   d5e6a:	f001 f959 	bl	d7120 <_Z22__fetch_global_Serial1v>
   d5e6e:	e000      	b.n	d5e72 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4e>
    }
#endif // PLATFORM_ID != 3
    return nullptr;
   d5e70:	2000      	movs	r0, #0
}
   d5e72:	b003      	add	sp, #12
   d5e74:	bd30      	pop	{r4, r5, pc}
   d5e76:	bf00      	nop
   d5e78:	000d8105 	.word	0x000d8105
   d5e7c:	000d810c 	.word	0x000d810c

000d5e80 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d5e80:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d5e82:	6804      	ldr	r4, [r0, #0]
   d5e84:	6843      	ldr	r3, [r0, #4]
   d5e86:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d5e88:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d5e8a:	fb06 4603 	mla	r6, r6, r3, r4
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d5e8e:	42a6      	cmp	r6, r4
   d5e90:	d005      	beq.n	d5e9e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
    |
    `- aa (error) - b (warn)
*/

// spark::detail::LogFilter
struct spark::detail::LogFilter::Node {
   d5e92:	f104 0008 	add.w	r0, r4, #8
   d5e96:	f7ff fff3 	bl	d5e80 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d5e9a:	3414      	adds	r4, #20
   d5e9c:	e7f7      	b.n	d5e8e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d5e9e:	6828      	ldr	r0, [r5, #0]
   d5ea0:	f7fe ffb4 	bl	d4e0c <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d5ea4:	4628      	mov	r0, r5
   d5ea6:	bd70      	pop	{r4, r5, r6, pc}

000d5ea8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d5ea8:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d5eaa:	6804      	ldr	r4, [r0, #0]
   d5eac:	6843      	ldr	r3, [r0, #4]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d5eae:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d5eb0:	eb04 1603 	add.w	r6, r4, r3, lsl #4
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d5eb4:	42a6      	cmp	r6, r4
   d5eb6:	d004      	beq.n	d5ec2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   d5eb8:	4620      	mov	r0, r4
   d5eba:	f000 ffb4 	bl	d6e26 <_ZN6StringD1Ev>
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d5ebe:	3410      	adds	r4, #16
   d5ec0:	e7f8      	b.n	d5eb4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d5ec2:	6828      	ldr	r0, [r5, #0]
   d5ec4:	f7fe ffa2 	bl	d4e0c <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d5ec8:	4628      	mov	r0, r5
   d5eca:	bd70      	pop	{r4, r5, r6, pc}

000d5ecc <_ZN5spark6detail9LogFilterD1Ev>:
    swap(cats_, cats);
    swap(nodes_, nodes);
    level_ = level;
}

spark::detail::LogFilter::~LogFilter() {
   d5ecc:	b510      	push	{r4, lr}
   d5ece:	4604      	mov	r4, r0
   d5ed0:	300c      	adds	r0, #12
   d5ed2:	f7ff ffd5 	bl	d5e80 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d5ed6:	4620      	mov	r0, r4
   d5ed8:	f7ff ffe6 	bl	d5ea8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   d5edc:	4620      	mov	r0, r4
   d5ede:	bd10      	pop	{r4, pc}

000d5ee0 <_ZN5spark16StreamLogHandlerD1Ev>:
/*!
    \brief Stream-based log handler.

    Adapter class allowing to use existent stream objects as destination for logging output.
*/
class StreamLogHandler: public LogHandler {
   d5ee0:	b510      	push	{r4, lr}
    */
    LogHandler(LogLevel level, LogCategoryFilters filters);
    /*!
        \brief Destructor.
    */
    virtual ~LogHandler() = default;
   d5ee2:	4b04      	ldr	r3, [pc, #16]	; (d5ef4 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
/*!
    \brief Stream-based log handler.

    Adapter class allowing to use existent stream objects as destination for logging output.
*/
class StreamLogHandler: public LogHandler {
   d5ee4:	4604      	mov	r4, r0
    */
    LogHandler(LogLevel level, LogCategoryFilters filters);
    /*!
        \brief Destructor.
    */
    virtual ~LogHandler() = default;
   d5ee6:	f840 3b04 	str.w	r3, [r0], #4
   d5eea:	f7ff ffef 	bl	d5ecc <_ZN5spark6detail9LogFilterD1Ev>
/*!
    \brief Stream-based log handler.

    Adapter class allowing to use existent stream objects as destination for logging output.
*/
class StreamLogHandler: public LogHandler {
   d5eee:	4620      	mov	r0, r4
   d5ef0:	bd10      	pop	{r4, pc}
   d5ef2:	bf00      	nop
   d5ef4:	000d7e5c 	.word	0x000d7e5c

000d5ef8 <_ZN5spark16StreamLogHandlerD0Ev>:
   d5ef8:	b510      	push	{r4, lr}
   d5efa:	4604      	mov	r4, r0
   d5efc:	f7ff fff0 	bl	d5ee0 <_ZN5spark16StreamLogHandlerD1Ev>
   d5f00:	4620      	mov	r0, r4
   d5f02:	2124      	movs	r1, #36	; 0x24
   d5f04:	f001 fb13 	bl	d752e <_ZdlPvj>
   d5f08:	4620      	mov	r0, r4
   d5f0a:	bd10      	pop	{r4, pc}

000d5f0c <_ZN5spark20JSONStreamLogHandlerD1Ev>:

private:
    Print *stream_;
};

class JSONStreamLogHandler: public StreamLogHandler {
   d5f0c:	b510      	push	{r4, lr}
   d5f0e:	4b03      	ldr	r3, [pc, #12]	; (d5f1c <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   d5f10:	6003      	str	r3, [r0, #0]
   d5f12:	4604      	mov	r4, r0
   d5f14:	f7ff ffe4 	bl	d5ee0 <_ZN5spark16StreamLogHandlerD1Ev>
   d5f18:	4620      	mov	r0, r4
   d5f1a:	bd10      	pop	{r4, pc}
   d5f1c:	000d80f0 	.word	0x000d80f0

000d5f20 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   d5f20:	b510      	push	{r4, lr}
   d5f22:	4604      	mov	r4, r0
   d5f24:	f7ff fff2 	bl	d5f0c <_ZN5spark20JSONStreamLogHandlerD1Ev>
   d5f28:	4620      	mov	r0, r4
   d5f2a:	2124      	movs	r1, #36	; 0x24
   d5f2c:	f001 faff 	bl	d752e <_ZdlPvj>
   d5f30:	4620      	mov	r0, r4
   d5f32:	bd10      	pop	{r4, pc}

000d5f34 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   d5f34:	b510      	push	{r4, lr}
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d5f36:	6803      	ldr	r3, [r0, #0]
   d5f38:	4604      	mov	r4, r0
   d5f3a:	6818      	ldr	r0, [r3, #0]
   d5f3c:	f7fe fd5a 	bl	d49f4 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   d5f40:	4620      	mov	r0, r4
   d5f42:	bd10      	pop	{r4, pc}

000d5f44 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   d5f44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5f48:	469b      	mov	fp, r3
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   d5f4a:	4b1b      	ldr	r3, [pc, #108]	; (d5fb8 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>)
   d5f4c:	685b      	ldr	r3, [r3, #4]
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d5f4e:	f3c3 0308 	ubfx	r3, r3, #0, #9

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   d5f52:	b085      	sub	sp, #20
   d5f54:	4682      	mov	sl, r0
   d5f56:	460e      	mov	r6, r1
   d5f58:	4690      	mov	r8, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d5f5a:	bb53      	cbnz	r3, d5fb2 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x6e>
        return;
    }
#endif
    LogManager *that = instance();
   d5f5c:	f7ff fec0 	bl	d5ce0 <_ZN5spark10LogManager8instanceEv>
   d5f60:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   d5f62:	3024      	adds	r0, #36	; 0x24
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d5f64:	9003      	str	r0, [sp, #12]
      { _M_device.lock(); }
   d5f66:	f7ff fde5 	bl	d5b34 <_ZN14RecursiveMutex4lockEv>
        // prevent re-entry
        if (that->isActive()) {
   d5f6a:	7b23      	ldrb	r3, [r4, #12]
   d5f6c:	b9f3      	cbnz	r3, d5fac <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x68>
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   d5f6e:	2301      	movs	r3, #1
   d5f70:	7323      	strb	r3, [r4, #12]
   d5f72:	6825      	ldr	r5, [r4, #0]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d5f74:	6863      	ldr	r3, [r4, #4]
        if (that->isActive()) {
            return;
        }
        that->setActive(true);
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
   d5f76:	b2f6      	uxtb	r6, r6
   d5f78:	eb05 0983 	add.w	r9, r5, r3, lsl #2
        // prevent re-entry
        if (that->isActive()) {
            return;
        }
        that->setActive(true);
        for (LogHandler *handler: that->activeHandlers_) {
   d5f7c:	454d      	cmp	r5, r9
   d5f7e:	d013      	beq.n	d5fa8 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x64>
   d5f80:	f855 7b04 	ldr.w	r7, [r5], #4
inline const char* spark::LogHandler::levelName(LogLevel level) {
    return log_level_name(level, nullptr);
}

inline void spark::LogHandler::message(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
    if (level >= filter_.level(category)) {
   d5f84:	4641      	mov	r1, r8
   d5f86:	1d38      	adds	r0, r7, #4
   d5f88:	f7ff fe30 	bl	d5bec <_ZNK5spark6detail9LogFilter5levelEPKc>
   d5f8c:	4286      	cmp	r6, r0
   d5f8e:	d3f5      	bcc.n	d5f7c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x38>
        logMessage(msg, level, category, attr);
   d5f90:	683b      	ldr	r3, [r7, #0]
   d5f92:	f8cd b000 	str.w	fp, [sp]
   d5f96:	689b      	ldr	r3, [r3, #8]
   d5f98:	469e      	mov	lr, r3
   d5f9a:	4638      	mov	r0, r7
   d5f9c:	4643      	mov	r3, r8
   d5f9e:	4632      	mov	r2, r6
   d5fa0:	4651      	mov	r1, sl
   d5fa2:	4677      	mov	r7, lr
   d5fa4:	47b8      	blx	r7
   d5fa6:	e7e9      	b.n	d5f7c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x38>
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   d5fa8:	2300      	movs	r3, #0
   d5faa:	7323      	strb	r3, [r4, #12]
#endif
    LogManager *that = instance();
    LOG_WITH_LOCK(that->mutex_) {
        // prevent re-entry
        if (that->isActive()) {
            return;
   d5fac:	a803      	add	r0, sp, #12
   d5fae:	f7ff ffc1 	bl	d5f34 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   d5fb2:	b005      	add	sp, #20
   d5fb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5fb8:	e000ed00 	.word	0xe000ed00

000d5fbc <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:

void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   d5fbc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5fc0:	4699      	mov	r9, r3
   d5fc2:	4b19      	ldr	r3, [pc, #100]	; (d6028 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x6c>)
   d5fc4:	685b      	ldr	r3, [r3, #4]
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d5fc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
        }
        that->setActive(false);
    }
}

void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   d5fca:	4607      	mov	r7, r0
   d5fcc:	4688      	mov	r8, r1
   d5fce:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d5fd0:	bb33      	cbnz	r3, d6020 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x64>
        return;
    }
#endif
    LogManager *that = instance();
   d5fd2:	f7ff fe85 	bl	d5ce0 <_ZN5spark10LogManager8instanceEv>
   d5fd6:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   d5fd8:	3024      	adds	r0, #36	; 0x24
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d5fda:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d5fdc:	f7ff fdaa 	bl	d5b34 <_ZN14RecursiveMutex4lockEv>
        // prevent re-entry
        if (that->isActive()) {
   d5fe0:	7b23      	ldrb	r3, [r4, #12]
   d5fe2:	b9d3      	cbnz	r3, d601a <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x5e>
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   d5fe4:	2301      	movs	r3, #1
   d5fe6:	7323      	strb	r3, [r4, #12]
   d5fe8:	6825      	ldr	r5, [r4, #0]
   d5fea:	6863      	ldr	r3, [r4, #4]
    }
}

inline void spark::LogHandler::write(const char *data, size_t size, LogLevel level, const char *category) {
    if (level >= filter_.level(category)) {
   d5fec:	fa5f fb86 	uxtb.w	fp, r6
   d5ff0:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        // prevent re-entry
        if (that->isActive()) {
            return;
        }
        that->setActive(true);
        for (LogHandler *handler: that->activeHandlers_) {
   d5ff4:	4555      	cmp	r5, sl
   d5ff6:	d00e      	beq.n	d6016 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x5a>
   d5ff8:	f855 6b04 	ldr.w	r6, [r5], #4
   d5ffc:	4649      	mov	r1, r9
   d5ffe:	1d30      	adds	r0, r6, #4
   d6000:	f7ff fdf4 	bl	d5bec <_ZNK5spark6detail9LogFilter5levelEPKc>
   d6004:	4583      	cmp	fp, r0
   d6006:	d3f5      	bcc.n	d5ff4 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
        write(data, size);
   d6008:	6833      	ldr	r3, [r6, #0]
   d600a:	4642      	mov	r2, r8
   d600c:	68db      	ldr	r3, [r3, #12]
   d600e:	4639      	mov	r1, r7
   d6010:	4630      	mov	r0, r6
   d6012:	4798      	blx	r3
   d6014:	e7ee      	b.n	d5ff4 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   d6016:	2300      	movs	r3, #0
   d6018:	7323      	strb	r3, [r4, #12]
#endif
    LogManager *that = instance();
    LOG_WITH_LOCK(that->mutex_) {
        // prevent re-entry
        if (that->isActive()) {
            return;
   d601a:	a801      	add	r0, sp, #4
   d601c:	f7ff ff8a 	bl	d5f34 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->write(data, size, (LogLevel)level, category);
        }
        that->setActive(false);
    }
}
   d6020:	b003      	add	sp, #12
   d6022:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6026:	bf00      	nop
   d6028:	e000ed00 	.word	0xe000ed00

000d602c <_ZN5spark10LogManager10logEnabledEiPKcPv>:

int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   d602c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d6030:	4b15      	ldr	r3, [pc, #84]	; (d6088 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5c>)
   d6032:	685b      	ldr	r3, [r3, #4]
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d6034:	f3c3 0308 	ubfx	r3, r3, #0, #9
        }
        that->setActive(false);
    }
}

int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   d6038:	4604      	mov	r4, r0
   d603a:	4688      	mov	r8, r1
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d603c:	b9fb      	cbnz	r3, d607e <_ZN5spark10LogManager10logEnabledEiPKcPv+0x52>
        return 0;
    }
#endif
    LogManager *that = instance();
   d603e:	f7ff fe4f 	bl	d5ce0 <_ZN5spark10LogManager8instanceEv>
   d6042:	4606      	mov	r6, r0
    int minLevel = LOG_LEVEL_NONE;
    LOG_WITH_LOCK(that->mutex_) {
   d6044:	3024      	adds	r0, #36	; 0x24
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d6046:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d6048:	f7ff fd74 	bl	d5b34 <_ZN14RecursiveMutex4lockEv>
   d604c:	e896 00a0 	ldmia.w	r6, {r5, r7}
   d6050:	2646      	movs	r6, #70	; 0x46
   d6052:	eb05 0787 	add.w	r7, r5, r7, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   d6056:	42af      	cmp	r7, r5
   d6058:	d107      	bne.n	d606a <_ZN5spark10LogManager10logEnabledEiPKcPv+0x3e>
        return 0;
    }
#endif
    LogManager *that = instance();
    int minLevel = LOG_LEVEL_NONE;
    LOG_WITH_LOCK(that->mutex_) {
   d605a:	a801      	add	r0, sp, #4
   d605c:	f7ff ff6a 	bl	d5f34 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
            if (level < minLevel) {
                minLevel = level;
            }
        }
    }
    return (level >= minLevel);
   d6060:	42b4      	cmp	r4, r6
   d6062:	bfb4      	ite	lt
   d6064:	2000      	movlt	r0, #0
   d6066:	2001      	movge	r0, #1
   d6068:	e00a      	b.n	d6080 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x54>
inline LogLevel spark::LogHandler::level() const {
    return filter_.level();
}

inline LogLevel spark::LogHandler::level(const char *category) const {
    return filter_.level(category);
   d606a:	f855 0b04 	ldr.w	r0, [r5], #4
   d606e:	4641      	mov	r1, r8
   d6070:	3004      	adds	r0, #4
   d6072:	f7ff fdbb 	bl	d5bec <_ZNK5spark6detail9LogFilter5levelEPKc>
   d6076:	4286      	cmp	r6, r0
   d6078:	bfa8      	it	ge
   d607a:	4606      	movge	r6, r0
   d607c:	e7eb      	b.n	d6056 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2a>
}

int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
        return 0;
   d607e:	2000      	movs	r0, #0
                minLevel = level;
            }
        }
    }
    return (level >= minLevel);
}
   d6080:	b002      	add	sp, #8
   d6082:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6086:	bf00      	nop
   d6088:	e000ed00 	.word	0xe000ed00

000d608c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
    move(p, p + n, data_ + size_);
    size_ -= n;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d608c:	b570      	push	{r4, r5, r6, lr}
    T* const p = find(data_, data_ + size_, value);
   d608e:	6803      	ldr	r3, [r0, #0]
   d6090:	6842      	ldr	r2, [r0, #4]
    move(p, p + n, data_ + size_);
    size_ -= n;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d6092:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   d6094:	eb03 0282 	add.w	r2, r3, r2, lsl #2
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
   d6098:	429a      	cmp	r2, r3
   d609a:	4618      	mov	r0, r3
   d609c:	d00e      	beq.n	d60bc <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x30>
            if (*p == value) {
   d609e:	6806      	ldr	r6, [r0, #0]
   d60a0:	680d      	ldr	r5, [r1, #0]
   d60a2:	42ae      	cmp	r6, r5
   d60a4:	f103 0304 	add.w	r3, r3, #4
   d60a8:	d1f6      	bne.n	d6098 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xc>
    T* const p = find(data_, data_ + size_, value);
    if (!p) {
        return false;
    }
    p->~T();
    move(p, p + 1, data_ + size_);
   d60aa:	1d01      	adds	r1, r0, #4
        }
    }

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
   d60ac:	1a52      	subs	r2, r2, r1
   d60ae:	f001 fd76 	bl	d7b9e <memmove>
    if (!p) {
        return false;
    }
    p->~T();
    move(p, p + 1, data_ + size_);
    --size_;
   d60b2:	6863      	ldr	r3, [r4, #4]
   d60b4:	3b01      	subs	r3, #1
   d60b6:	6063      	str	r3, [r4, #4]
    return true;
   d60b8:	2001      	movs	r0, #1
}
   d60ba:	bd70      	pop	{r4, r5, r6, pc}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
    T* const p = find(data_, data_ + size_, value);
    if (!p) {
        return false;
   d60bc:	2000      	movs	r0, #0
   d60be:	bd70      	pop	{r4, r5, r6, pc}

000d60c0 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
        }
    }
    return true;
}

void spark::LogManager::removeHandler(LogHandler *handler) {
   d60c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d60c2:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
   d60c4:	3024      	adds	r0, #36	; 0x24
        }
    }
    return true;
}

void spark::LogManager::removeHandler(LogHandler *handler) {
   d60c6:	9101      	str	r1, [sp, #4]
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d60c8:	9003      	str	r0, [sp, #12]
      { _M_device.lock(); }
   d60ca:	f7ff fd33 	bl	d5b34 <_ZN14RecursiveMutex4lockEv>
    LOG_WITH_LOCK(mutex_) {
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   d60ce:	a901      	add	r1, sp, #4
   d60d0:	4620      	mov	r0, r4
   d60d2:	f7ff ffdb 	bl	d608c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   d60d6:	b920      	cbnz	r0, d60e2 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x22>
    }
    return true;
}

void spark::LogManager::removeHandler(LogHandler *handler) {
    LOG_WITH_LOCK(mutex_) {
   d60d8:	a803      	add	r0, sp, #12
   d60da:	f7ff ff2b 	bl	d5f34 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
            resetSystemCallbacks();
        }
    }
}
   d60de:	b004      	add	sp, #16
   d60e0:	bd10      	pop	{r4, pc}
    return true;
}

void spark::LogManager::removeHandler(LogHandler *handler) {
    LOG_WITH_LOCK(mutex_) {
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   d60e2:	6863      	ldr	r3, [r4, #4]
   d60e4:	2b00      	cmp	r3, #0
   d60e6:	d1f7      	bne.n	d60d8 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x18>
            resetSystemCallbacks();
   d60e8:	f7ff fe24 	bl	d5d34 <_ZN5spark10LogManager20resetSystemCallbacksEv>
   d60ec:	e7f4      	b.n	d60d8 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x18>

000d60ee <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
            break;
        }
    }
}

void spark::LogManager::destroyFactoryHandlers() {
   d60ee:	b570      	push	{r4, r5, r6, lr}
   d60f0:	6905      	ldr	r5, [r0, #16]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d60f2:	6943      	ldr	r3, [r0, #20]
   d60f4:	2618      	movs	r6, #24
   d60f6:	4604      	mov	r4, r0
   d60f8:	fb06 5603 	mla	r6, r6, r3, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   d60fc:	42ae      	cmp	r6, r5
   d60fe:	d015      	beq.n	d612c <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   d6100:	f105 0110 	add.w	r1, r5, #16
   d6104:	4620      	mov	r0, r4
   d6106:	f7ff ffc1 	bl	d608c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   d610a:	6863      	ldr	r3, [r4, #4]
   d610c:	b90b      	cbnz	r3, d6112 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   d610e:	f7ff fe11 	bl	d5d34 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        }
        handlerFactory_->destroyHandler(h.handler);
   d6112:	69e0      	ldr	r0, [r4, #28]
   d6114:	6929      	ldr	r1, [r5, #16]
   d6116:	6803      	ldr	r3, [r0, #0]
   d6118:	68db      	ldr	r3, [r3, #12]
   d611a:	4798      	blx	r3
        if (h.stream) {
   d611c:	6969      	ldr	r1, [r5, #20]
   d611e:	b119      	cbz	r1, d6128 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   d6120:	6a20      	ldr	r0, [r4, #32]
   d6122:	6803      	ldr	r3, [r0, #0]
   d6124:	68db      	ldr	r3, [r3, #12]
   d6126:	4798      	blx	r3
   d6128:	3518      	adds	r5, #24
        }
    }
}

void spark::LogManager::destroyFactoryHandlers() {
    for (const FactoryHandler &h: factoryHandlers_) {
   d612a:	e7e7      	b.n	d60fc <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    return true;
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
   d612c:	6925      	ldr	r5, [r4, #16]
   d612e:	6963      	ldr	r3, [r4, #20]
   d6130:	2618      	movs	r6, #24
   d6132:	fb06 5603 	mla	r6, r6, r3, r5
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d6136:	42b5      	cmp	r5, r6
   d6138:	d004      	beq.n	d6144 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
        }
    }
}

// spark::LogManager
struct spark::LogManager::FactoryHandler {
   d613a:	4628      	mov	r0, r5
   d613c:	f000 fe73 	bl	d6e26 <_ZN6StringD1Ev>
   d6140:	3518      	adds	r5, #24
   d6142:	e7f8      	b.n	d6136 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
    size_ = 0;
   d6144:	2300      	movs	r3, #0
   d6146:	6163      	str	r3, [r4, #20]
   d6148:	bd70      	pop	{r4, r5, r6, pc}

000d614a <_ZN5spark10LogManagerD1Ev>:
    streamFactory_ = DefaultOutputStreamFactory::instance();
#endif
    outputActive_ = false;
}

spark::LogManager::~LogManager() {
   d614a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d614c:	4604      	mov	r4, r0
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d614e:	ad02      	add	r5, sp, #8
    resetSystemCallbacks();
   d6150:	f7ff fdf0 	bl	d5d34 <_ZN5spark10LogManager20resetSystemCallbacksEv>
#if Wiring_LogConfig
    LOG_WITH_LOCK(mutex_) {
   d6154:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d6158:	f845 0d04 	str.w	r0, [r5, #-4]!
      { _M_device.lock(); }
   d615c:	f7ff fcea 	bl	d5b34 <_ZN14RecursiveMutex4lockEv>
         destroyFactoryHandlers();
   d6160:	4620      	mov	r0, r4
   d6162:	f7ff ffc4 	bl	d60ee <_ZN5spark10LogManager22destroyFactoryHandlersEv>
}

spark::LogManager::~LogManager() {
    resetSystemCallbacks();
#if Wiring_LogConfig
    LOG_WITH_LOCK(mutex_) {
   d6166:	4628      	mov	r0, r5
   d6168:	f7ff fee4 	bl	d5f34 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d616c:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d616e:	b108      	cbz	r0, d6174 <_ZN5spark10LogManagerD1Ev+0x2a>
            os_mutex_recursive_destroy(handle_);
   d6170:	f7fe fc30 	bl	d49d4 <os_mutex_recursive_destroy>
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
   d6174:	6925      	ldr	r5, [r4, #16]
   d6176:	6963      	ldr	r3, [r4, #20]
   d6178:	2618      	movs	r6, #24
   d617a:	fb06 5603 	mla	r6, r6, r3, r5
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d617e:	42b5      	cmp	r5, r6
   d6180:	d004      	beq.n	d618c <_ZN5spark10LogManagerD1Ev+0x42>
        }
    }
}

// spark::LogManager
struct spark::LogManager::FactoryHandler {
   d6182:	4628      	mov	r0, r5
   d6184:	f000 fe4f 	bl	d6e26 <_ZN6StringD1Ev>
   d6188:	3518      	adds	r5, #24
   d618a:	e7f8      	b.n	d617e <_ZN5spark10LogManagerD1Ev+0x34>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d618c:	6920      	ldr	r0, [r4, #16]
   d618e:	f7fe fe3d 	bl	d4e0c <free>
   d6192:	6820      	ldr	r0, [r4, #0]
   d6194:	f7fe fe3a 	bl	d4e0c <free>
#if Wiring_LogConfig
    LOG_WITH_LOCK(mutex_) {
         destroyFactoryHandlers();
    }
#endif
}
   d6198:	4620      	mov	r0, r4
   d619a:	b002      	add	sp, #8
   d619c:	bd70      	pop	{r4, r5, r6, pc}

000d619e <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>:
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d619e:	6803      	ldr	r3, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   d61a0:	680a      	ldr	r2, [r1, #0]
   d61a2:	6002      	str	r2, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d61a4:	600b      	str	r3, [r1, #0]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d61a6:	6843      	ldr	r3, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   d61a8:	684a      	ldr	r2, [r1, #4]
   d61aa:	6042      	str	r2, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d61ac:	604b      	str	r3, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d61ae:	6883      	ldr	r3, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   d61b0:	688a      	ldr	r2, [r1, #8]
   d61b2:	6082      	str	r2, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d61b4:	608b      	str	r3, [r1, #8]
   d61b6:	4770      	bx	lr

000d61b8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        size_ = vector.size_;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   d61b8:	b510      	push	{r4, lr}
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d61ba:	2300      	movs	r3, #0
        size_ = vector.size_;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   d61bc:	4604      	mov	r4, r0
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d61be:	6003      	str	r3, [r0, #0]
   d61c0:	6043      	str	r3, [r0, #4]
   d61c2:	6083      	str	r3, [r0, #8]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
   d61c4:	f7ff ffeb 	bl	d619e <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
}
   d61c8:	4620      	mov	r0, r4
   d61ca:	bd10      	pop	{r4, pc}

000d61cc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d61cc:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d61ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d61d0:	4604      	mov	r4, r0
   d61d2:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   d61d4:	d925      	bls.n	d6222 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
   d61d6:	4290      	cmp	r0, r2
   d61d8:	d224      	bcs.n	d6224 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x58>
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
   d61da:	1a55      	subs	r5, r2, r1
   d61dc:	3d14      	subs	r5, #20
   d61de:	442c      	add	r4, r5
   d61e0:	f1a1 0714 	sub.w	r7, r1, #20
   d61e4:	f1a2 050c 	sub.w	r5, r2, #12
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d61e8:	2600      	movs	r6, #0
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d61ea:	f1a5 0308 	sub.w	r3, r5, #8
   d61ee:	429f      	cmp	r7, r3
   d61f0:	d037      	beq.n	d6262 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x96>
                new(dest) T(std::move(*end));
   d61f2:	b184      	cbz	r4, d6216 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x4a>
    |
    `- aa (error) - b (warn)
*/

// spark::detail::LogFilter
struct spark::detail::LogFilter::Node {
   d61f4:	f855 3c08 	ldr.w	r3, [r5, #-8]
   d61f8:	6023      	str	r3, [r4, #0]
   d61fa:	f835 3c04 	ldrh.w	r3, [r5, #-4]
   d61fe:	80a3      	strh	r3, [r4, #4]
   d6200:	f935 3c02 	ldrsh.w	r3, [r5, #-2]
   d6204:	80e3      	strh	r3, [r4, #6]
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d6206:	60a6      	str	r6, [r4, #8]
   d6208:	60e6      	str	r6, [r4, #12]
   d620a:	6126      	str	r6, [r4, #16]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
   d620c:	4629      	mov	r1, r5
   d620e:	f104 0008 	add.w	r0, r4, #8
   d6212:	f7ff ffc4 	bl	d619e <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
   d6216:	4628      	mov	r0, r5
   d6218:	f7ff fe32 	bl	d5e80 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d621c:	3c14      	subs	r4, #20
   d621e:	3d14      	subs	r5, #20
   d6220:	e7e3      	b.n	d61ea <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1e>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
   d6222:	d01e      	beq.n	d6262 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x96>
   d6224:	f101 0508 	add.w	r5, r1, #8
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d6228:	2700      	movs	r7, #0
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d622a:	f1a5 0308 	sub.w	r3, r5, #8
   d622e:	429e      	cmp	r6, r3
   d6230:	d017      	beq.n	d6262 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x96>
                new(dest) T(std::move(*p));
   d6232:	b184      	cbz	r4, d6256 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x8a>
   d6234:	f855 3c08 	ldr.w	r3, [r5, #-8]
   d6238:	6023      	str	r3, [r4, #0]
   d623a:	f835 3c04 	ldrh.w	r3, [r5, #-4]
   d623e:	80a3      	strh	r3, [r4, #4]
   d6240:	f935 3c02 	ldrsh.w	r3, [r5, #-2]
   d6244:	80e3      	strh	r3, [r4, #6]
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d6246:	60a7      	str	r7, [r4, #8]
   d6248:	60e7      	str	r7, [r4, #12]
   d624a:	6127      	str	r7, [r4, #16]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
   d624c:	4629      	mov	r1, r5
   d624e:	f104 0008 	add.w	r0, r4, #8
   d6252:	f7ff ffa4 	bl	d619e <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
   d6256:	4628      	mov	r0, r5
   d6258:	f7ff fe12 	bl	d5e80 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d625c:	3414      	adds	r4, #20
   d625e:	3514      	adds	r5, #20
   d6260:	e7e3      	b.n	d622a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x5e>
   d6262:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6264 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>:
inline bool spark::Vector<T, AllocatorT>::prepend(const Vector<T, AllocatorT> &vector) {
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   d6264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d6266:	6845      	ldr	r5, [r0, #4]
   d6268:	6883      	ldr	r3, [r0, #8]
   d626a:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::prepend(const Vector<T, AllocatorT> &vector) {
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   d626c:	4604      	mov	r4, r0
   d626e:	460e      	mov	r6, r1
   d6270:	4617      	mov	r7, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d6272:	db0e      	blt.n	d6292 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x2e>
   d6274:	3501      	adds	r5, #1
    int size_, capacity_;

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
   d6276:	2d00      	cmp	r5, #0
   d6278:	dd05      	ble.n	d6286 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x22>
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
}

inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
   d627a:	00a9      	lsls	r1, r5, #2
   d627c:	6800      	ldr	r0, [r0, #0]
   d627e:	f7fe fdcd 	bl	d4e1c <realloc>
    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
            if (!d) {
   d6282:	b920      	cbnz	r0, d628e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x2a>
   d6284:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d6286:	6800      	ldr	r0, [r0, #0]
   d6288:	f7fe fdc0 	bl	d4e0c <free>
    T* data_;
    int size_, capacity_;

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d628c:	2000      	movs	r0, #0
                return false;
            }
        } else {
            AllocatorT::free(data_);
        }
        data_ = d;
   d628e:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   d6290:	60a5      	str	r5, [r4, #8]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d6292:	6825      	ldr	r5, [r4, #0]
        }
    }

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
   d6294:	6862      	ldr	r2, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d6296:	eb05 0186 	add.w	r1, r5, r6, lsl #2
        }
    }

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
   d629a:	eb05 0282 	add.w	r2, r5, r2, lsl #2
   d629e:	1a52      	subs	r2, r2, r1
   d62a0:	1d08      	adds	r0, r1, #4
   d62a2:	f001 fc7c 	bl	d7b9e <memmove>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
    move(p + 1, p, data_ + size_);
    new(p) T(std::move(value));
   d62a6:	f845 7026 	str.w	r7, [r5, r6, lsl #2]
    ++size_;
   d62aa:	6863      	ldr	r3, [r4, #4]
   d62ac:	3301      	adds	r3, #1
   d62ae:	6063      	str	r3, [r4, #4]
   d62b0:	2001      	movs	r0, #1
    return true;
}
   d62b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d62b4 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
         destroyFactoryHandlers();
    }
#endif
}

bool spark::LogManager::addHandler(LogHandler *handler) {
   d62b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d62b6:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
   d62b8:	3024      	adds	r0, #36	; 0x24
         destroyFactoryHandlers();
    }
#endif
}

bool spark::LogManager::addHandler(LogHandler *handler) {
   d62ba:	460d      	mov	r5, r1
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d62bc:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d62be:	f7ff fc39 	bl	d5b34 <_ZN14RecursiveMutex4lockEv>
    return p - data_;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::contains(const T &value) const {
    return find(data_, data_ + size_, value);
   d62c2:	6823      	ldr	r3, [r4, #0]
   d62c4:	6861      	ldr	r1, [r4, #4]
   d62c6:	eb03 0081 	add.w	r0, r3, r1, lsl #2
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
   d62ca:	4283      	cmp	r3, r0
   d62cc:	461a      	mov	r2, r3
   d62ce:	d009      	beq.n	d62e4 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x30>
            if (*p == value) {
   d62d0:	6812      	ldr	r2, [r2, #0]
   d62d2:	42aa      	cmp	r2, r5
   d62d4:	f103 0304 	add.w	r3, r3, #4
   d62d8:	d1f7      	bne.n	d62ca <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x16>
    LOG_WITH_LOCK(mutex_) {
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
            return false;
   d62da:	a801      	add	r0, sp, #4
   d62dc:	f7ff fe2a 	bl	d5f34 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   d62e0:	2500      	movs	r5, #0
   d62e2:	e00e      	b.n	d6302 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x4e>
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
   d62e4:	462a      	mov	r2, r5
   d62e6:	4620      	mov	r0, r4
   d62e8:	f7ff ffbc 	bl	d6264 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>
#endif
}

bool spark::LogManager::addHandler(LogHandler *handler) {
    LOG_WITH_LOCK(mutex_) {
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   d62ec:	4605      	mov	r5, r0
   d62ee:	2800      	cmp	r0, #0
   d62f0:	d0f3      	beq.n	d62da <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x26>
            return false;
        }
        if (activeHandlers_.size() == 1) {
   d62f2:	6863      	ldr	r3, [r4, #4]
   d62f4:	2b01      	cmp	r3, #1
   d62f6:	d101      	bne.n	d62fc <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x48>
            setSystemCallbacks();
   d62f8:	f7ff fd10 	bl	d5d1c <_ZN5spark10LogManager18setSystemCallbacksEv>
    }
#endif
}

bool spark::LogManager::addHandler(LogHandler *handler) {
    LOG_WITH_LOCK(mutex_) {
   d62fc:	a801      	add	r0, sp, #4
   d62fe:	f7ff fe19 	bl	d5f34 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (activeHandlers_.size() == 1) {
            setSystemCallbacks();
        }
    }
    return true;
}
   d6302:	4628      	mov	r0, r5
   d6304:	b003      	add	sp, #12
   d6306:	bd30      	pop	{r4, r5, pc}

000d6308 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d6308:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d630a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d630c:	4606      	mov	r6, r0
   d630e:	460c      	mov	r4, r1
   d6310:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d6312:	d914      	bls.n	d633e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   d6314:	4290      	cmp	r0, r2
   d6316:	d213      	bcs.n	d6340 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            // Move elements in reverse order
            --p;
            --end;
   d6318:	f1a2 0510 	sub.w	r5, r2, #16
            dest += end - p - 1;
   d631c:	1a6c      	subs	r4, r5, r1
   d631e:	f1a1 0710 	sub.w	r7, r1, #16
   d6322:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   d6324:	42af      	cmp	r7, r5
   d6326:	d018      	beq.n	d635a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   d6328:	b11c      	cbz	r4, d6332 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   d632a:	4629      	mov	r1, r5
   d632c:	4620      	mov	r0, r4
   d632e:	f000 fd6a 	bl	d6e06 <_ZN6StringC1EOS_>
                end->~T();
   d6332:	4628      	mov	r0, r5
   d6334:	f000 fd77 	bl	d6e26 <_ZN6StringD1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d6338:	3d10      	subs	r5, #16
   d633a:	3c10      	subs	r4, #16
   d633c:	e7f2      	b.n	d6324 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
   d633e:	d00c      	beq.n	d635a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   d6340:	42ac      	cmp	r4, r5
   d6342:	d00a      	beq.n	d635a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   d6344:	b11e      	cbz	r6, d634e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   d6346:	4621      	mov	r1, r4
   d6348:	4630      	mov	r0, r6
   d634a:	f000 fd5c 	bl	d6e06 <_ZN6StringC1EOS_>
                p->~T();
   d634e:	4620      	mov	r0, r4
   d6350:	f000 fd69 	bl	d6e26 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d6354:	3410      	adds	r4, #16
   d6356:	3610      	adds	r6, #16
   d6358:	e7f2      	b.n	d6340 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
   d635a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d635c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d635c:	b570      	push	{r4, r5, r6, lr}
        T* d = nullptr;
        if (n > 0) {
   d635e:	1e0e      	subs	r6, r1, #0
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d6360:	4605      	mov	r5, r0
        T* d = nullptr;
        if (n > 0) {
   d6362:	dd0b      	ble.n	d637c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x20>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d6364:	0130      	lsls	r0, r6, #4
   d6366:	f7fe fd49 	bl	d4dfc <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d636a:	4604      	mov	r4, r0
   d636c:	b170      	cbz	r0, d638c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x30>
                return false;
            }
            move(d, data_, data_ + size_);
   d636e:	e895 0006 	ldmia.w	r5, {r1, r2}
   d6372:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   d6376:	f7ff ffc7 	bl	d6308 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
   d637a:	e000      	b.n	d637e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x22>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d637c:	2400      	movs	r4, #0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d637e:	6828      	ldr	r0, [r5, #0]
   d6380:	f7fe fd44 	bl	d4e0c <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d6384:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d6386:	60ae      	str	r6, [r5, #8]
        return true;
   d6388:	2001      	movs	r0, #1
   d638a:	bd70      	pop	{r4, r5, r6, pc}
    }
   d638c:	bd70      	pop	{r4, r5, r6, pc}

000d638e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:

spark::detail::LogFilter::LogFilter(LogLevel level) :
        level_(level) {
}

spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   d638e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d6392:	2300      	movs	r3, #0
   d6394:	b095      	sub	sp, #84	; 0x54
   d6396:	4692      	mov	sl, r2
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   d6398:	2246      	movs	r2, #70	; 0x46
   d639a:	6003      	str	r3, [r0, #0]
   d639c:	6043      	str	r3, [r0, #4]
   d639e:	6083      	str	r3, [r0, #8]
   d63a0:	60c3      	str	r3, [r0, #12]
   d63a2:	6103      	str	r3, [r0, #16]
   d63a4:	6143      	str	r3, [r0, #20]
   d63a6:	7602      	strb	r2, [r0, #24]

spark::detail::LogFilter::LogFilter(LogLevel level) :
        level_(level) {
}

spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   d63a8:	9102      	str	r1, [sp, #8]
   d63aa:	f8da 1004 	ldr.w	r1, [sl, #4]
   d63ae:	9308      	str	r3, [sp, #32]
    return size_ == 0;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
    if (n > capacity_ && !realloc(n)) {
   d63b0:	4299      	cmp	r1, r3
   d63b2:	4605      	mov	r5, r0
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d63b4:	9309      	str	r3, [sp, #36]	; 0x24
   d63b6:	930a      	str	r3, [sp, #40]	; 0x28
    return size_ == 0;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
    if (n > capacity_ && !realloc(n)) {
   d63b8:	f340 809d 	ble.w	d64f6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x168>
   d63bc:	a808      	add	r0, sp, #32
   d63be:	f7ff ffcd 	bl	d635c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   d63c2:	2800      	cmp	r0, #0
   d63c4:	f040 8097 	bne.w	d64f6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x168>
   d63c8:	e08e      	b.n	d64e8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15a>
    Vector<String> cats;
    if (!cats.reserve(filters.size())) {
        return;
    }
    for (LogCategoryFilter &filter: filters) {
        cats.append(std::move(filter.cat_));
   d63ca:	4621      	mov	r1, r4
   d63cc:	a80b      	add	r0, sp, #44	; 0x2c
   d63ce:	f000 fd1a 	bl	d6e06 <_ZN6StringC1EOS_>
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
   d63d2:	a90b      	add	r1, sp, #44	; 0x2c
   d63d4:	a80f      	add	r0, sp, #60	; 0x3c
   d63d6:	9e09      	ldr	r6, [sp, #36]	; 0x24
   d63d8:	f000 fd15 	bl	d6e06 <_ZN6StringC1EOS_>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d63dc:	9909      	ldr	r1, [sp, #36]	; 0x24
   d63de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d63e0:	4299      	cmp	r1, r3
   d63e2:	f2c0 80ce 	blt.w	d6582 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f4>
   d63e6:	3101      	adds	r1, #1
   d63e8:	a808      	add	r0, sp, #32
   d63ea:	f7ff ffb7 	bl	d635c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   d63ee:	2800      	cmp	r0, #0
   d63f0:	f040 80c7 	bne.w	d6582 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f4>
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
   d63f4:	a80f      	add	r0, sp, #60	; 0x3c
   d63f6:	f000 fd16 	bl	d6e26 <_ZN6StringD1Ev>
   d63fa:	a80b      	add	r0, sp, #44	; 0x2c
   d63fc:	f000 fd13 	bl	d6e26 <_ZN6StringD1Ev>
   d6400:	3414      	adds	r4, #20
    // Store category names
    Vector<String> cats;
    if (!cats.reserve(filters.size())) {
        return;
    }
    for (LogCategoryFilter &filter: filters) {
   d6402:	42a7      	cmp	r7, r4
   d6404:	d1e1      	bne.n	d63ca <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x3c>
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d6406:	2600      	movs	r6, #0
   d6408:	960b      	str	r6, [sp, #44]	; 0x2c
   d640a:	960c      	str	r6, [sp, #48]	; 0x30
   d640c:	960d      	str	r6, [sp, #52]	; 0x34
        if (!category) {
            continue; // Invalid usage or string allocation error
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
   d640e:	46b1      	mov	r9, r6
    for (LogCategoryFilter &filter: filters) {
        cats.append(std::move(filter.cat_));
    }
    // Process category filters
    Vector<Node> nodes;
    for (int i = 0; i < cats.size(); ++i) {
   d6410:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d6412:	429e      	cmp	r6, r3
   d6414:	f280 80a8 	bge.w	d6568 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1da>
   d6418:	0133      	lsls	r3, r6, #4
   d641a:	9a08      	ldr	r2, [sp, #32]
   d641c:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
   d641e:	9306      	str	r3, [sp, #24]
        if (!category) {
   d6420:	2b00      	cmp	r3, #0
   d6422:	f000 809f 	beq.w	d6564 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d6>
   d6426:	2314      	movs	r3, #20
   d6428:	4373      	muls	r3, r6
            continue; // Invalid usage or string allocation error
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
   d642a:	f8cd 901c 	str.w	r9, [sp, #28]
   d642e:	9301      	str	r3, [sp, #4]
    for (int i = 0; i < cats.size(); ++i) {
        const char *category = cats.at(i).c_str();
        if (!category) {
            continue; // Invalid usage or string allocation error
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
   d6430:	ac0b      	add	r4, sp, #44	; 0x2c
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
   d6432:	a907      	add	r1, sp, #28
   d6434:	a806      	add	r0, sp, #24
   d6436:	f7ff fb2c 	bl	d5a92 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   d643a:	4607      	mov	r7, r0
   d643c:	2800      	cmp	r0, #0
   d643e:	f000 8091 	beq.w	d6564 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d6>
            bool found = false;
   d6442:	ab14      	add	r3, sp, #80	; 0x50
            const int index = nodeIndex(*pNodes, name, size, found);
   d6444:	4601      	mov	r1, r0
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
   d6446:	f803 9d39 	strb.w	r9, [r3, #-57]!
            const int index = nodeIndex(*pNodes, name, size, found);
   d644a:	9a07      	ldr	r2, [sp, #28]
   d644c:	4620      	mov	r0, r4
   d644e:	f7ff fb8d 	bl	d5b6c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d6452:	f89d 8017 	ldrb.w	r8, [sp, #23]
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
            const int index = nodeIndex(*pNodes, name, size, found);
   d6456:	9000      	str	r0, [sp, #0]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d6458:	f1b8 0f00 	cmp.w	r8, #0
   d645c:	d153      	bne.n	d6506 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x178>
   d645e:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    Vector<Node> nodes; // Children nodes

    Node(const char *name, uint16_t size) :
            name(name),
            size(size),
            level(-1) {
   d6462:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
   d6466:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d646a:	970f      	str	r7, [sp, #60]	; 0x3c
   d646c:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
   d6470:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
   d6474:	f8cd 8048 	str.w	r8, [sp, #72]	; 0x48
   d6478:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d647c:	6867      	ldr	r7, [r4, #4]
   d647e:	68a3      	ldr	r3, [r4, #8]
   d6480:	429f      	cmp	r7, r3
   d6482:	da4f      	bge.n	d6524 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x196>
        return false;
    }
    T* const p = data_ + i;
   d6484:	9b00      	ldr	r3, [sp, #0]
   d6486:	f8d4 b000 	ldr.w	fp, [r4]
    move(p + 1, p, data_ + size_);
   d648a:	6861      	ldr	r1, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d648c:	2214      	movs	r2, #20
   d648e:	4353      	muls	r3, r2
   d6490:	eb0b 0703 	add.w	r7, fp, r3
    move(p + 1, p, data_ + size_);
   d6494:	fb02 b201 	mla	r2, r2, r1, fp
   d6498:	f107 0014 	add.w	r0, r7, #20
   d649c:	4639      	mov	r1, r7
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d649e:	9303      	str	r3, [sp, #12]
    move(p + 1, p, data_ + size_);
   d64a0:	f7ff fe94 	bl	d61cc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   d64a4:	b1a7      	cbz	r7, d64d0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x142>
    |
    `- aa (error) - b (warn)
*/

// spark::detail::LogFilter
struct spark::detail::LogFilter::Node {
   d64a6:	9b03      	ldr	r3, [sp, #12]
   d64a8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   d64aa:	f84b 2003 	str.w	r2, [fp, r3]
   d64ae:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
   d64b2:	80bb      	strh	r3, [r7, #4]
   d64b4:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
   d64b8:	80fb      	strh	r3, [r7, #6]
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d64ba:	f8c7 9008 	str.w	r9, [r7, #8]
   d64be:	f8c7 900c 	str.w	r9, [r7, #12]
   d64c2:	f8c7 9010 	str.w	r9, [r7, #16]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
   d64c6:	a911      	add	r1, sp, #68	; 0x44
   d64c8:	f107 0008 	add.w	r0, r7, #8
   d64cc:	f7ff fe67 	bl	d619e <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
        return false;
    }
    T* const p = data_ + i;
    move(p + 1, p, data_ + size_);
    new(p) T(std::move(value));
    ++size_;
   d64d0:	6863      	ldr	r3, [r4, #4]
   d64d2:	3301      	adds	r3, #1
   d64d4:	6063      	str	r3, [r4, #4]
   d64d6:	a811      	add	r0, sp, #68	; 0x44
   d64d8:	f7ff fcd2 	bl	d5e80 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
            const int index = nodeIndex(*pNodes, name, size, found);
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d64dc:	f1b8 0f00 	cmp.w	r8, #0
   d64e0:	d011      	beq.n	d6506 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x178>
    }
    for (LogCategoryFilter &filter: filters) {
        cats.append(std::move(filter.cat_));
    }
    // Process category filters
    Vector<Node> nodes;
   d64e2:	a80b      	add	r0, sp, #44	; 0x2c
   d64e4:	f7ff fccc 	bl	d5e80 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d64e8:	a808      	add	r0, sp, #32
   d64ea:	f7ff fcdd 	bl	d5ea8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
    }
    using std::swap;
    swap(cats_, cats);
    swap(nodes_, nodes);
    level_ = level;
}
   d64ee:	4628      	mov	r0, r5
   d64f0:	b015      	add	sp, #84	; 0x54
   d64f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d64f6:	f8da 4000 	ldr.w	r4, [sl]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d64fa:	f8da 3004 	ldr.w	r3, [sl, #4]
   d64fe:	2714      	movs	r7, #20
   d6500:	fb07 4703 	mla	r7, r7, r3, r4
   d6504:	e77d      	b.n	d6402 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_[size_ - 1];
}

template<typename T, typename AllocatorT>
inline T& spark::Vector<T, AllocatorT>::at(int i) {
    return data_[i];
   d6506:	6823      	ldr	r3, [r4, #0]
   d6508:	9a00      	ldr	r2, [sp, #0]
   d650a:	2414      	movs	r4, #20
   d650c:	fb04 3402 	mla	r4, r4, r2, r3
            const int index = nodeIndex(*pNodes, name, size, found);
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
                return;
            }
            Node &node = pNodes->at(index);
            if (!*category) { // Check if it's last subcategory
   d6510:	9b06      	ldr	r3, [sp, #24]
   d6512:	781b      	ldrb	r3, [r3, #0]
   d6514:	bb23      	cbnz	r3, d6560 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d2>
                node.level = filters.at(i).level_;
   d6516:	f8da 3000 	ldr.w	r3, [sl]
   d651a:	9a01      	ldr	r2, [sp, #4]
   d651c:	4413      	add	r3, r2
   d651e:	7c1b      	ldrb	r3, [r3, #16]
   d6520:	80e3      	strh	r3, [r4, #6]
   d6522:	e01d      	b.n	d6560 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d2>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d6524:	3701      	adds	r7, #1
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
   d6526:	2f00      	cmp	r7, #0
   d6528:	dd0f      	ble.n	d654a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d652a:	2314      	movs	r3, #20
   d652c:	fb03 f007 	mul.w	r0, r3, r7
   d6530:	9303      	str	r3, [sp, #12]
   d6532:	f7fe fc63 	bl	d4dfc <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d6536:	4683      	mov	fp, r0
   d6538:	b178      	cbz	r0, d655a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1cc>
                return false;
            }
            move(d, data_, data_ + size_);
   d653a:	e894 0006 	ldmia.w	r4, {r1, r2}
   d653e:	9b03      	ldr	r3, [sp, #12]
   d6540:	fb03 1202 	mla	r2, r3, r2, r1
   d6544:	f7ff fe42 	bl	d61cc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
   d6548:	e000      	b.n	d654c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1be>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d654a:	46c3      	mov	fp, r8
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d654c:	6820      	ldr	r0, [r4, #0]
   d654e:	f7fe fc5d 	bl	d4e0c <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d6552:	f8c4 b000 	str.w	fp, [r4]
        capacity_ = n;
   d6556:	60a7      	str	r7, [r4, #8]
   d6558:	e794      	b.n	d6484 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xf6>
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
            const int index = nodeIndex(*pNodes, name, size, found);
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d655a:	f04f 0801 	mov.w	r8, #1
   d655e:	e7ba      	b.n	d64d6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x148>
            }
            Node &node = pNodes->at(index);
            if (!*category) { // Check if it's last subcategory
                node.level = filters.at(i).level_;
            }
            pNodes = &node.nodes;
   d6560:	3408      	adds	r4, #8
            continue; // Invalid usage or string allocation error
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
   d6562:	e766      	b.n	d6432 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa4>
    for (LogCategoryFilter &filter: filters) {
        cats.append(std::move(filter.cat_));
    }
    // Process category filters
    Vector<Node> nodes;
    for (int i = 0; i < cats.size(); ++i) {
   d6564:	3601      	adds	r6, #1
   d6566:	e753      	b.n	d6410 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x82>
            }
            pNodes = &node.nodes;
        }
    }
    using std::swap;
    swap(cats_, cats);
   d6568:	a908      	add	r1, sp, #32
   d656a:	4628      	mov	r0, r5
   d656c:	f7ff fe17 	bl	d619e <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
    swap(nodes_, nodes);
   d6570:	a90b      	add	r1, sp, #44	; 0x2c
   d6572:	f105 000c 	add.w	r0, r5, #12
   d6576:	f7ff fe12 	bl	d619e <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
    level_ = level;
   d657a:	f89d 3008 	ldrb.w	r3, [sp, #8]
   d657e:	762b      	strb	r3, [r5, #24]
   d6580:	e7af      	b.n	d64e2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x154>
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d6582:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
   d6584:	9a09      	ldr	r2, [sp, #36]	; 0x24
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d6586:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   d658a:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   d658e:	4631      	mov	r1, r6
   d6590:	f106 0010 	add.w	r0, r6, #16
   d6594:	f7ff feb8 	bl	d6308 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   d6598:	b11e      	cbz	r6, d65a2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x214>
   d659a:	a90f      	add	r1, sp, #60	; 0x3c
   d659c:	4630      	mov	r0, r6
   d659e:	f000 fc32 	bl	d6e06 <_ZN6StringC1EOS_>
    ++size_;
   d65a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d65a4:	3301      	adds	r3, #1
   d65a6:	9309      	str	r3, [sp, #36]	; 0x24
   d65a8:	e724      	b.n	d63f4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x66>
	...

000d65ac <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
// spark::LogHandler
inline spark::LogHandler::LogHandler(LogLevel level) :
        filter_(level) {
}

inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
   d65ac:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
        filter_(level, filters) {
   d65ae:	4604      	mov	r4, r0
   d65b0:	4b09      	ldr	r3, [pc, #36]	; (d65d8 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>)
   d65b2:	f844 3b04 	str.w	r3, [r4], #4
// spark::LogHandler
inline spark::LogHandler::LogHandler(LogLevel level) :
        filter_(level) {
}

inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
   d65b6:	4605      	mov	r5, r0
   d65b8:	460e      	mov	r6, r1
        filter_(level, filters) {
   d65ba:	a801      	add	r0, sp, #4
   d65bc:	4611      	mov	r1, r2
   d65be:	f7fe f916 	bl	d47ee <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d65c2:	aa01      	add	r2, sp, #4
   d65c4:	4631      	mov	r1, r6
   d65c6:	4620      	mov	r0, r4
   d65c8:	f7ff fee1 	bl	d638e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d65cc:	a801      	add	r0, sp, #4
   d65ce:	f7fe f8cd 	bl	d476c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}
   d65d2:	4628      	mov	r0, r5
   d65d4:	b004      	add	sp, #16
   d65d6:	bd70      	pop	{r4, r5, r6, pc}
   d65d8:	000d7e5c 	.word	0x000d7e5c

000d65dc <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:

#if Wiring_LogConfig

// spark::DefaultLogHandlerFactory
LogHandler* spark::DefaultLogHandlerFactory::createHandler(const char *type, LogLevel level, LogCategoryFilters filters,
            Print *stream, const JSONValue &params) {
   d65dc:	b5f0      	push	{r4, r5, r6, r7, lr}
   d65de:	460f      	mov	r7, r1
   d65e0:	b08b      	sub	sp, #44	; 0x2c
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d65e2:	492b      	ldr	r1, [pc, #172]	; (d6690 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb4>)

#if Wiring_LogConfig

// spark::DefaultLogHandlerFactory
LogHandler* spark::DefaultLogHandlerFactory::createHandler(const char *type, LogLevel level, LogCategoryFilters filters,
            Print *stream, const JSONValue &params) {
   d65e4:	9c10      	ldr	r4, [sp, #64]	; 0x40
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d65e6:	4638      	mov	r0, r7

#if Wiring_LogConfig

// spark::DefaultLogHandlerFactory
LogHandler* spark::DefaultLogHandlerFactory::createHandler(const char *type, LogLevel level, LogCategoryFilters filters,
            Print *stream, const JSONValue &params) {
   d65e8:	4616      	mov	r6, r2
   d65ea:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d65ec:	f001 fb3a 	bl	d7c64 <strcmp>
   d65f0:	bb28      	cbnz	r0, d663e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x62>
        if (!stream) {
   d65f2:	2c00      	cmp	r4, #0
   d65f4:	d049      	beq.n	d668a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xae>
            return nullptr; // Output stream is not specified
        }
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   d65f6:	4629      	mov	r1, r5
   d65f8:	a801      	add	r0, sp, #4
   d65fa:	f7ff fddd 	bl	d61b8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   d65fe:	4925      	ldr	r1, [pc, #148]	; (d6694 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb8>)
   d6600:	2024      	movs	r0, #36	; 0x24
   d6602:	f000 ff9f 	bl	d7544 <_ZnwjRKSt9nothrow_t>
   d6606:	4605      	mov	r5, r0
   d6608:	b1b8      	cbz	r0, d663a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x5e>
    Print *stream_;
};

class JSONStreamLogHandler: public StreamLogHandler {
public:
    using StreamLogHandler::StreamLogHandler;
   d660a:	a901      	add	r1, sp, #4
   d660c:	a804      	add	r0, sp, #16
   d660e:	f7ff fdd3 	bl	d61b8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
}

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
   d6612:	a904      	add	r1, sp, #16
   d6614:	a807      	add	r0, sp, #28
   d6616:	f7fe f8ea 	bl	d47ee <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d661a:	aa07      	add	r2, sp, #28
   d661c:	4631      	mov	r1, r6
   d661e:	4628      	mov	r0, r5
   d6620:	f7ff ffc4 	bl	d65ac <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d6624:	a807      	add	r0, sp, #28
   d6626:	f7fe f8a1 	bl	d476c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d662a:	4b1b      	ldr	r3, [pc, #108]	; (d6698 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xbc>)
   d662c:	602b      	str	r3, [r5, #0]
   d662e:	622c      	str	r4, [r5, #32]
    Print *stream_;
};

class JSONStreamLogHandler: public StreamLogHandler {
public:
    using StreamLogHandler::StreamLogHandler;
   d6630:	a804      	add	r0, sp, #16
   d6632:	f7fe f89b 	bl	d476c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d6636:	4b19      	ldr	r3, [pc, #100]	; (d669c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xc0>)
   d6638:	602b      	str	r3, [r5, #0]
   d663a:	a801      	add	r0, sp, #4
   d663c:	e01f      	b.n	d667e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa2>
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   d663e:	4918      	ldr	r1, [pc, #96]	; (d66a0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xc4>)
   d6640:	4638      	mov	r0, r7
   d6642:	f001 fb0f 	bl	d7c64 <strcmp>
   d6646:	b9f0      	cbnz	r0, d6686 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xaa>
        if (!stream) {
   d6648:	b1fc      	cbz	r4, d668a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xae>
            return nullptr;
        }
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   d664a:	4629      	mov	r1, r5
   d664c:	a804      	add	r0, sp, #16
   d664e:	f7ff fdb3 	bl	d61b8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   d6652:	4910      	ldr	r1, [pc, #64]	; (d6694 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb8>)
   d6654:	2024      	movs	r0, #36	; 0x24
   d6656:	f000 ff75 	bl	d7544 <_ZnwjRKSt9nothrow_t>
   d665a:	4605      	mov	r5, r0
   d665c:	b170      	cbz	r0, d667c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa0>
}

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
   d665e:	a904      	add	r1, sp, #16
   d6660:	a807      	add	r0, sp, #28
   d6662:	f7fe f8c4 	bl	d47ee <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d6666:	aa07      	add	r2, sp, #28
   d6668:	4631      	mov	r1, r6
   d666a:	4628      	mov	r0, r5
   d666c:	f7ff ff9e 	bl	d65ac <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d6670:	a807      	add	r0, sp, #28
   d6672:	f7fe f87b 	bl	d476c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d6676:	4b08      	ldr	r3, [pc, #32]	; (d6698 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xbc>)
   d6678:	602b      	str	r3, [r5, #0]
   d667a:	622c      	str	r4, [r5, #32]
   d667c:	a804      	add	r0, sp, #16
   d667e:	f7fe f875 	bl	d476c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d6682:	4628      	mov	r0, r5
   d6684:	e002      	b.n	d668c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb0>
// spark::DefaultLogHandlerFactory
LogHandler* spark::DefaultLogHandlerFactory::createHandler(const char *type, LogLevel level, LogCategoryFilters filters,
            Print *stream, const JSONValue &params) {
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
        if (!stream) {
            return nullptr; // Output stream is not specified
   d6686:	2000      	movs	r0, #0
   d6688:	e000      	b.n	d668c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb0>
   d668a:	4620      	mov	r0, r4
            return nullptr;
        }
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
    }
    return nullptr; // Unknown handler type
}
   d668c:	b00b      	add	sp, #44	; 0x2c
   d668e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d6690:	000d815e 	.word	0x000d815e
   d6694:	000d8318 	.word	0x000d8318
   d6698:	000d81e4 	.word	0x000d81e4
   d669c:	000d80f0 	.word	0x000d80f0
   d66a0:	000d8162 	.word	0x000d8162

000d66a4 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d66a4:	4b01      	ldr	r3, [pc, #4]	; (d66ac <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d66a6:	4a02      	ldr	r2, [pc, #8]	; (d66b0 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d66a8:	601a      	str	r2, [r3, #0]
   d66aa:	4770      	bx	lr
   d66ac:	2003e4e4 	.word	0x2003e4e4
   d66b0:	000d8173 	.word	0x000d8173

000d66b4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
                return cmp < 0;
            }));
}

// spark::StreamLogHandler
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d66b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d66b8:	9d08      	ldr	r5, [sp, #32]
    // TODO: Move this check to a base class (see also JSONStreamLogHandler::logMessage())
#if PLATFORM_ID != PLATFORM_GCC
    if (stream_ == &Serial && Network.listening()) {
   d66ba:	f8d0 9020 	ldr.w	r9, [r0, #32]
                return cmp < 0;
            }));
}

// spark::StreamLogHandler
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d66be:	4604      	mov	r4, r0
   d66c0:	460e      	mov	r6, r1
   d66c2:	4617      	mov	r7, r2
   d66c4:	4698      	mov	r8, r3
    // TODO: Move this check to a base class (see also JSONStreamLogHandler::logMessage())
#if PLATFORM_ID != PLATFORM_GCC
    if (stream_ == &Serial && Network.listening()) {
   d66c6:	f000 fdd1 	bl	d726c <_Z16_fetch_usbserialv>
   d66ca:	4581      	cmp	r9, r0
   d66cc:	d105      	bne.n	d66da <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x26>
   d66ce:	485a      	ldr	r0, [pc, #360]	; (d6838 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   d66d0:	f000 fa73 	bl	d6bba <_ZN5spark12NetworkClass9listeningEv>
   d66d4:	2800      	cmp	r0, #0
   d66d6:	f040 80ac 	bne.w	d6832 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17e>
        return; // Do not mix logging and serial console output
    }
#endif
    const char *s = nullptr;
    // Timestamp
    if (attr.has_time) {
   d66da:	792b      	ldrb	r3, [r5, #4]
   d66dc:	071b      	lsls	r3, r3, #28
   d66de:	d505      	bpl.n	d66ec <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x38>
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d66e0:	696b      	ldr	r3, [r5, #20]
   d66e2:	4a56      	ldr	r2, [pc, #344]	; (d683c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   d66e4:	6a20      	ldr	r0, [r4, #32]
   d66e6:	2100      	movs	r1, #0
   d66e8:	f000 fb31 	bl	d6d4e <_ZN5Print11printf_implEbPKcz>
        printf("%010u ", (unsigned)attr.time);
    }
    // Category
    if (category) {
   d66ec:	f1b8 0f00 	cmp.w	r8, #0
   d66f0:	d00d      	beq.n	d670e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x5a>
        write('[');
   d66f2:	215b      	movs	r1, #91	; 0x5b
   d66f4:	4620      	mov	r0, r4
   d66f6:	f7ff fa2e 	bl	d5b56 <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   d66fa:	4641      	mov	r1, r8
   d66fc:	4620      	mov	r0, r4
   d66fe:	f7ff fa1c 	bl	d5b3a <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   d6702:	6823      	ldr	r3, [r4, #0]
   d6704:	494e      	ldr	r1, [pc, #312]	; (d6840 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   d6706:	68db      	ldr	r3, [r3, #12]
   d6708:	2202      	movs	r2, #2
   d670a:	4620      	mov	r0, r4
   d670c:	4798      	blx	r3
    }
    // Source file
    if (attr.has_file) {
   d670e:	792b      	ldrb	r3, [r5, #4]
   d6710:	07d9      	lsls	r1, r3, #31
   d6712:	d525      	bpl.n	d6760 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xac>
        s = extractFileName(attr.file); // Strip directory path
   d6714:	f8d5 8008 	ldr.w	r8, [r5, #8]
    }
    return nullptr;
}

const char* extractFileName(const char *s) {
    const char *s1 = strrchr(s, '/');
   d6718:	212f      	movs	r1, #47	; 0x2f
   d671a:	4640      	mov	r0, r8
   d671c:	f001 faec 	bl	d7cf8 <strrchr>
    if (s1) {
   d6720:	b108      	cbz	r0, d6726 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x72>
        return s1 + 1;
   d6722:	f100 0801 	add.w	r8, r0, #1
        write("] ", 2);
    }
    // Source file
    if (attr.has_file) {
        s = extractFileName(attr.file); // Strip directory path
        write(s); // File name
   d6726:	4641      	mov	r1, r8
   d6728:	4620      	mov	r0, r4
   d672a:	f7ff fa06 	bl	d5b3a <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   d672e:	792b      	ldrb	r3, [r5, #4]
   d6730:	079a      	lsls	r2, r3, #30
   d6732:	d509      	bpl.n	d6748 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x94>
            write(':');
   d6734:	213a      	movs	r1, #58	; 0x3a
   d6736:	4620      	mov	r0, r4
   d6738:	f7ff fa0d 	bl	d5b56 <_ZN5spark16StreamLogHandler5writeEc>
   d673c:	68eb      	ldr	r3, [r5, #12]
   d673e:	4a41      	ldr	r2, [pc, #260]	; (d6844 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   d6740:	6a20      	ldr	r0, [r4, #32]
   d6742:	2100      	movs	r1, #0
   d6744:	f000 fb03 	bl	d6d4e <_ZN5Print11printf_implEbPKcz>
            printf("%d", (int)attr.line); // Line number
        }
        if (attr.has_function) {
   d6748:	792b      	ldrb	r3, [r5, #4]
   d674a:	f013 0f04 	tst.w	r3, #4
   d674e:	6823      	ldr	r3, [r4, #0]
            write(", ", 2);
   d6750:	bf18      	it	ne
   d6752:	493d      	ldrne	r1, [pc, #244]	; (d6848 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   d6754:	68db      	ldr	r3, [r3, #12]
        } else {
            write(": ", 2);
   d6756:	bf08      	it	eq
   d6758:	493c      	ldreq	r1, [pc, #240]	; (d684c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
        if (attr.has_line) {
            write(':');
            printf("%d", (int)attr.line); // Line number
        }
        if (attr.has_function) {
            write(", ", 2);
   d675a:	2202      	movs	r2, #2
        } else {
            write(": ", 2);
   d675c:	4620      	mov	r0, r4
   d675e:	4798      	blx	r3
        }
    }
    // Function name
    if (attr.has_function) {
   d6760:	792b      	ldrb	r3, [r5, #4]
   d6762:	075b      	lsls	r3, r3, #29
   d6764:	d518      	bpl.n	d6798 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe4>
        size_t n = 0;
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   d6766:	6929      	ldr	r1, [r5, #16]
   d6768:	460a      	mov	r2, r1
    return s;
}

const char* extractFuncName(const char *s, size_t *size) {
    const char *s1 = s;
    for (; *s; ++s) {
   d676a:	4613      	mov	r3, r2
   d676c:	f813 0b01 	ldrb.w	r0, [r3], #1
   d6770:	b138      	cbz	r0, d6782 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xce>
        if (*s == ' ') {
   d6772:	2820      	cmp	r0, #32
   d6774:	d101      	bne.n	d677a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
            s1 = s + 1; // Skip return type
   d6776:	4619      	mov	r1, r3
   d6778:	e001      	b.n	d677e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xca>
        } else if (*s == '(') {
   d677a:	2828      	cmp	r0, #40	; 0x28
   d677c:	d001      	beq.n	d6782 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xce>
                return cmp < 0;
            }));
}

// spark::StreamLogHandler
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d677e:	461a      	mov	r2, r3
   d6780:	e7f3      	b.n	d676a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
    }
    // Function name
    if (attr.has_function) {
        size_t n = 0;
        s = extractFuncName(attr.function, &n); // Strip argument and return types
        write(s, n);
   d6782:	6823      	ldr	r3, [r4, #0]
   d6784:	1a52      	subs	r2, r2, r1
   d6786:	68db      	ldr	r3, [r3, #12]
   d6788:	4620      	mov	r0, r4
   d678a:	4798      	blx	r3
        write("(): ", 4);
   d678c:	6823      	ldr	r3, [r4, #0]
   d678e:	4930      	ldr	r1, [pc, #192]	; (d6850 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
   d6790:	68db      	ldr	r3, [r3, #12]
   d6792:	2204      	movs	r2, #4
   d6794:	4620      	mov	r0, r4
   d6796:	4798      	blx	r3
inline LogLevel spark::LogHandler::level(const char *category) const {
    return filter_.level(category);
}

inline const char* spark::LogHandler::levelName(LogLevel level) {
    return log_level_name(level, nullptr);
   d6798:	2100      	movs	r1, #0
   d679a:	4638      	mov	r0, r7
   d679c:	f7fe fa72 	bl	d4c84 <log_level_name>
    }
    // Level
    s = levelName(level);
    write(s);
   d67a0:	4601      	mov	r1, r0
   d67a2:	4620      	mov	r0, r4
   d67a4:	f7ff f9c9 	bl	d5b3a <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   d67a8:	6823      	ldr	r3, [r4, #0]
   d67aa:	4928      	ldr	r1, [pc, #160]	; (d684c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
   d67ac:	68db      	ldr	r3, [r3, #12]
   d67ae:	2202      	movs	r2, #2
   d67b0:	4620      	mov	r0, r4
   d67b2:	4798      	blx	r3
    // Message
    if (msg) {
   d67b4:	b11e      	cbz	r6, d67be <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x10a>
        write(msg);
   d67b6:	4631      	mov	r1, r6
   d67b8:	4620      	mov	r0, r4
   d67ba:	f7ff f9be 	bl	d5b3a <_ZN5spark16StreamLogHandler5writeEPKc>
    }
    // Additional attributes
    if (attr.has_code || attr.has_details) {
   d67be:	792b      	ldrb	r3, [r5, #4]
   d67c0:	f013 0f30 	tst.w	r3, #48	; 0x30
   d67c4:	d02d      	beq.n	d6822 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16e>
        write(" [", 2);
   d67c6:	6823      	ldr	r3, [r4, #0]
   d67c8:	4922      	ldr	r1, [pc, #136]	; (d6854 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
   d67ca:	68db      	ldr	r3, [r3, #12]
   d67cc:	4620      	mov	r0, r4
   d67ce:	2202      	movs	r2, #2
   d67d0:	4798      	blx	r3
        // Code
        if (attr.has_code) {
   d67d2:	792b      	ldrb	r3, [r5, #4]
   d67d4:	06d8      	lsls	r0, r3, #27
   d67d6:	d50b      	bpl.n	d67f0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
            write("code = ", 7);
   d67d8:	6823      	ldr	r3, [r4, #0]
   d67da:	491f      	ldr	r1, [pc, #124]	; (d6858 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a4>)
   d67dc:	68db      	ldr	r3, [r3, #12]
   d67de:	2207      	movs	r2, #7
   d67e0:	4620      	mov	r0, r4
   d67e2:	4798      	blx	r3
   d67e4:	69ab      	ldr	r3, [r5, #24]
   d67e6:	4a1d      	ldr	r2, [pc, #116]	; (d685c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a8>)
   d67e8:	6a20      	ldr	r0, [r4, #32]
   d67ea:	2100      	movs	r1, #0
   d67ec:	f000 faaf 	bl	d6d4e <_ZN5Print11printf_implEbPKcz>
            printf("%" PRIiPTR, (intptr_t)attr.code);
        }
        // Details
        if (attr.has_details) {
   d67f0:	792b      	ldrb	r3, [r5, #4]
   d67f2:	0699      	lsls	r1, r3, #26
   d67f4:	d511      	bpl.n	d681a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x166>
            if (attr.has_code) {
   d67f6:	06da      	lsls	r2, r3, #27
   d67f8:	d505      	bpl.n	d6806 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x152>
                write(", ", 2);
   d67fa:	6823      	ldr	r3, [r4, #0]
   d67fc:	4912      	ldr	r1, [pc, #72]	; (d6848 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   d67fe:	68db      	ldr	r3, [r3, #12]
   d6800:	2202      	movs	r2, #2
   d6802:	4620      	mov	r0, r4
   d6804:	4798      	blx	r3
            }
            write("details = ", 10);
   d6806:	6823      	ldr	r3, [r4, #0]
   d6808:	4915      	ldr	r1, [pc, #84]	; (d6860 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1ac>)
   d680a:	68db      	ldr	r3, [r3, #12]
   d680c:	4620      	mov	r0, r4
   d680e:	220a      	movs	r2, #10
   d6810:	4798      	blx	r3
            write(attr.details);
   d6812:	69e9      	ldr	r1, [r5, #28]
   d6814:	4620      	mov	r0, r4
   d6816:	f7ff f990 	bl	d5b3a <_ZN5spark16StreamLogHandler5writeEPKc>
        }
        write(']');
   d681a:	215d      	movs	r1, #93	; 0x5d
   d681c:	4620      	mov	r0, r4
   d681e:	f7ff f99a 	bl	d5b56 <_ZN5spark16StreamLogHandler5writeEc>
    }
    write("\r\n", 2);
   d6822:	6823      	ldr	r3, [r4, #0]
   d6824:	490f      	ldr	r1, [pc, #60]	; (d6864 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1b0>)
   d6826:	68db      	ldr	r3, [r3, #12]
   d6828:	4620      	mov	r0, r4
   d682a:	2202      	movs	r2, #2
}
   d682c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
            write("details = ", 10);
            write(attr.details);
        }
        write(']');
    }
    write("\r\n", 2);
   d6830:	4718      	bx	r3
   d6832:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d6836:	bf00      	nop
   d6838:	2003e6bc 	.word	0x2003e6bc
   d683c:	000d8177 	.word	0x000d8177
   d6840:	000d817e 	.word	0x000d817e
   d6844:	000d7fc7 	.word	0x000d7fc7
   d6848:	000d8181 	.word	0x000d8181
   d684c:	000d8186 	.word	0x000d8186
   d6850:	000d8184 	.word	0x000d8184
   d6854:	000d8189 	.word	0x000d8189
   d6858:	000d818c 	.word	0x000d818c
   d685c:	000d8194 	.word	0x000d8194
   d6860:	000d8197 	.word	0x000d8197
   d6864:	000d81a2 	.word	0x000d81a2

000d6868 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
}

// spark::JSONStreamLogHandler
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d6868:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d686c:	b085      	sub	sp, #20
   d686e:	f8d0 8020 	ldr.w	r8, [r0, #32]
   d6872:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   d6874:	4606      	mov	r6, r0
   d6876:	460f      	mov	r7, r1
   d6878:	4691      	mov	r9, r2
   d687a:	461d      	mov	r5, r3
    // TODO: Move this check to a base class (see also StreamLogHandler::logMessage())
#if PLATFORM_ID != PLATFORM_GCC
    if (this->stream() == &Serial && Network.listening()) {
   d687c:	f000 fcf6 	bl	d726c <_Z16_fetch_usbserialv>
   d6880:	4580      	cmp	r8, r0
   d6882:	d105      	bne.n	d6890 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
   d6884:	484a      	ldr	r0, [pc, #296]	; (d69b0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   d6886:	f000 f998 	bl	d6bba <_ZN5spark12NetworkClass9listeningEv>
   d688a:	2800      	cmp	r0, #0
   d688c:	f040 808c 	bne.w	d69a8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x140>
   d6890:	6a33      	ldr	r3, [r6, #32]
    write(&c, 1);
}

// spark::JSONStreamWriter
inline spark::JSONStreamWriter::JSONStreamWriter(Print &stream) :
        strm_(stream) {
   d6892:	4a48      	ldr	r2, [pc, #288]	; (d69b4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   d6894:	9201      	str	r2, [sp, #4]
    return n_;
}

// spark::JSONWriter
inline spark::JSONWriter::JSONWriter() :
        state_(BEGIN) {
   d6896:	f04f 0800 	mov.w	r8, #0
        return; // Do not mix logging and serial console output
    }
#endif
    JSONStreamWriter json(*this->stream());
    json.beginObject();
   d689a:	a801      	add	r0, sp, #4
    write(&c, 1);
}

// spark::JSONStreamWriter
inline spark::JSONStreamWriter::JSONStreamWriter(Print &stream) :
        strm_(stream) {
   d689c:	9303      	str	r3, [sp, #12]
    return n_;
}

// spark::JSONWriter
inline spark::JSONWriter::JSONWriter() :
        state_(BEGIN) {
   d689e:	f88d 8008 	strb.w	r8, [sp, #8]
   d68a2:	f7fe ffec 	bl	d587e <_ZN5spark10JSONWriter11beginObjectEv>
   d68a6:	4641      	mov	r1, r8
   d68a8:	4648      	mov	r0, r9
   d68aa:	f7fe f9eb 	bl	d4c84 <log_level_name>
    // Level
    const char *s = levelName(level);
    json.name("l", 1).value(s);
   d68ae:	4942      	ldr	r1, [pc, #264]	; (d69b8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   d68b0:	4680      	mov	r8, r0
   d68b2:	2201      	movs	r2, #1
   d68b4:	a801      	add	r0, sp, #4
   d68b6:	f7ff f867 	bl	d5988 <_ZN5spark10JSONWriter4nameEPKcj>
   d68ba:	4641      	mov	r1, r8
   d68bc:	f7ff f92d 	bl	d5b1a <_ZN5spark10JSONWriter5valueEPKc>
    // Message
    if (msg) {
   d68c0:	b13f      	cbz	r7, d68d2 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
   d68c2:	493e      	ldr	r1, [pc, #248]	; (d69bc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   d68c4:	2201      	movs	r2, #1
   d68c6:	a801      	add	r0, sp, #4
   d68c8:	f7ff f85e 	bl	d5988 <_ZN5spark10JSONWriter4nameEPKcj>
   d68cc:	4639      	mov	r1, r7
   d68ce:	f7ff f924 	bl	d5b1a <_ZN5spark10JSONWriter5valueEPKc>
    }
    // Category
    if (category) {
   d68d2:	b13d      	cbz	r5, d68e4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
   d68d4:	493a      	ldr	r1, [pc, #232]	; (d69c0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   d68d6:	2201      	movs	r2, #1
   d68d8:	a801      	add	r0, sp, #4
   d68da:	f7ff f855 	bl	d5988 <_ZN5spark10JSONWriter4nameEPKcj>
   d68de:	4629      	mov	r1, r5
   d68e0:	f7ff f91b 	bl	d5b1a <_ZN5spark10JSONWriter5valueEPKc>
    }
    // File name
    if (attr.has_file) {
   d68e4:	7923      	ldrb	r3, [r4, #4]
   d68e6:	07df      	lsls	r7, r3, #31
   d68e8:	d50e      	bpl.n	d6908 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
   d68ea:	68a5      	ldr	r5, [r4, #8]
    }
    return nullptr;
}

const char* extractFileName(const char *s) {
    const char *s1 = strrchr(s, '/');
   d68ec:	212f      	movs	r1, #47	; 0x2f
   d68ee:	4628      	mov	r0, r5
   d68f0:	f001 fa02 	bl	d7cf8 <strrchr>
    if (s1) {
   d68f4:	b100      	cbz	r0, d68f8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
   d68f6:	1c45      	adds	r5, r0, #1
        json.name("c", 1).value(category);
    }
    // File name
    if (attr.has_file) {
        s = extractFileName(attr.file); // Strip directory path
        json.name("f", 1).value(s);
   d68f8:	4932      	ldr	r1, [pc, #200]	; (d69c4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
   d68fa:	2201      	movs	r2, #1
   d68fc:	a801      	add	r0, sp, #4
   d68fe:	f7ff f843 	bl	d5988 <_ZN5spark10JSONWriter4nameEPKcj>
   d6902:	4629      	mov	r1, r5
   d6904:	f7ff f909 	bl	d5b1a <_ZN5spark10JSONWriter5valueEPKc>
    }
    // Line number
    if (attr.has_line) {
   d6908:	7923      	ldrb	r3, [r4, #4]
   d690a:	079d      	lsls	r5, r3, #30
   d690c:	d507      	bpl.n	d691e <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
   d690e:	492e      	ldr	r1, [pc, #184]	; (d69c8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
   d6910:	2202      	movs	r2, #2
   d6912:	a801      	add	r0, sp, #4
   d6914:	f7ff f838 	bl	d5988 <_ZN5spark10JSONWriter4nameEPKcj>
   d6918:	68e1      	ldr	r1, [r4, #12]
   d691a:	f7fe ffbd 	bl	d5898 <_ZN5spark10JSONWriter5valueEi>
    }
    // Function name
    if (attr.has_function) {
   d691e:	7923      	ldrb	r3, [r4, #4]
   d6920:	0758      	lsls	r0, r3, #29
   d6922:	d516      	bpl.n	d6952 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xea>
        size_t n = 0;
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   d6924:	6925      	ldr	r5, [r4, #16]
   d6926:	462f      	mov	r7, r5
    return s;
}

const char* extractFuncName(const char *s, size_t *size) {
    const char *s1 = s;
    for (; *s; ++s) {
   d6928:	463b      	mov	r3, r7
   d692a:	f813 2b01 	ldrb.w	r2, [r3], #1
   d692e:	b13a      	cbz	r2, d6940 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd8>
        if (*s == ' ') {
   d6930:	2a20      	cmp	r2, #32
   d6932:	d101      	bne.n	d6938 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
   d6934:	461d      	mov	r5, r3
   d6936:	e001      	b.n	d693c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        } else if (*s == '(') {
   d6938:	2a28      	cmp	r2, #40	; 0x28
   d693a:	d001      	beq.n	d6940 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd8>
    }
    write("\r\n", 2);
}

// spark::JSONStreamLogHandler
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d693c:	461f      	mov	r7, r3
   d693e:	e7f3      	b.n	d6928 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
    }
    // Function name
    if (attr.has_function) {
        size_t n = 0;
        s = extractFuncName(attr.function, &n); // Strip argument and return types
        json.name("fn", 2).value(s, n);
   d6940:	2202      	movs	r2, #2
   d6942:	4922      	ldr	r1, [pc, #136]	; (d69cc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
   d6944:	a801      	add	r0, sp, #4
   d6946:	f7ff f81f 	bl	d5988 <_ZN5spark10JSONWriter4nameEPKcj>
   d694a:	1b7a      	subs	r2, r7, r5
   d694c:	4629      	mov	r1, r5
   d694e:	f7ff f82a 	bl	d59a6 <_ZN5spark10JSONWriter5valueEPKcj>
    }
    // Timestamp
    if (attr.has_time) {
   d6952:	7923      	ldrb	r3, [r4, #4]
   d6954:	0719      	lsls	r1, r3, #28
   d6956:	d507      	bpl.n	d6968 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x100>
        json.name("t", 1).value((unsigned)attr.time);
   d6958:	491d      	ldr	r1, [pc, #116]	; (d69d0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   d695a:	2201      	movs	r2, #1
   d695c:	a801      	add	r0, sp, #4
   d695e:	f7ff f813 	bl	d5988 <_ZN5spark10JSONWriter4nameEPKcj>
   d6962:	6961      	ldr	r1, [r4, #20]
   d6964:	f7fe ffaa 	bl	d58bc <_ZN5spark10JSONWriter5valueEj>
    }
    // Code (additional attribute)
    if (attr.has_code) {
   d6968:	7923      	ldrb	r3, [r4, #4]
   d696a:	06da      	lsls	r2, r3, #27
   d696c:	d508      	bpl.n	d6980 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x118>
        json.name("code", 4).value((int)attr.code);
   d696e:	2204      	movs	r2, #4
   d6970:	4918      	ldr	r1, [pc, #96]	; (d69d4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   d6972:	eb0d 0002 	add.w	r0, sp, r2
   d6976:	f7ff f807 	bl	d5988 <_ZN5spark10JSONWriter4nameEPKcj>
   d697a:	69a1      	ldr	r1, [r4, #24]
   d697c:	f7fe ff8c 	bl	d5898 <_ZN5spark10JSONWriter5valueEi>
    }
    // Details (additional attribute)
    if (attr.has_details) {
   d6980:	7923      	ldrb	r3, [r4, #4]
   d6982:	069b      	lsls	r3, r3, #26
   d6984:	d507      	bpl.n	d6996 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12e>
        json.name("detail", 6).value(attr.details);
   d6986:	4914      	ldr	r1, [pc, #80]	; (d69d8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   d6988:	2206      	movs	r2, #6
   d698a:	a801      	add	r0, sp, #4
   d698c:	f7fe fffc 	bl	d5988 <_ZN5spark10JSONWriter4nameEPKcj>
   d6990:	69e1      	ldr	r1, [r4, #28]
   d6992:	f7ff f8c2 	bl	d5b1a <_ZN5spark10JSONWriter5valueEPKc>
    }
    json.endObject();
   d6996:	a801      	add	r0, sp, #4
   d6998:	f7fe ff5b 	bl	d5852 <_ZN5spark10JSONWriter9endObjectEv>
   d699c:	6a30      	ldr	r0, [r6, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
   d699e:	490f      	ldr	r1, [pc, #60]	; (d69dc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   d69a0:	6803      	ldr	r3, [r0, #0]
   d69a2:	2202      	movs	r2, #2
   d69a4:	68db      	ldr	r3, [r3, #12]
   d69a6:	4798      	blx	r3
}
   d69a8:	b005      	add	sp, #20
   d69aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d69ae:	bf00      	nop
   d69b0:	2003e6bc 	.word	0x2003e6bc
   d69b4:	000d80d8 	.word	0x000d80d8
   d69b8:	000d810a 	.word	0x000d810a
   d69bc:	000d811d 	.word	0x000d811d
   d69c0:	000d81d6 	.word	0x000d81d6
   d69c4:	000d7f74 	.word	0x000d7f74
   d69c8:	000d81a5 	.word	0x000d81a5
   d69cc:	000d81a8 	.word	0x000d81a8
   d69d0:	000d8132 	.word	0x000d8132
   d69d4:	000d81ab 	.word	0x000d81ab
   d69d8:	000d81b0 	.word	0x000d81b0
   d69dc:	000d81a2 	.word	0x000d81a2

000d69e0 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d69e0:	2200      	movs	r2, #0
   d69e2:	4611      	mov	r1, r2
   d69e4:	6840      	ldr	r0, [r0, #4]
   d69e6:	f7fe b9f1 	b.w	d4dcc <network_listening>

000d69ea <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d69ea:	2200      	movs	r2, #0
   d69ec:	4611      	mov	r1, r2
   d69ee:	6840      	ldr	r0, [r0, #4]
   d69f0:	f7fe b9fc 	b.w	d4dec <network_get_listen_timeout>

000d69f4 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d69f4:	2200      	movs	r2, #0
   d69f6:	6840      	ldr	r0, [r0, #4]
   d69f8:	f7fe b9f0 	b.w	d4ddc <network_set_listen_timeout>

000d69fc <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d69fc:	2200      	movs	r2, #0
   d69fe:	f081 0101 	eor.w	r1, r1, #1
   d6a02:	6840      	ldr	r0, [r0, #4]
   d6a04:	f7fe b9da 	b.w	d4dbc <network_listen>

000d6a08 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d6a08:	2300      	movs	r3, #0
   d6a0a:	461a      	mov	r2, r3
   d6a0c:	2101      	movs	r1, #1
   d6a0e:	6840      	ldr	r0, [r0, #4]
   d6a10:	f7fe b9cc 	b.w	d4dac <network_off>

000d6a14 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d6a14:	2300      	movs	r3, #0
   d6a16:	461a      	mov	r2, r3
   d6a18:	4619      	mov	r1, r3
   d6a1a:	6840      	ldr	r0, [r0, #4]
   d6a1c:	f7fe b9be 	b.w	d4d9c <network_on>

000d6a20 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d6a20:	2200      	movs	r2, #0
   d6a22:	4611      	mov	r1, r2
   d6a24:	6840      	ldr	r0, [r0, #4]
   d6a26:	f7fe b9b1 	b.w	d4d8c <network_ready>

000d6a2a <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d6a2a:	2200      	movs	r2, #0
   d6a2c:	4611      	mov	r1, r2
   d6a2e:	6840      	ldr	r0, [r0, #4]
   d6a30:	f7fe b99c 	b.w	d4d6c <network_connecting>

000d6a34 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6a34:	2200      	movs	r2, #0
   d6a36:	2102      	movs	r1, #2
   d6a38:	6840      	ldr	r0, [r0, #4]
   d6a3a:	f7fe b99f 	b.w	d4d7c <network_disconnect>

000d6a3e <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d6a3e:	2300      	movs	r3, #0
   d6a40:	461a      	mov	r2, r3
   d6a42:	6840      	ldr	r0, [r0, #4]
   d6a44:	f7fe b98a 	b.w	d4d5c <network_connect>

000d6a48 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d6a48:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6a4a:	4605      	mov	r5, r0
   d6a4c:	b188      	cbz	r0, d6a72 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6a4e:	6804      	ldr	r4, [r0, #0]
   d6a50:	b14c      	cbz	r4, d6a66 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d6a52:	68a3      	ldr	r3, [r4, #8]
   d6a54:	b11b      	cbz	r3, d6a5e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d6a56:	2203      	movs	r2, #3
   d6a58:	4621      	mov	r1, r4
   d6a5a:	4620      	mov	r0, r4
   d6a5c:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6a5e:	2110      	movs	r1, #16
   d6a60:	4620      	mov	r0, r4
   d6a62:	f000 fd64 	bl	d752e <_ZdlPvj>
   d6a66:	4628      	mov	r0, r5
   d6a68:	2114      	movs	r1, #20
      }
   d6a6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6a6e:	f000 bd5e 	b.w	d752e <_ZdlPvj>
   d6a72:	bd38      	pop	{r3, r4, r5, pc}

000d6a74 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d6a74:	b110      	cbz	r0, d6a7c <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d6a76:	6803      	ldr	r3, [r0, #0]
   d6a78:	685b      	ldr	r3, [r3, #4]
   d6a7a:	4718      	bx	r3
   d6a7c:	4770      	bx	lr

000d6a7e <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d6a7e:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d6a80:	6803      	ldr	r3, [r0, #0]
   d6a82:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d6a84:	b1bb      	cbz	r3, d6ab6 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d6a86:	6858      	ldr	r0, [r3, #4]
   d6a88:	f7fd ff84 	bl	d4994 <os_thread_is_current>
   d6a8c:	b978      	cbnz	r0, d6aae <_ZN6ThreadD1Ev+0x30>
   d6a8e:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d6a90:	7c5a      	ldrb	r2, [r3, #17]
   d6a92:	b912      	cbnz	r2, d6a9a <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d6a94:	6858      	ldr	r0, [r3, #4]
   d6a96:	f7fd ff85 	bl	d49a4 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d6a9a:	6823      	ldr	r3, [r4, #0]
   d6a9c:	6858      	ldr	r0, [r3, #4]
   d6a9e:	f7fd ff89 	bl	d49b4 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6aa2:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d6aa4:	2300      	movs	r3, #0
   d6aa6:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d6aa8:	b128      	cbz	r0, d6ab6 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d6aaa:	f7ff ffcd 	bl	d6a48 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6aae:	6820      	ldr	r0, [r4, #0]
   d6ab0:	b108      	cbz	r0, d6ab6 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d6ab2:	f7ff ffc9 	bl	d6a48 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d6ab6:	4620      	mov	r0, r4
   d6ab8:	bd10      	pop	{r4, pc}

000d6aba <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d6aba:	b538      	push	{r3, r4, r5, lr}
   d6abc:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6abe:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d6ac2:	b108      	cbz	r0, d6ac8 <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d6ac4:	f7fd faeb 	bl	d409e <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d6ac8:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d6acc:	b108      	cbz	r0, d6ad2 <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d6ace:	f7fd ff81 	bl	d49d4 <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6ad2:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d6ad6:	b135      	cbz	r5, d6ae6 <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6ad8:	4628      	mov	r0, r5
   d6ada:	f7ff ffd0 	bl	d6a7e <_ZN6ThreadD1Ev>
   d6ade:	2104      	movs	r1, #4
   d6ae0:	4628      	mov	r0, r5
   d6ae2:	f000 fd24 	bl	d752e <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6ae6:	6820      	ldr	r0, [r4, #0]
   d6ae8:	b108      	cbz	r0, d6aee <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d6aea:	f7ff ffc3 	bl	d6a74 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d6aee:	4620      	mov	r0, r4
   d6af0:	bd38      	pop	{r3, r4, r5, pc}
	...

000d6af4 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d6af4:	b510      	push	{r4, lr}
   d6af6:	4b04      	ldr	r3, [pc, #16]	; (d6b08 <_ZN5spark9MeshClassD1Ev+0x14>)
   d6af8:	4604      	mov	r4, r0
   d6afa:	f840 3b08 	str.w	r3, [r0], #8
   d6afe:	f7ff ffdc 	bl	d6aba <_ZN5spark11MeshPublishD1Ev>
   d6b02:	4620      	mov	r0, r4
   d6b04:	bd10      	pop	{r4, pc}
   d6b06:	bf00      	nop
   d6b08:	000d822c 	.word	0x000d822c

000d6b0c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d6b0c:	b538      	push	{r3, r4, r5, lr}
   d6b0e:	4c0e      	ldr	r4, [pc, #56]	; (d6b48 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d6b10:	4b0e      	ldr	r3, [pc, #56]	; (d6b4c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d6b12:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d6b14:	2500      	movs	r5, #0
   d6b16:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d6b18:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d6b1c:	6063      	str	r3, [r4, #4]
   d6b1e:	60a5      	str	r5, [r4, #8]
   d6b20:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d6b24:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d6b28:	f7fd ff4c 	bl	d49c4 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d6b2c:	4b08      	ldr	r3, [pc, #32]	; (d6b50 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d6b2e:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d6b32:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d6b36:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d6b38:	4620      	mov	r0, r4
   d6b3a:	4a06      	ldr	r2, [pc, #24]	; (d6b54 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d6b3c:	4906      	ldr	r1, [pc, #24]	; (d6b58 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d6b3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d6b42:	f000 bcef 	b.w	d7524 <__aeabi_atexit>
   d6b46:	bf00      	nop
   d6b48:	2003e4e8 	.word	0x2003e4e8
   d6b4c:	000d8260 	.word	0x000d8260
   d6b50:	000d822c 	.word	0x000d822c
   d6b54:	2003e408 	.word	0x2003e408
   d6b58:	000d6af5 	.word	0x000d6af5

000d6b5c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d6b5c:	2300      	movs	r3, #0
   d6b5e:	461a      	mov	r2, r3
   d6b60:	6840      	ldr	r0, [r0, #4]
   d6b62:	f7fe b8fb 	b.w	d4d5c <network_connect>

000d6b66 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d6b66:	2200      	movs	r2, #0
   d6b68:	2102      	movs	r1, #2
   d6b6a:	6840      	ldr	r0, [r0, #4]
   d6b6c:	f7fe b906 	b.w	d4d7c <network_disconnect>

000d6b70 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d6b70:	2200      	movs	r2, #0
   d6b72:	4611      	mov	r1, r2
   d6b74:	6840      	ldr	r0, [r0, #4]
   d6b76:	f7fe b8f9 	b.w	d4d6c <network_connecting>

000d6b7a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d6b7a:	2200      	movs	r2, #0
   d6b7c:	4611      	mov	r1, r2
   d6b7e:	6840      	ldr	r0, [r0, #4]
   d6b80:	f7fe b904 	b.w	d4d8c <network_ready>

000d6b84 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d6b84:	2300      	movs	r3, #0
   d6b86:	461a      	mov	r2, r3
   d6b88:	4619      	mov	r1, r3
   d6b8a:	6840      	ldr	r0, [r0, #4]
   d6b8c:	f7fe b906 	b.w	d4d9c <network_on>

000d6b90 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d6b90:	2300      	movs	r3, #0
   d6b92:	461a      	mov	r2, r3
   d6b94:	4619      	mov	r1, r3
   d6b96:	6840      	ldr	r0, [r0, #4]
   d6b98:	f7fe b908 	b.w	d4dac <network_off>

000d6b9c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d6b9c:	2200      	movs	r2, #0
   d6b9e:	f081 0101 	eor.w	r1, r1, #1
   d6ba2:	6840      	ldr	r0, [r0, #4]
   d6ba4:	f7fe b90a 	b.w	d4dbc <network_listen>

000d6ba8 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d6ba8:	2200      	movs	r2, #0
   d6baa:	6840      	ldr	r0, [r0, #4]
   d6bac:	f7fe b916 	b.w	d4ddc <network_set_listen_timeout>

000d6bb0 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d6bb0:	2200      	movs	r2, #0
   d6bb2:	4611      	mov	r1, r2
   d6bb4:	6840      	ldr	r0, [r0, #4]
   d6bb6:	f7fe b919 	b.w	d4dec <network_get_listen_timeout>

000d6bba <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d6bba:	2200      	movs	r2, #0
   d6bbc:	4611      	mov	r1, r2
   d6bbe:	6840      	ldr	r0, [r0, #4]
   d6bc0:	f7fe b904 	b.w	d4dcc <network_listening>

000d6bc4 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d6bc4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d6bc8:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d6bca:	b095      	sub	sp, #84	; 0x54
   d6bcc:	4616      	mov	r6, r2
   d6bce:	460d      	mov	r5, r1
   d6bd0:	4607      	mov	r7, r0
    IPAddress addr;
   d6bd2:	f7fe fd4d 	bl	d5670 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d6bd6:	4621      	mov	r1, r4
   d6bd8:	2220      	movs	r2, #32
   d6bda:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d6bdc:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d6bde:	f000 fff9 	bl	d7bd4 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d6be2:	2340      	movs	r3, #64	; 0x40
   d6be4:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d6be6:	4621      	mov	r1, r4
   d6be8:	466b      	mov	r3, sp
   d6bea:	aa0c      	add	r2, sp, #48	; 0x30
   d6bec:	4630      	mov	r0, r6
   d6bee:	f7fd ff91 	bl	d4b14 <netdb_getaddrinfo>
    if (!r) {
   d6bf2:	4604      	mov	r4, r0
   d6bf4:	2800      	cmp	r0, #0
   d6bf6:	d144      	bne.n	d6c82 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d6bf8:	4602      	mov	r2, r0
   d6bfa:	2101      	movs	r1, #1
   d6bfc:	6868      	ldr	r0, [r5, #4]
   d6bfe:	f7fe f8c5 	bl	d4d8c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6c02:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d6c04:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6c06:	4622      	mov	r2, r4
   d6c08:	6868      	ldr	r0, [r5, #4]
   d6c0a:	f7fe f8bf 	bl	d4d8c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6c0e:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6c10:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d6c12:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6c14:	2e00      	cmp	r6, #0
   d6c16:	d034      	beq.n	d6c82 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d6c18:	2900      	cmp	r1, #0
   d6c1a:	d132      	bne.n	d6c82 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d6c1c:	6873      	ldr	r3, [r6, #4]
   d6c1e:	2b02      	cmp	r3, #2
   d6c20:	d002      	beq.n	d6c28 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d6c22:	2b0a      	cmp	r3, #10
   d6c24:	d009      	beq.n	d6c3a <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d6c26:	e02a      	b.n	d6c7e <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d6c28:	f1b8 0f00 	cmp.w	r8, #0
   d6c2c:	d027      	beq.n	d6c7e <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d6c2e:	6971      	ldr	r1, [r6, #20]
   d6c30:	4638      	mov	r0, r7
   d6c32:	3104      	adds	r1, #4
   d6c34:	f7fe fd49 	bl	d56ca <_ZN9IPAddressaSEPKh>
   d6c38:	e020      	b.n	d6c7c <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d6c3a:	f1b9 0f00 	cmp.w	r9, #0
   d6c3e:	d01e      	beq.n	d6c7e <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d6c40:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d6c42:	2211      	movs	r2, #17
   d6c44:	a801      	add	r0, sp, #4
   d6c46:	f000 ffc5 	bl	d7bd4 <memset>
                    a.v = 6;
   d6c4a:	2306      	movs	r3, #6
   d6c4c:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d6c50:	ad01      	add	r5, sp, #4
   d6c52:	f104 0308 	add.w	r3, r4, #8
   d6c56:	3418      	adds	r4, #24
   d6c58:	6818      	ldr	r0, [r3, #0]
   d6c5a:	6859      	ldr	r1, [r3, #4]
   d6c5c:	462a      	mov	r2, r5
   d6c5e:	c203      	stmia	r2!, {r0, r1}
   d6c60:	3308      	adds	r3, #8
   d6c62:	42a3      	cmp	r3, r4
   d6c64:	4615      	mov	r5, r2
   d6c66:	d1f7      	bne.n	d6c58 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d6c68:	a901      	add	r1, sp, #4
   d6c6a:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d6c6c:	ad07      	add	r5, sp, #28
   d6c6e:	f7fe fd0d 	bl	d568c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d6c72:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6c74:	1d3c      	adds	r4, r7, #4
   d6c76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6c78:	682b      	ldr	r3, [r5, #0]
   d6c7a:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d6c7c:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6c7e:	69f6      	ldr	r6, [r6, #28]
   d6c80:	e7c8      	b.n	d6c14 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d6c82:	9800      	ldr	r0, [sp, #0]
   d6c84:	f7fd ff3e 	bl	d4b04 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d6c88:	4638      	mov	r0, r7
   d6c8a:	b015      	add	sp, #84	; 0x54
   d6c8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d6c90 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d6c90:	4b02      	ldr	r3, [pc, #8]	; (d6c9c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d6c92:	4a03      	ldr	r2, [pc, #12]	; (d6ca0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d6c94:	601a      	str	r2, [r3, #0]
   d6c96:	2200      	movs	r2, #0
   d6c98:	605a      	str	r2, [r3, #4]
   d6c9a:	4770      	bx	lr
   d6c9c:	2003e6bc 	.word	0x2003e6bc
   d6ca0:	000d8260 	.word	0x000d8260

000d6ca4 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d6ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6ca6:	4606      	mov	r6, r0
   d6ca8:	460d      	mov	r5, r1
   d6caa:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d6cac:	2400      	movs	r4, #0
  while (size--) {
   d6cae:	42bd      	cmp	r5, r7
   d6cb0:	d00c      	beq.n	d6ccc <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d6cb2:	6833      	ldr	r3, [r6, #0]
   d6cb4:	f815 1b01 	ldrb.w	r1, [r5], #1
   d6cb8:	689b      	ldr	r3, [r3, #8]
   d6cba:	4630      	mov	r0, r6
   d6cbc:	4798      	blx	r3
     if (chunk>=0)
   d6cbe:	2800      	cmp	r0, #0
   d6cc0:	db01      	blt.n	d6cc6 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d6cc2:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d6cc4:	e7f3      	b.n	d6cae <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d6cc6:	2c00      	cmp	r4, #0
   d6cc8:	bf08      	it	eq
   d6cca:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d6ccc:	4620      	mov	r0, r4
   d6cce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6cd0 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d6cd0:	b570      	push	{r4, r5, r6, lr}
   d6cd2:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d6cd4:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d6cd6:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d6cd8:	b149      	cbz	r1, d6cee <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d6cda:	f000 fff0 	bl	d7cbe <strlen>
   d6cde:	682b      	ldr	r3, [r5, #0]
   d6ce0:	4602      	mov	r2, r0
   d6ce2:	4621      	mov	r1, r4
   d6ce4:	4628      	mov	r0, r5
   d6ce6:	68db      	ldr	r3, [r3, #12]
    }
   d6ce8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d6cec:	4718      	bx	r3
    }
   d6cee:	bd70      	pop	{r4, r5, r6, pc}

000d6cf0 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d6cf0:	6803      	ldr	r3, [r0, #0]
   d6cf2:	689b      	ldr	r3, [r3, #8]
   d6cf4:	4718      	bx	r3

000d6cf6 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d6cf6:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d6cf8:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d6cfa:	4605      	mov	r5, r0
  size_t n = print('\r');
   d6cfc:	f7ff fff8 	bl	d6cf0 <_ZN5Print5printEc>
  n += print('\n');
   d6d00:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d6d02:	4604      	mov	r4, r0
  n += print('\n');
   d6d04:	4628      	mov	r0, r5
   d6d06:	f7ff fff3 	bl	d6cf0 <_ZN5Print5printEc>
  return n;
}
   d6d0a:	4420      	add	r0, r4
   d6d0c:	bd38      	pop	{r3, r4, r5, pc}

000d6d0e <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d6d0e:	b530      	push	{r4, r5, lr}
   d6d10:	b08b      	sub	sp, #44	; 0x2c
   d6d12:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d6d14:	2100      	movs	r1, #0
   d6d16:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d6d1a:	2a01      	cmp	r2, #1
   d6d1c:	bf98      	it	ls
   d6d1e:	220a      	movls	r2, #10
   d6d20:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d6d24:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d6d28:	fb05 3312 	mls	r3, r5, r2, r3
   d6d2c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d6d30:	2b09      	cmp	r3, #9
   d6d32:	bf94      	ite	ls
   d6d34:	3330      	addls	r3, #48	; 0x30
   d6d36:	3337      	addhi	r3, #55	; 0x37
   d6d38:	b2db      	uxtb	r3, r3
   d6d3a:	4621      	mov	r1, r4
   d6d3c:	f804 3901 	strb.w	r3, [r4], #-1
   d6d40:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d6d42:	2d00      	cmp	r5, #0
   d6d44:	d1ee      	bne.n	d6d24 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d6d46:	f7ff ffc3 	bl	d6cd0 <_ZN5Print5writeEPKc>
}
   d6d4a:	b00b      	add	sp, #44	; 0x2c
   d6d4c:	bd30      	pop	{r4, r5, pc}

000d6d4e <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d6d4e:	b40c      	push	{r2, r3}
   d6d50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d6d54:	b087      	sub	sp, #28
   d6d56:	af00      	add	r7, sp, #0
   d6d58:	f107 0438 	add.w	r4, r7, #56	; 0x38
   d6d5c:	4605      	mov	r5, r0
   d6d5e:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   d6d62:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d6d64:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   d6d66:	4623      	mov	r3, r4
   d6d68:	464a      	mov	r2, r9
   d6d6a:	2114      	movs	r1, #20
   d6d6c:	1d38      	adds	r0, r7, #4
   d6d6e:	f7fe f85d 	bl	d4e2c <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   d6d72:	2813      	cmp	r0, #19
   d6d74:	d805      	bhi.n	d6d82 <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d6d76:	1d39      	adds	r1, r7, #4
   d6d78:	4628      	mov	r0, r5
   d6d7a:	f7ff ffa9 	bl	d6cd0 <_ZN5Print5writeEPKc>
   d6d7e:	4604      	mov	r4, r0
   d6d80:	e013      	b.n	d6daa <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d6d82:	f100 0308 	add.w	r3, r0, #8
   d6d86:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   d6d8a:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d6d8c:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   d6d90:	1c41      	adds	r1, r0, #1
   d6d92:	4623      	mov	r3, r4
   d6d94:	464a      	mov	r2, r9
   d6d96:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   d6d98:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   d6d9a:	f7fe f847 	bl	d4e2c <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d6d9e:	4669      	mov	r1, sp
   d6da0:	4628      	mov	r0, r5
   d6da2:	f7ff ff95 	bl	d6cd0 <_ZN5Print5writeEPKc>
   d6da6:	4604      	mov	r4, r0
   d6da8:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   d6daa:	b11e      	cbz	r6, d6db4 <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   d6dac:	4628      	mov	r0, r5
   d6dae:	f7ff ffa2 	bl	d6cf6 <_ZN5Print7printlnEv>
   d6db2:	4404      	add	r4, r0
    return n;
}
   d6db4:	4620      	mov	r0, r4
   d6db6:	371c      	adds	r7, #28
   d6db8:	46bd      	mov	sp, r7
   d6dba:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d6dbe:	b002      	add	sp, #8
   d6dc0:	4770      	bx	lr

000d6dc2 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d6dc2:	b510      	push	{r4, lr}
   d6dc4:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d6dc6:	f7fe f8cc 	bl	d4f62 <_ZNSt14_Function_baseD1Ev>
   d6dca:	4620      	mov	r0, r4
   d6dcc:	bd10      	pop	{r4, pc}
	...

000d6dd0 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d6dd0:	4803      	ldr	r0, [pc, #12]	; (d6de0 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d6dd2:	4a04      	ldr	r2, [pc, #16]	; (d6de4 <_GLOBAL__sub_I_RGB+0x14>)
   d6dd4:	4904      	ldr	r1, [pc, #16]	; (d6de8 <_GLOBAL__sub_I_RGB+0x18>)
   d6dd6:	2300      	movs	r3, #0
   d6dd8:	6083      	str	r3, [r0, #8]
   d6dda:	f000 bba3 	b.w	d7524 <__aeabi_atexit>
   d6dde:	bf00      	nop
   d6de0:	2003e6c4 	.word	0x2003e6c4
   d6de4:	2003e408 	.word	0x2003e408
   d6de8:	000d6dc3 	.word	0x000d6dc3

000d6dec <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d6dec:	b510      	push	{r4, lr}
   d6dee:	4604      	mov	r4, r0
{
    _spi = spi;
   d6df0:	7001      	strb	r1, [r0, #0]
    HAL_SPI_Init(_spi);
   d6df2:	4608      	mov	r0, r1
   d6df4:	f7fd fe96 	bl	d4b24 <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d6df8:	2300      	movs	r3, #0
   d6dfa:	6063      	str	r3, [r4, #4]
}
   d6dfc:	4620      	mov	r0, r4
   d6dfe:	bd10      	pop	{r4, pc}

000d6e00 <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
   d6e00:	7800      	ldrb	r0, [r0, #0]
   d6e02:	f7fd be97 	b.w	d4b34 <HAL_SPI_Is_Enabled>

000d6e06 <_ZN6StringC1EOS_>:
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d6e06:	2300      	movs	r3, #0
   d6e08:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d6e0a:	6043      	str	r3, [r0, #4]
	len = 0;
   d6e0c:	6083      	str	r3, [r0, #8]
	flags = 0;
   d6e0e:	7303      	strb	r3, [r0, #12]
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String::String(String &&rval)
   d6e10:	b510      	push	{r4, lr}
			return;
		} else {
			free(buffer);
		}
	}
	buffer = rhs.buffer;
   d6e12:	680c      	ldr	r4, [r1, #0]
   d6e14:	6004      	str	r4, [r0, #0]
	capacity = rhs.capacity;
   d6e16:	684c      	ldr	r4, [r1, #4]
   d6e18:	6044      	str	r4, [r0, #4]
	len = rhs.len;
   d6e1a:	688c      	ldr	r4, [r1, #8]
   d6e1c:	6084      	str	r4, [r0, #8]
	rhs.buffer = NULL;
   d6e1e:	600b      	str	r3, [r1, #0]
	rhs.capacity = 0;
   d6e20:	604b      	str	r3, [r1, #4]
	rhs.len = 0;
   d6e22:	608b      	str	r3, [r1, #8]
#ifdef __GXX_EXPERIMENTAL_CXX0X__
String::String(String &&rval)
{
	init();
	move(rval);
}
   d6e24:	bd10      	pop	{r4, pc}

000d6e26 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d6e26:	b510      	push	{r4, lr}
   d6e28:	4604      	mov	r4, r0
{
	free(buffer);
   d6e2a:	6800      	ldr	r0, [r0, #0]
   d6e2c:	f7fd ffee 	bl	d4e0c <free>
}
   d6e30:	4620      	mov	r0, r4
   d6e32:	bd10      	pop	{r4, pc}

000d6e34 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d6e34:	b510      	push	{r4, lr}
   d6e36:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d6e38:	6800      	ldr	r0, [r0, #0]
   d6e3a:	b108      	cbz	r0, d6e40 <_ZN6String10invalidateEv+0xc>
   d6e3c:	f7fd ffe6 	bl	d4e0c <free>
	buffer = NULL;
   d6e40:	2300      	movs	r3, #0
   d6e42:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d6e44:	60a3      	str	r3, [r4, #8]
   d6e46:	6063      	str	r3, [r4, #4]
   d6e48:	bd10      	pop	{r4, pc}

000d6e4a <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d6e4a:	b538      	push	{r3, r4, r5, lr}
   d6e4c:	4604      	mov	r4, r0
   d6e4e:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d6e50:	6800      	ldr	r0, [r0, #0]
   d6e52:	3101      	adds	r1, #1
   d6e54:	f7fd ffe2 	bl	d4e1c <realloc>
	if (newbuffer) {
   d6e58:	b110      	cbz	r0, d6e60 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d6e5a:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d6e5e:	2001      	movs	r0, #1
	}
	return 0;
}
   d6e60:	bd38      	pop	{r3, r4, r5, pc}

000d6e62 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d6e62:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d6e64:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d6e66:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d6e68:	b113      	cbz	r3, d6e70 <_ZN6String7reserveEj+0xe>
   d6e6a:	6843      	ldr	r3, [r0, #4]
   d6e6c:	428b      	cmp	r3, r1
   d6e6e:	d207      	bcs.n	d6e80 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d6e70:	4620      	mov	r0, r4
   d6e72:	f7ff ffea 	bl	d6e4a <_ZN6String12changeBufferEj>
   d6e76:	b120      	cbz	r0, d6e82 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d6e78:	68a3      	ldr	r3, [r4, #8]
   d6e7a:	b90b      	cbnz	r3, d6e80 <_ZN6String7reserveEj+0x1e>
   d6e7c:	6822      	ldr	r2, [r4, #0]
   d6e7e:	7013      	strb	r3, [r2, #0]
   d6e80:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d6e82:	bd10      	pop	{r4, pc}

000d6e84 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d6e84:	b570      	push	{r4, r5, r6, lr}
   d6e86:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d6e88:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d6e8a:	4604      	mov	r4, r0
   d6e8c:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d6e8e:	f7ff ffe8 	bl	d6e62 <_ZN6String7reserveEj>
   d6e92:	b918      	cbnz	r0, d6e9c <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d6e94:	4620      	mov	r0, r4
   d6e96:	f7ff ffcd 	bl	d6e34 <_ZN6String10invalidateEv>
		return *this;
   d6e9a:	e009      	b.n	d6eb0 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d6e9c:	462a      	mov	r2, r5
   d6e9e:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d6ea0:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d6ea2:	6820      	ldr	r0, [r4, #0]
   d6ea4:	f000 fe70 	bl	d7b88 <memcpy>
	buffer[len] = 0;
   d6ea8:	6822      	ldr	r2, [r4, #0]
   d6eaa:	68a3      	ldr	r3, [r4, #8]
   d6eac:	2100      	movs	r1, #0
   d6eae:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d6eb0:	4620      	mov	r0, r4
   d6eb2:	bd70      	pop	{r4, r5, r6, pc}

000d6eb4 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d6eb4:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d6eb6:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d6eb8:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d6eba:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d6ebc:	6043      	str	r3, [r0, #4]
	len = 0;
   d6ebe:	6083      	str	r3, [r0, #8]
	flags = 0;
   d6ec0:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d6ec2:	460d      	mov	r5, r1
   d6ec4:	b139      	cbz	r1, d6ed6 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d6ec6:	4608      	mov	r0, r1
   d6ec8:	f000 fef9 	bl	d7cbe <strlen>
   d6ecc:	4629      	mov	r1, r5
   d6ece:	4602      	mov	r2, r0
   d6ed0:	4620      	mov	r0, r4
   d6ed2:	f7ff ffd7 	bl	d6e84 <_ZN6String4copyEPKcj>
}
   d6ed6:	4620      	mov	r0, r4
   d6ed8:	bd38      	pop	{r3, r4, r5, pc}

000d6eda <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d6eda:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
   d6edc:	b510      	push	{r4, lr}
   d6ede:	460b      	mov	r3, r1
   d6ee0:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d6ee2:	d007      	beq.n	d6ef4 <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d6ee4:	6809      	ldr	r1, [r1, #0]
   d6ee6:	b119      	cbz	r1, d6ef0 <_ZN6StringaSERKS_+0x16>
   d6ee8:	689a      	ldr	r2, [r3, #8]
   d6eea:	f7ff ffcb 	bl	d6e84 <_ZN6String4copyEPKcj>
   d6eee:	e001      	b.n	d6ef4 <_ZN6StringaSERKS_+0x1a>
	else invalidate();
   d6ef0:	f7ff ffa0 	bl	d6e34 <_ZN6String10invalidateEv>

	return *this;
}
   d6ef4:	4620      	mov	r0, r4
   d6ef6:	bd10      	pop	{r4, pc}

000d6ef8 <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d6ef8:	b510      	push	{r4, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d6efa:	2300      	movs	r3, #0
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d6efc:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d6efe:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d6f00:	6043      	str	r3, [r0, #4]
	len = 0;
   d6f02:	6083      	str	r3, [r0, #8]
	flags = 0;
   d6f04:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
   d6f06:	f7ff ffe8 	bl	d6eda <_ZN6StringaSERKS_>
}
   d6f0a:	4620      	mov	r0, r4
   d6f0c:	bd10      	pop	{r4, pc}

000d6f0e <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d6f0e:	b538      	push	{r3, r4, r5, lr}
   d6f10:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
   d6f12:	460c      	mov	r4, r1
   d6f14:	b141      	cbz	r1, d6f28 <_ZN6StringaSEPKc+0x1a>
   d6f16:	4608      	mov	r0, r1
   d6f18:	f000 fed1 	bl	d7cbe <strlen>
   d6f1c:	4621      	mov	r1, r4
   d6f1e:	4602      	mov	r2, r0
   d6f20:	4628      	mov	r0, r5
   d6f22:	f7ff ffaf 	bl	d6e84 <_ZN6String4copyEPKcj>
   d6f26:	e001      	b.n	d6f2c <_ZN6StringaSEPKc+0x1e>
	else invalidate();
   d6f28:	f7ff ff84 	bl	d6e34 <_ZN6String10invalidateEv>

	return *this;
}
   d6f2c:	4628      	mov	r0, r5
   d6f2e:	bd38      	pop	{r3, r4, r5, pc}

000d6f30 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   d6f30:	b570      	push	{r4, r5, r6, lr}
   d6f32:	4604      	mov	r4, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   d6f34:	460e      	mov	r6, r1
   d6f36:	b909      	cbnz	r1, d6f3c <_ZN6String6concatEPKcj+0xc>
   d6f38:	2000      	movs	r0, #0
   d6f3a:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   d6f3c:	b16a      	cbz	r2, d6f5a <_ZN6String6concatEPKcj+0x2a>
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
   d6f3e:	6883      	ldr	r3, [r0, #8]
   d6f40:	18d5      	adds	r5, r2, r3
	if (!cstr) return 0;
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
   d6f42:	4629      	mov	r1, r5
   d6f44:	f7ff ff8d 	bl	d6e62 <_ZN6String7reserveEj>
   d6f48:	2800      	cmp	r0, #0
   d6f4a:	d0f5      	beq.n	d6f38 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   d6f4c:	6820      	ldr	r0, [r4, #0]
   d6f4e:	68a3      	ldr	r3, [r4, #8]
   d6f50:	4631      	mov	r1, r6
   d6f52:	4418      	add	r0, r3
   d6f54:	f000 fe90 	bl	d7c78 <strcpy>
	len = newlen;
   d6f58:	60a5      	str	r5, [r4, #8]

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	if (!cstr) return 0;
	if (length == 0) return 1;
   d6f5a:	2001      	movs	r0, #1
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   d6f5c:	bd70      	pop	{r4, r5, r6, pc}

000d6f5e <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   d6f5e:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   d6f60:	688a      	ldr	r2, [r1, #8]
   d6f62:	6809      	ldr	r1, [r1, #0]
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   d6f64:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   d6f66:	f7ff ffe3 	bl	d6f30 <_ZN6String6concatEPKcj>
   d6f6a:	b910      	cbnz	r0, d6f72 <_ZplRK15StringSumHelperRK6String+0x14>
   d6f6c:	4620      	mov	r0, r4
   d6f6e:	f7ff ff61 	bl	d6e34 <_ZN6String10invalidateEv>
	return a;
}
   d6f72:	4620      	mov	r0, r4
   d6f74:	bd10      	pop	{r4, pc}

000d6f76 <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   d6f76:	b538      	push	{r3, r4, r5, lr}
   d6f78:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   d6f7a:	460d      	mov	r5, r1
   d6f7c:	b141      	cbz	r1, d6f90 <_ZplRK15StringSumHelperPKc+0x1a>
   d6f7e:	4608      	mov	r0, r1
   d6f80:	f000 fe9d 	bl	d7cbe <strlen>
   d6f84:	4629      	mov	r1, r5
   d6f86:	4602      	mov	r2, r0
   d6f88:	4620      	mov	r0, r4
   d6f8a:	f7ff ffd1 	bl	d6f30 <_ZN6String6concatEPKcj>
   d6f8e:	b910      	cbnz	r0, d6f96 <_ZplRK15StringSumHelperPKc+0x20>
   d6f90:	4620      	mov	r0, r4
   d6f92:	f7ff ff4f 	bl	d6e34 <_ZN6String10invalidateEv>
	return a;
}
   d6f96:	4620      	mov	r0, r4
   d6f98:	bd38      	pop	{r3, r4, r5, pc}
	...

000d6f9c <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
   d6f9c:	b40e      	push	{r1, r2, r3}
   d6f9e:	b5ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7, lr}
   d6fa0:	ac09      	add	r4, sp, #36	; 0x24
   d6fa2:	4605      	mov	r5, r0
   d6fa4:	f854 7b04 	ldr.w	r7, [r4], #4
    va_list marker;
    va_start(marker, fmt);
   d6fa8:	9401      	str	r4, [sp, #4]
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   d6faa:	4623      	mov	r3, r4
   d6fac:	463a      	mov	r2, r7
   d6fae:	2105      	movs	r1, #5
   d6fb0:	a802      	add	r0, sp, #8
   d6fb2:	f7fd ff3b 	bl	d4e2c <vsnprintf>
    va_end(marker);

    String result;
   d6fb6:	490c      	ldr	r1, [pc, #48]	; (d6fe8 <_ZN6String6formatEPKcz+0x4c>)
{
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   d6fb8:	4606      	mov	r6, r0
    va_end(marker);

    String result;
   d6fba:	4628      	mov	r0, r5
   d6fbc:	f7ff ff7a 	bl	d6eb4 <_ZN6StringC1EPK19__FlashStringHelper>
    result.reserve(n);  // internally adds +1 for null terminator
   d6fc0:	4631      	mov	r1, r6
   d6fc2:	4628      	mov	r0, r5
   d6fc4:	f7ff ff4d 	bl	d6e62 <_ZN6String7reserveEj>
    if (result.buffer) {
   d6fc8:	6828      	ldr	r0, [r5, #0]
   d6fca:	b130      	cbz	r0, d6fda <_ZN6String6formatEPKcz+0x3e>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   d6fcc:	4623      	mov	r3, r4
   d6fce:	463a      	mov	r2, r7
   d6fd0:	1c71      	adds	r1, r6, #1
    va_end(marker);

    String result;
    result.reserve(n);  // internally adds +1 for null terminator
    if (result.buffer) {
        va_start(marker, fmt);
   d6fd2:	9401      	str	r4, [sp, #4]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   d6fd4:	f7fd ff2a 	bl	d4e2c <vsnprintf>
        va_end(marker);
        result.len = n;
   d6fd8:	60a8      	str	r0, [r5, #8]
    }
    return result;
}
   d6fda:	4628      	mov	r0, r5
   d6fdc:	b004      	add	sp, #16
   d6fde:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   d6fe2:	b003      	add	sp, #12
   d6fe4:	4770      	bx	lr
   d6fe6:	bf00      	nop
   d6fe8:	000d81a4 	.word	0x000d81a4

000d6fec <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d6fec:	b510      	push	{r4, lr}
   d6fee:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d6ff0:	6800      	ldr	r0, [r0, #0]
   d6ff2:	b118      	cbz	r0, d6ffc <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
   d6ff4:	f7fd ff0a 	bl	d4e0c <free>
            wakeupSource_ = nullptr;
   d6ff8:	2300      	movs	r3, #0
   d6ffa:	6023      	str	r3, [r4, #0]
   d6ffc:	bd10      	pop	{r4, pc}

000d6ffe <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d6ffe:	b510      	push	{r4, lr}
   d7000:	4604      	mov	r4, r0
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
   d7002:	f7ff fff3 	bl	d6fec <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d7006:	4620      	mov	r0, r4
   d7008:	bd10      	pop	{r4, pc}
	...

000d700c <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d700c:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d700e:	4c09      	ldr	r4, [pc, #36]	; (d7034 <_GLOBAL__sub_I_System+0x28>)
   d7010:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d7012:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d7016:	6020      	str	r0, [r4, #0]
   d7018:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d701a:	71a0      	strb	r0, [r4, #6]
   d701c:	8120      	strh	r0, [r4, #8]
   d701e:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d7020:	f7fd fe40 	bl	d4ca4 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d7024:	4620      	mov	r0, r4
   d7026:	4a04      	ldr	r2, [pc, #16]	; (d7038 <_GLOBAL__sub_I_System+0x2c>)
   d7028:	4904      	ldr	r1, [pc, #16]	; (d703c <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d702a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d702e:	f000 ba79 	b.w	d7524 <__aeabi_atexit>
   d7032:	bf00      	nop
   d7034:	2003e6d4 	.word	0x2003e6d4
   d7038:	2003e408 	.word	0x2003e408
   d703c:	000d6fff 	.word	0x000d6fff

000d7040 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d7040:	4b02      	ldr	r3, [pc, #8]	; (d704c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d7042:	681a      	ldr	r2, [r3, #0]
   d7044:	4b02      	ldr	r3, [pc, #8]	; (d7050 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d7046:	601a      	str	r2, [r3, #0]
   d7048:	4770      	bx	lr
   d704a:	bf00      	nop
   d704c:	2003e39c 	.word	0x2003e39c
   d7050:	2003e6e0 	.word	0x2003e6e0

000d7054 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d7054:	4770      	bx	lr

000d7056 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d7056:	7441      	strb	r1, [r0, #17]
   d7058:	4770      	bx	lr

000d705a <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d705a:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d705c:	7c00      	ldrb	r0, [r0, #16]
   d705e:	f7fd fdb1 	bl	d4bc4 <HAL_USART_Available_Data_For_Write>
}
   d7062:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7066:	bd08      	pop	{r3, pc}

000d7068 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d7068:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d706a:	7c00      	ldrb	r0, [r0, #16]
   d706c:	f7fd fd82 	bl	d4b74 <HAL_USART_Available_Data>
}
   d7070:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7074:	bd08      	pop	{r3, pc}

000d7076 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d7076:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d7078:	7c00      	ldrb	r0, [r0, #16]
   d707a:	f7fd fd8b 	bl	d4b94 <HAL_USART_Peek_Data>
}
   d707e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d7082:	bf28      	it	cs
   d7084:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d7088:	bd08      	pop	{r3, pc}

000d708a <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d708a:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d708c:	7c00      	ldrb	r0, [r0, #16]
   d708e:	f7fd fd79 	bl	d4b84 <HAL_USART_Read_Data>
}
   d7092:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d7096:	bf28      	it	cs
   d7098:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d709c:	bd08      	pop	{r3, pc}

000d709e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d709e:	7c00      	ldrb	r0, [r0, #16]
   d70a0:	f7fd bd80 	b.w	d4ba4 <HAL_USART_Flush_Data>

000d70a4 <_ZN11USARTSerialD0Ev>:
   d70a4:	b510      	push	{r4, lr}
   d70a6:	2114      	movs	r1, #20
   d70a8:	4604      	mov	r4, r0
   d70aa:	f000 fa40 	bl	d752e <_ZdlPvj>
   d70ae:	4620      	mov	r0, r4
   d70b0:	bd10      	pop	{r4, pc}

000d70b2 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d70b2:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d70b4:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d70b6:	4604      	mov	r4, r0
   d70b8:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d70ba:	b925      	cbnz	r5, d70c6 <_ZN11USARTSerial5writeEh+0x14>
   d70bc:	7c00      	ldrb	r0, [r0, #16]
   d70be:	f7fd fd81 	bl	d4bc4 <HAL_USART_Available_Data_For_Write>
   d70c2:	2800      	cmp	r0, #0
   d70c4:	dd05      	ble.n	d70d2 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d70c6:	4631      	mov	r1, r6
   d70c8:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d70ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d70ce:	f7fd bd49 	b.w	d4b64 <HAL_USART_Write_Data>
  }
  return 0;
}
   d70d2:	4628      	mov	r0, r5
   d70d4:	bd70      	pop	{r4, r5, r6, pc}
	...

000d70d8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d70d8:	b510      	push	{r4, lr}
   d70da:	4604      	mov	r4, r0
   d70dc:	4608      	mov	r0, r1
   d70de:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d70e0:	2200      	movs	r2, #0
   d70e2:	6062      	str	r2, [r4, #4]
   d70e4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d70e8:	60a2      	str	r2, [r4, #8]
   d70ea:	4a05      	ldr	r2, [pc, #20]	; (d7100 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d70ec:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d70ee:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d70f0:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d70f2:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d70f4:	461a      	mov	r2, r3
   d70f6:	f7fd fd25 	bl	d4b44 <HAL_USART_Init>
}
   d70fa:	4620      	mov	r0, r4
   d70fc:	bd10      	pop	{r4, pc}
   d70fe:	bf00      	nop
   d7100:	000d82c0 	.word	0x000d82c0

000d7104 <_ZN11USARTSerial5beginEmm>:
  begin(baud, SERIAL_8N1);
}

void USARTSerial::begin(unsigned long baud, uint32_t config)
{
  HAL_USART_BeginConfig(_serial, baud, config, 0);
   d7104:	2300      	movs	r3, #0
   d7106:	7c00      	ldrb	r0, [r0, #16]
   d7108:	f7fd bd64 	b.w	d4bd4 <HAL_USART_BeginConfig>

000d710c <_ZN11USARTSerial5beginEm>:
}
// Public Methods //////////////////////////////////////////////////////////////

void USARTSerial::begin(unsigned long baud)
{
  begin(baud, SERIAL_8N1);
   d710c:	2200      	movs	r2, #0
   d710e:	f7ff bff9 	b.w	d7104 <_ZN11USARTSerial5beginEmm>

000d7112 <_ZN11USARTSerial3endEv>:
  HAL_USART_BeginConfig(_serial, baud, config, 0);
}

void USARTSerial::end()
{
  HAL_USART_End(_serial);
   d7112:	7c00      	ldrb	r0, [r0, #16]
   d7114:	f7fd bd1e 	b.w	d4b54 <HAL_USART_End>

000d7118 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d7118:	7c00      	ldrb	r0, [r0, #16]
   d711a:	f7fd bd4b 	b.w	d4bb4 <HAL_USART_Is_Enabled>
	...

000d7120 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d7120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
#else
  if (!serial1_rx_buffer) {
   d7122:	4c19      	ldr	r4, [pc, #100]	; (d7188 <_Z22__fetch_global_Serial1v+0x68>)
   d7124:	6825      	ldr	r5, [r4, #0]
   d7126:	b94d      	cbnz	r5, d713c <_Z22__fetch_global_Serial1v+0x1c>
    serial1_rx_buffer = new Ring_Buffer();
   d7128:	2084      	movs	r0, #132	; 0x84
   d712a:	f7fc ffb4 	bl	d4096 <_Znwj>
   d712e:	4606      	mov	r6, r0
   d7130:	b118      	cbz	r0, d713a <_Z22__fetch_global_Serial1v+0x1a>
   d7132:	2284      	movs	r2, #132	; 0x84
   d7134:	4629      	mov	r1, r5
   d7136:	f000 fd4d 	bl	d7bd4 <memset>
   d713a:	6026      	str	r6, [r4, #0]
  }
  if (!serial1_tx_buffer) {
   d713c:	4d13      	ldr	r5, [pc, #76]	; (d718c <_Z22__fetch_global_Serial1v+0x6c>)
   d713e:	682e      	ldr	r6, [r5, #0]
   d7140:	b94e      	cbnz	r6, d7156 <_Z22__fetch_global_Serial1v+0x36>
    serial1_tx_buffer = new Ring_Buffer();
   d7142:	2084      	movs	r0, #132	; 0x84
   d7144:	f7fc ffa7 	bl	d4096 <_Znwj>
   d7148:	4607      	mov	r7, r0
   d714a:	b118      	cbz	r0, d7154 <_Z22__fetch_global_Serial1v+0x34>
   d714c:	2284      	movs	r2, #132	; 0x84
   d714e:	4631      	mov	r1, r6
   d7150:	f000 fd40 	bl	d7bd4 <memset>
   d7154:	602f      	str	r7, [r5, #0]
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
   d7156:	4f0e      	ldr	r7, [pc, #56]	; (d7190 <_Z22__fetch_global_Serial1v+0x70>)
   d7158:	6839      	ldr	r1, [r7, #0]
   d715a:	f011 0601 	ands.w	r6, r1, #1
   d715e:	d111      	bne.n	d7184 <_Z22__fetch_global_Serial1v+0x64>
   d7160:	4638      	mov	r0, r7
   d7162:	f7fc ffa9 	bl	d40b8 <__cxa_guard_acquire>
   d7166:	b168      	cbz	r0, d7184 <_Z22__fetch_global_Serial1v+0x64>
   d7168:	6822      	ldr	r2, [r4, #0]
   d716a:	682b      	ldr	r3, [r5, #0]
   d716c:	4809      	ldr	r0, [pc, #36]	; (d7194 <_Z22__fetch_global_Serial1v+0x74>)
   d716e:	4631      	mov	r1, r6
   d7170:	f7ff ffb2 	bl	d70d8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d7174:	4638      	mov	r0, r7
   d7176:	f7fc ffa4 	bl	d40c2 <__cxa_guard_release>
   d717a:	4a07      	ldr	r2, [pc, #28]	; (d7198 <_Z22__fetch_global_Serial1v+0x78>)
   d717c:	4907      	ldr	r1, [pc, #28]	; (d719c <_Z22__fetch_global_Serial1v+0x7c>)
   d717e:	4805      	ldr	r0, [pc, #20]	; (d7194 <_Z22__fetch_global_Serial1v+0x74>)
   d7180:	f000 f9d0 	bl	d7524 <__aeabi_atexit>
#endif
	return serial1;
}
   d7184:	4803      	ldr	r0, [pc, #12]	; (d7194 <_Z22__fetch_global_Serial1v+0x74>)
   d7186:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d7188:	2003e700 	.word	0x2003e700
   d718c:	2003e6f8 	.word	0x2003e6f8
   d7190:	2003e6fc 	.word	0x2003e6fc
   d7194:	2003e6e4 	.word	0x2003e6e4
   d7198:	2003e408 	.word	0x2003e408
   d719c:	000d7055 	.word	0x000d7055

000d71a0 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d71a0:	7441      	strb	r1, [r0, #17]
   d71a2:	4770      	bx	lr

000d71a4 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d71a4:	4770      	bx	lr

000d71a6 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d71a6:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d71a8:	2100      	movs	r1, #0
   d71aa:	7c00      	ldrb	r0, [r0, #16]
   d71ac:	f7fd fd42 	bl	d4c34 <HAL_USB_USART_Receive_Data>
}
   d71b0:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d71b4:	bf28      	it	cs
   d71b6:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d71ba:	bd08      	pop	{r3, pc}

000d71bc <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d71bc:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d71be:	2101      	movs	r1, #1
   d71c0:	7c00      	ldrb	r0, [r0, #16]
   d71c2:	f7fd fd37 	bl	d4c34 <HAL_USB_USART_Receive_Data>
}
   d71c6:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d71ca:	bf28      	it	cs
   d71cc:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d71d0:	bd08      	pop	{r3, pc}

000d71d2 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d71d2:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d71d4:	7c00      	ldrb	r0, [r0, #16]
   d71d6:	f7fd fd25 	bl	d4c24 <HAL_USB_USART_Available_Data_For_Write>
}
   d71da:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d71de:	bd08      	pop	{r3, pc}

000d71e0 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d71e0:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d71e2:	7c00      	ldrb	r0, [r0, #16]
   d71e4:	f7fd fd16 	bl	d4c14 <HAL_USB_USART_Available_Data>
}
   d71e8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d71ec:	bd08      	pop	{r3, pc}

000d71ee <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d71ee:	7c00      	ldrb	r0, [r0, #16]
   d71f0:	f7fd bd30 	b.w	d4c54 <HAL_USB_USART_Flush_Data>

000d71f4 <_ZN9USBSerialD0Ev>:
   d71f4:	b510      	push	{r4, lr}
   d71f6:	2114      	movs	r1, #20
   d71f8:	4604      	mov	r4, r0
   d71fa:	f000 f998 	bl	d752e <_ZdlPvj>
   d71fe:	4620      	mov	r0, r4
   d7200:	bd10      	pop	{r4, pc}

000d7202 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d7202:	b538      	push	{r3, r4, r5, lr}
   d7204:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d7206:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d7208:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d720a:	f7fd fd0b 	bl	d4c24 <HAL_USB_USART_Available_Data_For_Write>
   d720e:	2800      	cmp	r0, #0
   d7210:	dc01      	bgt.n	d7216 <_ZN9USBSerial5writeEh+0x14>
   d7212:	7c60      	ldrb	r0, [r4, #17]
   d7214:	b128      	cbz	r0, d7222 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d7216:	4629      	mov	r1, r5
   d7218:	7c20      	ldrb	r0, [r4, #16]
   d721a:	f7fd fd13 	bl	d4c44 <HAL_USB_USART_Send_Data>
   d721e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d7222:	bd38      	pop	{r3, r4, r5, pc}

000d7224 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d7224:	b510      	push	{r4, lr}
   d7226:	4604      	mov	r4, r0
   d7228:	2300      	movs	r3, #0
   d722a:	6063      	str	r3, [r4, #4]
   d722c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d7230:	60a3      	str	r3, [r4, #8]
   d7232:	4b05      	ldr	r3, [pc, #20]	; (d7248 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d7234:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d7236:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d7238:	4608      	mov	r0, r1
{
  _serial = serial;
   d723a:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d723c:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d723e:	4611      	mov	r1, r2
   d7240:	f7fd fcd0 	bl	d4be4 <HAL_USB_USART_Init>
}
   d7244:	4620      	mov	r0, r4
   d7246:	bd10      	pop	{r4, pc}
   d7248:	000d82f0 	.word	0x000d82f0

000d724c <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d724c:	2200      	movs	r2, #0
   d724e:	7c00      	ldrb	r0, [r0, #16]
   d7250:	f7fd bcd0 	b.w	d4bf4 <HAL_USB_USART_Begin>

000d7254 <_ZN9USBSerial3endEv>:
}

void USBSerial::end()
{
    HAL_USB_USART_End(_serial);
   d7254:	7c00      	ldrb	r0, [r0, #16]
   d7256:	f7fd bcd5 	b.w	d4c04 <HAL_USB_USART_End>

000d725a <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d725a:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d725c:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d725e:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d7260:	2100      	movs	r1, #0
   d7262:	f000 fcb7 	bl	d7bd4 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d7266:	4620      	mov	r0, r4
   d7268:	bd10      	pop	{r4, pc}
	...

000d726c <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d726c:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d726e:	4d0e      	ldr	r5, [pc, #56]	; (d72a8 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d7270:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d7272:	a801      	add	r0, sp, #4
   d7274:	f7ff fff1 	bl	d725a <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d7278:	6829      	ldr	r1, [r5, #0]
   d727a:	f011 0401 	ands.w	r4, r1, #1
   d727e:	d110      	bne.n	d72a2 <_Z16_fetch_usbserialv+0x36>
   d7280:	4628      	mov	r0, r5
   d7282:	f7fc ff19 	bl	d40b8 <__cxa_guard_acquire>
   d7286:	b160      	cbz	r0, d72a2 <_Z16_fetch_usbserialv+0x36>
   d7288:	aa01      	add	r2, sp, #4
   d728a:	4621      	mov	r1, r4
   d728c:	4807      	ldr	r0, [pc, #28]	; (d72ac <_Z16_fetch_usbserialv+0x40>)
   d728e:	f7ff ffc9 	bl	d7224 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d7292:	4628      	mov	r0, r5
   d7294:	f7fc ff15 	bl	d40c2 <__cxa_guard_release>
   d7298:	4a05      	ldr	r2, [pc, #20]	; (d72b0 <_Z16_fetch_usbserialv+0x44>)
   d729a:	4906      	ldr	r1, [pc, #24]	; (d72b4 <_Z16_fetch_usbserialv+0x48>)
   d729c:	4803      	ldr	r0, [pc, #12]	; (d72ac <_Z16_fetch_usbserialv+0x40>)
   d729e:	f000 f941 	bl	d7524 <__aeabi_atexit>
	return _usbserial;
}
   d72a2:	4802      	ldr	r0, [pc, #8]	; (d72ac <_Z16_fetch_usbserialv+0x40>)
   d72a4:	b007      	add	sp, #28
   d72a6:	bd30      	pop	{r4, r5, pc}
   d72a8:	2003e704 	.word	0x2003e704
   d72ac:	2003e708 	.word	0x2003e708
   d72b0:	2003e408 	.word	0x2003e408
   d72b4:	000d71a5 	.word	0x000d71a5

000d72b8 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d72b8:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d72ba:	4b0f      	ldr	r3, [pc, #60]	; (d72f8 <serialEventRun+0x40>)
   d72bc:	b133      	cbz	r3, d72cc <serialEventRun+0x14>
   d72be:	f7ff ffd5 	bl	d726c <_Z16_fetch_usbserialv>
   d72c2:	6803      	ldr	r3, [r0, #0]
   d72c4:	691b      	ldr	r3, [r3, #16]
   d72c6:	4798      	blx	r3
   d72c8:	2800      	cmp	r0, #0
   d72ca:	dc0d      	bgt.n	d72e8 <serialEventRun+0x30>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d72cc:	4b0b      	ldr	r3, [pc, #44]	; (d72fc <serialEventRun+0x44>)
   d72ce:	b133      	cbz	r3, d72de <serialEventRun+0x26>
   d72d0:	f7ff ff26 	bl	d7120 <_Z22__fetch_global_Serial1v>
   d72d4:	6803      	ldr	r3, [r0, #0]
   d72d6:	691b      	ldr	r3, [r3, #16]
   d72d8:	4798      	blx	r3
   d72da:	2800      	cmp	r0, #0
   d72dc:	dc07      	bgt.n	d72ee <serialEventRun+0x36>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
   d72de:	4b08      	ldr	r3, [pc, #32]	; (d7300 <serialEventRun+0x48>)
   d72e0:	b143      	cbz	r3, d72f4 <serialEventRun+0x3c>
   d72e2:	f3af 8000 	nop.w

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
#endif
}
   d72e6:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d72e8:	f3af 8000 	nop.w
   d72ec:	e7ee      	b.n	d72cc <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d72ee:	f3af 8000 	nop.w
   d72f2:	e7f4      	b.n	d72de <serialEventRun+0x26>
   d72f4:	bd08      	pop	{r3, pc}
   d72f6:	bf00      	nop
	...

000d7304 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d7304:	b508      	push	{r3, lr}
	serialEventRun();
   d7306:	f7ff ffd7 	bl	d72b8 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d730a:	f7fd fb8b 	bl	d4a24 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d730e:	4b01      	ldr	r3, [pc, #4]	; (d7314 <_post_loop+0x10>)
   d7310:	6018      	str	r0, [r3, #0]
   d7312:	bd08      	pop	{r3, pc}
   d7314:	2003e730 	.word	0x2003e730

000d7318 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d7318:	4802      	ldr	r0, [pc, #8]	; (d7324 <_Z33system_initialize_user_backup_ramv+0xc>)
   d731a:	4a03      	ldr	r2, [pc, #12]	; (d7328 <_Z33system_initialize_user_backup_ramv+0x10>)
   d731c:	4903      	ldr	r1, [pc, #12]	; (d732c <_Z33system_initialize_user_backup_ramv+0x14>)
   d731e:	1a12      	subs	r2, r2, r0
   d7320:	f000 bc32 	b.w	d7b88 <memcpy>
   d7324:	2003f400 	.word	0x2003f400
   d7328:	2003f404 	.word	0x2003f404
   d732c:	000d84c0 	.word	0x000d84c0

000d7330 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d7330:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d7332:	2300      	movs	r3, #0
   d7334:	9300      	str	r3, [sp, #0]
   d7336:	461a      	mov	r2, r3
   d7338:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d733c:	f7fd fcdc 	bl	d4cf8 <system_ctrl_set_result>
}
   d7340:	b003      	add	sp, #12
   d7342:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d7348 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d7348:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d734a:	8843      	ldrh	r3, [r0, #2]
   d734c:	2b0a      	cmp	r3, #10
   d734e:	d008      	beq.n	d7362 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d7350:	2b50      	cmp	r3, #80	; 0x50
   d7352:	d109      	bne.n	d7368 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d7354:	4b09      	ldr	r3, [pc, #36]	; (d737c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d7356:	681b      	ldr	r3, [r3, #0]
   d7358:	b13b      	cbz	r3, d736a <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d735a:	b003      	add	sp, #12
   d735c:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d7360:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d7362:	f7ff ffe5 	bl	d7330 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d7366:	e006      	b.n	d7376 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d7368:	2300      	movs	r3, #0
   d736a:	9300      	str	r3, [sp, #0]
   d736c:	461a      	mov	r2, r3
   d736e:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d7372:	f7fd fcc1 	bl	d4cf8 <system_ctrl_set_result>
        break;
    }
}
   d7376:	b003      	add	sp, #12
   d7378:	f85d fb04 	ldr.w	pc, [sp], #4
   d737c:	2003e71c 	.word	0x2003e71c

000d7380 <module_user_init_hook>:

void module_user_init_hook()
{
   d7380:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d7382:	4c10      	ldr	r4, [pc, #64]	; (d73c4 <module_user_init_hook+0x44>)
   d7384:	4d10      	ldr	r5, [pc, #64]	; (d73c8 <module_user_init_hook+0x48>)
   d7386:	6823      	ldr	r3, [r4, #0]
   d7388:	42ab      	cmp	r3, r5
   d738a:	4b10      	ldr	r3, [pc, #64]	; (d73cc <module_user_init_hook+0x4c>)
   d738c:	bf0c      	ite	eq
   d738e:	2201      	moveq	r2, #1
   d7390:	2200      	movne	r2, #0
   d7392:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d7394:	d002      	beq.n	d739c <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d7396:	f7ff ffbf 	bl	d7318 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d739a:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d739c:	f7fd fb32 	bl	d4a04 <HAL_RNG_GetRandomNumber>
   d73a0:	4604      	mov	r4, r0
    srand(seed);
   d73a2:	f000 fc1f 	bl	d7be4 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d73a6:	4b0a      	ldr	r3, [pc, #40]	; (d73d0 <module_user_init_hook+0x50>)
   d73a8:	b113      	cbz	r3, d73b0 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d73aa:	4620      	mov	r0, r4
   d73ac:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d73b0:	2100      	movs	r1, #0
   d73b2:	4807      	ldr	r0, [pc, #28]	; (d73d0 <module_user_init_hook+0x50>)
   d73b4:	f7fd fcca 	bl	d4d4c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d73b8:	2100      	movs	r1, #0
   d73ba:	4806      	ldr	r0, [pc, #24]	; (d73d4 <module_user_init_hook+0x54>)
}
   d73bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d73c0:	f7fd bc90 	b.w	d4ce4 <system_ctrl_set_app_request_handler>
   d73c4:	2003f400 	.word	0x2003f400
   d73c8:	9a271c1e 	.word	0x9a271c1e
   d73cc:	2003e720 	.word	0x2003e720
   d73d0:	00000000 	.word	0x00000000
   d73d4:	000d7349 	.word	0x000d7349

000d73d8 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d73d8:	b570      	push	{r4, r5, r6, lr}

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d73da:	4e18      	ldr	r6, [pc, #96]	; (d743c <pinAvailable+0x64>)
   d73dc:	6831      	ldr	r1, [r6, #0]
   d73de:	f011 0501 	ands.w	r5, r1, #1
   d73e2:	4604      	mov	r4, r0
   d73e4:	d10a      	bne.n	d73fc <pinAvailable+0x24>
   d73e6:	4630      	mov	r0, r6
   d73e8:	f7fc fe66 	bl	d40b8 <__cxa_guard_acquire>
   d73ec:	b130      	cbz	r0, d73fc <pinAvailable+0x24>
   d73ee:	4629      	mov	r1, r5
   d73f0:	4813      	ldr	r0, [pc, #76]	; (d7440 <pinAvailable+0x68>)
   d73f2:	f7ff fcfb 	bl	d6dec <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d73f6:	4630      	mov	r0, r6
   d73f8:	f7fc fe63 	bl	d40c2 <__cxa_guard_release>
    }
    void detachInterrupt() {
        instance().detachInterrupt();
    }
    bool isEnabled(void) {
        return instance().isEnabled();
   d73fc:	4810      	ldr	r0, [pc, #64]	; (d7440 <pinAvailable+0x68>)
   d73fe:	f7ff fcff 	bl	d6e00 <_ZN8SPIClass9isEnabledEv>

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d7402:	b128      	cbz	r0, d7410 <pinAvailable+0x38>
   d7404:	f1a4 030b 	sub.w	r3, r4, #11
   d7408:	2b02      	cmp	r3, #2
   d740a:	d801      	bhi.n	d7410 <pinAvailable+0x38>
  {
    return 0; // 'pin' is used
   d740c:	2000      	movs	r0, #0
   d740e:	bd70      	pop	{r4, r5, r6, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d7410:	f000 f862 	bl	d74d8 <_Z19__fetch_global_Wirev>
   d7414:	f7fe f8ee 	bl	d55f4 <_ZN7TwoWire9isEnabledEv>
   d7418:	b108      	cbz	r0, d741e <pinAvailable+0x46>
   d741a:	2c01      	cmp	r4, #1
   d741c:	d9f6      	bls.n	d740c <pinAvailable+0x34>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d741e:	f7ff fe7f 	bl	d7120 <_Z22__fetch_global_Serial1v>
   d7422:	f7ff fe79 	bl	d7118 <_ZN11USARTSerial9isEnabledEv>
   d7426:	b118      	cbz	r0, d7430 <pinAvailable+0x58>
   d7428:	f1a4 0309 	sub.w	r3, r4, #9
   d742c:	2b01      	cmp	r3, #1
   d742e:	d9ed      	bls.n	d740c <pinAvailable+0x34>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d7430:	2c1e      	cmp	r4, #30
   d7432:	bf8c      	ite	hi
   d7434:	2000      	movhi	r0, #0
   d7436:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d7438:	bd70      	pop	{r4, r5, r6, pc}
   d743a:	bf00      	nop
   d743c:	2003e724 	.word	0x2003e724
   d7440:	2003e728 	.word	0x2003e728

000d7444 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d7444:	b538      	push	{r3, r4, r5, lr}
   d7446:	4604      	mov	r4, r0
   d7448:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d744a:	f7fd fb03 	bl	d4a54 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d744e:	28ff      	cmp	r0, #255	; 0xff
   d7450:	d010      	beq.n	d7474 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d7452:	2806      	cmp	r0, #6
   d7454:	d804      	bhi.n	d7460 <digitalWrite+0x1c>
   d7456:	234d      	movs	r3, #77	; 0x4d
   d7458:	fa23 f000 	lsr.w	r0, r3, r0
   d745c:	07c3      	lsls	r3, r0, #31
   d745e:	d409      	bmi.n	d7474 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d7460:	4620      	mov	r0, r4
   d7462:	f7ff ffb9 	bl	d73d8 <pinAvailable>
   d7466:	b128      	cbz	r0, d7474 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d7468:	4629      	mov	r1, r5
   d746a:	4620      	mov	r0, r4
}
   d746c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d7470:	f7fd baf8 	b.w	d4a64 <HAL_GPIO_Write>
   d7474:	bd38      	pop	{r3, r4, r5, pc}

000d7476 <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d7476:	280d      	cmp	r0, #13
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
   d7478:	b510      	push	{r4, lr}
   d747a:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
  {
    pin = pin + FIRST_ANALOG_PIN;
   d747c:	bf9c      	itt	ls
   d747e:	340e      	addls	r4, #14
   d7480:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d7482:	4620      	mov	r0, r4
   d7484:	f7ff ffa8 	bl	d73d8 <pinAvailable>
   d7488:	b150      	cbz	r0, d74a0 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d748a:	2103      	movs	r1, #3
   d748c:	4620      	mov	r0, r4
   d748e:	f7fd fad9 	bl	d4a44 <HAL_Validate_Pin_Function>
   d7492:	2803      	cmp	r0, #3
   d7494:	d104      	bne.n	d74a0 <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d7496:	4620      	mov	r0, r4
}
   d7498:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d749c:	f7fd baea 	b.w	d4a74 <HAL_ADC_Read>
}
   d74a0:	2000      	movs	r0, #0
   d74a2:	bd10      	pop	{r4, pc}

000d74a4 <_Z17acquireWireBufferv>:
   d74a4:	b570      	push	{r4, r5, r6, lr}
   d74a6:	4604      	mov	r4, r0
   d74a8:	2514      	movs	r5, #20
   d74aa:	462a      	mov	r2, r5
   d74ac:	4e09      	ldr	r6, [pc, #36]	; (d74d4 <_Z17acquireWireBufferv+0x30>)
   d74ae:	2100      	movs	r1, #0
   d74b0:	f000 fb90 	bl	d7bd4 <memset>
   d74b4:	8025      	strh	r5, [r4, #0]
   d74b6:	2520      	movs	r5, #32
   d74b8:	4631      	mov	r1, r6
   d74ba:	60a5      	str	r5, [r4, #8]
   d74bc:	6125      	str	r5, [r4, #16]
   d74be:	4628      	mov	r0, r5
   d74c0:	f000 f84f 	bl	d7562 <_ZnajRKSt9nothrow_t>
   d74c4:	4631      	mov	r1, r6
   d74c6:	6060      	str	r0, [r4, #4]
   d74c8:	4628      	mov	r0, r5
   d74ca:	f000 f84a 	bl	d7562 <_ZnajRKSt9nothrow_t>
   d74ce:	60e0      	str	r0, [r4, #12]
   d74d0:	4620      	mov	r0, r4
   d74d2:	bd70      	pop	{r4, r5, r6, pc}
   d74d4:	000d8318 	.word	0x000d8318

000d74d8 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d74d8:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d74da:	4d0e      	ldr	r5, [pc, #56]	; (d7514 <_Z19__fetch_global_Wirev+0x3c>)
   d74dc:	6829      	ldr	r1, [r5, #0]
   d74de:	f011 0401 	ands.w	r4, r1, #1
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d74e2:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d74e4:	d113      	bne.n	d750e <_Z19__fetch_global_Wirev+0x36>
   d74e6:	4628      	mov	r0, r5
   d74e8:	f7fc fde6 	bl	d40b8 <__cxa_guard_acquire>
   d74ec:	b178      	cbz	r0, d750e <_Z19__fetch_global_Wirev+0x36>
   d74ee:	a801      	add	r0, sp, #4
   d74f0:	f7ff ffd8 	bl	d74a4 <_Z17acquireWireBufferv>
   d74f4:	aa01      	add	r2, sp, #4
   d74f6:	4621      	mov	r1, r4
   d74f8:	4807      	ldr	r0, [pc, #28]	; (d7518 <_Z19__fetch_global_Wirev+0x40>)
   d74fa:	f7fe f869 	bl	d55d0 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   d74fe:	4628      	mov	r0, r5
   d7500:	f7fc fddf 	bl	d40c2 <__cxa_guard_release>
   d7504:	4a05      	ldr	r2, [pc, #20]	; (d751c <_Z19__fetch_global_Wirev+0x44>)
   d7506:	4906      	ldr	r1, [pc, #24]	; (d7520 <_Z19__fetch_global_Wirev+0x48>)
   d7508:	4803      	ldr	r0, [pc, #12]	; (d7518 <_Z19__fetch_global_Wirev+0x40>)
   d750a:	f000 f80b 	bl	d7524 <__aeabi_atexit>
	return wire;
}
   d750e:	4802      	ldr	r0, [pc, #8]	; (d7518 <_Z19__fetch_global_Wirev+0x40>)
   d7510:	b007      	add	sp, #28
   d7512:	bd30      	pop	{r4, r5, pc}
   d7514:	2003e734 	.word	0x2003e734
   d7518:	2003e738 	.word	0x2003e738
   d751c:	2003e408 	.word	0x2003e408
   d7520:	000d5579 	.word	0x000d5579

000d7524 <__aeabi_atexit>:
   d7524:	460b      	mov	r3, r1
   d7526:	4601      	mov	r1, r0
   d7528:	4618      	mov	r0, r3
   d752a:	f000 bb1f 	b.w	d7b6c <__cxa_atexit>

000d752e <_ZdlPvj>:
   d752e:	f7fc bdb4 	b.w	d409a <_ZdlPv>
	...

000d7534 <_ZSt15get_new_handlerv>:
   d7534:	4b02      	ldr	r3, [pc, #8]	; (d7540 <_ZSt15get_new_handlerv+0xc>)
   d7536:	6818      	ldr	r0, [r3, #0]
   d7538:	f3bf 8f5f 	dmb	sy
   d753c:	4770      	bx	lr
   d753e:	bf00      	nop
   d7540:	2003e74c 	.word	0x2003e74c

000d7544 <_ZnwjRKSt9nothrow_t>:
   d7544:	b510      	push	{r4, lr}
   d7546:	2800      	cmp	r0, #0
   d7548:	bf14      	ite	ne
   d754a:	4604      	movne	r4, r0
   d754c:	2401      	moveq	r4, #1
   d754e:	4620      	mov	r0, r4
   d7550:	f7fd fc54 	bl	d4dfc <malloc>
   d7554:	b920      	cbnz	r0, d7560 <_ZnwjRKSt9nothrow_t+0x1c>
   d7556:	f7ff ffed 	bl	d7534 <_ZSt15get_new_handlerv>
   d755a:	b108      	cbz	r0, d7560 <_ZnwjRKSt9nothrow_t+0x1c>
   d755c:	4780      	blx	r0
   d755e:	e7f6      	b.n	d754e <_ZnwjRKSt9nothrow_t+0xa>
   d7560:	bd10      	pop	{r4, pc}

000d7562 <_ZnajRKSt9nothrow_t>:
   d7562:	f7ff bfef 	b.w	d7544 <_ZnwjRKSt9nothrow_t>

000d7566 <_ZSt25__throw_bad_function_callv>:
   d7566:	b508      	push	{r3, lr}
   d7568:	f7fd fc68 	bl	d4e3c <abort>

000d756c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d756c:	4b24      	ldr	r3, [pc, #144]	; (d7600 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d756e:	681a      	ldr	r2, [r3, #0]
   d7570:	07d0      	lsls	r0, r2, #31
   d7572:	bf5c      	itt	pl
   d7574:	2201      	movpl	r2, #1
   d7576:	601a      	strpl	r2, [r3, #0]
   d7578:	4b22      	ldr	r3, [pc, #136]	; (d7604 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d757a:	681a      	ldr	r2, [r3, #0]
   d757c:	07d1      	lsls	r1, r2, #31
   d757e:	bf5c      	itt	pl
   d7580:	2201      	movpl	r2, #1
   d7582:	601a      	strpl	r2, [r3, #0]
   d7584:	4b20      	ldr	r3, [pc, #128]	; (d7608 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d7586:	681a      	ldr	r2, [r3, #0]
   d7588:	07d2      	lsls	r2, r2, #31
   d758a:	bf5c      	itt	pl
   d758c:	2201      	movpl	r2, #1
   d758e:	601a      	strpl	r2, [r3, #0]
   d7590:	4b1e      	ldr	r3, [pc, #120]	; (d760c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d7592:	681a      	ldr	r2, [r3, #0]
   d7594:	07d0      	lsls	r0, r2, #31
   d7596:	bf5c      	itt	pl
   d7598:	2201      	movpl	r2, #1
   d759a:	601a      	strpl	r2, [r3, #0]
   d759c:	4b1c      	ldr	r3, [pc, #112]	; (d7610 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d759e:	681a      	ldr	r2, [r3, #0]
   d75a0:	07d1      	lsls	r1, r2, #31
   d75a2:	bf5c      	itt	pl
   d75a4:	2201      	movpl	r2, #1
   d75a6:	601a      	strpl	r2, [r3, #0]
   d75a8:	4b1a      	ldr	r3, [pc, #104]	; (d7614 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d75aa:	681a      	ldr	r2, [r3, #0]
   d75ac:	07d2      	lsls	r2, r2, #31
   d75ae:	bf5c      	itt	pl
   d75b0:	2201      	movpl	r2, #1
   d75b2:	601a      	strpl	r2, [r3, #0]
   d75b4:	4b18      	ldr	r3, [pc, #96]	; (d7618 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d75b6:	681a      	ldr	r2, [r3, #0]
   d75b8:	07d0      	lsls	r0, r2, #31
   d75ba:	bf5c      	itt	pl
   d75bc:	2201      	movpl	r2, #1
   d75be:	601a      	strpl	r2, [r3, #0]
   d75c0:	4b16      	ldr	r3, [pc, #88]	; (d761c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d75c2:	681a      	ldr	r2, [r3, #0]
   d75c4:	07d1      	lsls	r1, r2, #31
   d75c6:	bf5c      	itt	pl
   d75c8:	2201      	movpl	r2, #1
   d75ca:	601a      	strpl	r2, [r3, #0]
   d75cc:	4b14      	ldr	r3, [pc, #80]	; (d7620 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d75ce:	681a      	ldr	r2, [r3, #0]
   d75d0:	07d2      	lsls	r2, r2, #31
   d75d2:	bf5c      	itt	pl
   d75d4:	2201      	movpl	r2, #1
   d75d6:	601a      	strpl	r2, [r3, #0]
   d75d8:	4b12      	ldr	r3, [pc, #72]	; (d7624 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d75da:	681a      	ldr	r2, [r3, #0]
   d75dc:	07d0      	lsls	r0, r2, #31
   d75de:	bf5c      	itt	pl
   d75e0:	2201      	movpl	r2, #1
   d75e2:	601a      	strpl	r2, [r3, #0]
   d75e4:	4b10      	ldr	r3, [pc, #64]	; (d7628 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d75e6:	681a      	ldr	r2, [r3, #0]
   d75e8:	07d1      	lsls	r1, r2, #31
   d75ea:	bf5c      	itt	pl
   d75ec:	2201      	movpl	r2, #1
   d75ee:	601a      	strpl	r2, [r3, #0]
   d75f0:	4b0e      	ldr	r3, [pc, #56]	; (d762c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d75f2:	681a      	ldr	r2, [r3, #0]
   d75f4:	07d2      	lsls	r2, r2, #31
   d75f6:	bf5c      	itt	pl
   d75f8:	2201      	movpl	r2, #1
   d75fa:	601a      	strpl	r2, [r3, #0]
   d75fc:	4770      	bx	lr
   d75fe:	bf00      	nop
   d7600:	2003e77c 	.word	0x2003e77c
   d7604:	2003e778 	.word	0x2003e778
   d7608:	2003e774 	.word	0x2003e774
   d760c:	2003e770 	.word	0x2003e770
   d7610:	2003e76c 	.word	0x2003e76c
   d7614:	2003e768 	.word	0x2003e768
   d7618:	2003e764 	.word	0x2003e764
   d761c:	2003e760 	.word	0x2003e760
   d7620:	2003e75c 	.word	0x2003e75c
   d7624:	2003e758 	.word	0x2003e758
   d7628:	2003e754 	.word	0x2003e754
   d762c:	2003e750 	.word	0x2003e750

000d7630 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d7630:	4b18      	ldr	r3, [pc, #96]	; (d7694 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d7632:	681a      	ldr	r2, [r3, #0]
   d7634:	07d1      	lsls	r1, r2, #31
   d7636:	bf5c      	itt	pl
   d7638:	2201      	movpl	r2, #1
   d763a:	601a      	strpl	r2, [r3, #0]
   d763c:	4b16      	ldr	r3, [pc, #88]	; (d7698 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d763e:	681a      	ldr	r2, [r3, #0]
   d7640:	07d2      	lsls	r2, r2, #31
   d7642:	bf5c      	itt	pl
   d7644:	2201      	movpl	r2, #1
   d7646:	601a      	strpl	r2, [r3, #0]
   d7648:	4b14      	ldr	r3, [pc, #80]	; (d769c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d764a:	681a      	ldr	r2, [r3, #0]
   d764c:	07d0      	lsls	r0, r2, #31
   d764e:	bf5c      	itt	pl
   d7650:	2201      	movpl	r2, #1
   d7652:	601a      	strpl	r2, [r3, #0]
   d7654:	4b12      	ldr	r3, [pc, #72]	; (d76a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d7656:	681a      	ldr	r2, [r3, #0]
   d7658:	07d1      	lsls	r1, r2, #31
   d765a:	bf5c      	itt	pl
   d765c:	2201      	movpl	r2, #1
   d765e:	601a      	strpl	r2, [r3, #0]
   d7660:	4b10      	ldr	r3, [pc, #64]	; (d76a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d7662:	681a      	ldr	r2, [r3, #0]
   d7664:	07d2      	lsls	r2, r2, #31
   d7666:	bf5c      	itt	pl
   d7668:	2201      	movpl	r2, #1
   d766a:	601a      	strpl	r2, [r3, #0]
   d766c:	4b0e      	ldr	r3, [pc, #56]	; (d76a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d766e:	681a      	ldr	r2, [r3, #0]
   d7670:	07d0      	lsls	r0, r2, #31
   d7672:	bf5c      	itt	pl
   d7674:	2201      	movpl	r2, #1
   d7676:	601a      	strpl	r2, [r3, #0]
   d7678:	4b0c      	ldr	r3, [pc, #48]	; (d76ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d767a:	681a      	ldr	r2, [r3, #0]
   d767c:	07d1      	lsls	r1, r2, #31
   d767e:	bf5c      	itt	pl
   d7680:	2201      	movpl	r2, #1
   d7682:	601a      	strpl	r2, [r3, #0]
   d7684:	4b0a      	ldr	r3, [pc, #40]	; (d76b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d7686:	681a      	ldr	r2, [r3, #0]
   d7688:	07d2      	lsls	r2, r2, #31
   d768a:	bf5c      	itt	pl
   d768c:	2201      	movpl	r2, #1
   d768e:	601a      	strpl	r2, [r3, #0]
   d7690:	4770      	bx	lr
   d7692:	bf00      	nop
   d7694:	2003e79c 	.word	0x2003e79c
   d7698:	2003e798 	.word	0x2003e798
   d769c:	2003e794 	.word	0x2003e794
   d76a0:	2003e790 	.word	0x2003e790
   d76a4:	2003e78c 	.word	0x2003e78c
   d76a8:	2003e788 	.word	0x2003e788
   d76ac:	2003e784 	.word	0x2003e784
   d76b0:	2003e780 	.word	0x2003e780

000d76b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d76b4:	4b18      	ldr	r3, [pc, #96]	; (d7718 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d76b6:	681a      	ldr	r2, [r3, #0]
   d76b8:	07d1      	lsls	r1, r2, #31
   d76ba:	bf5c      	itt	pl
   d76bc:	2201      	movpl	r2, #1
   d76be:	601a      	strpl	r2, [r3, #0]
   d76c0:	4b16      	ldr	r3, [pc, #88]	; (d771c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d76c2:	681a      	ldr	r2, [r3, #0]
   d76c4:	07d2      	lsls	r2, r2, #31
   d76c6:	bf5c      	itt	pl
   d76c8:	2201      	movpl	r2, #1
   d76ca:	601a      	strpl	r2, [r3, #0]
   d76cc:	4b14      	ldr	r3, [pc, #80]	; (d7720 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d76ce:	681a      	ldr	r2, [r3, #0]
   d76d0:	07d0      	lsls	r0, r2, #31
   d76d2:	bf5c      	itt	pl
   d76d4:	2201      	movpl	r2, #1
   d76d6:	601a      	strpl	r2, [r3, #0]
   d76d8:	4b12      	ldr	r3, [pc, #72]	; (d7724 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d76da:	681a      	ldr	r2, [r3, #0]
   d76dc:	07d1      	lsls	r1, r2, #31
   d76de:	bf5c      	itt	pl
   d76e0:	2201      	movpl	r2, #1
   d76e2:	601a      	strpl	r2, [r3, #0]
   d76e4:	4b10      	ldr	r3, [pc, #64]	; (d7728 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d76e6:	681a      	ldr	r2, [r3, #0]
   d76e8:	07d2      	lsls	r2, r2, #31
   d76ea:	bf5c      	itt	pl
   d76ec:	2201      	movpl	r2, #1
   d76ee:	601a      	strpl	r2, [r3, #0]
   d76f0:	4b0e      	ldr	r3, [pc, #56]	; (d772c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d76f2:	681a      	ldr	r2, [r3, #0]
   d76f4:	07d0      	lsls	r0, r2, #31
   d76f6:	bf5c      	itt	pl
   d76f8:	2201      	movpl	r2, #1
   d76fa:	601a      	strpl	r2, [r3, #0]
   d76fc:	4b0c      	ldr	r3, [pc, #48]	; (d7730 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d76fe:	681a      	ldr	r2, [r3, #0]
   d7700:	07d1      	lsls	r1, r2, #31
   d7702:	bf5c      	itt	pl
   d7704:	2201      	movpl	r2, #1
   d7706:	601a      	strpl	r2, [r3, #0]
   d7708:	4b0a      	ldr	r3, [pc, #40]	; (d7734 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d770a:	681a      	ldr	r2, [r3, #0]
   d770c:	07d2      	lsls	r2, r2, #31
   d770e:	bf5c      	itt	pl
   d7710:	2201      	movpl	r2, #1
   d7712:	601a      	strpl	r2, [r3, #0]
   d7714:	4770      	bx	lr
   d7716:	bf00      	nop
   d7718:	2003e7bc 	.word	0x2003e7bc
   d771c:	2003e7b8 	.word	0x2003e7b8
   d7720:	2003e7b4 	.word	0x2003e7b4
   d7724:	2003e7b0 	.word	0x2003e7b0
   d7728:	2003e7ac 	.word	0x2003e7ac
   d772c:	2003e7a8 	.word	0x2003e7a8
   d7730:	2003e7a4 	.word	0x2003e7a4
   d7734:	2003e7a0 	.word	0x2003e7a0

000d7738 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d7738:	4b24      	ldr	r3, [pc, #144]	; (d77cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d773a:	681a      	ldr	r2, [r3, #0]
   d773c:	07d0      	lsls	r0, r2, #31
   d773e:	bf5c      	itt	pl
   d7740:	2201      	movpl	r2, #1
   d7742:	601a      	strpl	r2, [r3, #0]
   d7744:	4b22      	ldr	r3, [pc, #136]	; (d77d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d7746:	681a      	ldr	r2, [r3, #0]
   d7748:	07d1      	lsls	r1, r2, #31
   d774a:	bf5c      	itt	pl
   d774c:	2201      	movpl	r2, #1
   d774e:	601a      	strpl	r2, [r3, #0]
   d7750:	4b20      	ldr	r3, [pc, #128]	; (d77d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d7752:	681a      	ldr	r2, [r3, #0]
   d7754:	07d2      	lsls	r2, r2, #31
   d7756:	bf5c      	itt	pl
   d7758:	2201      	movpl	r2, #1
   d775a:	601a      	strpl	r2, [r3, #0]
   d775c:	4b1e      	ldr	r3, [pc, #120]	; (d77d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d775e:	681a      	ldr	r2, [r3, #0]
   d7760:	07d0      	lsls	r0, r2, #31
   d7762:	bf5c      	itt	pl
   d7764:	2201      	movpl	r2, #1
   d7766:	601a      	strpl	r2, [r3, #0]
   d7768:	4b1c      	ldr	r3, [pc, #112]	; (d77dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d776a:	681a      	ldr	r2, [r3, #0]
   d776c:	07d1      	lsls	r1, r2, #31
   d776e:	bf5c      	itt	pl
   d7770:	2201      	movpl	r2, #1
   d7772:	601a      	strpl	r2, [r3, #0]
   d7774:	4b1a      	ldr	r3, [pc, #104]	; (d77e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d7776:	681a      	ldr	r2, [r3, #0]
   d7778:	07d2      	lsls	r2, r2, #31
   d777a:	bf5c      	itt	pl
   d777c:	2201      	movpl	r2, #1
   d777e:	601a      	strpl	r2, [r3, #0]
   d7780:	4b18      	ldr	r3, [pc, #96]	; (d77e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d7782:	681a      	ldr	r2, [r3, #0]
   d7784:	07d0      	lsls	r0, r2, #31
   d7786:	bf5c      	itt	pl
   d7788:	2201      	movpl	r2, #1
   d778a:	601a      	strpl	r2, [r3, #0]
   d778c:	4b16      	ldr	r3, [pc, #88]	; (d77e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d778e:	681a      	ldr	r2, [r3, #0]
   d7790:	07d1      	lsls	r1, r2, #31
   d7792:	bf5c      	itt	pl
   d7794:	2201      	movpl	r2, #1
   d7796:	601a      	strpl	r2, [r3, #0]
   d7798:	4b14      	ldr	r3, [pc, #80]	; (d77ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d779a:	681a      	ldr	r2, [r3, #0]
   d779c:	07d2      	lsls	r2, r2, #31
   d779e:	bf5c      	itt	pl
   d77a0:	2201      	movpl	r2, #1
   d77a2:	601a      	strpl	r2, [r3, #0]
   d77a4:	4b12      	ldr	r3, [pc, #72]	; (d77f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d77a6:	681a      	ldr	r2, [r3, #0]
   d77a8:	07d0      	lsls	r0, r2, #31
   d77aa:	bf5c      	itt	pl
   d77ac:	2201      	movpl	r2, #1
   d77ae:	601a      	strpl	r2, [r3, #0]
   d77b0:	4b10      	ldr	r3, [pc, #64]	; (d77f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d77b2:	681a      	ldr	r2, [r3, #0]
   d77b4:	07d1      	lsls	r1, r2, #31
   d77b6:	bf5c      	itt	pl
   d77b8:	2201      	movpl	r2, #1
   d77ba:	601a      	strpl	r2, [r3, #0]
   d77bc:	4b0e      	ldr	r3, [pc, #56]	; (d77f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d77be:	681a      	ldr	r2, [r3, #0]
   d77c0:	07d2      	lsls	r2, r2, #31
   d77c2:	bf5c      	itt	pl
   d77c4:	2201      	movpl	r2, #1
   d77c6:	601a      	strpl	r2, [r3, #0]
   d77c8:	4770      	bx	lr
   d77ca:	bf00      	nop
   d77cc:	2003e7ec 	.word	0x2003e7ec
   d77d0:	2003e7e8 	.word	0x2003e7e8
   d77d4:	2003e7e4 	.word	0x2003e7e4
   d77d8:	2003e7e0 	.word	0x2003e7e0
   d77dc:	2003e7dc 	.word	0x2003e7dc
   d77e0:	2003e7d8 	.word	0x2003e7d8
   d77e4:	2003e7d4 	.word	0x2003e7d4
   d77e8:	2003e7d0 	.word	0x2003e7d0
   d77ec:	2003e7cc 	.word	0x2003e7cc
   d77f0:	2003e7c8 	.word	0x2003e7c8
   d77f4:	2003e7c4 	.word	0x2003e7c4
   d77f8:	2003e7c0 	.word	0x2003e7c0

000d77fc <__aeabi_drsub>:
   d77fc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d7800:	e002      	b.n	d7808 <__adddf3>
   d7802:	bf00      	nop

000d7804 <__aeabi_dsub>:
   d7804:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d7808 <__adddf3>:
   d7808:	b530      	push	{r4, r5, lr}
   d780a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d780e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d7812:	ea94 0f05 	teq	r4, r5
   d7816:	bf08      	it	eq
   d7818:	ea90 0f02 	teqeq	r0, r2
   d781c:	bf1f      	itttt	ne
   d781e:	ea54 0c00 	orrsne.w	ip, r4, r0
   d7822:	ea55 0c02 	orrsne.w	ip, r5, r2
   d7826:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d782a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d782e:	f000 80e2 	beq.w	d79f6 <__adddf3+0x1ee>
   d7832:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d7836:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d783a:	bfb8      	it	lt
   d783c:	426d      	neglt	r5, r5
   d783e:	dd0c      	ble.n	d785a <__adddf3+0x52>
   d7840:	442c      	add	r4, r5
   d7842:	ea80 0202 	eor.w	r2, r0, r2
   d7846:	ea81 0303 	eor.w	r3, r1, r3
   d784a:	ea82 0000 	eor.w	r0, r2, r0
   d784e:	ea83 0101 	eor.w	r1, r3, r1
   d7852:	ea80 0202 	eor.w	r2, r0, r2
   d7856:	ea81 0303 	eor.w	r3, r1, r3
   d785a:	2d36      	cmp	r5, #54	; 0x36
   d785c:	bf88      	it	hi
   d785e:	bd30      	pophi	{r4, r5, pc}
   d7860:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d7864:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d7868:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d786c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d7870:	d002      	beq.n	d7878 <__adddf3+0x70>
   d7872:	4240      	negs	r0, r0
   d7874:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d7878:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d787c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d7880:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d7884:	d002      	beq.n	d788c <__adddf3+0x84>
   d7886:	4252      	negs	r2, r2
   d7888:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d788c:	ea94 0f05 	teq	r4, r5
   d7890:	f000 80a7 	beq.w	d79e2 <__adddf3+0x1da>
   d7894:	f1a4 0401 	sub.w	r4, r4, #1
   d7898:	f1d5 0e20 	rsbs	lr, r5, #32
   d789c:	db0d      	blt.n	d78ba <__adddf3+0xb2>
   d789e:	fa02 fc0e 	lsl.w	ip, r2, lr
   d78a2:	fa22 f205 	lsr.w	r2, r2, r5
   d78a6:	1880      	adds	r0, r0, r2
   d78a8:	f141 0100 	adc.w	r1, r1, #0
   d78ac:	fa03 f20e 	lsl.w	r2, r3, lr
   d78b0:	1880      	adds	r0, r0, r2
   d78b2:	fa43 f305 	asr.w	r3, r3, r5
   d78b6:	4159      	adcs	r1, r3
   d78b8:	e00e      	b.n	d78d8 <__adddf3+0xd0>
   d78ba:	f1a5 0520 	sub.w	r5, r5, #32
   d78be:	f10e 0e20 	add.w	lr, lr, #32
   d78c2:	2a01      	cmp	r2, #1
   d78c4:	fa03 fc0e 	lsl.w	ip, r3, lr
   d78c8:	bf28      	it	cs
   d78ca:	f04c 0c02 	orrcs.w	ip, ip, #2
   d78ce:	fa43 f305 	asr.w	r3, r3, r5
   d78d2:	18c0      	adds	r0, r0, r3
   d78d4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d78d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d78dc:	d507      	bpl.n	d78ee <__adddf3+0xe6>
   d78de:	f04f 0e00 	mov.w	lr, #0
   d78e2:	f1dc 0c00 	rsbs	ip, ip, #0
   d78e6:	eb7e 0000 	sbcs.w	r0, lr, r0
   d78ea:	eb6e 0101 	sbc.w	r1, lr, r1
   d78ee:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d78f2:	d31b      	bcc.n	d792c <__adddf3+0x124>
   d78f4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d78f8:	d30c      	bcc.n	d7914 <__adddf3+0x10c>
   d78fa:	0849      	lsrs	r1, r1, #1
   d78fc:	ea5f 0030 	movs.w	r0, r0, rrx
   d7900:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d7904:	f104 0401 	add.w	r4, r4, #1
   d7908:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d790c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d7910:	f080 809a 	bcs.w	d7a48 <__adddf3+0x240>
   d7914:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d7918:	bf08      	it	eq
   d791a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d791e:	f150 0000 	adcs.w	r0, r0, #0
   d7922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d7926:	ea41 0105 	orr.w	r1, r1, r5
   d792a:	bd30      	pop	{r4, r5, pc}
   d792c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d7930:	4140      	adcs	r0, r0
   d7932:	eb41 0101 	adc.w	r1, r1, r1
   d7936:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d793a:	f1a4 0401 	sub.w	r4, r4, #1
   d793e:	d1e9      	bne.n	d7914 <__adddf3+0x10c>
   d7940:	f091 0f00 	teq	r1, #0
   d7944:	bf04      	itt	eq
   d7946:	4601      	moveq	r1, r0
   d7948:	2000      	moveq	r0, #0
   d794a:	fab1 f381 	clz	r3, r1
   d794e:	bf08      	it	eq
   d7950:	3320      	addeq	r3, #32
   d7952:	f1a3 030b 	sub.w	r3, r3, #11
   d7956:	f1b3 0220 	subs.w	r2, r3, #32
   d795a:	da0c      	bge.n	d7976 <__adddf3+0x16e>
   d795c:	320c      	adds	r2, #12
   d795e:	dd08      	ble.n	d7972 <__adddf3+0x16a>
   d7960:	f102 0c14 	add.w	ip, r2, #20
   d7964:	f1c2 020c 	rsb	r2, r2, #12
   d7968:	fa01 f00c 	lsl.w	r0, r1, ip
   d796c:	fa21 f102 	lsr.w	r1, r1, r2
   d7970:	e00c      	b.n	d798c <__adddf3+0x184>
   d7972:	f102 0214 	add.w	r2, r2, #20
   d7976:	bfd8      	it	le
   d7978:	f1c2 0c20 	rsble	ip, r2, #32
   d797c:	fa01 f102 	lsl.w	r1, r1, r2
   d7980:	fa20 fc0c 	lsr.w	ip, r0, ip
   d7984:	bfdc      	itt	le
   d7986:	ea41 010c 	orrle.w	r1, r1, ip
   d798a:	4090      	lslle	r0, r2
   d798c:	1ae4      	subs	r4, r4, r3
   d798e:	bfa2      	ittt	ge
   d7990:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d7994:	4329      	orrge	r1, r5
   d7996:	bd30      	popge	{r4, r5, pc}
   d7998:	ea6f 0404 	mvn.w	r4, r4
   d799c:	3c1f      	subs	r4, #31
   d799e:	da1c      	bge.n	d79da <__adddf3+0x1d2>
   d79a0:	340c      	adds	r4, #12
   d79a2:	dc0e      	bgt.n	d79c2 <__adddf3+0x1ba>
   d79a4:	f104 0414 	add.w	r4, r4, #20
   d79a8:	f1c4 0220 	rsb	r2, r4, #32
   d79ac:	fa20 f004 	lsr.w	r0, r0, r4
   d79b0:	fa01 f302 	lsl.w	r3, r1, r2
   d79b4:	ea40 0003 	orr.w	r0, r0, r3
   d79b8:	fa21 f304 	lsr.w	r3, r1, r4
   d79bc:	ea45 0103 	orr.w	r1, r5, r3
   d79c0:	bd30      	pop	{r4, r5, pc}
   d79c2:	f1c4 040c 	rsb	r4, r4, #12
   d79c6:	f1c4 0220 	rsb	r2, r4, #32
   d79ca:	fa20 f002 	lsr.w	r0, r0, r2
   d79ce:	fa01 f304 	lsl.w	r3, r1, r4
   d79d2:	ea40 0003 	orr.w	r0, r0, r3
   d79d6:	4629      	mov	r1, r5
   d79d8:	bd30      	pop	{r4, r5, pc}
   d79da:	fa21 f004 	lsr.w	r0, r1, r4
   d79de:	4629      	mov	r1, r5
   d79e0:	bd30      	pop	{r4, r5, pc}
   d79e2:	f094 0f00 	teq	r4, #0
   d79e6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d79ea:	bf06      	itte	eq
   d79ec:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d79f0:	3401      	addeq	r4, #1
   d79f2:	3d01      	subne	r5, #1
   d79f4:	e74e      	b.n	d7894 <__adddf3+0x8c>
   d79f6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d79fa:	bf18      	it	ne
   d79fc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d7a00:	d029      	beq.n	d7a56 <__adddf3+0x24e>
   d7a02:	ea94 0f05 	teq	r4, r5
   d7a06:	bf08      	it	eq
   d7a08:	ea90 0f02 	teqeq	r0, r2
   d7a0c:	d005      	beq.n	d7a1a <__adddf3+0x212>
   d7a0e:	ea54 0c00 	orrs.w	ip, r4, r0
   d7a12:	bf04      	itt	eq
   d7a14:	4619      	moveq	r1, r3
   d7a16:	4610      	moveq	r0, r2
   d7a18:	bd30      	pop	{r4, r5, pc}
   d7a1a:	ea91 0f03 	teq	r1, r3
   d7a1e:	bf1e      	ittt	ne
   d7a20:	2100      	movne	r1, #0
   d7a22:	2000      	movne	r0, #0
   d7a24:	bd30      	popne	{r4, r5, pc}
   d7a26:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d7a2a:	d105      	bne.n	d7a38 <__adddf3+0x230>
   d7a2c:	0040      	lsls	r0, r0, #1
   d7a2e:	4149      	adcs	r1, r1
   d7a30:	bf28      	it	cs
   d7a32:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d7a36:	bd30      	pop	{r4, r5, pc}
   d7a38:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d7a3c:	bf3c      	itt	cc
   d7a3e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d7a42:	bd30      	popcc	{r4, r5, pc}
   d7a44:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d7a48:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d7a4c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d7a50:	f04f 0000 	mov.w	r0, #0
   d7a54:	bd30      	pop	{r4, r5, pc}
   d7a56:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d7a5a:	bf1a      	itte	ne
   d7a5c:	4619      	movne	r1, r3
   d7a5e:	4610      	movne	r0, r2
   d7a60:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d7a64:	bf1c      	itt	ne
   d7a66:	460b      	movne	r3, r1
   d7a68:	4602      	movne	r2, r0
   d7a6a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d7a6e:	bf06      	itte	eq
   d7a70:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d7a74:	ea91 0f03 	teqeq	r1, r3
   d7a78:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d7a7c:	bd30      	pop	{r4, r5, pc}
   d7a7e:	bf00      	nop

000d7a80 <__aeabi_ui2d>:
   d7a80:	f090 0f00 	teq	r0, #0
   d7a84:	bf04      	itt	eq
   d7a86:	2100      	moveq	r1, #0
   d7a88:	4770      	bxeq	lr
   d7a8a:	b530      	push	{r4, r5, lr}
   d7a8c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d7a90:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d7a94:	f04f 0500 	mov.w	r5, #0
   d7a98:	f04f 0100 	mov.w	r1, #0
   d7a9c:	e750      	b.n	d7940 <__adddf3+0x138>
   d7a9e:	bf00      	nop

000d7aa0 <__aeabi_i2d>:
   d7aa0:	f090 0f00 	teq	r0, #0
   d7aa4:	bf04      	itt	eq
   d7aa6:	2100      	moveq	r1, #0
   d7aa8:	4770      	bxeq	lr
   d7aaa:	b530      	push	{r4, r5, lr}
   d7aac:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d7ab0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d7ab4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d7ab8:	bf48      	it	mi
   d7aba:	4240      	negmi	r0, r0
   d7abc:	f04f 0100 	mov.w	r1, #0
   d7ac0:	e73e      	b.n	d7940 <__adddf3+0x138>
   d7ac2:	bf00      	nop

000d7ac4 <__aeabi_f2d>:
   d7ac4:	0042      	lsls	r2, r0, #1
   d7ac6:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d7aca:	ea4f 0131 	mov.w	r1, r1, rrx
   d7ace:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d7ad2:	bf1f      	itttt	ne
   d7ad4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d7ad8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d7adc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d7ae0:	4770      	bxne	lr
   d7ae2:	f092 0f00 	teq	r2, #0
   d7ae6:	bf14      	ite	ne
   d7ae8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d7aec:	4770      	bxeq	lr
   d7aee:	b530      	push	{r4, r5, lr}
   d7af0:	f44f 7460 	mov.w	r4, #896	; 0x380
   d7af4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d7af8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d7afc:	e720      	b.n	d7940 <__adddf3+0x138>
   d7afe:	bf00      	nop

000d7b00 <__aeabi_ul2d>:
   d7b00:	ea50 0201 	orrs.w	r2, r0, r1
   d7b04:	bf08      	it	eq
   d7b06:	4770      	bxeq	lr
   d7b08:	b530      	push	{r4, r5, lr}
   d7b0a:	f04f 0500 	mov.w	r5, #0
   d7b0e:	e00a      	b.n	d7b26 <__aeabi_l2d+0x16>

000d7b10 <__aeabi_l2d>:
   d7b10:	ea50 0201 	orrs.w	r2, r0, r1
   d7b14:	bf08      	it	eq
   d7b16:	4770      	bxeq	lr
   d7b18:	b530      	push	{r4, r5, lr}
   d7b1a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d7b1e:	d502      	bpl.n	d7b26 <__aeabi_l2d+0x16>
   d7b20:	4240      	negs	r0, r0
   d7b22:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d7b26:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d7b2a:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d7b2e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d7b32:	f43f aedc 	beq.w	d78ee <__adddf3+0xe6>
   d7b36:	f04f 0203 	mov.w	r2, #3
   d7b3a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d7b3e:	bf18      	it	ne
   d7b40:	3203      	addne	r2, #3
   d7b42:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d7b46:	bf18      	it	ne
   d7b48:	3203      	addne	r2, #3
   d7b4a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d7b4e:	f1c2 0320 	rsb	r3, r2, #32
   d7b52:	fa00 fc03 	lsl.w	ip, r0, r3
   d7b56:	fa20 f002 	lsr.w	r0, r0, r2
   d7b5a:	fa01 fe03 	lsl.w	lr, r1, r3
   d7b5e:	ea40 000e 	orr.w	r0, r0, lr
   d7b62:	fa21 f102 	lsr.w	r1, r1, r2
   d7b66:	4414      	add	r4, r2
   d7b68:	e6c1      	b.n	d78ee <__adddf3+0xe6>
   d7b6a:	bf00      	nop

000d7b6c <__cxa_atexit>:
   d7b6c:	b510      	push	{r4, lr}
   d7b6e:	4c05      	ldr	r4, [pc, #20]	; (d7b84 <__cxa_atexit+0x18>)
   d7b70:	4613      	mov	r3, r2
   d7b72:	b12c      	cbz	r4, d7b80 <__cxa_atexit+0x14>
   d7b74:	460a      	mov	r2, r1
   d7b76:	4601      	mov	r1, r0
   d7b78:	2002      	movs	r0, #2
   d7b7a:	f3af 8000 	nop.w
   d7b7e:	bd10      	pop	{r4, pc}
   d7b80:	4620      	mov	r0, r4
   d7b82:	bd10      	pop	{r4, pc}
   d7b84:	00000000 	.word	0x00000000

000d7b88 <memcpy>:
   d7b88:	b510      	push	{r4, lr}
   d7b8a:	1e43      	subs	r3, r0, #1
   d7b8c:	440a      	add	r2, r1
   d7b8e:	4291      	cmp	r1, r2
   d7b90:	d004      	beq.n	d7b9c <memcpy+0x14>
   d7b92:	f811 4b01 	ldrb.w	r4, [r1], #1
   d7b96:	f803 4f01 	strb.w	r4, [r3, #1]!
   d7b9a:	e7f8      	b.n	d7b8e <memcpy+0x6>
   d7b9c:	bd10      	pop	{r4, pc}

000d7b9e <memmove>:
   d7b9e:	4288      	cmp	r0, r1
   d7ba0:	b510      	push	{r4, lr}
   d7ba2:	eb01 0302 	add.w	r3, r1, r2
   d7ba6:	d801      	bhi.n	d7bac <memmove+0xe>
   d7ba8:	1e42      	subs	r2, r0, #1
   d7baa:	e00b      	b.n	d7bc4 <memmove+0x26>
   d7bac:	4298      	cmp	r0, r3
   d7bae:	d2fb      	bcs.n	d7ba8 <memmove+0xa>
   d7bb0:	1881      	adds	r1, r0, r2
   d7bb2:	1ad2      	subs	r2, r2, r3
   d7bb4:	42d3      	cmn	r3, r2
   d7bb6:	d004      	beq.n	d7bc2 <memmove+0x24>
   d7bb8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   d7bbc:	f801 4d01 	strb.w	r4, [r1, #-1]!
   d7bc0:	e7f8      	b.n	d7bb4 <memmove+0x16>
   d7bc2:	bd10      	pop	{r4, pc}
   d7bc4:	4299      	cmp	r1, r3
   d7bc6:	d004      	beq.n	d7bd2 <memmove+0x34>
   d7bc8:	f811 4b01 	ldrb.w	r4, [r1], #1
   d7bcc:	f802 4f01 	strb.w	r4, [r2, #1]!
   d7bd0:	e7f8      	b.n	d7bc4 <memmove+0x26>
   d7bd2:	bd10      	pop	{r4, pc}

000d7bd4 <memset>:
   d7bd4:	4402      	add	r2, r0
   d7bd6:	4603      	mov	r3, r0
   d7bd8:	4293      	cmp	r3, r2
   d7bda:	d002      	beq.n	d7be2 <memset+0xe>
   d7bdc:	f803 1b01 	strb.w	r1, [r3], #1
   d7be0:	e7fa      	b.n	d7bd8 <memset+0x4>
   d7be2:	4770      	bx	lr

000d7be4 <srand>:
   d7be4:	b538      	push	{r3, r4, r5, lr}
   d7be6:	4b12      	ldr	r3, [pc, #72]	; (d7c30 <srand+0x4c>)
   d7be8:	681c      	ldr	r4, [r3, #0]
   d7bea:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d7bec:	4605      	mov	r5, r0
   d7bee:	b9d3      	cbnz	r3, d7c26 <srand+0x42>
   d7bf0:	2018      	movs	r0, #24
   d7bf2:	f7fd f903 	bl	d4dfc <malloc>
   d7bf6:	f243 330e 	movw	r3, #13070	; 0x330e
   d7bfa:	63a0      	str	r0, [r4, #56]	; 0x38
   d7bfc:	8003      	strh	r3, [r0, #0]
   d7bfe:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d7c02:	8043      	strh	r3, [r0, #2]
   d7c04:	f241 2334 	movw	r3, #4660	; 0x1234
   d7c08:	8083      	strh	r3, [r0, #4]
   d7c0a:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d7c0e:	80c3      	strh	r3, [r0, #6]
   d7c10:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d7c14:	8103      	strh	r3, [r0, #8]
   d7c16:	2305      	movs	r3, #5
   d7c18:	8143      	strh	r3, [r0, #10]
   d7c1a:	230b      	movs	r3, #11
   d7c1c:	8183      	strh	r3, [r0, #12]
   d7c1e:	2201      	movs	r2, #1
   d7c20:	2300      	movs	r3, #0
   d7c22:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d7c26:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d7c28:	2200      	movs	r2, #0
   d7c2a:	611d      	str	r5, [r3, #16]
   d7c2c:	615a      	str	r2, [r3, #20]
   d7c2e:	bd38      	pop	{r3, r4, r5, pc}
   d7c30:	2003e404 	.word	0x2003e404

000d7c34 <strchr>:
   d7c34:	b2c9      	uxtb	r1, r1
   d7c36:	4603      	mov	r3, r0
   d7c38:	f810 2b01 	ldrb.w	r2, [r0], #1
   d7c3c:	b11a      	cbz	r2, d7c46 <strchr+0x12>
   d7c3e:	4291      	cmp	r1, r2
   d7c40:	d1f9      	bne.n	d7c36 <strchr+0x2>
   d7c42:	4618      	mov	r0, r3
   d7c44:	4770      	bx	lr
   d7c46:	2900      	cmp	r1, #0
   d7c48:	bf0c      	ite	eq
   d7c4a:	4618      	moveq	r0, r3
   d7c4c:	2000      	movne	r0, #0
   d7c4e:	4770      	bx	lr

000d7c50 <strchrnul>:
   d7c50:	b510      	push	{r4, lr}
   d7c52:	4604      	mov	r4, r0
   d7c54:	f7ff ffee 	bl	d7c34 <strchr>
   d7c58:	b918      	cbnz	r0, d7c62 <strchrnul+0x12>
   d7c5a:	4620      	mov	r0, r4
   d7c5c:	f000 f82f 	bl	d7cbe <strlen>
   d7c60:	4420      	add	r0, r4
   d7c62:	bd10      	pop	{r4, pc}

000d7c64 <strcmp>:
   d7c64:	f810 2b01 	ldrb.w	r2, [r0], #1
   d7c68:	f811 3b01 	ldrb.w	r3, [r1], #1
   d7c6c:	2a01      	cmp	r2, #1
   d7c6e:	bf28      	it	cs
   d7c70:	429a      	cmpcs	r2, r3
   d7c72:	d0f7      	beq.n	d7c64 <strcmp>
   d7c74:	1ad0      	subs	r0, r2, r3
   d7c76:	4770      	bx	lr

000d7c78 <strcpy>:
   d7c78:	4603      	mov	r3, r0
   d7c7a:	f811 2b01 	ldrb.w	r2, [r1], #1
   d7c7e:	f803 2b01 	strb.w	r2, [r3], #1
   d7c82:	2a00      	cmp	r2, #0
   d7c84:	d1f9      	bne.n	d7c7a <strcpy+0x2>
   d7c86:	4770      	bx	lr

000d7c88 <strdup>:
   d7c88:	4b02      	ldr	r3, [pc, #8]	; (d7c94 <strdup+0xc>)
   d7c8a:	4601      	mov	r1, r0
   d7c8c:	6818      	ldr	r0, [r3, #0]
   d7c8e:	f000 b803 	b.w	d7c98 <_strdup_r>
   d7c92:	bf00      	nop
   d7c94:	2003e404 	.word	0x2003e404

000d7c98 <_strdup_r>:
   d7c98:	b570      	push	{r4, r5, r6, lr}
   d7c9a:	4606      	mov	r6, r0
   d7c9c:	4608      	mov	r0, r1
   d7c9e:	460c      	mov	r4, r1
   d7ca0:	f000 f80d 	bl	d7cbe <strlen>
   d7ca4:	1c45      	adds	r5, r0, #1
   d7ca6:	4629      	mov	r1, r5
   d7ca8:	4630      	mov	r0, r6
   d7caa:	f7fd f8cf 	bl	d4e4c <_malloc_r>
   d7cae:	4606      	mov	r6, r0
   d7cb0:	b118      	cbz	r0, d7cba <_strdup_r+0x22>
   d7cb2:	462a      	mov	r2, r5
   d7cb4:	4621      	mov	r1, r4
   d7cb6:	f7ff ff67 	bl	d7b88 <memcpy>
   d7cba:	4630      	mov	r0, r6
   d7cbc:	bd70      	pop	{r4, r5, r6, pc}

000d7cbe <strlen>:
   d7cbe:	4603      	mov	r3, r0
   d7cc0:	f813 2b01 	ldrb.w	r2, [r3], #1
   d7cc4:	2a00      	cmp	r2, #0
   d7cc6:	d1fb      	bne.n	d7cc0 <strlen+0x2>
   d7cc8:	1a18      	subs	r0, r3, r0
   d7cca:	3801      	subs	r0, #1
   d7ccc:	4770      	bx	lr

000d7cce <strncmp>:
   d7cce:	b530      	push	{r4, r5, lr}
   d7cd0:	b182      	cbz	r2, d7cf4 <strncmp+0x26>
   d7cd2:	1e45      	subs	r5, r0, #1
   d7cd4:	3901      	subs	r1, #1
   d7cd6:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   d7cda:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d7cde:	42a3      	cmp	r3, r4
   d7ce0:	d106      	bne.n	d7cf0 <strncmp+0x22>
   d7ce2:	43ec      	mvns	r4, r5
   d7ce4:	4414      	add	r4, r2
   d7ce6:	42e0      	cmn	r0, r4
   d7ce8:	d001      	beq.n	d7cee <strncmp+0x20>
   d7cea:	2b00      	cmp	r3, #0
   d7cec:	d1f3      	bne.n	d7cd6 <strncmp+0x8>
   d7cee:	461c      	mov	r4, r3
   d7cf0:	1b18      	subs	r0, r3, r4
   d7cf2:	bd30      	pop	{r4, r5, pc}
   d7cf4:	4610      	mov	r0, r2
   d7cf6:	bd30      	pop	{r4, r5, pc}

000d7cf8 <strrchr>:
   d7cf8:	b538      	push	{r3, r4, r5, lr}
   d7cfa:	4603      	mov	r3, r0
   d7cfc:	460d      	mov	r5, r1
   d7cfe:	b141      	cbz	r1, d7d12 <strrchr+0x1a>
   d7d00:	2400      	movs	r4, #0
   d7d02:	4629      	mov	r1, r5
   d7d04:	4618      	mov	r0, r3
   d7d06:	f7ff ff95 	bl	d7c34 <strchr>
   d7d0a:	b130      	cbz	r0, d7d1a <strrchr+0x22>
   d7d0c:	1c43      	adds	r3, r0, #1
   d7d0e:	4604      	mov	r4, r0
   d7d10:	e7f7      	b.n	d7d02 <strrchr+0xa>
   d7d12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d7d16:	f7ff bf8d 	b.w	d7c34 <strchr>
   d7d1a:	4620      	mov	r0, r4
   d7d1c:	bd38      	pop	{r3, r4, r5, pc}
	...

000d7d20 <_strtol_r>:
   d7d20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d7d24:	4680      	mov	r8, r0
   d7d26:	4840      	ldr	r0, [pc, #256]	; (d7e28 <_strtol_r+0x108>)
   d7d28:	f8d0 9000 	ldr.w	r9, [r0]
   d7d2c:	460f      	mov	r7, r1
   d7d2e:	463d      	mov	r5, r7
   d7d30:	f815 4b01 	ldrb.w	r4, [r5], #1
   d7d34:	eb09 0004 	add.w	r0, r9, r4
   d7d38:	7840      	ldrb	r0, [r0, #1]
   d7d3a:	f000 0008 	and.w	r0, r0, #8
   d7d3e:	f000 06ff 	and.w	r6, r0, #255	; 0xff
   d7d42:	b108      	cbz	r0, d7d48 <_strtol_r+0x28>
   d7d44:	462f      	mov	r7, r5
   d7d46:	e7f2      	b.n	d7d2e <_strtol_r+0xe>
   d7d48:	2c2d      	cmp	r4, #45	; 0x2d
   d7d4a:	d103      	bne.n	d7d54 <_strtol_r+0x34>
   d7d4c:	1cbd      	adds	r5, r7, #2
   d7d4e:	787c      	ldrb	r4, [r7, #1]
   d7d50:	2601      	movs	r6, #1
   d7d52:	e003      	b.n	d7d5c <_strtol_r+0x3c>
   d7d54:	2c2b      	cmp	r4, #43	; 0x2b
   d7d56:	bf04      	itt	eq
   d7d58:	787c      	ldrbeq	r4, [r7, #1]
   d7d5a:	1cbd      	addeq	r5, r7, #2
   d7d5c:	b113      	cbz	r3, d7d64 <_strtol_r+0x44>
   d7d5e:	2b10      	cmp	r3, #16
   d7d60:	d10a      	bne.n	d7d78 <_strtol_r+0x58>
   d7d62:	e05b      	b.n	d7e1c <_strtol_r+0xfc>
   d7d64:	2c30      	cmp	r4, #48	; 0x30
   d7d66:	d157      	bne.n	d7e18 <_strtol_r+0xf8>
   d7d68:	7828      	ldrb	r0, [r5, #0]
   d7d6a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d7d6e:	2858      	cmp	r0, #88	; 0x58
   d7d70:	d14d      	bne.n	d7e0e <_strtol_r+0xee>
   d7d72:	786c      	ldrb	r4, [r5, #1]
   d7d74:	2310      	movs	r3, #16
   d7d76:	3502      	adds	r5, #2
   d7d78:	2e00      	cmp	r6, #0
   d7d7a:	bf14      	ite	ne
   d7d7c:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
   d7d80:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
   d7d84:	2700      	movs	r7, #0
   d7d86:	fbbc faf3 	udiv	sl, ip, r3
   d7d8a:	4638      	mov	r0, r7
   d7d8c:	fb03 cc1a 	mls	ip, r3, sl, ip
   d7d90:	eb09 0e04 	add.w	lr, r9, r4
   d7d94:	f89e e001 	ldrb.w	lr, [lr, #1]
   d7d98:	f01e 0f04 	tst.w	lr, #4
   d7d9c:	d001      	beq.n	d7da2 <_strtol_r+0x82>
   d7d9e:	3c30      	subs	r4, #48	; 0x30
   d7da0:	e00b      	b.n	d7dba <_strtol_r+0x9a>
   d7da2:	f01e 0e03 	ands.w	lr, lr, #3
   d7da6:	d01b      	beq.n	d7de0 <_strtol_r+0xc0>
   d7da8:	f1be 0f01 	cmp.w	lr, #1
   d7dac:	bf0c      	ite	eq
   d7dae:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   d7db2:	f04f 0e57 	movne.w	lr, #87	; 0x57
   d7db6:	ebce 0404 	rsb	r4, lr, r4
   d7dba:	42a3      	cmp	r3, r4
   d7dbc:	dd10      	ble.n	d7de0 <_strtol_r+0xc0>
   d7dbe:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
   d7dc2:	d00a      	beq.n	d7dda <_strtol_r+0xba>
   d7dc4:	4550      	cmp	r0, sl
   d7dc6:	d806      	bhi.n	d7dd6 <_strtol_r+0xb6>
   d7dc8:	d101      	bne.n	d7dce <_strtol_r+0xae>
   d7dca:	4564      	cmp	r4, ip
   d7dcc:	dc03      	bgt.n	d7dd6 <_strtol_r+0xb6>
   d7dce:	fb03 4000 	mla	r0, r3, r0, r4
   d7dd2:	2701      	movs	r7, #1
   d7dd4:	e001      	b.n	d7dda <_strtol_r+0xba>
   d7dd6:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   d7dda:	f815 4b01 	ldrb.w	r4, [r5], #1
   d7dde:	e7d7      	b.n	d7d90 <_strtol_r+0x70>
   d7de0:	1c7b      	adds	r3, r7, #1
   d7de2:	d10c      	bne.n	d7dfe <_strtol_r+0xde>
   d7de4:	2e00      	cmp	r6, #0
   d7de6:	f04f 0322 	mov.w	r3, #34	; 0x22
   d7dea:	bf14      	ite	ne
   d7dec:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
   d7df0:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d7df4:	f8c8 3000 	str.w	r3, [r8]
   d7df8:	b92a      	cbnz	r2, d7e06 <_strtol_r+0xe6>
   d7dfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d7dfe:	b106      	cbz	r6, d7e02 <_strtol_r+0xe2>
   d7e00:	4240      	negs	r0, r0
   d7e02:	b172      	cbz	r2, d7e22 <_strtol_r+0x102>
   d7e04:	b107      	cbz	r7, d7e08 <_strtol_r+0xe8>
   d7e06:	1e69      	subs	r1, r5, #1
   d7e08:	6011      	str	r1, [r2, #0]
   d7e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d7e0e:	2430      	movs	r4, #48	; 0x30
   d7e10:	2b00      	cmp	r3, #0
   d7e12:	d1b1      	bne.n	d7d78 <_strtol_r+0x58>
   d7e14:	2308      	movs	r3, #8
   d7e16:	e7af      	b.n	d7d78 <_strtol_r+0x58>
   d7e18:	230a      	movs	r3, #10
   d7e1a:	e7ad      	b.n	d7d78 <_strtol_r+0x58>
   d7e1c:	2c30      	cmp	r4, #48	; 0x30
   d7e1e:	d0a3      	beq.n	d7d68 <_strtol_r+0x48>
   d7e20:	e7aa      	b.n	d7d78 <_strtol_r+0x58>
   d7e22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d7e26:	bf00      	nop
   d7e28:	2003e3a0 	.word	0x2003e3a0

000d7e2c <strtol>:
   d7e2c:	4613      	mov	r3, r2
   d7e2e:	460a      	mov	r2, r1
   d7e30:	4601      	mov	r1, r0
   d7e32:	4802      	ldr	r0, [pc, #8]	; (d7e3c <strtol+0x10>)
   d7e34:	6800      	ldr	r0, [r0, #0]
   d7e36:	f7ff bf73 	b.w	d7d20 <_strtol_r>
   d7e3a:	bf00      	nop
   d7e3c:	2003e404 	.word	0x2003e404

000d7e40 <dynalib_user>:
   d7e40:	000d401d 000d4059 000d4085 000d4089     .@..Y@...@...@..
   d7e50:	00000000                                ....

000d7e54 <_ZTVN5spark10LogHandlerE>:
	...
   d7e64:	000d40a5 000d40c9                       .@...@..

000d7e6c <_ZTVN5spark16SerialLogHandlerE>:
	...
   d7e74:	000d40d5 000d4109 000d66b5 000d40cb     .@...A...f...@..
   d7e84:	4853454d 53454d00 4f432048 43454e4e     MESH.MESH CONNEC
   d7e94:	00444554 4853454d 49414620 2044454c     TED.MESH FAILED 
   d7ea4:	43204f54 454e4e4f 50005443 49545241     TO CONNECT.PARTI
   d7eb4:	00454c43 54524150 454c4349 4e4f4320     CLE.PARTICLE CON
   d7ec4:	5443454e 50004445 49545241 20454c43     NECTED.PARTICLE 
   d7ed4:	4c494146 54204445 4f43204f 43454e4e     FAILED TO CONNEC
   d7ee4:	41530054 494c504d 575f474e 5f544941     T.SAMPLING_WAIT_
   d7ef4:	54415453 54530045 20545241 504d4153     STATE.START SAMP
   d7f04:	474e494c 42555000 4853494c 4941575f     LING.PUBLISH_WAI
   d7f14:	54535f54 00455441 52415453 55502054     T_STATE.START PU
   d7f24:	53494c42 54535f48 00455441 64726147     BLISH_STATE.Gard
   d7f34:	4c2d6e65 2d796461 2d677542 432d3430     en-Lady-Bug-04-C
   d7f44:	36007061 6e6f5563 4c735871 6e666863     ap.6cUonqXsLchfn
   d7f54:	46357438 55735536 35467872 00457138     8t5F6UsUrxF58qE.
   d7f64:	7622207b 65756c61 22203a22 322e2500     { "value": ".%.2
   d7f74:	2c220066 65662220 44496465 22203a22     f.", "feedID": "
   d7f84:	007d2200 64726147 4c2d6e65 2d796461     ."}.Garden-Lady-
   d7f94:	2d677542 432d3430 502d7061 65637265     Bug-04-Cap-Perce
   d7fa4:	6761746e 386e0065 50637065 6b464373     ntage.n8epcPsCFk
   d7fb4:	55396273 67745957 656f7458 686a4b34     sb9UWYtgXtoe4Kjh
   d7fc4:	2500766b 54530064 20545241 45454c53     kv.%d.START SLEE
   d7fd4:	41575f50 535f5449 45544154 494f4700     P_WAIT_STATE.GOI
   d7fe4:	5420474e 4c53204f 00504545 45454c53     NG TO SLEEP.SLEE
   d7ff4:	54535f50 00455441 454b4157 00505520     P_STATE.WAKE UP.
   d8004:	55544553 45530050 20505554 504d4f43     SETUP.SETUP COMP
   d8014:	4554454c 00000000                       LETE....

000d801c <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d8024:	000d4f45 000d4f4b 000d4fa1 000d4f59     EO..KO...O..YO..
   d8034:	000d4f47                                GO..

000d8038 <_ZTVN5spark13EthernetClassE>:
	...
   d8040:	000d555b 000d5551 000d5547 000d553d     [U..QU..GU..=U..
   d8050:	000d5531 000d5525 000d5519 000d5511     1U..%U...U...U..
   d8060:	000d5507 000d54fd 000d6bc5              .U...T...k..

000d806c <_ZTV7TwoWire>:
	...
   d8074:	000d5579 000d55c3 000d559b 000d557b     yU...U...U..{U..
   d8084:	000d55a3 000d55ab 000d55b3 000d55bb     .U...U...U...U..

000d8094 <_ZTV9IPAddress>:
	...
   d809c:	000d560d 000d55fd 000d55ff 00302e30     .V...U...U..0.0.
   d80ac:	736c6166 72740065 25006575 2e250075     false.true.%u.%.
   d80bc:	00666c2a 6e006725 006c6c75 34302575     *lf.%g.null.u%04
   d80cc:	00000078                                x...

000d80d0 <_ZTVN5spark16JSONStreamWriterE>:
	...
   d80d8:	000d5a91 000d5ab7 000d5a6b 000d570f     .Z...Z..kZ...W..

000d80e8 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   d80f0:	000d5f0d 000d5f21 000d6869 000d5a73     ._..!_..ih..sZ..
   d8100:	64756162 72655300 006c6169 69726553     baud.Serial.Seri
   d8110:	00316c61 65707974 72617000 63006d61     al1.type.param.c
   d8120:	6900646d 6e680064 74730064 66006d72     md.id.hnd.strm.f
   d8130:	00746c69 006c766c 48646461 6c646e61     ilt.lvl.addHandl
   d8140:	72007265 766f6d65 6e614865 72656c64     er.removeHandler
   d8150:	756e6500 6e61486d 72656c64 534a0073     .enumHandlers.JS
   d8160:	74534e4f 6d616572 48676f4c 6c646e61     ONStreamLogHandl
   d8170:	61007265 25007070 75303130 205d0020     er.app.%010u .] 
   d8180:	00202c00 203a2928 005b2000 65646f63     ., .(): . [.code
   d8190:	00203d20 64006925 69617465 3d20736c      = .%i.details =
   d81a0:	0a0d0020 006e6c00 63006e66 0065646f      ....ln.fn.code.
   d81b0:	61746564 6e006c69 00656e6f 63617274     detail.none.trac
   d81c0:	6e690065 77006f66 006e7261 6f727265     e.info.warn.erro
   d81d0:	61700072 0063696e 006c6c61              r.panic.all.

000d81dc <_ZTVN5spark16StreamLogHandlerE>:
	...
   d81e4:	000d5ee1 000d5ef9 000d66b5 000d40cb     .^...^...f...@..

000d81f4 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   d81fc:	000d5a8f 000d5ac5 000d65dd 000d5a75     .Z...Z...e..uZ..

000d820c <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   d8214:	000d5a8d 000d5ad3 000d5e25 000d5ae1     .Z...Z..%^...Z..

000d8224 <_ZTVN5spark9MeshClassE>:
	...
   d822c:	000d6a3f 000d6a35 000d6a2b 000d6a21     ?j..5j..+j..!j..
   d823c:	000d6a15 000d6a09 000d69fd 000d69f5     .j...j...i...i..
   d824c:	000d69eb 000d69e1 000d6bc5              .i...i...k..

000d8258 <_ZTVN5spark12NetworkClassE>:
	...
   d8260:	000d6b5d 000d6b67 000d6b71 000d6b7b     ]k..gk..qk..{k..
   d8270:	000d6b85 000d6b91 000d6b9d 000d6ba9     .k...k...k...k..
   d8280:	000d6bb1 000d6bbb 000d6bc5 2b25005a     .k...k...k..Z.%+
   d8290:	3a643330 75323025 2d592500 252d6d25     03d:%02u.%Y-%m-%
   d82a0:	48255464 3a4d253a 7a255325 63736100     dT%H:%M:%S%z.asc
   d82b0:	656d6974 00000000                       time....

000d82b8 <_ZTV11USARTSerial>:
	...
   d82c0:	000d7055 000d70a5 000d70b3 000d6ca5     Up...p...p...l..
   d82d0:	000d7069 000d708b 000d7077 000d709f     ip...p..wp...p..
   d82e0:	000d7057 000d705b                       Wp..[p..

000d82e8 <_ZTV9USBSerial>:
	...
   d82f0:	000d71a5 000d71f5 000d7203 000d6ca5     .q...q...r...l..
   d8300:	000d71e1 000d71a7 000d71bd 000d71ef     .q...q...q...q..
   d8310:	000d71d3 000d71a1                       .q...q..

000d8318 <_ZSt7nothrow>:
	...

000d8319 <_ctype_>:
   d8319:	20202000 20202020 28282020 20282828     .         ((((( 
   d8329:	20202020 20202020 20202020 20202020                     
   d8339:	10108820 10101010 10101010 10101010      ...............
   d8349:	04040410 04040404 10040404 10101010     ................
   d8359:	41411010 41414141 01010101 01010101     ..AAAAAA........
   d8369:	01010101 01010101 01010101 10101010     ................
   d8379:	42421010 42424242 02020202 02020202     ..BBBBBB........
   d8389:	02020202 02020202 02020202 10101010     ................
   d8399:	00000020 00000000 00000000 00000000      ...............
	...

000d841c <__sf_fake_stdin>:
	...

000d843c <__sf_fake_stdout>:
	...

000d845c <__sf_fake_stderr>:
	...
   d847c:	00000043                                         C.

000d847e <link_const_variable_data_end>:
	...

000d8480 <link_constructors_location>:
   d8480:	000d4855 	.word	0x000d4855
   d8484:	000d4f1d 	.word	0x000d4f1d
   d8488:	000d5565 	.word	0x000d5565
   d848c:	000d66a5 	.word	0x000d66a5
   d8490:	000d6b0d 	.word	0x000d6b0d
   d8494:	000d6c91 	.word	0x000d6c91
   d8498:	000d6dd1 	.word	0x000d6dd1
   d849c:	000d700d 	.word	0x000d700d
   d84a0:	000d7041 	.word	0x000d7041
   d84a4:	000d756d 	.word	0x000d756d
   d84a8:	000d7631 	.word	0x000d7631
   d84ac:	000d76b5 	.word	0x000d76b5
   d84b0:	000d7739 	.word	0x000d7739

000d84b4 <link_constructors_end>:
	...
