
/Users/philipchatterton/IoCP/Particle/Flood_Dog/Flood_Dog_v05/target/3.0.0/boron/Flood_Dog_v05.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00005310  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  000d9330  000d9330  00009330  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000d9338  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000007c  2003e4a8  000d933c  0001e4a8  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000002d0  2003e528  2003e528  0002e528  2**3
                  ALLOC
  7 .module_info_suffix 00000028  000d93b8  000d93b8  000293b8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000d93e0  000d93e0  000293e0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   001c0335  00000000  00000000  000293e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0001a5cb  00000000  00000000  001e9719  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0003e0f8  00000000  00000000  00203ce4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00003168  00000000  00000000  00241ddc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 0000a6e8  00000000  00000000  00244f44  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0003b274  00000000  00000000  0024f62c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   000465ca  00000000  00000000  0028a8a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0012dcc2  00000000  00000000  002d0e6a  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  00008e4c  00000000  00000000  003feb2c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f004 fd77 	bl	d8b24 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f004 fd7f 	bl	d8b40 <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e4a8 	.word	0x2003e4a8
   d404c:	000d933c 	.word	0x000d933c
   d4050:	2003e524 	.word	0x2003e524
   d4054:	2003e528 	.word	0x2003e528
   d4058:	2003e7f8 	.word	0x2003e7f8

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405e:	4e07      	ldr	r6, [pc, #28]	; (d407c <module_user_init+0x20>)
   d4060:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
    module_user_init_hook();
   d4062:	f003 fd45 	bl	d7af0 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	1ba4      	subs	r4, r4, r6
   d4068:	08a4      	lsrs	r4, r4, #2
   d406a:	2500      	movs	r5, #0
   d406c:	42a5      	cmp	r5, r4
   d406e:	d100      	bne.n	d4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d4072:	f856 3b04 	ldr.w	r3, [r6], #4
   d4076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f7      	b.n	d406c <module_user_init+0x10>
   d407c:	000d9300 	.word	0x000d9300
   d4080:	000d9328 	.word	0x000d9328

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b9be 	b.w	d4404 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 fa0b 	bl	d44a4 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d4092:	f003 bcef 	b.w	d7a74 <_post_loop>

000d4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4096:	f001 bf85 	b.w	d5fa4 <malloc>

000d409a <_Znaj>:
   d409a:	f001 bf83 	b.w	d5fa4 <malloc>

000d409e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409e:	f001 bf89 	b.w	d5fb4 <free>

000d40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a2:	7800      	ldrb	r0, [r0, #0]
   d40a4:	fab0 f080 	clz	r0, r0
   d40a8:	0940      	lsrs	r0, r0, #5
   d40aa:	4770      	bx	lr

000d40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40ac:	2301      	movs	r3, #1
   d40ae:	7003      	strb	r3, [r0, #0]
   d40b0:	4770      	bx	lr
	...

000d40b4 <_ZN8MB85RC64D1Ev>:
	size_t memorySize;
	int addr; // This is just 0-7, the (0b1010000 of the 7-bit address is ORed in later)

};

class MB85RC64 : public MB85RC {
   d40b4:	b510      	push	{r4, lr}
   d40b6:	4b03      	ldr	r3, [pc, #12]	; (d40c4 <_ZN8MB85RC64D1Ev+0x10>)
   d40b8:	6003      	str	r3, [r0, #0]
   d40ba:	4604      	mov	r4, r0
   d40bc:	f001 f80e 	bl	d50dc <_ZN6MB85RCD1Ev>
   d40c0:	4620      	mov	r0, r4
   d40c2:	bd10      	pop	{r4, pc}
   d40c4:	000d8f08 	.word	0x000d8f08

000d40c8 <_ZN8MB85RC64D0Ev>:
   d40c8:	b510      	push	{r4, lr}
   d40ca:	4604      	mov	r4, r0
   d40cc:	f7ff fff2 	bl	d40b4 <_ZN8MB85RC64D1Ev>
   d40d0:	4620      	mov	r0, r4
   d40d2:	2110      	movs	r1, #16
   d40d4:	f003 fe43 	bl	d7d5e <_ZdlPvj>
   d40d8:	4620      	mov	r0, r4
   d40da:	bd10      	pop	{r4, pc}

000d40dc <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode>:
            config_.flags |= f.value();
        }
        return *this;
    }

    SystemSleepConfiguration& gpio(pin_t pin, InterruptMode mode) {
   d40dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (valid_) {
   d40de:	7d03      	ldrb	r3, [r0, #20]
    SystemSleepConfiguration& gpio(pin_t pin, InterruptMode mode) {
   d40e0:	4605      	mov	r5, r0
   d40e2:	460f      	mov	r7, r1
   d40e4:	4616      	mov	r6, r2
        if (valid_) {
   d40e6:	b18b      	cbz	r3, d410c <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x30>
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   d40e8:	6803      	ldr	r3, [r0, #0]
   d40ea:	68db      	ldr	r3, [r3, #12]
        if (!start) {
   d40ec:	b183      	cbz	r3, d4110 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x34>
            if (start->type == type) {
   d40ee:	889a      	ldrh	r2, [r3, #4]
   d40f0:	2a01      	cmp	r2, #1
   d40f2:	d006      	beq.n	d4102 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x26>
            start = start->next;
   d40f4:	689b      	ldr	r3, [r3, #8]
        while (start) {
   d40f6:	e7f9      	b.n	d40ec <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x10>
                auto gpioWakeup = reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeup);
                if (gpioWakeup->pin == pin) {
                    gpioWakeup->mode = mode;
                    return *this;
                }
                wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_GPIO, wakeup->next);
   d40f8:	689b      	ldr	r3, [r3, #8]
        if (!start) {
   d40fa:	b14b      	cbz	r3, d4110 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x34>
            if (start->type == type) {
   d40fc:	889a      	ldrh	r2, [r3, #4]
   d40fe:	2a01      	cmp	r2, #1
   d4100:	d1fa      	bne.n	d40f8 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x1c>
            while (wakeup) {
   d4102:	b12b      	cbz	r3, d4110 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x34>
                if (gpioWakeup->pin == pin) {
   d4104:	899a      	ldrh	r2, [r3, #12]
   d4106:	42ba      	cmp	r2, r7
   d4108:	d1f6      	bne.n	d40f8 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x1c>
                    gpioWakeup->mode = mode;
   d410a:	739e      	strb	r6, [r3, #14]
            wakeupSource->pin = pin;
            wakeupSource->mode = mode;
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
        }
        return *this;
    }
   d410c:	4628      	mov	r0, r5
   d410e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_gpio_t();
   d4110:	490a      	ldr	r1, [pc, #40]	; (d413c <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x60>)
   d4112:	2010      	movs	r0, #16
   d4114:	f003 fe25 	bl	d7d62 <_ZnwjRKSt9nothrow_t>
   d4118:	4604      	mov	r4, r0
   d411a:	b168      	cbz	r0, d4138 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x5c>
   d411c:	2210      	movs	r2, #16
   d411e:	2100      	movs	r1, #0
   d4120:	f004 fd0e 	bl	d8b40 <memset>
            wakeupSource->base.size = sizeof(hal_wakeup_source_gpio_t);
   d4124:	4b06      	ldr	r3, [pc, #24]	; (d4140 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x64>)
   d4126:	6023      	str	r3, [r4, #0]
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_GPIO;
   d4128:	2301      	movs	r3, #1
   d412a:	80a3      	strh	r3, [r4, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   d412c:	692b      	ldr	r3, [r5, #16]
   d412e:	60a3      	str	r3, [r4, #8]
            wakeupSource->pin = pin;
   d4130:	81a7      	strh	r7, [r4, #12]
            wakeupSource->mode = mode;
   d4132:	73a6      	strb	r6, [r4, #14]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   d4134:	612c      	str	r4, [r5, #16]
   d4136:	e7e9      	b.n	d410c <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x30>
                valid_ = false;
   d4138:	7528      	strb	r0, [r5, #20]
                return *this;
   d413a:	e7e7      	b.n	d410c <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x30>
   d413c:	000d92a4 	.word	0x000d92a4
   d4140:	00030010 	.word	0x00030010

000d4144 <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   d4144:	b40e      	push	{r1, r2, r3}
   d4146:	b510      	push	{r4, lr}
   d4148:	b08d      	sub	sp, #52	; 0x34
   d414a:	aa0f      	add	r2, sp, #60	; 0x3c
    va_list args;
    va_start(args, fmt);
    log(LOG_LEVEL_INFO, fmt, args);
   d414c:	6801      	ldr	r1, [r0, #0]
inline void spark::Logger::info(const char *fmt, ...) const {
   d414e:	f852 4b04 	ldr.w	r4, [r2], #4
    va_start(args, fmt);
   d4152:	9203      	str	r2, [sp, #12]
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   d4154:	2300      	movs	r3, #0
   d4156:	2020      	movs	r0, #32
   d4158:	e9cd 0304 	strd	r0, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d415c:	e9cd 4200 	strd	r4, r2, [sp]
   d4160:	201e      	movs	r0, #30
   d4162:	aa04      	add	r2, sp, #16
   d4164:	f001 fe0c 	bl	d5d80 <log_message_v>
}
   d4168:	b00d      	add	sp, #52	; 0x34
   d416a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d416e:	b003      	add	sp, #12
   d4170:	4770      	bx	lr
	...

000d4174 <_Z9setupPMICv>:

FuelGauge fuel;
String VCellString;
String SoCString;

void setupPMIC(){
   d4174:	b508      	push	{r3, lr}
	pmic.begin();
   d4176:	480a      	ldr	r0, [pc, #40]	; (d41a0 <_Z9setupPMICv+0x2c>)
   d4178:	f002 fdeb 	bl	d6d52 <_ZN4PMIC5beginEv>
    SystemPowerConfiguration(SystemPowerConfiguration&&) = default;
    SystemPowerConfiguration(const hal_power_config& conf) : conf_(conf) {}
    SystemPowerConfiguration& operator=(SystemPowerConfiguration&&) = default;

    SystemPowerConfiguration& powerSourceMinVoltage(uint16_t voltage) {
        conf_.vin_min_voltage = voltage;
   d417c:	4809      	ldr	r0, [pc, #36]	; (d41a4 <_Z9setupPMICv+0x30>)
   d417e:	f241 03cc 	movw	r3, #4300	; 0x10cc
   d4182:	80c3      	strh	r3, [r0, #6]
    uint16_t powerSourceMinVoltage() const {
        return conf_.vin_min_voltage;
    }

    SystemPowerConfiguration& powerSourceMaxCurrent(uint16_t current) {
        conf_.vin_max_current = current;
   d4184:	4b08      	ldr	r3, [pc, #32]	; (d41a8 <_Z9setupPMICv+0x34>)
   d4186:	6083      	str	r3, [r0, #8]
        return (hal_timer_millis(nullptr) / 1000);
    }

#if HAL_PLATFORM_POWER_MANAGEMENT
    int setPowerConfiguration(const particle::SystemPowerConfiguration& conf) {
        return system_power_management_set_config(conf.config(), nullptr);
   d4188:	2100      	movs	r1, #0
    uint16_t powerSourceMaxCurrent() const {
        return conf_.vin_max_current;
    }

    SystemPowerConfiguration& batteryChargeVoltage(uint16_t voltage) {
        conf_.termination_voltage = voltage;
   d418a:	f241 0372 	movw	r3, #4210	; 0x1072
   d418e:	8183      	strh	r3, [r0, #12]
   d4190:	f001 fe5c 	bl	d5e4c <system_power_management_set_config>
        .powerSourceMinVoltage(4300) 
        .batteryChargeCurrent(850) 
        .batteryChargeVoltage(4210);

    int res = System.setPowerConfiguration(conf);
    Log.info("setPowerConfiguration=%d", res);
   d4194:	4905      	ldr	r1, [pc, #20]	; (d41ac <_Z9setupPMICv+0x38>)
   d4196:	4602      	mov	r2, r0
   d4198:	4805      	ldr	r0, [pc, #20]	; (d41b0 <_Z9setupPMICv+0x3c>)
   d419a:	f7ff ffd3 	bl	d4144 <_ZNK5spark6Logger4infoEPKcz>
    // returns SYSTEM_ERROR_NONE (0) in case of success
}
   d419e:	bd08      	pop	{r3, pc}
   d41a0:	2003e641 	.word	0x2003e641
   d41a4:	2003e57c 	.word	0x2003e57c
   d41a8:	03520226 	.word	0x03520226
   d41ac:	000d8c40 	.word	0x000d8c40
   d41b0:	2003e704 	.word	0x2003e704
   d41b4:	00000000 	.word	0x00000000

000d41b8 <_Z14getTemperaturev>:

	digitalWrite(donePin, HIGH);                           // Pet the watchdog
	digitalWrite(donePin, LOW);
}

bool getTemperature() {
   d41b8:	b510      	push	{r4, lr}
	int reading = analogRead(tmp36Pin);   //getting the voltage reading from the temperature sensor
   d41ba:	200f      	movs	r0, #15
bool getTemperature() {
   d41bc:	ed2d 8b02 	vpush	{d8}
	int reading = analogRead(tmp36Pin);   //getting the voltage reading from the temperature sensor
   d41c0:	f003 fd30 	bl	d7c24 <analogRead>
	delay(1000);
   d41c4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d41c8:	f001 ff60 	bl	d608c <delay>
	reading = analogRead(tmp36Pin);   //getting the voltage reading from the temperature sensor
   d41cc:	200f      	movs	r0, #15
   d41ce:	f003 fd29 	bl	d7c24 <analogRead>
   d41d2:	4604      	mov	r4, r0
	delay(1000);
   d41d4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d41d8:	f001 ff58 	bl	d608c <delay>
	float voltage = reading * 3.3;        // converting that reading to voltage, for 3.3v arduino use 3.3
   d41dc:	4620      	mov	r0, r4
   d41de:	f003 ff19 	bl	d8014 <__aeabi_i2d>
   d41e2:	a32b      	add	r3, pc, #172	; (adr r3, d4290 <_Z14getTemperaturev+0xd8>)
   d41e4:	e9d3 2300 	ldrd	r2, r3, [r3]
   d41e8:	f003 ff7e 	bl	d80e8 <__aeabi_dmul>
   d41ec:	f004 fa36 	bl	d865c <__aeabi_d2f>
	voltage /= 4096.0;                    // Electron is different than the Arduino where there are only 1024 steps
	temperatureC = (voltage - 0.5) * 100.0;  //converting from 10 mv per degree with 500 mV offset to degrees ((voltage - 500mV) times 100) - 5 degree calibration
   d41f0:	eddf 7a1f 	vldr	s15, [pc, #124]	; d4270 <_Z14getTemperaturev+0xb8>
   d41f4:	ee07 0a10 	vmov	s14, r0
   d41f8:	ee67 7a27 	vmul.f32	s15, s14, s15
   d41fc:	ee17 0a90 	vmov	r0, s15
   d4200:	f003 ff1a 	bl	d8038 <__aeabi_f2d>
   d4204:	4b1b      	ldr	r3, [pc, #108]	; (d4274 <_Z14getTemperaturev+0xbc>)
   d4206:	2200      	movs	r2, #0
   d4208:	f003 fdb6 	bl	d7d78 <__aeabi_dsub>
   d420c:	2200      	movs	r2, #0
   d420e:	4b1a      	ldr	r3, [pc, #104]	; (d4278 <_Z14getTemperaturev+0xc0>)
   d4210:	f003 ff6a 	bl	d80e8 <__aeabi_dmul>
   d4214:	f004 fa22 	bl	d865c <__aeabi_d2f>
   d4218:	4b18      	ldr	r3, [pc, #96]	; (d427c <_Z14getTemperaturev+0xc4>)
   d421a:	6018      	str	r0, [r3, #0]
   d421c:	ee08 0a10 	vmov	s16, r0
	temperatureF = (temperatureC * 9.0 / 5.0) + 32.0;  // now convert to Fahrenheit
   d4220:	f003 ff0a 	bl	d8038 <__aeabi_f2d>
   d4224:	4b16      	ldr	r3, [pc, #88]	; (d4280 <_Z14getTemperaturev+0xc8>)
   d4226:	2200      	movs	r2, #0
   d4228:	f003 ff5e 	bl	d80e8 <__aeabi_dmul>
   d422c:	4b15      	ldr	r3, [pc, #84]	; (d4284 <_Z14getTemperaturev+0xcc>)
   d422e:	2200      	movs	r2, #0
   d4230:	f004 f884 	bl	d833c <__aeabi_ddiv>
   d4234:	4b14      	ldr	r3, [pc, #80]	; (d4288 <_Z14getTemperaturev+0xd0>)
   d4236:	2200      	movs	r2, #0
   d4238:	f003 fda0 	bl	d7d7c <__adddf3>
   d423c:	f004 fa0e 	bl	d865c <__aeabi_d2f>
	
	if (temperatureC < -20.0 || temperatureC > 30.0) {             // Reasonable range for garage temperature
   d4240:	eefb 7a04 	vmov.f32	s15, #180	; 0xc1a00000 -20.0
	temperatureF = (temperatureC * 9.0 / 5.0) + 32.0;  // now convert to Fahrenheit
   d4244:	4b11      	ldr	r3, [pc, #68]	; (d428c <_Z14getTemperaturev+0xd4>)
	if (temperatureC < -20.0 || temperatureC > 30.0) {             // Reasonable range for garage temperature
   d4246:	eeb4 8ae7 	vcmpe.f32	s16, s15
   d424a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	temperatureF = (temperatureC * 9.0 / 5.0) + 32.0;  // now convert to Fahrenheit
   d424e:	6018      	str	r0, [r3, #0]
	if (temperatureC < -20.0 || temperatureC > 30.0) {             // Reasonable range for garage temperature
   d4250:	d40b      	bmi.n	d426a <_Z14getTemperaturev+0xb2>
   d4252:	eef3 7a0e 	vmov.f32	s15, #62	; 0x41f00000  30.0
   d4256:	eeb4 8ae7 	vcmpe.f32	s16, s15
   d425a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d425e:	bfd4      	ite	le
   d4260:	2001      	movle	r0, #1
   d4262:	2000      	movgt	r0, #0
	}
	else {
		// snprintf(resultStr, sizeof(resultStr),"Temperature is: %3.1f", temperatureF);
		return 1;
	}
}
   d4264:	ecbd 8b02 	vpop	{d8}
   d4268:	bd10      	pop	{r4, pc}
		return 0;
   d426a:	2000      	movs	r0, #0
   d426c:	e7fa      	b.n	d4264 <_Z14getTemperaturev+0xac>
   d426e:	bf00      	nop
   d4270:	39800000 	.word	0x39800000
   d4274:	3fe00000 	.word	0x3fe00000
   d4278:	40590000 	.word	0x40590000
   d427c:	2003e698 	.word	0x2003e698
   d4280:	40220000 	.word	0x40220000
   d4284:	40140000 	.word	0x40140000
   d4288:	40400000 	.word	0x40400000
   d428c:	2003e69c 	.word	0x2003e69c
   d4290:	66666666 	.word	0x66666666
   d4294:	400a6666 	.word	0x400a6666

000d4298 <_Z20meterParticlePublishv>:
		Particle.publish(tempEvent, tempData, 60, PRIVATE);
	}
	return true;
}

bool meterParticlePublish(void){                           // Enforces Particle's limit on 1 publish a second
   d4298:	b510      	push	{r4, lr}
  static unsigned long lastPublish = 0;                    // Initialize and store value here
  if(millis() - lastPublish >= 1000) {                     // Particle rate limits at 1 publish per second
   d429a:	4c07      	ldr	r4, [pc, #28]	; (d42b8 <_Z20meterParticlePublishv+0x20>)

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d429c:	f001 fc00 	bl	d5aa0 <HAL_Timer_Get_Milli_Seconds>
   d42a0:	6823      	ldr	r3, [r4, #0]
   d42a2:	1ac0      	subs	r0, r0, r3
   d42a4:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   d42a8:	d304      	bcc.n	d42b4 <_Z20meterParticlePublishv+0x1c>
   d42aa:	f001 fbf9 	bl	d5aa0 <HAL_Timer_Get_Milli_Seconds>
    lastPublish = millis();
   d42ae:	6020      	str	r0, [r4, #0]
   d42b0:	2001      	movs	r0, #1
    return 1;
  }
  else return 0;
}
   d42b2:	bd10      	pop	{r4, pc}
  else return 0;
   d42b4:	2000      	movs	r0, #0
   d42b6:	e7fc      	b.n	d42b2 <_Z20meterParticlePublishv+0x1a>
   d42b8:	2003e550 	.word	0x2003e550

000d42bc <_Z7logData6StringS_bb.part.0>:
bool logData(String tempEvent, String tempData, bool tempLogSerial, bool tempLogParticle){
   d42bc:	b530      	push	{r4, r5, lr}
   d42be:	4604      	mov	r4, r0
   d42c0:	b085      	sub	sp, #20
   d42c2:	460d      	mov	r5, r1
		waitUntil(meterParticlePublish);
   d42c4:	f7ff ffe8 	bl	d4298 <_Z20meterParticlePublishv>
        while (_while() && !_condition()) {
   d42c8:	b910      	cbnz	r0, d42d0 <_Z7logData6StringS_bb.part.0+0x14>
            spark_process();
   d42ca:	f001 fdd3 	bl	d5e74 <spark_process>
        while (_while() && !_condition()) {
   d42ce:	e7f9      	b.n	d42c4 <_Z7logData6StringS_bb.part.0+0x8>
   d42d0:	f7ff ffe2 	bl	d4298 <_Z20meterParticlePublishv>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   d42d4:	4b0e      	ldr	r3, [pc, #56]	; (d4310 <_Z7logData6StringS_bb.part.0+0x54>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d42d6:	682a      	ldr	r2, [r5, #0]
   d42d8:	781b      	ldrb	r3, [r3, #0]
   d42da:	f88d 3000 	strb.w	r3, [sp]
   d42de:	6821      	ldr	r1, [r4, #0]
   d42e0:	233c      	movs	r3, #60	; 0x3c
   d42e2:	a802      	add	r0, sp, #8
   d42e4:	f002 f8b6 	bl	d6454 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d42e8:	9c03      	ldr	r4, [sp, #12]
   d42ea:	b17c      	cbz	r4, d430c <_Z7logData6StringS_bb.part.0+0x50>
      if (--_M_use_count == 0)
   d42ec:	6863      	ldr	r3, [r4, #4]
   d42ee:	3b01      	subs	r3, #1
   d42f0:	6063      	str	r3, [r4, #4]
   d42f2:	b95b      	cbnz	r3, d430c <_Z7logData6StringS_bb.part.0+0x50>
          _M_dispose();
   d42f4:	6823      	ldr	r3, [r4, #0]
   d42f6:	4620      	mov	r0, r4
   d42f8:	689b      	ldr	r3, [r3, #8]
   d42fa:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d42fc:	68a3      	ldr	r3, [r4, #8]
   d42fe:	3b01      	subs	r3, #1
   d4300:	60a3      	str	r3, [r4, #8]
   d4302:	b91b      	cbnz	r3, d430c <_Z7logData6StringS_bb.part.0+0x50>
            _M_destroy();
   d4304:	6823      	ldr	r3, [r4, #0]
   d4306:	4620      	mov	r0, r4
   d4308:	68db      	ldr	r3, [r3, #12]
   d430a:	4798      	blx	r3
}
   d430c:	b005      	add	sp, #20
   d430e:	bd30      	pop	{r4, r5, pc}
   d4310:	2003e54c 	.word	0x2003e54c

000d4314 <_Z7logData6StringS_bb>:
bool logData(String tempEvent, String tempData, bool tempLogSerial, bool tempLogParticle){
   d4314:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d4316:	4604      	mov	r4, r0
   d4318:	460d      	mov	r5, r1
   d431a:	461e      	mov	r6, r3
	if (tempLogSerial){
   d431c:	b18a      	cbz	r2, d4342 <_Z7logData6StringS_bb+0x2e>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d431e:	4601      	mov	r1, r0
   d4320:	4668      	mov	r0, sp
   d4322:	f002 ff12 	bl	d714a <_ZN6StringC1ERKS_>
		Log.info(tempEvent + ": " + tempData);
   d4326:	490b      	ldr	r1, [pc, #44]	; (d4354 <_Z7logData6StringS_bb+0x40>)
   d4328:	4668      	mov	r0, sp
   d432a:	f002 ff70 	bl	d720e <_ZplRK15StringSumHelperPKc>
   d432e:	4629      	mov	r1, r5
   d4330:	f002 ff61 	bl	d71f6 <_ZplRK15StringSumHelperRK6String>
   d4334:	6801      	ldr	r1, [r0, #0]
   d4336:	4808      	ldr	r0, [pc, #32]	; (d4358 <_Z7logData6StringS_bb+0x44>)
   d4338:	f7ff ff04 	bl	d4144 <_ZNK5spark6Logger4infoEPKcz>
class StringSumHelper : public String
   d433c:	4668      	mov	r0, sp
   d433e:	f002 fe79 	bl	d7034 <_ZN6StringD1Ev>
	if (tempLogParticle){
   d4342:	b11e      	cbz	r6, d434c <_Z7logData6StringS_bb+0x38>
   d4344:	4629      	mov	r1, r5
   d4346:	4620      	mov	r0, r4
   d4348:	f7ff ffb8 	bl	d42bc <_Z7logData6StringS_bb.part.0>
}
   d434c:	2001      	movs	r0, #1
   d434e:	b004      	add	sp, #16
   d4350:	bd70      	pop	{r4, r5, r6, pc}
   d4352:	bf00      	nop
   d4354:	000d8c59 	.word	0x000d8c59
   d4358:	2003e704 	.word	0x2003e704

000d435c <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>:
inline AbstractTypeDiagnosticData<UnderlyingTypeT>::AbstractTypeDiagnosticData(DiagnosticDataId id, const char* name, diag_type type) :
        AbstractDiagnosticData(id, name, type) {
}

template<typename UnderlyingTypeT>
inline int AbstractTypeDiagnosticData<UnderlyingTypeT>::get(DiagnosticDataId id, UnderlyingTypeT& val) {
   d435c:	b530      	push	{r4, r5, lr}
   d435e:	b085      	sub	sp, #20
   d4360:	460d      	mov	r5, r1
    const diag_source* src = nullptr;
   d4362:	2200      	movs	r2, #0
    const int ret = diag_get_source(id, &src, nullptr);
   d4364:	4669      	mov	r1, sp
    const diag_source* src = nullptr;
   d4366:	9200      	str	r2, [sp, #0]
    const int ret = diag_get_source(id, &src, nullptr);
   d4368:	f001 fd12 	bl	d5d90 <diag_get_source>
    if (ret != SYSTEM_ERROR_NONE) {
   d436c:	b9b0      	cbnz	r0, d439c <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x40>
        return ret;
    }
    return get(src, val);
   d436e:	9c00      	ldr	r4, [sp, #0]
    SPARK_ASSERT(src && src->callback);
   d4370:	b10c      	cbz	r4, d4376 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x1a>
   d4372:	6923      	ldr	r3, [r4, #16]
   d4374:	b923      	cbnz	r3, d4380 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x24>
   d4376:	4a0a      	ldr	r2, [pc, #40]	; (d43a0 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x44>)
   d4378:	2100      	movs	r1, #0
   d437a:	200a      	movs	r0, #10
   d437c:	f001 fcf0 	bl	d5d60 <panic_>
    diag_source_get_cmd_data d = { sizeof(diag_source_get_cmd_data), 0 /* reserved */, data, size };
   d4380:	2300      	movs	r3, #0
   d4382:	f8ad 3006 	strh.w	r3, [sp, #6]
   d4386:	230c      	movs	r3, #12
   d4388:	f8ad 3004 	strh.w	r3, [sp, #4]
   d438c:	2304      	movs	r3, #4
   d438e:	9303      	str	r3, [sp, #12]
   d4390:	9502      	str	r5, [sp, #8]
    const int ret = src->callback(src, DIAG_SOURCE_CMD_GET, &d);
   d4392:	6923      	ldr	r3, [r4, #16]
   d4394:	aa01      	add	r2, sp, #4
   d4396:	2101      	movs	r1, #1
   d4398:	4620      	mov	r0, r4
   d439a:	4798      	blx	r3
}
   d439c:	b005      	add	sp, #20
   d439e:	bd30      	pop	{r4, r5, pc}
   d43a0:	000d5a91 	.word	0x000d5a91

000d43a4 <_ZN6MB85RC3putIhEERKT_jS3_>:
    template <typename T> const T &put(size_t framAddr, const T &t) {
   d43a4:	b538      	push	{r3, r4, r5, lr}
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
   d43a6:	6803      	ldr	r3, [r0, #0]
    template <typename T> const T &put(size_t framAddr, const T &t) {
   d43a8:	4614      	mov	r4, r2
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
   d43aa:	68dd      	ldr	r5, [r3, #12]
   d43ac:	2301      	movs	r3, #1
   d43ae:	47a8      	blx	r5
    }
   d43b0:	4620      	mov	r0, r4
   d43b2:	bd38      	pop	{r3, r4, r5, pc}

000d43b4 <_Z11watchdogISRv>:
void watchdogISR(){
   d43b4:	b570      	push	{r4, r5, r6, lr}
	fram.put(FRAM::pirAddr, pirState);
   d43b6:	4d0f      	ldr	r5, [pc, #60]	; (d43f4 <_Z11watchdogISRv+0x40>)
	pirState = 0;
   d43b8:	4a0f      	ldr	r2, [pc, #60]	; (d43f8 <_Z11watchdogISRv+0x44>)
   d43ba:	2400      	movs	r4, #0
	fram.put(FRAM::pirAddr, pirState);
   d43bc:	2111      	movs	r1, #17
   d43be:	4628      	mov	r0, r5
	pirState = 0;
   d43c0:	7014      	strb	r4, [r2, #0]
	fram.put(FRAM::pirAddr, pirState);
   d43c2:	f7ff ffef 	bl	d43a4 <_ZN6MB85RC3putIhEERKT_jS3_>
	rtcState = 0;
   d43c6:	4a0d      	ldr	r2, [pc, #52]	; (d43fc <_Z11watchdogISRv+0x48>)
	fram.put(FRAM::rtcAddr, rtcState);
   d43c8:	2109      	movs	r1, #9
   d43ca:	4628      	mov	r0, r5
	rtcState = 0;
   d43cc:	7014      	strb	r4, [r2, #0]
	fram.put(FRAM::rtcAddr, rtcState);
   d43ce:	f7ff ffe9 	bl	d43a4 <_ZN6MB85RC3putIhEERKT_jS3_>
	watchdogState = 1;
   d43d2:	4a0b      	ldr	r2, [pc, #44]	; (d4400 <_Z11watchdogISRv+0x4c>)
   d43d4:	2601      	movs	r6, #1
	fram.put(FRAM::watchdogAddr, watchdogState);
   d43d6:	2110      	movs	r1, #16
   d43d8:	4628      	mov	r0, r5
	watchdogState = 1;
   d43da:	7016      	strb	r6, [r2, #0]
	fram.put(FRAM::watchdogAddr, watchdogState);
   d43dc:	f7ff ffe2 	bl	d43a4 <_ZN6MB85RC3putIhEERKT_jS3_>
	digitalWrite(donePin, HIGH);                           // Pet the watchdog
   d43e0:	4631      	mov	r1, r6
   d43e2:	2005      	movs	r0, #5
   d43e4:	f003 fc05 	bl	d7bf2 <digitalWrite>
	digitalWrite(donePin, LOW);
   d43e8:	4621      	mov	r1, r4
   d43ea:	2005      	movs	r0, #5
}
   d43ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	digitalWrite(donePin, LOW);
   d43f0:	f003 bbff 	b.w	d7bf2 <digitalWrite>
   d43f4:	2003e5e4 	.word	0x2003e5e4
   d43f8:	2003e640 	.word	0x2003e640
   d43fc:	2003e684 	.word	0x2003e684
   d4400:	2003e6c0 	.word	0x2003e6c0

000d4404 <setup>:
void setup() {
   d4404:	b507      	push	{r0, r1, r2, lr}
	Serial.begin(115200);
   d4406:	f003 faad 	bl	d7964 <_Z16_fetch_usbserialv>
   d440a:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   d440e:	f003 fa9d 	bl	d794c <_ZN9USBSerial5beginEl>
	setupPMIC();
   d4412:	f7ff feaf 	bl	d4174 <_Z9setupPMICv>
	pinMode(userSwitch, INPUT);										// Button for user input
   d4416:	2100      	movs	r1, #0
   d4418:	2004      	movs	r0, #4
   d441a:	f003 fbd9 	bl	d7bd0 <pinMode>
	pinMode(wakeUpPin, INPUT);										// This pin is active HIGH
   d441e:	2100      	movs	r1, #0
   d4420:	2008      	movs	r0, #8
   d4422:	f003 fbd5 	bl	d7bd0 <pinMode>
	pinMode(BUILT_IN_LED, OUTPUT);										// declare the Blue LED Pin as an output
   d4426:	2101      	movs	r1, #1
   d4428:	2007      	movs	r0, #7
   d442a:	f003 fbd1 	bl	d7bd0 <pinMode>
	pinMode(donePin, OUTPUT);										// Allows us to pet the watchdog
   d442e:	2101      	movs	r1, #1
   d4430:	2005      	movs	r0, #5
   d4432:	f003 fbcd 	bl	d7bd0 <pinMode>
	digitalWrite(donePin, HIGH);
   d4436:	2101      	movs	r1, #1
   d4438:	2005      	movs	r0, #5
   d443a:	f003 fbda 	bl	d7bf2 <digitalWrite>
	digitalWrite(donePin, LOW);										// Pet the watchdog
   d443e:	2100      	movs	r1, #0
   d4440:	2005      	movs	r0, #5
   d4442:	f003 fbd6 	bl	d7bf2 <digitalWrite>
	pinMode(DeepSleepPin , OUTPUT);									// For a hard reset active HIGH
   d4446:	2101      	movs	r1, #1
   d4448:	2006      	movs	r0, #6
   d444a:	f003 fbc1 	bl	d7bd0 <pinMode>
	pinMode(PIRPin, INPUT);											// PIR Sensor Digital
   d444e:	2100      	movs	r1, #0
   d4450:	2013      	movs	r0, #19
   d4452:	f003 fbbd 	bl	d7bd0 <pinMode>
	digitalWrite(PIRPin, LOW);										// SET PIR Sensor Digital
   d4456:	2100      	movs	r1, #0
   d4458:	2013      	movs	r0, #19
   d445a:	f003 fbca 	bl	d7bf2 <digitalWrite>
	Time.zone(-5 + Time.getDSTOffset());
   d445e:	f003 f837 	bl	d74d0 <_ZN9TimeClass12getDSTOffsetEv>
   d4462:	eef1 7a04 	vmov.f32	s15, #20	; 0x40a00000  5.0
   d4466:	ee30 0a67 	vsub.f32	s0, s0, s15
   d446a:	f003 f80f 	bl	d748c <_ZN9TimeClass4zoneEf>
	rtc.setup();
   d446e:	480a      	ldr	r0, [pc, #40]	; (d4498 <setup+0x94>)
   d4470:	f001 f976 	bl	d5760 <_ZN8MCP794105setupEv>
	fram.begin();									  				// Initializes Wire but does not return a boolean on successful initialization
   d4474:	4809      	ldr	r0, [pc, #36]	; (d449c <setup+0x98>)
   d4476:	f000 fe47 	bl	d5108 <_ZN6MB85RC5beginEv>
	attachInterrupt(wakeUpPin, watchdogISR, RISING);  				// Need to pet the watchdog when needed
   d447a:	2300      	movs	r3, #0
   d447c:	9300      	str	r3, [sp, #0]
   d447e:	4908      	ldr	r1, [pc, #32]	; (d44a0 <setup+0x9c>)
   d4480:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d4484:	2201      	movs	r2, #1
   d4486:	2008      	movs	r0, #8
   d4488:	f002 faf6 	bl	d6a78 <_Z15attachInterrupttPFvvE13InterruptModeah>
}
   d448c:	b003      	add	sp, #12
   d448e:	f85d eb04 	ldr.w	lr, [sp], #4
	watchdogISR();
   d4492:	f7ff bf8f 	b.w	d43b4 <_Z11watchdogISRv>
   d4496:	bf00      	nop
   d4498:	2003e668 	.word	0x2003e668
   d449c:	2003e5e4 	.word	0x2003e5e4
   d44a0:	000d43b5 	.word	0x000d43b5

000d44a4 <loop>:
void loop() {
   d44a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	switch(state){
   d44a8:	4c99      	ldr	r4, [pc, #612]	; (d4710 <loop+0x26c>)
	rtc.loop();									  				// Need to run this in the main loop
   d44aa:	489a      	ldr	r0, [pc, #616]	; (d4714 <loop+0x270>)
void loop() {
   d44ac:	b094      	sub	sp, #80	; 0x50
	rtc.loop();									  				// Need to run this in the main loop
   d44ae:	f001 fa5d 	bl	d596c <_ZN8MCP794104loopEv>
	switch(state){
   d44b2:	7823      	ldrb	r3, [r4, #0]
   d44b4:	3b02      	subs	r3, #2
   d44b6:	2b06      	cmp	r3, #6
   d44b8:	f200 80aa 	bhi.w	d4610 <loop+0x16c>
   d44bc:	e8df f013 	tbh	[pc, r3, lsl #1]
   d44c0:	007e0007 	.word	0x007e0007
   d44c4:	00d900ab 	.word	0x00d900ab
   d44c8:	035e016a 	.word	0x035e016a
   d44cc:	0380      	.short	0x0380
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d44ce:	f001 fce1 	bl	d5e94 <spark_cloud_flag_connected>
   d44d2:	4e91      	ldr	r6, [pc, #580]	; (d4718 <loop+0x274>)
			if (Particle.connected()) {
   d44d4:	4605      	mov	r5, r0
   d44d6:	2800      	cmp	r0, #0
   d44d8:	d04e      	beq.n	d4578 <loop+0xd4>
				logData("PARTICLE", "PARTICLE CONNECTED", true, false);
   d44da:	4990      	ldr	r1, [pc, #576]	; (d471c <loop+0x278>)
   d44dc:	a80a      	add	r0, sp, #40	; 0x28
   d44de:	f002 fdf4 	bl	d70ca <_ZN6StringC1EPKc>
   d44e2:	498f      	ldr	r1, [pc, #572]	; (d4720 <loop+0x27c>)
   d44e4:	a80e      	add	r0, sp, #56	; 0x38
   d44e6:	f002 fdf0 	bl	d70ca <_ZN6StringC1EPKc>
   d44ea:	2300      	movs	r3, #0
   d44ec:	2201      	movs	r2, #1
   d44ee:	a90e      	add	r1, sp, #56	; 0x38
   d44f0:	a80a      	add	r0, sp, #40	; 0x28
   d44f2:	f7ff ff0f 	bl	d4314 <_Z7logData6StringS_bb>
   d44f6:	a80e      	add	r0, sp, #56	; 0x38
   d44f8:	f002 fd9c 	bl	d7034 <_ZN6StringD1Ev>
   d44fc:	a80a      	add	r0, sp, #40	; 0x28
   d44fe:	f002 fd99 	bl	d7034 <_ZN6StringD1Ev>
				if(watchdogState){
   d4502:	4b88      	ldr	r3, [pc, #544]	; (d4724 <loop+0x280>)
   d4504:	781b      	ldrb	r3, [r3, #0]
   d4506:	b1c3      	cbz	r3, d453a <loop+0x96>
					logData("SLEEP RESULT", "Woke By Watcdhdog", true, true);
   d4508:	4987      	ldr	r1, [pc, #540]	; (d4728 <loop+0x284>)
   d450a:	a80a      	add	r0, sp, #40	; 0x28
   d450c:	f002 fddd 	bl	d70ca <_ZN6StringC1EPKc>
   d4510:	4986      	ldr	r1, [pc, #536]	; (d472c <loop+0x288>)
						logData("SLEEP RESULT", "Woke By PIR", true, true);
   d4512:	a80e      	add	r0, sp, #56	; 0x38
   d4514:	f002 fdd9 	bl	d70ca <_ZN6StringC1EPKc>
   d4518:	2301      	movs	r3, #1
   d451a:	461a      	mov	r2, r3
   d451c:	a90e      	add	r1, sp, #56	; 0x38
   d451e:	a80a      	add	r0, sp, #40	; 0x28
   d4520:	f7ff fef8 	bl	d4314 <_Z7logData6StringS_bb>
   d4524:	a80e      	add	r0, sp, #56	; 0x38
   d4526:	f002 fd85 	bl	d7034 <_ZN6StringD1Ev>
   d452a:	a80a      	add	r0, sp, #40	; 0x28
   d452c:	f002 fd82 	bl	d7034 <_ZN6StringD1Ev>
   d4530:	f001 fab6 	bl	d5aa0 <HAL_Timer_Get_Milli_Seconds>
				stateTime = millis();
   d4534:	6030      	str	r0, [r6, #0]
					state = SAMPLING_WAIT_STATE;
   d4536:	2303      	movs	r3, #3
   d4538:	e069      	b.n	d460e <loop+0x16a>
        readData(framAddr, (uint8_t *)&t, sizeof(T));
   d453a:	4f7d      	ldr	r7, [pc, #500]	; (d4730 <loop+0x28c>)
   d453c:	4d7d      	ldr	r5, [pc, #500]	; (d4734 <loop+0x290>)
   d453e:	487e      	ldr	r0, [pc, #504]	; (d4738 <loop+0x294>)
   d4540:	2301      	movs	r3, #1
   d4542:	463a      	mov	r2, r7
   d4544:	2109      	movs	r1, #9
   d4546:	f000 fde9 	bl	d511c <_ZN6MB85RC8readDataEjPhj>
   d454a:	2301      	movs	r3, #1
   d454c:	487a      	ldr	r0, [pc, #488]	; (d4738 <loop+0x294>)
   d454e:	462a      	mov	r2, r5
   d4550:	2111      	movs	r1, #17
   d4552:	f000 fde3 	bl	d511c <_ZN6MB85RC8readDataEjPhj>
					if(rtcState){
   d4556:	783b      	ldrb	r3, [r7, #0]
   d4558:	b12b      	cbz	r3, d4566 <loop+0xc2>
						logData("SLEEP RESULT", "Woke By RTC", true, true);
   d455a:	4973      	ldr	r1, [pc, #460]	; (d4728 <loop+0x284>)
   d455c:	a80a      	add	r0, sp, #40	; 0x28
   d455e:	f002 fdb4 	bl	d70ca <_ZN6StringC1EPKc>
   d4562:	4976      	ldr	r1, [pc, #472]	; (d473c <loop+0x298>)
   d4564:	e7d5      	b.n	d4512 <loop+0x6e>
					} else if(pirState){
   d4566:	782b      	ldrb	r3, [r5, #0]
   d4568:	2b00      	cmp	r3, #0
   d456a:	d0e1      	beq.n	d4530 <loop+0x8c>
						logData("SLEEP RESULT", "Woke By PIR", true, true);
   d456c:	496e      	ldr	r1, [pc, #440]	; (d4728 <loop+0x284>)
   d456e:	a80a      	add	r0, sp, #40	; 0x28
   d4570:	f002 fdab 	bl	d70ca <_ZN6StringC1EPKc>
   d4574:	4972      	ldr	r1, [pc, #456]	; (d4740 <loop+0x29c>)
   d4576:	e7cc      	b.n	d4512 <loop+0x6e>
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
   d4578:	f001 fc84 	bl	d5e84 <spark_cloud_flag_connect>
   d457c:	f001 fa90 	bl	d5aa0 <HAL_Timer_Get_Milli_Seconds>
				if(millis() - stateTime > MAX_TIME_TO_WAIT_FOR_CONNECT_MS){
   d4580:	6833      	ldr	r3, [r6, #0]
   d4582:	1ac0      	subs	r0, r0, r3
   d4584:	4b6f      	ldr	r3, [pc, #444]	; (d4744 <loop+0x2a0>)
   d4586:	4298      	cmp	r0, r3
   d4588:	d942      	bls.n	d4610 <loop+0x16c>
					logData("PARTICLE", "PARTICLE FAILED TO CONNECT", true, false);
   d458a:	4964      	ldr	r1, [pc, #400]	; (d471c <loop+0x278>)
   d458c:	a80a      	add	r0, sp, #40	; 0x28
   d458e:	f002 fd9c 	bl	d70ca <_ZN6StringC1EPKc>
   d4592:	496d      	ldr	r1, [pc, #436]	; (d4748 <loop+0x2a4>)
   d4594:	a80e      	add	r0, sp, #56	; 0x38
   d4596:	f002 fd98 	bl	d70ca <_ZN6StringC1EPKc>
   d459a:	462b      	mov	r3, r5
   d459c:	2201      	movs	r2, #1
   d459e:	a90e      	add	r1, sp, #56	; 0x38
   d45a0:	a80a      	add	r0, sp, #40	; 0x28
   d45a2:	f7ff feb7 	bl	d4314 <_Z7logData6StringS_bb>
   d45a6:	a80e      	add	r0, sp, #56	; 0x38
   d45a8:	f002 fd44 	bl	d7034 <_ZN6StringD1Ev>
   d45ac:	a80a      	add	r0, sp, #40	; 0x28
   d45ae:	f002 fd41 	bl	d7034 <_ZN6StringD1Ev>
   d45b2:	f001 fa75 	bl	d5aa0 <HAL_Timer_Get_Milli_Seconds>
					stateTime = millis();
   d45b6:	6030      	str	r0, [r6, #0]
			state = SLEEP_WAIT_STATE;
   d45b8:	2307      	movs	r3, #7
   d45ba:	e028      	b.n	d460e <loop+0x16a>
			if(millis() - stateTime >= MAX_TIME_TO_SAMPLE_WAIT){
   d45bc:	4d56      	ldr	r5, [pc, #344]	; (d4718 <loop+0x274>)
   d45be:	f001 fa6f 	bl	d5aa0 <HAL_Timer_Get_Milli_Seconds>
   d45c2:	682b      	ldr	r3, [r5, #0]
   d45c4:	1ac0      	subs	r0, r0, r3
   d45c6:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   d45ca:	d321      	bcc.n	d4610 <loop+0x16c>
				logData("SAMPLING_WAIT_STATE", "START SAMPLING", true, false);
   d45cc:	495f      	ldr	r1, [pc, #380]	; (d474c <loop+0x2a8>)
   d45ce:	a80a      	add	r0, sp, #40	; 0x28
   d45d0:	f002 fd7b 	bl	d70ca <_ZN6StringC1EPKc>
   d45d4:	495e      	ldr	r1, [pc, #376]	; (d4750 <loop+0x2ac>)
   d45d6:	a80e      	add	r0, sp, #56	; 0x38
   d45d8:	f002 fd77 	bl	d70ca <_ZN6StringC1EPKc>
   d45dc:	2300      	movs	r3, #0
   d45de:	2201      	movs	r2, #1
   d45e0:	a90e      	add	r1, sp, #56	; 0x38
   d45e2:	a80a      	add	r0, sp, #40	; 0x28
   d45e4:	f7ff fe96 	bl	d4314 <_Z7logData6StringS_bb>
   d45e8:	a80e      	add	r0, sp, #56	; 0x38
   d45ea:	f002 fd23 	bl	d7034 <_ZN6StringD1Ev>
   d45ee:	a80a      	add	r0, sp, #40	; 0x28
   d45f0:	f002 fd20 	bl	d7034 <_ZN6StringD1Ev>
				sampleCounter = 1;
   d45f4:	4b57      	ldr	r3, [pc, #348]	; (d4754 <loop+0x2b0>)
   d45f6:	2201      	movs	r2, #1
   d45f8:	601a      	str	r2, [r3, #0]
				sampleSum = 0;
   d45fa:	4b57      	ldr	r3, [pc, #348]	; (d4758 <loop+0x2b4>)
   d45fc:	2200      	movs	r2, #0
   d45fe:	601a      	str	r2, [r3, #0]
				sampleAverage = 0;
   d4600:	4b56      	ldr	r3, [pc, #344]	; (d475c <loop+0x2b8>)
   d4602:	2200      	movs	r2, #0
   d4604:	601a      	str	r2, [r3, #0]
   d4606:	f001 fa4b 	bl	d5aa0 <HAL_Timer_Get_Milli_Seconds>
				state = SAMPLE_STATE;
   d460a:	2304      	movs	r3, #4
				stateTime = millis();
   d460c:	6028      	str	r0, [r5, #0]
					state = SAMPLING_WAIT_STATE;
   d460e:	7023      	strb	r3, [r4, #0]
}
   d4610:	b014      	add	sp, #80	; 0x50
   d4612:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			analogValue = analogRead(ANALOG_DETECTOR);
   d4616:	2010      	movs	r0, #16
   d4618:	f003 fb04 	bl	d7c24 <analogRead>
			sampleSum = sampleSum + analogValue;
   d461c:	4d4e      	ldr	r5, [pc, #312]	; (d4758 <loop+0x2b4>)
			analogValue = analogRead(ANALOG_DETECTOR);
   d461e:	4a50      	ldr	r2, [pc, #320]	; (d4760 <loop+0x2bc>)
			if(sampleCounter++ > sampleTotalCount){
   d4620:	4e50      	ldr	r6, [pc, #320]	; (d4764 <loop+0x2c0>)
			analogValue = analogRead(ANALOG_DETECTOR);
   d4622:	6010      	str	r0, [r2, #0]
			sampleSum = sampleSum + analogValue;
   d4624:	682a      	ldr	r2, [r5, #0]
			analogValue = analogRead(ANALOG_DETECTOR);
   d4626:	4603      	mov	r3, r0
			sampleSum = sampleSum + analogValue;
   d4628:	4413      	add	r3, r2
			if(sampleCounter++ > sampleTotalCount){
   d462a:	4a4a      	ldr	r2, [pc, #296]	; (d4754 <loop+0x2b0>)
			sampleSum = sampleSum + analogValue;
   d462c:	602b      	str	r3, [r5, #0]
			if(sampleCounter++ > sampleTotalCount){
   d462e:	6813      	ldr	r3, [r2, #0]
   d4630:	1c59      	adds	r1, r3, #1
   d4632:	6011      	str	r1, [r2, #0]
   d4634:	6832      	ldr	r2, [r6, #0]
   d4636:	4293      	cmp	r3, r2
   d4638:	dd1b      	ble.n	d4672 <loop+0x1ce>
				digitalValue = map(analogValue, minValue, maxValue, 0, 100);
   d463a:	2364      	movs	r3, #100	; 0x64
   d463c:	4a4a      	ldr	r2, [pc, #296]	; (d4768 <loop+0x2c4>)
   d463e:	494b      	ldr	r1, [pc, #300]	; (d476c <loop+0x2c8>)
   d4640:	9300      	str	r3, [sp, #0]
   d4642:	6812      	ldr	r2, [r2, #0]
   d4644:	6809      	ldr	r1, [r1, #0]
   d4646:	2300      	movs	r3, #0
   d4648:	f001 fd14 	bl	d6074 <_Z3mapiiiii>
   d464c:	4b48      	ldr	r3, [pc, #288]	; (d4770 <loop+0x2cc>)
				sampleAverage = sampleSum / sampleTotalCount;
   d464e:	6832      	ldr	r2, [r6, #0]
				digitalValue = map(analogValue, minValue, maxValue, 0, 100);
   d4650:	6018      	str	r0, [r3, #0]
				sampleAverage = sampleSum / sampleTotalCount;
   d4652:	682b      	ldr	r3, [r5, #0]
   d4654:	fb93 f3f2 	sdiv	r3, r3, r2
   d4658:	ee07 3a90 	vmov	s15, r3
   d465c:	4b3f      	ldr	r3, [pc, #252]	; (d475c <loop+0x2b8>)
   d465e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d4662:	edc3 7a00 	vstr	s15, [r3]
   d4666:	f001 fa1b 	bl	d5aa0 <HAL_Timer_Get_Milli_Seconds>
				stateTime = millis();
   d466a:	4b2b      	ldr	r3, [pc, #172]	; (d4718 <loop+0x274>)
   d466c:	6018      	str	r0, [r3, #0]
				state = PUBLISH_WAIT_STATE;
   d466e:	2305      	movs	r3, #5
   d4670:	7023      	strb	r3, [r4, #0]
			if(millis() - stateTime >= MAX_TIME_TO_WAIT_PUBLISH_MS){
   d4672:	4d29      	ldr	r5, [pc, #164]	; (d4718 <loop+0x274>)
   d4674:	f001 fa14 	bl	d5aa0 <HAL_Timer_Get_Milli_Seconds>
   d4678:	682a      	ldr	r2, [r5, #0]
   d467a:	1a80      	subs	r0, r0, r2
   d467c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   d4680:	d3c6      	bcc.n	d4610 <loop+0x16c>
				getTemperature() ? temperatureStringC = String(temperatureC, 2) : temperatureStringC = "0";
   d4682:	f7ff fd99 	bl	d41b8 <_Z14getTemperaturev>
   d4686:	4e3b      	ldr	r6, [pc, #236]	; (d4774 <loop+0x2d0>)
   d4688:	2800      	cmp	r0, #0
   d468a:	d03c      	beq.n	d4706 <loop+0x262>
   d468c:	ed96 0a00 	vldr	s0, [r6]
   d4690:	2102      	movs	r1, #2
   d4692:	a80e      	add	r0, sp, #56	; 0x38
   d4694:	f002 fd7e 	bl	d7194 <_ZN6StringC1Efi>
   d4698:	4837      	ldr	r0, [pc, #220]	; (d4778 <loop+0x2d4>)
   d469a:	a90e      	add	r1, sp, #56	; 0x38
   d469c:	f002 fd60 	bl	d7160 <_ZN6StringaSEOS_>
   d46a0:	a80e      	add	r0, sp, #56	; 0x38
   d46a2:	f002 fcc7 	bl	d7034 <_ZN6StringD1Ev>
					logData("POWER", "ENBABLE CHARGING", true, true);
   d46a6:	4935      	ldr	r1, [pc, #212]	; (d477c <loop+0x2d8>)
   d46a8:	a80a      	add	r0, sp, #40	; 0x28
					logData("POWER", "ENBABLE CHARGING", true, true);
   d46aa:	f002 fd0e 	bl	d70ca <_ZN6StringC1EPKc>
   d46ae:	4934      	ldr	r1, [pc, #208]	; (d4780 <loop+0x2dc>)
   d46b0:	a80e      	add	r0, sp, #56	; 0x38
   d46b2:	f002 fd0a 	bl	d70ca <_ZN6StringC1EPKc>
   d46b6:	2301      	movs	r3, #1
   d46b8:	461a      	mov	r2, r3
   d46ba:	a90e      	add	r1, sp, #56	; 0x38
   d46bc:	a80a      	add	r0, sp, #40	; 0x28
   d46be:	f7ff fe29 	bl	d4314 <_Z7logData6StringS_bb>
   d46c2:	a80e      	add	r0, sp, #56	; 0x38
   d46c4:	f002 fcb6 	bl	d7034 <_ZN6StringD1Ev>
   d46c8:	a80a      	add	r0, sp, #40	; 0x28
   d46ca:	f002 fcb3 	bl	d7034 <_ZN6StringD1Ev>
					pmic.enableCharging();
   d46ce:	482d      	ldr	r0, [pc, #180]	; (d4784 <loop+0x2e0>)
   d46d0:	f002 fbc3 	bl	d6e5a <_ZN4PMIC14enableChargingEv>
				logData("PUBLISHING", "START PUBLISH_STATE", true, false);
   d46d4:	492c      	ldr	r1, [pc, #176]	; (d4788 <loop+0x2e4>)
   d46d6:	a80a      	add	r0, sp, #40	; 0x28
   d46d8:	f002 fcf7 	bl	d70ca <_ZN6StringC1EPKc>
   d46dc:	492b      	ldr	r1, [pc, #172]	; (d478c <loop+0x2e8>)
   d46de:	a80e      	add	r0, sp, #56	; 0x38
   d46e0:	f002 fcf3 	bl	d70ca <_ZN6StringC1EPKc>
   d46e4:	2300      	movs	r3, #0
   d46e6:	2201      	movs	r2, #1
   d46e8:	a90e      	add	r1, sp, #56	; 0x38
   d46ea:	a80a      	add	r0, sp, #40	; 0x28
   d46ec:	f7ff fe12 	bl	d4314 <_Z7logData6StringS_bb>
   d46f0:	a80e      	add	r0, sp, #56	; 0x38
   d46f2:	f002 fc9f 	bl	d7034 <_ZN6StringD1Ev>
   d46f6:	a80a      	add	r0, sp, #40	; 0x28
   d46f8:	f002 fc9c 	bl	d7034 <_ZN6StringD1Ev>
   d46fc:	f001 f9d0 	bl	d5aa0 <HAL_Timer_Get_Milli_Seconds>
				state = PUBLISH_STATE;
   d4700:	2306      	movs	r3, #6
				stateTime = millis();
   d4702:	6028      	str	r0, [r5, #0]
				state = PUBLISH_STATE;
   d4704:	e783      	b.n	d460e <loop+0x16a>
				getTemperature() ? temperatureStringC = String(temperatureC, 2) : temperatureStringC = "0";
   d4706:	4922      	ldr	r1, [pc, #136]	; (d4790 <loop+0x2ec>)
   d4708:	481b      	ldr	r0, [pc, #108]	; (d4778 <loop+0x2d4>)
   d470a:	f002 fd31 	bl	d7170 <_ZN6StringaSEPKc>
   d470e:	e7ca      	b.n	d46a6 <loop+0x202>
   d4710:	2003e4b0 	.word	0x2003e4b0
   d4714:	2003e668 	.word	0x2003e668
   d4718:	2003e694 	.word	0x2003e694
   d471c:	000d8c5c 	.word	0x000d8c5c
   d4720:	000d8c65 	.word	0x000d8c65
   d4724:	2003e6c0 	.word	0x2003e6c0
   d4728:	000d8c78 	.word	0x000d8c78
   d472c:	000d8c85 	.word	0x000d8c85
   d4730:	2003e684 	.word	0x2003e684
   d4734:	2003e640 	.word	0x2003e640
   d4738:	2003e5e4 	.word	0x2003e5e4
   d473c:	000d8c97 	.word	0x000d8c97
   d4740:	000d8ca3 	.word	0x000d8ca3
   d4744:	000493e0 	.word	0x000493e0
   d4748:	000d8caf 	.word	0x000d8caf
   d474c:	000d8cca 	.word	0x000d8cca
   d4750:	000d8cde 	.word	0x000d8cde
   d4754:	2003e68c 	.word	0x2003e68c
   d4758:	2003e690 	.word	0x2003e690
   d475c:	2003e688 	.word	0x2003e688
   d4760:	2003e554 	.word	0x2003e554
   d4764:	2003e4ac 	.word	0x2003e4ac
   d4768:	2003e4a8 	.word	0x2003e4a8
   d476c:	2003e63c 	.word	0x2003e63c
   d4770:	2003e5a0 	.word	0x2003e5a0
   d4774:	2003e698 	.word	0x2003e698
   d4778:	2003e6a0 	.word	0x2003e6a0
   d477c:	000d8cef 	.word	0x000d8cef
   d4780:	000d8cf5 	.word	0x000d8cf5
   d4784:	2003e641 	.word	0x2003e641
   d4788:	000d8d06 	.word	0x000d8d06
   d478c:	000d8d11 	.word	0x000d8d11
   d4790:	000d8ced 	.word	0x000d8ced
			Serial.println(analogValue);
   d4794:	f003 f8e6 	bl	d7964 <_Z16_fetch_usbserialv>
   d4798:	4bb8      	ldr	r3, [pc, #736]	; (d4a7c <loop+0x5d8>)
   d479a:	681d      	ldr	r5, [r3, #0]
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
   d479c:	2d00      	cmp	r5, #0
   d479e:	4606      	mov	r6, r0
   d47a0:	f280 81e5 	bge.w	d4b6e <loop+0x6ca>
            t = print('-');
   d47a4:	212d      	movs	r1, #45	; 0x2d
   d47a6:	f002 fb9b 	bl	d6ee0 <_ZN5Print5printEc>
            val = -n;
   d47aa:	4269      	negs	r1, r5
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d47ac:	220a      	movs	r2, #10
   d47ae:	4630      	mov	r0, r6
			Serial.println(digitalValue);
   d47b0:	4fb3      	ldr	r7, [pc, #716]	; (d4a80 <loop+0x5dc>)
   d47b2:	f002 fba4 	bl	d6efe <_ZN5Print11printNumberEmh>
        n += println();
   d47b6:	4630      	mov	r0, r6
   d47b8:	f002 fb95 	bl	d6ee6 <_ZN5Print7printlnEv>
   d47bc:	f003 f8d2 	bl	d7964 <_Z16_fetch_usbserialv>
   d47c0:	683d      	ldr	r5, [r7, #0]
        if (n < 0 && base == 10) {
   d47c2:	2d00      	cmp	r5, #0
   d47c4:	4606      	mov	r6, r0
   d47c6:	f280 81d4 	bge.w	d4b72 <loop+0x6ce>
            t = print('-');
   d47ca:	212d      	movs	r1, #45	; 0x2d
   d47cc:	f002 fb88 	bl	d6ee0 <_ZN5Print5printEc>
            val = -n;
   d47d0:	4269      	negs	r1, r5
        return printNumber(val, base) + t;
   d47d2:	220a      	movs	r2, #10
   d47d4:	4630      	mov	r0, r6
   d47d6:	f002 fb92 	bl	d6efe <_ZN5Print11printNumberEmh>
        n += println();
   d47da:	4630      	mov	r0, r6
   d47dc:	f002 fb83 	bl	d6ee6 <_ZN5Print7printlnEv>
				feedName = "Garden-Lady-Bug-04-Cap";
   d47e0:	49a8      	ldr	r1, [pc, #672]	; (d4a84 <loop+0x5e0>)
   d47e2:	48a9      	ldr	r0, [pc, #676]	; (d4a88 <loop+0x5e4>)
				powerSource = System.powerSource();
   d47e4:	4da9      	ldr	r5, [pc, #676]	; (d4a8c <loop+0x5e8>)
				batteryState = System.batteryState();
   d47e6:	4eaa      	ldr	r6, [pc, #680]	; (d4a90 <loop+0x5ec>)
				feedName = "Garden-Lady-Bug-04-Cap";
   d47e8:	f002 fcc2 	bl	d7170 <_ZN6StringaSEPKc>
				feedID = "6cUonqXsLchfn8t5F6UsUrxF58qE";
   d47ec:	49a9      	ldr	r1, [pc, #676]	; (d4a94 <loop+0x5f0>)
   d47ee:	48aa      	ldr	r0, [pc, #680]	; (d4a98 <loop+0x5f4>)
   d47f0:	f002 fcbe 	bl	d7170 <_ZN6StringaSEPKc>
	StringSumHelper(const char *p) : String(p) {}
   d47f4:	49a9      	ldr	r1, [pc, #676]	; (d4a9c <loop+0x5f8>)
   d47f6:	a80e      	add	r0, sp, #56	; 0x38
   d47f8:	f002 fc67 	bl	d70ca <_ZN6StringC1EPKc>
				feedData = "{ \"value\": \"" + String::format("%.2f", sampleAverage) + "\", \"feedID\": \"" + feedID + "\"}";
   d47fc:	4ba8      	ldr	r3, [pc, #672]	; (d4aa0 <loop+0x5fc>)
   d47fe:	6818      	ldr	r0, [r3, #0]
   d4800:	f003 fc1a 	bl	d8038 <__aeabi_f2d>
   d4804:	4602      	mov	r2, r0
   d4806:	460b      	mov	r3, r1
   d4808:	a80a      	add	r0, sp, #40	; 0x28
   d480a:	49a6      	ldr	r1, [pc, #664]	; (d4aa4 <loop+0x600>)
   d480c:	f002 fd14 	bl	d7238 <_ZN6String6formatEPKcz>
   d4810:	a90a      	add	r1, sp, #40	; 0x28
   d4812:	a80e      	add	r0, sp, #56	; 0x38
   d4814:	f002 fcef 	bl	d71f6 <_ZplRK15StringSumHelperRK6String>
   d4818:	49a3      	ldr	r1, [pc, #652]	; (d4aa8 <loop+0x604>)
   d481a:	f002 fcf8 	bl	d720e <_ZplRK15StringSumHelperPKc>
   d481e:	499e      	ldr	r1, [pc, #632]	; (d4a98 <loop+0x5f4>)
   d4820:	f002 fce9 	bl	d71f6 <_ZplRK15StringSumHelperRK6String>
   d4824:	49a1      	ldr	r1, [pc, #644]	; (d4aac <loop+0x608>)
   d4826:	f002 fcf2 	bl	d720e <_ZplRK15StringSumHelperPKc>
   d482a:	4601      	mov	r1, r0
   d482c:	48a0      	ldr	r0, [pc, #640]	; (d4ab0 <loop+0x60c>)
   d482e:	f002 fc7d 	bl	d712c <_ZN6StringaSERKS_>
   d4832:	a80a      	add	r0, sp, #40	; 0x28
   d4834:	f002 fbfe 	bl	d7034 <_ZN6StringD1Ev>
class StringSumHelper : public String
   d4838:	a80e      	add	r0, sp, #56	; 0x38
   d483a:	f002 fbfb 	bl	d7034 <_ZN6StringD1Ev>
				logData(feedName, feedData, true, true);
   d483e:	4992      	ldr	r1, [pc, #584]	; (d4a88 <loop+0x5e4>)
   d4840:	a80a      	add	r0, sp, #40	; 0x28
   d4842:	f002 fc82 	bl	d714a <_ZN6StringC1ERKS_>
   d4846:	499a      	ldr	r1, [pc, #616]	; (d4ab0 <loop+0x60c>)
   d4848:	a80e      	add	r0, sp, #56	; 0x38
   d484a:	f002 fc7e 	bl	d714a <_ZN6StringC1ERKS_>
   d484e:	2301      	movs	r3, #1
   d4850:	461a      	mov	r2, r3
   d4852:	a90e      	add	r1, sp, #56	; 0x38
   d4854:	a80a      	add	r0, sp, #40	; 0x28
   d4856:	f7ff fd5d 	bl	d4314 <_Z7logData6StringS_bb>
   d485a:	a80e      	add	r0, sp, #56	; 0x38
   d485c:	f002 fbea 	bl	d7034 <_ZN6StringD1Ev>
   d4860:	a80a      	add	r0, sp, #40	; 0x28
   d4862:	f002 fbe7 	bl	d7034 <_ZN6StringD1Ev>
				feedName = "Garden-Lady-Bug-04-Cap-Percentage";
   d4866:	4993      	ldr	r1, [pc, #588]	; (d4ab4 <loop+0x610>)
   d4868:	4887      	ldr	r0, [pc, #540]	; (d4a88 <loop+0x5e4>)
   d486a:	f002 fc81 	bl	d7170 <_ZN6StringaSEPKc>
				feedID = "n8epcPsCFksb9UWYtgXtoe4Kjhkv";
   d486e:	4992      	ldr	r1, [pc, #584]	; (d4ab8 <loop+0x614>)
   d4870:	4889      	ldr	r0, [pc, #548]	; (d4a98 <loop+0x5f4>)
   d4872:	f002 fc7d 	bl	d7170 <_ZN6StringaSEPKc>
	StringSumHelper(const char *p) : String(p) {}
   d4876:	4989      	ldr	r1, [pc, #548]	; (d4a9c <loop+0x5f8>)
   d4878:	a80e      	add	r0, sp, #56	; 0x38
   d487a:	f002 fc26 	bl	d70ca <_ZN6StringC1EPKc>
				feedData = "{ \"value\": \"" + String::format("%d", digitalValue) + "\", \"feedID\": \"" + feedID + "\"}";
   d487e:	683a      	ldr	r2, [r7, #0]
   d4880:	498e      	ldr	r1, [pc, #568]	; (d4abc <loop+0x618>)
   d4882:	a80a      	add	r0, sp, #40	; 0x28
   d4884:	f002 fcd8 	bl	d7238 <_ZN6String6formatEPKcz>
   d4888:	a90a      	add	r1, sp, #40	; 0x28
   d488a:	a80e      	add	r0, sp, #56	; 0x38
   d488c:	f002 fcb3 	bl	d71f6 <_ZplRK15StringSumHelperRK6String>
   d4890:	4985      	ldr	r1, [pc, #532]	; (d4aa8 <loop+0x604>)
   d4892:	f002 fcbc 	bl	d720e <_ZplRK15StringSumHelperPKc>
   d4896:	4980      	ldr	r1, [pc, #512]	; (d4a98 <loop+0x5f4>)
   d4898:	f002 fcad 	bl	d71f6 <_ZplRK15StringSumHelperRK6String>
   d489c:	4983      	ldr	r1, [pc, #524]	; (d4aac <loop+0x608>)
   d489e:	f002 fcb6 	bl	d720e <_ZplRK15StringSumHelperPKc>
   d48a2:	4601      	mov	r1, r0
   d48a4:	4882      	ldr	r0, [pc, #520]	; (d4ab0 <loop+0x60c>)
   d48a6:	f002 fc41 	bl	d712c <_ZN6StringaSERKS_>
   d48aa:	a80a      	add	r0, sp, #40	; 0x28
   d48ac:	f002 fbc2 	bl	d7034 <_ZN6StringD1Ev>
class StringSumHelper : public String
   d48b0:	a80e      	add	r0, sp, #56	; 0x38
   d48b2:	f002 fbbf 	bl	d7034 <_ZN6StringD1Ev>
				logData(feedName, feedData, false, true);    
   d48b6:	4974      	ldr	r1, [pc, #464]	; (d4a88 <loop+0x5e4>)
   d48b8:	a80a      	add	r0, sp, #40	; 0x28
   d48ba:	f002 fc46 	bl	d714a <_ZN6StringC1ERKS_>
   d48be:	497c      	ldr	r1, [pc, #496]	; (d4ab0 <loop+0x60c>)
   d48c0:	a80e      	add	r0, sp, #56	; 0x38
   d48c2:	f002 fc42 	bl	d714a <_ZN6StringC1ERKS_>
	if (tempLogParticle){
   d48c6:	a90e      	add	r1, sp, #56	; 0x38
   d48c8:	a80a      	add	r0, sp, #40	; 0x28
   d48ca:	f7ff fcf7 	bl	d42bc <_Z7logData6StringS_bb.part.0>
				logData(feedName, feedData, false, true);    
   d48ce:	a80e      	add	r0, sp, #56	; 0x38
   d48d0:	f002 fbb0 	bl	d7034 <_ZN6StringD1Ev>
   d48d4:	a80a      	add	r0, sp, #40	; 0x28
   d48d6:	f002 fbad 	bl	d7034 <_ZN6StringD1Ev>
inline AbstractIntegerDiagnosticData::AbstractIntegerDiagnosticData(DiagnosticDataId id, const char* name) :
        AbstractTypeDiagnosticData<int32_t>(id, name, DIAG_TYPE_INT) {
}

inline int AbstractIntegerDiagnosticData::get(DiagnosticDataId id, IntType& val) {
    return AbstractTypeDiagnosticData<IntType>::get(id, val);
   d48da:	a90e      	add	r1, sp, #56	; 0x38
   d48dc:	2018      	movs	r0, #24
   d48de:	f7ff fd3d 	bl	d435c <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
    }

    int powerSource() const {
        particle::AbstractIntegerDiagnosticData::IntType val;
        const auto r = particle::AbstractIntegerDiagnosticData::get(DIAG_ID_SYSTEM_POWER_SOURCE, val);
        if (r < 0) {
   d48e2:	2800      	cmp	r0, #0
            return r;
        }
        return val;
   d48e4:	bfa8      	it	ge
   d48e6:	980e      	ldrge	r0, [sp, #56]	; 0x38
				powerSource = System.powerSource();
   d48e8:	6028      	str	r0, [r5, #0]
   d48ea:	a90e      	add	r1, sp, #56	; 0x38
   d48ec:	2007      	movs	r0, #7
   d48ee:	f7ff fd35 	bl	d435c <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
				powerSString = powerSources[std::max(0, powerSource)];
   d48f2:	682b      	ldr	r3, [r5, #0]
   d48f4:	4a72      	ldr	r2, [pc, #456]	; (d4ac0 <loop+0x61c>)
    }

    int batteryState() const {
        particle::AbstractIntegerDiagnosticData::IntType val;
        const auto r = particle::AbstractIntegerDiagnosticData::get(DIAG_ID_SYSTEM_BATTERY_STATE, val);
        if (r < 0) {
   d48f6:	2800      	cmp	r0, #0
   d48f8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
            return r;
        }
        return val;
   d48fc:	bfa8      	it	ge
   d48fe:	980e      	ldrge	r0, [sp, #56]	; 0x38
   d4900:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
				batteryState = System.batteryState();
   d4904:	6030      	str	r0, [r6, #0]
				powerSString = powerSources[std::max(0, powerSource)];
   d4906:	486f      	ldr	r0, [pc, #444]	; (d4ac4 <loop+0x620>)
   d4908:	f002 fc32 	bl	d7170 <_ZN6StringaSEPKc>
				powerBSString = batteryStates[std::max(0, batteryState)];
   d490c:	6833      	ldr	r3, [r6, #0]
   d490e:	4a6e      	ldr	r2, [pc, #440]	; (d4ac8 <loop+0x624>)
   d4910:	486e      	ldr	r0, [pc, #440]	; (d4acc <loop+0x628>)
   d4912:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   d4916:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
   d491a:	f002 fc29 	bl	d7170 <_ZN6StringaSEPKc>
   d491e:	a90e      	add	r1, sp, #56	; 0x38
   d4920:	2003      	movs	r0, #3
   d4922:	f7ff fd1b 	bl	d435c <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
        // XXX: we could potentially simply call FuelGauge::getNormalizedSoC(),
        // however in order to exactly match the vitals values sent to the cloud we are going to use
        // diagnostic source as well.
        particle::AbstractIntegerDiagnosticData::IntType val;
        int r = particle::AbstractIntegerDiagnosticData::get(DIAG_ID_SYSTEM_BATTERY_CHARGE, val);
        if (r) {
   d4926:	2800      	cmp	r0, #0
   d4928:	f040 8125 	bne.w	d4b76 <loop+0x6d2>
    StorageT value() const {
        return value_;
    }

    constexpr float toFloat() const {
        return static_cast<float>(value_) / constexpr_pow(2.0f, N);
   d492c:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   d4930:	ee00 3a10 	vmov	s0, r3
   d4934:	eebb 0acc 	vcvt.f32.u32	s0, s0, #8
				batterySocString = String(System.batteryCharge(), 2);
   d4938:	2102      	movs	r1, #2
   d493a:	a80e      	add	r0, sp, #56	; 0x38
   d493c:	f002 fc2a 	bl	d7194 <_ZN6StringC1Efi>
   d4940:	a90e      	add	r1, sp, #56	; 0x38
   d4942:	4863      	ldr	r0, [pc, #396]	; (d4ad0 <loop+0x62c>)
   d4944:	f002 fc0c 	bl	d7160 <_ZN6StringaSEOS_>
   d4948:	a80e      	add	r0, sp, #56	; 0x38
   d494a:	f002 fb73 	bl	d7034 <_ZN6StringD1Ev>
				VCellString = String(fuel.getVCell(), 2);
   d494e:	4861      	ldr	r0, [pc, #388]	; (d4ad4 <loop+0x630>)
   d4950:	f001 ffa4 	bl	d689c <_ZN9FuelGauge8getVCellEv>
   d4954:	2102      	movs	r1, #2
   d4956:	a80e      	add	r0, sp, #56	; 0x38
   d4958:	f002 fc1c 	bl	d7194 <_ZN6StringC1Efi>
   d495c:	a90e      	add	r1, sp, #56	; 0x38
   d495e:	485e      	ldr	r0, [pc, #376]	; (d4ad8 <loop+0x634>)
   d4960:	f002 fbfe 	bl	d7160 <_ZN6StringaSEOS_>
   d4964:	a80e      	add	r0, sp, #56	; 0x38
   d4966:	f002 fb65 	bl	d7034 <_ZN6StringD1Ev>
				SoCString = String(fuel.getSoC(), 2);
   d496a:	485a      	ldr	r0, [pc, #360]	; (d4ad4 <loop+0x630>)
   d496c:	f001 ffb2 	bl	d68d4 <_ZN9FuelGauge6getSoCEv>
   d4970:	2102      	movs	r1, #2
   d4972:	a80e      	add	r0, sp, #56	; 0x38
   d4974:	f002 fc0e 	bl	d7194 <_ZN6StringC1Efi>
   d4978:	a90e      	add	r1, sp, #56	; 0x38
   d497a:	4858      	ldr	r0, [pc, #352]	; (d4adc <loop+0x638>)
   d497c:	f002 fbf0 	bl	d7160 <_ZN6StringaSEOS_>
   d4980:	a80e      	add	r0, sp, #56	; 0x38
   d4982:	f002 fb57 	bl	d7034 <_ZN6StringD1Ev>
				logData("Power sources", powerSString, true, true);
   d4986:	4956      	ldr	r1, [pc, #344]	; (d4ae0 <loop+0x63c>)
   d4988:	a80a      	add	r0, sp, #40	; 0x28
   d498a:	f002 fb9e 	bl	d70ca <_ZN6StringC1EPKc>
   d498e:	494d      	ldr	r1, [pc, #308]	; (d4ac4 <loop+0x620>)
   d4990:	a80e      	add	r0, sp, #56	; 0x38
   d4992:	f002 fbda 	bl	d714a <_ZN6StringC1ERKS_>
   d4996:	2301      	movs	r3, #1
   d4998:	461a      	mov	r2, r3
   d499a:	a90e      	add	r1, sp, #56	; 0x38
   d499c:	a80a      	add	r0, sp, #40	; 0x28
   d499e:	f7ff fcb9 	bl	d4314 <_Z7logData6StringS_bb>
   d49a2:	a80e      	add	r0, sp, #56	; 0x38
   d49a4:	f002 fb46 	bl	d7034 <_ZN6StringD1Ev>
   d49a8:	a80a      	add	r0, sp, #40	; 0x28
   d49aa:	f002 fb43 	bl	d7034 <_ZN6StringD1Ev>
				logData("Battery state", powerBSString, true, true);
   d49ae:	494d      	ldr	r1, [pc, #308]	; (d4ae4 <loop+0x640>)
   d49b0:	a80a      	add	r0, sp, #40	; 0x28
   d49b2:	f002 fb8a 	bl	d70ca <_ZN6StringC1EPKc>
   d49b6:	4945      	ldr	r1, [pc, #276]	; (d4acc <loop+0x628>)
   d49b8:	a80e      	add	r0, sp, #56	; 0x38
   d49ba:	f002 fbc6 	bl	d714a <_ZN6StringC1ERKS_>
   d49be:	2301      	movs	r3, #1
   d49c0:	461a      	mov	r2, r3
   d49c2:	a90e      	add	r1, sp, #56	; 0x38
   d49c4:	a80a      	add	r0, sp, #40	; 0x28
   d49c6:	f7ff fca5 	bl	d4314 <_Z7logData6StringS_bb>
   d49ca:	a80e      	add	r0, sp, #56	; 0x38
   d49cc:	f002 fb32 	bl	d7034 <_ZN6StringD1Ev>
   d49d0:	a80a      	add	r0, sp, #40	; 0x28
   d49d2:	f002 fb2f 	bl	d7034 <_ZN6StringD1Ev>
				logData("Battery charge", batterySocString, true, true);
   d49d6:	4944      	ldr	r1, [pc, #272]	; (d4ae8 <loop+0x644>)
   d49d8:	a80a      	add	r0, sp, #40	; 0x28
   d49da:	f002 fb76 	bl	d70ca <_ZN6StringC1EPKc>
   d49de:	493c      	ldr	r1, [pc, #240]	; (d4ad0 <loop+0x62c>)
   d49e0:	a80e      	add	r0, sp, #56	; 0x38
   d49e2:	f002 fbb2 	bl	d714a <_ZN6StringC1ERKS_>
   d49e6:	2301      	movs	r3, #1
   d49e8:	461a      	mov	r2, r3
   d49ea:	a90e      	add	r1, sp, #56	; 0x38
   d49ec:	a80a      	add	r0, sp, #40	; 0x28
   d49ee:	f7ff fc91 	bl	d4314 <_Z7logData6StringS_bb>
   d49f2:	a80e      	add	r0, sp, #56	; 0x38
   d49f4:	f002 fb1e 	bl	d7034 <_ZN6StringD1Ev>
   d49f8:	a80a      	add	r0, sp, #40	; 0x28
   d49fa:	f002 fb1b 	bl	d7034 <_ZN6StringD1Ev>
				logData("Battery VCell", VCellString, true, true);
   d49fe:	493b      	ldr	r1, [pc, #236]	; (d4aec <loop+0x648>)
   d4a00:	a80a      	add	r0, sp, #40	; 0x28
   d4a02:	f002 fb62 	bl	d70ca <_ZN6StringC1EPKc>
   d4a06:	4934      	ldr	r1, [pc, #208]	; (d4ad8 <loop+0x634>)
   d4a08:	a80e      	add	r0, sp, #56	; 0x38
   d4a0a:	f002 fb9e 	bl	d714a <_ZN6StringC1ERKS_>
   d4a0e:	2301      	movs	r3, #1
   d4a10:	461a      	mov	r2, r3
   d4a12:	a90e      	add	r1, sp, #56	; 0x38
   d4a14:	a80a      	add	r0, sp, #40	; 0x28
   d4a16:	f7ff fc7d 	bl	d4314 <_Z7logData6StringS_bb>
   d4a1a:	a80e      	add	r0, sp, #56	; 0x38
   d4a1c:	f002 fb0a 	bl	d7034 <_ZN6StringD1Ev>
   d4a20:	a80a      	add	r0, sp, #40	; 0x28
   d4a22:	f002 fb07 	bl	d7034 <_ZN6StringD1Ev>
				logData("Battery SoC", SoCString, true, true);
   d4a26:	4932      	ldr	r1, [pc, #200]	; (d4af0 <loop+0x64c>)
   d4a28:	a80a      	add	r0, sp, #40	; 0x28
   d4a2a:	f002 fb4e 	bl	d70ca <_ZN6StringC1EPKc>
   d4a2e:	492b      	ldr	r1, [pc, #172]	; (d4adc <loop+0x638>)
   d4a30:	a80e      	add	r0, sp, #56	; 0x38
   d4a32:	f002 fb8a 	bl	d714a <_ZN6StringC1ERKS_>
   d4a36:	2301      	movs	r3, #1
   d4a38:	461a      	mov	r2, r3
   d4a3a:	a90e      	add	r1, sp, #56	; 0x38
   d4a3c:	a80a      	add	r0, sp, #40	; 0x28
   d4a3e:	f7ff fc69 	bl	d4314 <_Z7logData6StringS_bb>
   d4a42:	a80e      	add	r0, sp, #56	; 0x38
   d4a44:	f002 faf6 	bl	d7034 <_ZN6StringD1Ev>
   d4a48:	a80a      	add	r0, sp, #40	; 0x28
   d4a4a:	f002 faf3 	bl	d7034 <_ZN6StringD1Ev>
				feedName = "Garden-Lady-Bug-04-BATT";
   d4a4e:	4929      	ldr	r1, [pc, #164]	; (d4af4 <loop+0x650>)
   d4a50:	480d      	ldr	r0, [pc, #52]	; (d4a88 <loop+0x5e4>)
   d4a52:	f002 fb8d 	bl	d7170 <_ZN6StringaSEPKc>
				feedID = "UjkrHg96u4xRvT4uECcsENvwTqhu";
   d4a56:	4928      	ldr	r1, [pc, #160]	; (d4af8 <loop+0x654>)
   d4a58:	480f      	ldr	r0, [pc, #60]	; (d4a98 <loop+0x5f4>)
   d4a5a:	f002 fb89 	bl	d7170 <_ZN6StringaSEPKc>
	StringSumHelper(const char *p) : String(p) {}
   d4a5e:	490f      	ldr	r1, [pc, #60]	; (d4a9c <loop+0x5f8>)
   d4a60:	a80e      	add	r0, sp, #56	; 0x38
   d4a62:	f002 fb32 	bl	d70ca <_ZN6StringC1EPKc>
				feedData = "{ \"value\": \"" + VCellString + "\", \"feedID\": \"" + feedID + "\"}";
   d4a66:	491c      	ldr	r1, [pc, #112]	; (d4ad8 <loop+0x634>)
   d4a68:	a80e      	add	r0, sp, #56	; 0x38
   d4a6a:	f002 fbc4 	bl	d71f6 <_ZplRK15StringSumHelperRK6String>
   d4a6e:	490e      	ldr	r1, [pc, #56]	; (d4aa8 <loop+0x604>)
   d4a70:	f002 fbcd 	bl	d720e <_ZplRK15StringSumHelperPKc>
   d4a74:	4908      	ldr	r1, [pc, #32]	; (d4a98 <loop+0x5f4>)
   d4a76:	f002 fbbe 	bl	d71f6 <_ZplRK15StringSumHelperRK6String>
   d4a7a:	e03f      	b.n	d4afc <loop+0x658>
   d4a7c:	2003e554 	.word	0x2003e554
   d4a80:	2003e5a0 	.word	0x2003e5a0
   d4a84:	000d8d25 	.word	0x000d8d25
   d4a88:	2003e5d4 	.word	0x2003e5d4
   d4a8c:	2003e664 	.word	0x2003e664
   d4a90:	2003e578 	.word	0x2003e578
   d4a94:	000d8d3c 	.word	0x000d8d3c
   d4a98:	2003e5c4 	.word	0x2003e5c4
   d4a9c:	000d8d59 	.word	0x000d8d59
   d4aa0:	2003e688 	.word	0x2003e688
   d4aa4:	000d8d66 	.word	0x000d8d66
   d4aa8:	000d8d6b 	.word	0x000d8d6b
   d4aac:	000d8d7a 	.word	0x000d8d7a
   d4ab0:	2003e5b4 	.word	0x2003e5b4
   d4ab4:	000d8d7d 	.word	0x000d8d7d
   d4ab8:	000d8d9f 	.word	0x000d8d9f
   d4abc:	000d8c56 	.word	0x000d8c56
   d4ac0:	000d8f84 	.word	0x000d8f84
   d4ac4:	2003e654 	.word	0x2003e654
   d4ac8:	000d8f9c 	.word	0x000d8f9c
   d4acc:	2003e644 	.word	0x2003e644
   d4ad0:	2003e568 	.word	0x2003e568
   d4ad4:	2003e5f4 	.word	0x2003e5f4
   d4ad8:	2003e53c 	.word	0x2003e53c
   d4adc:	2003e52c 	.word	0x2003e52c
   d4ae0:	000d8dbc 	.word	0x000d8dbc
   d4ae4:	000d8dca 	.word	0x000d8dca
   d4ae8:	000d8dd8 	.word	0x000d8dd8
   d4aec:	000d8de7 	.word	0x000d8de7
   d4af0:	000d8df5 	.word	0x000d8df5
   d4af4:	000d8e01 	.word	0x000d8e01
   d4af8:	000d8e19 	.word	0x000d8e19
   d4afc:	49a9      	ldr	r1, [pc, #676]	; (d4da4 <loop+0x900>)
   d4afe:	f002 fb86 	bl	d720e <_ZplRK15StringSumHelperPKc>
   d4b02:	4601      	mov	r1, r0
   d4b04:	48a8      	ldr	r0, [pc, #672]	; (d4da8 <loop+0x904>)
   d4b06:	f002 fb11 	bl	d712c <_ZN6StringaSERKS_>
class StringSumHelper : public String
   d4b0a:	a80e      	add	r0, sp, #56	; 0x38
   d4b0c:	f002 fa92 	bl	d7034 <_ZN6StringD1Ev>
				logData(feedName, feedData, false, true);    
   d4b10:	49a6      	ldr	r1, [pc, #664]	; (d4dac <loop+0x908>)
   d4b12:	a80a      	add	r0, sp, #40	; 0x28
   d4b14:	f002 fb19 	bl	d714a <_ZN6StringC1ERKS_>
   d4b18:	49a3      	ldr	r1, [pc, #652]	; (d4da8 <loop+0x904>)
   d4b1a:	a80e      	add	r0, sp, #56	; 0x38
   d4b1c:	f002 fb15 	bl	d714a <_ZN6StringC1ERKS_>
	if (tempLogParticle){
   d4b20:	a90e      	add	r1, sp, #56	; 0x38
   d4b22:	a80a      	add	r0, sp, #40	; 0x28
   d4b24:	f7ff fbca 	bl	d42bc <_Z7logData6StringS_bb.part.0>
				logData(feedName, feedData, false, true);    
   d4b28:	a80e      	add	r0, sp, #56	; 0x38
   d4b2a:	f002 fa83 	bl	d7034 <_ZN6StringD1Ev>
   d4b2e:	a80a      	add	r0, sp, #40	; 0x28
   d4b30:	f002 fa80 	bl	d7034 <_ZN6StringD1Ev>
			logData("PUBLISH_STATE", "START SLEEP_WAIT_STATE", true, false);
   d4b34:	499e      	ldr	r1, [pc, #632]	; (d4db0 <loop+0x90c>)
   d4b36:	a80a      	add	r0, sp, #40	; 0x28
   d4b38:	f002 fac7 	bl	d70ca <_ZN6StringC1EPKc>
   d4b3c:	499d      	ldr	r1, [pc, #628]	; (d4db4 <loop+0x910>)
   d4b3e:	a80e      	add	r0, sp, #56	; 0x38
   d4b40:	f002 fac3 	bl	d70ca <_ZN6StringC1EPKc>
   d4b44:	2300      	movs	r3, #0
   d4b46:	2201      	movs	r2, #1
   d4b48:	a90e      	add	r1, sp, #56	; 0x38
   d4b4a:	a80a      	add	r0, sp, #40	; 0x28
   d4b4c:	f7ff fbe2 	bl	d4314 <_Z7logData6StringS_bb>
   d4b50:	a80e      	add	r0, sp, #56	; 0x38
   d4b52:	f002 fa6f 	bl	d7034 <_ZN6StringD1Ev>
   d4b56:	a80a      	add	r0, sp, #40	; 0x28
   d4b58:	f002 fa6c 	bl	d7034 <_ZN6StringD1Ev>
			digitalWrite(BUILT_IN_LED, LOW);
   d4b5c:	2100      	movs	r1, #0
   d4b5e:	2007      	movs	r0, #7
   d4b60:	f003 f847 	bl	d7bf2 <digitalWrite>
   d4b64:	f000 ff9c 	bl	d5aa0 <HAL_Timer_Get_Milli_Seconds>
			stateTime = millis();
   d4b68:	4b93      	ldr	r3, [pc, #588]	; (d4db8 <loop+0x914>)
   d4b6a:	6018      	str	r0, [r3, #0]
   d4b6c:	e524      	b.n	d45b8 <loop+0x114>
            val = n;
   d4b6e:	4629      	mov	r1, r5
   d4b70:	e61c      	b.n	d47ac <loop+0x308>
   d4b72:	4629      	mov	r1, r5
   d4b74:	e62d      	b.n	d47d2 <loop+0x32e>
            return -1.0f;
   d4b76:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
   d4b7a:	e6dd      	b.n	d4938 <loop+0x494>
			if(millis() - stateTime >= MAX_TIME_TO_WAIT_BEFORE_SLEEP_MS){
   d4b7c:	4d8e      	ldr	r5, [pc, #568]	; (d4db8 <loop+0x914>)
   d4b7e:	f000 ff8f 	bl	d5aa0 <HAL_Timer_Get_Milli_Seconds>
   d4b82:	682b      	ldr	r3, [r5, #0]
   d4b84:	1ac0      	subs	r0, r0, r3
   d4b86:	4b8d      	ldr	r3, [pc, #564]	; (d4dbc <loop+0x918>)
   d4b88:	4298      	cmp	r0, r3
   d4b8a:	f67f ad41 	bls.w	d4610 <loop+0x16c>
				logData("SLEEP", "GOING TO SLEEP", true, false);
   d4b8e:	498c      	ldr	r1, [pc, #560]	; (d4dc0 <loop+0x91c>)
   d4b90:	a80a      	add	r0, sp, #40	; 0x28
   d4b92:	f002 fa9a 	bl	d70ca <_ZN6StringC1EPKc>
   d4b96:	498b      	ldr	r1, [pc, #556]	; (d4dc4 <loop+0x920>)
   d4b98:	a80e      	add	r0, sp, #56	; 0x38
   d4b9a:	f002 fa96 	bl	d70ca <_ZN6StringC1EPKc>
   d4b9e:	2300      	movs	r3, #0
   d4ba0:	2201      	movs	r2, #1
   d4ba2:	a90e      	add	r1, sp, #56	; 0x38
   d4ba4:	a80a      	add	r0, sp, #40	; 0x28
   d4ba6:	f7ff fbb5 	bl	d4314 <_Z7logData6StringS_bb>
   d4baa:	a80e      	add	r0, sp, #56	; 0x38
   d4bac:	f002 fa42 	bl	d7034 <_ZN6StringD1Ev>
   d4bb0:	a80a      	add	r0, sp, #40	; 0x28
   d4bb2:	f002 fa3f 	bl	d7034 <_ZN6StringD1Ev>
   d4bb6:	f000 ff73 	bl	d5aa0 <HAL_Timer_Get_Milli_Seconds>
				state = SLEEP_STATE;
   d4bba:	2308      	movs	r3, #8
				stateTime = millis();
   d4bbc:	6028      	str	r0, [r5, #0]
				state = SLEEP_STATE;
   d4bbe:	e526      	b.n	d460e <loop+0x16a>
			if(!debug){
   d4bc0:	4b81      	ldr	r3, [pc, #516]	; (d4dc8 <loop+0x924>)
   d4bc2:	781d      	ldrb	r5, [r3, #0]
   d4bc4:	2d00      	cmp	r5, #0
   d4bc6:	f040 8131 	bne.w	d4e2c <loop+0x988>
				logData("SLEEP", "SLEEP STOP SLEEP", true, false);
   d4bca:	497d      	ldr	r1, [pc, #500]	; (d4dc0 <loop+0x91c>)
				pirState = 0;
   d4bcc:	f8df 8220 	ldr.w	r8, [pc, #544]	; d4df0 <loop+0x94c>
				rtcState = 0;
   d4bd0:	4f7e      	ldr	r7, [pc, #504]	; (d4dcc <loop+0x928>)
				logData("SLEEP", "SLEEP STOP SLEEP", true, false);
   d4bd2:	a80a      	add	r0, sp, #40	; 0x28
   d4bd4:	f002 fa79 	bl	d70ca <_ZN6StringC1EPKc>
   d4bd8:	497d      	ldr	r1, [pc, #500]	; (d4dd0 <loop+0x92c>)
   d4bda:	a80e      	add	r0, sp, #56	; 0x38
   d4bdc:	f002 fa75 	bl	d70ca <_ZN6StringC1EPKc>
   d4be0:	462b      	mov	r3, r5
   d4be2:	2201      	movs	r2, #1
   d4be4:	a90e      	add	r1, sp, #56	; 0x38
   d4be6:	a80a      	add	r0, sp, #40	; 0x28
   d4be8:	f7ff fb94 	bl	d4314 <_Z7logData6StringS_bb>
   d4bec:	a80e      	add	r0, sp, #56	; 0x38
   d4bee:	f002 fa21 	bl	d7034 <_ZN6StringD1Ev>
   d4bf2:	a80a      	add	r0, sp, #40	; 0x28
   d4bf4:	f002 fa1e 	bl	d7034 <_ZN6StringD1Ev>
				fram.put(FRAM::pirAddr, pirState);
   d4bf8:	4642      	mov	r2, r8
   d4bfa:	2111      	movs	r1, #17
   d4bfc:	4875      	ldr	r0, [pc, #468]	; (d4dd4 <loop+0x930>)
				pirState = 0;
   d4bfe:	f888 5000 	strb.w	r5, [r8]
				fram.put(FRAM::pirAddr, pirState);
   d4c02:	f7ff fbcf 	bl	d43a4 <_ZN6MB85RC3putIhEERKT_jS3_>
				fram.put(FRAM::rtcAddr, rtcState);
   d4c06:	463a      	mov	r2, r7
   d4c08:	2109      	movs	r1, #9
   d4c0a:	4872      	ldr	r0, [pc, #456]	; (d4dd4 <loop+0x930>)
				rtcState = 0;
   d4c0c:	703d      	strb	r5, [r7, #0]
				fram.put(FRAM::rtcAddr, rtcState);
   d4c0e:	f7ff fbc9 	bl	d43a4 <_ZN6MB85RC3putIhEERKT_jS3_>
				watchdogState = 0;
   d4c12:	4a71      	ldr	r2, [pc, #452]	; (d4dd8 <loop+0x934>)
				fram.put(FRAM::watchdogAddr, watchdogState);
   d4c14:	486f      	ldr	r0, [pc, #444]	; (d4dd4 <loop+0x930>)
				watchdogState = 0;
   d4c16:	7015      	strb	r5, [r2, #0]
				fram.put(FRAM::watchdogAddr, watchdogState);
   d4c18:	2110      	movs	r1, #16
   d4c1a:	f7ff fbc3 	bl	d43a4 <_ZN6MB85RC3putIhEERKT_jS3_>
        : config_(config) {
   d4c1e:	ab0f      	add	r3, sp, #60	; 0x3c
              valid_(true) {
   d4c20:	2201      	movs	r2, #1
        : config_(config) {
   d4c22:	930e      	str	r3, [sp, #56]	; 0x38
					.gpio(PIRPin, RISING)
   d4c24:	2113      	movs	r1, #19
        config_.size = sizeof(hal_sleep_config_t);
   d4c26:	4b6d      	ldr	r3, [pc, #436]	; (d4ddc <loop+0x938>)
   d4c28:	930f      	str	r3, [sp, #60]	; 0x3c
   d4c2a:	a80e      	add	r0, sp, #56	; 0x38
        config_.wakeup_sources = nullptr;
   d4c2c:	e9cd 5511 	strd	r5, r5, [sp, #68]	; 0x44
              valid_(true) {
   d4c30:	f8ad 5041 	strh.w	r5, [sp, #65]	; 0x41
   d4c34:	f88d 5043 	strb.w	r5, [sp, #67]	; 0x43
   d4c38:	f88d 204c 	strb.w	r2, [sp, #76]	; 0x4c
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
   d4c3c:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
   d4c40:	f7ff fa4c 	bl	d40dc <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode>
        }
        return *this;
    }

    SystemSleepConfiguration& duration(system_tick_t ms) {
        if (valid_) {
   d4c44:	7d03      	ldrb	r3, [r0, #20]
   d4c46:	4606      	mov	r6, r0
   d4c48:	b1eb      	cbz	r3, d4c86 <loop+0x7e2>
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   d4c4a:	6803      	ldr	r3, [r0, #0]
   d4c4c:	68db      	ldr	r3, [r3, #12]
        if (!start) {
   d4c4e:	b12b      	cbz	r3, d4c5c <loop+0x7b8>
            if (start->type == type) {
   d4c50:	889a      	ldrh	r2, [r3, #4]
   d4c52:	2a04      	cmp	r2, #4
   d4c54:	f000 810f 	beq.w	d4e76 <loop+0x9d2>
            start = start->next;
   d4c58:	689b      	ldr	r3, [r3, #8]
        while (start) {
   d4c5a:	e7f8      	b.n	d4c4e <loop+0x7aa>
            if (wakeup) {
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
                return *this;
            }
            // Otherwise, configure RTC as wakeup source.
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
   d4c5c:	4960      	ldr	r1, [pc, #384]	; (d4de0 <loop+0x93c>)
   d4c5e:	2010      	movs	r0, #16
   d4c60:	f003 f87f 	bl	d7d62 <_ZnwjRKSt9nothrow_t>
   d4c64:	4605      	mov	r5, r0
   d4c66:	2800      	cmp	r0, #0
   d4c68:	f000 8103 	beq.w	d4e72 <loop+0x9ce>
   d4c6c:	2210      	movs	r2, #16
   d4c6e:	2100      	movs	r1, #0
   d4c70:	f003 ff66 	bl	d8b40 <memset>
            if (!wakeupSource) {
                valid_ = false;
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_rtc_t);
   d4c74:	4b59      	ldr	r3, [pc, #356]	; (d4ddc <loop+0x938>)
   d4c76:	602b      	str	r3, [r5, #0]
            wakeupSource->base.version = HAL_SLEEP_VERSION;
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_RTC;
   d4c78:	2304      	movs	r3, #4
   d4c7a:	80ab      	strh	r3, [r5, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   d4c7c:	6933      	ldr	r3, [r6, #16]
   d4c7e:	60ab      	str	r3, [r5, #8]
            wakeupSource->ms = ms;
   d4c80:	4b58      	ldr	r3, [pc, #352]	; (d4de4 <loop+0x940>)
   d4c82:	60eb      	str	r3, [r5, #12]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   d4c84:	6135      	str	r5, [r6, #16]
				SystemSleepResult result = System.sleep(config);
   d4c86:	a90e      	add	r1, sp, #56	; 0x38
   d4c88:	a803      	add	r0, sp, #12
   d4c8a:	f002 fb39 	bl	d7300 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>
				digitalWrite(PIRPin, LOW);												// Pet the watchdog
   d4c8e:	2100      	movs	r1, #0
   d4c90:	2013      	movs	r0, #19
   d4c92:	f002 ffae 	bl	d7bf2 <digitalWrite>
				if (result.wakeupReason() == SystemSleepWakeupReason::BY_GPIO) {
   d4c96:	9b03      	ldr	r3, [sp, #12]
        if (wakeupSource_) {
   d4c98:	b32b      	cbz	r3, d4ce6 <loop+0x842>
   d4c9a:	889d      	ldrh	r5, [r3, #4]
   d4c9c:	2d01      	cmp	r5, #1
   d4c9e:	d122      	bne.n	d4ce6 <loop+0x842>
					if(whichPin == A0){
   d4ca0:	899b      	ldrh	r3, [r3, #12]
						logData("SLEEP RESULT", "Woke By BY_GPIO PIR", true, false);
   d4ca2:	4951      	ldr	r1, [pc, #324]	; (d4de8 <loop+0x944>)
					if(whichPin == A0){
   d4ca4:	2b13      	cmp	r3, #19
						logData("SLEEP RESULT", "Woke By BY_GPIO PIR", true, false);
   d4ca6:	a806      	add	r0, sp, #24
					if(whichPin == A0){
   d4ca8:	f040 80aa 	bne.w	d4e00 <loop+0x95c>
						logData("SLEEP RESULT", "Woke By BY_GPIO PIR", true, false);
   d4cac:	f002 fa0d 	bl	d70ca <_ZN6StringC1EPKc>
   d4cb0:	494e      	ldr	r1, [pc, #312]	; (d4dec <loop+0x948>)
   d4cb2:	a80a      	add	r0, sp, #40	; 0x28
   d4cb4:	f002 fa09 	bl	d70ca <_ZN6StringC1EPKc>
   d4cb8:	462a      	mov	r2, r5
   d4cba:	2300      	movs	r3, #0
   d4cbc:	a90a      	add	r1, sp, #40	; 0x28
   d4cbe:	a806      	add	r0, sp, #24
   d4cc0:	f7ff fb28 	bl	d4314 <_Z7logData6StringS_bb>
   d4cc4:	a80a      	add	r0, sp, #40	; 0x28
   d4cc6:	f002 f9b5 	bl	d7034 <_ZN6StringD1Ev>
   d4cca:	a806      	add	r0, sp, #24
   d4ccc:	f002 f9b2 	bl	d7034 <_ZN6StringD1Ev>
						digitalWrite(BUILT_IN_LED, HIGH);
   d4cd0:	4629      	mov	r1, r5
   d4cd2:	2007      	movs	r0, #7
   d4cd4:	f002 ff8d 	bl	d7bf2 <digitalWrite>
						fram.put(FRAM::pirAddr, pirState);
   d4cd8:	4a45      	ldr	r2, [pc, #276]	; (d4df0 <loop+0x94c>)
						pirState = 1;
   d4cda:	f888 5000 	strb.w	r5, [r8]
						fram.put(FRAM::pirAddr, pirState);
   d4cde:	2111      	movs	r1, #17
						fram.put(FRAM::rtcAddr, rtcState);
   d4ce0:	483c      	ldr	r0, [pc, #240]	; (d4dd4 <loop+0x930>)
   d4ce2:	f7ff fb5f 	bl	d43a4 <_ZN6MB85RC3putIhEERKT_jS3_>
				if (result.wakeupReason() == SystemSleepWakeupReason::BY_RTC) {
   d4ce6:	9b03      	ldr	r3, [sp, #12]
   d4ce8:	b1b3      	cbz	r3, d4d18 <loop+0x874>
   d4cea:	889b      	ldrh	r3, [r3, #4]
   d4cec:	2b04      	cmp	r3, #4
   d4cee:	d113      	bne.n	d4d18 <loop+0x874>
					logData("SLEEP RESULT", "SLEEP RESULT - Woke BY_RTC", true, false);
   d4cf0:	493d      	ldr	r1, [pc, #244]	; (d4de8 <loop+0x944>)
   d4cf2:	a806      	add	r0, sp, #24
   d4cf4:	f002 f9e9 	bl	d70ca <_ZN6StringC1EPKc>
   d4cf8:	493e      	ldr	r1, [pc, #248]	; (d4df4 <loop+0x950>)
   d4cfa:	a80a      	add	r0, sp, #40	; 0x28
   d4cfc:	f002 f9e5 	bl	d70ca <_ZN6StringC1EPKc>
   d4d00:	2300      	movs	r3, #0
   d4d02:	2201      	movs	r2, #1
   d4d04:	a90a      	add	r1, sp, #40	; 0x28
   d4d06:	a806      	add	r0, sp, #24
   d4d08:	f7ff fb04 	bl	d4314 <_Z7logData6StringS_bb>
   d4d0c:	a80a      	add	r0, sp, #40	; 0x28
   d4d0e:	f002 f991 	bl	d7034 <_ZN6StringD1Ev>
   d4d12:	a806      	add	r0, sp, #24
   d4d14:	f002 f98e 	bl	d7034 <_ZN6StringD1Ev>
				if (result.wakeupReason() == SystemSleepWakeupReason::BY_NETWORK) {
   d4d18:	9b03      	ldr	r3, [sp, #12]
   d4d1a:	b1b3      	cbz	r3, d4d4a <loop+0x8a6>
   d4d1c:	889b      	ldrh	r3, [r3, #4]
   d4d1e:	2b0e      	cmp	r3, #14
   d4d20:	d113      	bne.n	d4d4a <loop+0x8a6>
					logData("SLEEP RESULT", "SLEEP RESULT - Woke BY_NETWORK", true, false);
   d4d22:	4931      	ldr	r1, [pc, #196]	; (d4de8 <loop+0x944>)
   d4d24:	a806      	add	r0, sp, #24
   d4d26:	f002 f9d0 	bl	d70ca <_ZN6StringC1EPKc>
   d4d2a:	4933      	ldr	r1, [pc, #204]	; (d4df8 <loop+0x954>)
   d4d2c:	a80a      	add	r0, sp, #40	; 0x28
   d4d2e:	f002 f9cc 	bl	d70ca <_ZN6StringC1EPKc>
   d4d32:	2300      	movs	r3, #0
   d4d34:	2201      	movs	r2, #1
   d4d36:	a90a      	add	r1, sp, #40	; 0x28
   d4d38:	a806      	add	r0, sp, #24
   d4d3a:	f7ff faeb 	bl	d4314 <_Z7logData6StringS_bb>
   d4d3e:	a80a      	add	r0, sp, #40	; 0x28
   d4d40:	f002 f978 	bl	d7034 <_ZN6StringD1Ev>
   d4d44:	a806      	add	r0, sp, #24
   d4d46:	f002 f975 	bl	d7034 <_ZN6StringD1Ev>
				if (result.wakeupReason() == SystemSleepWakeupReason::UNKNOWN) {
   d4d4a:	9b03      	ldr	r3, [sp, #12]
   d4d4c:	b10b      	cbz	r3, d4d52 <loop+0x8ae>
   d4d4e:	889b      	ldrh	r3, [r3, #4]
   d4d50:	b99b      	cbnz	r3, d4d7a <loop+0x8d6>
					logData("SLEEP RESULT", "SLEEP RESULT - Woke By UNKNOWN", true, false);
   d4d52:	4925      	ldr	r1, [pc, #148]	; (d4de8 <loop+0x944>)
   d4d54:	a806      	add	r0, sp, #24
   d4d56:	f002 f9b8 	bl	d70ca <_ZN6StringC1EPKc>
   d4d5a:	4928      	ldr	r1, [pc, #160]	; (d4dfc <loop+0x958>)
   d4d5c:	a80a      	add	r0, sp, #40	; 0x28
   d4d5e:	f002 f9b4 	bl	d70ca <_ZN6StringC1EPKc>
   d4d62:	2300      	movs	r3, #0
   d4d64:	2201      	movs	r2, #1
   d4d66:	a90a      	add	r1, sp, #40	; 0x28
   d4d68:	a806      	add	r0, sp, #24
   d4d6a:	f7ff fad3 	bl	d4314 <_Z7logData6StringS_bb>
   d4d6e:	a80a      	add	r0, sp, #40	; 0x28
   d4d70:	f002 f960 	bl	d7034 <_ZN6StringD1Ev>
   d4d74:	a806      	add	r0, sp, #24
   d4d76:	f002 f95d 	bl	d7034 <_ZN6StringD1Ev>
   d4d7a:	f000 fe91 	bl	d5aa0 <HAL_Timer_Get_Milli_Seconds>
				stateTime = millis();
   d4d7e:	4b0e      	ldr	r3, [pc, #56]	; (d4db8 <loop+0x914>)
   d4d80:	6018      	str	r0, [r3, #0]
        if (wakeupSource_) {
   d4d82:	9803      	ldr	r0, [sp, #12]
				state = PARTICLE_CONNECT_WAIT_STATE;
   d4d84:	2302      	movs	r3, #2
   d4d86:	7023      	strb	r3, [r4, #0]
   d4d88:	b108      	cbz	r0, d4d8e <loop+0x8ea>
            free(wakeupSource_);
   d4d8a:	f001 f913 	bl	d5fb4 <free>
        auto wakeupSource = config_.wakeup_sources;
   d4d8e:	9812      	ldr	r0, [sp, #72]	; 0x48
        while (wakeupSource) {
   d4d90:	2800      	cmp	r0, #0
   d4d92:	f43f ac3d 	beq.w	d4610 <loop+0x16c>
            auto next = wakeupSource->next;
   d4d96:	6884      	ldr	r4, [r0, #8]
            delete wakeupSource;
   d4d98:	210c      	movs	r1, #12
   d4d9a:	f002 ffe0 	bl	d7d5e <_ZdlPvj>
            wakeupSource = next;
   d4d9e:	4620      	mov	r0, r4
        while (wakeupSource) {
   d4da0:	e7f6      	b.n	d4d90 <loop+0x8ec>
   d4da2:	bf00      	nop
   d4da4:	000d8d7a 	.word	0x000d8d7a
   d4da8:	2003e5b4 	.word	0x2003e5b4
   d4dac:	2003e5d4 	.word	0x2003e5d4
   d4db0:	000d8d17 	.word	0x000d8d17
   d4db4:	000d8e36 	.word	0x000d8e36
   d4db8:	2003e694 	.word	0x2003e694
   d4dbc:	0001d4bf 	.word	0x0001d4bf
   d4dc0:	000d8efa 	.word	0x000d8efa
   d4dc4:	000d8e4d 	.word	0x000d8e4d
   d4dc8:	2003e59c 	.word	0x2003e59c
   d4dcc:	2003e684 	.word	0x2003e684
   d4dd0:	000d8e5c 	.word	0x000d8e5c
   d4dd4:	2003e5e4 	.word	0x2003e5e4
   d4dd8:	2003e6c0 	.word	0x2003e6c0
   d4ddc:	00030010 	.word	0x00030010
   d4de0:	000d92a4 	.word	0x000d92a4
   d4de4:	001b7740 	.word	0x001b7740
   d4de8:	000d8c78 	.word	0x000d8c78
   d4dec:	000d8e6d 	.word	0x000d8e6d
   d4df0:	2003e640 	.word	0x2003e640
   d4df4:	000d8e95 	.word	0x000d8e95
   d4df8:	000d8eb0 	.word	0x000d8eb0
   d4dfc:	000d8ecf 	.word	0x000d8ecf
						logData("SLEEP RESULT", "Woke By BY_GPIO RTC", true, false);
   d4e00:	f002 f963 	bl	d70ca <_ZN6StringC1EPKc>
   d4e04:	491d      	ldr	r1, [pc, #116]	; (d4e7c <loop+0x9d8>)
   d4e06:	a80a      	add	r0, sp, #40	; 0x28
   d4e08:	f002 f95f 	bl	d70ca <_ZN6StringC1EPKc>
   d4e0c:	462a      	mov	r2, r5
   d4e0e:	a90a      	add	r1, sp, #40	; 0x28
   d4e10:	2300      	movs	r3, #0
   d4e12:	a806      	add	r0, sp, #24
   d4e14:	f7ff fa7e 	bl	d4314 <_Z7logData6StringS_bb>
   d4e18:	a80a      	add	r0, sp, #40	; 0x28
   d4e1a:	f002 f90b 	bl	d7034 <_ZN6StringD1Ev>
   d4e1e:	a806      	add	r0, sp, #24
   d4e20:	f002 f908 	bl	d7034 <_ZN6StringD1Ev>
						fram.put(FRAM::rtcAddr, rtcState);
   d4e24:	4a16      	ldr	r2, [pc, #88]	; (d4e80 <loop+0x9dc>)
						rtcState = 1;
   d4e26:	703d      	strb	r5, [r7, #0]
						fram.put(FRAM::rtcAddr, rtcState);
   d4e28:	2109      	movs	r1, #9
   d4e2a:	e759      	b.n	d4ce0 <loop+0x83c>
				if(millis() - stateTime >= MAX_TIME_TO_SLEEP_MS){
   d4e2c:	4d15      	ldr	r5, [pc, #84]	; (d4e84 <loop+0x9e0>)
   d4e2e:	f000 fe37 	bl	d5aa0 <HAL_Timer_Get_Milli_Seconds>
   d4e32:	682b      	ldr	r3, [r5, #0]
   d4e34:	1ac0      	subs	r0, r0, r3
   d4e36:	f242 730f 	movw	r3, #9999	; 0x270f
   d4e3a:	4298      	cmp	r0, r3
   d4e3c:	f67f abe8 	bls.w	d4610 <loop+0x16c>
					logData("SLEEP", "SLEEP TIMED SLEEP", true, false);
   d4e40:	4911      	ldr	r1, [pc, #68]	; (d4e88 <loop+0x9e4>)
   d4e42:	a80a      	add	r0, sp, #40	; 0x28
   d4e44:	f002 f941 	bl	d70ca <_ZN6StringC1EPKc>
   d4e48:	4910      	ldr	r1, [pc, #64]	; (d4e8c <loop+0x9e8>)
   d4e4a:	a80e      	add	r0, sp, #56	; 0x38
   d4e4c:	f002 f93d 	bl	d70ca <_ZN6StringC1EPKc>
   d4e50:	2300      	movs	r3, #0
   d4e52:	2201      	movs	r2, #1
   d4e54:	a90e      	add	r1, sp, #56	; 0x38
   d4e56:	a80a      	add	r0, sp, #40	; 0x28
   d4e58:	f7ff fa5c 	bl	d4314 <_Z7logData6StringS_bb>
   d4e5c:	a80e      	add	r0, sp, #56	; 0x38
   d4e5e:	f002 f8e9 	bl	d7034 <_ZN6StringD1Ev>
   d4e62:	a80a      	add	r0, sp, #40	; 0x28
   d4e64:	f002 f8e6 	bl	d7034 <_ZN6StringD1Ev>
   d4e68:	f000 fe1a 	bl	d5aa0 <HAL_Timer_Get_Milli_Seconds>
					stateTime = millis();
   d4e6c:	6028      	str	r0, [r5, #0]
   d4e6e:	f7ff bb62 	b.w	d4536 <loop+0x92>
                valid_ = false;
   d4e72:	7530      	strb	r0, [r6, #20]
                return *this;
   d4e74:	e707      	b.n	d4c86 <loop+0x7e2>
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
   d4e76:	4a06      	ldr	r2, [pc, #24]	; (d4e90 <loop+0x9ec>)
   d4e78:	60da      	str	r2, [r3, #12]
                return *this;
   d4e7a:	e704      	b.n	d4c86 <loop+0x7e2>
   d4e7c:	000d8e81 	.word	0x000d8e81
   d4e80:	2003e684 	.word	0x2003e684
   d4e84:	2003e694 	.word	0x2003e694
   d4e88:	000d8efa 	.word	0x000d8efa
   d4e8c:	000d8eee 	.word	0x000d8eee
   d4e90:	001b7740 	.word	0x001b7740

000d4e94 <_GLOBAL__sub_I_rtc>:
		digitalWrite(ANTSW1, 0);
	#else
		digitalWrite(ANTSW1, 0);
		digitalWrite(ANTSW2, 1);
	#endif
   d4e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        val_(val) {
   d4e96:	4b72      	ldr	r3, [pc, #456]	; (d5060 <_GLOBAL__sub_I_rtc+0x1cc>)
MCP79410 rtc;											// Rickkas MCP79410 libarary
   d4e98:	4d72      	ldr	r5, [pc, #456]	; (d5064 <_GLOBAL__sub_I_rtc+0x1d0>)
   d4e9a:	4c73      	ldr	r4, [pc, #460]	; (d5068 <_GLOBAL__sub_I_rtc+0x1d4>)
String analogValueString = "0";
   d4e9c:	4e73      	ldr	r6, [pc, #460]	; (d506c <_GLOBAL__sub_I_rtc+0x1d8>)
   d4e9e:	4f74      	ldr	r7, [pc, #464]	; (d5070 <_GLOBAL__sub_I_rtc+0x1dc>)
   d4ea0:	2001      	movs	r0, #1
   d4ea2:	7018      	strb	r0, [r3, #0]
SYSTEM_THREAD(ENABLED)
   d4ea4:	2100      	movs	r1, #0
   d4ea6:	f000 ff95 	bl	d5dd4 <system_thread_set_state>
MCP79410 rtc;											// Rickkas MCP79410 libarary
   d4eaa:	f002 ff03 	bl	d7cb4 <_Z19__fetch_global_Wirev>
   d4eae:	4601      	mov	r1, r0
   d4eb0:	4628      	mov	r0, r5
   d4eb2:	f000 fb5d 	bl	d5570 <_ZN8MCP79410C1ER7TwoWire>
   d4eb6:	4622      	mov	r2, r4
   d4eb8:	496e      	ldr	r1, [pc, #440]	; (d5074 <_GLOBAL__sub_I_rtc+0x1e0>)
   d4eba:	4628      	mov	r0, r5
   d4ebc:	f002 ff4a 	bl	d7d54 <__aeabi_atexit>
MB85RC64 fram(Wire, 0);
   d4ec0:	f002 fef8 	bl	d7cb4 <_Z19__fetch_global_Wirev>
	 *
	 * @param addr The address 0-7 based on the setting of A0, A1 and A2.
	 *
	 * You typically create one of these objects as a global variable.
	 */
	MB85RC64(TwoWire &wire, int addr = 0) : MB85RC(wire, 8192, addr) {};
   d4ec4:	4d6c      	ldr	r5, [pc, #432]	; (d5078 <_GLOBAL__sub_I_rtc+0x1e4>)
   d4ec6:	4601      	mov	r1, r0
   d4ec8:	2300      	movs	r3, #0
   d4eca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   d4ece:	4628      	mov	r0, r5
   d4ed0:	f000 f910 	bl	d50f4 <_ZN6MB85RCC1ER7TwoWireji>
   d4ed4:	4b69      	ldr	r3, [pc, #420]	; (d507c <_GLOBAL__sub_I_rtc+0x1e8>)
   d4ed6:	602b      	str	r3, [r5, #0]
   d4ed8:	4622      	mov	r2, r4
   d4eda:	4969      	ldr	r1, [pc, #420]	; (d5080 <_GLOBAL__sub_I_rtc+0x1ec>)
   d4edc:	4628      	mov	r0, r5
   d4ede:	f002 ff39 	bl	d7d54 <__aeabi_atexit>
String analogValueString = "0";
   d4ee2:	4d68      	ldr	r5, [pc, #416]	; (d5084 <_GLOBAL__sub_I_rtc+0x1f0>)
   d4ee4:	4631      	mov	r1, r6
   d4ee6:	4638      	mov	r0, r7
   d4ee8:	f002 f8ef 	bl	d70ca <_ZN6StringC1EPKc>
   d4eec:	4638      	mov	r0, r7
String digitalValueString = "0";
   d4eee:	4f66      	ldr	r7, [pc, #408]	; (d5088 <_GLOBAL__sub_I_rtc+0x1f4>)
String analogValueString = "0";
   d4ef0:	4622      	mov	r2, r4
   d4ef2:	4629      	mov	r1, r5
   d4ef4:	f002 ff2e 	bl	d7d54 <__aeabi_atexit>
String digitalValueString = "0";
   d4ef8:	4631      	mov	r1, r6
   d4efa:	4638      	mov	r0, r7
   d4efc:	f002 f8e5 	bl	d70ca <_ZN6StringC1EPKc>
   d4f00:	4638      	mov	r0, r7
String temperatureStringC = "0";
   d4f02:	4f62      	ldr	r7, [pc, #392]	; (d508c <_GLOBAL__sub_I_rtc+0x1f8>)
String digitalValueString = "0";
   d4f04:	4622      	mov	r2, r4
   d4f06:	4629      	mov	r1, r5
   d4f08:	f002 ff24 	bl	d7d54 <__aeabi_atexit>
String temperatureStringC = "0";
   d4f0c:	4631      	mov	r1, r6
   d4f0e:	4638      	mov	r0, r7
   d4f10:	f002 f8db 	bl	d70ca <_ZN6StringC1EPKc>
   d4f14:	4638      	mov	r0, r7
String temperatureStringF = "0";
   d4f16:	4f5e      	ldr	r7, [pc, #376]	; (d5090 <_GLOBAL__sub_I_rtc+0x1fc>)
String temperatureStringC = "0";
   d4f18:	4622      	mov	r2, r4
   d4f1a:	4629      	mov	r1, r5
   d4f1c:	f002 ff1a 	bl	d7d54 <__aeabi_atexit>
String temperatureStringF = "0";
   d4f20:	4631      	mov	r1, r6
   d4f22:	4638      	mov	r0, r7
String getInputVoltageLimit;
   d4f24:	4e5b      	ldr	r6, [pc, #364]	; (d5094 <_GLOBAL__sub_I_rtc+0x200>)
String temperatureStringF = "0";
   d4f26:	f002 f8d0 	bl	d70ca <_ZN6StringC1EPKc>
   d4f2a:	4638      	mov	r0, r7
String getInputVoltageLimit;
   d4f2c:	4f5a      	ldr	r7, [pc, #360]	; (d5098 <_GLOBAL__sub_I_rtc+0x204>)
String temperatureStringF = "0";
   d4f2e:	4622      	mov	r2, r4
   d4f30:	4629      	mov	r1, r5
   d4f32:	f002 ff0f 	bl	d7d54 <__aeabi_atexit>
String getInputVoltageLimit;
   d4f36:	4631      	mov	r1, r6
   d4f38:	4638      	mov	r0, r7
   d4f3a:	f002 f8c6 	bl	d70ca <_ZN6StringC1EPKc>
   d4f3e:	4638      	mov	r0, r7
String getInputCurrentLimit;
   d4f40:	4f56      	ldr	r7, [pc, #344]	; (d509c <_GLOBAL__sub_I_rtc+0x208>)
String getInputVoltageLimit;
   d4f42:	4622      	mov	r2, r4
   d4f44:	4629      	mov	r1, r5
   d4f46:	f002 ff05 	bl	d7d54 <__aeabi_atexit>
String getInputCurrentLimit;
   d4f4a:	4631      	mov	r1, r6
   d4f4c:	4638      	mov	r0, r7
   d4f4e:	f002 f8bc 	bl	d70ca <_ZN6StringC1EPKc>
   d4f52:	4638      	mov	r0, r7
String getChargeCurrentValue;
   d4f54:	4f52      	ldr	r7, [pc, #328]	; (d50a0 <_GLOBAL__sub_I_rtc+0x20c>)
String getInputCurrentLimit;
   d4f56:	4622      	mov	r2, r4
   d4f58:	4629      	mov	r1, r5
   d4f5a:	f002 fefb 	bl	d7d54 <__aeabi_atexit>
String getChargeCurrentValue;
   d4f5e:	4631      	mov	r1, r6
   d4f60:	4638      	mov	r0, r7
   d4f62:	f002 f8b2 	bl	d70ca <_ZN6StringC1EPKc>
   d4f66:	4638      	mov	r0, r7
String getChargeVoltageValue;
   d4f68:	4f4e      	ldr	r7, [pc, #312]	; (d50a4 <_GLOBAL__sub_I_rtc+0x210>)
String getChargeCurrentValue;
   d4f6a:	4622      	mov	r2, r4
   d4f6c:	4629      	mov	r1, r5
   d4f6e:	f002 fef1 	bl	d7d54 <__aeabi_atexit>
String getChargeVoltageValue;
   d4f72:	4631      	mov	r1, r6
   d4f74:	4638      	mov	r0, r7
   d4f76:	f002 f8a8 	bl	d70ca <_ZN6StringC1EPKc>
   d4f7a:	4638      	mov	r0, r7
String feedName;
   d4f7c:	4f4a      	ldr	r7, [pc, #296]	; (d50a8 <_GLOBAL__sub_I_rtc+0x214>)
String getChargeVoltageValue;
   d4f7e:	4622      	mov	r2, r4
   d4f80:	4629      	mov	r1, r5
   d4f82:	f002 fee7 	bl	d7d54 <__aeabi_atexit>
String feedName;
   d4f86:	4631      	mov	r1, r6
   d4f88:	4638      	mov	r0, r7
   d4f8a:	f002 f89e 	bl	d70ca <_ZN6StringC1EPKc>
   d4f8e:	4638      	mov	r0, r7
String feedID;
   d4f90:	4f46      	ldr	r7, [pc, #280]	; (d50ac <_GLOBAL__sub_I_rtc+0x218>)
String feedName;
   d4f92:	4622      	mov	r2, r4
   d4f94:	4629      	mov	r1, r5
   d4f96:	f002 fedd 	bl	d7d54 <__aeabi_atexit>
String feedID;
   d4f9a:	4631      	mov	r1, r6
   d4f9c:	4638      	mov	r0, r7
   d4f9e:	f002 f894 	bl	d70ca <_ZN6StringC1EPKc>
   d4fa2:	4638      	mov	r0, r7
String feedData;
   d4fa4:	4f42      	ldr	r7, [pc, #264]	; (d50b0 <_GLOBAL__sub_I_rtc+0x21c>)
String feedID;
   d4fa6:	4622      	mov	r2, r4
   d4fa8:	4629      	mov	r1, r5
   d4faa:	f002 fed3 	bl	d7d54 <__aeabi_atexit>
String feedData;
   d4fae:	4631      	mov	r1, r6
   d4fb0:	4638      	mov	r0, r7
   d4fb2:	f002 f88a 	bl	d70ca <_ZN6StringC1EPKc>
   d4fb6:	4638      	mov	r0, r7
String powerSString;
   d4fb8:	4f3e      	ldr	r7, [pc, #248]	; (d50b4 <_GLOBAL__sub_I_rtc+0x220>)
String feedData;
   d4fba:	4622      	mov	r2, r4
   d4fbc:	4629      	mov	r1, r5
   d4fbe:	f002 fec9 	bl	d7d54 <__aeabi_atexit>
String powerSString;
   d4fc2:	4631      	mov	r1, r6
   d4fc4:	4638      	mov	r0, r7
   d4fc6:	f002 f880 	bl	d70ca <_ZN6StringC1EPKc>
   d4fca:	4638      	mov	r0, r7
String powerBSString;
   d4fcc:	4f3a      	ldr	r7, [pc, #232]	; (d50b8 <_GLOBAL__sub_I_rtc+0x224>)
String powerSString;
   d4fce:	4622      	mov	r2, r4
   d4fd0:	4629      	mov	r1, r5
   d4fd2:	f002 febf 	bl	d7d54 <__aeabi_atexit>
String powerBSString;
   d4fd6:	4631      	mov	r1, r6
   d4fd8:	4638      	mov	r0, r7
   d4fda:	f002 f876 	bl	d70ca <_ZN6StringC1EPKc>
   d4fde:	4638      	mov	r0, r7
String batterySocString;
   d4fe0:	4f36      	ldr	r7, [pc, #216]	; (d50bc <_GLOBAL__sub_I_rtc+0x228>)
String powerBSString;
   d4fe2:	4622      	mov	r2, r4
   d4fe4:	4629      	mov	r1, r5
   d4fe6:	f002 feb5 	bl	d7d54 <__aeabi_atexit>
String batterySocString;
   d4fea:	4631      	mov	r1, r6
   d4fec:	4638      	mov	r0, r7
   d4fee:	f002 f86c 	bl	d70ca <_ZN6StringC1EPKc>
   d4ff2:	4638      	mov	r0, r7
PMIC pmic;
   d4ff4:	4f32      	ldr	r7, [pc, #200]	; (d50c0 <_GLOBAL__sub_I_rtc+0x22c>)
String batterySocString;
   d4ff6:	4622      	mov	r2, r4
   d4ff8:	4629      	mov	r1, r5
   d4ffa:	f002 feab 	bl	d7d54 <__aeabi_atexit>
PMIC pmic;
   d4ffe:	2100      	movs	r1, #0
   d5000:	4638      	mov	r0, r7
   d5002:	f001 fe9e 	bl	d6d42 <_ZN4PMICC1Eb>
   d5006:	4622      	mov	r2, r4
   d5008:	492e      	ldr	r1, [pc, #184]	; (d50c4 <_GLOBAL__sub_I_rtc+0x230>)
   d500a:	4638      	mov	r0, r7
   d500c:	f002 fea2 	bl	d7d54 <__aeabi_atexit>
            : conf_{} {
   d5010:	4b2d      	ldr	r3, [pc, #180]	; (d50c8 <_GLOBAL__sub_I_rtc+0x234>)
   d5012:	2720      	movs	r7, #32
   d5014:	4618      	mov	r0, r3
   d5016:	463a      	mov	r2, r7
   d5018:	2100      	movs	r1, #0
   d501a:	f003 fd91 	bl	d8b40 <memset>
        conf_.size = sizeof(conf_);
   d501e:	7147      	strb	r7, [r0, #5]
FuelGauge fuel;
   d5020:	4f2a      	ldr	r7, [pc, #168]	; (d50cc <_GLOBAL__sub_I_rtc+0x238>)
   d5022:	2100      	movs	r1, #0
   d5024:	4638      	mov	r0, r7
   d5026:	f001 fbe3 	bl	d67f0 <_ZN9FuelGaugeC1Eb>
   d502a:	4638      	mov	r0, r7
String VCellString;
   d502c:	4f28      	ldr	r7, [pc, #160]	; (d50d0 <_GLOBAL__sub_I_rtc+0x23c>)
FuelGauge fuel;
   d502e:	4929      	ldr	r1, [pc, #164]	; (d50d4 <_GLOBAL__sub_I_rtc+0x240>)
   d5030:	4622      	mov	r2, r4
   d5032:	f002 fe8f 	bl	d7d54 <__aeabi_atexit>
String VCellString;
   d5036:	4631      	mov	r1, r6
   d5038:	4638      	mov	r0, r7
   d503a:	f002 f846 	bl	d70ca <_ZN6StringC1EPKc>
   d503e:	4638      	mov	r0, r7
String SoCString;
   d5040:	4f25      	ldr	r7, [pc, #148]	; (d50d8 <_GLOBAL__sub_I_rtc+0x244>)
String VCellString;
   d5042:	4622      	mov	r2, r4
   d5044:	4629      	mov	r1, r5
   d5046:	f002 fe85 	bl	d7d54 <__aeabi_atexit>
String SoCString;
   d504a:	4631      	mov	r1, r6
   d504c:	4638      	mov	r0, r7
   d504e:	f002 f83c 	bl	d70ca <_ZN6StringC1EPKc>
   d5052:	4622      	mov	r2, r4
   d5054:	4629      	mov	r1, r5
   d5056:	4638      	mov	r0, r7
   d5058:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
String SoCString;
   d505c:	f002 be7a 	b.w	d7d54 <__aeabi_atexit>
   d5060:	2003e54c 	.word	0x2003e54c
   d5064:	2003e668 	.word	0x2003e668
   d5068:	2003e528 	.word	0x2003e528
   d506c:	000d8ced 	.word	0x000d8ced
   d5070:	2003e558 	.word	0x2003e558
   d5074:	000d52fb 	.word	0x000d52fb
   d5078:	2003e5e4 	.word	0x2003e5e4
   d507c:	000d8f08 	.word	0x000d8f08
   d5080:	000d40b5 	.word	0x000d40b5
   d5084:	000d7035 	.word	0x000d7035
   d5088:	2003e5a4 	.word	0x2003e5a4
   d508c:	2003e6a0 	.word	0x2003e6a0
   d5090:	2003e6b0 	.word	0x2003e6b0
   d5094:	000d92c4 	.word	0x000d92c4
   d5098:	2003e62c 	.word	0x2003e62c
   d509c:	2003e61c 	.word	0x2003e61c
   d50a0:	2003e5fc 	.word	0x2003e5fc
   d50a4:	2003e60c 	.word	0x2003e60c
   d50a8:	2003e5d4 	.word	0x2003e5d4
   d50ac:	2003e5c4 	.word	0x2003e5c4
   d50b0:	2003e5b4 	.word	0x2003e5b4
   d50b4:	2003e654 	.word	0x2003e654
   d50b8:	2003e644 	.word	0x2003e644
   d50bc:	2003e568 	.word	0x2003e568
   d50c0:	2003e641 	.word	0x2003e641
   d50c4:	000d6d81 	.word	0x000d6d81
   d50c8:	2003e57c 	.word	0x2003e57c
   d50cc:	2003e5f4 	.word	0x2003e5f4
   d50d0:	2003e53c 	.word	0x2003e53c
   d50d4:	000d6811 	.word	0x000d6811
   d50d8:	2003e52c 	.word	0x2003e52c

000d50dc <_ZN6MB85RCD1Ev>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
	wire(wire), memorySize(memorySize), addr(addr) {
}

MB85RC::~MB85RC() {
}
   d50dc:	4770      	bx	lr

000d50de <_ZN6MB85RCD0Ev>:
MB85RC::~MB85RC() {
   d50de:	b510      	push	{r4, lr}
}
   d50e0:	2110      	movs	r1, #16
MB85RC::~MB85RC() {
   d50e2:	4604      	mov	r4, r0
}
   d50e4:	f002 fe3b 	bl	d7d5e <_ZdlPvj>
   d50e8:	4620      	mov	r0, r4
   d50ea:	bd10      	pop	{r4, pc}

000d50ec <_ZN7TwoWire5writeEj>:
  bool lock();
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
   d50ec:	6803      	ldr	r3, [r0, #0]
   d50ee:	b2c9      	uxtb	r1, r1
   d50f0:	689b      	ldr	r3, [r3, #8]
   d50f2:	4718      	bx	r3

000d50f4 <_ZN6MB85RCC1ER7TwoWireji>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
   d50f4:	b530      	push	{r4, r5, lr}
	wire(wire), memorySize(memorySize), addr(addr) {
   d50f6:	4d03      	ldr	r5, [pc, #12]	; (d5104 <_ZN6MB85RCC1ER7TwoWireji+0x10>)
   d50f8:	e9c0 2302 	strd	r2, r3, [r0, #8]
   d50fc:	e9c0 5100 	strd	r5, r1, [r0]
}
   d5100:	bd30      	pop	{r4, r5, pc}
   d5102:	bf00      	nop
   d5104:	000d8fc0 	.word	0x000d8fc0

000d5108 <_ZN6MB85RC5beginEv>:

void MB85RC::begin() {
	wire.begin();
   d5108:	6840      	ldr	r0, [r0, #4]
   d510a:	f001 bc4b 	b.w	d69a4 <_ZN7TwoWire5beginEv>

000d510e <_ZNSt10lock_guardIR7TwoWireED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   d510e:	b510      	push	{r4, lr}
   d5110:	4604      	mov	r4, r0
      { _M_device.unlock(); }
   d5112:	6800      	ldr	r0, [r0, #0]
   d5114:	f001 fca5 	bl	d6a62 <_ZN7TwoWire6unlockEv>
   d5118:	4620      	mov	r0, r4
   d511a:	bd10      	pop	{r4, pc}

000d511c <_ZN6MB85RC8readDataEjPhj>:

	return true;
}


bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   d511c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d5120:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   d5122:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d5124:	9001      	str	r0, [sp, #4]
bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   d5126:	460d      	mov	r5, r1
   d5128:	4616      	mov	r6, r2
   d512a:	461f      	mov	r7, r3
      { _M_device.lock(); }
   d512c:	f001 fc90 	bl	d6a50 <_ZN7TwoWire4lockEv>

		while(dataLen > 0) {
   d5130:	b1a7      	cbz	r7, d515c <_ZN6MB85RC8readDataEjPhj+0x40>
			wire.beginTransmission(addr | DEVICE_ADDR);
   d5132:	68e1      	ldr	r1, [r4, #12]
   d5134:	6860      	ldr	r0, [r4, #4]
   d5136:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d513a:	f001 fc66 	bl	d6a0a <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   d513e:	0a29      	lsrs	r1, r5, #8
   d5140:	6860      	ldr	r0, [r4, #4]
   d5142:	f7ff ffd3 	bl	d50ec <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   d5146:	4629      	mov	r1, r5
   d5148:	6860      	ldr	r0, [r4, #4]
   d514a:	f7ff ffcf 	bl	d50ec <_ZN7TwoWire5writeEj>
			int stat = wire.endTransmission(false);
   d514e:	6860      	ldr	r0, [r4, #4]
   d5150:	2100      	movs	r1, #0
   d5152:	f001 fc75 	bl	d6a40 <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   d5156:	b148      	cbz	r0, d516c <_ZN6MB85RC8readDataEjPhj+0x50>
				//Serial.printlnf("read set address failed %d", stat);
				result = false;
   d5158:	2400      	movs	r4, #0
   d515a:	e000      	b.n	d515e <_ZN6MB85RC8readDataEjPhj+0x42>
   d515c:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
   d515e:	a801      	add	r0, sp, #4
   d5160:	f7ff ffd5 	bl	d510e <_ZNSt10lock_guardIR7TwoWireED1Ev>
				dataLen--;
			}
		}
	}
	return result;
}
   d5164:	4620      	mov	r0, r4
   d5166:	b003      	add	sp, #12
   d5168:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			if (bytesToRead > 32) {
   d516c:	2f20      	cmp	r7, #32
			wire.requestFrom((uint8_t)(addr | DEVICE_ADDR), bytesToRead, (uint8_t) true);
   d516e:	7b21      	ldrb	r1, [r4, #12]
   d5170:	6860      	ldr	r0, [r4, #4]
   d5172:	46b8      	mov	r8, r7
   d5174:	bf28      	it	cs
   d5176:	f04f 0820 	movcs.w	r8, #32
   d517a:	2301      	movs	r3, #1
   d517c:	4642      	mov	r2, r8
   d517e:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d5182:	f001 fc2c 	bl	d69de <_ZN7TwoWire11requestFromEhjh>
			if (Wire.available() < (int) bytesToRead) {
   d5186:	f002 fd95 	bl	d7cb4 <_Z19__fetch_global_Wirev>
   d518a:	6803      	ldr	r3, [r0, #0]
   d518c:	691b      	ldr	r3, [r3, #16]
   d518e:	4798      	blx	r3
   d5190:	4540      	cmp	r0, r8
   d5192:	dbe1      	blt.n	d5158 <_ZN6MB85RC8readDataEjPhj+0x3c>
   d5194:	eb06 0908 	add.w	r9, r6, r8
				*data++ = Wire.read();    // receive a byte as character
   d5198:	f002 fd8c 	bl	d7cb4 <_Z19__fetch_global_Wirev>
   d519c:	6803      	ldr	r3, [r0, #0]
   d519e:	695b      	ldr	r3, [r3, #20]
   d51a0:	4798      	blx	r3
   d51a2:	f806 0b01 	strb.w	r0, [r6], #1
			for(size_t ii = 0; ii < bytesToRead; ii++) {
   d51a6:	454e      	cmp	r6, r9
   d51a8:	d1f6      	bne.n	d5198 <_ZN6MB85RC8readDataEjPhj+0x7c>
   d51aa:	4445      	add	r5, r8
   d51ac:	eba7 0708 	sub.w	r7, r7, r8
   d51b0:	e7be      	b.n	d5130 <_ZN6MB85RC8readDataEjPhj+0x14>

000d51b2 <_ZN6MB85RC9writeDataEjPKhj>:


bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   d51b2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d51b6:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   d51b8:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d51ba:	9001      	str	r0, [sp, #4]
bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   d51bc:	460e      	mov	r6, r1
   d51be:	4690      	mov	r8, r2
   d51c0:	461d      	mov	r5, r3
      { _M_device.lock(); }
   d51c2:	f001 fc45 	bl	d6a50 <_ZN7TwoWire4lockEv>
   d51c6:	f04f 0901 	mov.w	r9, #1
	WITH_LOCK(wire) {
   d51ca:	f1b9 0f00 	cmp.w	r9, #0
   d51ce:	d02a      	beq.n	d5226 <_ZN6MB85RC9writeDataEjPKhj+0x74>
		while(dataLen > 0) {
   d51d0:	b34d      	cbz	r5, d5226 <_ZN6MB85RC9writeDataEjPKhj+0x74>
			wire.beginTransmission(addr | DEVICE_ADDR);
   d51d2:	68e1      	ldr	r1, [r4, #12]
   d51d4:	6860      	ldr	r0, [r4, #4]
   d51d6:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d51da:	f001 fc16 	bl	d6a0a <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   d51de:	0a31      	lsrs	r1, r6, #8
   d51e0:	6860      	ldr	r0, [r4, #4]
   d51e2:	f7ff ff83 	bl	d50ec <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   d51e6:	6860      	ldr	r0, [r4, #4]
   d51e8:	4631      	mov	r1, r6
   d51ea:	f7ff ff7f 	bl	d50ec <_ZN7TwoWire5writeEj>

			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   d51ee:	f1a5 0a1e 	sub.w	sl, r5, #30
			wire.write(framAddr);
   d51f2:	4647      	mov	r7, r8
   d51f4:	eba6 0b08 	sub.w	fp, r6, r8
				wire.write(*data);
   d51f8:	6860      	ldr	r0, [r4, #4]
   d51fa:	f817 1b01 	ldrb.w	r1, [r7], #1
   d51fe:	6803      	ldr	r3, [r0, #0]
				framAddr++;
				data++;
				dataLen--;
   d5200:	3d01      	subs	r5, #1
				wire.write(*data);
   d5202:	689b      	ldr	r3, [r3, #8]
   d5204:	4798      	blx	r3
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   d5206:	4555      	cmp	r5, sl
   d5208:	eb0b 0607 	add.w	r6, fp, r7
				data++;
   d520c:	46b8      	mov	r8, r7
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   d520e:	d001      	beq.n	d5214 <_ZN6MB85RC9writeDataEjPKhj+0x62>
   d5210:	2d00      	cmp	r5, #0
   d5212:	d1f1      	bne.n	d51f8 <_ZN6MB85RC9writeDataEjPKhj+0x46>
			}

			int stat = wire.endTransmission(true);
   d5214:	6860      	ldr	r0, [r4, #4]
   d5216:	2101      	movs	r1, #1
   d5218:	f001 fc12 	bl	d6a40 <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   d521c:	2800      	cmp	r0, #0
   d521e:	d0d7      	beq.n	d51d0 <_ZN6MB85RC9writeDataEjPKhj+0x1e>
				//Serial.printlnf("write failed %d", stat);
				result = false;
   d5220:	f04f 0900 	mov.w	r9, #0
   d5224:	e7d1      	b.n	d51ca <_ZN6MB85RC9writeDataEjPKhj+0x18>
	WITH_LOCK(wire) {
   d5226:	a801      	add	r0, sp, #4
   d5228:	f7ff ff71 	bl	d510e <_ZNSt10lock_guardIR7TwoWireED1Ev>
				break;
			}
		}
	}
	return result;
}
   d522c:	4648      	mov	r0, r9
   d522e:	b003      	add	sp, #12
   d5230:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d5234 <_ZN6MB85RC8moveDataEjjj>:


bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   d5234:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d5238:	b08b      	sub	sp, #44	; 0x2c
   d523a:	460e      	mov	r6, r1
   d523c:	4615      	mov	r5, r2
   d523e:	4680      	mov	r8, r0
	bool result = true;

	// Maximum number of bytes we can write is 30
	uint8_t buf[30];

	WITH_LOCK(wire) {
   d5240:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d5242:	9001      	str	r0, [sp, #4]
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   d5244:	461c      	mov	r4, r3
      { _M_device.lock(); }
   d5246:	f001 fc03 	bl	d6a50 <_ZN7TwoWire4lockEv>
		if (framAddrFrom < framAddrTo) {
   d524a:	42ae      	cmp	r6, r5
   d524c:	d229      	bcs.n	d52a2 <_ZN6MB85RC8moveDataEjjj+0x6e>
			// Moving to a higher address - copy from the end of the from buffer
			framAddrFrom += numBytes;
   d524e:	4426      	add	r6, r4
			framAddrTo += numBytes;
   d5250:	4425      	add	r5, r4
			while(numBytes > 0) {
   d5252:	b18c      	cbz	r4, d5278 <_ZN6MB85RC8moveDataEjjj+0x44>
				size_t count = numBytes;
				if (count > sizeof(buf)) {
   d5254:	2c1e      	cmp	r4, #30
   d5256:	4627      	mov	r7, r4
					count = sizeof(buf);
				}
				framAddrFrom -= count;
				framAddrTo -= count;

				result = readData(framAddrFrom, buf, count);
   d5258:	f8d8 3000 	ldr.w	r3, [r8]
   d525c:	bf28      	it	cs
   d525e:	271e      	movcs	r7, #30
				framAddrFrom -= count;
   d5260:	1bf6      	subs	r6, r6, r7
				result = readData(framAddrFrom, buf, count);
   d5262:	f8d3 9008 	ldr.w	r9, [r3, #8]
   d5266:	aa02      	add	r2, sp, #8
   d5268:	463b      	mov	r3, r7
   d526a:	4631      	mov	r1, r6
   d526c:	4640      	mov	r0, r8
				framAddrTo -= count;
   d526e:	1bed      	subs	r5, r5, r7
				result = readData(framAddrFrom, buf, count);
   d5270:	47c8      	blx	r9
				if (!result) {
   d5272:	b948      	cbnz	r0, d5288 <_ZN6MB85RC8moveDataEjjj+0x54>
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   d5274:	2400      	movs	r4, #0
   d5276:	e000      	b.n	d527a <_ZN6MB85RC8moveDataEjjj+0x46>
   d5278:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
   d527a:	a801      	add	r0, sp, #4
   d527c:	f7ff ff47 	bl	d510e <_ZNSt10lock_guardIR7TwoWireED1Ev>
				numBytes -= count;
			}
		}
	}
	return result;
}
   d5280:	4620      	mov	r0, r4
   d5282:	b00b      	add	sp, #44	; 0x2c
   d5284:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				result = writeData(framAddrTo, buf, count);
   d5288:	f8d8 3000 	ldr.w	r3, [r8]
   d528c:	aa02      	add	r2, sp, #8
   d528e:	f8d3 900c 	ldr.w	r9, [r3, #12]
   d5292:	4629      	mov	r1, r5
   d5294:	463b      	mov	r3, r7
   d5296:	4640      	mov	r0, r8
   d5298:	47c8      	blx	r9
				if (!result) {
   d529a:	2800      	cmp	r0, #0
   d529c:	d0ea      	beq.n	d5274 <_ZN6MB85RC8moveDataEjjj+0x40>
				numBytes -= count;
   d529e:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
   d52a0:	e7d7      	b.n	d5252 <_ZN6MB85RC8moveDataEjjj+0x1e>
		if (framAddrFrom > framAddrTo) {
   d52a2:	d9e9      	bls.n	d5278 <_ZN6MB85RC8moveDataEjjj+0x44>
			while(numBytes > 0) {
   d52a4:	2c00      	cmp	r4, #0
   d52a6:	d0e7      	beq.n	d5278 <_ZN6MB85RC8moveDataEjjj+0x44>
				result = readData(framAddrFrom, buf, count);
   d52a8:	f8d8 3000 	ldr.w	r3, [r8]
   d52ac:	2c1e      	cmp	r4, #30
   d52ae:	4627      	mov	r7, r4
   d52b0:	bf28      	it	cs
   d52b2:	271e      	movcs	r7, #30
   d52b4:	f8d3 9008 	ldr.w	r9, [r3, #8]
   d52b8:	aa02      	add	r2, sp, #8
   d52ba:	463b      	mov	r3, r7
   d52bc:	4631      	mov	r1, r6
   d52be:	4640      	mov	r0, r8
   d52c0:	47c8      	blx	r9
				if (!result) {
   d52c2:	2800      	cmp	r0, #0
   d52c4:	d0d6      	beq.n	d5274 <_ZN6MB85RC8moveDataEjjj+0x40>
				result = writeData(framAddrTo, buf, count);
   d52c6:	f8d8 3000 	ldr.w	r3, [r8]
   d52ca:	aa02      	add	r2, sp, #8
   d52cc:	f8d3 900c 	ldr.w	r9, [r3, #12]
   d52d0:	4629      	mov	r1, r5
   d52d2:	463b      	mov	r3, r7
   d52d4:	4640      	mov	r0, r8
   d52d6:	47c8      	blx	r9
				if (!result) {
   d52d8:	2800      	cmp	r0, #0
   d52da:	d0cb      	beq.n	d5274 <_ZN6MB85RC8moveDataEjjj+0x40>
				framAddrFrom += count;
   d52dc:	443e      	add	r6, r7
				framAddrTo += count;
   d52de:	443d      	add	r5, r7
				numBytes -= count;
   d52e0:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
   d52e2:	e7df      	b.n	d52a4 <_ZN6MB85RC8moveDataEjjj+0x70>

000d52e4 <_ZNK12MCP79410SRAM6lengthEv>:
	virtual ~MCP79410SRAM();

	/**
	 * @brief Returns the length (64)
	 */
	virtual size_t length() const { return 64; };
   d52e4:	2040      	movs	r0, #64	; 0x40
   d52e6:	4770      	bx	lr

000d52e8 <_ZNK12MCP79410SRAM10eraseValueEv>:
	/**
	 * @brief Erase erases to 0
	 *
	 * Note that on cold power up, the values are random, not zero!
	 */
	virtual uint8_t eraseValue() const { return 0; };
   d52e8:	2000      	movs	r0, #0
   d52ea:	4770      	bx	lr

000d52ec <_ZNK14MCP79410EEPROM6lengthEv>:
	bool protectedBlockRead(uint8_t *buf);

	/**
	 * @brief Returns the length (128)
	 */
	virtual size_t length() const { return 128; };
   d52ec:	2080      	movs	r0, #128	; 0x80
   d52ee:	4770      	bx	lr

000d52f0 <_ZNK14MCP79410EEPROM10eraseValueEv>:

	/**
	 * @brief Erased value is 0xff.
	 */
	virtual uint8_t eraseValue() const { return 0xff; };
   d52f0:	20ff      	movs	r0, #255	; 0xff
   d52f2:	4770      	bx	lr

000d52f4 <_ZN12MCP79410SRAMD1Ev>:

}

MCP79410SRAM::~MCP79410SRAM() {

}
   d52f4:	4770      	bx	lr

000d52f6 <_ZN14MCP79410EEPROMD1Ev>:

}

MCP79410EEPROM::~MCP79410EEPROM() {

}
   d52f6:	4770      	bx	lr

000d52f8 <_ZN12MCP79410TimeD1Ev>:
	clear();
}

MCP79410Time::~MCP79410Time() {

}
   d52f8:	4770      	bx	lr

000d52fa <_ZN8MCP79410D1Ev>:
}


MCP79410::~MCP79410() {

}
   d52fa:	4770      	bx	lr

000d52fc <_ZN12MCP79410TimeD0Ev>:
MCP79410Time::~MCP79410Time() {
   d52fc:	b510      	push	{r4, lr}
}
   d52fe:	2114      	movs	r1, #20
MCP79410Time::~MCP79410Time() {
   d5300:	4604      	mov	r4, r0
}
   d5302:	f002 fd2c 	bl	d7d5e <_ZdlPvj>
   d5306:	4620      	mov	r0, r4
   d5308:	bd10      	pop	{r4, pc}

000d530a <_ZN12MCP79410SRAMD0Ev>:
MCP79410SRAM::~MCP79410SRAM() {
   d530a:	b510      	push	{r4, lr}
}
   d530c:	2108      	movs	r1, #8
MCP79410SRAM::~MCP79410SRAM() {
   d530e:	4604      	mov	r4, r0
}
   d5310:	f002 fd25 	bl	d7d5e <_ZdlPvj>
   d5314:	4620      	mov	r0, r4
   d5316:	bd10      	pop	{r4, pc}

000d5318 <_ZN14MCP79410EEPROMD0Ev>:
MCP79410EEPROM::~MCP79410EEPROM() {
   d5318:	b510      	push	{r4, lr}
}
   d531a:	2108      	movs	r1, #8
MCP79410EEPROM::~MCP79410EEPROM() {
   d531c:	4604      	mov	r4, r0
}
   d531e:	f002 fd1e 	bl	d7d5e <_ZdlPvj>
   d5322:	4620      	mov	r0, r4
   d5324:	bd10      	pop	{r4, pc}

000d5326 <_ZN8MCP79410D0Ev>:
MCP79410::~MCP79410() {
   d5326:	b510      	push	{r4, lr}
}
   d5328:	211c      	movs	r1, #28
MCP79410::~MCP79410() {
   d532a:	4604      	mov	r4, r0
}
   d532c:	f002 fd17 	bl	d7d5e <_ZdlPvj>
   d5330:	4620      	mov	r0, r4
   d5332:	bd10      	pop	{r4, pc}

000d5334 <_ZN18MCP79410MemoryBase5eraseEv>:
bool MCP79410MemoryBase::erase() {
   d5334:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	memset(buf, eraseValue(), sizeof(buf));
   d5338:	6803      	ldr	r3, [r0, #0]
   d533a:	68db      	ldr	r3, [r3, #12]
bool MCP79410MemoryBase::erase() {
   d533c:	4604      	mov	r4, r0
	memset(buf, eraseValue(), sizeof(buf));
   d533e:	4798      	blx	r3
   d5340:	2210      	movs	r2, #16
   d5342:	4601      	mov	r1, r0
   d5344:	4668      	mov	r0, sp
   d5346:	f003 fbfb 	bl	d8b40 <memset>
	size_t len = length();
   d534a:	6823      	ldr	r3, [r4, #0]
   d534c:	4620      	mov	r0, r4
   d534e:	689b      	ldr	r3, [r3, #8]
   d5350:	4798      	blx	r3
	size_t offset = 0;
   d5352:	2500      	movs	r5, #0
	size_t len = length();
   d5354:	4607      	mov	r7, r0
	bool bResult = false;
   d5356:	4628      	mov	r0, r5
	while(offset < len) {
   d5358:	42bd      	cmp	r5, r7
   d535a:	d20e      	bcs.n	d537a <_ZN18MCP79410MemoryBase5eraseEv+0x46>
		if (count > (len - offset)) {
   d535c:	1b7e      	subs	r6, r7, r5
		bResult = writeData(offset, buf, count);
   d535e:	6823      	ldr	r3, [r4, #0]
		size_t count = sizeof(buf);
   d5360:	2e10      	cmp	r6, #16
   d5362:	bf28      	it	cs
   d5364:	2610      	movcs	r6, #16
		bResult = writeData(offset, buf, count);
   d5366:	f8d3 8018 	ldr.w	r8, [r3, #24]
   d536a:	466a      	mov	r2, sp
   d536c:	4633      	mov	r3, r6
   d536e:	4629      	mov	r1, r5
   d5370:	4620      	mov	r0, r4
   d5372:	47c0      	blx	r8
		if (!bResult) {
   d5374:	b108      	cbz	r0, d537a <_ZN18MCP79410MemoryBase5eraseEv+0x46>
		offset += count;
   d5376:	4435      	add	r5, r6
	while(offset < len) {
   d5378:	e7ee      	b.n	d5358 <_ZN18MCP79410MemoryBase5eraseEv+0x24>
}
   d537a:	b004      	add	sp, #16
   d537c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d5380 <_ZN12MCP79410Time5clearEv>:
	rawYear = 0;
   d5380:	f44f 7380 	mov.w	r3, #256	; 0x100
   d5384:	8143      	strh	r3, [r0, #10]
	rawDayOfMonth = 1;
   d5386:	f240 1301 	movw	r3, #257	; 0x101
   d538a:	60c3      	str	r3, [r0, #12]
	rawSecond = 0;
   d538c:	2300      	movs	r3, #0
   d538e:	8203      	strh	r3, [r0, #16]
}
   d5390:	4770      	bx	lr
	...

000d5394 <_ZN12MCP79410TimeC1Ev>:
MCP79410Time::MCP79410Time() {
   d5394:	b508      	push	{r3, lr}
   d5396:	4b06      	ldr	r3, [pc, #24]	; (d53b0 <_ZN12MCP79410TimeC1Ev+0x1c>)
   d5398:	6003      	str	r3, [r0, #0]
   d539a:	4b06      	ldr	r3, [pc, #24]	; (d53b4 <_ZN12MCP79410TimeC1Ev+0x20>)
   d539c:	6043      	str	r3, [r0, #4]
   d539e:	f240 7304 	movw	r3, #1796	; 0x704
   d53a2:	8103      	strh	r3, [r0, #8]
   d53a4:	2300      	movs	r3, #0
   d53a6:	7443      	strb	r3, [r0, #17]
	clear();
   d53a8:	f7ff ffea 	bl	d5380 <_ZN12MCP79410Time5clearEv>
}
   d53ac:	bd08      	pop	{r3, pc}
   d53ae:	bf00      	nop
   d53b0:	000d90a0 	.word	0x000d90a0
   d53b4:	03020100 	.word	0x03020100

000d53b8 <_ZN12MCP79410Time8bcdToIntEh>:
	return ((value >> 4) & 0xf) * 10 + (value & 0xf);
   d53b8:	0903      	lsrs	r3, r0, #4
}
   d53ba:	220a      	movs	r2, #10
	return ((value >> 4) & 0xf) * 10 + (value & 0xf);
   d53bc:	f000 000f 	and.w	r0, r0, #15
}
   d53c0:	fb02 0003 	mla	r0, r2, r3, r0
   d53c4:	4770      	bx	lr

000d53c6 <_ZNK12MCP79410Time7getYearEv>:
int MCP79410Time::getYear() const {
   d53c6:	b508      	push	{r3, lr}
	return bcdToInt(rawYear) + 2000;
   d53c8:	7a80      	ldrb	r0, [r0, #10]
   d53ca:	f7ff fff5 	bl	d53b8 <_ZN12MCP79410Time8bcdToIntEh>
}
   d53ce:	f500 60fa 	add.w	r0, r0, #2000	; 0x7d0
   d53d2:	bd08      	pop	{r3, pc}

000d53d4 <_ZNK12MCP79410Time8getMonthEv>:
	return bcdToInt(rawMonth & 0x1f);
   d53d4:	7ac0      	ldrb	r0, [r0, #11]
   d53d6:	f000 001f 	and.w	r0, r0, #31
   d53da:	f7ff bfed 	b.w	d53b8 <_ZN12MCP79410Time8bcdToIntEh>

000d53de <_ZNK12MCP79410Time13getDayOfMonthEv>:
	return bcdToInt(rawDayOfMonth & 0x3f);
   d53de:	7b00      	ldrb	r0, [r0, #12]
   d53e0:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   d53e4:	f7ff bfe8 	b.w	d53b8 <_ZN12MCP79410Time8bcdToIntEh>

000d53e8 <_ZNK12MCP79410Time7getHourEv>:
int MCP79410Time::getHour() const {
   d53e8:	b508      	push	{r3, lr}
	if (rawHour & 0x40) {
   d53ea:	7b81      	ldrb	r1, [r0, #14]
   d53ec:	064a      	lsls	r2, r1, #25
   d53ee:	d50d      	bpl.n	d540c <_ZNK12MCP79410Time7getHourEv+0x24>
		int hour12 = bcdToInt(rawHour & 0x1f);
   d53f0:	f001 001f 	and.w	r0, r1, #31
   d53f4:	f7ff ffe0 	bl	d53b8 <_ZN12MCP79410Time8bcdToIntEh>
		if (rawHour & 0x20) {
   d53f8:	068b      	lsls	r3, r1, #26
   d53fa:	d503      	bpl.n	d5404 <_ZNK12MCP79410Time7getHourEv+0x1c>
			if (hour12 == 12) {
   d53fc:	280c      	cmp	r0, #12
   d53fe:	d000      	beq.n	d5402 <_ZNK12MCP79410Time7getHourEv+0x1a>
				return hour12 + 12;
   d5400:	300c      	adds	r0, #12
}
   d5402:	bd08      	pop	{r3, pc}
				return 0;
   d5404:	280c      	cmp	r0, #12
   d5406:	bf08      	it	eq
   d5408:	2000      	moveq	r0, #0
   d540a:	e7fa      	b.n	d5402 <_ZNK12MCP79410Time7getHourEv+0x1a>
}
   d540c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		return bcdToInt(rawHour & 0x3f);
   d5410:	f001 003f 	and.w	r0, r1, #63	; 0x3f
   d5414:	f7ff bfd0 	b.w	d53b8 <_ZN12MCP79410Time8bcdToIntEh>

000d5418 <_ZNK12MCP79410Time9getMinuteEv>:
	return bcdToInt(rawMinute & 0x7f);
   d5418:	7bc0      	ldrb	r0, [r0, #15]
   d541a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   d541e:	f7ff bfcb 	b.w	d53b8 <_ZN12MCP79410Time8bcdToIntEh>

000d5422 <_ZNK12MCP79410Time9getSecondEv>:
	return bcdToInt(rawSecond & 0x7f);
   d5422:	7c00      	ldrb	r0, [r0, #16]
   d5424:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   d5428:	f7ff bfc6 	b.w	d53b8 <_ZN12MCP79410Time8bcdToIntEh>

000d542c <_ZNK12MCP79410Time10toUnixTimeEv>:
time_t MCP79410Time::toUnixTime() const {
   d542c:	b510      	push	{r4, lr}
   d542e:	b08a      	sub	sp, #40	; 0x28
	memset(&tm, 0, sizeof(struct tm));
   d5430:	2224      	movs	r2, #36	; 0x24
time_t MCP79410Time::toUnixTime() const {
   d5432:	4604      	mov	r4, r0
	memset(&tm, 0, sizeof(struct tm));
   d5434:	2100      	movs	r1, #0
   d5436:	a801      	add	r0, sp, #4
   d5438:	f003 fb82 	bl	d8b40 <memset>
	tm.tm_year = getYear() - 1900; // tm_year is years since 1900
   d543c:	4620      	mov	r0, r4
   d543e:	f7ff ffc2 	bl	d53c6 <_ZNK12MCP79410Time7getYearEv>
   d5442:	f2a0 706c 	subw	r0, r0, #1900	; 0x76c
   d5446:	9006      	str	r0, [sp, #24]
	tm.tm_mon = getMonth() - 1; // tm_mon is 0-11!
   d5448:	4620      	mov	r0, r4
   d544a:	f7ff ffc3 	bl	d53d4 <_ZNK12MCP79410Time8getMonthEv>
   d544e:	3801      	subs	r0, #1
   d5450:	9005      	str	r0, [sp, #20]
	tm.tm_mday = getDayOfMonth(); // 1-31
   d5452:	4620      	mov	r0, r4
   d5454:	f7ff ffc3 	bl	d53de <_ZNK12MCP79410Time13getDayOfMonthEv>
   d5458:	9004      	str	r0, [sp, #16]
	tm.tm_hour = getHour();
   d545a:	4620      	mov	r0, r4
   d545c:	f7ff ffc4 	bl	d53e8 <_ZNK12MCP79410Time7getHourEv>
   d5460:	9003      	str	r0, [sp, #12]
	tm.tm_min = getMinute();
   d5462:	4620      	mov	r0, r4
   d5464:	f7ff ffd8 	bl	d5418 <_ZNK12MCP79410Time9getMinuteEv>
   d5468:	9002      	str	r0, [sp, #8]
	tm.tm_sec = getSecond();
   d546a:	4620      	mov	r0, r4
   d546c:	f7ff ffd9 	bl	d5422 <_ZNK12MCP79410Time9getSecondEv>
   d5470:	9001      	str	r0, [sp, #4]
	return mktime(&tm);
   d5472:	a801      	add	r0, sp, #4
   d5474:	f000 fdf6 	bl	d6064 <mktime>
}
   d5478:	b00a      	add	sp, #40	; 0x28
   d547a:	bd10      	pop	{r4, pc}

000d547c <_ZN12MCP79410Time8intToBcdEi>:
	result = (uint8_t) (((value / 10) % 10) << 4);
   d547c:	210a      	movs	r1, #10
   d547e:	fb90 f2f1 	sdiv	r2, r0, r1
   d5482:	fb92 f3f1 	sdiv	r3, r2, r1
   d5486:	fb01 2313 	mls	r3, r1, r3, r2
   d548a:	011b      	lsls	r3, r3, #4
   d548c:	b2db      	uxtb	r3, r3
	result |= (uint8_t) (value % 10);
   d548e:	fb01 0012 	mls	r0, r1, r2, r0
   d5492:	4318      	orrs	r0, r3
}
   d5494:	b2c0      	uxtb	r0, r0
   d5496:	4770      	bx	lr

000d5498 <_ZN12MCP79410Time7setYearEi>:
	rawYear = intToBcd(value % 100);
   d5498:	2364      	movs	r3, #100	; 0x64
void MCP79410Time::setYear(int value) {
   d549a:	b510      	push	{r4, lr}
   d549c:	4604      	mov	r4, r0
	rawYear = intToBcd(value % 100);
   d549e:	fb91 f0f3 	sdiv	r0, r1, r3
   d54a2:	fb00 1013 	mls	r0, r0, r3, r1
   d54a6:	f7ff ffe9 	bl	d547c <_ZN12MCP79410Time8intToBcdEi>
   d54aa:	72a0      	strb	r0, [r4, #10]
}
   d54ac:	bd10      	pop	{r4, pc}

000d54ae <_ZN12MCP79410Time8setMonthEi>:
void MCP79410Time::setMonth(int value) {
   d54ae:	b510      	push	{r4, lr}
   d54b0:	4604      	mov	r4, r0
	rawMonth = intToBcd(value);
   d54b2:	4608      	mov	r0, r1
   d54b4:	f7ff ffe2 	bl	d547c <_ZN12MCP79410Time8intToBcdEi>
   d54b8:	72e0      	strb	r0, [r4, #11]
}
   d54ba:	bd10      	pop	{r4, pc}

000d54bc <_ZN12MCP79410Time13setDayOfMonthEi>:
void MCP79410Time::setDayOfMonth(int value) {
   d54bc:	b510      	push	{r4, lr}
   d54be:	4604      	mov	r4, r0
	rawDayOfMonth |= intToBcd(value);
   d54c0:	4608      	mov	r0, r1
   d54c2:	f7ff ffdb 	bl	d547c <_ZN12MCP79410Time8intToBcdEi>
	rawDayOfMonth &= ~0x3f;
   d54c6:	7b23      	ldrb	r3, [r4, #12]
   d54c8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
	rawDayOfMonth |= intToBcd(value);
   d54cc:	4318      	orrs	r0, r3
   d54ce:	7320      	strb	r0, [r4, #12]
}
   d54d0:	bd10      	pop	{r4, pc}

000d54d2 <_ZN12MCP79410Time12setDayOfWeekEi>:
void MCP79410Time::setDayOfWeek(int value) {
   d54d2:	b510      	push	{r4, lr}
   d54d4:	4604      	mov	r4, r0
	rawDayOfWeek |= intToBcd(value + 1);
   d54d6:	1c48      	adds	r0, r1, #1
   d54d8:	f7ff ffd0 	bl	d547c <_ZN12MCP79410Time8intToBcdEi>
	rawDayOfWeek &= ~0x7;
   d54dc:	7b63      	ldrb	r3, [r4, #13]
   d54de:	f023 0307 	bic.w	r3, r3, #7
	rawDayOfWeek |= intToBcd(value + 1);
   d54e2:	4318      	orrs	r0, r3
   d54e4:	7360      	strb	r0, [r4, #13]
}
   d54e6:	bd10      	pop	{r4, pc}

000d54e8 <_ZN12MCP79410Time7setHourEi>:
void MCP79410Time::setHour(int value) {
   d54e8:	b510      	push	{r4, lr}
   d54ea:	4604      	mov	r4, r0
	rawHour = intToBcd(value);
   d54ec:	4608      	mov	r0, r1
   d54ee:	f7ff ffc5 	bl	d547c <_ZN12MCP79410Time8intToBcdEi>
   d54f2:	73a0      	strb	r0, [r4, #14]
}
   d54f4:	bd10      	pop	{r4, pc}

000d54f6 <_ZN12MCP79410Time9setMinuteEi>:
void MCP79410Time::setMinute(int value) {
   d54f6:	b510      	push	{r4, lr}
   d54f8:	4604      	mov	r4, r0
	rawMinute = intToBcd(value);
   d54fa:	4608      	mov	r0, r1
   d54fc:	f7ff ffbe 	bl	d547c <_ZN12MCP79410Time8intToBcdEi>
   d5500:	73e0      	strb	r0, [r4, #15]
}
   d5502:	bd10      	pop	{r4, pc}

000d5504 <_ZN12MCP79410Time9setSecondEi>:
void MCP79410Time::setSecond(int value) {
   d5504:	b510      	push	{r4, lr}
   d5506:	4604      	mov	r4, r0
	rawSecond |= intToBcd(value);
   d5508:	4608      	mov	r0, r1
   d550a:	f7ff ffb7 	bl	d547c <_ZN12MCP79410Time8intToBcdEi>
	rawSecond &= ~0x7f;
   d550e:	7c23      	ldrb	r3, [r4, #16]
   d5510:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
	rawSecond |= intToBcd(value);
   d5514:	4318      	orrs	r0, r3
   d5516:	7420      	strb	r0, [r4, #16]
}
   d5518:	bd10      	pop	{r4, pc}

000d551a <_ZN12MCP79410Time12fromUnixTimeEx>:
void MCP79410Time::fromUnixTime(time_t time) {
   d551a:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d551c:	4604      	mov	r4, r0
	struct tm *tm = gmtime(&time);
   d551e:	4668      	mov	r0, sp
void MCP79410Time::fromUnixTime(time_t time) {
   d5520:	e9cd 2300 	strd	r2, r3, [sp]
	struct tm *tm = gmtime(&time);
   d5524:	f003 faec 	bl	d8b00 <gmtime>
   d5528:	4605      	mov	r5, r0
	setYear(tm->tm_year);
   d552a:	6941      	ldr	r1, [r0, #20]
   d552c:	4620      	mov	r0, r4
   d552e:	f7ff ffb3 	bl	d5498 <_ZN12MCP79410Time7setYearEi>
	setMonth(tm->tm_mon + 1);
   d5532:	6929      	ldr	r1, [r5, #16]
   d5534:	4620      	mov	r0, r4
   d5536:	3101      	adds	r1, #1
   d5538:	f7ff ffb9 	bl	d54ae <_ZN12MCP79410Time8setMonthEi>
	setDayOfMonth(tm->tm_mday);
   d553c:	68e9      	ldr	r1, [r5, #12]
   d553e:	4620      	mov	r0, r4
   d5540:	f7ff ffbc 	bl	d54bc <_ZN12MCP79410Time13setDayOfMonthEi>
	setDayOfWeek(tm->tm_wday);
   d5544:	69a9      	ldr	r1, [r5, #24]
   d5546:	4620      	mov	r0, r4
   d5548:	f7ff ffc3 	bl	d54d2 <_ZN12MCP79410Time12setDayOfWeekEi>
	setHour(tm->tm_hour); // tm_hour is 0-23
   d554c:	68a9      	ldr	r1, [r5, #8]
   d554e:	4620      	mov	r0, r4
   d5550:	f7ff ffca 	bl	d54e8 <_ZN12MCP79410Time7setHourEi>
	setMinute(tm->tm_min); // tm_min is 0-59
   d5554:	6869      	ldr	r1, [r5, #4]
   d5556:	4620      	mov	r0, r4
   d5558:	f7ff ffcd 	bl	d54f6 <_ZN12MCP79410Time9setMinuteEi>
	setSecond(tm->tm_sec < 60 ? tm->tm_sec : 59); // tm_sec is 0-61, inclusive, because of leap seconds.
   d555c:	6829      	ldr	r1, [r5, #0]
   d555e:	293b      	cmp	r1, #59	; 0x3b
   d5560:	bfa8      	it	ge
   d5562:	213b      	movge	r1, #59	; 0x3b
   d5564:	4620      	mov	r0, r4
   d5566:	f7ff ffcd 	bl	d5504 <_ZN12MCP79410Time9setSecondEi>
}
   d556a:	b003      	add	sp, #12
   d556c:	bd30      	pop	{r4, r5, pc}
	...

000d5570 <_ZN8MCP79410C1ER7TwoWire>:
MCP79410::MCP79410(TwoWire &wire) : wire(wire), sramObj(this), eepromObj(this) {
   d5570:	4a05      	ldr	r2, [pc, #20]	; (d5588 <_ZN8MCP79410C1ER7TwoWire+0x18>)
MCP79410MemoryBase::MCP79410MemoryBase(MCP79410 *parent) : parent(parent) {
   d5572:	6100      	str	r0, [r0, #16]
MCP79410::MCP79410(TwoWire &wire) : wire(wire), sramObj(this), eepromObj(this) {
   d5574:	e9c0 2100 	strd	r2, r1, [r0]
   d5578:	4a04      	ldr	r2, [pc, #16]	; (d558c <_ZN8MCP79410C1ER7TwoWire+0x1c>)
   d557a:	6082      	str	r2, [r0, #8]
MCP79410SRAM::MCP79410SRAM(MCP79410 *parent) : MCP79410MemoryBase(parent) {
   d557c:	4a04      	ldr	r2, [pc, #16]	; (d5590 <_ZN8MCP79410C1ER7TwoWire+0x20>)
   d557e:	60c2      	str	r2, [r0, #12]
MCP79410EEPROM::MCP79410EEPROM(MCP79410 *parent) : MCP79410MemoryBase(parent) {
   d5580:	4a04      	ldr	r2, [pc, #16]	; (d5594 <_ZN8MCP79410C1ER7TwoWire+0x24>)
MCP79410MemoryBase::MCP79410MemoryBase(MCP79410 *parent) : parent(parent) {
   d5582:	6180      	str	r0, [r0, #24]
MCP79410EEPROM::MCP79410EEPROM(MCP79410 *parent) : MCP79410MemoryBase(parent) {
   d5584:	6142      	str	r2, [r0, #20]
}
   d5586:	4770      	bx	lr
   d5588:	000d90d4 	.word	0x000d90d4
   d558c:	03010000 	.word	0x03010000
   d5590:	000d907c 	.word	0x000d907c
   d5594:	000d90b0 	.word	0x000d90b0

000d5598 <_ZNK8MCP7941010deviceReadEhhPhj>:
	return deviceWriteRegisterByte(addr, value);
}



int MCP79410::deviceRead(uint8_t i2cAddr, uint8_t addr, uint8_t *buf, size_t bufLen) const {
   d5598:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d559c:	4604      	mov	r4, r0
   d559e:	460f      	mov	r7, r1
   d55a0:	4690      	mov	r8, r2
   d55a2:	4699      	mov	r9, r3
	// log.trace("deviceRead i2cAddr=%02x addr=%02x bufLen=%u", i2cAddr, addr, bufLen);

	int stat = 0;
	size_t offset = 0;
   d55a4:	2600      	movs	r6, #0

	while(offset < bufLen) {
   d55a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d55a8:	429e      	cmp	r6, r3
   d55aa:	d231      	bcs.n	d5610 <_ZNK8MCP7941010deviceReadEhhPhj+0x78>
		wire.beginTransmission(i2cAddr);
   d55ac:	6860      	ldr	r0, [r4, #4]
   d55ae:	4639      	mov	r1, r7
   d55b0:	f001 fa27 	bl	d6a02 <_ZN7TwoWire17beginTransmissionEh>
		wire.write(addr + offset);
   d55b4:	eb08 0106 	add.w	r1, r8, r6
   d55b8:	6860      	ldr	r0, [r4, #4]
   d55ba:	f7ff fd97 	bl	d50ec <_ZN7TwoWire5writeEj>
		stat = wire.endTransmission(false);
   d55be:	6860      	ldr	r0, [r4, #4]
   d55c0:	2100      	movs	r1, #0
   d55c2:	f001 fa3d 	bl	d6a40 <_ZN7TwoWire15endTransmissionEh>
		if (stat == 0) {
   d55c6:	4605      	mov	r5, r0
   d55c8:	b9d0      	cbnz	r0, d5600 <_ZNK8MCP7941010deviceReadEhhPhj+0x68>
			// Maximum read is 32 because of the limitation of the Wire implementation
			size_t count = bufLen - offset;
   d55ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
				count = 32;
			}

			// log.trace("deviceRead addr=%u count=%u", addr + offset, count);

			count = wire.requestFrom(i2cAddr, count, (uint8_t) true);
   d55cc:	6860      	ldr	r0, [r4, #4]
			size_t count = bufLen - offset;
   d55ce:	1b9a      	subs	r2, r3, r6
			count = wire.requestFrom(i2cAddr, count, (uint8_t) true);
   d55d0:	2a20      	cmp	r2, #32
   d55d2:	f04f 0301 	mov.w	r3, #1
   d55d6:	bf28      	it	cs
   d55d8:	2220      	movcs	r2, #32
   d55da:	4639      	mov	r1, r7
   d55dc:	f001 f9ff 	bl	d69de <_ZN7TwoWire11requestFromEhjh>
   d55e0:	eb09 0b06 	add.w	fp, r9, r6
   d55e4:	4605      	mov	r5, r0
			for(size_t ii = 0; ii < count; ii++) {
   d55e6:	eb0b 0a00 	add.w	sl, fp, r0
   d55ea:	45da      	cmp	sl, fp
   d55ec:	d006      	beq.n	d55fc <_ZNK8MCP7941010deviceReadEhhPhj+0x64>
				buf[ii + offset] = wire.read();
   d55ee:	6860      	ldr	r0, [r4, #4]
   d55f0:	6803      	ldr	r3, [r0, #0]
   d55f2:	695b      	ldr	r3, [r3, #20]
   d55f4:	4798      	blx	r3
   d55f6:	f80b 0b01 	strb.w	r0, [fp], #1
			for(size_t ii = 0; ii < count; ii++) {
   d55fa:	e7f6      	b.n	d55ea <_ZNK8MCP7941010deviceReadEhhPhj+0x52>
			}
			offset += count;
   d55fc:	442e      	add	r6, r5
	while(offset < bufLen) {
   d55fe:	e7d2      	b.n	d55a6 <_ZNK8MCP7941010deviceReadEhhPhj+0xe>
		}
		else {
			log.info("deviceRead failed stat=%d", stat);
   d5600:	4602      	mov	r2, r0
   d5602:	4904      	ldr	r1, [pc, #16]	; (d5614 <_ZNK8MCP7941010deviceReadEhhPhj+0x7c>)
   d5604:	4804      	ldr	r0, [pc, #16]	; (d5618 <_ZNK8MCP7941010deviceReadEhhPhj+0x80>)
   d5606:	f7fe fd9d 	bl	d4144 <_ZNK5spark6Logger4infoEPKcz>
			break;
		}
	}
	return stat;
}
   d560a:	4628      	mov	r0, r5
   d560c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5610:	2500      	movs	r5, #0
	return stat;
   d5612:	e7fa      	b.n	d560a <_ZNK8MCP7941010deviceReadEhhPhj+0x72>
   d5614:	000d8fd4 	.word	0x000d8fd4
   d5618:	2003e6c4 	.word	0x2003e6c4

000d561c <_ZN12MCP79410SRAM8readDataEjPhj>:
bool MCP79410SRAM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d561c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if ((addr + dataLen) > length()) {
   d5620:	eb01 0803 	add.w	r8, r1, r3
bool MCP79410SRAM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d5624:	461e      	mov	r6, r3
	if ((addr + dataLen) > length()) {
   d5626:	6803      	ldr	r3, [r0, #0]
   d5628:	689b      	ldr	r3, [r3, #8]
bool MCP79410SRAM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d562a:	4605      	mov	r5, r0
   d562c:	460c      	mov	r4, r1
   d562e:	4617      	mov	r7, r2
	if ((addr + dataLen) > length()) {
   d5630:	4798      	blx	r3
   d5632:	4580      	cmp	r8, r0
   d5634:	d80d      	bhi.n	d5652 <_ZN12MCP79410SRAM8readDataEjPhj+0x36>
	int stat = parent->deviceRead(MCP79410::REG_I2C_ADDR, MCP79410::REG_SRAM + addr, data, dataLen);
   d5636:	3420      	adds	r4, #32
   d5638:	6868      	ldr	r0, [r5, #4]
   d563a:	9600      	str	r6, [sp, #0]
   d563c:	463b      	mov	r3, r7
   d563e:	b2e2      	uxtb	r2, r4
   d5640:	216f      	movs	r1, #111	; 0x6f
   d5642:	f7ff ffa9 	bl	d5598 <_ZNK8MCP7941010deviceReadEhhPhj>
	return (stat == 0);
   d5646:	fab0 f080 	clz	r0, r0
   d564a:	0940      	lsrs	r0, r0, #5
}
   d564c:	b002      	add	sp, #8
   d564e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return false;
   d5652:	2000      	movs	r0, #0
   d5654:	e7fa      	b.n	d564c <_ZN12MCP79410SRAM8readDataEjPhj+0x30>

000d5656 <_ZN14MCP79410EEPROM8readDataEjPhj>:
bool MCP79410EEPROM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d5656:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if ((addr + dataLen) > length()) {
   d565a:	eb01 0803 	add.w	r8, r1, r3
bool MCP79410EEPROM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d565e:	461e      	mov	r6, r3
	if ((addr + dataLen) > length()) {
   d5660:	6803      	ldr	r3, [r0, #0]
   d5662:	689b      	ldr	r3, [r3, #8]
bool MCP79410EEPROM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d5664:	4604      	mov	r4, r0
   d5666:	460d      	mov	r5, r1
   d5668:	4617      	mov	r7, r2
	if ((addr + dataLen) > length()) {
   d566a:	4798      	blx	r3
   d566c:	4580      	cmp	r8, r0
   d566e:	d80c      	bhi.n	d568a <_ZN14MCP79410EEPROM8readDataEjPhj+0x34>
	int stat = parent->deviceRead(MCP79410::EEPROM_I2C_ADDR, addr, data, dataLen);
   d5670:	6860      	ldr	r0, [r4, #4]
   d5672:	9600      	str	r6, [sp, #0]
   d5674:	463b      	mov	r3, r7
   d5676:	b2ea      	uxtb	r2, r5
   d5678:	2157      	movs	r1, #87	; 0x57
   d567a:	f7ff ff8d 	bl	d5598 <_ZNK8MCP7941010deviceReadEhhPhj>
	return (stat == 0);
   d567e:	fab0 f080 	clz	r0, r0
   d5682:	0940      	lsrs	r0, r0, #5
}
   d5684:	b002      	add	sp, #8
   d5686:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return false;
   d568a:	2000      	movs	r0, #0
   d568c:	e7fa      	b.n	d5684 <_ZN14MCP79410EEPROM8readDataEjPhj+0x2e>

000d568e <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei.part.0>:
int MCP79410::deviceReadTime(uint8_t addr, MCP79410Time &time, int timeMode) const {
   d568e:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
		size_t numBytes = (timeMode == TIME_MODE_RTC) ? 7 : 6;
   d5690:	1e1e      	subs	r6, r3, #0
   d5692:	bf0c      	ite	eq
   d5694:	2307      	moveq	r3, #7
   d5696:	2306      	movne	r3, #6
		stat = deviceRead(REG_I2C_ADDR, addr, buf, numBytes);
   d5698:	9300      	str	r3, [sp, #0]
int MCP79410::deviceReadTime(uint8_t addr, MCP79410Time &time, int timeMode) const {
   d569a:	4614      	mov	r4, r2
		stat = deviceRead(REG_I2C_ADDR, addr, buf, numBytes);
   d569c:	ab02      	add	r3, sp, #8
   d569e:	460a      	mov	r2, r1
   d56a0:	216f      	movs	r1, #111	; 0x6f
   d56a2:	f7ff ff79 	bl	d5598 <_ZNK8MCP7941010deviceReadEhhPhj>
		if (stat == 0) {
   d56a6:	4605      	mov	r5, r0
   d56a8:	b9a8      	cbnz	r0, d56d6 <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei.part.0+0x48>
			time.rawSecond = buf[0];
   d56aa:	f89d 3008 	ldrb.w	r3, [sp, #8]
   d56ae:	7423      	strb	r3, [r4, #16]
			time.rawMinute = buf[1];
   d56b0:	f89d 3009 	ldrb.w	r3, [sp, #9]
   d56b4:	73e3      	strb	r3, [r4, #15]
			time.rawHour = buf[2];
   d56b6:	f89d 300a 	ldrb.w	r3, [sp, #10]
   d56ba:	73a3      	strb	r3, [r4, #14]
			time.rawDayOfWeek = buf[3];
   d56bc:	f89d 300b 	ldrb.w	r3, [sp, #11]
   d56c0:	7363      	strb	r3, [r4, #13]
			time.rawDayOfMonth = buf[4];
   d56c2:	f89d 300c 	ldrb.w	r3, [sp, #12]
   d56c6:	7323      	strb	r3, [r4, #12]
			time.rawMonth = buf[5];
   d56c8:	f89d 300d 	ldrb.w	r3, [sp, #13]
   d56cc:	72e3      	strb	r3, [r4, #11]
			if (timeMode == TIME_MODE_RTC) {
   d56ce:	b92e      	cbnz	r6, d56dc <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei.part.0+0x4e>
				time.rawYear = buf[6];
   d56d0:	f89d 300e 	ldrb.w	r3, [sp, #14]
   d56d4:	72a3      	strb	r3, [r4, #10]
}
   d56d6:	4628      	mov	r0, r5
   d56d8:	b004      	add	sp, #16
   d56da:	bd70      	pop	{r4, r5, r6, pc}
				time.rawYear = MCP79410Time::intToBcd(Time.year());
   d56dc:	f002 f836 	bl	d774c <_ZN9TimeClass4yearEv>
   d56e0:	f7ff fecc 	bl	d547c <_ZN12MCP79410Time8intToBcdEi>
   d56e4:	72a0      	strb	r0, [r4, #10]
	return stat;
   d56e6:	e7f6      	b.n	d56d6 <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei.part.0+0x48>

000d56e8 <_ZNK8MCP7941022deviceReadRegisterByteEh>:
uint8_t MCP79410::deviceReadRegisterByte(uint8_t addr) const {
   d56e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	if (deviceRead(REG_I2C_ADDR, addr, buf, 1) == 0) {
   d56ea:	2301      	movs	r3, #1
uint8_t MCP79410::deviceReadRegisterByte(uint8_t addr) const {
   d56ec:	460a      	mov	r2, r1
	if (deviceRead(REG_I2C_ADDR, addr, buf, 1) == 0) {
   d56ee:	9300      	str	r3, [sp, #0]
   d56f0:	216f      	movs	r1, #111	; 0x6f
   d56f2:	ab03      	add	r3, sp, #12
   d56f4:	f7ff ff50 	bl	d5598 <_ZNK8MCP7941010deviceReadEhhPhj>
   d56f8:	b920      	cbnz	r0, d5704 <_ZNK8MCP7941022deviceReadRegisterByteEh+0x1c>
		return buf[0];
   d56fa:	f89d 000c 	ldrb.w	r0, [sp, #12]
}
   d56fe:	b005      	add	sp, #20
   d5700:	f85d fb04 	ldr.w	pc, [sp], #4
		return 0;
   d5704:	2000      	movs	r0, #0
   d5706:	e7fa      	b.n	d56fe <_ZNK8MCP7941022deviceReadRegisterByteEh+0x16>

000d5708 <_ZNK8MCP7941020getOscillatorRunningEv>:
bool MCP79410::getOscillatorRunning() const {
   d5708:	b508      	push	{r3, lr}
	return (deviceReadRegisterByte(REG_RTCWKDAY) & REG_RTCWKDAY_OSCRUN) != 0;
   d570a:	2103      	movs	r1, #3
   d570c:	f7ff ffec 	bl	d56e8 <_ZNK8MCP7941022deviceReadRegisterByteEh>
}
   d5710:	f3c0 1040 	ubfx	r0, r0, #5, #1
   d5714:	bd08      	pop	{r3, pc}

000d5716 <_ZNK8MCP7941010getRTCTimeER12MCP79410Time>:
bool MCP79410::getRTCTime(MCP79410Time &time) const {
   d5716:	b538      	push	{r3, r4, r5, lr}
   d5718:	2300      	movs	r3, #0
   d571a:	460c      	mov	r4, r1
   d571c:	460a      	mov	r2, r1
   d571e:	4619      	mov	r1, r3
   d5720:	4605      	mov	r5, r0
	if (timeMode == TIME_MODE_RTC || timeMode == TIME_MODE_ALARM) {
   d5722:	f7ff ffb4 	bl	d568e <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei.part.0>
	if (stat == 0) {
   d5726:	b930      	cbnz	r0, d5736 <_ZNK8MCP7941010getRTCTimeER12MCP79410Time+0x20>
		if (time.rawYear > 0 && getOscillatorRunning()) {
   d5728:	7aa3      	ldrb	r3, [r4, #10]
   d572a:	b123      	cbz	r3, d5736 <_ZNK8MCP7941010getRTCTimeER12MCP79410Time+0x20>
   d572c:	4628      	mov	r0, r5
}
   d572e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		if (time.rawYear > 0 && getOscillatorRunning()) {
   d5732:	f7ff bfe9 	b.w	d5708 <_ZNK8MCP7941020getOscillatorRunningEv>
}
   d5736:	2000      	movs	r0, #0
   d5738:	bd38      	pop	{r3, r4, r5, pc}

000d573a <_ZNK8MCP7941010getRTCTimeEv>:
time_t MCP79410::getRTCTime() const {
   d573a:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d573c:	4602      	mov	r2, r0
	MCP79410Time time;
   d573e:	a801      	add	r0, sp, #4
   d5740:	f7ff fe28 	bl	d5394 <_ZN12MCP79410TimeC1Ev>
	bool bResult = getRTCTime(time);
   d5744:	a901      	add	r1, sp, #4
   d5746:	4610      	mov	r0, r2
   d5748:	f7ff ffe5 	bl	d5716 <_ZNK8MCP7941010getRTCTimeER12MCP79410Time>
	if (bResult) {
   d574c:	b128      	cbz	r0, d575a <_ZNK8MCP7941010getRTCTimeEv+0x20>
		return time.toUnixTime();
   d574e:	a801      	add	r0, sp, #4
   d5750:	f7ff fe6c 	bl	d542c <_ZNK12MCP79410Time10toUnixTimeEv>
}
   d5754:	b007      	add	sp, #28
   d5756:	f85d fb04 	ldr.w	pc, [sp], #4
		return 0;
   d575a:	2000      	movs	r0, #0
   d575c:	4601      	mov	r1, r0
   d575e:	e7f9      	b.n	d5754 <_ZNK8MCP7941010getRTCTimeEv+0x1a>

000d5760 <_ZN8MCP794105setupEv>:
void MCP79410::setup() {
   d5760:	b5d0      	push	{r4, r6, r7, lr}
   d5762:	4604      	mov	r4, r0
   d5764:	b086      	sub	sp, #24
	wire.begin();
   d5766:	6840      	ldr	r0, [r0, #4]
   d5768:	f001 f91c 	bl	d69a4 <_ZN7TwoWire5beginEv>
	if (!Time.isValid()) {
   d576c:	f001 ffc0 	bl	d76f0 <_ZN9TimeClass7isValidEv>
   d5770:	b9e8      	cbnz	r0, d57ae <_ZN8MCP794105setupEv+0x4e>
		if ((timeSyncMode & TIME_SYNC_RTC_TO_TIME) != 0) {
   d5772:	7ae3      	ldrb	r3, [r4, #11]
   d5774:	079b      	lsls	r3, r3, #30
   d5776:	d51a      	bpl.n	d57ae <_ZN8MCP794105setupEv+0x4e>
			time_t rtcTime = getRTCTime();
   d5778:	4620      	mov	r0, r4
   d577a:	f7ff ffde 	bl	d573a <_ZNK8MCP7941010getRTCTimeEv>
   d577e:	4606      	mov	r6, r0
   d5780:	460f      	mov	r7, r1
			if (rtcTime != 0) {
   d5782:	ea56 0307 	orrs.w	r3, r6, r7
   d5786:	d012      	beq.n	d57ae <_ZN8MCP794105setupEv+0x4e>
				Time.setTime(rtcTime);
   d5788:	f001 feb8 	bl	d74fc <_ZN9TimeClass7setTimeEx>
				log.info("set Time from RTC %s", Time.format(rtcTime, TIME_FORMAT_DEFAULT).c_str());
   d578c:	4b0a      	ldr	r3, [pc, #40]	; (d57b8 <_ZN8MCP794105setupEv+0x58>)
   d578e:	490b      	ldr	r1, [pc, #44]	; (d57bc <_ZN8MCP794105setupEv+0x5c>)
   d5790:	681b      	ldr	r3, [r3, #0]
   d5792:	9300      	str	r3, [sp, #0]
   d5794:	4632      	mov	r2, r6
   d5796:	463b      	mov	r3, r7
   d5798:	a802      	add	r0, sp, #8
   d579a:	f001 ff67 	bl	d766c <_ZN9TimeClass6formatExPKc>
   d579e:	4808      	ldr	r0, [pc, #32]	; (d57c0 <_ZN8MCP794105setupEv+0x60>)
   d57a0:	9a02      	ldr	r2, [sp, #8]
   d57a2:	4908      	ldr	r1, [pc, #32]	; (d57c4 <_ZN8MCP794105setupEv+0x64>)
   d57a4:	f7fe fcce 	bl	d4144 <_ZNK5spark6Logger4infoEPKcz>
   d57a8:	a802      	add	r0, sp, #8
   d57aa:	f001 fc43 	bl	d7034 <_ZN6StringD1Ev>
	setupDone = true;
   d57ae:	2301      	movs	r3, #1
   d57b0:	7223      	strb	r3, [r4, #8]
}
   d57b2:	b006      	add	sp, #24
   d57b4:	bdd0      	pop	{r4, r6, r7, pc}
   d57b6:	bf00      	nop
   d57b8:	2003e4b4 	.word	0x2003e4b4
   d57bc:	2003e730 	.word	0x2003e730
   d57c0:	2003e6c4 	.word	0x2003e6c4
   d57c4:	000d8fee 	.word	0x000d8fee

000d57c8 <_ZN8MCP7941011deviceWriteEhhPKhj>:

int MCP79410::deviceWrite(uint8_t i2cAddr, uint8_t addr, const uint8_t *buf, size_t bufLen) {
   d57c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d57cc:	4606      	mov	r6, r0
   d57ce:	4688      	mov	r8, r1
   d57d0:	4691      	mov	r9, r2
   d57d2:	469a      	mov	sl, r3
	// log.trace("deviceWrite i2cAddr=%02x addr=%02x bufLen=%u", i2cAddr, addr, bufLen);

	int stat = 0;
	size_t offset = 0;
   d57d4:	2500      	movs	r5, #0

	while(offset < bufLen) {
   d57d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d57d8:	429d      	cmp	r5, r3
   d57da:	d229      	bcs.n	d5830 <_ZN8MCP7941011deviceWriteEhhPKhj+0x68>
		wire.beginTransmission(i2cAddr);
   d57dc:	6870      	ldr	r0, [r6, #4]
   d57de:	4641      	mov	r1, r8
   d57e0:	f001 f90f 	bl	d6a02 <_ZN7TwoWire17beginTransmissionEh>
		wire.write(addr + offset);
   d57e4:	6870      	ldr	r0, [r6, #4]
   d57e6:	eb09 0105 	add.w	r1, r9, r5
   d57ea:	f7ff fc7f 	bl	d50ec <_ZN7TwoWire5writeEj>

		// Maximum write is 31, not 32, because of the address byte
		size_t count = bufLen - offset;
   d57ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d57f0:	1b5f      	subs	r7, r3, r5
		if (count > 31) {
   d57f2:	2f1f      	cmp	r7, #31
   d57f4:	bf28      	it	cs
   d57f6:	271f      	movcs	r7, #31
			count = 31;
		}

		// log.trace("deviceWrite addr=%u count=%u", addr + offset, count);

		for(size_t ii = 0; ii < count; ii++) {
   d57f8:	eb0a 0405 	add.w	r4, sl, r5
   d57fc:	eb07 0b04 	add.w	fp, r7, r4
			wire.write(buf[ii + offset]);
   d5800:	6870      	ldr	r0, [r6, #4]
   d5802:	f814 1b01 	ldrb.w	r1, [r4], #1
   d5806:	6802      	ldr	r2, [r0, #0]
   d5808:	6892      	ldr	r2, [r2, #8]
   d580a:	4790      	blx	r2
		for(size_t ii = 0; ii < count; ii++) {
   d580c:	45a3      	cmp	fp, r4
   d580e:	d1f7      	bne.n	d5800 <_ZN8MCP7941011deviceWriteEhhPKhj+0x38>
		}

		stat = wire.endTransmission(true);
   d5810:	6870      	ldr	r0, [r6, #4]
   d5812:	2101      	movs	r1, #1
   d5814:	f001 f914 	bl	d6a40 <_ZN7TwoWire15endTransmissionEh>
		if (stat != 0) {
   d5818:	4604      	mov	r4, r0
   d581a:	b138      	cbz	r0, d582c <_ZN8MCP7941011deviceWriteEhhPKhj+0x64>
			log.info("deviceWrite failed stat=%d", stat);
   d581c:	4602      	mov	r2, r0
   d581e:	4905      	ldr	r1, [pc, #20]	; (d5834 <_ZN8MCP7941011deviceWriteEhhPKhj+0x6c>)
   d5820:	4805      	ldr	r0, [pc, #20]	; (d5838 <_ZN8MCP7941011deviceWriteEhhPKhj+0x70>)
   d5822:	f7fe fc8f 	bl	d4144 <_ZNK5spark6Logger4infoEPKcz>

		offset += count;
	}

	return stat;
}
   d5826:	4620      	mov	r0, r4
   d5828:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		offset += count;
   d582c:	443d      	add	r5, r7
	while(offset < bufLen) {
   d582e:	e7d2      	b.n	d57d6 <_ZN8MCP7941011deviceWriteEhhPKhj+0xe>
   d5830:	2400      	movs	r4, #0
	return stat;
   d5832:	e7f8      	b.n	d5826 <_ZN8MCP7941011deviceWriteEhhPKhj+0x5e>
   d5834:	000d9003 	.word	0x000d9003
   d5838:	2003e6c4 	.word	0x2003e6c4

000d583c <_ZN12MCP79410SRAM9writeDataEjPKhj>:
bool MCP79410SRAM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d583c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if ((addr + dataLen) > length()) {
   d5840:	eb01 0803 	add.w	r8, r1, r3
bool MCP79410SRAM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d5844:	461e      	mov	r6, r3
	if ((addr + dataLen) > length()) {
   d5846:	6803      	ldr	r3, [r0, #0]
   d5848:	689b      	ldr	r3, [r3, #8]
bool MCP79410SRAM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d584a:	4605      	mov	r5, r0
   d584c:	460c      	mov	r4, r1
   d584e:	4617      	mov	r7, r2
	if ((addr + dataLen) > length()) {
   d5850:	4798      	blx	r3
   d5852:	4580      	cmp	r8, r0
   d5854:	d80d      	bhi.n	d5872 <_ZN12MCP79410SRAM9writeDataEjPKhj+0x36>
	int stat = parent->deviceWrite(MCP79410::REG_I2C_ADDR, MCP79410::REG_SRAM + addr, data, dataLen);
   d5856:	3420      	adds	r4, #32
   d5858:	6868      	ldr	r0, [r5, #4]
   d585a:	9600      	str	r6, [sp, #0]
   d585c:	463b      	mov	r3, r7
   d585e:	b2e2      	uxtb	r2, r4
   d5860:	216f      	movs	r1, #111	; 0x6f
   d5862:	f7ff ffb1 	bl	d57c8 <_ZN8MCP7941011deviceWriteEhhPKhj>
	return (stat == 0);
   d5866:	fab0 f080 	clz	r0, r0
   d586a:	0940      	lsrs	r0, r0, #5
}
   d586c:	b002      	add	sp, #8
   d586e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return false;
   d5872:	2000      	movs	r0, #0
   d5874:	e7fa      	b.n	d586c <_ZN12MCP79410SRAM9writeDataEjPKhj+0x30>

000d5876 <_ZN8MCP7941018deviceWriteRTCTimeEhRK12MCP79410Time>:
int MCP79410::deviceWriteRTCTime(uint8_t addr, const MCP79410Time &time) {
   d5876:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	buf[0] = time.rawSecond;
   d5878:	7c13      	ldrb	r3, [r2, #16]
   d587a:	f88d 3008 	strb.w	r3, [sp, #8]
	buf[1] = time.rawMinute;
   d587e:	7bd3      	ldrb	r3, [r2, #15]
   d5880:	f88d 3009 	strb.w	r3, [sp, #9]
	buf[2] = time.rawHour;
   d5884:	7b93      	ldrb	r3, [r2, #14]
   d5886:	f88d 300a 	strb.w	r3, [sp, #10]
	buf[3] = time.rawDayOfWeek;
   d588a:	7b53      	ldrb	r3, [r2, #13]
   d588c:	f88d 300b 	strb.w	r3, [sp, #11]
	buf[4] = time.rawDayOfMonth;
   d5890:	7b13      	ldrb	r3, [r2, #12]
   d5892:	f88d 300c 	strb.w	r3, [sp, #12]
	buf[5] = time.rawMonth;
   d5896:	7ad3      	ldrb	r3, [r2, #11]
   d5898:	f88d 300d 	strb.w	r3, [sp, #13]
	buf[6] = time.rawYear;
   d589c:	7a93      	ldrb	r3, [r2, #10]
   d589e:	f88d 300e 	strb.w	r3, [sp, #14]
	return deviceWrite(REG_I2C_ADDR, addr, buf, sizeof(buf));
   d58a2:	2307      	movs	r3, #7
   d58a4:	9300      	str	r3, [sp, #0]
   d58a6:	460a      	mov	r2, r1
   d58a8:	ab02      	add	r3, sp, #8
   d58aa:	216f      	movs	r1, #111	; 0x6f
   d58ac:	f7ff ff8c 	bl	d57c8 <_ZN8MCP7941011deviceWriteEhhPKhj>
}
   d58b0:	b005      	add	sp, #20
   d58b2:	f85d fb04 	ldr.w	pc, [sp], #4

000d58b6 <_ZN8MCP7941010setRTCTimeEx>:
bool MCP79410::setRTCTime(time_t unixTime) {
   d58b6:	b510      	push	{r4, lr}
   d58b8:	b088      	sub	sp, #32
   d58ba:	4604      	mov	r4, r0
	MCP79410Time time;
   d58bc:	a803      	add	r0, sp, #12
bool MCP79410::setRTCTime(time_t unixTime) {
   d58be:	9301      	str	r3, [sp, #4]
	MCP79410Time time;
   d58c0:	f7ff fd68 	bl	d5394 <_ZN12MCP79410TimeC1Ev>
	time.fromUnixTime(unixTime);
   d58c4:	9b01      	ldr	r3, [sp, #4]
   d58c6:	a803      	add	r0, sp, #12
   d58c8:	f7ff fe27 	bl	d551a <_ZN12MCP79410Time12fromUnixTimeEx>
	time.rawSecond |= REG_DATE_RTCSEC_ST;
   d58cc:	f89d 301c 	ldrb.w	r3, [sp, #28]
	if (batteryEnable) {
   d58d0:	7aa2      	ldrb	r2, [r4, #10]
	time.rawSecond |= REG_DATE_RTCSEC_ST;
   d58d2:	f063 037f 	orn	r3, r3, #127	; 0x7f
   d58d6:	f88d 301c 	strb.w	r3, [sp, #28]
	if (batteryEnable) {
   d58da:	f89d 3019 	ldrb.w	r3, [sp, #25]
   d58de:	b16a      	cbz	r2, d58fc <_ZN8MCP7941010setRTCTimeEx+0x46>
		time.rawDayOfWeek |= REG_RTCWKDAY_VBATEN;
   d58e0:	f043 0308 	orr.w	r3, r3, #8
	return deviceWriteRTCTime(REG_DATE_TIME, time) == 0;
   d58e4:	aa03      	add	r2, sp, #12
   d58e6:	2100      	movs	r1, #0
   d58e8:	4620      	mov	r0, r4
   d58ea:	f88d 3019 	strb.w	r3, [sp, #25]
   d58ee:	f7ff ffc2 	bl	d5876 <_ZN8MCP7941018deviceWriteRTCTimeEhRK12MCP79410Time>
}
   d58f2:	fab0 f080 	clz	r0, r0
   d58f6:	0940      	lsrs	r0, r0, #5
   d58f8:	b008      	add	sp, #32
   d58fa:	bd10      	pop	{r4, pc}
		time.rawDayOfWeek &= ~REG_RTCWKDAY_VBATEN;
   d58fc:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
   d5900:	e7f0      	b.n	d58e4 <_ZN8MCP7941010setRTCTimeEx+0x2e>
	...

000d5904 <_ZN8MCP7941015setRTCFromCloudEv>:
bool MCP79410::setRTCFromCloud() {
   d5904:	b5f0      	push	{r4, r5, r6, r7, lr}
   d5906:	b087      	sub	sp, #28
   d5908:	4605      	mov	r5, r0
	if (Time.isValid()) {
   d590a:	f001 fef1 	bl	d76f0 <_ZN9TimeClass7isValidEv>
   d590e:	4604      	mov	r4, r0
   d5910:	b1e8      	cbz	r0, d594e <_ZN8MCP7941015setRTCFromCloudEv+0x4a>
		time_t now = Time.now();
   d5912:	f001 ff0a 	bl	d772a <_ZN9TimeClass3nowEv>
   d5916:	17c7      	asrs	r7, r0, #31
		bResult = setRTCTime(now);
   d5918:	4602      	mov	r2, r0
		time_t now = Time.now();
   d591a:	4606      	mov	r6, r0
		bResult = setRTCTime(now);
   d591c:	463b      	mov	r3, r7
   d591e:	4628      	mov	r0, r5
   d5920:	f7ff ffc9 	bl	d58b6 <_ZN8MCP7941010setRTCTimeEx>
		log.info("set RTC from cloud %s", Time.format(now, TIME_FORMAT_DEFAULT).c_str());
   d5924:	4b0c      	ldr	r3, [pc, #48]	; (d5958 <_ZN8MCP7941015setRTCFromCloudEv+0x54>)
   d5926:	490d      	ldr	r1, [pc, #52]	; (d595c <_ZN8MCP7941015setRTCFromCloudEv+0x58>)
   d5928:	681b      	ldr	r3, [r3, #0]
   d592a:	9300      	str	r3, [sp, #0]
   d592c:	4632      	mov	r2, r6
   d592e:	463b      	mov	r3, r7
		bResult = setRTCTime(now);
   d5930:	4604      	mov	r4, r0
		log.info("set RTC from cloud %s", Time.format(now, TIME_FORMAT_DEFAULT).c_str());
   d5932:	a802      	add	r0, sp, #8
   d5934:	f001 fe9a 	bl	d766c <_ZN9TimeClass6formatExPKc>
   d5938:	4809      	ldr	r0, [pc, #36]	; (d5960 <_ZN8MCP7941015setRTCFromCloudEv+0x5c>)
   d593a:	9a02      	ldr	r2, [sp, #8]
   d593c:	4909      	ldr	r1, [pc, #36]	; (d5964 <_ZN8MCP7941015setRTCFromCloudEv+0x60>)
   d593e:	f7fe fc01 	bl	d4144 <_ZNK5spark6Logger4infoEPKcz>
   d5942:	a802      	add	r0, sp, #8
   d5944:	f001 fb76 	bl	d7034 <_ZN6StringD1Ev>
}
   d5948:	4620      	mov	r0, r4
   d594a:	b007      	add	sp, #28
   d594c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		log.info("cloud time not valid");
   d594e:	4906      	ldr	r1, [pc, #24]	; (d5968 <_ZN8MCP7941015setRTCFromCloudEv+0x64>)
   d5950:	4803      	ldr	r0, [pc, #12]	; (d5960 <_ZN8MCP7941015setRTCFromCloudEv+0x5c>)
   d5952:	f7fe fbf7 	bl	d4144 <_ZNK5spark6Logger4infoEPKcz>
   d5956:	e7f7      	b.n	d5948 <_ZN8MCP7941015setRTCFromCloudEv+0x44>
   d5958:	2003e4b4 	.word	0x2003e4b4
   d595c:	2003e730 	.word	0x2003e730
   d5960:	2003e6c4 	.word	0x2003e6c4
   d5964:	000d901e 	.word	0x000d901e
   d5968:	000d9034 	.word	0x000d9034

000d596c <_ZN8MCP794104loopEv>:
void MCP79410::loop() {
   d596c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (!timeSet) {
   d596e:	7a45      	ldrb	r5, [r0, #9]
void MCP79410::loop() {
   d5970:	4604      	mov	r4, r0
	if (!timeSet) {
   d5972:	b99d      	cbnz	r5, d599c <_ZN8MCP794104loopEv+0x30>
		if (Time.isValid()) {
   d5974:	f001 febc 	bl	d76f0 <_ZN9TimeClass7isValidEv>
   d5978:	b180      	cbz	r0, d599c <_ZN8MCP794104loopEv+0x30>
        tm = 0;
   d597a:	2200      	movs	r2, #0
   d597c:	2300      	movs	r3, #0
        return spark_sync_time_last(nullptr, &tm);
   d597e:	4669      	mov	r1, sp
   d5980:	4628      	mov	r0, r5
        tm = 0;
   d5982:	e9cd 2300 	strd	r2, r3, [sp]
        return spark_sync_time_last(nullptr, &tm);
   d5986:	f000 fa9d 	bl	d5ec4 <spark_sync_time_last>
			if (lastSync != 0) {
   d598a:	b138      	cbz	r0, d599c <_ZN8MCP794104loopEv+0x30>
				if ((timeSyncMode & TIME_SYNC_CLOUD_TO_RTC) != 0) {
   d598c:	7ae3      	ldrb	r3, [r4, #11]
   d598e:	07db      	lsls	r3, r3, #31
   d5990:	d502      	bpl.n	d5998 <_ZN8MCP794104loopEv+0x2c>
					setRTCFromCloud();
   d5992:	4620      	mov	r0, r4
   d5994:	f7ff ffb6 	bl	d5904 <_ZN8MCP7941015setRTCFromCloudEv>
				timeSet = true;
   d5998:	2301      	movs	r3, #1
   d599a:	7263      	strb	r3, [r4, #9]
}
   d599c:	b003      	add	sp, #12
   d599e:	bd30      	pop	{r4, r5, pc}

000d59a0 <_ZN8MCP7941013waitForEEPROMEv>:
	}

	return stat;
}

void MCP79410::waitForEEPROM() {
   d59a0:	b538      	push	{r3, r4, r5, lr}
   d59a2:	4604      	mov	r4, r0
   d59a4:	2532      	movs	r5, #50	; 0x32
	for(size_t tries = 0; tries < 50; tries++) {
		wire.beginTransmission(EEPROM_I2C_ADDR);
   d59a6:	6860      	ldr	r0, [r4, #4]
   d59a8:	2157      	movs	r1, #87	; 0x57
   d59aa:	f001 f82a 	bl	d6a02 <_ZN7TwoWire17beginTransmissionEh>
		int stat = wire.endTransmission(true);
   d59ae:	6860      	ldr	r0, [r4, #4]
   d59b0:	2101      	movs	r1, #1
   d59b2:	f001 f845 	bl	d6a40 <_ZN7TwoWire15endTransmissionEh>
		if (stat == 0) {
   d59b6:	b108      	cbz	r0, d59bc <_ZN8MCP7941013waitForEEPROMEv+0x1c>
	for(size_t tries = 0; tries < 50; tries++) {
   d59b8:	3d01      	subs	r5, #1
   d59ba:	d1f4      	bne.n	d59a6 <_ZN8MCP7941013waitForEEPROMEv+0x6>
			// log.trace("deviceWriteEEPROM got ack after %u tries", tries);
			break;
		}
	}
}
   d59bc:	bd38      	pop	{r3, r4, r5, pc}
	...

000d59c0 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj>:
int MCP79410::deviceWriteEEPROM(uint8_t addr, const uint8_t *buf, size_t bufLen) {
   d59c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d59c4:	4604      	mov	r4, r0
   d59c6:	460f      	mov	r7, r1
   d59c8:	4616      	mov	r6, r2
   d59ca:	eb02 0803 	add.w	r8, r2, r3
	while(offset < bufLen) {
   d59ce:	45b0      	cmp	r8, r6
   d59d0:	d020      	beq.n	d5a14 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x54>
		wire.beginTransmission(EEPROM_I2C_ADDR);
   d59d2:	6860      	ldr	r0, [r4, #4]
   d59d4:	2157      	movs	r1, #87	; 0x57
   d59d6:	f001 f814 	bl	d6a02 <_ZN7TwoWire17beginTransmissionEh>
		wire.write(addr + offset);
   d59da:	4639      	mov	r1, r7
   d59dc:	6860      	ldr	r0, [r4, #4]
   d59de:	f7ff fb85 	bl	d50ec <_ZN7TwoWire5writeEj>
			wire.write(buf[ii + offset]);
   d59e2:	6860      	ldr	r0, [r4, #4]
   d59e4:	f816 1b01 	ldrb.w	r1, [r6], #1
   d59e8:	6803      	ldr	r3, [r0, #0]
   d59ea:	689b      	ldr	r3, [r3, #8]
   d59ec:	4798      	blx	r3
		stat = wire.endTransmission(true);
   d59ee:	6860      	ldr	r0, [r4, #4]
   d59f0:	2101      	movs	r1, #1
   d59f2:	f001 f825 	bl	d6a40 <_ZN7TwoWire15endTransmissionEh>
		if (stat != 0) {
   d59f6:	3701      	adds	r7, #1
   d59f8:	4605      	mov	r5, r0
   d59fa:	b138      	cbz	r0, d5a0c <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x4c>
			log.info("deviceWriteEEPROM failed stat=%d", stat);
   d59fc:	4602      	mov	r2, r0
   d59fe:	4906      	ldr	r1, [pc, #24]	; (d5a18 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x58>)
   d5a00:	4806      	ldr	r0, [pc, #24]	; (d5a1c <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x5c>)
   d5a02:	f7fe fb9f 	bl	d4144 <_ZNK5spark6Logger4infoEPKcz>
}
   d5a06:	4628      	mov	r0, r5
   d5a08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		waitForEEPROM();
   d5a0c:	4620      	mov	r0, r4
   d5a0e:	f7ff ffc7 	bl	d59a0 <_ZN8MCP7941013waitForEEPROMEv>
	while(offset < bufLen) {
   d5a12:	e7dc      	b.n	d59ce <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0xe>
   d5a14:	2500      	movs	r5, #0
	return stat;
   d5a16:	e7f6      	b.n	d5a06 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x46>
   d5a18:	000d9049 	.word	0x000d9049
   d5a1c:	2003e6c4 	.word	0x2003e6c4

000d5a20 <_ZN14MCP79410EEPROM9writeDataEjPKhj>:
bool MCP79410EEPROM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d5a20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if ((addr + dataLen) > length()) {
   d5a22:	18cf      	adds	r7, r1, r3
bool MCP79410EEPROM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d5a24:	461e      	mov	r6, r3
	if ((addr + dataLen) > length()) {
   d5a26:	6803      	ldr	r3, [r0, #0]
bool MCP79410EEPROM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d5a28:	9201      	str	r2, [sp, #4]
	if ((addr + dataLen) > length()) {
   d5a2a:	689b      	ldr	r3, [r3, #8]
bool MCP79410EEPROM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d5a2c:	4604      	mov	r4, r0
   d5a2e:	460d      	mov	r5, r1
	if ((addr + dataLen) > length()) {
   d5a30:	4798      	blx	r3
   d5a32:	4287      	cmp	r7, r0
   d5a34:	d80a      	bhi.n	d5a4c <_ZN14MCP79410EEPROM9writeDataEjPKhj+0x2c>
	int stat = parent->deviceWriteEEPROM(addr, data, dataLen);
   d5a36:	9a01      	ldr	r2, [sp, #4]
   d5a38:	6860      	ldr	r0, [r4, #4]
   d5a3a:	4633      	mov	r3, r6
   d5a3c:	b2e9      	uxtb	r1, r5
   d5a3e:	f7ff ffbf 	bl	d59c0 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj>
	return (stat == 0);
   d5a42:	fab0 f080 	clz	r0, r0
   d5a46:	0940      	lsrs	r0, r0, #5
}
   d5a48:	b003      	add	sp, #12
   d5a4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return false;
   d5a4c:	2000      	movs	r0, #0
   d5a4e:	e7fb      	b.n	d5a48 <_ZN14MCP79410EEPROM9writeDataEjPKhj+0x28>

000d5a50 <_GLOBAL__sub_I__ZN18MCP79410MemoryBaseC2EP8MCP79410>:
        name_(name) {
   d5a50:	4b01      	ldr	r3, [pc, #4]	; (d5a58 <_GLOBAL__sub_I__ZN18MCP79410MemoryBaseC2EP8MCP79410+0x8>)
   d5a52:	4a02      	ldr	r2, [pc, #8]	; (d5a5c <_GLOBAL__sub_I__ZN18MCP79410MemoryBaseC2EP8MCP79410+0xc>)
   d5a54:	601a      	str	r2, [r3, #0]
}
   d5a56:	4770      	bx	lr
   d5a58:	2003e6c4 	.word	0x2003e6c4
   d5a5c:	000d906a 	.word	0x000d906a

000d5a60 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d5a60:	b508      	push	{r3, lr}
   d5a62:	4b02      	ldr	r3, [pc, #8]	; (d5a6c <os_mutex_recursive_create+0xc>)
   d5a64:	681b      	ldr	r3, [r3, #0]
   d5a66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5a68:	9301      	str	r3, [sp, #4]
   d5a6a:	bd08      	pop	{r3, pc}
   d5a6c:	00030248 	.word	0x00030248

000d5a70 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d5a70:	b508      	push	{r3, lr}
   d5a72:	4b02      	ldr	r3, [pc, #8]	; (d5a7c <os_mutex_recursive_destroy+0xc>)
   d5a74:	681b      	ldr	r3, [r3, #0]
   d5a76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d5a78:	9301      	str	r3, [sp, #4]
   d5a7a:	bd08      	pop	{r3, pc}
   d5a7c:	00030248 	.word	0x00030248

000d5a80 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d5a80:	b508      	push	{r3, lr}
   d5a82:	4b02      	ldr	r3, [pc, #8]	; (d5a8c <HAL_RNG_GetRandomNumber+0xc>)
   d5a84:	681b      	ldr	r3, [r3, #0]
   d5a86:	685b      	ldr	r3, [r3, #4]
   d5a88:	9301      	str	r3, [sp, #4]
   d5a8a:	bd08      	pop	{r3, pc}
   d5a8c:	00030218 	.word	0x00030218

000d5a90 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d5a90:	b508      	push	{r3, lr}
   d5a92:	4b02      	ldr	r3, [pc, #8]	; (d5a9c <HAL_Delay_Microseconds+0xc>)
   d5a94:	681b      	ldr	r3, [r3, #0]
   d5a96:	68db      	ldr	r3, [r3, #12]
   d5a98:	9301      	str	r3, [sp, #4]
   d5a9a:	bd08      	pop	{r3, pc}
   d5a9c:	00030218 	.word	0x00030218

000d5aa0 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d5aa0:	b508      	push	{r3, lr}
   d5aa2:	4b02      	ldr	r3, [pc, #8]	; (d5aac <HAL_Timer_Get_Milli_Seconds+0xc>)
   d5aa4:	681b      	ldr	r3, [r3, #0]
   d5aa6:	695b      	ldr	r3, [r3, #20]
   d5aa8:	9301      	str	r3, [sp, #4]
   d5aaa:	bd08      	pop	{r3, pc}
   d5aac:	00030218 	.word	0x00030218

000d5ab0 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   d5ab0:	b508      	push	{r3, lr}
   d5ab2:	4b02      	ldr	r3, [pc, #8]	; (d5abc <hal_rtc_time_is_valid+0xc>)
   d5ab4:	681b      	ldr	r3, [r3, #0]
   d5ab6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d5ab8:	9301      	str	r3, [sp, #4]
   d5aba:	bd08      	pop	{r3, pc}
   d5abc:	00030218 	.word	0x00030218

000d5ac0 <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   d5ac0:	b508      	push	{r3, lr}
   d5ac2:	4b02      	ldr	r3, [pc, #8]	; (d5acc <hal_rtc_get_time+0xc>)
   d5ac4:	681b      	ldr	r3, [r3, #0]
   d5ac6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   d5ac8:	9301      	str	r3, [sp, #4]
   d5aca:	bd08      	pop	{r3, pc}
   d5acc:	00030218 	.word	0x00030218

000d5ad0 <hal_rtc_set_time>:
DYNALIB_FN(BASE_IDX + 24, hal, hal_rtc_set_time, int(const struct timeval*, void*))
   d5ad0:	b508      	push	{r3, lr}
   d5ad2:	4b02      	ldr	r3, [pc, #8]	; (d5adc <hal_rtc_set_time+0xc>)
   d5ad4:	681b      	ldr	r3, [r3, #0]
   d5ad6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   d5ad8:	9301      	str	r3, [sp, #4]
   d5ada:	bd08      	pop	{r3, pc}
   d5adc:	00030218 	.word	0x00030218

000d5ae0 <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d5ae0:	b508      	push	{r3, lr}
   d5ae2:	4b02      	ldr	r3, [pc, #8]	; (d5aec <HAL_Validate_Pin_Function+0xc>)
   d5ae4:	681b      	ldr	r3, [r3, #0]
   d5ae6:	685b      	ldr	r3, [r3, #4]
   d5ae8:	9301      	str	r3, [sp, #4]
   d5aea:	bd08      	pop	{r3, pc}
   d5aec:	0003022c 	.word	0x0003022c

000d5af0 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d5af0:	b508      	push	{r3, lr}
   d5af2:	4b02      	ldr	r3, [pc, #8]	; (d5afc <HAL_Pin_Mode+0xc>)
   d5af4:	681b      	ldr	r3, [r3, #0]
   d5af6:	689b      	ldr	r3, [r3, #8]
   d5af8:	9301      	str	r3, [sp, #4]
   d5afa:	bd08      	pop	{r3, pc}
   d5afc:	0003022c 	.word	0x0003022c

000d5b00 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d5b00:	b508      	push	{r3, lr}
   d5b02:	4b02      	ldr	r3, [pc, #8]	; (d5b0c <HAL_Get_Pin_Mode+0xc>)
   d5b04:	681b      	ldr	r3, [r3, #0]
   d5b06:	68db      	ldr	r3, [r3, #12]
   d5b08:	9301      	str	r3, [sp, #4]
   d5b0a:	bd08      	pop	{r3, pc}
   d5b0c:	0003022c 	.word	0x0003022c

000d5b10 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d5b10:	b508      	push	{r3, lr}
   d5b12:	4b02      	ldr	r3, [pc, #8]	; (d5b1c <HAL_GPIO_Write+0xc>)
   d5b14:	681b      	ldr	r3, [r3, #0]
   d5b16:	691b      	ldr	r3, [r3, #16]
   d5b18:	9301      	str	r3, [sp, #4]
   d5b1a:	bd08      	pop	{r3, pc}
   d5b1c:	0003022c 	.word	0x0003022c

000d5b20 <HAL_Interrupts_Attach>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   d5b20:	b508      	push	{r3, lr}
   d5b22:	4b02      	ldr	r3, [pc, #8]	; (d5b2c <HAL_Interrupts_Attach+0xc>)
   d5b24:	681b      	ldr	r3, [r3, #0]
   d5b26:	699b      	ldr	r3, [r3, #24]
   d5b28:	9301      	str	r3, [sp, #4]
   d5b2a:	bd08      	pop	{r3, pc}
   d5b2c:	0003022c 	.word	0x0003022c

000d5b30 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   d5b30:	b508      	push	{r3, lr}
   d5b32:	4b02      	ldr	r3, [pc, #8]	; (d5b3c <HAL_Interrupts_Detach+0xc>)
   d5b34:	681b      	ldr	r3, [r3, #0]
   d5b36:	69db      	ldr	r3, [r3, #28]
   d5b38:	9301      	str	r3, [sp, #4]
   d5b3a:	bd08      	pop	{r3, pc}
   d5b3c:	0003022c 	.word	0x0003022c

000d5b40 <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   d5b40:	b508      	push	{r3, lr}
   d5b42:	4b02      	ldr	r3, [pc, #8]	; (d5b4c <hal_adc_read+0xc>)
   d5b44:	681b      	ldr	r3, [r3, #0]
   d5b46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5b48:	9301      	str	r3, [sp, #4]
   d5b4a:	bd08      	pop	{r3, pc}
   d5b4c:	0003022c 	.word	0x0003022c

000d5b50 <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   d5b50:	b508      	push	{r3, lr}
   d5b52:	4b02      	ldr	r3, [pc, #8]	; (d5b5c <hal_i2c_begin+0xc>)
   d5b54:	681b      	ldr	r3, [r3, #0]
   d5b56:	68db      	ldr	r3, [r3, #12]
   d5b58:	9301      	str	r3, [sp, #4]
   d5b5a:	bd08      	pop	{r3, pc}
   d5b5c:	00030228 	.word	0x00030228

000d5b60 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   d5b60:	b508      	push	{r3, lr}
   d5b62:	4b02      	ldr	r3, [pc, #8]	; (d5b6c <hal_i2c_begin_transmission+0xc>)
   d5b64:	681b      	ldr	r3, [r3, #0]
   d5b66:	699b      	ldr	r3, [r3, #24]
   d5b68:	9301      	str	r3, [sp, #4]
   d5b6a:	bd08      	pop	{r3, pc}
   d5b6c:	00030228 	.word	0x00030228

000d5b70 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   d5b70:	b508      	push	{r3, lr}
   d5b72:	4b02      	ldr	r3, [pc, #8]	; (d5b7c <hal_i2c_end_transmission+0xc>)
   d5b74:	681b      	ldr	r3, [r3, #0]
   d5b76:	69db      	ldr	r3, [r3, #28]
   d5b78:	9301      	str	r3, [sp, #4]
   d5b7a:	bd08      	pop	{r3, pc}
   d5b7c:	00030228 	.word	0x00030228

000d5b80 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d5b80:	b508      	push	{r3, lr}
   d5b82:	4b02      	ldr	r3, [pc, #8]	; (d5b8c <hal_i2c_write+0xc>)
   d5b84:	681b      	ldr	r3, [r3, #0]
   d5b86:	6a1b      	ldr	r3, [r3, #32]
   d5b88:	9301      	str	r3, [sp, #4]
   d5b8a:	bd08      	pop	{r3, pc}
   d5b8c:	00030228 	.word	0x00030228

000d5b90 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d5b90:	b508      	push	{r3, lr}
   d5b92:	4b02      	ldr	r3, [pc, #8]	; (d5b9c <hal_i2c_available+0xc>)
   d5b94:	681b      	ldr	r3, [r3, #0]
   d5b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5b98:	9301      	str	r3, [sp, #4]
   d5b9a:	bd08      	pop	{r3, pc}
   d5b9c:	00030228 	.word	0x00030228

000d5ba0 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d5ba0:	b508      	push	{r3, lr}
   d5ba2:	4b02      	ldr	r3, [pc, #8]	; (d5bac <hal_i2c_read+0xc>)
   d5ba4:	681b      	ldr	r3, [r3, #0]
   d5ba6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5ba8:	9301      	str	r3, [sp, #4]
   d5baa:	bd08      	pop	{r3, pc}
   d5bac:	00030228 	.word	0x00030228

000d5bb0 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d5bb0:	b508      	push	{r3, lr}
   d5bb2:	4b02      	ldr	r3, [pc, #8]	; (d5bbc <hal_i2c_peek+0xc>)
   d5bb4:	681b      	ldr	r3, [r3, #0]
   d5bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5bb8:	9301      	str	r3, [sp, #4]
   d5bba:	bd08      	pop	{r3, pc}
   d5bbc:	00030228 	.word	0x00030228

000d5bc0 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d5bc0:	b508      	push	{r3, lr}
   d5bc2:	4b02      	ldr	r3, [pc, #8]	; (d5bcc <hal_i2c_flush+0xc>)
   d5bc4:	681b      	ldr	r3, [r3, #0]
   d5bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5bc8:	9301      	str	r3, [sp, #4]
   d5bca:	bd08      	pop	{r3, pc}
   d5bcc:	00030228 	.word	0x00030228

000d5bd0 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d5bd0:	b508      	push	{r3, lr}
   d5bd2:	4b02      	ldr	r3, [pc, #8]	; (d5bdc <hal_i2c_is_enabled+0xc>)
   d5bd4:	681b      	ldr	r3, [r3, #0]
   d5bd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5bd8:	9301      	str	r3, [sp, #4]
   d5bda:	bd08      	pop	{r3, pc}
   d5bdc:	00030228 	.word	0x00030228

000d5be0 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d5be0:	b508      	push	{r3, lr}
   d5be2:	4b02      	ldr	r3, [pc, #8]	; (d5bec <hal_i2c_init+0xc>)
   d5be4:	681b      	ldr	r3, [r3, #0]
   d5be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5be8:	9301      	str	r3, [sp, #4]
   d5bea:	bd08      	pop	{r3, pc}
   d5bec:	00030228 	.word	0x00030228

000d5bf0 <hal_i2c_lock>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
   d5bf0:	b508      	push	{r3, lr}
   d5bf2:	4b02      	ldr	r3, [pc, #8]	; (d5bfc <hal_i2c_lock+0xc>)
   d5bf4:	681b      	ldr	r3, [r3, #0]
   d5bf6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d5bf8:	9301      	str	r3, [sp, #4]
   d5bfa:	bd08      	pop	{r3, pc}
   d5bfc:	00030228 	.word	0x00030228

000d5c00 <hal_i2c_unlock>:
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
   d5c00:	b508      	push	{r3, lr}
   d5c02:	4b02      	ldr	r3, [pc, #8]	; (d5c0c <hal_i2c_unlock+0xc>)
   d5c04:	681b      	ldr	r3, [r3, #0]
   d5c06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d5c08:	9301      	str	r3, [sp, #4]
   d5c0a:	bd08      	pop	{r3, pc}
   d5c0c:	00030228 	.word	0x00030228

000d5c10 <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   d5c10:	b508      	push	{r3, lr}
   d5c12:	4b02      	ldr	r3, [pc, #8]	; (d5c1c <hal_i2c_request_ex+0xc>)
   d5c14:	681b      	ldr	r3, [r3, #0]
   d5c16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d5c18:	9301      	str	r3, [sp, #4]
   d5c1a:	bd08      	pop	{r3, pc}
   d5c1c:	00030228 	.word	0x00030228

000d5c20 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d5c20:	b508      	push	{r3, lr}
   d5c22:	4b02      	ldr	r3, [pc, #8]	; (d5c2c <inet_inet_ntop+0xc>)
   d5c24:	681b      	ldr	r3, [r3, #0]
   d5c26:	695b      	ldr	r3, [r3, #20]
   d5c28:	9301      	str	r3, [sp, #4]
   d5c2a:	bd08      	pop	{r3, pc}
   d5c2c:	00030264 	.word	0x00030264

000d5c30 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d5c30:	b508      	push	{r3, lr}
   d5c32:	4b02      	ldr	r3, [pc, #8]	; (d5c3c <netdb_freeaddrinfo+0xc>)
   d5c34:	681b      	ldr	r3, [r3, #0]
   d5c36:	689b      	ldr	r3, [r3, #8]
   d5c38:	9301      	str	r3, [sp, #4]
   d5c3a:	bd08      	pop	{r3, pc}
   d5c3c:	00030268 	.word	0x00030268

000d5c40 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d5c40:	b508      	push	{r3, lr}
   d5c42:	4b02      	ldr	r3, [pc, #8]	; (d5c4c <netdb_getaddrinfo+0xc>)
   d5c44:	681b      	ldr	r3, [r3, #0]
   d5c46:	68db      	ldr	r3, [r3, #12]
   d5c48:	9301      	str	r3, [sp, #4]
   d5c4a:	bd08      	pop	{r3, pc}
   d5c4c:	00030268 	.word	0x00030268

000d5c50 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d5c50:	b508      	push	{r3, lr}
   d5c52:	4b02      	ldr	r3, [pc, #8]	; (d5c5c <hal_spi_init+0xc>)
   d5c54:	681b      	ldr	r3, [r3, #0]
   d5c56:	69db      	ldr	r3, [r3, #28]
   d5c58:	9301      	str	r3, [sp, #4]
   d5c5a:	bd08      	pop	{r3, pc}
   d5c5c:	00030230 	.word	0x00030230

000d5c60 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d5c60:	b508      	push	{r3, lr}
   d5c62:	4b02      	ldr	r3, [pc, #8]	; (d5c6c <hal_spi_is_enabled+0xc>)
   d5c64:	681b      	ldr	r3, [r3, #0]
   d5c66:	6a1b      	ldr	r3, [r3, #32]
   d5c68:	9301      	str	r3, [sp, #4]
   d5c6a:	bd08      	pop	{r3, pc}
   d5c6c:	00030230 	.word	0x00030230

000d5c70 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d5c70:	b508      	push	{r3, lr}
   d5c72:	4b02      	ldr	r3, [pc, #8]	; (d5c7c <hal_usart_init+0xc>)
   d5c74:	681b      	ldr	r3, [r3, #0]
   d5c76:	681b      	ldr	r3, [r3, #0]
   d5c78:	9301      	str	r3, [sp, #4]
   d5c7a:	bd08      	pop	{r3, pc}
   d5c7c:	0003023c 	.word	0x0003023c

000d5c80 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d5c80:	b508      	push	{r3, lr}
   d5c82:	4b02      	ldr	r3, [pc, #8]	; (d5c8c <hal_usart_write+0xc>)
   d5c84:	681b      	ldr	r3, [r3, #0]
   d5c86:	68db      	ldr	r3, [r3, #12]
   d5c88:	9301      	str	r3, [sp, #4]
   d5c8a:	bd08      	pop	{r3, pc}
   d5c8c:	0003023c 	.word	0x0003023c

000d5c90 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d5c90:	b508      	push	{r3, lr}
   d5c92:	4b02      	ldr	r3, [pc, #8]	; (d5c9c <hal_usart_available+0xc>)
   d5c94:	681b      	ldr	r3, [r3, #0]
   d5c96:	691b      	ldr	r3, [r3, #16]
   d5c98:	9301      	str	r3, [sp, #4]
   d5c9a:	bd08      	pop	{r3, pc}
   d5c9c:	0003023c 	.word	0x0003023c

000d5ca0 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d5ca0:	b508      	push	{r3, lr}
   d5ca2:	4b02      	ldr	r3, [pc, #8]	; (d5cac <hal_usart_read+0xc>)
   d5ca4:	681b      	ldr	r3, [r3, #0]
   d5ca6:	695b      	ldr	r3, [r3, #20]
   d5ca8:	9301      	str	r3, [sp, #4]
   d5caa:	bd08      	pop	{r3, pc}
   d5cac:	0003023c 	.word	0x0003023c

000d5cb0 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d5cb0:	b508      	push	{r3, lr}
   d5cb2:	4b02      	ldr	r3, [pc, #8]	; (d5cbc <hal_usart_peek+0xc>)
   d5cb4:	681b      	ldr	r3, [r3, #0]
   d5cb6:	699b      	ldr	r3, [r3, #24]
   d5cb8:	9301      	str	r3, [sp, #4]
   d5cba:	bd08      	pop	{r3, pc}
   d5cbc:	0003023c 	.word	0x0003023c

000d5cc0 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d5cc0:	b508      	push	{r3, lr}
   d5cc2:	4b02      	ldr	r3, [pc, #8]	; (d5ccc <hal_usart_flush+0xc>)
   d5cc4:	681b      	ldr	r3, [r3, #0]
   d5cc6:	69db      	ldr	r3, [r3, #28]
   d5cc8:	9301      	str	r3, [sp, #4]
   d5cca:	bd08      	pop	{r3, pc}
   d5ccc:	0003023c 	.word	0x0003023c

000d5cd0 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d5cd0:	b508      	push	{r3, lr}
   d5cd2:	4b02      	ldr	r3, [pc, #8]	; (d5cdc <hal_usart_is_enabled+0xc>)
   d5cd4:	681b      	ldr	r3, [r3, #0]
   d5cd6:	6a1b      	ldr	r3, [r3, #32]
   d5cd8:	9301      	str	r3, [sp, #4]
   d5cda:	bd08      	pop	{r3, pc}
   d5cdc:	0003023c 	.word	0x0003023c

000d5ce0 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d5ce0:	b508      	push	{r3, lr}
   d5ce2:	4b02      	ldr	r3, [pc, #8]	; (d5cec <hal_usart_available_data_for_write+0xc>)
   d5ce4:	681b      	ldr	r3, [r3, #0]
   d5ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5ce8:	9301      	str	r3, [sp, #4]
   d5cea:	bd08      	pop	{r3, pc}
   d5cec:	0003023c 	.word	0x0003023c

000d5cf0 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d5cf0:	b508      	push	{r3, lr}
   d5cf2:	4b02      	ldr	r3, [pc, #8]	; (d5cfc <HAL_USB_USART_Init+0xc>)
   d5cf4:	681b      	ldr	r3, [r3, #0]
   d5cf6:	681b      	ldr	r3, [r3, #0]
   d5cf8:	9301      	str	r3, [sp, #4]
   d5cfa:	bd08      	pop	{r3, pc}
   d5cfc:	0003024c 	.word	0x0003024c

000d5d00 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d5d00:	b508      	push	{r3, lr}
   d5d02:	4b02      	ldr	r3, [pc, #8]	; (d5d0c <HAL_USB_USART_Begin+0xc>)
   d5d04:	681b      	ldr	r3, [r3, #0]
   d5d06:	685b      	ldr	r3, [r3, #4]
   d5d08:	9301      	str	r3, [sp, #4]
   d5d0a:	bd08      	pop	{r3, pc}
   d5d0c:	0003024c 	.word	0x0003024c

000d5d10 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d5d10:	b508      	push	{r3, lr}
   d5d12:	4b02      	ldr	r3, [pc, #8]	; (d5d1c <HAL_USB_USART_Available_Data+0xc>)
   d5d14:	681b      	ldr	r3, [r3, #0]
   d5d16:	691b      	ldr	r3, [r3, #16]
   d5d18:	9301      	str	r3, [sp, #4]
   d5d1a:	bd08      	pop	{r3, pc}
   d5d1c:	0003024c 	.word	0x0003024c

000d5d20 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d5d20:	b508      	push	{r3, lr}
   d5d22:	4b02      	ldr	r3, [pc, #8]	; (d5d2c <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d5d24:	681b      	ldr	r3, [r3, #0]
   d5d26:	695b      	ldr	r3, [r3, #20]
   d5d28:	9301      	str	r3, [sp, #4]
   d5d2a:	bd08      	pop	{r3, pc}
   d5d2c:	0003024c 	.word	0x0003024c

000d5d30 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5d30:	b508      	push	{r3, lr}
   d5d32:	4b02      	ldr	r3, [pc, #8]	; (d5d3c <HAL_USB_USART_Receive_Data+0xc>)
   d5d34:	681b      	ldr	r3, [r3, #0]
   d5d36:	699b      	ldr	r3, [r3, #24]
   d5d38:	9301      	str	r3, [sp, #4]
   d5d3a:	bd08      	pop	{r3, pc}
   d5d3c:	0003024c 	.word	0x0003024c

000d5d40 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5d40:	b508      	push	{r3, lr}
   d5d42:	4b02      	ldr	r3, [pc, #8]	; (d5d4c <HAL_USB_USART_Send_Data+0xc>)
   d5d44:	681b      	ldr	r3, [r3, #0]
   d5d46:	69db      	ldr	r3, [r3, #28]
   d5d48:	9301      	str	r3, [sp, #4]
   d5d4a:	bd08      	pop	{r3, pc}
   d5d4c:	0003024c 	.word	0x0003024c

000d5d50 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d5d50:	b508      	push	{r3, lr}
   d5d52:	4b02      	ldr	r3, [pc, #8]	; (d5d5c <HAL_USB_USART_Flush_Data+0xc>)
   d5d54:	681b      	ldr	r3, [r3, #0]
   d5d56:	6a1b      	ldr	r3, [r3, #32]
   d5d58:	9301      	str	r3, [sp, #4]
   d5d5a:	bd08      	pop	{r3, pc}
   d5d5c:	0003024c 	.word	0x0003024c

000d5d60 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d5d60:	b508      	push	{r3, lr}
   d5d62:	4b02      	ldr	r3, [pc, #8]	; (d5d6c <panic_+0xc>)
   d5d64:	681b      	ldr	r3, [r3, #0]
   d5d66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5d68:	9301      	str	r3, [sp, #4]
   d5d6a:	bd08      	pop	{r3, pc}
   d5d6c:	00030260 	.word	0x00030260

000d5d70 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d5d70:	b508      	push	{r3, lr}
   d5d72:	4b02      	ldr	r3, [pc, #8]	; (d5d7c <log_message+0xc>)
   d5d74:	681b      	ldr	r3, [r3, #0]
   d5d76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d5d78:	9301      	str	r3, [sp, #4]
   d5d7a:	bd08      	pop	{r3, pc}
   d5d7c:	00030260 	.word	0x00030260

000d5d80 <log_message_v>:
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   d5d80:	b508      	push	{r3, lr}
   d5d82:	4b02      	ldr	r3, [pc, #8]	; (d5d8c <log_message_v+0xc>)
   d5d84:	681b      	ldr	r3, [r3, #0]
   d5d86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d5d88:	9301      	str	r3, [sp, #4]
   d5d8a:	bd08      	pop	{r3, pc}
   d5d8c:	00030260 	.word	0x00030260

000d5d90 <diag_get_source>:
DYNALIB_FN(34, services, led_update_enabled, int(void*))
DYNALIB_FN(35, services, led_update, void(system_tick_t, LEDStatusData*, void*))

DYNALIB_FN(36, services, diag_register_source, int(const diag_source*, void*))
DYNALIB_FN(37, services, diag_enum_sources, int(diag_enum_sources_callback, size_t*, void*, void*))
DYNALIB_FN(38, services, diag_get_source, int(uint16_t, const diag_source**, void*))
   d5d90:	b508      	push	{r3, lr}
   d5d92:	4b03      	ldr	r3, [pc, #12]	; (d5da0 <diag_get_source+0x10>)
   d5d94:	681b      	ldr	r3, [r3, #0]
   d5d96:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   d5d9a:	9301      	str	r3, [sp, #4]
   d5d9c:	bd08      	pop	{r3, pc}
   d5d9e:	0000      	.short	0x0000
   d5da0:	00030260 	.word	0x00030260

000d5da4 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d5da4:	b508      	push	{r3, lr}
   d5da6:	4b02      	ldr	r3, [pc, #8]	; (d5db0 <system_mode+0xc>)
   d5da8:	681b      	ldr	r3, [r3, #0]
   d5daa:	681b      	ldr	r3, [r3, #0]
   d5dac:	9301      	str	r3, [sp, #4]
   d5dae:	bd08      	pop	{r3, pc}
   d5db0:	00030220 	.word	0x00030220

000d5db4 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d5db4:	b508      	push	{r3, lr}
   d5db6:	4b02      	ldr	r3, [pc, #8]	; (d5dc0 <set_system_mode+0xc>)
   d5db8:	681b      	ldr	r3, [r3, #0]
   d5dba:	685b      	ldr	r3, [r3, #4]
   d5dbc:	9301      	str	r3, [sp, #4]
   d5dbe:	bd08      	pop	{r3, pc}
   d5dc0:	00030220 	.word	0x00030220

000d5dc4 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d5dc4:	b508      	push	{r3, lr}
   d5dc6:	4b02      	ldr	r3, [pc, #8]	; (d5dd0 <system_delay_ms+0xc>)
   d5dc8:	681b      	ldr	r3, [r3, #0]
   d5dca:	695b      	ldr	r3, [r3, #20]
   d5dcc:	9301      	str	r3, [sp, #4]
   d5dce:	bd08      	pop	{r3, pc}
   d5dd0:	00030220 	.word	0x00030220

000d5dd4 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d5dd4:	b508      	push	{r3, lr}
   d5dd6:	4b02      	ldr	r3, [pc, #8]	; (d5de0 <system_thread_set_state+0xc>)
   d5dd8:	681b      	ldr	r3, [r3, #0]
   d5dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5ddc:	9301      	str	r3, [sp, #4]
   d5dde:	bd08      	pop	{r3, pc}
   d5de0:	00030220 	.word	0x00030220

000d5de4 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d5de4:	b508      	push	{r3, lr}
   d5de6:	4b02      	ldr	r3, [pc, #8]	; (d5df0 <application_thread_current+0xc>)
   d5de8:	681b      	ldr	r3, [r3, #0]
   d5dea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d5dec:	9301      	str	r3, [sp, #4]
   d5dee:	bd08      	pop	{r3, pc}
   d5df0:	00030220 	.word	0x00030220

000d5df4 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d5df4:	b508      	push	{r3, lr}
   d5df6:	4b02      	ldr	r3, [pc, #8]	; (d5e00 <application_thread_invoke+0xc>)
   d5df8:	681b      	ldr	r3, [r3, #0]
   d5dfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d5dfc:	9301      	str	r3, [sp, #4]
   d5dfe:	bd08      	pop	{r3, pc}
   d5e00:	00030220 	.word	0x00030220

000d5e04 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d5e04:	b508      	push	{r3, lr}
   d5e06:	4b02      	ldr	r3, [pc, #8]	; (d5e10 <system_thread_get_state+0xc>)
   d5e08:	681b      	ldr	r3, [r3, #0]
   d5e0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d5e0c:	9301      	str	r3, [sp, #4]
   d5e0e:	bd08      	pop	{r3, pc}
   d5e10:	00030220 	.word	0x00030220

000d5e14 <system_notify_time_changed>:
DYNALIB_FN(23, system, system_notify_time_changed, void(uint32_t, void*, void*))
   d5e14:	b508      	push	{r3, lr}
   d5e16:	4b02      	ldr	r3, [pc, #8]	; (d5e20 <system_notify_time_changed+0xc>)
   d5e18:	681b      	ldr	r3, [r3, #0]
   d5e1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   d5e1c:	9301      	str	r3, [sp, #4]
   d5e1e:	bd08      	pop	{r3, pc}
   d5e20:	00030220 	.word	0x00030220

000d5e24 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d5e24:	b508      	push	{r3, lr}
   d5e26:	4b03      	ldr	r3, [pc, #12]	; (d5e34 <system_ctrl_set_app_request_handler+0x10>)
   d5e28:	681b      	ldr	r3, [r3, #0]
   d5e2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d5e2e:	9301      	str	r3, [sp, #4]
   d5e30:	bd08      	pop	{r3, pc}
   d5e32:	0000      	.short	0x0000
   d5e34:	00030220 	.word	0x00030220

000d5e38 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d5e38:	b508      	push	{r3, lr}
   d5e3a:	4b03      	ldr	r3, [pc, #12]	; (d5e48 <system_ctrl_set_result+0x10>)
   d5e3c:	681b      	ldr	r3, [r3, #0]
   d5e3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d5e42:	9301      	str	r3, [sp, #4]
   d5e44:	bd08      	pop	{r3, pc}
   d5e46:	0000      	.short	0x0000
   d5e48:	00030220 	.word	0x00030220

000d5e4c <system_power_management_set_config>:
DYNALIB_FN(BASE_IDX + 14, system, system_pool_free, void(void*, void*))
DYNALIB_FN(BASE_IDX + 15, system, system_sleep_pins, int(const uint16_t*, size_t, const InterruptMode*, size_t, long, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 16, system, system_invoke_event_handler, int(uint16_t handlerInfoSize, FilteringEventHandler* handlerInfo, const char* event_name, const char* event_data, void* reserved))

#if HAL_PLATFORM_POWER_MANAGEMENT
DYNALIB_FN(BASE_IDX + 17, system, system_power_management_set_config, int(const hal_power_config*, void*))
   d5e4c:	b508      	push	{r3, lr}
   d5e4e:	4b03      	ldr	r3, [pc, #12]	; (d5e5c <system_power_management_set_config+0x10>)
   d5e50:	681b      	ldr	r3, [r3, #0]
   d5e52:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   d5e56:	9301      	str	r3, [sp, #4]
   d5e58:	bd08      	pop	{r3, pc}
   d5e5a:	0000      	.short	0x0000
   d5e5c:	00030220 	.word	0x00030220

000d5e60 <system_sleep_ext>:
#define BASE_IDX1 (BASE_IDX + 18)
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
   d5e60:	b508      	push	{r3, lr}
   d5e62:	4b03      	ldr	r3, [pc, #12]	; (d5e70 <system_sleep_ext+0x10>)
   d5e64:	681b      	ldr	r3, [r3, #0]
   d5e66:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
   d5e6a:	9301      	str	r3, [sp, #4]
   d5e6c:	bd08      	pop	{r3, pc}
   d5e6e:	0000      	.short	0x0000
   d5e70:	00030220 	.word	0x00030220

000d5e74 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d5e74:	b508      	push	{r3, lr}
   d5e76:	4b02      	ldr	r3, [pc, #8]	; (d5e80 <spark_process+0xc>)
   d5e78:	681b      	ldr	r3, [r3, #0]
   d5e7a:	689b      	ldr	r3, [r3, #8]
   d5e7c:	9301      	str	r3, [sp, #4]
   d5e7e:	bd08      	pop	{r3, pc}
   d5e80:	00030244 	.word	0x00030244

000d5e84 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   d5e84:	b508      	push	{r3, lr}
   d5e86:	4b02      	ldr	r3, [pc, #8]	; (d5e90 <spark_cloud_flag_connect+0xc>)
   d5e88:	681b      	ldr	r3, [r3, #0]
   d5e8a:	68db      	ldr	r3, [r3, #12]
   d5e8c:	9301      	str	r3, [sp, #4]
   d5e8e:	bd08      	pop	{r3, pc}
   d5e90:	00030244 	.word	0x00030244

000d5e94 <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d5e94:	b508      	push	{r3, lr}
   d5e96:	4b02      	ldr	r3, [pc, #8]	; (d5ea0 <spark_cloud_flag_connected+0xc>)
   d5e98:	681b      	ldr	r3, [r3, #0]
   d5e9a:	695b      	ldr	r3, [r3, #20]
   d5e9c:	9301      	str	r3, [sp, #4]
   d5e9e:	bd08      	pop	{r3, pc}
   d5ea0:	00030244 	.word	0x00030244

000d5ea4 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d5ea4:	b508      	push	{r3, lr}
   d5ea6:	4b02      	ldr	r3, [pc, #8]	; (d5eb0 <spark_send_event+0xc>)
   d5ea8:	681b      	ldr	r3, [r3, #0]
   d5eaa:	6a1b      	ldr	r3, [r3, #32]
   d5eac:	9301      	str	r3, [sp, #4]
   d5eae:	bd08      	pop	{r3, pc}
   d5eb0:	00030244 	.word	0x00030244

000d5eb4 <spark_sync_time_pending>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d5eb4:	b508      	push	{r3, lr}
   d5eb6:	4b02      	ldr	r3, [pc, #8]	; (d5ec0 <spark_sync_time_pending+0xc>)
   d5eb8:	681b      	ldr	r3, [r3, #0]
   d5eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5ebc:	9301      	str	r3, [sp, #4]
   d5ebe:	bd08      	pop	{r3, pc}
   d5ec0:	00030244 	.word	0x00030244

000d5ec4 <spark_sync_time_last>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
   d5ec4:	b508      	push	{r3, lr}
   d5ec6:	4b02      	ldr	r3, [pc, #8]	; (d5ed0 <spark_sync_time_last+0xc>)
   d5ec8:	681b      	ldr	r3, [r3, #0]
   d5eca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5ecc:	9301      	str	r3, [sp, #4]
   d5ece:	bd08      	pop	{r3, pc}
   d5ed0:	00030244 	.word	0x00030244

000d5ed4 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d5ed4:	b508      	push	{r3, lr}
   d5ed6:	4b02      	ldr	r3, [pc, #8]	; (d5ee0 <spark_set_random_seed_from_cloud_handler+0xc>)
   d5ed8:	681b      	ldr	r3, [r3, #0]
   d5eda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5edc:	9301      	str	r3, [sp, #4]
   d5ede:	bd08      	pop	{r3, pc}
   d5ee0:	00030244 	.word	0x00030244

000d5ee4 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d5ee4:	b508      	push	{r3, lr}
   d5ee6:	4b02      	ldr	r3, [pc, #8]	; (d5ef0 <network_connect+0xc>)
   d5ee8:	681b      	ldr	r3, [r3, #0]
   d5eea:	685b      	ldr	r3, [r3, #4]
   d5eec:	9301      	str	r3, [sp, #4]
   d5eee:	bd08      	pop	{r3, pc}
   d5ef0:	00030240 	.word	0x00030240

000d5ef4 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d5ef4:	b508      	push	{r3, lr}
   d5ef6:	4b02      	ldr	r3, [pc, #8]	; (d5f00 <network_connecting+0xc>)
   d5ef8:	681b      	ldr	r3, [r3, #0]
   d5efa:	689b      	ldr	r3, [r3, #8]
   d5efc:	9301      	str	r3, [sp, #4]
   d5efe:	bd08      	pop	{r3, pc}
   d5f00:	00030240 	.word	0x00030240

000d5f04 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d5f04:	b508      	push	{r3, lr}
   d5f06:	4b02      	ldr	r3, [pc, #8]	; (d5f10 <network_disconnect+0xc>)
   d5f08:	681b      	ldr	r3, [r3, #0]
   d5f0a:	68db      	ldr	r3, [r3, #12]
   d5f0c:	9301      	str	r3, [sp, #4]
   d5f0e:	bd08      	pop	{r3, pc}
   d5f10:	00030240 	.word	0x00030240

000d5f14 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d5f14:	b508      	push	{r3, lr}
   d5f16:	4b02      	ldr	r3, [pc, #8]	; (d5f20 <network_ready+0xc>)
   d5f18:	681b      	ldr	r3, [r3, #0]
   d5f1a:	691b      	ldr	r3, [r3, #16]
   d5f1c:	9301      	str	r3, [sp, #4]
   d5f1e:	bd08      	pop	{r3, pc}
   d5f20:	00030240 	.word	0x00030240

000d5f24 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d5f24:	b508      	push	{r3, lr}
   d5f26:	4b02      	ldr	r3, [pc, #8]	; (d5f30 <network_on+0xc>)
   d5f28:	681b      	ldr	r3, [r3, #0]
   d5f2a:	695b      	ldr	r3, [r3, #20]
   d5f2c:	9301      	str	r3, [sp, #4]
   d5f2e:	bd08      	pop	{r3, pc}
   d5f30:	00030240 	.word	0x00030240

000d5f34 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d5f34:	b508      	push	{r3, lr}
   d5f36:	4b02      	ldr	r3, [pc, #8]	; (d5f40 <network_off+0xc>)
   d5f38:	681b      	ldr	r3, [r3, #0]
   d5f3a:	699b      	ldr	r3, [r3, #24]
   d5f3c:	9301      	str	r3, [sp, #4]
   d5f3e:	bd08      	pop	{r3, pc}
   d5f40:	00030240 	.word	0x00030240

000d5f44 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d5f44:	b508      	push	{r3, lr}
   d5f46:	4b02      	ldr	r3, [pc, #8]	; (d5f50 <network_listen+0xc>)
   d5f48:	681b      	ldr	r3, [r3, #0]
   d5f4a:	69db      	ldr	r3, [r3, #28]
   d5f4c:	9301      	str	r3, [sp, #4]
   d5f4e:	bd08      	pop	{r3, pc}
   d5f50:	00030240 	.word	0x00030240

000d5f54 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d5f54:	b508      	push	{r3, lr}
   d5f56:	4b02      	ldr	r3, [pc, #8]	; (d5f60 <network_listening+0xc>)
   d5f58:	681b      	ldr	r3, [r3, #0]
   d5f5a:	6a1b      	ldr	r3, [r3, #32]
   d5f5c:	9301      	str	r3, [sp, #4]
   d5f5e:	bd08      	pop	{r3, pc}
   d5f60:	00030240 	.word	0x00030240

000d5f64 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d5f64:	b508      	push	{r3, lr}
   d5f66:	4b02      	ldr	r3, [pc, #8]	; (d5f70 <network_set_listen_timeout+0xc>)
   d5f68:	681b      	ldr	r3, [r3, #0]
   d5f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5f6c:	9301      	str	r3, [sp, #4]
   d5f6e:	bd08      	pop	{r3, pc}
   d5f70:	00030240 	.word	0x00030240

000d5f74 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d5f74:	b508      	push	{r3, lr}
   d5f76:	4b02      	ldr	r3, [pc, #8]	; (d5f80 <network_get_listen_timeout+0xc>)
   d5f78:	681b      	ldr	r3, [r3, #0]
   d5f7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5f7c:	9301      	str	r3, [sp, #4]
   d5f7e:	bd08      	pop	{r3, pc}
   d5f80:	00030240 	.word	0x00030240

000d5f84 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   d5f84:	b508      	push	{r3, lr}
   d5f86:	4b02      	ldr	r3, [pc, #8]	; (d5f90 <network_is_on+0xc>)
   d5f88:	681b      	ldr	r3, [r3, #0]
   d5f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5f8c:	9301      	str	r3, [sp, #4]
   d5f8e:	bd08      	pop	{r3, pc}
   d5f90:	00030240 	.word	0x00030240

000d5f94 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   d5f94:	b508      	push	{r3, lr}
   d5f96:	4b02      	ldr	r3, [pc, #8]	; (d5fa0 <network_is_off+0xc>)
   d5f98:	681b      	ldr	r3, [r3, #0]
   d5f9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5f9c:	9301      	str	r3, [sp, #4]
   d5f9e:	bd08      	pop	{r3, pc}
   d5fa0:	00030240 	.word	0x00030240

000d5fa4 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d5fa4:	b508      	push	{r3, lr}
   d5fa6:	4b02      	ldr	r3, [pc, #8]	; (d5fb0 <malloc+0xc>)
   d5fa8:	681b      	ldr	r3, [r3, #0]
   d5faa:	681b      	ldr	r3, [r3, #0]
   d5fac:	9301      	str	r3, [sp, #4]
   d5fae:	bd08      	pop	{r3, pc}
   d5fb0:	0003021c 	.word	0x0003021c

000d5fb4 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d5fb4:	b508      	push	{r3, lr}
   d5fb6:	4b02      	ldr	r3, [pc, #8]	; (d5fc0 <free+0xc>)
   d5fb8:	681b      	ldr	r3, [r3, #0]
   d5fba:	685b      	ldr	r3, [r3, #4]
   d5fbc:	9301      	str	r3, [sp, #4]
   d5fbe:	bd08      	pop	{r3, pc}
   d5fc0:	0003021c 	.word	0x0003021c

000d5fc4 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d5fc4:	b508      	push	{r3, lr}
   d5fc6:	4b02      	ldr	r3, [pc, #8]	; (d5fd0 <realloc+0xc>)
   d5fc8:	681b      	ldr	r3, [r3, #0]
   d5fca:	689b      	ldr	r3, [r3, #8]
   d5fcc:	9301      	str	r3, [sp, #4]
   d5fce:	bd08      	pop	{r3, pc}
   d5fd0:	0003021c 	.word	0x0003021c

000d5fd4 <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   d5fd4:	b508      	push	{r3, lr}
   d5fd6:	4b02      	ldr	r3, [pc, #8]	; (d5fe0 <siprintf+0xc>)
   d5fd8:	681b      	ldr	r3, [r3, #0]
   d5fda:	691b      	ldr	r3, [r3, #16]
   d5fdc:	9301      	str	r3, [sp, #4]
   d5fde:	bd08      	pop	{r3, pc}
   d5fe0:	0003021c 	.word	0x0003021c

000d5fe4 <snprintf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   d5fe4:	b508      	push	{r3, lr}
   d5fe6:	4b02      	ldr	r3, [pc, #8]	; (d5ff0 <snprintf+0xc>)
   d5fe8:	681b      	ldr	r3, [r3, #0]
   d5fea:	69db      	ldr	r3, [r3, #28]
   d5fec:	9301      	str	r3, [sp, #4]
   d5fee:	bd08      	pop	{r3, pc}
   d5ff0:	0003021c 	.word	0x0003021c

000d5ff4 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d5ff4:	b508      	push	{r3, lr}
   d5ff6:	4b02      	ldr	r3, [pc, #8]	; (d6000 <vsnprintf+0xc>)
   d5ff8:	681b      	ldr	r3, [r3, #0]
   d5ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5ffc:	9301      	str	r3, [sp, #4]
   d5ffe:	bd08      	pop	{r3, pc}
   d6000:	0003021c 	.word	0x0003021c

000d6004 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d6004:	b508      	push	{r3, lr}
   d6006:	4b02      	ldr	r3, [pc, #8]	; (d6010 <abort+0xc>)
   d6008:	681b      	ldr	r3, [r3, #0]
   d600a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d600c:	9301      	str	r3, [sp, #4]
   d600e:	bd08      	pop	{r3, pc}
   d6010:	0003021c 	.word	0x0003021c

000d6014 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d6014:	b508      	push	{r3, lr}
   d6016:	4b02      	ldr	r3, [pc, #8]	; (d6020 <_malloc_r+0xc>)
   d6018:	681b      	ldr	r3, [r3, #0]
   d601a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d601c:	9301      	str	r3, [sp, #4]
   d601e:	bd08      	pop	{r3, pc}
   d6020:	0003021c 	.word	0x0003021c

000d6024 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d6024:	b508      	push	{r3, lr}
   d6026:	4b02      	ldr	r3, [pc, #8]	; (d6030 <newlib_impure_ptr_callback+0xc>)
   d6028:	681b      	ldr	r3, [r3, #0]
   d602a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d602c:	9301      	str	r3, [sp, #4]
   d602e:	bd08      	pop	{r3, pc}
   d6030:	0003021c 	.word	0x0003021c

000d6034 <strftime>:
// Electron has some of these exported from a different system part through services2 dynalib
// Photon/P1 do not have enough space in system-part2
#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
   d6034:	b508      	push	{r3, lr}
   d6036:	4b02      	ldr	r3, [pc, #8]	; (d6040 <strftime+0xc>)
   d6038:	681b      	ldr	r3, [r3, #0]
   d603a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d603c:	9301      	str	r3, [sp, #4]
   d603e:	bd08      	pop	{r3, pc}
   d6040:	0003021c 	.word	0x0003021c

000d6044 <localtime_r>:
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   d6044:	b508      	push	{r3, lr}
   d6046:	4b02      	ldr	r3, [pc, #8]	; (d6050 <localtime_r+0xc>)
   d6048:	681b      	ldr	r3, [r3, #0]
   d604a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d604c:	9301      	str	r3, [sp, #4]
   d604e:	bd08      	pop	{r3, pc}
   d6050:	0003021c 	.word	0x0003021c

000d6054 <gmtime_r>:
DYNALIB_FN(20, rt, gmtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   d6054:	b508      	push	{r3, lr}
   d6056:	4b02      	ldr	r3, [pc, #8]	; (d6060 <gmtime_r+0xc>)
   d6058:	681b      	ldr	r3, [r3, #0]
   d605a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d605c:	9301      	str	r3, [sp, #4]
   d605e:	bd08      	pop	{r3, pc}
   d6060:	0003021c 	.word	0x0003021c

000d6064 <mktime>:
DYNALIB_FN(21, rt, mktime, time_t(struct tm*))
   d6064:	b508      	push	{r3, lr}
   d6066:	4b02      	ldr	r3, [pc, #8]	; (d6070 <mktime+0xc>)
   d6068:	681b      	ldr	r3, [r3, #0]
   d606a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d606c:	9301      	str	r3, [sp, #4]
   d606e:	bd08      	pop	{r3, pc}
   d6070:	0003021c 	.word	0x0003021c

000d6074 <_Z3mapiiiii>:
    hal_adc_set_sample_time(ADC_SampleTime);
}

int map(int value, int fromStart, int fromEnd, int toStart, int toEnd)
{
    if (fromEnd == fromStart) {
   d6074:	428a      	cmp	r2, r1
{
   d6076:	b510      	push	{r4, lr}
    if (fromEnd == fromStart) {
   d6078:	d007      	beq.n	d608a <_Z3mapiiiii+0x16>
        return value;
    }
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
   d607a:	9c02      	ldr	r4, [sp, #8]
   d607c:	1a40      	subs	r0, r0, r1
   d607e:	1ae4      	subs	r4, r4, r3
   d6080:	4360      	muls	r0, r4
   d6082:	1a52      	subs	r2, r2, r1
   d6084:	fb90 f0f2 	sdiv	r0, r0, r2
   d6088:	4418      	add	r0, r3
}
   d608a:	bd10      	pop	{r4, pc}

000d608c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d608c:	2100      	movs	r1, #0
   d608e:	f7ff be99 	b.w	d5dc4 <system_delay_ms>

000d6092 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d6092:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d6094:	6883      	ldr	r3, [r0, #8]
   d6096:	4604      	mov	r4, r0
   d6098:	b90b      	cbnz	r3, d609e <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d609a:	f001 fe66 	bl	d7d6a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d609e:	68c3      	ldr	r3, [r0, #12]
   d60a0:	4798      	blx	r3
      if (_M_manager)
   d60a2:	68a3      	ldr	r3, [r4, #8]
   d60a4:	b11b      	cbz	r3, d60ae <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d60a6:	2203      	movs	r2, #3
   d60a8:	4621      	mov	r1, r4
   d60aa:	4620      	mov	r0, r4
   d60ac:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d60ae:	4620      	mov	r0, r4
   d60b0:	2110      	movs	r1, #16
}
   d60b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   d60b6:	f001 be52 	b.w	d7d5e <_ZdlPvj>

000d60ba <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d60ba:	b510      	push	{r4, lr}
          _M_dispose();
   d60bc:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d60be:	4604      	mov	r4, r0
          _M_dispose();
   d60c0:	689b      	ldr	r3, [r3, #8]
   d60c2:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d60c4:	68a3      	ldr	r3, [r4, #8]
   d60c6:	3b01      	subs	r3, #1
   d60c8:	60a3      	str	r3, [r4, #8]
   d60ca:	b92b      	cbnz	r3, d60d8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
   d60cc:	6823      	ldr	r3, [r4, #0]
   d60ce:	4620      	mov	r0, r4
   d60d0:	68db      	ldr	r3, [r3, #12]
    }
   d60d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   d60d6:	4718      	bx	r3
    }
   d60d8:	bd10      	pop	{r4, pc}

000d60da <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d60da:	b510      	push	{r4, lr}
   d60dc:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d60de:	6800      	ldr	r0, [r0, #0]
   d60e0:	b108      	cbz	r0, d60e6 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d60e2:	f7ff fcc5 	bl	d5a70 <os_mutex_recursive_destroy>
    }
   d60e6:	4620      	mov	r0, r4
   d60e8:	bd10      	pop	{r4, pc}

000d60ea <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   d60ea:	b510      	push	{r4, lr}
      if (_M_manager)
   d60ec:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d60ee:	4604      	mov	r4, r0
      if (_M_manager)
   d60f0:	b113      	cbz	r3, d60f8 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d60f2:	2203      	movs	r2, #3
   d60f4:	4601      	mov	r1, r0
   d60f6:	4798      	blx	r3
    }
   d60f8:	4620      	mov	r0, r4
   d60fa:	bd10      	pop	{r4, pc}

000d60fc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d60fc:	680b      	ldr	r3, [r1, #0]
   d60fe:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d6100:	b113      	cbz	r3, d6108 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   d6102:	685a      	ldr	r2, [r3, #4]
   d6104:	3201      	adds	r2, #1
   d6106:	605a      	str	r2, [r3, #4]
	  _M_pi->_M_add_ref_copy();
      }
   d6108:	4770      	bx	lr

000d610a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   d610a:	b510      	push	{r4, lr}
   d610c:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   d610e:	6800      	ldr	r0, [r0, #0]
   d6110:	b128      	cbz	r0, d611e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
      if (--_M_use_count == 0)
   d6112:	6843      	ldr	r3, [r0, #4]
   d6114:	3b01      	subs	r3, #1
   d6116:	6043      	str	r3, [r0, #4]
   d6118:	b90b      	cbnz	r3, d611e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
   d611a:	f7ff ffce 	bl	d60ba <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
      }
   d611e:	4620      	mov	r0, r4
   d6120:	bd10      	pop	{r4, pc}

000d6122 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    inline
#if __cplusplus >= 201103L
    typename enable_if<__and_<__not_<__is_tuple_like<_Tp>>,
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
    swap(_Tp& __a, _Tp& __b)
   d6122:	b513      	push	{r0, r1, r4, lr}
   d6124:	460b      	mov	r3, r1
   d6126:	4602      	mov	r2, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6128:	e9d0 0100 	ldrd	r0, r1, [r0]
   d612c:	466c      	mov	r4, sp
   d612e:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d6132:	e893 0003 	ldmia.w	r3, {r0, r1}
   d6136:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d613a:	e894 0003 	ldmia.w	r4, {r0, r1}
   d613e:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d6142:	b002      	add	sp, #8
   d6144:	bd10      	pop	{r4, pc}
	...

000d6148 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(EnumFlags<BleCharacteristicProperty> properties, const String& desc, const BleOnDataReceivedStdFunction& callback) {
    WiringBleLock lk;
    return addCharacteristic(properties, desc.c_str(), callback);
}

} /* namespace particle */
   d6148:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   d614a:	4c06      	ldr	r4, [pc, #24]	; (d6164 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d614c:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   d614e:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   d6150:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   d6152:	f7ff fc85 	bl	d5a60 <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   d6156:	4620      	mov	r0, r4
   d6158:	4a03      	ldr	r2, [pc, #12]	; (d6168 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d615a:	4904      	ldr	r1, [pc, #16]	; (d616c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   d615c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   d6160:	f001 bdf8 	b.w	d7d54 <__aeabi_atexit>
   d6164:	2003e6c8 	.word	0x2003e6c8
   d6168:	2003e528 	.word	0x2003e528
   d616c:	000d60db 	.word	0x000d60db

000d6170 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d6170:	2200      	movs	r2, #0
   d6172:	6840      	ldr	r0, [r0, #4]
   d6174:	4611      	mov	r1, r2
   d6176:	f7ff becd 	b.w	d5f14 <network_ready>

000d617a <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   d617a:	2200      	movs	r2, #0
   d617c:	6840      	ldr	r0, [r0, #4]
   d617e:	4611      	mov	r1, r2
   d6180:	f7ff bee8 	b.w	d5f54 <network_listening>

000d6184 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d6184:	2200      	movs	r2, #0
   d6186:	6840      	ldr	r0, [r0, #4]
   d6188:	4611      	mov	r1, r2
   d618a:	f7ff bef3 	b.w	d5f74 <network_get_listen_timeout>

000d618e <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d618e:	6840      	ldr	r0, [r0, #4]
   d6190:	2200      	movs	r2, #0
   d6192:	f7ff bee7 	b.w	d5f64 <network_set_listen_timeout>

000d6196 <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d6196:	6840      	ldr	r0, [r0, #4]
   d6198:	2200      	movs	r2, #0
   d619a:	f081 0101 	eor.w	r1, r1, #1
   d619e:	f7ff bed1 	b.w	d5f44 <network_listen>

000d61a2 <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d61a2:	2300      	movs	r3, #0
   d61a4:	6840      	ldr	r0, [r0, #4]
   d61a6:	461a      	mov	r2, r3
   d61a8:	4619      	mov	r1, r3
   d61aa:	f7ff bec3 	b.w	d5f34 <network_off>

000d61ae <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d61ae:	2300      	movs	r3, #0
   d61b0:	6840      	ldr	r0, [r0, #4]
   d61b2:	461a      	mov	r2, r3
   d61b4:	4619      	mov	r1, r3
   d61b6:	f7ff beb5 	b.w	d5f24 <network_on>

000d61ba <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d61ba:	2200      	movs	r2, #0
   d61bc:	6840      	ldr	r0, [r0, #4]
   d61be:	4611      	mov	r1, r2
   d61c0:	f7ff be98 	b.w	d5ef4 <network_connecting>

000d61c4 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d61c4:	6840      	ldr	r0, [r0, #4]
   d61c6:	2200      	movs	r2, #0
   d61c8:	2102      	movs	r1, #2
   d61ca:	f7ff be9b 	b.w	d5f04 <network_disconnect>

000d61ce <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d61ce:	2300      	movs	r3, #0
   d61d0:	6840      	ldr	r0, [r0, #4]
   d61d2:	461a      	mov	r2, r3
   d61d4:	f7ff be86 	b.w	d5ee4 <network_connect>

000d61d8 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d61d8:	4b08      	ldr	r3, [pc, #32]	; (d61fc <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d61da:	b510      	push	{r4, lr}
   d61dc:	2428      	movs	r4, #40	; 0x28
   d61de:	4622      	mov	r2, r4
   d61e0:	4618      	mov	r0, r3
   d61e2:	2100      	movs	r1, #0
   d61e4:	f002 fcac 	bl	d8b40 <memset>
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d61e8:	4b05      	ldr	r3, [pc, #20]	; (d6200 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   d61ea:	8004      	strh	r4, [r0, #0]
        cid = -1;
   d61ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d61f0:	6042      	str	r2, [r0, #4]
   d61f2:	2204      	movs	r2, #4
   d61f4:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d61f6:	4a03      	ldr	r2, [pc, #12]	; (d6204 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d61f8:	601a      	str	r2, [r3, #0]
   d61fa:	bd10      	pop	{r4, pc}
   d61fc:	2003e6d4 	.word	0x2003e6d4
   d6200:	2003e6cc 	.word	0x2003e6cc
   d6204:	000d90e4 	.word	0x000d90e4

000d6208 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d6208:	4770      	bx	lr

000d620a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   d620a:	2000      	movs	r0, #0
   d620c:	4770      	bx	lr

000d620e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d620e:	b510      	push	{r4, lr}
   d6210:	2110      	movs	r1, #16
   d6212:	4604      	mov	r4, r0
   d6214:	f001 fda3 	bl	d7d5e <_ZdlPvj>
   d6218:	4620      	mov	r0, r4
   d621a:	bd10      	pop	{r4, pc}

000d621c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   d621c:	b508      	push	{r3, lr}
      { delete this; }
   d621e:	f7ff fff6 	bl	d620e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d6222:	bd08      	pop	{r3, pc}

000d6224 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d6224:	b530      	push	{r4, r5, lr}
        type_(type) {
   d6226:	2200      	movs	r2, #0
   d6228:	f64f 749c 	movw	r4, #65436	; 0xff9c
   d622c:	6002      	str	r2, [r0, #0]
   d622e:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   d6230:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d6232:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   d6234:	680c      	ldr	r4, [r1, #0]
   d6236:	8085      	strh	r5, [r0, #4]
   d6238:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d623a:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   d623c:	bd30      	pop	{r4, r5, pc}

000d623e <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d623e:	b510      	push	{r4, lr}
   d6240:	4604      	mov	r4, r0
    free((void*)msg_);
   d6242:	6800      	ldr	r0, [r0, #0]
   d6244:	f7ff feb6 	bl	d5fb4 <free>
}
   d6248:	4620      	mov	r0, r4
   d624a:	bd10      	pop	{r4, pc}

000d624c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d624c:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d624e:	68c4      	ldr	r4, [r0, #12]
   d6250:	b1f4      	cbz	r4, d6290 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   d6252:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d6254:	2b02      	cmp	r3, #2
   d6256:	d103      	bne.n	d6260 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d6258:	f104 000c 	add.w	r0, r4, #12
   d625c:	f7ff ffef 	bl	d623e <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   d6260:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   d6262:	b135      	cbz	r5, d6272 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   d6264:	4628      	mov	r0, r5
   d6266:	f7ff ff40 	bl	d60ea <_ZNSt14_Function_baseD1Ev>
   d626a:	2110      	movs	r1, #16
   d626c:	4628      	mov	r0, r5
   d626e:	f001 fd76 	bl	d7d5e <_ZdlPvj>
   d6272:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d6274:	b135      	cbz	r5, d6284 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d6276:	4628      	mov	r0, r5
   d6278:	f7ff ff37 	bl	d60ea <_ZNSt14_Function_baseD1Ev>
   d627c:	2110      	movs	r1, #16
   d627e:	4628      	mov	r0, r5
   d6280:	f001 fd6d 	bl	d7d5e <_ZdlPvj>
   d6284:	4620      	mov	r0, r4
   d6286:	2114      	movs	r1, #20
   d6288:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d628c:	f001 bd67 	b.w	d7d5e <_ZdlPvj>
   d6290:	bd38      	pop	{r3, r4, r5, pc}

000d6292 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d6292:	b573      	push	{r0, r1, r4, r5, r6, lr}
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r,
		     element_type* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6294:	460e      	mov	r6, r1
   d6296:	4604      	mov	r4, r0
   d6298:	f856 3b04 	ldr.w	r3, [r6], #4
   d629c:	9300      	str	r3, [sp, #0]
   d629e:	460d      	mov	r5, r1
   d62a0:	a801      	add	r0, sp, #4
   d62a2:	4631      	mov	r1, r6
   d62a4:	f7ff ff2a 	bl	d60fc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d62a8:	9a01      	ldr	r2, [sp, #4]
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d62aa:	9b00      	ldr	r3, [sp, #0]
	_M_pi = __tmp;
   d62ac:	6062      	str	r2, [r4, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d62ae:	6023      	str	r3, [r4, #0]
      ~__shared_ptr() = default;
   d62b0:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   d62b2:	2300      	movs	r3, #0
   d62b4:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d62b6:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   d62b8:	f7ff ff27 	bl	d610a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d62bc:	4630      	mov	r0, r6
   d62be:	f7ff ff24 	bl	d610a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   d62c2:	4628      	mov	r0, r5
   d62c4:	2108      	movs	r1, #8
   d62c6:	f001 fd4a 	bl	d7d5e <_ZdlPvj>
        return p;
    }
   d62ca:	4620      	mov	r0, r4
   d62cc:	b002      	add	sp, #8
   d62ce:	bd70      	pop	{r4, r5, r6, pc}

000d62d0 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   d62d0:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d62d2:	b510      	push	{r4, lr}
      if (_M_empty())
   d62d4:	b90a      	cbnz	r2, d62da <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d62d6:	f001 fd48 	bl	d7d6a <_ZSt25__throw_bad_function_callv>
    }
   d62da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d62de:	68c3      	ldr	r3, [r0, #12]
   d62e0:	4718      	bx	r3

000d62e2 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d62e2:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d62e4:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   d62e6:	f100 0110 	add.w	r1, r0, #16
   d62ea:	f7ff fff1 	bl	d62d0 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   d62ee:	bd08      	pop	{r3, pc}

000d62f0 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   d62f0:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d62f2:	b510      	push	{r4, lr}
      if (_M_empty())
   d62f4:	b90a      	cbnz	r2, d62fa <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d62f6:	f001 fd38 	bl	d7d6a <_ZSt25__throw_bad_function_callv>
    }
   d62fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d62fe:	68c3      	ldr	r3, [r0, #12]
   d6300:	4718      	bx	r3

000d6302 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d6302:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d6304:	6800      	ldr	r0, [r0, #0]
   d6306:	f100 0110 	add.w	r1, r0, #16
   d630a:	f7ff fff1 	bl	d62f0 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   d630e:	bd08      	pop	{r3, pc}

000d6310 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   d6310:	b538      	push	{r3, r4, r5, lr}
   d6312:	2300      	movs	r3, #0
   d6314:	4604      	mov	r4, r0
   d6316:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d6318:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   d631a:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d631c:	f7fd febb 	bl	d4096 <_Znwj>
   d6320:	b128      	cbz	r0, d632e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   d6322:	2301      	movs	r3, #1
   d6324:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   d6328:	4b02      	ldr	r3, [pc, #8]	; (d6334 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d632a:	6003      	str	r3, [r0, #0]
   d632c:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d632e:	6020      	str	r0, [r4, #0]
	}
   d6330:	4620      	mov	r0, r4
   d6332:	bd38      	pop	{r3, r4, r5, pc}
   d6334:	000d9120 	.word	0x000d9120

000d6338 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   d6338:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d633a:	2300      	movs	r3, #0
   d633c:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d633e:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d6340:	4604      	mov	r4, r0
   d6342:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d6344:	b12b      	cbz	r3, d6352 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d6346:	2202      	movs	r2, #2
   d6348:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d634a:	68eb      	ldr	r3, [r5, #12]
   d634c:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d634e:	68ab      	ldr	r3, [r5, #8]
   d6350:	60a3      	str	r3, [r4, #8]
    }
   d6352:	4620      	mov	r0, r4
   d6354:	bd38      	pop	{r3, r4, r5, pc}
	...

000d6358 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   d6358:	b5f0      	push	{r4, r5, r6, r7, lr}
   d635a:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d635c:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d635e:	4668      	mov	r0, sp
   d6360:	f7ff ff60 	bl	d6224 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d6364:	f04f 0302 	mov.w	r3, #2
   d6368:	e8d4 2f4f 	ldrexb	r2, [r4]
   d636c:	2a00      	cmp	r2, #0
   d636e:	d103      	bne.n	d6378 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   d6370:	e8c4 3f41 	strexb	r1, r3, [r4]
   d6374:	2900      	cmp	r1, #0
   d6376:	d1f7      	bne.n	d6368 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   d6378:	d125      	bne.n	d63c6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   d637a:	f104 050c 	add.w	r5, r4, #12
   d637e:	4669      	mov	r1, sp
   d6380:	4628      	mov	r0, r5
   d6382:	f7ff ff4f 	bl	d6224 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   d6386:	f3bf 8f5b 	dmb	ish
   d638a:	2301      	movs	r3, #1
   d638c:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d638e:	2000      	movs	r0, #0
   d6390:	f104 0308 	add.w	r3, r4, #8
   d6394:	f3bf 8f5b 	dmb	ish
   d6398:	e853 6f00 	ldrex	r6, [r3]
   d639c:	e843 0200 	strex	r2, r0, [r3]
   d63a0:	2a00      	cmp	r2, #0
   d63a2:	d1f9      	bne.n	d6398 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   d63a4:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d63a8:	b16e      	cbz	r6, d63c6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   d63aa:	f7ff fd1b 	bl	d5de4 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d63ae:	b178      	cbz	r0, d63d0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d63b0:	4629      	mov	r1, r5
   d63b2:	4630      	mov	r0, r6
   d63b4:	f7ff ff8c 	bl	d62d0 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   d63b8:	4630      	mov	r0, r6
   d63ba:	f7ff fe96 	bl	d60ea <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d63be:	2110      	movs	r1, #16
   d63c0:	4630      	mov	r0, r6
   d63c2:	f001 fccc 	bl	d7d5e <_ZdlPvj>
        p_->setError(std::move(error));
   d63c6:	4668      	mov	r0, sp
   d63c8:	f7ff ff39 	bl	d623e <_ZN8particle5ErrorD1Ev>
    }
   d63cc:	b009      	add	sp, #36	; 0x24
   d63ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  typename __cv_quals<_Bound_args>::type...>;

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d63d0:	4631      	mov	r1, r6
   d63d2:	a802      	add	r0, sp, #8
   d63d4:	f7ff ffb0 	bl	d6338 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d63d8:	68e0      	ldr	r0, [r4, #12]
   d63da:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d63de:	b108      	cbz	r0, d63e4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   d63e0:	f002 fbec 	bl	d8bbc <strdup>
        type_(type) {
   d63e4:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d63e6:	2010      	movs	r0, #16
   d63e8:	f8ad 501c 	strh.w	r5, [sp, #28]
   d63ec:	f7fd fe53 	bl	d4096 <_Znwj>
   d63f0:	4605      	mov	r5, r0
   d63f2:	b1e8      	cbz	r0, d6430 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   d63f4:	2700      	movs	r7, #0
   d63f6:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d63f8:	2018      	movs	r0, #24
   d63fa:	f7fd fe4c 	bl	d4096 <_Znwj>
   d63fe:	4604      	mov	r4, r0
   d6400:	b188      	cbz	r0, d6426 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   d6402:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   d6404:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d6406:	a802      	add	r0, sp, #8
   d6408:	f7ff fe8b 	bl	d6122 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d640c:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d640e:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d6410:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6412:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d6414:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d6416:	a906      	add	r1, sp, #24
   d6418:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d641a:	60e3      	str	r3, [r4, #12]
   d641c:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   d6420:	9205      	str	r2, [sp, #20]
   d6422:	f7ff feff 	bl	d6224 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   d6426:	4b08      	ldr	r3, [pc, #32]	; (d6448 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   d6428:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d642a:	4b08      	ldr	r3, [pc, #32]	; (d644c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d642c:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d642e:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   d6430:	a806      	add	r0, sp, #24
   d6432:	f7ff ff04 	bl	d623e <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d6436:	a802      	add	r0, sp, #8
   d6438:	f7ff fe57 	bl	d60ea <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d643c:	2200      	movs	r2, #0
   d643e:	4629      	mov	r1, r5
   d6440:	4803      	ldr	r0, [pc, #12]	; (d6450 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   d6442:	f7ff fcd7 	bl	d5df4 <application_thread_invoke>
   d6446:	e7b7      	b.n	d63b8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   d6448:	000d62e3 	.word	0x000d62e3
   d644c:	000d6579 	.word	0x000d6579
   d6450:	000d6093 	.word	0x000d6093

000d6454 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d6454:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d6458:	b08a      	sub	sp, #40	; 0x28
   d645a:	4605      	mov	r5, r0
   d645c:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
   d6460:	460c      	mov	r4, r1
   d6462:	4617      	mov	r7, r2
   d6464:	4698      	mov	r8, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d6466:	f7ff fd15 	bl	d5e94 <spark_cloud_flag_connected>
   d646a:	ae07      	add	r6, sp, #28
    if (!connected()) {
   d646c:	4682      	mov	sl, r0
   d646e:	bb38      	cbnz	r0, d64c0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   d6470:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d6474:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d6476:	a905      	add	r1, sp, #20
   d6478:	4630      	mov	r0, r6
   d647a:	f8ad 3018 	strh.w	r3, [sp, #24]
   d647e:	f7ff fed1 	bl	d6224 <_ZN8particle5ErrorC1EOS0_>
   d6482:	2014      	movs	r0, #20
   d6484:	f7fd fe07 	bl	d4096 <_Znwj>
   d6488:	4604      	mov	r4, r0
   d648a:	b148      	cbz	r0, d64a0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d648c:	2302      	movs	r3, #2
   d648e:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d6490:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d6492:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d6496:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   d6498:	4631      	mov	r1, r6
   d649a:	300c      	adds	r0, #12
   d649c:	f7ff fec2 	bl	d6224 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d64a0:	4628      	mov	r0, r5
	: __shared_count(__p)
   d64a2:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d64a4:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   d64a8:	f7ff ff32 	bl	d6310 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d64ac:	4630      	mov	r0, r6
   d64ae:	f7ff fec6 	bl	d623e <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d64b2:	a805      	add	r0, sp, #20
   d64b4:	f7ff fec3 	bl	d623e <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   d64b8:	4628      	mov	r0, r5
   d64ba:	b00a      	add	sp, #40	; 0x28
   d64bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d64c0:	230c      	movs	r3, #12
   d64c2:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d64c6:	2014      	movs	r0, #20
   d64c8:	e9cd aa08 	strd	sl, sl, [sp, #32]
   d64cc:	9307      	str	r3, [sp, #28]
   d64ce:	f7fd fde2 	bl	d4096 <_Znwj>
   d64d2:	4601      	mov	r1, r0
   d64d4:	b128      	cbz	r0, d64e2 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d64d6:	e9c0 aa01 	strd	sl, sl, [r0, #4]
   d64da:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d64de:	f880 a001 	strb.w	sl, [r0, #1]
   d64e2:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d64e4:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   d64e6:	f7ff ff13 	bl	d6310 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   d64ea:	4b22      	ldr	r3, [pc, #136]	; (d6574 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
   d64ec:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d64ee:	2008      	movs	r0, #8
   d64f0:	f7fd fdd1 	bl	d4096 <_Znwj>
   d64f4:	4682      	mov	sl, r0
   d64f6:	b128      	cbz	r0, d6504 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d64f8:	9b03      	ldr	r3, [sp, #12]
   d64fa:	f840 3b04 	str.w	r3, [r0], #4
   d64fe:	a904      	add	r1, sp, #16
   d6500:	f7ff fdfc 	bl	d60fc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d6504:	9600      	str	r6, [sp, #0]
   d6506:	fa5f f389 	uxtb.w	r3, r9
   d650a:	4642      	mov	r2, r8
   d650c:	4639      	mov	r1, r7
   d650e:	4620      	mov	r0, r4
    d.handler_data = p.dataPtr();
   d6510:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d6514:	f7ff fcc6 	bl	d5ea4 <spark_send_event>
   d6518:	b9b8      	cbnz	r0, d654a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
   d651a:	9b03      	ldr	r3, [sp, #12]
   d651c:	785b      	ldrb	r3, [r3, #1]
   d651e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d6522:	b993      	cbnz	r3, d654a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
   d6524:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   d6528:	a905      	add	r1, sp, #20
   d652a:	a803      	add	r0, sp, #12
   d652c:	9205      	str	r2, [sp, #20]
   d652e:	f8ad 3018 	strh.w	r3, [sp, #24]
   d6532:	f7ff ff11 	bl	d6358 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d6536:	a805      	add	r0, sp, #20
   d6538:	f7ff fe81 	bl	d623e <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d653c:	a805      	add	r0, sp, #20
   d653e:	9909      	ldr	r1, [sp, #36]	; 0x24
   d6540:	f7ff fea7 	bl	d6292 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   d6544:	a806      	add	r0, sp, #24
   d6546:	f7ff fde0 	bl	d610a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d654a:	9b03      	ldr	r3, [sp, #12]
   d654c:	9305      	str	r3, [sp, #20]
   d654e:	a904      	add	r1, sp, #16
   d6550:	a806      	add	r0, sp, #24
   d6552:	f7ff fdd3 	bl	d60fc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   d6556:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d6558:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d655a:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   d655c:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   d655e:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   d6560:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   d6562:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   d6564:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   d6566:	f7ff fdd0 	bl	d610a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d656a:	a804      	add	r0, sp, #16
   d656c:	f7ff fdcd 	bl	d610a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   d6570:	e7a2      	b.n	d64b8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   d6572:	bf00      	nop
   d6574:	000d663d 	.word	0x000d663d

000d6578 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
   d6578:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d657a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d657c:	4605      	mov	r5, r0
	  switch (__op)
   d657e:	d007      	beq.n	d6590 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
   d6580:	2a03      	cmp	r2, #3
   d6582:	d018      	beq.n	d65b6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
   d6584:	2a01      	cmp	r2, #1
   d6586:	d101      	bne.n	d658c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d6588:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d658a:	6003      	str	r3, [r0, #0]
	}
   d658c:	2000      	movs	r0, #0
   d658e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d6590:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   d6592:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d6594:	f7fd fd7f 	bl	d4096 <_Znwj>
   d6598:	4604      	mov	r4, r0
   d659a:	b150      	cbz	r0, d65b2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d659c:	4631      	mov	r1, r6
   d659e:	f7ff fecb 	bl	d6338 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d65a2:	6930      	ldr	r0, [r6, #16]
   d65a4:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d65a8:	b108      	cbz	r0, d65ae <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   d65aa:	f002 fb07 	bl	d8bbc <strdup>
        type_(type) {
   d65ae:	6120      	str	r0, [r4, #16]
   d65b0:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   d65b2:	602c      	str	r4, [r5, #0]
	}
   d65b4:	e7ea      	b.n	d658c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d65b6:	6804      	ldr	r4, [r0, #0]
   d65b8:	2c00      	cmp	r4, #0
   d65ba:	d0e7      	beq.n	d658c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
   d65bc:	f104 0010 	add.w	r0, r4, #16
   d65c0:	f7ff fe3d 	bl	d623e <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d65c4:	4620      	mov	r0, r4
   d65c6:	f7ff fd90 	bl	d60ea <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d65ca:	2118      	movs	r1, #24
   d65cc:	4620      	mov	r0, r4
   d65ce:	f001 fbc6 	bl	d7d5e <_ZdlPvj>
   d65d2:	e7db      	b.n	d658c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

000d65d4 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   d65d4:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d65d6:	2300      	movs	r3, #0
   d65d8:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d65da:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d65dc:	4604      	mov	r4, r0
   d65de:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d65e0:	b12b      	cbz	r3, d65ee <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d65e2:	2202      	movs	r2, #2
   d65e4:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d65e6:	68eb      	ldr	r3, [r5, #12]
   d65e8:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d65ea:	68ab      	ldr	r3, [r5, #8]
   d65ec:	60a3      	str	r3, [r4, #8]
    }
   d65ee:	4620      	mov	r0, r4
   d65f0:	bd38      	pop	{r3, r4, r5, pc}

000d65f2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
   d65f2:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d65f4:	b570      	push	{r4, r5, r6, lr}
   d65f6:	4604      	mov	r4, r0
	  switch (__op)
   d65f8:	d007      	beq.n	d660a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
   d65fa:	2a03      	cmp	r2, #3
   d65fc:	d012      	beq.n	d6624 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
   d65fe:	2a01      	cmp	r2, #1
   d6600:	d101      	bne.n	d6606 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d6602:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d6604:	6003      	str	r3, [r0, #0]
	}
   d6606:	2000      	movs	r0, #0
   d6608:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d660a:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   d660c:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d660e:	f7fd fd42 	bl	d4096 <_Znwj>
   d6612:	4605      	mov	r5, r0
   d6614:	b120      	cbz	r0, d6620 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   d6616:	4631      	mov	r1, r6
   d6618:	f7ff ffdc 	bl	d65d4 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d661c:	7c33      	ldrb	r3, [r6, #16]
   d661e:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   d6620:	6025      	str	r5, [r4, #0]
	}
   d6622:	e7f0      	b.n	d6606 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d6624:	6804      	ldr	r4, [r0, #0]
   d6626:	2c00      	cmp	r4, #0
   d6628:	d0ed      	beq.n	d6606 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
   d662a:	4620      	mov	r0, r4
   d662c:	f7ff fd5d 	bl	d60ea <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d6630:	2114      	movs	r1, #20
   d6632:	4620      	mov	r0, r4
   d6634:	f001 fb93 	bl	d7d5e <_ZdlPvj>
   d6638:	e7e5      	b.n	d6606 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

000d663c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d663c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d663e:	b089      	sub	sp, #36	; 0x24
   d6640:	4604      	mov	r4, r0
   d6642:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d6644:	a801      	add	r0, sp, #4
   d6646:	4611      	mov	r1, r2
   d6648:	f7ff fe23 	bl	d6292 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d664c:	b1a4      	cbz	r4, d6678 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   d664e:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d6650:	b11d      	cbz	r5, d665a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   d6652:	4628      	mov	r0, r5
   d6654:	f002 fab2 	bl	d8bbc <strdup>
   d6658:	4605      	mov	r5, r0
   d665a:	a801      	add	r0, sp, #4
   d665c:	a903      	add	r1, sp, #12
        type_(type) {
   d665e:	9503      	str	r5, [sp, #12]
   d6660:	f8ad 4010 	strh.w	r4, [sp, #16]
   d6664:	f7ff fe78 	bl	d6358 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d6668:	a803      	add	r0, sp, #12
   d666a:	f7ff fde8 	bl	d623e <_ZN8particle5ErrorD1Ev>
   d666e:	a802      	add	r0, sp, #8
   d6670:	f7ff fd4b 	bl	d610a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d6674:	b009      	add	sp, #36	; 0x24
   d6676:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d6678:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d667a:	2301      	movs	r3, #1
   d667c:	e8d5 2f4f 	ldrexb	r2, [r5]
   d6680:	2a00      	cmp	r2, #0
   d6682:	d103      	bne.n	d668c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   d6684:	e8c5 3f41 	strexb	r1, r3, [r5]
   d6688:	2900      	cmp	r1, #0
   d668a:	d1f7      	bne.n	d667c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   d668c:	d1ef      	bne.n	d666e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   d668e:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   d6690:	f3bf 8f5b 	dmb	ish
   d6694:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d6696:	1d2b      	adds	r3, r5, #4
   d6698:	f3bf 8f5b 	dmb	ish
   d669c:	e853 6f00 	ldrex	r6, [r3]
   d66a0:	e843 4200 	strex	r2, r4, [r3]
   d66a4:	2a00      	cmp	r2, #0
   d66a6:	d1f9      	bne.n	d669c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   d66a8:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d66ac:	2e00      	cmp	r6, #0
   d66ae:	d0de      	beq.n	d666e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   d66b0:	4620      	mov	r0, r4
   d66b2:	f7ff fb97 	bl	d5de4 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d66b6:	4607      	mov	r7, r0
   d66b8:	b160      	cbz	r0, d66d4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d66ba:	f105 010c 	add.w	r1, r5, #12
   d66be:	4630      	mov	r0, r6
   d66c0:	f7ff fe16 	bl	d62f0 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   d66c4:	4630      	mov	r0, r6
   d66c6:	f7ff fd10 	bl	d60ea <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d66ca:	2110      	movs	r1, #16
   d66cc:	4630      	mov	r0, r6
   d66ce:	f001 fb46 	bl	d7d5e <_ZdlPvj>
   d66d2:	e7cc      	b.n	d666e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d66d4:	4631      	mov	r1, r6
   d66d6:	a803      	add	r0, sp, #12
   d66d8:	f7ff ff7c 	bl	d65d4 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d66dc:	7b2b      	ldrb	r3, [r5, #12]
   d66de:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d66e2:	2010      	movs	r0, #16
   d66e4:	f7fd fcd7 	bl	d4096 <_Znwj>
   d66e8:	4605      	mov	r5, r0
   d66ea:	b1d0      	cbz	r0, d6722 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   d66ec:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d66ee:	2014      	movs	r0, #20
   d66f0:	f7fd fcd1 	bl	d4096 <_Znwj>
   d66f4:	4604      	mov	r4, r0
   d66f6:	b178      	cbz	r0, d6718 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   d66f8:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d66fa:	4601      	mov	r1, r0
   d66fc:	a803      	add	r0, sp, #12
   d66fe:	f7ff fd10 	bl	d6122 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6702:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d6704:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d6706:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6708:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   d670a:	9205      	str	r2, [sp, #20]
   d670c:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d670e:	60e3      	str	r3, [r4, #12]
   d6710:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   d6714:	9206      	str	r2, [sp, #24]
   d6716:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   d6718:	4b06      	ldr	r3, [pc, #24]	; (d6734 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   d671a:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d671c:	4b06      	ldr	r3, [pc, #24]	; (d6738 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d671e:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d6720:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   d6722:	a803      	add	r0, sp, #12
   d6724:	f7ff fce1 	bl	d60ea <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d6728:	2200      	movs	r2, #0
   d672a:	4629      	mov	r1, r5
   d672c:	4803      	ldr	r0, [pc, #12]	; (d673c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   d672e:	f7ff fb61 	bl	d5df4 <application_thread_invoke>
   d6732:	e7c7      	b.n	d66c4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   d6734:	000d6303 	.word	0x000d6303
   d6738:	000d65f3 	.word	0x000d65f3
   d673c:	000d6093 	.word	0x000d6093

000d6740 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d6740:	2200      	movs	r2, #0
   d6742:	6840      	ldr	r0, [r0, #4]
   d6744:	4611      	mov	r1, r2
   d6746:	f7ff bc05 	b.w	d5f54 <network_listening>

000d674a <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d674a:	2200      	movs	r2, #0
   d674c:	6840      	ldr	r0, [r0, #4]
   d674e:	4611      	mov	r1, r2
   d6750:	f7ff bc10 	b.w	d5f74 <network_get_listen_timeout>

000d6754 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d6754:	6840      	ldr	r0, [r0, #4]
   d6756:	2200      	movs	r2, #0
   d6758:	f7ff bc04 	b.w	d5f64 <network_set_listen_timeout>

000d675c <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d675c:	6840      	ldr	r0, [r0, #4]
   d675e:	2200      	movs	r2, #0
   d6760:	f081 0101 	eor.w	r1, r1, #1
   d6764:	f7ff bbee 	b.w	d5f44 <network_listen>

000d6768 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d6768:	2300      	movs	r3, #0
   d676a:	6840      	ldr	r0, [r0, #4]
   d676c:	461a      	mov	r2, r3
   d676e:	4619      	mov	r1, r3
   d6770:	f7ff bbe0 	b.w	d5f34 <network_off>

000d6774 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d6774:	2300      	movs	r3, #0
   d6776:	6840      	ldr	r0, [r0, #4]
   d6778:	461a      	mov	r2, r3
   d677a:	4619      	mov	r1, r3
   d677c:	f7ff bbd2 	b.w	d5f24 <network_on>

000d6780 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d6780:	2200      	movs	r2, #0
   d6782:	6840      	ldr	r0, [r0, #4]
   d6784:	4611      	mov	r1, r2
   d6786:	f7ff bbc5 	b.w	d5f14 <network_ready>

000d678a <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d678a:	2200      	movs	r2, #0
   d678c:	6840      	ldr	r0, [r0, #4]
   d678e:	4611      	mov	r1, r2
   d6790:	f7ff bbb0 	b.w	d5ef4 <network_connecting>

000d6794 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6794:	6840      	ldr	r0, [r0, #4]
   d6796:	2200      	movs	r2, #0
   d6798:	2102      	movs	r1, #2
   d679a:	f7ff bbb3 	b.w	d5f04 <network_disconnect>

000d679e <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d679e:	2300      	movs	r3, #0
   d67a0:	6840      	ldr	r0, [r0, #4]
   d67a2:	461a      	mov	r2, r3
   d67a4:	f7ff bb9e 	b.w	d5ee4 <network_connect>

000d67a8 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   d67a8:	4b02      	ldr	r3, [pc, #8]	; (d67b4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d67aa:	2203      	movs	r2, #3
   d67ac:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d67ae:	4a02      	ldr	r2, [pc, #8]	; (d67b8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d67b0:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d67b2:	4770      	bx	lr
   d67b4:	2003e6fc 	.word	0x2003e6fc
   d67b8:	000d913c 	.word	0x000d913c

000d67bc <_ZN8particle6detail9_getVCellEhh>:

namespace particle { namespace detail {
    // Converts VCELL_REGISTER reading to Battery Voltage
    float _getVCell(byte MSB, byte LSB) {
        // VCELL = 12-bit value, 1.25mV (1V/800) per bit
        float value = (float)((MSB << 4) | (LSB >> 4));
   d67bc:	0909      	lsrs	r1, r1, #4
   d67be:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
   d67c2:	ee07 1a90 	vmov	s15, r1
   d67c6:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
        return value / 800.0;
    }
   d67ca:	eddf 7a02 	vldr	s15, [pc, #8]	; d67d4 <_ZN8particle6detail9_getVCellEhh+0x18>
   d67ce:	ee80 0a27 	vdiv.f32	s0, s0, s15
   d67d2:	4770      	bx	lr
   d67d4:	44480000 	.word	0x44480000

000d67d8 <_ZN9FuelGauge4lockEv>:
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
    return SYSTEM_ERROR_NONE;
}

bool FuelGauge::lock() {
    return i2c_.lock();
   d67d8:	6800      	ldr	r0, [r0, #0]
   d67da:	f000 b939 	b.w	d6a50 <_ZN7TwoWire4lockEv>

000d67de <_ZN9FuelGaugeC1ER7TwoWireb>:
FuelGauge::FuelGauge(TwoWire& i2c, bool _lock)
   d67de:	b510      	push	{r4, lr}
   d67e0:	4604      	mov	r4, r0
      lock_(_lock) {
   d67e2:	6001      	str	r1, [r0, #0]
   d67e4:	7102      	strb	r2, [r0, #4]
    if (lock_) {
   d67e6:	b10a      	cbz	r2, d67ec <_ZN9FuelGaugeC1ER7TwoWireb+0xe>
        lock();
   d67e8:	f7ff fff6 	bl	d67d8 <_ZN9FuelGauge4lockEv>
}
   d67ec:	4620      	mov	r0, r4
   d67ee:	bd10      	pop	{r4, pc}

000d67f0 <_ZN9FuelGaugeC1Eb>:
FuelGauge::FuelGauge(bool _lock)
   d67f0:	b513      	push	{r0, r1, r4, lr}
   d67f2:	4604      	mov	r4, r0
   d67f4:	9101      	str	r1, [sp, #4]
            return &Wire1;
   d67f6:	f001 fa85 	bl	d7d04 <_Z20__fetch_global_Wire1v>
        : FuelGauge(*fuelWireInstance(), _lock)
   d67fa:	9a01      	ldr	r2, [sp, #4]
            return &Wire1;
   d67fc:	4601      	mov	r1, r0
        : FuelGauge(*fuelWireInstance(), _lock)
   d67fe:	4620      	mov	r0, r4
   d6800:	f7ff ffed 	bl	d67de <_ZN9FuelGaugeC1ER7TwoWireb>
}
   d6804:	4620      	mov	r0, r4
   d6806:	b002      	add	sp, #8
   d6808:	bd10      	pop	{r4, pc}

000d680a <_ZN9FuelGauge6unlockEv>:
}

bool FuelGauge::unlock() {
    return i2c_.unlock();
   d680a:	6800      	ldr	r0, [r0, #0]
   d680c:	f000 b929 	b.w	d6a62 <_ZN7TwoWire6unlockEv>

000d6810 <_ZN9FuelGaugeD1Ev>:
FuelGauge::~FuelGauge()
   d6810:	b510      	push	{r4, lr}
    if (lock_) {
   d6812:	7903      	ldrb	r3, [r0, #4]
FuelGauge::~FuelGauge()
   d6814:	4604      	mov	r4, r0
    if (lock_) {
   d6816:	b10b      	cbz	r3, d681c <_ZN9FuelGaugeD1Ev+0xc>
        unlock();
   d6818:	f7ff fff7 	bl	d680a <_ZN9FuelGauge6unlockEv>
}
   d681c:	4620      	mov	r0, r4
   d681e:	bd10      	pop	{r4, pc}

000d6820 <_ZN9FuelGauge12readRegisterEhRhS0_>:
int FuelGauge::readRegister(byte startAddress, byte &MSB, byte &LSB) {
   d6820:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   d6824:	4604      	mov	r4, r0
   d6826:	460d      	mov	r5, r1
   d6828:	4617      	mov	r7, r2
   d682a:	461e      	mov	r6, r3
   d682c:	f7ff ffd4 	bl	d67d8 <_ZN9FuelGauge4lockEv>
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d6830:	2336      	movs	r3, #54	; 0x36
   d6832:	f88d 3000 	strb.w	r3, [sp]
   d6836:	2300      	movs	r3, #0
    i2c_.beginTransmission(config);
   d6838:	6820      	ldr	r0, [r4, #0]
   d683a:	9301      	str	r3, [sp, #4]
   d683c:	f04f 0801 	mov.w	r8, #1
    size_ = size;
    return *this;
  }

  WireTransmission& timeout(system_tick_t ms) {
    timeout_ = ms;
   d6840:	230a      	movs	r3, #10
   d6842:	4669      	mov	r1, sp
   d6844:	9303      	str	r3, [sp, #12]
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d6846:	f88d 8008 	strb.w	r8, [sp, #8]
   d684a:	f000 f8e1 	bl	d6a10 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
    i2c_.write(startAddress);
   d684e:	6820      	ldr	r0, [r4, #0]
   d6850:	6803      	ldr	r3, [r0, #0]
   d6852:	4629      	mov	r1, r5
   d6854:	689b      	ldr	r3, [r3, #8]
   d6856:	4798      	blx	r3
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
   d6858:	6820      	ldr	r0, [r4, #0]
   d685a:	4641      	mov	r1, r8
   d685c:	f000 f8f0 	bl	d6a40 <_ZN7TwoWire15endTransmissionEh>
   d6860:	4605      	mov	r5, r0
   d6862:	b140      	cbz	r0, d6876 <_ZN9FuelGauge12readRegisterEhRhS0_+0x56>
   d6864:	f06f 059f 	mvn.w	r5, #159	; 0x9f
      { _M_device.unlock(); }
   d6868:	4620      	mov	r0, r4
   d686a:	f7ff ffce 	bl	d680a <_ZN9FuelGauge6unlockEv>
}
   d686e:	4628      	mov	r0, r5
   d6870:	b004      	add	sp, #16
   d6872:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_ = size;
   d6876:	2302      	movs	r3, #2
    CHECK_TRUE(i2c_.requestFrom(config) == 2, SYSTEM_ERROR_TIMEOUT);
   d6878:	6820      	ldr	r0, [r4, #0]
   d687a:	9301      	str	r3, [sp, #4]
   d687c:	4669      	mov	r1, sp
   d687e:	f000 f897 	bl	d69b0 <_ZN7TwoWire11requestFromERK16WireTransmission>
   d6882:	2802      	cmp	r0, #2
   d6884:	d1ee      	bne.n	d6864 <_ZN9FuelGauge12readRegisterEhRhS0_+0x44>
    MSB = i2c_.read();
   d6886:	6820      	ldr	r0, [r4, #0]
   d6888:	6803      	ldr	r3, [r0, #0]
   d688a:	695b      	ldr	r3, [r3, #20]
   d688c:	4798      	blx	r3
   d688e:	7038      	strb	r0, [r7, #0]
    LSB = i2c_.read();
   d6890:	6820      	ldr	r0, [r4, #0]
   d6892:	6803      	ldr	r3, [r0, #0]
   d6894:	695b      	ldr	r3, [r3, #20]
   d6896:	4798      	blx	r3
   d6898:	7030      	strb	r0, [r6, #0]
    return SYSTEM_ERROR_NONE;
   d689a:	e7e5      	b.n	d6868 <_ZN9FuelGauge12readRegisterEhRhS0_+0x48>

000d689c <_ZN9FuelGauge8getVCellEv>:
float FuelGauge::getVCell() {
   d689c:	b507      	push	{r0, r1, r2, lr}
    byte MSB = 0;
   d689e:	2300      	movs	r3, #0
   d68a0:	f88d 3006 	strb.w	r3, [sp, #6]
    byte LSB = 0;
   d68a4:	f88d 3007 	strb.w	r3, [sp, #7]
    if (readRegister(VCELL_REGISTER, MSB, LSB) != SYSTEM_ERROR_NONE) {
   d68a8:	f10d 0206 	add.w	r2, sp, #6
   d68ac:	f10d 0307 	add.w	r3, sp, #7
   d68b0:	2102      	movs	r1, #2
   d68b2:	f7ff ffb5 	bl	d6820 <_ZN9FuelGauge12readRegisterEhRhS0_>
   d68b6:	b940      	cbnz	r0, d68ca <_ZN9FuelGauge8getVCellEv+0x2e>
    return particle::detail::_getVCell(MSB, LSB);
   d68b8:	f89d 1007 	ldrb.w	r1, [sp, #7]
   d68bc:	f89d 0006 	ldrb.w	r0, [sp, #6]
}
   d68c0:	b003      	add	sp, #12
   d68c2:	f85d eb04 	ldr.w	lr, [sp], #4
    return particle::detail::_getVCell(MSB, LSB);
   d68c6:	f7ff bf79 	b.w	d67bc <_ZN8particle6detail9_getVCellEhh>
}
   d68ca:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
   d68ce:	b003      	add	sp, #12
   d68d0:	f85d fb04 	ldr.w	pc, [sp], #4

000d68d4 <_ZN9FuelGauge6getSoCEv>:
float FuelGauge::getSoC() {
   d68d4:	b507      	push	{r0, r1, r2, lr}
    byte MSB = 0;
   d68d6:	2300      	movs	r3, #0
   d68d8:	f88d 3006 	strb.w	r3, [sp, #6]
    byte LSB = 0;
   d68dc:	f88d 3007 	strb.w	r3, [sp, #7]
    if(readRegister(SOC_REGISTER, MSB, LSB) != SYSTEM_ERROR_NONE) {
   d68e0:	f10d 0206 	add.w	r2, sp, #6
   d68e4:	f10d 0307 	add.w	r3, sp, #7
   d68e8:	2104      	movs	r1, #4
   d68ea:	f7ff ff99 	bl	d6820 <_ZN9FuelGauge12readRegisterEhRhS0_>
   d68ee:	b9b0      	cbnz	r0, d691e <_ZN9FuelGauge6getSoCEv+0x4a>
        float decimal = LSB / 256.0;
   d68f0:	f89d 0007 	ldrb.w	r0, [sp, #7]
   d68f4:	f001 fb8e 	bl	d8014 <__aeabi_i2d>
   d68f8:	4b0a      	ldr	r3, [pc, #40]	; (d6924 <_ZN9FuelGauge6getSoCEv+0x50>)
   d68fa:	2200      	movs	r2, #0
   d68fc:	f001 fbf4 	bl	d80e8 <__aeabi_dmul>
   d6900:	f001 feac 	bl	d865c <__aeabi_d2f>
        return MSB + decimal;
   d6904:	f89d 3006 	ldrb.w	r3, [sp, #6]
   d6908:	ee00 3a10 	vmov	s0, r3
   d690c:	ee07 0a90 	vmov	s15, r0
   d6910:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
   d6914:	ee37 0a80 	vadd.f32	s0, s15, s0
}
   d6918:	b003      	add	sp, #12
   d691a:	f85d fb04 	ldr.w	pc, [sp], #4
        return -1.0f;
   d691e:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
   d6922:	e7f9      	b.n	d6918 <_ZN9FuelGauge6getSoCEv+0x44>
   d6924:	3f700000 	.word	0x3f700000

000d6928 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d6928:	4770      	bx	lr

000d692a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d692a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d692c:	4606      	mov	r6, r0
   d692e:	4615      	mov	r5, r2
   d6930:	460c      	mov	r4, r1
   d6932:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d6934:	42bc      	cmp	r4, r7
   d6936:	d006      	beq.n	d6946 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d6938:	6833      	ldr	r3, [r6, #0]
   d693a:	f814 1b01 	ldrb.w	r1, [r4], #1
   d693e:	689b      	ldr	r3, [r3, #8]
   d6940:	4630      	mov	r0, r6
   d6942:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d6944:	e7f6      	b.n	d6934 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d6946:	4628      	mov	r0, r5
   d6948:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d694a <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d694a:	7c00      	ldrb	r0, [r0, #16]
   d694c:	2200      	movs	r2, #0
   d694e:	f7ff b917 	b.w	d5b80 <hal_i2c_write>

000d6952 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d6952:	7c00      	ldrb	r0, [r0, #16]
   d6954:	2100      	movs	r1, #0
   d6956:	f7ff b91b 	b.w	d5b90 <hal_i2c_available>

000d695a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d695a:	7c00      	ldrb	r0, [r0, #16]
   d695c:	2100      	movs	r1, #0
   d695e:	f7ff b91f 	b.w	d5ba0 <hal_i2c_read>

000d6962 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d6962:	7c00      	ldrb	r0, [r0, #16]
   d6964:	2100      	movs	r1, #0
   d6966:	f7ff b923 	b.w	d5bb0 <hal_i2c_peek>

000d696a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d696a:	7c00      	ldrb	r0, [r0, #16]
   d696c:	2100      	movs	r1, #0
   d696e:	f7ff b927 	b.w	d5bc0 <hal_i2c_flush>

000d6972 <_ZN7TwoWireD0Ev>:
   d6972:	b510      	push	{r4, lr}
   d6974:	2114      	movs	r1, #20
   d6976:	4604      	mov	r4, r0
   d6978:	f001 f9f1 	bl	d7d5e <_ZdlPvj>
   d697c:	4620      	mov	r0, r4
   d697e:	bd10      	pop	{r4, pc}

000d6980 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d6980:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d6982:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d6986:	4604      	mov	r4, r0
   d6988:	4608      	mov	r0, r1
   d698a:	2100      	movs	r1, #0
   d698c:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d6990:	4b03      	ldr	r3, [pc, #12]	; (d69a0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d6992:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d6994:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d6996:	4611      	mov	r1, r2
   d6998:	f7ff f922 	bl	d5be0 <hal_i2c_init>
}
   d699c:	4620      	mov	r0, r4
   d699e:	bd10      	pop	{r4, pc}
   d69a0:	000d9178 	.word	0x000d9178

000d69a4 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d69a4:	2300      	movs	r3, #0
   d69a6:	7c00      	ldrb	r0, [r0, #16]
   d69a8:	461a      	mov	r2, r3
   d69aa:	4619      	mov	r1, r3
   d69ac:	f7ff b8d0 	b.w	d5b50 <hal_i2c_begin>

000d69b0 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d69b0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   d69b2:	2200      	movs	r2, #0
   d69b4:	2314      	movs	r3, #20
   d69b6:	e9cd 2201 	strd	r2, r2, [sp, #4]
   d69ba:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   d69be:	780b      	ldrb	r3, [r1, #0]
   d69c0:	f88d 3008 	strb.w	r3, [sp, #8]
   d69c4:	684b      	ldr	r3, [r1, #4]
   d69c6:	9303      	str	r3, [sp, #12]
   d69c8:	68cb      	ldr	r3, [r1, #12]
   d69ca:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   d69cc:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   d69ce:	7a0b      	ldrb	r3, [r1, #8]
   d69d0:	9305      	str	r3, [sp, #20]
   d69d2:	a901      	add	r1, sp, #4
   d69d4:	f7ff f91c 	bl	d5c10 <hal_i2c_request_ex>
}
   d69d8:	b007      	add	sp, #28
   d69da:	f85d fb04 	ldr.w	pc, [sp], #4

000d69de <_ZN7TwoWire11requestFromEhjh>:
{
   d69de:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d69e0:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d69e2:	f88d 1000 	strb.w	r1, [sp]
   d69e6:	f04f 0164 	mov.w	r1, #100	; 0x64
   d69ea:	9103      	str	r1, [sp, #12]
   d69ec:	bf18      	it	ne
   d69ee:	2301      	movne	r3, #1
   d69f0:	4669      	mov	r1, sp
    size_ = size;
   d69f2:	9201      	str	r2, [sp, #4]
   d69f4:	f88d 3008 	strb.w	r3, [sp, #8]
   d69f8:	f7ff ffda 	bl	d69b0 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d69fc:	b005      	add	sp, #20
   d69fe:	f85d fb04 	ldr.w	pc, [sp], #4

000d6a02 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   d6a02:	7c00      	ldrb	r0, [r0, #16]
   d6a04:	2200      	movs	r2, #0
   d6a06:	f7ff b8ab 	b.w	d5b60 <hal_i2c_begin_transmission>

000d6a0a <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   d6a0a:	b2c9      	uxtb	r1, r1
   d6a0c:	f7ff bff9 	b.w	d6a02 <_ZN7TwoWire17beginTransmissionEh>

000d6a10 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>:
void TwoWire::beginTransmission(const WireTransmission& transfer) {
   d6a10:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   d6a12:	2300      	movs	r3, #0
   d6a14:	e9cd 3301 	strd	r3, r3, [sp, #4]
    };
   d6a18:	684a      	ldr	r2, [r1, #4]
   d6a1a:	9203      	str	r2, [sp, #12]
    hal_i2c_transmission_config_t conf = {
   d6a1c:	2314      	movs	r3, #20
    };
   d6a1e:	68ca      	ldr	r2, [r1, #12]
    hal_i2c_transmission_config_t conf = {
   d6a20:	f8ad 3004 	strh.w	r3, [sp, #4]
      .address = address_,
   d6a24:	780b      	ldrb	r3, [r1, #0]
    };
   d6a26:	9204      	str	r2, [sp, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   d6a28:	7a0a      	ldrb	r2, [r1, #8]
   d6a2a:	9205      	str	r2, [sp, #20]
  hal_i2c_begin_transmission(_i2c, conf.address, &conf);
   d6a2c:	7c00      	ldrb	r0, [r0, #16]
    };
   d6a2e:	f88d 3008 	strb.w	r3, [sp, #8]
   d6a32:	aa01      	add	r2, sp, #4
   d6a34:	4619      	mov	r1, r3
   d6a36:	f7ff f893 	bl	d5b60 <hal_i2c_begin_transmission>
}
   d6a3a:	b007      	add	sp, #28
   d6a3c:	f85d fb04 	ldr.w	pc, [sp], #4

000d6a40 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   d6a40:	7c00      	ldrb	r0, [r0, #16]
   d6a42:	2200      	movs	r2, #0
   d6a44:	f7ff b894 	b.w	d5b70 <hal_i2c_end_transmission>

000d6a48 <_ZN7TwoWire9isEnabledEv>:
  hal_i2c_set_callback_on_requested(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return hal_i2c_is_enabled(_i2c, NULL);
   d6a48:	7c00      	ldrb	r0, [r0, #16]
   d6a4a:	2100      	movs	r1, #0
   d6a4c:	f7ff b8c0 	b.w	d5bd0 <hal_i2c_is_enabled>

000d6a50 <_ZN7TwoWire4lockEv>:
{
  hal_i2c_reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
   d6a50:	b508      	push	{r3, lr}
  return hal_i2c_lock(_i2c, NULL) == 0;
   d6a52:	2100      	movs	r1, #0
   d6a54:	7c00      	ldrb	r0, [r0, #16]
   d6a56:	f7ff f8cb 	bl	d5bf0 <hal_i2c_lock>
}
   d6a5a:	fab0 f080 	clz	r0, r0
   d6a5e:	0940      	lsrs	r0, r0, #5
   d6a60:	bd08      	pop	{r3, pc}

000d6a62 <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
   d6a62:	b508      	push	{r3, lr}
  return hal_i2c_unlock(_i2c, NULL) == 0;
   d6a64:	2100      	movs	r1, #0
   d6a66:	7c00      	ldrb	r0, [r0, #16]
   d6a68:	f7ff f8ca 	bl	d5c00 <hal_i2c_unlock>
}
   d6a6c:	fab0 f080 	clz	r0, r0
   d6a70:	0940      	lsrs	r0, r0, #5
   d6a72:	bd08      	pop	{r3, pc}

000d6a74 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   d6a74:	4700      	bx	r0
	...

000d6a78 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   d6a78:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
   d6a7c:	2400      	movs	r4, #0
{
   d6a7e:	461d      	mov	r5, r3
   d6a80:	460f      	mov	r7, r1
   d6a82:	4690      	mov	r8, r2
   d6a84:	4606      	mov	r6, r0
    HAL_Interrupts_Detach(pin);
   d6a86:	f7ff f853 	bl	d5b30 <HAL_Interrupts_Detach>
  if (priority >= 0) {
   d6a8a:	42a5      	cmp	r5, r4
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d6a8c:	f04f 0304 	mov.w	r3, #4
    HAL_InterruptExtraConfiguration extra = {0};
   d6a90:	f8ad 400d 	strh.w	r4, [sp, #13]
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d6a94:	f88d 300c 	strb.w	r3, [sp, #12]
    HAL_InterruptExtraConfiguration extra = {0};
   d6a98:	f88d 400f 	strb.w	r4, [sp, #15]
    extra.IRQChannelSubPriority = subpriority;
   d6a9c:	bfa2      	ittt	ge
   d6a9e:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   d6aa2:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
   d6aa6:	ac03      	addge	r4, sp, #12
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d6aa8:	4907      	ldr	r1, [pc, #28]	; (d6ac8 <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)
   d6aaa:	9400      	str	r4, [sp, #0]
   d6aac:	4643      	mov	r3, r8
   d6aae:	463a      	mov	r2, r7
   d6ab0:	4630      	mov	r0, r6
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   d6ab2:	bfa8      	it	ge
   d6ab4:	f88d 500d 	strbge.w	r5, [sp, #13]
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d6ab8:	f7ff f832 	bl	d5b20 <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
   d6abc:	fab0 f080 	clz	r0, r0
   d6ac0:	0940      	lsrs	r0, r0, #5
   d6ac2:	b004      	add	sp, #16
   d6ac4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6ac8:	000d6a75 	.word	0x000d6a75

000d6acc <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d6acc:	4770      	bx	lr

000d6ace <_ZN9IPAddressD0Ev>:
   d6ace:	b510      	push	{r4, lr}
   d6ad0:	2118      	movs	r1, #24
   d6ad2:	4604      	mov	r4, r0
   d6ad4:	f001 f943 	bl	d7d5e <_ZdlPvj>
   d6ad8:	4620      	mov	r0, r4
   d6ada:	bd10      	pop	{r4, pc}

000d6adc <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d6adc:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d6ade:	7d03      	ldrb	r3, [r0, #20]
   d6ae0:	2b06      	cmp	r3, #6
{
   d6ae2:	b08d      	sub	sp, #52	; 0x34
   d6ae4:	460e      	mov	r6, r1
   d6ae6:	f100 0704 	add.w	r7, r0, #4
   d6aea:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d6aee:	d012      	beq.n	d6b16 <_ZNK9IPAddress7printToER5Print+0x3a>
   d6af0:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d6af4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d6af8:	220a      	movs	r2, #10
   d6afa:	4630      	mov	r0, r6
   d6afc:	f000 f9ff 	bl	d6efe <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d6b00:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d6b02:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d6b04:	d019      	beq.n	d6b3a <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d6b06:	2c00      	cmp	r4, #0
   d6b08:	d0f4      	beq.n	d6af4 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d6b0a:	212e      	movs	r1, #46	; 0x2e
   d6b0c:	4630      	mov	r0, r6
   d6b0e:	f000 f9e7 	bl	d6ee0 <_ZN5Print5printEc>
   d6b12:	4404      	add	r4, r0
   d6b14:	e7ee      	b.n	d6af4 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d6b16:	232f      	movs	r3, #47	; 0x2f
   d6b18:	466a      	mov	r2, sp
   d6b1a:	4639      	mov	r1, r7
   d6b1c:	200a      	movs	r0, #10
		buf[0] = 0;
   d6b1e:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d6b22:	f7ff f87d 	bl	d5c20 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d6b26:	4668      	mov	r0, sp
   d6b28:	f002 f865 	bl	d8bf6 <strlen>
   d6b2c:	6833      	ldr	r3, [r6, #0]
   d6b2e:	4602      	mov	r2, r0
   d6b30:	68db      	ldr	r3, [r3, #12]
   d6b32:	4669      	mov	r1, sp
   d6b34:	4630      	mov	r0, r6
   d6b36:	4798      	blx	r3
   d6b38:	4604      	mov	r4, r0
    }
    return n;
}
   d6b3a:	4620      	mov	r0, r4
   d6b3c:	b00d      	add	sp, #52	; 0x34
   d6b3e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6b40 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d6b40:	b510      	push	{r4, lr}
   d6b42:	4b05      	ldr	r3, [pc, #20]	; (d6b58 <_ZN9IPAddressC1Ev+0x18>)
   d6b44:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d6b46:	2211      	movs	r2, #17
   d6b48:	f840 3b04 	str.w	r3, [r0], #4
   d6b4c:	2100      	movs	r1, #0
   d6b4e:	f001 fff7 	bl	d8b40 <memset>
}
   d6b52:	4620      	mov	r0, r4
   d6b54:	bd10      	pop	{r4, pc}
   d6b56:	bf00      	nop
   d6b58:	000d91a0 	.word	0x000d91a0

000d6b5c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d6b5c:	4603      	mov	r3, r0
   d6b5e:	4a07      	ldr	r2, [pc, #28]	; (d6b7c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d6b60:	b510      	push	{r4, lr}
   d6b62:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d6b66:	f101 0210 	add.w	r2, r1, #16
   d6b6a:	f851 4b04 	ldr.w	r4, [r1], #4
   d6b6e:	f843 4b04 	str.w	r4, [r3], #4
   d6b72:	4291      	cmp	r1, r2
   d6b74:	d1f9      	bne.n	d6b6a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d6b76:	780a      	ldrb	r2, [r1, #0]
   d6b78:	701a      	strb	r2, [r3, #0]
}
   d6b7a:	bd10      	pop	{r4, pc}
   d6b7c:	000d91a0 	.word	0x000d91a0

000d6b80 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d6b80:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d6b82:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d6b86:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d6b8a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d6b8e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d6b92:	2304      	movs	r3, #4
   d6b94:	6041      	str	r1, [r0, #4]
   d6b96:	7503      	strb	r3, [r0, #20]
}
   d6b98:	bd10      	pop	{r4, pc}
	...

000d6b9c <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   d6b9c:	b513      	push	{r0, r1, r4, lr}
   d6b9e:	4b05      	ldr	r3, [pc, #20]	; (d6bb4 <_ZN9IPAddressC1EPKh+0x18>)
   d6ba0:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   d6ba2:	78cb      	ldrb	r3, [r1, #3]
   d6ba4:	9300      	str	r3, [sp, #0]
   d6ba6:	788b      	ldrb	r3, [r1, #2]
   d6ba8:	784a      	ldrb	r2, [r1, #1]
   d6baa:	7809      	ldrb	r1, [r1, #0]
   d6bac:	f7ff ffe8 	bl	d6b80 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d6bb0:	b002      	add	sp, #8
   d6bb2:	bd10      	pop	{r4, pc}
   d6bb4:	000d91a0 	.word	0x000d91a0

000d6bb8 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d6bb8:	4b01      	ldr	r3, [pc, #4]	; (d6bc0 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d6bba:	4a02      	ldr	r2, [pc, #8]	; (d6bc4 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d6bbc:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d6bbe:	4770      	bx	lr
   d6bc0:	2003e704 	.word	0x2003e704
   d6bc4:	000d91ac 	.word	0x000d91ac

000d6bc8 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d6bc8:	2300      	movs	r3, #0
   d6bca:	6840      	ldr	r0, [r0, #4]
   d6bcc:	461a      	mov	r2, r3
   d6bce:	f7ff b989 	b.w	d5ee4 <network_connect>

000d6bd2 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d6bd2:	6840      	ldr	r0, [r0, #4]
   d6bd4:	2200      	movs	r2, #0
   d6bd6:	2102      	movs	r1, #2
   d6bd8:	f7ff b994 	b.w	d5f04 <network_disconnect>

000d6bdc <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d6bdc:	2200      	movs	r2, #0
   d6bde:	6840      	ldr	r0, [r0, #4]
   d6be0:	4611      	mov	r1, r2
   d6be2:	f7ff b987 	b.w	d5ef4 <network_connecting>

000d6be6 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d6be6:	2200      	movs	r2, #0
   d6be8:	6840      	ldr	r0, [r0, #4]
   d6bea:	4611      	mov	r1, r2
   d6bec:	f7ff b992 	b.w	d5f14 <network_ready>

000d6bf0 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d6bf0:	2300      	movs	r3, #0
   d6bf2:	6840      	ldr	r0, [r0, #4]
   d6bf4:	461a      	mov	r2, r3
   d6bf6:	4619      	mov	r1, r3
   d6bf8:	f7ff b994 	b.w	d5f24 <network_on>

000d6bfc <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d6bfc:	2300      	movs	r3, #0
   d6bfe:	6840      	ldr	r0, [r0, #4]
   d6c00:	461a      	mov	r2, r3
   d6c02:	4619      	mov	r1, r3
   d6c04:	f7ff b996 	b.w	d5f34 <network_off>

000d6c08 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   d6c08:	6840      	ldr	r0, [r0, #4]
   d6c0a:	2100      	movs	r1, #0
   d6c0c:	f7ff b9ba 	b.w	d5f84 <network_is_on>

000d6c10 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   d6c10:	6840      	ldr	r0, [r0, #4]
   d6c12:	2100      	movs	r1, #0
   d6c14:	f7ff b9be 	b.w	d5f94 <network_is_off>

000d6c18 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d6c18:	6840      	ldr	r0, [r0, #4]
   d6c1a:	2200      	movs	r2, #0
   d6c1c:	f081 0101 	eor.w	r1, r1, #1
   d6c20:	f7ff b990 	b.w	d5f44 <network_listen>

000d6c24 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d6c24:	6840      	ldr	r0, [r0, #4]
   d6c26:	2200      	movs	r2, #0
   d6c28:	f7ff b99c 	b.w	d5f64 <network_set_listen_timeout>

000d6c2c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d6c2c:	2200      	movs	r2, #0
   d6c2e:	6840      	ldr	r0, [r0, #4]
   d6c30:	4611      	mov	r1, r2
   d6c32:	f7ff b99f 	b.w	d5f74 <network_get_listen_timeout>

000d6c36 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d6c36:	2200      	movs	r2, #0
   d6c38:	6840      	ldr	r0, [r0, #4]
   d6c3a:	4611      	mov	r1, r2
   d6c3c:	f7ff b98a 	b.w	d5f54 <network_listening>

000d6c40 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d6c40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d6c44:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d6c46:	b095      	sub	sp, #84	; 0x54
   d6c48:	4616      	mov	r6, r2
   d6c4a:	460d      	mov	r5, r1
   d6c4c:	4607      	mov	r7, r0
    IPAddress addr;
   d6c4e:	f7ff ff77 	bl	d6b40 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d6c52:	4621      	mov	r1, r4
   d6c54:	2218      	movs	r2, #24
   d6c56:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d6c58:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d6c5a:	f001 ff71 	bl	d8b40 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d6c5e:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d6c60:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d6c64:	4621      	mov	r1, r4
   d6c66:	466b      	mov	r3, sp
   d6c68:	aa0c      	add	r2, sp, #48	; 0x30
   d6c6a:	4630      	mov	r0, r6
   d6c6c:	f7fe ffe8 	bl	d5c40 <netdb_getaddrinfo>
    if (!r) {
   d6c70:	4604      	mov	r4, r0
   d6c72:	2800      	cmp	r0, #0
   d6c74:	d14c      	bne.n	d6d10 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d6c76:	4602      	mov	r2, r0
   d6c78:	2101      	movs	r1, #1
   d6c7a:	6868      	ldr	r0, [r5, #4]
   d6c7c:	f7ff f94a 	bl	d5f14 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6c80:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d6c82:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6c84:	4622      	mov	r2, r4
   d6c86:	6868      	ldr	r0, [r5, #4]
   d6c88:	f7ff f944 	bl	d5f14 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6c8c:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6c8e:	4681      	mov	r9, r0
        bool ok = false;
   d6c90:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6c92:	2e00      	cmp	r6, #0
   d6c94:	d03c      	beq.n	d6d10 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
   d6c96:	2900      	cmp	r1, #0
   d6c98:	d13a      	bne.n	d6d10 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d6c9a:	6873      	ldr	r3, [r6, #4]
   d6c9c:	2b02      	cmp	r3, #2
   d6c9e:	d003      	beq.n	d6ca8 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d6ca0:	2b0a      	cmp	r3, #10
   d6ca2:	d011      	beq.n	d6cc8 <_ZN5spark12NetworkClass7resolveEPKc+0x88>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6ca4:	69f6      	ldr	r6, [r6, #28]
   d6ca6:	e7f4      	b.n	d6c92 <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d6ca8:	f1b8 0f00 	cmp.w	r8, #0
   d6cac:	d00a      	beq.n	d6cc4 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d6cae:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   d6cb0:	a806      	add	r0, sp, #24
   d6cb2:	3104      	adds	r1, #4
class IPAddress : public Printable {
   d6cb4:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   d6cb6:	f7ff ff71 	bl	d6b9c <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   d6cba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6cbc:	1d3c      	adds	r4, r7, #4
   d6cbe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6cc0:	682b      	ldr	r3, [r5, #0]
   d6cc2:	7023      	strb	r3, [r4, #0]
    virtual ~IPAddress() {}
   d6cc4:	4641      	mov	r1, r8
   d6cc6:	e7ed      	b.n	d6ca4 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d6cc8:	f1b9 0f00 	cmp.w	r9, #0
   d6ccc:	d101      	bne.n	d6cd2 <_ZN5spark12NetworkClass7resolveEPKc+0x92>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d6cce:	4649      	mov	r1, r9
   d6cd0:	e7e8      	b.n	d6ca4 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d6cd2:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d6cd4:	2210      	movs	r2, #16
   d6cd6:	a801      	add	r0, sp, #4
   d6cd8:	f001 ff32 	bl	d8b40 <memset>
                    a.v = 6;
   d6cdc:	2306      	movs	r3, #6
   d6cde:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d6ce2:	ad01      	add	r5, sp, #4
   d6ce4:	f104 0308 	add.w	r3, r4, #8
   d6ce8:	3418      	adds	r4, #24
   d6cea:	6818      	ldr	r0, [r3, #0]
   d6cec:	6859      	ldr	r1, [r3, #4]
   d6cee:	462a      	mov	r2, r5
   d6cf0:	c203      	stmia	r2!, {r0, r1}
   d6cf2:	3308      	adds	r3, #8
   d6cf4:	42a3      	cmp	r3, r4
   d6cf6:	4615      	mov	r5, r2
   d6cf8:	d1f7      	bne.n	d6cea <_ZN5spark12NetworkClass7resolveEPKc+0xaa>
                    addr = IPAddress(a);
   d6cfa:	a901      	add	r1, sp, #4
   d6cfc:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d6cfe:	ad07      	add	r5, sp, #28
   d6d00:	f7ff ff2c 	bl	d6b5c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d6d04:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6d06:	1d3c      	adds	r4, r7, #4
   d6d08:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6d0a:	682b      	ldr	r3, [r5, #0]
   d6d0c:	7023      	strb	r3, [r4, #0]
   d6d0e:	e7de      	b.n	d6cce <_ZN5spark12NetworkClass7resolveEPKc+0x8e>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d6d10:	9800      	ldr	r0, [sp, #0]
   d6d12:	f7fe ff8d 	bl	d5c30 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d6d16:	4638      	mov	r0, r7
   d6d18:	b015      	add	sp, #84	; 0x54
   d6d1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d6d20 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d6d20:	4b02      	ldr	r3, [pc, #8]	; (d6d2c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d6d22:	4a03      	ldr	r2, [pc, #12]	; (d6d30 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d6d24:	601a      	str	r2, [r3, #0]
   d6d26:	2200      	movs	r2, #0
   d6d28:	605a      	str	r2, [r3, #4]

} // spark
   d6d2a:	4770      	bx	lr
   d6d2c:	2003e708 	.word	0x2003e708
   d6d30:	000d91b8 	.word	0x000d91b8

000d6d34 <_ZN4PMIC4lockEv.constprop.0>:
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
   d6d34:	b508      	push	{r3, lr}
            return &Wire1;
   d6d36:	f000 ffe5 	bl	d7d04 <_Z20__fetch_global_Wire1v>
    return pmicWireInstance()->lock();
}
   d6d3a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return pmicWireInstance()->lock();
   d6d3e:	f7ff be87 	b.w	d6a50 <_ZN7TwoWire4lockEv>

000d6d42 <_ZN4PMICC1Eb>:
PMIC::PMIC(bool _lock) :
   d6d42:	b510      	push	{r4, lr}
   d6d44:	4604      	mov	r4, r0
    lock_(_lock)
   d6d46:	7001      	strb	r1, [r0, #0]
    if (lock_) {
   d6d48:	b109      	cbz	r1, d6d4e <_ZN4PMICC1Eb+0xc>
        lock();
   d6d4a:	f7ff fff3 	bl	d6d34 <_ZN4PMIC4lockEv.constprop.0>
}
   d6d4e:	4620      	mov	r0, r4
   d6d50:	bd10      	pop	{r4, pc}

000d6d52 <_ZN4PMIC5beginEv>:
{
   d6d52:	b508      	push	{r3, lr}
            return &Wire1;
   d6d54:	f000 ffd6 	bl	d7d04 <_Z20__fetch_global_Wire1v>
    if (!pmicWireInstance()->isEnabled()) {
   d6d58:	f7ff fe76 	bl	d6a48 <_ZN7TwoWire9isEnabledEv>
   d6d5c:	b918      	cbnz	r0, d6d66 <_ZN4PMIC5beginEv+0x14>
            return &Wire1;
   d6d5e:	f000 ffd1 	bl	d7d04 <_Z20__fetch_global_Wire1v>
        pmicWireInstance()->begin();
   d6d62:	f7ff fe1f 	bl	d69a4 <_ZN7TwoWire5beginEv>
            return &Wire1;
   d6d66:	f000 ffcd 	bl	d7d04 <_Z20__fetch_global_Wire1v>
}
   d6d6a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return pmicWireInstance()->isEnabled();
   d6d6e:	f7ff be6b 	b.w	d6a48 <_ZN7TwoWire9isEnabledEv>

000d6d72 <_ZN4PMIC6unlockEv>:

bool PMIC::unlock() {
   d6d72:	b508      	push	{r3, lr}
            return &Wire1;
   d6d74:	f000 ffc6 	bl	d7d04 <_Z20__fetch_global_Wire1v>
    return pmicWireInstance()->unlock();
}
   d6d78:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return pmicWireInstance()->unlock();
   d6d7c:	f7ff be71 	b.w	d6a62 <_ZN7TwoWire6unlockEv>

000d6d80 <_ZN4PMICD1Ev>:
PMIC::~PMIC()
   d6d80:	b510      	push	{r4, lr}
    if (lock_) {
   d6d82:	7803      	ldrb	r3, [r0, #0]
PMIC::~PMIC()
   d6d84:	4604      	mov	r4, r0
    if (lock_) {
   d6d86:	b10b      	cbz	r3, d6d8c <_ZN4PMICD1Ev+0xc>
        unlock();
   d6d88:	f7ff fff3 	bl	d6d72 <_ZN4PMIC6unlockEv>
}
   d6d8c:	4620      	mov	r0, r4
   d6d8e:	bd10      	pop	{r4, pc}

000d6d90 <_ZNSt10lock_guardI4PMICED1Ev>:
      ~lock_guard()
   d6d90:	b510      	push	{r4, lr}
   d6d92:	4604      	mov	r4, r0
      { _M_device.unlock(); }
   d6d94:	6800      	ldr	r0, [r0, #0]
   d6d96:	f7ff ffec 	bl	d6d72 <_ZN4PMIC6unlockEv>
   d6d9a:	4620      	mov	r0, r4
   d6d9c:	bd10      	pop	{r4, pc}

000d6d9e <_ZN4PMIC12readRegisterEh>:
byte PMIC::readRegister(byte startAddress) {
   d6d9e:	b530      	push	{r4, r5, lr}
   d6da0:	b087      	sub	sp, #28
   d6da2:	460d      	mov	r5, r1
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d6da4:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d6da6:	f7ff ffc5 	bl	d6d34 <_ZN4PMIC4lockEv.constprop.0>
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d6daa:	236b      	movs	r3, #107	; 0x6b
   d6dac:	f88d 3008 	strb.w	r3, [sp, #8]
   d6db0:	2300      	movs	r3, #0
   d6db2:	2401      	movs	r4, #1
   d6db4:	9303      	str	r3, [sp, #12]
    timeout_ = ms;
   d6db6:	230a      	movs	r3, #10
   d6db8:	9305      	str	r3, [sp, #20]
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d6dba:	f88d 4010 	strb.w	r4, [sp, #16]
            return &Wire1;
   d6dbe:	f000 ffa1 	bl	d7d04 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->beginTransmission(config);
   d6dc2:	a902      	add	r1, sp, #8
   d6dc4:	f7ff fe24 	bl	d6a10 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
            return &Wire1;
   d6dc8:	f000 ff9c 	bl	d7d04 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->write(startAddress);
   d6dcc:	6803      	ldr	r3, [r0, #0]
   d6dce:	4629      	mov	r1, r5
   d6dd0:	689b      	ldr	r3, [r3, #8]
   d6dd2:	4798      	blx	r3
            return &Wire1;
   d6dd4:	f000 ff96 	bl	d7d04 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->endTransmission(true);
   d6dd8:	4621      	mov	r1, r4
   d6dda:	f7ff fe31 	bl	d6a40 <_ZN7TwoWire15endTransmissionEh>
    size_ = size;
   d6dde:	9403      	str	r4, [sp, #12]
            return &Wire1;
   d6de0:	f000 ff90 	bl	d7d04 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->requestFrom(config);
   d6de4:	a902      	add	r1, sp, #8
   d6de6:	f7ff fde3 	bl	d69b0 <_ZN7TwoWire11requestFromERK16WireTransmission>
            return &Wire1;
   d6dea:	f000 ff8b 	bl	d7d04 <_Z20__fetch_global_Wire1v>
    DATA = pmicWireInstance()->read();
   d6dee:	6803      	ldr	r3, [r0, #0]
   d6df0:	695b      	ldr	r3, [r3, #20]
   d6df2:	4798      	blx	r3
   d6df4:	4604      	mov	r4, r0
    std::lock_guard<PMIC> l(*this);
   d6df6:	a801      	add	r0, sp, #4
   d6df8:	f7ff ffca 	bl	d6d90 <_ZNSt10lock_guardI4PMICED1Ev>
}
   d6dfc:	b2e0      	uxtb	r0, r4
   d6dfe:	b007      	add	sp, #28
   d6e00:	bd30      	pop	{r4, r5, pc}

000d6e02 <_ZN4PMIC13writeRegisterEhh>:
void PMIC::writeRegister(byte address, byte DATA) {
   d6e02:	b570      	push	{r4, r5, r6, lr}
   d6e04:	b086      	sub	sp, #24
   d6e06:	4614      	mov	r4, r2
   d6e08:	460d      	mov	r5, r1
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d6e0a:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d6e0c:	f7ff ff92 	bl	d6d34 <_ZN4PMIC4lockEv.constprop.0>
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d6e10:	236b      	movs	r3, #107	; 0x6b
   d6e12:	f88d 3008 	strb.w	r3, [sp, #8]
   d6e16:	2300      	movs	r3, #0
   d6e18:	9303      	str	r3, [sp, #12]
   d6e1a:	2601      	movs	r6, #1
    timeout_ = ms;
   d6e1c:	230a      	movs	r3, #10
   d6e1e:	9305      	str	r3, [sp, #20]
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d6e20:	f88d 6010 	strb.w	r6, [sp, #16]
            return &Wire1;
   d6e24:	f000 ff6e 	bl	d7d04 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->beginTransmission(config);
   d6e28:	a902      	add	r1, sp, #8
   d6e2a:	f7ff fdf1 	bl	d6a10 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
            return &Wire1;
   d6e2e:	f000 ff69 	bl	d7d04 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->write(address);
   d6e32:	6803      	ldr	r3, [r0, #0]
   d6e34:	4629      	mov	r1, r5
   d6e36:	689b      	ldr	r3, [r3, #8]
   d6e38:	4798      	blx	r3
            return &Wire1;
   d6e3a:	f000 ff63 	bl	d7d04 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->write(DATA);
   d6e3e:	6803      	ldr	r3, [r0, #0]
   d6e40:	4621      	mov	r1, r4
   d6e42:	689b      	ldr	r3, [r3, #8]
   d6e44:	4798      	blx	r3
            return &Wire1;
   d6e46:	f000 ff5d 	bl	d7d04 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->endTransmission(true);
   d6e4a:	4631      	mov	r1, r6
   d6e4c:	f7ff fdf8 	bl	d6a40 <_ZN7TwoWire15endTransmissionEh>
    std::lock_guard<PMIC> l(*this);
   d6e50:	a801      	add	r0, sp, #4
   d6e52:	f7ff ff9d 	bl	d6d90 <_ZNSt10lock_guardI4PMICED1Ev>
}
   d6e56:	b006      	add	sp, #24
   d6e58:	bd70      	pop	{r4, r5, r6, pc}

000d6e5a <_ZN4PMIC14enableChargingEv>:
bool PMIC::enableCharging() {
   d6e5a:	b513      	push	{r0, r1, r4, lr}
   d6e5c:	4604      	mov	r4, r0
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d6e5e:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d6e60:	f7ff ff68 	bl	d6d34 <_ZN4PMIC4lockEv.constprop.0>
    byte DATA = readRegister(POWERON_CONFIG_REGISTER);
   d6e64:	2101      	movs	r1, #1
   d6e66:	4620      	mov	r0, r4
   d6e68:	f7ff ff99 	bl	d6d9e <_ZN4PMIC12readRegisterEh>
    if ((DATA & 0b00110000) != 0b00010000) {
   d6e6c:	f000 0330 	and.w	r3, r0, #48	; 0x30
   d6e70:	2b10      	cmp	r3, #16
   d6e72:	d007      	beq.n	d6e84 <_ZN4PMIC14enableChargingEv+0x2a>
        DATA = DATA & 0b11001111;
   d6e74:	f000 02cf 	and.w	r2, r0, #207	; 0xcf
        writeRegister(POWERON_CONFIG_REGISTER, DATA);
   d6e78:	f042 0210 	orr.w	r2, r2, #16
   d6e7c:	2101      	movs	r1, #1
   d6e7e:	4620      	mov	r0, r4
   d6e80:	f7ff ffbf 	bl	d6e02 <_ZN4PMIC13writeRegisterEhh>
    std::lock_guard<PMIC> l(*this);
   d6e84:	a801      	add	r0, sp, #4
   d6e86:	f7ff ff83 	bl	d6d90 <_ZNSt10lock_guardI4PMICED1Ev>
}
   d6e8a:	2001      	movs	r0, #1
   d6e8c:	b002      	add	sp, #8
   d6e8e:	bd10      	pop	{r4, pc}

000d6e90 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d6e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6e92:	4606      	mov	r6, r0
   d6e94:	460d      	mov	r5, r1
  size_t n = 0;
   d6e96:	188f      	adds	r7, r1, r2
   d6e98:	2400      	movs	r4, #0
  while (size--) {
   d6e9a:	42bd      	cmp	r5, r7
   d6e9c:	d00c      	beq.n	d6eb8 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d6e9e:	6833      	ldr	r3, [r6, #0]
   d6ea0:	f815 1b01 	ldrb.w	r1, [r5], #1
   d6ea4:	689b      	ldr	r3, [r3, #8]
   d6ea6:	4630      	mov	r0, r6
   d6ea8:	4798      	blx	r3
     if (chunk>=0)
   d6eaa:	1e03      	subs	r3, r0, #0
   d6eac:	db01      	blt.n	d6eb2 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d6eae:	441c      	add	r4, r3
  while (size--) {
   d6eb0:	e7f3      	b.n	d6e9a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d6eb2:	2c00      	cmp	r4, #0
   d6eb4:	bf08      	it	eq
   d6eb6:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d6eb8:	4620      	mov	r0, r4
   d6eba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6ebc <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   d6ebc:	b513      	push	{r0, r1, r4, lr}
   d6ebe:	4604      	mov	r4, r0
    }
   d6ec0:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d6ec2:	b159      	cbz	r1, d6edc <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d6ec4:	9101      	str	r1, [sp, #4]
   d6ec6:	f001 fe96 	bl	d8bf6 <strlen>
   d6eca:	6823      	ldr	r3, [r4, #0]
   d6ecc:	9901      	ldr	r1, [sp, #4]
   d6ece:	68db      	ldr	r3, [r3, #12]
   d6ed0:	4602      	mov	r2, r0
   d6ed2:	4620      	mov	r0, r4
    }
   d6ed4:	b002      	add	sp, #8
   d6ed6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d6eda:	4718      	bx	r3
    }
   d6edc:	b002      	add	sp, #8
   d6ede:	bd10      	pop	{r4, pc}

000d6ee0 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d6ee0:	6803      	ldr	r3, [r0, #0]
   d6ee2:	689b      	ldr	r3, [r3, #8]
   d6ee4:	4718      	bx	r3

000d6ee6 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d6ee6:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d6ee8:	210d      	movs	r1, #13
{
   d6eea:	4605      	mov	r5, r0
  size_t n = print('\r');
   d6eec:	f7ff fff8 	bl	d6ee0 <_ZN5Print5printEc>
  n += print('\n');
   d6ef0:	210a      	movs	r1, #10
  size_t n = print('\r');
   d6ef2:	4604      	mov	r4, r0
  n += print('\n');
   d6ef4:	4628      	mov	r0, r5
   d6ef6:	f7ff fff3 	bl	d6ee0 <_ZN5Print5printEc>
  return n;
}
   d6efa:	4420      	add	r0, r4
   d6efc:	bd38      	pop	{r3, r4, r5, pc}

000d6efe <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d6efe:	b530      	push	{r4, r5, lr}
   d6f00:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d6f02:	2300      	movs	r3, #0
   d6f04:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d6f08:	2a01      	cmp	r2, #1
   d6f0a:	bf98      	it	ls
   d6f0c:	220a      	movls	r2, #10
   d6f0e:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d6f10:	460d      	mov	r5, r1
   d6f12:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d6f16:	fb01 5312 	mls	r3, r1, r2, r5
   d6f1a:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d6f1e:	2b09      	cmp	r3, #9
   d6f20:	bf94      	ite	ls
   d6f22:	3330      	addls	r3, #48	; 0x30
   d6f24:	3337      	addhi	r3, #55	; 0x37
   d6f26:	b2db      	uxtb	r3, r3
  } while(n);
   d6f28:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d6f2a:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d6f2e:	d9ef      	bls.n	d6f10 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d6f30:	4621      	mov	r1, r4
   d6f32:	f7ff ffc3 	bl	d6ebc <_ZN5Print5writeEPKc>
}
   d6f36:	b00b      	add	sp, #44	; 0x2c
   d6f38:	bd30      	pop	{r4, r5, pc}

000d6f3a <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d6f3a:	b510      	push	{r4, lr}
   d6f3c:	4604      	mov	r4, r0
   d6f3e:	f7ff f8d4 	bl	d60ea <_ZNSt14_Function_baseD1Ev>
   d6f42:	4620      	mov	r0, r4
   d6f44:	bd10      	pop	{r4, pc}
	...

000d6f48 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d6f48:	4803      	ldr	r0, [pc, #12]	; (d6f58 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d6f4a:	4a04      	ldr	r2, [pc, #16]	; (d6f5c <_GLOBAL__sub_I_RGB+0x14>)
   d6f4c:	4904      	ldr	r1, [pc, #16]	; (d6f60 <_GLOBAL__sub_I_RGB+0x18>)
   d6f4e:	2300      	movs	r3, #0
   d6f50:	6083      	str	r3, [r0, #8]
   d6f52:	f000 beff 	b.w	d7d54 <__aeabi_atexit>
   d6f56:	bf00      	nop
   d6f58:	2003e710 	.word	0x2003e710
   d6f5c:	2003e528 	.word	0x2003e528
   d6f60:	000d6f3b 	.word	0x000d6f3b

000d6f64 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d6f64:	b510      	push	{r4, lr}
   d6f66:	4604      	mov	r4, r0
   d6f68:	4608      	mov	r0, r1
{
    _spi = spi;
   d6f6a:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d6f6c:	f7fe fe70 	bl	d5c50 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d6f70:	2300      	movs	r3, #0
   d6f72:	6063      	str	r3, [r4, #4]
}
   d6f74:	4620      	mov	r0, r4
   d6f76:	bd10      	pop	{r4, pc}

000d6f78 <_Z4dtoadhPc>:
#include "string_convert.h"

//These are very crude implementations - will refine later
//------------------------------------------------------------------------------------------

void dtoa (double val, unsigned char prec, char *sout) {
   d6f78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d6f7c:	ec57 6b10 	vmov	r6, r7, d0
   d6f80:	4680      	mov	r8, r0
   d6f82:	460c      	mov	r4, r1
    bool negative = val<0;
    if (negative) {
   d6f84:	ee10 0a10 	vmov	r0, s0
   d6f88:	2200      	movs	r2, #0
   d6f8a:	2300      	movs	r3, #0
   d6f8c:	4639      	mov	r1, r7
   d6f8e:	f001 fb1d 	bl	d85cc <__aeabi_dcmplt>
   d6f92:	b128      	cbz	r0, d6fa0 <_Z4dtoadhPc+0x28>
        val = -val;
   d6f94:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   d6f98:	461f      	mov	r7, r3
        *sout++ = '-';
   d6f9a:	232d      	movs	r3, #45	; 0x2d
   d6f9c:	f804 3b01 	strb.w	r3, [r4], #1
   d6fa0:	2300      	movs	r3, #0
    }
    long scale = 1;
   d6fa2:	f04f 0901 	mov.w	r9, #1
    for (uint8_t i=0; i<prec; i++)
        scale *= 10;
   d6fa6:	220a      	movs	r2, #10
    for (uint8_t i=0; i<prec; i++)
   d6fa8:	b2d9      	uxtb	r1, r3
   d6faa:	4588      	cmp	r8, r1
   d6fac:	d903      	bls.n	d6fb6 <_Z4dtoadhPc+0x3e>
        scale *= 10;
   d6fae:	fb02 f909 	mul.w	r9, r2, r9
    for (uint8_t i=0; i<prec; i++)
   d6fb2:	3301      	adds	r3, #1
   d6fb4:	e7f8      	b.n	d6fa8 <_Z4dtoadhPc+0x30>
    val *= scale;   // capture all the significant digits
   d6fb6:	4648      	mov	r0, r9
   d6fb8:	f001 f82c 	bl	d8014 <__aeabi_i2d>
   d6fbc:	4632      	mov	r2, r6
   d6fbe:	463b      	mov	r3, r7
   d6fc0:	f001 f892 	bl	d80e8 <__aeabi_dmul>
   d6fc4:	4606      	mov	r6, r0
   d6fc6:	460f      	mov	r7, r1
    uint64_t fixed = uint64_t(val);
   d6fc8:	f001 fbe4 	bl	d8794 <__aeabi_d2ulz>
   d6fcc:	4605      	mov	r5, r0
   d6fce:	468a      	mov	sl, r1
    if ((val-fixed)>=0.5)    // round last digit
   d6fd0:	f001 f854 	bl	d807c <__aeabi_ul2d>
   d6fd4:	4602      	mov	r2, r0
   d6fd6:	460b      	mov	r3, r1
   d6fd8:	4630      	mov	r0, r6
   d6fda:	4639      	mov	r1, r7
   d6fdc:	f000 fecc 	bl	d7d78 <__aeabi_dsub>
   d6fe0:	4b13      	ldr	r3, [pc, #76]	; (d7030 <_Z4dtoadhPc+0xb8>)
   d6fe2:	2200      	movs	r2, #0
   d6fe4:	f001 fb06 	bl	d85f4 <__aeabi_dcmpge>
   d6fe8:	b110      	cbz	r0, d6ff0 <_Z4dtoadhPc+0x78>
        fixed++;
   d6fea:	3501      	adds	r5, #1
   d6fec:	f14a 0a00 	adc.w	sl, sl, #0

    unsigned long first = (unsigned long)(fixed / scale);
   d6ff0:	464a      	mov	r2, r9
   d6ff2:	4628      	mov	r0, r5
   d6ff4:	17d3      	asrs	r3, r2, #31
   d6ff6:	4651      	mov	r1, sl
   d6ff8:	f001 fb80 	bl	d86fc <__aeabi_uldivmod>
    unsigned long second = (unsigned long)(fixed % scale);

    ultoa(first, sout, 10, 1);
   d6ffc:	2301      	movs	r3, #1
   d6ffe:	4615      	mov	r5, r2
   d7000:	4621      	mov	r1, r4
   d7002:	220a      	movs	r2, #10
   d7004:	f000 fce9 	bl	d79da <ultoa>
    if (prec) {
   d7008:	f1b8 0f00 	cmp.w	r8, #0
   d700c:	d00d      	beq.n	d702a <_Z4dtoadhPc+0xb2>
        sout += strlen(sout);
   d700e:	4620      	mov	r0, r4
   d7010:	f001 fdf1 	bl	d8bf6 <strlen>
        *sout++ = '.';
   d7014:	232e      	movs	r3, #46	; 0x2e
        sout += strlen(sout);
   d7016:	1821      	adds	r1, r4, r0
        *sout++ = '.';
   d7018:	5423      	strb	r3, [r4, r0]
        ultoa(second, sout, 10, prec);
   d701a:	220a      	movs	r2, #10
   d701c:	4643      	mov	r3, r8
   d701e:	4628      	mov	r0, r5
   d7020:	3101      	adds	r1, #1
    }
}
   d7022:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        ultoa(second, sout, 10, prec);
   d7026:	f000 bcd8 	b.w	d79da <ultoa>
}
   d702a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d702e:	bf00      	nop
   d7030:	3fe00000 	.word	0x3fe00000

000d7034 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d7034:	b510      	push	{r4, lr}
   d7036:	4604      	mov	r4, r0
{
	free(buffer);
   d7038:	6800      	ldr	r0, [r0, #0]
   d703a:	f7fe ffbb 	bl	d5fb4 <free>
}
   d703e:	4620      	mov	r0, r4
   d7040:	bd10      	pop	{r4, pc}

000d7042 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d7042:	b510      	push	{r4, lr}
   d7044:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d7046:	6800      	ldr	r0, [r0, #0]
   d7048:	b108      	cbz	r0, d704e <_ZN6String10invalidateEv+0xc>
   d704a:	f7fe ffb3 	bl	d5fb4 <free>
	buffer = NULL;
   d704e:	2300      	movs	r3, #0
	capacity = len = 0;
   d7050:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   d7054:	6023      	str	r3, [r4, #0]
}
   d7056:	bd10      	pop	{r4, pc}

000d7058 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d7058:	b538      	push	{r3, r4, r5, lr}
   d705a:	4604      	mov	r4, r0
   d705c:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d705e:	6800      	ldr	r0, [r0, #0]
   d7060:	3101      	adds	r1, #1
   d7062:	f7fe ffaf 	bl	d5fc4 <realloc>
	if (newbuffer) {
   d7066:	b110      	cbz	r0, d706e <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d7068:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   d706c:	2001      	movs	r0, #1
	}
	return 0;
}
   d706e:	bd38      	pop	{r3, r4, r5, pc}

000d7070 <_ZN6String7reserveEj>:
{
   d7070:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d7072:	6803      	ldr	r3, [r0, #0]
{
   d7074:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d7076:	b123      	cbz	r3, d7082 <_ZN6String7reserveEj+0x12>
   d7078:	6843      	ldr	r3, [r0, #4]
   d707a:	428b      	cmp	r3, r1
   d707c:	d301      	bcc.n	d7082 <_ZN6String7reserveEj+0x12>
   d707e:	2001      	movs	r0, #1
}
   d7080:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   d7082:	4620      	mov	r0, r4
   d7084:	f7ff ffe8 	bl	d7058 <_ZN6String12changeBufferEj>
   d7088:	2800      	cmp	r0, #0
   d708a:	d0f9      	beq.n	d7080 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   d708c:	68a3      	ldr	r3, [r4, #8]
   d708e:	2b00      	cmp	r3, #0
   d7090:	d1f5      	bne.n	d707e <_ZN6String7reserveEj+0xe>
   d7092:	6822      	ldr	r2, [r4, #0]
   d7094:	7013      	strb	r3, [r2, #0]
   d7096:	e7f2      	b.n	d707e <_ZN6String7reserveEj+0xe>

000d7098 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d7098:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d709a:	460d      	mov	r5, r1
	if (!reserve(length)) {
   d709c:	4611      	mov	r1, r2
   d709e:	9201      	str	r2, [sp, #4]
{
   d70a0:	4604      	mov	r4, r0
	if (!reserve(length)) {
   d70a2:	f7ff ffe5 	bl	d7070 <_ZN6String7reserveEj>
   d70a6:	9a01      	ldr	r2, [sp, #4]
   d70a8:	b928      	cbnz	r0, d70b6 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   d70aa:	4620      	mov	r0, r4
   d70ac:	f7ff ffc9 	bl	d7042 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   d70b0:	4620      	mov	r0, r4
   d70b2:	b003      	add	sp, #12
   d70b4:	bd30      	pop	{r4, r5, pc}
	len = length;
   d70b6:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   d70b8:	4629      	mov	r1, r5
   d70ba:	6820      	ldr	r0, [r4, #0]
   d70bc:	f001 fd32 	bl	d8b24 <memcpy>
	buffer[len] = 0;
   d70c0:	6822      	ldr	r2, [r4, #0]
   d70c2:	68a3      	ldr	r3, [r4, #8]
   d70c4:	2100      	movs	r1, #0
   d70c6:	54d1      	strb	r1, [r2, r3]
	return *this;
   d70c8:	e7f2      	b.n	d70b0 <_ZN6String4copyEPKcj+0x18>

000d70ca <_ZN6StringC1EPKc>:
	buffer = NULL;
   d70ca:	2300      	movs	r3, #0
String::String(const char *cstr)
   d70cc:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   d70ce:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const char *cstr)
   d70d2:	4604      	mov	r4, r0
	len = 0;
   d70d4:	6083      	str	r3, [r0, #8]
	flags = 0;
   d70d6:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   d70d8:	b141      	cbz	r1, d70ec <_ZN6StringC1EPKc+0x22>
   d70da:	4608      	mov	r0, r1
   d70dc:	9101      	str	r1, [sp, #4]
   d70de:	f001 fd8a 	bl	d8bf6 <strlen>
   d70e2:	9901      	ldr	r1, [sp, #4]
   d70e4:	4602      	mov	r2, r0
   d70e6:	4620      	mov	r0, r4
   d70e8:	f7ff ffd6 	bl	d7098 <_ZN6String4copyEPKcj>
}
   d70ec:	4620      	mov	r0, r4
   d70ee:	b002      	add	sp, #8
   d70f0:	bd10      	pop	{r4, pc}

000d70f2 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   d70f2:	b538      	push	{r3, r4, r5, lr}
   d70f4:	4605      	mov	r5, r0
	if (buffer) {
   d70f6:	6800      	ldr	r0, [r0, #0]
{
   d70f8:	460c      	mov	r4, r1
	if (buffer) {
   d70fa:	b168      	cbz	r0, d7118 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   d70fc:	686a      	ldr	r2, [r5, #4]
   d70fe:	688b      	ldr	r3, [r1, #8]
   d7100:	429a      	cmp	r2, r3
   d7102:	d307      	bcc.n	d7114 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   d7104:	6809      	ldr	r1, [r1, #0]
   d7106:	f001 fd51 	bl	d8bac <strcpy>
			len = rhs.len;
   d710a:	68a3      	ldr	r3, [r4, #8]
   d710c:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   d710e:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   d7110:	60a3      	str	r3, [r4, #8]
}
   d7112:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   d7114:	f7fe ff4e 	bl	d5fb4 <free>
	buffer = rhs.buffer;
   d7118:	6823      	ldr	r3, [r4, #0]
   d711a:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   d711c:	6863      	ldr	r3, [r4, #4]
   d711e:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   d7120:	68a3      	ldr	r3, [r4, #8]
   d7122:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   d7124:	2300      	movs	r3, #0
	rhs.capacity = 0;
   d7126:	e9c4 3300 	strd	r3, r3, [r4]
   d712a:	e7f1      	b.n	d7110 <_ZN6String4moveERS_+0x1e>

000d712c <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d712c:	4288      	cmp	r0, r1
{
   d712e:	b510      	push	{r4, lr}
   d7130:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d7132:	d005      	beq.n	d7140 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d7134:	680b      	ldr	r3, [r1, #0]
   d7136:	b12b      	cbz	r3, d7144 <_ZN6StringaSERKS_+0x18>
   d7138:	688a      	ldr	r2, [r1, #8]
   d713a:	4619      	mov	r1, r3
   d713c:	f7ff ffac 	bl	d7098 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d7140:	4620      	mov	r0, r4
   d7142:	bd10      	pop	{r4, pc}
	else invalidate();
   d7144:	f7ff ff7d 	bl	d7042 <_ZN6String10invalidateEv>
   d7148:	e7fa      	b.n	d7140 <_ZN6StringaSERKS_+0x14>

000d714a <_ZN6StringC1ERKS_>:
String::String(const String &value)
   d714a:	b510      	push	{r4, lr}
	buffer = NULL;
   d714c:	2300      	movs	r3, #0
String::String(const String &value)
   d714e:	4604      	mov	r4, r0
	capacity = 0;
   d7150:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   d7154:	6083      	str	r3, [r0, #8]
	flags = 0;
   d7156:	7303      	strb	r3, [r0, #12]
	*this = value;
   d7158:	f7ff ffe8 	bl	d712c <_ZN6StringaSERKS_>
}
   d715c:	4620      	mov	r0, r4
   d715e:	bd10      	pop	{r4, pc}

000d7160 <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
   d7160:	4288      	cmp	r0, r1
{
   d7162:	b510      	push	{r4, lr}
   d7164:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   d7166:	d001      	beq.n	d716c <_ZN6StringaSEOS_+0xc>
   d7168:	f7ff ffc3 	bl	d70f2 <_ZN6String4moveERS_>
	return *this;
}
   d716c:	4620      	mov	r0, r4
   d716e:	bd10      	pop	{r4, pc}

000d7170 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d7170:	b513      	push	{r0, r1, r4, lr}
   d7172:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   d7174:	b159      	cbz	r1, d718e <_ZN6StringaSEPKc+0x1e>
   d7176:	4608      	mov	r0, r1
   d7178:	9101      	str	r1, [sp, #4]
   d717a:	f001 fd3c 	bl	d8bf6 <strlen>
   d717e:	9901      	ldr	r1, [sp, #4]
   d7180:	4602      	mov	r2, r0
   d7182:	4620      	mov	r0, r4
   d7184:	f7ff ff88 	bl	d7098 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d7188:	4620      	mov	r0, r4
   d718a:	b002      	add	sp, #8
   d718c:	bd10      	pop	{r4, pc}
	else invalidate();
   d718e:	f7ff ff58 	bl	d7042 <_ZN6String10invalidateEv>
   d7192:	e7f9      	b.n	d7188 <_ZN6StringaSEPKc+0x18>

000d7194 <_ZN6StringC1Efi>:
String::String(float value, int decimalPlaces)
   d7194:	b530      	push	{r4, r5, lr}
   d7196:	4604      	mov	r4, r0
	buffer = NULL;
   d7198:	2300      	movs	r3, #0
String::String(float value, int decimalPlaces)
   d719a:	b08b      	sub	sp, #44	; 0x2c
	capacity = 0;
   d719c:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   d71a0:	60a3      	str	r3, [r4, #8]
	flags = 0;
   d71a2:	7323      	strb	r3, [r4, #12]
String::String(float value, int decimalPlaces)
   d71a4:	ee10 0a10 	vmov	r0, s0
	dtoa(value, decimalPlaces, buf);
   d71a8:	b2cd      	uxtb	r5, r1
   d71aa:	f000 ff45 	bl	d8038 <__aeabi_f2d>
   d71ae:	ec41 0b10 	vmov	d0, r0, r1
   d71b2:	a901      	add	r1, sp, #4
   d71b4:	4628      	mov	r0, r5
   d71b6:	f7ff fedf 	bl	d6f78 <_Z4dtoadhPc>
        *this = buf;
   d71ba:	a901      	add	r1, sp, #4
   d71bc:	4620      	mov	r0, r4
   d71be:	f7ff ffd7 	bl	d7170 <_ZN6StringaSEPKc>
}
   d71c2:	4620      	mov	r0, r4
   d71c4:	b00b      	add	sp, #44	; 0x2c
   d71c6:	bd30      	pop	{r4, r5, pc}

000d71c8 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   d71c8:	b570      	push	{r4, r5, r6, lr}
   d71ca:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   d71cc:	460e      	mov	r6, r1
   d71ce:	b909      	cbnz	r1, d71d4 <_ZN6String6concatEPKcj+0xc>
   d71d0:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   d71d2:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   d71d4:	b16a      	cbz	r2, d71f2 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   d71d6:	6884      	ldr	r4, [r0, #8]
   d71d8:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   d71da:	4621      	mov	r1, r4
   d71dc:	f7ff ff48 	bl	d7070 <_ZN6String7reserveEj>
   d71e0:	2800      	cmp	r0, #0
   d71e2:	d0f5      	beq.n	d71d0 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   d71e4:	6828      	ldr	r0, [r5, #0]
   d71e6:	68ab      	ldr	r3, [r5, #8]
   d71e8:	4631      	mov	r1, r6
   d71ea:	4418      	add	r0, r3
   d71ec:	f001 fcde 	bl	d8bac <strcpy>
	len = newlen;
   d71f0:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   d71f2:	2001      	movs	r0, #1
   d71f4:	e7ed      	b.n	d71d2 <_ZN6String6concatEPKcj+0xa>

000d71f6 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   d71f6:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   d71f8:	688a      	ldr	r2, [r1, #8]
   d71fa:	6809      	ldr	r1, [r1, #0]
{
   d71fc:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   d71fe:	f7ff ffe3 	bl	d71c8 <_ZN6String6concatEPKcj>
   d7202:	b910      	cbnz	r0, d720a <_ZplRK15StringSumHelperRK6String+0x14>
   d7204:	4620      	mov	r0, r4
   d7206:	f7ff ff1c 	bl	d7042 <_ZN6String10invalidateEv>
	return a;
}
   d720a:	4620      	mov	r0, r4
   d720c:	bd10      	pop	{r4, pc}

000d720e <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   d720e:	b513      	push	{r0, r1, r4, lr}
   d7210:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   d7212:	b929      	cbnz	r1, d7220 <_ZplRK15StringSumHelperPKc+0x12>
   d7214:	4620      	mov	r0, r4
   d7216:	f7ff ff14 	bl	d7042 <_ZN6String10invalidateEv>
	return a;
}
   d721a:	4620      	mov	r0, r4
   d721c:	b002      	add	sp, #8
   d721e:	bd10      	pop	{r4, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   d7220:	4608      	mov	r0, r1
   d7222:	9101      	str	r1, [sp, #4]
   d7224:	f001 fce7 	bl	d8bf6 <strlen>
   d7228:	9901      	ldr	r1, [sp, #4]
   d722a:	4602      	mov	r2, r0
   d722c:	4620      	mov	r0, r4
   d722e:	f7ff ffcb 	bl	d71c8 <_ZN6String6concatEPKcj>
   d7232:	2800      	cmp	r0, #0
   d7234:	d0ee      	beq.n	d7214 <_ZplRK15StringSumHelperPKc+0x6>
   d7236:	e7f0      	b.n	d721a <_ZplRK15StringSumHelperPKc+0xc>

000d7238 <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
   d7238:	b40e      	push	{r1, r2, r3}
   d723a:	b570      	push	{r4, r5, r6, lr}
   d723c:	b087      	sub	sp, #28
   d723e:	ad0b      	add	r5, sp, #44	; 0x2c
   d7240:	4604      	mov	r4, r0
   d7242:	f855 2b04 	ldr.w	r2, [r5], #4
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   d7246:	9201      	str	r2, [sp, #4]
   d7248:	462b      	mov	r3, r5
   d724a:	2105      	movs	r1, #5
   d724c:	a804      	add	r0, sp, #16
    va_start(marker, fmt);
   d724e:	9503      	str	r5, [sp, #12]
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   d7250:	f7fe fed0 	bl	d5ff4 <vsnprintf>
    va_end(marker);

    String result;
   d7254:	490b      	ldr	r1, [pc, #44]	; (d7284 <_ZN6String6formatEPKcz+0x4c>)
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   d7256:	4606      	mov	r6, r0
    String result;
   d7258:	4620      	mov	r0, r4
   d725a:	f7ff ff36 	bl	d70ca <_ZN6StringC1EPKc>
    result.reserve(n);  // internally adds +1 for null terminator
   d725e:	4631      	mov	r1, r6
   d7260:	4620      	mov	r0, r4
   d7262:	f7ff ff05 	bl	d7070 <_ZN6String7reserveEj>
    if (result.buffer) {
   d7266:	6820      	ldr	r0, [r4, #0]
   d7268:	b130      	cbz	r0, d7278 <_ZN6String6formatEPKcz+0x40>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   d726a:	9a01      	ldr	r2, [sp, #4]
        va_start(marker, fmt);
   d726c:	9503      	str	r5, [sp, #12]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   d726e:	462b      	mov	r3, r5
   d7270:	1c71      	adds	r1, r6, #1
   d7272:	f7fe febf 	bl	d5ff4 <vsnprintf>
        va_end(marker);
        result.len = n;
   d7276:	60a0      	str	r0, [r4, #8]
    }
    return result;
}
   d7278:	4620      	mov	r0, r4
   d727a:	b007      	add	sp, #28
   d727c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d7280:	b003      	add	sp, #12
   d7282:	4770      	bx	lr
   d7284:	000d92c4 	.word	0x000d92c4

000d7288 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d7288:	b510      	push	{r4, lr}
   d728a:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d728c:	6800      	ldr	r0, [r0, #0]
   d728e:	b118      	cbz	r0, d7298 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
   d7290:	f7fe fe90 	bl	d5fb4 <free>
            wakeupSource_ = nullptr;
   d7294:	2300      	movs	r3, #0
   d7296:	6023      	str	r3, [r4, #0]
        }
    }
   d7298:	bd10      	pop	{r4, pc}

000d729a <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d729a:	b510      	push	{r4, lr}
   d729c:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
   d729e:	f7ff fff3 	bl	d7288 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
class SystemClass {
   d72a2:	4620      	mov	r0, r4
   d72a4:	bd10      	pop	{r4, pc}

000d72a6 <_ZN17SystemSleepResultaSEOS_>:
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   d72a6:	b538      	push	{r3, r4, r5, lr}
        error_ = result.error_;
   d72a8:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
   d72ac:	8083      	strh	r3, [r0, #4]
        compatResult_ = result.compatResult_;
   d72ae:	460b      	mov	r3, r1
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   d72b0:	460d      	mov	r5, r1
        compatResult_ = result.compatResult_;
   d72b2:	f853 2f06 	ldr.w	r2, [r3, #6]!
   d72b6:	f8c0 2006 	str.w	r2, [r0, #6]
   d72ba:	889b      	ldrh	r3, [r3, #4]
   d72bc:	8143      	strh	r3, [r0, #10]
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   d72be:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
   d72c0:	f7ff ffe2 	bl	d7288 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
        if (result.wakeupSource_) {
   d72c4:	682b      	ldr	r3, [r5, #0]
   d72c6:	b113      	cbz	r3, d72ce <_ZN17SystemSleepResultaSEOS_+0x28>
            wakeupSource_ = result.wakeupSource_;
   d72c8:	6023      	str	r3, [r4, #0]
            result.wakeupSource_ = nullptr;
   d72ca:	2300      	movs	r3, #0
   d72cc:	602b      	str	r3, [r5, #0]
    }
   d72ce:	4620      	mov	r0, r4
   d72d0:	bd38      	pop	{r3, r4, r5, pc}
	...

000d72d4 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>:
    int copyWakeupSource(hal_wakeup_source_base_t* source) {
   d72d4:	b538      	push	{r3, r4, r5, lr}
   d72d6:	460c      	mov	r4, r1
   d72d8:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
   d72da:	f7ff ffd5 	bl	d7288 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
        if (source) {
   d72de:	b144      	cbz	r4, d72f2 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x1e>
            wakeupSource_ = (hal_wakeup_source_base_t*)malloc(source->size);
   d72e0:	8820      	ldrh	r0, [r4, #0]
   d72e2:	f7fe fe5f 	bl	d5fa4 <malloc>
   d72e6:	6028      	str	r0, [r5, #0]
            if (wakeupSource_) {
   d72e8:	b128      	cbz	r0, d72f6 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x22>
                memcpy(wakeupSource_, source, source->size);
   d72ea:	8822      	ldrh	r2, [r4, #0]
   d72ec:	4621      	mov	r1, r4
   d72ee:	f001 fc19 	bl	d8b24 <memcpy>
        return SYSTEM_ERROR_NONE;
   d72f2:	2000      	movs	r0, #0
    }
   d72f4:	bd38      	pop	{r3, r4, r5, pc}
                return SYSTEM_ERROR_NO_MEMORY;
   d72f6:	4801      	ldr	r0, [pc, #4]	; (d72fc <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x28>)
   d72f8:	e7fc      	b.n	d72f4 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x20>
   d72fa:	bf00      	nop
   d72fc:	fffffefc 	.word	0xfffffefc

000d7300 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>:
void SystemClass::enterSafeMode(SystemResetFlags flags)
{
    system_reset(SYSTEM_RESET_MODE_SAFE, 0, 0, flags.value(), nullptr);
}

SystemSleepResult SystemClass::sleep(const particle::SystemSleepConfiguration& config) {
   d7300:	b5f0      	push	{r4, r5, r6, r7, lr}
   d7302:	4d2d      	ldr	r5, [pc, #180]	; (d73b8 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
    }

    // It doesn't guarantee the combination of sleep mode and
    // wakeup sources that the platform supports.
    bool valid() const {
        if (!valid_) {
   d7304:	7d0b      	ldrb	r3, [r1, #20]
   d7306:	4604      	mov	r4, r0
   d7308:	b08b      	sub	sp, #44	; 0x2c
   d730a:	4608      	mov	r0, r1
   d730c:	1daf      	adds	r7, r5, #6
   d730e:	2b00      	cmp	r3, #0
   d7310:	d038      	beq.n	d7384 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x84>
        return static_cast<SystemSleepMode>(config_->mode);
   d7312:	680b      	ldr	r3, [r1, #0]
            return valid_;
        }
        if (sleepMode() == SystemSleepMode::NONE) {
   d7314:	791b      	ldrb	r3, [r3, #4]
   d7316:	2b00      	cmp	r3, #0
   d7318:	d034      	beq.n	d7384 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x84>
              error_(SYSTEM_ERROR_NONE) {
   d731a:	2200      	movs	r2, #0
    SleepResult() {}
   d731c:	4b27      	ldr	r3, [pc, #156]	; (d73bc <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
   d731e:	9304      	str	r3, [sp, #16]
    if (!config.valid()) {
        LOG(ERROR, "System sleep configuration is invalid.");
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
    } else {
        SystemSleepResult result;
        int ret = system_sleep_ext(config.halConfig(), result.halWakeupSource(), nullptr);
   d7320:	a902      	add	r1, sp, #8
   d7322:	3004      	adds	r0, #4
              error_(SYSTEM_ERROR_NONE) {
   d7324:	9202      	str	r2, [sp, #8]
   d7326:	f8ad 200c 	strh.w	r2, [sp, #12]
    SleepResult() {}
   d732a:	f88d 200e 	strb.w	r2, [sp, #14]
   d732e:	f7fe fd97 	bl	d5e60 <system_sleep_ext>
        compatResult_ = result.compatResult_;
   d7332:	f8dd 300e 	ldr.w	r3, [sp, #14]
   d7336:	f8c5 3006 	str.w	r3, [r5, #6]
        result.setError(static_cast<system_error_t>(ret));
   d733a:	b200      	sxth	r0, r0
   d733c:	f8bd 3012 	ldrh.w	r3, [sp, #18]
        error_ = error;
   d7340:	f8ad 000c 	strh.w	r0, [sp, #12]
        error_ = result.error_;
   d7344:	80a8      	strh	r0, [r5, #4]
        copyWakeupSource(result.wakeupSource_);
   d7346:	9902      	ldr	r1, [sp, #8]
        compatResult_ = result.compatResult_;
   d7348:	80bb      	strh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   d734a:	4628      	mov	r0, r5
   d734c:	f7ff ffc2 	bl	d72d4 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>
        freeWakeupSourceMemory();
   d7350:	a802      	add	r0, sp, #8
   d7352:	f7ff ff99 	bl	d7288 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
              error_(SYSTEM_ERROR_NONE) {
   d7356:	2300      	movs	r3, #0
   d7358:	6023      	str	r3, [r4, #0]
   d735a:	80a3      	strh	r3, [r4, #4]
    SleepResult() {}
   d735c:	71a3      	strb	r3, [r4, #6]
   d735e:	8123      	strh	r3, [r4, #8]
   d7360:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d7364:	8163      	strh	r3, [r4, #10]
        error_ = result.error_;
   d7366:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
   d736a:	80a3      	strh	r3, [r4, #4]
        compatResult_ = result.compatResult_;
   d736c:	683b      	ldr	r3, [r7, #0]
   d736e:	f8c4 3006 	str.w	r3, [r4, #6]
   d7372:	88bb      	ldrh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   d7374:	6829      	ldr	r1, [r5, #0]
        compatResult_ = result.compatResult_;
   d7376:	8163      	strh	r3, [r4, #10]
        copyWakeupSource(result.wakeupSource_);
   d7378:	4620      	mov	r0, r4
   d737a:	f7ff ffab 	bl	d72d4 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>
        System.systemSleepResult_ = result;
    }
    return System.systemSleepResult_;
}
   d737e:	4620      	mov	r0, r4
   d7380:	b00b      	add	sp, #44	; 0x2c
   d7382:	bdf0      	pop	{r4, r5, r6, r7, pc}
        LOG(ERROR, "System sleep configuration is invalid.");
   d7384:	2600      	movs	r6, #0
   d7386:	2320      	movs	r3, #32
   d7388:	e9cd 3602 	strd	r3, r6, [sp, #8]
   d738c:	4b0c      	ldr	r3, [pc, #48]	; (d73c0 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xc0>)
   d738e:	9300      	str	r3, [sp, #0]
   d7390:	490c      	ldr	r1, [pc, #48]	; (d73c4 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xc4>)
   d7392:	4633      	mov	r3, r6
   d7394:	aa02      	add	r2, sp, #8
   d7396:	2032      	movs	r0, #50	; 0x32
   d7398:	f7fe fcea 	bl	d5d70 <log_message>
    SleepResult() {}
   d739c:	4b07      	ldr	r3, [pc, #28]	; (d73bc <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
   d739e:	9304      	str	r3, [sp, #16]
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
   d73a0:	a902      	add	r1, sp, #8
        error_ = error;
   d73a2:	f64f 63f2 	movw	r3, #65266	; 0xfef2
   d73a6:	4804      	ldr	r0, [pc, #16]	; (d73b8 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
              error_(SYSTEM_ERROR_NONE) {
   d73a8:	9602      	str	r6, [sp, #8]
    SleepResult() {}
   d73aa:	f88d 600e 	strb.w	r6, [sp, #14]
        error_ = error;
   d73ae:	f8ad 300c 	strh.w	r3, [sp, #12]
   d73b2:	f7ff ff78 	bl	d72a6 <_ZN17SystemSleepResultaSEOS_>
   d73b6:	e7cb      	b.n	d7350 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x50>
   d73b8:	2003e720 	.word	0x2003e720
   d73bc:	ffff0000 	.word	0xffff0000
   d73c0:	000d91f3 	.word	0x000d91f3
   d73c4:	000d91ec 	.word	0x000d91ec

000d73c8 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d73c8:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d73ca:	4b09      	ldr	r3, [pc, #36]	; (d73f0 <_GLOBAL__sub_I_System+0x28>)
              error_(SYSTEM_ERROR_NONE) {
   d73cc:	4c09      	ldr	r4, [pc, #36]	; (d73f4 <_GLOBAL__sub_I_System+0x2c>)
   d73ce:	2202      	movs	r2, #2
   d73d0:	2000      	movs	r0, #0
   d73d2:	601a      	str	r2, [r3, #0]
    SleepResult() {}
   d73d4:	4b08      	ldr	r3, [pc, #32]	; (d73f8 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
   d73d6:	6020      	str	r0, [r4, #0]
   d73d8:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
   d73da:	71a0      	strb	r0, [r4, #6]
   d73dc:	60a3      	str	r3, [r4, #8]
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d73de:	f7fe fce9 	bl	d5db4 <set_system_mode>
SystemClass System;
   d73e2:	4620      	mov	r0, r4
   d73e4:	4a05      	ldr	r2, [pc, #20]	; (d73fc <_GLOBAL__sub_I_System+0x34>)
   d73e6:	4906      	ldr	r1, [pc, #24]	; (d7400 <_GLOBAL__sub_I_System+0x38>)
   d73e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   d73ec:	f000 bcb2 	b.w	d7d54 <__aeabi_atexit>
   d73f0:	2003e72c 	.word	0x2003e72c
   d73f4:	2003e720 	.word	0x2003e720
   d73f8:	ffff0000 	.word	0xffff0000
   d73fc:	2003e528 	.word	0x2003e528
   d7400:	000d729b 	.word	0x000d729b

000d7404 <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   d7404:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
   d7408:	4a15      	ldr	r2, [pc, #84]	; (d7460 <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   d740a:	f8df 8060 	ldr.w	r8, [pc, #96]	; d746c <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
   d740e:	e9d2 3200 	ldrd	r3, r2, [r2]
   d7412:	18c0      	adds	r0, r0, r3
   d7414:	eb42 0101 	adc.w	r1, r2, r1
    unix_time += dst_current_cache;
   d7418:	4a12      	ldr	r2, [pc, #72]	; (d7464 <_ZL22Refresh_UnixTime_Cachex+0x60>)
   d741a:	e9d2 3200 	ldrd	r3, r2, [r2]
   d741e:	18c6      	adds	r6, r0, r3
   d7420:	eb41 0702 	adc.w	r7, r1, r2
    if(unix_time != unix_time_cache)
   d7424:	e9d8 2300 	ldrd	r2, r3, [r8]
   d7428:	42bb      	cmp	r3, r7
   d742a:	bf08      	it	eq
   d742c:	42b2      	cmpeq	r2, r6
{
   d742e:	b08c      	sub	sp, #48	; 0x30
    if(unix_time != unix_time_cache)
   d7430:	d013      	beq.n	d745a <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
   d7432:	a903      	add	r1, sp, #12
   d7434:	4668      	mov	r0, sp
   d7436:	e9cd 6700 	strd	r6, r7, [sp]
   d743a:	f7fe fe03 	bl	d6044 <localtime_r>
	calendar_time.tm_year += 1900;
   d743e:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d7440:	4d09      	ldr	r5, [pc, #36]	; (d7468 <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
   d7442:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d7446:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
   d7448:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d744a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d744c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d744e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d7450:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   d7452:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d7456:	6823      	ldr	r3, [r4, #0]
   d7458:	602b      	str	r3, [r5, #0]
    }
}
   d745a:	b00c      	add	sp, #48	; 0x30
   d745c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d7460:	2003e768 	.word	0x2003e768
   d7464:	2003e760 	.word	0x2003e760
   d7468:	2003e738 	.word	0x2003e738
   d746c:	2003e770 	.word	0x2003e770

000d7470 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
   d7470:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
   d7472:	2000      	movs	r0, #0
   d7474:	f7fe fd1e 	bl	d5eb4 <spark_sync_time_pending>
   d7478:	b128      	cbz	r0, d7486 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d747a:	f7fe fd0b 	bl	d5e94 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   d747e:	f080 0001 	eor.w	r0, r0, #1
   d7482:	b2c0      	uxtb	r0, r0
    }
   d7484:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   d7486:	2001      	movs	r0, #1
   d7488:	e7fc      	b.n	d7484 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

000d748c <_ZN9TimeClass4zoneEf>:
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
	if(GMT_Offset < -12 || GMT_Offset > 14)
   d748c:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
   d7490:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d7494:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
   d7498:	b508      	push	{r3, lr}
	if(GMT_Offset < -12 || GMT_Offset > 14)
   d749a:	d411      	bmi.n	d74c0 <_ZN9TimeClass4zoneEf+0x34>
   d749c:	eef2 7a0c 	vmov.f32	s15, #44	; 0x41600000  14.0
   d74a0:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d74a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d74a8:	dc0a      	bgt.n	d74c0 <_ZN9TimeClass4zoneEf+0x34>
	{
		return;
	}
	time_zone_cache = GMT_Offset * 3600;
   d74aa:	eddf 7a06 	vldr	s15, [pc, #24]	; d74c4 <_ZN9TimeClass4zoneEf+0x38>
   d74ae:	ee60 7a27 	vmul.f32	s15, s0, s15
   d74b2:	ee17 0a90 	vmov	r0, s15
   d74b6:	f001 f939 	bl	d872c <__aeabi_f2lz>
   d74ba:	4b03      	ldr	r3, [pc, #12]	; (d74c8 <_ZN9TimeClass4zoneEf+0x3c>)
   d74bc:	e9c3 0100 	strd	r0, r1, [r3]
}
   d74c0:	bd08      	pop	{r3, pc}
   d74c2:	bf00      	nop
   d74c4:	45610000 	.word	0x45610000
   d74c8:	2003e768 	.word	0x2003e768
   d74cc:	00000000 	.word	0x00000000

000d74d0 <_ZN9TimeClass12getDSTOffsetEv>:
{
	return time_zone_cache / 3600.0;
}

float TimeClass::getDSTOffset()
{
   d74d0:	b508      	push	{r3, lr}
    return dst_cache / 3600.0;
   d74d2:	4b09      	ldr	r3, [pc, #36]	; (d74f8 <_ZN9TimeClass12getDSTOffsetEv+0x28>)
   d74d4:	e9d3 0100 	ldrd	r0, r1, [r3]
   d74d8:	f000 fdd8 	bl	d808c <__aeabi_l2d>
   d74dc:	a304      	add	r3, pc, #16	; (adr r3, d74f0 <_ZN9TimeClass12getDSTOffsetEv+0x20>)
   d74de:	e9d3 2300 	ldrd	r2, r3, [r3]
   d74e2:	f000 ff2b 	bl	d833c <__aeabi_ddiv>
   d74e6:	f001 f8b9 	bl	d865c <__aeabi_d2f>
}
   d74ea:	ee00 0a10 	vmov	s0, r0
   d74ee:	bd08      	pop	{r3, pc}
   d74f0:	00000000 	.word	0x00000000
   d74f4:	40ac2000 	.word	0x40ac2000
   d74f8:	2003e4b8 	.word	0x2003e4b8

000d74fc <_ZN9TimeClass7setTimeEx>:
    return !(dst_current_cache == 0);
}

/* set the given time as unix/rtc time */
void TimeClass::setTime(time_t t)
{
   d74fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d74fe:	4602      	mov	r2, r0
   d7500:	460b      	mov	r3, r1
    struct timeval tv = {
        .tv_sec = t,
        .tv_usec = 0
    };
    if (!hal_rtc_set_time(&tv, nullptr)) {
   d7502:	4668      	mov	r0, sp
    struct timeval tv = {
   d7504:	2100      	movs	r1, #0
    };
   d7506:	e9cd 2300 	strd	r2, r3, [sp]
    struct timeval tv = {
   d750a:	e9cd 1102 	strd	r1, r1, [sp, #8]
    if (!hal_rtc_set_time(&tv, nullptr)) {
   d750e:	f7fe fadf 	bl	d5ad0 <hal_rtc_set_time>
   d7512:	4602      	mov	r2, r0
   d7514:	b910      	cbnz	r0, d751c <_ZN9TimeClass7setTimeEx+0x20>
        system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
   d7516:	4601      	mov	r1, r0
   d7518:	f7fe fc7c 	bl	d5e14 <system_notify_time_changed>
    }
}
   d751c:	b005      	add	sp, #20
   d751e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d7524 <_ZN9TimeClass7timeStrEx>:

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   d7524:	b530      	push	{r4, r5, lr}
   d7526:	4604      	mov	r4, r0
    t += time_zone_cache;
   d7528:	4818      	ldr	r0, [pc, #96]	; (d758c <_ZN9TimeClass7timeStrEx+0x68>)
   d752a:	e9d0 1000 	ldrd	r1, r0, [r0]
   d752e:	1852      	adds	r2, r2, r1
   d7530:	eb40 0303 	adc.w	r3, r0, r3
    t += dst_current_cache;
   d7534:	4816      	ldr	r0, [pc, #88]	; (d7590 <_ZN9TimeClass7timeStrEx+0x6c>)
   d7536:	e9d0 1000 	ldrd	r1, r0, [r0]
   d753a:	1852      	adds	r2, r2, r1
{
   d753c:	b093      	sub	sp, #76	; 0x4c
    t += dst_current_cache;
   d753e:	eb40 0303 	adc.w	r3, r0, r3
   d7542:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm calendar_time = {};
   d7546:	2224      	movs	r2, #36	; 0x24
   d7548:	eb0d 0002 	add.w	r0, sp, r2
   d754c:	2100      	movs	r1, #0
   d754e:	f001 faf7 	bl	d8b40 <memset>
    localtime_r(&t, &calendar_time);
    char ascstr[26] = {};
   d7552:	2500      	movs	r5, #0
    localtime_r(&t, &calendar_time);
   d7554:	a909      	add	r1, sp, #36	; 0x24
   d7556:	4668      	mov	r0, sp
   d7558:	f7fe fd74 	bl	d6044 <localtime_r>
    char ascstr[26] = {};
   d755c:	2216      	movs	r2, #22
   d755e:	4629      	mov	r1, r5
   d7560:	a803      	add	r0, sp, #12
   d7562:	9502      	str	r5, [sp, #8]
   d7564:	f001 faec 	bl	d8b40 <memset>
    asctime_r(&calendar_time, ascstr);
   d7568:	a902      	add	r1, sp, #8
   d756a:	a809      	add	r0, sp, #36	; 0x24
   d756c:	f001 fa94 	bl	d8a98 <asctime_r>
    int len = strlen(ascstr);
   d7570:	a802      	add	r0, sp, #8
   d7572:	f001 fb40 	bl	d8bf6 <strlen>
    ascstr[len-1] = 0; // remove final newline
   d7576:	ab12      	add	r3, sp, #72	; 0x48
   d7578:	4418      	add	r0, r3
    return String(ascstr);
   d757a:	a902      	add	r1, sp, #8
    ascstr[len-1] = 0; // remove final newline
   d757c:	f800 5c41 	strb.w	r5, [r0, #-65]
    return String(ascstr);
   d7580:	4620      	mov	r0, r4
   d7582:	f7ff fda2 	bl	d70ca <_ZN6StringC1EPKc>
}
   d7586:	4620      	mov	r0, r4
   d7588:	b013      	add	sp, #76	; 0x4c
   d758a:	bd30      	pop	{r4, r5, pc}
   d758c:	2003e768 	.word	0x2003e768
   d7590:	2003e760 	.word	0x2003e760

000d7594 <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    localtime_r(&t, &calendar_time);
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   d7594:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7598:	b0a5      	sub	sp, #148	; 0x94
   d759a:	4607      	mov	r7, r0
   d759c:	4688      	mov	r8, r1
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   d759e:	a814      	add	r0, sp, #80	; 0x50
{
   d75a0:	4611      	mov	r1, r2
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   d75a2:	223f      	movs	r2, #63	; 0x3f
{
   d75a4:	461d      	mov	r5, r3
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   d75a6:	f001 fb2e 	bl	d8c06 <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   d75aa:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   d75ac:	a814      	add	r0, sp, #80	; 0x50
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   d75ae:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   d75b2:	f001 fb20 	bl	d8bf6 <strlen>
   d75b6:	4604      	mov	r4, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
   d75b8:	bb5d      	cbnz	r5, d7612 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x7e>
        strcpy(time_zone_str, "Z");
   d75ba:	492a      	ldr	r1, [pc, #168]	; (d7664 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd0>)
   d75bc:	a803      	add	r0, sp, #12
   d75be:	f001 faf5 	bl	d8bac <strcpy>
   d75c2:	ae14      	add	r6, sp, #80	; 0x50
{
   d75c4:	2500      	movs	r5, #0
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
   d75c6:	f104 3bff 	add.w	fp, r4, #4294967295	; 0xffffffff
   d75ca:	45ab      	cmp	fp, r5
   d75cc:	d936      	bls.n	d763c <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xa8>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
   d75ce:	46b1      	mov	r9, r6
   d75d0:	f105 0a01 	add.w	sl, r5, #1
   d75d4:	f819 3b01 	ldrb.w	r3, [r9], #1
   d75d8:	2b25      	cmp	r3, #37	; 0x25
   d75da:	d117      	bne.n	d760c <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x78>
   d75dc:	7873      	ldrb	r3, [r6, #1]
   d75de:	2b7a      	cmp	r3, #122	; 0x7a
   d75e0:	d114      	bne.n	d760c <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x78>
        {
            size_t tzlen = strlen(time_zone_str);
   d75e2:	a803      	add	r0, sp, #12
   d75e4:	f001 fb07 	bl	d8bf6 <strlen>
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   d75e8:	ab14      	add	r3, sp, #80	; 0x50
            size_t tzlen = strlen(time_zone_str);
   d75ea:	4604      	mov	r4, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   d75ec:	1828      	adds	r0, r5, r0
   d75ee:	4418      	add	r0, r3
   d75f0:	ebab 0205 	sub.w	r2, fp, r5
   d75f4:	1cb1      	adds	r1, r6, #2
   d75f6:	f001 fa95 	bl	d8b24 <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
   d75fa:	4622      	mov	r2, r4
   d75fc:	a903      	add	r1, sp, #12
   d75fe:	4630      	mov	r0, r6
   d7600:	f001 fa90 	bl	d8b24 <memcpy>
            len = strlen(format_str);
   d7604:	a814      	add	r0, sp, #80	; 0x50
   d7606:	f001 faf6 	bl	d8bf6 <strlen>
   d760a:	4604      	mov	r4, r0
    for (size_t i=0; i<len-1; i++)
   d760c:	464e      	mov	r6, r9
   d760e:	4655      	mov	r5, sl
   d7610:	e7d9      	b.n	d75c6 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x32>
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
   d7612:	213c      	movs	r1, #60	; 0x3c
   d7614:	fb95 f3f1 	sdiv	r3, r5, r1
   d7618:	2b00      	cmp	r3, #0
   d761a:	bfb8      	it	lt
   d761c:	425b      	neglt	r3, r3
   d761e:	fbb3 f2f1 	udiv	r2, r3, r1
   d7622:	fb01 3312 	mls	r3, r1, r2, r3
   d7626:	9300      	str	r3, [sp, #0]
   d7628:	4a0f      	ldr	r2, [pc, #60]	; (d7668 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd4>)
   d762a:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   d762e:	2110      	movs	r1, #16
   d7630:	a803      	add	r0, sp, #12
   d7632:	fb95 f3f3 	sdiv	r3, r5, r3
   d7636:	f7fe fcd5 	bl	d5fe4 <snprintf>
   d763a:	e7c2      	b.n	d75c2 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x2e>
        }
    }

    char buf[50] = {};
   d763c:	2100      	movs	r1, #0
   d763e:	222e      	movs	r2, #46	; 0x2e
   d7640:	a808      	add	r0, sp, #32
   d7642:	9107      	str	r1, [sp, #28]
   d7644:	f001 fa7c 	bl	d8b40 <memset>
    strftime(buf, sizeof(buf), format_str, calendar_time);
   d7648:	4643      	mov	r3, r8
   d764a:	aa14      	add	r2, sp, #80	; 0x50
   d764c:	2132      	movs	r1, #50	; 0x32
   d764e:	a807      	add	r0, sp, #28
   d7650:	f7fe fcf0 	bl	d6034 <strftime>
    return String(buf);
   d7654:	a907      	add	r1, sp, #28
   d7656:	4638      	mov	r0, r7
   d7658:	f7ff fd37 	bl	d70ca <_ZN6StringC1EPKc>
}
   d765c:	4638      	mov	r0, r7
   d765e:	b025      	add	sp, #148	; 0x94
   d7660:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d7664:	000d921a 	.word	0x000d921a
   d7668:	000d921c 	.word	0x000d921c

000d766c <_ZN9TimeClass6formatExPKc>:
{
   d766c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d766e:	b08d      	sub	sp, #52	; 0x34
   d7670:	e9cd 2300 	strd	r2, r3, [sp]
   d7674:	9d12      	ldr	r5, [sp, #72]	; 0x48
   d7676:	4604      	mov	r4, r0
    if (format_spec == nullptr)
   d7678:	b915      	cbnz	r5, d7680 <_ZN9TimeClass6formatExPKc+0x14>
        format_spec = this->format_spec;
   d767a:	4b19      	ldr	r3, [pc, #100]	; (d76e0 <_ZN9TimeClass6formatExPKc+0x74>)
   d767c:	681d      	ldr	r5, [r3, #0]
    if (!format_spec || !strcmp(format_spec, TIME_FORMAT_DEFAULT)) {
   d767e:	b12d      	cbz	r5, d768c <_ZN9TimeClass6formatExPKc+0x20>
   d7680:	4b18      	ldr	r3, [pc, #96]	; (d76e4 <_ZN9TimeClass6formatExPKc+0x78>)
   d7682:	4628      	mov	r0, r5
   d7684:	6819      	ldr	r1, [r3, #0]
   d7686:	f001 fa87 	bl	d8b98 <strcmp>
   d768a:	b938      	cbnz	r0, d769c <_ZN9TimeClass6formatExPKc+0x30>
        return timeStr(t);
   d768c:	e9dd 2300 	ldrd	r2, r3, [sp]
   d7690:	4620      	mov	r0, r4
   d7692:	f7ff ff47 	bl	d7524 <_ZN9TimeClass7timeStrEx>
}
   d7696:	4620      	mov	r0, r4
   d7698:	b00d      	add	sp, #52	; 0x34
   d769a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    t += time_zone_cache;
   d769c:	4e12      	ldr	r6, [pc, #72]	; (d76e8 <_ZN9TimeClass6formatExPKc+0x7c>)
   d769e:	9900      	ldr	r1, [sp, #0]
    t += dst_current_cache;
   d76a0:	4f12      	ldr	r7, [pc, #72]	; (d76ec <_ZN9TimeClass6formatExPKc+0x80>)
    t += time_zone_cache;
   d76a2:	e9d6 3200 	ldrd	r3, r2, [r6]
   d76a6:	185b      	adds	r3, r3, r1
   d76a8:	9901      	ldr	r1, [sp, #4]
   d76aa:	eb41 0202 	adc.w	r2, r1, r2
    t += dst_current_cache;
   d76ae:	e9d7 0100 	ldrd	r0, r1, [r7]
   d76b2:	181b      	adds	r3, r3, r0
   d76b4:	eb41 0202 	adc.w	r2, r1, r2
   d76b8:	e9cd 3200 	strd	r3, r2, [sp]
    struct tm calendar_time = {};
   d76bc:	2100      	movs	r1, #0
   d76be:	2224      	movs	r2, #36	; 0x24
   d76c0:	a803      	add	r0, sp, #12
   d76c2:	f001 fa3d 	bl	d8b40 <memset>
    localtime_r(&t, &calendar_time);
   d76c6:	a903      	add	r1, sp, #12
   d76c8:	4668      	mov	r0, sp
   d76ca:	f7fe fcbb 	bl	d6044 <localtime_r>
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
   d76ce:	6832      	ldr	r2, [r6, #0]
   d76d0:	683b      	ldr	r3, [r7, #0]
   d76d2:	a903      	add	r1, sp, #12
   d76d4:	4413      	add	r3, r2
   d76d6:	4620      	mov	r0, r4
   d76d8:	462a      	mov	r2, r5
   d76da:	f7ff ff5b 	bl	d7594 <_ZN9TimeClass14timeFormatImplEP2tmPKci>
   d76de:	e7da      	b.n	d7696 <_ZN9TimeClass6formatExPKc+0x2a>
   d76e0:	2003e734 	.word	0x2003e734
   d76e4:	2003e4b4 	.word	0x2003e4b4
   d76e8:	2003e768 	.word	0x2003e768
   d76ec:	2003e760 	.word	0x2003e760

000d76f0 <_ZN9TimeClass7isValidEv>:

bool TimeClass::isValid()
{
   d76f0:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   d76f2:	2000      	movs	r0, #0
   d76f4:	f7fe f9dc 	bl	d5ab0 <hal_rtc_time_is_valid>
    if (rtcstate)
   d76f8:	4604      	mov	r4, r0
   d76fa:	b9a0      	cbnz	r0, d7726 <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   d76fc:	f7fe fb52 	bl	d5da4 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   d7700:	2801      	cmp	r0, #1
   d7702:	d110      	bne.n	d7726 <_ZN9TimeClass7isValidEv+0x36>
   d7704:	4620      	mov	r0, r4
   d7706:	f7fe fb7d 	bl	d5e04 <system_thread_get_state>
   d770a:	b960      	cbnz	r0, d7726 <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   d770c:	f7ff feb0 	bl	d7470 <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d7710:	b910      	cbnz	r0, d7718 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   d7712:	f7fe fbaf 	bl	d5e74 <spark_process>
        while (_while() && !_condition()) {
   d7716:	e7f9      	b.n	d770c <_ZN9TimeClass7isValidEv+0x1c>
   d7718:	f7ff feaa 	bl	d7470 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   d771c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   d7720:	2000      	movs	r0, #0
   d7722:	f7fe b9c5 	b.w	d5ab0 <hal_rtc_time_is_valid>
}
   d7726:	4620      	mov	r0, r4
   d7728:	bd10      	pop	{r4, pc}

000d772a <_ZN9TimeClass3nowEv>:
{
   d772a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   d772c:	f7ff ffe0 	bl	d76f0 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   d7730:	2210      	movs	r2, #16
   d7732:	2100      	movs	r1, #0
   d7734:	4668      	mov	r0, sp
   d7736:	f001 fa03 	bl	d8b40 <memset>
    hal_rtc_get_time(&tv, nullptr);
   d773a:	2100      	movs	r1, #0
   d773c:	4668      	mov	r0, sp
   d773e:	f7fe f9bf 	bl	d5ac0 <hal_rtc_get_time>
}
   d7742:	9800      	ldr	r0, [sp, #0]
   d7744:	b005      	add	sp, #20
   d7746:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d774c <_ZN9TimeClass4yearEv>:
{
   d774c:	b508      	push	{r3, lr}
	return year(now());
   d774e:	f7ff ffec 	bl	d772a <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   d7752:	17c1      	asrs	r1, r0, #31
   d7754:	f7ff fe56 	bl	d7404 <_ZL22Refresh_UnixTime_Cachex>
}
   d7758:	4b01      	ldr	r3, [pc, #4]	; (d7760 <_ZN9TimeClass4yearEv+0x14>)
   d775a:	6958      	ldr	r0, [r3, #20]
   d775c:	bd08      	pop	{r3, pc}
   d775e:	bf00      	nop
   d7760:	2003e738 	.word	0x2003e738

000d7764 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d7764:	4b02      	ldr	r3, [pc, #8]	; (d7770 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d7766:	681a      	ldr	r2, [r3, #0]
   d7768:	4b02      	ldr	r3, [pc, #8]	; (d7774 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d776a:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d776c:	4770      	bx	lr
   d776e:	bf00      	nop
   d7770:	2003e4b4 	.word	0x2003e4b4
   d7774:	2003e734 	.word	0x2003e734

000d7778 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d7778:	4770      	bx	lr

000d777a <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d777a:	7441      	strb	r1, [r0, #17]
}
   d777c:	4770      	bx	lr

000d777e <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   d777e:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d7780:	7c00      	ldrb	r0, [r0, #16]
   d7782:	f7fe faad 	bl	d5ce0 <hal_usart_available_data_for_write>
}
   d7786:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d778a:	bd08      	pop	{r3, pc}

000d778c <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d778c:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d778e:	7c00      	ldrb	r0, [r0, #16]
   d7790:	f7fe fa7e 	bl	d5c90 <hal_usart_available>
}
   d7794:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7798:	bd08      	pop	{r3, pc}

000d779a <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d779a:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d779c:	7c00      	ldrb	r0, [r0, #16]
   d779e:	f7fe fa87 	bl	d5cb0 <hal_usart_peek>
}
   d77a2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d77a6:	bd08      	pop	{r3, pc}

000d77a8 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d77a8:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d77aa:	7c00      	ldrb	r0, [r0, #16]
   d77ac:	f7fe fa78 	bl	d5ca0 <hal_usart_read>
}
   d77b0:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d77b4:	bd08      	pop	{r3, pc}

000d77b6 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   d77b6:	7c00      	ldrb	r0, [r0, #16]
   d77b8:	f7fe ba82 	b.w	d5cc0 <hal_usart_flush>

000d77bc <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d77bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d77be:	7c45      	ldrb	r5, [r0, #17]
{
   d77c0:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d77c2:	b12d      	cbz	r5, d77d0 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   d77c4:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d77c6:	b003      	add	sp, #12
   d77c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d77cc:	f7fe ba58 	b.w	d5c80 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d77d0:	7c00      	ldrb	r0, [r0, #16]
   d77d2:	9101      	str	r1, [sp, #4]
   d77d4:	f7fe fa84 	bl	d5ce0 <hal_usart_available_data_for_write>
   d77d8:	2800      	cmp	r0, #0
   d77da:	9901      	ldr	r1, [sp, #4]
   d77dc:	dcf2      	bgt.n	d77c4 <_ZN11USARTSerial5writeEh+0x8>
}
   d77de:	4628      	mov	r0, r5
   d77e0:	b003      	add	sp, #12
   d77e2:	bd30      	pop	{r4, r5, pc}

000d77e4 <_ZN11USARTSerialD0Ev>:
   d77e4:	b510      	push	{r4, lr}
   d77e6:	2114      	movs	r1, #20
   d77e8:	4604      	mov	r4, r0
   d77ea:	f000 fab8 	bl	d7d5e <_ZdlPvj>
   d77ee:	4620      	mov	r0, r4
   d77f0:	bd10      	pop	{r4, pc}
	...

000d77f4 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d77f4:	b510      	push	{r4, lr}
   d77f6:	f04f 0c00 	mov.w	ip, #0
   d77fa:	4604      	mov	r4, r0
   d77fc:	4608      	mov	r0, r1
   d77fe:	4611      	mov	r1, r2
   d7800:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d7804:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d7808:	4a04      	ldr	r2, [pc, #16]	; (d781c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d780a:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d780c:	2201      	movs	r2, #1
  _serial = serial;
   d780e:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d7810:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d7812:	461a      	mov	r2, r3
   d7814:	f7fe fa2c 	bl	d5c70 <hal_usart_init>
}
   d7818:	4620      	mov	r0, r4
   d781a:	bd10      	pop	{r4, pc}
   d781c:	000d924c 	.word	0x000d924c

000d7820 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d7820:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
#else
  if (!serial1_rx_buffer) {
   d7822:	4c1b      	ldr	r4, [pc, #108]	; (d7890 <_Z22__fetch_global_Serial1v+0x70>)
   d7824:	6826      	ldr	r6, [r4, #0]
   d7826:	b94e      	cbnz	r6, d783c <_Z22__fetch_global_Serial1v+0x1c>
    serial1_rx_buffer = new hal_usart_ring_buffer_t();
   d7828:	2084      	movs	r0, #132	; 0x84
   d782a:	f7fc fc34 	bl	d4096 <_Znwj>
   d782e:	4605      	mov	r5, r0
   d7830:	b118      	cbz	r0, d783a <_Z22__fetch_global_Serial1v+0x1a>
   d7832:	2284      	movs	r2, #132	; 0x84
   d7834:	4631      	mov	r1, r6
   d7836:	f001 f983 	bl	d8b40 <memset>
   d783a:	6025      	str	r5, [r4, #0]
  }
  if (!serial1_tx_buffer) {
   d783c:	4d15      	ldr	r5, [pc, #84]	; (d7894 <_Z22__fetch_global_Serial1v+0x74>)
   d783e:	682f      	ldr	r7, [r5, #0]
   d7840:	b94f      	cbnz	r7, d7856 <_Z22__fetch_global_Serial1v+0x36>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
   d7842:	2084      	movs	r0, #132	; 0x84
   d7844:	f7fc fc27 	bl	d4096 <_Znwj>
   d7848:	4606      	mov	r6, r0
   d784a:	b118      	cbz	r0, d7854 <_Z22__fetch_global_Serial1v+0x34>
   d784c:	2284      	movs	r2, #132	; 0x84
   d784e:	4639      	mov	r1, r7
   d7850:	f001 f976 	bl	d8b40 <memset>
   d7854:	602e      	str	r6, [r5, #0]
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
   d7856:	4e10      	ldr	r6, [pc, #64]	; (d7898 <_Z22__fetch_global_Serial1v+0x78>)
   d7858:	7831      	ldrb	r1, [r6, #0]
   d785a:	f3bf 8f5b 	dmb	ish
   d785e:	f011 0101 	ands.w	r1, r1, #1
   d7862:	d112      	bne.n	d788a <_Z22__fetch_global_Serial1v+0x6a>
   d7864:	4630      	mov	r0, r6
   d7866:	9101      	str	r1, [sp, #4]
   d7868:	f7fc fc1b 	bl	d40a2 <__cxa_guard_acquire>
   d786c:	9901      	ldr	r1, [sp, #4]
   d786e:	b160      	cbz	r0, d788a <_Z22__fetch_global_Serial1v+0x6a>
   d7870:	6822      	ldr	r2, [r4, #0]
   d7872:	682b      	ldr	r3, [r5, #0]
   d7874:	4809      	ldr	r0, [pc, #36]	; (d789c <_Z22__fetch_global_Serial1v+0x7c>)
   d7876:	f7ff ffbd 	bl	d77f4 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d787a:	4630      	mov	r0, r6
   d787c:	f7fc fc16 	bl	d40ac <__cxa_guard_release>
   d7880:	4a07      	ldr	r2, [pc, #28]	; (d78a0 <_Z22__fetch_global_Serial1v+0x80>)
   d7882:	4908      	ldr	r1, [pc, #32]	; (d78a4 <_Z22__fetch_global_Serial1v+0x84>)
   d7884:	4805      	ldr	r0, [pc, #20]	; (d789c <_Z22__fetch_global_Serial1v+0x7c>)
   d7886:	f000 fa65 	bl	d7d54 <__aeabi_atexit>
#endif
	return serial1;
}
   d788a:	4804      	ldr	r0, [pc, #16]	; (d789c <_Z22__fetch_global_Serial1v+0x7c>)
   d788c:	b003      	add	sp, #12
   d788e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d7890:	2003e77c 	.word	0x2003e77c
   d7894:	2003e780 	.word	0x2003e780
   d7898:	2003e778 	.word	0x2003e778
   d789c:	2003e784 	.word	0x2003e784
   d78a0:	2003e528 	.word	0x2003e528
   d78a4:	000d7779 	.word	0x000d7779

000d78a8 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d78a8:	7441      	strb	r1, [r0, #17]
}
   d78aa:	4770      	bx	lr

000d78ac <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d78ac:	4770      	bx	lr

000d78ae <_ZN9USBSerial4readEv>:
{
   d78ae:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d78b0:	2100      	movs	r1, #0
   d78b2:	7c00      	ldrb	r0, [r0, #16]
   d78b4:	f7fe fa3c 	bl	d5d30 <HAL_USB_USART_Receive_Data>
}
   d78b8:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d78bc:	bd08      	pop	{r3, pc}

000d78be <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   d78be:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d78c0:	2101      	movs	r1, #1
   d78c2:	7c00      	ldrb	r0, [r0, #16]
   d78c4:	f7fe fa34 	bl	d5d30 <HAL_USB_USART_Receive_Data>
}
   d78c8:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d78cc:	bd08      	pop	{r3, pc}

000d78ce <_ZN9USBSerial17availableForWriteEv>:
{
   d78ce:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d78d0:	7c00      	ldrb	r0, [r0, #16]
   d78d2:	f7fe fa25 	bl	d5d20 <HAL_USB_USART_Available_Data_For_Write>
}
   d78d6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d78da:	bd08      	pop	{r3, pc}

000d78dc <_ZN9USBSerial9availableEv>:
{
   d78dc:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d78de:	7c00      	ldrb	r0, [r0, #16]
   d78e0:	f7fe fa16 	bl	d5d10 <HAL_USB_USART_Available_Data>
}
   d78e4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d78e8:	bd08      	pop	{r3, pc}

000d78ea <_ZN9USBSerial5writeEh>:
{
   d78ea:	b513      	push	{r0, r1, r4, lr}
   d78ec:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d78ee:	7c00      	ldrb	r0, [r0, #16]
{
   d78f0:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d78f2:	f7fe fa15 	bl	d5d20 <HAL_USB_USART_Available_Data_For_Write>
   d78f6:	2800      	cmp	r0, #0
   d78f8:	9901      	ldr	r1, [sp, #4]
   d78fa:	dc01      	bgt.n	d7900 <_ZN9USBSerial5writeEh+0x16>
   d78fc:	7c60      	ldrb	r0, [r4, #17]
   d78fe:	b120      	cbz	r0, d790a <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d7900:	7c20      	ldrb	r0, [r4, #16]
   d7902:	f7fe fa1d 	bl	d5d40 <HAL_USB_USART_Send_Data>
   d7906:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d790a:	b002      	add	sp, #8
   d790c:	bd10      	pop	{r4, pc}

000d790e <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d790e:	7c00      	ldrb	r0, [r0, #16]
   d7910:	f7fe ba1e 	b.w	d5d50 <HAL_USB_USART_Flush_Data>

000d7914 <_ZN9USBSerialD0Ev>:
   d7914:	b510      	push	{r4, lr}
   d7916:	2114      	movs	r1, #20
   d7918:	4604      	mov	r4, r0
   d791a:	f000 fa20 	bl	d7d5e <_ZdlPvj>
   d791e:	4620      	mov	r0, r4
   d7920:	bd10      	pop	{r4, pc}
	...

000d7924 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d7924:	b510      	push	{r4, lr}
   d7926:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d792a:	4604      	mov	r4, r0
   d792c:	4608      	mov	r0, r1
   d792e:	2100      	movs	r1, #0
   d7930:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d7934:	4b04      	ldr	r3, [pc, #16]	; (d7948 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d7936:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d7938:	2301      	movs	r3, #1
  _serial = serial;
   d793a:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d793c:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d793e:	4611      	mov	r1, r2
   d7940:	f7fe f9d6 	bl	d5cf0 <HAL_USB_USART_Init>
}
   d7944:	4620      	mov	r0, r4
   d7946:	bd10      	pop	{r4, pc}
   d7948:	000d927c 	.word	0x000d927c

000d794c <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d794c:	7c00      	ldrb	r0, [r0, #16]
   d794e:	2200      	movs	r2, #0
   d7950:	f7fe b9d6 	b.w	d5d00 <HAL_USB_USART_Begin>

000d7954 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d7954:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d7956:	2214      	movs	r2, #20
{
   d7958:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d795a:	2100      	movs	r1, #0
   d795c:	f001 f8f0 	bl	d8b40 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d7960:	4620      	mov	r0, r4
   d7962:	bd10      	pop	{r4, pc}

000d7964 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d7964:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d7966:	4c10      	ldr	r4, [pc, #64]	; (d79a8 <_Z16_fetch_usbserialv+0x44>)
{
   d7968:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d796a:	a803      	add	r0, sp, #12
   d796c:	f7ff fff2 	bl	d7954 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d7970:	7821      	ldrb	r1, [r4, #0]
   d7972:	f3bf 8f5b 	dmb	ish
   d7976:	f011 0101 	ands.w	r1, r1, #1
   d797a:	d111      	bne.n	d79a0 <_Z16_fetch_usbserialv+0x3c>
   d797c:	4620      	mov	r0, r4
   d797e:	9101      	str	r1, [sp, #4]
   d7980:	f7fc fb8f 	bl	d40a2 <__cxa_guard_acquire>
   d7984:	9901      	ldr	r1, [sp, #4]
   d7986:	b158      	cbz	r0, d79a0 <_Z16_fetch_usbserialv+0x3c>
   d7988:	aa03      	add	r2, sp, #12
   d798a:	4808      	ldr	r0, [pc, #32]	; (d79ac <_Z16_fetch_usbserialv+0x48>)
   d798c:	f7ff ffca 	bl	d7924 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d7990:	4620      	mov	r0, r4
   d7992:	f7fc fb8b 	bl	d40ac <__cxa_guard_release>
   d7996:	4a06      	ldr	r2, [pc, #24]	; (d79b0 <_Z16_fetch_usbserialv+0x4c>)
   d7998:	4906      	ldr	r1, [pc, #24]	; (d79b4 <_Z16_fetch_usbserialv+0x50>)
   d799a:	4804      	ldr	r0, [pc, #16]	; (d79ac <_Z16_fetch_usbserialv+0x48>)
   d799c:	f000 f9da 	bl	d7d54 <__aeabi_atexit>
	return _usbserial;
}
   d79a0:	4802      	ldr	r0, [pc, #8]	; (d79ac <_Z16_fetch_usbserialv+0x48>)
   d79a2:	b008      	add	sp, #32
   d79a4:	bd10      	pop	{r4, pc}
   d79a6:	bf00      	nop
   d79a8:	2003e798 	.word	0x2003e798
   d79ac:	2003e79c 	.word	0x2003e79c
   d79b0:	2003e528 	.word	0x2003e528
   d79b4:	000d78ad 	.word	0x000d78ad

000d79b8 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   d79b8:	b510      	push	{r4, lr}
   d79ba:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   d79bc:	f001 f91b 	bl	d8bf6 <strlen>
   d79c0:	3801      	subs	r0, #1
   d79c2:	1823      	adds	r3, r4, r0
   d79c4:	4620      	mov	r0, r4
	while(i<j){
   d79c6:	4283      	cmp	r3, r0
   d79c8:	d906      	bls.n	d79d8 <_Z11str_reversePc+0x20>
		c = *i;
   d79ca:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   d79cc:	7819      	ldrb	r1, [r3, #0]
   d79ce:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   d79d2:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   d79d6:	e7f6      	b.n	d79c6 <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   d79d8:	bd10      	pop	{r4, pc}

000d79da <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d79da:	b570      	push	{r4, r5, r6, lr}
   d79dc:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   d79de:	1e91      	subs	r1, r2, #2
   d79e0:	2922      	cmp	r1, #34	; 0x22
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d79e2:	4605      	mov	r5, r0
	if(radix<2 || radix>36){
   d79e4:	d822      	bhi.n	d7a2c <ultoa+0x52>
		return NULL;
	}
	char* ptr=buffer;
   d79e6:	4620      	mov	r0, r4

	div_t result;
	while(a){
   d79e8:	b16d      	cbz	r5, d7a06 <ultoa+0x2c>
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
   d79ea:	fbb5 f6f2 	udiv	r6, r5, r2
            result.rem = a%radix;
   d79ee:	fb02 5516 	mls	r5, r2, r6, r5
            *ptr = result.rem;
   d79f2:	b2e9      	uxtb	r1, r5
            if(result.rem<10){
   d79f4:	2d09      	cmp	r5, #9
                *ptr += '0';
   d79f6:	bf94      	ite	ls
   d79f8:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
   d79fa:	3157      	addhi	r1, #87	; 0x57
   d79fc:	b2c9      	uxtb	r1, r1
   d79fe:	f800 1b01 	strb.w	r1, [r0], #1
            }
            ++ptr;
            a = result.quot;
   d7a02:	4635      	mov	r5, r6
	while(a){
   d7a04:	e7f0      	b.n	d79e8 <ultoa+0xe>
   d7a06:	4602      	mov	r2, r0
	}
        while (ptr < buffer+pad)
   d7a08:	4423      	add	r3, r4
            *ptr++ = '0';
   d7a0a:	2130      	movs	r1, #48	; 0x30
        while (ptr < buffer+pad)
   d7a0c:	4293      	cmp	r3, r2
   d7a0e:	d902      	bls.n	d7a16 <ultoa+0x3c>
            *ptr++ = '0';
   d7a10:	f802 1b01 	strb.w	r1, [r2], #1
        while (ptr < buffer+pad)
   d7a14:	e7fa      	b.n	d7a0c <ultoa+0x32>
   d7a16:	1a1a      	subs	r2, r3, r0
   d7a18:	4283      	cmp	r3, r0
   d7a1a:	bf38      	it	cc
   d7a1c:	2200      	movcc	r2, #0

	*ptr = '\0';
   d7a1e:	2300      	movs	r3, #0
   d7a20:	5483      	strb	r3, [r0, r2]
	str_reverse(buffer);
   d7a22:	4620      	mov	r0, r4
   d7a24:	f7ff ffc8 	bl	d79b8 <_Z11str_reversePc>
	return buffer;
   d7a28:	4620      	mov	r0, r4
}
   d7a2a:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   d7a2c:	2000      	movs	r0, #0
   d7a2e:	e7fc      	b.n	d7a2a <ultoa+0x50>

000d7a30 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d7a30:	4b01      	ldr	r3, [pc, #4]	; (d7a38 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d7a32:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d7a34:	4770      	bx	lr
   d7a36:	bf00      	nop
   d7a38:	2003e4c0 	.word	0x2003e4c0

000d7a3c <serialEventRun>:
{
   d7a3c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d7a3e:	4b0b      	ldr	r3, [pc, #44]	; (d7a6c <serialEventRun+0x30>)
   d7a40:	b143      	cbz	r3, d7a54 <serialEventRun+0x18>
   d7a42:	f7ff ff8f 	bl	d7964 <_Z16_fetch_usbserialv>
   d7a46:	6803      	ldr	r3, [r0, #0]
   d7a48:	691b      	ldr	r3, [r3, #16]
   d7a4a:	4798      	blx	r3
   d7a4c:	2800      	cmp	r0, #0
   d7a4e:	dd01      	ble.n	d7a54 <serialEventRun+0x18>
        serialEvent();
   d7a50:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d7a54:	4b06      	ldr	r3, [pc, #24]	; (d7a70 <serialEventRun+0x34>)
   d7a56:	b143      	cbz	r3, d7a6a <serialEventRun+0x2e>
   d7a58:	f7ff fee2 	bl	d7820 <_Z22__fetch_global_Serial1v>
   d7a5c:	6803      	ldr	r3, [r0, #0]
   d7a5e:	691b      	ldr	r3, [r3, #16]
   d7a60:	4798      	blx	r3
   d7a62:	2800      	cmp	r0, #0
   d7a64:	dd01      	ble.n	d7a6a <serialEventRun+0x2e>
        serialEvent1();
   d7a66:	f3af 8000 	nop.w
}
   d7a6a:	bd08      	pop	{r3, pc}
	...

000d7a74 <_post_loop>:
{
   d7a74:	b508      	push	{r3, lr}
	serialEventRun();
   d7a76:	f7ff ffe1 	bl	d7a3c <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d7a7a:	f7fe f811 	bl	d5aa0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d7a7e:	4b01      	ldr	r3, [pc, #4]	; (d7a84 <_post_loop+0x10>)
   d7a80:	6018      	str	r0, [r3, #0]
}
   d7a82:	bd08      	pop	{r3, pc}
   d7a84:	2003e7c4 	.word	0x2003e7c4

000d7a88 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d7a88:	4802      	ldr	r0, [pc, #8]	; (d7a94 <_Z33system_initialize_user_backup_ramv+0xc>)
   d7a8a:	4a03      	ldr	r2, [pc, #12]	; (d7a98 <_Z33system_initialize_user_backup_ramv+0x10>)
   d7a8c:	4903      	ldr	r1, [pc, #12]	; (d7a9c <_Z33system_initialize_user_backup_ramv+0x14>)
   d7a8e:	1a12      	subs	r2, r2, r0
   d7a90:	f001 b848 	b.w	d8b24 <memcpy>
   d7a94:	2003f400 	.word	0x2003f400
   d7a98:	2003f404 	.word	0x2003f404
   d7a9c:	000d9338 	.word	0x000d9338

000d7aa0 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d7aa0:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d7aa2:	2300      	movs	r3, #0
   d7aa4:	9300      	str	r3, [sp, #0]
   d7aa6:	461a      	mov	r2, r3
   d7aa8:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d7aac:	f7fe f9c4 	bl	d5e38 <system_ctrl_set_result>
}
   d7ab0:	b003      	add	sp, #12
   d7ab2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d7ab8 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d7ab8:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d7aba:	8843      	ldrh	r3, [r0, #2]
   d7abc:	2b0a      	cmp	r3, #10
   d7abe:	d008      	beq.n	d7ad2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d7ac0:	2b50      	cmp	r3, #80	; 0x50
   d7ac2:	d10b      	bne.n	d7adc <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d7ac4:	4b09      	ldr	r3, [pc, #36]	; (d7aec <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d7ac6:	681b      	ldr	r3, [r3, #0]
   d7ac8:	b14b      	cbz	r3, d7ade <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d7aca:	b003      	add	sp, #12
   d7acc:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d7ad0:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d7ad2:	f7ff ffe5 	bl	d7aa0 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d7ad6:	b003      	add	sp, #12
   d7ad8:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d7adc:	2300      	movs	r3, #0
   d7ade:	9300      	str	r3, [sp, #0]
   d7ae0:	461a      	mov	r2, r3
   d7ae2:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d7ae6:	f7fe f9a7 	bl	d5e38 <system_ctrl_set_result>
}
   d7aea:	e7f4      	b.n	d7ad6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d7aec:	2003e7b4 	.word	0x2003e7b4

000d7af0 <module_user_init_hook>:
{
   d7af0:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d7af2:	4c12      	ldr	r4, [pc, #72]	; (d7b3c <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d7af4:	4812      	ldr	r0, [pc, #72]	; (d7b40 <module_user_init_hook+0x50>)
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d7af6:	4d13      	ldr	r5, [pc, #76]	; (d7b44 <module_user_init_hook+0x54>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d7af8:	2100      	movs	r1, #0
   d7afa:	f7fe fa93 	bl	d6024 <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d7afe:	6823      	ldr	r3, [r4, #0]
   d7b00:	42ab      	cmp	r3, r5
   d7b02:	4b11      	ldr	r3, [pc, #68]	; (d7b48 <module_user_init_hook+0x58>)
   d7b04:	bf0c      	ite	eq
   d7b06:	2201      	moveq	r2, #1
   d7b08:	2200      	movne	r2, #0
   d7b0a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d7b0c:	d002      	beq.n	d7b14 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
   d7b0e:	f7ff ffbb 	bl	d7a88 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d7b12:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d7b14:	f7fd ffb4 	bl	d5a80 <HAL_RNG_GetRandomNumber>
   d7b18:	4604      	mov	r4, r0
    srand(seed);
   d7b1a:	f001 f819 	bl	d8b50 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d7b1e:	4b0b      	ldr	r3, [pc, #44]	; (d7b4c <module_user_init_hook+0x5c>)
   d7b20:	b113      	cbz	r3, d7b28 <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
   d7b22:	4620      	mov	r0, r4
   d7b24:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d7b28:	2100      	movs	r1, #0
   d7b2a:	4808      	ldr	r0, [pc, #32]	; (d7b4c <module_user_init_hook+0x5c>)
   d7b2c:	f7fe f9d2 	bl	d5ed4 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d7b30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d7b34:	4806      	ldr	r0, [pc, #24]	; (d7b50 <module_user_init_hook+0x60>)
   d7b36:	2100      	movs	r1, #0
   d7b38:	f7fe b974 	b.w	d5e24 <system_ctrl_set_app_request_handler>
   d7b3c:	2003f400 	.word	0x2003f400
   d7b40:	000d7a31 	.word	0x000d7a31
   d7b44:	9a271c1e 	.word	0x9a271c1e
   d7b48:	2003e7b0 	.word	0x2003e7b0
   d7b4c:	00000000 	.word	0x00000000
   d7b50:	000d7ab9 	.word	0x000d7ab9

000d7b54 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d7b54:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d7b56:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d7b58:	d902      	bls.n	d7b60 <pinAvailable+0xc>
    return false;
   d7b5a:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d7b5c:	b002      	add	sp, #8
   d7b5e:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d7b60:	f1a0 030b 	sub.w	r3, r0, #11
   d7b64:	2b02      	cmp	r3, #2
   d7b66:	d81a      	bhi.n	d7b9e <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d7b68:	4c17      	ldr	r4, [pc, #92]	; (d7bc8 <pinAvailable+0x74>)
   d7b6a:	7821      	ldrb	r1, [r4, #0]
   d7b6c:	f3bf 8f5b 	dmb	ish
   d7b70:	f011 0101 	ands.w	r1, r1, #1
   d7b74:	d10b      	bne.n	d7b8e <pinAvailable+0x3a>
   d7b76:	4620      	mov	r0, r4
   d7b78:	9101      	str	r1, [sp, #4]
   d7b7a:	f7fc fa92 	bl	d40a2 <__cxa_guard_acquire>
   d7b7e:	9901      	ldr	r1, [sp, #4]
   d7b80:	b128      	cbz	r0, d7b8e <pinAvailable+0x3a>
   d7b82:	4812      	ldr	r0, [pc, #72]	; (d7bcc <pinAvailable+0x78>)
   d7b84:	f7ff f9ee 	bl	d6f64 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d7b88:	4620      	mov	r0, r4
   d7b8a:	f7fc fa8f 	bl	d40ac <__cxa_guard_release>
   d7b8e:	4b0f      	ldr	r3, [pc, #60]	; (d7bcc <pinAvailable+0x78>)
   d7b90:	7818      	ldrb	r0, [r3, #0]
   d7b92:	f7fe f865 	bl	d5c60 <hal_spi_is_enabled>
   d7b96:	2800      	cmp	r0, #0
   d7b98:	d1df      	bne.n	d7b5a <pinAvailable+0x6>
  return true; // 'pin' is available
   d7b9a:	2001      	movs	r0, #1
   d7b9c:	e7de      	b.n	d7b5c <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d7b9e:	2801      	cmp	r0, #1
   d7ba0:	d809      	bhi.n	d7bb6 <pinAvailable+0x62>
   d7ba2:	f000 f887 	bl	d7cb4 <_Z19__fetch_global_Wirev>
   d7ba6:	2100      	movs	r1, #0
   d7ba8:	7c00      	ldrb	r0, [r0, #16]
   d7baa:	f7fe f811 	bl	d5bd0 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d7bae:	f080 0001 	eor.w	r0, r0, #1
   d7bb2:	b2c0      	uxtb	r0, r0
   d7bb4:	e7d2      	b.n	d7b5c <pinAvailable+0x8>
   d7bb6:	3809      	subs	r0, #9
   d7bb8:	2801      	cmp	r0, #1
   d7bba:	d8ee      	bhi.n	d7b9a <pinAvailable+0x46>
   d7bbc:	f7ff fe30 	bl	d7820 <_Z22__fetch_global_Serial1v>
   d7bc0:	7c00      	ldrb	r0, [r0, #16]
   d7bc2:	f7fe f885 	bl	d5cd0 <hal_usart_is_enabled>
   d7bc6:	e7f2      	b.n	d7bae <pinAvailable+0x5a>
   d7bc8:	2003e7b8 	.word	0x2003e7b8
   d7bcc:	2003e7bc 	.word	0x2003e7bc

000d7bd0 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d7bd0:	2823      	cmp	r0, #35	; 0x23
{
   d7bd2:	b538      	push	{r3, r4, r5, lr}
   d7bd4:	4604      	mov	r4, r0
   d7bd6:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d7bd8:	d80a      	bhi.n	d7bf0 <pinMode+0x20>
   d7bda:	29ff      	cmp	r1, #255	; 0xff
   d7bdc:	d008      	beq.n	d7bf0 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d7bde:	f7ff ffb9 	bl	d7b54 <pinAvailable>
   d7be2:	b128      	cbz	r0, d7bf0 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d7be4:	4629      	mov	r1, r5
   d7be6:	4620      	mov	r0, r4
}
   d7be8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d7bec:	f7fd bf80 	b.w	d5af0 <HAL_Pin_Mode>
}
   d7bf0:	bd38      	pop	{r3, r4, r5, pc}

000d7bf2 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d7bf2:	b538      	push	{r3, r4, r5, lr}
   d7bf4:	4604      	mov	r4, r0
   d7bf6:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d7bf8:	f7fd ff82 	bl	d5b00 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d7bfc:	28ff      	cmp	r0, #255	; 0xff
   d7bfe:	d010      	beq.n	d7c22 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   d7c00:	2806      	cmp	r0, #6
   d7c02:	d804      	bhi.n	d7c0e <digitalWrite+0x1c>
   d7c04:	234d      	movs	r3, #77	; 0x4d
   d7c06:	fa23 f000 	lsr.w	r0, r3, r0
   d7c0a:	07c3      	lsls	r3, r0, #31
   d7c0c:	d409      	bmi.n	d7c22 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d7c0e:	4620      	mov	r0, r4
   d7c10:	f7ff ffa0 	bl	d7b54 <pinAvailable>
   d7c14:	b128      	cbz	r0, d7c22 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d7c16:	4629      	mov	r1, r5
   d7c18:	4620      	mov	r0, r4
}
   d7c1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   d7c1e:	f7fd bf77 	b.w	d5b10 <HAL_GPIO_Write>
}
   d7c22:	bd38      	pop	{r3, r4, r5, pc}

000d7c24 <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d7c24:	280d      	cmp	r0, #13
{
   d7c26:	b510      	push	{r4, lr}
   d7c28:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   d7c2a:	bf9c      	itt	ls
   d7c2c:	340e      	addls	r4, #14
   d7c2e:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d7c30:	4620      	mov	r0, r4
   d7c32:	f7ff ff8f 	bl	d7b54 <pinAvailable>
   d7c36:	b150      	cbz	r0, d7c4e <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d7c38:	2103      	movs	r1, #3
   d7c3a:	4620      	mov	r0, r4
   d7c3c:	f7fd ff50 	bl	d5ae0 <HAL_Validate_Pin_Function>
   d7c40:	2803      	cmp	r0, #3
   d7c42:	d104      	bne.n	d7c4e <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   d7c44:	4620      	mov	r0, r4
}
   d7c46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   d7c4a:	f7fd bf79 	b.w	d5b40 <hal_adc_read>
}
   d7c4e:	2000      	movs	r0, #0
   d7c50:	bd10      	pop	{r4, pc}
	...

000d7c54 <_Z17acquireWireBufferv>:
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
   d7c54:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d7c56:	2300      	movs	r3, #0
   d7c58:	2520      	movs	r5, #32
   d7c5a:	8043      	strh	r3, [r0, #2]
   d7c5c:	2314      	movs	r3, #20
{
   d7c5e:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d7c60:	8003      	strh	r3, [r0, #0]
   d7c62:	6085      	str	r5, [r0, #8]
   d7c64:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d7c66:	4906      	ldr	r1, [pc, #24]	; (d7c80 <_Z17acquireWireBufferv+0x2c>)
   d7c68:	4628      	mov	r0, r5
   d7c6a:	f000 f87c 	bl	d7d66 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d7c6e:	4904      	ldr	r1, [pc, #16]	; (d7c80 <_Z17acquireWireBufferv+0x2c>)
	};
   d7c70:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d7c72:	4628      	mov	r0, r5
   d7c74:	f000 f877 	bl	d7d66 <_ZnajRKSt9nothrow_t>
	};
   d7c78:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
   d7c7a:	4620      	mov	r0, r4
   d7c7c:	bd38      	pop	{r3, r4, r5, pc}
   d7c7e:	bf00      	nop
   d7c80:	000d92a4 	.word	0x000d92a4

000d7c84 <_Z18acquireWire1Bufferv>:
   d7c84:	b538      	push	{r3, r4, r5, lr}
   d7c86:	2300      	movs	r3, #0
   d7c88:	2520      	movs	r5, #32
   d7c8a:	8043      	strh	r3, [r0, #2]
   d7c8c:	2314      	movs	r3, #20
   d7c8e:	4604      	mov	r4, r0
   d7c90:	8003      	strh	r3, [r0, #0]
   d7c92:	6085      	str	r5, [r0, #8]
   d7c94:	6105      	str	r5, [r0, #16]
   d7c96:	4906      	ldr	r1, [pc, #24]	; (d7cb0 <_Z18acquireWire1Bufferv+0x2c>)
   d7c98:	4628      	mov	r0, r5
   d7c9a:	f000 f864 	bl	d7d66 <_ZnajRKSt9nothrow_t>
   d7c9e:	4904      	ldr	r1, [pc, #16]	; (d7cb0 <_Z18acquireWire1Bufferv+0x2c>)
   d7ca0:	6060      	str	r0, [r4, #4]
   d7ca2:	4628      	mov	r0, r5
   d7ca4:	f000 f85f 	bl	d7d66 <_ZnajRKSt9nothrow_t>
   d7ca8:	60e0      	str	r0, [r4, #12]
   d7caa:	4620      	mov	r0, r4
   d7cac:	bd38      	pop	{r3, r4, r5, pc}
   d7cae:	bf00      	nop
   d7cb0:	000d92a4 	.word	0x000d92a4

000d7cb4 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d7cb4:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d7cb6:	4d0f      	ldr	r5, [pc, #60]	; (d7cf4 <_Z19__fetch_global_Wirev+0x40>)
   d7cb8:	7829      	ldrb	r1, [r5, #0]
   d7cba:	f3bf 8f5b 	dmb	ish
   d7cbe:	f011 0401 	ands.w	r4, r1, #1
{
   d7cc2:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d7cc4:	d113      	bne.n	d7cee <_Z19__fetch_global_Wirev+0x3a>
   d7cc6:	4628      	mov	r0, r5
   d7cc8:	f7fc f9eb 	bl	d40a2 <__cxa_guard_acquire>
   d7ccc:	b178      	cbz	r0, d7cee <_Z19__fetch_global_Wirev+0x3a>
   d7cce:	a801      	add	r0, sp, #4
   d7cd0:	f7ff ffc0 	bl	d7c54 <_Z17acquireWireBufferv>
   d7cd4:	aa01      	add	r2, sp, #4
   d7cd6:	4621      	mov	r1, r4
   d7cd8:	4807      	ldr	r0, [pc, #28]	; (d7cf8 <_Z19__fetch_global_Wirev+0x44>)
   d7cda:	f7fe fe51 	bl	d6980 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d7cde:	4628      	mov	r0, r5
   d7ce0:	f7fc f9e4 	bl	d40ac <__cxa_guard_release>
   d7ce4:	4a05      	ldr	r2, [pc, #20]	; (d7cfc <_Z19__fetch_global_Wirev+0x48>)
   d7ce6:	4906      	ldr	r1, [pc, #24]	; (d7d00 <_Z19__fetch_global_Wirev+0x4c>)
   d7ce8:	4803      	ldr	r0, [pc, #12]	; (d7cf8 <_Z19__fetch_global_Wirev+0x44>)
   d7cea:	f000 f833 	bl	d7d54 <__aeabi_atexit>
	return wire;
}
   d7cee:	4802      	ldr	r0, [pc, #8]	; (d7cf8 <_Z19__fetch_global_Wirev+0x44>)
   d7cf0:	b007      	add	sp, #28
   d7cf2:	bd30      	pop	{r4, r5, pc}
   d7cf4:	2003e7c8 	.word	0x2003e7c8
   d7cf8:	2003e7d0 	.word	0x2003e7d0
   d7cfc:	2003e528 	.word	0x2003e528
   d7d00:	000d6929 	.word	0x000d6929

000d7d04 <_Z20__fetch_global_Wire1v>:

#if Wiring_Wire1
TwoWire& __fetch_global_Wire1()
{
   d7d04:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   d7d06:	4c0f      	ldr	r4, [pc, #60]	; (d7d44 <_Z20__fetch_global_Wire1v+0x40>)
   d7d08:	7823      	ldrb	r3, [r4, #0]
   d7d0a:	f3bf 8f5b 	dmb	ish
   d7d0e:	07db      	lsls	r3, r3, #31
{
   d7d10:	b086      	sub	sp, #24
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   d7d12:	d413      	bmi.n	d7d3c <_Z20__fetch_global_Wire1v+0x38>
   d7d14:	4620      	mov	r0, r4
   d7d16:	f7fc f9c4 	bl	d40a2 <__cxa_guard_acquire>
   d7d1a:	b178      	cbz	r0, d7d3c <_Z20__fetch_global_Wire1v+0x38>
   d7d1c:	a801      	add	r0, sp, #4
   d7d1e:	f7ff ffb1 	bl	d7c84 <_Z18acquireWire1Bufferv>
   d7d22:	aa01      	add	r2, sp, #4
   d7d24:	2101      	movs	r1, #1
   d7d26:	4808      	ldr	r0, [pc, #32]	; (d7d48 <_Z20__fetch_global_Wire1v+0x44>)
   d7d28:	f7fe fe2a 	bl	d6980 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d7d2c:	4620      	mov	r0, r4
   d7d2e:	f7fc f9bd 	bl	d40ac <__cxa_guard_release>
   d7d32:	4a06      	ldr	r2, [pc, #24]	; (d7d4c <_Z20__fetch_global_Wire1v+0x48>)
   d7d34:	4906      	ldr	r1, [pc, #24]	; (d7d50 <_Z20__fetch_global_Wire1v+0x4c>)
   d7d36:	4804      	ldr	r0, [pc, #16]	; (d7d48 <_Z20__fetch_global_Wire1v+0x44>)
   d7d38:	f000 f80c 	bl	d7d54 <__aeabi_atexit>
	return wire;
}
   d7d3c:	4802      	ldr	r0, [pc, #8]	; (d7d48 <_Z20__fetch_global_Wire1v+0x44>)
   d7d3e:	b006      	add	sp, #24
   d7d40:	bd10      	pop	{r4, pc}
   d7d42:	bf00      	nop
   d7d44:	2003e7cc 	.word	0x2003e7cc
   d7d48:	2003e7e4 	.word	0x2003e7e4
   d7d4c:	2003e528 	.word	0x2003e528
   d7d50:	000d6929 	.word	0x000d6929

000d7d54 <__aeabi_atexit>:
   d7d54:	460b      	mov	r3, r1
   d7d56:	4601      	mov	r1, r0
   d7d58:	4618      	mov	r0, r3
   d7d5a:	f000 bec3 	b.w	d8ae4 <__cxa_atexit>

000d7d5e <_ZdlPvj>:
   d7d5e:	f7fc b99e 	b.w	d409e <_ZdlPv>

000d7d62 <_ZnwjRKSt9nothrow_t>:
   d7d62:	f7fc b998 	b.w	d4096 <_Znwj>

000d7d66 <_ZnajRKSt9nothrow_t>:
   d7d66:	f7fc b998 	b.w	d409a <_Znaj>

000d7d6a <_ZSt25__throw_bad_function_callv>:
   d7d6a:	b508      	push	{r3, lr}
   d7d6c:	f7fe f94a 	bl	d6004 <abort>

000d7d70 <__aeabi_drsub>:
   d7d70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d7d74:	e002      	b.n	d7d7c <__adddf3>
   d7d76:	bf00      	nop

000d7d78 <__aeabi_dsub>:
   d7d78:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d7d7c <__adddf3>:
   d7d7c:	b530      	push	{r4, r5, lr}
   d7d7e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d7d82:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d7d86:	ea94 0f05 	teq	r4, r5
   d7d8a:	bf08      	it	eq
   d7d8c:	ea90 0f02 	teqeq	r0, r2
   d7d90:	bf1f      	itttt	ne
   d7d92:	ea54 0c00 	orrsne.w	ip, r4, r0
   d7d96:	ea55 0c02 	orrsne.w	ip, r5, r2
   d7d9a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d7d9e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d7da2:	f000 80e2 	beq.w	d7f6a <__adddf3+0x1ee>
   d7da6:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d7daa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d7dae:	bfb8      	it	lt
   d7db0:	426d      	neglt	r5, r5
   d7db2:	dd0c      	ble.n	d7dce <__adddf3+0x52>
   d7db4:	442c      	add	r4, r5
   d7db6:	ea80 0202 	eor.w	r2, r0, r2
   d7dba:	ea81 0303 	eor.w	r3, r1, r3
   d7dbe:	ea82 0000 	eor.w	r0, r2, r0
   d7dc2:	ea83 0101 	eor.w	r1, r3, r1
   d7dc6:	ea80 0202 	eor.w	r2, r0, r2
   d7dca:	ea81 0303 	eor.w	r3, r1, r3
   d7dce:	2d36      	cmp	r5, #54	; 0x36
   d7dd0:	bf88      	it	hi
   d7dd2:	bd30      	pophi	{r4, r5, pc}
   d7dd4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d7dd8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d7ddc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d7de0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d7de4:	d002      	beq.n	d7dec <__adddf3+0x70>
   d7de6:	4240      	negs	r0, r0
   d7de8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d7dec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d7df0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d7df4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d7df8:	d002      	beq.n	d7e00 <__adddf3+0x84>
   d7dfa:	4252      	negs	r2, r2
   d7dfc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d7e00:	ea94 0f05 	teq	r4, r5
   d7e04:	f000 80a7 	beq.w	d7f56 <__adddf3+0x1da>
   d7e08:	f1a4 0401 	sub.w	r4, r4, #1
   d7e0c:	f1d5 0e20 	rsbs	lr, r5, #32
   d7e10:	db0d      	blt.n	d7e2e <__adddf3+0xb2>
   d7e12:	fa02 fc0e 	lsl.w	ip, r2, lr
   d7e16:	fa22 f205 	lsr.w	r2, r2, r5
   d7e1a:	1880      	adds	r0, r0, r2
   d7e1c:	f141 0100 	adc.w	r1, r1, #0
   d7e20:	fa03 f20e 	lsl.w	r2, r3, lr
   d7e24:	1880      	adds	r0, r0, r2
   d7e26:	fa43 f305 	asr.w	r3, r3, r5
   d7e2a:	4159      	adcs	r1, r3
   d7e2c:	e00e      	b.n	d7e4c <__adddf3+0xd0>
   d7e2e:	f1a5 0520 	sub.w	r5, r5, #32
   d7e32:	f10e 0e20 	add.w	lr, lr, #32
   d7e36:	2a01      	cmp	r2, #1
   d7e38:	fa03 fc0e 	lsl.w	ip, r3, lr
   d7e3c:	bf28      	it	cs
   d7e3e:	f04c 0c02 	orrcs.w	ip, ip, #2
   d7e42:	fa43 f305 	asr.w	r3, r3, r5
   d7e46:	18c0      	adds	r0, r0, r3
   d7e48:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d7e4c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d7e50:	d507      	bpl.n	d7e62 <__adddf3+0xe6>
   d7e52:	f04f 0e00 	mov.w	lr, #0
   d7e56:	f1dc 0c00 	rsbs	ip, ip, #0
   d7e5a:	eb7e 0000 	sbcs.w	r0, lr, r0
   d7e5e:	eb6e 0101 	sbc.w	r1, lr, r1
   d7e62:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d7e66:	d31b      	bcc.n	d7ea0 <__adddf3+0x124>
   d7e68:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d7e6c:	d30c      	bcc.n	d7e88 <__adddf3+0x10c>
   d7e6e:	0849      	lsrs	r1, r1, #1
   d7e70:	ea5f 0030 	movs.w	r0, r0, rrx
   d7e74:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d7e78:	f104 0401 	add.w	r4, r4, #1
   d7e7c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d7e80:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d7e84:	f080 809a 	bcs.w	d7fbc <__adddf3+0x240>
   d7e88:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d7e8c:	bf08      	it	eq
   d7e8e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d7e92:	f150 0000 	adcs.w	r0, r0, #0
   d7e96:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d7e9a:	ea41 0105 	orr.w	r1, r1, r5
   d7e9e:	bd30      	pop	{r4, r5, pc}
   d7ea0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d7ea4:	4140      	adcs	r0, r0
   d7ea6:	eb41 0101 	adc.w	r1, r1, r1
   d7eaa:	3c01      	subs	r4, #1
   d7eac:	bf28      	it	cs
   d7eae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   d7eb2:	d2e9      	bcs.n	d7e88 <__adddf3+0x10c>
   d7eb4:	f091 0f00 	teq	r1, #0
   d7eb8:	bf04      	itt	eq
   d7eba:	4601      	moveq	r1, r0
   d7ebc:	2000      	moveq	r0, #0
   d7ebe:	fab1 f381 	clz	r3, r1
   d7ec2:	bf08      	it	eq
   d7ec4:	3320      	addeq	r3, #32
   d7ec6:	f1a3 030b 	sub.w	r3, r3, #11
   d7eca:	f1b3 0220 	subs.w	r2, r3, #32
   d7ece:	da0c      	bge.n	d7eea <__adddf3+0x16e>
   d7ed0:	320c      	adds	r2, #12
   d7ed2:	dd08      	ble.n	d7ee6 <__adddf3+0x16a>
   d7ed4:	f102 0c14 	add.w	ip, r2, #20
   d7ed8:	f1c2 020c 	rsb	r2, r2, #12
   d7edc:	fa01 f00c 	lsl.w	r0, r1, ip
   d7ee0:	fa21 f102 	lsr.w	r1, r1, r2
   d7ee4:	e00c      	b.n	d7f00 <__adddf3+0x184>
   d7ee6:	f102 0214 	add.w	r2, r2, #20
   d7eea:	bfd8      	it	le
   d7eec:	f1c2 0c20 	rsble	ip, r2, #32
   d7ef0:	fa01 f102 	lsl.w	r1, r1, r2
   d7ef4:	fa20 fc0c 	lsr.w	ip, r0, ip
   d7ef8:	bfdc      	itt	le
   d7efa:	ea41 010c 	orrle.w	r1, r1, ip
   d7efe:	4090      	lslle	r0, r2
   d7f00:	1ae4      	subs	r4, r4, r3
   d7f02:	bfa2      	ittt	ge
   d7f04:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d7f08:	4329      	orrge	r1, r5
   d7f0a:	bd30      	popge	{r4, r5, pc}
   d7f0c:	ea6f 0404 	mvn.w	r4, r4
   d7f10:	3c1f      	subs	r4, #31
   d7f12:	da1c      	bge.n	d7f4e <__adddf3+0x1d2>
   d7f14:	340c      	adds	r4, #12
   d7f16:	dc0e      	bgt.n	d7f36 <__adddf3+0x1ba>
   d7f18:	f104 0414 	add.w	r4, r4, #20
   d7f1c:	f1c4 0220 	rsb	r2, r4, #32
   d7f20:	fa20 f004 	lsr.w	r0, r0, r4
   d7f24:	fa01 f302 	lsl.w	r3, r1, r2
   d7f28:	ea40 0003 	orr.w	r0, r0, r3
   d7f2c:	fa21 f304 	lsr.w	r3, r1, r4
   d7f30:	ea45 0103 	orr.w	r1, r5, r3
   d7f34:	bd30      	pop	{r4, r5, pc}
   d7f36:	f1c4 040c 	rsb	r4, r4, #12
   d7f3a:	f1c4 0220 	rsb	r2, r4, #32
   d7f3e:	fa20 f002 	lsr.w	r0, r0, r2
   d7f42:	fa01 f304 	lsl.w	r3, r1, r4
   d7f46:	ea40 0003 	orr.w	r0, r0, r3
   d7f4a:	4629      	mov	r1, r5
   d7f4c:	bd30      	pop	{r4, r5, pc}
   d7f4e:	fa21 f004 	lsr.w	r0, r1, r4
   d7f52:	4629      	mov	r1, r5
   d7f54:	bd30      	pop	{r4, r5, pc}
   d7f56:	f094 0f00 	teq	r4, #0
   d7f5a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d7f5e:	bf06      	itte	eq
   d7f60:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d7f64:	3401      	addeq	r4, #1
   d7f66:	3d01      	subne	r5, #1
   d7f68:	e74e      	b.n	d7e08 <__adddf3+0x8c>
   d7f6a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d7f6e:	bf18      	it	ne
   d7f70:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d7f74:	d029      	beq.n	d7fca <__adddf3+0x24e>
   d7f76:	ea94 0f05 	teq	r4, r5
   d7f7a:	bf08      	it	eq
   d7f7c:	ea90 0f02 	teqeq	r0, r2
   d7f80:	d005      	beq.n	d7f8e <__adddf3+0x212>
   d7f82:	ea54 0c00 	orrs.w	ip, r4, r0
   d7f86:	bf04      	itt	eq
   d7f88:	4619      	moveq	r1, r3
   d7f8a:	4610      	moveq	r0, r2
   d7f8c:	bd30      	pop	{r4, r5, pc}
   d7f8e:	ea91 0f03 	teq	r1, r3
   d7f92:	bf1e      	ittt	ne
   d7f94:	2100      	movne	r1, #0
   d7f96:	2000      	movne	r0, #0
   d7f98:	bd30      	popne	{r4, r5, pc}
   d7f9a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d7f9e:	d105      	bne.n	d7fac <__adddf3+0x230>
   d7fa0:	0040      	lsls	r0, r0, #1
   d7fa2:	4149      	adcs	r1, r1
   d7fa4:	bf28      	it	cs
   d7fa6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d7faa:	bd30      	pop	{r4, r5, pc}
   d7fac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d7fb0:	bf3c      	itt	cc
   d7fb2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d7fb6:	bd30      	popcc	{r4, r5, pc}
   d7fb8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d7fbc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d7fc0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d7fc4:	f04f 0000 	mov.w	r0, #0
   d7fc8:	bd30      	pop	{r4, r5, pc}
   d7fca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d7fce:	bf1a      	itte	ne
   d7fd0:	4619      	movne	r1, r3
   d7fd2:	4610      	movne	r0, r2
   d7fd4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d7fd8:	bf1c      	itt	ne
   d7fda:	460b      	movne	r3, r1
   d7fdc:	4602      	movne	r2, r0
   d7fde:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d7fe2:	bf06      	itte	eq
   d7fe4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d7fe8:	ea91 0f03 	teqeq	r1, r3
   d7fec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d7ff0:	bd30      	pop	{r4, r5, pc}
   d7ff2:	bf00      	nop

000d7ff4 <__aeabi_ui2d>:
   d7ff4:	f090 0f00 	teq	r0, #0
   d7ff8:	bf04      	itt	eq
   d7ffa:	2100      	moveq	r1, #0
   d7ffc:	4770      	bxeq	lr
   d7ffe:	b530      	push	{r4, r5, lr}
   d8000:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d8004:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d8008:	f04f 0500 	mov.w	r5, #0
   d800c:	f04f 0100 	mov.w	r1, #0
   d8010:	e750      	b.n	d7eb4 <__adddf3+0x138>
   d8012:	bf00      	nop

000d8014 <__aeabi_i2d>:
   d8014:	f090 0f00 	teq	r0, #0
   d8018:	bf04      	itt	eq
   d801a:	2100      	moveq	r1, #0
   d801c:	4770      	bxeq	lr
   d801e:	b530      	push	{r4, r5, lr}
   d8020:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d8024:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d8028:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d802c:	bf48      	it	mi
   d802e:	4240      	negmi	r0, r0
   d8030:	f04f 0100 	mov.w	r1, #0
   d8034:	e73e      	b.n	d7eb4 <__adddf3+0x138>
   d8036:	bf00      	nop

000d8038 <__aeabi_f2d>:
   d8038:	0042      	lsls	r2, r0, #1
   d803a:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d803e:	ea4f 0131 	mov.w	r1, r1, rrx
   d8042:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d8046:	bf1f      	itttt	ne
   d8048:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d804c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d8050:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d8054:	4770      	bxne	lr
   d8056:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   d805a:	bf08      	it	eq
   d805c:	4770      	bxeq	lr
   d805e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   d8062:	bf04      	itt	eq
   d8064:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   d8068:	4770      	bxeq	lr
   d806a:	b530      	push	{r4, r5, lr}
   d806c:	f44f 7460 	mov.w	r4, #896	; 0x380
   d8070:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d8074:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d8078:	e71c      	b.n	d7eb4 <__adddf3+0x138>
   d807a:	bf00      	nop

000d807c <__aeabi_ul2d>:
   d807c:	ea50 0201 	orrs.w	r2, r0, r1
   d8080:	bf08      	it	eq
   d8082:	4770      	bxeq	lr
   d8084:	b530      	push	{r4, r5, lr}
   d8086:	f04f 0500 	mov.w	r5, #0
   d808a:	e00a      	b.n	d80a2 <__aeabi_l2d+0x16>

000d808c <__aeabi_l2d>:
   d808c:	ea50 0201 	orrs.w	r2, r0, r1
   d8090:	bf08      	it	eq
   d8092:	4770      	bxeq	lr
   d8094:	b530      	push	{r4, r5, lr}
   d8096:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d809a:	d502      	bpl.n	d80a2 <__aeabi_l2d+0x16>
   d809c:	4240      	negs	r0, r0
   d809e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d80a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d80a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d80aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d80ae:	f43f aed8 	beq.w	d7e62 <__adddf3+0xe6>
   d80b2:	f04f 0203 	mov.w	r2, #3
   d80b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d80ba:	bf18      	it	ne
   d80bc:	3203      	addne	r2, #3
   d80be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d80c2:	bf18      	it	ne
   d80c4:	3203      	addne	r2, #3
   d80c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d80ca:	f1c2 0320 	rsb	r3, r2, #32
   d80ce:	fa00 fc03 	lsl.w	ip, r0, r3
   d80d2:	fa20 f002 	lsr.w	r0, r0, r2
   d80d6:	fa01 fe03 	lsl.w	lr, r1, r3
   d80da:	ea40 000e 	orr.w	r0, r0, lr
   d80de:	fa21 f102 	lsr.w	r1, r1, r2
   d80e2:	4414      	add	r4, r2
   d80e4:	e6bd      	b.n	d7e62 <__adddf3+0xe6>
   d80e6:	bf00      	nop

000d80e8 <__aeabi_dmul>:
   d80e8:	b570      	push	{r4, r5, r6, lr}
   d80ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d80ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d80f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d80f6:	bf1d      	ittte	ne
   d80f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d80fc:	ea94 0f0c 	teqne	r4, ip
   d8100:	ea95 0f0c 	teqne	r5, ip
   d8104:	f000 f8de 	bleq	d82c4 <__aeabi_dmul+0x1dc>
   d8108:	442c      	add	r4, r5
   d810a:	ea81 0603 	eor.w	r6, r1, r3
   d810e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d8112:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d8116:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d811a:	bf18      	it	ne
   d811c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d8120:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8124:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d8128:	d038      	beq.n	d819c <__aeabi_dmul+0xb4>
   d812a:	fba0 ce02 	umull	ip, lr, r0, r2
   d812e:	f04f 0500 	mov.w	r5, #0
   d8132:	fbe1 e502 	umlal	lr, r5, r1, r2
   d8136:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d813a:	fbe0 e503 	umlal	lr, r5, r0, r3
   d813e:	f04f 0600 	mov.w	r6, #0
   d8142:	fbe1 5603 	umlal	r5, r6, r1, r3
   d8146:	f09c 0f00 	teq	ip, #0
   d814a:	bf18      	it	ne
   d814c:	f04e 0e01 	orrne.w	lr, lr, #1
   d8150:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d8154:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d8158:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d815c:	d204      	bcs.n	d8168 <__aeabi_dmul+0x80>
   d815e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d8162:	416d      	adcs	r5, r5
   d8164:	eb46 0606 	adc.w	r6, r6, r6
   d8168:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d816c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d8170:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d8174:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d8178:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d817c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d8180:	bf88      	it	hi
   d8182:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d8186:	d81e      	bhi.n	d81c6 <__aeabi_dmul+0xde>
   d8188:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d818c:	bf08      	it	eq
   d818e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d8192:	f150 0000 	adcs.w	r0, r0, #0
   d8196:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d819a:	bd70      	pop	{r4, r5, r6, pc}
   d819c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d81a0:	ea46 0101 	orr.w	r1, r6, r1
   d81a4:	ea40 0002 	orr.w	r0, r0, r2
   d81a8:	ea81 0103 	eor.w	r1, r1, r3
   d81ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d81b0:	bfc2      	ittt	gt
   d81b2:	ebd4 050c 	rsbsgt	r5, r4, ip
   d81b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d81ba:	bd70      	popgt	{r4, r5, r6, pc}
   d81bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d81c0:	f04f 0e00 	mov.w	lr, #0
   d81c4:	3c01      	subs	r4, #1
   d81c6:	f300 80ab 	bgt.w	d8320 <__aeabi_dmul+0x238>
   d81ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d81ce:	bfde      	ittt	le
   d81d0:	2000      	movle	r0, #0
   d81d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d81d6:	bd70      	pople	{r4, r5, r6, pc}
   d81d8:	f1c4 0400 	rsb	r4, r4, #0
   d81dc:	3c20      	subs	r4, #32
   d81de:	da35      	bge.n	d824c <__aeabi_dmul+0x164>
   d81e0:	340c      	adds	r4, #12
   d81e2:	dc1b      	bgt.n	d821c <__aeabi_dmul+0x134>
   d81e4:	f104 0414 	add.w	r4, r4, #20
   d81e8:	f1c4 0520 	rsb	r5, r4, #32
   d81ec:	fa00 f305 	lsl.w	r3, r0, r5
   d81f0:	fa20 f004 	lsr.w	r0, r0, r4
   d81f4:	fa01 f205 	lsl.w	r2, r1, r5
   d81f8:	ea40 0002 	orr.w	r0, r0, r2
   d81fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d8200:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d8204:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d8208:	fa21 f604 	lsr.w	r6, r1, r4
   d820c:	eb42 0106 	adc.w	r1, r2, r6
   d8210:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d8214:	bf08      	it	eq
   d8216:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d821a:	bd70      	pop	{r4, r5, r6, pc}
   d821c:	f1c4 040c 	rsb	r4, r4, #12
   d8220:	f1c4 0520 	rsb	r5, r4, #32
   d8224:	fa00 f304 	lsl.w	r3, r0, r4
   d8228:	fa20 f005 	lsr.w	r0, r0, r5
   d822c:	fa01 f204 	lsl.w	r2, r1, r4
   d8230:	ea40 0002 	orr.w	r0, r0, r2
   d8234:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8238:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d823c:	f141 0100 	adc.w	r1, r1, #0
   d8240:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d8244:	bf08      	it	eq
   d8246:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d824a:	bd70      	pop	{r4, r5, r6, pc}
   d824c:	f1c4 0520 	rsb	r5, r4, #32
   d8250:	fa00 f205 	lsl.w	r2, r0, r5
   d8254:	ea4e 0e02 	orr.w	lr, lr, r2
   d8258:	fa20 f304 	lsr.w	r3, r0, r4
   d825c:	fa01 f205 	lsl.w	r2, r1, r5
   d8260:	ea43 0302 	orr.w	r3, r3, r2
   d8264:	fa21 f004 	lsr.w	r0, r1, r4
   d8268:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d826c:	fa21 f204 	lsr.w	r2, r1, r4
   d8270:	ea20 0002 	bic.w	r0, r0, r2
   d8274:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d8278:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d827c:	bf08      	it	eq
   d827e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d8282:	bd70      	pop	{r4, r5, r6, pc}
   d8284:	f094 0f00 	teq	r4, #0
   d8288:	d10f      	bne.n	d82aa <__aeabi_dmul+0x1c2>
   d828a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d828e:	0040      	lsls	r0, r0, #1
   d8290:	eb41 0101 	adc.w	r1, r1, r1
   d8294:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8298:	bf08      	it	eq
   d829a:	3c01      	subeq	r4, #1
   d829c:	d0f7      	beq.n	d828e <__aeabi_dmul+0x1a6>
   d829e:	ea41 0106 	orr.w	r1, r1, r6
   d82a2:	f095 0f00 	teq	r5, #0
   d82a6:	bf18      	it	ne
   d82a8:	4770      	bxne	lr
   d82aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d82ae:	0052      	lsls	r2, r2, #1
   d82b0:	eb43 0303 	adc.w	r3, r3, r3
   d82b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d82b8:	bf08      	it	eq
   d82ba:	3d01      	subeq	r5, #1
   d82bc:	d0f7      	beq.n	d82ae <__aeabi_dmul+0x1c6>
   d82be:	ea43 0306 	orr.w	r3, r3, r6
   d82c2:	4770      	bx	lr
   d82c4:	ea94 0f0c 	teq	r4, ip
   d82c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d82cc:	bf18      	it	ne
   d82ce:	ea95 0f0c 	teqne	r5, ip
   d82d2:	d00c      	beq.n	d82ee <__aeabi_dmul+0x206>
   d82d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d82d8:	bf18      	it	ne
   d82da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d82de:	d1d1      	bne.n	d8284 <__aeabi_dmul+0x19c>
   d82e0:	ea81 0103 	eor.w	r1, r1, r3
   d82e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d82e8:	f04f 0000 	mov.w	r0, #0
   d82ec:	bd70      	pop	{r4, r5, r6, pc}
   d82ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d82f2:	bf06      	itte	eq
   d82f4:	4610      	moveq	r0, r2
   d82f6:	4619      	moveq	r1, r3
   d82f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d82fc:	d019      	beq.n	d8332 <__aeabi_dmul+0x24a>
   d82fe:	ea94 0f0c 	teq	r4, ip
   d8302:	d102      	bne.n	d830a <__aeabi_dmul+0x222>
   d8304:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d8308:	d113      	bne.n	d8332 <__aeabi_dmul+0x24a>
   d830a:	ea95 0f0c 	teq	r5, ip
   d830e:	d105      	bne.n	d831c <__aeabi_dmul+0x234>
   d8310:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d8314:	bf1c      	itt	ne
   d8316:	4610      	movne	r0, r2
   d8318:	4619      	movne	r1, r3
   d831a:	d10a      	bne.n	d8332 <__aeabi_dmul+0x24a>
   d831c:	ea81 0103 	eor.w	r1, r1, r3
   d8320:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8324:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d8328:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d832c:	f04f 0000 	mov.w	r0, #0
   d8330:	bd70      	pop	{r4, r5, r6, pc}
   d8332:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d8336:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d833a:	bd70      	pop	{r4, r5, r6, pc}

000d833c <__aeabi_ddiv>:
   d833c:	b570      	push	{r4, r5, r6, lr}
   d833e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d8342:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d8346:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d834a:	bf1d      	ittte	ne
   d834c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d8350:	ea94 0f0c 	teqne	r4, ip
   d8354:	ea95 0f0c 	teqne	r5, ip
   d8358:	f000 f8a7 	bleq	d84aa <__aeabi_ddiv+0x16e>
   d835c:	eba4 0405 	sub.w	r4, r4, r5
   d8360:	ea81 0e03 	eor.w	lr, r1, r3
   d8364:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d8368:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d836c:	f000 8088 	beq.w	d8480 <__aeabi_ddiv+0x144>
   d8370:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d8374:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d8378:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d837c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d8380:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d8384:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d8388:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d838c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d8390:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d8394:	429d      	cmp	r5, r3
   d8396:	bf08      	it	eq
   d8398:	4296      	cmpeq	r6, r2
   d839a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d839e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d83a2:	d202      	bcs.n	d83aa <__aeabi_ddiv+0x6e>
   d83a4:	085b      	lsrs	r3, r3, #1
   d83a6:	ea4f 0232 	mov.w	r2, r2, rrx
   d83aa:	1ab6      	subs	r6, r6, r2
   d83ac:	eb65 0503 	sbc.w	r5, r5, r3
   d83b0:	085b      	lsrs	r3, r3, #1
   d83b2:	ea4f 0232 	mov.w	r2, r2, rrx
   d83b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d83ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d83be:	ebb6 0e02 	subs.w	lr, r6, r2
   d83c2:	eb75 0e03 	sbcs.w	lr, r5, r3
   d83c6:	bf22      	ittt	cs
   d83c8:	1ab6      	subcs	r6, r6, r2
   d83ca:	4675      	movcs	r5, lr
   d83cc:	ea40 000c 	orrcs.w	r0, r0, ip
   d83d0:	085b      	lsrs	r3, r3, #1
   d83d2:	ea4f 0232 	mov.w	r2, r2, rrx
   d83d6:	ebb6 0e02 	subs.w	lr, r6, r2
   d83da:	eb75 0e03 	sbcs.w	lr, r5, r3
   d83de:	bf22      	ittt	cs
   d83e0:	1ab6      	subcs	r6, r6, r2
   d83e2:	4675      	movcs	r5, lr
   d83e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d83e8:	085b      	lsrs	r3, r3, #1
   d83ea:	ea4f 0232 	mov.w	r2, r2, rrx
   d83ee:	ebb6 0e02 	subs.w	lr, r6, r2
   d83f2:	eb75 0e03 	sbcs.w	lr, r5, r3
   d83f6:	bf22      	ittt	cs
   d83f8:	1ab6      	subcs	r6, r6, r2
   d83fa:	4675      	movcs	r5, lr
   d83fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d8400:	085b      	lsrs	r3, r3, #1
   d8402:	ea4f 0232 	mov.w	r2, r2, rrx
   d8406:	ebb6 0e02 	subs.w	lr, r6, r2
   d840a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d840e:	bf22      	ittt	cs
   d8410:	1ab6      	subcs	r6, r6, r2
   d8412:	4675      	movcs	r5, lr
   d8414:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d8418:	ea55 0e06 	orrs.w	lr, r5, r6
   d841c:	d018      	beq.n	d8450 <__aeabi_ddiv+0x114>
   d841e:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d8422:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d8426:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d842a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d842e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d8432:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d8436:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d843a:	d1c0      	bne.n	d83be <__aeabi_ddiv+0x82>
   d843c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8440:	d10b      	bne.n	d845a <__aeabi_ddiv+0x11e>
   d8442:	ea41 0100 	orr.w	r1, r1, r0
   d8446:	f04f 0000 	mov.w	r0, #0
   d844a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d844e:	e7b6      	b.n	d83be <__aeabi_ddiv+0x82>
   d8450:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8454:	bf04      	itt	eq
   d8456:	4301      	orreq	r1, r0
   d8458:	2000      	moveq	r0, #0
   d845a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d845e:	bf88      	it	hi
   d8460:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d8464:	f63f aeaf 	bhi.w	d81c6 <__aeabi_dmul+0xde>
   d8468:	ebb5 0c03 	subs.w	ip, r5, r3
   d846c:	bf04      	itt	eq
   d846e:	ebb6 0c02 	subseq.w	ip, r6, r2
   d8472:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d8476:	f150 0000 	adcs.w	r0, r0, #0
   d847a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d847e:	bd70      	pop	{r4, r5, r6, pc}
   d8480:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d8484:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d8488:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d848c:	bfc2      	ittt	gt
   d848e:	ebd4 050c 	rsbsgt	r5, r4, ip
   d8492:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d8496:	bd70      	popgt	{r4, r5, r6, pc}
   d8498:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d849c:	f04f 0e00 	mov.w	lr, #0
   d84a0:	3c01      	subs	r4, #1
   d84a2:	e690      	b.n	d81c6 <__aeabi_dmul+0xde>
   d84a4:	ea45 0e06 	orr.w	lr, r5, r6
   d84a8:	e68d      	b.n	d81c6 <__aeabi_dmul+0xde>
   d84aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d84ae:	ea94 0f0c 	teq	r4, ip
   d84b2:	bf08      	it	eq
   d84b4:	ea95 0f0c 	teqeq	r5, ip
   d84b8:	f43f af3b 	beq.w	d8332 <__aeabi_dmul+0x24a>
   d84bc:	ea94 0f0c 	teq	r4, ip
   d84c0:	d10a      	bne.n	d84d8 <__aeabi_ddiv+0x19c>
   d84c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d84c6:	f47f af34 	bne.w	d8332 <__aeabi_dmul+0x24a>
   d84ca:	ea95 0f0c 	teq	r5, ip
   d84ce:	f47f af25 	bne.w	d831c <__aeabi_dmul+0x234>
   d84d2:	4610      	mov	r0, r2
   d84d4:	4619      	mov	r1, r3
   d84d6:	e72c      	b.n	d8332 <__aeabi_dmul+0x24a>
   d84d8:	ea95 0f0c 	teq	r5, ip
   d84dc:	d106      	bne.n	d84ec <__aeabi_ddiv+0x1b0>
   d84de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d84e2:	f43f aefd 	beq.w	d82e0 <__aeabi_dmul+0x1f8>
   d84e6:	4610      	mov	r0, r2
   d84e8:	4619      	mov	r1, r3
   d84ea:	e722      	b.n	d8332 <__aeabi_dmul+0x24a>
   d84ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d84f0:	bf18      	it	ne
   d84f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d84f6:	f47f aec5 	bne.w	d8284 <__aeabi_dmul+0x19c>
   d84fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d84fe:	f47f af0d 	bne.w	d831c <__aeabi_dmul+0x234>
   d8502:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d8506:	f47f aeeb 	bne.w	d82e0 <__aeabi_dmul+0x1f8>
   d850a:	e712      	b.n	d8332 <__aeabi_dmul+0x24a>

000d850c <__gedf2>:
   d850c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   d8510:	e006      	b.n	d8520 <__cmpdf2+0x4>
   d8512:	bf00      	nop

000d8514 <__ledf2>:
   d8514:	f04f 0c01 	mov.w	ip, #1
   d8518:	e002      	b.n	d8520 <__cmpdf2+0x4>
   d851a:	bf00      	nop

000d851c <__cmpdf2>:
   d851c:	f04f 0c01 	mov.w	ip, #1
   d8520:	f84d cd04 	str.w	ip, [sp, #-4]!
   d8524:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d8528:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d852c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d8530:	bf18      	it	ne
   d8532:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d8536:	d01b      	beq.n	d8570 <__cmpdf2+0x54>
   d8538:	b001      	add	sp, #4
   d853a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d853e:	bf0c      	ite	eq
   d8540:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d8544:	ea91 0f03 	teqne	r1, r3
   d8548:	bf02      	ittt	eq
   d854a:	ea90 0f02 	teqeq	r0, r2
   d854e:	2000      	moveq	r0, #0
   d8550:	4770      	bxeq	lr
   d8552:	f110 0f00 	cmn.w	r0, #0
   d8556:	ea91 0f03 	teq	r1, r3
   d855a:	bf58      	it	pl
   d855c:	4299      	cmppl	r1, r3
   d855e:	bf08      	it	eq
   d8560:	4290      	cmpeq	r0, r2
   d8562:	bf2c      	ite	cs
   d8564:	17d8      	asrcs	r0, r3, #31
   d8566:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d856a:	f040 0001 	orr.w	r0, r0, #1
   d856e:	4770      	bx	lr
   d8570:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d8574:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8578:	d102      	bne.n	d8580 <__cmpdf2+0x64>
   d857a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d857e:	d107      	bne.n	d8590 <__cmpdf2+0x74>
   d8580:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d8584:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8588:	d1d6      	bne.n	d8538 <__cmpdf2+0x1c>
   d858a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d858e:	d0d3      	beq.n	d8538 <__cmpdf2+0x1c>
   d8590:	f85d 0b04 	ldr.w	r0, [sp], #4
   d8594:	4770      	bx	lr
   d8596:	bf00      	nop

000d8598 <__aeabi_cdrcmple>:
   d8598:	4684      	mov	ip, r0
   d859a:	4610      	mov	r0, r2
   d859c:	4662      	mov	r2, ip
   d859e:	468c      	mov	ip, r1
   d85a0:	4619      	mov	r1, r3
   d85a2:	4663      	mov	r3, ip
   d85a4:	e000      	b.n	d85a8 <__aeabi_cdcmpeq>
   d85a6:	bf00      	nop

000d85a8 <__aeabi_cdcmpeq>:
   d85a8:	b501      	push	{r0, lr}
   d85aa:	f7ff ffb7 	bl	d851c <__cmpdf2>
   d85ae:	2800      	cmp	r0, #0
   d85b0:	bf48      	it	mi
   d85b2:	f110 0f00 	cmnmi.w	r0, #0
   d85b6:	bd01      	pop	{r0, pc}

000d85b8 <__aeabi_dcmpeq>:
   d85b8:	f84d ed08 	str.w	lr, [sp, #-8]!
   d85bc:	f7ff fff4 	bl	d85a8 <__aeabi_cdcmpeq>
   d85c0:	bf0c      	ite	eq
   d85c2:	2001      	moveq	r0, #1
   d85c4:	2000      	movne	r0, #0
   d85c6:	f85d fb08 	ldr.w	pc, [sp], #8
   d85ca:	bf00      	nop

000d85cc <__aeabi_dcmplt>:
   d85cc:	f84d ed08 	str.w	lr, [sp, #-8]!
   d85d0:	f7ff ffea 	bl	d85a8 <__aeabi_cdcmpeq>
   d85d4:	bf34      	ite	cc
   d85d6:	2001      	movcc	r0, #1
   d85d8:	2000      	movcs	r0, #0
   d85da:	f85d fb08 	ldr.w	pc, [sp], #8
   d85de:	bf00      	nop

000d85e0 <__aeabi_dcmple>:
   d85e0:	f84d ed08 	str.w	lr, [sp, #-8]!
   d85e4:	f7ff ffe0 	bl	d85a8 <__aeabi_cdcmpeq>
   d85e8:	bf94      	ite	ls
   d85ea:	2001      	movls	r0, #1
   d85ec:	2000      	movhi	r0, #0
   d85ee:	f85d fb08 	ldr.w	pc, [sp], #8
   d85f2:	bf00      	nop

000d85f4 <__aeabi_dcmpge>:
   d85f4:	f84d ed08 	str.w	lr, [sp, #-8]!
   d85f8:	f7ff ffce 	bl	d8598 <__aeabi_cdrcmple>
   d85fc:	bf94      	ite	ls
   d85fe:	2001      	movls	r0, #1
   d8600:	2000      	movhi	r0, #0
   d8602:	f85d fb08 	ldr.w	pc, [sp], #8
   d8606:	bf00      	nop

000d8608 <__aeabi_dcmpgt>:
   d8608:	f84d ed08 	str.w	lr, [sp, #-8]!
   d860c:	f7ff ffc4 	bl	d8598 <__aeabi_cdrcmple>
   d8610:	bf34      	ite	cc
   d8612:	2001      	movcc	r0, #1
   d8614:	2000      	movcs	r0, #0
   d8616:	f85d fb08 	ldr.w	pc, [sp], #8
   d861a:	bf00      	nop

000d861c <__aeabi_d2uiz>:
   d861c:	004a      	lsls	r2, r1, #1
   d861e:	d211      	bcs.n	d8644 <__aeabi_d2uiz+0x28>
   d8620:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d8624:	d211      	bcs.n	d864a <__aeabi_d2uiz+0x2e>
   d8626:	d50d      	bpl.n	d8644 <__aeabi_d2uiz+0x28>
   d8628:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d862c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d8630:	d40e      	bmi.n	d8650 <__aeabi_d2uiz+0x34>
   d8632:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d8636:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d863a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d863e:	fa23 f002 	lsr.w	r0, r3, r2
   d8642:	4770      	bx	lr
   d8644:	f04f 0000 	mov.w	r0, #0
   d8648:	4770      	bx	lr
   d864a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d864e:	d102      	bne.n	d8656 <__aeabi_d2uiz+0x3a>
   d8650:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d8654:	4770      	bx	lr
   d8656:	f04f 0000 	mov.w	r0, #0
   d865a:	4770      	bx	lr

000d865c <__aeabi_d2f>:
   d865c:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d8660:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d8664:	bf24      	itt	cs
   d8666:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d866a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d866e:	d90d      	bls.n	d868c <__aeabi_d2f+0x30>
   d8670:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d8674:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d8678:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d867c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d8680:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d8684:	bf08      	it	eq
   d8686:	f020 0001 	biceq.w	r0, r0, #1
   d868a:	4770      	bx	lr
   d868c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d8690:	d121      	bne.n	d86d6 <__aeabi_d2f+0x7a>
   d8692:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d8696:	bfbc      	itt	lt
   d8698:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d869c:	4770      	bxlt	lr
   d869e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d86a2:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d86a6:	f1c2 0218 	rsb	r2, r2, #24
   d86aa:	f1c2 0c20 	rsb	ip, r2, #32
   d86ae:	fa10 f30c 	lsls.w	r3, r0, ip
   d86b2:	fa20 f002 	lsr.w	r0, r0, r2
   d86b6:	bf18      	it	ne
   d86b8:	f040 0001 	orrne.w	r0, r0, #1
   d86bc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d86c0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d86c4:	fa03 fc0c 	lsl.w	ip, r3, ip
   d86c8:	ea40 000c 	orr.w	r0, r0, ip
   d86cc:	fa23 f302 	lsr.w	r3, r3, r2
   d86d0:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d86d4:	e7cc      	b.n	d8670 <__aeabi_d2f+0x14>
   d86d6:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d86da:	d107      	bne.n	d86ec <__aeabi_d2f+0x90>
   d86dc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d86e0:	bf1e      	ittt	ne
   d86e2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d86e6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d86ea:	4770      	bxne	lr
   d86ec:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d86f0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d86f4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d86f8:	4770      	bx	lr
   d86fa:	bf00      	nop

000d86fc <__aeabi_uldivmod>:
   d86fc:	b953      	cbnz	r3, d8714 <__aeabi_uldivmod+0x18>
   d86fe:	b94a      	cbnz	r2, d8714 <__aeabi_uldivmod+0x18>
   d8700:	2900      	cmp	r1, #0
   d8702:	bf08      	it	eq
   d8704:	2800      	cmpeq	r0, #0
   d8706:	bf1c      	itt	ne
   d8708:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   d870c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   d8710:	f000 b9c0 	b.w	d8a94 <__aeabi_idiv0>
   d8714:	f1ad 0c08 	sub.w	ip, sp, #8
   d8718:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   d871c:	f000 f858 	bl	d87d0 <__udivmoddi4>
   d8720:	f8dd e004 	ldr.w	lr, [sp, #4]
   d8724:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d8728:	b004      	add	sp, #16
   d872a:	4770      	bx	lr

000d872c <__aeabi_f2lz>:
   d872c:	ee07 0a90 	vmov	s15, r0
   d8730:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   d8734:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d8738:	d401      	bmi.n	d873e <__aeabi_f2lz+0x12>
   d873a:	f000 b80b 	b.w	d8754 <__aeabi_f2ulz>
   d873e:	eef1 7a67 	vneg.f32	s15, s15
   d8742:	b508      	push	{r3, lr}
   d8744:	ee17 0a90 	vmov	r0, s15
   d8748:	f000 f804 	bl	d8754 <__aeabi_f2ulz>
   d874c:	4240      	negs	r0, r0
   d874e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d8752:	bd08      	pop	{r3, pc}

000d8754 <__aeabi_f2ulz>:
   d8754:	b5d0      	push	{r4, r6, r7, lr}
   d8756:	f7ff fc6f 	bl	d8038 <__aeabi_f2d>
   d875a:	4b0c      	ldr	r3, [pc, #48]	; (d878c <__aeabi_f2ulz+0x38>)
   d875c:	2200      	movs	r2, #0
   d875e:	4606      	mov	r6, r0
   d8760:	460f      	mov	r7, r1
   d8762:	f7ff fcc1 	bl	d80e8 <__aeabi_dmul>
   d8766:	f7ff ff59 	bl	d861c <__aeabi_d2uiz>
   d876a:	4604      	mov	r4, r0
   d876c:	f7ff fc42 	bl	d7ff4 <__aeabi_ui2d>
   d8770:	4b07      	ldr	r3, [pc, #28]	; (d8790 <__aeabi_f2ulz+0x3c>)
   d8772:	2200      	movs	r2, #0
   d8774:	f7ff fcb8 	bl	d80e8 <__aeabi_dmul>
   d8778:	4602      	mov	r2, r0
   d877a:	460b      	mov	r3, r1
   d877c:	4630      	mov	r0, r6
   d877e:	4639      	mov	r1, r7
   d8780:	f7ff fafa 	bl	d7d78 <__aeabi_dsub>
   d8784:	f7ff ff4a 	bl	d861c <__aeabi_d2uiz>
   d8788:	4621      	mov	r1, r4
   d878a:	bdd0      	pop	{r4, r6, r7, pc}
   d878c:	3df00000 	.word	0x3df00000
   d8790:	41f00000 	.word	0x41f00000

000d8794 <__aeabi_d2ulz>:
   d8794:	b5d0      	push	{r4, r6, r7, lr}
   d8796:	4b0c      	ldr	r3, [pc, #48]	; (d87c8 <__aeabi_d2ulz+0x34>)
   d8798:	2200      	movs	r2, #0
   d879a:	4606      	mov	r6, r0
   d879c:	460f      	mov	r7, r1
   d879e:	f7ff fca3 	bl	d80e8 <__aeabi_dmul>
   d87a2:	f7ff ff3b 	bl	d861c <__aeabi_d2uiz>
   d87a6:	4604      	mov	r4, r0
   d87a8:	f7ff fc24 	bl	d7ff4 <__aeabi_ui2d>
   d87ac:	4b07      	ldr	r3, [pc, #28]	; (d87cc <__aeabi_d2ulz+0x38>)
   d87ae:	2200      	movs	r2, #0
   d87b0:	f7ff fc9a 	bl	d80e8 <__aeabi_dmul>
   d87b4:	4602      	mov	r2, r0
   d87b6:	460b      	mov	r3, r1
   d87b8:	4630      	mov	r0, r6
   d87ba:	4639      	mov	r1, r7
   d87bc:	f7ff fadc 	bl	d7d78 <__aeabi_dsub>
   d87c0:	f7ff ff2c 	bl	d861c <__aeabi_d2uiz>
   d87c4:	4621      	mov	r1, r4
   d87c6:	bdd0      	pop	{r4, r6, r7, pc}
   d87c8:	3df00000 	.word	0x3df00000
   d87cc:	41f00000 	.word	0x41f00000

000d87d0 <__udivmoddi4>:
   d87d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d87d4:	9d08      	ldr	r5, [sp, #32]
   d87d6:	4604      	mov	r4, r0
   d87d8:	468c      	mov	ip, r1
   d87da:	2b00      	cmp	r3, #0
   d87dc:	f040 8083 	bne.w	d88e6 <__udivmoddi4+0x116>
   d87e0:	428a      	cmp	r2, r1
   d87e2:	4617      	mov	r7, r2
   d87e4:	d947      	bls.n	d8876 <__udivmoddi4+0xa6>
   d87e6:	fab2 f282 	clz	r2, r2
   d87ea:	b142      	cbz	r2, d87fe <__udivmoddi4+0x2e>
   d87ec:	f1c2 0020 	rsb	r0, r2, #32
   d87f0:	fa24 f000 	lsr.w	r0, r4, r0
   d87f4:	4091      	lsls	r1, r2
   d87f6:	4097      	lsls	r7, r2
   d87f8:	ea40 0c01 	orr.w	ip, r0, r1
   d87fc:	4094      	lsls	r4, r2
   d87fe:	ea4f 4817 	mov.w	r8, r7, lsr #16
   d8802:	0c23      	lsrs	r3, r4, #16
   d8804:	fbbc f6f8 	udiv	r6, ip, r8
   d8808:	fa1f fe87 	uxth.w	lr, r7
   d880c:	fb08 c116 	mls	r1, r8, r6, ip
   d8810:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   d8814:	fb06 f10e 	mul.w	r1, r6, lr
   d8818:	4299      	cmp	r1, r3
   d881a:	d909      	bls.n	d8830 <__udivmoddi4+0x60>
   d881c:	18fb      	adds	r3, r7, r3
   d881e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
   d8822:	f080 8119 	bcs.w	d8a58 <__udivmoddi4+0x288>
   d8826:	4299      	cmp	r1, r3
   d8828:	f240 8116 	bls.w	d8a58 <__udivmoddi4+0x288>
   d882c:	3e02      	subs	r6, #2
   d882e:	443b      	add	r3, r7
   d8830:	1a5b      	subs	r3, r3, r1
   d8832:	b2a4      	uxth	r4, r4
   d8834:	fbb3 f0f8 	udiv	r0, r3, r8
   d8838:	fb08 3310 	mls	r3, r8, r0, r3
   d883c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   d8840:	fb00 fe0e 	mul.w	lr, r0, lr
   d8844:	45a6      	cmp	lr, r4
   d8846:	d909      	bls.n	d885c <__udivmoddi4+0x8c>
   d8848:	193c      	adds	r4, r7, r4
   d884a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   d884e:	f080 8105 	bcs.w	d8a5c <__udivmoddi4+0x28c>
   d8852:	45a6      	cmp	lr, r4
   d8854:	f240 8102 	bls.w	d8a5c <__udivmoddi4+0x28c>
   d8858:	3802      	subs	r0, #2
   d885a:	443c      	add	r4, r7
   d885c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
   d8860:	eba4 040e 	sub.w	r4, r4, lr
   d8864:	2600      	movs	r6, #0
   d8866:	b11d      	cbz	r5, d8870 <__udivmoddi4+0xa0>
   d8868:	40d4      	lsrs	r4, r2
   d886a:	2300      	movs	r3, #0
   d886c:	e9c5 4300 	strd	r4, r3, [r5]
   d8870:	4631      	mov	r1, r6
   d8872:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d8876:	b902      	cbnz	r2, d887a <__udivmoddi4+0xaa>
   d8878:	deff      	udf	#255	; 0xff
   d887a:	fab2 f282 	clz	r2, r2
   d887e:	2a00      	cmp	r2, #0
   d8880:	d150      	bne.n	d8924 <__udivmoddi4+0x154>
   d8882:	1bcb      	subs	r3, r1, r7
   d8884:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   d8888:	fa1f f887 	uxth.w	r8, r7
   d888c:	2601      	movs	r6, #1
   d888e:	fbb3 fcfe 	udiv	ip, r3, lr
   d8892:	0c21      	lsrs	r1, r4, #16
   d8894:	fb0e 331c 	mls	r3, lr, ip, r3
   d8898:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   d889c:	fb08 f30c 	mul.w	r3, r8, ip
   d88a0:	428b      	cmp	r3, r1
   d88a2:	d907      	bls.n	d88b4 <__udivmoddi4+0xe4>
   d88a4:	1879      	adds	r1, r7, r1
   d88a6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
   d88aa:	d202      	bcs.n	d88b2 <__udivmoddi4+0xe2>
   d88ac:	428b      	cmp	r3, r1
   d88ae:	f200 80e9 	bhi.w	d8a84 <__udivmoddi4+0x2b4>
   d88b2:	4684      	mov	ip, r0
   d88b4:	1ac9      	subs	r1, r1, r3
   d88b6:	b2a3      	uxth	r3, r4
   d88b8:	fbb1 f0fe 	udiv	r0, r1, lr
   d88bc:	fb0e 1110 	mls	r1, lr, r0, r1
   d88c0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
   d88c4:	fb08 f800 	mul.w	r8, r8, r0
   d88c8:	45a0      	cmp	r8, r4
   d88ca:	d907      	bls.n	d88dc <__udivmoddi4+0x10c>
   d88cc:	193c      	adds	r4, r7, r4
   d88ce:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   d88d2:	d202      	bcs.n	d88da <__udivmoddi4+0x10a>
   d88d4:	45a0      	cmp	r8, r4
   d88d6:	f200 80d9 	bhi.w	d8a8c <__udivmoddi4+0x2bc>
   d88da:	4618      	mov	r0, r3
   d88dc:	eba4 0408 	sub.w	r4, r4, r8
   d88e0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   d88e4:	e7bf      	b.n	d8866 <__udivmoddi4+0x96>
   d88e6:	428b      	cmp	r3, r1
   d88e8:	d909      	bls.n	d88fe <__udivmoddi4+0x12e>
   d88ea:	2d00      	cmp	r5, #0
   d88ec:	f000 80b1 	beq.w	d8a52 <__udivmoddi4+0x282>
   d88f0:	2600      	movs	r6, #0
   d88f2:	e9c5 0100 	strd	r0, r1, [r5]
   d88f6:	4630      	mov	r0, r6
   d88f8:	4631      	mov	r1, r6
   d88fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d88fe:	fab3 f683 	clz	r6, r3
   d8902:	2e00      	cmp	r6, #0
   d8904:	d14a      	bne.n	d899c <__udivmoddi4+0x1cc>
   d8906:	428b      	cmp	r3, r1
   d8908:	d302      	bcc.n	d8910 <__udivmoddi4+0x140>
   d890a:	4282      	cmp	r2, r0
   d890c:	f200 80b8 	bhi.w	d8a80 <__udivmoddi4+0x2b0>
   d8910:	1a84      	subs	r4, r0, r2
   d8912:	eb61 0103 	sbc.w	r1, r1, r3
   d8916:	2001      	movs	r0, #1
   d8918:	468c      	mov	ip, r1
   d891a:	2d00      	cmp	r5, #0
   d891c:	d0a8      	beq.n	d8870 <__udivmoddi4+0xa0>
   d891e:	e9c5 4c00 	strd	r4, ip, [r5]
   d8922:	e7a5      	b.n	d8870 <__udivmoddi4+0xa0>
   d8924:	f1c2 0320 	rsb	r3, r2, #32
   d8928:	fa20 f603 	lsr.w	r6, r0, r3
   d892c:	4097      	lsls	r7, r2
   d892e:	fa01 f002 	lsl.w	r0, r1, r2
   d8932:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   d8936:	40d9      	lsrs	r1, r3
   d8938:	4330      	orrs	r0, r6
   d893a:	0c03      	lsrs	r3, r0, #16
   d893c:	fbb1 f6fe 	udiv	r6, r1, lr
   d8940:	fa1f f887 	uxth.w	r8, r7
   d8944:	fb0e 1116 	mls	r1, lr, r6, r1
   d8948:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   d894c:	fb06 f108 	mul.w	r1, r6, r8
   d8950:	4299      	cmp	r1, r3
   d8952:	fa04 f402 	lsl.w	r4, r4, r2
   d8956:	d909      	bls.n	d896c <__udivmoddi4+0x19c>
   d8958:	18fb      	adds	r3, r7, r3
   d895a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
   d895e:	f080 808d 	bcs.w	d8a7c <__udivmoddi4+0x2ac>
   d8962:	4299      	cmp	r1, r3
   d8964:	f240 808a 	bls.w	d8a7c <__udivmoddi4+0x2ac>
   d8968:	3e02      	subs	r6, #2
   d896a:	443b      	add	r3, r7
   d896c:	1a5b      	subs	r3, r3, r1
   d896e:	b281      	uxth	r1, r0
   d8970:	fbb3 f0fe 	udiv	r0, r3, lr
   d8974:	fb0e 3310 	mls	r3, lr, r0, r3
   d8978:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   d897c:	fb00 f308 	mul.w	r3, r0, r8
   d8980:	428b      	cmp	r3, r1
   d8982:	d907      	bls.n	d8994 <__udivmoddi4+0x1c4>
   d8984:	1879      	adds	r1, r7, r1
   d8986:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
   d898a:	d273      	bcs.n	d8a74 <__udivmoddi4+0x2a4>
   d898c:	428b      	cmp	r3, r1
   d898e:	d971      	bls.n	d8a74 <__udivmoddi4+0x2a4>
   d8990:	3802      	subs	r0, #2
   d8992:	4439      	add	r1, r7
   d8994:	1acb      	subs	r3, r1, r3
   d8996:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
   d899a:	e778      	b.n	d888e <__udivmoddi4+0xbe>
   d899c:	f1c6 0c20 	rsb	ip, r6, #32
   d89a0:	fa03 f406 	lsl.w	r4, r3, r6
   d89a4:	fa22 f30c 	lsr.w	r3, r2, ip
   d89a8:	431c      	orrs	r4, r3
   d89aa:	fa20 f70c 	lsr.w	r7, r0, ip
   d89ae:	fa01 f306 	lsl.w	r3, r1, r6
   d89b2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
   d89b6:	fa21 f10c 	lsr.w	r1, r1, ip
   d89ba:	431f      	orrs	r7, r3
   d89bc:	0c3b      	lsrs	r3, r7, #16
   d89be:	fbb1 f9fe 	udiv	r9, r1, lr
   d89c2:	fa1f f884 	uxth.w	r8, r4
   d89c6:	fb0e 1119 	mls	r1, lr, r9, r1
   d89ca:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   d89ce:	fb09 fa08 	mul.w	sl, r9, r8
   d89d2:	458a      	cmp	sl, r1
   d89d4:	fa02 f206 	lsl.w	r2, r2, r6
   d89d8:	fa00 f306 	lsl.w	r3, r0, r6
   d89dc:	d908      	bls.n	d89f0 <__udivmoddi4+0x220>
   d89de:	1861      	adds	r1, r4, r1
   d89e0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
   d89e4:	d248      	bcs.n	d8a78 <__udivmoddi4+0x2a8>
   d89e6:	458a      	cmp	sl, r1
   d89e8:	d946      	bls.n	d8a78 <__udivmoddi4+0x2a8>
   d89ea:	f1a9 0902 	sub.w	r9, r9, #2
   d89ee:	4421      	add	r1, r4
   d89f0:	eba1 010a 	sub.w	r1, r1, sl
   d89f4:	b2bf      	uxth	r7, r7
   d89f6:	fbb1 f0fe 	udiv	r0, r1, lr
   d89fa:	fb0e 1110 	mls	r1, lr, r0, r1
   d89fe:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
   d8a02:	fb00 f808 	mul.w	r8, r0, r8
   d8a06:	45b8      	cmp	r8, r7
   d8a08:	d907      	bls.n	d8a1a <__udivmoddi4+0x24a>
   d8a0a:	19e7      	adds	r7, r4, r7
   d8a0c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
   d8a10:	d22e      	bcs.n	d8a70 <__udivmoddi4+0x2a0>
   d8a12:	45b8      	cmp	r8, r7
   d8a14:	d92c      	bls.n	d8a70 <__udivmoddi4+0x2a0>
   d8a16:	3802      	subs	r0, #2
   d8a18:	4427      	add	r7, r4
   d8a1a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   d8a1e:	eba7 0708 	sub.w	r7, r7, r8
   d8a22:	fba0 8902 	umull	r8, r9, r0, r2
   d8a26:	454f      	cmp	r7, r9
   d8a28:	46c6      	mov	lr, r8
   d8a2a:	4649      	mov	r1, r9
   d8a2c:	d31a      	bcc.n	d8a64 <__udivmoddi4+0x294>
   d8a2e:	d017      	beq.n	d8a60 <__udivmoddi4+0x290>
   d8a30:	b15d      	cbz	r5, d8a4a <__udivmoddi4+0x27a>
   d8a32:	ebb3 020e 	subs.w	r2, r3, lr
   d8a36:	eb67 0701 	sbc.w	r7, r7, r1
   d8a3a:	fa07 fc0c 	lsl.w	ip, r7, ip
   d8a3e:	40f2      	lsrs	r2, r6
   d8a40:	ea4c 0202 	orr.w	r2, ip, r2
   d8a44:	40f7      	lsrs	r7, r6
   d8a46:	e9c5 2700 	strd	r2, r7, [r5]
   d8a4a:	2600      	movs	r6, #0
   d8a4c:	4631      	mov	r1, r6
   d8a4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d8a52:	462e      	mov	r6, r5
   d8a54:	4628      	mov	r0, r5
   d8a56:	e70b      	b.n	d8870 <__udivmoddi4+0xa0>
   d8a58:	4606      	mov	r6, r0
   d8a5a:	e6e9      	b.n	d8830 <__udivmoddi4+0x60>
   d8a5c:	4618      	mov	r0, r3
   d8a5e:	e6fd      	b.n	d885c <__udivmoddi4+0x8c>
   d8a60:	4543      	cmp	r3, r8
   d8a62:	d2e5      	bcs.n	d8a30 <__udivmoddi4+0x260>
   d8a64:	ebb8 0e02 	subs.w	lr, r8, r2
   d8a68:	eb69 0104 	sbc.w	r1, r9, r4
   d8a6c:	3801      	subs	r0, #1
   d8a6e:	e7df      	b.n	d8a30 <__udivmoddi4+0x260>
   d8a70:	4608      	mov	r0, r1
   d8a72:	e7d2      	b.n	d8a1a <__udivmoddi4+0x24a>
   d8a74:	4660      	mov	r0, ip
   d8a76:	e78d      	b.n	d8994 <__udivmoddi4+0x1c4>
   d8a78:	4681      	mov	r9, r0
   d8a7a:	e7b9      	b.n	d89f0 <__udivmoddi4+0x220>
   d8a7c:	4666      	mov	r6, ip
   d8a7e:	e775      	b.n	d896c <__udivmoddi4+0x19c>
   d8a80:	4630      	mov	r0, r6
   d8a82:	e74a      	b.n	d891a <__udivmoddi4+0x14a>
   d8a84:	f1ac 0c02 	sub.w	ip, ip, #2
   d8a88:	4439      	add	r1, r7
   d8a8a:	e713      	b.n	d88b4 <__udivmoddi4+0xe4>
   d8a8c:	3802      	subs	r0, #2
   d8a8e:	443c      	add	r4, r7
   d8a90:	e724      	b.n	d88dc <__udivmoddi4+0x10c>
   d8a92:	bf00      	nop

000d8a94 <__aeabi_idiv0>:
   d8a94:	4770      	bx	lr
   d8a96:	bf00      	nop

000d8a98 <asctime_r>:
   d8a98:	b510      	push	{r4, lr}
   d8a9a:	460c      	mov	r4, r1
   d8a9c:	6941      	ldr	r1, [r0, #20]
   d8a9e:	6903      	ldr	r3, [r0, #16]
   d8aa0:	6982      	ldr	r2, [r0, #24]
   d8aa2:	b086      	sub	sp, #24
   d8aa4:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   d8aa8:	9104      	str	r1, [sp, #16]
   d8aaa:	6801      	ldr	r1, [r0, #0]
   d8aac:	9103      	str	r1, [sp, #12]
   d8aae:	6841      	ldr	r1, [r0, #4]
   d8ab0:	9102      	str	r1, [sp, #8]
   d8ab2:	6881      	ldr	r1, [r0, #8]
   d8ab4:	9101      	str	r1, [sp, #4]
   d8ab6:	68c1      	ldr	r1, [r0, #12]
   d8ab8:	9100      	str	r1, [sp, #0]
   d8aba:	4907      	ldr	r1, [pc, #28]	; (d8ad8 <asctime_r+0x40>)
   d8abc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   d8ac0:	440b      	add	r3, r1
   d8ac2:	4906      	ldr	r1, [pc, #24]	; (d8adc <asctime_r+0x44>)
   d8ac4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   d8ac8:	440a      	add	r2, r1
   d8aca:	4620      	mov	r0, r4
   d8acc:	4904      	ldr	r1, [pc, #16]	; (d8ae0 <asctime_r+0x48>)
   d8ace:	f7fd fa81 	bl	d5fd4 <siprintf>
   d8ad2:	4620      	mov	r0, r4
   d8ad4:	b006      	add	sp, #24
   d8ad6:	bd10      	pop	{r4, pc}
   d8ad8:	000d92da 	.word	0x000d92da
   d8adc:	000d92c5 	.word	0x000d92c5
   d8ae0:	000d92a5 	.word	0x000d92a5

000d8ae4 <__cxa_atexit>:
   d8ae4:	b510      	push	{r4, lr}
   d8ae6:	4c05      	ldr	r4, [pc, #20]	; (d8afc <__cxa_atexit+0x18>)
   d8ae8:	4613      	mov	r3, r2
   d8aea:	b12c      	cbz	r4, d8af8 <__cxa_atexit+0x14>
   d8aec:	460a      	mov	r2, r1
   d8aee:	4601      	mov	r1, r0
   d8af0:	2002      	movs	r0, #2
   d8af2:	f3af 8000 	nop.w
   d8af6:	bd10      	pop	{r4, pc}
   d8af8:	4620      	mov	r0, r4
   d8afa:	e7fc      	b.n	d8af6 <__cxa_atexit+0x12>
   d8afc:	00000000 	.word	0x00000000

000d8b00 <gmtime>:
   d8b00:	b538      	push	{r3, r4, r5, lr}
   d8b02:	4b07      	ldr	r3, [pc, #28]	; (d8b20 <gmtime+0x20>)
   d8b04:	681d      	ldr	r5, [r3, #0]
   d8b06:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   d8b08:	4604      	mov	r4, r0
   d8b0a:	b91b      	cbnz	r3, d8b14 <gmtime+0x14>
   d8b0c:	2024      	movs	r0, #36	; 0x24
   d8b0e:	f7fd fa49 	bl	d5fa4 <malloc>
   d8b12:	63e8      	str	r0, [r5, #60]	; 0x3c
   d8b14:	6be9      	ldr	r1, [r5, #60]	; 0x3c
   d8b16:	4620      	mov	r0, r4
   d8b18:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d8b1c:	f7fd ba9a 	b.w	d6054 <gmtime_r>
   d8b20:	2003e4c0 	.word	0x2003e4c0

000d8b24 <memcpy>:
   d8b24:	440a      	add	r2, r1
   d8b26:	4291      	cmp	r1, r2
   d8b28:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   d8b2c:	d100      	bne.n	d8b30 <memcpy+0xc>
   d8b2e:	4770      	bx	lr
   d8b30:	b510      	push	{r4, lr}
   d8b32:	f811 4b01 	ldrb.w	r4, [r1], #1
   d8b36:	f803 4f01 	strb.w	r4, [r3, #1]!
   d8b3a:	4291      	cmp	r1, r2
   d8b3c:	d1f9      	bne.n	d8b32 <memcpy+0xe>
   d8b3e:	bd10      	pop	{r4, pc}

000d8b40 <memset>:
   d8b40:	4402      	add	r2, r0
   d8b42:	4603      	mov	r3, r0
   d8b44:	4293      	cmp	r3, r2
   d8b46:	d100      	bne.n	d8b4a <memset+0xa>
   d8b48:	4770      	bx	lr
   d8b4a:	f803 1b01 	strb.w	r1, [r3], #1
   d8b4e:	e7f9      	b.n	d8b44 <memset+0x4>

000d8b50 <srand>:
   d8b50:	b538      	push	{r3, r4, r5, lr}
   d8b52:	4b0d      	ldr	r3, [pc, #52]	; (d8b88 <srand+0x38>)
   d8b54:	681d      	ldr	r5, [r3, #0]
   d8b56:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d8b58:	4604      	mov	r4, r0
   d8b5a:	b97b      	cbnz	r3, d8b7c <srand+0x2c>
   d8b5c:	2018      	movs	r0, #24
   d8b5e:	f7fd fa21 	bl	d5fa4 <malloc>
   d8b62:	4a0a      	ldr	r2, [pc, #40]	; (d8b8c <srand+0x3c>)
   d8b64:	4b0a      	ldr	r3, [pc, #40]	; (d8b90 <srand+0x40>)
   d8b66:	63a8      	str	r0, [r5, #56]	; 0x38
   d8b68:	e9c0 2300 	strd	r2, r3, [r0]
   d8b6c:	4b09      	ldr	r3, [pc, #36]	; (d8b94 <srand+0x44>)
   d8b6e:	6083      	str	r3, [r0, #8]
   d8b70:	230b      	movs	r3, #11
   d8b72:	8183      	strh	r3, [r0, #12]
   d8b74:	2201      	movs	r2, #1
   d8b76:	2300      	movs	r3, #0
   d8b78:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d8b7c:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d8b7e:	2200      	movs	r2, #0
   d8b80:	611c      	str	r4, [r3, #16]
   d8b82:	615a      	str	r2, [r3, #20]
   d8b84:	bd38      	pop	{r3, r4, r5, pc}
   d8b86:	bf00      	nop
   d8b88:	2003e4c0 	.word	0x2003e4c0
   d8b8c:	abcd330e 	.word	0xabcd330e
   d8b90:	e66d1234 	.word	0xe66d1234
   d8b94:	0005deec 	.word	0x0005deec

000d8b98 <strcmp>:
   d8b98:	f810 2b01 	ldrb.w	r2, [r0], #1
   d8b9c:	f811 3b01 	ldrb.w	r3, [r1], #1
   d8ba0:	2a01      	cmp	r2, #1
   d8ba2:	bf28      	it	cs
   d8ba4:	429a      	cmpcs	r2, r3
   d8ba6:	d0f7      	beq.n	d8b98 <strcmp>
   d8ba8:	1ad0      	subs	r0, r2, r3
   d8baa:	4770      	bx	lr

000d8bac <strcpy>:
   d8bac:	4603      	mov	r3, r0
   d8bae:	f811 2b01 	ldrb.w	r2, [r1], #1
   d8bb2:	f803 2b01 	strb.w	r2, [r3], #1
   d8bb6:	2a00      	cmp	r2, #0
   d8bb8:	d1f9      	bne.n	d8bae <strcpy+0x2>
   d8bba:	4770      	bx	lr

000d8bbc <strdup>:
   d8bbc:	4b02      	ldr	r3, [pc, #8]	; (d8bc8 <strdup+0xc>)
   d8bbe:	4601      	mov	r1, r0
   d8bc0:	6818      	ldr	r0, [r3, #0]
   d8bc2:	f000 b803 	b.w	d8bcc <_strdup_r>
   d8bc6:	bf00      	nop
   d8bc8:	2003e4c0 	.word	0x2003e4c0

000d8bcc <_strdup_r>:
   d8bcc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d8bce:	4604      	mov	r4, r0
   d8bd0:	4608      	mov	r0, r1
   d8bd2:	460d      	mov	r5, r1
   d8bd4:	f000 f80f 	bl	d8bf6 <strlen>
   d8bd8:	1c42      	adds	r2, r0, #1
   d8bda:	4611      	mov	r1, r2
   d8bdc:	4620      	mov	r0, r4
   d8bde:	9201      	str	r2, [sp, #4]
   d8be0:	f7fd fa18 	bl	d6014 <_malloc_r>
   d8be4:	4604      	mov	r4, r0
   d8be6:	b118      	cbz	r0, d8bf0 <_strdup_r+0x24>
   d8be8:	9a01      	ldr	r2, [sp, #4]
   d8bea:	4629      	mov	r1, r5
   d8bec:	f7ff ff9a 	bl	d8b24 <memcpy>
   d8bf0:	4620      	mov	r0, r4
   d8bf2:	b003      	add	sp, #12
   d8bf4:	bd30      	pop	{r4, r5, pc}

000d8bf6 <strlen>:
   d8bf6:	4603      	mov	r3, r0
   d8bf8:	f813 2b01 	ldrb.w	r2, [r3], #1
   d8bfc:	2a00      	cmp	r2, #0
   d8bfe:	d1fb      	bne.n	d8bf8 <strlen+0x2>
   d8c00:	1a18      	subs	r0, r3, r0
   d8c02:	3801      	subs	r0, #1
   d8c04:	4770      	bx	lr

000d8c06 <strncpy>:
   d8c06:	b510      	push	{r4, lr}
   d8c08:	3901      	subs	r1, #1
   d8c0a:	4603      	mov	r3, r0
   d8c0c:	b132      	cbz	r2, d8c1c <strncpy+0x16>
   d8c0e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d8c12:	f803 4b01 	strb.w	r4, [r3], #1
   d8c16:	3a01      	subs	r2, #1
   d8c18:	2c00      	cmp	r4, #0
   d8c1a:	d1f7      	bne.n	d8c0c <strncpy+0x6>
   d8c1c:	441a      	add	r2, r3
   d8c1e:	2100      	movs	r1, #0
   d8c20:	4293      	cmp	r3, r2
   d8c22:	d100      	bne.n	d8c26 <strncpy+0x20>
   d8c24:	bd10      	pop	{r4, pc}
   d8c26:	f803 1b01 	strb.w	r1, [r3], #1
   d8c2a:	e7f9      	b.n	d8c20 <strncpy+0x1a>

000d8c2c <dynalib_user>:
   d8c2c:	4021 000d 405d 000d 4085 000d 4089 000d     !@..]@...@...@..
   d8c3c:	0000 0000 6573 5074 776f 7265 6f43 666e     ....setPowerConf
   d8c4c:	6769 7275 7461 6f69 3d6e 6425 3a00 0020     iguration=%d.: .
   d8c5c:	4150 5452 4349 454c 5000 5241 4954 4c43     PARTICLE.PARTICL
   d8c6c:	2045 4f43 4e4e 4345 4554 0044 4c53 4545     E CONNECTED.SLEE
   d8c7c:	2050 4552 5553 544c 5700 6b6f 2065 7942     P RESULT.Woke By
   d8c8c:	5720 7461 6463 6468 676f 5700 6b6f 2065      Watcdhdog.Woke 
   d8c9c:	7942 5220 4354 5700 6b6f 2065 7942 5020     By RTC.Woke By P
   d8cac:	5249 5000 5241 4954 4c43 2045 4146 4c49     IR.PARTICLE FAIL
   d8cbc:	4445 5420 204f 4f43 4e4e 4345 0054 4153     ED TO CONNECT.SA
   d8ccc:	504d 494c 474e 575f 4941 5f54 5453 5441     MPLING_WAIT_STAT
   d8cdc:	0045 5453 5241 2054 4153 504d 494c 474e     E.START SAMPLING
   d8cec:	3000 5000 574f 5245 4500 424e 4241 454c     .0.POWER.ENBABLE
   d8cfc:	4320 4148 4752 4e49 0047 5550 4c42 5349      CHARGING.PUBLIS
   d8d0c:	4948 474e 5300 4154 5452 5020 4255 494c     HING.START PUBLI
   d8d1c:	4853 535f 4154 4554 4700 7261 6564 2d6e     SH_STATE.Garden-
   d8d2c:	614c 7964 422d 6775 302d 2d34 6143 0070     Lady-Bug-04-Cap.
   d8d3c:	6336 6f55 716e 7358 634c 6668 386e 3574     6cUonqXsLchfn8t5
   d8d4c:	3646 7355 7255 4678 3835 4571 7b00 2220     F6UsUrxF58qE.{ "
   d8d5c:	6176 756c 2265 203a 0022 2e25 6632 2200     value": ".%.2f."
   d8d6c:	202c 6622 6565 4964 2244 203a 0022 7d22     , "feedID": "."}
   d8d7c:	4700 7261 6564 2d6e 614c 7964 422d 6775     .Garden-Lady-Bug
   d8d8c:	302d 2d34 6143 2d70 6550 6372 6e65 6174     -04-Cap-Percenta
   d8d9c:	6567 6e00 6538 6370 7350 4643 736b 3962     ge.n8epcPsCFksb9
   d8dac:	5755 7459 5867 6f74 3465 6a4b 6b68 0076     UWYtgXtoe4Kjhkv.
   d8dbc:	6f50 6577 2072 6f73 7275 6563 0073 6142     Power sources.Ba
   d8dcc:	7474 7265 2079 7473 7461 0065 6142 7474     ttery state.Batt
   d8ddc:	7265 2079 6863 7261 6567 4200 7461 6574     ery charge.Batte
   d8dec:	7972 5620 6543 6c6c 4200 7461 6574 7972     ry VCell.Battery
   d8dfc:	5320 436f 4700 7261 6564 2d6e 614c 7964      SoC.Garden-Lady
   d8e0c:	422d 6775 302d 2d34 4142 5454 5500 6b6a     -Bug-04-BATT.Ujk
   d8e1c:	4872 3967 7536 7834 7652 3454 4575 6343     rHg96u4xRvT4uECc
   d8e2c:	4573 764e 5477 6871 0075 5453 5241 2054     sENvwTqhu.START 
   d8e3c:	4c53 4545 5f50 4157 5449 535f 4154 4554     SLEEP_WAIT_STATE
   d8e4c:	4700 494f 474e 5420 204f 4c53 4545 0050     .GOING TO SLEEP.
   d8e5c:	4c53 4545 2050 5453 504f 5320 454c 5045     SLEEP STOP SLEEP
   d8e6c:	5700 6b6f 2065 7942 4220 5f59 5047 4f49     .Woke By BY_GPIO
   d8e7c:	5020 5249 5700 6b6f 2065 7942 4220 5f59      PIR.Woke By BY_
   d8e8c:	5047 4f49 5220 4354 5300 454c 5045 5220     GPIO RTC.SLEEP R
   d8e9c:	5345 4c55 2054 202d 6f57 656b 4220 5f59     ESULT - Woke BY_
   d8eac:	5452 0043 4c53 4545 2050 4552 5553 544c     RTC.SLEEP RESULT
   d8ebc:	2d20 5720 6b6f 2065 5942 4e5f 5445 4f57      - Woke BY_NETWO
   d8ecc:	4b52 5300 454c 5045 5220 5345 4c55 2054     RK.SLEEP RESULT 
   d8edc:	202d 6f57 656b 4220 2079 4e55 4e4b 574f     - Woke By UNKNOW
   d8eec:	004e 4c53 4545 2050 4954 454d 2044 4c53     N.SLEEP TIMED SL
   d8efc:	4545 0050                                   EEP.

000d8f00 <_ZTV8MB85RC64>:
	...
   d8f08:	40b5 000d 40c9 000d 511d 000d 51b3 000d     .@...@...Q...Q..
   d8f18:	5235 000d 6e75 6e6b 776f 006e 6976 006e     5R..unknown.vin.
   d8f28:	7375 2062 6f68 7473 7500 6273 6120 6164     usb host.usb ada
   d8f38:	7470 7265 7500 6273 6f20 6774 6200 7461     pter.usb otg.bat
   d8f48:	6574 7972 6e00 746f 6320 6168 6772 6e69     tery.not chargin
   d8f58:	0067 6863 7261 6567 0064 6964 6373 6168     g.charged.discha
   d8f68:	6772 6e69 0067 6166 6c75 0074 6964 6373     rging.fault.disc
   d8f78:	6e6f 656e 7463 6465 0000 0000               onnected....

000d8f84 <_ZL12powerSources>:
   d8f84:	8f1c 000d 8f24 000d 8f28 000d 8f31 000d     ....$...(...1...
   d8f94:	8f3d 000d 8f45 000d                         =...E...

000d8f9c <_ZL13batteryStates>:
   d8f9c:	8f1c 000d 8f4d 000d 8f51 000d 8f5a 000d     ....M...Q...Z...
   d8fac:	8f62 000d 8f6e 000d 8f74 000d               b...n...t...

000d8fb8 <_ZTV6MB85RC>:
	...
   d8fc0:	50dd 000d 50df 000d 511d 000d 51b3 000d     .P...P...Q...Q..
   d8fd0:	5235 000d 6564 6976 6563 6552 6461 6620     5R..deviceRead f
   d8fe0:	6961 656c 2064 7473 7461 253d 0064 6573     ailed stat=%d.se
   d8ff0:	2074 6954 656d 6620 6f72 206d 5452 2043     t Time from RTC 
   d9000:	7325 6400 7665 6369 5765 6972 6574 6620     %s.deviceWrite f
   d9010:	6961 656c 2064 7473 7461 253d 0064 6573     ailed stat=%d.se
   d9020:	2074 5452 2043 7266 6d6f 6320 6f6c 6475     t RTC from cloud
   d9030:	2520 0073 6c63 756f 2064 6974 656d 6e20      %s.cloud time n
   d9040:	746f 7620 6c61 6469 6400 7665 6369 5765     ot valid.deviceW
   d9050:	6972 6574 4545 5250 4d4f 6620 6961 656c     riteEEPROM faile
   d9060:	2064 7473 7461 253d 0064 7061 2e70 7472     d stat=%d.app.rt
   d9070:	0063 0000                                   c...

000d9074 <_ZTV12MCP79410SRAM>:
	...
   d907c:	52f5 000d 530b 000d 52e5 000d 52e9 000d     .R...S...R...R..
   d908c:	5335 000d 561d 000d 583d 000d               5S...V..=X..

000d9098 <_ZTV12MCP79410Time>:
	...
   d90a0:	52f9 000d 52fd 000d                         .R...R..

000d90a8 <_ZTV14MCP79410EEPROM>:
	...
   d90b0:	52f7 000d 5319 000d 52ed 000d 52f1 000d     .R...S...R...R..
   d90c0:	5335 000d 5657 000d 5a21 000d               5S..WV..!Z..

000d90cc <_ZTV8MCP79410>:
	...
   d90d4:	52fb 000d 5327 000d                         .R..'S..

000d90dc <_ZTVN5spark13CellularClassE>:
	...
   d90e4:	61cf 000d 61c5 000d 61bb 000d 6171 000d     .a...a...a..qa..
   d90f4:	61af 000d 61a3 000d 6c09 000d 6c11 000d     .a...a...l...l..
   d9104:	6197 000d 618f 000d 6185 000d 617b 000d     .a...a...a..{a..
   d9114:	6c41 000d                                   Al..

000d9118 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d9120:	6209 000d 620f 000d 624d 000d 621d 000d     .b...b..Mb...b..
   d9130:	620b 000d                                   .b..

000d9134 <_ZTVN5spark13EthernetClassE>:
	...
   d913c:	679f 000d 6795 000d 678b 000d 6781 000d     .g...g...g...g..
   d914c:	6775 000d 6769 000d 6c09 000d 6c11 000d     ug..ig...l...l..
   d915c:	675d 000d 6755 000d 674b 000d 6741 000d     ]g..Ug..Kg..Ag..
   d916c:	6c41 000d                                   Al..

000d9170 <_ZTV7TwoWire>:
	...
   d9178:	6929 000d 6973 000d 694b 000d 692b 000d     )i..si..Ki..+i..
   d9188:	6953 000d 695b 000d 6963 000d 696b 000d     Si..[i..ci..ki..

000d9198 <_ZTV9IPAddress>:
	...
   d91a0:	6add 000d 6acd 000d 6acf 000d 7061 0070     .j...j...j..app.

000d91b0 <_ZTVN5spark12NetworkClassE>:
	...
   d91b8:	6bc9 000d 6bd3 000d 6bdd 000d 6be7 000d     .k...k...k...k..
   d91c8:	6bf1 000d 6bfd 000d 6c09 000d 6c11 000d     .k...k...l...l..
   d91d8:	6c19 000d 6c25 000d 6c2d 000d 6c37 000d     .l..%l..-l..7l..
   d91e8:	6c41 000d 6977 6972 676e 5300 7379 6574     Al..wiring.Syste
   d91f8:	206d 6c73 6565 2070 6f63 666e 6769 7275     m sleep configur
   d9208:	7461 6f69 206e 7369 6920 766e 6c61 6469     ation is invalid
   d9218:	002e 005a 2b25 3330 3a64 3025 7532 2500     ..Z.%+03d:%02u.%
   d9228:	2d59 6d25 252d 5464 4825 253a 3a4d 5325     Y-%m-%dT%H:%M:%S
   d9238:	7a25 6100 6373 6974 656d 0000               %z.asctime..

000d9244 <_ZTV11USARTSerial>:
	...
   d924c:	7779 000d 77e5 000d 77bd 000d 6e91 000d     yw...w...w...n..
   d925c:	778d 000d 77a9 000d 779b 000d 77b7 000d     .w...w...w...w..
   d926c:	777b 000d 777f 000d                         {w...w..

000d9274 <_ZTV9USBSerial>:
	...
   d927c:	78ad 000d 7915 000d 78eb 000d 6e91 000d     .x...y...x...n..
   d928c:	78dd 000d 78af 000d 78bf 000d 790f 000d     .x...x...x...y..
   d929c:	78cf 000d 78a9 000d                         .x...x..

000d92a4 <_ZSt7nothrow>:
   d92a4:	2500 332e 2073 2e25 7333 3325 2064 2e25     .%.3s %.3s%3d %.
   d92b4:	6432 253a 322e 3a64 2e25 6432 2520 0a64     2d:%.2d:%.2d %d.
	...

000d92c5 <day_name.6145>:
   d92c5:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
   d92d5:	6972 6153                                    riSat

000d92da <mon_name.6146>:
   d92da:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
   d92ea:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
   d92fa:	4476 6365                                   vDec

000d92fe <link_const_variable_data_end>:
	...

000d9300 <link_constructors_location>:
   d9300:	000d4e95 	.word	0x000d4e95
   d9304:	000d5a51 	.word	0x000d5a51
   d9308:	000d6149 	.word	0x000d6149
   d930c:	000d61d9 	.word	0x000d61d9
   d9310:	000d67a9 	.word	0x000d67a9
   d9314:	000d6bb9 	.word	0x000d6bb9
   d9318:	000d6d21 	.word	0x000d6d21
   d931c:	000d6f49 	.word	0x000d6f49
   d9320:	000d73c9 	.word	0x000d73c9
   d9324:	000d7765 	.word	0x000d7765

000d9328 <link_constructors_end>:
	...
