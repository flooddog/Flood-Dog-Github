
/Users/philipchatterton/IoCP/Particle/Flood_Dog/Flood_Dog_v06/target/2.2.0/boron/Flood_Dog_v06.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000bd70  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  000dfd90  000dfd90  0000fd90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000dfd98  0001f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001f8  2003dea8  000dfd9c  0002dea8  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000754  2003e0a0  2003e0a0  0003e0a0  2**3
                  ALLOC
  7 .module_info_suffix 0000002c  000dff94  000dff94  0002ff94  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  8 .module_info_crc 00000004  000dffc0  000dffc0  0002ffc0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   0027e6eb  00000000  00000000  0002ffc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00026fb7  00000000  00000000  002ae6af  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000435f1  00000000  00000000  002d5666  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000039e0  00000000  00000000  00318c57  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 0000b3a8  00000000  00000000  0031c637  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0004ad4f  00000000  00000000  003279df  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00061895  00000000  00000000  0037272e  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00132dda  00000000  00000000  003d3fc3  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  0000b058  00000000  00000000  00506da0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f008 fc5f 	bl	dc8f4 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f008 fc81 	bl	dc944 <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003dea8 	.word	0x2003dea8
   d404c:	000dfd9c 	.word	0x000dfd9c
   d4050:	2003e0a0 	.word	0x2003e0a0
   d4054:	2003e0a0 	.word	0x2003e0a0
   d4058:	2003e7f1 	.word	0x2003e7f1

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405e:	4e07      	ldr	r6, [pc, #28]	; (d407c <module_user_init+0x20>)
   d4060:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
    module_user_init_hook();
   d4062:	f007 fa5f 	bl	db524 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	1ba4      	subs	r4, r4, r6
   d4068:	08a4      	lsrs	r4, r4, #2
   d406a:	2500      	movs	r5, #0
   d406c:	42a5      	cmp	r5, r4
   d406e:	d100      	bne.n	d4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d4072:	f856 3b04 	ldr.w	r3, [r6], #4
   d4076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f7      	b.n	d406c <module_user_init+0x10>
   d407c:	000dfd4c 	.word	0x000dfd4c
   d4080:	000dfd8c 	.word	0x000dfd8c

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 ba22 	b.w	d44cc <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 fa7d 	bl	d4588 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d4092:	f007 b9ff 	b.w	db494 <_post_loop>

000d4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4096:	f003 bd51 	b.w	d7b3c <malloc>

000d409a <_Znaj>:
   d409a:	f003 bd4f 	b.w	d7b3c <malloc>

000d409e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409e:	f003 bd55 	b.w	d7b4c <free>
	...

000d40a4 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40a6:	4a03      	ldr	r2, [pc, #12]	; (d40b4 <__cxa_pure_virtual+0x10>)
   d40a8:	2100      	movs	r1, #0
   d40aa:	200c      	movs	r0, #12
   d40ac:	f003 fc04 	bl	d78b8 <panic_>
  while (1);
   d40b0:	e7fe      	b.n	d40b0 <__cxa_pure_virtual+0xc>
   d40b2:	bf00      	nop
   d40b4:	000d74e9 	.word	0x000d74e9

000d40b8 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40b8:	7800      	ldrb	r0, [r0, #0]
   d40ba:	fab0 f080 	clz	r0, r0
   d40be:	0940      	lsrs	r0, r0, #5
   d40c0:	4770      	bx	lr

000d40c2 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40c2:	2301      	movs	r3, #1
   d40c4:	7003      	strb	r3, [r0, #0]
   d40c6:	4770      	bx	lr

000d40c8 <_ZN5spark10LogHandler5writeEPKcj>:
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
    // Default implementation does nothing
}
   d40c8:	4770      	bx	lr

000d40ca <_ZN5spark16StreamLogHandler5writeEPKcj>:
inline Print* spark::StreamLogHandler::stream() const {
    return stream_;
}

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
   d40ca:	6a00      	ldr	r0, [r0, #32]
   d40cc:	6803      	ldr	r3, [r0, #0]
   d40ce:	68db      	ldr	r3, [r3, #12]
   d40d0:	4718      	bx	r3
	...

000d40d4 <_ZN8MB85RC64D1Ev>:
	size_t memorySize;
	int addr; // This is just 0-7, the (0b1010000 of the 7-bit address is ORed in later)

};

class MB85RC64 : public MB85RC {
   d40d4:	b510      	push	{r4, lr}
   d40d6:	4b03      	ldr	r3, [pc, #12]	; (d40e4 <_ZN8MB85RC64D1Ev+0x10>)
   d40d8:	6003      	str	r3, [r0, #0]
   d40da:	4604      	mov	r4, r0
   d40dc:	f001 f8e6 	bl	d52ac <_ZN6MB85RCD1Ev>
   d40e0:	4620      	mov	r0, r4
   d40e2:	bd10      	pop	{r4, pc}
   d40e4:	000def5c 	.word	0x000def5c

000d40e8 <_ZN8MB85RC64D0Ev>:
   d40e8:	b510      	push	{r4, lr}
   d40ea:	4604      	mov	r4, r0
   d40ec:	f7ff fff2 	bl	d40d4 <_ZN8MB85RC64D1Ev>
   d40f0:	4620      	mov	r0, r4
   d40f2:	2110      	movs	r1, #16
   d40f4:	f007 fb5a 	bl	db7ac <_ZdlPvj>
   d40f8:	4620      	mov	r0, r4
   d40fa:	bd10      	pop	{r4, pc}

000d40fc <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   d40fc:	4b0a      	ldr	r3, [pc, #40]	; (d4128 <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
   d40fe:	b510      	push	{r4, lr}
   d4100:	4604      	mov	r4, r0
   d4102:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   d4104:	f004 fe42 	bl	d8d8c <_ZN5spark10LogManager8instanceEv>
   d4108:	4621      	mov	r1, r4
   d410a:	f005 f840 	bl	d918e <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
   d410e:	f007 f93d 	bl	db38c <_Z16_fetch_usbserialv>
   d4112:	f007 f92f 	bl	db374 <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
   d4116:	4620      	mov	r0, r4
   d4118:	4b04      	ldr	r3, [pc, #16]	; (d412c <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
   d411a:	f840 3b04 	str.w	r3, [r0], #4
   d411e:	f004 ff23 	bl	d8f68 <_ZN5spark6detail9LogFilterD1Ev>
    }
   d4122:	4620      	mov	r0, r4
   d4124:	bd10      	pop	{r4, pc}
   d4126:	bf00      	nop
   d4128:	000def44 	.word	0x000def44
   d412c:	000def2c 	.word	0x000def2c

000d4130 <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
   d4130:	b510      	push	{r4, lr}
   d4132:	4604      	mov	r4, r0
    }
   d4134:	f7ff ffe2 	bl	d40fc <_ZN5spark16SerialLogHandlerD1Ev>
   d4138:	4620      	mov	r0, r4
   d413a:	2124      	movs	r1, #36	; 0x24
   d413c:	f007 fb36 	bl	db7ac <_ZdlPvj>
   d4140:	4620      	mov	r0, r4
   d4142:	bd10      	pop	{r4, pc}

000d4144 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode>:
            config_.flags |= f.value();
        }
        return *this;
    }

    SystemSleepConfiguration& gpio(pin_t pin, InterruptMode mode) {
   d4144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (valid_) {
   d4146:	7d03      	ldrb	r3, [r0, #20]
    SystemSleepConfiguration& gpio(pin_t pin, InterruptMode mode) {
   d4148:	4605      	mov	r5, r0
   d414a:	460f      	mov	r7, r1
   d414c:	4616      	mov	r6, r2
        if (valid_) {
   d414e:	b18b      	cbz	r3, d4174 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x30>
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   d4150:	6803      	ldr	r3, [r0, #0]
   d4152:	68db      	ldr	r3, [r3, #12]
        if (!start) {
   d4154:	b183      	cbz	r3, d4178 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x34>
            if (start->type == type) {
   d4156:	889a      	ldrh	r2, [r3, #4]
   d4158:	2a01      	cmp	r2, #1
   d415a:	d006      	beq.n	d416a <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x26>
            start = start->next;
   d415c:	689b      	ldr	r3, [r3, #8]
        while (start) {
   d415e:	e7f9      	b.n	d4154 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x10>
                auto gpioWakeup = reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeup);
                if (gpioWakeup->pin == pin) {
                    gpioWakeup->mode = mode;
                    return *this;
                }
                wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_GPIO, wakeup->next);
   d4160:	689b      	ldr	r3, [r3, #8]
        if (!start) {
   d4162:	b14b      	cbz	r3, d4178 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x34>
            if (start->type == type) {
   d4164:	889a      	ldrh	r2, [r3, #4]
   d4166:	2a01      	cmp	r2, #1
   d4168:	d1fa      	bne.n	d4160 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x1c>
            while (wakeup) {
   d416a:	b12b      	cbz	r3, d4178 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x34>
                if (gpioWakeup->pin == pin) {
   d416c:	899a      	ldrh	r2, [r3, #12]
   d416e:	42ba      	cmp	r2, r7
   d4170:	d1f6      	bne.n	d4160 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x1c>
                    gpioWakeup->mode = mode;
   d4172:	739e      	strb	r6, [r3, #14]
            wakeupSource->pin = pin;
            wakeupSource->mode = mode;
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
        }
        return *this;
    }
   d4174:	4628      	mov	r0, r5
   d4176:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_gpio_t();
   d4178:	490a      	ldr	r1, [pc, #40]	; (d41a4 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x60>)
   d417a:	2010      	movs	r0, #16
   d417c:	f007 fb18 	bl	db7b0 <_ZnwjRKSt9nothrow_t>
   d4180:	4604      	mov	r4, r0
   d4182:	b168      	cbz	r0, d41a0 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x5c>
   d4184:	2210      	movs	r2, #16
   d4186:	2100      	movs	r1, #0
   d4188:	f008 fbdc 	bl	dc944 <memset>
            wakeupSource->base.size = sizeof(hal_wakeup_source_gpio_t);
   d418c:	4b06      	ldr	r3, [pc, #24]	; (d41a8 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x64>)
   d418e:	6023      	str	r3, [r4, #0]
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_GPIO;
   d4190:	2301      	movs	r3, #1
   d4192:	80a3      	strh	r3, [r4, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   d4194:	692b      	ldr	r3, [r5, #16]
   d4196:	60a3      	str	r3, [r4, #8]
            wakeupSource->pin = pin;
   d4198:	81a7      	strh	r7, [r4, #12]
            wakeupSource->mode = mode;
   d419a:	73a6      	strb	r6, [r4, #14]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   d419c:	612c      	str	r4, [r5, #16]
   d419e:	e7e9      	b.n	d4174 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x30>
                valid_ = false;
   d41a0:	7528      	strb	r0, [r5, #20]
                return *this;
   d41a2:	e7e7      	b.n	d4174 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x30>
   d41a4:	000df988 	.word	0x000df988
   d41a8:	00030010 	.word	0x00030010

000d41ac <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   d41ac:	b40e      	push	{r1, r2, r3}
   d41ae:	b510      	push	{r4, lr}
   d41b0:	b08d      	sub	sp, #52	; 0x34
   d41b2:	aa0f      	add	r2, sp, #60	; 0x3c
    va_list args;
    va_start(args, fmt);
    log(LOG_LEVEL_INFO, fmt, args);
   d41b4:	6801      	ldr	r1, [r0, #0]
inline void spark::Logger::info(const char *fmt, ...) const {
   d41b6:	f852 4b04 	ldr.w	r4, [r2], #4
    va_start(args, fmt);
   d41ba:	9203      	str	r2, [sp, #12]
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   d41bc:	2300      	movs	r3, #0
   d41be:	2020      	movs	r0, #32
   d41c0:	e9cd 0304 	strd	r0, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d41c4:	e9cd 4200 	strd	r4, r2, [sp]
   d41c8:	201e      	movs	r0, #30
   d41ca:	aa04      	add	r2, sp, #16
   d41cc:	f003 fb84 	bl	d78d8 <log_message_v>
}
   d41d0:	b00d      	add	sp, #52	; 0x34
   d41d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d41d6:	b003      	add	sp, #12
   d41d8:	4770      	bx	lr
	...

000d41dc <_Z9setupPMICv>:

FuelGauge fuel;
String VCellString;
String SoCString;

void setupPMIC(){
   d41dc:	b508      	push	{r3, lr}
	pmic.begin();
   d41de:	480a      	ldr	r0, [pc, #40]	; (d4208 <_Z9setupPMICv+0x2c>)
   d41e0:	f005 fd09 	bl	d9bf6 <_ZN4PMIC5beginEv>

    SystemPowerConfiguration(SystemPowerConfiguration&&) = default;
    SystemPowerConfiguration& operator=(SystemPowerConfiguration&&) = default;

    SystemPowerConfiguration& powerSourceMinVoltage(uint16_t voltage) {
        conf_.vin_min_voltage = voltage;
   d41e4:	4809      	ldr	r0, [pc, #36]	; (d420c <_Z9setupPMICv+0x30>)
   d41e6:	f241 03cc 	movw	r3, #4300	; 0x10cc
   d41ea:	80c3      	strh	r3, [r0, #6]
        return *this;
    }

    SystemPowerConfiguration& powerSourceMaxCurrent(uint16_t current) {
        conf_.vin_max_current = current;
   d41ec:	4b08      	ldr	r3, [pc, #32]	; (d4210 <_Z9setupPMICv+0x34>)
   d41ee:	6083      	str	r3, [r0, #8]
        return (hal_timer_millis(nullptr) / 1000);
    }

#if HAL_PLATFORM_POWER_MANAGEMENT
    int setPowerConfiguration(const particle::SystemPowerConfiguration& conf) {
        return system_power_management_set_config(conf.config(), nullptr);
   d41f0:	2100      	movs	r1, #0
        return *this;
    }

    SystemPowerConfiguration& batteryChargeVoltage(uint16_t voltage) {
        conf_.termination_voltage = voltage;
   d41f2:	f241 0372 	movw	r3, #4210	; 0x1072
   d41f6:	8183      	strh	r3, [r0, #12]
   d41f8:	f003 fbe4 	bl	d79c4 <system_power_management_set_config>
        .powerSourceMinVoltage(4300) 
        .batteryChargeCurrent(850) 
        .batteryChargeVoltage(4210);

    int res = System.setPowerConfiguration(conf);
    Log.info("setPowerConfiguration=%d", res);
   d41fc:	4905      	ldr	r1, [pc, #20]	; (d4214 <_Z9setupPMICv+0x38>)
   d41fe:	4602      	mov	r2, r0
   d4200:	4805      	ldr	r0, [pc, #20]	; (d4218 <_Z9setupPMICv+0x3c>)
   d4202:	f7ff ffd3 	bl	d41ac <_ZNK5spark6Logger4infoEPKcz>
    // returns SYSTEM_ERROR_NONE (0) in case of success
}
   d4206:	bd08      	pop	{r3, pc}
   d4208:	2003e1e5 	.word	0x2003e1e5
   d420c:	2003e0f4 	.word	0x2003e0f4
   d4210:	03520226 	.word	0x03520226
   d4214:	000de9a8 	.word	0x000de9a8
   d4218:	2003e63c 	.word	0x2003e63c
   d421c:	00000000 	.word	0x00000000

000d4220 <_Z14getTemperaturev>:

	digitalWrite(donePin, HIGH);                           // Pet the watchdog
	digitalWrite(donePin, LOW);
}

bool getTemperature() {
   d4220:	b510      	push	{r4, lr}
	int reading = analogRead(tmp36Pin);   //getting the voltage reading from the temperature sensor
   d4222:	200f      	movs	r0, #15
bool getTemperature() {
   d4224:	ed2d 8b02 	vpush	{d8}
	int reading = analogRead(tmp36Pin);   //getting the voltage reading from the temperature sensor
   d4228:	f007 fa2e 	bl	db688 <analogRead>
	delay(1000);
   d422c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d4230:	f003 fcfc 	bl	d7c2c <delay>
	reading = analogRead(tmp36Pin);   //getting the voltage reading from the temperature sensor
   d4234:	200f      	movs	r0, #15
   d4236:	f007 fa27 	bl	db688 <analogRead>
   d423a:	4604      	mov	r4, r0
	delay(1000);
   d423c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d4240:	f003 fcf4 	bl	d7c2c <delay>
	float voltage = reading * 3.3;        // converting that reading to voltage, for 3.3v arduino use 3.3
   d4244:	4620      	mov	r0, r4
   d4246:	f007 fdd1 	bl	dbdec <__aeabi_i2d>
   d424a:	a32b      	add	r3, pc, #172	; (adr r3, d42f8 <_Z14getTemperaturev+0xd8>)
   d424c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4250:	f007 fe36 	bl	dbec0 <__aeabi_dmul>
   d4254:	f008 f8ee 	bl	dc434 <__aeabi_d2f>
	voltage /= 4096.0;                    // Electron is different than the Arduino where there are only 1024 steps
	temperatureC = (voltage - 0.5) * 100.0;  //converting from 10 mv per degree with 500 mV offset to degrees ((voltage - 500mV) times 100) - 5 degree calibration
   d4258:	eddf 7a1f 	vldr	s15, [pc, #124]	; d42d8 <_Z14getTemperaturev+0xb8>
   d425c:	ee07 0a10 	vmov	s14, r0
   d4260:	ee67 7a27 	vmul.f32	s15, s14, s15
   d4264:	ee17 0a90 	vmov	r0, s15
   d4268:	f007 fdd2 	bl	dbe10 <__aeabi_f2d>
   d426c:	4b1b      	ldr	r3, [pc, #108]	; (d42dc <_Z14getTemperaturev+0xbc>)
   d426e:	2200      	movs	r2, #0
   d4270:	f007 fc6e 	bl	dbb50 <__aeabi_dsub>
   d4274:	2200      	movs	r2, #0
   d4276:	4b1a      	ldr	r3, [pc, #104]	; (d42e0 <_Z14getTemperaturev+0xc0>)
   d4278:	f007 fe22 	bl	dbec0 <__aeabi_dmul>
   d427c:	f008 f8da 	bl	dc434 <__aeabi_d2f>
   d4280:	4b18      	ldr	r3, [pc, #96]	; (d42e4 <_Z14getTemperaturev+0xc4>)
   d4282:	6018      	str	r0, [r3, #0]
   d4284:	ee08 0a10 	vmov	s16, r0
	temperatureF = (temperatureC * 9.0 / 5.0) + 32.0;  // now convert to Fahrenheit
   d4288:	f007 fdc2 	bl	dbe10 <__aeabi_f2d>
   d428c:	4b16      	ldr	r3, [pc, #88]	; (d42e8 <_Z14getTemperaturev+0xc8>)
   d428e:	2200      	movs	r2, #0
   d4290:	f007 fe16 	bl	dbec0 <__aeabi_dmul>
   d4294:	4b15      	ldr	r3, [pc, #84]	; (d42ec <_Z14getTemperaturev+0xcc>)
   d4296:	2200      	movs	r2, #0
   d4298:	f007 ff3c 	bl	dc114 <__aeabi_ddiv>
   d429c:	4b14      	ldr	r3, [pc, #80]	; (d42f0 <_Z14getTemperaturev+0xd0>)
   d429e:	2200      	movs	r2, #0
   d42a0:	f007 fc58 	bl	dbb54 <__adddf3>
   d42a4:	f008 f8c6 	bl	dc434 <__aeabi_d2f>
	
	if(temperatureC < -20.0 || temperatureC > 30.0) {             // Reasonable range for garage temperature
   d42a8:	eefb 7a04 	vmov.f32	s15, #180	; 0xc1a00000 -20.0
	temperatureF = (temperatureC * 9.0 / 5.0) + 32.0;  // now convert to Fahrenheit
   d42ac:	4b11      	ldr	r3, [pc, #68]	; (d42f4 <_Z14getTemperaturev+0xd4>)
	if(temperatureC < -20.0 || temperatureC > 30.0) {             // Reasonable range for garage temperature
   d42ae:	eeb4 8ae7 	vcmpe.f32	s16, s15
   d42b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	temperatureF = (temperatureC * 9.0 / 5.0) + 32.0;  // now convert to Fahrenheit
   d42b6:	6018      	str	r0, [r3, #0]
	if(temperatureC < -20.0 || temperatureC > 30.0) {             // Reasonable range for garage temperature
   d42b8:	d40b      	bmi.n	d42d2 <_Z14getTemperaturev+0xb2>
   d42ba:	eef3 7a0e 	vmov.f32	s15, #62	; 0x41f00000  30.0
   d42be:	eeb4 8ae7 	vcmpe.f32	s16, s15
   d42c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d42c6:	bfd4      	ite	le
   d42c8:	2001      	movle	r0, #1
   d42ca:	2000      	movgt	r0, #0
	}
	else {
		// snprintf(resultStr, sizeof(resultStr),"Temperature is: %3.1f", temperatureF);
		return 1;
	}
}
   d42cc:	ecbd 8b02 	vpop	{d8}
   d42d0:	bd10      	pop	{r4, pc}
		return 0;
   d42d2:	2000      	movs	r0, #0
   d42d4:	e7fa      	b.n	d42cc <_Z14getTemperaturev+0xac>
   d42d6:	bf00      	nop
   d42d8:	39800000 	.word	0x39800000
   d42dc:	3fe00000 	.word	0x3fe00000
   d42e0:	40590000 	.word	0x40590000
   d42e4:	2003e23c 	.word	0x2003e23c
   d42e8:	40220000 	.word	0x40220000
   d42ec:	40140000 	.word	0x40140000
   d42f0:	40400000 	.word	0x40400000
   d42f4:	2003e240 	.word	0x2003e240
   d42f8:	66666666 	.word	0x66666666
   d42fc:	400a6666 	.word	0x400a6666

000d4300 <_Z20meterParticlePublishv>:
		Particle.publish(tempEvent, tempData, 60, PRIVATE);
	}
	return true;
}

bool meterParticlePublish(void){                           // Enforces Particle's limit on 1 publish a second
   d4300:	b510      	push	{r4, lr}
  static unsigned long lastPublish = 0;                    // Initialize and store value here
  if(millis() - lastPublish >= 1000) {                     // Particle rate limits at 1 publish per second
   d4302:	4c07      	ldr	r4, [pc, #28]	; (d4320 <_Z20meterParticlePublishv+0x20>)

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4304:	f003 f8f8 	bl	d74f8 <HAL_Timer_Get_Milli_Seconds>
   d4308:	6823      	ldr	r3, [r4, #0]
   d430a:	1ac0      	subs	r0, r0, r3
   d430c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   d4310:	d304      	bcc.n	d431c <_Z20meterParticlePublishv+0x1c>
   d4312:	f003 f8f1 	bl	d74f8 <HAL_Timer_Get_Milli_Seconds>
    lastPublish = millis();
   d4316:	6020      	str	r0, [r4, #0]
   d4318:	2001      	movs	r0, #1
    return 1;
  }
  else return 0;
}
   d431a:	bd10      	pop	{r4, pc}
  else return 0;
   d431c:	2000      	movs	r0, #0
   d431e:	e7fc      	b.n	d431a <_Z20meterParticlePublishv+0x1a>
   d4320:	2003e0c4 	.word	0x2003e0c4

000d4324 <_Z7logData6StringS_bb>:
bool logData(String tempEvent, String tempData, bool tempLogSerial, bool tempLogParticle){
   d4324:	b570      	push	{r4, r5, r6, lr}
   d4326:	4604      	mov	r4, r0
   d4328:	b086      	sub	sp, #24
   d432a:	460d      	mov	r5, r1
   d432c:	461e      	mov	r6, r3
	if(tempLogSerial){
   d432e:	b18a      	cbz	r2, d4354 <_Z7logData6StringS_bb+0x30>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d4330:	4601      	mov	r1, r0
   d4332:	a802      	add	r0, sp, #8
   d4334:	f005 fe8a 	bl	da04c <_ZN6StringC1ERKS_>
		Log.info(tempEvent + ": " + tempData);
   d4338:	491a      	ldr	r1, [pc, #104]	; (d43a4 <_Z7logData6StringS_bb+0x80>)
   d433a:	a802      	add	r0, sp, #8
   d433c:	f005 fee8 	bl	da110 <_ZplRK15StringSumHelperPKc>
   d4340:	4629      	mov	r1, r5
   d4342:	f005 fed9 	bl	da0f8 <_ZplRK15StringSumHelperRK6String>
   d4346:	6801      	ldr	r1, [r0, #0]
   d4348:	4817      	ldr	r0, [pc, #92]	; (d43a8 <_Z7logData6StringS_bb+0x84>)
   d434a:	f7ff ff2f 	bl	d41ac <_ZNK5spark6Logger4infoEPKcz>
class StringSumHelper : public String
   d434e:	a802      	add	r0, sp, #8
   d4350:	f005 fde6 	bl	d9f20 <_ZN6StringD1Ev>
	if(tempLogParticle){
   d4354:	b31e      	cbz	r6, d439e <_Z7logData6StringS_bb+0x7a>
		waitUntil(meterParticlePublish);
   d4356:	f7ff ffd3 	bl	d4300 <_Z20meterParticlePublishv>
        while (_while() && !_condition()) {
   d435a:	b910      	cbnz	r0, d4362 <_Z7logData6StringS_bb+0x3e>
            spark_process();
   d435c:	f003 fb4e 	bl	d79fc <spark_process>
        while (_while() && !_condition()) {
   d4360:	e7f9      	b.n	d4356 <_Z7logData6StringS_bb+0x32>
   d4362:	f7ff ffcd 	bl	d4300 <_Z20meterParticlePublishv>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   d4366:	4b11      	ldr	r3, [pc, #68]	; (d43ac <_Z7logData6StringS_bb+0x88>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d4368:	682a      	ldr	r2, [r5, #0]
   d436a:	781b      	ldrb	r3, [r3, #0]
   d436c:	f88d 3000 	strb.w	r3, [sp]
   d4370:	6821      	ldr	r1, [r4, #0]
   d4372:	233c      	movs	r3, #60	; 0x3c
   d4374:	a802      	add	r0, sp, #8
   d4376:	f003 fe19 	bl	d7fac <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d437a:	9c03      	ldr	r4, [sp, #12]
   d437c:	b17c      	cbz	r4, d439e <_Z7logData6StringS_bb+0x7a>
      if (--_M_use_count == 0)
   d437e:	6863      	ldr	r3, [r4, #4]
   d4380:	3b01      	subs	r3, #1
   d4382:	6063      	str	r3, [r4, #4]
   d4384:	b95b      	cbnz	r3, d439e <_Z7logData6StringS_bb+0x7a>
          _M_dispose();
   d4386:	6823      	ldr	r3, [r4, #0]
   d4388:	4620      	mov	r0, r4
   d438a:	689b      	ldr	r3, [r3, #8]
   d438c:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d438e:	68a3      	ldr	r3, [r4, #8]
   d4390:	3b01      	subs	r3, #1
   d4392:	60a3      	str	r3, [r4, #8]
   d4394:	b91b      	cbnz	r3, d439e <_Z7logData6StringS_bb+0x7a>
            _M_destroy();
   d4396:	6823      	ldr	r3, [r4, #0]
   d4398:	4620      	mov	r0, r4
   d439a:	68db      	ldr	r3, [r3, #12]
   d439c:	4798      	blx	r3
}
   d439e:	2001      	movs	r0, #1
   d43a0:	b006      	add	sp, #24
   d43a2:	bd70      	pop	{r4, r5, r6, pc}
   d43a4:	000df701 	.word	0x000df701
   d43a8:	2003e63c 	.word	0x2003e63c
   d43ac:	2003e0c1 	.word	0x2003e0c1

000d43b0 <_Z8setLabel6String>:
int setLabel(String tempDeviceLabel) {
   d43b0:	b510      	push	{r4, lr}
	deviceLabel = tempDeviceLabel;
   d43b2:	4c10      	ldr	r4, [pc, #64]	; (d43f4 <_Z8setLabel6String+0x44>)
int setLabel(String tempDeviceLabel) {
   d43b4:	b088      	sub	sp, #32
   d43b6:	4601      	mov	r1, r0
	deviceLabel = tempDeviceLabel;
   d43b8:	4620      	mov	r0, r4
   d43ba:	f005 fe38 	bl	da02e <_ZN6StringaSERKS_>
	digitalWrite(BUILT_IN_LED, HIGH);
   d43be:	2101      	movs	r1, #1
   d43c0:	2007      	movs	r0, #7
   d43c2:	f007 f948 	bl	db656 <digitalWrite>
	logData("Name: ", deviceLabel, true, true);
   d43c6:	490c      	ldr	r1, [pc, #48]	; (d43f8 <_Z8setLabel6String+0x48>)
   d43c8:	4668      	mov	r0, sp
   d43ca:	f005 fdf4 	bl	d9fb6 <_ZN6StringC1EPKc>
   d43ce:	4621      	mov	r1, r4
   d43d0:	a804      	add	r0, sp, #16
   d43d2:	f005 fe3b 	bl	da04c <_ZN6StringC1ERKS_>
   d43d6:	2301      	movs	r3, #1
   d43d8:	461a      	mov	r2, r3
   d43da:	a904      	add	r1, sp, #16
   d43dc:	4668      	mov	r0, sp
   d43de:	f7ff ffa1 	bl	d4324 <_Z7logData6StringS_bb>
   d43e2:	a804      	add	r0, sp, #16
   d43e4:	f005 fd9c 	bl	d9f20 <_ZN6StringD1Ev>
   d43e8:	4668      	mov	r0, sp
   d43ea:	f005 fd99 	bl	d9f20 <_ZN6StringD1Ev>
}
   d43ee:	2001      	movs	r0, #1
   d43f0:	b008      	add	sp, #32
   d43f2:	bd10      	pop	{r4, pc}
   d43f4:	2003e118 	.word	0x2003e118
   d43f8:	000de9c1 	.word	0x000de9c1

000d43fc <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>:
inline AbstractTypeDiagnosticData<UnderlyingTypeT>::AbstractTypeDiagnosticData(DiagnosticDataId id, const char* name, diag_type type) :
        AbstractDiagnosticData(id, name, type) {
}

template<typename UnderlyingTypeT>
inline int AbstractTypeDiagnosticData<UnderlyingTypeT>::get(DiagnosticDataId id, UnderlyingTypeT& val) {
   d43fc:	b530      	push	{r4, r5, lr}
   d43fe:	b085      	sub	sp, #20
   d4400:	460d      	mov	r5, r1
    const diag_source* src = nullptr;
   d4402:	2200      	movs	r2, #0
    const int ret = diag_get_source(id, &src, nullptr);
   d4404:	4669      	mov	r1, sp
    const diag_source* src = nullptr;
   d4406:	9200      	str	r2, [sp, #0]
    const int ret = diag_get_source(id, &src, nullptr);
   d4408:	f003 fa7e 	bl	d7908 <diag_get_source>
    if (ret != SYSTEM_ERROR_NONE) {
   d440c:	b9b0      	cbnz	r0, d443c <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x40>
        return ret;
    }
    return get(src, val);
   d440e:	9c00      	ldr	r4, [sp, #0]
    SPARK_ASSERT(src && src->callback);
   d4410:	b10c      	cbz	r4, d4416 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x1a>
   d4412:	6923      	ldr	r3, [r4, #16]
   d4414:	b923      	cbnz	r3, d4420 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x24>
   d4416:	4a0a      	ldr	r2, [pc, #40]	; (d4440 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x44>)
   d4418:	2100      	movs	r1, #0
   d441a:	200a      	movs	r0, #10
   d441c:	f003 fa4c 	bl	d78b8 <panic_>
    diag_source_get_cmd_data d = { sizeof(diag_source_get_cmd_data), 0 /* reserved */, data, size };
   d4420:	2300      	movs	r3, #0
   d4422:	f8ad 3006 	strh.w	r3, [sp, #6]
   d4426:	230c      	movs	r3, #12
   d4428:	f8ad 3004 	strh.w	r3, [sp, #4]
   d442c:	2304      	movs	r3, #4
   d442e:	9303      	str	r3, [sp, #12]
   d4430:	9502      	str	r5, [sp, #8]
    const int ret = src->callback(src, DIAG_SOURCE_CMD_GET, &d);
   d4432:	6923      	ldr	r3, [r4, #16]
   d4434:	aa01      	add	r2, sp, #4
   d4436:	2101      	movs	r1, #1
   d4438:	4620      	mov	r0, r4
   d443a:	4798      	blx	r3
}
   d443c:	b005      	add	sp, #20
   d443e:	bd30      	pop	{r4, r5, pc}
   d4440:	000d74e9 	.word	0x000d74e9

000d4444 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d4444:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d4446:	e9d0 5300 	ldrd	r5, r3, [r0]
   d444a:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   d444c:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d444e:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   d4452:	42ae      	cmp	r6, r5
   d4454:	d004      	beq.n	d4460 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
   d4456:	4628      	mov	r0, r5
   d4458:	f005 fd62 	bl	d9f20 <_ZN6StringD1Ev>
   d445c:	3514      	adds	r5, #20
   d445e:	e7f8      	b.n	d4452 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   d4460:	6820      	ldr	r0, [r4, #0]
   d4462:	f003 fb73 	bl	d7b4c <free>
    AllocatorT::free(data_);
}
   d4466:	4620      	mov	r0, r4
   d4468:	bd70      	pop	{r4, r5, r6, pc}

000d446a <_ZN6MB85RC3putIhEERKT_jS3_>:
    template <typename T> const T &put(size_t framAddr, const T &t) {
   d446a:	b538      	push	{r3, r4, r5, lr}
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
   d446c:	6803      	ldr	r3, [r0, #0]
    template <typename T> const T &put(size_t framAddr, const T &t) {
   d446e:	4614      	mov	r4, r2
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
   d4470:	68dd      	ldr	r5, [r3, #12]
   d4472:	2301      	movs	r3, #1
   d4474:	47a8      	blx	r5
    }
   d4476:	4620      	mov	r0, r4
   d4478:	bd38      	pop	{r3, r4, r5, pc}
	...

000d447c <_Z11watchdogISRv>:
void watchdogISR(){
   d447c:	b570      	push	{r4, r5, r6, lr}
	fram.put(FRAM::pirAddr, pirState);
   d447e:	4d0f      	ldr	r5, [pc, #60]	; (d44bc <_Z11watchdogISRv+0x40>)
	pirState = 0;
   d4480:	4a0f      	ldr	r2, [pc, #60]	; (d44c0 <_Z11watchdogISRv+0x44>)
   d4482:	2400      	movs	r4, #0
	fram.put(FRAM::pirAddr, pirState);
   d4484:	2111      	movs	r1, #17
   d4486:	4628      	mov	r0, r5
	pirState = 0;
   d4488:	7014      	strb	r4, [r2, #0]
	fram.put(FRAM::pirAddr, pirState);
   d448a:	f7ff ffee 	bl	d446a <_ZN6MB85RC3putIhEERKT_jS3_>
	rtcState = 0;
   d448e:	4a0d      	ldr	r2, [pc, #52]	; (d44c4 <_Z11watchdogISRv+0x48>)
	fram.put(FRAM::rtcAddr, rtcState);
   d4490:	2109      	movs	r1, #9
   d4492:	4628      	mov	r0, r5
	rtcState = 0;
   d4494:	7014      	strb	r4, [r2, #0]
	fram.put(FRAM::rtcAddr, rtcState);
   d4496:	f7ff ffe8 	bl	d446a <_ZN6MB85RC3putIhEERKT_jS3_>
	watchdogState = 1;
   d449a:	4a0b      	ldr	r2, [pc, #44]	; (d44c8 <_Z11watchdogISRv+0x4c>)
   d449c:	2601      	movs	r6, #1
	fram.put(FRAM::watchdogAddr, watchdogState);
   d449e:	2110      	movs	r1, #16
   d44a0:	4628      	mov	r0, r5
	watchdogState = 1;
   d44a2:	7016      	strb	r6, [r2, #0]
	fram.put(FRAM::watchdogAddr, watchdogState);
   d44a4:	f7ff ffe1 	bl	d446a <_ZN6MB85RC3putIhEERKT_jS3_>
	digitalWrite(donePin, HIGH);                           // Pet the watchdog
   d44a8:	4631      	mov	r1, r6
   d44aa:	2005      	movs	r0, #5
   d44ac:	f007 f8d3 	bl	db656 <digitalWrite>
	digitalWrite(donePin, LOW);
   d44b0:	4621      	mov	r1, r4
   d44b2:	2005      	movs	r0, #5
}
   d44b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	digitalWrite(donePin, LOW);
   d44b8:	f007 b8cd 	b.w	db656 <digitalWrite>
   d44bc:	2003e168 	.word	0x2003e168
   d44c0:	2003e1e4 	.word	0x2003e1e4
   d44c4:	2003e228 	.word	0x2003e228
   d44c8:	2003e270 	.word	0x2003e270

000d44cc <setup>:
void setup() {
   d44cc:	b507      	push	{r0, r1, r2, lr}
	Serial.begin(115200);
   d44ce:	f006 ff5d 	bl	db38c <_Z16_fetch_usbserialv>
   d44d2:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   d44d6:	f006 ff49 	bl	db36c <_ZN9USBSerial5beginEl>
	setupPMIC();
   d44da:	f7ff fe7f 	bl	d41dc <_Z9setupPMICv>
        return register_function(call_raw_user_function, (void*)func, funcKey);
   d44de:	4a24      	ldr	r2, [pc, #144]	; (d4570 <setup+0xa4>)
   d44e0:	4924      	ldr	r1, [pc, #144]	; (d4574 <setup+0xa8>)
   d44e2:	4825      	ldr	r0, [pc, #148]	; (d4578 <setup+0xac>)
   d44e4:	f003 fc6f 	bl	d7dc6 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
	pinMode(userSwitch, INPUT);										// Button for user input
   d44e8:	2100      	movs	r1, #0
   d44ea:	2004      	movs	r0, #4
   d44ec:	f007 f8a2 	bl	db634 <pinMode>
	pinMode(wakeUpPin, INPUT_PULLDOWN);								// This pin is active HIGH
   d44f0:	2103      	movs	r1, #3
   d44f2:	2008      	movs	r0, #8
   d44f4:	f007 f89e 	bl	db634 <pinMode>
	pinMode(BUILT_IN_LED, OUTPUT);									// declare the Blue LED Pin as an output
   d44f8:	2101      	movs	r1, #1
   d44fa:	2007      	movs	r0, #7
   d44fc:	f007 f89a 	bl	db634 <pinMode>
	pinMode(donePin, OUTPUT);										// Allows us to pet the watchdog
   d4500:	2101      	movs	r1, #1
   d4502:	2005      	movs	r0, #5
   d4504:	f007 f896 	bl	db634 <pinMode>
	digitalWrite(donePin, HIGH);
   d4508:	2101      	movs	r1, #1
   d450a:	2005      	movs	r0, #5
   d450c:	f007 f8a3 	bl	db656 <digitalWrite>
	digitalWrite(donePin, LOW);										// Pet the watchdog
   d4510:	2100      	movs	r1, #0
   d4512:	2005      	movs	r0, #5
   d4514:	f007 f89f 	bl	db656 <digitalWrite>
	pinMode(DeepSleepPin , OUTPUT);									// For a hard reset active HIGH
   d4518:	2101      	movs	r1, #1
   d451a:	2006      	movs	r0, #6
   d451c:	f007 f88a 	bl	db634 <pinMode>
	pinMode(ANALOG_DETECTOR, INPUT_PULLDOWN);						// This pin is active HIGH
   d4520:	2103      	movs	r1, #3
   d4522:	2010      	movs	r0, #16
   d4524:	f007 f886 	bl	db634 <pinMode>
	pinMode(PIRPin, INPUT_PULLDOWN);								// PIR Sensor Digital
   d4528:	2103      	movs	r1, #3
   d452a:	2013      	movs	r0, #19
   d452c:	f007 f882 	bl	db634 <pinMode>
	digitalWrite(PIRPin, LOW);										// SET PIR Sensor Digital
   d4530:	2100      	movs	r1, #0
   d4532:	2013      	movs	r0, #19
   d4534:	f007 f88f 	bl	db656 <digitalWrite>
	Time.zone(-5 + Time.getDSTOffset());
   d4538:	f006 f9f6 	bl	da928 <_ZN9TimeClass12getDSTOffsetEv>
   d453c:	eef1 7a04 	vmov.f32	s15, #20	; 0x40a00000  5.0
   d4540:	ee30 0a67 	vsub.f32	s0, s0, s15
   d4544:	f006 f9d0 	bl	da8e8 <_ZN9TimeClass4zoneEf>
	rtc.setup();
   d4548:	480c      	ldr	r0, [pc, #48]	; (d457c <setup+0xb0>)
   d454a:	f001 f9f1 	bl	d5930 <_ZN8MCP794105setupEv>
	fram.begin();									  				// Initializes Wire but does not return a boolean on successful initialization
   d454e:	480c      	ldr	r0, [pc, #48]	; (d4580 <setup+0xb4>)
   d4550:	f000 fec2 	bl	d52d8 <_ZN6MB85RC5beginEv>
	attachInterrupt(wakeUpPin, watchdogISR, RISING);  				// Need to pet the watchdog when needed
   d4554:	2300      	movs	r3, #0
   d4556:	9300      	str	r3, [sp, #0]
   d4558:	490a      	ldr	r1, [pc, #40]	; (d4584 <setup+0xb8>)
   d455a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d455e:	2201      	movs	r2, #1
   d4560:	2008      	movs	r0, #8
   d4562:	f004 f82d 	bl	d85c0 <_Z15attachInterrupttPFvvE13InterruptModeah>
}
   d4566:	b003      	add	sp, #12
   d4568:	f85d eb04 	ldr.w	lr, [sp], #4
	watchdogISR();
   d456c:	f7ff bf86 	b.w	d447c <_Z11watchdogISRv>
   d4570:	000de9c8 	.word	0x000de9c8
   d4574:	000d43b1 	.word	0x000d43b1
   d4578:	000d7d9b 	.word	0x000d7d9b
   d457c:	2003e20c 	.word	0x2003e20c
   d4580:	2003e168 	.word	0x2003e168
   d4584:	000d447d 	.word	0x000d447d

000d4588 <loop>:
void loop() {
   d4588:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	switch(state){
   d458c:	4c99      	ldr	r4, [pc, #612]	; (d47f4 <loop+0x26c>)
	rtc.loop();									  				// Need to run this in the main loop
   d458e:	489a      	ldr	r0, [pc, #616]	; (d47f8 <loop+0x270>)
void loop() {
   d4590:	b092      	sub	sp, #72	; 0x48
	rtc.loop();									  				// Need to run this in the main loop
   d4592:	f001 fad3 	bl	d5b3c <_ZN8MCP794104loopEv>
	switch(state){
   d4596:	7823      	ldrb	r3, [r4, #0]
   d4598:	3b02      	subs	r3, #2
   d459a:	2b06      	cmp	r3, #6
   d459c:	f200 80aa 	bhi.w	d46f4 <loop+0x16c>
   d45a0:	e8df f013 	tbh	[pc, r3, lsl #1]
   d45a4:	007e0007 	.word	0x007e0007
   d45a8:	00d900ab 	.word	0x00d900ab
   d45ac:	02730164 	.word	0x02730164
   d45b0:	02d6      	.short	0x02d6
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d45b2:	f003 fa33 	bl	d7a1c <spark_cloud_flag_connected>
   d45b6:	4e91      	ldr	r6, [pc, #580]	; (d47fc <loop+0x274>)
			if(Particle.connected()){
   d45b8:	4605      	mov	r5, r0
   d45ba:	2800      	cmp	r0, #0
   d45bc:	d04e      	beq.n	d465c <loop+0xd4>
				logData("PARTICLE", "PARTICLE CONNECTED", true, false);
   d45be:	4990      	ldr	r1, [pc, #576]	; (d4800 <loop+0x278>)
   d45c0:	a808      	add	r0, sp, #32
   d45c2:	f005 fcf8 	bl	d9fb6 <_ZN6StringC1EPKc>
   d45c6:	498f      	ldr	r1, [pc, #572]	; (d4804 <loop+0x27c>)
   d45c8:	a80c      	add	r0, sp, #48	; 0x30
   d45ca:	f005 fcf4 	bl	d9fb6 <_ZN6StringC1EPKc>
   d45ce:	2300      	movs	r3, #0
   d45d0:	2201      	movs	r2, #1
   d45d2:	a90c      	add	r1, sp, #48	; 0x30
   d45d4:	a808      	add	r0, sp, #32
   d45d6:	f7ff fea5 	bl	d4324 <_Z7logData6StringS_bb>
   d45da:	a80c      	add	r0, sp, #48	; 0x30
   d45dc:	f005 fca0 	bl	d9f20 <_ZN6StringD1Ev>
   d45e0:	a808      	add	r0, sp, #32
   d45e2:	f005 fc9d 	bl	d9f20 <_ZN6StringD1Ev>
				if(watchdogState){
   d45e6:	4b88      	ldr	r3, [pc, #544]	; (d4808 <loop+0x280>)
   d45e8:	781b      	ldrb	r3, [r3, #0]
   d45ea:	b1c3      	cbz	r3, d461e <loop+0x96>
					logData("SLEEP RESULT", "Woke By Watcdhdog", true, true);
   d45ec:	4987      	ldr	r1, [pc, #540]	; (d480c <loop+0x284>)
   d45ee:	a808      	add	r0, sp, #32
   d45f0:	f005 fce1 	bl	d9fb6 <_ZN6StringC1EPKc>
   d45f4:	4986      	ldr	r1, [pc, #536]	; (d4810 <loop+0x288>)
						logData("SLEEP RESULT", "Woke By PIR", true, true);
   d45f6:	a80c      	add	r0, sp, #48	; 0x30
   d45f8:	f005 fcdd 	bl	d9fb6 <_ZN6StringC1EPKc>
   d45fc:	2301      	movs	r3, #1
   d45fe:	461a      	mov	r2, r3
   d4600:	a90c      	add	r1, sp, #48	; 0x30
   d4602:	a808      	add	r0, sp, #32
   d4604:	f7ff fe8e 	bl	d4324 <_Z7logData6StringS_bb>
   d4608:	a80c      	add	r0, sp, #48	; 0x30
   d460a:	f005 fc89 	bl	d9f20 <_ZN6StringD1Ev>
   d460e:	a808      	add	r0, sp, #32
   d4610:	f005 fc86 	bl	d9f20 <_ZN6StringD1Ev>
   d4614:	f002 ff70 	bl	d74f8 <HAL_Timer_Get_Milli_Seconds>
				stateTime = millis();
   d4618:	6030      	str	r0, [r6, #0]
					state = SAMPLING_WAIT_STATE;
   d461a:	2303      	movs	r3, #3
   d461c:	e069      	b.n	d46f2 <loop+0x16a>
        readData(framAddr, (uint8_t *)&t, sizeof(T));
   d461e:	4f7d      	ldr	r7, [pc, #500]	; (d4814 <loop+0x28c>)
   d4620:	4d7d      	ldr	r5, [pc, #500]	; (d4818 <loop+0x290>)
   d4622:	487e      	ldr	r0, [pc, #504]	; (d481c <loop+0x294>)
   d4624:	2301      	movs	r3, #1
   d4626:	463a      	mov	r2, r7
   d4628:	2109      	movs	r1, #9
   d462a:	f000 fe5f 	bl	d52ec <_ZN6MB85RC8readDataEjPhj>
   d462e:	2301      	movs	r3, #1
   d4630:	487a      	ldr	r0, [pc, #488]	; (d481c <loop+0x294>)
   d4632:	462a      	mov	r2, r5
   d4634:	2111      	movs	r1, #17
   d4636:	f000 fe59 	bl	d52ec <_ZN6MB85RC8readDataEjPhj>
					if(rtcState){
   d463a:	783b      	ldrb	r3, [r7, #0]
   d463c:	b12b      	cbz	r3, d464a <loop+0xc2>
						logData("SLEEP RESULT", "Woke By RTC", true, true);
   d463e:	4973      	ldr	r1, [pc, #460]	; (d480c <loop+0x284>)
   d4640:	a808      	add	r0, sp, #32
   d4642:	f005 fcb8 	bl	d9fb6 <_ZN6StringC1EPKc>
   d4646:	4976      	ldr	r1, [pc, #472]	; (d4820 <loop+0x298>)
   d4648:	e7d5      	b.n	d45f6 <loop+0x6e>
					} else if(pirState){
   d464a:	782b      	ldrb	r3, [r5, #0]
   d464c:	2b00      	cmp	r3, #0
   d464e:	d0e1      	beq.n	d4614 <loop+0x8c>
						logData("SLEEP RESULT", "Woke By PIR", true, true);
   d4650:	496e      	ldr	r1, [pc, #440]	; (d480c <loop+0x284>)
   d4652:	a808      	add	r0, sp, #32
   d4654:	f005 fcaf 	bl	d9fb6 <_ZN6StringC1EPKc>
   d4658:	4972      	ldr	r1, [pc, #456]	; (d4824 <loop+0x29c>)
   d465a:	e7cc      	b.n	d45f6 <loop+0x6e>
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
   d465c:	f003 f9d6 	bl	d7a0c <spark_cloud_flag_connect>
   d4660:	f002 ff4a 	bl	d74f8 <HAL_Timer_Get_Milli_Seconds>
				if(millis() - stateTime > MAX_TIME_TO_WAIT_FOR_CONNECT_MS){
   d4664:	6833      	ldr	r3, [r6, #0]
   d4666:	1ac0      	subs	r0, r0, r3
   d4668:	4b6f      	ldr	r3, [pc, #444]	; (d4828 <loop+0x2a0>)
   d466a:	4298      	cmp	r0, r3
   d466c:	d942      	bls.n	d46f4 <loop+0x16c>
					logData("PARTICLE", "PARTICLE FAILED TO CONNECT", true, false);
   d466e:	4964      	ldr	r1, [pc, #400]	; (d4800 <loop+0x278>)
   d4670:	a808      	add	r0, sp, #32
   d4672:	f005 fca0 	bl	d9fb6 <_ZN6StringC1EPKc>
   d4676:	496d      	ldr	r1, [pc, #436]	; (d482c <loop+0x2a4>)
   d4678:	a80c      	add	r0, sp, #48	; 0x30
   d467a:	f005 fc9c 	bl	d9fb6 <_ZN6StringC1EPKc>
   d467e:	462b      	mov	r3, r5
   d4680:	2201      	movs	r2, #1
   d4682:	a90c      	add	r1, sp, #48	; 0x30
   d4684:	a808      	add	r0, sp, #32
   d4686:	f7ff fe4d 	bl	d4324 <_Z7logData6StringS_bb>
   d468a:	a80c      	add	r0, sp, #48	; 0x30
   d468c:	f005 fc48 	bl	d9f20 <_ZN6StringD1Ev>
   d4690:	a808      	add	r0, sp, #32
   d4692:	f005 fc45 	bl	d9f20 <_ZN6StringD1Ev>
   d4696:	f002 ff2f 	bl	d74f8 <HAL_Timer_Get_Milli_Seconds>
					stateTime = millis();
   d469a:	6030      	str	r0, [r6, #0]
			state = SLEEP_WAIT_STATE;
   d469c:	2307      	movs	r3, #7
   d469e:	e028      	b.n	d46f2 <loop+0x16a>
			if(millis() - stateTime >= MAX_TIME_TO_SAMPLE_WAIT){
   d46a0:	4d56      	ldr	r5, [pc, #344]	; (d47fc <loop+0x274>)
   d46a2:	f002 ff29 	bl	d74f8 <HAL_Timer_Get_Milli_Seconds>
   d46a6:	682b      	ldr	r3, [r5, #0]
   d46a8:	1ac0      	subs	r0, r0, r3
   d46aa:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   d46ae:	d321      	bcc.n	d46f4 <loop+0x16c>
				logData("SAMPLING_WAIT_STATE", "START SAMPLING", true, false);
   d46b0:	495f      	ldr	r1, [pc, #380]	; (d4830 <loop+0x2a8>)
   d46b2:	a808      	add	r0, sp, #32
   d46b4:	f005 fc7f 	bl	d9fb6 <_ZN6StringC1EPKc>
   d46b8:	495e      	ldr	r1, [pc, #376]	; (d4834 <loop+0x2ac>)
   d46ba:	a80c      	add	r0, sp, #48	; 0x30
   d46bc:	f005 fc7b 	bl	d9fb6 <_ZN6StringC1EPKc>
   d46c0:	2300      	movs	r3, #0
   d46c2:	2201      	movs	r2, #1
   d46c4:	a90c      	add	r1, sp, #48	; 0x30
   d46c6:	a808      	add	r0, sp, #32
   d46c8:	f7ff fe2c 	bl	d4324 <_Z7logData6StringS_bb>
   d46cc:	a80c      	add	r0, sp, #48	; 0x30
   d46ce:	f005 fc27 	bl	d9f20 <_ZN6StringD1Ev>
   d46d2:	a808      	add	r0, sp, #32
   d46d4:	f005 fc24 	bl	d9f20 <_ZN6StringD1Ev>
				sampleCounter = 1;
   d46d8:	4b57      	ldr	r3, [pc, #348]	; (d4838 <loop+0x2b0>)
   d46da:	2201      	movs	r2, #1
   d46dc:	601a      	str	r2, [r3, #0]
				sampleSum = 0;
   d46de:	4b57      	ldr	r3, [pc, #348]	; (d483c <loop+0x2b4>)
   d46e0:	2200      	movs	r2, #0
   d46e2:	601a      	str	r2, [r3, #0]
				sampleAverage = 0;
   d46e4:	4b56      	ldr	r3, [pc, #344]	; (d4840 <loop+0x2b8>)
   d46e6:	2200      	movs	r2, #0
   d46e8:	601a      	str	r2, [r3, #0]
   d46ea:	f002 ff05 	bl	d74f8 <HAL_Timer_Get_Milli_Seconds>
				state = SAMPLE_STATE;
   d46ee:	2304      	movs	r3, #4
				stateTime = millis();
   d46f0:	6028      	str	r0, [r5, #0]
					state = SAMPLING_WAIT_STATE;
   d46f2:	7023      	strb	r3, [r4, #0]
}
   d46f4:	b012      	add	sp, #72	; 0x48
   d46f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			analogValue = analogRead(ANALOG_DETECTOR);
   d46fa:	2010      	movs	r0, #16
   d46fc:	f006 ffc4 	bl	db688 <analogRead>
   d4700:	ee07 0a90 	vmov	s15, r0
   d4704:	4b4f      	ldr	r3, [pc, #316]	; (d4844 <loop+0x2bc>)
   d4706:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
   d470a:	ed83 7a00 	vstr	s14, [r3]
			sampleSum = sampleSum + analogValue;
   d470e:	4b4b      	ldr	r3, [pc, #300]	; (d483c <loop+0x2b4>)
   d4710:	edd3 7a00 	vldr	s15, [r3]
   d4714:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d4718:	ee77 7a87 	vadd.f32	s15, s15, s14
   d471c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   d4720:	edc3 7a00 	vstr	s15, [r3]
			if(sampleCounter++ > sampleTotalCount){
   d4724:	4b44      	ldr	r3, [pc, #272]	; (d4838 <loop+0x2b0>)
   d4726:	681a      	ldr	r2, [r3, #0]
   d4728:	1c51      	adds	r1, r2, #1
   d472a:	6019      	str	r1, [r3, #0]
   d472c:	4b46      	ldr	r3, [pc, #280]	; (d4848 <loop+0x2c0>)
   d472e:	681b      	ldr	r3, [r3, #0]
   d4730:	429a      	cmp	r2, r3
			sampleSum = sampleSum + analogValue;
   d4732:	ee17 0a90 	vmov	r0, s15
			if(sampleCounter++ > sampleTotalCount){
   d4736:	dd0e      	ble.n	d4756 <loop+0x1ce>
				sampleAverage = sampleSum / sampleTotalCount;
   d4738:	fb90 f0f3 	sdiv	r0, r0, r3
   d473c:	ee07 0a90 	vmov	s15, r0
   d4740:	4b3f      	ldr	r3, [pc, #252]	; (d4840 <loop+0x2b8>)
   d4742:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d4746:	edc3 7a00 	vstr	s15, [r3]
   d474a:	f002 fed5 	bl	d74f8 <HAL_Timer_Get_Milli_Seconds>
				stateTime = millis();
   d474e:	4b2b      	ldr	r3, [pc, #172]	; (d47fc <loop+0x274>)
   d4750:	6018      	str	r0, [r3, #0]
				state = PUBLISH_WAIT_STATE;
   d4752:	2305      	movs	r3, #5
   d4754:	7023      	strb	r3, [r4, #0]
			if(millis() - stateTime >= MAX_TIME_TO_WAIT_PUBLISH_MS){
   d4756:	4d29      	ldr	r5, [pc, #164]	; (d47fc <loop+0x274>)
   d4758:	f002 fece 	bl	d74f8 <HAL_Timer_Get_Milli_Seconds>
   d475c:	682a      	ldr	r2, [r5, #0]
   d475e:	1a80      	subs	r0, r0, r2
   d4760:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   d4764:	d3c6      	bcc.n	d46f4 <loop+0x16c>
				getTemperature() ? temperatureStringC = String(temperatureC, 2) : temperatureStringC = "0";
   d4766:	f7ff fd5b 	bl	d4220 <_Z14getTemperaturev>
   d476a:	4e38      	ldr	r6, [pc, #224]	; (d484c <loop+0x2c4>)
   d476c:	2800      	cmp	r0, #0
   d476e:	d03c      	beq.n	d47ea <loop+0x262>
   d4770:	ed96 0a00 	vldr	s0, [r6]
   d4774:	2102      	movs	r1, #2
   d4776:	a80c      	add	r0, sp, #48	; 0x30
   d4778:	f005 fc8d 	bl	da096 <_ZN6StringC1Efi>
   d477c:	4834      	ldr	r0, [pc, #208]	; (d4850 <loop+0x2c8>)
   d477e:	a90c      	add	r1, sp, #48	; 0x30
   d4780:	f005 fc6f 	bl	da062 <_ZN6StringaSEOS_>
   d4784:	a80c      	add	r0, sp, #48	; 0x30
   d4786:	f005 fbcb 	bl	d9f20 <_ZN6StringD1Ev>
					logData("POWER", "ENBABLE CHARGING", true, true);
   d478a:	4932      	ldr	r1, [pc, #200]	; (d4854 <loop+0x2cc>)
   d478c:	a808      	add	r0, sp, #32
					logData("POWER", "ENBABLE CHARGING", true, true);
   d478e:	f005 fc12 	bl	d9fb6 <_ZN6StringC1EPKc>
   d4792:	4931      	ldr	r1, [pc, #196]	; (d4858 <loop+0x2d0>)
   d4794:	a80c      	add	r0, sp, #48	; 0x30
   d4796:	f005 fc0e 	bl	d9fb6 <_ZN6StringC1EPKc>
   d479a:	2301      	movs	r3, #1
   d479c:	461a      	mov	r2, r3
   d479e:	a90c      	add	r1, sp, #48	; 0x30
   d47a0:	a808      	add	r0, sp, #32
   d47a2:	f7ff fdbf 	bl	d4324 <_Z7logData6StringS_bb>
   d47a6:	a80c      	add	r0, sp, #48	; 0x30
   d47a8:	f005 fbba 	bl	d9f20 <_ZN6StringD1Ev>
   d47ac:	a808      	add	r0, sp, #32
   d47ae:	f005 fbb7 	bl	d9f20 <_ZN6StringD1Ev>
					pmic.enableCharging();
   d47b2:	482a      	ldr	r0, [pc, #168]	; (d485c <loop+0x2d4>)
   d47b4:	f005 fa9b 	bl	d9cee <_ZN4PMIC14enableChargingEv>
				logData("PUBLISHING", "START PUBLISH_STATE", true, false);
   d47b8:	4929      	ldr	r1, [pc, #164]	; (d4860 <loop+0x2d8>)
   d47ba:	a808      	add	r0, sp, #32
   d47bc:	f005 fbfb 	bl	d9fb6 <_ZN6StringC1EPKc>
   d47c0:	4928      	ldr	r1, [pc, #160]	; (d4864 <loop+0x2dc>)
   d47c2:	a80c      	add	r0, sp, #48	; 0x30
   d47c4:	f005 fbf7 	bl	d9fb6 <_ZN6StringC1EPKc>
   d47c8:	2300      	movs	r3, #0
   d47ca:	2201      	movs	r2, #1
   d47cc:	a90c      	add	r1, sp, #48	; 0x30
   d47ce:	a808      	add	r0, sp, #32
   d47d0:	f7ff fda8 	bl	d4324 <_Z7logData6StringS_bb>
   d47d4:	a80c      	add	r0, sp, #48	; 0x30
   d47d6:	f005 fba3 	bl	d9f20 <_ZN6StringD1Ev>
   d47da:	a808      	add	r0, sp, #32
   d47dc:	f005 fba0 	bl	d9f20 <_ZN6StringD1Ev>
   d47e0:	f002 fe8a 	bl	d74f8 <HAL_Timer_Get_Milli_Seconds>
				state = PUBLISH_STATE;
   d47e4:	2306      	movs	r3, #6
				stateTime = millis();
   d47e6:	6028      	str	r0, [r5, #0]
				state = PUBLISH_STATE;
   d47e8:	e783      	b.n	d46f2 <loop+0x16a>
				getTemperature() ? temperatureStringC = String(temperatureC, 2) : temperatureStringC = "0";
   d47ea:	491f      	ldr	r1, [pc, #124]	; (d4868 <loop+0x2e0>)
   d47ec:	4818      	ldr	r0, [pc, #96]	; (d4850 <loop+0x2c8>)
   d47ee:	f005 fc40 	bl	da072 <_ZN6StringaSEPKc>
   d47f2:	e7ca      	b.n	d478a <loop+0x202>
   d47f4:	2003deb0 	.word	0x2003deb0
   d47f8:	2003e20c 	.word	0x2003e20c
   d47fc:	2003e238 	.word	0x2003e238
   d4800:	000de9d1 	.word	0x000de9d1
   d4804:	000de9da 	.word	0x000de9da
   d4808:	2003e270 	.word	0x2003e270
   d480c:	000de9ed 	.word	0x000de9ed
   d4810:	000de9fa 	.word	0x000de9fa
   d4814:	2003e228 	.word	0x2003e228
   d4818:	2003e1e4 	.word	0x2003e1e4
   d481c:	2003e168 	.word	0x2003e168
   d4820:	000dea0c 	.word	0x000dea0c
   d4824:	000dea18 	.word	0x000dea18
   d4828:	000493e0 	.word	0x000493e0
   d482c:	000dea24 	.word	0x000dea24
   d4830:	000dea3f 	.word	0x000dea3f
   d4834:	000dea53 	.word	0x000dea53
   d4838:	2003e230 	.word	0x2003e230
   d483c:	2003e234 	.word	0x2003e234
   d4840:	2003e22c 	.word	0x2003e22c
   d4844:	2003e0c8 	.word	0x2003e0c8
   d4848:	2003deac 	.word	0x2003deac
   d484c:	2003e23c 	.word	0x2003e23c
   d4850:	2003e244 	.word	0x2003e244
   d4854:	000dea62 	.word	0x000dea62
   d4858:	000dea68 	.word	0x000dea68
   d485c:	2003e1e5 	.word	0x2003e1e5
   d4860:	000dea79 	.word	0x000dea79
   d4864:	000dea84 	.word	0x000dea84
   d4868:	000df3f8 	.word	0x000df3f8
inline AbstractIntegerDiagnosticData::AbstractIntegerDiagnosticData(DiagnosticDataId id, const char* name) :
        AbstractTypeDiagnosticData<int32_t>(id, name, DIAG_TYPE_INT) {
}

inline int AbstractIntegerDiagnosticData::get(DiagnosticDataId id, IntType& val) {
    return AbstractTypeDiagnosticData<IntType>::get(id, val);
   d486c:	a90c      	add	r1, sp, #48	; 0x30
   d486e:	2018      	movs	r0, #24
   d4870:	f7ff fdc4 	bl	d43fc <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
			powerSource = System.powerSource();
   d4874:	4d96      	ldr	r5, [pc, #600]	; (d4ad0 <loop+0x548>)
			batteryState = System.batteryState();
   d4876:	4e97      	ldr	r6, [pc, #604]	; (d4ad4 <loop+0x54c>)
    }

    int powerSource() const {
        particle::AbstractIntegerDiagnosticData::IntType val;
        const auto r = particle::AbstractIntegerDiagnosticData::get(DIAG_ID_SYSTEM_POWER_SOURCE, val);
        if (r < 0) {
   d4878:	2800      	cmp	r0, #0
            return r;
        }
        return val;
   d487a:	bfa8      	it	ge
   d487c:	980c      	ldrge	r0, [sp, #48]	; 0x30
			powerSource = System.powerSource();
   d487e:	6028      	str	r0, [r5, #0]
   d4880:	a90c      	add	r1, sp, #48	; 0x30
   d4882:	2007      	movs	r0, #7
   d4884:	f7ff fdba 	bl	d43fc <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
			powerSString = powerSources[std::max(0, powerSource)];
   d4888:	682b      	ldr	r3, [r5, #0]
   d488a:	4a93      	ldr	r2, [pc, #588]	; (d4ad8 <loop+0x550>)
    }

    int batteryState() const {
        particle::AbstractIntegerDiagnosticData::IntType val;
        const auto r = particle::AbstractIntegerDiagnosticData::get(DIAG_ID_SYSTEM_BATTERY_STATE, val);
        if (r < 0) {
   d488c:	2800      	cmp	r0, #0
   d488e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
            return r;
        }
        return val;
   d4892:	bfa8      	it	ge
   d4894:	980c      	ldrge	r0, [sp, #48]	; 0x30
   d4896:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
			batteryState = System.batteryState();
   d489a:	6030      	str	r0, [r6, #0]
			powerSString = powerSources[std::max(0, powerSource)];
   d489c:	488f      	ldr	r0, [pc, #572]	; (d4adc <loop+0x554>)
   d489e:	f005 fbe8 	bl	da072 <_ZN6StringaSEPKc>
			powerBSString = batteryStates[std::max(0, batteryState)];
   d48a2:	6833      	ldr	r3, [r6, #0]
   d48a4:	4a8e      	ldr	r2, [pc, #568]	; (d4ae0 <loop+0x558>)
   d48a6:	488f      	ldr	r0, [pc, #572]	; (d4ae4 <loop+0x55c>)
   d48a8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   d48ac:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
   d48b0:	f005 fbdf 	bl	da072 <_ZN6StringaSEPKc>
   d48b4:	a90c      	add	r1, sp, #48	; 0x30
   d48b6:	2003      	movs	r0, #3
   d48b8:	f7ff fda0 	bl	d43fc <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
        // XXX: we could potentially simply call FuelGauge::getNormalizedSoC(),
        // however in order to exactly match the vitals values sent to the cloud we are going to use
        // diagnostic source as well.
        particle::AbstractIntegerDiagnosticData::IntType val;
        int r = particle::AbstractIntegerDiagnosticData::get(DIAG_ID_SYSTEM_BATTERY_CHARGE, val);
        if (r) {
   d48bc:	2800      	cmp	r0, #0
   d48be:	f040 80e1 	bne.w	d4a84 <loop+0x4fc>
    StorageT value() const {
        return value_;
    }

    constexpr float toFloat() const {
        return static_cast<float>(value_) / constexpr_pow(2.0f, N);
   d48c2:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
   d48c6:	ee00 3a10 	vmov	s0, r3
   d48ca:	eebb 0acc 	vcvt.f32.u32	s0, s0, #8
			batterySocString = String(System.batteryCharge(), 2);
   d48ce:	2102      	movs	r1, #2
   d48d0:	a80c      	add	r0, sp, #48	; 0x30
   d48d2:	f005 fbe0 	bl	da096 <_ZN6StringC1Efi>
   d48d6:	a90c      	add	r1, sp, #48	; 0x30
   d48d8:	4883      	ldr	r0, [pc, #524]	; (d4ae8 <loop+0x560>)
   d48da:	f005 fbc2 	bl	da062 <_ZN6StringaSEOS_>
   d48de:	a80c      	add	r0, sp, #48	; 0x30
   d48e0:	f005 fb1e 	bl	d9f20 <_ZN6StringD1Ev>
			VCellString = String(fuel.getVCell(), 2);
   d48e4:	4881      	ldr	r0, [pc, #516]	; (d4aec <loop+0x564>)
   d48e6:	f003 fd7d 	bl	d83e4 <_ZN9FuelGauge8getVCellEv>
   d48ea:	2102      	movs	r1, #2
   d48ec:	a80c      	add	r0, sp, #48	; 0x30
   d48ee:	f005 fbd2 	bl	da096 <_ZN6StringC1Efi>
   d48f2:	a90c      	add	r1, sp, #48	; 0x30
   d48f4:	487e      	ldr	r0, [pc, #504]	; (d4af0 <loop+0x568>)
   d48f6:	f005 fbb4 	bl	da062 <_ZN6StringaSEOS_>
   d48fa:	a80c      	add	r0, sp, #48	; 0x30
   d48fc:	f005 fb10 	bl	d9f20 <_ZN6StringD1Ev>
			SoCString = String(fuel.getSoC(), 2);
   d4900:	487a      	ldr	r0, [pc, #488]	; (d4aec <loop+0x564>)
   d4902:	f003 fd8b 	bl	d841c <_ZN9FuelGauge6getSoCEv>
   d4906:	2102      	movs	r1, #2
   d4908:	a80c      	add	r0, sp, #48	; 0x30
   d490a:	f005 fbc4 	bl	da096 <_ZN6StringC1Efi>
   d490e:	a90c      	add	r1, sp, #48	; 0x30
   d4910:	4878      	ldr	r0, [pc, #480]	; (d4af4 <loop+0x56c>)
   d4912:	f005 fba6 	bl	da062 <_ZN6StringaSEOS_>
   d4916:	a80c      	add	r0, sp, #48	; 0x30
   d4918:	f005 fb02 	bl	d9f20 <_ZN6StringD1Ev>
			logData("Power sources", powerSString, true, true);
   d491c:	4976      	ldr	r1, [pc, #472]	; (d4af8 <loop+0x570>)
   d491e:	a808      	add	r0, sp, #32
   d4920:	f005 fb49 	bl	d9fb6 <_ZN6StringC1EPKc>
   d4924:	496d      	ldr	r1, [pc, #436]	; (d4adc <loop+0x554>)
   d4926:	a80c      	add	r0, sp, #48	; 0x30
   d4928:	f005 fb90 	bl	da04c <_ZN6StringC1ERKS_>
   d492c:	2301      	movs	r3, #1
   d492e:	461a      	mov	r2, r3
   d4930:	a90c      	add	r1, sp, #48	; 0x30
   d4932:	a808      	add	r0, sp, #32
   d4934:	f7ff fcf6 	bl	d4324 <_Z7logData6StringS_bb>
   d4938:	a80c      	add	r0, sp, #48	; 0x30
   d493a:	f005 faf1 	bl	d9f20 <_ZN6StringD1Ev>
   d493e:	a808      	add	r0, sp, #32
   d4940:	f005 faee 	bl	d9f20 <_ZN6StringD1Ev>
			logData("Battery state", powerBSString, true, true);
   d4944:	496d      	ldr	r1, [pc, #436]	; (d4afc <loop+0x574>)
   d4946:	a808      	add	r0, sp, #32
   d4948:	f005 fb35 	bl	d9fb6 <_ZN6StringC1EPKc>
   d494c:	4965      	ldr	r1, [pc, #404]	; (d4ae4 <loop+0x55c>)
   d494e:	a80c      	add	r0, sp, #48	; 0x30
   d4950:	f005 fb7c 	bl	da04c <_ZN6StringC1ERKS_>
   d4954:	2301      	movs	r3, #1
   d4956:	461a      	mov	r2, r3
   d4958:	a90c      	add	r1, sp, #48	; 0x30
   d495a:	a808      	add	r0, sp, #32
   d495c:	f7ff fce2 	bl	d4324 <_Z7logData6StringS_bb>
   d4960:	a80c      	add	r0, sp, #48	; 0x30
   d4962:	f005 fadd 	bl	d9f20 <_ZN6StringD1Ev>
   d4966:	a808      	add	r0, sp, #32
   d4968:	f005 fada 	bl	d9f20 <_ZN6StringD1Ev>
			logData("Battery charge", batterySocString, true, true);
   d496c:	4964      	ldr	r1, [pc, #400]	; (d4b00 <loop+0x578>)
   d496e:	a808      	add	r0, sp, #32
   d4970:	f005 fb21 	bl	d9fb6 <_ZN6StringC1EPKc>
   d4974:	495c      	ldr	r1, [pc, #368]	; (d4ae8 <loop+0x560>)
   d4976:	a80c      	add	r0, sp, #48	; 0x30
   d4978:	f005 fb68 	bl	da04c <_ZN6StringC1ERKS_>
   d497c:	2301      	movs	r3, #1
   d497e:	461a      	mov	r2, r3
   d4980:	a90c      	add	r1, sp, #48	; 0x30
   d4982:	a808      	add	r0, sp, #32
   d4984:	f7ff fcce 	bl	d4324 <_Z7logData6StringS_bb>
   d4988:	a80c      	add	r0, sp, #48	; 0x30
   d498a:	f005 fac9 	bl	d9f20 <_ZN6StringD1Ev>
   d498e:	a808      	add	r0, sp, #32
   d4990:	f005 fac6 	bl	d9f20 <_ZN6StringD1Ev>
			logData("Battery VCell", VCellString, true, true);
   d4994:	495b      	ldr	r1, [pc, #364]	; (d4b04 <loop+0x57c>)
   d4996:	a808      	add	r0, sp, #32
   d4998:	f005 fb0d 	bl	d9fb6 <_ZN6StringC1EPKc>
   d499c:	4954      	ldr	r1, [pc, #336]	; (d4af0 <loop+0x568>)
   d499e:	a80c      	add	r0, sp, #48	; 0x30
   d49a0:	f005 fb54 	bl	da04c <_ZN6StringC1ERKS_>
   d49a4:	2301      	movs	r3, #1
   d49a6:	461a      	mov	r2, r3
   d49a8:	a90c      	add	r1, sp, #48	; 0x30
   d49aa:	a808      	add	r0, sp, #32
   d49ac:	f7ff fcba 	bl	d4324 <_Z7logData6StringS_bb>
   d49b0:	a80c      	add	r0, sp, #48	; 0x30
   d49b2:	f005 fab5 	bl	d9f20 <_ZN6StringD1Ev>
   d49b6:	a808      	add	r0, sp, #32
   d49b8:	f005 fab2 	bl	d9f20 <_ZN6StringD1Ev>
			logData("Battery SoC", SoCString, true, true);
   d49bc:	4952      	ldr	r1, [pc, #328]	; (d4b08 <loop+0x580>)
   d49be:	a808      	add	r0, sp, #32
   d49c0:	f005 faf9 	bl	d9fb6 <_ZN6StringC1EPKc>
   d49c4:	494b      	ldr	r1, [pc, #300]	; (d4af4 <loop+0x56c>)
   d49c6:	a80c      	add	r0, sp, #48	; 0x30
   d49c8:	f005 fb40 	bl	da04c <_ZN6StringC1ERKS_>
   d49cc:	2301      	movs	r3, #1
   d49ce:	461a      	mov	r2, r3
   d49d0:	a90c      	add	r1, sp, #48	; 0x30
   d49d2:	a808      	add	r0, sp, #32
   d49d4:	f7ff fca6 	bl	d4324 <_Z7logData6StringS_bb>
   d49d8:	a80c      	add	r0, sp, #48	; 0x30
   d49da:	f005 faa1 	bl	d9f20 <_ZN6StringD1Ev>
   d49de:	a808      	add	r0, sp, #32
   d49e0:	f005 fa9e 	bl	d9f20 <_ZN6StringD1Ev>
			ubidots.add("Flood_Dog-Cap-Value", analogValue);
   d49e4:	4b49      	ldr	r3, [pc, #292]	; (d4b0c <loop+0x584>)
   d49e6:	494a      	ldr	r1, [pc, #296]	; (d4b10 <loop+0x588>)
   d49e8:	ed93 0a00 	vldr	s0, [r3]
   d49ec:	4849      	ldr	r0, [pc, #292]	; (d4b14 <loop+0x58c>)
   d49ee:	f002 fd46 	bl	d747e <_ZN7Ubidots3addEPcf>
			ubidots.add("Flood_Dog-Temp-Value", temperatureC);
   d49f2:	4b49      	ldr	r3, [pc, #292]	; (d4b18 <loop+0x590>)
   d49f4:	4949      	ldr	r1, [pc, #292]	; (d4b1c <loop+0x594>)
   d49f6:	ed93 0a00 	vldr	s0, [r3]
   d49fa:	4846      	ldr	r0, [pc, #280]	; (d4b14 <loop+0x58c>)
   d49fc:	f002 fd3f 	bl	d747e <_ZN7Ubidots3addEPcf>
			ubidots.add("Flood_Dog-Batt-Value", fuel.getVCell());
   d4a00:	483a      	ldr	r0, [pc, #232]	; (d4aec <loop+0x564>)
   d4a02:	f003 fcef 	bl	d83e4 <_ZN9FuelGauge8getVCellEv>
   d4a06:	4946      	ldr	r1, [pc, #280]	; (d4b20 <loop+0x598>)
   d4a08:	4842      	ldr	r0, [pc, #264]	; (d4b14 <loop+0x58c>)
   d4a0a:	f002 fd38 	bl	d747e <_ZN7Ubidots3addEPcf>
			bufferSent = ubidots.send(WEBHOOK_NAME, PUBLIC); // Will use particle webhooks to send data
   d4a0e:	4b45      	ldr	r3, [pc, #276]	; (d4b24 <loop+0x59c>)
   d4a10:	4840      	ldr	r0, [pc, #256]	; (d4b14 <loop+0x58c>)
   d4a12:	781a      	ldrb	r2, [r3, #0]
   d4a14:	4b44      	ldr	r3, [pc, #272]	; (d4b28 <loop+0x5a0>)
   d4a16:	6819      	ldr	r1, [r3, #0]
   d4a18:	f002 fd3a 	bl	d7490 <_ZN7Ubidots4sendEPKcN8particle5FlagsI15PublishFlagTypehEE>
   d4a1c:	4b43      	ldr	r3, [pc, #268]	; (d4b2c <loop+0x5a4>)
   d4a1e:	7018      	strb	r0, [r3, #0]
			if(bufferSent){
   d4a20:	b198      	cbz	r0, d4a4a <loop+0x4c2>
				logData("Buffer Sent", "YES", true, true);
   d4a22:	4943      	ldr	r1, [pc, #268]	; (d4b30 <loop+0x5a8>)
   d4a24:	a808      	add	r0, sp, #32
   d4a26:	f005 fac6 	bl	d9fb6 <_ZN6StringC1EPKc>
   d4a2a:	4942      	ldr	r1, [pc, #264]	; (d4b34 <loop+0x5ac>)
   d4a2c:	a80c      	add	r0, sp, #48	; 0x30
   d4a2e:	f005 fac2 	bl	d9fb6 <_ZN6StringC1EPKc>
   d4a32:	2301      	movs	r3, #1
   d4a34:	461a      	mov	r2, r3
   d4a36:	a90c      	add	r1, sp, #48	; 0x30
   d4a38:	a808      	add	r0, sp, #32
   d4a3a:	f7ff fc73 	bl	d4324 <_Z7logData6StringS_bb>
   d4a3e:	a80c      	add	r0, sp, #48	; 0x30
   d4a40:	f005 fa6e 	bl	d9f20 <_ZN6StringD1Ev>
   d4a44:	a808      	add	r0, sp, #32
   d4a46:	f005 fa6b 	bl	d9f20 <_ZN6StringD1Ev>
			logData("PUBLISH_STATE", "START SLEEP_WAIT_STATE", true, false);
   d4a4a:	493b      	ldr	r1, [pc, #236]	; (d4b38 <loop+0x5b0>)
   d4a4c:	a808      	add	r0, sp, #32
   d4a4e:	f005 fab2 	bl	d9fb6 <_ZN6StringC1EPKc>
   d4a52:	493a      	ldr	r1, [pc, #232]	; (d4b3c <loop+0x5b4>)
   d4a54:	a80c      	add	r0, sp, #48	; 0x30
   d4a56:	f005 faae 	bl	d9fb6 <_ZN6StringC1EPKc>
   d4a5a:	2300      	movs	r3, #0
   d4a5c:	2201      	movs	r2, #1
   d4a5e:	a90c      	add	r1, sp, #48	; 0x30
   d4a60:	a808      	add	r0, sp, #32
   d4a62:	f7ff fc5f 	bl	d4324 <_Z7logData6StringS_bb>
   d4a66:	a80c      	add	r0, sp, #48	; 0x30
   d4a68:	f005 fa5a 	bl	d9f20 <_ZN6StringD1Ev>
   d4a6c:	a808      	add	r0, sp, #32
   d4a6e:	f005 fa57 	bl	d9f20 <_ZN6StringD1Ev>
			digitalWrite(BUILT_IN_LED, LOW);
   d4a72:	2100      	movs	r1, #0
   d4a74:	2007      	movs	r0, #7
   d4a76:	f006 fdee 	bl	db656 <digitalWrite>
   d4a7a:	f002 fd3d 	bl	d74f8 <HAL_Timer_Get_Milli_Seconds>
			stateTime = millis();
   d4a7e:	4b30      	ldr	r3, [pc, #192]	; (d4b40 <loop+0x5b8>)
   d4a80:	6018      	str	r0, [r3, #0]
   d4a82:	e60b      	b.n	d469c <loop+0x114>
            return -1.0f;
   d4a84:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
   d4a88:	e721      	b.n	d48ce <loop+0x346>
			if(millis() - stateTime >= MAX_TIME_TO_WAIT_BEFORE_SLEEP_MS){
   d4a8a:	4d2d      	ldr	r5, [pc, #180]	; (d4b40 <loop+0x5b8>)
   d4a8c:	f002 fd34 	bl	d74f8 <HAL_Timer_Get_Milli_Seconds>
   d4a90:	682b      	ldr	r3, [r5, #0]
   d4a92:	1ac0      	subs	r0, r0, r3
   d4a94:	4b2b      	ldr	r3, [pc, #172]	; (d4b44 <loop+0x5bc>)
   d4a96:	4298      	cmp	r0, r3
   d4a98:	f67f ae2c 	bls.w	d46f4 <loop+0x16c>
				logData("SLEEP", "GOING TO SLEEP", true, false);
   d4a9c:	492a      	ldr	r1, [pc, #168]	; (d4b48 <loop+0x5c0>)
   d4a9e:	a808      	add	r0, sp, #32
   d4aa0:	f005 fa89 	bl	d9fb6 <_ZN6StringC1EPKc>
   d4aa4:	4929      	ldr	r1, [pc, #164]	; (d4b4c <loop+0x5c4>)
   d4aa6:	a80c      	add	r0, sp, #48	; 0x30
   d4aa8:	f005 fa85 	bl	d9fb6 <_ZN6StringC1EPKc>
   d4aac:	2300      	movs	r3, #0
   d4aae:	2201      	movs	r2, #1
   d4ab0:	a90c      	add	r1, sp, #48	; 0x30
   d4ab2:	a808      	add	r0, sp, #32
   d4ab4:	f7ff fc36 	bl	d4324 <_Z7logData6StringS_bb>
   d4ab8:	a80c      	add	r0, sp, #48	; 0x30
   d4aba:	f005 fa31 	bl	d9f20 <_ZN6StringD1Ev>
   d4abe:	a808      	add	r0, sp, #32
   d4ac0:	f005 fa2e 	bl	d9f20 <_ZN6StringD1Ev>
   d4ac4:	f002 fd18 	bl	d74f8 <HAL_Timer_Get_Milli_Seconds>
				state = SLEEP_STATE;
   d4ac8:	2308      	movs	r3, #8
				stateTime = millis();
   d4aca:	6028      	str	r0, [r5, #0]
				state = SLEEP_STATE;
   d4acc:	e611      	b.n	d46f2 <loop+0x16a>
   d4ace:	bf00      	nop
   d4ad0:	2003e208 	.word	0x2003e208
   d4ad4:	2003e0ec 	.word	0x2003e0ec
   d4ad8:	000defe0 	.word	0x000defe0
   d4adc:	2003e1f8 	.word	0x2003e1f8
   d4ae0:	000deff8 	.word	0x000deff8
   d4ae4:	2003e1e8 	.word	0x2003e1e8
   d4ae8:	2003e0dc 	.word	0x2003e0dc
   d4aec:	2003e178 	.word	0x2003e178
   d4af0:	2003e0b0 	.word	0x2003e0b0
   d4af4:	2003e0a0 	.word	0x2003e0a0
   d4af8:	000dea98 	.word	0x000dea98
   d4afc:	000deaa6 	.word	0x000deaa6
   d4b00:	000deab4 	.word	0x000deab4
   d4b04:	000deac3 	.word	0x000deac3
   d4b08:	000dead1 	.word	0x000dead1
   d4b0c:	2003e0c8 	.word	0x2003e0c8
   d4b10:	000deadd 	.word	0x000deadd
   d4b14:	2003e264 	.word	0x2003e264
   d4b18:	2003e23c 	.word	0x2003e23c
   d4b1c:	000deaf1 	.word	0x000deaf1
   d4b20:	000deb06 	.word	0x000deb06
   d4b24:	2003e0c0 	.word	0x2003e0c0
   d4b28:	2003dea8 	.word	0x2003dea8
   d4b2c:	2003e0f0 	.word	0x2003e0f0
   d4b30:	000deb1b 	.word	0x000deb1b
   d4b34:	000deb27 	.word	0x000deb27
   d4b38:	000dea8a 	.word	0x000dea8a
   d4b3c:	000deb2b 	.word	0x000deb2b
   d4b40:	2003e238 	.word	0x2003e238
   d4b44:	0001d4bf 	.word	0x0001d4bf
   d4b48:	000debef 	.word	0x000debef
   d4b4c:	000deb42 	.word	0x000deb42
			if(!debug){
   d4b50:	4b95      	ldr	r3, [pc, #596]	; (d4da8 <loop+0x820>)
   d4b52:	781d      	ldrb	r5, [r3, #0]
   d4b54:	2d00      	cmp	r5, #0
   d4b56:	f040 8101 	bne.w	d4d5c <loop+0x7d4>
				logData("SLEEP", "SLEEP STOP SLEEP", true, false);
   d4b5a:	4994      	ldr	r1, [pc, #592]	; (d4dac <loop+0x824>)
				pirState = 0;
   d4b5c:	f8df 8274 	ldr.w	r8, [pc, #628]	; d4dd4 <loop+0x84c>
				rtcState = 0;
   d4b60:	4f93      	ldr	r7, [pc, #588]	; (d4db0 <loop+0x828>)
				logData("SLEEP", "SLEEP STOP SLEEP", true, false);
   d4b62:	a808      	add	r0, sp, #32
   d4b64:	f005 fa27 	bl	d9fb6 <_ZN6StringC1EPKc>
   d4b68:	4992      	ldr	r1, [pc, #584]	; (d4db4 <loop+0x82c>)
   d4b6a:	a80c      	add	r0, sp, #48	; 0x30
   d4b6c:	f005 fa23 	bl	d9fb6 <_ZN6StringC1EPKc>
   d4b70:	462b      	mov	r3, r5
   d4b72:	2201      	movs	r2, #1
   d4b74:	a90c      	add	r1, sp, #48	; 0x30
   d4b76:	a808      	add	r0, sp, #32
   d4b78:	f7ff fbd4 	bl	d4324 <_Z7logData6StringS_bb>
   d4b7c:	a80c      	add	r0, sp, #48	; 0x30
   d4b7e:	f005 f9cf 	bl	d9f20 <_ZN6StringD1Ev>
   d4b82:	a808      	add	r0, sp, #32
   d4b84:	f005 f9cc 	bl	d9f20 <_ZN6StringD1Ev>
				fram.put(FRAM::pirAddr, pirState);
   d4b88:	4642      	mov	r2, r8
   d4b8a:	2111      	movs	r1, #17
   d4b8c:	488a      	ldr	r0, [pc, #552]	; (d4db8 <loop+0x830>)
				pirState = 0;
   d4b8e:	f888 5000 	strb.w	r5, [r8]
				fram.put(FRAM::pirAddr, pirState);
   d4b92:	f7ff fc6a 	bl	d446a <_ZN6MB85RC3putIhEERKT_jS3_>
				fram.put(FRAM::rtcAddr, rtcState);
   d4b96:	463a      	mov	r2, r7
   d4b98:	2109      	movs	r1, #9
   d4b9a:	4887      	ldr	r0, [pc, #540]	; (d4db8 <loop+0x830>)
				rtcState = 0;
   d4b9c:	703d      	strb	r5, [r7, #0]
				fram.put(FRAM::rtcAddr, rtcState);
   d4b9e:	f7ff fc64 	bl	d446a <_ZN6MB85RC3putIhEERKT_jS3_>
				watchdogState = 0;
   d4ba2:	4a86      	ldr	r2, [pc, #536]	; (d4dbc <loop+0x834>)
				fram.put(FRAM::watchdogAddr, watchdogState);
   d4ba4:	4884      	ldr	r0, [pc, #528]	; (d4db8 <loop+0x830>)
				watchdogState = 0;
   d4ba6:	7015      	strb	r5, [r2, #0]
				fram.put(FRAM::watchdogAddr, watchdogState);
   d4ba8:	2110      	movs	r1, #16
   d4baa:	f7ff fc5e 	bl	d446a <_ZN6MB85RC3putIhEERKT_jS3_>
        : config_(config) {
   d4bae:	ab0d      	add	r3, sp, #52	; 0x34
              valid_(true) {
   d4bb0:	2201      	movs	r2, #1
        : config_(config) {
   d4bb2:	930c      	str	r3, [sp, #48]	; 0x30
					.gpio(PIRPin, RISING)
   d4bb4:	2113      	movs	r1, #19
        config_.size = sizeof(hal_sleep_config_t);
   d4bb6:	4b82      	ldr	r3, [pc, #520]	; (d4dc0 <loop+0x838>)
   d4bb8:	930d      	str	r3, [sp, #52]	; 0x34
   d4bba:	a80c      	add	r0, sp, #48	; 0x30
        config_.wakeup_sources = nullptr;
   d4bbc:	e9cd 550f 	strd	r5, r5, [sp, #60]	; 0x3c
              valid_(true) {
   d4bc0:	f8ad 5039 	strh.w	r5, [sp, #57]	; 0x39
   d4bc4:	f88d 503b 	strb.w	r5, [sp, #59]	; 0x3b
   d4bc8:	f88d 2044 	strb.w	r2, [sp, #68]	; 0x44
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
   d4bcc:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
   d4bd0:	f7ff fab8 	bl	d4144 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode>

    SystemSleepConfiguration& duration(system_tick_t ms) {
        if (valid_) {
   d4bd4:	7d03      	ldrb	r3, [r0, #20]
   d4bd6:	4606      	mov	r6, r0
   d4bd8:	b1eb      	cbz	r3, d4c16 <loop+0x68e>
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   d4bda:	6803      	ldr	r3, [r0, #0]
   d4bdc:	68db      	ldr	r3, [r3, #12]
        if (!start) {
   d4bde:	b12b      	cbz	r3, d4bec <loop+0x664>
            if (start->type == type) {
   d4be0:	889a      	ldrh	r2, [r3, #4]
   d4be2:	2a04      	cmp	r2, #4
   d4be4:	f000 80dd 	beq.w	d4da2 <loop+0x81a>
            start = start->next;
   d4be8:	689b      	ldr	r3, [r3, #8]
        while (start) {
   d4bea:	e7f8      	b.n	d4bde <loop+0x656>
            if (wakeup) {
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
                return *this;
            }
            // Otherwise, configure RTC as wakeup source.
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
   d4bec:	4975      	ldr	r1, [pc, #468]	; (d4dc4 <loop+0x83c>)
   d4bee:	2010      	movs	r0, #16
   d4bf0:	f006 fdde 	bl	db7b0 <_ZnwjRKSt9nothrow_t>
   d4bf4:	4605      	mov	r5, r0
   d4bf6:	2800      	cmp	r0, #0
   d4bf8:	f000 80d1 	beq.w	d4d9e <loop+0x816>
   d4bfc:	2210      	movs	r2, #16
   d4bfe:	2100      	movs	r1, #0
   d4c00:	f007 fea0 	bl	dc944 <memset>
            if (!wakeupSource) {
                valid_ = false;
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_rtc_t);
   d4c04:	4b6e      	ldr	r3, [pc, #440]	; (d4dc0 <loop+0x838>)
   d4c06:	602b      	str	r3, [r5, #0]
            wakeupSource->base.version = HAL_SLEEP_VERSION;
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_RTC;
   d4c08:	2304      	movs	r3, #4
   d4c0a:	80ab      	strh	r3, [r5, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   d4c0c:	6933      	ldr	r3, [r6, #16]
   d4c0e:	60ab      	str	r3, [r5, #8]
            wakeupSource->ms = ms;
   d4c10:	4b6d      	ldr	r3, [pc, #436]	; (d4dc8 <loop+0x840>)
   d4c12:	60eb      	str	r3, [r5, #12]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   d4c14:	6135      	str	r5, [r6, #16]
				SystemSleepResult result = System.sleep(config);
   d4c16:	a90c      	add	r1, sp, #48	; 0x30
   d4c18:	a801      	add	r0, sp, #4
   d4c1a:	f005 fac3 	bl	da1a4 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>
				digitalWrite(PIRPin, LOW);												// Pet the watchdog
   d4c1e:	2100      	movs	r1, #0
   d4c20:	2013      	movs	r0, #19
   d4c22:	f006 fd18 	bl	db656 <digitalWrite>
				if(result.wakeupReason() == SystemSleepWakeupReason::BY_GPIO){
   d4c26:	9b01      	ldr	r3, [sp, #4]
        if (wakeupSource_) {
   d4c28:	b323      	cbz	r3, d4c74 <loop+0x6ec>
   d4c2a:	889d      	ldrh	r5, [r3, #4]
   d4c2c:	2d01      	cmp	r5, #1
   d4c2e:	d121      	bne.n	d4c74 <loop+0x6ec>
					if(whichPin == A0){
   d4c30:	899b      	ldrh	r3, [r3, #12]
						logData("SLEEP RESULT", "Woke By BY_GPIO PIR", true, false);
   d4c32:	4966      	ldr	r1, [pc, #408]	; (d4dcc <loop+0x844>)
					if(whichPin == A0){
   d4c34:	2b13      	cmp	r3, #19
						logData("SLEEP RESULT", "Woke By BY_GPIO PIR", true, false);
   d4c36:	a804      	add	r0, sp, #16
					if(whichPin == A0){
   d4c38:	d17a      	bne.n	d4d30 <loop+0x7a8>
						logData("SLEEP RESULT", "Woke By BY_GPIO PIR", true, false);
   d4c3a:	f005 f9bc 	bl	d9fb6 <_ZN6StringC1EPKc>
   d4c3e:	4964      	ldr	r1, [pc, #400]	; (d4dd0 <loop+0x848>)
   d4c40:	a808      	add	r0, sp, #32
   d4c42:	f005 f9b8 	bl	d9fb6 <_ZN6StringC1EPKc>
   d4c46:	462a      	mov	r2, r5
   d4c48:	2300      	movs	r3, #0
   d4c4a:	a908      	add	r1, sp, #32
   d4c4c:	a804      	add	r0, sp, #16
   d4c4e:	f7ff fb69 	bl	d4324 <_Z7logData6StringS_bb>
   d4c52:	a808      	add	r0, sp, #32
   d4c54:	f005 f964 	bl	d9f20 <_ZN6StringD1Ev>
   d4c58:	a804      	add	r0, sp, #16
   d4c5a:	f005 f961 	bl	d9f20 <_ZN6StringD1Ev>
						digitalWrite(BUILT_IN_LED, HIGH);
   d4c5e:	4629      	mov	r1, r5
   d4c60:	2007      	movs	r0, #7
   d4c62:	f006 fcf8 	bl	db656 <digitalWrite>
						fram.put(FRAM::pirAddr, pirState);
   d4c66:	4a5b      	ldr	r2, [pc, #364]	; (d4dd4 <loop+0x84c>)
						pirState = 1;
   d4c68:	f888 5000 	strb.w	r5, [r8]
						fram.put(FRAM::pirAddr, pirState);
   d4c6c:	2111      	movs	r1, #17
						fram.put(FRAM::rtcAddr, rtcState);
   d4c6e:	4852      	ldr	r0, [pc, #328]	; (d4db8 <loop+0x830>)
   d4c70:	f7ff fbfb 	bl	d446a <_ZN6MB85RC3putIhEERKT_jS3_>
				if(result.wakeupReason() == SystemSleepWakeupReason::BY_RTC){
   d4c74:	9b01      	ldr	r3, [sp, #4]
   d4c76:	b1b3      	cbz	r3, d4ca6 <loop+0x71e>
   d4c78:	889b      	ldrh	r3, [r3, #4]
   d4c7a:	2b04      	cmp	r3, #4
   d4c7c:	d113      	bne.n	d4ca6 <loop+0x71e>
					logData("SLEEP RESULT", "SLEEP RESULT - Woke BY_RTC", true, false);
   d4c7e:	4953      	ldr	r1, [pc, #332]	; (d4dcc <loop+0x844>)
   d4c80:	a804      	add	r0, sp, #16
   d4c82:	f005 f998 	bl	d9fb6 <_ZN6StringC1EPKc>
   d4c86:	4954      	ldr	r1, [pc, #336]	; (d4dd8 <loop+0x850>)
   d4c88:	a808      	add	r0, sp, #32
   d4c8a:	f005 f994 	bl	d9fb6 <_ZN6StringC1EPKc>
   d4c8e:	2300      	movs	r3, #0
   d4c90:	2201      	movs	r2, #1
   d4c92:	a908      	add	r1, sp, #32
   d4c94:	a804      	add	r0, sp, #16
   d4c96:	f7ff fb45 	bl	d4324 <_Z7logData6StringS_bb>
   d4c9a:	a808      	add	r0, sp, #32
   d4c9c:	f005 f940 	bl	d9f20 <_ZN6StringD1Ev>
   d4ca0:	a804      	add	r0, sp, #16
   d4ca2:	f005 f93d 	bl	d9f20 <_ZN6StringD1Ev>
				if(result.wakeupReason() == SystemSleepWakeupReason::BY_NETWORK){
   d4ca6:	9b01      	ldr	r3, [sp, #4]
   d4ca8:	b1b3      	cbz	r3, d4cd8 <loop+0x750>
   d4caa:	889b      	ldrh	r3, [r3, #4]
   d4cac:	2b0e      	cmp	r3, #14
   d4cae:	d113      	bne.n	d4cd8 <loop+0x750>
					logData("SLEEP RESULT", "SLEEP RESULT - Woke BY_NETWORK", true, false);
   d4cb0:	4946      	ldr	r1, [pc, #280]	; (d4dcc <loop+0x844>)
   d4cb2:	a804      	add	r0, sp, #16
   d4cb4:	f005 f97f 	bl	d9fb6 <_ZN6StringC1EPKc>
   d4cb8:	4948      	ldr	r1, [pc, #288]	; (d4ddc <loop+0x854>)
   d4cba:	a808      	add	r0, sp, #32
   d4cbc:	f005 f97b 	bl	d9fb6 <_ZN6StringC1EPKc>
   d4cc0:	2300      	movs	r3, #0
   d4cc2:	2201      	movs	r2, #1
   d4cc4:	a908      	add	r1, sp, #32
   d4cc6:	a804      	add	r0, sp, #16
   d4cc8:	f7ff fb2c 	bl	d4324 <_Z7logData6StringS_bb>
   d4ccc:	a808      	add	r0, sp, #32
   d4cce:	f005 f927 	bl	d9f20 <_ZN6StringD1Ev>
   d4cd2:	a804      	add	r0, sp, #16
   d4cd4:	f005 f924 	bl	d9f20 <_ZN6StringD1Ev>
				if(result.wakeupReason() == SystemSleepWakeupReason::UNKNOWN) {
   d4cd8:	9b01      	ldr	r3, [sp, #4]
   d4cda:	b10b      	cbz	r3, d4ce0 <loop+0x758>
   d4cdc:	889b      	ldrh	r3, [r3, #4]
   d4cde:	b99b      	cbnz	r3, d4d08 <loop+0x780>
					logData("SLEEP RESULT", "SLEEP RESULT - Woke By UNKNOWN", true, false);
   d4ce0:	493a      	ldr	r1, [pc, #232]	; (d4dcc <loop+0x844>)
   d4ce2:	a804      	add	r0, sp, #16
   d4ce4:	f005 f967 	bl	d9fb6 <_ZN6StringC1EPKc>
   d4ce8:	493d      	ldr	r1, [pc, #244]	; (d4de0 <loop+0x858>)
   d4cea:	a808      	add	r0, sp, #32
   d4cec:	f005 f963 	bl	d9fb6 <_ZN6StringC1EPKc>
   d4cf0:	2300      	movs	r3, #0
   d4cf2:	2201      	movs	r2, #1
   d4cf4:	a908      	add	r1, sp, #32
   d4cf6:	a804      	add	r0, sp, #16
   d4cf8:	f7ff fb14 	bl	d4324 <_Z7logData6StringS_bb>
   d4cfc:	a808      	add	r0, sp, #32
   d4cfe:	f005 f90f 	bl	d9f20 <_ZN6StringD1Ev>
   d4d02:	a804      	add	r0, sp, #16
   d4d04:	f005 f90c 	bl	d9f20 <_ZN6StringD1Ev>
   d4d08:	f002 fbf6 	bl	d74f8 <HAL_Timer_Get_Milli_Seconds>
				stateTime = millis();
   d4d0c:	4b35      	ldr	r3, [pc, #212]	; (d4de4 <loop+0x85c>)
   d4d0e:	6018      	str	r0, [r3, #0]
        if (wakeupSource_) {
   d4d10:	9801      	ldr	r0, [sp, #4]
				state = PARTICLE_CONNECT_WAIT_STATE;
   d4d12:	2302      	movs	r3, #2
   d4d14:	7023      	strb	r3, [r4, #0]
   d4d16:	b108      	cbz	r0, d4d1c <loop+0x794>
            free(wakeupSource_);
   d4d18:	f002 ff18 	bl	d7b4c <free>
        auto wakeupSource = config_.wakeup_sources;
   d4d1c:	9810      	ldr	r0, [sp, #64]	; 0x40
        while (wakeupSource) {
   d4d1e:	2800      	cmp	r0, #0
   d4d20:	f43f ace8 	beq.w	d46f4 <loop+0x16c>
            auto next = wakeupSource->next;
   d4d24:	6884      	ldr	r4, [r0, #8]
            delete wakeupSource;
   d4d26:	210c      	movs	r1, #12
   d4d28:	f006 fd40 	bl	db7ac <_ZdlPvj>
            wakeupSource = next;
   d4d2c:	4620      	mov	r0, r4
        while (wakeupSource) {
   d4d2e:	e7f6      	b.n	d4d1e <loop+0x796>
						logData("SLEEP RESULT", "Woke By BY_GPIO RTC", true, false);
   d4d30:	f005 f941 	bl	d9fb6 <_ZN6StringC1EPKc>
   d4d34:	492c      	ldr	r1, [pc, #176]	; (d4de8 <loop+0x860>)
   d4d36:	a808      	add	r0, sp, #32
   d4d38:	f005 f93d 	bl	d9fb6 <_ZN6StringC1EPKc>
   d4d3c:	462a      	mov	r2, r5
   d4d3e:	a908      	add	r1, sp, #32
   d4d40:	2300      	movs	r3, #0
   d4d42:	a804      	add	r0, sp, #16
   d4d44:	f7ff faee 	bl	d4324 <_Z7logData6StringS_bb>
   d4d48:	a808      	add	r0, sp, #32
   d4d4a:	f005 f8e9 	bl	d9f20 <_ZN6StringD1Ev>
   d4d4e:	a804      	add	r0, sp, #16
   d4d50:	f005 f8e6 	bl	d9f20 <_ZN6StringD1Ev>
						fram.put(FRAM::rtcAddr, rtcState);
   d4d54:	4a16      	ldr	r2, [pc, #88]	; (d4db0 <loop+0x828>)
						rtcState = 1;
   d4d56:	703d      	strb	r5, [r7, #0]
						fram.put(FRAM::rtcAddr, rtcState);
   d4d58:	2109      	movs	r1, #9
   d4d5a:	e788      	b.n	d4c6e <loop+0x6e6>
				if(millis() - stateTime >= MAX_TIME_TO_SLEEP_MS){
   d4d5c:	4d21      	ldr	r5, [pc, #132]	; (d4de4 <loop+0x85c>)
   d4d5e:	f002 fbcb 	bl	d74f8 <HAL_Timer_Get_Milli_Seconds>
   d4d62:	682b      	ldr	r3, [r5, #0]
   d4d64:	1ac0      	subs	r0, r0, r3
   d4d66:	4b21      	ldr	r3, [pc, #132]	; (d4dec <loop+0x864>)
   d4d68:	4298      	cmp	r0, r3
   d4d6a:	f67f acc3 	bls.w	d46f4 <loop+0x16c>
					logData("SLEEP", "SLEEP TIMED SLEEP", true, false);
   d4d6e:	490f      	ldr	r1, [pc, #60]	; (d4dac <loop+0x824>)
   d4d70:	a808      	add	r0, sp, #32
   d4d72:	f005 f920 	bl	d9fb6 <_ZN6StringC1EPKc>
   d4d76:	491e      	ldr	r1, [pc, #120]	; (d4df0 <loop+0x868>)
   d4d78:	a80c      	add	r0, sp, #48	; 0x30
   d4d7a:	f005 f91c 	bl	d9fb6 <_ZN6StringC1EPKc>
   d4d7e:	2300      	movs	r3, #0
   d4d80:	2201      	movs	r2, #1
   d4d82:	a90c      	add	r1, sp, #48	; 0x30
   d4d84:	a808      	add	r0, sp, #32
   d4d86:	f7ff facd 	bl	d4324 <_Z7logData6StringS_bb>
   d4d8a:	a80c      	add	r0, sp, #48	; 0x30
   d4d8c:	f005 f8c8 	bl	d9f20 <_ZN6StringD1Ev>
   d4d90:	a808      	add	r0, sp, #32
   d4d92:	f005 f8c5 	bl	d9f20 <_ZN6StringD1Ev>
   d4d96:	f002 fbaf 	bl	d74f8 <HAL_Timer_Get_Milli_Seconds>
					stateTime = millis();
   d4d9a:	6028      	str	r0, [r5, #0]
   d4d9c:	e43d      	b.n	d461a <loop+0x92>
                valid_ = false;
   d4d9e:	7530      	strb	r0, [r6, #20]
                return *this;
   d4da0:	e739      	b.n	d4c16 <loop+0x68e>
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
   d4da2:	4a09      	ldr	r2, [pc, #36]	; (d4dc8 <loop+0x840>)
   d4da4:	60da      	str	r2, [r3, #12]
                return *this;
   d4da6:	e736      	b.n	d4c16 <loop+0x68e>
   d4da8:	2003e114 	.word	0x2003e114
   d4dac:	000debef 	.word	0x000debef
   d4db0:	2003e228 	.word	0x2003e228
   d4db4:	000deb51 	.word	0x000deb51
   d4db8:	2003e168 	.word	0x2003e168
   d4dbc:	2003e270 	.word	0x2003e270
   d4dc0:	00030010 	.word	0x00030010
   d4dc4:	000df988 	.word	0x000df988
   d4dc8:	000dbba0 	.word	0x000dbba0
   d4dcc:	000de9ed 	.word	0x000de9ed
   d4dd0:	000deb62 	.word	0x000deb62
   d4dd4:	2003e1e4 	.word	0x2003e1e4
   d4dd8:	000deb8a 	.word	0x000deb8a
   d4ddc:	000deba5 	.word	0x000deba5
   d4de0:	000debc4 	.word	0x000debc4
   d4de4:	2003e238 	.word	0x2003e238
   d4de8:	000deb76 	.word	0x000deb76
   d4dec:	000dbb9f 	.word	0x000dbb9f
   d4df0:	000debe3 	.word	0x000debe3

000d4df4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   d4df4:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d4df6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4df8:	4604      	mov	r4, r0
   d4dfa:	460d      	mov	r5, r1
   d4dfc:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   d4dfe:	d916      	bls.n	d4e2e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
   d4e00:	4290      	cmp	r0, r2
   d4e02:	d215      	bcs.n	d4e30 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
   d4e04:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   d4e08:	1a75      	subs	r5, r6, r1
   d4e0a:	f1a1 0714 	sub.w	r7, r1, #20
   d4e0e:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   d4e10:	42b7      	cmp	r7, r6
   d4e12:	d01c      	beq.n	d4e4e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
   d4e14:	b12c      	cbz	r4, d4e22 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
   d4e16:	4631      	mov	r1, r6
   d4e18:	4620      	mov	r0, r4
   d4e1a:	f005 f8fd 	bl	da018 <_ZN6StringC1EOS_>
   d4e1e:	7c33      	ldrb	r3, [r6, #16]
   d4e20:	7423      	strb	r3, [r4, #16]
   d4e22:	4630      	mov	r0, r6
   d4e24:	f005 f87c 	bl	d9f20 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   d4e28:	3e14      	subs	r6, #20
   d4e2a:	3c14      	subs	r4, #20
   d4e2c:	e7f0      	b.n	d4e10 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   d4e2e:	d00e      	beq.n	d4e4e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
   d4e30:	42b5      	cmp	r5, r6
   d4e32:	d00c      	beq.n	d4e4e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
   d4e34:	b12c      	cbz	r4, d4e42 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
   d4e36:	4629      	mov	r1, r5
   d4e38:	4620      	mov	r0, r4
   d4e3a:	f005 f8ed 	bl	da018 <_ZN6StringC1EOS_>
   d4e3e:	7c2b      	ldrb	r3, [r5, #16]
   d4e40:	7423      	strb	r3, [r4, #16]
   d4e42:	4628      	mov	r0, r5
   d4e44:	f005 f86c 	bl	d9f20 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   d4e48:	3514      	adds	r5, #20
   d4e4a:	3414      	adds	r4, #20
   d4e4c:	e7f0      	b.n	d4e30 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
   d4e4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4e50 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d4e50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   d4e54:	2300      	movs	r3, #0
   d4e56:	e9c0 3300 	strd	r3, r3, [r0]
   d4e5a:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d4e5c:	684f      	ldr	r7, [r1, #4]
   d4e5e:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d4e60:	4604      	mov	r4, r0
   d4e62:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d4e64:	dd23      	ble.n	d4eae <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   d4e66:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
   d4e6a:	fb08 f007 	mul.w	r0, r8, r7
   d4e6e:	f002 fe65 	bl	d7b3c <malloc>
            if (!d) {
   d4e72:	4605      	mov	r5, r0
   d4e74:	b1d8      	cbz	r0, d4eae <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            move(d, data_, data_ + size_);
   d4e76:	e9d4 1200 	ldrd	r1, r2, [r4]
   d4e7a:	fb08 1202 	mla	r2, r8, r2, r1
   d4e7e:	f7ff ffb9 	bl	d4df4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   d4e82:	6820      	ldr	r0, [r4, #0]
   d4e84:	f002 fe62 	bl	d7b4c <free>
        data_ = d;
   d4e88:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   d4e8a:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   d4e8c:	e9d6 7300 	ldrd	r7, r3, [r6]
   d4e90:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
   d4e94:	45b8      	cmp	r8, r7
   d4e96:	d008      	beq.n	d4eaa <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5a>
   d4e98:	4639      	mov	r1, r7
   d4e9a:	4628      	mov	r0, r5
   d4e9c:	f005 f8d6 	bl	da04c <_ZN6StringC1ERKS_>
   d4ea0:	7c3b      	ldrb	r3, [r7, #16]
   d4ea2:	742b      	strb	r3, [r5, #16]
   d4ea4:	3714      	adds	r7, #20
   d4ea6:	3514      	adds	r5, #20
   d4ea8:	e7f4      	b.n	d4e94 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
   d4eaa:	6873      	ldr	r3, [r6, #4]
   d4eac:	6063      	str	r3, [r4, #4]
}
   d4eae:	4620      	mov	r0, r4
   d4eb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d4eb4 <_GLOBAL__sub_I___appProductID>:
		digitalWrite(ANTSW1, 0);
	#else
		digitalWrite(ANTSW1, 0);
		digitalWrite(ANTSW2, 1);
	#endif
   d4eb4:	b5f0      	push	{r4, r5, r6, r7, lr}
        val_(val) {
   d4eb6:	4bab      	ldr	r3, [pc, #684]	; (d5164 <_GLOBAL__sub_I___appProductID+0x2b0>)
   d4eb8:	2500      	movs	r5, #0
   d4eba:	701d      	strb	r5, [r3, #0]
   d4ebc:	4baa      	ldr	r3, [pc, #680]	; (d5168 <_GLOBAL__sub_I___appProductID+0x2b4>)
   d4ebe:	2401      	movs	r4, #1
   d4ec0:	b08d      	sub	sp, #52	; 0x34
   d4ec2:	701c      	strb	r4, [r3, #0]
#include "spark_protocol_functions.h"


struct __ApplicationProductID {
    __ApplicationProductID(product_id_t id) {
        spark_protocol_set_product_id(spark_protocol_instance(), id);
   d4ec4:	f006 fb60 	bl	db588 <spark_protocol_instance>
   d4ec8:	462b      	mov	r3, r5
   d4eca:	462a      	mov	r2, r5
   d4ecc:	f643 41a6 	movw	r1, #15526	; 0x3ca6
   d4ed0:	f006 fb62 	bl	db598 <spark_protocol_set_product_id>
    }
};

struct __ApplicationProductVersion {
    __ApplicationProductVersion(product_firmware_version_t version) {
        spark_protocol_set_product_firmware_version(spark_protocol_instance(), version);
   d4ed4:	f006 fb58 	bl	db588 <spark_protocol_instance>
   d4ed8:	462a      	mov	r2, r5
   d4eda:	462b      	mov	r3, r5
   d4edc:	210b      	movs	r1, #11
   d4ede:	f006 fb63 	bl	db5a8 <spark_protocol_set_product_firmware_version>
SYSTEM_THREAD(ENABLED)
   d4ee2:	4629      	mov	r1, r5
   d4ee4:	4620      	mov	r0, r4
   d4ee6:	f002 fd31 	bl	d794c <system_thread_set_state>
        capacity_(0) {
   d4eea:	e9cd 5500 	strd	r5, r5, [sp]
   d4eee:	9502      	str	r5, [sp, #8]
            StreamLogHandler(Serial, level, filters) {
   d4ef0:	f006 fa4c 	bl	db38c <_Z16_fetch_usbserialv>
        filter_(level, filters) {
   d4ef4:	4c9d      	ldr	r4, [pc, #628]	; (d516c <_GLOBAL__sub_I___appProductID+0x2b8>)
   d4ef6:	4606      	mov	r6, r0
   d4ef8:	4669      	mov	r1, sp
   d4efa:	a803      	add	r0, sp, #12
   d4efc:	f7ff ffa8 	bl	d4e50 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d4f00:	4627      	mov	r7, r4
        stream_(&stream) {
   d4f02:	a903      	add	r1, sp, #12
   d4f04:	a806      	add	r0, sp, #24
   d4f06:	f7ff ffa3 	bl	d4e50 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   d4f0a:	4b99      	ldr	r3, [pc, #612]	; (d5170 <_GLOBAL__sub_I___appProductID+0x2bc>)
   d4f0c:	f847 3b04 	str.w	r3, [r7], #4
   d4f10:	a906      	add	r1, sp, #24
   d4f12:	a809      	add	r0, sp, #36	; 0x24
   d4f14:	f7ff ff9c 	bl	d4e50 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d4f18:	aa09      	add	r2, sp, #36	; 0x24
   d4f1a:	211e      	movs	r1, #30
   d4f1c:	4638      	mov	r0, r7
   d4f1e:	f004 fa90 	bl	d9442 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d4f22:	a809      	add	r0, sp, #36	; 0x24
   d4f24:	f7ff fa8e 	bl	d4444 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   d4f28:	a806      	add	r0, sp, #24
   d4f2a:	f7ff fa8b 	bl	d4444 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d4f2e:	4b91      	ldr	r3, [pc, #580]	; (d5174 <_GLOBAL__sub_I___appProductID+0x2c0>)
   d4f30:	6023      	str	r3, [r4, #0]
   d4f32:	6226      	str	r6, [r4, #32]
   d4f34:	a803      	add	r0, sp, #12
   d4f36:	f7ff fa85 	bl	d4444 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d4f3a:	4b8f      	ldr	r3, [pc, #572]	; (d5178 <_GLOBAL__sub_I___appProductID+0x2c4>)
   d4f3c:	6023      	str	r3, [r4, #0]
        Serial.begin();
   d4f3e:	f006 fa25 	bl	db38c <_Z16_fetch_usbserialv>
   d4f42:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d4f46:	f006 fa11 	bl	db36c <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
   d4f4a:	f003 ff1f 	bl	d8d8c <_ZN5spark10LogManager8instanceEv>
   d4f4e:	4621      	mov	r1, r4
   d4f50:	f004 fa09 	bl	d9366 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler logHandler;
   d4f54:	4668      	mov	r0, sp
   d4f56:	f7ff fa75 	bl	d4444 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
Ubidots ubidots("webhook", UBI_PARTICLE);
   d4f5a:	2203      	movs	r2, #3
   d4f5c:	4987      	ldr	r1, [pc, #540]	; (d517c <_GLOBAL__sub_I___appProductID+0x2c8>)
   d4f5e:	4888      	ldr	r0, [pc, #544]	; (d5180 <_GLOBAL__sub_I___appProductID+0x2cc>)
	 *
	 * @param addr The address 0-7 based on the setting of A0, A1 and A2.
	 *
	 * You typically create one of these objects as a global variable.
	 */
	MB85RC64(TwoWire &wire, int addr = 0) : MB85RC(wire, 8192, addr) {};
   d4f60:	4c88      	ldr	r4, [pc, #544]	; (d5184 <_GLOBAL__sub_I___appProductID+0x2d0>)
   d4f62:	f002 fa7b 	bl	d745c <_ZN7UbidotsC1EPc11IotProtocol>
MCP79410 rtc;											// Rickkas MCP79410 libarary
   d4f66:	f006 fbd9 	bl	db71c <_Z19__fetch_global_Wirev>
   d4f6a:	4601      	mov	r1, r0
   d4f6c:	4886      	ldr	r0, [pc, #536]	; (d5188 <_GLOBAL__sub_I___appProductID+0x2d4>)
   d4f6e:	f000 fbe7 	bl	d5740 <_ZN8MCP79410C1ER7TwoWire>
MB85RC64 fram(Wire, 0);
   d4f72:	f006 fbd3 	bl	db71c <_Z19__fetch_global_Wirev>
   d4f76:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   d4f7a:	4601      	mov	r1, r0
   d4f7c:	462b      	mov	r3, r5
   d4f7e:	4620      	mov	r0, r4
   d4f80:	f000 f9a0 	bl	d52c4 <_ZN6MB85RCC1ER7TwoWireji>
   d4f84:	4b81      	ldr	r3, [pc, #516]	; (d518c <_GLOBAL__sub_I___appProductID+0x2d8>)
   d4f86:	6023      	str	r3, [r4, #0]
						};
   d4f88:	4c81      	ldr	r4, [pc, #516]	; (d5190 <_GLOBAL__sub_I___appProductID+0x2dc>)
   d4f8a:	4982      	ldr	r1, [pc, #520]	; (d5194 <_GLOBAL__sub_I___appProductID+0x2e0>)
   d4f8c:	4620      	mov	r0, r4
   d4f8e:	f005 f812 	bl	d9fb6 <_ZN6StringC1EPKc>
   d4f92:	4981      	ldr	r1, [pc, #516]	; (d5198 <_GLOBAL__sub_I___appProductID+0x2e4>)
   d4f94:	f104 0010 	add.w	r0, r4, #16
   d4f98:	f005 f80d 	bl	d9fb6 <_ZN6StringC1EPKc>
   d4f9c:	497f      	ldr	r1, [pc, #508]	; (d519c <_GLOBAL__sub_I___appProductID+0x2e8>)
   d4f9e:	f104 0020 	add.w	r0, r4, #32
   d4fa2:	f005 f808 	bl	d9fb6 <_ZN6StringC1EPKc>
   d4fa6:	497e      	ldr	r1, [pc, #504]	; (d51a0 <_GLOBAL__sub_I___appProductID+0x2ec>)
   d4fa8:	f104 0030 	add.w	r0, r4, #48	; 0x30
   d4fac:	f005 f803 	bl	d9fb6 <_ZN6StringC1EPKc>
   d4fb0:	497c      	ldr	r1, [pc, #496]	; (d51a4 <_GLOBAL__sub_I___appProductID+0x2f0>)
   d4fb2:	f104 0040 	add.w	r0, r4, #64	; 0x40
   d4fb6:	f004 fffe 	bl	d9fb6 <_ZN6StringC1EPKc>
   d4fba:	497b      	ldr	r1, [pc, #492]	; (d51a8 <_GLOBAL__sub_I___appProductID+0x2f4>)
   d4fbc:	f104 0050 	add.w	r0, r4, #80	; 0x50
   d4fc0:	f004 fff9 	bl	d9fb6 <_ZN6StringC1EPKc>
   d4fc4:	4979      	ldr	r1, [pc, #484]	; (d51ac <_GLOBAL__sub_I___appProductID+0x2f8>)
   d4fc6:	f104 0060 	add.w	r0, r4, #96	; 0x60
   d4fca:	f004 fff4 	bl	d9fb6 <_ZN6StringC1EPKc>
   d4fce:	4978      	ldr	r1, [pc, #480]	; (d51b0 <_GLOBAL__sub_I___appProductID+0x2fc>)
   d4fd0:	f104 0070 	add.w	r0, r4, #112	; 0x70
   d4fd4:	f004 ffef 	bl	d9fb6 <_ZN6StringC1EPKc>
   d4fd8:	4976      	ldr	r1, [pc, #472]	; (d51b4 <_GLOBAL__sub_I___appProductID+0x300>)
   d4fda:	f104 0080 	add.w	r0, r4, #128	; 0x80
   d4fde:	f004 ffea 	bl	d9fb6 <_ZN6StringC1EPKc>
   d4fe2:	4975      	ldr	r1, [pc, #468]	; (d51b8 <_GLOBAL__sub_I___appProductID+0x304>)
   d4fe4:	f104 0090 	add.w	r0, r4, #144	; 0x90
   d4fe8:	f004 ffe5 	bl	d9fb6 <_ZN6StringC1EPKc>
   d4fec:	4973      	ldr	r1, [pc, #460]	; (d51bc <_GLOBAL__sub_I___appProductID+0x308>)
   d4fee:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
   d4ff2:	f004 ffe0 	bl	d9fb6 <_ZN6StringC1EPKc>
   d4ff6:	4972      	ldr	r1, [pc, #456]	; (d51c0 <_GLOBAL__sub_I___appProductID+0x30c>)
   d4ff8:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
   d4ffc:	f004 ffdb 	bl	d9fb6 <_ZN6StringC1EPKc>
   d5000:	4970      	ldr	r1, [pc, #448]	; (d51c4 <_GLOBAL__sub_I___appProductID+0x310>)
   d5002:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   d5006:	f004 ffd6 	bl	d9fb6 <_ZN6StringC1EPKc>
   d500a:	496f      	ldr	r1, [pc, #444]	; (d51c8 <_GLOBAL__sub_I___appProductID+0x314>)
   d500c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
   d5010:	f004 ffd1 	bl	d9fb6 <_ZN6StringC1EPKc>
   d5014:	f104 00e0 	add.w	r0, r4, #224	; 0xe0
						};
   d5018:	4c6c      	ldr	r4, [pc, #432]	; (d51cc <_GLOBAL__sub_I___appProductID+0x318>)
						};
   d501a:	496d      	ldr	r1, [pc, #436]	; (d51d0 <_GLOBAL__sub_I___appProductID+0x31c>)
   d501c:	f004 ffcb 	bl	d9fb6 <_ZN6StringC1EPKc>
						};
   d5020:	496c      	ldr	r1, [pc, #432]	; (d51d4 <_GLOBAL__sub_I___appProductID+0x320>)
   d5022:	4620      	mov	r0, r4
   d5024:	f004 ffc7 	bl	d9fb6 <_ZN6StringC1EPKc>
   d5028:	496b      	ldr	r1, [pc, #428]	; (d51d8 <_GLOBAL__sub_I___appProductID+0x324>)
   d502a:	f104 0010 	add.w	r0, r4, #16
   d502e:	f004 ffc2 	bl	d9fb6 <_ZN6StringC1EPKc>
   d5032:	496a      	ldr	r1, [pc, #424]	; (d51dc <_GLOBAL__sub_I___appProductID+0x328>)
   d5034:	f104 0020 	add.w	r0, r4, #32
   d5038:	f004 ffbd 	bl	d9fb6 <_ZN6StringC1EPKc>
   d503c:	4968      	ldr	r1, [pc, #416]	; (d51e0 <_GLOBAL__sub_I___appProductID+0x32c>)
   d503e:	f104 0030 	add.w	r0, r4, #48	; 0x30
   d5042:	f004 ffb8 	bl	d9fb6 <_ZN6StringC1EPKc>
   d5046:	4967      	ldr	r1, [pc, #412]	; (d51e4 <_GLOBAL__sub_I___appProductID+0x330>)
   d5048:	f104 0040 	add.w	r0, r4, #64	; 0x40
   d504c:	f004 ffb3 	bl	d9fb6 <_ZN6StringC1EPKc>
   d5050:	4965      	ldr	r1, [pc, #404]	; (d51e8 <_GLOBAL__sub_I___appProductID+0x334>)
   d5052:	f104 0050 	add.w	r0, r4, #80	; 0x50
   d5056:	f004 ffae 	bl	d9fb6 <_ZN6StringC1EPKc>
   d505a:	4964      	ldr	r1, [pc, #400]	; (d51ec <_GLOBAL__sub_I___appProductID+0x338>)
   d505c:	f104 0060 	add.w	r0, r4, #96	; 0x60
   d5060:	f004 ffa9 	bl	d9fb6 <_ZN6StringC1EPKc>
   d5064:	4962      	ldr	r1, [pc, #392]	; (d51f0 <_GLOBAL__sub_I___appProductID+0x33c>)
   d5066:	f104 0070 	add.w	r0, r4, #112	; 0x70
   d506a:	f004 ffa4 	bl	d9fb6 <_ZN6StringC1EPKc>
   d506e:	4961      	ldr	r1, [pc, #388]	; (d51f4 <_GLOBAL__sub_I___appProductID+0x340>)
   d5070:	f104 0080 	add.w	r0, r4, #128	; 0x80
   d5074:	f004 ff9f 	bl	d9fb6 <_ZN6StringC1EPKc>
   d5078:	495f      	ldr	r1, [pc, #380]	; (d51f8 <_GLOBAL__sub_I___appProductID+0x344>)
   d507a:	f104 0090 	add.w	r0, r4, #144	; 0x90
   d507e:	f004 ff9a 	bl	d9fb6 <_ZN6StringC1EPKc>
   d5082:	495e      	ldr	r1, [pc, #376]	; (d51fc <_GLOBAL__sub_I___appProductID+0x348>)
   d5084:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
   d5088:	f004 ff95 	bl	d9fb6 <_ZN6StringC1EPKc>
   d508c:	495c      	ldr	r1, [pc, #368]	; (d5200 <_GLOBAL__sub_I___appProductID+0x34c>)
   d508e:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
   d5092:	f004 ff90 	bl	d9fb6 <_ZN6StringC1EPKc>
   d5096:	495b      	ldr	r1, [pc, #364]	; (d5204 <_GLOBAL__sub_I___appProductID+0x350>)
   d5098:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   d509c:	f004 ff8b 	bl	d9fb6 <_ZN6StringC1EPKc>
   d50a0:	4959      	ldr	r1, [pc, #356]	; (d5208 <_GLOBAL__sub_I___appProductID+0x354>)
   d50a2:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
   d50a6:	f004 ff86 	bl	d9fb6 <_ZN6StringC1EPKc>
   d50aa:	4958      	ldr	r1, [pc, #352]	; (d520c <_GLOBAL__sub_I___appProductID+0x358>)
   d50ac:	f104 00e0 	add.w	r0, r4, #224	; 0xe0
   d50b0:	f004 ff81 	bl	d9fb6 <_ZN6StringC1EPKc>
String analogValueString = "0";
   d50b4:	4956      	ldr	r1, [pc, #344]	; (d5210 <_GLOBAL__sub_I___appProductID+0x35c>)
   d50b6:	4857      	ldr	r0, [pc, #348]	; (d5214 <_GLOBAL__sub_I___appProductID+0x360>)
String getInputVoltageLimit;
   d50b8:	4c57      	ldr	r4, [pc, #348]	; (d5218 <_GLOBAL__sub_I___appProductID+0x364>)
String analogValueString = "0";
   d50ba:	f004 ff7c 	bl	d9fb6 <_ZN6StringC1EPKc>
String digitalValueString = "0";
   d50be:	4954      	ldr	r1, [pc, #336]	; (d5210 <_GLOBAL__sub_I___appProductID+0x35c>)
   d50c0:	4856      	ldr	r0, [pc, #344]	; (d521c <_GLOBAL__sub_I___appProductID+0x368>)
   d50c2:	f004 ff78 	bl	d9fb6 <_ZN6StringC1EPKc>
String temperatureStringC = "0";
   d50c6:	4952      	ldr	r1, [pc, #328]	; (d5210 <_GLOBAL__sub_I___appProductID+0x35c>)
   d50c8:	4855      	ldr	r0, [pc, #340]	; (d5220 <_GLOBAL__sub_I___appProductID+0x36c>)
   d50ca:	f004 ff74 	bl	d9fb6 <_ZN6StringC1EPKc>
String temperatureStringF = "0";
   d50ce:	4950      	ldr	r1, [pc, #320]	; (d5210 <_GLOBAL__sub_I___appProductID+0x35c>)
   d50d0:	4854      	ldr	r0, [pc, #336]	; (d5224 <_GLOBAL__sub_I___appProductID+0x370>)
   d50d2:	f004 ff70 	bl	d9fb6 <_ZN6StringC1EPKc>
String getInputVoltageLimit;
   d50d6:	4621      	mov	r1, r4
   d50d8:	4853      	ldr	r0, [pc, #332]	; (d5228 <_GLOBAL__sub_I___appProductID+0x374>)
   d50da:	f004 ff6c 	bl	d9fb6 <_ZN6StringC1EPKc>
String getInputCurrentLimit;
   d50de:	4621      	mov	r1, r4
   d50e0:	4852      	ldr	r0, [pc, #328]	; (d522c <_GLOBAL__sub_I___appProductID+0x378>)
   d50e2:	f004 ff68 	bl	d9fb6 <_ZN6StringC1EPKc>
String getChargeCurrentValue;
   d50e6:	4621      	mov	r1, r4
   d50e8:	4851      	ldr	r0, [pc, #324]	; (d5230 <_GLOBAL__sub_I___appProductID+0x37c>)
   d50ea:	f004 ff64 	bl	d9fb6 <_ZN6StringC1EPKc>
String getChargeVoltageValue;
   d50ee:	4621      	mov	r1, r4
   d50f0:	4850      	ldr	r0, [pc, #320]	; (d5234 <_GLOBAL__sub_I___appProductID+0x380>)
   d50f2:	f004 ff60 	bl	d9fb6 <_ZN6StringC1EPKc>
String feedName;
   d50f6:	4621      	mov	r1, r4
   d50f8:	484f      	ldr	r0, [pc, #316]	; (d5238 <_GLOBAL__sub_I___appProductID+0x384>)
   d50fa:	f004 ff5c 	bl	d9fb6 <_ZN6StringC1EPKc>
String feedID;
   d50fe:	4621      	mov	r1, r4
   d5100:	484e      	ldr	r0, [pc, #312]	; (d523c <_GLOBAL__sub_I___appProductID+0x388>)
   d5102:	f004 ff58 	bl	d9fb6 <_ZN6StringC1EPKc>
String feedData;
   d5106:	4621      	mov	r1, r4
   d5108:	484d      	ldr	r0, [pc, #308]	; (d5240 <_GLOBAL__sub_I___appProductID+0x38c>)
   d510a:	f004 ff54 	bl	d9fb6 <_ZN6StringC1EPKc>
String deviceLabel;
   d510e:	4621      	mov	r1, r4
   d5110:	484c      	ldr	r0, [pc, #304]	; (d5244 <_GLOBAL__sub_I___appProductID+0x390>)
   d5112:	f004 ff50 	bl	d9fb6 <_ZN6StringC1EPKc>
String powerSString;
   d5116:	4621      	mov	r1, r4
   d5118:	484b      	ldr	r0, [pc, #300]	; (d5248 <_GLOBAL__sub_I___appProductID+0x394>)
   d511a:	f004 ff4c 	bl	d9fb6 <_ZN6StringC1EPKc>
String powerBSString;
   d511e:	4621      	mov	r1, r4
   d5120:	484a      	ldr	r0, [pc, #296]	; (d524c <_GLOBAL__sub_I___appProductID+0x398>)
   d5122:	f004 ff48 	bl	d9fb6 <_ZN6StringC1EPKc>
String batterySocString;
   d5126:	4621      	mov	r1, r4
   d5128:	4849      	ldr	r0, [pc, #292]	; (d5250 <_GLOBAL__sub_I___appProductID+0x39c>)
   d512a:	f004 ff44 	bl	d9fb6 <_ZN6StringC1EPKc>
PMIC pmic;
   d512e:	4629      	mov	r1, r5
   d5130:	4848      	ldr	r0, [pc, #288]	; (d5254 <_GLOBAL__sub_I___appProductID+0x3a0>)
   d5132:	f004 fd58 	bl	d9be6 <_ZN4PMICC1Eb>
            : conf_{} {
   d5136:	4b48      	ldr	r3, [pc, #288]	; (d5258 <_GLOBAL__sub_I___appProductID+0x3a4>)
   d5138:	2620      	movs	r6, #32
   d513a:	4632      	mov	r2, r6
   d513c:	4618      	mov	r0, r3
   d513e:	4629      	mov	r1, r5
   d5140:	f007 fc00 	bl	dc944 <memset>
FuelGauge fuel;
   d5144:	4629      	mov	r1, r5
        conf_.size = sizeof(conf_);
   d5146:	7146      	strb	r6, [r0, #5]
   d5148:	4844      	ldr	r0, [pc, #272]	; (d525c <_GLOBAL__sub_I___appProductID+0x3a8>)
   d514a:	f003 f8fd 	bl	d8348 <_ZN9FuelGaugeC1Eb>
String VCellString;
   d514e:	4621      	mov	r1, r4
   d5150:	4843      	ldr	r0, [pc, #268]	; (d5260 <_GLOBAL__sub_I___appProductID+0x3ac>)
   d5152:	f004 ff30 	bl	d9fb6 <_ZN6StringC1EPKc>
String SoCString;
   d5156:	4621      	mov	r1, r4
   d5158:	4842      	ldr	r0, [pc, #264]	; (d5264 <_GLOBAL__sub_I___appProductID+0x3b0>)
   d515a:	f004 ff2c 	bl	d9fb6 <_ZN6StringC1EPKc>
   d515e:	b00d      	add	sp, #52	; 0x34
   d5160:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5162:	bf00      	nop
   d5164:	2003e0c0 	.word	0x2003e0c0
   d5168:	2003e0c1 	.word	0x2003e0c1
   d516c:	2003e1c0 	.word	0x2003e1c0
   d5170:	000def2c 	.word	0x000def2c
   d5174:	000df750 	.word	0x000df750
   d5178:	000def44 	.word	0x000def44
   d517c:	000debf5 	.word	0x000debf5
   d5180:	2003e264 	.word	0x2003e264
   d5184:	2003e168 	.word	0x2003e168
   d5188:	2003e20c 	.word	0x2003e20c
   d518c:	000def5c 	.word	0x000def5c
   d5190:	2003e274 	.word	0x2003e274
   d5194:	000debfd 	.word	0x000debfd
   d5198:	000dec18 	.word	0x000dec18
   d519c:	000dec38 	.word	0x000dec38
   d51a0:	000dec4e 	.word	0x000dec4e
   d51a4:	000dec66 	.word	0x000dec66
   d51a8:	000dec83 	.word	0x000dec83
   d51ac:	000dec96 	.word	0x000dec96
   d51b0:	000decae 	.word	0x000decae
   d51b4:	000deccb 	.word	0x000deccb
   d51b8:	000decde 	.word	0x000decde
   d51bc:	000decf6 	.word	0x000decf6
   d51c0:	000ded13 	.word	0x000ded13
   d51c4:	000ded26 	.word	0x000ded26
   d51c8:	000ded3e 	.word	0x000ded3e
   d51cc:	2003e364 	.word	0x2003e364
   d51d0:	000ded5b 	.word	0x000ded5b
   d51d4:	000ded6e 	.word	0x000ded6e
   d51d8:	000ded8b 	.word	0x000ded8b
   d51dc:	000deda8 	.word	0x000deda8
   d51e0:	000dedc5 	.word	0x000dedc5
   d51e4:	000dede2 	.word	0x000dede2
   d51e8:	000dedff 	.word	0x000dedff
   d51ec:	000dee1c 	.word	0x000dee1c
   d51f0:	000dee39 	.word	0x000dee39
   d51f4:	000dee56 	.word	0x000dee56
   d51f8:	000dee73 	.word	0x000dee73
   d51fc:	000dee90 	.word	0x000dee90
   d5200:	000deead 	.word	0x000deead
   d5204:	000deeca 	.word	0x000deeca
   d5208:	000deee7 	.word	0x000deee7
   d520c:	000def04 	.word	0x000def04
   d5210:	000df3f8 	.word	0x000df3f8
   d5214:	2003e0cc 	.word	0x2003e0cc
   d5218:	000df323 	.word	0x000df323
   d521c:	2003e128 	.word	0x2003e128
   d5220:	2003e244 	.word	0x2003e244
   d5224:	2003e254 	.word	0x2003e254
   d5228:	2003e1b0 	.word	0x2003e1b0
   d522c:	2003e1a0 	.word	0x2003e1a0
   d5230:	2003e180 	.word	0x2003e180
   d5234:	2003e190 	.word	0x2003e190
   d5238:	2003e158 	.word	0x2003e158
   d523c:	2003e148 	.word	0x2003e148
   d5240:	2003e138 	.word	0x2003e138
   d5244:	2003e118 	.word	0x2003e118
   d5248:	2003e1f8 	.word	0x2003e1f8
   d524c:	2003e1e8 	.word	0x2003e1e8
   d5250:	2003e0dc 	.word	0x2003e0dc
   d5254:	2003e1e5 	.word	0x2003e1e5
   d5258:	2003e0f4 	.word	0x2003e0f4
   d525c:	2003e178 	.word	0x2003e178
   d5260:	2003e0b0 	.word	0x2003e0b0
   d5264:	2003e0a0 	.word	0x2003e0a0

000d5268 <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d5268:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d526a:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d526c:	4604      	mov	r4, r0
      if (_M_manager)
   d526e:	b113      	cbz	r3, d5276 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5270:	2203      	movs	r2, #3
   d5272:	4601      	mov	r1, r0
   d5274:	4798      	blx	r3
    }
   d5276:	4620      	mov	r0, r4
   d5278:	bd10      	pop	{r4, pc}

000d527a <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    inline
#if __cplusplus >= 201103L
    typename enable_if<__and_<__not_<__is_tuple_like<_Tp>>,
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
    swap(_Tp& __a, _Tp& __b)
   d527a:	b513      	push	{r0, r1, r4, lr}
   d527c:	460b      	mov	r3, r1
   d527e:	4602      	mov	r2, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5280:	e9d0 0100 	ldrd	r0, r1, [r0]
   d5284:	466c      	mov	r4, sp
   d5286:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d528a:	e893 0003 	ldmia.w	r3, {r0, r1}
   d528e:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d5292:	e894 0003 	ldmia.w	r4, {r0, r1}
   d5296:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d529a:	b002      	add	sp, #8
   d529c:	bd10      	pop	{r4, pc}
	...

000d52a0 <_GLOBAL__sub_I__ZN16DeviceNameHelper9_instanceE>:
   d52a0:	4b01      	ldr	r3, [pc, #4]	; (d52a8 <_GLOBAL__sub_I__ZN16DeviceNameHelper9_instanceE+0x8>)
   d52a2:	2200      	movs	r2, #0
   d52a4:	701a      	strb	r2, [r3, #0]
    int fd = open(path, O_RDWR | O_CREAT);
    if (fd != -1) {
        write(fd, &fileData, sizeof(DeviceNameHelperData));
        close(fd);   
    }
}
   d52a6:	4770      	bx	lr
   d52a8:	2003e454 	.word	0x2003e454

000d52ac <_ZN6MB85RCD1Ev>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
	wire(wire), memorySize(memorySize), addr(addr) {
}

MB85RC::~MB85RC() {
}
   d52ac:	4770      	bx	lr

000d52ae <_ZN6MB85RCD0Ev>:
MB85RC::~MB85RC() {
   d52ae:	b510      	push	{r4, lr}
}
   d52b0:	2110      	movs	r1, #16
MB85RC::~MB85RC() {
   d52b2:	4604      	mov	r4, r0
}
   d52b4:	f006 fa7a 	bl	db7ac <_ZdlPvj>
   d52b8:	4620      	mov	r0, r4
   d52ba:	bd10      	pop	{r4, pc}

000d52bc <_ZN7TwoWire5writeEj>:
  bool lock();
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
   d52bc:	6803      	ldr	r3, [r0, #0]
   d52be:	b2c9      	uxtb	r1, r1
   d52c0:	689b      	ldr	r3, [r3, #8]
   d52c2:	4718      	bx	r3

000d52c4 <_ZN6MB85RCC1ER7TwoWireji>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
   d52c4:	b530      	push	{r4, r5, lr}
	wire(wire), memorySize(memorySize), addr(addr) {
   d52c6:	4d03      	ldr	r5, [pc, #12]	; (d52d4 <_ZN6MB85RCC1ER7TwoWireji+0x10>)
   d52c8:	e9c0 2302 	strd	r2, r3, [r0, #8]
   d52cc:	e9c0 5100 	strd	r5, r1, [r0]
}
   d52d0:	bd30      	pop	{r4, r5, pc}
   d52d2:	bf00      	nop
   d52d4:	000df01c 	.word	0x000df01c

000d52d8 <_ZN6MB85RC5beginEv>:

void MB85RC::begin() {
	wire.begin();
   d52d8:	6840      	ldr	r0, [r0, #4]
   d52da:	f003 b907 	b.w	d84ec <_ZN7TwoWire5beginEv>

000d52de <_ZNSt10lock_guardIR7TwoWireED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   d52de:	b510      	push	{r4, lr}
   d52e0:	4604      	mov	r4, r0
      { _M_device.unlock(); }
   d52e2:	6800      	ldr	r0, [r0, #0]
   d52e4:	f003 f961 	bl	d85aa <_ZN7TwoWire6unlockEv>
   d52e8:	4620      	mov	r0, r4
   d52ea:	bd10      	pop	{r4, pc}

000d52ec <_ZN6MB85RC8readDataEjPhj>:

	return true;
}


bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   d52ec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d52f0:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   d52f2:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d52f4:	9001      	str	r0, [sp, #4]
bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   d52f6:	460d      	mov	r5, r1
   d52f8:	4616      	mov	r6, r2
   d52fa:	461f      	mov	r7, r3
      { _M_device.lock(); }
   d52fc:	f003 f94c 	bl	d8598 <_ZN7TwoWire4lockEv>

		while(dataLen > 0) {
   d5300:	b1a7      	cbz	r7, d532c <_ZN6MB85RC8readDataEjPhj+0x40>
			wire.beginTransmission(addr | DEVICE_ADDR);
   d5302:	68e1      	ldr	r1, [r4, #12]
   d5304:	6860      	ldr	r0, [r4, #4]
   d5306:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d530a:	f003 f922 	bl	d8552 <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   d530e:	0a29      	lsrs	r1, r5, #8
   d5310:	6860      	ldr	r0, [r4, #4]
   d5312:	f7ff ffd3 	bl	d52bc <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   d5316:	4629      	mov	r1, r5
   d5318:	6860      	ldr	r0, [r4, #4]
   d531a:	f7ff ffcf 	bl	d52bc <_ZN7TwoWire5writeEj>
			int stat = wire.endTransmission(false);
   d531e:	6860      	ldr	r0, [r4, #4]
   d5320:	2100      	movs	r1, #0
   d5322:	f003 f931 	bl	d8588 <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   d5326:	b148      	cbz	r0, d533c <_ZN6MB85RC8readDataEjPhj+0x50>
				//Serial.printlnf("read set address failed %d", stat);
				result = false;
   d5328:	2400      	movs	r4, #0
   d532a:	e000      	b.n	d532e <_ZN6MB85RC8readDataEjPhj+0x42>
   d532c:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
   d532e:	a801      	add	r0, sp, #4
   d5330:	f7ff ffd5 	bl	d52de <_ZNSt10lock_guardIR7TwoWireED1Ev>
				dataLen--;
			}
		}
	}
	return result;
}
   d5334:	4620      	mov	r0, r4
   d5336:	b003      	add	sp, #12
   d5338:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			if (bytesToRead > 32) {
   d533c:	2f20      	cmp	r7, #32
			wire.requestFrom((uint8_t)(addr | DEVICE_ADDR), bytesToRead, (uint8_t) true);
   d533e:	7b21      	ldrb	r1, [r4, #12]
   d5340:	6860      	ldr	r0, [r4, #4]
   d5342:	46b8      	mov	r8, r7
   d5344:	bf28      	it	cs
   d5346:	f04f 0820 	movcs.w	r8, #32
   d534a:	2301      	movs	r3, #1
   d534c:	4642      	mov	r2, r8
   d534e:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d5352:	f003 f8e8 	bl	d8526 <_ZN7TwoWire11requestFromEhjh>
			if (Wire.available() < (int) bytesToRead) {
   d5356:	f006 f9e1 	bl	db71c <_Z19__fetch_global_Wirev>
   d535a:	6803      	ldr	r3, [r0, #0]
   d535c:	691b      	ldr	r3, [r3, #16]
   d535e:	4798      	blx	r3
   d5360:	4540      	cmp	r0, r8
   d5362:	dbe1      	blt.n	d5328 <_ZN6MB85RC8readDataEjPhj+0x3c>
   d5364:	eb06 0908 	add.w	r9, r6, r8
				*data++ = Wire.read();    // receive a byte as character
   d5368:	f006 f9d8 	bl	db71c <_Z19__fetch_global_Wirev>
   d536c:	6803      	ldr	r3, [r0, #0]
   d536e:	695b      	ldr	r3, [r3, #20]
   d5370:	4798      	blx	r3
   d5372:	f806 0b01 	strb.w	r0, [r6], #1
			for(size_t ii = 0; ii < bytesToRead; ii++) {
   d5376:	454e      	cmp	r6, r9
   d5378:	d1f6      	bne.n	d5368 <_ZN6MB85RC8readDataEjPhj+0x7c>
   d537a:	4445      	add	r5, r8
   d537c:	eba7 0708 	sub.w	r7, r7, r8
   d5380:	e7be      	b.n	d5300 <_ZN6MB85RC8readDataEjPhj+0x14>

000d5382 <_ZN6MB85RC9writeDataEjPKhj>:


bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   d5382:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5386:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   d5388:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d538a:	9001      	str	r0, [sp, #4]
bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   d538c:	460e      	mov	r6, r1
   d538e:	4690      	mov	r8, r2
   d5390:	461d      	mov	r5, r3
      { _M_device.lock(); }
   d5392:	f003 f901 	bl	d8598 <_ZN7TwoWire4lockEv>
   d5396:	f04f 0901 	mov.w	r9, #1
	WITH_LOCK(wire) {
   d539a:	f1b9 0f00 	cmp.w	r9, #0
   d539e:	d02a      	beq.n	d53f6 <_ZN6MB85RC9writeDataEjPKhj+0x74>
		while(dataLen > 0) {
   d53a0:	b34d      	cbz	r5, d53f6 <_ZN6MB85RC9writeDataEjPKhj+0x74>
			wire.beginTransmission(addr | DEVICE_ADDR);
   d53a2:	68e1      	ldr	r1, [r4, #12]
   d53a4:	6860      	ldr	r0, [r4, #4]
   d53a6:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d53aa:	f003 f8d2 	bl	d8552 <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   d53ae:	0a31      	lsrs	r1, r6, #8
   d53b0:	6860      	ldr	r0, [r4, #4]
   d53b2:	f7ff ff83 	bl	d52bc <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   d53b6:	6860      	ldr	r0, [r4, #4]
   d53b8:	4631      	mov	r1, r6
   d53ba:	f7ff ff7f 	bl	d52bc <_ZN7TwoWire5writeEj>

			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   d53be:	f1a5 0a1e 	sub.w	sl, r5, #30
			wire.write(framAddr);
   d53c2:	4647      	mov	r7, r8
   d53c4:	eba6 0b08 	sub.w	fp, r6, r8
				wire.write(*data);
   d53c8:	6860      	ldr	r0, [r4, #4]
   d53ca:	f817 1b01 	ldrb.w	r1, [r7], #1
   d53ce:	6803      	ldr	r3, [r0, #0]
				framAddr++;
				data++;
				dataLen--;
   d53d0:	3d01      	subs	r5, #1
				wire.write(*data);
   d53d2:	689b      	ldr	r3, [r3, #8]
   d53d4:	4798      	blx	r3
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   d53d6:	4555      	cmp	r5, sl
   d53d8:	eb0b 0607 	add.w	r6, fp, r7
				data++;
   d53dc:	46b8      	mov	r8, r7
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   d53de:	d001      	beq.n	d53e4 <_ZN6MB85RC9writeDataEjPKhj+0x62>
   d53e0:	2d00      	cmp	r5, #0
   d53e2:	d1f1      	bne.n	d53c8 <_ZN6MB85RC9writeDataEjPKhj+0x46>
			}

			int stat = wire.endTransmission(true);
   d53e4:	6860      	ldr	r0, [r4, #4]
   d53e6:	2101      	movs	r1, #1
   d53e8:	f003 f8ce 	bl	d8588 <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   d53ec:	2800      	cmp	r0, #0
   d53ee:	d0d7      	beq.n	d53a0 <_ZN6MB85RC9writeDataEjPKhj+0x1e>
				//Serial.printlnf("write failed %d", stat);
				result = false;
   d53f0:	f04f 0900 	mov.w	r9, #0
   d53f4:	e7d1      	b.n	d539a <_ZN6MB85RC9writeDataEjPKhj+0x18>
	WITH_LOCK(wire) {
   d53f6:	a801      	add	r0, sp, #4
   d53f8:	f7ff ff71 	bl	d52de <_ZNSt10lock_guardIR7TwoWireED1Ev>
				break;
			}
		}
	}
	return result;
}
   d53fc:	4648      	mov	r0, r9
   d53fe:	b003      	add	sp, #12
   d5400:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d5404 <_ZN6MB85RC8moveDataEjjj>:


bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   d5404:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d5408:	b08b      	sub	sp, #44	; 0x2c
   d540a:	460e      	mov	r6, r1
   d540c:	4615      	mov	r5, r2
   d540e:	4680      	mov	r8, r0
	bool result = true;

	// Maximum number of bytes we can write is 30
	uint8_t buf[30];

	WITH_LOCK(wire) {
   d5410:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d5412:	9001      	str	r0, [sp, #4]
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   d5414:	461c      	mov	r4, r3
      { _M_device.lock(); }
   d5416:	f003 f8bf 	bl	d8598 <_ZN7TwoWire4lockEv>
		if (framAddrFrom < framAddrTo) {
   d541a:	42ae      	cmp	r6, r5
   d541c:	d229      	bcs.n	d5472 <_ZN6MB85RC8moveDataEjjj+0x6e>
			// Moving to a higher address - copy from the end of the from buffer
			framAddrFrom += numBytes;
   d541e:	4426      	add	r6, r4
			framAddrTo += numBytes;
   d5420:	4425      	add	r5, r4
			while(numBytes > 0) {
   d5422:	b18c      	cbz	r4, d5448 <_ZN6MB85RC8moveDataEjjj+0x44>
				size_t count = numBytes;
				if (count > sizeof(buf)) {
   d5424:	2c1e      	cmp	r4, #30
   d5426:	4627      	mov	r7, r4
					count = sizeof(buf);
				}
				framAddrFrom -= count;
				framAddrTo -= count;

				result = readData(framAddrFrom, buf, count);
   d5428:	f8d8 3000 	ldr.w	r3, [r8]
   d542c:	bf28      	it	cs
   d542e:	271e      	movcs	r7, #30
				framAddrFrom -= count;
   d5430:	1bf6      	subs	r6, r6, r7
				result = readData(framAddrFrom, buf, count);
   d5432:	f8d3 9008 	ldr.w	r9, [r3, #8]
   d5436:	aa02      	add	r2, sp, #8
   d5438:	463b      	mov	r3, r7
   d543a:	4631      	mov	r1, r6
   d543c:	4640      	mov	r0, r8
				framAddrTo -= count;
   d543e:	1bed      	subs	r5, r5, r7
				result = readData(framAddrFrom, buf, count);
   d5440:	47c8      	blx	r9
				if (!result) {
   d5442:	b948      	cbnz	r0, d5458 <_ZN6MB85RC8moveDataEjjj+0x54>
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   d5444:	2400      	movs	r4, #0
   d5446:	e000      	b.n	d544a <_ZN6MB85RC8moveDataEjjj+0x46>
   d5448:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
   d544a:	a801      	add	r0, sp, #4
   d544c:	f7ff ff47 	bl	d52de <_ZNSt10lock_guardIR7TwoWireED1Ev>
				numBytes -= count;
			}
		}
	}
	return result;
}
   d5450:	4620      	mov	r0, r4
   d5452:	b00b      	add	sp, #44	; 0x2c
   d5454:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				result = writeData(framAddrTo, buf, count);
   d5458:	f8d8 3000 	ldr.w	r3, [r8]
   d545c:	aa02      	add	r2, sp, #8
   d545e:	f8d3 900c 	ldr.w	r9, [r3, #12]
   d5462:	4629      	mov	r1, r5
   d5464:	463b      	mov	r3, r7
   d5466:	4640      	mov	r0, r8
   d5468:	47c8      	blx	r9
				if (!result) {
   d546a:	2800      	cmp	r0, #0
   d546c:	d0ea      	beq.n	d5444 <_ZN6MB85RC8moveDataEjjj+0x40>
				numBytes -= count;
   d546e:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
   d5470:	e7d7      	b.n	d5422 <_ZN6MB85RC8moveDataEjjj+0x1e>
		if (framAddrFrom > framAddrTo) {
   d5472:	d9e9      	bls.n	d5448 <_ZN6MB85RC8moveDataEjjj+0x44>
			while(numBytes > 0) {
   d5474:	2c00      	cmp	r4, #0
   d5476:	d0e7      	beq.n	d5448 <_ZN6MB85RC8moveDataEjjj+0x44>
				result = readData(framAddrFrom, buf, count);
   d5478:	f8d8 3000 	ldr.w	r3, [r8]
   d547c:	2c1e      	cmp	r4, #30
   d547e:	4627      	mov	r7, r4
   d5480:	bf28      	it	cs
   d5482:	271e      	movcs	r7, #30
   d5484:	f8d3 9008 	ldr.w	r9, [r3, #8]
   d5488:	aa02      	add	r2, sp, #8
   d548a:	463b      	mov	r3, r7
   d548c:	4631      	mov	r1, r6
   d548e:	4640      	mov	r0, r8
   d5490:	47c8      	blx	r9
				if (!result) {
   d5492:	2800      	cmp	r0, #0
   d5494:	d0d6      	beq.n	d5444 <_ZN6MB85RC8moveDataEjjj+0x40>
				result = writeData(framAddrTo, buf, count);
   d5496:	f8d8 3000 	ldr.w	r3, [r8]
   d549a:	aa02      	add	r2, sp, #8
   d549c:	f8d3 900c 	ldr.w	r9, [r3, #12]
   d54a0:	4629      	mov	r1, r5
   d54a2:	463b      	mov	r3, r7
   d54a4:	4640      	mov	r0, r8
   d54a6:	47c8      	blx	r9
				if (!result) {
   d54a8:	2800      	cmp	r0, #0
   d54aa:	d0cb      	beq.n	d5444 <_ZN6MB85RC8moveDataEjjj+0x40>
				framAddrFrom += count;
   d54ac:	443e      	add	r6, r7
				framAddrTo += count;
   d54ae:	443d      	add	r5, r7
				numBytes -= count;
   d54b0:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
   d54b2:	e7df      	b.n	d5474 <_ZN6MB85RC8moveDataEjjj+0x70>

000d54b4 <_ZNK12MCP79410SRAM6lengthEv>:
	virtual ~MCP79410SRAM();

	/**
	 * @brief Returns the length (64)
	 */
	virtual size_t length() const { return 64; };
   d54b4:	2040      	movs	r0, #64	; 0x40
   d54b6:	4770      	bx	lr

000d54b8 <_ZNK12MCP79410SRAM10eraseValueEv>:
	/**
	 * @brief Erase erases to 0
	 *
	 * Note that on cold power up, the values are random, not zero!
	 */
	virtual uint8_t eraseValue() const { return 0; };
   d54b8:	2000      	movs	r0, #0
   d54ba:	4770      	bx	lr

000d54bc <_ZNK14MCP79410EEPROM6lengthEv>:
	bool protectedBlockRead(uint8_t *buf);

	/**
	 * @brief Returns the length (128)
	 */
	virtual size_t length() const { return 128; };
   d54bc:	2080      	movs	r0, #128	; 0x80
   d54be:	4770      	bx	lr

000d54c0 <_ZNK14MCP79410EEPROM10eraseValueEv>:

	/**
	 * @brief Erased value is 0xff.
	 */
	virtual uint8_t eraseValue() const { return 0xff; };
   d54c0:	20ff      	movs	r0, #255	; 0xff
   d54c2:	4770      	bx	lr

000d54c4 <_ZN12MCP79410SRAMD1Ev>:

}

MCP79410SRAM::~MCP79410SRAM() {

}
   d54c4:	4770      	bx	lr

000d54c6 <_ZN14MCP79410EEPROMD1Ev>:

}

MCP79410EEPROM::~MCP79410EEPROM() {

}
   d54c6:	4770      	bx	lr

000d54c8 <_ZN12MCP79410TimeD1Ev>:
	clear();
}

MCP79410Time::~MCP79410Time() {

}
   d54c8:	4770      	bx	lr

000d54ca <_ZN8MCP79410D1Ev>:
}


MCP79410::~MCP79410() {

}
   d54ca:	4770      	bx	lr

000d54cc <_ZN12MCP79410TimeD0Ev>:
MCP79410Time::~MCP79410Time() {
   d54cc:	b510      	push	{r4, lr}
}
   d54ce:	2114      	movs	r1, #20
MCP79410Time::~MCP79410Time() {
   d54d0:	4604      	mov	r4, r0
}
   d54d2:	f006 f96b 	bl	db7ac <_ZdlPvj>
   d54d6:	4620      	mov	r0, r4
   d54d8:	bd10      	pop	{r4, pc}

000d54da <_ZN12MCP79410SRAMD0Ev>:
MCP79410SRAM::~MCP79410SRAM() {
   d54da:	b510      	push	{r4, lr}
}
   d54dc:	2108      	movs	r1, #8
MCP79410SRAM::~MCP79410SRAM() {
   d54de:	4604      	mov	r4, r0
}
   d54e0:	f006 f964 	bl	db7ac <_ZdlPvj>
   d54e4:	4620      	mov	r0, r4
   d54e6:	bd10      	pop	{r4, pc}

000d54e8 <_ZN14MCP79410EEPROMD0Ev>:
MCP79410EEPROM::~MCP79410EEPROM() {
   d54e8:	b510      	push	{r4, lr}
}
   d54ea:	2108      	movs	r1, #8
MCP79410EEPROM::~MCP79410EEPROM() {
   d54ec:	4604      	mov	r4, r0
}
   d54ee:	f006 f95d 	bl	db7ac <_ZdlPvj>
   d54f2:	4620      	mov	r0, r4
   d54f4:	bd10      	pop	{r4, pc}

000d54f6 <_ZN8MCP79410D0Ev>:
MCP79410::~MCP79410() {
   d54f6:	b510      	push	{r4, lr}
}
   d54f8:	211c      	movs	r1, #28
MCP79410::~MCP79410() {
   d54fa:	4604      	mov	r4, r0
}
   d54fc:	f006 f956 	bl	db7ac <_ZdlPvj>
   d5500:	4620      	mov	r0, r4
   d5502:	bd10      	pop	{r4, pc}

000d5504 <_ZN18MCP79410MemoryBase5eraseEv>:
bool MCP79410MemoryBase::erase() {
   d5504:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	memset(buf, eraseValue(), sizeof(buf));
   d5508:	6803      	ldr	r3, [r0, #0]
   d550a:	68db      	ldr	r3, [r3, #12]
bool MCP79410MemoryBase::erase() {
   d550c:	4604      	mov	r4, r0
	memset(buf, eraseValue(), sizeof(buf));
   d550e:	4798      	blx	r3
   d5510:	2210      	movs	r2, #16
   d5512:	4601      	mov	r1, r0
   d5514:	4668      	mov	r0, sp
   d5516:	f007 fa15 	bl	dc944 <memset>
	size_t len = length();
   d551a:	6823      	ldr	r3, [r4, #0]
   d551c:	4620      	mov	r0, r4
   d551e:	689b      	ldr	r3, [r3, #8]
   d5520:	4798      	blx	r3
	size_t offset = 0;
   d5522:	2500      	movs	r5, #0
	size_t len = length();
   d5524:	4607      	mov	r7, r0
	bool bResult = false;
   d5526:	4628      	mov	r0, r5
	while(offset < len) {
   d5528:	42bd      	cmp	r5, r7
   d552a:	d20e      	bcs.n	d554a <_ZN18MCP79410MemoryBase5eraseEv+0x46>
		if (count > (len - offset)) {
   d552c:	1b7e      	subs	r6, r7, r5
		bResult = writeData(offset, buf, count);
   d552e:	6823      	ldr	r3, [r4, #0]
		size_t count = sizeof(buf);
   d5530:	2e10      	cmp	r6, #16
   d5532:	bf28      	it	cs
   d5534:	2610      	movcs	r6, #16
		bResult = writeData(offset, buf, count);
   d5536:	f8d3 8018 	ldr.w	r8, [r3, #24]
   d553a:	466a      	mov	r2, sp
   d553c:	4633      	mov	r3, r6
   d553e:	4629      	mov	r1, r5
   d5540:	4620      	mov	r0, r4
   d5542:	47c0      	blx	r8
		if (!bResult) {
   d5544:	b108      	cbz	r0, d554a <_ZN18MCP79410MemoryBase5eraseEv+0x46>
		offset += count;
   d5546:	4435      	add	r5, r6
	while(offset < len) {
   d5548:	e7ee      	b.n	d5528 <_ZN18MCP79410MemoryBase5eraseEv+0x24>
}
   d554a:	b004      	add	sp, #16
   d554c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d5550 <_ZN12MCP79410Time5clearEv>:
	rawYear = 0;
   d5550:	f44f 7380 	mov.w	r3, #256	; 0x100
   d5554:	8143      	strh	r3, [r0, #10]
	rawDayOfMonth = 1;
   d5556:	f240 1301 	movw	r3, #257	; 0x101
   d555a:	60c3      	str	r3, [r0, #12]
	rawSecond = 0;
   d555c:	2300      	movs	r3, #0
   d555e:	8203      	strh	r3, [r0, #16]
}
   d5560:	4770      	bx	lr
	...

000d5564 <_ZN12MCP79410TimeC1Ev>:
MCP79410Time::MCP79410Time() {
   d5564:	b508      	push	{r3, lr}
   d5566:	4b06      	ldr	r3, [pc, #24]	; (d5580 <_ZN12MCP79410TimeC1Ev+0x1c>)
   d5568:	6003      	str	r3, [r0, #0]
   d556a:	4b06      	ldr	r3, [pc, #24]	; (d5584 <_ZN12MCP79410TimeC1Ev+0x20>)
   d556c:	6043      	str	r3, [r0, #4]
   d556e:	f240 7304 	movw	r3, #1796	; 0x704
   d5572:	8103      	strh	r3, [r0, #8]
   d5574:	2300      	movs	r3, #0
   d5576:	7443      	strb	r3, [r0, #17]
	clear();
   d5578:	f7ff ffea 	bl	d5550 <_ZN12MCP79410Time5clearEv>
}
   d557c:	bd08      	pop	{r3, pc}
   d557e:	bf00      	nop
   d5580:	000df0fc 	.word	0x000df0fc
   d5584:	03020100 	.word	0x03020100

000d5588 <_ZN12MCP79410Time8bcdToIntEh>:
	return ((value >> 4) & 0xf) * 10 + (value & 0xf);
   d5588:	0903      	lsrs	r3, r0, #4
}
   d558a:	220a      	movs	r2, #10
	return ((value >> 4) & 0xf) * 10 + (value & 0xf);
   d558c:	f000 000f 	and.w	r0, r0, #15
}
   d5590:	fb02 0003 	mla	r0, r2, r3, r0
   d5594:	4770      	bx	lr

000d5596 <_ZNK12MCP79410Time7getYearEv>:
int MCP79410Time::getYear() const {
   d5596:	b508      	push	{r3, lr}
	return bcdToInt(rawYear) + 2000;
   d5598:	7a80      	ldrb	r0, [r0, #10]
   d559a:	f7ff fff5 	bl	d5588 <_ZN12MCP79410Time8bcdToIntEh>
}
   d559e:	f500 60fa 	add.w	r0, r0, #2000	; 0x7d0
   d55a2:	bd08      	pop	{r3, pc}

000d55a4 <_ZNK12MCP79410Time8getMonthEv>:
	return bcdToInt(rawMonth & 0x1f);
   d55a4:	7ac0      	ldrb	r0, [r0, #11]
   d55a6:	f000 001f 	and.w	r0, r0, #31
   d55aa:	f7ff bfed 	b.w	d5588 <_ZN12MCP79410Time8bcdToIntEh>

000d55ae <_ZNK12MCP79410Time13getDayOfMonthEv>:
	return bcdToInt(rawDayOfMonth & 0x3f);
   d55ae:	7b00      	ldrb	r0, [r0, #12]
   d55b0:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   d55b4:	f7ff bfe8 	b.w	d5588 <_ZN12MCP79410Time8bcdToIntEh>

000d55b8 <_ZNK12MCP79410Time7getHourEv>:
int MCP79410Time::getHour() const {
   d55b8:	b508      	push	{r3, lr}
	if (rawHour & 0x40) {
   d55ba:	7b81      	ldrb	r1, [r0, #14]
   d55bc:	064a      	lsls	r2, r1, #25
   d55be:	d50d      	bpl.n	d55dc <_ZNK12MCP79410Time7getHourEv+0x24>
		int hour12 = bcdToInt(rawHour & 0x1f);
   d55c0:	f001 001f 	and.w	r0, r1, #31
   d55c4:	f7ff ffe0 	bl	d5588 <_ZN12MCP79410Time8bcdToIntEh>
		if (rawHour & 0x20) {
   d55c8:	068b      	lsls	r3, r1, #26
   d55ca:	d503      	bpl.n	d55d4 <_ZNK12MCP79410Time7getHourEv+0x1c>
			if (hour12 == 12) {
   d55cc:	280c      	cmp	r0, #12
   d55ce:	d000      	beq.n	d55d2 <_ZNK12MCP79410Time7getHourEv+0x1a>
				return hour12 + 12;
   d55d0:	300c      	adds	r0, #12
}
   d55d2:	bd08      	pop	{r3, pc}
				return 0;
   d55d4:	280c      	cmp	r0, #12
   d55d6:	bf08      	it	eq
   d55d8:	2000      	moveq	r0, #0
   d55da:	e7fa      	b.n	d55d2 <_ZNK12MCP79410Time7getHourEv+0x1a>
}
   d55dc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		return bcdToInt(rawHour & 0x3f);
   d55e0:	f001 003f 	and.w	r0, r1, #63	; 0x3f
   d55e4:	f7ff bfd0 	b.w	d5588 <_ZN12MCP79410Time8bcdToIntEh>

000d55e8 <_ZNK12MCP79410Time9getMinuteEv>:
	return bcdToInt(rawMinute & 0x7f);
   d55e8:	7bc0      	ldrb	r0, [r0, #15]
   d55ea:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   d55ee:	f7ff bfcb 	b.w	d5588 <_ZN12MCP79410Time8bcdToIntEh>

000d55f2 <_ZNK12MCP79410Time9getSecondEv>:
	return bcdToInt(rawSecond & 0x7f);
   d55f2:	7c00      	ldrb	r0, [r0, #16]
   d55f4:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   d55f8:	f7ff bfc6 	b.w	d5588 <_ZN12MCP79410Time8bcdToIntEh>

000d55fc <_ZNK12MCP79410Time10toUnixTimeEv>:
time_t MCP79410Time::toUnixTime() const {
   d55fc:	b510      	push	{r4, lr}
   d55fe:	b08a      	sub	sp, #40	; 0x28
	memset(&tm, 0, sizeof(struct tm));
   d5600:	2224      	movs	r2, #36	; 0x24
time_t MCP79410Time::toUnixTime() const {
   d5602:	4604      	mov	r4, r0
	memset(&tm, 0, sizeof(struct tm));
   d5604:	2100      	movs	r1, #0
   d5606:	a801      	add	r0, sp, #4
   d5608:	f007 f99c 	bl	dc944 <memset>
	tm.tm_year = getYear() - 1900; // tm_year is years since 1900
   d560c:	4620      	mov	r0, r4
   d560e:	f7ff ffc2 	bl	d5596 <_ZNK12MCP79410Time7getYearEv>
   d5612:	f2a0 706c 	subw	r0, r0, #1900	; 0x76c
   d5616:	9006      	str	r0, [sp, #24]
	tm.tm_mon = getMonth() - 1; // tm_mon is 0-11!
   d5618:	4620      	mov	r0, r4
   d561a:	f7ff ffc3 	bl	d55a4 <_ZNK12MCP79410Time8getMonthEv>
   d561e:	3801      	subs	r0, #1
   d5620:	9005      	str	r0, [sp, #20]
	tm.tm_mday = getDayOfMonth(); // 1-31
   d5622:	4620      	mov	r0, r4
   d5624:	f7ff ffc3 	bl	d55ae <_ZNK12MCP79410Time13getDayOfMonthEv>
   d5628:	9004      	str	r0, [sp, #16]
	tm.tm_hour = getHour();
   d562a:	4620      	mov	r0, r4
   d562c:	f7ff ffc4 	bl	d55b8 <_ZNK12MCP79410Time7getHourEv>
   d5630:	9003      	str	r0, [sp, #12]
	tm.tm_min = getMinute();
   d5632:	4620      	mov	r0, r4
   d5634:	f7ff ffd8 	bl	d55e8 <_ZNK12MCP79410Time9getMinuteEv>
   d5638:	9002      	str	r0, [sp, #8]
	tm.tm_sec = getSecond();
   d563a:	4620      	mov	r0, r4
   d563c:	f7ff ffd9 	bl	d55f2 <_ZNK12MCP79410Time9getSecondEv>
   d5640:	9001      	str	r0, [sp, #4]
	return mktime(&tm);
   d5642:	a801      	add	r0, sp, #4
   d5644:	f002 faea 	bl	d7c1c <mktime>
}
   d5648:	b00a      	add	sp, #40	; 0x28
   d564a:	bd10      	pop	{r4, pc}

000d564c <_ZN12MCP79410Time8intToBcdEi>:
	result = (uint8_t) (((value / 10) % 10) << 4);
   d564c:	210a      	movs	r1, #10
   d564e:	fb90 f2f1 	sdiv	r2, r0, r1
   d5652:	fb92 f3f1 	sdiv	r3, r2, r1
   d5656:	fb01 2313 	mls	r3, r1, r3, r2
   d565a:	011b      	lsls	r3, r3, #4
   d565c:	b2db      	uxtb	r3, r3
	result |= (uint8_t) (value % 10);
   d565e:	fb01 0012 	mls	r0, r1, r2, r0
   d5662:	4318      	orrs	r0, r3
}
   d5664:	b2c0      	uxtb	r0, r0
   d5666:	4770      	bx	lr

000d5668 <_ZN12MCP79410Time7setYearEi>:
	rawYear = intToBcd(value % 100);
   d5668:	2364      	movs	r3, #100	; 0x64
void MCP79410Time::setYear(int value) {
   d566a:	b510      	push	{r4, lr}
   d566c:	4604      	mov	r4, r0
	rawYear = intToBcd(value % 100);
   d566e:	fb91 f0f3 	sdiv	r0, r1, r3
   d5672:	fb00 1013 	mls	r0, r0, r3, r1
   d5676:	f7ff ffe9 	bl	d564c <_ZN12MCP79410Time8intToBcdEi>
   d567a:	72a0      	strb	r0, [r4, #10]
}
   d567c:	bd10      	pop	{r4, pc}

000d567e <_ZN12MCP79410Time8setMonthEi>:
void MCP79410Time::setMonth(int value) {
   d567e:	b510      	push	{r4, lr}
   d5680:	4604      	mov	r4, r0
	rawMonth = intToBcd(value);
   d5682:	4608      	mov	r0, r1
   d5684:	f7ff ffe2 	bl	d564c <_ZN12MCP79410Time8intToBcdEi>
   d5688:	72e0      	strb	r0, [r4, #11]
}
   d568a:	bd10      	pop	{r4, pc}

000d568c <_ZN12MCP79410Time13setDayOfMonthEi>:
void MCP79410Time::setDayOfMonth(int value) {
   d568c:	b510      	push	{r4, lr}
   d568e:	4604      	mov	r4, r0
	rawDayOfMonth |= intToBcd(value);
   d5690:	4608      	mov	r0, r1
   d5692:	f7ff ffdb 	bl	d564c <_ZN12MCP79410Time8intToBcdEi>
	rawDayOfMonth &= ~0x3f;
   d5696:	7b23      	ldrb	r3, [r4, #12]
   d5698:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
	rawDayOfMonth |= intToBcd(value);
   d569c:	4318      	orrs	r0, r3
   d569e:	7320      	strb	r0, [r4, #12]
}
   d56a0:	bd10      	pop	{r4, pc}

000d56a2 <_ZN12MCP79410Time12setDayOfWeekEi>:
void MCP79410Time::setDayOfWeek(int value) {
   d56a2:	b510      	push	{r4, lr}
   d56a4:	4604      	mov	r4, r0
	rawDayOfWeek |= intToBcd(value + 1);
   d56a6:	1c48      	adds	r0, r1, #1
   d56a8:	f7ff ffd0 	bl	d564c <_ZN12MCP79410Time8intToBcdEi>
	rawDayOfWeek &= ~0x7;
   d56ac:	7b63      	ldrb	r3, [r4, #13]
   d56ae:	f023 0307 	bic.w	r3, r3, #7
	rawDayOfWeek |= intToBcd(value + 1);
   d56b2:	4318      	orrs	r0, r3
   d56b4:	7360      	strb	r0, [r4, #13]
}
   d56b6:	bd10      	pop	{r4, pc}

000d56b8 <_ZN12MCP79410Time7setHourEi>:
void MCP79410Time::setHour(int value) {
   d56b8:	b510      	push	{r4, lr}
   d56ba:	4604      	mov	r4, r0
	rawHour = intToBcd(value);
   d56bc:	4608      	mov	r0, r1
   d56be:	f7ff ffc5 	bl	d564c <_ZN12MCP79410Time8intToBcdEi>
   d56c2:	73a0      	strb	r0, [r4, #14]
}
   d56c4:	bd10      	pop	{r4, pc}

000d56c6 <_ZN12MCP79410Time9setMinuteEi>:
void MCP79410Time::setMinute(int value) {
   d56c6:	b510      	push	{r4, lr}
   d56c8:	4604      	mov	r4, r0
	rawMinute = intToBcd(value);
   d56ca:	4608      	mov	r0, r1
   d56cc:	f7ff ffbe 	bl	d564c <_ZN12MCP79410Time8intToBcdEi>
   d56d0:	73e0      	strb	r0, [r4, #15]
}
   d56d2:	bd10      	pop	{r4, pc}

000d56d4 <_ZN12MCP79410Time9setSecondEi>:
void MCP79410Time::setSecond(int value) {
   d56d4:	b510      	push	{r4, lr}
   d56d6:	4604      	mov	r4, r0
	rawSecond |= intToBcd(value);
   d56d8:	4608      	mov	r0, r1
   d56da:	f7ff ffb7 	bl	d564c <_ZN12MCP79410Time8intToBcdEi>
	rawSecond &= ~0x7f;
   d56de:	7c23      	ldrb	r3, [r4, #16]
   d56e0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
	rawSecond |= intToBcd(value);
   d56e4:	4318      	orrs	r0, r3
   d56e6:	7420      	strb	r0, [r4, #16]
}
   d56e8:	bd10      	pop	{r4, pc}

000d56ea <_ZN12MCP79410Time12fromUnixTimeEx>:
void MCP79410Time::fromUnixTime(time_t time) {
   d56ea:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d56ec:	4604      	mov	r4, r0
	struct tm *tm = gmtime(&time);
   d56ee:	4668      	mov	r0, sp
void MCP79410Time::fromUnixTime(time_t time) {
   d56f0:	e9cd 2300 	strd	r2, r3, [sp]
	struct tm *tm = gmtime(&time);
   d56f4:	f007 f8ec 	bl	dc8d0 <gmtime>
   d56f8:	4605      	mov	r5, r0
	setYear(tm->tm_year);
   d56fa:	6941      	ldr	r1, [r0, #20]
   d56fc:	4620      	mov	r0, r4
   d56fe:	f7ff ffb3 	bl	d5668 <_ZN12MCP79410Time7setYearEi>
	setMonth(tm->tm_mon + 1);
   d5702:	6929      	ldr	r1, [r5, #16]
   d5704:	4620      	mov	r0, r4
   d5706:	3101      	adds	r1, #1
   d5708:	f7ff ffb9 	bl	d567e <_ZN12MCP79410Time8setMonthEi>
	setDayOfMonth(tm->tm_mday);
   d570c:	68e9      	ldr	r1, [r5, #12]
   d570e:	4620      	mov	r0, r4
   d5710:	f7ff ffbc 	bl	d568c <_ZN12MCP79410Time13setDayOfMonthEi>
	setDayOfWeek(tm->tm_wday);
   d5714:	69a9      	ldr	r1, [r5, #24]
   d5716:	4620      	mov	r0, r4
   d5718:	f7ff ffc3 	bl	d56a2 <_ZN12MCP79410Time12setDayOfWeekEi>
	setHour(tm->tm_hour); // tm_hour is 0-23
   d571c:	68a9      	ldr	r1, [r5, #8]
   d571e:	4620      	mov	r0, r4
   d5720:	f7ff ffca 	bl	d56b8 <_ZN12MCP79410Time7setHourEi>
	setMinute(tm->tm_min); // tm_min is 0-59
   d5724:	6869      	ldr	r1, [r5, #4]
   d5726:	4620      	mov	r0, r4
   d5728:	f7ff ffcd 	bl	d56c6 <_ZN12MCP79410Time9setMinuteEi>
	setSecond(tm->tm_sec < 60 ? tm->tm_sec : 59); // tm_sec is 0-61, inclusive, because of leap seconds.
   d572c:	6829      	ldr	r1, [r5, #0]
   d572e:	293b      	cmp	r1, #59	; 0x3b
   d5730:	bfa8      	it	ge
   d5732:	213b      	movge	r1, #59	; 0x3b
   d5734:	4620      	mov	r0, r4
   d5736:	f7ff ffcd 	bl	d56d4 <_ZN12MCP79410Time9setSecondEi>
}
   d573a:	b003      	add	sp, #12
   d573c:	bd30      	pop	{r4, r5, pc}
	...

000d5740 <_ZN8MCP79410C1ER7TwoWire>:
MCP79410::MCP79410(TwoWire &wire) : wire(wire), sramObj(this), eepromObj(this) {
   d5740:	4a05      	ldr	r2, [pc, #20]	; (d5758 <_ZN8MCP79410C1ER7TwoWire+0x18>)
MCP79410MemoryBase::MCP79410MemoryBase(MCP79410 *parent) : parent(parent) {
   d5742:	6100      	str	r0, [r0, #16]
MCP79410::MCP79410(TwoWire &wire) : wire(wire), sramObj(this), eepromObj(this) {
   d5744:	e9c0 2100 	strd	r2, r1, [r0]
   d5748:	4a04      	ldr	r2, [pc, #16]	; (d575c <_ZN8MCP79410C1ER7TwoWire+0x1c>)
   d574a:	6082      	str	r2, [r0, #8]
MCP79410SRAM::MCP79410SRAM(MCP79410 *parent) : MCP79410MemoryBase(parent) {
   d574c:	4a04      	ldr	r2, [pc, #16]	; (d5760 <_ZN8MCP79410C1ER7TwoWire+0x20>)
   d574e:	60c2      	str	r2, [r0, #12]
MCP79410EEPROM::MCP79410EEPROM(MCP79410 *parent) : MCP79410MemoryBase(parent) {
   d5750:	4a04      	ldr	r2, [pc, #16]	; (d5764 <_ZN8MCP79410C1ER7TwoWire+0x24>)
MCP79410MemoryBase::MCP79410MemoryBase(MCP79410 *parent) : parent(parent) {
   d5752:	6180      	str	r0, [r0, #24]
MCP79410EEPROM::MCP79410EEPROM(MCP79410 *parent) : MCP79410MemoryBase(parent) {
   d5754:	6142      	str	r2, [r0, #20]
}
   d5756:	4770      	bx	lr
   d5758:	000df130 	.word	0x000df130
   d575c:	03010000 	.word	0x03010000
   d5760:	000df0d8 	.word	0x000df0d8
   d5764:	000df10c 	.word	0x000df10c

000d5768 <_ZNK8MCP7941010deviceReadEhhPhj>:
	return deviceWriteRegisterByte(addr, value);
}



int MCP79410::deviceRead(uint8_t i2cAddr, uint8_t addr, uint8_t *buf, size_t bufLen) const {
   d5768:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d576c:	4604      	mov	r4, r0
   d576e:	460f      	mov	r7, r1
   d5770:	4690      	mov	r8, r2
   d5772:	4699      	mov	r9, r3
	// log.trace("deviceRead i2cAddr=%02x addr=%02x bufLen=%u", i2cAddr, addr, bufLen);

	int stat = 0;
	size_t offset = 0;
   d5774:	2600      	movs	r6, #0

	while(offset < bufLen) {
   d5776:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d5778:	429e      	cmp	r6, r3
   d577a:	d231      	bcs.n	d57e0 <_ZNK8MCP7941010deviceReadEhhPhj+0x78>
		wire.beginTransmission(i2cAddr);
   d577c:	6860      	ldr	r0, [r4, #4]
   d577e:	4639      	mov	r1, r7
   d5780:	f002 fee3 	bl	d854a <_ZN7TwoWire17beginTransmissionEh>
		wire.write(addr + offset);
   d5784:	eb08 0106 	add.w	r1, r8, r6
   d5788:	6860      	ldr	r0, [r4, #4]
   d578a:	f7ff fd97 	bl	d52bc <_ZN7TwoWire5writeEj>
		stat = wire.endTransmission(false);
   d578e:	6860      	ldr	r0, [r4, #4]
   d5790:	2100      	movs	r1, #0
   d5792:	f002 fef9 	bl	d8588 <_ZN7TwoWire15endTransmissionEh>
		if (stat == 0) {
   d5796:	4605      	mov	r5, r0
   d5798:	b9d0      	cbnz	r0, d57d0 <_ZNK8MCP7941010deviceReadEhhPhj+0x68>
			// Maximum read is 32 because of the limitation of the Wire implementation
			size_t count = bufLen - offset;
   d579a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
				count = 32;
			}

			// log.trace("deviceRead addr=%u count=%u", addr + offset, count);

			count = wire.requestFrom(i2cAddr, count, (uint8_t) true);
   d579c:	6860      	ldr	r0, [r4, #4]
			size_t count = bufLen - offset;
   d579e:	1b9a      	subs	r2, r3, r6
			count = wire.requestFrom(i2cAddr, count, (uint8_t) true);
   d57a0:	2a20      	cmp	r2, #32
   d57a2:	f04f 0301 	mov.w	r3, #1
   d57a6:	bf28      	it	cs
   d57a8:	2220      	movcs	r2, #32
   d57aa:	4639      	mov	r1, r7
   d57ac:	f002 febb 	bl	d8526 <_ZN7TwoWire11requestFromEhjh>
   d57b0:	eb09 0b06 	add.w	fp, r9, r6
   d57b4:	4605      	mov	r5, r0
			for(size_t ii = 0; ii < count; ii++) {
   d57b6:	eb0b 0a00 	add.w	sl, fp, r0
   d57ba:	45da      	cmp	sl, fp
   d57bc:	d006      	beq.n	d57cc <_ZNK8MCP7941010deviceReadEhhPhj+0x64>
				buf[ii + offset] = wire.read();
   d57be:	6860      	ldr	r0, [r4, #4]
   d57c0:	6803      	ldr	r3, [r0, #0]
   d57c2:	695b      	ldr	r3, [r3, #20]
   d57c4:	4798      	blx	r3
   d57c6:	f80b 0b01 	strb.w	r0, [fp], #1
			for(size_t ii = 0; ii < count; ii++) {
   d57ca:	e7f6      	b.n	d57ba <_ZNK8MCP7941010deviceReadEhhPhj+0x52>
			}
			offset += count;
   d57cc:	442e      	add	r6, r5
	while(offset < bufLen) {
   d57ce:	e7d2      	b.n	d5776 <_ZNK8MCP7941010deviceReadEhhPhj+0xe>
		}
		else {
			log.info("deviceRead failed stat=%d", stat);
   d57d0:	4602      	mov	r2, r0
   d57d2:	4904      	ldr	r1, [pc, #16]	; (d57e4 <_ZNK8MCP7941010deviceReadEhhPhj+0x7c>)
   d57d4:	4804      	ldr	r0, [pc, #16]	; (d57e8 <_ZNK8MCP7941010deviceReadEhhPhj+0x80>)
   d57d6:	f7fe fce9 	bl	d41ac <_ZNK5spark6Logger4infoEPKcz>
			break;
		}
	}
	return stat;
}
   d57da:	4628      	mov	r0, r5
   d57dc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d57e0:	2500      	movs	r5, #0
	return stat;
   d57e2:	e7fa      	b.n	d57da <_ZNK8MCP7941010deviceReadEhhPhj+0x72>
   d57e4:	000df030 	.word	0x000df030
   d57e8:	2003e458 	.word	0x2003e458

000d57ec <_ZN12MCP79410SRAM8readDataEjPhj>:
bool MCP79410SRAM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d57ec:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if ((addr + dataLen) > length()) {
   d57f0:	eb01 0803 	add.w	r8, r1, r3
bool MCP79410SRAM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d57f4:	461e      	mov	r6, r3
	if ((addr + dataLen) > length()) {
   d57f6:	6803      	ldr	r3, [r0, #0]
   d57f8:	689b      	ldr	r3, [r3, #8]
bool MCP79410SRAM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d57fa:	4605      	mov	r5, r0
   d57fc:	460c      	mov	r4, r1
   d57fe:	4617      	mov	r7, r2
	if ((addr + dataLen) > length()) {
   d5800:	4798      	blx	r3
   d5802:	4580      	cmp	r8, r0
   d5804:	d80d      	bhi.n	d5822 <_ZN12MCP79410SRAM8readDataEjPhj+0x36>
	int stat = parent->deviceRead(MCP79410::REG_I2C_ADDR, MCP79410::REG_SRAM + addr, data, dataLen);
   d5806:	3420      	adds	r4, #32
   d5808:	6868      	ldr	r0, [r5, #4]
   d580a:	9600      	str	r6, [sp, #0]
   d580c:	463b      	mov	r3, r7
   d580e:	b2e2      	uxtb	r2, r4
   d5810:	216f      	movs	r1, #111	; 0x6f
   d5812:	f7ff ffa9 	bl	d5768 <_ZNK8MCP7941010deviceReadEhhPhj>
	return (stat == 0);
   d5816:	fab0 f080 	clz	r0, r0
   d581a:	0940      	lsrs	r0, r0, #5
}
   d581c:	b002      	add	sp, #8
   d581e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return false;
   d5822:	2000      	movs	r0, #0
   d5824:	e7fa      	b.n	d581c <_ZN12MCP79410SRAM8readDataEjPhj+0x30>

000d5826 <_ZN14MCP79410EEPROM8readDataEjPhj>:
bool MCP79410EEPROM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d5826:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if ((addr + dataLen) > length()) {
   d582a:	eb01 0803 	add.w	r8, r1, r3
bool MCP79410EEPROM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d582e:	461e      	mov	r6, r3
	if ((addr + dataLen) > length()) {
   d5830:	6803      	ldr	r3, [r0, #0]
   d5832:	689b      	ldr	r3, [r3, #8]
bool MCP79410EEPROM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d5834:	4604      	mov	r4, r0
   d5836:	460d      	mov	r5, r1
   d5838:	4617      	mov	r7, r2
	if ((addr + dataLen) > length()) {
   d583a:	4798      	blx	r3
   d583c:	4580      	cmp	r8, r0
   d583e:	d80c      	bhi.n	d585a <_ZN14MCP79410EEPROM8readDataEjPhj+0x34>
	int stat = parent->deviceRead(MCP79410::EEPROM_I2C_ADDR, addr, data, dataLen);
   d5840:	6860      	ldr	r0, [r4, #4]
   d5842:	9600      	str	r6, [sp, #0]
   d5844:	463b      	mov	r3, r7
   d5846:	b2ea      	uxtb	r2, r5
   d5848:	2157      	movs	r1, #87	; 0x57
   d584a:	f7ff ff8d 	bl	d5768 <_ZNK8MCP7941010deviceReadEhhPhj>
	return (stat == 0);
   d584e:	fab0 f080 	clz	r0, r0
   d5852:	0940      	lsrs	r0, r0, #5
}
   d5854:	b002      	add	sp, #8
   d5856:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return false;
   d585a:	2000      	movs	r0, #0
   d585c:	e7fa      	b.n	d5854 <_ZN14MCP79410EEPROM8readDataEjPhj+0x2e>

000d585e <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei.part.0>:
int MCP79410::deviceReadTime(uint8_t addr, MCP79410Time &time, int timeMode) const {
   d585e:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
		size_t numBytes = (timeMode == TIME_MODE_RTC) ? 7 : 6;
   d5860:	1e1e      	subs	r6, r3, #0
   d5862:	bf0c      	ite	eq
   d5864:	2307      	moveq	r3, #7
   d5866:	2306      	movne	r3, #6
		stat = deviceRead(REG_I2C_ADDR, addr, buf, numBytes);
   d5868:	9300      	str	r3, [sp, #0]
int MCP79410::deviceReadTime(uint8_t addr, MCP79410Time &time, int timeMode) const {
   d586a:	4614      	mov	r4, r2
		stat = deviceRead(REG_I2C_ADDR, addr, buf, numBytes);
   d586c:	ab02      	add	r3, sp, #8
   d586e:	460a      	mov	r2, r1
   d5870:	216f      	movs	r1, #111	; 0x6f
   d5872:	f7ff ff79 	bl	d5768 <_ZNK8MCP7941010deviceReadEhhPhj>
		if (stat == 0) {
   d5876:	4605      	mov	r5, r0
   d5878:	b9a8      	cbnz	r0, d58a6 <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei.part.0+0x48>
			time.rawSecond = buf[0];
   d587a:	f89d 3008 	ldrb.w	r3, [sp, #8]
   d587e:	7423      	strb	r3, [r4, #16]
			time.rawMinute = buf[1];
   d5880:	f89d 3009 	ldrb.w	r3, [sp, #9]
   d5884:	73e3      	strb	r3, [r4, #15]
			time.rawHour = buf[2];
   d5886:	f89d 300a 	ldrb.w	r3, [sp, #10]
   d588a:	73a3      	strb	r3, [r4, #14]
			time.rawDayOfWeek = buf[3];
   d588c:	f89d 300b 	ldrb.w	r3, [sp, #11]
   d5890:	7363      	strb	r3, [r4, #13]
			time.rawDayOfMonth = buf[4];
   d5892:	f89d 300c 	ldrb.w	r3, [sp, #12]
   d5896:	7323      	strb	r3, [r4, #12]
			time.rawMonth = buf[5];
   d5898:	f89d 300d 	ldrb.w	r3, [sp, #13]
   d589c:	72e3      	strb	r3, [r4, #11]
			if (timeMode == TIME_MODE_RTC) {
   d589e:	b92e      	cbnz	r6, d58ac <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei.part.0+0x4e>
				time.rawYear = buf[6];
   d58a0:	f89d 300e 	ldrb.w	r3, [sp, #14]
   d58a4:	72a3      	strb	r3, [r4, #10]
}
   d58a6:	4628      	mov	r0, r5
   d58a8:	b004      	add	sp, #16
   d58aa:	bd70      	pop	{r4, r5, r6, pc}
				time.rawYear = MCP79410Time::intToBcd(Time.year());
   d58ac:	f005 f97a 	bl	daba4 <_ZN9TimeClass4yearEv>
   d58b0:	f7ff fecc 	bl	d564c <_ZN12MCP79410Time8intToBcdEi>
   d58b4:	72a0      	strb	r0, [r4, #10]
	return stat;
   d58b6:	e7f6      	b.n	d58a6 <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei.part.0+0x48>

000d58b8 <_ZNK8MCP7941022deviceReadRegisterByteEh>:
uint8_t MCP79410::deviceReadRegisterByte(uint8_t addr) const {
   d58b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	if (deviceRead(REG_I2C_ADDR, addr, buf, 1) == 0) {
   d58ba:	2301      	movs	r3, #1
uint8_t MCP79410::deviceReadRegisterByte(uint8_t addr) const {
   d58bc:	460a      	mov	r2, r1
	if (deviceRead(REG_I2C_ADDR, addr, buf, 1) == 0) {
   d58be:	9300      	str	r3, [sp, #0]
   d58c0:	216f      	movs	r1, #111	; 0x6f
   d58c2:	ab03      	add	r3, sp, #12
   d58c4:	f7ff ff50 	bl	d5768 <_ZNK8MCP7941010deviceReadEhhPhj>
   d58c8:	b920      	cbnz	r0, d58d4 <_ZNK8MCP7941022deviceReadRegisterByteEh+0x1c>
		return buf[0];
   d58ca:	f89d 000c 	ldrb.w	r0, [sp, #12]
}
   d58ce:	b005      	add	sp, #20
   d58d0:	f85d fb04 	ldr.w	pc, [sp], #4
		return 0;
   d58d4:	2000      	movs	r0, #0
   d58d6:	e7fa      	b.n	d58ce <_ZNK8MCP7941022deviceReadRegisterByteEh+0x16>

000d58d8 <_ZNK8MCP7941020getOscillatorRunningEv>:
bool MCP79410::getOscillatorRunning() const {
   d58d8:	b508      	push	{r3, lr}
	return (deviceReadRegisterByte(REG_RTCWKDAY) & REG_RTCWKDAY_OSCRUN) != 0;
   d58da:	2103      	movs	r1, #3
   d58dc:	f7ff ffec 	bl	d58b8 <_ZNK8MCP7941022deviceReadRegisterByteEh>
}
   d58e0:	f3c0 1040 	ubfx	r0, r0, #5, #1
   d58e4:	bd08      	pop	{r3, pc}

000d58e6 <_ZNK8MCP7941010getRTCTimeER12MCP79410Time>:
bool MCP79410::getRTCTime(MCP79410Time &time) const {
   d58e6:	b538      	push	{r3, r4, r5, lr}
   d58e8:	2300      	movs	r3, #0
   d58ea:	460c      	mov	r4, r1
   d58ec:	460a      	mov	r2, r1
   d58ee:	4619      	mov	r1, r3
   d58f0:	4605      	mov	r5, r0
	if (timeMode == TIME_MODE_RTC || timeMode == TIME_MODE_ALARM) {
   d58f2:	f7ff ffb4 	bl	d585e <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei.part.0>
	if (stat == 0) {
   d58f6:	b930      	cbnz	r0, d5906 <_ZNK8MCP7941010getRTCTimeER12MCP79410Time+0x20>
		if (time.rawYear > 0 && getOscillatorRunning()) {
   d58f8:	7aa3      	ldrb	r3, [r4, #10]
   d58fa:	b123      	cbz	r3, d5906 <_ZNK8MCP7941010getRTCTimeER12MCP79410Time+0x20>
   d58fc:	4628      	mov	r0, r5
}
   d58fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		if (time.rawYear > 0 && getOscillatorRunning()) {
   d5902:	f7ff bfe9 	b.w	d58d8 <_ZNK8MCP7941020getOscillatorRunningEv>
}
   d5906:	2000      	movs	r0, #0
   d5908:	bd38      	pop	{r3, r4, r5, pc}

000d590a <_ZNK8MCP7941010getRTCTimeEv>:
time_t MCP79410::getRTCTime() const {
   d590a:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d590c:	4602      	mov	r2, r0
	MCP79410Time time;
   d590e:	a801      	add	r0, sp, #4
   d5910:	f7ff fe28 	bl	d5564 <_ZN12MCP79410TimeC1Ev>
	bool bResult = getRTCTime(time);
   d5914:	a901      	add	r1, sp, #4
   d5916:	4610      	mov	r0, r2
   d5918:	f7ff ffe5 	bl	d58e6 <_ZNK8MCP7941010getRTCTimeER12MCP79410Time>
	if (bResult) {
   d591c:	b128      	cbz	r0, d592a <_ZNK8MCP7941010getRTCTimeEv+0x20>
		return time.toUnixTime();
   d591e:	a801      	add	r0, sp, #4
   d5920:	f7ff fe6c 	bl	d55fc <_ZNK12MCP79410Time10toUnixTimeEv>
}
   d5924:	b007      	add	sp, #28
   d5926:	f85d fb04 	ldr.w	pc, [sp], #4
		return 0;
   d592a:	2000      	movs	r0, #0
   d592c:	4601      	mov	r1, r0
   d592e:	e7f9      	b.n	d5924 <_ZNK8MCP7941010getRTCTimeEv+0x1a>

000d5930 <_ZN8MCP794105setupEv>:
void MCP79410::setup() {
   d5930:	b5d0      	push	{r4, r6, r7, lr}
   d5932:	4604      	mov	r4, r0
   d5934:	b086      	sub	sp, #24
	wire.begin();
   d5936:	6840      	ldr	r0, [r0, #4]
   d5938:	f002 fdd8 	bl	d84ec <_ZN7TwoWire5beginEv>
	if (!Time.isValid()) {
   d593c:	f005 f904 	bl	dab48 <_ZN9TimeClass7isValidEv>
   d5940:	b9e8      	cbnz	r0, d597e <_ZN8MCP794105setupEv+0x4e>
		if ((timeSyncMode & TIME_SYNC_RTC_TO_TIME) != 0) {
   d5942:	7ae3      	ldrb	r3, [r4, #11]
   d5944:	079b      	lsls	r3, r3, #30
   d5946:	d51a      	bpl.n	d597e <_ZN8MCP794105setupEv+0x4e>
			time_t rtcTime = getRTCTime();
   d5948:	4620      	mov	r0, r4
   d594a:	f7ff ffde 	bl	d590a <_ZNK8MCP7941010getRTCTimeEv>
   d594e:	4606      	mov	r6, r0
   d5950:	460f      	mov	r7, r1
			if (rtcTime != 0) {
   d5952:	ea56 0307 	orrs.w	r3, r6, r7
   d5956:	d012      	beq.n	d597e <_ZN8MCP794105setupEv+0x4e>
				Time.setTime(rtcTime);
   d5958:	f004 fffc 	bl	da954 <_ZN9TimeClass7setTimeEx>
				log.info("set Time from RTC %s", Time.format(rtcTime, TIME_FORMAT_DEFAULT).c_str());
   d595c:	4b0a      	ldr	r3, [pc, #40]	; (d5988 <_ZN8MCP794105setupEv+0x58>)
   d595e:	490b      	ldr	r1, [pc, #44]	; (d598c <_ZN8MCP794105setupEv+0x5c>)
   d5960:	681b      	ldr	r3, [r3, #0]
   d5962:	9300      	str	r3, [sp, #0]
   d5964:	4632      	mov	r2, r6
   d5966:	463b      	mov	r3, r7
   d5968:	a802      	add	r0, sp, #8
   d596a:	f005 f8ab 	bl	daac4 <_ZN9TimeClass6formatExPKc>
   d596e:	4808      	ldr	r0, [pc, #32]	; (d5990 <_ZN8MCP794105setupEv+0x60>)
   d5970:	9a02      	ldr	r2, [sp, #8]
   d5972:	4908      	ldr	r1, [pc, #32]	; (d5994 <_ZN8MCP794105setupEv+0x64>)
   d5974:	f7fe fc1a 	bl	d41ac <_ZNK5spark6Logger4infoEPKcz>
   d5978:	a802      	add	r0, sp, #8
   d597a:	f004 fad1 	bl	d9f20 <_ZN6StringD1Ev>
	setupDone = true;
   d597e:	2301      	movs	r3, #1
   d5980:	7223      	strb	r3, [r4, #8]
}
   d5982:	b006      	add	sp, #24
   d5984:	bdd0      	pop	{r4, r6, r7, pc}
   d5986:	bf00      	nop
   d5988:	2003debc 	.word	0x2003debc
   d598c:	2003e690 	.word	0x2003e690
   d5990:	2003e458 	.word	0x2003e458
   d5994:	000df04a 	.word	0x000df04a

000d5998 <_ZN8MCP7941011deviceWriteEhhPKhj>:

int MCP79410::deviceWrite(uint8_t i2cAddr, uint8_t addr, const uint8_t *buf, size_t bufLen) {
   d5998:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d599c:	4606      	mov	r6, r0
   d599e:	4688      	mov	r8, r1
   d59a0:	4691      	mov	r9, r2
   d59a2:	469a      	mov	sl, r3
	// log.trace("deviceWrite i2cAddr=%02x addr=%02x bufLen=%u", i2cAddr, addr, bufLen);

	int stat = 0;
	size_t offset = 0;
   d59a4:	2500      	movs	r5, #0

	while(offset < bufLen) {
   d59a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d59a8:	429d      	cmp	r5, r3
   d59aa:	d229      	bcs.n	d5a00 <_ZN8MCP7941011deviceWriteEhhPKhj+0x68>
		wire.beginTransmission(i2cAddr);
   d59ac:	6870      	ldr	r0, [r6, #4]
   d59ae:	4641      	mov	r1, r8
   d59b0:	f002 fdcb 	bl	d854a <_ZN7TwoWire17beginTransmissionEh>
		wire.write(addr + offset);
   d59b4:	6870      	ldr	r0, [r6, #4]
   d59b6:	eb09 0105 	add.w	r1, r9, r5
   d59ba:	f7ff fc7f 	bl	d52bc <_ZN7TwoWire5writeEj>

		// Maximum write is 31, not 32, because of the address byte
		size_t count = bufLen - offset;
   d59be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d59c0:	1b5f      	subs	r7, r3, r5
		if (count > 31) {
   d59c2:	2f1f      	cmp	r7, #31
   d59c4:	bf28      	it	cs
   d59c6:	271f      	movcs	r7, #31
			count = 31;
		}

		// log.trace("deviceWrite addr=%u count=%u", addr + offset, count);

		for(size_t ii = 0; ii < count; ii++) {
   d59c8:	eb0a 0405 	add.w	r4, sl, r5
   d59cc:	eb07 0b04 	add.w	fp, r7, r4
			wire.write(buf[ii + offset]);
   d59d0:	6870      	ldr	r0, [r6, #4]
   d59d2:	f814 1b01 	ldrb.w	r1, [r4], #1
   d59d6:	6802      	ldr	r2, [r0, #0]
   d59d8:	6892      	ldr	r2, [r2, #8]
   d59da:	4790      	blx	r2
		for(size_t ii = 0; ii < count; ii++) {
   d59dc:	45a3      	cmp	fp, r4
   d59de:	d1f7      	bne.n	d59d0 <_ZN8MCP7941011deviceWriteEhhPKhj+0x38>
		}

		stat = wire.endTransmission(true);
   d59e0:	6870      	ldr	r0, [r6, #4]
   d59e2:	2101      	movs	r1, #1
   d59e4:	f002 fdd0 	bl	d8588 <_ZN7TwoWire15endTransmissionEh>
		if (stat != 0) {
   d59e8:	4604      	mov	r4, r0
   d59ea:	b138      	cbz	r0, d59fc <_ZN8MCP7941011deviceWriteEhhPKhj+0x64>
			log.info("deviceWrite failed stat=%d", stat);
   d59ec:	4602      	mov	r2, r0
   d59ee:	4905      	ldr	r1, [pc, #20]	; (d5a04 <_ZN8MCP7941011deviceWriteEhhPKhj+0x6c>)
   d59f0:	4805      	ldr	r0, [pc, #20]	; (d5a08 <_ZN8MCP7941011deviceWriteEhhPKhj+0x70>)
   d59f2:	f7fe fbdb 	bl	d41ac <_ZNK5spark6Logger4infoEPKcz>

		offset += count;
	}

	return stat;
}
   d59f6:	4620      	mov	r0, r4
   d59f8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		offset += count;
   d59fc:	443d      	add	r5, r7
	while(offset < bufLen) {
   d59fe:	e7d2      	b.n	d59a6 <_ZN8MCP7941011deviceWriteEhhPKhj+0xe>
   d5a00:	2400      	movs	r4, #0
	return stat;
   d5a02:	e7f8      	b.n	d59f6 <_ZN8MCP7941011deviceWriteEhhPKhj+0x5e>
   d5a04:	000df05f 	.word	0x000df05f
   d5a08:	2003e458 	.word	0x2003e458

000d5a0c <_ZN12MCP79410SRAM9writeDataEjPKhj>:
bool MCP79410SRAM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d5a0c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if ((addr + dataLen) > length()) {
   d5a10:	eb01 0803 	add.w	r8, r1, r3
bool MCP79410SRAM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d5a14:	461e      	mov	r6, r3
	if ((addr + dataLen) > length()) {
   d5a16:	6803      	ldr	r3, [r0, #0]
   d5a18:	689b      	ldr	r3, [r3, #8]
bool MCP79410SRAM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d5a1a:	4605      	mov	r5, r0
   d5a1c:	460c      	mov	r4, r1
   d5a1e:	4617      	mov	r7, r2
	if ((addr + dataLen) > length()) {
   d5a20:	4798      	blx	r3
   d5a22:	4580      	cmp	r8, r0
   d5a24:	d80d      	bhi.n	d5a42 <_ZN12MCP79410SRAM9writeDataEjPKhj+0x36>
	int stat = parent->deviceWrite(MCP79410::REG_I2C_ADDR, MCP79410::REG_SRAM + addr, data, dataLen);
   d5a26:	3420      	adds	r4, #32
   d5a28:	6868      	ldr	r0, [r5, #4]
   d5a2a:	9600      	str	r6, [sp, #0]
   d5a2c:	463b      	mov	r3, r7
   d5a2e:	b2e2      	uxtb	r2, r4
   d5a30:	216f      	movs	r1, #111	; 0x6f
   d5a32:	f7ff ffb1 	bl	d5998 <_ZN8MCP7941011deviceWriteEhhPKhj>
	return (stat == 0);
   d5a36:	fab0 f080 	clz	r0, r0
   d5a3a:	0940      	lsrs	r0, r0, #5
}
   d5a3c:	b002      	add	sp, #8
   d5a3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return false;
   d5a42:	2000      	movs	r0, #0
   d5a44:	e7fa      	b.n	d5a3c <_ZN12MCP79410SRAM9writeDataEjPKhj+0x30>

000d5a46 <_ZN8MCP7941018deviceWriteRTCTimeEhRK12MCP79410Time>:
int MCP79410::deviceWriteRTCTime(uint8_t addr, const MCP79410Time &time) {
   d5a46:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	buf[0] = time.rawSecond;
   d5a48:	7c13      	ldrb	r3, [r2, #16]
   d5a4a:	f88d 3008 	strb.w	r3, [sp, #8]
	buf[1] = time.rawMinute;
   d5a4e:	7bd3      	ldrb	r3, [r2, #15]
   d5a50:	f88d 3009 	strb.w	r3, [sp, #9]
	buf[2] = time.rawHour;
   d5a54:	7b93      	ldrb	r3, [r2, #14]
   d5a56:	f88d 300a 	strb.w	r3, [sp, #10]
	buf[3] = time.rawDayOfWeek;
   d5a5a:	7b53      	ldrb	r3, [r2, #13]
   d5a5c:	f88d 300b 	strb.w	r3, [sp, #11]
	buf[4] = time.rawDayOfMonth;
   d5a60:	7b13      	ldrb	r3, [r2, #12]
   d5a62:	f88d 300c 	strb.w	r3, [sp, #12]
	buf[5] = time.rawMonth;
   d5a66:	7ad3      	ldrb	r3, [r2, #11]
   d5a68:	f88d 300d 	strb.w	r3, [sp, #13]
	buf[6] = time.rawYear;
   d5a6c:	7a93      	ldrb	r3, [r2, #10]
   d5a6e:	f88d 300e 	strb.w	r3, [sp, #14]
	return deviceWrite(REG_I2C_ADDR, addr, buf, sizeof(buf));
   d5a72:	2307      	movs	r3, #7
   d5a74:	9300      	str	r3, [sp, #0]
   d5a76:	460a      	mov	r2, r1
   d5a78:	ab02      	add	r3, sp, #8
   d5a7a:	216f      	movs	r1, #111	; 0x6f
   d5a7c:	f7ff ff8c 	bl	d5998 <_ZN8MCP7941011deviceWriteEhhPKhj>
}
   d5a80:	b005      	add	sp, #20
   d5a82:	f85d fb04 	ldr.w	pc, [sp], #4

000d5a86 <_ZN8MCP7941010setRTCTimeEx>:
bool MCP79410::setRTCTime(time_t unixTime) {
   d5a86:	b510      	push	{r4, lr}
   d5a88:	b088      	sub	sp, #32
   d5a8a:	4604      	mov	r4, r0
	MCP79410Time time;
   d5a8c:	a803      	add	r0, sp, #12
bool MCP79410::setRTCTime(time_t unixTime) {
   d5a8e:	9301      	str	r3, [sp, #4]
	MCP79410Time time;
   d5a90:	f7ff fd68 	bl	d5564 <_ZN12MCP79410TimeC1Ev>
	time.fromUnixTime(unixTime);
   d5a94:	9b01      	ldr	r3, [sp, #4]
   d5a96:	a803      	add	r0, sp, #12
   d5a98:	f7ff fe27 	bl	d56ea <_ZN12MCP79410Time12fromUnixTimeEx>
	time.rawSecond |= REG_DATE_RTCSEC_ST;
   d5a9c:	f89d 301c 	ldrb.w	r3, [sp, #28]
	if (batteryEnable) {
   d5aa0:	7aa2      	ldrb	r2, [r4, #10]
	time.rawSecond |= REG_DATE_RTCSEC_ST;
   d5aa2:	f063 037f 	orn	r3, r3, #127	; 0x7f
   d5aa6:	f88d 301c 	strb.w	r3, [sp, #28]
	if (batteryEnable) {
   d5aaa:	f89d 3019 	ldrb.w	r3, [sp, #25]
   d5aae:	b16a      	cbz	r2, d5acc <_ZN8MCP7941010setRTCTimeEx+0x46>
		time.rawDayOfWeek |= REG_RTCWKDAY_VBATEN;
   d5ab0:	f043 0308 	orr.w	r3, r3, #8
	return deviceWriteRTCTime(REG_DATE_TIME, time) == 0;
   d5ab4:	aa03      	add	r2, sp, #12
   d5ab6:	2100      	movs	r1, #0
   d5ab8:	4620      	mov	r0, r4
   d5aba:	f88d 3019 	strb.w	r3, [sp, #25]
   d5abe:	f7ff ffc2 	bl	d5a46 <_ZN8MCP7941018deviceWriteRTCTimeEhRK12MCP79410Time>
}
   d5ac2:	fab0 f080 	clz	r0, r0
   d5ac6:	0940      	lsrs	r0, r0, #5
   d5ac8:	b008      	add	sp, #32
   d5aca:	bd10      	pop	{r4, pc}
		time.rawDayOfWeek &= ~REG_RTCWKDAY_VBATEN;
   d5acc:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
   d5ad0:	e7f0      	b.n	d5ab4 <_ZN8MCP7941010setRTCTimeEx+0x2e>
	...

000d5ad4 <_ZN8MCP7941015setRTCFromCloudEv>:
bool MCP79410::setRTCFromCloud() {
   d5ad4:	b5f0      	push	{r4, r5, r6, r7, lr}
   d5ad6:	b087      	sub	sp, #28
   d5ad8:	4605      	mov	r5, r0
	if (Time.isValid()) {
   d5ada:	f005 f835 	bl	dab48 <_ZN9TimeClass7isValidEv>
   d5ade:	4604      	mov	r4, r0
   d5ae0:	b1e8      	cbz	r0, d5b1e <_ZN8MCP7941015setRTCFromCloudEv+0x4a>
		time_t now = Time.now();
   d5ae2:	f005 f84e 	bl	dab82 <_ZN9TimeClass3nowEv>
   d5ae6:	17c7      	asrs	r7, r0, #31
		bResult = setRTCTime(now);
   d5ae8:	4602      	mov	r2, r0
		time_t now = Time.now();
   d5aea:	4606      	mov	r6, r0
		bResult = setRTCTime(now);
   d5aec:	463b      	mov	r3, r7
   d5aee:	4628      	mov	r0, r5
   d5af0:	f7ff ffc9 	bl	d5a86 <_ZN8MCP7941010setRTCTimeEx>
		log.info("set RTC from cloud %s", Time.format(now, TIME_FORMAT_DEFAULT).c_str());
   d5af4:	4b0c      	ldr	r3, [pc, #48]	; (d5b28 <_ZN8MCP7941015setRTCFromCloudEv+0x54>)
   d5af6:	490d      	ldr	r1, [pc, #52]	; (d5b2c <_ZN8MCP7941015setRTCFromCloudEv+0x58>)
   d5af8:	681b      	ldr	r3, [r3, #0]
   d5afa:	9300      	str	r3, [sp, #0]
   d5afc:	4632      	mov	r2, r6
   d5afe:	463b      	mov	r3, r7
		bResult = setRTCTime(now);
   d5b00:	4604      	mov	r4, r0
		log.info("set RTC from cloud %s", Time.format(now, TIME_FORMAT_DEFAULT).c_str());
   d5b02:	a802      	add	r0, sp, #8
   d5b04:	f004 ffde 	bl	daac4 <_ZN9TimeClass6formatExPKc>
   d5b08:	4809      	ldr	r0, [pc, #36]	; (d5b30 <_ZN8MCP7941015setRTCFromCloudEv+0x5c>)
   d5b0a:	9a02      	ldr	r2, [sp, #8]
   d5b0c:	4909      	ldr	r1, [pc, #36]	; (d5b34 <_ZN8MCP7941015setRTCFromCloudEv+0x60>)
   d5b0e:	f7fe fb4d 	bl	d41ac <_ZNK5spark6Logger4infoEPKcz>
   d5b12:	a802      	add	r0, sp, #8
   d5b14:	f004 fa04 	bl	d9f20 <_ZN6StringD1Ev>
}
   d5b18:	4620      	mov	r0, r4
   d5b1a:	b007      	add	sp, #28
   d5b1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		log.info("cloud time not valid");
   d5b1e:	4906      	ldr	r1, [pc, #24]	; (d5b38 <_ZN8MCP7941015setRTCFromCloudEv+0x64>)
   d5b20:	4803      	ldr	r0, [pc, #12]	; (d5b30 <_ZN8MCP7941015setRTCFromCloudEv+0x5c>)
   d5b22:	f7fe fb43 	bl	d41ac <_ZNK5spark6Logger4infoEPKcz>
   d5b26:	e7f7      	b.n	d5b18 <_ZN8MCP7941015setRTCFromCloudEv+0x44>
   d5b28:	2003debc 	.word	0x2003debc
   d5b2c:	2003e690 	.word	0x2003e690
   d5b30:	2003e458 	.word	0x2003e458
   d5b34:	000df07a 	.word	0x000df07a
   d5b38:	000df090 	.word	0x000df090

000d5b3c <_ZN8MCP794104loopEv>:
void MCP79410::loop() {
   d5b3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (!timeSet) {
   d5b3e:	7a45      	ldrb	r5, [r0, #9]
void MCP79410::loop() {
   d5b40:	4604      	mov	r4, r0
	if (!timeSet) {
   d5b42:	b99d      	cbnz	r5, d5b6c <_ZN8MCP794104loopEv+0x30>
		if (Time.isValid()) {
   d5b44:	f005 f800 	bl	dab48 <_ZN9TimeClass7isValidEv>
   d5b48:	b180      	cbz	r0, d5b6c <_ZN8MCP794104loopEv+0x30>
        tm = 0;
   d5b4a:	2200      	movs	r2, #0
   d5b4c:	2300      	movs	r3, #0
        return spark_sync_time_last(nullptr, &tm);
   d5b4e:	4669      	mov	r1, sp
   d5b50:	4628      	mov	r0, r5
        tm = 0;
   d5b52:	e9cd 2300 	strd	r2, r3, [sp]
        return spark_sync_time_last(nullptr, &tm);
   d5b56:	f001 ff81 	bl	d7a5c <spark_sync_time_last>
			if (lastSync != 0) {
   d5b5a:	b138      	cbz	r0, d5b6c <_ZN8MCP794104loopEv+0x30>
				if ((timeSyncMode & TIME_SYNC_CLOUD_TO_RTC) != 0) {
   d5b5c:	7ae3      	ldrb	r3, [r4, #11]
   d5b5e:	07db      	lsls	r3, r3, #31
   d5b60:	d502      	bpl.n	d5b68 <_ZN8MCP794104loopEv+0x2c>
					setRTCFromCloud();
   d5b62:	4620      	mov	r0, r4
   d5b64:	f7ff ffb6 	bl	d5ad4 <_ZN8MCP7941015setRTCFromCloudEv>
				timeSet = true;
   d5b68:	2301      	movs	r3, #1
   d5b6a:	7263      	strb	r3, [r4, #9]
}
   d5b6c:	b003      	add	sp, #12
   d5b6e:	bd30      	pop	{r4, r5, pc}

000d5b70 <_ZN8MCP7941013waitForEEPROMEv>:
	}

	return stat;
}

void MCP79410::waitForEEPROM() {
   d5b70:	b538      	push	{r3, r4, r5, lr}
   d5b72:	4604      	mov	r4, r0
   d5b74:	2532      	movs	r5, #50	; 0x32
	for(size_t tries = 0; tries < 50; tries++) {
		wire.beginTransmission(EEPROM_I2C_ADDR);
   d5b76:	6860      	ldr	r0, [r4, #4]
   d5b78:	2157      	movs	r1, #87	; 0x57
   d5b7a:	f002 fce6 	bl	d854a <_ZN7TwoWire17beginTransmissionEh>
		int stat = wire.endTransmission(true);
   d5b7e:	6860      	ldr	r0, [r4, #4]
   d5b80:	2101      	movs	r1, #1
   d5b82:	f002 fd01 	bl	d8588 <_ZN7TwoWire15endTransmissionEh>
		if (stat == 0) {
   d5b86:	b108      	cbz	r0, d5b8c <_ZN8MCP7941013waitForEEPROMEv+0x1c>
	for(size_t tries = 0; tries < 50; tries++) {
   d5b88:	3d01      	subs	r5, #1
   d5b8a:	d1f4      	bne.n	d5b76 <_ZN8MCP7941013waitForEEPROMEv+0x6>
			// log.trace("deviceWriteEEPROM got ack after %u tries", tries);
			break;
		}
	}
}
   d5b8c:	bd38      	pop	{r3, r4, r5, pc}
	...

000d5b90 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj>:
int MCP79410::deviceWriteEEPROM(uint8_t addr, const uint8_t *buf, size_t bufLen) {
   d5b90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5b94:	4604      	mov	r4, r0
   d5b96:	460f      	mov	r7, r1
   d5b98:	4616      	mov	r6, r2
   d5b9a:	eb02 0803 	add.w	r8, r2, r3
	while(offset < bufLen) {
   d5b9e:	45b0      	cmp	r8, r6
   d5ba0:	d020      	beq.n	d5be4 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x54>
		wire.beginTransmission(EEPROM_I2C_ADDR);
   d5ba2:	6860      	ldr	r0, [r4, #4]
   d5ba4:	2157      	movs	r1, #87	; 0x57
   d5ba6:	f002 fcd0 	bl	d854a <_ZN7TwoWire17beginTransmissionEh>
		wire.write(addr + offset);
   d5baa:	4639      	mov	r1, r7
   d5bac:	6860      	ldr	r0, [r4, #4]
   d5bae:	f7ff fb85 	bl	d52bc <_ZN7TwoWire5writeEj>
			wire.write(buf[ii + offset]);
   d5bb2:	6860      	ldr	r0, [r4, #4]
   d5bb4:	f816 1b01 	ldrb.w	r1, [r6], #1
   d5bb8:	6803      	ldr	r3, [r0, #0]
   d5bba:	689b      	ldr	r3, [r3, #8]
   d5bbc:	4798      	blx	r3
		stat = wire.endTransmission(true);
   d5bbe:	6860      	ldr	r0, [r4, #4]
   d5bc0:	2101      	movs	r1, #1
   d5bc2:	f002 fce1 	bl	d8588 <_ZN7TwoWire15endTransmissionEh>
		if (stat != 0) {
   d5bc6:	3701      	adds	r7, #1
   d5bc8:	4605      	mov	r5, r0
   d5bca:	b138      	cbz	r0, d5bdc <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x4c>
			log.info("deviceWriteEEPROM failed stat=%d", stat);
   d5bcc:	4602      	mov	r2, r0
   d5bce:	4906      	ldr	r1, [pc, #24]	; (d5be8 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x58>)
   d5bd0:	4806      	ldr	r0, [pc, #24]	; (d5bec <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x5c>)
   d5bd2:	f7fe faeb 	bl	d41ac <_ZNK5spark6Logger4infoEPKcz>
}
   d5bd6:	4628      	mov	r0, r5
   d5bd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		waitForEEPROM();
   d5bdc:	4620      	mov	r0, r4
   d5bde:	f7ff ffc7 	bl	d5b70 <_ZN8MCP7941013waitForEEPROMEv>
	while(offset < bufLen) {
   d5be2:	e7dc      	b.n	d5b9e <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0xe>
   d5be4:	2500      	movs	r5, #0
	return stat;
   d5be6:	e7f6      	b.n	d5bd6 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x46>
   d5be8:	000df0a5 	.word	0x000df0a5
   d5bec:	2003e458 	.word	0x2003e458

000d5bf0 <_ZN14MCP79410EEPROM9writeDataEjPKhj>:
bool MCP79410EEPROM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d5bf0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if ((addr + dataLen) > length()) {
   d5bf2:	18cf      	adds	r7, r1, r3
bool MCP79410EEPROM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d5bf4:	461e      	mov	r6, r3
	if ((addr + dataLen) > length()) {
   d5bf6:	6803      	ldr	r3, [r0, #0]
bool MCP79410EEPROM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d5bf8:	9201      	str	r2, [sp, #4]
	if ((addr + dataLen) > length()) {
   d5bfa:	689b      	ldr	r3, [r3, #8]
bool MCP79410EEPROM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d5bfc:	4604      	mov	r4, r0
   d5bfe:	460d      	mov	r5, r1
	if ((addr + dataLen) > length()) {
   d5c00:	4798      	blx	r3
   d5c02:	4287      	cmp	r7, r0
   d5c04:	d80a      	bhi.n	d5c1c <_ZN14MCP79410EEPROM9writeDataEjPKhj+0x2c>
	int stat = parent->deviceWriteEEPROM(addr, data, dataLen);
   d5c06:	9a01      	ldr	r2, [sp, #4]
   d5c08:	6860      	ldr	r0, [r4, #4]
   d5c0a:	4633      	mov	r3, r6
   d5c0c:	b2e9      	uxtb	r1, r5
   d5c0e:	f7ff ffbf 	bl	d5b90 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj>
	return (stat == 0);
   d5c12:	fab0 f080 	clz	r0, r0
   d5c16:	0940      	lsrs	r0, r0, #5
}
   d5c18:	b003      	add	sp, #12
   d5c1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return false;
   d5c1c:	2000      	movs	r0, #0
   d5c1e:	e7fb      	b.n	d5c18 <_ZN14MCP79410EEPROM9writeDataEjPKhj+0x28>

000d5c20 <_GLOBAL__sub_I__ZN18MCP79410MemoryBaseC2EP8MCP79410>:
        name_(name) {
   d5c20:	4b01      	ldr	r3, [pc, #4]	; (d5c28 <_GLOBAL__sub_I__ZN18MCP79410MemoryBaseC2EP8MCP79410+0x8>)
   d5c22:	4a02      	ldr	r2, [pc, #8]	; (d5c2c <_GLOBAL__sub_I__ZN18MCP79410MemoryBaseC2EP8MCP79410+0xc>)
   d5c24:	601a      	str	r2, [r3, #0]
}
   d5c26:	4770      	bx	lr
   d5c28:	2003e458 	.word	0x2003e458
   d5c2c:	000df0c6 	.word	0x000df0c6

000d5c30 <_ZNSt17_Function_handlerIFP11UbiProtocolvEPS2_E9_M_invokeERKSt9_Any_data>:

    public:
      static _Res
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      {
	return (*_Base::_M_get_pointer(__functor))(
   d5c30:	6803      	ldr	r3, [r0, #0]
   d5c32:	4718      	bx	r3

000d5c34 <_ZNSt14_Function_base13_Base_managerIPFP11UbiProtocolvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
	  switch (__op)
   d5c34:	2a01      	cmp	r2, #1
   d5c36:	d003      	beq.n	d5c40 <_ZNSt14_Function_base13_Base_managerIPFP11UbiProtocolvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0xc>
   d5c38:	2a02      	cmp	r2, #2
   d5c3a:	d003      	beq.n	d5c44 <_ZNSt14_Function_base13_Base_managerIPFP11UbiProtocolvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x10>
	}
   d5c3c:	2000      	movs	r0, #0
   d5c3e:	4770      	bx	lr
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d5c40:	6001      	str	r1, [r0, #0]
	      break;
   d5c42:	e7fb      	b.n	d5c3c <_ZNSt14_Function_base13_Base_managerIPFP11UbiProtocolvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x8>
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d5c44:	680b      	ldr	r3, [r1, #0]
   d5c46:	6003      	str	r3, [r0, #0]
	}
   d5c48:	e7f8      	b.n	d5c3c <_ZNSt14_Function_base13_Base_managerIPFP11UbiProtocolvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x8>
	...

000d5c4c <_Z10builderTcpv>:
  mapProtocol::iterator i = command_list.find(_iot_protocol);
  UbiProtocol* ubiBuilder = (i->second)();
  return ubiBuilder;
}

UbiProtocol* builderTcp() {
   d5c4c:	b513      	push	{r0, r1, r4, lr}
  UbiProtocol* tcpInstance = new UbiTCP(_host, UBIDOTS_TCP_PORT, USER_AGENT, _token);
   d5c4e:	201c      	movs	r0, #28
   d5c50:	f7fe fa21 	bl	d4096 <_Znwj>
   d5c54:	4604      	mov	r4, r0
   d5c56:	b148      	cbz	r0, d5c6c <_Z10builderTcpv+0x20>
   d5c58:	4b06      	ldr	r3, [pc, #24]	; (d5c74 <_Z10builderTcpv+0x28>)
   d5c5a:	4907      	ldr	r1, [pc, #28]	; (d5c78 <_Z10builderTcpv+0x2c>)
   d5c5c:	681b      	ldr	r3, [r3, #0]
   d5c5e:	9300      	str	r3, [sp, #0]
   d5c60:	6809      	ldr	r1, [r1, #0]
   d5c62:	4b06      	ldr	r3, [pc, #24]	; (d5c7c <_Z10builderTcpv+0x30>)
   d5c64:	f242 3234 	movw	r2, #9012	; 0x2334
   d5c68:	f000 fffa 	bl	d6c60 <_ZN6UbiTCPC1EPKciS1_S1_>
  return tcpInstance;
}
   d5c6c:	4620      	mov	r0, r4
   d5c6e:	b002      	add	sp, #8
   d5c70:	bd10      	pop	{r4, pc}
   d5c72:	bf00      	nop
   d5c74:	2003e4e4 	.word	0x2003e4e4
   d5c78:	2003e4e0 	.word	0x2003e4e0
   d5c7c:	000df138 	.word	0x000df138

000d5c80 <_Z11builderHttpv>:

UbiProtocol* builderHttp() {
   d5c80:	b513      	push	{r0, r1, r4, lr}
  UbiProtocol* httpInstance = new UbiHTTP(_host, UBIDOTS_HTTP_PORT, USER_AGENT, _token);
   d5c82:	2020      	movs	r0, #32
   d5c84:	f7fe fa07 	bl	d4096 <_Znwj>
   d5c88:	4604      	mov	r4, r0
   d5c8a:	b140      	cbz	r0, d5c9e <_Z11builderHttpv+0x1e>
   d5c8c:	4b05      	ldr	r3, [pc, #20]	; (d5ca4 <_Z11builderHttpv+0x24>)
   d5c8e:	4906      	ldr	r1, [pc, #24]	; (d5ca8 <_Z11builderHttpv+0x28>)
   d5c90:	681b      	ldr	r3, [r3, #0]
   d5c92:	9300      	str	r3, [sp, #0]
   d5c94:	6809      	ldr	r1, [r1, #0]
   d5c96:	4b05      	ldr	r3, [pc, #20]	; (d5cac <_Z11builderHttpv+0x2c>)
   d5c98:	2250      	movs	r2, #80	; 0x50
   d5c9a:	f000 fa15 	bl	d60c8 <_ZN7UbiHTTPC1EPKciS1_S1_>
  return httpInstance;
}
   d5c9e:	4620      	mov	r0, r4
   d5ca0:	b002      	add	sp, #8
   d5ca2:	bd10      	pop	{r4, pc}
   d5ca4:	2003e4e4 	.word	0x2003e4e4
   d5ca8:	2003e4e0 	.word	0x2003e4e0
   d5cac:	000df138 	.word	0x000df138

000d5cb0 <_Z10builderUdpv>:

UbiProtocol* builderUdp() {
   d5cb0:	b513      	push	{r0, r1, r4, lr}
  UbiProtocol* udpInstance = new UbiUDP(_host, UBIDOTS_TCP_PORT, USER_AGENT, _token);
   d5cb2:	201c      	movs	r0, #28
   d5cb4:	f7fe f9ef 	bl	d4096 <_Znwj>
   d5cb8:	4604      	mov	r4, r0
   d5cba:	b148      	cbz	r0, d5cd0 <_Z10builderUdpv+0x20>
   d5cbc:	4b06      	ldr	r3, [pc, #24]	; (d5cd8 <_Z10builderUdpv+0x28>)
   d5cbe:	4907      	ldr	r1, [pc, #28]	; (d5cdc <_Z10builderUdpv+0x2c>)
   d5cc0:	681b      	ldr	r3, [r3, #0]
   d5cc2:	9300      	str	r3, [sp, #0]
   d5cc4:	6809      	ldr	r1, [r1, #0]
   d5cc6:	4b06      	ldr	r3, [pc, #24]	; (d5ce0 <_Z10builderUdpv+0x30>)
   d5cc8:	f242 3234 	movw	r2, #9012	; 0x2334
   d5ccc:	f001 fb26 	bl	d731c <_ZN6UbiUDPC1EPKciS1_S1_>
  return udpInstance;
}
   d5cd0:	4620      	mov	r0, r4
   d5cd2:	b002      	add	sp, #8
   d5cd4:	bd10      	pop	{r4, pc}
   d5cd6:	bf00      	nop
   d5cd8:	2003e4e4 	.word	0x2003e4e4
   d5cdc:	2003e4e0 	.word	0x2003e4e0
   d5ce0:	000df138 	.word	0x000df138

000d5ce4 <_Z15builderParticlev>:

UbiProtocol* builderParticle() {
   d5ce4:	b513      	push	{r0, r1, r4, lr}
  UbiProtocol* particleInstance = new UbiParticle(_host, NULL, NULL, _token);
   d5ce6:	2014      	movs	r0, #20
   d5ce8:	f7fe f9d5 	bl	d4096 <_Znwj>
   d5cec:	4604      	mov	r4, r0
   d5cee:	b140      	cbz	r0, d5d02 <_Z15builderParticlev+0x1e>
   d5cf0:	4b05      	ldr	r3, [pc, #20]	; (d5d08 <_Z15builderParticlev+0x24>)
   d5cf2:	4906      	ldr	r1, [pc, #24]	; (d5d0c <_Z15builderParticlev+0x28>)
   d5cf4:	681b      	ldr	r3, [r3, #0]
   d5cf6:	9300      	str	r3, [sp, #0]
   d5cf8:	2300      	movs	r3, #0
   d5cfa:	6809      	ldr	r1, [r1, #0]
   d5cfc:	461a      	mov	r2, r3
   d5cfe:	f000 fd03 	bl	d6708 <_ZN11UbiParticleC1EPKciS1_S1_>
  return particleInstance;
}
   d5d02:	4620      	mov	r0, r4
   d5d04:	b002      	add	sp, #8
   d5d06:	bd10      	pop	{r4, pc}
   d5d08:	2003e4e4 	.word	0x2003e4e4
   d5d0c:	2003e4e0 	.word	0x2003e4e0

000d5d10 <_ZNSt8functionIFP11UbiProtocolvEEaSIPS2_EENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSB_JEEEE5valueERS3_E4typeEOS9_.isra.0>:
       *  If @a __f is a non-NULL function pointer or an object of type @c
       *  reference_wrapper<F>, this function will not throw.
       */
      template<typename _Functor>
	_Requires<_Callable<typename decay<_Functor>::type>, function&>
	operator=(_Functor&& __f)
   d5d10:	b510      	push	{r4, lr}
   d5d12:	b086      	sub	sp, #24
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5d14:	ab02      	add	r3, sp, #8
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d5d16:	9102      	str	r1, [sp, #8]
	operator=(_Functor&& __f)
   d5d18:	4604      	mov	r4, r0
   d5d1a:	e893 0003 	ldmia.w	r3, {r0, r1}
   d5d1e:	466a      	mov	r2, sp
   d5d20:	e882 0003 	stmia.w	r2, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d5d24:	e894 0003 	ldmia.w	r4, {r0, r1}
   d5d28:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d5d2c:	e892 0003 	ldmia.w	r2, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d5d30:	68a2      	ldr	r2, [r4, #8]
   d5d32:	9204      	str	r2, [sp, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d5d34:	4a06      	ldr	r2, [pc, #24]	; (d5d50 <_ZNSt8functionIFP11UbiProtocolvEEaSIPS2_EENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSB_JEEEE5valueERS3_E4typeEOS9_.isra.0+0x40>)
   d5d36:	60a2      	str	r2, [r4, #8]
      __a = _GLIBCXX_MOVE(__b);
   d5d38:	68e2      	ldr	r2, [r4, #12]
   d5d3a:	9205      	str	r2, [sp, #20]
      __b = _GLIBCXX_MOVE(__tmp);
   d5d3c:	4a05      	ldr	r2, [pc, #20]	; (d5d54 <_ZNSt8functionIFP11UbiProtocolvEEaSIPS2_EENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSB_JEEEE5valueERS3_E4typeEOS9_.isra.0+0x44>)
   d5d3e:	60e2      	str	r2, [r4, #12]
   d5d40:	e884 0003 	stmia.w	r4, {r0, r1}
    class function<_Res(_ArgTypes...)>
   d5d44:	4618      	mov	r0, r3
   d5d46:	f7ff fa8f 	bl	d5268 <_ZNSt14_Function_baseD1Ev>
	{
	  function(std::forward<_Functor>(__f)).swap(*this);
	  return *this;
	}
   d5d4a:	4620      	mov	r0, r4
   d5d4c:	b006      	add	sp, #24
   d5d4e:	bd10      	pop	{r4, pc}
   d5d50:	000d5c35 	.word	0x000d5c35
   d5d54:	000d5c31 	.word	0x000d5c31

000d5d58 <_ZN10UbiBuilder7builderEv>:
UbiProtocol* UbiBuilder::builder() {
   d5d58:	b570      	push	{r4, r5, r6, lr}
	  (this->_M_impl._M_header._M_parent);
      }

      _Base_ptr
      _M_end() _GLIBCXX_NOEXCEPT
      { return &this->_M_impl._M_header; }
   d5d5a:	f100 0108 	add.w	r1, r0, #8
    typename _Rb_tree<_Key, _Val, _KeyOfValue,
		      _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    find(const _Key& __k)
    {
      iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
   d5d5e:	68c2      	ldr	r2, [r0, #12]
      { return &this->_M_impl._M_header; }
   d5d60:	460b      	mov	r3, r1
      while (__x != 0)
   d5d62:	b13a      	cbz	r2, d5d74 <_ZN10UbiBuilder7builderEv+0x1c>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
   d5d64:	7c15      	ldrb	r5, [r2, #16]
   d5d66:	7804      	ldrb	r4, [r0, #0]
   d5d68:	42a5      	cmp	r5, r4
   d5d6a:	bf2a      	itet	cs
   d5d6c:	4613      	movcs	r3, r2
	  __x = _S_right(__x);
   d5d6e:	68d2      	ldrcc	r2, [r2, #12]
	  __y = __x, __x = _S_left(__x);
   d5d70:	6892      	ldrcs	r2, [r2, #8]
   d5d72:	e7f6      	b.n	d5d62 <_ZN10UbiBuilder7builderEv+0xa>
      return (__j == end()
	      || _M_impl._M_key_compare(__k,
					_S_key(__j._M_node))) ? end() : __j;
   d5d74:	4299      	cmp	r1, r3
   d5d76:	d004      	beq.n	d5d82 <_ZN10UbiBuilder7builderEv+0x2a>
	      || _M_impl._M_key_compare(__k,
   d5d78:	7800      	ldrb	r0, [r0, #0]
   d5d7a:	7c1a      	ldrb	r2, [r3, #16]
   d5d7c:	4290      	cmp	r0, r2
   d5d7e:	bf38      	it	cc
   d5d80:	460b      	movcc	r3, r1
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5d82:	69da      	ldr	r2, [r3, #28]
   d5d84:	b90a      	cbnz	r2, d5d8a <_ZN10UbiBuilder7builderEv+0x32>
	__throw_bad_function_call();
   d5d86:	f005 fdc9 	bl	db91c <_ZSt25__throw_bad_function_callv>
}
   d5d8a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5d8e:	6a1a      	ldr	r2, [r3, #32]
   d5d90:	f103 0014 	add.w	r0, r3, #20
   d5d94:	4710      	bx	r2

000d5d96 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   d5d96:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
   d5d98:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   d5d9a:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   d5d9c:	b17c      	cbz	r4, d5dbe <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   d5d9e:	6863      	ldr	r3, [r4, #4]
   d5da0:	3b01      	subs	r3, #1
   d5da2:	6063      	str	r3, [r4, #4]
   d5da4:	b95b      	cbnz	r3, d5dbe <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   d5da6:	6823      	ldr	r3, [r4, #0]
   d5da8:	4620      	mov	r0, r4
   d5daa:	689b      	ldr	r3, [r3, #8]
   d5dac:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d5dae:	68a3      	ldr	r3, [r4, #8]
   d5db0:	3b01      	subs	r3, #1
   d5db2:	60a3      	str	r3, [r4, #8]
   d5db4:	b91b      	cbnz	r3, d5dbe <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d5db6:	6823      	ldr	r3, [r4, #0]
   d5db8:	4620      	mov	r0, r4
   d5dba:	68db      	ldr	r3, [r3, #12]
   d5dbc:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   d5dbe:	4628      	mov	r0, r5
   d5dc0:	bd38      	pop	{r3, r4, r5, pc}

000d5dc2 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_>:
      _Link_type __x = _M_begin();
   d5dc2:	688b      	ldr	r3, [r1, #8]
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   d5dc4:	b570      	push	{r4, r5, r6, lr}
   d5dc6:	4616      	mov	r6, r2
   d5dc8:	4604      	mov	r4, r0
      { return &this->_M_impl._M_header; }
   d5dca:	1d0d      	adds	r5, r1, #4
      bool __comp = true;
   d5dcc:	2201      	movs	r2, #1
      while (__x != 0)
   d5dce:	b15b      	cbz	r3, d5de8 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_+0x26>
	  __x = __comp ? _S_left(__x) : _S_right(__x);
   d5dd0:	7830      	ldrb	r0, [r6, #0]
   d5dd2:	7c1a      	ldrb	r2, [r3, #16]
   d5dd4:	4290      	cmp	r0, r2
   d5dd6:	bf34      	ite	cc
   d5dd8:	6898      	ldrcc	r0, [r3, #8]
   d5dda:	68d8      	ldrcs	r0, [r3, #12]
   d5ddc:	461d      	mov	r5, r3
   d5dde:	bf34      	ite	cc
   d5de0:	2201      	movcc	r2, #1
   d5de2:	2200      	movcs	r2, #0
   d5de4:	4603      	mov	r3, r0
   d5de6:	e7f2      	b.n	d5dce <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_+0xc>
      if (__comp)
   d5de8:	b192      	cbz	r2, d5e10 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_+0x4e>
	  if (__j == begin())
   d5dea:	68ca      	ldr	r2, [r1, #12]
   d5dec:	42aa      	cmp	r2, r5
   d5dee:	d103      	bne.n	d5df8 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_+0x36>
			   _MoveConstructiblePair<_U1, _U2>()
			  && _PCCP::template
			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
	constexpr pair(_U1&& __x, _U2&& __y)
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
   d5df0:	e9c4 3500 	strd	r3, r5, [r4]
    }
   d5df4:	4620      	mov	r0, r4
   d5df6:	bd70      	pop	{r4, r5, r6, pc}
	_M_node = _Rb_tree_decrement(_M_node);
   d5df8:	4628      	mov	r0, r5
   d5dfa:	f005 fd31 	bl	db860 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
   d5dfe:	7833      	ldrb	r3, [r6, #0]
   d5e00:	7c02      	ldrb	r2, [r0, #16]
   d5e02:	429a      	cmp	r2, r3
   d5e04:	f04f 0300 	mov.w	r3, #0
   d5e08:	d3f2      	bcc.n	d5df0 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_+0x2e>
       : first(std::forward<_U1>(__x)), second(__y) { }
   d5e0a:	e9c4 0300 	strd	r0, r3, [r4]
   d5e0e:	e7f1      	b.n	d5df4 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_+0x32>
   d5e10:	4628      	mov	r0, r5
   d5e12:	e7f4      	b.n	d5dfe <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_+0x3c>

000d5e14 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_>:
	return (*__i).second;
      }

#if __cplusplus >= 201103L
      mapped_type&
      operator[](key_type&& __k)
   d5e14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
      { return &this->_M_impl._M_header; }
   d5e18:	f100 0804 	add.w	r8, r0, #4
      { return _M_lower_bound(_M_begin(), _M_end(), __k); }
   d5e1c:	6885      	ldr	r5, [r0, #8]
   d5e1e:	b085      	sub	sp, #20
   d5e20:	4606      	mov	r6, r0
   d5e22:	4689      	mov	r9, r1
      { return &this->_M_impl._M_header; }
   d5e24:	4644      	mov	r4, r8
      while (__x != 0)
   d5e26:	b155      	cbz	r5, d5e3e <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x2a>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
   d5e28:	f899 3000 	ldrb.w	r3, [r9]
   d5e2c:	7c2a      	ldrb	r2, [r5, #16]
   d5e2e:	429a      	cmp	r2, r3
	  __x = _S_right(__x);
   d5e30:	bf36      	itet	cc
   d5e32:	68eb      	ldrcc	r3, [r5, #12]
	  __y = __x, __x = _S_left(__x);
   d5e34:	68ab      	ldrcs	r3, [r5, #8]
	  __x = _S_right(__x);
   d5e36:	4625      	movcc	r5, r4
   d5e38:	462c      	mov	r4, r5
   d5e3a:	461d      	mov	r5, r3
   d5e3c:	e7f3      	b.n	d5e26 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x12>
	// concept requirements
	__glibcxx_function_requires(_DefaultConstructibleConcept<mapped_type>)

	iterator __i = lower_bound(__k);
	// __i->first is greater than or equivalent to __k.
	if (__i == end() || key_comp()(__k, (*__i).first))
   d5e3e:	45a0      	cmp	r8, r4
   d5e40:	d004      	beq.n	d5e4c <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x38>
   d5e42:	f899 2000 	ldrb.w	r2, [r9]
   d5e46:	7c23      	ldrb	r3, [r4, #16]
   d5e48:	429a      	cmp	r2, r3
   d5e4a:	d22e      	bcs.n	d5eaa <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x96>
	  {
	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
	  }
#endif
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d5e4c:	2024      	movs	r0, #36	; 0x24
   d5e4e:	f7fe f922 	bl	d4096 <_Znwj>
      inline
      pair<_T1, _T2>::
      pair(tuple<_Args1...>& __tuple1, tuple<_Args2...>& __tuple2,
	   _Index_tuple<_Indexes1...>, _Index_tuple<_Indexes2...>)
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
        second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
   d5e52:	f899 9000 	ldrb.w	r9, [r9]
   d5e56:	f880 9010 	strb.w	r9, [r0, #16]
    _Function_base() : _M_manager(nullptr) { }
   d5e5a:	2300      	movs	r3, #0
      if (__pos._M_node == _M_end())
   d5e5c:	45a0      	cmp	r8, r4
   d5e5e:	4607      	mov	r7, r0
      // Can be used to avoid value-initialization zeroing _M_storage.
      __aligned_membuf(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      { return static_cast<void*>(&_M_storage); }
   d5e60:	f100 0210 	add.w	r2, r0, #16
   d5e64:	61c3      	str	r3, [r0, #28]
   d5e66:	d125      	bne.n	d5eb4 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0xa0>
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
   d5e68:	6973      	ldr	r3, [r6, #20]
   d5e6a:	b11b      	cbz	r3, d5e74 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x60>
   d5e6c:	6931      	ldr	r1, [r6, #16]
   d5e6e:	7c0b      	ldrb	r3, [r1, #16]
   d5e70:	454b      	cmp	r3, r9
   d5e72:	d309      	bcc.n	d5e88 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x74>
	    return _M_get_insert_unique_pos(__k);
   d5e74:	4631      	mov	r1, r6
   d5e76:	a802      	add	r0, sp, #8
   d5e78:	f7ff ffa3 	bl	d5dc2 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_>
   d5e7c:	e9dd 4102 	ldrd	r4, r1, [sp, #8]
	    if (__res.second)
   d5e80:	2900      	cmp	r1, #0
   d5e82:	d051      	beq.n	d5f28 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x114>
			    || _M_impl._M_key_compare(_S_key(__z),
   d5e84:	2c00      	cmp	r4, #0
   d5e86:	d14d      	bne.n	d5f24 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x110>
      bool __insert_left = (__x != 0 || __p == _M_end()
   d5e88:	4588      	cmp	r8, r1
   d5e8a:	d04b      	beq.n	d5f24 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x110>
			    || _M_impl._M_key_compare(_S_key(__z),
   d5e8c:	7c38      	ldrb	r0, [r7, #16]
   d5e8e:	7c0b      	ldrb	r3, [r1, #16]
   d5e90:	4298      	cmp	r0, r3
   d5e92:	bf2c      	ite	cs
   d5e94:	2000      	movcs	r0, #0
   d5e96:	2001      	movcc	r0, #1
      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
   d5e98:	4643      	mov	r3, r8
   d5e9a:	460a      	mov	r2, r1
   d5e9c:	4639      	mov	r1, r7
   d5e9e:	f005 fce1 	bl	db864 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
      ++_M_impl._M_node_count;
   d5ea2:	6973      	ldr	r3, [r6, #20]
   d5ea4:	3301      	adds	r3, #1
   d5ea6:	6173      	str	r3, [r6, #20]
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
   d5ea8:	463c      	mov	r4, r7
					std::forward_as_tuple(std::move(__k)),
					std::tuple<>());
	return (*__i).second;
      }
   d5eaa:	f104 0014 	add.w	r0, r4, #20
   d5eae:	b005      	add	sp, #20
   d5eb0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
   d5eb4:	7c23      	ldrb	r3, [r4, #16]
   d5eb6:	9201      	str	r2, [sp, #4]
   d5eb8:	454b      	cmp	r3, r9
   d5eba:	d918      	bls.n	d5eee <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0xda>
	  if (__pos._M_node == _M_leftmost()) // begin()
   d5ebc:	68f3      	ldr	r3, [r6, #12]
   d5ebe:	429c      	cmp	r4, r3
   d5ec0:	d009      	beq.n	d5ed6 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0xc2>
	_M_node = _Rb_tree_decrement(_M_node);
   d5ec2:	4620      	mov	r0, r4
   d5ec4:	f005 fccc 	bl	db860 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
   d5ec8:	7c03      	ldrb	r3, [r0, #16]
   d5eca:	9a01      	ldr	r2, [sp, #4]
   d5ecc:	454b      	cmp	r3, r9
   d5ece:	d205      	bcs.n	d5edc <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0xc8>
	      if (_S_right(__before._M_node) == 0)
   d5ed0:	68c3      	ldr	r3, [r0, #12]
   d5ed2:	b953      	cbnz	r3, d5eea <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0xd6>
   d5ed4:	4604      	mov	r4, r0
       : first(__x), second(std::forward<_U2>(__y)) { }
   d5ed6:	4621      	mov	r1, r4
   d5ed8:	461c      	mov	r4, r3
   d5eda:	e7d1      	b.n	d5e80 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x6c>
	    return _M_get_insert_unique_pos(__k);
   d5edc:	4631      	mov	r1, r6
   d5ede:	a802      	add	r0, sp, #8
   d5ee0:	f7ff ff6f 	bl	d5dc2 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_>
   d5ee4:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
   d5ee8:	e7f5      	b.n	d5ed6 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0xc2>
   d5eea:	4623      	mov	r3, r4
   d5eec:	e7f3      	b.n	d5ed6 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0xc2>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
   d5eee:	d21b      	bcs.n	d5f28 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x114>
	  if (__pos._M_node == _M_rightmost())
   d5ef0:	6931      	ldr	r1, [r6, #16]
   d5ef2:	428c      	cmp	r4, r1
   d5ef4:	d00b      	beq.n	d5f0e <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0xfa>
	_M_node = _Rb_tree_increment(_M_node);
   d5ef6:	4620      	mov	r0, r4
   d5ef8:	f005 fc9f 	bl	db83a <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
   d5efc:	7c03      	ldrb	r3, [r0, #16]
   d5efe:	9a01      	ldr	r2, [sp, #4]
   d5f00:	454b      	cmp	r3, r9
	_M_node = _Rb_tree_increment(_M_node);
   d5f02:	4605      	mov	r5, r0
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
   d5f04:	d905      	bls.n	d5f12 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0xfe>
	      if (_S_right(__pos._M_node) == 0)
   d5f06:	68e3      	ldr	r3, [r4, #12]
   d5f08:	b953      	cbnz	r3, d5f20 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x10c>
   d5f0a:	4621      	mov	r1, r4
   d5f0c:	461d      	mov	r5, r3
   d5f0e:	462c      	mov	r4, r5
   d5f10:	e7b6      	b.n	d5e80 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x6c>
	    return _M_get_insert_unique_pos(__k);
   d5f12:	4631      	mov	r1, r6
   d5f14:	a802      	add	r0, sp, #8
   d5f16:	f7ff ff54 	bl	d5dc2 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE24_M_get_insert_unique_posERS2_>
   d5f1a:	e9dd 5102 	ldrd	r5, r1, [sp, #8]
   d5f1e:	e7f6      	b.n	d5f0e <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0xfa>
   d5f20:	4601      	mov	r1, r0
   d5f22:	e7f4      	b.n	d5f0e <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0xfa>
			    || _M_impl._M_key_compare(_S_key(__z),
   d5f24:	2001      	movs	r0, #1
   d5f26:	e7b7      	b.n	d5e98 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x84>
    class function<_Res(_ArgTypes...)>
   d5f28:	f107 0014 	add.w	r0, r7, #20
   d5f2c:	f7ff f99c 	bl	d5268 <_ZNSt14_Function_baseD1Ev>
	  {
	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p);
   d5f30:	4638      	mov	r0, r7
   d5f32:	f7fe f8b4 	bl	d409e <_ZdlPv>
   d5f36:	4627      	mov	r7, r4
   d5f38:	e7b6      	b.n	d5ea8 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_+0x94>
	...

000d5f3c <_ZN10UbiBuilderC1EPKcS1_11IotProtocol>:
UbiBuilder::UbiBuilder(const char* host, const char* token, IotProtocol iot_protocol) {
   d5f3c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d5f40:	1d05      	adds	r5, r0, #4
      _M_header._M_color = _S_red;
   d5f42:	2600      	movs	r6, #0
   d5f44:	4617      	mov	r7, r2
	  : _Node_allocator()
   d5f46:	f100 0208 	add.w	r2, r0, #8
      _M_header._M_left = &_M_header;
   d5f4a:	e9c0 6203 	strd	r6, r2, [r0, #12]
      _M_node_count = 0;
   d5f4e:	e9c0 2605 	strd	r2, r6, [r0, #20]
   d5f52:	4604      	mov	r4, r0
   d5f54:	4688      	mov	r8, r1
      _M_header._M_color = _S_red;
   d5f56:	7206      	strb	r6, [r0, #8]
  _iot_protocol = iot_protocol;
   d5f58:	7003      	strb	r3, [r0, #0]
  command_list[UBI_TCP] = &builderTcp;
   d5f5a:	f10d 0107 	add.w	r1, sp, #7
   d5f5e:	2301      	movs	r3, #1
   d5f60:	4628      	mov	r0, r5
   d5f62:	f88d 3007 	strb.w	r3, [sp, #7]
   d5f66:	f7ff ff55 	bl	d5e14 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_>
   d5f6a:	4916      	ldr	r1, [pc, #88]	; (d5fc4 <_ZN10UbiBuilderC1EPKcS1_11IotProtocol+0x88>)
   d5f6c:	f7ff fed0 	bl	d5d10 <_ZNSt8functionIFP11UbiProtocolvEEaSIPS2_EENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSB_JEEEE5valueERS3_E4typeEOS9_.isra.0>
  command_list[UBI_HTTP] = &builderHttp;
   d5f70:	f10d 0107 	add.w	r1, sp, #7
   d5f74:	4628      	mov	r0, r5
   d5f76:	f88d 6007 	strb.w	r6, [sp, #7]
   d5f7a:	f7ff ff4b 	bl	d5e14 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_>
   d5f7e:	4912      	ldr	r1, [pc, #72]	; (d5fc8 <_ZN10UbiBuilderC1EPKcS1_11IotProtocol+0x8c>)
   d5f80:	f7ff fec6 	bl	d5d10 <_ZNSt8functionIFP11UbiProtocolvEEaSIPS2_EENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSB_JEEEE5valueERS3_E4typeEOS9_.isra.0>
  command_list[UBI_UDP] = &builderUdp;
   d5f84:	2302      	movs	r3, #2
   d5f86:	f10d 0107 	add.w	r1, sp, #7
   d5f8a:	4628      	mov	r0, r5
   d5f8c:	f88d 3007 	strb.w	r3, [sp, #7]
   d5f90:	f7ff ff40 	bl	d5e14 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_>
   d5f94:	490d      	ldr	r1, [pc, #52]	; (d5fcc <_ZN10UbiBuilderC1EPKcS1_11IotProtocol+0x90>)
   d5f96:	f7ff febb 	bl	d5d10 <_ZNSt8functionIFP11UbiProtocolvEEaSIPS2_EENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSB_JEEEE5valueERS3_E4typeEOS9_.isra.0>
  command_list[UBI_PARTICLE] = &builderParticle;
   d5f9a:	2303      	movs	r3, #3
   d5f9c:	f10d 0107 	add.w	r1, sp, #7
   d5fa0:	4628      	mov	r0, r5
   d5fa2:	f88d 3007 	strb.w	r3, [sp, #7]
   d5fa6:	f7ff ff35 	bl	d5e14 <_ZNSt3mapI11IotProtocolSt8functionIFP11UbiProtocolvEESt4lessIS0_ESaISt4pairIKS0_S5_EEEixEOS0_>
   d5faa:	4909      	ldr	r1, [pc, #36]	; (d5fd0 <_ZN10UbiBuilderC1EPKcS1_11IotProtocol+0x94>)
   d5fac:	f7ff feb0 	bl	d5d10 <_ZNSt8functionIFP11UbiProtocolvEEaSIPS2_EENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSB_JEEEE5valueERS3_E4typeEOS9_.isra.0>
  _host = host;
   d5fb0:	4b08      	ldr	r3, [pc, #32]	; (d5fd4 <_ZN10UbiBuilderC1EPKcS1_11IotProtocol+0x98>)
   d5fb2:	f8c3 8000 	str.w	r8, [r3]
  _token = token;
   d5fb6:	4b08      	ldr	r3, [pc, #32]	; (d5fd8 <_ZN10UbiBuilderC1EPKcS1_11IotProtocol+0x9c>)
}
   d5fb8:	4620      	mov	r0, r4
  _token = token;
   d5fba:	601f      	str	r7, [r3, #0]
}
   d5fbc:	b002      	add	sp, #8
   d5fbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5fc2:	bf00      	nop
   d5fc4:	000d5c4d 	.word	0x000d5c4d
   d5fc8:	000d5c81 	.word	0x000d5c81
   d5fcc:	000d5cb1 	.word	0x000d5cb1
   d5fd0:	000d5ce5 	.word	0x000d5ce5
   d5fd4:	2003e4e0 	.word	0x2003e4e0
   d5fd8:	2003e4e4 	.word	0x2003e4e4

000d5fdc <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol>:
}
   d5fdc:	b508      	push	{r3, lr}
#define _UbiHttp_H_

#include "UbiConstants.h"
#include "UbiProtocol.h"

static TCPClient _client_http_ubi;
   d5fde:	4805      	ldr	r0, [pc, #20]	; (d5ff4 <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol+0x18>)
   d5fe0:	f004 fc2a 	bl	da838 <_ZN9TCPClientC1Ev>
#include <map>

#include "UbiConstants.h"
#include "UbiProtocol.h"

static TCPClient _client_tcp_ubi;
   d5fe4:	4804      	ldr	r0, [pc, #16]	; (d5ff8 <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol+0x1c>)
   d5fe6:	f004 fc27 	bl	da838 <_ZN9TCPClientC1Ev>
   d5fea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
#define _UbiUdp_H_

#include "UbiConstants.h"
#include "UbiProtocol.h"

static UDP _client_udp_ubi;
   d5fee:	4803      	ldr	r0, [pc, #12]	; (d5ffc <_GLOBAL__sub_I__ZN10UbiBuilderC2EPKcS1_11IotProtocol+0x20>)
   d5ff0:	f005 b82a 	b.w	db048 <_ZN3UDPC1Ev>
   d5ff4:	2003e4c4 	.word	0x2003e4c4
   d5ff8:	2003e45c 	.word	0x2003e45c
   d5ffc:	2003e478 	.word	0x2003e478

000d6000 <_ZN7UbiHTTP8setDebugEb>:

/**
 * Makes available debug traces
 */

void UbiHTTP::setDebug(bool debug) { _debug = debug; }
   d6000:	7501      	strb	r1, [r0, #20]
   d6002:	4770      	bx	lr

000d6004 <_ZN7UbiHTTP17getMultipleValuesEPKcS1_>:
   d6004:	2200      	movs	r2, #0
	  : _Node_allocator()
   d6006:	1d01      	adds	r1, r0, #4
      _M_header._M_left = &_M_header;
   d6008:	e9c0 2102 	strd	r2, r1, [r0, #8]
      _M_node_count = 0;
   d600c:	e9c0 1204 	strd	r1, r2, [r0, #16]
      _M_header._M_color = _S_red;
   d6010:	7102      	strb	r2, [r0, #4]

tcpMap UbiHTTP::getMultipleValues(const char* deviceLabel, const char* variableLabels) {
  tcpMap results;
  return results;
}
   d6012:	4770      	bx	lr

000d6014 <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.0>:
float UbiHTTP::parseHttpAnswer(const char* request_type, char* data) {
   d6014:	b570      	push	{r4, r5, r6, lr}
   d6016:	4606      	mov	r6, r0
   d6018:	ed2d 8b02 	vpush	{d8}
    char* parsed = (char*)malloc(sizeof(char) * 20);
   d601c:	2014      	movs	r0, #20
   d601e:	f001 fd8d 	bl	d7b3c <malloc>
   d6022:	4605      	mov	r5, r0
    char* dst = (char*)malloc(sizeof(char) * 20);
   d6024:	2014      	movs	r0, #20
   d6026:	f001 fd89 	bl	d7b3c <malloc>
   d602a:	4604      	mov	r4, r0
    int len = strlen(data);  // Length of the answer char array from the server
   d602c:	4630      	mov	r0, r6
   d602e:	f006 fcfc 	bl	dca2a <strlen>
    for (int i = 0; i < len - 2; i++) {
   d6032:	4632      	mov	r2, r6
   d6034:	2300      	movs	r3, #0
   d6036:	3802      	subs	r0, #2
   d6038:	4298      	cmp	r0, r3
   d603a:	dd14      	ble.n	d6066 <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.0+0x52>
      if ((data[i] == '\r') && (data[i + 1] == '\n') && (data[i + 2] == '\r') && (data[i + 3] == '\n')) {
   d603c:	f812 1b01 	ldrb.w	r1, [r2], #1
   d6040:	290d      	cmp	r1, #13
   d6042:	d13a      	bne.n	d60ba <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.0+0xa6>
   d6044:	7811      	ldrb	r1, [r2, #0]
   d6046:	290a      	cmp	r1, #10
   d6048:	d137      	bne.n	d60ba <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.0+0xa6>
   d604a:	7851      	ldrb	r1, [r2, #1]
   d604c:	290d      	cmp	r1, #13
   d604e:	d134      	bne.n	d60ba <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.0+0xa6>
   d6050:	7891      	ldrb	r1, [r2, #2]
   d6052:	290a      	cmp	r1, #10
   d6054:	d131      	bne.n	d60ba <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.0+0xa6>
        strncpy(parsed, data + i + 4, 20);  // Copies the result to the parsed
   d6056:	3304      	adds	r3, #4
   d6058:	18f1      	adds	r1, r6, r3
   d605a:	2214      	movs	r2, #20
   d605c:	4628      	mov	r0, r5
   d605e:	f006 fcfe 	bl	dca5e <strncpy>
        parsed[20] = '\0';
   d6062:	2300      	movs	r3, #0
   d6064:	752b      	strb	r3, [r5, #20]
    char* pch = strchr(parsed, '\n');
   d6066:	210a      	movs	r1, #10
   d6068:	4628      	mov	r0, r5
   d606a:	f006 fc97 	bl	dc99c <strchr>
    if (pch == NULL) {
   d606e:	4606      	mov	r6, r0
   d6070:	b328      	cbz	r0, d60be <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.0+0xaa>
    char* pch2 = strchr(pch + 1, '\n');
   d6072:	210a      	movs	r1, #10
   d6074:	3001      	adds	r0, #1
   d6076:	f006 fc91 	bl	dc99c <strchr>
    if (pch2 == NULL) {
   d607a:	b300      	cbz	r0, d60be <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.0+0xaa>
    sprintf(dst, "%s", pch);
   d607c:	4631      	mov	r1, r6
   d607e:	4620      	mov	r0, r4
   d6080:	f006 fcad 	bl	dc9de <strcpy>
    dst[strlen(dst) - 1] = '\0';
   d6084:	4620      	mov	r0, r4
   d6086:	f006 fcd0 	bl	dca2a <strlen>
   d608a:	4420      	add	r0, r4
   d608c:	2300      	movs	r3, #0
   d608e:	f800 3c01 	strb.w	r3, [r0, #-1]
    float result = atof(dst);
   d6092:	4620      	mov	r0, r4
   d6094:	f006 fc18 	bl	dc8c8 <atof>
   d6098:	ec51 0b10 	vmov	r0, r1, d0
   d609c:	f006 f9ca 	bl	dc434 <__aeabi_d2f>
   d60a0:	ee08 0a10 	vmov	s16, r0
    free(dst);
   d60a4:	4620      	mov	r0, r4
   d60a6:	f001 fd51 	bl	d7b4c <free>
    free(parsed);
   d60aa:	4628      	mov	r0, r5
   d60ac:	f001 fd4e 	bl	d7b4c <free>
}
   d60b0:	eeb0 0a48 	vmov.f32	s0, s16
   d60b4:	ecbd 8b02 	vpop	{d8}
   d60b8:	bd70      	pop	{r4, r5, r6, pc}
    for (int i = 0; i < len - 2; i++) {
   d60ba:	3301      	adds	r3, #1
   d60bc:	e7bc      	b.n	d6038 <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.0+0x24>
      return result;
   d60be:	ed9f 8a01 	vldr	s16, [pc, #4]	; d60c4 <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.0+0xb0>
   d60c2:	e7f5      	b.n	d60b0 <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.0+0x9c>
   d60c4:	cda2425f 	.word	0xcda2425f

000d60c8 <_ZN7UbiHTTPC1EPKciS1_S1_>:
UbiHTTP::UbiHTTP(const char* host, const int port, const char* user_agent, const char* token) {
   d60c8:	b530      	push	{r4, r5, lr}
   d60ca:	4d07      	ldr	r5, [pc, #28]	; (d60e8 <_ZN7UbiHTTPC1EPKciS1_S1_+0x20>)
   d60cc:	6005      	str	r5, [r0, #0]
   d60ce:	2500      	movs	r5, #0
  _user_agent = user_agent;
   d60d0:	e9c0 1301 	strd	r1, r3, [r0, #4]
UbiHTTP::UbiHTTP(const char* host, const int port, const char* user_agent, const char* token) {
   d60d4:	7505      	strb	r5, [r0, #20]
  _token = token;
   d60d6:	9b03      	ldr	r3, [sp, #12]
UbiHTTP::UbiHTTP(const char* host, const int port, const char* user_agent, const char* token) {
   d60d8:	f241 3588 	movw	r5, #5000	; 0x1388
   d60dc:	6185      	str	r5, [r0, #24]
   d60de:	2505      	movs	r5, #5
  _port = port;
   d60e0:	e9c0 3203 	strd	r3, r2, [r0, #12]
UbiHTTP::UbiHTTP(const char* host, const int port, const char* user_agent, const char* token) {
   d60e4:	7705      	strb	r5, [r0, #28]
}
   d60e6:	bd30      	pop	{r4, r5, pc}
   d60e8:	000df354 	.word	0x000df354

000d60ec <_ZN7UbiHTTP9reconnectEPKci>:
void UbiHTTP::reconnect(const char* host, const int port) {
   d60ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  while (!_client_http_ubi.connected() && attempts < _maxReconnectAttempts) {
   d60f0:	f8df 808c 	ldr.w	r8, [pc, #140]	; d6180 <_ZN7UbiHTTP9reconnectEPKci+0x94>
      Serial.print("Trying to connect to ");
   d60f4:	f8df a08c 	ldr.w	sl, [pc, #140]	; d6184 <_ZN7UbiHTTP9reconnectEPKci+0x98>
      Serial.print(" , attempt number: ");
   d60f8:	f8df b08c 	ldr.w	fp, [pc, #140]	; d6188 <_ZN7UbiHTTP9reconnectEPKci+0x9c>
void UbiHTTP::reconnect(const char* host, const int port) {
   d60fc:	4604      	mov	r4, r0
   d60fe:	460d      	mov	r5, r1
   d6100:	4617      	mov	r7, r2
   d6102:	2600      	movs	r6, #0
  while (!_client_http_ubi.connected() && attempts < _maxReconnectAttempts) {
   d6104:	4640      	mov	r0, r8
   d6106:	fa5f f986 	uxtb.w	r9, r6
   d610a:	f004 f8e4 	bl	da2d6 <_ZN9TCPClient9connectedEv>
   d610e:	bb88      	cbnz	r0, d6174 <_ZN7UbiHTTP9reconnectEPKci+0x88>
   d6110:	7f23      	ldrb	r3, [r4, #28]
   d6112:	454b      	cmp	r3, r9
   d6114:	d92e      	bls.n	d6174 <_ZN7UbiHTTP9reconnectEPKci+0x88>
    if (_debug) {
   d6116:	7d23      	ldrb	r3, [r4, #20]
   d6118:	b1cb      	cbz	r3, d614e <_ZN7UbiHTTP9reconnectEPKci+0x62>
      Serial.print("Trying to connect to ");
   d611a:	f005 f937 	bl	db38c <_Z16_fetch_usbserialv>
   d611e:	4651      	mov	r1, sl
   d6120:	f003 fe24 	bl	d9d6c <_ZN5Print5printEPKc>
      Serial.print(host);
   d6124:	f005 f932 	bl	db38c <_Z16_fetch_usbserialv>
   d6128:	4629      	mov	r1, r5
   d612a:	f003 fe1f 	bl	d9d6c <_ZN5Print5printEPKc>
      Serial.print(" , attempt number: ");
   d612e:	f005 f92d 	bl	db38c <_Z16_fetch_usbserialv>
   d6132:	4659      	mov	r1, fp
   d6134:	f003 fe1a 	bl	d9d6c <_ZN5Print5printEPKc>
      Serial.println(attempts);
   d6138:	f005 f928 	bl	db38c <_Z16_fetch_usbserialv>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d613c:	220a      	movs	r2, #10
   d613e:	4649      	mov	r1, r9
   d6140:	9001      	str	r0, [sp, #4]
   d6142:	f003 fe30 	bl	d9da6 <_ZN5Print11printNumberEmh>
        n += println();
   d6146:	9b01      	ldr	r3, [sp, #4]
   d6148:	4618      	mov	r0, r3
   d614a:	f003 fe16 	bl	d9d7a <_ZN5Print7printlnEv>
    _client_http_ubi.connect(host, port);
   d614e:	2300      	movs	r3, #0
   d6150:	b2ba      	uxth	r2, r7
   d6152:	4629      	mov	r1, r5
   d6154:	4640      	mov	r0, r8
   d6156:	f004 f9c3 	bl	da4e0 <_ZN9TCPClient7connectEPKctm>
    if (_debug) {
   d615a:	7d23      	ldrb	r3, [r4, #20]
   d615c:	b123      	cbz	r3, d6168 <_ZN7UbiHTTP9reconnectEPKci+0x7c>
      Serial.println("Attempt finished");
   d615e:	f005 f915 	bl	db38c <_Z16_fetch_usbserialv>
   d6162:	4906      	ldr	r1, [pc, #24]	; (d617c <_ZN7UbiHTTP9reconnectEPKci+0x90>)
   d6164:	f003 fe15 	bl	d9d92 <_ZN5Print7printlnEPKc>
    delay(1000);
   d6168:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d616c:	f001 fd5e 	bl	d7c2c <delay>
   d6170:	3601      	adds	r6, #1
  while (!_client_http_ubi.connected() && attempts < _maxReconnectAttempts) {
   d6172:	e7c7      	b.n	d6104 <_ZN7UbiHTTP9reconnectEPKci+0x18>
}
   d6174:	b003      	add	sp, #12
   d6176:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d617a:	bf00      	nop
   d617c:	000df176 	.word	0x000df176
   d6180:	2003e4e8 	.word	0x2003e4e8
   d6184:	000df14c 	.word	0x000df14c
   d6188:	000df162 	.word	0x000df162

000d618c <_ZN7UbiHTTP16readServerAnswerEPc>:
void UbiHTTP::readServerAnswer(char* response) {
   d618c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6190:	1e4b      	subs	r3, r1, #1
   d6192:	460c      	mov	r4, r1
   d6194:	f501 722f 	add.w	r2, r1, #700	; 0x2bc
   d6198:	4605      	mov	r5, r0
    response[i] = '\0';
   d619a:	2100      	movs	r1, #0
   d619c:	f803 1f01 	strb.w	r1, [r3, #1]!
  for (int i = 0; i <= MAX_BUFFER_SIZE; i++) {
   d61a0:	4293      	cmp	r3, r2
   d61a2:	d1fb      	bne.n	d619c <_ZN7UbiHTTP16readServerAnswerEPc+0x10>
  if (_debug) {
   d61a4:	7d2b      	ldrb	r3, [r5, #20]
   d61a6:	b14b      	cbz	r3, d61bc <_ZN7UbiHTTP16readServerAnswerEPc+0x30>
    Serial.println("----------");
   d61a8:	f005 f8f0 	bl	db38c <_Z16_fetch_usbserialv>
   d61ac:	4914      	ldr	r1, [pc, #80]	; (d6200 <_ZN7UbiHTTP16readServerAnswerEPc+0x74>)
   d61ae:	f003 fdf0 	bl	d9d92 <_ZN5Print7printlnEPKc>
    Serial.println("Server's response:");
   d61b2:	f005 f8eb 	bl	db38c <_Z16_fetch_usbserialv>
   d61b6:	4913      	ldr	r1, [pc, #76]	; (d6204 <_ZN7UbiHTTP16readServerAnswerEPc+0x78>)
   d61b8:	f003 fdeb 	bl	d9d92 <_ZN5Print7printlnEPKc>
  while (_client_http_ubi.available()) {
   d61bc:	4f12      	ldr	r7, [pc, #72]	; (d6208 <_ZN7UbiHTTP16readServerAnswerEPc+0x7c>)
void UbiHTTP::readServerAnswer(char* response) {
   d61be:	2600      	movs	r6, #0
    if (j >= MAX_BUFFER_SIZE - 1) {
   d61c0:	f240 28bb 	movw	r8, #699	; 0x2bb
  while (_client_http_ubi.available()) {
   d61c4:	4638      	mov	r0, r7
   d61c6:	f004 fa8d 	bl	da6e4 <_ZN9TCPClient9availableEv>
   d61ca:	b170      	cbz	r0, d61ea <_ZN7UbiHTTP16readServerAnswerEPc+0x5e>
    response[j] = (char)_client_http_ubi.read();
   d61cc:	4638      	mov	r0, r7
   d61ce:	f004 f942 	bl	da456 <_ZN9TCPClient4readEv>
   d61d2:	55a0      	strb	r0, [r4, r6]
    if (_debug) {
   d61d4:	7d2b      	ldrb	r3, [r5, #20]
   d61d6:	b12b      	cbz	r3, d61e4 <_ZN7UbiHTTP16readServerAnswerEPc+0x58>
      Serial.write(response[j]);
   d61d8:	f005 f8d8 	bl	db38c <_Z16_fetch_usbserialv>
   d61dc:	6803      	ldr	r3, [r0, #0]
   d61de:	5da1      	ldrb	r1, [r4, r6]
   d61e0:	689b      	ldr	r3, [r3, #8]
   d61e2:	4798      	blx	r3
    j++;
   d61e4:	3601      	adds	r6, #1
    if (j >= MAX_BUFFER_SIZE - 1) {
   d61e6:	4546      	cmp	r6, r8
   d61e8:	d1ec      	bne.n	d61c4 <_ZN7UbiHTTP16readServerAnswerEPc+0x38>
  if (_debug) {
   d61ea:	7d2b      	ldrb	r3, [r5, #20]
   d61ec:	b133      	cbz	r3, d61fc <_ZN7UbiHTTP16readServerAnswerEPc+0x70>
    Serial.println("\n----------");
   d61ee:	f005 f8cd 	bl	db38c <_Z16_fetch_usbserialv>
}
   d61f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    Serial.println("\n----------");
   d61f6:	4905      	ldr	r1, [pc, #20]	; (d620c <_ZN7UbiHTTP16readServerAnswerEPc+0x80>)
   d61f8:	f003 bdcb 	b.w	d9d92 <_ZN5Print7printlnEPKc>
}
   d61fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6200:	000df19b 	.word	0x000df19b
   d6204:	000df187 	.word	0x000df187
   d6208:	2003e4e8 	.word	0x2003e4e8
   d620c:	000df19a 	.word	0x000df19a

000d6210 <_ZN7UbiHTTP16waitServerAnswerEv>:
bool UbiHTTP::waitServerAnswer() {
   d6210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  while (!_client_http_ubi.available() && timeout < _timeout) {
   d6212:	4f0e      	ldr	r7, [pc, #56]	; (d624c <_ZN7UbiHTTP16waitServerAnswerEv+0x3c>)
bool UbiHTTP::waitServerAnswer() {
   d6214:	4604      	mov	r4, r0
  int timeout = 0;
   d6216:	2600      	movs	r6, #0
  while (!_client_http_ubi.available() && timeout < _timeout) {
   d6218:	4638      	mov	r0, r7
   d621a:	f004 fa63 	bl	da6e4 <_ZN9TCPClient9availableEv>
   d621e:	4605      	mov	r5, r0
   d6220:	b990      	cbnz	r0, d6248 <_ZN7UbiHTTP16waitServerAnswerEv+0x38>
   d6222:	69a3      	ldr	r3, [r4, #24]
   d6224:	42b3      	cmp	r3, r6
   d6226:	dd0f      	ble.n	d6248 <_ZN7UbiHTTP16waitServerAnswerEv+0x38>
    delay(1);
   d6228:	2001      	movs	r0, #1
   d622a:	f001 fcff 	bl	d7c2c <delay>
    if (timeout > _timeout - 1) {
   d622e:	69a3      	ldr	r3, [r4, #24]
    timeout++;
   d6230:	3601      	adds	r6, #1
    if (timeout > _timeout - 1) {
   d6232:	42b3      	cmp	r3, r6
   d6234:	dcf0      	bgt.n	d6218 <_ZN7UbiHTTP16waitServerAnswerEv+0x8>
      if (_debug) {
   d6236:	7d20      	ldrb	r0, [r4, #20]
   d6238:	b128      	cbz	r0, d6246 <_ZN7UbiHTTP16waitServerAnswerEv+0x36>
        Serial.println("timeout, could not read any response from the host");
   d623a:	f005 f8a7 	bl	db38c <_Z16_fetch_usbserialv>
   d623e:	4904      	ldr	r1, [pc, #16]	; (d6250 <_ZN7UbiHTTP16waitServerAnswerEv+0x40>)
   d6240:	f003 fda7 	bl	d9d92 <_ZN5Print7printlnEPKc>
   d6244:	4628      	mov	r0, r5
}
   d6246:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return true;
   d6248:	2001      	movs	r0, #1
   d624a:	e7fc      	b.n	d6246 <_ZN7UbiHTTP16waitServerAnswerEv+0x36>
   d624c:	2003e4e8 	.word	0x2003e4e8
   d6250:	000df1a6 	.word	0x000df1a6

000d6254 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags>:
bool UbiHTTP::sendData(const char* device_label, const char* device_name, char* payload, UbiFlags* flags) {
   d6254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6256:	460f      	mov	r7, r1
  reconnect(_host, _port);
   d6258:	6902      	ldr	r2, [r0, #16]
   d625a:	6841      	ldr	r1, [r0, #4]
bool UbiHTTP::sendData(const char* device_label, const char* device_name, char* payload, UbiFlags* flags) {
   d625c:	4604      	mov	r4, r0
   d625e:	461d      	mov	r5, r3
  reconnect(_host, _port);
   d6260:	f7ff ff44 	bl	d60ec <_ZN7UbiHTTP9reconnectEPKci>
  if (_client_http_ubi.connected()) {  // Connect to the host
   d6264:	4878      	ldr	r0, [pc, #480]	; (d6448 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d6266:	f004 f836 	bl	da2d6 <_ZN9TCPClient9connectedEv>
   d626a:	4606      	mov	r6, r0
   d626c:	2800      	cmp	r0, #0
   d626e:	f000 80e1 	beq.w	d6434 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1e0>
    _client_http_ubi.print(F("POST /api/v1.6/devices/"));
   d6272:	4976      	ldr	r1, [pc, #472]	; (d644c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f8>)
   d6274:	4874      	ldr	r0, [pc, #464]	; (d6448 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d6276:	f003 fd79 	bl	d9d6c <_ZN5Print5printEPKc>
    _client_http_ubi.print(device_label);
   d627a:	4639      	mov	r1, r7
   d627c:	4872      	ldr	r0, [pc, #456]	; (d6448 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d627e:	f003 fd75 	bl	d9d6c <_ZN5Print5printEPKc>
    _client_http_ubi.print(F(" HTTP/1.1\r\n"));
   d6282:	4973      	ldr	r1, [pc, #460]	; (d6450 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1fc>)
   d6284:	4870      	ldr	r0, [pc, #448]	; (d6448 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d6286:	f003 fd71 	bl	d9d6c <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("Host: "));
   d628a:	4972      	ldr	r1, [pc, #456]	; (d6454 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x200>)
   d628c:	486e      	ldr	r0, [pc, #440]	; (d6448 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d628e:	f003 fd6d 	bl	d9d6c <_ZN5Print5printEPKc>
    _client_http_ubi.print(_host);
   d6292:	6861      	ldr	r1, [r4, #4]
   d6294:	486c      	ldr	r0, [pc, #432]	; (d6448 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d6296:	f003 fd69 	bl	d9d6c <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("\r\n"));
   d629a:	496f      	ldr	r1, [pc, #444]	; (d6458 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x204>)
   d629c:	486a      	ldr	r0, [pc, #424]	; (d6448 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d629e:	f003 fd65 	bl	d9d6c <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("User-Agent: "));
   d62a2:	496e      	ldr	r1, [pc, #440]	; (d645c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x208>)
   d62a4:	4868      	ldr	r0, [pc, #416]	; (d6448 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d62a6:	f003 fd61 	bl	d9d6c <_ZN5Print5printEPKc>
    _client_http_ubi.print(_user_agent);
   d62aa:	68a1      	ldr	r1, [r4, #8]
   d62ac:	4866      	ldr	r0, [pc, #408]	; (d6448 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d62ae:	f003 fd5d 	bl	d9d6c <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("\r\n"));
   d62b2:	4969      	ldr	r1, [pc, #420]	; (d6458 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x204>)
   d62b4:	4864      	ldr	r0, [pc, #400]	; (d6448 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d62b6:	f003 fd59 	bl	d9d6c <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("X-Auth-Token: "));
   d62ba:	4969      	ldr	r1, [pc, #420]	; (d6460 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x20c>)
   d62bc:	4862      	ldr	r0, [pc, #392]	; (d6448 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d62be:	f003 fd55 	bl	d9d6c <_ZN5Print5printEPKc>
    _client_http_ubi.print(_token);
   d62c2:	68e1      	ldr	r1, [r4, #12]
   d62c4:	4860      	ldr	r0, [pc, #384]	; (d6448 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d62c6:	f003 fd51 	bl	d9d6c <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("\r\n"));
   d62ca:	4963      	ldr	r1, [pc, #396]	; (d6458 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x204>)
   d62cc:	485e      	ldr	r0, [pc, #376]	; (d6448 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d62ce:	f003 fd4d 	bl	d9d6c <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("Connection: close\r\n"));
   d62d2:	4964      	ldr	r1, [pc, #400]	; (d6464 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x210>)
   d62d4:	485c      	ldr	r0, [pc, #368]	; (d6448 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d62d6:	f003 fd49 	bl	d9d6c <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("Content-Type: application/json\r\n"));
   d62da:	4963      	ldr	r1, [pc, #396]	; (d6468 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
   d62dc:	485a      	ldr	r0, [pc, #360]	; (d6448 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d62de:	f003 fd45 	bl	d9d6c <_ZN5Print5printEPKc>
    int content_length = strlen(payload);
   d62e2:	4628      	mov	r0, r5
   d62e4:	f006 fba1 	bl	dca2a <strlen>
    _client_http_ubi.print(F("Content-Length: "));
   d62e8:	4960      	ldr	r1, [pc, #384]	; (d646c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x218>)
    int content_length = strlen(payload);
   d62ea:	4606      	mov	r6, r0
    _client_http_ubi.print(F("Content-Length: "));
   d62ec:	4856      	ldr	r0, [pc, #344]	; (d6448 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d62ee:	f003 fd3d 	bl	d9d6c <_ZN5Print5printEPKc>
        return printNumber(val, base) + t;
   d62f2:	220a      	movs	r2, #10
   d62f4:	4631      	mov	r1, r6
   d62f6:	4854      	ldr	r0, [pc, #336]	; (d6448 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d62f8:	f003 fd55 	bl	d9da6 <_ZN5Print11printNumberEmh>
    _client_http_ubi.print(F("\r\n\r\n"));
   d62fc:	495c      	ldr	r1, [pc, #368]	; (d6470 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x21c>)
   d62fe:	4852      	ldr	r0, [pc, #328]	; (d6448 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d6300:	f003 fd34 	bl	d9d6c <_ZN5Print5printEPKc>
    _client_http_ubi.print(payload);
   d6304:	4629      	mov	r1, r5
   d6306:	4850      	ldr	r0, [pc, #320]	; (d6448 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d6308:	f003 fd30 	bl	d9d6c <_ZN5Print5printEPKc>
    _client_http_ubi.print(F("\r\n"));
   d630c:	4952      	ldr	r1, [pc, #328]	; (d6458 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x204>)
   d630e:	484e      	ldr	r0, [pc, #312]	; (d6448 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d6310:	f003 fd2c 	bl	d9d6c <_ZN5Print5printEPKc>
    _client_http_ubi.flush();
   d6314:	484c      	ldr	r0, [pc, #304]	; (d6448 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d6316:	f003 ffdd 	bl	da2d4 <_ZN9TCPClient5flushEv>
    if (_debug) {
   d631a:	7d23      	ldrb	r3, [r4, #20]
   d631c:	2b00      	cmp	r3, #0
   d631e:	d069      	beq.n	d63f4 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1a0>
      Serial.println(F("Making request to Ubidots:\n"));
   d6320:	f005 f834 	bl	db38c <_Z16_fetch_usbserialv>
   d6324:	4953      	ldr	r1, [pc, #332]	; (d6474 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x220>)
   d6326:	f003 fd34 	bl	d9d92 <_ZN5Print7printlnEPKc>
      Serial.print("POST /api/v1.6/devices/");
   d632a:	f005 f82f 	bl	db38c <_Z16_fetch_usbserialv>
   d632e:	4947      	ldr	r1, [pc, #284]	; (d644c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f8>)
   d6330:	f003 fd1c 	bl	d9d6c <_ZN5Print5printEPKc>
      Serial.print(device_label);
   d6334:	f005 f82a 	bl	db38c <_Z16_fetch_usbserialv>
   d6338:	4639      	mov	r1, r7
   d633a:	f003 fd17 	bl	d9d6c <_ZN5Print5printEPKc>
      Serial.print(" HTTP/1.1\r\n");
   d633e:	f005 f825 	bl	db38c <_Z16_fetch_usbserialv>
   d6342:	4943      	ldr	r1, [pc, #268]	; (d6450 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1fc>)
   d6344:	f003 fd12 	bl	d9d6c <_ZN5Print5printEPKc>
      Serial.print("Host: ");
   d6348:	f005 f820 	bl	db38c <_Z16_fetch_usbserialv>
   d634c:	4941      	ldr	r1, [pc, #260]	; (d6454 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x200>)
   d634e:	f003 fd0d 	bl	d9d6c <_ZN5Print5printEPKc>
      Serial.print(_host);
   d6352:	f005 f81b 	bl	db38c <_Z16_fetch_usbserialv>
   d6356:	6861      	ldr	r1, [r4, #4]
   d6358:	f003 fd08 	bl	d9d6c <_ZN5Print5printEPKc>
      Serial.print("\r\n");
   d635c:	f005 f816 	bl	db38c <_Z16_fetch_usbserialv>
   d6360:	493d      	ldr	r1, [pc, #244]	; (d6458 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x204>)
   d6362:	f003 fd03 	bl	d9d6c <_ZN5Print5printEPKc>
      Serial.print("User-Agent: ");
   d6366:	f005 f811 	bl	db38c <_Z16_fetch_usbserialv>
   d636a:	493c      	ldr	r1, [pc, #240]	; (d645c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x208>)
   d636c:	f003 fcfe 	bl	d9d6c <_ZN5Print5printEPKc>
      Serial.print(_user_agent);
   d6370:	f005 f80c 	bl	db38c <_Z16_fetch_usbserialv>
   d6374:	68a1      	ldr	r1, [r4, #8]
   d6376:	f003 fcf9 	bl	d9d6c <_ZN5Print5printEPKc>
      Serial.print("\r\n");
   d637a:	f005 f807 	bl	db38c <_Z16_fetch_usbserialv>
   d637e:	4936      	ldr	r1, [pc, #216]	; (d6458 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x204>)
   d6380:	f003 fcf4 	bl	d9d6c <_ZN5Print5printEPKc>
      Serial.print("X-Auth-Token: ");
   d6384:	f005 f802 	bl	db38c <_Z16_fetch_usbserialv>
   d6388:	4935      	ldr	r1, [pc, #212]	; (d6460 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x20c>)
   d638a:	f003 fcef 	bl	d9d6c <_ZN5Print5printEPKc>
      Serial.print(_token);
   d638e:	f004 fffd 	bl	db38c <_Z16_fetch_usbserialv>
   d6392:	68e1      	ldr	r1, [r4, #12]
   d6394:	f003 fcea 	bl	d9d6c <_ZN5Print5printEPKc>
      Serial.print("\r\n");
   d6398:	f004 fff8 	bl	db38c <_Z16_fetch_usbserialv>
   d639c:	492e      	ldr	r1, [pc, #184]	; (d6458 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x204>)
   d639e:	f003 fce5 	bl	d9d6c <_ZN5Print5printEPKc>
      Serial.print("Connection: close\r\n");
   d63a2:	f004 fff3 	bl	db38c <_Z16_fetch_usbserialv>
   d63a6:	492f      	ldr	r1, [pc, #188]	; (d6464 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x210>)
   d63a8:	f003 fce0 	bl	d9d6c <_ZN5Print5printEPKc>
      Serial.print("Content-Type: application/json\r\n");
   d63ac:	f004 ffee 	bl	db38c <_Z16_fetch_usbserialv>
   d63b0:	492d      	ldr	r1, [pc, #180]	; (d6468 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x214>)
   d63b2:	f003 fcdb 	bl	d9d6c <_ZN5Print5printEPKc>
      Serial.print("Content-Length: ");
   d63b6:	f004 ffe9 	bl	db38c <_Z16_fetch_usbserialv>
   d63ba:	492c      	ldr	r1, [pc, #176]	; (d646c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x218>)
   d63bc:	f003 fcd6 	bl	d9d6c <_ZN5Print5printEPKc>
      Serial.print(content_length);
   d63c0:	f004 ffe4 	bl	db38c <_Z16_fetch_usbserialv>
   d63c4:	220a      	movs	r2, #10
   d63c6:	4631      	mov	r1, r6
   d63c8:	f003 fced 	bl	d9da6 <_ZN5Print11printNumberEmh>
      Serial.print("\r\n\r\n");
   d63cc:	f004 ffde 	bl	db38c <_Z16_fetch_usbserialv>
   d63d0:	4927      	ldr	r1, [pc, #156]	; (d6470 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x21c>)
   d63d2:	f003 fccb 	bl	d9d6c <_ZN5Print5printEPKc>
      Serial.print(payload);
   d63d6:	f004 ffd9 	bl	db38c <_Z16_fetch_usbserialv>
   d63da:	4629      	mov	r1, r5
   d63dc:	f003 fcc6 	bl	d9d6c <_ZN5Print5printEPKc>
      Serial.print("\r\n");
   d63e0:	f004 ffd4 	bl	db38c <_Z16_fetch_usbserialv>
   d63e4:	491c      	ldr	r1, [pc, #112]	; (d6458 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x204>)
   d63e6:	f003 fcc1 	bl	d9d6c <_ZN5Print5printEPKc>
      Serial.println("waiting for server answer ...");
   d63ea:	f004 ffcf 	bl	db38c <_Z16_fetch_usbserialv>
   d63ee:	4922      	ldr	r1, [pc, #136]	; (d6478 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x224>)
   d63f0:	f003 fccf 	bl	d9d92 <_ZN5Print7printlnEPKc>
    waitServerAnswer();
   d63f4:	4620      	mov	r0, r4
   d63f6:	f7ff ff0b 	bl	d6210 <_ZN7UbiHTTP16waitServerAnswerEv>
    if (_debug) {
   d63fa:	7d23      	ldrb	r3, [r4, #20]
   d63fc:	b92b      	cbnz	r3, d640a <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1b6>
    result = true;
   d63fe:	2401      	movs	r4, #1
  _client_http_ubi.stop();
   d6400:	4811      	ldr	r0, [pc, #68]	; (d6448 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
   d6402:	f004 f9c9 	bl	da798 <_ZN9TCPClient4stopEv>
}
   d6406:	4620      	mov	r0, r4
   d6408:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      Serial.println("\nUbidots' Server response:\n");
   d640a:	f004 ffbf 	bl	db38c <_Z16_fetch_usbserialv>
   d640e:	491b      	ldr	r1, [pc, #108]	; (d647c <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x228>)
      while (_client_http_ubi.available()) {
   d6410:	4d0d      	ldr	r5, [pc, #52]	; (d6448 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1f4>)
      Serial.println("\nUbidots' Server response:\n");
   d6412:	f003 fcbe 	bl	d9d92 <_ZN5Print7printlnEPKc>
      while (_client_http_ubi.available()) {
   d6416:	4628      	mov	r0, r5
   d6418:	f004 f964 	bl	da6e4 <_ZN9TCPClient9availableEv>
   d641c:	2800      	cmp	r0, #0
   d641e:	d0ee      	beq.n	d63fe <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1aa>
        char c = _client_http_ubi.read();
   d6420:	4628      	mov	r0, r5
   d6422:	f004 f818 	bl	da456 <_ZN9TCPClient4readEv>
   d6426:	4604      	mov	r4, r0
        Serial.print(c);
   d6428:	f004 ffb0 	bl	db38c <_Z16_fetch_usbserialv>
   d642c:	b2e1      	uxtb	r1, r4
   d642e:	f003 fca1 	bl	d9d74 <_ZN5Print5printEc>
      while (_client_http_ubi.available()) {
   d6432:	e7f0      	b.n	d6416 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1c2>
    if (_debug) {
   d6434:	7d24      	ldrb	r4, [r4, #20]
   d6436:	2c00      	cmp	r4, #0
   d6438:	d0e2      	beq.n	d6400 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1ac>
      Serial.println("Could not send data to ubidots using HTTP");
   d643a:	f004 ffa7 	bl	db38c <_Z16_fetch_usbserialv>
   d643e:	4910      	ldr	r1, [pc, #64]	; (d6480 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x22c>)
   d6440:	f003 fca7 	bl	d9d92 <_ZN5Print7printlnEPKc>
  bool result = false;
   d6444:	4634      	mov	r4, r6
   d6446:	e7db      	b.n	d6400 <_ZN7UbiHTTP8sendDataEPKcS1_PcP8UbiFlags+0x1ac>
   d6448:	2003e4e8 	.word	0x2003e4e8
   d644c:	000df1d9 	.word	0x000df1d9
   d6450:	000df1f1 	.word	0x000df1f1
   d6454:	000df1fd 	.word	0x000df1fd
   d6458:	000df321 	.word	0x000df321
   d645c:	000df204 	.word	0x000df204
   d6460:	000df211 	.word	0x000df211
   d6464:	000df220 	.word	0x000df220
   d6468:	000df234 	.word	0x000df234
   d646c:	000df255 	.word	0x000df255
   d6470:	000df31f 	.word	0x000df31f
   d6474:	000df266 	.word	0x000df266
   d6478:	000df282 	.word	0x000df282
   d647c:	000df2a0 	.word	0x000df2a0
   d6480:	000df2bc 	.word	0x000df2bc

000d6484 <_ZN7UbiHTTP3getEPKcS1_>:
float UbiHTTP::get(const char* device_label, const char* variable_label) {
   d6484:	b570      	push	{r4, r5, r6, lr}
   d6486:	ed2d 8b02 	vpush	{d8}
   d648a:	4604      	mov	r4, r0
  _client_http_ubi.connect(_host, UBIDOTS_HTTP_PORT);
   d648c:	2300      	movs	r3, #0
float UbiHTTP::get(const char* device_label, const char* variable_label) {
   d648e:	460e      	mov	r6, r1
   d6490:	4615      	mov	r5, r2
  _client_http_ubi.connect(_host, UBIDOTS_HTTP_PORT);
   d6492:	6841      	ldr	r1, [r0, #4]
   d6494:	4866      	ldr	r0, [pc, #408]	; (d6630 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   d6496:	2250      	movs	r2, #80	; 0x50
   d6498:	f004 f822 	bl	da4e0 <_ZN9TCPClient7connectEPKctm>
  reconnect(_host, UBIDOTS_HTTP_PORT);
   d649c:	4620      	mov	r0, r4
   d649e:	6861      	ldr	r1, [r4, #4]
   d64a0:	2250      	movs	r2, #80	; 0x50
   d64a2:	f7ff fe23 	bl	d60ec <_ZN7UbiHTTP9reconnectEPKci>
  if (_client_http_ubi.connected()) {
   d64a6:	4862      	ldr	r0, [pc, #392]	; (d6630 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   d64a8:	f003 ff15 	bl	da2d6 <_ZN9TCPClient9connectedEv>
   d64ac:	2800      	cmp	r0, #0
   d64ae:	f000 80b6 	beq.w	d661e <_ZN7UbiHTTP3getEPKcS1_+0x19a>
    _client_http_ubi.print(F("GET /api/v1.6/devices/"));
   d64b2:	4960      	ldr	r1, [pc, #384]	; (d6634 <_ZN7UbiHTTP3getEPKcS1_+0x1b0>)
   d64b4:	485e      	ldr	r0, [pc, #376]	; (d6630 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   d64b6:	f003 fc59 	bl	d9d6c <_ZN5Print5printEPKc>
    _client_http_ubi.print(device_label);
   d64ba:	4631      	mov	r1, r6
   d64bc:	485c      	ldr	r0, [pc, #368]	; (d6630 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   d64be:	f003 fc55 	bl	d9d6c <_ZN5Print5printEPKc>
    _client_http_ubi.print("/");
   d64c2:	495d      	ldr	r1, [pc, #372]	; (d6638 <_ZN7UbiHTTP3getEPKcS1_+0x1b4>)
   d64c4:	485a      	ldr	r0, [pc, #360]	; (d6630 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   d64c6:	f003 fc51 	bl	d9d6c <_ZN5Print5printEPKc>
    _client_http_ubi.print(variable_label);
   d64ca:	4629      	mov	r1, r5
   d64cc:	4858      	ldr	r0, [pc, #352]	; (d6630 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   d64ce:	f003 fc4d 	bl	d9d6c <_ZN5Print5printEPKc>
    _client_http_ubi.print("/lv");
   d64d2:	495a      	ldr	r1, [pc, #360]	; (d663c <_ZN7UbiHTTP3getEPKcS1_+0x1b8>)
   d64d4:	4856      	ldr	r0, [pc, #344]	; (d6630 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   d64d6:	f003 fc49 	bl	d9d6c <_ZN5Print5printEPKc>
    _client_http_ubi.print(" HTTP/1.1\r\n");
   d64da:	4959      	ldr	r1, [pc, #356]	; (d6640 <_ZN7UbiHTTP3getEPKcS1_+0x1bc>)
   d64dc:	4854      	ldr	r0, [pc, #336]	; (d6630 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   d64de:	f003 fc45 	bl	d9d6c <_ZN5Print5printEPKc>
    _client_http_ubi.print("Host: ");
   d64e2:	4958      	ldr	r1, [pc, #352]	; (d6644 <_ZN7UbiHTTP3getEPKcS1_+0x1c0>)
   d64e4:	4852      	ldr	r0, [pc, #328]	; (d6630 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   d64e6:	f003 fc41 	bl	d9d6c <_ZN5Print5printEPKc>
    _client_http_ubi.print(_host);
   d64ea:	6861      	ldr	r1, [r4, #4]
   d64ec:	4850      	ldr	r0, [pc, #320]	; (d6630 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   d64ee:	f003 fc3d 	bl	d9d6c <_ZN5Print5printEPKc>
    _client_http_ubi.print("\r\n");
   d64f2:	4955      	ldr	r1, [pc, #340]	; (d6648 <_ZN7UbiHTTP3getEPKcS1_+0x1c4>)
   d64f4:	484e      	ldr	r0, [pc, #312]	; (d6630 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   d64f6:	f003 fc39 	bl	d9d6c <_ZN5Print5printEPKc>
    _client_http_ubi.print("User-Agent: ");
   d64fa:	4954      	ldr	r1, [pc, #336]	; (d664c <_ZN7UbiHTTP3getEPKcS1_+0x1c8>)
   d64fc:	484c      	ldr	r0, [pc, #304]	; (d6630 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   d64fe:	f003 fc35 	bl	d9d6c <_ZN5Print5printEPKc>
    _client_http_ubi.print(_user_agent);
   d6502:	68a1      	ldr	r1, [r4, #8]
   d6504:	484a      	ldr	r0, [pc, #296]	; (d6630 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   d6506:	f003 fc31 	bl	d9d6c <_ZN5Print5printEPKc>
    _client_http_ubi.print("\r\n");
   d650a:	494f      	ldr	r1, [pc, #316]	; (d6648 <_ZN7UbiHTTP3getEPKcS1_+0x1c4>)
   d650c:	4848      	ldr	r0, [pc, #288]	; (d6630 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   d650e:	f003 fc2d 	bl	d9d6c <_ZN5Print5printEPKc>
    _client_http_ubi.print("X-Auth-Token: ");
   d6512:	494f      	ldr	r1, [pc, #316]	; (d6650 <_ZN7UbiHTTP3getEPKcS1_+0x1cc>)
   d6514:	4846      	ldr	r0, [pc, #280]	; (d6630 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   d6516:	f003 fc29 	bl	d9d6c <_ZN5Print5printEPKc>
    _client_http_ubi.print(_token);
   d651a:	68e1      	ldr	r1, [r4, #12]
   d651c:	4844      	ldr	r0, [pc, #272]	; (d6630 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   d651e:	f003 fc25 	bl	d9d6c <_ZN5Print5printEPKc>
    _client_http_ubi.print("\r\n");
   d6522:	4949      	ldr	r1, [pc, #292]	; (d6648 <_ZN7UbiHTTP3getEPKcS1_+0x1c4>)
   d6524:	4842      	ldr	r0, [pc, #264]	; (d6630 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   d6526:	f003 fc21 	bl	d9d6c <_ZN5Print5printEPKc>
    _client_http_ubi.print("Content-Type: application/json\r\n\r\n");
   d652a:	494a      	ldr	r1, [pc, #296]	; (d6654 <_ZN7UbiHTTP3getEPKcS1_+0x1d0>)
   d652c:	4840      	ldr	r0, [pc, #256]	; (d6630 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   d652e:	f003 fc1d 	bl	d9d6c <_ZN5Print5printEPKc>
    if (_debug) {
   d6532:	7d23      	ldrb	r3, [r4, #20]
   d6534:	2b00      	cmp	r3, #0
   d6536:	d04f      	beq.n	d65d8 <_ZN7UbiHTTP3getEPKcS1_+0x154>
      Serial.print("GET /api/v1.6/devices/");
   d6538:	f004 ff28 	bl	db38c <_Z16_fetch_usbserialv>
   d653c:	493d      	ldr	r1, [pc, #244]	; (d6634 <_ZN7UbiHTTP3getEPKcS1_+0x1b0>)
   d653e:	f003 fc15 	bl	d9d6c <_ZN5Print5printEPKc>
      Serial.print(device_label);
   d6542:	f004 ff23 	bl	db38c <_Z16_fetch_usbserialv>
   d6546:	4631      	mov	r1, r6
   d6548:	f003 fc10 	bl	d9d6c <_ZN5Print5printEPKc>
      Serial.print("/");
   d654c:	f004 ff1e 	bl	db38c <_Z16_fetch_usbserialv>
   d6550:	4939      	ldr	r1, [pc, #228]	; (d6638 <_ZN7UbiHTTP3getEPKcS1_+0x1b4>)
   d6552:	f003 fc0b 	bl	d9d6c <_ZN5Print5printEPKc>
      Serial.print(variable_label);
   d6556:	f004 ff19 	bl	db38c <_Z16_fetch_usbserialv>
   d655a:	4629      	mov	r1, r5
   d655c:	f003 fc06 	bl	d9d6c <_ZN5Print5printEPKc>
      Serial.print("/lv");
   d6560:	f004 ff14 	bl	db38c <_Z16_fetch_usbserialv>
   d6564:	4935      	ldr	r1, [pc, #212]	; (d663c <_ZN7UbiHTTP3getEPKcS1_+0x1b8>)
   d6566:	f003 fc01 	bl	d9d6c <_ZN5Print5printEPKc>
      Serial.print(" HTTP/1.1\r\n");
   d656a:	f004 ff0f 	bl	db38c <_Z16_fetch_usbserialv>
   d656e:	4934      	ldr	r1, [pc, #208]	; (d6640 <_ZN7UbiHTTP3getEPKcS1_+0x1bc>)
   d6570:	f003 fbfc 	bl	d9d6c <_ZN5Print5printEPKc>
      Serial.print("Host: ");
   d6574:	f004 ff0a 	bl	db38c <_Z16_fetch_usbserialv>
   d6578:	4932      	ldr	r1, [pc, #200]	; (d6644 <_ZN7UbiHTTP3getEPKcS1_+0x1c0>)
   d657a:	f003 fbf7 	bl	d9d6c <_ZN5Print5printEPKc>
      Serial.print(_host);
   d657e:	f004 ff05 	bl	db38c <_Z16_fetch_usbserialv>
   d6582:	6861      	ldr	r1, [r4, #4]
   d6584:	f003 fbf2 	bl	d9d6c <_ZN5Print5printEPKc>
      Serial.print("\r\n");
   d6588:	f004 ff00 	bl	db38c <_Z16_fetch_usbserialv>
   d658c:	492e      	ldr	r1, [pc, #184]	; (d6648 <_ZN7UbiHTTP3getEPKcS1_+0x1c4>)
   d658e:	f003 fbed 	bl	d9d6c <_ZN5Print5printEPKc>
      Serial.print("User-Agent: ");
   d6592:	f004 fefb 	bl	db38c <_Z16_fetch_usbserialv>
   d6596:	492d      	ldr	r1, [pc, #180]	; (d664c <_ZN7UbiHTTP3getEPKcS1_+0x1c8>)
   d6598:	f003 fbe8 	bl	d9d6c <_ZN5Print5printEPKc>
      Serial.print(_user_agent);
   d659c:	f004 fef6 	bl	db38c <_Z16_fetch_usbserialv>
   d65a0:	68a1      	ldr	r1, [r4, #8]
   d65a2:	f003 fbe3 	bl	d9d6c <_ZN5Print5printEPKc>
      Serial.print("\r\n");
   d65a6:	f004 fef1 	bl	db38c <_Z16_fetch_usbserialv>
   d65aa:	4927      	ldr	r1, [pc, #156]	; (d6648 <_ZN7UbiHTTP3getEPKcS1_+0x1c4>)
   d65ac:	f003 fbde 	bl	d9d6c <_ZN5Print5printEPKc>
      Serial.print("X-Auth-Token: ");
   d65b0:	f004 feec 	bl	db38c <_Z16_fetch_usbserialv>
   d65b4:	4926      	ldr	r1, [pc, #152]	; (d6650 <_ZN7UbiHTTP3getEPKcS1_+0x1cc>)
   d65b6:	f003 fbd9 	bl	d9d6c <_ZN5Print5printEPKc>
      Serial.print(_token);
   d65ba:	f004 fee7 	bl	db38c <_Z16_fetch_usbserialv>
   d65be:	68e1      	ldr	r1, [r4, #12]
   d65c0:	f003 fbd4 	bl	d9d6c <_ZN5Print5printEPKc>
      Serial.print("\r\n");
   d65c4:	f004 fee2 	bl	db38c <_Z16_fetch_usbserialv>
   d65c8:	491f      	ldr	r1, [pc, #124]	; (d6648 <_ZN7UbiHTTP3getEPKcS1_+0x1c4>)
   d65ca:	f003 fbcf 	bl	d9d6c <_ZN5Print5printEPKc>
      Serial.print("Content-Type: application/json\r\n\r\n");
   d65ce:	f004 fedd 	bl	db38c <_Z16_fetch_usbserialv>
   d65d2:	4920      	ldr	r1, [pc, #128]	; (d6654 <_ZN7UbiHTTP3getEPKcS1_+0x1d0>)
   d65d4:	f003 fbca 	bl	d9d6c <_ZN5Print5printEPKc>
    if (!waitServerAnswer()) {
   d65d8:	4620      	mov	r0, r4
   d65da:	f7ff fe19 	bl	d6210 <_ZN7UbiHTTP16waitServerAnswerEv>
   d65de:	b948      	cbnz	r0, d65f4 <_ZN7UbiHTTP3getEPKcS1_+0x170>
      _client_http_ubi.stop();
   d65e0:	4813      	ldr	r0, [pc, #76]	; (d6630 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
      return ERROR_VALUE;
   d65e2:	ed9f 8a1d 	vldr	s16, [pc, #116]	; d6658 <_ZN7UbiHTTP3getEPKcS1_+0x1d4>
      _client_http_ubi.stop();
   d65e6:	f004 f8d7 	bl	da798 <_ZN9TCPClient4stopEv>
}
   d65ea:	eeb0 0a48 	vmov.f32	s0, s16
   d65ee:	ecbd 8b02 	vpop	{d8}
   d65f2:	bd70      	pop	{r4, r5, r6, pc}
    char* response = (char*)malloc(sizeof(char) * MAX_BUFFER_SIZE);
   d65f4:	f44f 702f 	mov.w	r0, #700	; 0x2bc
   d65f8:	f001 faa0 	bl	d7b3c <malloc>
    readServerAnswer(response);
   d65fc:	4601      	mov	r1, r0
    char* response = (char*)malloc(sizeof(char) * MAX_BUFFER_SIZE);
   d65fe:	4605      	mov	r5, r0
    readServerAnswer(response);
   d6600:	4620      	mov	r0, r4
   d6602:	f7ff fdc3 	bl	d618c <_ZN7UbiHTTP16readServerAnswerEPc>
  if (request_type == "LV") {
   d6606:	4628      	mov	r0, r5
   d6608:	f7ff fd04 	bl	d6014 <_ZN7UbiHTTP15parseHttpAnswerEPKcPc.part.0>
    _client_http_ubi.stop();
   d660c:	4808      	ldr	r0, [pc, #32]	; (d6630 <_ZN7UbiHTTP3getEPKcS1_+0x1ac>)
   d660e:	eeb0 8a40 	vmov.f32	s16, s0
   d6612:	f004 f8c1 	bl	da798 <_ZN9TCPClient4stopEv>
    free(response);
   d6616:	4628      	mov	r0, r5
   d6618:	f001 fa98 	bl	d7b4c <free>
    return value;
   d661c:	e7e5      	b.n	d65ea <_ZN7UbiHTTP3getEPKcS1_+0x166>
  if (_debug) {
   d661e:	7d23      	ldrb	r3, [r4, #20]
   d6620:	2b00      	cmp	r3, #0
   d6622:	d0dd      	beq.n	d65e0 <_ZN7UbiHTTP3getEPKcS1_+0x15c>
    Serial.println("Connection Failed ubidots - Try Again");
   d6624:	f004 feb2 	bl	db38c <_Z16_fetch_usbserialv>
   d6628:	490c      	ldr	r1, [pc, #48]	; (d665c <_ZN7UbiHTTP3getEPKcS1_+0x1d8>)
   d662a:	f003 fbb2 	bl	d9d92 <_ZN5Print7printlnEPKc>
   d662e:	e7d7      	b.n	d65e0 <_ZN7UbiHTTP3getEPKcS1_+0x15c>
   d6630:	2003e4e8 	.word	0x2003e4e8
   d6634:	000df2e6 	.word	0x000df2e6
   d6638:	000df2fb 	.word	0x000df2fb
   d663c:	000df2fd 	.word	0x000df2fd
   d6640:	000df1f1 	.word	0x000df1f1
   d6644:	000df1fd 	.word	0x000df1fd
   d6648:	000df321 	.word	0x000df321
   d664c:	000df204 	.word	0x000df204
   d6650:	000df211 	.word	0x000df211
   d6654:	000df301 	.word	0x000df301
   d6658:	cda2425f 	.word	0xcda2425f
   d665c:	000df324 	.word	0x000df324

000d6660 <_GLOBAL__sub_I__ZN7UbiHTTPC2EPKciS1_S1_>:
   d6660:	4801      	ldr	r0, [pc, #4]	; (d6668 <_GLOBAL__sub_I__ZN7UbiHTTPC2EPKciS1_S1_+0x8>)
   d6662:	f004 b8e9 	b.w	da838 <_ZN9TCPClientC1Ev>
   d6666:	bf00      	nop
   d6668:	2003e4e8 	.word	0x2003e4e8

000d666c <_ZN11UbiParticle3getEPKcS1_>:
}

float UbiParticle::get(const char* device_label, const char* variable_label) {
  // Retrieving values is not supported using Particle webhooks
  return ERROR_VALUE;
}
   d666c:	ed9f 0a01 	vldr	s0, [pc, #4]	; d6674 <_ZN11UbiParticle3getEPKcS1_+0x8>
   d6670:	4770      	bx	lr
   d6672:	bf00      	nop
   d6674:	cda2425f 	.word	0xcda2425f

000d6678 <_ZN11UbiParticle8setDebugEb>:

void UbiParticle::setDebug(bool debug) { _debug = debug; }
   d6678:	7401      	strb	r1, [r0, #16]
   d667a:	4770      	bx	lr

000d667c <_ZN11UbiParticle17getMultipleValuesEPKcS1_>:
   d667c:	2200      	movs	r2, #0
	  : _Node_allocator()
   d667e:	1d01      	adds	r1, r0, #4
      _M_header._M_left = &_M_header;
   d6680:	e9c0 2102 	strd	r2, r1, [r0, #8]
      _M_node_count = 0;
   d6684:	e9c0 1204 	strd	r1, r2, [r0, #16]
      _M_header._M_color = _S_red;
   d6688:	7102      	strb	r2, [r0, #4]

tcpMap UbiParticle::getMultipleValues(const char* deviceLabel, const char* variableLabels) {
  tcpMap results;
  return results;
}
   d668a:	4770      	bx	lr

000d668c <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags>:
bool UbiParticle::sendData(const char* device_label, const char* device_name, char* payload, UbiFlags* flags) {
   d668c:	b530      	push	{r4, r5, lr}
   d668e:	b085      	sub	sp, #20
   d6690:	461a      	mov	r2, r3
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   d6692:	9b08      	ldr	r3, [sp, #32]
   d6694:	781b      	ldrb	r3, [r3, #0]
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d6696:	f88d 3000 	strb.w	r3, [sp]
   d669a:	a802      	add	r0, sp, #8
   d669c:	233c      	movs	r3, #60	; 0x3c
   d669e:	f001 fc85 	bl	d7fac <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d66a2:	2000      	movs	r0, #0
      }

    private:
      element_type*
      _M_get() const noexcept
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d66a4:	9c02      	ldr	r4, [sp, #8]
   d66a6:	f001 f959 	bl	d795c <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d66aa:	b120      	cbz	r0, d66b6 <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x2a>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, int(__m));
   d66ac:	7863      	ldrb	r3, [r4, #1]
                if (isDone()) { // We can use relaxed ordering here, as long as the future's result is not examined
   d66ae:	b913      	cbnz	r3, d66b6 <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x2a>
        spark_process();
   d66b0:	f001 f9a4 	bl	d79fc <spark_process>
    }
   d66b4:	e7fa      	b.n	d66ac <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x20>
   d66b6:	7863      	ldrb	r3, [r4, #1]
   d66b8:	f3bf 8f5b 	dmb	ish
   d66bc:	1c65      	adds	r5, r4, #1
        if (this->acquireDone() && this->isSucceeded()) {
   d66be:	b9ab      	cbnz	r3, d66ec <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x60>
        return std::move(defaultValue);
   d66c0:	2500      	movs	r5, #0
	if (_M_pi != nullptr)
   d66c2:	9c03      	ldr	r4, [sp, #12]
   d66c4:	b17c      	cbz	r4, d66e6 <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x5a>
      if (--_M_use_count == 0)
   d66c6:	6863      	ldr	r3, [r4, #4]
   d66c8:	3b01      	subs	r3, #1
   d66ca:	6063      	str	r3, [r4, #4]
   d66cc:	b95b      	cbnz	r3, d66e6 <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x5a>
          _M_dispose();
   d66ce:	6823      	ldr	r3, [r4, #0]
   d66d0:	4620      	mov	r0, r4
   d66d2:	689b      	ldr	r3, [r3, #8]
   d66d4:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d66d6:	68a3      	ldr	r3, [r4, #8]
   d66d8:	3b01      	subs	r3, #1
   d66da:	60a3      	str	r3, [r4, #8]
   d66dc:	b91b      	cbnz	r3, d66e6 <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x5a>
            _M_destroy();
   d66de:	6823      	ldr	r3, [r4, #0]
   d66e0:	4620      	mov	r0, r4
   d66e2:	68db      	ldr	r3, [r3, #12]
   d66e4:	4798      	blx	r3
}
   d66e6:	4628      	mov	r0, r5
   d66e8:	b005      	add	sp, #20
   d66ea:	bd30      	pop	{r4, r5, pc}
        return (application_thread_current(nullptr) != 0);
   d66ec:	2000      	movs	r0, #0
   d66ee:	f001 f935 	bl	d795c <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d66f2:	b120      	cbz	r0, d66fe <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x72>
   d66f4:	782b      	ldrb	r3, [r5, #0]
                if (isDone()) { // We can use relaxed ordering here, as long as the future's result is not examined
   d66f6:	b913      	cbnz	r3, d66fe <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x72>
        spark_process();
   d66f8:	f001 f980 	bl	d79fc <spark_process>
    }
   d66fc:	e7fa      	b.n	d66f4 <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x68>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   d66fe:	7823      	ldrb	r3, [r4, #0]
        if (this->acquireDone() && this->isSucceeded()) {
   d6700:	2b01      	cmp	r3, #1
   d6702:	d1dd      	bne.n	d66c0 <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x34>
            return result_;
   d6704:	7b25      	ldrb	r5, [r4, #12]
   d6706:	e7dc      	b.n	d66c2 <_ZN11UbiParticle8sendDataEPKcS1_PcP8UbiFlags+0x36>

000d6708 <_ZN11UbiParticleC1EPKciS1_S1_>:
UbiParticle::UbiParticle(const char* host, const int port, const char* user_agent, const char* token) {
   d6708:	b510      	push	{r4, lr}
   d670a:	4c04      	ldr	r4, [pc, #16]	; (d671c <_ZN11UbiParticleC1EPKciS1_S1_+0x14>)
   d670c:	6004      	str	r4, [r0, #0]
  _user_agent = user_agent;
   d670e:	e9c0 1301 	strd	r1, r3, [r0, #4]
UbiParticle::UbiParticle(const char* host, const int port, const char* user_agent, const char* token) {
   d6712:	2400      	movs	r4, #0
  _token = token;
   d6714:	9b02      	ldr	r3, [sp, #8]
UbiParticle::UbiParticle(const char* host, const int port, const char* user_agent, const char* token) {
   d6716:	7404      	strb	r4, [r0, #16]
  _token = token;
   d6718:	60c3      	str	r3, [r0, #12]
}
   d671a:	bd10      	pop	{r4, pc}
   d671c:	000df36c 	.word	0x000df36c

000d6720 <_ZN18UbiProtocolHandler3addEPcfS0_mj>:
 * @arg dot_timestamp_millis [optional] Dot timestamp in millis to add to
 * dot_timestamp_seconds, usefull for datalogger.
 */

void UbiProtocolHandler::add(char* variable_label, float value, char* context, unsigned long dot_timestamp_seconds,
                             unsigned int dot_timestamp_millis) {
   d6720:	b538      	push	{r3, r4, r5, lr}
   d6722:	4604      	mov	r4, r0
  _dirty = true;
   d6724:	2001      	movs	r0, #1
   d6726:	7460      	strb	r0, [r4, #17]
  (_dots + _current_value)->variable_label = variable_label;
   d6728:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d672c:	68e5      	ldr	r5, [r4, #12]
   d672e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   d6732:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
  (_dots + _current_value)->dot_value = value;
   d6736:	f994 1010 	ldrsb.w	r1, [r4, #16]
   d673a:	68e0      	ldr	r0, [r4, #12]
   d673c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   d6740:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   d6744:	ed81 0a02 	vstr	s0, [r1, #8]
  (_dots + _current_value)->dot_context = context;
   d6748:	f994 1010 	ldrsb.w	r1, [r4, #16]
   d674c:	68e0      	ldr	r0, [r4, #12]
   d674e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   d6752:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   d6756:	604a      	str	r2, [r1, #4]
  (_dots + _current_value)->dot_timestamp_seconds = dot_timestamp_seconds;
   d6758:	f994 2010 	ldrsb.w	r2, [r4, #16]
   d675c:	68e1      	ldr	r1, [r4, #12]
   d675e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   d6762:	eb01 0282 	add.w	r2, r1, r2, lsl #2
   d6766:	60d3      	str	r3, [r2, #12]
  (_dots + _current_value)->dot_timestamp_millis = dot_timestamp_millis;
   d6768:	f994 3010 	ldrsb.w	r3, [r4, #16]
   d676c:	68e2      	ldr	r2, [r4, #12]
   d676e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   d6772:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   d6776:	9a04      	ldr	r2, [sp, #16]
   d6778:	611a      	str	r2, [r3, #16]
  _current_value++;
   d677a:	7c23      	ldrb	r3, [r4, #16]
   d677c:	3301      	adds	r3, #1
   d677e:	b25b      	sxtb	r3, r3
  if (_current_value > MAX_VALUES) {
   d6780:	2b0a      	cmp	r3, #10
  _current_value++;
   d6782:	7423      	strb	r3, [r4, #16]
  if (_current_value > MAX_VALUES) {
   d6784:	dd08      	ble.n	d6798 <_ZN18UbiProtocolHandler3addEPcfS0_mj+0x78>
    if (_debug) {
   d6786:	7ca3      	ldrb	r3, [r4, #18]
   d6788:	b123      	cbz	r3, d6794 <_ZN18UbiProtocolHandler3addEPcfS0_mj+0x74>
      Serial.println(F("You are sending more than the maximum of consecutive variables"));
   d678a:	f004 fdff 	bl	db38c <_Z16_fetch_usbserialv>
   d678e:	4903      	ldr	r1, [pc, #12]	; (d679c <_ZN18UbiProtocolHandler3addEPcfS0_mj+0x7c>)
   d6790:	f003 faff 	bl	d9d92 <_ZN5Print7printlnEPKc>
    }
    _current_value = MAX_VALUES;
   d6794:	230a      	movs	r3, #10
   d6796:	7423      	strb	r3, [r4, #16]
  }
}
   d6798:	bd38      	pop	{r3, r4, r5, pc}
   d679a:	bf00      	nop
   d679c:	000df37c 	.word	0x000df37c

000d67a0 <_ZN18UbiProtocolHandler12_floatToCharEPcf>:
 * Stores the float type value into the char array input
 * @str_value [Mandatory] char payload pointer to store the value.
 * @value [Mandatory] Float value to convert
 */

void UbiProtocolHandler::_floatToChar(char* str_value, float value) {
   d67a0:	b510      	push	{r4, lr}
   d67a2:	ee10 0a10 	vmov	r0, s0
   d67a6:	b086      	sub	sp, #24
   d67a8:	460c      	mov	r4, r1
  char temp_arr[20];
  sprintf(temp_arr, "%17g", value);
   d67aa:	f005 fb31 	bl	dbe10 <__aeabi_f2d>
   d67ae:	4602      	mov	r2, r0
   d67b0:	460b      	mov	r3, r1
   d67b2:	a801      	add	r0, sp, #4
   d67b4:	490a      	ldr	r1, [pc, #40]	; (d67e0 <_ZN18UbiProtocolHandler12_floatToCharEPcf+0x40>)
   d67b6:	f001 f9d9 	bl	d7b6c <sprintf>
  uint8_t j = 0;
  uint8_t k = 0;
  while (j < 20) {
   d67ba:	a801      	add	r0, sp, #4
  sprintf(temp_arr, "%17g", value);
   d67bc:	2214      	movs	r2, #20
  uint8_t k = 0;
   d67be:	2300      	movs	r3, #0
    if (temp_arr[j] != ' ') {
   d67c0:	f810 1b01 	ldrb.w	r1, [r0], #1
   d67c4:	2920      	cmp	r1, #32
   d67c6:	d006      	beq.n	d67d6 <_ZN18UbiProtocolHandler12_floatToCharEPcf+0x36>
      str_value[k] = temp_arr[j];
   d67c8:	54e1      	strb	r1, [r4, r3]
      k++;
   d67ca:	3301      	adds	r3, #1
   d67cc:	b2db      	uxtb	r3, r3
    }
    if (temp_arr[j] == '\0') {
   d67ce:	b911      	cbnz	r1, d67d6 <_ZN18UbiProtocolHandler12_floatToCharEPcf+0x36>
      str_value[k] = temp_arr[j];
   d67d0:	54e1      	strb	r1, [r4, r3]
      break;
    }
    j++;
  }
}
   d67d2:	b006      	add	sp, #24
   d67d4:	bd10      	pop	{r4, pc}
  while (j < 20) {
   d67d6:	3a01      	subs	r2, #1
   d67d8:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
   d67dc:	d1f0      	bne.n	d67c0 <_ZN18UbiProtocolHandler12_floatToCharEPcf+0x20>
   d67de:	e7f8      	b.n	d67d2 <_ZN18UbiProtocolHandler12_floatToCharEPcf+0x32>
   d67e0:	000df3bb 	.word	0x000df3bb

000d67e4 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc>:
void UbiProtocolHandler::buildHttpPayload(char* payload) {
   d67e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d67e8:	460c      	mov	r4, r1
   d67ea:	b089      	sub	sp, #36	; 0x24
  sprintf(payload, "{");
   d67ec:	494c      	ldr	r1, [pc, #304]	; (d6920 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x13c>)
    sprintf(payload, "%s\"%s\":{\"value\":%s", payload, (_dots + i)->variable_label, str_value);
   d67ee:	f8df 8154 	ldr.w	r8, [pc, #340]	; d6944 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x160>
      sprintf(payload, "%s,\"timestamp\":%lu", payload, (_dots + i)->dot_timestamp_seconds);
   d67f2:	f8df 9154 	ldr.w	r9, [pc, #340]	; d6948 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x164>
        sprintf(payload, "%s000", payload);
   d67f6:	f8df a154 	ldr.w	sl, [pc, #340]	; d694c <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x168>
void UbiProtocolHandler::buildHttpPayload(char* payload) {
   d67fa:	4605      	mov	r5, r0
  sprintf(payload, "{");
   d67fc:	4620      	mov	r0, r4
   d67fe:	f006 f8ee 	bl	dc9de <strcpy>
  for (uint8_t i = 0; i < _current_value;) {
   d6802:	2600      	movs	r6, #0
   d6804:	f995 3010 	ldrsb.w	r3, [r5, #16]
   d6808:	429e      	cmp	r6, r3
   d680a:	da6a      	bge.n	d68e2 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0xfe>
    _floatToChar(str_value, (_dots + i)->dot_value);
   d680c:	68eb      	ldr	r3, [r5, #12]
   d680e:	eb06 0b86 	add.w	fp, r6, r6, lsl #2
   d6812:	eb03 038b 	add.w	r3, r3, fp, lsl #2
   d6816:	ed93 0a02 	vldr	s0, [r3, #8]
   d681a:	a903      	add	r1, sp, #12
   d681c:	4628      	mov	r0, r5
   d681e:	f7ff ffbf 	bl	d67a0 <_ZN18UbiProtocolHandler12_floatToCharEPcf>
    sprintf(payload, "%s\"%s\":{\"value\":%s", payload, (_dots + i)->variable_label, str_value);
   d6822:	68eb      	ldr	r3, [r5, #12]
   d6824:	a903      	add	r1, sp, #12
   d6826:	9100      	str	r1, [sp, #0]
   d6828:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
   d682c:	4622      	mov	r2, r4
   d682e:	4641      	mov	r1, r8
   d6830:	4620      	mov	r0, r4
   d6832:	f001 f99b 	bl	d7b6c <sprintf>
    if ((_dots + i)->dot_timestamp_seconds != NULL) {
   d6836:	68eb      	ldr	r3, [r5, #12]
    _floatToChar(str_value, (_dots + i)->dot_value);
   d6838:	ea4f 078b 	mov.w	r7, fp, lsl #2
    if ((_dots + i)->dot_timestamp_seconds != NULL) {
   d683c:	443b      	add	r3, r7
   d683e:	68db      	ldr	r3, [r3, #12]
   d6840:	b343      	cbz	r3, d6894 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0xb0>
      sprintf(payload, "%s,\"timestamp\":%lu", payload, (_dots + i)->dot_timestamp_seconds);
   d6842:	4622      	mov	r2, r4
   d6844:	4649      	mov	r1, r9
   d6846:	4620      	mov	r0, r4
   d6848:	f001 f990 	bl	d7b6c <sprintf>
      if ((_dots + i)->dot_timestamp_millis != NULL) {
   d684c:	68eb      	ldr	r3, [r5, #12]
   d684e:	443b      	add	r3, r7
   d6850:	691b      	ldr	r3, [r3, #16]
   d6852:	2b00      	cmp	r3, #0
   d6854:	d038      	beq.n	d68c8 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0xe4>
        uint8_t dec = (timestamp_millis / 10) % 10;
   d6856:	200a      	movs	r0, #10
   d6858:	fb93 f1f0 	sdiv	r1, r3, r0
   d685c:	fb91 fcf0 	sdiv	ip, r1, r0
   d6860:	fb00 1c1c 	mls	ip, r0, ip, r1
        uint8_t units = timestamp_millis % 10;
   d6864:	fb00 3111 	mls	r1, r0, r1, r3
        sprintf(milliseconds, "%d%d%d", hund, dec, units);
   d6868:	b2c9      	uxtb	r1, r1
        uint8_t hund = (timestamp_millis / 100) % 10;
   d686a:	2264      	movs	r2, #100	; 0x64
   d686c:	fb93 f2f2 	sdiv	r2, r3, r2
   d6870:	fb92 fef0 	sdiv	lr, r2, r0
   d6874:	fb00 221e 	mls	r2, r0, lr, r2
        sprintf(milliseconds, "%d%d%d", hund, dec, units);
   d6878:	9100      	str	r1, [sp, #0]
   d687a:	fa5f f38c 	uxtb.w	r3, ip
   d687e:	4929      	ldr	r1, [pc, #164]	; (d6924 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x140>)
   d6880:	b2d2      	uxtb	r2, r2
   d6882:	a802      	add	r0, sp, #8
   d6884:	f001 f972 	bl	d7b6c <sprintf>
        sprintf(payload, "%s%s", payload, milliseconds);
   d6888:	4927      	ldr	r1, [pc, #156]	; (d6928 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x144>)
   d688a:	ab02      	add	r3, sp, #8
   d688c:	4622      	mov	r2, r4
   d688e:	4620      	mov	r0, r4
   d6890:	f001 f96c 	bl	d7b6c <sprintf>
    if ((_dots + i)->dot_context != NULL) {
   d6894:	68eb      	ldr	r3, [r5, #12]
   d6896:	441f      	add	r7, r3
   d6898:	687b      	ldr	r3, [r7, #4]
   d689a:	b123      	cbz	r3, d68a6 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0xc2>
      sprintf(payload, "%s,\"context\": {%s}", payload, (_dots + i)->dot_context);
   d689c:	4923      	ldr	r1, [pc, #140]	; (d692c <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x148>)
   d689e:	4622      	mov	r2, r4
   d68a0:	4620      	mov	r0, r4
   d68a2:	f001 f963 	bl	d7b6c <sprintf>
    sprintf(payload, "%s}", payload);
   d68a6:	4622      	mov	r2, r4
   d68a8:	4921      	ldr	r1, [pc, #132]	; (d6930 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x14c>)
   d68aa:	4620      	mov	r0, r4
   d68ac:	f001 f95e 	bl	d7b6c <sprintf>
    i++;
   d68b0:	3601      	adds	r6, #1
    if (i < _current_value) {
   d68b2:	f995 3010 	ldrsb.w	r3, [r5, #16]
    i++;
   d68b6:	b2f6      	uxtb	r6, r6
    if (i < _current_value) {
   d68b8:	429e      	cmp	r6, r3
      sprintf(payload, "%s,", payload);
   d68ba:	4622      	mov	r2, r4
    if (i < _current_value) {
   d68bc:	da0a      	bge.n	d68d4 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0xf0>
      sprintf(payload, "%s,", payload);
   d68be:	491d      	ldr	r1, [pc, #116]	; (d6934 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x150>)
   d68c0:	4620      	mov	r0, r4
   d68c2:	f001 f953 	bl	d7b6c <sprintf>
   d68c6:	e79d      	b.n	d6804 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x20>
        sprintf(payload, "%s000", payload);
   d68c8:	4622      	mov	r2, r4
   d68ca:	4651      	mov	r1, sl
   d68cc:	4620      	mov	r0, r4
   d68ce:	f001 f94d 	bl	d7b6c <sprintf>
   d68d2:	e7df      	b.n	d6894 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0xb0>
      sprintf(payload, "%s}", payload);
   d68d4:	4916      	ldr	r1, [pc, #88]	; (d6930 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x14c>)
   d68d6:	4620      	mov	r0, r4
   d68d8:	f001 f948 	bl	d7b6c <sprintf>
      _current_value = 0;
   d68dc:	2300      	movs	r3, #0
   d68de:	742b      	strb	r3, [r5, #16]
  for (uint8_t i = 0; i < _current_value;) {
   d68e0:	e790      	b.n	d6804 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x20>
  if (_debug) {
   d68e2:	7cab      	ldrb	r3, [r5, #18]
   d68e4:	b1c3      	cbz	r3, d6918 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x134>
    Serial.println("----------");
   d68e6:	f004 fd51 	bl	db38c <_Z16_fetch_usbserialv>
   d68ea:	4913      	ldr	r1, [pc, #76]	; (d6938 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x154>)
   d68ec:	f003 fa51 	bl	d9d92 <_ZN5Print7printlnEPKc>
    Serial.println("payload:");
   d68f0:	f004 fd4c 	bl	db38c <_Z16_fetch_usbserialv>
   d68f4:	4911      	ldr	r1, [pc, #68]	; (d693c <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x158>)
   d68f6:	f003 fa4c 	bl	d9d92 <_ZN5Print7printlnEPKc>
    Serial.println(payload);
   d68fa:	f004 fd47 	bl	db38c <_Z16_fetch_usbserialv>
   d68fe:	4621      	mov	r1, r4
   d6900:	f003 fa47 	bl	d9d92 <_ZN5Print7printlnEPKc>
    Serial.println("----------");
   d6904:	f004 fd42 	bl	db38c <_Z16_fetch_usbserialv>
   d6908:	490b      	ldr	r1, [pc, #44]	; (d6938 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x154>)
   d690a:	f003 fa42 	bl	d9d92 <_ZN5Print7printlnEPKc>
    Serial.println("");
   d690e:	f004 fd3d 	bl	db38c <_Z16_fetch_usbserialv>
   d6912:	490b      	ldr	r1, [pc, #44]	; (d6940 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc+0x15c>)
   d6914:	f003 fa3d 	bl	d9d92 <_ZN5Print7printlnEPKc>
}
   d6918:	b009      	add	sp, #36	; 0x24
   d691a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d691e:	bf00      	nop
   d6920:	000df3c0 	.word	0x000df3c0
   d6924:	000df3e8 	.word	0x000df3e8
   d6928:	000df3ef 	.word	0x000df3ef
   d692c:	000df3fa 	.word	0x000df3fa
   d6930:	000df409 	.word	0x000df409
   d6934:	000df40d 	.word	0x000df40d
   d6938:	000df19b 	.word	0x000df19b
   d693c:	000df411 	.word	0x000df411
   d6940:	000df323 	.word	0x000df323
   d6944:	000df3c2 	.word	0x000df3c2
   d6948:	000df3d5 	.word	0x000df3d5
   d694c:	000df3f4 	.word	0x000df3f4

000d6950 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_>:
void UbiProtocolHandler::buildTcpPayload(char* payload, const char* device_label, const char* device_name) {
   d6950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6954:	460c      	mov	r4, r1
   d6956:	4605      	mov	r5, r0
   d6958:	b089      	sub	sp, #36	; 0x24
  sprintf(payload, "");
   d695a:	4952      	ldr	r1, [pc, #328]	; (d6aa4 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x154>)
      sprintf(payload, "%s$%s", payload, (_dots + i)->dot_context);
   d695c:	f8df 8174 	ldr.w	r8, [pc, #372]	; d6ad4 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x184>
      sprintf(payload, "%s@%lu", payload, (_dots + i)->dot_timestamp_seconds);
   d6960:	f8df 9174 	ldr.w	r9, [pc, #372]	; d6ad8 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x188>
  sprintf(payload, "");
   d6964:	4620      	mov	r0, r4
void UbiProtocolHandler::buildTcpPayload(char* payload, const char* device_label, const char* device_name) {
   d6966:	4616      	mov	r6, r2
   d6968:	461f      	mov	r7, r3
  sprintf(payload, "");
   d696a:	f006 f838 	bl	dc9de <strcpy>
  sprintf(payload, "%s|POST|%s|", USER_AGENT, _token);
   d696e:	68ab      	ldr	r3, [r5, #8]
   d6970:	4a4d      	ldr	r2, [pc, #308]	; (d6aa8 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x158>)
   d6972:	494e      	ldr	r1, [pc, #312]	; (d6aac <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x15c>)
   d6974:	4620      	mov	r0, r4
   d6976:	f001 f8f9 	bl	d7b6c <sprintf>
  sprintf(payload, "%s%s:%s", payload, device_label, device_name);
   d697a:	4633      	mov	r3, r6
   d697c:	494c      	ldr	r1, [pc, #304]	; (d6ab0 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x160>)
   d697e:	9700      	str	r7, [sp, #0]
   d6980:	4622      	mov	r2, r4
   d6982:	4620      	mov	r0, r4
   d6984:	f001 f8f2 	bl	d7b6c <sprintf>
  sprintf(payload, "%s=>", payload);
   d6988:	494a      	ldr	r1, [pc, #296]	; (d6ab4 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x164>)
    sprintf(payload, "%s%s:%s", payload, (_dots + i)->variable_label, str_value);
   d698a:	4f49      	ldr	r7, [pc, #292]	; (d6ab0 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x160>)
  sprintf(payload, "%s=>", payload);
   d698c:	4622      	mov	r2, r4
   d698e:	4620      	mov	r0, r4
   d6990:	f001 f8ec 	bl	d7b6c <sprintf>
  for (uint8_t i = 0; i < _current_value;) {
   d6994:	2600      	movs	r6, #0
   d6996:	f995 3010 	ldrsb.w	r3, [r5, #16]
   d699a:	429e      	cmp	r6, r3
   d699c:	da64      	bge.n	d6a68 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x118>
    _floatToChar(str_value, (_dots + i)->dot_value);
   d699e:	68eb      	ldr	r3, [r5, #12]
   d69a0:	eb06 0b86 	add.w	fp, r6, r6, lsl #2
   d69a4:	eb03 038b 	add.w	r3, r3, fp, lsl #2
   d69a8:	ed93 0a02 	vldr	s0, [r3, #8]
   d69ac:	a903      	add	r1, sp, #12
   d69ae:	4628      	mov	r0, r5
   d69b0:	f7ff fef6 	bl	d67a0 <_ZN18UbiProtocolHandler12_floatToCharEPcf>
    sprintf(payload, "%s%s:%s", payload, (_dots + i)->variable_label, str_value);
   d69b4:	68eb      	ldr	r3, [r5, #12]
   d69b6:	a903      	add	r1, sp, #12
   d69b8:	9100      	str	r1, [sp, #0]
   d69ba:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
   d69be:	4622      	mov	r2, r4
   d69c0:	4639      	mov	r1, r7
   d69c2:	4620      	mov	r0, r4
   d69c4:	f001 f8d2 	bl	d7b6c <sprintf>
    if ((_dots + i)->dot_context != NULL) {
   d69c8:	68eb      	ldr	r3, [r5, #12]
    _floatToChar(str_value, (_dots + i)->dot_value);
   d69ca:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
    if ((_dots + i)->dot_context != NULL) {
   d69ce:	4453      	add	r3, sl
   d69d0:	685b      	ldr	r3, [r3, #4]
   d69d2:	b123      	cbz	r3, d69de <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x8e>
      sprintf(payload, "%s$%s", payload, (_dots + i)->dot_context);
   d69d4:	4622      	mov	r2, r4
   d69d6:	4641      	mov	r1, r8
   d69d8:	4620      	mov	r0, r4
   d69da:	f001 f8c7 	bl	d7b6c <sprintf>
    if ((_dots + i)->dot_timestamp_seconds != NULL) {
   d69de:	68eb      	ldr	r3, [r5, #12]
   d69e0:	4453      	add	r3, sl
   d69e2:	68db      	ldr	r3, [r3, #12]
   d69e4:	b33b      	cbz	r3, d6a36 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0xe6>
      sprintf(payload, "%s@%lu", payload, (_dots + i)->dot_timestamp_seconds);
   d69e6:	4622      	mov	r2, r4
   d69e8:	4649      	mov	r1, r9
   d69ea:	4620      	mov	r0, r4
   d69ec:	f001 f8be 	bl	d7b6c <sprintf>
      if ((_dots + i)->dot_timestamp_millis != NULL) {
   d69f0:	68eb      	ldr	r3, [r5, #12]
   d69f2:	4453      	add	r3, sl
   d69f4:	691b      	ldr	r3, [r3, #16]
   d69f6:	b353      	cbz	r3, d6a4e <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0xfe>
        uint8_t dec = (timestamp_millis / 10) % 10;
   d69f8:	200a      	movs	r0, #10
   d69fa:	fb93 f1f0 	sdiv	r1, r3, r0
   d69fe:	fb91 fcf0 	sdiv	ip, r1, r0
   d6a02:	fb00 1c1c 	mls	ip, r0, ip, r1
        uint8_t units = timestamp_millis % 10;
   d6a06:	fb00 3111 	mls	r1, r0, r1, r3
        sprintf(milliseconds, "%d%d%d", hund, dec, units);
   d6a0a:	b2c9      	uxtb	r1, r1
        uint8_t hund = (timestamp_millis / 100) % 10;
   d6a0c:	2264      	movs	r2, #100	; 0x64
   d6a0e:	fb93 f2f2 	sdiv	r2, r3, r2
   d6a12:	fb92 fef0 	sdiv	lr, r2, r0
   d6a16:	fb00 221e 	mls	r2, r0, lr, r2
        sprintf(milliseconds, "%d%d%d", hund, dec, units);
   d6a1a:	9100      	str	r1, [sp, #0]
   d6a1c:	fa5f f38c 	uxtb.w	r3, ip
   d6a20:	4925      	ldr	r1, [pc, #148]	; (d6ab8 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x168>)
   d6a22:	b2d2      	uxtb	r2, r2
   d6a24:	a802      	add	r0, sp, #8
   d6a26:	f001 f8a1 	bl	d7b6c <sprintf>
        sprintf(payload, "%s%s", payload, milliseconds);
   d6a2a:	4924      	ldr	r1, [pc, #144]	; (d6abc <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x16c>)
   d6a2c:	ab02      	add	r3, sp, #8
   d6a2e:	4622      	mov	r2, r4
   d6a30:	4620      	mov	r0, r4
   d6a32:	f001 f89b 	bl	d7b6c <sprintf>
    if (i < _current_value) {
   d6a36:	f995 3010 	ldrsb.w	r3, [r5, #16]
    i++;
   d6a3a:	3601      	adds	r6, #1
   d6a3c:	b2f6      	uxtb	r6, r6
    if (i < _current_value) {
   d6a3e:	429e      	cmp	r6, r3
      sprintf(payload, "%s,", payload);
   d6a40:	4622      	mov	r2, r4
    if (i < _current_value) {
   d6a42:	da0a      	bge.n	d6a5a <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x10a>
      sprintf(payload, "%s,", payload);
   d6a44:	491e      	ldr	r1, [pc, #120]	; (d6ac0 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x170>)
   d6a46:	4620      	mov	r0, r4
   d6a48:	f001 f890 	bl	d7b6c <sprintf>
   d6a4c:	e7a3      	b.n	d6996 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x46>
        sprintf(payload, "%s000", payload);
   d6a4e:	491d      	ldr	r1, [pc, #116]	; (d6ac4 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x174>)
   d6a50:	4622      	mov	r2, r4
   d6a52:	4620      	mov	r0, r4
   d6a54:	f001 f88a 	bl	d7b6c <sprintf>
   d6a58:	e7ed      	b.n	d6a36 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0xe6>
      sprintf(payload, "%s|end", payload);
   d6a5a:	491b      	ldr	r1, [pc, #108]	; (d6ac8 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x178>)
   d6a5c:	4620      	mov	r0, r4
   d6a5e:	f001 f885 	bl	d7b6c <sprintf>
      _current_value = 0;
   d6a62:	2300      	movs	r3, #0
   d6a64:	742b      	strb	r3, [r5, #16]
  for (uint8_t i = 0; i < _current_value;) {
   d6a66:	e796      	b.n	d6996 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x46>
  if (_debug) {
   d6a68:	7cab      	ldrb	r3, [r5, #18]
   d6a6a:	b1c3      	cbz	r3, d6a9e <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x14e>
    Serial.println("----------");
   d6a6c:	f004 fc8e 	bl	db38c <_Z16_fetch_usbserialv>
   d6a70:	4916      	ldr	r1, [pc, #88]	; (d6acc <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x17c>)
   d6a72:	f003 f98e 	bl	d9d92 <_ZN5Print7printlnEPKc>
    Serial.println("payload:");
   d6a76:	f004 fc89 	bl	db38c <_Z16_fetch_usbserialv>
   d6a7a:	4915      	ldr	r1, [pc, #84]	; (d6ad0 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x180>)
   d6a7c:	f003 f989 	bl	d9d92 <_ZN5Print7printlnEPKc>
    Serial.println(payload);
   d6a80:	f004 fc84 	bl	db38c <_Z16_fetch_usbserialv>
   d6a84:	4621      	mov	r1, r4
   d6a86:	f003 f984 	bl	d9d92 <_ZN5Print7printlnEPKc>
    Serial.println("----------");
   d6a8a:	f004 fc7f 	bl	db38c <_Z16_fetch_usbserialv>
   d6a8e:	490f      	ldr	r1, [pc, #60]	; (d6acc <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x17c>)
   d6a90:	f003 f97f 	bl	d9d92 <_ZN5Print7printlnEPKc>
    Serial.println("");
   d6a94:	f004 fc7a 	bl	db38c <_Z16_fetch_usbserialv>
   d6a98:	4902      	ldr	r1, [pc, #8]	; (d6aa4 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_+0x154>)
   d6a9a:	f003 f97a 	bl	d9d92 <_ZN5Print7printlnEPKc>
}
   d6a9e:	b009      	add	sp, #36	; 0x24
   d6aa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6aa4:	000df323 	.word	0x000df323
   d6aa8:	000df138 	.word	0x000df138
   d6aac:	000df41a 	.word	0x000df41a
   d6ab0:	000df426 	.word	0x000df426
   d6ab4:	000df42e 	.word	0x000df42e
   d6ab8:	000df3e8 	.word	0x000df3e8
   d6abc:	000df3ef 	.word	0x000df3ef
   d6ac0:	000df40d 	.word	0x000df40d
   d6ac4:	000df3f4 	.word	0x000df3f4
   d6ac8:	000df440 	.word	0x000df440
   d6acc:	000df19b 	.word	0x000df19b
   d6ad0:	000df411 	.word	0x000df411
   d6ad4:	000df433 	.word	0x000df433
   d6ad8:	000df439 	.word	0x000df439

000d6adc <_ZN18UbiProtocolHandler4sendEPKcS1_P8UbiFlags>:
bool UbiProtocolHandler::send(const char* device_label, const char* device_name, UbiFlags* flags) {
   d6adc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d6ae0:	4604      	mov	r4, r0
  char* payload = (char*)malloc(sizeof(char) * MAX_BUFFER_SIZE);
   d6ae2:	f44f 702f 	mov.w	r0, #700	; 0x2bc
bool UbiProtocolHandler::send(const char* device_label, const char* device_name, UbiFlags* flags) {
   d6ae6:	461e      	mov	r6, r3
   d6ae8:	460f      	mov	r7, r1
   d6aea:	4690      	mov	r8, r2
  char* payload = (char*)malloc(sizeof(char) * MAX_BUFFER_SIZE);
   d6aec:	f001 f826 	bl	d7b3c <malloc>
  if (_iot_protocol == UBI_TCP || _iot_protocol == UBI_UDP) {
   d6af0:	7ce3      	ldrb	r3, [r4, #19]
   d6af2:	3b01      	subs	r3, #1
   d6af4:	2b01      	cmp	r3, #1
  char* payload = (char*)malloc(sizeof(char) * MAX_BUFFER_SIZE);
   d6af6:	4605      	mov	r5, r0
  if (_iot_protocol == UBI_TCP || _iot_protocol == UBI_UDP) {
   d6af8:	d826      	bhi.n	d6b48 <_ZN18UbiProtocolHandler4sendEPKcS1_P8UbiFlags+0x6c>
    buildTcpPayload(payload, device_label, device_name);
   d6afa:	4601      	mov	r1, r0
   d6afc:	4643      	mov	r3, r8
   d6afe:	463a      	mov	r2, r7
   d6b00:	4620      	mov	r0, r4
   d6b02:	f7ff ff25 	bl	d6950 <_ZN18UbiProtocolHandler15buildTcpPayloadEPcPKcS2_>
  if (_debug) {
   d6b06:	7ca3      	ldrb	r3, [r4, #18]
   d6b08:	b123      	cbz	r3, d6b14 <_ZN18UbiProtocolHandler4sendEPKcS1_P8UbiFlags+0x38>
    Serial.println("Sending data...");
   d6b0a:	f004 fc3f 	bl	db38c <_Z16_fetch_usbserialv>
   d6b0e:	4911      	ldr	r1, [pc, #68]	; (d6b54 <_ZN18UbiProtocolHandler4sendEPKcS1_P8UbiFlags+0x78>)
   d6b10:	f003 f93f 	bl	d9d92 <_ZN5Print7printlnEPKc>
  bool result = _ubiProtocol->sendData(device_label, device_name, payload, flags);
   d6b14:	6860      	ldr	r0, [r4, #4]
   d6b16:	6803      	ldr	r3, [r0, #0]
   d6b18:	9600      	str	r6, [sp, #0]
   d6b1a:	f8d3 9000 	ldr.w	r9, [r3]
   d6b1e:	4639      	mov	r1, r7
   d6b20:	462b      	mov	r3, r5
   d6b22:	4642      	mov	r2, r8
   d6b24:	47c8      	blx	r9
   d6b26:	4607      	mov	r7, r0
  free(payload);
   d6b28:	4628      	mov	r0, r5
   d6b2a:	f001 f80f 	bl	d7b4c <free>
  delete flags;
   d6b2e:	b11e      	cbz	r6, d6b38 <_ZN18UbiProtocolHandler4sendEPKcS1_P8UbiFlags+0x5c>
   d6b30:	2101      	movs	r1, #1
   d6b32:	4630      	mov	r0, r6
   d6b34:	f004 fe3a 	bl	db7ac <_ZdlPvj>
  if (result) {
   d6b38:	2300      	movs	r3, #0
   d6b3a:	b107      	cbz	r7, d6b3e <_ZN18UbiProtocolHandler4sendEPKcS1_P8UbiFlags+0x62>
    _dirty = false;
   d6b3c:	7463      	strb	r3, [r4, #17]
}
   d6b3e:	4638      	mov	r0, r7
  _current_value = 0;
   d6b40:	7423      	strb	r3, [r4, #16]
}
   d6b42:	b003      	add	sp, #12
   d6b44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    buildHttpPayload(payload);
   d6b48:	4601      	mov	r1, r0
   d6b4a:	4620      	mov	r0, r4
   d6b4c:	f7ff fe4a 	bl	d67e4 <_ZN18UbiProtocolHandler16buildHttpPayloadEPc>
   d6b50:	e7d9      	b.n	d6b06 <_ZN18UbiProtocolHandler4sendEPKcS1_P8UbiFlags+0x2a>
   d6b52:	bf00      	nop
   d6b54:	000df447 	.word	0x000df447

000d6b58 <_ZN18UbiProtocolHandler4sendEPKcN8particle5FlagsI15PublishFlagTypehEE>:
bool UbiProtocolHandler::send(const char* device_label, PublishFlags flag) {
   d6b58:	b570      	push	{r4, r5, r6, lr}
   d6b5a:	4604      	mov	r4, r0
  UbiFlags* flags = new UbiFlags();
   d6b5c:	2001      	movs	r0, #1
bool UbiProtocolHandler::send(const char* device_label, PublishFlags flag) {
   d6b5e:	460d      	mov	r5, r1
   d6b60:	4616      	mov	r6, r2
  UbiFlags* flags = new UbiFlags();
   d6b62:	f7fd fa98 	bl	d4096 <_Znwj>
  flags->particle_flag = flag;
   d6b66:	7006      	strb	r6, [r0, #0]
  UbiFlags* flags = new UbiFlags();
   d6b68:	4603      	mov	r3, r0
  return send(device_label, device_label, flags);
   d6b6a:	462a      	mov	r2, r5
   d6b6c:	4629      	mov	r1, r5
   d6b6e:	4620      	mov	r0, r4
}
   d6b70:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return send(device_label, device_label, flags);
   d6b74:	f7ff bfb2 	b.w	d6adc <_ZN18UbiProtocolHandler4sendEPKcS1_P8UbiFlags>

000d6b78 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   d6b78:	b570      	push	{r4, r5, r6, lr}
   d6b7a:	4605      	mov	r5, r0
   d6b7c:	460c      	mov	r4, r1
      while (__x != 0)
   d6b7e:	b184      	cbz	r4, d6ba2 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E+0x2a>
	  _M_erase(_S_right(__x));
   d6b80:	68e1      	ldr	r1, [r4, #12]
   d6b82:	4628      	mov	r0, r5
   d6b84:	f7ff fff8 	bl	d6b78 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E>
      if (_M_manager)
   d6b88:	69e3      	ldr	r3, [r4, #28]
	  _Link_type __y = _S_left(__x);
   d6b8a:	68a6      	ldr	r6, [r4, #8]
   d6b8c:	b123      	cbz	r3, d6b98 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E+0x20>
    class function<_Res(_ArgTypes...)>
   d6b8e:	f104 0114 	add.w	r1, r4, #20
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d6b92:	2203      	movs	r2, #3
   d6b94:	4608      	mov	r0, r1
   d6b96:	4798      	blx	r3
   d6b98:	4620      	mov	r0, r4
   d6b9a:	f7fd fa80 	bl	d409e <_ZdlPv>
	  __x = __y;
   d6b9e:	4634      	mov	r4, r6
      }
   d6ba0:	e7ed      	b.n	d6b7e <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E+0x6>
    }
   d6ba2:	bd70      	pop	{r4, r5, r6, pc}

000d6ba4 <_ZN18UbiProtocolHandler7builderEPcPKc11IotProtocol>:
void UbiProtocolHandler::builder(char* token, UbiServer server, IotProtocol iot_protocol) {
   d6ba4:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6ba6:	b08d      	sub	sp, #52	; 0x34
   d6ba8:	4604      	mov	r4, r0
    static String deviceID(void) { return spark_deviceID(); }
   d6baa:	a801      	add	r0, sp, #4
   d6bac:	460d      	mov	r5, r1
   d6bae:	4617      	mov	r7, r2
   d6bb0:	461e      	mov	r6, r3
   d6bb2:	f000 ff3b 	bl	d7a2c <spark_deviceID>
  _default_device_label = new char[particle_id_str.length() + 1];
   d6bb6:	9803      	ldr	r0, [sp, #12]
   d6bb8:	3001      	adds	r0, #1
   d6bba:	f7fd fa6e 	bl	d409a <_Znaj>
  strcpy(_default_device_label, particle_id_str.c_str());
   d6bbe:	9901      	ldr	r1, [sp, #4]
  _default_device_label = new char[particle_id_str.length() + 1];
   d6bc0:	6020      	str	r0, [r4, #0]
  strcpy(_default_device_label, particle_id_str.c_str());
   d6bc2:	f005 ff0c 	bl	dc9de <strcpy>
  UbiBuilder builder(server, token, _iot_protocol);
   d6bc6:	462a      	mov	r2, r5
   d6bc8:	4633      	mov	r3, r6
   d6bca:	4639      	mov	r1, r7
  _iot_protocol = iot_protocol;
   d6bcc:	74e6      	strb	r6, [r4, #19]
  UbiBuilder builder(server, token, _iot_protocol);
   d6bce:	a805      	add	r0, sp, #20
   d6bd0:	f7ff f9b4 	bl	d5f3c <_ZN10UbiBuilderC1EPKcS1_11IotProtocol>
  _dots = (Value*)malloc(MAX_VALUES * sizeof(Value));
   d6bd4:	20c8      	movs	r0, #200	; 0xc8
   d6bd6:	f000 ffb1 	bl	d7b3c <malloc>
   d6bda:	60e0      	str	r0, [r4, #12]
  _ubiProtocol = builder.builder();
   d6bdc:	a805      	add	r0, sp, #20
   d6bde:	f7ff f8bb 	bl	d5d58 <_ZN10UbiBuilder7builderEv>
  _current_value = 0;
   d6be2:	2300      	movs	r3, #0
  _token = token;
   d6be4:	e9c4 0501 	strd	r0, r5, [r4, #4]
      { _M_erase(_M_begin()); }
   d6be8:	9908      	ldr	r1, [sp, #32]
  _current_value = 0;
   d6bea:	7423      	strb	r3, [r4, #16]
   d6bec:	a806      	add	r0, sp, #24
   d6bee:	f7ff ffc3 	bl	d6b78 <_ZNSt8_Rb_treeI11IotProtocolSt4pairIKS0_St8functionIFP11UbiProtocolvEEESt10_Select1stIS8_ESt4lessIS0_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E>
  String particle_id_str = System.deviceID();
   d6bf2:	a801      	add	r0, sp, #4
   d6bf4:	f003 f994 	bl	d9f20 <_ZN6StringD1Ev>
}
   d6bf8:	b00d      	add	sp, #52	; 0x34
   d6bfa:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6bfc <_ZN18UbiProtocolHandlerC1EPcPKc11IotProtocol>:
UbiProtocolHandler::UbiProtocolHandler(char* token, UbiServer server, IotProtocol iot_protocol) {
   d6bfc:	b538      	push	{r3, r4, r5, lr}
   d6bfe:	2500      	movs	r5, #0
   d6c00:	4604      	mov	r4, r0
   d6c02:	8205      	strh	r5, [r0, #16]
  builder(token, server, iot_protocol);
   d6c04:	f7ff ffce 	bl	d6ba4 <_ZN18UbiProtocolHandler7builderEPcPKc11IotProtocol>
}
   d6c08:	4620      	mov	r0, r4
   d6c0a:	bd38      	pop	{r3, r4, r5, pc}

000d6c0c <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   d6c0c:	b570      	push	{r4, r5, r6, lr}
   d6c0e:	4605      	mov	r5, r0
   d6c10:	460c      	mov	r4, r1
      while (__x != 0)
   d6c12:	b14c      	cbz	r4, d6c28 <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E+0x1c>
	  _M_erase(_S_right(__x));
   d6c14:	68e1      	ldr	r1, [r4, #12]
   d6c16:	4628      	mov	r0, r5
   d6c18:	f7ff fff8 	bl	d6c0c <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E>
	  _Link_type __y = _S_left(__x);
   d6c1c:	68a6      	ldr	r6, [r4, #8]
   d6c1e:	4620      	mov	r0, r4
   d6c20:	f7fd fa3d 	bl	d409e <_ZdlPv>
	  __x = __y;
   d6c24:	4634      	mov	r4, r6
      while (__x != 0)
   d6c26:	e7f4      	b.n	d6c12 <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E+0x6>
    }
   d6c28:	bd70      	pop	{r4, r5, r6, pc}
	...

000d6c2c <_GLOBAL__sub_I__ZN18UbiProtocolHandlerC2EPc11IotProtocol>:
}
   d6c2c:	b508      	push	{r3, lr}
        val_(val) {
   d6c2e:	4b07      	ldr	r3, [pc, #28]	; (d6c4c <_GLOBAL__sub_I__ZN18UbiProtocolHandlerC2EPc11IotProtocol+0x20>)
   d6c30:	4807      	ldr	r0, [pc, #28]	; (d6c50 <_GLOBAL__sub_I__ZN18UbiProtocolHandlerC2EPc11IotProtocol+0x24>)
   d6c32:	2200      	movs	r2, #0
   d6c34:	701a      	strb	r2, [r3, #0]
   d6c36:	f003 fdff 	bl	da838 <_ZN9TCPClientC1Ev>
   d6c3a:	4806      	ldr	r0, [pc, #24]	; (d6c54 <_GLOBAL__sub_I__ZN18UbiProtocolHandlerC2EPc11IotProtocol+0x28>)
   d6c3c:	f003 fdfc 	bl	da838 <_ZN9TCPClientC1Ev>
   d6c40:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d6c44:	4804      	ldr	r0, [pc, #16]	; (d6c58 <_GLOBAL__sub_I__ZN18UbiProtocolHandlerC2EPc11IotProtocol+0x2c>)
   d6c46:	f004 b9ff 	b.w	db048 <_ZN3UDPC1Ev>
   d6c4a:	bf00      	nop
   d6c4c:	2003e588 	.word	0x2003e588
   d6c50:	2003e56c 	.word	0x2003e56c
   d6c54:	2003e504 	.word	0x2003e504
   d6c58:	2003e520 	.word	0x2003e520

000d6c5c <_ZN6UbiTCP8setDebugEb>:

/**
 * Makes available debug traces
 */

void UbiTCP::setDebug(bool debug) { _debug = debug; }
   d6c5c:	7501      	strb	r1, [r0, #20]
   d6c5e:	4770      	bx	lr

000d6c60 <_ZN6UbiTCPC1EPKciS1_S1_>:
UbiTCP::UbiTCP(const char* host, const int port, const char* user_agent, const char* token) {
   d6c60:	b530      	push	{r4, r5, lr}
   d6c62:	4d06      	ldr	r5, [pc, #24]	; (d6c7c <_ZN6UbiTCPC1EPKciS1_S1_+0x1c>)
   d6c64:	6005      	str	r5, [r0, #0]
  _user_agent = user_agent;
   d6c66:	e9c0 1301 	strd	r1, r3, [r0, #4]
UbiTCP::UbiTCP(const char* host, const int port, const char* user_agent, const char* token) {
   d6c6a:	2500      	movs	r5, #0
  _token = token;
   d6c6c:	9b03      	ldr	r3, [sp, #12]
UbiTCP::UbiTCP(const char* host, const int port, const char* user_agent, const char* token) {
   d6c6e:	7505      	strb	r5, [r0, #20]
   d6c70:	f241 3588 	movw	r5, #5000	; 0x1388
  _port = port;
   d6c74:	e9c0 3203 	strd	r3, r2, [r0, #12]
UbiTCP::UbiTCP(const char* host, const int port, const char* user_agent, const char* token) {
   d6c78:	6185      	str	r5, [r0, #24]
}
   d6c7a:	bd30      	pop	{r4, r5, pc}
   d6c7c:	000df4f4 	.word	0x000df4f4

000d6c80 <_ZN6UbiTCP9reconnectEPKci>:
void UbiTCP::reconnect(const char* host, const int port) {
   d6c80:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6c84:	460d      	mov	r5, r1
   d6c86:	4617      	mov	r7, r2
   d6c88:	4680      	mov	r8, r0
  Serial.println("Attempting to reconnect");
   d6c8a:	f004 fb7f 	bl	db38c <_Z16_fetch_usbserialv>
   d6c8e:	491e      	ldr	r1, [pc, #120]	; (d6d08 <_ZN6UbiTCP9reconnectEPKci+0x88>)
  while (!_client_tcp_ubi.status() && attempts < 5) {
   d6c90:	4e1e      	ldr	r6, [pc, #120]	; (d6d0c <_ZN6UbiTCP9reconnectEPKci+0x8c>)
      Serial.print("Trying to connect to ");
   d6c92:	f8df a07c 	ldr.w	sl, [pc, #124]	; d6d10 <_ZN6UbiTCP9reconnectEPKci+0x90>
      Serial.print(" , attempt number: ");
   d6c96:	f8df b07c 	ldr.w	fp, [pc, #124]	; d6d14 <_ZN6UbiTCP9reconnectEPKci+0x94>
  Serial.println("Attempting to reconnect");
   d6c9a:	f003 f87a 	bl	d9d92 <_ZN5Print7printlnEPKc>
   d6c9e:	2400      	movs	r4, #0
  while (!_client_tcp_ubi.status() && attempts < 5) {
   d6ca0:	4630      	mov	r0, r6
   d6ca2:	f003 fd90 	bl	da7c6 <_ZN9TCPClient6statusEv>
   d6ca6:	bb60      	cbnz	r0, d6d02 <_ZN6UbiTCP9reconnectEPKci+0x82>
   d6ca8:	2c05      	cmp	r4, #5
   d6caa:	d02a      	beq.n	d6d02 <_ZN6UbiTCP9reconnectEPKci+0x82>
    if (_debug) {
   d6cac:	f898 3014 	ldrb.w	r3, [r8, #20]
   d6cb0:	b1c3      	cbz	r3, d6ce4 <_ZN6UbiTCP9reconnectEPKci+0x64>
      Serial.print("Trying to connect to ");
   d6cb2:	f004 fb6b 	bl	db38c <_Z16_fetch_usbserialv>
   d6cb6:	4651      	mov	r1, sl
   d6cb8:	f003 f858 	bl	d9d6c <_ZN5Print5printEPKc>
      Serial.print(host);
   d6cbc:	f004 fb66 	bl	db38c <_Z16_fetch_usbserialv>
   d6cc0:	4629      	mov	r1, r5
   d6cc2:	f003 f853 	bl	d9d6c <_ZN5Print5printEPKc>
      Serial.print(" , attempt number: ");
   d6cc6:	f004 fb61 	bl	db38c <_Z16_fetch_usbserialv>
   d6cca:	4659      	mov	r1, fp
   d6ccc:	f003 f84e 	bl	d9d6c <_ZN5Print5printEPKc>
      Serial.println(attempts);
   d6cd0:	f004 fb5c 	bl	db38c <_Z16_fetch_usbserialv>
   d6cd4:	220a      	movs	r2, #10
   d6cd6:	4681      	mov	r9, r0
   d6cd8:	4621      	mov	r1, r4
   d6cda:	f003 f864 	bl	d9da6 <_ZN5Print11printNumberEmh>
        n += println();
   d6cde:	4648      	mov	r0, r9
   d6ce0:	f003 f84b 	bl	d9d7a <_ZN5Print7printlnEv>
    _client_tcp_ubi.stop();
   d6ce4:	4630      	mov	r0, r6
   d6ce6:	f003 fd57 	bl	da798 <_ZN9TCPClient4stopEv>
    _client_tcp_ubi.connect(host, port);
   d6cea:	2300      	movs	r3, #0
   d6cec:	b2ba      	uxth	r2, r7
   d6cee:	4629      	mov	r1, r5
   d6cf0:	4630      	mov	r0, r6
   d6cf2:	f003 fbf5 	bl	da4e0 <_ZN9TCPClient7connectEPKctm>
    delay(1000);
   d6cf6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d6cfa:	f000 ff97 	bl	d7c2c <delay>
   d6cfe:	3401      	adds	r4, #1
  while (!_client_tcp_ubi.status() && attempts < 5) {
   d6d00:	e7ce      	b.n	d6ca0 <_ZN6UbiTCP9reconnectEPKci+0x20>
}
   d6d02:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6d06:	bf00      	nop
   d6d08:	000df457 	.word	0x000df457
   d6d0c:	2003e58c 	.word	0x2003e58c
   d6d10:	000df14c 	.word	0x000df14c
   d6d14:	000df162 	.word	0x000df162

000d6d18 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_>:
void UbiTCP::buildAndSendGetPacket(const char* device_label, const char* variable_labels) {
   d6d18:	b570      	push	{r4, r5, r6, lr}
   d6d1a:	4604      	mov	r4, r0
   d6d1c:	460e      	mov	r6, r1
  _client_tcp_ubi.print(_user_agent);
   d6d1e:	6881      	ldr	r1, [r0, #8]
   d6d20:	482e      	ldr	r0, [pc, #184]	; (d6ddc <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xc4>)
void UbiTCP::buildAndSendGetPacket(const char* device_label, const char* variable_labels) {
   d6d22:	4615      	mov	r5, r2
  _client_tcp_ubi.print(_user_agent);
   d6d24:	f003 f822 	bl	d9d6c <_ZN5Print5printEPKc>
  _client_tcp_ubi.print("|LV|");
   d6d28:	492d      	ldr	r1, [pc, #180]	; (d6de0 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xc8>)
   d6d2a:	482c      	ldr	r0, [pc, #176]	; (d6ddc <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xc4>)
   d6d2c:	f003 f81e 	bl	d9d6c <_ZN5Print5printEPKc>
  _client_tcp_ubi.print(_token);
   d6d30:	68e1      	ldr	r1, [r4, #12]
   d6d32:	482a      	ldr	r0, [pc, #168]	; (d6ddc <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xc4>)
   d6d34:	f003 f81a 	bl	d9d6c <_ZN5Print5printEPKc>
  _client_tcp_ubi.print("|");
   d6d38:	492a      	ldr	r1, [pc, #168]	; (d6de4 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xcc>)
   d6d3a:	4828      	ldr	r0, [pc, #160]	; (d6ddc <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xc4>)
   d6d3c:	f003 f816 	bl	d9d6c <_ZN5Print5printEPKc>
  _client_tcp_ubi.print(device_label);
   d6d40:	4631      	mov	r1, r6
   d6d42:	4826      	ldr	r0, [pc, #152]	; (d6ddc <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xc4>)
   d6d44:	f003 f812 	bl	d9d6c <_ZN5Print5printEPKc>
  _client_tcp_ubi.print(":");
   d6d48:	4927      	ldr	r1, [pc, #156]	; (d6de8 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xd0>)
   d6d4a:	4824      	ldr	r0, [pc, #144]	; (d6ddc <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xc4>)
   d6d4c:	f003 f80e 	bl	d9d6c <_ZN5Print5printEPKc>
  _client_tcp_ubi.print(variable_labels);
   d6d50:	4629      	mov	r1, r5
   d6d52:	4822      	ldr	r0, [pc, #136]	; (d6ddc <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xc4>)
   d6d54:	f003 f80a 	bl	d9d6c <_ZN5Print5printEPKc>
  _client_tcp_ubi.print("|end");
   d6d58:	4924      	ldr	r1, [pc, #144]	; (d6dec <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xd4>)
   d6d5a:	4820      	ldr	r0, [pc, #128]	; (d6ddc <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xc4>)
   d6d5c:	f003 f806 	bl	d9d6c <_ZN5Print5printEPKc>
  if (_debug) {
   d6d60:	7d23      	ldrb	r3, [r4, #20]
   d6d62:	2b00      	cmp	r3, #0
   d6d64:	d038      	beq.n	d6dd8 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xc0>
    Serial.println("----");
   d6d66:	f004 fb11 	bl	db38c <_Z16_fetch_usbserialv>
   d6d6a:	4921      	ldr	r1, [pc, #132]	; (d6df0 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xd8>)
   d6d6c:	f003 f811 	bl	d9d92 <_ZN5Print7printlnEPKc>
    Serial.println("Payload for request:");
   d6d70:	f004 fb0c 	bl	db38c <_Z16_fetch_usbserialv>
   d6d74:	491f      	ldr	r1, [pc, #124]	; (d6df4 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xdc>)
   d6d76:	f003 f80c 	bl	d9d92 <_ZN5Print7printlnEPKc>
    Serial.print(_user_agent);
   d6d7a:	f004 fb07 	bl	db38c <_Z16_fetch_usbserialv>
   d6d7e:	68a1      	ldr	r1, [r4, #8]
   d6d80:	f002 fff4 	bl	d9d6c <_ZN5Print5printEPKc>
    Serial.print("|LV|");
   d6d84:	f004 fb02 	bl	db38c <_Z16_fetch_usbserialv>
   d6d88:	4915      	ldr	r1, [pc, #84]	; (d6de0 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xc8>)
   d6d8a:	f002 ffef 	bl	d9d6c <_ZN5Print5printEPKc>
    Serial.print(_token);
   d6d8e:	f004 fafd 	bl	db38c <_Z16_fetch_usbserialv>
   d6d92:	68e1      	ldr	r1, [r4, #12]
   d6d94:	f002 ffea 	bl	d9d6c <_ZN5Print5printEPKc>
    Serial.print("|");
   d6d98:	f004 faf8 	bl	db38c <_Z16_fetch_usbserialv>
   d6d9c:	4911      	ldr	r1, [pc, #68]	; (d6de4 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xcc>)
   d6d9e:	f002 ffe5 	bl	d9d6c <_ZN5Print5printEPKc>
    Serial.print(device_label);
   d6da2:	f004 faf3 	bl	db38c <_Z16_fetch_usbserialv>
   d6da6:	4631      	mov	r1, r6
   d6da8:	f002 ffe0 	bl	d9d6c <_ZN5Print5printEPKc>
    Serial.print(":");
   d6dac:	f004 faee 	bl	db38c <_Z16_fetch_usbserialv>
   d6db0:	490d      	ldr	r1, [pc, #52]	; (d6de8 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xd0>)
   d6db2:	f002 ffdb 	bl	d9d6c <_ZN5Print5printEPKc>
    Serial.print(variable_labels);
   d6db6:	f004 fae9 	bl	db38c <_Z16_fetch_usbserialv>
   d6dba:	4629      	mov	r1, r5
   d6dbc:	f002 ffd6 	bl	d9d6c <_ZN5Print5printEPKc>
    Serial.print("|end");
   d6dc0:	f004 fae4 	bl	db38c <_Z16_fetch_usbserialv>
   d6dc4:	4909      	ldr	r1, [pc, #36]	; (d6dec <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xd4>)
   d6dc6:	f002 ffd1 	bl	d9d6c <_ZN5Print5printEPKc>
    Serial.println("\n----");
   d6dca:	f004 fadf 	bl	db38c <_Z16_fetch_usbserialv>
}
   d6dce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Serial.println("\n----");
   d6dd2:	4909      	ldr	r1, [pc, #36]	; (d6df8 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_+0xe0>)
   d6dd4:	f002 bfdd 	b.w	d9d92 <_ZN5Print7printlnEPKc>
}
   d6dd8:	bd70      	pop	{r4, r5, r6, pc}
   d6dda:	bf00      	nop
   d6ddc:	2003e58c 	.word	0x2003e58c
   d6de0:	000df46f 	.word	0x000df46f
   d6de4:	000df472 	.word	0x000df472
   d6de8:	000df418 	.word	0x000df418
   d6dec:	000df442 	.word	0x000df442
   d6df0:	000df48a 	.word	0x000df48a
   d6df4:	000df474 	.word	0x000df474
   d6df8:	000df489 	.word	0x000df489

000d6dfc <_ZN6UbiTCP16waitServerAnswerEv>:
bool UbiTCP::waitServerAnswer() {
   d6dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  while (!_client_tcp_ubi.available() && timeout < _timeout) {
   d6dfe:	4f0e      	ldr	r7, [pc, #56]	; (d6e38 <_ZN6UbiTCP16waitServerAnswerEv+0x3c>)
bool UbiTCP::waitServerAnswer() {
   d6e00:	4604      	mov	r4, r0
  int timeout = 0;
   d6e02:	2600      	movs	r6, #0
  while (!_client_tcp_ubi.available() && timeout < _timeout) {
   d6e04:	4638      	mov	r0, r7
   d6e06:	f003 fc6d 	bl	da6e4 <_ZN9TCPClient9availableEv>
   d6e0a:	4605      	mov	r5, r0
   d6e0c:	b990      	cbnz	r0, d6e34 <_ZN6UbiTCP16waitServerAnswerEv+0x38>
   d6e0e:	69a3      	ldr	r3, [r4, #24]
   d6e10:	42b3      	cmp	r3, r6
   d6e12:	dd0f      	ble.n	d6e34 <_ZN6UbiTCP16waitServerAnswerEv+0x38>
    delay(1);
   d6e14:	2001      	movs	r0, #1
   d6e16:	f000 ff09 	bl	d7c2c <delay>
    if (timeout > _timeout - 1) {
   d6e1a:	69a3      	ldr	r3, [r4, #24]
    timeout++;
   d6e1c:	3601      	adds	r6, #1
    if (timeout > _timeout - 1) {
   d6e1e:	42b3      	cmp	r3, r6
   d6e20:	dcf0      	bgt.n	d6e04 <_ZN6UbiTCP16waitServerAnswerEv+0x8>
      if (_debug) {
   d6e22:	7d20      	ldrb	r0, [r4, #20]
   d6e24:	b128      	cbz	r0, d6e32 <_ZN6UbiTCP16waitServerAnswerEv+0x36>
        Serial.println("timeout, could not read any response from the host");
   d6e26:	f004 fab1 	bl	db38c <_Z16_fetch_usbserialv>
   d6e2a:	4904      	ldr	r1, [pc, #16]	; (d6e3c <_ZN6UbiTCP16waitServerAnswerEv+0x40>)
   d6e2c:	f002 ffb1 	bl	d9d92 <_ZN5Print7printlnEPKc>
   d6e30:	4628      	mov	r0, r5
}
   d6e32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return true;
   d6e34:	2001      	movs	r0, #1
   d6e36:	e7fc      	b.n	d6e32 <_ZN6UbiTCP16waitServerAnswerEv+0x36>
   d6e38:	2003e58c 	.word	0x2003e58c
   d6e3c:	000df1a6 	.word	0x000df1a6

000d6e40 <_ZN6UbiTCP14parseTCPAnswerEPKcPc>:
float UbiTCP::parseTCPAnswer(const char* request_type, char* response) {
   d6e40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (_debug) {
   d6e44:	7d03      	ldrb	r3, [r0, #20]
float UbiTCP::parseTCPAnswer(const char* request_type, char* response) {
   d6e46:	4606      	mov	r6, r0
   d6e48:	4688      	mov	r8, r1
   d6e4a:	4614      	mov	r4, r2
  if (_debug) {
   d6e4c:	b14b      	cbz	r3, d6e62 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x22>
    Serial.println("----------");
   d6e4e:	f004 fa9d 	bl	db38c <_Z16_fetch_usbserialv>
   d6e52:	4927      	ldr	r1, [pc, #156]	; (d6ef0 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xb0>)
   d6e54:	f002 ff9d 	bl	d9d92 <_ZN5Print7printlnEPKc>
    Serial.println("Server's response:");
   d6e58:	f004 fa98 	bl	db38c <_Z16_fetch_usbserialv>
   d6e5c:	4925      	ldr	r1, [pc, #148]	; (d6ef4 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xb4>)
   d6e5e:	f002 ff98 	bl	d9d92 <_ZN5Print7printlnEPKc>
  while (_client_tcp_ubi.available()) {
   d6e62:	f8df 90a4 	ldr.w	r9, [pc, #164]	; d6f08 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xc8>
float UbiTCP::parseTCPAnswer(const char* request_type, char* response) {
   d6e66:	2500      	movs	r5, #0
    if (j >= MAX_BUFFER_SIZE - 1) {
   d6e68:	f240 2abb 	movw	sl, #699	; 0x2bb
  while (_client_tcp_ubi.available()) {
   d6e6c:	4648      	mov	r0, r9
   d6e6e:	f003 fc39 	bl	da6e4 <_ZN9TCPClient9availableEv>
   d6e72:	b178      	cbz	r0, d6e94 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x54>
    char c = _client_tcp_ubi.read();
   d6e74:	4648      	mov	r0, r9
   d6e76:	f003 faee 	bl	da456 <_ZN9TCPClient4readEv>
    if (_debug) {
   d6e7a:	7d33      	ldrb	r3, [r6, #20]
    char c = _client_tcp_ubi.read();
   d6e7c:	b2c7      	uxtb	r7, r0
    if (_debug) {
   d6e7e:	b12b      	cbz	r3, d6e8c <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x4c>
      Serial.write(c);
   d6e80:	f004 fa84 	bl	db38c <_Z16_fetch_usbserialv>
   d6e84:	6803      	ldr	r3, [r0, #0]
   d6e86:	4639      	mov	r1, r7
   d6e88:	689b      	ldr	r3, [r3, #8]
   d6e8a:	4798      	blx	r3
    response[j] = c;
   d6e8c:	5567      	strb	r7, [r4, r5]
    j++;
   d6e8e:	3501      	adds	r5, #1
    if (j >= MAX_BUFFER_SIZE - 1) {
   d6e90:	4555      	cmp	r5, sl
   d6e92:	d1eb      	bne.n	d6e6c <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x2c>
  if (_debug) {
   d6e94:	7d33      	ldrb	r3, [r6, #20]
   d6e96:	b123      	cbz	r3, d6ea2 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x62>
    Serial.println("\n----------");
   d6e98:	f004 fa78 	bl	db38c <_Z16_fetch_usbserialv>
   d6e9c:	4916      	ldr	r1, [pc, #88]	; (d6ef8 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xb8>)
   d6e9e:	f002 ff78 	bl	d9d92 <_ZN5Print7printlnEPKc>
  response[j] = '\0';
   d6ea2:	2300      	movs	r3, #0
   d6ea4:	5563      	strb	r3, [r4, r5]
  if (strcmp(request_type, "POST") == 0) {
   d6ea6:	4915      	ldr	r1, [pc, #84]	; (d6efc <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xbc>)
   d6ea8:	4640      	mov	r0, r8
   d6eaa:	f005 fd8e 	bl	dc9ca <strcmp>
   d6eae:	b968      	cbnz	r0, d6ecc <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x8c>
    char* pch = strstr(response, "OK");
   d6eb0:	4913      	ldr	r1, [pc, #76]	; (d6f00 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xc0>)
   d6eb2:	4620      	mov	r0, r4
   d6eb4:	f005 fdfa 	bl	dcaac <strstr>
      result = 1;
   d6eb8:	ed9f 0a12 	vldr	s0, [pc, #72]	; d6f04 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xc4>
   d6ebc:	2800      	cmp	r0, #0
   d6ebe:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   d6ec2:	bf18      	it	ne
   d6ec4:	eeb0 0a67 	vmovne.f32	s0, s15
}
   d6ec8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  char* pch = strchr(response, '|');
   d6ecc:	217c      	movs	r1, #124	; 0x7c
   d6ece:	4620      	mov	r0, r4
   d6ed0:	f005 fd64 	bl	dc99c <strchr>
  if (pch != NULL) {
   d6ed4:	b148      	cbz	r0, d6eea <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xaa>
    result = atof(pch + 1);
   d6ed6:	3001      	adds	r0, #1
   d6ed8:	f005 fcf6 	bl	dc8c8 <atof>
   d6edc:	ec51 0b10 	vmov	r0, r1, d0
   d6ee0:	f005 faa8 	bl	dc434 <__aeabi_d2f>
   d6ee4:	ee00 0a10 	vmov	s0, r0
   d6ee8:	e7ee      	b.n	d6ec8 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x88>
  float result = ERROR_VALUE;
   d6eea:	ed9f 0a06 	vldr	s0, [pc, #24]	; d6f04 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0xc4>
   d6eee:	e7eb      	b.n	d6ec8 <_ZN6UbiTCP14parseTCPAnswerEPKcPc+0x88>
   d6ef0:	000df19b 	.word	0x000df19b
   d6ef4:	000df187 	.word	0x000df187
   d6ef8:	000df19a 	.word	0x000df19a
   d6efc:	000df48f 	.word	0x000df48f
   d6f00:	000df494 	.word	0x000df494
   d6f04:	cda2425f 	.word	0xcda2425f
   d6f08:	2003e58c 	.word	0x2003e58c

000d6f0c <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags>:
bool UbiTCP::sendData(const char* device_label, const char* device_name, char* payload, UbiFlags* flags) {
   d6f0c:	b570      	push	{r4, r5, r6, lr}
   d6f0e:	ed2d 8b02 	vpush	{d8}
   d6f12:	4604      	mov	r4, r0
  _client_tcp_ubi.connect(_host, UBIDOTS_TCP_PORT);
   d6f14:	6841      	ldr	r1, [r0, #4]
   d6f16:	4822      	ldr	r0, [pc, #136]	; (d6fa0 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x94>)
   d6f18:	f242 3234 	movw	r2, #9012	; 0x2334
bool UbiTCP::sendData(const char* device_label, const char* device_name, char* payload, UbiFlags* flags) {
   d6f1c:	461d      	mov	r5, r3
  _client_tcp_ubi.connect(_host, UBIDOTS_TCP_PORT);
   d6f1e:	2300      	movs	r3, #0
   d6f20:	f003 fade 	bl	da4e0 <_ZN9TCPClient7connectEPKctm>
  reconnect(_host, UBIDOTS_TCP_PORT);
   d6f24:	4620      	mov	r0, r4
   d6f26:	6861      	ldr	r1, [r4, #4]
   d6f28:	f242 3234 	movw	r2, #9012	; 0x2334
   d6f2c:	f7ff fea8 	bl	d6c80 <_ZN6UbiTCP9reconnectEPKci>
  if (_client_tcp_ubi.connected()) {
   d6f30:	481b      	ldr	r0, [pc, #108]	; (d6fa0 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x94>)
   d6f32:	f003 f9d0 	bl	da2d6 <_ZN9TCPClient9connectedEv>
   d6f36:	b348      	cbz	r0, d6f8c <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x80>
    _client_tcp_ubi.print(payload);
   d6f38:	4629      	mov	r1, r5
   d6f3a:	4819      	ldr	r0, [pc, #100]	; (d6fa0 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x94>)
   d6f3c:	f002 ff16 	bl	d9d6c <_ZN5Print5printEPKc>
  if (!waitServerAnswer()) {
   d6f40:	4620      	mov	r0, r4
   d6f42:	f7ff ff5b 	bl	d6dfc <_ZN6UbiTCP16waitServerAnswerEv>
   d6f46:	4605      	mov	r5, r0
   d6f48:	b938      	cbnz	r0, d6f5a <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x4e>
    _client_tcp_ubi.stop();
   d6f4a:	4815      	ldr	r0, [pc, #84]	; (d6fa0 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x94>)
   d6f4c:	f003 fc24 	bl	da798 <_ZN9TCPClient4stopEv>
    return false;
   d6f50:	2500      	movs	r5, #0
}
   d6f52:	ecbd 8b02 	vpop	{d8}
   d6f56:	4628      	mov	r0, r5
   d6f58:	bd70      	pop	{r4, r5, r6, pc}
  char* response = (char*)malloc(sizeof(char) * 100);
   d6f5a:	2064      	movs	r0, #100	; 0x64
   d6f5c:	f000 fdee 	bl	d7b3c <malloc>
  float value = parseTCPAnswer("POST", response);
   d6f60:	4910      	ldr	r1, [pc, #64]	; (d6fa4 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x98>)
   d6f62:	4602      	mov	r2, r0
  char* response = (char*)malloc(sizeof(char) * 100);
   d6f64:	4606      	mov	r6, r0
  float value = parseTCPAnswer("POST", response);
   d6f66:	4620      	mov	r0, r4
   d6f68:	f7ff ff6a 	bl	d6e40 <_ZN6UbiTCP14parseTCPAnswerEPKcPc>
  free(response);
   d6f6c:	4630      	mov	r0, r6
  float value = parseTCPAnswer("POST", response);
   d6f6e:	eeb0 8a40 	vmov.f32	s16, s0
  free(response);
   d6f72:	f000 fdeb 	bl	d7b4c <free>
  if (value != ERROR_VALUE) {
   d6f76:	eddf 7a0c 	vldr	s15, [pc, #48]	; d6fa8 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x9c>
   d6f7a:	eeb4 8a67 	vcmp.f32	s16, s15
   d6f7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d6f82:	d0e2      	beq.n	d6f4a <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x3e>
    _client_tcp_ubi.stop();
   d6f84:	4806      	ldr	r0, [pc, #24]	; (d6fa0 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x94>)
   d6f86:	f003 fc07 	bl	da798 <_ZN9TCPClient4stopEv>
    return true;
   d6f8a:	e7e2      	b.n	d6f52 <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x46>
    if (_debug) {
   d6f8c:	7d23      	ldrb	r3, [r4, #20]
   d6f8e:	2b00      	cmp	r3, #0
   d6f90:	d0db      	beq.n	d6f4a <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x3e>
      Serial.println("Could not connect to the host");
   d6f92:	f004 f9fb 	bl	db38c <_Z16_fetch_usbserialv>
   d6f96:	4905      	ldr	r1, [pc, #20]	; (d6fac <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0xa0>)
   d6f98:	f002 fefb 	bl	d9d92 <_ZN5Print7printlnEPKc>
   d6f9c:	e7d5      	b.n	d6f4a <_ZN6UbiTCP8sendDataEPKcS1_PcP8UbiFlags+0x3e>
   d6f9e:	bf00      	nop
   d6fa0:	2003e58c 	.word	0x2003e58c
   d6fa4:	000df48f 	.word	0x000df48f
   d6fa8:	cda2425f 	.word	0xcda2425f
   d6fac:	000df497 	.word	0x000df497

000d6fb0 <_ZN6UbiTCP3getEPKcS1_>:
float UbiTCP::get(const char* device_label, const char* variable_label) {
   d6fb0:	b570      	push	{r4, r5, r6, lr}
   d6fb2:	ed2d 8b02 	vpush	{d8}
   d6fb6:	4604      	mov	r4, r0
  _client_tcp_ubi.connect(_host, UBIDOTS_TCP_PORT);
   d6fb8:	2300      	movs	r3, #0
float UbiTCP::get(const char* device_label, const char* variable_label) {
   d6fba:	460d      	mov	r5, r1
   d6fbc:	4616      	mov	r6, r2
  _client_tcp_ubi.connect(_host, UBIDOTS_TCP_PORT);
   d6fbe:	6841      	ldr	r1, [r0, #4]
   d6fc0:	481e      	ldr	r0, [pc, #120]	; (d703c <_ZN6UbiTCP3getEPKcS1_+0x8c>)
   d6fc2:	f242 3234 	movw	r2, #9012	; 0x2334
   d6fc6:	f003 fa8b 	bl	da4e0 <_ZN9TCPClient7connectEPKctm>
  reconnect(_host, UBIDOTS_TCP_PORT);
   d6fca:	4620      	mov	r0, r4
   d6fcc:	6861      	ldr	r1, [r4, #4]
   d6fce:	f242 3234 	movw	r2, #9012	; 0x2334
   d6fd2:	f7ff fe55 	bl	d6c80 <_ZN6UbiTCP9reconnectEPKci>
  if (_client_tcp_ubi.connected()) {
   d6fd6:	4819      	ldr	r0, [pc, #100]	; (d703c <_ZN6UbiTCP3getEPKcS1_+0x8c>)
   d6fd8:	f003 f97d 	bl	da2d6 <_ZN9TCPClient9connectedEv>
   d6fdc:	b328      	cbz	r0, d702a <_ZN6UbiTCP3getEPKcS1_+0x7a>
    buildAndSendGetPacket(device_label, variable_label);
   d6fde:	4620      	mov	r0, r4
   d6fe0:	4632      	mov	r2, r6
   d6fe2:	4629      	mov	r1, r5
   d6fe4:	f7ff fe98 	bl	d6d18 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_>
    if (!waitServerAnswer()) {
   d6fe8:	4620      	mov	r0, r4
   d6fea:	f7ff ff07 	bl	d6dfc <_ZN6UbiTCP16waitServerAnswerEv>
   d6fee:	b948      	cbnz	r0, d7004 <_ZN6UbiTCP3getEPKcS1_+0x54>
      _client_tcp_ubi.stop();
   d6ff0:	4812      	ldr	r0, [pc, #72]	; (d703c <_ZN6UbiTCP3getEPKcS1_+0x8c>)
      return ERROR_VALUE;
   d6ff2:	ed9f 8a13 	vldr	s16, [pc, #76]	; d7040 <_ZN6UbiTCP3getEPKcS1_+0x90>
      _client_tcp_ubi.stop();
   d6ff6:	f003 fbcf 	bl	da798 <_ZN9TCPClient4stopEv>
}
   d6ffa:	eeb0 0a48 	vmov.f32	s0, s16
   d6ffe:	ecbd 8b02 	vpop	{d8}
   d7002:	bd70      	pop	{r4, r5, r6, pc}
    char* response = (char*)malloc(sizeof(char) * MAX_BUFFER_SIZE);
   d7004:	f44f 702f 	mov.w	r0, #700	; 0x2bc
   d7008:	f000 fd98 	bl	d7b3c <malloc>
    float value = parseTCPAnswer("LV", response);
   d700c:	490d      	ldr	r1, [pc, #52]	; (d7044 <_ZN6UbiTCP3getEPKcS1_+0x94>)
   d700e:	4602      	mov	r2, r0
    char* response = (char*)malloc(sizeof(char) * MAX_BUFFER_SIZE);
   d7010:	4605      	mov	r5, r0
    float value = parseTCPAnswer("LV", response);
   d7012:	4620      	mov	r0, r4
   d7014:	f7ff ff14 	bl	d6e40 <_ZN6UbiTCP14parseTCPAnswerEPKcPc>
    _client_tcp_ubi.stop();
   d7018:	4808      	ldr	r0, [pc, #32]	; (d703c <_ZN6UbiTCP3getEPKcS1_+0x8c>)
    float value = parseTCPAnswer("LV", response);
   d701a:	eeb0 8a40 	vmov.f32	s16, s0
    _client_tcp_ubi.stop();
   d701e:	f003 fbbb 	bl	da798 <_ZN9TCPClient4stopEv>
    free(response);
   d7022:	4628      	mov	r0, r5
   d7024:	f000 fd92 	bl	d7b4c <free>
    return value;
   d7028:	e7e7      	b.n	d6ffa <_ZN6UbiTCP3getEPKcS1_+0x4a>
  if (_debug) {
   d702a:	7d23      	ldrb	r3, [r4, #20]
   d702c:	2b00      	cmp	r3, #0
   d702e:	d0df      	beq.n	d6ff0 <_ZN6UbiTCP3getEPKcS1_+0x40>
    Serial.println("ERROR could not connect to the server");
   d7030:	f004 f9ac 	bl	db38c <_Z16_fetch_usbserialv>
   d7034:	4904      	ldr	r1, [pc, #16]	; (d7048 <_ZN6UbiTCP3getEPKcS1_+0x98>)
   d7036:	f002 feac 	bl	d9d92 <_ZN5Print7printlnEPKc>
   d703a:	e7d9      	b.n	d6ff0 <_ZN6UbiTCP3getEPKcS1_+0x40>
   d703c:	2003e58c 	.word	0x2003e58c
   d7040:	cda2425f 	.word	0xcda2425f
   d7044:	000df4b5 	.word	0x000df4b5
   d7048:	000df4b8 	.word	0x000df4b8

000d704c <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE17_M_emplace_uniqueIJS0_IifEEEES0_ISt17_Rb_tree_iteratorIS2_EbEDpOT_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   d704c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d7050:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d7052:	2018      	movs	r0, #24
   d7054:	4615      	mov	r5, r2
   d7056:	460f      	mov	r7, r1
   d7058:	f7fd f81d 	bl	d4096 <_Znwj>
      { return &this->_M_impl._M_header; }
   d705c:	f107 0a04 	add.w	sl, r7, #4
			  && _PCCFP<_U1, _U2>::template
			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
	constexpr pair(pair<_U1, _U2>&& __p)
	: first(std::forward<_U1>(__p.first)),
	  second(std::forward<_U2>(__p.second)) { }
   d7060:	686b      	ldr	r3, [r5, #4]
   d7062:	f8d5 9000 	ldr.w	r9, [r5]
      _Link_type __x = _M_begin();
   d7066:	68ba      	ldr	r2, [r7, #8]
   d7068:	6143      	str	r3, [r0, #20]
   d706a:	4606      	mov	r6, r0
   d706c:	f8c0 9010 	str.w	r9, [r0, #16]
      { return &this->_M_impl._M_header; }
   d7070:	4655      	mov	r5, sl
      bool __comp = true;
   d7072:	2301      	movs	r3, #1
      while (__x != 0)
   d7074:	b152      	cbz	r2, d708c <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE17_M_emplace_uniqueIJS0_IifEEEES0_ISt17_Rb_tree_iteratorIS2_EbEDpOT_+0x40>
	  __x = __comp ? _S_left(__x) : _S_right(__x);
   d7076:	6913      	ldr	r3, [r2, #16]
   d7078:	454b      	cmp	r3, r9
   d707a:	bfcc      	ite	gt
   d707c:	6891      	ldrgt	r1, [r2, #8]
   d707e:	68d1      	ldrle	r1, [r2, #12]
   d7080:	4615      	mov	r5, r2
   d7082:	bfcc      	ite	gt
   d7084:	2301      	movgt	r3, #1
   d7086:	2300      	movle	r3, #0
   d7088:	460a      	mov	r2, r1
   d708a:	e7f3      	b.n	d7074 <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE17_M_emplace_uniqueIJS0_IifEEEES0_ISt17_Rb_tree_iteratorIS2_EbEDpOT_+0x28>
      if (__comp)
   d708c:	b1a3      	cbz	r3, d70b8 <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE17_M_emplace_uniqueIJS0_IifEEEES0_ISt17_Rb_tree_iteratorIS2_EbEDpOT_+0x6c>
	  if (__j == begin())
   d708e:	68fb      	ldr	r3, [r7, #12]
   d7090:	42ab      	cmp	r3, r5
   d7092:	d023      	beq.n	d70dc <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE17_M_emplace_uniqueIJS0_IifEEEES0_ISt17_Rb_tree_iteratorIS2_EbEDpOT_+0x90>
	_M_node = _Rb_tree_decrement(_M_node);
   d7094:	4628      	mov	r0, r5
   d7096:	f004 fbe3 	bl	db860 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
   d709a:	4680      	mov	r8, r0
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
   d709c:	f8d8 3010 	ldr.w	r3, [r8, #16]
   d70a0:	454b      	cmp	r3, r9
   d70a2:	db1b      	blt.n	d70dc <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE17_M_emplace_uniqueIJS0_IifEEEES0_ISt17_Rb_tree_iteratorIS2_EbEDpOT_+0x90>
	::operator delete(__p);
   d70a4:	4630      	mov	r0, r6
   d70a6:	f7fc fffa 	bl	d409e <_ZdlPv>
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
   d70aa:	f8c4 8000 	str.w	r8, [r4]
   d70ae:	2300      	movs	r3, #0
   d70b0:	7123      	strb	r3, [r4, #4]
      }
   d70b2:	4620      	mov	r0, r4
   d70b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d70b8:	46a8      	mov	r8, r5
   d70ba:	e7ef      	b.n	d709c <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE17_M_emplace_uniqueIJS0_IifEEEES0_ISt17_Rb_tree_iteratorIS2_EbEDpOT_+0x50>
			    || _M_impl._M_key_compare(_S_key(__z),
   d70bc:	6928      	ldr	r0, [r5, #16]
   d70be:	4581      	cmp	r9, r0
   d70c0:	bfac      	ite	ge
   d70c2:	2000      	movge	r0, #0
   d70c4:	2001      	movlt	r0, #1
      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
   d70c6:	4653      	mov	r3, sl
   d70c8:	462a      	mov	r2, r5
   d70ca:	4631      	mov	r1, r6
   d70cc:	f004 fbca 	bl	db864 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
      ++_M_impl._M_node_count;
   d70d0:	697b      	ldr	r3, [r7, #20]
   d70d2:	6026      	str	r6, [r4, #0]
   d70d4:	3301      	adds	r3, #1
   d70d6:	617b      	str	r3, [r7, #20]
   d70d8:	2301      	movs	r3, #1
   d70da:	e7e9      	b.n	d70b0 <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE17_M_emplace_uniqueIJS0_IifEEEES0_ISt17_Rb_tree_iteratorIS2_EbEDpOT_+0x64>
      bool __insert_left = (__x != 0 || __p == _M_end()
   d70dc:	45aa      	cmp	sl, r5
   d70de:	d1ed      	bne.n	d70bc <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE17_M_emplace_uniqueIJS0_IifEEEES0_ISt17_Rb_tree_iteratorIS2_EbEDpOT_+0x70>
			    || _M_impl._M_key_compare(_S_key(__z),
   d70e0:	2001      	movs	r0, #1
   d70e2:	e7f0      	b.n	d70c6 <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE17_M_emplace_uniqueIJS0_IifEEEES0_ISt17_Rb_tree_iteratorIS2_EbEDpOT_+0x7a>

000d70e4 <_ZN6UbiTCP19parseMultipleValuesEv>:
tcpMap UbiTCP::parseMultipleValues() {
   d70e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   d70e8:	460d      	mov	r5, r1
   d70ea:	4604      	mov	r4, r0
  char* response = (char*)malloc(sizeof(char) * MAX_BUFFER_SIZE);
   d70ec:	f44f 702f 	mov.w	r0, #700	; 0x2bc
   d70f0:	f000 fd24 	bl	d7b3c <malloc>
  if (_debug) {
   d70f4:	7d2b      	ldrb	r3, [r5, #20]
  char* response = (char*)malloc(sizeof(char) * MAX_BUFFER_SIZE);
   d70f6:	4607      	mov	r7, r0
  if (_debug) {
   d70f8:	b14b      	cbz	r3, d710e <_ZN6UbiTCP19parseMultipleValuesEv+0x2a>
    Serial.println("----------");
   d70fa:	f004 f947 	bl	db38c <_Z16_fetch_usbserialv>
   d70fe:	493a      	ldr	r1, [pc, #232]	; (d71e8 <_ZN6UbiTCP19parseMultipleValuesEv+0x104>)
   d7100:	f002 fe47 	bl	d9d92 <_ZN5Print7printlnEPKc>
    Serial.println("Server's response:");
   d7104:	f004 f942 	bl	db38c <_Z16_fetch_usbserialv>
   d7108:	4938      	ldr	r1, [pc, #224]	; (d71ec <_ZN6UbiTCP19parseMultipleValuesEv+0x108>)
   d710a:	f002 fe42 	bl	d9d92 <_ZN5Print7printlnEPKc>
  while (_client_tcp_ubi.available()) {
   d710e:	f8df 90f0 	ldr.w	r9, [pc, #240]	; d7200 <_ZN6UbiTCP19parseMultipleValuesEv+0x11c>
tcpMap UbiTCP::parseMultipleValues() {
   d7112:	2600      	movs	r6, #0
    if (j >= MAX_BUFFER_SIZE - 1) {
   d7114:	f240 2abb 	movw	sl, #699	; 0x2bb
  while (_client_tcp_ubi.available()) {
   d7118:	4648      	mov	r0, r9
   d711a:	f003 fae3 	bl	da6e4 <_ZN9TCPClient9availableEv>
   d711e:	b188      	cbz	r0, d7144 <_ZN6UbiTCP19parseMultipleValuesEv+0x60>
    char c = _client_tcp_ubi.read();
   d7120:	4648      	mov	r0, r9
   d7122:	f003 f998 	bl	da456 <_ZN9TCPClient4readEv>
    if (_debug) {
   d7126:	7d2b      	ldrb	r3, [r5, #20]
    char c = _client_tcp_ubi.read();
   d7128:	fa5f f880 	uxtb.w	r8, r0
    if (_debug) {
   d712c:	b12b      	cbz	r3, d713a <_ZN6UbiTCP19parseMultipleValuesEv+0x56>
      Serial.write(c);
   d712e:	f004 f92d 	bl	db38c <_Z16_fetch_usbserialv>
   d7132:	6803      	ldr	r3, [r0, #0]
   d7134:	4641      	mov	r1, r8
   d7136:	689b      	ldr	r3, [r3, #8]
   d7138:	4798      	blx	r3
    response[j] = c;
   d713a:	f807 8006 	strb.w	r8, [r7, r6]
    j++;
   d713e:	3601      	adds	r6, #1
    if (j >= MAX_BUFFER_SIZE - 1) {
   d7140:	4556      	cmp	r6, sl
   d7142:	d1e9      	bne.n	d7118 <_ZN6UbiTCP19parseMultipleValuesEv+0x34>
  if (_debug) {
   d7144:	7d2b      	ldrb	r3, [r5, #20]
   d7146:	b123      	cbz	r3, d7152 <_ZN6UbiTCP19parseMultipleValuesEv+0x6e>
    Serial.println("\n----------");
   d7148:	f004 f920 	bl	db38c <_Z16_fetch_usbserialv>
   d714c:	4928      	ldr	r1, [pc, #160]	; (d71f0 <_ZN6UbiTCP19parseMultipleValuesEv+0x10c>)
   d714e:	f002 fe20 	bl	d9d92 <_ZN5Print7printlnEPKc>
  response[j] = '\0';
   d7152:	2500      	movs	r5, #0
	  : _Node_allocator()
   d7154:	1d23      	adds	r3, r4, #4
      _M_header._M_left = &_M_header;
   d7156:	e9c4 5302 	strd	r5, r3, [r4, #8]
      _M_node_count = 0;
   d715a:	e9c4 3504 	strd	r3, r5, [r4, #16]
  char* token = strtok(response, "|");
   d715e:	4925      	ldr	r1, [pc, #148]	; (d71f4 <_ZN6UbiTCP19parseMultipleValuesEv+0x110>)
      _M_header._M_color = _S_red;
   d7160:	7125      	strb	r5, [r4, #4]
   d7162:	4638      	mov	r0, r7
  response[j] = '\0';
   d7164:	55bd      	strb	r5, [r7, r6]
  char* token = strtok(response, "|");
   d7166:	f006 faed 	bl	dd744 <strtok>
    if (strcmp(token, "OK") == 0) {
   d716a:	f8df 9098 	ldr.w	r9, [pc, #152]	; d7204 <_ZN6UbiTCP19parseMultipleValuesEv+0x120>
    } else if (strcmp(token, "ERROR") == 0) {
   d716e:	f8df a098 	ldr.w	sl, [pc, #152]	; d7208 <_ZN6UbiTCP19parseMultipleValuesEv+0x124>
      token = strtok(NULL, "|");
   d7172:	f8df 8080 	ldr.w	r8, [pc, #128]	; d71f4 <_ZN6UbiTCP19parseMultipleValuesEv+0x110>
  char* token = strtok(response, "|");
   d7176:	4606      	mov	r6, r0
  while (token != NULL) {
   d7178:	b37e      	cbz	r6, d71da <_ZN6UbiTCP19parseMultipleValuesEv+0xf6>
    if (strcmp(token, "OK") == 0) {
   d717a:	4649      	mov	r1, r9
   d717c:	4630      	mov	r0, r6
   d717e:	f005 fc24 	bl	dc9ca <strcmp>
   d7182:	bb00      	cbnz	r0, d71c6 <_ZN6UbiTCP19parseMultipleValuesEv+0xe2>
      token = strtok(NULL, "|");
   d7184:	4641      	mov	r1, r8
   d7186:	f006 fadd 	bl	dd744 <strtok>
      if (strcmp(token, "null") == 0) {
   d718a:	491b      	ldr	r1, [pc, #108]	; (d71f8 <_ZN6UbiTCP19parseMultipleValuesEv+0x114>)
      token = strtok(NULL, "|");
   d718c:	4606      	mov	r6, r0
      if (strcmp(token, "null") == 0) {
   d718e:	f005 fc1c 	bl	dc9ca <strcmp>
   d7192:	b918      	cbnz	r0, d719c <_ZN6UbiTCP19parseMultipleValuesEv+0xb8>
       : first(std::forward<_U1>(__x)), second(__y) { }
   d7194:	4b19      	ldr	r3, [pc, #100]	; (d71fc <_ZN6UbiTCP19parseMultipleValuesEv+0x118>)
   d7196:	9500      	str	r5, [sp, #0]
   d7198:	9301      	str	r3, [sp, #4]
   d719a:	e008      	b.n	d71ae <_ZN6UbiTCP19parseMultipleValuesEv+0xca>
        results.insert(std::pair<int, float>(mapKey, atof(token)));
   d719c:	4630      	mov	r0, r6
   d719e:	f005 fb93 	bl	dc8c8 <atof>
   d71a2:	ec51 0b10 	vmov	r0, r1, d0
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
   d71a6:	9500      	str	r5, [sp, #0]
   d71a8:	f005 f944 	bl	dc434 <__aeabi_d2f>
   d71ac:	9001      	str	r0, [sp, #4]

      template<typename _Pair>
	__enable_if_t<is_constructible<value_type, _Pair>::value,
		      pair<iterator, bool>>
	insert(_Pair&& __x)
	{ return _M_t._M_emplace_unique(std::forward<_Pair>(__x)); }
   d71ae:	466a      	mov	r2, sp
   d71b0:	4621      	mov	r1, r4
   d71b2:	a802      	add	r0, sp, #8
   d71b4:	f7ff ff4a 	bl	d704c <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE17_M_emplace_uniqueIJS0_IifEEEES0_ISt17_Rb_tree_iteratorIS2_EbEDpOT_>
    token = strtok(NULL, "|");
   d71b8:	4641      	mov	r1, r8
   d71ba:	2000      	movs	r0, #0
   d71bc:	f006 fac2 	bl	dd744 <strtok>
    mapKey++;
   d71c0:	3501      	adds	r5, #1
    token = strtok(NULL, "|");
   d71c2:	4606      	mov	r6, r0
  while (token != NULL) {
   d71c4:	e7d8      	b.n	d7178 <_ZN6UbiTCP19parseMultipleValuesEv+0x94>
    } else if (strcmp(token, "ERROR") == 0) {
   d71c6:	4651      	mov	r1, sl
   d71c8:	4630      	mov	r0, r6
   d71ca:	f005 fbfe 	bl	dc9ca <strcmp>
   d71ce:	2800      	cmp	r0, #0
   d71d0:	d1f2      	bne.n	d71b8 <_ZN6UbiTCP19parseMultipleValuesEv+0xd4>
      token = strtok(NULL, "|");
   d71d2:	4641      	mov	r1, r8
   d71d4:	f006 fab6 	bl	dd744 <strtok>
   d71d8:	e7dc      	b.n	d7194 <_ZN6UbiTCP19parseMultipleValuesEv+0xb0>
  free(response);
   d71da:	4638      	mov	r0, r7
   d71dc:	f000 fcb6 	bl	d7b4c <free>
}
   d71e0:	4620      	mov	r0, r4
   d71e2:	b004      	add	sp, #16
   d71e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d71e8:	000df19b 	.word	0x000df19b
   d71ec:	000df187 	.word	0x000df187
   d71f0:	000df19a 	.word	0x000df19a
   d71f4:	000df472 	.word	0x000df472
   d71f8:	000df4de 	.word	0x000df4de
   d71fc:	cda2425f 	.word	0xcda2425f
   d7200:	2003e58c 	.word	0x2003e58c
   d7204:	000df494 	.word	0x000df494
   d7208:	000df4e3 	.word	0x000df4e3

000d720c <_ZN6UbiTCP17getMultipleValuesEPKcS1_>:
tcpMap UbiTCP::getMultipleValues(const char* device_label, const char* variable_labels) {
   d720c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	  : _Node_allocator()
   d7210:	1d07      	adds	r7, r0, #4
   d7212:	4698      	mov	r8, r3
      _M_header._M_color = _S_red;
   d7214:	2300      	movs	r3, #0
      _M_header._M_left = &_M_header;
   d7216:	e9c0 3702 	strd	r3, r7, [r0, #8]
      _M_node_count = 0;
   d721a:	e9c0 7304 	strd	r7, r3, [r0, #16]
      _M_header._M_color = _S_red;
   d721e:	7103      	strb	r3, [r0, #4]
   d7220:	460d      	mov	r5, r1
   d7222:	b088      	sub	sp, #32
  _client_tcp_ubi.connect(_host, UBIDOTS_TCP_PORT);
   d7224:	6849      	ldr	r1, [r1, #4]
tcpMap UbiTCP::getMultipleValues(const char* device_label, const char* variable_labels) {
   d7226:	4604      	mov	r4, r0
   d7228:	4616      	mov	r6, r2
  _client_tcp_ubi.connect(_host, UBIDOTS_TCP_PORT);
   d722a:	482e      	ldr	r0, [pc, #184]	; (d72e4 <_ZN6UbiTCP17getMultipleValuesEPKcS1_+0xd8>)
   d722c:	f242 3234 	movw	r2, #9012	; 0x2334
   d7230:	f003 f956 	bl	da4e0 <_ZN9TCPClient7connectEPKctm>
  reconnect(_host, UBIDOTS_TCP_PORT);
   d7234:	4628      	mov	r0, r5
   d7236:	6869      	ldr	r1, [r5, #4]
   d7238:	f242 3234 	movw	r2, #9012	; 0x2334
   d723c:	f7ff fd20 	bl	d6c80 <_ZN6UbiTCP9reconnectEPKci>
  if (_client_tcp_ubi.connected()) {
   d7240:	4828      	ldr	r0, [pc, #160]	; (d72e4 <_ZN6UbiTCP17getMultipleValuesEPKcS1_+0xd8>)
   d7242:	f003 f848 	bl	da2d6 <_ZN9TCPClient9connectedEv>
   d7246:	b310      	cbz	r0, d728e <_ZN6UbiTCP17getMultipleValuesEPKcS1_+0x82>
    buildAndSendGetPacket(device_label, variable_labels);
   d7248:	4631      	mov	r1, r6
   d724a:	4642      	mov	r2, r8
   d724c:	4628      	mov	r0, r5
   d724e:	f7ff fd63 	bl	d6d18 <_ZN6UbiTCP21buildAndSendGetPacketEPKcS1_>
    if (!waitServerAnswer()) {
   d7252:	4628      	mov	r0, r5
   d7254:	f7ff fdd2 	bl	d6dfc <_ZN6UbiTCP16waitServerAnswerEv>
   d7258:	4606      	mov	r6, r0
   d725a:	b9c0      	cbnz	r0, d728e <_ZN6UbiTCP17getMultipleValuesEPKcS1_+0x82>
      _client_tcp_ubi.stop();
   d725c:	4821      	ldr	r0, [pc, #132]	; (d72e4 <_ZN6UbiTCP17getMultipleValuesEPKcS1_+0xd8>)
       : first(std::forward<_U1>(__x)), second(__y) { }
   d725e:	4f22      	ldr	r7, [pc, #136]	; (d72e8 <_ZN6UbiTCP17getMultipleValuesEPKcS1_+0xdc>)
   d7260:	f003 fa9a 	bl	da798 <_ZN9TCPClient4stopEv>
      char* token = strtok((char*)variable_labels, ",");
   d7264:	4921      	ldr	r1, [pc, #132]	; (d72ec <_ZN6UbiTCP17getMultipleValuesEPKcS1_+0xe0>)
   d7266:	4640      	mov	r0, r8
   d7268:	f006 fa6c 	bl	dd744 <strtok>
      int mapKey = 0;
   d726c:	4635      	mov	r5, r6
        token = strtok(NULL, ",");
   d726e:	4e1f      	ldr	r6, [pc, #124]	; (d72ec <_ZN6UbiTCP17getMultipleValuesEPKcS1_+0xe0>)
      while (token != NULL) {
   d7270:	2800      	cmp	r0, #0
   d7272:	d032      	beq.n	d72da <_ZN6UbiTCP17getMultipleValuesEPKcS1_+0xce>
   d7274:	4621      	mov	r1, r4
   d7276:	a802      	add	r0, sp, #8
   d7278:	466a      	mov	r2, sp
   d727a:	9500      	str	r5, [sp, #0]
   d727c:	9701      	str	r7, [sp, #4]
   d727e:	f7ff fee5 	bl	d704c <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE17_M_emplace_uniqueIJS0_IifEEEES0_ISt17_Rb_tree_iteratorIS2_EbEDpOT_>
        token = strtok(NULL, ",");
   d7282:	4631      	mov	r1, r6
   d7284:	2000      	movs	r0, #0
        mapKey++;
   d7286:	3501      	adds	r5, #1
        token = strtok(NULL, ",");
   d7288:	f006 fa5c 	bl	dd744 <strtok>
      while (token != NULL) {
   d728c:	e7f0      	b.n	d7270 <_ZN6UbiTCP17getMultipleValuesEPKcS1_+0x64>
  results = parseMultipleValues();
   d728e:	4629      	mov	r1, r5
   d7290:	a802      	add	r0, sp, #8
   d7292:	f7ff ff27 	bl	d70e4 <_ZN6UbiTCP19parseMultipleValuesEv>
	_M_erase(_M_begin());
   d7296:	68a1      	ldr	r1, [r4, #8]
   d7298:	4620      	mov	r0, r4
   d729a:	f7ff fcb7 	bl	d6c0c <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E>
      if (__x._M_root() != nullptr)
   d729e:	9a04      	ldr	r2, [sp, #16]
      _M_header._M_parent = 0;
   d72a0:	2300      	movs	r3, #0
      _M_header._M_left = &_M_header;
   d72a2:	e9c4 3702 	strd	r3, r7, [r4, #8]
      _M_node_count = 0;
   d72a6:	e9c4 7304 	strd	r7, r3, [r4, #16]
      if (__x._M_root() != nullptr)
   d72aa:	b17a      	cbz	r2, d72cc <_ZN6UbiTCP17getMultipleValuesEPKcS1_+0xc0>
      _M_header._M_color = __from._M_header._M_color;
   d72ac:	f89d 100c 	ldrb.w	r1, [sp, #12]
   d72b0:	7121      	strb	r1, [r4, #4]
      _M_header._M_left = __from._M_header._M_left;
   d72b2:	9905      	ldr	r1, [sp, #20]
   d72b4:	60e1      	str	r1, [r4, #12]
      _M_header._M_right = __from._M_header._M_right;
   d72b6:	9906      	ldr	r1, [sp, #24]
      _M_header._M_parent = __from._M_header._M_parent;
   d72b8:	60a2      	str	r2, [r4, #8]
      _M_header._M_right = __from._M_header._M_right;
   d72ba:	6121      	str	r1, [r4, #16]
      _M_header._M_parent->_M_parent = &_M_header;
   d72bc:	6057      	str	r7, [r2, #4]
      _M_node_count = __from._M_node_count;
   d72be:	9a07      	ldr	r2, [sp, #28]
   d72c0:	6162      	str	r2, [r4, #20]
      _M_header._M_left = &_M_header;
   d72c2:	aa03      	add	r2, sp, #12
      _M_header._M_right = &_M_header;
   d72c4:	e9cd 2205 	strd	r2, r2, [sp, #20]
      _M_header._M_parent = 0;
   d72c8:	9304      	str	r3, [sp, #16]
      _M_node_count = 0;
   d72ca:	9307      	str	r3, [sp, #28]
      { _M_erase(_M_begin()); }
   d72cc:	a802      	add	r0, sp, #8
   d72ce:	9904      	ldr	r1, [sp, #16]
   d72d0:	f7ff fc9c 	bl	d6c0c <_ZNSt8_Rb_treeIiSt4pairIKifESt10_Select1stIS2_ESt4lessIiESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E>
  _client_tcp_ubi.stop();
   d72d4:	4803      	ldr	r0, [pc, #12]	; (d72e4 <_ZN6UbiTCP17getMultipleValuesEPKcS1_+0xd8>)
   d72d6:	f003 fa5f 	bl	da798 <_ZN9TCPClient4stopEv>
}
   d72da:	4620      	mov	r0, r4
   d72dc:	b008      	add	sp, #32
   d72de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d72e2:	bf00      	nop
   d72e4:	2003e58c 	.word	0x2003e58c
   d72e8:	cda2425f 	.word	0xcda2425f
   d72ec:	000df40f 	.word	0x000df40f

000d72f0 <_GLOBAL__sub_I__ZN6UbiTCPC2EPKciS1_S1_>:
   d72f0:	4801      	ldr	r0, [pc, #4]	; (d72f8 <_GLOBAL__sub_I__ZN6UbiTCPC2EPKciS1_S1_+0x8>)
   d72f2:	f003 baa1 	b.w	da838 <_ZN9TCPClientC1Ev>
   d72f6:	bf00      	nop
   d72f8:	2003e58c 	.word	0x2003e58c

000d72fc <_ZN6UbiUDP3getEPKcS1_>:

  _client_udp_ubi.stop();
  return true;
}

float UbiUDP::get(const char *device_label, const char *variable_label) { return ERROR_VALUE; }
   d72fc:	ed9f 0a01 	vldr	s0, [pc, #4]	; d7304 <_ZN6UbiUDP3getEPKcS1_+0x8>
   d7300:	4770      	bx	lr
   d7302:	bf00      	nop
   d7304:	cda2425f 	.word	0xcda2425f

000d7308 <_ZN6UbiUDP8setDebugEb>:

/**
 * Makes available debug traces
 */

void UbiUDP::setDebug(bool debug) { _debug = debug; }
   d7308:	7501      	strb	r1, [r0, #20]
   d730a:	4770      	bx	lr

000d730c <_ZN6UbiUDP17getMultipleValuesEPKcS1_>:
      _M_header._M_color = _S_red;
   d730c:	2200      	movs	r2, #0
	  : _Node_allocator()
   d730e:	1d01      	adds	r1, r0, #4
      _M_header._M_left = &_M_header;
   d7310:	e9c0 2102 	strd	r2, r1, [r0, #8]
      _M_node_count = 0;
   d7314:	e9c0 1204 	strd	r1, r2, [r0, #16]
      _M_header._M_color = _S_red;
   d7318:	7102      	strb	r2, [r0, #4]
}

tcpMap UbiUDP::getMultipleValues(const char *deviceLabel, const char *variableLabels) {
  tcpMap results;
  return results;
}
   d731a:	4770      	bx	lr

000d731c <_ZN6UbiUDPC1EPKciS1_S1_>:
UbiUDP::UbiUDP(const char *host, const int port, const char *user_agent, const char *token) {
   d731c:	b530      	push	{r4, r5, lr}
   d731e:	4d06      	ldr	r5, [pc, #24]	; (d7338 <_ZN6UbiUDPC1EPKciS1_S1_+0x1c>)
   d7320:	6005      	str	r5, [r0, #0]
  _user_agent = user_agent;
   d7322:	e9c0 1301 	strd	r1, r3, [r0, #4]
UbiUDP::UbiUDP(const char *host, const int port, const char *user_agent, const char *token) {
   d7326:	2500      	movs	r5, #0
  _token = token;
   d7328:	9b03      	ldr	r3, [sp, #12]
UbiUDP::UbiUDP(const char *host, const int port, const char *user_agent, const char *token) {
   d732a:	7505      	strb	r5, [r0, #20]
   d732c:	f241 3588 	movw	r5, #5000	; 0x1388
  _port = port;
   d7330:	e9c0 3203 	strd	r3, r2, [r0, #12]
UbiUDP::UbiUDP(const char *host, const int port, const char *user_agent, const char *token) {
   d7334:	6185      	str	r5, [r0, #24]
}
   d7336:	bd30      	pop	{r4, r5, pc}
   d7338:	000df5b8 	.word	0x000df5b8

000d733c <_GLOBAL__sub_I__ZN6UbiUDPC2EPKciS1_S1_>:
   d733c:	4801      	ldr	r0, [pc, #4]	; (d7344 <_GLOBAL__sub_I__ZN6UbiUDPC2EPKciS1_S1_+0x8>)
   d733e:	f003 be83 	b.w	db048 <_ZN3UDPC1Ev>
   d7342:	bf00      	nop
   d7344:	2003e5a8 	.word	0x2003e5a8

000d7348 <_ZN6UbiUDP11getServerIpEv>:
IPAddress UbiUDP::getServerIp() {
   d7348:	b510      	push	{r4, lr}
   d734a:	4604      	mov	r4, r0
  return Cellular.resolve(_host);
   d734c:	684a      	ldr	r2, [r1, #4]
   d734e:	4902      	ldr	r1, [pc, #8]	; (d7358 <_ZN6UbiUDP11getServerIpEv+0x10>)
   d7350:	f002 fbce 	bl	d9af0 <_ZN5spark12NetworkClass7resolveEPKc>
}
   d7354:	4620      	mov	r0, r4
   d7356:	bd10      	pop	{r4, pc}
   d7358:	2003e5f8 	.word	0x2003e5f8

000d735c <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags>:
bool UbiUDP::sendData(const char *device_label, const char *device_name, char *payload, UbiFlags *flags) {
   d735c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d735e:	b08f      	sub	sp, #60	; 0x3c
  IPAddress serverIpAddress = getServerIp();
   d7360:	4601      	mov	r1, r0
bool UbiUDP::sendData(const char *device_label, const char *device_name, char *payload, UbiFlags *flags) {
   d7362:	4606      	mov	r6, r0
  IPAddress serverIpAddress = getServerIp();
   d7364:	a802      	add	r0, sp, #8
bool UbiUDP::sendData(const char *device_label, const char *device_name, char *payload, UbiFlags *flags) {
   d7366:	461f      	mov	r7, r3
  IPAddress serverIpAddress = getServerIp();
   d7368:	f7ff ffee 	bl	d7348 <_ZN6UbiUDP11getServerIpEv>
    operator bool() const;

    // For some reason, without this non-const overload GCC struggles to pick right operator
    // for bool conversion of a non-const object
    operator bool() {
        return static_cast<const IPAddress*>(this)->operator bool();
   d736c:	a802      	add	r0, sp, #8
   d736e:	f001 f9ab 	bl	d86c8 <_ZNK9IPAddresscvbEv>
  if (!serverIpAddress) {
   d7372:	b9a0      	cbnz	r0, d739e <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0x42>
    if (_debug) {
   d7374:	7d33      	ldrb	r3, [r6, #20]
   d7376:	b123      	cbz	r3, d7382 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0x26>
      Serial.println(
   d7378:	f004 f808 	bl	db38c <_Z16_fetch_usbserialv>
   d737c:	4927      	ldr	r1, [pc, #156]	; (d741c <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xc0>)
   d737e:	f002 fd08 	bl	d9d92 <_ZN5Print7printlnEPKc>
    serverIpAddress = IPAddress(169, 55, 61, 243);
   d7382:	23f3      	movs	r3, #243	; 0xf3
   d7384:	9300      	str	r3, [sp, #0]
   d7386:	2237      	movs	r2, #55	; 0x37
   d7388:	233d      	movs	r3, #61	; 0x3d
   d738a:	21a9      	movs	r1, #169	; 0xa9
   d738c:	a808      	add	r0, sp, #32
class IPAddress : public Printable {
   d738e:	ad09      	add	r5, sp, #36	; 0x24
   d7390:	f001 f9be 	bl	d8710 <_ZN9IPAddressC1Ehhhh>
   d7394:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7396:	ac03      	add	r4, sp, #12
   d7398:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d739a:	682b      	ldr	r3, [r5, #0]
   d739c:	7023      	strb	r3, [r4, #0]
  _client_udp_ubi.setBuffer(MAX_BUFFER_SIZE + 1);  // Sets the max buffer size to send data
   d739e:	2200      	movs	r2, #0
   d73a0:	f240 21bd 	movw	r1, #701	; 0x2bd
   d73a4:	481e      	ldr	r0, [pc, #120]	; (d7420 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xc4>)
   d73a6:	f003 fe81 	bl	db0ac <_ZN3UDP9setBufferEjPh>
  _client_udp_ubi.begin(UBIDOTS_TCP_PORT);
   d73aa:	2200      	movs	r2, #0
   d73ac:	f242 3134 	movw	r1, #9012	; 0x2334
   d73b0:	481b      	ldr	r0, [pc, #108]	; (d7420 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xc4>)
   d73b2:	f003 fc57 	bl	dac64 <_ZN3UDP5beginEtm>
   d73b6:	ad03      	add	r5, sp, #12
   d73b8:	4b1a      	ldr	r3, [pc, #104]	; (d7424 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xc8>)
   d73ba:	9308      	str	r3, [sp, #32]
   d73bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d73be:	ac09      	add	r4, sp, #36	; 0x24
   d73c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d73c2:	682b      	ldr	r3, [r5, #0]
  if (!(_client_udp_ubi.beginPacket(serverIpAddress, UBIDOTS_TCP_PORT) && _client_udp_ubi.write(payload) &&
   d73c4:	4816      	ldr	r0, [pc, #88]	; (d7420 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xc4>)
   d73c6:	7023      	strb	r3, [r4, #0]
   d73c8:	f242 3234 	movw	r2, #9012	; 0x2334
   d73cc:	a908      	add	r1, sp, #32
   d73ce:	f003 fe89 	bl	db0e4 <_ZN3UDP11beginPacketE9IPAddresst>
   d73d2:	b958      	cbnz	r0, d73ec <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0x90>
    if (_debug) {
   d73d4:	7d33      	ldrb	r3, [r6, #20]
   d73d6:	b123      	cbz	r3, d73e2 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0x86>
      Serial.println("ERROR sending values with UDP");
   d73d8:	f003 ffd8 	bl	db38c <_Z16_fetch_usbserialv>
   d73dc:	4912      	ldr	r1, [pc, #72]	; (d7428 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xcc>)
   d73de:	f002 fcd8 	bl	d9d92 <_ZN5Print7printlnEPKc>
    _client_udp_ubi.stop();
   d73e2:	480f      	ldr	r0, [pc, #60]	; (d7420 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xc4>)
   d73e4:	f003 fc8a 	bl	dacfc <_ZN3UDP4stopEv>
    return false;
   d73e8:	2000      	movs	r0, #0
   d73ea:	e014      	b.n	d7416 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xba>
      if (str == NULL) return 0;
   d73ec:	2f00      	cmp	r7, #0
   d73ee:	d0f1      	beq.n	d73d4 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0x78>
      return write((const uint8_t *)str, strlen(str));
   d73f0:	4638      	mov	r0, r7
   d73f2:	f005 fb1a 	bl	dca2a <strlen>
   d73f6:	4639      	mov	r1, r7
   d73f8:	4602      	mov	r2, r0
   d73fa:	4809      	ldr	r0, [pc, #36]	; (d7420 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xc4>)
   d73fc:	f003 fc8c 	bl	dad18 <_ZN3UDP5writeEPKhj>
  if (!(_client_udp_ubi.beginPacket(serverIpAddress, UBIDOTS_TCP_PORT) && _client_udp_ubi.write(payload) &&
   d7400:	2800      	cmp	r0, #0
   d7402:	d0e7      	beq.n	d73d4 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0x78>
        _client_udp_ubi.endPacket())) {
   d7404:	4806      	ldr	r0, [pc, #24]	; (d7420 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xc4>)
   d7406:	f003 fce7 	bl	dadd8 <_ZN3UDP9endPacketEv>
  if (!(_client_udp_ubi.beginPacket(serverIpAddress, UBIDOTS_TCP_PORT) && _client_udp_ubi.write(payload) &&
   d740a:	2800      	cmp	r0, #0
   d740c:	d0e2      	beq.n	d73d4 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0x78>
  _client_udp_ubi.stop();
   d740e:	4804      	ldr	r0, [pc, #16]	; (d7420 <_ZN6UbiUDP8sendDataEPKcS1_PcP8UbiFlags+0xc4>)
   d7410:	f003 fc74 	bl	dacfc <_ZN3UDP4stopEv>
  return true;
   d7414:	2001      	movs	r0, #1
}
   d7416:	b00f      	add	sp, #60	; 0x3c
   d7418:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d741a:	bf00      	nop
   d741c:	000df504 	.word	0x000df504
   d7420:	2003e5a8 	.word	0x2003e5a8
   d7424:	000df6b0 	.word	0x000df6b0
   d7428:	000df590 	.word	0x000df590

000d742c <_ZN7Ubidots8_builderEPcPKc11IotProtocol>:

Ubidots::Ubidots(char* token, IotProtocol iotProtocol) { _builder(token, UBI_INDUSTRIAL, iotProtocol); }

Ubidots::Ubidots(char* token, UbiServer server, IotProtocol iotProtocol) { _builder(token, server, iotProtocol); }

void Ubidots::_builder(char* token, UbiServer server, IotProtocol iotProtocol) {
   d742c:	b573      	push	{r0, r1, r4, r5, r6, lr}
  _iotProtocol = iotProtocol;
   d742e:	7203      	strb	r3, [r0, #8]
void Ubidots::_builder(char* token, UbiServer server, IotProtocol iotProtocol) {
   d7430:	4604      	mov	r4, r0
  _context = (ContextUbi*)malloc(MAX_VALUES * sizeof(ContextUbi));
   d7432:	2050      	movs	r0, #80	; 0x50
void Ubidots::_builder(char* token, UbiServer server, IotProtocol iotProtocol) {
   d7434:	e9cd 2100 	strd	r2, r1, [sp]
   d7438:	461e      	mov	r6, r3
  _context = (ContextUbi*)malloc(MAX_VALUES * sizeof(ContextUbi));
   d743a:	f000 fb7f 	bl	d7b3c <malloc>
   d743e:	6060      	str	r0, [r4, #4]

  _cloudProtocol = new UbiProtocolHandler(token, server, iotProtocol);
   d7440:	2014      	movs	r0, #20
   d7442:	f7fc fe28 	bl	d4096 <_Znwj>
   d7446:	4605      	mov	r5, r0
   d7448:	b120      	cbz	r0, d7454 <_ZN7Ubidots8_builderEPcPKc11IotProtocol+0x28>
   d744a:	e9dd 2100 	ldrd	r2, r1, [sp]
   d744e:	4633      	mov	r3, r6
   d7450:	f7ff fbd4 	bl	d6bfc <_ZN18UbiProtocolHandlerC1EPcPKc11IotProtocol>
   d7454:	6025      	str	r5, [r4, #0]
}
   d7456:	b002      	add	sp, #8
   d7458:	bd70      	pop	{r4, r5, r6, pc}
	...

000d745c <_ZN7UbidotsC1EPc11IotProtocol>:
Ubidots::Ubidots(char* token, IotProtocol iotProtocol) { _builder(token, UBI_INDUSTRIAL, iotProtocol); }
   d745c:	b538      	push	{r3, r4, r5, lr}
   d745e:	2500      	movs	r5, #0
   d7460:	4604      	mov	r4, r0
   d7462:	4613      	mov	r3, r2
   d7464:	7245      	strb	r5, [r0, #9]
   d7466:	7285      	strb	r5, [r0, #10]
   d7468:	4a02      	ldr	r2, [pc, #8]	; (d7474 <_ZN7UbidotsC1EPc11IotProtocol+0x18>)
   d746a:	f7ff ffdf 	bl	d742c <_ZN7Ubidots8_builderEPcPKc11IotProtocol>
   d746e:	4620      	mov	r0, r4
   d7470:	bd38      	pop	{r3, r4, r5, pc}
   d7472:	bf00      	nop
   d7474:	000df5c8 	.word	0x000df5c8

000d7478 <_ZN7Ubidots3addEPcfS0_mj>:
  add(variable_label, value, context, dot_timestamp_seconds, NULL);
}

void Ubidots::add(char* variable_label, float value, char* context, long unsigned dot_timestamp_seconds,
                  unsigned int dot_timestamp_millis) {
  _cloudProtocol->add(variable_label, value, context, dot_timestamp_seconds, dot_timestamp_millis);
   d7478:	6800      	ldr	r0, [r0, #0]
   d747a:	f7ff b951 	b.w	d6720 <_ZN18UbiProtocolHandler3addEPcfS0_mj>

000d747e <_ZN7Ubidots3addEPcf>:
void Ubidots::add(char* variable_label, float value) { add(variable_label, value, NULL, NULL, NULL); }
   d747e:	b507      	push	{r0, r1, r2, lr}
   d7480:	2300      	movs	r3, #0
   d7482:	9300      	str	r3, [sp, #0]
   d7484:	461a      	mov	r2, r3
   d7486:	f7ff fff7 	bl	d7478 <_ZN7Ubidots3addEPcfS0_mj>
   d748a:	b003      	add	sp, #12
   d748c:	f85d fb04 	ldr.w	pc, [sp], #4

000d7490 <_ZN7Ubidots4sendEPKcN8particle5FlagsI15PublishFlagTypehEE>:

bool Ubidots::send(const char* device_label, const char* device_name) {
  return _cloudProtocol->send(device_label, device_name);
}

bool Ubidots::send(const char* device_label, PublishFlags flag) { return _cloudProtocol->send(device_label, flag); }
   d7490:	6800      	ldr	r0, [r0, #0]
   d7492:	f7ff bb61 	b.w	d6b58 <_ZN18UbiProtocolHandler4sendEPKcN8particle5FlagsI15PublishFlagTypehEE>
	...

000d7498 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d7498:	b508      	push	{r3, lr}
   d749a:	4b02      	ldr	r3, [pc, #8]	; (d74a4 <os_mutex_recursive_create+0xc>)
   d749c:	681b      	ldr	r3, [r3, #0]
   d749e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d74a0:	9301      	str	r3, [sp, #4]
   d74a2:	bd08      	pop	{r3, pc}
   d74a4:	00030248 	.word	0x00030248

000d74a8 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d74a8:	b508      	push	{r3, lr}
   d74aa:	4b02      	ldr	r3, [pc, #8]	; (d74b4 <os_mutex_recursive_destroy+0xc>)
   d74ac:	681b      	ldr	r3, [r3, #0]
   d74ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d74b0:	9301      	str	r3, [sp, #4]
   d74b2:	bd08      	pop	{r3, pc}
   d74b4:	00030248 	.word	0x00030248

000d74b8 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   d74b8:	b508      	push	{r3, lr}
   d74ba:	4b02      	ldr	r3, [pc, #8]	; (d74c4 <os_mutex_recursive_lock+0xc>)
   d74bc:	681b      	ldr	r3, [r3, #0]
   d74be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d74c0:	9301      	str	r3, [sp, #4]
   d74c2:	bd08      	pop	{r3, pc}
   d74c4:	00030248 	.word	0x00030248

000d74c8 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   d74c8:	b508      	push	{r3, lr}
   d74ca:	4b02      	ldr	r3, [pc, #8]	; (d74d4 <os_mutex_recursive_unlock+0xc>)
   d74cc:	681b      	ldr	r3, [r3, #0]
   d74ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d74d0:	9301      	str	r3, [sp, #4]
   d74d2:	bd08      	pop	{r3, pc}
   d74d4:	00030248 	.word	0x00030248

000d74d8 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d74d8:	b508      	push	{r3, lr}
   d74da:	4b02      	ldr	r3, [pc, #8]	; (d74e4 <HAL_RNG_GetRandomNumber+0xc>)
   d74dc:	681b      	ldr	r3, [r3, #0]
   d74de:	685b      	ldr	r3, [r3, #4]
   d74e0:	9301      	str	r3, [sp, #4]
   d74e2:	bd08      	pop	{r3, pc}
   d74e4:	00030218 	.word	0x00030218

000d74e8 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d74e8:	b508      	push	{r3, lr}
   d74ea:	4b02      	ldr	r3, [pc, #8]	; (d74f4 <HAL_Delay_Microseconds+0xc>)
   d74ec:	681b      	ldr	r3, [r3, #0]
   d74ee:	68db      	ldr	r3, [r3, #12]
   d74f0:	9301      	str	r3, [sp, #4]
   d74f2:	bd08      	pop	{r3, pc}
   d74f4:	00030218 	.word	0x00030218

000d74f8 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d74f8:	b508      	push	{r3, lr}
   d74fa:	4b02      	ldr	r3, [pc, #8]	; (d7504 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d74fc:	681b      	ldr	r3, [r3, #0]
   d74fe:	695b      	ldr	r3, [r3, #20]
   d7500:	9301      	str	r3, [sp, #4]
   d7502:	bd08      	pop	{r3, pc}
   d7504:	00030218 	.word	0x00030218

000d7508 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   d7508:	b508      	push	{r3, lr}
   d750a:	4b02      	ldr	r3, [pc, #8]	; (d7514 <hal_rtc_time_is_valid+0xc>)
   d750c:	681b      	ldr	r3, [r3, #0]
   d750e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d7510:	9301      	str	r3, [sp, #4]
   d7512:	bd08      	pop	{r3, pc}
   d7514:	00030218 	.word	0x00030218

000d7518 <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   d7518:	b508      	push	{r3, lr}
   d751a:	4b02      	ldr	r3, [pc, #8]	; (d7524 <hal_rtc_get_time+0xc>)
   d751c:	681b      	ldr	r3, [r3, #0]
   d751e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   d7520:	9301      	str	r3, [sp, #4]
   d7522:	bd08      	pop	{r3, pc}
   d7524:	00030218 	.word	0x00030218

000d7528 <hal_rtc_set_time>:
DYNALIB_FN(BASE_IDX + 24, hal, hal_rtc_set_time, int(const struct timeval*, void*))
   d7528:	b508      	push	{r3, lr}
   d752a:	4b02      	ldr	r3, [pc, #8]	; (d7534 <hal_rtc_set_time+0xc>)
   d752c:	681b      	ldr	r3, [r3, #0]
   d752e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   d7530:	9301      	str	r3, [sp, #4]
   d7532:	bd08      	pop	{r3, pc}
   d7534:	00030218 	.word	0x00030218

000d7538 <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d7538:	b508      	push	{r3, lr}
   d753a:	4b02      	ldr	r3, [pc, #8]	; (d7544 <HAL_Validate_Pin_Function+0xc>)
   d753c:	681b      	ldr	r3, [r3, #0]
   d753e:	685b      	ldr	r3, [r3, #4]
   d7540:	9301      	str	r3, [sp, #4]
   d7542:	bd08      	pop	{r3, pc}
   d7544:	0003022c 	.word	0x0003022c

000d7548 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d7548:	b508      	push	{r3, lr}
   d754a:	4b02      	ldr	r3, [pc, #8]	; (d7554 <HAL_Pin_Mode+0xc>)
   d754c:	681b      	ldr	r3, [r3, #0]
   d754e:	689b      	ldr	r3, [r3, #8]
   d7550:	9301      	str	r3, [sp, #4]
   d7552:	bd08      	pop	{r3, pc}
   d7554:	0003022c 	.word	0x0003022c

000d7558 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d7558:	b508      	push	{r3, lr}
   d755a:	4b02      	ldr	r3, [pc, #8]	; (d7564 <HAL_Get_Pin_Mode+0xc>)
   d755c:	681b      	ldr	r3, [r3, #0]
   d755e:	68db      	ldr	r3, [r3, #12]
   d7560:	9301      	str	r3, [sp, #4]
   d7562:	bd08      	pop	{r3, pc}
   d7564:	0003022c 	.word	0x0003022c

000d7568 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d7568:	b508      	push	{r3, lr}
   d756a:	4b02      	ldr	r3, [pc, #8]	; (d7574 <HAL_GPIO_Write+0xc>)
   d756c:	681b      	ldr	r3, [r3, #0]
   d756e:	691b      	ldr	r3, [r3, #16]
   d7570:	9301      	str	r3, [sp, #4]
   d7572:	bd08      	pop	{r3, pc}
   d7574:	0003022c 	.word	0x0003022c

000d7578 <HAL_Interrupts_Attach>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   d7578:	b508      	push	{r3, lr}
   d757a:	4b02      	ldr	r3, [pc, #8]	; (d7584 <HAL_Interrupts_Attach+0xc>)
   d757c:	681b      	ldr	r3, [r3, #0]
   d757e:	699b      	ldr	r3, [r3, #24]
   d7580:	9301      	str	r3, [sp, #4]
   d7582:	bd08      	pop	{r3, pc}
   d7584:	0003022c 	.word	0x0003022c

000d7588 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   d7588:	b508      	push	{r3, lr}
   d758a:	4b02      	ldr	r3, [pc, #8]	; (d7594 <HAL_Interrupts_Detach+0xc>)
   d758c:	681b      	ldr	r3, [r3, #0]
   d758e:	69db      	ldr	r3, [r3, #28]
   d7590:	9301      	str	r3, [sp, #4]
   d7592:	bd08      	pop	{r3, pc}
   d7594:	0003022c 	.word	0x0003022c

000d7598 <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   d7598:	b508      	push	{r3, lr}
   d759a:	4b02      	ldr	r3, [pc, #8]	; (d75a4 <hal_adc_read+0xc>)
   d759c:	681b      	ldr	r3, [r3, #0]
   d759e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d75a0:	9301      	str	r3, [sp, #4]
   d75a2:	bd08      	pop	{r3, pc}
   d75a4:	0003022c 	.word	0x0003022c

000d75a8 <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   d75a8:	b508      	push	{r3, lr}
   d75aa:	4b02      	ldr	r3, [pc, #8]	; (d75b4 <hal_i2c_begin+0xc>)
   d75ac:	681b      	ldr	r3, [r3, #0]
   d75ae:	68db      	ldr	r3, [r3, #12]
   d75b0:	9301      	str	r3, [sp, #4]
   d75b2:	bd08      	pop	{r3, pc}
   d75b4:	00030228 	.word	0x00030228

000d75b8 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   d75b8:	b508      	push	{r3, lr}
   d75ba:	4b02      	ldr	r3, [pc, #8]	; (d75c4 <hal_i2c_begin_transmission+0xc>)
   d75bc:	681b      	ldr	r3, [r3, #0]
   d75be:	699b      	ldr	r3, [r3, #24]
   d75c0:	9301      	str	r3, [sp, #4]
   d75c2:	bd08      	pop	{r3, pc}
   d75c4:	00030228 	.word	0x00030228

000d75c8 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   d75c8:	b508      	push	{r3, lr}
   d75ca:	4b02      	ldr	r3, [pc, #8]	; (d75d4 <hal_i2c_end_transmission+0xc>)
   d75cc:	681b      	ldr	r3, [r3, #0]
   d75ce:	69db      	ldr	r3, [r3, #28]
   d75d0:	9301      	str	r3, [sp, #4]
   d75d2:	bd08      	pop	{r3, pc}
   d75d4:	00030228 	.word	0x00030228

000d75d8 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d75d8:	b508      	push	{r3, lr}
   d75da:	4b02      	ldr	r3, [pc, #8]	; (d75e4 <hal_i2c_write+0xc>)
   d75dc:	681b      	ldr	r3, [r3, #0]
   d75de:	6a1b      	ldr	r3, [r3, #32]
   d75e0:	9301      	str	r3, [sp, #4]
   d75e2:	bd08      	pop	{r3, pc}
   d75e4:	00030228 	.word	0x00030228

000d75e8 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d75e8:	b508      	push	{r3, lr}
   d75ea:	4b02      	ldr	r3, [pc, #8]	; (d75f4 <hal_i2c_available+0xc>)
   d75ec:	681b      	ldr	r3, [r3, #0]
   d75ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d75f0:	9301      	str	r3, [sp, #4]
   d75f2:	bd08      	pop	{r3, pc}
   d75f4:	00030228 	.word	0x00030228

000d75f8 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d75f8:	b508      	push	{r3, lr}
   d75fa:	4b02      	ldr	r3, [pc, #8]	; (d7604 <hal_i2c_read+0xc>)
   d75fc:	681b      	ldr	r3, [r3, #0]
   d75fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d7600:	9301      	str	r3, [sp, #4]
   d7602:	bd08      	pop	{r3, pc}
   d7604:	00030228 	.word	0x00030228

000d7608 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d7608:	b508      	push	{r3, lr}
   d760a:	4b02      	ldr	r3, [pc, #8]	; (d7614 <hal_i2c_peek+0xc>)
   d760c:	681b      	ldr	r3, [r3, #0]
   d760e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d7610:	9301      	str	r3, [sp, #4]
   d7612:	bd08      	pop	{r3, pc}
   d7614:	00030228 	.word	0x00030228

000d7618 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d7618:	b508      	push	{r3, lr}
   d761a:	4b02      	ldr	r3, [pc, #8]	; (d7624 <hal_i2c_flush+0xc>)
   d761c:	681b      	ldr	r3, [r3, #0]
   d761e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d7620:	9301      	str	r3, [sp, #4]
   d7622:	bd08      	pop	{r3, pc}
   d7624:	00030228 	.word	0x00030228

000d7628 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d7628:	b508      	push	{r3, lr}
   d762a:	4b02      	ldr	r3, [pc, #8]	; (d7634 <hal_i2c_is_enabled+0xc>)
   d762c:	681b      	ldr	r3, [r3, #0]
   d762e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d7630:	9301      	str	r3, [sp, #4]
   d7632:	bd08      	pop	{r3, pc}
   d7634:	00030228 	.word	0x00030228

000d7638 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d7638:	b508      	push	{r3, lr}
   d763a:	4b02      	ldr	r3, [pc, #8]	; (d7644 <hal_i2c_init+0xc>)
   d763c:	681b      	ldr	r3, [r3, #0]
   d763e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d7640:	9301      	str	r3, [sp, #4]
   d7642:	bd08      	pop	{r3, pc}
   d7644:	00030228 	.word	0x00030228

000d7648 <hal_i2c_lock>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
   d7648:	b508      	push	{r3, lr}
   d764a:	4b02      	ldr	r3, [pc, #8]	; (d7654 <hal_i2c_lock+0xc>)
   d764c:	681b      	ldr	r3, [r3, #0]
   d764e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d7650:	9301      	str	r3, [sp, #4]
   d7652:	bd08      	pop	{r3, pc}
   d7654:	00030228 	.word	0x00030228

000d7658 <hal_i2c_unlock>:
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
   d7658:	b508      	push	{r3, lr}
   d765a:	4b02      	ldr	r3, [pc, #8]	; (d7664 <hal_i2c_unlock+0xc>)
   d765c:	681b      	ldr	r3, [r3, #0]
   d765e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d7660:	9301      	str	r3, [sp, #4]
   d7662:	bd08      	pop	{r3, pc}
   d7664:	00030228 	.word	0x00030228

000d7668 <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   d7668:	b508      	push	{r3, lr}
   d766a:	4b02      	ldr	r3, [pc, #8]	; (d7674 <hal_i2c_request_ex+0xc>)
   d766c:	681b      	ldr	r3, [r3, #0]
   d766e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d7670:	9301      	str	r3, [sp, #4]
   d7672:	bd08      	pop	{r3, pc}
   d7674:	00030228 	.word	0x00030228

000d7678 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   d7678:	b508      	push	{r3, lr}
   d767a:	4b02      	ldr	r3, [pc, #8]	; (d7684 <if_index_to_name+0xc>)
   d767c:	681b      	ldr	r3, [r3, #0]
   d767e:	695b      	ldr	r3, [r3, #20]
   d7680:	9301      	str	r3, [sp, #4]
   d7682:	bd08      	pop	{r3, pc}
   d7684:	0003026c 	.word	0x0003026c

000d7688 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d7688:	b508      	push	{r3, lr}
   d768a:	4b02      	ldr	r3, [pc, #8]	; (d7694 <inet_inet_ntop+0xc>)
   d768c:	681b      	ldr	r3, [r3, #0]
   d768e:	695b      	ldr	r3, [r3, #20]
   d7690:	9301      	str	r3, [sp, #4]
   d7692:	bd08      	pop	{r3, pc}
   d7694:	00030264 	.word	0x00030264

000d7698 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   d7698:	b508      	push	{r3, lr}
   d769a:	4b02      	ldr	r3, [pc, #8]	; (d76a4 <inet_htonl+0xc>)
   d769c:	681b      	ldr	r3, [r3, #0]
   d769e:	6a1b      	ldr	r3, [r3, #32]
   d76a0:	9301      	str	r3, [sp, #4]
   d76a2:	bd08      	pop	{r3, pc}
   d76a4:	00030264 	.word	0x00030264

000d76a8 <inet_ntohs>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
   d76a8:	b508      	push	{r3, lr}
   d76aa:	4b02      	ldr	r3, [pc, #8]	; (d76b4 <inet_ntohs+0xc>)
   d76ac:	681b      	ldr	r3, [r3, #0]
   d76ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d76b0:	9301      	str	r3, [sp, #4]
   d76b2:	bd08      	pop	{r3, pc}
   d76b4:	00030264 	.word	0x00030264

000d76b8 <inet_htons>:
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   d76b8:	b508      	push	{r3, lr}
   d76ba:	4b02      	ldr	r3, [pc, #8]	; (d76c4 <inet_htons+0xc>)
   d76bc:	681b      	ldr	r3, [r3, #0]
   d76be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d76c0:	9301      	str	r3, [sp, #4]
   d76c2:	bd08      	pop	{r3, pc}
   d76c4:	00030264 	.word	0x00030264

000d76c8 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d76c8:	b508      	push	{r3, lr}
   d76ca:	4b02      	ldr	r3, [pc, #8]	; (d76d4 <netdb_freeaddrinfo+0xc>)
   d76cc:	681b      	ldr	r3, [r3, #0]
   d76ce:	689b      	ldr	r3, [r3, #8]
   d76d0:	9301      	str	r3, [sp, #4]
   d76d2:	bd08      	pop	{r3, pc}
   d76d4:	00030268 	.word	0x00030268

000d76d8 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d76d8:	b508      	push	{r3, lr}
   d76da:	4b02      	ldr	r3, [pc, #8]	; (d76e4 <netdb_getaddrinfo+0xc>)
   d76dc:	681b      	ldr	r3, [r3, #0]
   d76de:	68db      	ldr	r3, [r3, #12]
   d76e0:	9301      	str	r3, [sp, #4]
   d76e2:	bd08      	pop	{r3, pc}
   d76e4:	00030268 	.word	0x00030268

000d76e8 <sock_bind>:
// GNINRAW

DYNALIB_BEGIN(hal_socket)

DYNALIB_FN(0, hal_socket, sock_accept, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
   d76e8:	b508      	push	{r3, lr}
   d76ea:	4b02      	ldr	r3, [pc, #8]	; (d76f4 <sock_bind+0xc>)
   d76ec:	681b      	ldr	r3, [r3, #0]
   d76ee:	685b      	ldr	r3, [r3, #4]
   d76f0:	9301      	str	r3, [sp, #4]
   d76f2:	bd08      	pop	{r3, pc}
   d76f4:	00030238 	.word	0x00030238

000d76f8 <sock_setsockopt>:
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   d76f8:	b508      	push	{r3, lr}
   d76fa:	4b02      	ldr	r3, [pc, #8]	; (d7704 <sock_setsockopt+0xc>)
   d76fc:	681b      	ldr	r3, [r3, #0]
   d76fe:	699b      	ldr	r3, [r3, #24]
   d7700:	9301      	str	r3, [sp, #4]
   d7702:	bd08      	pop	{r3, pc}
   d7704:	00030238 	.word	0x00030238

000d7708 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   d7708:	b508      	push	{r3, lr}
   d770a:	4b02      	ldr	r3, [pc, #8]	; (d7714 <sock_close+0xc>)
   d770c:	681b      	ldr	r3, [r3, #0]
   d770e:	69db      	ldr	r3, [r3, #28]
   d7710:	9301      	str	r3, [sp, #4]
   d7712:	bd08      	pop	{r3, pc}
   d7714:	00030238 	.word	0x00030238

000d7718 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   d7718:	b508      	push	{r3, lr}
   d771a:	4b02      	ldr	r3, [pc, #8]	; (d7724 <sock_connect+0xc>)
   d771c:	681b      	ldr	r3, [r3, #0]
   d771e:	6a1b      	ldr	r3, [r3, #32]
   d7720:	9301      	str	r3, [sp, #4]
   d7722:	bd08      	pop	{r3, pc}
   d7724:	00030238 	.word	0x00030238

000d7728 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   d7728:	b508      	push	{r3, lr}
   d772a:	4b02      	ldr	r3, [pc, #8]	; (d7734 <sock_recv+0xc>)
   d772c:	681b      	ldr	r3, [r3, #0]
   d772e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d7730:	9301      	str	r3, [sp, #4]
   d7732:	bd08      	pop	{r3, pc}
   d7734:	00030238 	.word	0x00030238

000d7738 <sock_recvfrom>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
   d7738:	b508      	push	{r3, lr}
   d773a:	4b02      	ldr	r3, [pc, #8]	; (d7744 <sock_recvfrom+0xc>)
   d773c:	681b      	ldr	r3, [r3, #0]
   d773e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d7740:	9301      	str	r3, [sp, #4]
   d7742:	bd08      	pop	{r3, pc}
   d7744:	00030238 	.word	0x00030238

000d7748 <sock_send>:
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   d7748:	b508      	push	{r3, lr}
   d774a:	4b02      	ldr	r3, [pc, #8]	; (d7754 <sock_send+0xc>)
   d774c:	681b      	ldr	r3, [r3, #0]
   d774e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d7750:	9301      	str	r3, [sp, #4]
   d7752:	bd08      	pop	{r3, pc}
   d7754:	00030238 	.word	0x00030238

000d7758 <sock_sendto>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
   d7758:	b508      	push	{r3, lr}
   d775a:	4b02      	ldr	r3, [pc, #8]	; (d7764 <sock_sendto+0xc>)
   d775c:	681b      	ldr	r3, [r3, #0]
   d775e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d7760:	9301      	str	r3, [sp, #4]
   d7762:	bd08      	pop	{r3, pc}
   d7764:	00030238 	.word	0x00030238

000d7768 <sock_socket>:
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   d7768:	b508      	push	{r3, lr}
   d776a:	4b02      	ldr	r3, [pc, #8]	; (d7774 <sock_socket+0xc>)
   d776c:	681b      	ldr	r3, [r3, #0]
   d776e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d7770:	9301      	str	r3, [sp, #4]
   d7772:	bd08      	pop	{r3, pc}
   d7774:	00030238 	.word	0x00030238

000d7778 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d7778:	b508      	push	{r3, lr}
   d777a:	4b02      	ldr	r3, [pc, #8]	; (d7784 <hal_spi_init+0xc>)
   d777c:	681b      	ldr	r3, [r3, #0]
   d777e:	69db      	ldr	r3, [r3, #28]
   d7780:	9301      	str	r3, [sp, #4]
   d7782:	bd08      	pop	{r3, pc}
   d7784:	00030230 	.word	0x00030230

000d7788 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d7788:	b508      	push	{r3, lr}
   d778a:	4b02      	ldr	r3, [pc, #8]	; (d7794 <hal_spi_is_enabled+0xc>)
   d778c:	681b      	ldr	r3, [r3, #0]
   d778e:	6a1b      	ldr	r3, [r3, #32]
   d7790:	9301      	str	r3, [sp, #4]
   d7792:	bd08      	pop	{r3, pc}
   d7794:	00030230 	.word	0x00030230

000d7798 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d7798:	b508      	push	{r3, lr}
   d779a:	4b02      	ldr	r3, [pc, #8]	; (d77a4 <hal_usart_init+0xc>)
   d779c:	681b      	ldr	r3, [r3, #0]
   d779e:	681b      	ldr	r3, [r3, #0]
   d77a0:	9301      	str	r3, [sp, #4]
   d77a2:	bd08      	pop	{r3, pc}
   d77a4:	0003023c 	.word	0x0003023c

000d77a8 <hal_usart_end>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
   d77a8:	b508      	push	{r3, lr}
   d77aa:	4b02      	ldr	r3, [pc, #8]	; (d77b4 <hal_usart_end+0xc>)
   d77ac:	681b      	ldr	r3, [r3, #0]
   d77ae:	689b      	ldr	r3, [r3, #8]
   d77b0:	9301      	str	r3, [sp, #4]
   d77b2:	bd08      	pop	{r3, pc}
   d77b4:	0003023c 	.word	0x0003023c

000d77b8 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d77b8:	b508      	push	{r3, lr}
   d77ba:	4b02      	ldr	r3, [pc, #8]	; (d77c4 <hal_usart_write+0xc>)
   d77bc:	681b      	ldr	r3, [r3, #0]
   d77be:	68db      	ldr	r3, [r3, #12]
   d77c0:	9301      	str	r3, [sp, #4]
   d77c2:	bd08      	pop	{r3, pc}
   d77c4:	0003023c 	.word	0x0003023c

000d77c8 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d77c8:	b508      	push	{r3, lr}
   d77ca:	4b02      	ldr	r3, [pc, #8]	; (d77d4 <hal_usart_available+0xc>)
   d77cc:	681b      	ldr	r3, [r3, #0]
   d77ce:	691b      	ldr	r3, [r3, #16]
   d77d0:	9301      	str	r3, [sp, #4]
   d77d2:	bd08      	pop	{r3, pc}
   d77d4:	0003023c 	.word	0x0003023c

000d77d8 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d77d8:	b508      	push	{r3, lr}
   d77da:	4b02      	ldr	r3, [pc, #8]	; (d77e4 <hal_usart_read+0xc>)
   d77dc:	681b      	ldr	r3, [r3, #0]
   d77de:	695b      	ldr	r3, [r3, #20]
   d77e0:	9301      	str	r3, [sp, #4]
   d77e2:	bd08      	pop	{r3, pc}
   d77e4:	0003023c 	.word	0x0003023c

000d77e8 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d77e8:	b508      	push	{r3, lr}
   d77ea:	4b02      	ldr	r3, [pc, #8]	; (d77f4 <hal_usart_peek+0xc>)
   d77ec:	681b      	ldr	r3, [r3, #0]
   d77ee:	699b      	ldr	r3, [r3, #24]
   d77f0:	9301      	str	r3, [sp, #4]
   d77f2:	bd08      	pop	{r3, pc}
   d77f4:	0003023c 	.word	0x0003023c

000d77f8 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d77f8:	b508      	push	{r3, lr}
   d77fa:	4b02      	ldr	r3, [pc, #8]	; (d7804 <hal_usart_flush+0xc>)
   d77fc:	681b      	ldr	r3, [r3, #0]
   d77fe:	69db      	ldr	r3, [r3, #28]
   d7800:	9301      	str	r3, [sp, #4]
   d7802:	bd08      	pop	{r3, pc}
   d7804:	0003023c 	.word	0x0003023c

000d7808 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d7808:	b508      	push	{r3, lr}
   d780a:	4b02      	ldr	r3, [pc, #8]	; (d7814 <hal_usart_is_enabled+0xc>)
   d780c:	681b      	ldr	r3, [r3, #0]
   d780e:	6a1b      	ldr	r3, [r3, #32]
   d7810:	9301      	str	r3, [sp, #4]
   d7812:	bd08      	pop	{r3, pc}
   d7814:	0003023c 	.word	0x0003023c

000d7818 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d7818:	b508      	push	{r3, lr}
   d781a:	4b02      	ldr	r3, [pc, #8]	; (d7824 <hal_usart_available_data_for_write+0xc>)
   d781c:	681b      	ldr	r3, [r3, #0]
   d781e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d7820:	9301      	str	r3, [sp, #4]
   d7822:	bd08      	pop	{r3, pc}
   d7824:	0003023c 	.word	0x0003023c

000d7828 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   d7828:	b508      	push	{r3, lr}
   d782a:	4b02      	ldr	r3, [pc, #8]	; (d7834 <hal_usart_begin_config+0xc>)
   d782c:	681b      	ldr	r3, [r3, #0]
   d782e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d7830:	9301      	str	r3, [sp, #4]
   d7832:	bd08      	pop	{r3, pc}
   d7834:	0003023c 	.word	0x0003023c

000d7838 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d7838:	b508      	push	{r3, lr}
   d783a:	4b02      	ldr	r3, [pc, #8]	; (d7844 <HAL_USB_USART_Init+0xc>)
   d783c:	681b      	ldr	r3, [r3, #0]
   d783e:	681b      	ldr	r3, [r3, #0]
   d7840:	9301      	str	r3, [sp, #4]
   d7842:	bd08      	pop	{r3, pc}
   d7844:	0003024c 	.word	0x0003024c

000d7848 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d7848:	b508      	push	{r3, lr}
   d784a:	4b02      	ldr	r3, [pc, #8]	; (d7854 <HAL_USB_USART_Begin+0xc>)
   d784c:	681b      	ldr	r3, [r3, #0]
   d784e:	685b      	ldr	r3, [r3, #4]
   d7850:	9301      	str	r3, [sp, #4]
   d7852:	bd08      	pop	{r3, pc}
   d7854:	0003024c 	.word	0x0003024c

000d7858 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   d7858:	b508      	push	{r3, lr}
   d785a:	4b02      	ldr	r3, [pc, #8]	; (d7864 <HAL_USB_USART_End+0xc>)
   d785c:	681b      	ldr	r3, [r3, #0]
   d785e:	689b      	ldr	r3, [r3, #8]
   d7860:	9301      	str	r3, [sp, #4]
   d7862:	bd08      	pop	{r3, pc}
   d7864:	0003024c 	.word	0x0003024c

000d7868 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d7868:	b508      	push	{r3, lr}
   d786a:	4b02      	ldr	r3, [pc, #8]	; (d7874 <HAL_USB_USART_Available_Data+0xc>)
   d786c:	681b      	ldr	r3, [r3, #0]
   d786e:	691b      	ldr	r3, [r3, #16]
   d7870:	9301      	str	r3, [sp, #4]
   d7872:	bd08      	pop	{r3, pc}
   d7874:	0003024c 	.word	0x0003024c

000d7878 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d7878:	b508      	push	{r3, lr}
   d787a:	4b02      	ldr	r3, [pc, #8]	; (d7884 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d787c:	681b      	ldr	r3, [r3, #0]
   d787e:	695b      	ldr	r3, [r3, #20]
   d7880:	9301      	str	r3, [sp, #4]
   d7882:	bd08      	pop	{r3, pc}
   d7884:	0003024c 	.word	0x0003024c

000d7888 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d7888:	b508      	push	{r3, lr}
   d788a:	4b02      	ldr	r3, [pc, #8]	; (d7894 <HAL_USB_USART_Receive_Data+0xc>)
   d788c:	681b      	ldr	r3, [r3, #0]
   d788e:	699b      	ldr	r3, [r3, #24]
   d7890:	9301      	str	r3, [sp, #4]
   d7892:	bd08      	pop	{r3, pc}
   d7894:	0003024c 	.word	0x0003024c

000d7898 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d7898:	b508      	push	{r3, lr}
   d789a:	4b02      	ldr	r3, [pc, #8]	; (d78a4 <HAL_USB_USART_Send_Data+0xc>)
   d789c:	681b      	ldr	r3, [r3, #0]
   d789e:	69db      	ldr	r3, [r3, #28]
   d78a0:	9301      	str	r3, [sp, #4]
   d78a2:	bd08      	pop	{r3, pc}
   d78a4:	0003024c 	.word	0x0003024c

000d78a8 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d78a8:	b508      	push	{r3, lr}
   d78aa:	4b02      	ldr	r3, [pc, #8]	; (d78b4 <HAL_USB_USART_Flush_Data+0xc>)
   d78ac:	681b      	ldr	r3, [r3, #0]
   d78ae:	6a1b      	ldr	r3, [r3, #32]
   d78b0:	9301      	str	r3, [sp, #4]
   d78b2:	bd08      	pop	{r3, pc}
   d78b4:	0003024c 	.word	0x0003024c

000d78b8 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d78b8:	b508      	push	{r3, lr}
   d78ba:	4b02      	ldr	r3, [pc, #8]	; (d78c4 <panic_+0xc>)
   d78bc:	681b      	ldr	r3, [r3, #0]
   d78be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d78c0:	9301      	str	r3, [sp, #4]
   d78c2:	bd08      	pop	{r3, pc}
   d78c4:	00030260 	.word	0x00030260

000d78c8 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d78c8:	b508      	push	{r3, lr}
   d78ca:	4b02      	ldr	r3, [pc, #8]	; (d78d4 <log_message+0xc>)
   d78cc:	681b      	ldr	r3, [r3, #0]
   d78ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d78d0:	9301      	str	r3, [sp, #4]
   d78d2:	bd08      	pop	{r3, pc}
   d78d4:	00030260 	.word	0x00030260

000d78d8 <log_message_v>:
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   d78d8:	b508      	push	{r3, lr}
   d78da:	4b02      	ldr	r3, [pc, #8]	; (d78e4 <log_message_v+0xc>)
   d78dc:	681b      	ldr	r3, [r3, #0]
   d78de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d78e0:	9301      	str	r3, [sp, #4]
   d78e2:	bd08      	pop	{r3, pc}
   d78e4:	00030260 	.word	0x00030260

000d78e8 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   d78e8:	b508      	push	{r3, lr}
   d78ea:	4b02      	ldr	r3, [pc, #8]	; (d78f4 <log_level_name+0xc>)
   d78ec:	681b      	ldr	r3, [r3, #0]
   d78ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d78f0:	9301      	str	r3, [sp, #4]
   d78f2:	bd08      	pop	{r3, pc}
   d78f4:	00030260 	.word	0x00030260

000d78f8 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   d78f8:	b508      	push	{r3, lr}
   d78fa:	4b02      	ldr	r3, [pc, #8]	; (d7904 <log_set_callbacks+0xc>)
   d78fc:	681b      	ldr	r3, [r3, #0]
   d78fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   d7900:	9301      	str	r3, [sp, #4]
   d7902:	bd08      	pop	{r3, pc}
   d7904:	00030260 	.word	0x00030260

000d7908 <diag_get_source>:
DYNALIB_FN(34, services, led_update_enabled, int(void*))
DYNALIB_FN(35, services, led_update, void(system_tick_t, LEDStatusData*, void*))

DYNALIB_FN(36, services, diag_register_source, int(const diag_source*, void*))
DYNALIB_FN(37, services, diag_enum_sources, int(diag_enum_sources_callback, size_t*, void*, void*))
DYNALIB_FN(38, services, diag_get_source, int(uint16_t, const diag_source**, void*))
   d7908:	b508      	push	{r3, lr}
   d790a:	4b03      	ldr	r3, [pc, #12]	; (d7918 <diag_get_source+0x10>)
   d790c:	681b      	ldr	r3, [r3, #0]
   d790e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   d7912:	9301      	str	r3, [sp, #4]
   d7914:	bd08      	pop	{r3, pc}
   d7916:	0000      	.short	0x0000
   d7918:	00030260 	.word	0x00030260

000d791c <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d791c:	b508      	push	{r3, lr}
   d791e:	4b02      	ldr	r3, [pc, #8]	; (d7928 <system_mode+0xc>)
   d7920:	681b      	ldr	r3, [r3, #0]
   d7922:	681b      	ldr	r3, [r3, #0]
   d7924:	9301      	str	r3, [sp, #4]
   d7926:	bd08      	pop	{r3, pc}
   d7928:	00030220 	.word	0x00030220

000d792c <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d792c:	b508      	push	{r3, lr}
   d792e:	4b02      	ldr	r3, [pc, #8]	; (d7938 <set_system_mode+0xc>)
   d7930:	681b      	ldr	r3, [r3, #0]
   d7932:	685b      	ldr	r3, [r3, #4]
   d7934:	9301      	str	r3, [sp, #4]
   d7936:	bd08      	pop	{r3, pc}
   d7938:	00030220 	.word	0x00030220

000d793c <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d793c:	b508      	push	{r3, lr}
   d793e:	4b02      	ldr	r3, [pc, #8]	; (d7948 <system_delay_ms+0xc>)
   d7940:	681b      	ldr	r3, [r3, #0]
   d7942:	695b      	ldr	r3, [r3, #20]
   d7944:	9301      	str	r3, [sp, #4]
   d7946:	bd08      	pop	{r3, pc}
   d7948:	00030220 	.word	0x00030220

000d794c <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d794c:	b508      	push	{r3, lr}
   d794e:	4b02      	ldr	r3, [pc, #8]	; (d7958 <system_thread_set_state+0xc>)
   d7950:	681b      	ldr	r3, [r3, #0]
   d7952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d7954:	9301      	str	r3, [sp, #4]
   d7956:	bd08      	pop	{r3, pc}
   d7958:	00030220 	.word	0x00030220

000d795c <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d795c:	b508      	push	{r3, lr}
   d795e:	4b02      	ldr	r3, [pc, #8]	; (d7968 <application_thread_current+0xc>)
   d7960:	681b      	ldr	r3, [r3, #0]
   d7962:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d7964:	9301      	str	r3, [sp, #4]
   d7966:	bd08      	pop	{r3, pc}
   d7968:	00030220 	.word	0x00030220

000d796c <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d796c:	b508      	push	{r3, lr}
   d796e:	4b02      	ldr	r3, [pc, #8]	; (d7978 <application_thread_invoke+0xc>)
   d7970:	681b      	ldr	r3, [r3, #0]
   d7972:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d7974:	9301      	str	r3, [sp, #4]
   d7976:	bd08      	pop	{r3, pc}
   d7978:	00030220 	.word	0x00030220

000d797c <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d797c:	b508      	push	{r3, lr}
   d797e:	4b02      	ldr	r3, [pc, #8]	; (d7988 <system_thread_get_state+0xc>)
   d7980:	681b      	ldr	r3, [r3, #0]
   d7982:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d7984:	9301      	str	r3, [sp, #4]
   d7986:	bd08      	pop	{r3, pc}
   d7988:	00030220 	.word	0x00030220

000d798c <system_notify_time_changed>:
DYNALIB_FN(23, system, system_notify_time_changed, void(uint32_t, void*, void*))
   d798c:	b508      	push	{r3, lr}
   d798e:	4b02      	ldr	r3, [pc, #8]	; (d7998 <system_notify_time_changed+0xc>)
   d7990:	681b      	ldr	r3, [r3, #0]
   d7992:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   d7994:	9301      	str	r3, [sp, #4]
   d7996:	bd08      	pop	{r3, pc}
   d7998:	00030220 	.word	0x00030220

000d799c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d799c:	b508      	push	{r3, lr}
   d799e:	4b03      	ldr	r3, [pc, #12]	; (d79ac <system_ctrl_set_app_request_handler+0x10>)
   d79a0:	681b      	ldr	r3, [r3, #0]
   d79a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d79a6:	9301      	str	r3, [sp, #4]
   d79a8:	bd08      	pop	{r3, pc}
   d79aa:	0000      	.short	0x0000
   d79ac:	00030220 	.word	0x00030220

000d79b0 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d79b0:	b508      	push	{r3, lr}
   d79b2:	4b03      	ldr	r3, [pc, #12]	; (d79c0 <system_ctrl_set_result+0x10>)
   d79b4:	681b      	ldr	r3, [r3, #0]
   d79b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d79ba:	9301      	str	r3, [sp, #4]
   d79bc:	bd08      	pop	{r3, pc}
   d79be:	0000      	.short	0x0000
   d79c0:	00030220 	.word	0x00030220

000d79c4 <system_power_management_set_config>:
DYNALIB_FN(BASE_IDX + 14, system, system_pool_free, void(void*, void*))
DYNALIB_FN(BASE_IDX + 15, system, system_sleep_pins, int(const uint16_t*, size_t, const InterruptMode*, size_t, long, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 16, system, system_invoke_event_handler, int(uint16_t handlerInfoSize, FilteringEventHandler* handlerInfo, const char* event_name, const char* event_data, void* reserved))

#if HAL_PLATFORM_POWER_MANAGEMENT
DYNALIB_FN(BASE_IDX + 17, system, system_power_management_set_config, int(const hal_power_config*, void*))
   d79c4:	b508      	push	{r3, lr}
   d79c6:	4b03      	ldr	r3, [pc, #12]	; (d79d4 <system_power_management_set_config+0x10>)
   d79c8:	681b      	ldr	r3, [r3, #0]
   d79ca:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   d79ce:	9301      	str	r3, [sp, #4]
   d79d0:	bd08      	pop	{r3, pc}
   d79d2:	0000      	.short	0x0000
   d79d4:	00030220 	.word	0x00030220

000d79d8 <system_sleep_ext>:
#define BASE_IDX1 (BASE_IDX + 18)
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
   d79d8:	b508      	push	{r3, lr}
   d79da:	4b03      	ldr	r3, [pc, #12]	; (d79e8 <system_sleep_ext+0x10>)
   d79dc:	681b      	ldr	r3, [r3, #0]
   d79de:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
   d79e2:	9301      	str	r3, [sp, #4]
   d79e4:	bd08      	pop	{r3, pc}
   d79e6:	0000      	.short	0x0000
   d79e8:	00030220 	.word	0x00030220

000d79ec <spark_function>:


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   d79ec:	b508      	push	{r3, lr}
   d79ee:	4b02      	ldr	r3, [pc, #8]	; (d79f8 <spark_function+0xc>)
   d79f0:	681b      	ldr	r3, [r3, #0]
   d79f2:	685b      	ldr	r3, [r3, #4]
   d79f4:	9301      	str	r3, [sp, #4]
   d79f6:	bd08      	pop	{r3, pc}
   d79f8:	00030244 	.word	0x00030244

000d79fc <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d79fc:	b508      	push	{r3, lr}
   d79fe:	4b02      	ldr	r3, [pc, #8]	; (d7a08 <spark_process+0xc>)
   d7a00:	681b      	ldr	r3, [r3, #0]
   d7a02:	689b      	ldr	r3, [r3, #8]
   d7a04:	9301      	str	r3, [sp, #4]
   d7a06:	bd08      	pop	{r3, pc}
   d7a08:	00030244 	.word	0x00030244

000d7a0c <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   d7a0c:	b508      	push	{r3, lr}
   d7a0e:	4b02      	ldr	r3, [pc, #8]	; (d7a18 <spark_cloud_flag_connect+0xc>)
   d7a10:	681b      	ldr	r3, [r3, #0]
   d7a12:	68db      	ldr	r3, [r3, #12]
   d7a14:	9301      	str	r3, [sp, #4]
   d7a16:	bd08      	pop	{r3, pc}
   d7a18:	00030244 	.word	0x00030244

000d7a1c <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d7a1c:	b508      	push	{r3, lr}
   d7a1e:	4b02      	ldr	r3, [pc, #8]	; (d7a28 <spark_cloud_flag_connected+0xc>)
   d7a20:	681b      	ldr	r3, [r3, #0]
   d7a22:	695b      	ldr	r3, [r3, #20]
   d7a24:	9301      	str	r3, [sp, #4]
   d7a26:	bd08      	pop	{r3, pc}
   d7a28:	00030244 	.word	0x00030244

000d7a2c <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   d7a2c:	b508      	push	{r3, lr}
   d7a2e:	4b02      	ldr	r3, [pc, #8]	; (d7a38 <spark_deviceID+0xc>)
   d7a30:	681b      	ldr	r3, [r3, #0]
   d7a32:	69db      	ldr	r3, [r3, #28]
   d7a34:	9301      	str	r3, [sp, #4]
   d7a36:	bd08      	pop	{r3, pc}
   d7a38:	00030244 	.word	0x00030244

000d7a3c <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d7a3c:	b508      	push	{r3, lr}
   d7a3e:	4b02      	ldr	r3, [pc, #8]	; (d7a48 <spark_send_event+0xc>)
   d7a40:	681b      	ldr	r3, [r3, #0]
   d7a42:	6a1b      	ldr	r3, [r3, #32]
   d7a44:	9301      	str	r3, [sp, #4]
   d7a46:	bd08      	pop	{r3, pc}
   d7a48:	00030244 	.word	0x00030244

000d7a4c <spark_sync_time_pending>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d7a4c:	b508      	push	{r3, lr}
   d7a4e:	4b02      	ldr	r3, [pc, #8]	; (d7a58 <spark_sync_time_pending+0xc>)
   d7a50:	681b      	ldr	r3, [r3, #0]
   d7a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d7a54:	9301      	str	r3, [sp, #4]
   d7a56:	bd08      	pop	{r3, pc}
   d7a58:	00030244 	.word	0x00030244

000d7a5c <spark_sync_time_last>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
   d7a5c:	b508      	push	{r3, lr}
   d7a5e:	4b02      	ldr	r3, [pc, #8]	; (d7a68 <spark_sync_time_last+0xc>)
   d7a60:	681b      	ldr	r3, [r3, #0]
   d7a62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d7a64:	9301      	str	r3, [sp, #4]
   d7a66:	bd08      	pop	{r3, pc}
   d7a68:	00030244 	.word	0x00030244

000d7a6c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d7a6c:	b508      	push	{r3, lr}
   d7a6e:	4b02      	ldr	r3, [pc, #8]	; (d7a78 <spark_set_random_seed_from_cloud_handler+0xc>)
   d7a70:	681b      	ldr	r3, [r3, #0]
   d7a72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d7a74:	9301      	str	r3, [sp, #4]
   d7a76:	bd08      	pop	{r3, pc}
   d7a78:	00030244 	.word	0x00030244

000d7a7c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d7a7c:	b508      	push	{r3, lr}
   d7a7e:	4b02      	ldr	r3, [pc, #8]	; (d7a88 <network_connect+0xc>)
   d7a80:	681b      	ldr	r3, [r3, #0]
   d7a82:	685b      	ldr	r3, [r3, #4]
   d7a84:	9301      	str	r3, [sp, #4]
   d7a86:	bd08      	pop	{r3, pc}
   d7a88:	00030240 	.word	0x00030240

000d7a8c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d7a8c:	b508      	push	{r3, lr}
   d7a8e:	4b02      	ldr	r3, [pc, #8]	; (d7a98 <network_connecting+0xc>)
   d7a90:	681b      	ldr	r3, [r3, #0]
   d7a92:	689b      	ldr	r3, [r3, #8]
   d7a94:	9301      	str	r3, [sp, #4]
   d7a96:	bd08      	pop	{r3, pc}
   d7a98:	00030240 	.word	0x00030240

000d7a9c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d7a9c:	b508      	push	{r3, lr}
   d7a9e:	4b02      	ldr	r3, [pc, #8]	; (d7aa8 <network_disconnect+0xc>)
   d7aa0:	681b      	ldr	r3, [r3, #0]
   d7aa2:	68db      	ldr	r3, [r3, #12]
   d7aa4:	9301      	str	r3, [sp, #4]
   d7aa6:	bd08      	pop	{r3, pc}
   d7aa8:	00030240 	.word	0x00030240

000d7aac <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d7aac:	b508      	push	{r3, lr}
   d7aae:	4b02      	ldr	r3, [pc, #8]	; (d7ab8 <network_ready+0xc>)
   d7ab0:	681b      	ldr	r3, [r3, #0]
   d7ab2:	691b      	ldr	r3, [r3, #16]
   d7ab4:	9301      	str	r3, [sp, #4]
   d7ab6:	bd08      	pop	{r3, pc}
   d7ab8:	00030240 	.word	0x00030240

000d7abc <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d7abc:	b508      	push	{r3, lr}
   d7abe:	4b02      	ldr	r3, [pc, #8]	; (d7ac8 <network_on+0xc>)
   d7ac0:	681b      	ldr	r3, [r3, #0]
   d7ac2:	695b      	ldr	r3, [r3, #20]
   d7ac4:	9301      	str	r3, [sp, #4]
   d7ac6:	bd08      	pop	{r3, pc}
   d7ac8:	00030240 	.word	0x00030240

000d7acc <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d7acc:	b508      	push	{r3, lr}
   d7ace:	4b02      	ldr	r3, [pc, #8]	; (d7ad8 <network_off+0xc>)
   d7ad0:	681b      	ldr	r3, [r3, #0]
   d7ad2:	699b      	ldr	r3, [r3, #24]
   d7ad4:	9301      	str	r3, [sp, #4]
   d7ad6:	bd08      	pop	{r3, pc}
   d7ad8:	00030240 	.word	0x00030240

000d7adc <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d7adc:	b508      	push	{r3, lr}
   d7ade:	4b02      	ldr	r3, [pc, #8]	; (d7ae8 <network_listen+0xc>)
   d7ae0:	681b      	ldr	r3, [r3, #0]
   d7ae2:	69db      	ldr	r3, [r3, #28]
   d7ae4:	9301      	str	r3, [sp, #4]
   d7ae6:	bd08      	pop	{r3, pc}
   d7ae8:	00030240 	.word	0x00030240

000d7aec <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d7aec:	b508      	push	{r3, lr}
   d7aee:	4b02      	ldr	r3, [pc, #8]	; (d7af8 <network_listening+0xc>)
   d7af0:	681b      	ldr	r3, [r3, #0]
   d7af2:	6a1b      	ldr	r3, [r3, #32]
   d7af4:	9301      	str	r3, [sp, #4]
   d7af6:	bd08      	pop	{r3, pc}
   d7af8:	00030240 	.word	0x00030240

000d7afc <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d7afc:	b508      	push	{r3, lr}
   d7afe:	4b02      	ldr	r3, [pc, #8]	; (d7b08 <network_set_listen_timeout+0xc>)
   d7b00:	681b      	ldr	r3, [r3, #0]
   d7b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d7b04:	9301      	str	r3, [sp, #4]
   d7b06:	bd08      	pop	{r3, pc}
   d7b08:	00030240 	.word	0x00030240

000d7b0c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d7b0c:	b508      	push	{r3, lr}
   d7b0e:	4b02      	ldr	r3, [pc, #8]	; (d7b18 <network_get_listen_timeout+0xc>)
   d7b10:	681b      	ldr	r3, [r3, #0]
   d7b12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d7b14:	9301      	str	r3, [sp, #4]
   d7b16:	bd08      	pop	{r3, pc}
   d7b18:	00030240 	.word	0x00030240

000d7b1c <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   d7b1c:	b508      	push	{r3, lr}
   d7b1e:	4b02      	ldr	r3, [pc, #8]	; (d7b28 <network_is_on+0xc>)
   d7b20:	681b      	ldr	r3, [r3, #0]
   d7b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d7b24:	9301      	str	r3, [sp, #4]
   d7b26:	bd08      	pop	{r3, pc}
   d7b28:	00030240 	.word	0x00030240

000d7b2c <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   d7b2c:	b508      	push	{r3, lr}
   d7b2e:	4b02      	ldr	r3, [pc, #8]	; (d7b38 <network_is_off+0xc>)
   d7b30:	681b      	ldr	r3, [r3, #0]
   d7b32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d7b34:	9301      	str	r3, [sp, #4]
   d7b36:	bd08      	pop	{r3, pc}
   d7b38:	00030240 	.word	0x00030240

000d7b3c <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d7b3c:	b508      	push	{r3, lr}
   d7b3e:	4b02      	ldr	r3, [pc, #8]	; (d7b48 <malloc+0xc>)
   d7b40:	681b      	ldr	r3, [r3, #0]
   d7b42:	681b      	ldr	r3, [r3, #0]
   d7b44:	9301      	str	r3, [sp, #4]
   d7b46:	bd08      	pop	{r3, pc}
   d7b48:	0003021c 	.word	0x0003021c

000d7b4c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d7b4c:	b508      	push	{r3, lr}
   d7b4e:	4b02      	ldr	r3, [pc, #8]	; (d7b58 <free+0xc>)
   d7b50:	681b      	ldr	r3, [r3, #0]
   d7b52:	685b      	ldr	r3, [r3, #4]
   d7b54:	9301      	str	r3, [sp, #4]
   d7b56:	bd08      	pop	{r3, pc}
   d7b58:	0003021c 	.word	0x0003021c

000d7b5c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d7b5c:	b508      	push	{r3, lr}
   d7b5e:	4b02      	ldr	r3, [pc, #8]	; (d7b68 <realloc+0xc>)
   d7b60:	681b      	ldr	r3, [r3, #0]
   d7b62:	689b      	ldr	r3, [r3, #8]
   d7b64:	9301      	str	r3, [sp, #4]
   d7b66:	bd08      	pop	{r3, pc}
   d7b68:	0003021c 	.word	0x0003021c

000d7b6c <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
   d7b6c:	b508      	push	{r3, lr}
   d7b6e:	4b02      	ldr	r3, [pc, #8]	; (d7b78 <sprintf+0xc>)
   d7b70:	681b      	ldr	r3, [r3, #0]
   d7b72:	68db      	ldr	r3, [r3, #12]
   d7b74:	9301      	str	r3, [sp, #4]
   d7b76:	bd08      	pop	{r3, pc}
   d7b78:	0003021c 	.word	0x0003021c

000d7b7c <siprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   d7b7c:	b508      	push	{r3, lr}
   d7b7e:	4b02      	ldr	r3, [pc, #8]	; (d7b88 <siprintf+0xc>)
   d7b80:	681b      	ldr	r3, [r3, #0]
   d7b82:	691b      	ldr	r3, [r3, #16]
   d7b84:	9301      	str	r3, [sp, #4]
   d7b86:	bd08      	pop	{r3, pc}
   d7b88:	0003021c 	.word	0x0003021c

000d7b8c <snprintf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   d7b8c:	b508      	push	{r3, lr}
   d7b8e:	4b02      	ldr	r3, [pc, #8]	; (d7b98 <snprintf+0xc>)
   d7b90:	681b      	ldr	r3, [r3, #0]
   d7b92:	69db      	ldr	r3, [r3, #28]
   d7b94:	9301      	str	r3, [sp, #4]
   d7b96:	bd08      	pop	{r3, pc}
   d7b98:	0003021c 	.word	0x0003021c

000d7b9c <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d7b9c:	b508      	push	{r3, lr}
   d7b9e:	4b02      	ldr	r3, [pc, #8]	; (d7ba8 <vsnprintf+0xc>)
   d7ba0:	681b      	ldr	r3, [r3, #0]
   d7ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d7ba4:	9301      	str	r3, [sp, #4]
   d7ba6:	bd08      	pop	{r3, pc}
   d7ba8:	0003021c 	.word	0x0003021c

000d7bac <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d7bac:	b508      	push	{r3, lr}
   d7bae:	4b02      	ldr	r3, [pc, #8]	; (d7bb8 <abort+0xc>)
   d7bb0:	681b      	ldr	r3, [r3, #0]
   d7bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d7bb4:	9301      	str	r3, [sp, #4]
   d7bb6:	bd08      	pop	{r3, pc}
   d7bb8:	0003021c 	.word	0x0003021c

000d7bbc <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d7bbc:	b508      	push	{r3, lr}
   d7bbe:	4b02      	ldr	r3, [pc, #8]	; (d7bc8 <_malloc_r+0xc>)
   d7bc0:	681b      	ldr	r3, [r3, #0]
   d7bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d7bc4:	9301      	str	r3, [sp, #4]
   d7bc6:	bd08      	pop	{r3, pc}
   d7bc8:	0003021c 	.word	0x0003021c

000d7bcc <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d7bcc:	b508      	push	{r3, lr}
   d7bce:	4b02      	ldr	r3, [pc, #8]	; (d7bd8 <__errno+0xc>)
   d7bd0:	681b      	ldr	r3, [r3, #0]
   d7bd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d7bd4:	9301      	str	r3, [sp, #4]
   d7bd6:	bd08      	pop	{r3, pc}
   d7bd8:	0003021c 	.word	0x0003021c

000d7bdc <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d7bdc:	b508      	push	{r3, lr}
   d7bde:	4b02      	ldr	r3, [pc, #8]	; (d7be8 <newlib_impure_ptr_callback+0xc>)
   d7be0:	681b      	ldr	r3, [r3, #0]
   d7be2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d7be4:	9301      	str	r3, [sp, #4]
   d7be6:	bd08      	pop	{r3, pc}
   d7be8:	0003021c 	.word	0x0003021c

000d7bec <strftime>:
// Electron has some of these exported from a different system part through services2 dynalib
// Photon/P1 do not have enough space in system-part2
#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
   d7bec:	b508      	push	{r3, lr}
   d7bee:	4b02      	ldr	r3, [pc, #8]	; (d7bf8 <strftime+0xc>)
   d7bf0:	681b      	ldr	r3, [r3, #0]
   d7bf2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d7bf4:	9301      	str	r3, [sp, #4]
   d7bf6:	bd08      	pop	{r3, pc}
   d7bf8:	0003021c 	.word	0x0003021c

000d7bfc <localtime_r>:
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   d7bfc:	b508      	push	{r3, lr}
   d7bfe:	4b02      	ldr	r3, [pc, #8]	; (d7c08 <localtime_r+0xc>)
   d7c00:	681b      	ldr	r3, [r3, #0]
   d7c02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d7c04:	9301      	str	r3, [sp, #4]
   d7c06:	bd08      	pop	{r3, pc}
   d7c08:	0003021c 	.word	0x0003021c

000d7c0c <gmtime_r>:
DYNALIB_FN(20, rt, gmtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   d7c0c:	b508      	push	{r3, lr}
   d7c0e:	4b02      	ldr	r3, [pc, #8]	; (d7c18 <gmtime_r+0xc>)
   d7c10:	681b      	ldr	r3, [r3, #0]
   d7c12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d7c14:	9301      	str	r3, [sp, #4]
   d7c16:	bd08      	pop	{r3, pc}
   d7c18:	0003021c 	.word	0x0003021c

000d7c1c <mktime>:
DYNALIB_FN(21, rt, mktime, time_t(struct tm*))
   d7c1c:	b508      	push	{r3, lr}
   d7c1e:	4b02      	ldr	r3, [pc, #8]	; (d7c28 <mktime+0xc>)
   d7c20:	681b      	ldr	r3, [r3, #0]
   d7c22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d7c24:	9301      	str	r3, [sp, #4]
   d7c26:	bd08      	pop	{r3, pc}
   d7c28:	0003021c 	.word	0x0003021c

000d7c2c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d7c2c:	2100      	movs	r1, #0
   d7c2e:	f7ff be85 	b.w	d793c <system_delay_ms>

000d7c32 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d7c32:	b510      	push	{r4, lr}
      if (_M_empty())
   d7c34:	6883      	ldr	r3, [r0, #8]
   d7c36:	4604      	mov	r4, r0
   d7c38:	b90b      	cbnz	r3, d7c3e <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d7c3a:	f003 fe6f 	bl	db91c <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d7c3e:	68c3      	ldr	r3, [r0, #12]
   d7c40:	4798      	blx	r3
      if (_M_manager)
   d7c42:	68a3      	ldr	r3, [r4, #8]
   d7c44:	b11b      	cbz	r3, d7c4e <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d7c46:	2203      	movs	r2, #3
   d7c48:	4621      	mov	r1, r4
   d7c4a:	4620      	mov	r0, r4
   d7c4c:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d7c4e:	4620      	mov	r0, r4
   d7c50:	2110      	movs	r1, #16
}
   d7c52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   d7c56:	f003 bda9 	b.w	db7ac <_ZdlPvj>

000d7c5a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   d7c5a:	680b      	ldr	r3, [r1, #0]
   d7c5c:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   d7c5e:	b113      	cbz	r3, d7c66 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   d7c60:	685a      	ldr	r2, [r3, #4]
   d7c62:	3201      	adds	r2, #1
   d7c64:	605a      	str	r2, [r3, #4]
      }
   d7c66:	4770      	bx	lr

000d7c68 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d7c68:	4802      	ldr	r0, [pc, #8]	; (d7c74 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   d7c6a:	2300      	movs	r3, #0
   d7c6c:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   d7c6e:	f7ff bc13 	b.w	d7498 <os_mutex_recursive_create>
   d7c72:	bf00      	nop
   d7c74:	2003e5f4 	.word	0x2003e5f4

000d7c78 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d7c78:	2200      	movs	r2, #0
   d7c7a:	6840      	ldr	r0, [r0, #4]
   d7c7c:	4611      	mov	r1, r2
   d7c7e:	f7ff bf15 	b.w	d7aac <network_ready>

000d7c82 <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   d7c82:	2200      	movs	r2, #0
   d7c84:	6840      	ldr	r0, [r0, #4]
   d7c86:	4611      	mov	r1, r2
   d7c88:	f7ff bf30 	b.w	d7aec <network_listening>

000d7c8c <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d7c8c:	2200      	movs	r2, #0
   d7c8e:	6840      	ldr	r0, [r0, #4]
   d7c90:	4611      	mov	r1, r2
   d7c92:	f7ff bf3b 	b.w	d7b0c <network_get_listen_timeout>

000d7c96 <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d7c96:	6840      	ldr	r0, [r0, #4]
   d7c98:	2200      	movs	r2, #0
   d7c9a:	f7ff bf2f 	b.w	d7afc <network_set_listen_timeout>

000d7c9e <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d7c9e:	6840      	ldr	r0, [r0, #4]
   d7ca0:	2200      	movs	r2, #0
   d7ca2:	f081 0101 	eor.w	r1, r1, #1
   d7ca6:	f7ff bf19 	b.w	d7adc <network_listen>

000d7caa <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d7caa:	2300      	movs	r3, #0
   d7cac:	6840      	ldr	r0, [r0, #4]
   d7cae:	461a      	mov	r2, r3
   d7cb0:	4619      	mov	r1, r3
   d7cb2:	f7ff bf0b 	b.w	d7acc <network_off>

000d7cb6 <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d7cb6:	2300      	movs	r3, #0
   d7cb8:	6840      	ldr	r0, [r0, #4]
   d7cba:	461a      	mov	r2, r3
   d7cbc:	4619      	mov	r1, r3
   d7cbe:	f7ff befd 	b.w	d7abc <network_on>

000d7cc2 <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d7cc2:	2200      	movs	r2, #0
   d7cc4:	6840      	ldr	r0, [r0, #4]
   d7cc6:	4611      	mov	r1, r2
   d7cc8:	f7ff bee0 	b.w	d7a8c <network_connecting>

000d7ccc <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d7ccc:	6840      	ldr	r0, [r0, #4]
   d7cce:	2200      	movs	r2, #0
   d7cd0:	2102      	movs	r1, #2
   d7cd2:	f7ff bee3 	b.w	d7a9c <network_disconnect>

000d7cd6 <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d7cd6:	2300      	movs	r3, #0
   d7cd8:	6840      	ldr	r0, [r0, #4]
   d7cda:	461a      	mov	r2, r3
   d7cdc:	f7ff bece 	b.w	d7a7c <network_connect>

000d7ce0 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d7ce0:	4b08      	ldr	r3, [pc, #32]	; (d7d04 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d7ce2:	b510      	push	{r4, lr}
   d7ce4:	2428      	movs	r4, #40	; 0x28
   d7ce6:	4622      	mov	r2, r4
   d7ce8:	4618      	mov	r0, r3
   d7cea:	2100      	movs	r1, #0
   d7cec:	f004 fe2a 	bl	dc944 <memset>
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d7cf0:	4b05      	ldr	r3, [pc, #20]	; (d7d08 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   d7cf2:	8004      	strh	r4, [r0, #0]
        cid = -1;
   d7cf4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d7cf8:	6042      	str	r2, [r0, #4]
   d7cfa:	2204      	movs	r2, #4
   d7cfc:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d7cfe:	4a03      	ldr	r2, [pc, #12]	; (d7d0c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d7d00:	601a      	str	r2, [r3, #0]
   d7d02:	bd10      	pop	{r4, pc}
   d7d04:	2003e600 	.word	0x2003e600
   d7d08:	2003e5f8 	.word	0x2003e5f8
   d7d0c:	000df5f4 	.word	0x000df5f4

000d7d10 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d7d10:	4770      	bx	lr

000d7d12 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   d7d12:	2000      	movs	r0, #0
   d7d14:	4770      	bx	lr

000d7d16 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d7d16:	b510      	push	{r4, lr}
   d7d18:	2110      	movs	r1, #16
   d7d1a:	4604      	mov	r4, r0
   d7d1c:	f003 fd46 	bl	db7ac <_ZdlPvj>
   d7d20:	4620      	mov	r0, r4
   d7d22:	bd10      	pop	{r4, pc}

000d7d24 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   d7d24:	b508      	push	{r3, lr}
      { delete this; }
   d7d26:	f7ff fff6 	bl	d7d16 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d7d2a:	bd08      	pop	{r3, pc}

000d7d2c <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d7d2c:	b530      	push	{r4, r5, lr}
        type_(type) {
   d7d2e:	2200      	movs	r2, #0
   d7d30:	f64f 749c 	movw	r4, #65436	; 0xff9c
   d7d34:	6002      	str	r2, [r0, #0]
   d7d36:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   d7d38:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d7d3a:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   d7d3c:	680c      	ldr	r4, [r1, #0]
   d7d3e:	8085      	strh	r5, [r0, #4]
   d7d40:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d7d42:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   d7d44:	bd30      	pop	{r4, r5, pc}

000d7d46 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d7d46:	b510      	push	{r4, lr}
   d7d48:	4604      	mov	r4, r0
    free((void*)msg_);
   d7d4a:	6800      	ldr	r0, [r0, #0]
   d7d4c:	f7ff fefe 	bl	d7b4c <free>
}
   d7d50:	4620      	mov	r0, r4
   d7d52:	bd10      	pop	{r4, pc}

000d7d54 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d7d54:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d7d56:	68c4      	ldr	r4, [r0, #12]
   d7d58:	b1f4      	cbz	r4, d7d98 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
   d7d5a:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d7d5c:	2b02      	cmp	r3, #2
   d7d5e:	d103      	bne.n	d7d68 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d7d60:	f104 000c 	add.w	r0, r4, #12
   d7d64:	f7ff ffef 	bl	d7d46 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   d7d68:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   d7d6a:	b135      	cbz	r5, d7d7a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   d7d6c:	4628      	mov	r0, r5
   d7d6e:	f7fd fa7b 	bl	d5268 <_ZNSt14_Function_baseD1Ev>
   d7d72:	2110      	movs	r1, #16
   d7d74:	4628      	mov	r0, r5
   d7d76:	f003 fd19 	bl	db7ac <_ZdlPvj>
   d7d7a:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d7d7c:	b135      	cbz	r5, d7d8c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d7d7e:	4628      	mov	r0, r5
   d7d80:	f7fd fa72 	bl	d5268 <_ZNSt14_Function_baseD1Ev>
   d7d84:	2110      	movs	r1, #16
   d7d86:	4628      	mov	r0, r5
   d7d88:	f003 fd10 	bl	db7ac <_ZdlPvj>
   d7d8c:	4620      	mov	r0, r4
   d7d8e:	2114      	movs	r1, #20
   d7d90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d7d94:	f003 bd0a 	b.w	db7ac <_ZdlPvj>
   d7d98:	bd38      	pop	{r3, r4, r5, pc}

000d7d9a <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
    }
    return CloudDisconnectOptions(options->flags, options->timeout, options->graceful, clearSession);
}

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
   d7d9a:	b510      	push	{r4, lr}
   d7d9c:	b088      	sub	sp, #32
   d7d9e:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d7da0:	4668      	mov	r0, sp
   d7da2:	f002 f908 	bl	d9fb6 <_ZN6StringC1EPKc>
    return (*fn)(p);
   d7da6:	4669      	mov	r1, sp
   d7da8:	a804      	add	r0, sp, #16
   d7daa:	f002 f94f 	bl	da04c <_ZN6StringC1ERKS_>
   d7dae:	a804      	add	r0, sp, #16
   d7db0:	47a0      	blx	r4
   d7db2:	4604      	mov	r4, r0
   d7db4:	a804      	add	r0, sp, #16
   d7db6:	f002 f8b3 	bl	d9f20 <_ZN6StringD1Ev>
    String p(param);
   d7dba:	4668      	mov	r0, sp
   d7dbc:	f002 f8b0 	bl	d9f20 <_ZN6StringD1Ev>
}
   d7dc0:	4620      	mov	r0, r4
   d7dc2:	b008      	add	sp, #32
   d7dc4:	bd10      	pop	{r4, pc}

000d7dc6 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   d7dc6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
   d7dc8:	2300      	movs	r3, #0
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
   d7dca:	e9cd 0102 	strd	r0, r1, [sp, #8]
    desc.funcKey = funcKey;
   d7dce:	9201      	str	r2, [sp, #4]
         size = sizeof(*this);
   d7dd0:	2410      	movs	r4, #16
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d7dd2:	461a      	mov	r2, r3
   d7dd4:	4669      	mov	r1, sp
   d7dd6:	4618      	mov	r0, r3
         memset(this, 0, sizeof(*this));
   d7dd8:	f8ad 3002 	strh.w	r3, [sp, #2]
         size = sizeof(*this);
   d7ddc:	f8ad 4000 	strh.w	r4, [sp]
   d7de0:	f7ff fe04 	bl	d79ec <spark_function>
}
   d7de4:	b004      	add	sp, #16
   d7de6:	bd10      	pop	{r4, pc}

000d7de8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d7de8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r,
		     element_type* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d7dea:	460e      	mov	r6, r1
   d7dec:	4604      	mov	r4, r0
   d7dee:	f856 3b04 	ldr.w	r3, [r6], #4
   d7df2:	9300      	str	r3, [sp, #0]
   d7df4:	460d      	mov	r5, r1
   d7df6:	a801      	add	r0, sp, #4
   d7df8:	4631      	mov	r1, r6
   d7dfa:	f7ff ff2e 	bl	d7c5a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d7dfe:	9a01      	ldr	r2, [sp, #4]
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d7e00:	9b00      	ldr	r3, [sp, #0]
	_M_pi = __tmp;
   d7e02:	6062      	str	r2, [r4, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d7e04:	6023      	str	r3, [r4, #0]
      ~__shared_ptr() = default;
   d7e06:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   d7e08:	2300      	movs	r3, #0
   d7e0a:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d7e0c:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   d7e0e:	f7fd ffc2 	bl	d5d96 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d7e12:	4630      	mov	r0, r6
   d7e14:	f7fd ffbf 	bl	d5d96 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   d7e18:	4628      	mov	r0, r5
   d7e1a:	2108      	movs	r1, #8
   d7e1c:	f003 fcc6 	bl	db7ac <_ZdlPvj>
        return p;
    }
   d7e20:	4620      	mov	r0, r4
   d7e22:	b002      	add	sp, #8
   d7e24:	bd70      	pop	{r4, r5, r6, pc}

000d7e26 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   d7e26:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d7e28:	b510      	push	{r4, lr}
      if (_M_empty())
   d7e2a:	b90a      	cbnz	r2, d7e30 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d7e2c:	f003 fd76 	bl	db91c <_ZSt25__throw_bad_function_callv>
    }
   d7e30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d7e34:	68c3      	ldr	r3, [r0, #12]
   d7e36:	4718      	bx	r3

000d7e38 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d7e38:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d7e3a:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   d7e3c:	f100 0110 	add.w	r1, r0, #16
   d7e40:	f7ff fff1 	bl	d7e26 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   d7e44:	bd08      	pop	{r3, pc}

000d7e46 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   d7e46:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d7e48:	b510      	push	{r4, lr}
      if (_M_empty())
   d7e4a:	b90a      	cbnz	r2, d7e50 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d7e4c:	f003 fd66 	bl	db91c <_ZSt25__throw_bad_function_callv>
    }
   d7e50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d7e54:	68c3      	ldr	r3, [r0, #12]
   d7e56:	4718      	bx	r3

000d7e58 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d7e58:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d7e5a:	6800      	ldr	r0, [r0, #0]
   d7e5c:	f100 0110 	add.w	r1, r0, #16
   d7e60:	f7ff fff1 	bl	d7e46 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   d7e64:	bd08      	pop	{r3, pc}
	...

000d7e68 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   d7e68:	b538      	push	{r3, r4, r5, lr}
   d7e6a:	2300      	movs	r3, #0
   d7e6c:	4604      	mov	r4, r0
   d7e6e:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d7e70:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   d7e72:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d7e74:	f7fc f90f 	bl	d4096 <_Znwj>
   d7e78:	b128      	cbz	r0, d7e86 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   d7e7a:	2301      	movs	r3, #1
   d7e7c:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   d7e80:	4b02      	ldr	r3, [pc, #8]	; (d7e8c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d7e82:	6003      	str	r3, [r0, #0]
   d7e84:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d7e86:	6020      	str	r0, [r4, #0]
	}
   d7e88:	4620      	mov	r0, r4
   d7e8a:	bd38      	pop	{r3, r4, r5, pc}
   d7e8c:	000df630 	.word	0x000df630

000d7e90 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   d7e90:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d7e92:	2300      	movs	r3, #0
   d7e94:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d7e96:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d7e98:	4604      	mov	r4, r0
   d7e9a:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d7e9c:	b12b      	cbz	r3, d7eaa <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d7e9e:	2202      	movs	r2, #2
   d7ea0:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d7ea2:	68eb      	ldr	r3, [r5, #12]
   d7ea4:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d7ea6:	68ab      	ldr	r3, [r5, #8]
   d7ea8:	60a3      	str	r3, [r4, #8]
    }
   d7eaa:	4620      	mov	r0, r4
   d7eac:	bd38      	pop	{r3, r4, r5, pc}
	...

000d7eb0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   d7eb0:	b5f0      	push	{r4, r5, r6, r7, lr}
   d7eb2:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d7eb4:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d7eb6:	4668      	mov	r0, sp
   d7eb8:	f7ff ff38 	bl	d7d2c <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d7ebc:	f04f 0302 	mov.w	r3, #2
   d7ec0:	e8d4 2f4f 	ldrexb	r2, [r4]
   d7ec4:	2a00      	cmp	r2, #0
   d7ec6:	d103      	bne.n	d7ed0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   d7ec8:	e8c4 3f41 	strexb	r1, r3, [r4]
   d7ecc:	2900      	cmp	r1, #0
   d7ece:	d1f7      	bne.n	d7ec0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   d7ed0:	d125      	bne.n	d7f1e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   d7ed2:	f104 050c 	add.w	r5, r4, #12
   d7ed6:	4669      	mov	r1, sp
   d7ed8:	4628      	mov	r0, r5
   d7eda:	f7ff ff27 	bl	d7d2c <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   d7ede:	f3bf 8f5b 	dmb	ish
   d7ee2:	2301      	movs	r3, #1
   d7ee4:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d7ee6:	2000      	movs	r0, #0
   d7ee8:	f104 0308 	add.w	r3, r4, #8
   d7eec:	f3bf 8f5b 	dmb	ish
   d7ef0:	e853 6f00 	ldrex	r6, [r3]
   d7ef4:	e843 0200 	strex	r2, r0, [r3]
   d7ef8:	2a00      	cmp	r2, #0
   d7efa:	d1f9      	bne.n	d7ef0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   d7efc:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d7f00:	b16e      	cbz	r6, d7f1e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   d7f02:	f7ff fd2b 	bl	d795c <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d7f06:	b178      	cbz	r0, d7f28 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d7f08:	4629      	mov	r1, r5
   d7f0a:	4630      	mov	r0, r6
   d7f0c:	f7ff ff8b 	bl	d7e26 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   d7f10:	4630      	mov	r0, r6
   d7f12:	f7fd f9a9 	bl	d5268 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d7f16:	2110      	movs	r1, #16
   d7f18:	4630      	mov	r0, r6
   d7f1a:	f003 fc47 	bl	db7ac <_ZdlPvj>
        p_->setError(std::move(error));
   d7f1e:	4668      	mov	r0, sp
   d7f20:	f7ff ff11 	bl	d7d46 <_ZN8particle5ErrorD1Ev>
    }
   d7f24:	b009      	add	sp, #36	; 0x24
   d7f26:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  typename __cv_quals<_Bound_args>::type...>;

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d7f28:	4631      	mov	r1, r6
   d7f2a:	a802      	add	r0, sp, #8
   d7f2c:	f7ff ffb0 	bl	d7e90 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d7f30:	68e0      	ldr	r0, [r4, #12]
   d7f32:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d7f36:	b108      	cbz	r0, d7f3c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   d7f38:	f004 fd5a 	bl	dc9f0 <strdup>
        type_(type) {
   d7f3c:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d7f3e:	2010      	movs	r0, #16
   d7f40:	f8ad 501c 	strh.w	r5, [sp, #28]
   d7f44:	f7fc f8a7 	bl	d4096 <_Znwj>
   d7f48:	4605      	mov	r5, r0
   d7f4a:	b1e8      	cbz	r0, d7f88 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   d7f4c:	2700      	movs	r7, #0
   d7f4e:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d7f50:	2018      	movs	r0, #24
   d7f52:	f7fc f8a0 	bl	d4096 <_Znwj>
   d7f56:	4604      	mov	r4, r0
   d7f58:	b188      	cbz	r0, d7f7e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   d7f5a:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   d7f5c:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d7f5e:	a802      	add	r0, sp, #8
   d7f60:	f7fd f98b 	bl	d527a <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7f64:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d7f66:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d7f68:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7f6a:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d7f6c:	9204      	str	r2, [sp, #16]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d7f6e:	a906      	add	r1, sp, #24
   d7f70:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d7f72:	60e3      	str	r3, [r4, #12]
   d7f74:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   d7f78:	9205      	str	r2, [sp, #20]
   d7f7a:	f7ff fed7 	bl	d7d2c <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   d7f7e:	4b08      	ldr	r3, [pc, #32]	; (d7fa0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   d7f80:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d7f82:	4b08      	ldr	r3, [pc, #32]	; (d7fa4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d7f84:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d7f86:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   d7f88:	a806      	add	r0, sp, #24
   d7f8a:	f7ff fedc 	bl	d7d46 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d7f8e:	a802      	add	r0, sp, #8
   d7f90:	f7fd f96a 	bl	d5268 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d7f94:	2200      	movs	r2, #0
   d7f96:	4629      	mov	r1, r5
   d7f98:	4803      	ldr	r0, [pc, #12]	; (d7fa8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   d7f9a:	f7ff fce7 	bl	d796c <application_thread_invoke>
   d7f9e:	e7b7      	b.n	d7f10 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   d7fa0:	000d7e39 	.word	0x000d7e39
   d7fa4:	000d80d1 	.word	0x000d80d1
   d7fa8:	000d7c33 	.word	0x000d7c33

000d7fac <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d7fac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d7fb0:	b08a      	sub	sp, #40	; 0x28
   d7fb2:	4605      	mov	r5, r0
   d7fb4:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
   d7fb8:	460c      	mov	r4, r1
   d7fba:	4617      	mov	r7, r2
   d7fbc:	4698      	mov	r8, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d7fbe:	f7ff fd2d 	bl	d7a1c <spark_cloud_flag_connected>
   d7fc2:	ae07      	add	r6, sp, #28
    if (!connected()) {
   d7fc4:	4682      	mov	sl, r0
   d7fc6:	bb38      	cbnz	r0, d8018 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   d7fc8:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d7fcc:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d7fce:	a905      	add	r1, sp, #20
   d7fd0:	4630      	mov	r0, r6
   d7fd2:	f8ad 3018 	strh.w	r3, [sp, #24]
   d7fd6:	f7ff fea9 	bl	d7d2c <_ZN8particle5ErrorC1EOS0_>
   d7fda:	2014      	movs	r0, #20
   d7fdc:	f7fc f85b 	bl	d4096 <_Znwj>
   d7fe0:	4604      	mov	r4, r0
   d7fe2:	b148      	cbz	r0, d7ff8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d7fe4:	2302      	movs	r3, #2
   d7fe6:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d7fe8:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d7fea:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d7fee:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   d7ff0:	4631      	mov	r1, r6
   d7ff2:	300c      	adds	r0, #12
   d7ff4:	f7ff fe9a 	bl	d7d2c <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d7ff8:	4628      	mov	r0, r5
	: __shared_count(__p)
   d7ffa:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d7ffc:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   d8000:	f7ff ff32 	bl	d7e68 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d8004:	4630      	mov	r0, r6
   d8006:	f7ff fe9e 	bl	d7d46 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d800a:	a805      	add	r0, sp, #20
   d800c:	f7ff fe9b 	bl	d7d46 <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   d8010:	4628      	mov	r0, r5
   d8012:	b00a      	add	sp, #40	; 0x28
   d8014:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d8018:	230c      	movs	r3, #12
   d801a:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d801e:	2014      	movs	r0, #20
   d8020:	e9cd aa08 	strd	sl, sl, [sp, #32]
   d8024:	9307      	str	r3, [sp, #28]
   d8026:	f7fc f836 	bl	d4096 <_Znwj>
   d802a:	4601      	mov	r1, r0
   d802c:	b128      	cbz	r0, d803a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d802e:	e9c0 aa01 	strd	sl, sl, [r0, #4]
   d8032:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d8036:	f880 a001 	strb.w	sl, [r0, #1]
   d803a:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d803c:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   d803e:	f7ff ff13 	bl	d7e68 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   d8042:	4b22      	ldr	r3, [pc, #136]	; (d80cc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
   d8044:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d8046:	2008      	movs	r0, #8
   d8048:	f7fc f825 	bl	d4096 <_Znwj>
   d804c:	4682      	mov	sl, r0
   d804e:	b128      	cbz	r0, d805c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d8050:	9b03      	ldr	r3, [sp, #12]
   d8052:	f840 3b04 	str.w	r3, [r0], #4
   d8056:	a904      	add	r1, sp, #16
   d8058:	f7ff fdff 	bl	d7c5a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d805c:	9600      	str	r6, [sp, #0]
   d805e:	fa5f f389 	uxtb.w	r3, r9
   d8062:	4642      	mov	r2, r8
   d8064:	4639      	mov	r1, r7
   d8066:	4620      	mov	r0, r4
    d.handler_data = p.dataPtr();
   d8068:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d806c:	f7ff fce6 	bl	d7a3c <spark_send_event>
   d8070:	b9b8      	cbnz	r0, d80a2 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
   d8072:	9b03      	ldr	r3, [sp, #12]
   d8074:	785b      	ldrb	r3, [r3, #1]
   d8076:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d807a:	b993      	cbnz	r3, d80a2 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
   d807c:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   d8080:	a905      	add	r1, sp, #20
   d8082:	a803      	add	r0, sp, #12
   d8084:	9205      	str	r2, [sp, #20]
   d8086:	f8ad 3018 	strh.w	r3, [sp, #24]
   d808a:	f7ff ff11 	bl	d7eb0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d808e:	a805      	add	r0, sp, #20
   d8090:	f7ff fe59 	bl	d7d46 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d8094:	a805      	add	r0, sp, #20
   d8096:	9909      	ldr	r1, [sp, #36]	; 0x24
   d8098:	f7ff fea6 	bl	d7de8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   d809c:	a806      	add	r0, sp, #24
   d809e:	f7fd fe7a 	bl	d5d96 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d80a2:	9b03      	ldr	r3, [sp, #12]
   d80a4:	9305      	str	r3, [sp, #20]
   d80a6:	a904      	add	r1, sp, #16
   d80a8:	a806      	add	r0, sp, #24
   d80aa:	f7ff fdd6 	bl	d7c5a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   d80ae:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d80b0:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d80b2:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   d80b4:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   d80b6:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   d80b8:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   d80ba:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   d80bc:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   d80be:	f7fd fe6a 	bl	d5d96 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d80c2:	a804      	add	r0, sp, #16
   d80c4:	f7fd fe67 	bl	d5d96 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   d80c8:	e7a2      	b.n	d8010 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   d80ca:	bf00      	nop
   d80cc:	000d8195 	.word	0x000d8195

000d80d0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
   d80d0:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d80d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d80d4:	4605      	mov	r5, r0
	  switch (__op)
   d80d6:	d007      	beq.n	d80e8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
   d80d8:	2a03      	cmp	r2, #3
   d80da:	d018      	beq.n	d810e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
   d80dc:	2a01      	cmp	r2, #1
   d80de:	d101      	bne.n	d80e4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d80e0:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d80e2:	6003      	str	r3, [r0, #0]
	}
   d80e4:	2000      	movs	r0, #0
   d80e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d80e8:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   d80ea:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d80ec:	f7fb ffd3 	bl	d4096 <_Znwj>
   d80f0:	4604      	mov	r4, r0
   d80f2:	b150      	cbz	r0, d810a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d80f4:	4631      	mov	r1, r6
   d80f6:	f7ff fecb 	bl	d7e90 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d80fa:	6930      	ldr	r0, [r6, #16]
   d80fc:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d8100:	b108      	cbz	r0, d8106 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   d8102:	f004 fc75 	bl	dc9f0 <strdup>
        type_(type) {
   d8106:	6120      	str	r0, [r4, #16]
   d8108:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   d810a:	602c      	str	r4, [r5, #0]
	}
   d810c:	e7ea      	b.n	d80e4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d810e:	6804      	ldr	r4, [r0, #0]
   d8110:	2c00      	cmp	r4, #0
   d8112:	d0e7      	beq.n	d80e4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
   d8114:	f104 0010 	add.w	r0, r4, #16
   d8118:	f7ff fe15 	bl	d7d46 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d811c:	4620      	mov	r0, r4
   d811e:	f7fd f8a3 	bl	d5268 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d8122:	2118      	movs	r1, #24
   d8124:	4620      	mov	r0, r4
   d8126:	f003 fb41 	bl	db7ac <_ZdlPvj>
   d812a:	e7db      	b.n	d80e4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

000d812c <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   d812c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d812e:	2300      	movs	r3, #0
   d8130:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d8132:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d8134:	4604      	mov	r4, r0
   d8136:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d8138:	b12b      	cbz	r3, d8146 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d813a:	2202      	movs	r2, #2
   d813c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d813e:	68eb      	ldr	r3, [r5, #12]
   d8140:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d8142:	68ab      	ldr	r3, [r5, #8]
   d8144:	60a3      	str	r3, [r4, #8]
    }
   d8146:	4620      	mov	r0, r4
   d8148:	bd38      	pop	{r3, r4, r5, pc}

000d814a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
   d814a:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d814c:	b570      	push	{r4, r5, r6, lr}
   d814e:	4604      	mov	r4, r0
	  switch (__op)
   d8150:	d007      	beq.n	d8162 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
   d8152:	2a03      	cmp	r2, #3
   d8154:	d012      	beq.n	d817c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
   d8156:	2a01      	cmp	r2, #1
   d8158:	d101      	bne.n	d815e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d815a:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d815c:	6003      	str	r3, [r0, #0]
	}
   d815e:	2000      	movs	r0, #0
   d8160:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d8162:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   d8164:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d8166:	f7fb ff96 	bl	d4096 <_Znwj>
   d816a:	4605      	mov	r5, r0
   d816c:	b120      	cbz	r0, d8178 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   d816e:	4631      	mov	r1, r6
   d8170:	f7ff ffdc 	bl	d812c <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d8174:	7c33      	ldrb	r3, [r6, #16]
   d8176:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   d8178:	6025      	str	r5, [r4, #0]
	}
   d817a:	e7f0      	b.n	d815e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d817c:	6804      	ldr	r4, [r0, #0]
   d817e:	2c00      	cmp	r4, #0
   d8180:	d0ed      	beq.n	d815e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
   d8182:	4620      	mov	r0, r4
   d8184:	f7fd f870 	bl	d5268 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d8188:	2114      	movs	r1, #20
   d818a:	4620      	mov	r0, r4
   d818c:	f003 fb0e 	bl	db7ac <_ZdlPvj>
   d8190:	e7e5      	b.n	d815e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

000d8194 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d8194:	b5f0      	push	{r4, r5, r6, r7, lr}
   d8196:	b089      	sub	sp, #36	; 0x24
   d8198:	4604      	mov	r4, r0
   d819a:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d819c:	a801      	add	r0, sp, #4
   d819e:	4611      	mov	r1, r2
   d81a0:	f7ff fe22 	bl	d7de8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d81a4:	b1a4      	cbz	r4, d81d0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   d81a6:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d81a8:	b11d      	cbz	r5, d81b2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   d81aa:	4628      	mov	r0, r5
   d81ac:	f004 fc20 	bl	dc9f0 <strdup>
   d81b0:	4605      	mov	r5, r0
   d81b2:	a801      	add	r0, sp, #4
   d81b4:	a903      	add	r1, sp, #12
        type_(type) {
   d81b6:	9503      	str	r5, [sp, #12]
   d81b8:	f8ad 4010 	strh.w	r4, [sp, #16]
   d81bc:	f7ff fe78 	bl	d7eb0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d81c0:	a803      	add	r0, sp, #12
   d81c2:	f7ff fdc0 	bl	d7d46 <_ZN8particle5ErrorD1Ev>
   d81c6:	a802      	add	r0, sp, #8
   d81c8:	f7fd fde5 	bl	d5d96 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d81cc:	b009      	add	sp, #36	; 0x24
   d81ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d81d0:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d81d2:	2301      	movs	r3, #1
   d81d4:	e8d5 2f4f 	ldrexb	r2, [r5]
   d81d8:	2a00      	cmp	r2, #0
   d81da:	d103      	bne.n	d81e4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   d81dc:	e8c5 3f41 	strexb	r1, r3, [r5]
   d81e0:	2900      	cmp	r1, #0
   d81e2:	d1f7      	bne.n	d81d4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   d81e4:	d1ef      	bne.n	d81c6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   d81e6:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   d81e8:	f3bf 8f5b 	dmb	ish
   d81ec:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d81ee:	1d2b      	adds	r3, r5, #4
   d81f0:	f3bf 8f5b 	dmb	ish
   d81f4:	e853 6f00 	ldrex	r6, [r3]
   d81f8:	e843 4200 	strex	r2, r4, [r3]
   d81fc:	2a00      	cmp	r2, #0
   d81fe:	d1f9      	bne.n	d81f4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   d8200:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d8204:	2e00      	cmp	r6, #0
   d8206:	d0de      	beq.n	d81c6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   d8208:	4620      	mov	r0, r4
   d820a:	f7ff fba7 	bl	d795c <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d820e:	4607      	mov	r7, r0
   d8210:	b160      	cbz	r0, d822c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d8212:	f105 010c 	add.w	r1, r5, #12
   d8216:	4630      	mov	r0, r6
   d8218:	f7ff fe15 	bl	d7e46 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   d821c:	4630      	mov	r0, r6
   d821e:	f7fd f823 	bl	d5268 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d8222:	2110      	movs	r1, #16
   d8224:	4630      	mov	r0, r6
   d8226:	f003 fac1 	bl	db7ac <_ZdlPvj>
   d822a:	e7cc      	b.n	d81c6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d822c:	4631      	mov	r1, r6
   d822e:	a803      	add	r0, sp, #12
   d8230:	f7ff ff7c 	bl	d812c <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d8234:	7b2b      	ldrb	r3, [r5, #12]
   d8236:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d823a:	2010      	movs	r0, #16
   d823c:	f7fb ff2b 	bl	d4096 <_Znwj>
   d8240:	4605      	mov	r5, r0
   d8242:	b1d0      	cbz	r0, d827a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   d8244:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d8246:	2014      	movs	r0, #20
   d8248:	f7fb ff25 	bl	d4096 <_Znwj>
   d824c:	4604      	mov	r4, r0
   d824e:	b178      	cbz	r0, d8270 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   d8250:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d8252:	4601      	mov	r1, r0
   d8254:	a803      	add	r0, sp, #12
   d8256:	f7fd f810 	bl	d527a <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d825a:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d825c:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d825e:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d8260:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   d8262:	9205      	str	r2, [sp, #20]
   d8264:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d8266:	60e3      	str	r3, [r4, #12]
   d8268:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   d826c:	9206      	str	r2, [sp, #24]
   d826e:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   d8270:	4b06      	ldr	r3, [pc, #24]	; (d828c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   d8272:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d8274:	4b06      	ldr	r3, [pc, #24]	; (d8290 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d8276:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d8278:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   d827a:	a803      	add	r0, sp, #12
   d827c:	f7fc fff4 	bl	d5268 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d8280:	2200      	movs	r2, #0
   d8282:	4629      	mov	r1, r5
   d8284:	4803      	ldr	r0, [pc, #12]	; (d8294 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   d8286:	f7ff fb71 	bl	d796c <application_thread_invoke>
   d828a:	e7c7      	b.n	d821c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   d828c:	000d7e59 	.word	0x000d7e59
   d8290:	000d814b 	.word	0x000d814b
   d8294:	000d7c33 	.word	0x000d7c33

000d8298 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d8298:	2200      	movs	r2, #0
   d829a:	6840      	ldr	r0, [r0, #4]
   d829c:	4611      	mov	r1, r2
   d829e:	f7ff bc25 	b.w	d7aec <network_listening>

000d82a2 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d82a2:	2200      	movs	r2, #0
   d82a4:	6840      	ldr	r0, [r0, #4]
   d82a6:	4611      	mov	r1, r2
   d82a8:	f7ff bc30 	b.w	d7b0c <network_get_listen_timeout>

000d82ac <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d82ac:	6840      	ldr	r0, [r0, #4]
   d82ae:	2200      	movs	r2, #0
   d82b0:	f7ff bc24 	b.w	d7afc <network_set_listen_timeout>

000d82b4 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d82b4:	6840      	ldr	r0, [r0, #4]
   d82b6:	2200      	movs	r2, #0
   d82b8:	f081 0101 	eor.w	r1, r1, #1
   d82bc:	f7ff bc0e 	b.w	d7adc <network_listen>

000d82c0 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d82c0:	2300      	movs	r3, #0
   d82c2:	6840      	ldr	r0, [r0, #4]
   d82c4:	461a      	mov	r2, r3
   d82c6:	4619      	mov	r1, r3
   d82c8:	f7ff bc00 	b.w	d7acc <network_off>

000d82cc <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d82cc:	2300      	movs	r3, #0
   d82ce:	6840      	ldr	r0, [r0, #4]
   d82d0:	461a      	mov	r2, r3
   d82d2:	4619      	mov	r1, r3
   d82d4:	f7ff bbf2 	b.w	d7abc <network_on>

000d82d8 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d82d8:	2200      	movs	r2, #0
   d82da:	6840      	ldr	r0, [r0, #4]
   d82dc:	4611      	mov	r1, r2
   d82de:	f7ff bbe5 	b.w	d7aac <network_ready>

000d82e2 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d82e2:	2200      	movs	r2, #0
   d82e4:	6840      	ldr	r0, [r0, #4]
   d82e6:	4611      	mov	r1, r2
   d82e8:	f7ff bbd0 	b.w	d7a8c <network_connecting>

000d82ec <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d82ec:	6840      	ldr	r0, [r0, #4]
   d82ee:	2200      	movs	r2, #0
   d82f0:	2102      	movs	r1, #2
   d82f2:	f7ff bbd3 	b.w	d7a9c <network_disconnect>

000d82f6 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d82f6:	2300      	movs	r3, #0
   d82f8:	6840      	ldr	r0, [r0, #4]
   d82fa:	461a      	mov	r2, r3
   d82fc:	f7ff bbbe 	b.w	d7a7c <network_connect>

000d8300 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   d8300:	4b02      	ldr	r3, [pc, #8]	; (d830c <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d8302:	2203      	movs	r2, #3
   d8304:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d8306:	4a02      	ldr	r2, [pc, #8]	; (d8310 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d8308:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d830a:	4770      	bx	lr
   d830c:	2003e628 	.word	0x2003e628
   d8310:	000df64c 	.word	0x000df64c

000d8314 <_ZN8particle6detail9_getVCellEhh>:

namespace particle { namespace detail {
    // Converts VCELL_REGISTER reading to Battery Voltage
    float _getVCell(byte MSB, byte LSB) {
        // VCELL = 12-bit value, 1.25mV (1V/800) per bit
        float value = (float)((MSB << 4) | (LSB >> 4));
   d8314:	0909      	lsrs	r1, r1, #4
   d8316:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
   d831a:	ee07 1a90 	vmov	s15, r1
   d831e:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
        return value / 800.0;
    }
   d8322:	eddf 7a02 	vldr	s15, [pc, #8]	; d832c <_ZN8particle6detail9_getVCellEhh+0x18>
   d8326:	ee80 0a27 	vdiv.f32	s0, s0, s15
   d832a:	4770      	bx	lr
   d832c:	44480000 	.word	0x44480000

000d8330 <_ZN9FuelGauge4lockEv>:
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
    return SYSTEM_ERROR_NONE;
}

bool FuelGauge::lock() {
    return i2c_.lock();
   d8330:	6800      	ldr	r0, [r0, #0]
   d8332:	f000 b931 	b.w	d8598 <_ZN7TwoWire4lockEv>

000d8336 <_ZN9FuelGaugeC1ER7TwoWireb>:
FuelGauge::FuelGauge(TwoWire& i2c, bool _lock)
   d8336:	b510      	push	{r4, lr}
   d8338:	4604      	mov	r4, r0
      lock_(_lock) {
   d833a:	6001      	str	r1, [r0, #0]
   d833c:	7102      	strb	r2, [r0, #4]
    if (lock_) {
   d833e:	b10a      	cbz	r2, d8344 <_ZN9FuelGaugeC1ER7TwoWireb+0xe>
        lock();
   d8340:	f7ff fff6 	bl	d8330 <_ZN9FuelGauge4lockEv>
}
   d8344:	4620      	mov	r0, r4
   d8346:	bd10      	pop	{r4, pc}

000d8348 <_ZN9FuelGaugeC1Eb>:
FuelGauge::FuelGauge(bool _lock)
   d8348:	b513      	push	{r0, r1, r4, lr}
   d834a:	4604      	mov	r4, r0
   d834c:	9101      	str	r1, [sp, #4]
            return &Wire1;
   d834e:	f003 fa09 	bl	db764 <_Z20__fetch_global_Wire1v>
        : FuelGauge(*fuelWireInstance(), _lock)
   d8352:	9a01      	ldr	r2, [sp, #4]
            return &Wire1;
   d8354:	4601      	mov	r1, r0
        : FuelGauge(*fuelWireInstance(), _lock)
   d8356:	4620      	mov	r0, r4
   d8358:	f7ff ffed 	bl	d8336 <_ZN9FuelGaugeC1ER7TwoWireb>
}
   d835c:	4620      	mov	r0, r4
   d835e:	b002      	add	sp, #8
   d8360:	bd10      	pop	{r4, pc}

000d8362 <_ZN9FuelGauge6unlockEv>:
}

bool FuelGauge::unlock() {
    return i2c_.unlock();
   d8362:	6800      	ldr	r0, [r0, #0]
   d8364:	f000 b921 	b.w	d85aa <_ZN7TwoWire6unlockEv>

000d8368 <_ZN9FuelGauge12readRegisterEhRhS0_>:
int FuelGauge::readRegister(byte startAddress, byte &MSB, byte &LSB) {
   d8368:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   d836c:	4604      	mov	r4, r0
   d836e:	460d      	mov	r5, r1
   d8370:	4617      	mov	r7, r2
   d8372:	461e      	mov	r6, r3
   d8374:	f7ff ffdc 	bl	d8330 <_ZN9FuelGauge4lockEv>
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d8378:	2336      	movs	r3, #54	; 0x36
   d837a:	f88d 3000 	strb.w	r3, [sp]
   d837e:	2300      	movs	r3, #0
    i2c_.beginTransmission(config);
   d8380:	6820      	ldr	r0, [r4, #0]
   d8382:	9301      	str	r3, [sp, #4]
   d8384:	f04f 0801 	mov.w	r8, #1
    size_ = size;
    return *this;
  }

  WireTransmission& timeout(system_tick_t ms) {
    timeout_ = ms;
   d8388:	230a      	movs	r3, #10
   d838a:	4669      	mov	r1, sp
   d838c:	9303      	str	r3, [sp, #12]
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d838e:	f88d 8008 	strb.w	r8, [sp, #8]
   d8392:	f000 f8e1 	bl	d8558 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
    i2c_.write(startAddress);
   d8396:	6820      	ldr	r0, [r4, #0]
   d8398:	6803      	ldr	r3, [r0, #0]
   d839a:	4629      	mov	r1, r5
   d839c:	689b      	ldr	r3, [r3, #8]
   d839e:	4798      	blx	r3
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
   d83a0:	6820      	ldr	r0, [r4, #0]
   d83a2:	4641      	mov	r1, r8
   d83a4:	f000 f8f0 	bl	d8588 <_ZN7TwoWire15endTransmissionEh>
   d83a8:	4605      	mov	r5, r0
   d83aa:	b140      	cbz	r0, d83be <_ZN9FuelGauge12readRegisterEhRhS0_+0x56>
   d83ac:	f06f 059f 	mvn.w	r5, #159	; 0x9f
      { _M_device.unlock(); }
   d83b0:	4620      	mov	r0, r4
   d83b2:	f7ff ffd6 	bl	d8362 <_ZN9FuelGauge6unlockEv>
}
   d83b6:	4628      	mov	r0, r5
   d83b8:	b004      	add	sp, #16
   d83ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_ = size;
   d83be:	2302      	movs	r3, #2
    CHECK_TRUE(i2c_.requestFrom(config) == 2, SYSTEM_ERROR_TIMEOUT);
   d83c0:	6820      	ldr	r0, [r4, #0]
   d83c2:	9301      	str	r3, [sp, #4]
   d83c4:	4669      	mov	r1, sp
   d83c6:	f000 f897 	bl	d84f8 <_ZN7TwoWire11requestFromERK16WireTransmission>
   d83ca:	2802      	cmp	r0, #2
   d83cc:	d1ee      	bne.n	d83ac <_ZN9FuelGauge12readRegisterEhRhS0_+0x44>
    MSB = i2c_.read();
   d83ce:	6820      	ldr	r0, [r4, #0]
   d83d0:	6803      	ldr	r3, [r0, #0]
   d83d2:	695b      	ldr	r3, [r3, #20]
   d83d4:	4798      	blx	r3
   d83d6:	7038      	strb	r0, [r7, #0]
    LSB = i2c_.read();
   d83d8:	6820      	ldr	r0, [r4, #0]
   d83da:	6803      	ldr	r3, [r0, #0]
   d83dc:	695b      	ldr	r3, [r3, #20]
   d83de:	4798      	blx	r3
   d83e0:	7030      	strb	r0, [r6, #0]
    return SYSTEM_ERROR_NONE;
   d83e2:	e7e5      	b.n	d83b0 <_ZN9FuelGauge12readRegisterEhRhS0_+0x48>

000d83e4 <_ZN9FuelGauge8getVCellEv>:
float FuelGauge::getVCell() {
   d83e4:	b507      	push	{r0, r1, r2, lr}
    byte MSB = 0;
   d83e6:	2300      	movs	r3, #0
   d83e8:	f88d 3006 	strb.w	r3, [sp, #6]
    byte LSB = 0;
   d83ec:	f88d 3007 	strb.w	r3, [sp, #7]
    if (readRegister(VCELL_REGISTER, MSB, LSB) != SYSTEM_ERROR_NONE) {
   d83f0:	f10d 0206 	add.w	r2, sp, #6
   d83f4:	f10d 0307 	add.w	r3, sp, #7
   d83f8:	2102      	movs	r1, #2
   d83fa:	f7ff ffb5 	bl	d8368 <_ZN9FuelGauge12readRegisterEhRhS0_>
   d83fe:	b940      	cbnz	r0, d8412 <_ZN9FuelGauge8getVCellEv+0x2e>
    return particle::detail::_getVCell(MSB, LSB);
   d8400:	f89d 1007 	ldrb.w	r1, [sp, #7]
   d8404:	f89d 0006 	ldrb.w	r0, [sp, #6]
}
   d8408:	b003      	add	sp, #12
   d840a:	f85d eb04 	ldr.w	lr, [sp], #4
    return particle::detail::_getVCell(MSB, LSB);
   d840e:	f7ff bf81 	b.w	d8314 <_ZN8particle6detail9_getVCellEhh>
}
   d8412:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
   d8416:	b003      	add	sp, #12
   d8418:	f85d fb04 	ldr.w	pc, [sp], #4

000d841c <_ZN9FuelGauge6getSoCEv>:
float FuelGauge::getSoC() {
   d841c:	b507      	push	{r0, r1, r2, lr}
    byte MSB = 0;
   d841e:	2300      	movs	r3, #0
   d8420:	f88d 3006 	strb.w	r3, [sp, #6]
    byte LSB = 0;
   d8424:	f88d 3007 	strb.w	r3, [sp, #7]
    if(readRegister(SOC_REGISTER, MSB, LSB) != SYSTEM_ERROR_NONE) {
   d8428:	f10d 0206 	add.w	r2, sp, #6
   d842c:	f10d 0307 	add.w	r3, sp, #7
   d8430:	2104      	movs	r1, #4
   d8432:	f7ff ff99 	bl	d8368 <_ZN9FuelGauge12readRegisterEhRhS0_>
   d8436:	b9b0      	cbnz	r0, d8466 <_ZN9FuelGauge6getSoCEv+0x4a>
        float decimal = LSB / 256.0;
   d8438:	f89d 0007 	ldrb.w	r0, [sp, #7]
   d843c:	f003 fcd6 	bl	dbdec <__aeabi_i2d>
   d8440:	4b0a      	ldr	r3, [pc, #40]	; (d846c <_ZN9FuelGauge6getSoCEv+0x50>)
   d8442:	2200      	movs	r2, #0
   d8444:	f003 fd3c 	bl	dbec0 <__aeabi_dmul>
   d8448:	f003 fff4 	bl	dc434 <__aeabi_d2f>
        return MSB + decimal;
   d844c:	f89d 3006 	ldrb.w	r3, [sp, #6]
   d8450:	ee00 3a10 	vmov	s0, r3
   d8454:	ee07 0a90 	vmov	s15, r0
   d8458:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
   d845c:	ee37 0a80 	vadd.f32	s0, s15, s0
}
   d8460:	b003      	add	sp, #12
   d8462:	f85d fb04 	ldr.w	pc, [sp], #4
        return -1.0f;
   d8466:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
   d846a:	e7f9      	b.n	d8460 <_ZN9FuelGauge6getSoCEv+0x44>
   d846c:	3f700000 	.word	0x3f700000

000d8470 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d8470:	4770      	bx	lr

000d8472 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d8472:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d8474:	4606      	mov	r6, r0
   d8476:	4615      	mov	r5, r2
   d8478:	460c      	mov	r4, r1
   d847a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d847c:	42bc      	cmp	r4, r7
   d847e:	d006      	beq.n	d848e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d8480:	6833      	ldr	r3, [r6, #0]
   d8482:	f814 1b01 	ldrb.w	r1, [r4], #1
   d8486:	689b      	ldr	r3, [r3, #8]
   d8488:	4630      	mov	r0, r6
   d848a:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d848c:	e7f6      	b.n	d847c <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d848e:	4628      	mov	r0, r5
   d8490:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d8492 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d8492:	7c00      	ldrb	r0, [r0, #16]
   d8494:	2200      	movs	r2, #0
   d8496:	f7ff b89f 	b.w	d75d8 <hal_i2c_write>

000d849a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d849a:	7c00      	ldrb	r0, [r0, #16]
   d849c:	2100      	movs	r1, #0
   d849e:	f7ff b8a3 	b.w	d75e8 <hal_i2c_available>

000d84a2 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d84a2:	7c00      	ldrb	r0, [r0, #16]
   d84a4:	2100      	movs	r1, #0
   d84a6:	f7ff b8a7 	b.w	d75f8 <hal_i2c_read>

000d84aa <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d84aa:	7c00      	ldrb	r0, [r0, #16]
   d84ac:	2100      	movs	r1, #0
   d84ae:	f7ff b8ab 	b.w	d7608 <hal_i2c_peek>

000d84b2 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d84b2:	7c00      	ldrb	r0, [r0, #16]
   d84b4:	2100      	movs	r1, #0
   d84b6:	f7ff b8af 	b.w	d7618 <hal_i2c_flush>

000d84ba <_ZN7TwoWireD0Ev>:
   d84ba:	b510      	push	{r4, lr}
   d84bc:	2114      	movs	r1, #20
   d84be:	4604      	mov	r4, r0
   d84c0:	f003 f974 	bl	db7ac <_ZdlPvj>
   d84c4:	4620      	mov	r0, r4
   d84c6:	bd10      	pop	{r4, pc}

000d84c8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d84c8:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d84ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d84ce:	4604      	mov	r4, r0
   d84d0:	4608      	mov	r0, r1
   d84d2:	2100      	movs	r1, #0
   d84d4:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d84d8:	4b03      	ldr	r3, [pc, #12]	; (d84e8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d84da:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d84dc:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d84de:	4611      	mov	r1, r2
   d84e0:	f7ff f8aa 	bl	d7638 <hal_i2c_init>
}
   d84e4:	4620      	mov	r0, r4
   d84e6:	bd10      	pop	{r4, pc}
   d84e8:	000df688 	.word	0x000df688

000d84ec <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d84ec:	2300      	movs	r3, #0
   d84ee:	7c00      	ldrb	r0, [r0, #16]
   d84f0:	461a      	mov	r2, r3
   d84f2:	4619      	mov	r1, r3
   d84f4:	f7ff b858 	b.w	d75a8 <hal_i2c_begin>

000d84f8 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d84f8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   d84fa:	2200      	movs	r2, #0
   d84fc:	2314      	movs	r3, #20
   d84fe:	e9cd 2201 	strd	r2, r2, [sp, #4]
   d8502:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   d8506:	780b      	ldrb	r3, [r1, #0]
   d8508:	f88d 3008 	strb.w	r3, [sp, #8]
   d850c:	684b      	ldr	r3, [r1, #4]
   d850e:	9303      	str	r3, [sp, #12]
   d8510:	68cb      	ldr	r3, [r1, #12]
   d8512:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   d8514:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   d8516:	7a0b      	ldrb	r3, [r1, #8]
   d8518:	9305      	str	r3, [sp, #20]
   d851a:	a901      	add	r1, sp, #4
   d851c:	f7ff f8a4 	bl	d7668 <hal_i2c_request_ex>
}
   d8520:	b007      	add	sp, #28
   d8522:	f85d fb04 	ldr.w	pc, [sp], #4

000d8526 <_ZN7TwoWire11requestFromEhjh>:
{
   d8526:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d8528:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d852a:	f88d 1000 	strb.w	r1, [sp]
   d852e:	f04f 0164 	mov.w	r1, #100	; 0x64
   d8532:	9103      	str	r1, [sp, #12]
   d8534:	bf18      	it	ne
   d8536:	2301      	movne	r3, #1
   d8538:	4669      	mov	r1, sp
    size_ = size;
   d853a:	9201      	str	r2, [sp, #4]
   d853c:	f88d 3008 	strb.w	r3, [sp, #8]
   d8540:	f7ff ffda 	bl	d84f8 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d8544:	b005      	add	sp, #20
   d8546:	f85d fb04 	ldr.w	pc, [sp], #4

000d854a <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   d854a:	7c00      	ldrb	r0, [r0, #16]
   d854c:	2200      	movs	r2, #0
   d854e:	f7ff b833 	b.w	d75b8 <hal_i2c_begin_transmission>

000d8552 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   d8552:	b2c9      	uxtb	r1, r1
   d8554:	f7ff bff9 	b.w	d854a <_ZN7TwoWire17beginTransmissionEh>

000d8558 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>:
void TwoWire::beginTransmission(const WireTransmission& transfer) {
   d8558:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   d855a:	2300      	movs	r3, #0
   d855c:	e9cd 3301 	strd	r3, r3, [sp, #4]
    };
   d8560:	684a      	ldr	r2, [r1, #4]
   d8562:	9203      	str	r2, [sp, #12]
    hal_i2c_transmission_config_t conf = {
   d8564:	2314      	movs	r3, #20
    };
   d8566:	68ca      	ldr	r2, [r1, #12]
    hal_i2c_transmission_config_t conf = {
   d8568:	f8ad 3004 	strh.w	r3, [sp, #4]
      .address = address_,
   d856c:	780b      	ldrb	r3, [r1, #0]
    };
   d856e:	9204      	str	r2, [sp, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   d8570:	7a0a      	ldrb	r2, [r1, #8]
   d8572:	9205      	str	r2, [sp, #20]
  hal_i2c_begin_transmission(_i2c, conf.address, &conf);
   d8574:	7c00      	ldrb	r0, [r0, #16]
    };
   d8576:	f88d 3008 	strb.w	r3, [sp, #8]
   d857a:	aa01      	add	r2, sp, #4
   d857c:	4619      	mov	r1, r3
   d857e:	f7ff f81b 	bl	d75b8 <hal_i2c_begin_transmission>
}
   d8582:	b007      	add	sp, #28
   d8584:	f85d fb04 	ldr.w	pc, [sp], #4

000d8588 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   d8588:	7c00      	ldrb	r0, [r0, #16]
   d858a:	2200      	movs	r2, #0
   d858c:	f7ff b81c 	b.w	d75c8 <hal_i2c_end_transmission>

000d8590 <_ZN7TwoWire9isEnabledEv>:
  hal_i2c_set_callback_on_requested(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return hal_i2c_is_enabled(_i2c, NULL);
   d8590:	7c00      	ldrb	r0, [r0, #16]
   d8592:	2100      	movs	r1, #0
   d8594:	f7ff b848 	b.w	d7628 <hal_i2c_is_enabled>

000d8598 <_ZN7TwoWire4lockEv>:
{
  hal_i2c_reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
   d8598:	b508      	push	{r3, lr}
  return hal_i2c_lock(_i2c, NULL) == 0;
   d859a:	2100      	movs	r1, #0
   d859c:	7c00      	ldrb	r0, [r0, #16]
   d859e:	f7ff f853 	bl	d7648 <hal_i2c_lock>
}
   d85a2:	fab0 f080 	clz	r0, r0
   d85a6:	0940      	lsrs	r0, r0, #5
   d85a8:	bd08      	pop	{r3, pc}

000d85aa <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
   d85aa:	b508      	push	{r3, lr}
  return hal_i2c_unlock(_i2c, NULL) == 0;
   d85ac:	2100      	movs	r1, #0
   d85ae:	7c00      	ldrb	r0, [r0, #16]
   d85b0:	f7ff f852 	bl	d7658 <hal_i2c_unlock>
}
   d85b4:	fab0 f080 	clz	r0, r0
   d85b8:	0940      	lsrs	r0, r0, #5
   d85ba:	bd08      	pop	{r3, pc}

000d85bc <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   d85bc:	4700      	bx	r0
	...

000d85c0 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   d85c0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
   d85c4:	2400      	movs	r4, #0
{
   d85c6:	461d      	mov	r5, r3
   d85c8:	460f      	mov	r7, r1
   d85ca:	4690      	mov	r8, r2
   d85cc:	4606      	mov	r6, r0
    HAL_Interrupts_Detach(pin);
   d85ce:	f7fe ffdb 	bl	d7588 <HAL_Interrupts_Detach>
  if (priority >= 0) {
   d85d2:	42a5      	cmp	r5, r4
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d85d4:	f04f 0304 	mov.w	r3, #4
    HAL_InterruptExtraConfiguration extra = {0};
   d85d8:	f8ad 400d 	strh.w	r4, [sp, #13]
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d85dc:	f88d 300c 	strb.w	r3, [sp, #12]
    HAL_InterruptExtraConfiguration extra = {0};
   d85e0:	f88d 400f 	strb.w	r4, [sp, #15]
    extra.IRQChannelSubPriority = subpriority;
   d85e4:	bfa2      	ittt	ge
   d85e6:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   d85ea:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
   d85ee:	ac03      	addge	r4, sp, #12
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d85f0:	4907      	ldr	r1, [pc, #28]	; (d8610 <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)
   d85f2:	9400      	str	r4, [sp, #0]
   d85f4:	4643      	mov	r3, r8
   d85f6:	463a      	mov	r2, r7
   d85f8:	4630      	mov	r0, r6
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   d85fa:	bfa8      	it	ge
   d85fc:	f88d 500d 	strbge.w	r5, [sp, #13]
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d8600:	f7fe ffba 	bl	d7578 <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
   d8604:	fab0 f080 	clz	r0, r0
   d8608:	0940      	lsrs	r0, r0, #5
   d860a:	b004      	add	sp, #16
   d860c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d8610:	000d85bd 	.word	0x000d85bd

000d8614 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d8614:	4770      	bx	lr

000d8616 <_ZN9IPAddressD0Ev>:
   d8616:	b510      	push	{r4, lr}
   d8618:	2118      	movs	r1, #24
   d861a:	4604      	mov	r4, r0
   d861c:	f003 f8c6 	bl	db7ac <_ZdlPvj>
   d8620:	4620      	mov	r0, r4
   d8622:	bd10      	pop	{r4, pc}

000d8624 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d8624:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d8626:	7d03      	ldrb	r3, [r0, #20]
   d8628:	2b06      	cmp	r3, #6
{
   d862a:	b08d      	sub	sp, #52	; 0x34
   d862c:	460e      	mov	r6, r1
   d862e:	f100 0704 	add.w	r7, r0, #4
   d8632:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d8636:	d012      	beq.n	d865e <_ZNK9IPAddress7printToER5Print+0x3a>
   d8638:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d863c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d8640:	220a      	movs	r2, #10
   d8642:	4630      	mov	r0, r6
   d8644:	f001 fbaf 	bl	d9da6 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d8648:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d864a:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d864c:	d019      	beq.n	d8682 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d864e:	2c00      	cmp	r4, #0
   d8650:	d0f4      	beq.n	d863c <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d8652:	212e      	movs	r1, #46	; 0x2e
   d8654:	4630      	mov	r0, r6
   d8656:	f001 fb8d 	bl	d9d74 <_ZN5Print5printEc>
   d865a:	4404      	add	r4, r0
   d865c:	e7ee      	b.n	d863c <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d865e:	232f      	movs	r3, #47	; 0x2f
   d8660:	466a      	mov	r2, sp
   d8662:	4639      	mov	r1, r7
   d8664:	200a      	movs	r0, #10
		buf[0] = 0;
   d8666:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d866a:	f7ff f80d 	bl	d7688 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d866e:	4668      	mov	r0, sp
   d8670:	f004 f9db 	bl	dca2a <strlen>
   d8674:	6833      	ldr	r3, [r6, #0]
   d8676:	4602      	mov	r2, r0
   d8678:	68db      	ldr	r3, [r3, #12]
   d867a:	4669      	mov	r1, sp
   d867c:	4630      	mov	r0, r6
   d867e:	4798      	blx	r3
   d8680:	4604      	mov	r4, r0
    }
    return n;
}
   d8682:	4620      	mov	r0, r4
   d8684:	b00d      	add	sp, #52	; 0x34
   d8686:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d8688 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d8688:	b510      	push	{r4, lr}
   d868a:	4b05      	ldr	r3, [pc, #20]	; (d86a0 <_ZN9IPAddressC1Ev+0x18>)
   d868c:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d868e:	2211      	movs	r2, #17
   d8690:	f840 3b04 	str.w	r3, [r0], #4
   d8694:	2100      	movs	r1, #0
   d8696:	f004 f955 	bl	dc944 <memset>
}
   d869a:	4620      	mov	r0, r4
   d869c:	bd10      	pop	{r4, pc}
   d869e:	bf00      	nop
   d86a0:	000df6b0 	.word	0x000df6b0

000d86a4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d86a4:	4603      	mov	r3, r0
   d86a6:	4a07      	ldr	r2, [pc, #28]	; (d86c4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d86a8:	b510      	push	{r4, lr}
   d86aa:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d86ae:	f101 0210 	add.w	r2, r1, #16
   d86b2:	f851 4b04 	ldr.w	r4, [r1], #4
   d86b6:	f843 4b04 	str.w	r4, [r3], #4
   d86ba:	4291      	cmp	r1, r2
   d86bc:	d1f9      	bne.n	d86b2 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d86be:	780a      	ldrb	r2, [r1, #0]
   d86c0:	701a      	strb	r2, [r3, #0]
}
   d86c2:	bd10      	pop	{r4, pc}
   d86c4:	000df6b0 	.word	0x000df6b0

000d86c8 <_ZNK9IPAddresscvbEv>:
    if (version() == 4) {
   d86c8:	7d03      	ldrb	r3, [r0, #20]
   d86ca:	2b04      	cmp	r3, #4
   d86cc:	d104      	bne.n	d86d8 <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   d86ce:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d86d0:	3800      	subs	r0, #0
   d86d2:	bf18      	it	ne
   d86d4:	2001      	movne	r0, #1
   d86d6:	4770      	bx	lr
    } else if (version() == 6) {
   d86d8:	2b06      	cmp	r3, #6
   d86da:	d107      	bne.n	d86ec <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d86dc:	6843      	ldr	r3, [r0, #4]
   d86de:	b93b      	cbnz	r3, d86f0 <_ZNK9IPAddresscvbEv+0x28>
   d86e0:	6883      	ldr	r3, [r0, #8]
   d86e2:	b92b      	cbnz	r3, d86f0 <_ZNK9IPAddresscvbEv+0x28>
   d86e4:	68c3      	ldr	r3, [r0, #12]
   d86e6:	b91b      	cbnz	r3, d86f0 <_ZNK9IPAddresscvbEv+0x28>
   d86e8:	6900      	ldr	r0, [r0, #16]
   d86ea:	e7f1      	b.n	d86d0 <_ZNK9IPAddresscvbEv+0x8>
        return false;
   d86ec:	2000      	movs	r0, #0
   d86ee:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d86f0:	2001      	movs	r0, #1
}
   d86f2:	4770      	bx	lr

000d86f4 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d86f4:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d86f6:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d86fa:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d86fe:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d8702:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d8706:	2304      	movs	r3, #4
   d8708:	6041      	str	r1, [r0, #4]
   d870a:	7503      	strb	r3, [r0, #20]
}
   d870c:	bd10      	pop	{r4, pc}
	...

000d8710 <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
   d8710:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d8712:	4d04      	ldr	r5, [pc, #16]	; (d8724 <_ZN9IPAddressC1Ehhhh+0x14>)
   d8714:	6005      	str	r5, [r0, #0]
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
   d8716:	f89d 5018 	ldrb.w	r5, [sp, #24]
   d871a:	9500      	str	r5, [sp, #0]
   d871c:	f7ff ffea 	bl	d86f4 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d8720:	b003      	add	sp, #12
   d8722:	bd30      	pop	{r4, r5, pc}
   d8724:	000df6b0 	.word	0x000df6b0

000d8728 <_ZN9IPAddressaSEPKh>:
{
   d8728:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d872a:	78cb      	ldrb	r3, [r1, #3]
   d872c:	9300      	str	r3, [sp, #0]
   d872e:	788b      	ldrb	r3, [r1, #2]
   d8730:	784a      	ldrb	r2, [r1, #1]
   d8732:	7809      	ldrb	r1, [r1, #0]
   d8734:	f7ff ffde 	bl	d86f4 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d8738:	b002      	add	sp, #8
   d873a:	bd10      	pop	{r4, pc}

000d873c <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
   d873c:	f100 0310 	add.w	r3, r0, #16
   d8740:	2201      	movs	r2, #1
    do {
        if (t->type == JSMN_OBJECT) {
   d8742:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   d8746:	2901      	cmp	r1, #1
   d8748:	4618      	mov	r0, r3
   d874a:	d108      	bne.n	d875e <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
   d874c:	f853 1c04 	ldr.w	r1, [r3, #-4]
   d8750:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
   d8754:	3a01      	subs	r2, #1
   d8756:	f103 0310 	add.w	r3, r3, #16
   d875a:	d1f2      	bne.n	d8742 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
   d875c:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
   d875e:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   d8760:	bf04      	itt	eq
   d8762:	f853 1c04 	ldreq.w	r1, [r3, #-4]
   d8766:	1852      	addeq	r2, r2, r1
   d8768:	e7f4      	b.n	d8754 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

000d876a <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   d876a:	b40e      	push	{r1, r2, r3}
   d876c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d876e:	b088      	sub	sp, #32
   d8770:	af00      	add	r7, sp, #0
   d8772:	f107 0534 	add.w	r5, r7, #52	; 0x34
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d8776:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
   d8778:	f855 2b04 	ldr.w	r2, [r5], #4
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d877c:	607a      	str	r2, [r7, #4]
void spark::JSONWriter::printf(const char *fmt, ...) {
   d877e:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d8780:	462b      	mov	r3, r5
   d8782:	1878      	adds	r0, r7, r1
    va_start(args, fmt);
   d8784:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d8786:	f7ff fa09 	bl	d7b9c <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   d878a:	280f      	cmp	r0, #15
   d878c:	687a      	ldr	r2, [r7, #4]
   d878e:	d91a      	bls.n	d87c6 <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
   d8790:	f100 0308 	add.w	r3, r0, #8
   d8794:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   d8798:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
   d879a:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   d879e:	1c41      	adds	r1, r0, #1
   d87a0:	462b      	mov	r3, r5
   d87a2:	4668      	mov	r0, sp
        va_start(args, fmt);
   d87a4:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   d87a6:	f7ff f9f9 	bl	d7b9c <vsnprintf>
        if (n > 0) {
   d87aa:	1e02      	subs	r2, r0, #0
   d87ac:	dd04      	ble.n	d87b8 <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
   d87ae:	6823      	ldr	r3, [r4, #0]
   d87b0:	4669      	mov	r1, sp
   d87b2:	689b      	ldr	r3, [r3, #8]
   d87b4:	4620      	mov	r0, r4
   d87b6:	4798      	blx	r3
   d87b8:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
   d87ba:	3720      	adds	r7, #32
   d87bc:	46bd      	mov	sp, r7
   d87be:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   d87c2:	b003      	add	sp, #12
   d87c4:	4770      	bx	lr
    } else if (n > 0) {
   d87c6:	2800      	cmp	r0, #0
   d87c8:	d0f7      	beq.n	d87ba <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
   d87ca:	6823      	ldr	r3, [r4, #0]
   d87cc:	4602      	mov	r2, r0
   d87ce:	689b      	ldr	r3, [r3, #8]
   d87d0:	f107 0110 	add.w	r1, r7, #16
   d87d4:	4620      	mov	r0, r4
   d87d6:	4798      	blx	r3
}
   d87d8:	e7ef      	b.n	d87ba <_ZN5spark10JSONWriter6printfEPKcz+0x50>

000d87da <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d87da:	b510      	push	{r4, lr}
          _M_dispose();
   d87dc:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d87de:	4604      	mov	r4, r0
          _M_dispose();
   d87e0:	689b      	ldr	r3, [r3, #8]
   d87e2:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d87e4:	68a3      	ldr	r3, [r4, #8]
   d87e6:	3b01      	subs	r3, #1
   d87e8:	60a3      	str	r3, [r4, #8]
   d87ea:	b92b      	cbnz	r3, d87f8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
   d87ec:	6823      	ldr	r3, [r4, #0]
   d87ee:	4620      	mov	r0, r4
   d87f0:	68db      	ldr	r3, [r3, #12]
    }
   d87f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   d87f6:	4718      	bx	r3
    }
   d87f8:	bd10      	pop	{r4, pc}

000d87fa <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   d87fa:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   d87fc:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
   d87fe:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   d8802:	689b      	ldr	r3, [r3, #8]
   d8804:	2201      	movs	r2, #1
   d8806:	f10d 0107 	add.w	r1, sp, #7
   d880a:	4798      	blx	r3
}
   d880c:	b003      	add	sp, #12
   d880e:	f85d fb04 	ldr.w	pc, [sp], #4

000d8812 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>:
    class __shared_ptr
   d8812:	b538      	push	{r3, r4, r5, lr}
   d8814:	680b      	ldr	r3, [r1, #0]
   d8816:	6003      	str	r3, [r0, #0]
   d8818:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
   d881a:	6843      	ldr	r3, [r0, #4]
   d881c:	429d      	cmp	r5, r3
    class __shared_ptr
   d881e:	4604      	mov	r4, r0
	if (__tmp != _M_pi)
   d8820:	d00c      	beq.n	d883c <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x2a>
	    if (__tmp != 0)
   d8822:	b115      	cbz	r5, d882a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x18>
    { ++_M_use_count; }
   d8824:	686b      	ldr	r3, [r5, #4]
   d8826:	3301      	adds	r3, #1
   d8828:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   d882a:	6860      	ldr	r0, [r4, #4]
   d882c:	b128      	cbz	r0, d883a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x28>
      if (--_M_use_count == 0)
   d882e:	6843      	ldr	r3, [r0, #4]
   d8830:	3b01      	subs	r3, #1
   d8832:	6043      	str	r3, [r0, #4]
   d8834:	b90b      	cbnz	r3, d883a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x28>
   d8836:	f7ff ffd0 	bl	d87da <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
	    _M_pi = __tmp;
   d883a:	6065      	str	r5, [r4, #4]
    class __shared_ptr
   d883c:	4620      	mov	r0, r4
   d883e:	bd38      	pop	{r3, r4, r5, pc}

000d8840 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   d8840:	460b      	mov	r3, r1
   d8842:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
   d8844:	2200      	movs	r2, #0
   d8846:	b510      	push	{r4, lr}
      constexpr __shared_count() noexcept : _M_pi(0)
   d8848:	e9c0 2200 	strd	r2, r2, [r0]
   d884c:	4604      	mov	r4, r0
        t_ = t;
   d884e:	6083      	str	r3, [r0, #8]
    if (t) {
   d8850:	b90b      	cbnz	r3, d8856 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
   d8852:	4620      	mov	r0, r4
   d8854:	bd10      	pop	{r4, pc}
   *
   *  The object pointed to is deleted when the last shared_ptr pointing to
   *  it is destroyed or reset.
  */
  template<typename _Tp>
    class shared_ptr : public __shared_ptr<_Tp>
   d8856:	f7ff ffdc 	bl	d8812 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
   d885a:	e7fa      	b.n	d8852 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

000d885c <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
   d885c:	6883      	ldr	r3, [r0, #8]
   d885e:	b1eb      	cbz	r3, d889c <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
   d8860:	781a      	ldrb	r2, [r3, #0]
   d8862:	2a03      	cmp	r2, #3
   d8864:	d81a      	bhi.n	d889c <_ZNK5spark9JSONValue4typeEv+0x40>
   d8866:	e8df f002 	tbb	[pc, r2]
   d886a:	1704      	.short	0x1704
   d886c:	1b02      	.short	0x1b02
   d886e:	2005      	movs	r0, #5
   d8870:	4770      	bx	lr
        const char c = d_->json[t_->start];
   d8872:	6802      	ldr	r2, [r0, #0]
   d8874:	685b      	ldr	r3, [r3, #4]
   d8876:	6852      	ldr	r2, [r2, #4]
   d8878:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   d887a:	282d      	cmp	r0, #45	; 0x2d
   d887c:	d012      	beq.n	d88a4 <_ZNK5spark9JSONValue4typeEv+0x48>
   d887e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d8882:	2b09      	cmp	r3, #9
   d8884:	d90e      	bls.n	d88a4 <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   d8886:	2874      	cmp	r0, #116	; 0x74
   d8888:	d00e      	beq.n	d88a8 <_ZNK5spark9JSONValue4typeEv+0x4c>
   d888a:	2866      	cmp	r0, #102	; 0x66
   d888c:	d00c      	beq.n	d88a8 <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
   d888e:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   d8892:	4258      	negs	r0, r3
   d8894:	4158      	adcs	r0, r3
   d8896:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
   d8898:	2006      	movs	r0, #6
   d889a:	4770      	bx	lr
        return JSON_TYPE_INVALID;
   d889c:	2000      	movs	r0, #0
   d889e:	4770      	bx	lr
        return JSON_TYPE_STRING;
   d88a0:	2004      	movs	r0, #4
   d88a2:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
   d88a4:	2003      	movs	r0, #3
   d88a6:	4770      	bx	lr
            return JSON_TYPE_BOOL;
   d88a8:	2002      	movs	r0, #2
}
   d88aa:	4770      	bx	lr

000d88ac <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
   d88ac:	b510      	push	{r4, lr}
   d88ae:	4604      	mov	r4, r0
    switch (type()) {
   d88b0:	f7ff ffd4 	bl	d885c <_ZNK5spark9JSONValue4typeEv>
   d88b4:	2802      	cmp	r0, #2
   d88b6:	d00e      	beq.n	d88d6 <_ZNK5spark9JSONValue5toIntEv+0x2a>
   d88b8:	1ec3      	subs	r3, r0, #3
   d88ba:	b2db      	uxtb	r3, r3
   d88bc:	2b01      	cmp	r3, #1
   d88be:	d814      	bhi.n	d88ea <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
   d88c0:	6822      	ldr	r2, [r4, #0]
   d88c2:	68a3      	ldr	r3, [r4, #8]
   d88c4:	6850      	ldr	r0, [r2, #4]
   d88c6:	685b      	ldr	r3, [r3, #4]
}
   d88c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
   d88cc:	220a      	movs	r2, #10
   d88ce:	2100      	movs	r1, #0
   d88d0:	4418      	add	r0, r3
   d88d2:	f005 b803 	b.w	dd8dc <strtol>
        const char* const s = d_->json + t_->start;
   d88d6:	6822      	ldr	r2, [r4, #0]
   d88d8:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   d88da:	6852      	ldr	r2, [r2, #4]
   d88dc:	685b      	ldr	r3, [r3, #4]
   d88de:	5cd0      	ldrb	r0, [r2, r3]
   d88e0:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   d88e4:	4258      	negs	r0, r3
   d88e6:	4158      	adcs	r0, r3
}
   d88e8:	bd10      	pop	{r4, pc}
    switch (type()) {
   d88ea:	2000      	movs	r0, #0
   d88ec:	e7fc      	b.n	d88e8 <_ZNK5spark9JSONValue5toIntEv+0x3c>
	...

000d88f0 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   d88f0:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   d88f2:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   d88f4:	e9c0 3300 	strd	r3, r3, [r0]
   d88f8:	4604      	mov	r4, r0
        n_(0) {
   d88fa:	480e      	ldr	r0, [pc, #56]	; (d8934 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
   d88fc:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   d8900:	b1a9      	cbz	r1, d892e <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
   d8902:	780b      	ldrb	r3, [r1, #0]
   d8904:	2b03      	cmp	r3, #3
   d8906:	d006      	beq.n	d8916 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   d8908:	b98b      	cbnz	r3, d892e <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   d890a:	6813      	ldr	r3, [r2, #0]
   d890c:	6858      	ldr	r0, [r3, #4]
   d890e:	684b      	ldr	r3, [r1, #4]
   d8910:	5cc3      	ldrb	r3, [r0, r3]
   d8912:	2b6e      	cmp	r3, #110	; 0x6e
   d8914:	d007      	beq.n	d8926 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
   d8916:	6813      	ldr	r3, [r2, #0]
   d8918:	684d      	ldr	r5, [r1, #4]
   d891a:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
   d891c:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
   d891e:	4428      	add	r0, r5
            n_ = t->end - t->start;
   d8920:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
   d8922:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
   d8924:	60e3      	str	r3, [r4, #12]
   d8926:	4611      	mov	r1, r2
   d8928:	4620      	mov	r0, r4
   d892a:	f7ff ff72 	bl	d8812 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
}
   d892e:	4620      	mov	r0, r4
   d8930:	bd38      	pop	{r3, r4, r5, pc}
   d8932:	bf00      	nop
   d8934:	000df323 	.word	0x000df323

000d8938 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   d8938:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   d893a:	2500      	movs	r5, #0
   d893c:	460b      	mov	r3, r1
      constexpr __shared_count() noexcept : _M_pi(0)
   d893e:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
   d8942:	e9c0 5502 	strd	r5, r5, [r0, #8]
   d8946:	e9c0 5504 	strd	r5, r5, [r0, #16]
   d894a:	4604      	mov	r4, r0
   d894c:	4611      	mov	r1, r2
    if (t && t->type == JSMN_OBJECT) {
   d894e:	b14b      	cbz	r3, d8964 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
   d8950:	781a      	ldrb	r2, [r3, #0]
   d8952:	2a01      	cmp	r2, #1
   d8954:	d106      	bne.n	d8964 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
   d8956:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
   d895a:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
   d895c:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
   d895e:	6143      	str	r3, [r0, #20]
   d8960:	f7ff ff57 	bl	d8812 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
}
   d8964:	4620      	mov	r0, r4
   d8966:	bd38      	pop	{r3, r4, r5, pc}

000d8968 <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
   d8968:	b510      	push	{r4, lr}
    if (!n_) {
   d896a:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
   d896c:	4604      	mov	r4, r0
    if (!n_) {
   d896e:	b163      	cbz	r3, d898a <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
   d8970:	6880      	ldr	r0, [r0, #8]
   d8972:	60e0      	str	r0, [r4, #12]
    --n_;
   d8974:	3b01      	subs	r3, #1
    ++t_;
   d8976:	3010      	adds	r0, #16
   d8978:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   d897a:	6120      	str	r0, [r4, #16]
    --n_;
   d897c:	6163      	str	r3, [r4, #20]
    if (n_) {
   d897e:	b113      	cbz	r3, d8986 <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
   d8980:	f7ff fedc 	bl	d873c <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   d8984:	60a0      	str	r0, [r4, #8]
    return true;
   d8986:	2001      	movs	r0, #1
   d8988:	e000      	b.n	d898c <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
   d898a:	4618      	mov	r0, r3
}
   d898c:	bd10      	pop	{r4, pc}

000d898e <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
   d898e:	b510      	push	{r4, lr}
    write('}');
   d8990:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
   d8992:	4604      	mov	r4, r0
    write('}');
   d8994:	f7ff ff31 	bl	d87fa <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   d8998:	2301      	movs	r3, #1
   d899a:	7123      	strb	r3, [r4, #4]
}
   d899c:	4620      	mov	r0, r4
   d899e:	bd10      	pop	{r4, pc}

000d89a0 <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
   d89a0:	b508      	push	{r3, lr}
    switch (state_) {
   d89a2:	7903      	ldrb	r3, [r0, #4]
   d89a4:	2b01      	cmp	r3, #1
   d89a6:	d002      	beq.n	d89ae <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   d89a8:	2b02      	cmp	r3, #2
   d89aa:	d004      	beq.n	d89b6 <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
   d89ac:	bd08      	pop	{r3, pc}
        write(',');
   d89ae:	212c      	movs	r1, #44	; 0x2c
        write(':');
   d89b0:	f7ff ff23 	bl	d87fa <_ZN5spark10JSONWriter5writeEc>
}
   d89b4:	e7fa      	b.n	d89ac <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
   d89b6:	213a      	movs	r1, #58	; 0x3a
   d89b8:	e7fa      	b.n	d89b0 <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

000d89ba <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
   d89ba:	b510      	push	{r4, lr}
   d89bc:	4604      	mov	r4, r0
    writeSeparator();
   d89be:	f7ff ffef 	bl	d89a0 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   d89c2:	4620      	mov	r0, r4
   d89c4:	217b      	movs	r1, #123	; 0x7b
   d89c6:	f7ff ff18 	bl	d87fa <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   d89ca:	2300      	movs	r3, #0
   d89cc:	7123      	strb	r3, [r4, #4]
}
   d89ce:	4620      	mov	r0, r4
   d89d0:	bd10      	pop	{r4, pc}
	...

000d89d4 <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
   d89d4:	b513      	push	{r0, r1, r4, lr}
   d89d6:	4604      	mov	r4, r0
   d89d8:	9101      	str	r1, [sp, #4]
    writeSeparator();
   d89da:	f7ff ffe1 	bl	d89a0 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   d89de:	6823      	ldr	r3, [r4, #0]
   d89e0:	9a01      	ldr	r2, [sp, #4]
   d89e2:	68db      	ldr	r3, [r3, #12]
   d89e4:	4903      	ldr	r1, [pc, #12]	; (d89f4 <_ZN5spark10JSONWriter5valueEi+0x20>)
   d89e6:	4620      	mov	r0, r4
   d89e8:	4798      	blx	r3
    state_ = NEXT;
   d89ea:	2301      	movs	r3, #1
}
   d89ec:	4620      	mov	r0, r4
    state_ = NEXT;
   d89ee:	7123      	strb	r3, [r4, #4]
}
   d89f0:	b002      	add	sp, #8
   d89f2:	bd10      	pop	{r4, pc}
   d89f4:	000df81f 	.word	0x000df81f

000d89f8 <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   d89f8:	b513      	push	{r0, r1, r4, lr}
   d89fa:	4604      	mov	r4, r0
   d89fc:	9101      	str	r1, [sp, #4]
    writeSeparator();
   d89fe:	f7ff ffcf 	bl	d89a0 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   d8a02:	6823      	ldr	r3, [r4, #0]
   d8a04:	9a01      	ldr	r2, [sp, #4]
   d8a06:	68db      	ldr	r3, [r3, #12]
   d8a08:	4903      	ldr	r1, [pc, #12]	; (d8a18 <_ZN5spark10JSONWriter5valueEj+0x20>)
   d8a0a:	4620      	mov	r0, r4
   d8a0c:	4798      	blx	r3
    state_ = NEXT;
   d8a0e:	2301      	movs	r3, #1
}
   d8a10:	4620      	mov	r0, r4
    state_ = NEXT;
   d8a12:	7123      	strb	r3, [r4, #4]
}
   d8a14:	b002      	add	sp, #8
   d8a16:	bd10      	pop	{r4, pc}
   d8a18:	000df6bc 	.word	0x000df6bc

000d8a1c <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   d8a1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d8a20:	460d      	mov	r5, r1
   d8a22:	4617      	mov	r7, r2
    write('"');
   d8a24:	2122      	movs	r1, #34	; 0x22
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   d8a26:	f8df 80a0 	ldr.w	r8, [pc, #160]	; d8ac8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xac>
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   d8a2a:	4604      	mov	r4, r0
    const char* const end = str + size;
   d8a2c:	442f      	add	r7, r5
    write('"');
   d8a2e:	f7ff fee4 	bl	d87fa <_ZN5spark10JSONWriter5writeEc>
    const char* const end = str + size;
   d8a32:	4629      	mov	r1, r5
    while (s != end) {
   d8a34:	42bd      	cmp	r5, r7
   d8a36:	462a      	mov	r2, r5
   d8a38:	d038      	beq.n	d8aac <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x90>
        const char c = *s;
   d8a3a:	f815 6b01 	ldrb.w	r6, [r5], #1
        if (c == '"' || c == '\\' || (c >= 0 && c <= 0x1f)) {
   d8a3e:	2e22      	cmp	r6, #34	; 0x22
   d8a40:	d003      	beq.n	d8a4a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2e>
   d8a42:	2e5c      	cmp	r6, #92	; 0x5c
   d8a44:	d001      	beq.n	d8a4a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2e>
   d8a46:	2e1f      	cmp	r6, #31
   d8a48:	d8f4      	bhi.n	d8a34 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
   d8a4a:	6823      	ldr	r3, [r4, #0]
   d8a4c:	1a52      	subs	r2, r2, r1
   d8a4e:	689b      	ldr	r3, [r3, #8]
   d8a50:	4620      	mov	r0, r4
   d8a52:	4798      	blx	r3
            write('\\');
   d8a54:	215c      	movs	r1, #92	; 0x5c
   d8a56:	4620      	mov	r0, r4
   d8a58:	f7ff fecf 	bl	d87fa <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   d8a5c:	2e0d      	cmp	r6, #13
   d8a5e:	d80a      	bhi.n	d8a76 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x5a>
   d8a60:	2e07      	cmp	r6, #7
   d8a62:	d91c      	bls.n	d8a9e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
   d8a64:	f1a6 0308 	sub.w	r3, r6, #8
   d8a68:	2b05      	cmp	r3, #5
   d8a6a:	d818      	bhi.n	d8a9e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
   d8a6c:	e8df f003 	tbb	[pc, r3]
   d8a70:	17110f0d 	.word	0x17110f0d
   d8a74:	1513      	.short	0x1513
   d8a76:	2e22      	cmp	r6, #34	; 0x22
   d8a78:	d001      	beq.n	d8a7e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x62>
   d8a7a:	2e5c      	cmp	r6, #92	; 0x5c
   d8a7c:	d10f      	bne.n	d8a9e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
                write(c);
   d8a7e:	4631      	mov	r1, r6
                write('b');
   d8a80:	4620      	mov	r0, r4
   d8a82:	f7ff feba 	bl	d87fa <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
   d8a86:	4629      	mov	r1, r5
    while (s != end) {
   d8a88:	e7d4      	b.n	d8a34 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
   d8a8a:	2162      	movs	r1, #98	; 0x62
   d8a8c:	e7f8      	b.n	d8a80 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('t');
   d8a8e:	2174      	movs	r1, #116	; 0x74
   d8a90:	e7f6      	b.n	d8a80 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('n');
   d8a92:	216e      	movs	r1, #110	; 0x6e
   d8a94:	e7f4      	b.n	d8a80 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('f');
   d8a96:	2166      	movs	r1, #102	; 0x66
   d8a98:	e7f2      	b.n	d8a80 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('r');
   d8a9a:	2172      	movs	r1, #114	; 0x72
   d8a9c:	e7f0      	b.n	d8a80 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                printf("u%04x", (unsigned)c);
   d8a9e:	6823      	ldr	r3, [r4, #0]
   d8aa0:	4632      	mov	r2, r6
   d8aa2:	68db      	ldr	r3, [r3, #12]
   d8aa4:	4641      	mov	r1, r8
   d8aa6:	4620      	mov	r0, r4
   d8aa8:	4798      	blx	r3
                break;
   d8aaa:	e7ec      	b.n	d8a86 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6a>
        }
        ++s;
    }
    if (s != str) {
   d8aac:	428d      	cmp	r5, r1
   d8aae:	d004      	beq.n	d8aba <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9e>
        write(str, s - str); // Write remaining characters
   d8ab0:	6823      	ldr	r3, [r4, #0]
   d8ab2:	1a6a      	subs	r2, r5, r1
   d8ab4:	689b      	ldr	r3, [r3, #8]
   d8ab6:	4620      	mov	r0, r4
   d8ab8:	4798      	blx	r3
    }
    write('"');
   d8aba:	2122      	movs	r1, #34	; 0x22
   d8abc:	4620      	mov	r0, r4
   d8abe:	f7ff fe9c 	bl	d87fa <_ZN5spark10JSONWriter5writeEc>
}
   d8ac2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d8ac6:	bf00      	nop
   d8ac8:	000df6bf 	.word	0x000df6bf

000d8acc <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   d8acc:	b513      	push	{r0, r1, r4, lr}
   d8ace:	4604      	mov	r4, r0
   d8ad0:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   d8ad4:	f7ff ff64 	bl	d89a0 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   d8ad8:	4620      	mov	r0, r4
   d8ada:	e9dd 2100 	ldrd	r2, r1, [sp]
   d8ade:	f7ff ff9d 	bl	d8a1c <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   d8ae2:	2302      	movs	r3, #2
}
   d8ae4:	4620      	mov	r0, r4
    state_ = VALUE;
   d8ae6:	7123      	strb	r3, [r4, #4]
}
   d8ae8:	b002      	add	sp, #8
   d8aea:	bd10      	pop	{r4, pc}

000d8aec <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   d8aec:	b513      	push	{r0, r1, r4, lr}
   d8aee:	4604      	mov	r4, r0
   d8af0:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   d8af4:	f7ff ff54 	bl	d89a0 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   d8af8:	4620      	mov	r0, r4
   d8afa:	e9dd 2100 	ldrd	r2, r1, [sp]
   d8afe:	f7ff ff8d 	bl	d8a1c <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   d8b02:	2301      	movs	r3, #1
}
   d8b04:	4620      	mov	r0, r4
    state_ = NEXT;
   d8b06:	7123      	strb	r3, [r4, #4]
}
   d8b08:	b002      	add	sp, #8
   d8b0a:	bd10      	pop	{r4, pc}

000d8b0c <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
   d8b0c:	6880      	ldr	r0, [r0, #8]
   d8b0e:	6803      	ldr	r3, [r0, #0]
   d8b10:	68db      	ldr	r3, [r3, #12]
   d8b12:	4718      	bx	r3

000d8b14 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
   d8b14:	4770      	bx	lr

000d8b16 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   d8b16:	4608      	mov	r0, r1
   d8b18:	b111      	cbz	r1, d8b20 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   d8b1a:	680b      	ldr	r3, [r1, #0]
   d8b1c:	685b      	ldr	r3, [r3, #4]
   d8b1e:	4718      	bx	r3
}
   d8b20:	4770      	bx	lr

000d8b22 <__tcf_0>:
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
    static DefaultLogHandlerFactory factory;
   d8b22:	4770      	bx	lr

000d8b24 <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   d8b24:	4770      	bx	lr

000d8b26 <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
   d8b26:	4770      	bx	lr

000d8b28 <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
   d8b28:	4770      	bx	lr

000d8b2a <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
const char* nextSubcategoryName(const char* &category, size_t &size) {
   d8b2a:	b538      	push	{r3, r4, r5, lr}
   d8b2c:	4604      	mov	r4, r0
   d8b2e:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   d8b30:	6800      	ldr	r0, [r0, #0]
   d8b32:	212e      	movs	r1, #46	; 0x2e
   d8b34:	f003 ff3f 	bl	dc9b6 <strchrnul>
    size = s - category;
   d8b38:	6823      	ldr	r3, [r4, #0]
   d8b3a:	1ac3      	subs	r3, r0, r3
   d8b3c:	602b      	str	r3, [r5, #0]
    if (size) {
   d8b3e:	b123      	cbz	r3, d8b4a <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   d8b40:	7803      	ldrb	r3, [r0, #0]
   d8b42:	b103      	cbz	r3, d8b46 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   d8b44:	3001      	adds	r0, #1
   d8b46:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d8b48:	6020      	str	r0, [r4, #0]
}
   d8b4a:	4618      	mov	r0, r3
   d8b4c:	bd38      	pop	{r3, r4, r5, pc}

000d8b4e <_ZN5spark16JSONStreamWriterD0Ev>:
   d8b4e:	b510      	push	{r4, lr}
   d8b50:	210c      	movs	r1, #12
   d8b52:	4604      	mov	r4, r0
   d8b54:	f002 fe2a 	bl	db7ac <_ZdlPvj>
   d8b58:	4620      	mov	r0, r4
   d8b5a:	bd10      	pop	{r4, pc}

000d8b5c <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   d8b5c:	b510      	push	{r4, lr}
   d8b5e:	2104      	movs	r1, #4
   d8b60:	4604      	mov	r4, r0
   d8b62:	f002 fe23 	bl	db7ac <_ZdlPvj>
   d8b66:	4620      	mov	r0, r4
   d8b68:	bd10      	pop	{r4, pc}

000d8b6a <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   d8b6a:	b510      	push	{r4, lr}
   d8b6c:	2104      	movs	r1, #4
   d8b6e:	4604      	mov	r4, r0
   d8b70:	f002 fe1c 	bl	db7ac <_ZdlPvj>
   d8b74:	4620      	mov	r0, r4
   d8b76:	bd10      	pop	{r4, pc}

000d8b78 <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
   d8b78:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   d8b7a:	f003 ff26 	bl	dc9ca <strcmp>
}
   d8b7e:	fab0 f080 	clz	r0, r0
   d8b82:	0940      	lsrs	r0, r0, #5
   d8b84:	bd08      	pop	{r3, pc}

000d8b86 <__tcf_1>:
   d8b86:	4770      	bx	lr

000d8b88 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != 3
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   d8b88:	b510      	push	{r4, lr}
   d8b8a:	460c      	mov	r4, r1
#if PLATFORM_ID != 3
    if (stream == &Serial) {
   d8b8c:	f002 fbfe 	bl	db38c <_Z16_fetch_usbserialv>
   d8b90:	4284      	cmp	r4, r0
   d8b92:	d010      	beq.n	d8bb6 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   d8b94:	f002 fb58 	bl	db248 <_Z22__fetch_global_Serial1v>
   d8b98:	4284      	cmp	r4, r0
   d8b9a:	d105      	bne.n	d8ba8 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x20>
        Serial1.end();
   d8b9c:	f002 fb54 	bl	db248 <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
}
   d8ba0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
   d8ba4:	f002 bb4d 	b.w	db242 <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   d8ba8:	b12c      	cbz	r4, d8bb6 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
   d8baa:	6823      	ldr	r3, [r4, #0]
   d8bac:	4620      	mov	r0, r4
   d8bae:	685b      	ldr	r3, [r3, #4]
}
   d8bb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d8bb4:	4718      	bx	r3
   d8bb6:	bd10      	pop	{r4, pc}

000d8bb8 <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   d8bb8:	b513      	push	{r0, r1, r4, lr}
   d8bba:	4604      	mov	r4, r0
    return value(val, strlen(val));
   d8bbc:	4608      	mov	r0, r1
   d8bbe:	9101      	str	r1, [sp, #4]
   d8bc0:	f003 ff33 	bl	dca2a <strlen>
   d8bc4:	9901      	ldr	r1, [sp, #4]
   d8bc6:	4602      	mov	r2, r0
   d8bc8:	4620      	mov	r0, r4
}
   d8bca:	b002      	add	sp, #8
   d8bcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
   d8bd0:	f7ff bf8c 	b.w	d8aec <_ZN5spark10JSONWriter5valueEPKcj>

000d8bd4 <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
   d8bd4:	b513      	push	{r0, r1, r4, lr}
   d8bd6:	4604      	mov	r4, r0
    write(str, strlen(str));
   d8bd8:	4608      	mov	r0, r1
   d8bda:	9101      	str	r1, [sp, #4]
   d8bdc:	f003 ff25 	bl	dca2a <strlen>
   d8be0:	6823      	ldr	r3, [r4, #0]
   d8be2:	9901      	ldr	r1, [sp, #4]
   d8be4:	68db      	ldr	r3, [r3, #12]
   d8be6:	4602      	mov	r2, r0
   d8be8:	4620      	mov	r0, r4
}
   d8bea:	b002      	add	sp, #8
   d8bec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
   d8bf0:	4718      	bx	r3

000d8bf2 <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
   d8bf2:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   d8bf4:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
   d8bf6:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   d8bfa:	68db      	ldr	r3, [r3, #12]
   d8bfc:	2201      	movs	r2, #1
   d8bfe:	f10d 0107 	add.w	r1, sp, #7
   d8c02:	4798      	blx	r3
}
   d8c04:	b003      	add	sp, #12
   d8c06:	f85d fb04 	ldr.w	pc, [sp], #4

000d8c0a <_ZN5spark16StreamLogHandler6printfEPKcz>:
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   d8c0a:	b40e      	push	{r1, r2, r3}
   d8c0c:	b503      	push	{r0, r1, lr}
   d8c0e:	ab03      	add	r3, sp, #12
    stream_->vprintf(false, fmt, args);
   d8c10:	2100      	movs	r1, #0
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   d8c12:	f853 2b04 	ldr.w	r2, [r3], #4
    stream_->vprintf(false, fmt, args);
   d8c16:	6a00      	ldr	r0, [r0, #32]
    va_start(args, fmt);
   d8c18:	9301      	str	r3, [sp, #4]
    stream_->vprintf(false, fmt, args);
   d8c1a:	f001 f8e2 	bl	d9de2 <_ZN5Print7vprintfEbPKcSt9__va_list>
}
   d8c1e:	b002      	add	sp, #8
   d8c20:	f85d eb04 	ldr.w	lr, [sp], #4
   d8c24:	b003      	add	sp, #12
   d8c26:	4770      	bx	lr

000d8c28 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   d8c28:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
   d8c2c:	e9d0 9500 	ldrd	r9, r5, [r0]
   d8c30:	f04f 0814 	mov.w	r8, #20
   d8c34:	fb08 f505 	mul.w	r5, r8, r5
   d8c38:	9300      	str	r3, [sp, #0]
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   d8c3a:	10ab      	asrs	r3, r5, #2
   d8c3c:	4d18      	ldr	r5, [pc, #96]	; (d8ca0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x78>)
   d8c3e:	4617      	mov	r7, r2
   d8c40:	435d      	muls	r5, r3
   d8c42:	464c      	mov	r4, r9
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
   d8c44:	2d00      	cmp	r5, #0
   d8c46:	dd23      	ble.n	d8c90 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x68>
	{
	  _DistanceType __half = __len >> 1;
   d8c48:	106e      	asrs	r6, r5, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
   d8c4a:	fb08 f006 	mul.w	r0, r8, r6
   d8c4e:	eb04 0a00 	add.w	sl, r4, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   d8c52:	463a      	mov	r2, r7
   d8c54:	f8ba b004 	ldrh.w	fp, [sl, #4]
   d8c58:	5820      	ldr	r0, [r4, r0]
   d8c5a:	9101      	str	r1, [sp, #4]
   d8c5c:	455f      	cmp	r7, fp
   d8c5e:	bf28      	it	cs
   d8c60:	465a      	movcs	r2, fp
   d8c62:	f003 feea 	bl	dca3a <strncmp>
                if (cmp == 0) {
   d8c66:	9901      	ldr	r1, [sp, #4]
   d8c68:	2301      	movs	r3, #1
   d8c6a:	b978      	cbnz	r0, d8c8c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
                    if (node.size == value.second) { // Lengths are equal
   d8c6c:	455f      	cmp	r7, fp
   d8c6e:	d103      	bne.n	d8c78 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   d8c70:	9a00      	ldr	r2, [sp, #0]
   d8c72:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   d8c74:	4635      	mov	r5, r6
   d8c76:	e7e5      	b.n	d8c44 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
                    return node.size < value.second;
   d8c78:	bf8c      	ite	hi
   d8c7a:	2001      	movhi	r0, #1
   d8c7c:	2000      	movls	r0, #0
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
   d8c7e:	2800      	cmp	r0, #0
   d8c80:	d0f8      	beq.n	d8c74 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x4c>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   d8c82:	1bae      	subs	r6, r5, r6
	      ++__first;
   d8c84:	f10a 0414 	add.w	r4, sl, #20
	      __len = __len - __half - 1;
   d8c88:	3e01      	subs	r6, #1
   d8c8a:	e7f3      	b.n	d8c74 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x4c>
                return cmp < 0;
   d8c8c:	0fc0      	lsrs	r0, r0, #31
   d8c8e:	e7f6      	b.n	d8c7e <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
      return __last - __first;
   d8c90:	eba4 0409 	sub.w	r4, r4, r9
}
   d8c94:	4802      	ldr	r0, [pc, #8]	; (d8ca0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x78>)
   d8c96:	10a4      	asrs	r4, r4, #2
   d8c98:	4360      	muls	r0, r4
   d8c9a:	b003      	add	sp, #12
   d8c9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d8ca0:	cccccccd 	.word	0xcccccccd

000d8ca4 <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
   d8ca4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
   d8ca6:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
   d8ca8:	7e06      	ldrb	r6, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
   d8caa:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
   d8cac:	b30b      	cbz	r3, d8cf2 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
   d8cae:	b301      	cbz	r1, d8cf2 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
        size_t size = 0; // Name length
   d8cb0:	2500      	movs	r5, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   d8cb2:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
   d8cb6:	9503      	str	r5, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
   d8cb8:	a903      	add	r1, sp, #12
   d8cba:	a801      	add	r0, sp, #4
   d8cbc:	f7ff ff35 	bl	d8b2a <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   d8cc0:	4601      	mov	r1, r0
   d8cc2:	b1b0      	cbz	r0, d8cf2 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
            const int index = nodeIndex(*pNodes, name, size, found);
   d8cc4:	f10d 030b 	add.w	r3, sp, #11
   d8cc8:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
   d8cca:	f88d 500b 	strb.w	r5, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
   d8cce:	4620      	mov	r0, r4
   d8cd0:	f7ff ffaa 	bl	d8c28 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   d8cd4:	f89d 300b 	ldrb.w	r3, [sp, #11]
   d8cd8:	b15b      	cbz	r3, d8cf2 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
    return data_[i];
   d8cda:	6824      	ldr	r4, [r4, #0]
   d8cdc:	2314      	movs	r3, #20
   d8cde:	fb03 4000 	mla	r0, r3, r0, r4
            pNodes = &node.nodes;
   d8ce2:	f100 0408 	add.w	r4, r0, #8
            if (node.level >= 0) {
   d8ce6:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
   d8cea:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   d8cec:	bfa8      	it	ge
   d8cee:	b2de      	uxtbge	r6, r3
        while ((name = nextSubcategoryName(category, size))) {
   d8cf0:	e7e2      	b.n	d8cb8 <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
   d8cf2:	4630      	mov	r0, r6
   d8cf4:	b004      	add	sp, #16
   d8cf6:	bd70      	pop	{r4, r5, r6, pc}

000d8cf8 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   d8cf8:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   d8cfa:	4c09      	ldr	r4, [pc, #36]	; (d8d20 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
   d8cfc:	7823      	ldrb	r3, [r4, #0]
   d8cfe:	f3bf 8f5b 	dmb	ish
   d8d02:	07db      	lsls	r3, r3, #31
   d8d04:	d409      	bmi.n	d8d1a <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   d8d06:	4620      	mov	r0, r4
   d8d08:	f7fb f9d6 	bl	d40b8 <__cxa_guard_acquire>
   d8d0c:	b128      	cbz	r0, d8d1a <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   d8d0e:	4620      	mov	r0, r4
   d8d10:	f7fb f9d7 	bl	d40c2 <__cxa_guard_release>
   d8d14:	4803      	ldr	r0, [pc, #12]	; (d8d24 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   d8d16:	f003 fdd1 	bl	dc8bc <atexit>
}
   d8d1a:	4803      	ldr	r0, [pc, #12]	; (d8d28 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   d8d1c:	bd10      	pop	{r4, pc}
   d8d1e:	bf00      	nop
   d8d20:	2003e634 	.word	0x2003e634
   d8d24:	000d8b23 	.word	0x000d8b23
   d8d28:	2003deb4 	.word	0x2003deb4

000d8d2c <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   d8d2c:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   d8d2e:	4c09      	ldr	r4, [pc, #36]	; (d8d54 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
   d8d30:	7823      	ldrb	r3, [r4, #0]
   d8d32:	f3bf 8f5b 	dmb	ish
   d8d36:	07db      	lsls	r3, r3, #31
   d8d38:	d409      	bmi.n	d8d4e <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   d8d3a:	4620      	mov	r0, r4
   d8d3c:	f7fb f9bc 	bl	d40b8 <__cxa_guard_acquire>
   d8d40:	b128      	cbz	r0, d8d4e <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   d8d42:	4620      	mov	r0, r4
   d8d44:	f7fb f9bd 	bl	d40c2 <__cxa_guard_release>
   d8d48:	4803      	ldr	r0, [pc, #12]	; (d8d58 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   d8d4a:	f003 fdb7 	bl	dc8bc <atexit>
    return &factory;
}
   d8d4e:	4803      	ldr	r0, [pc, #12]	; (d8d5c <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   d8d50:	bd10      	pop	{r4, pc}
   d8d52:	bf00      	nop
   d8d54:	2003e638 	.word	0x2003e638
   d8d58:	000d8b87 	.word	0x000d8b87
   d8d5c:	2003deb8 	.word	0x2003deb8

000d8d60 <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   d8d60:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   d8d62:	2500      	movs	r5, #0
   d8d64:	4604      	mov	r4, r0
   d8d66:	e9c0 5500 	strd	r5, r5, [r0]
   d8d6a:	e9c0 5504 	strd	r5, r5, [r0, #16]
   d8d6e:	6085      	str	r5, [r0, #8]
   d8d70:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
   d8d72:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
   d8d76:	f7fe fb8f 	bl	d7498 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   d8d7a:	f7ff ffbd 	bl	d8cf8 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   d8d7e:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   d8d80:	f7ff ffd4 	bl	d8d2c <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   d8d84:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   d8d86:	6220      	str	r0, [r4, #32]
}
   d8d88:	4620      	mov	r0, r4
   d8d8a:	bd38      	pop	{r3, r4, r5, pc}

000d8d8c <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   d8d8c:	b510      	push	{r4, lr}
    static LogManager mgr;
   d8d8e:	4c0a      	ldr	r4, [pc, #40]	; (d8db8 <_ZN5spark10LogManager8instanceEv+0x2c>)
   d8d90:	7823      	ldrb	r3, [r4, #0]
   d8d92:	f3bf 8f5b 	dmb	ish
   d8d96:	07db      	lsls	r3, r3, #31
   d8d98:	d40c      	bmi.n	d8db4 <_ZN5spark10LogManager8instanceEv+0x28>
   d8d9a:	4620      	mov	r0, r4
   d8d9c:	f7fb f98c 	bl	d40b8 <__cxa_guard_acquire>
   d8da0:	b140      	cbz	r0, d8db4 <_ZN5spark10LogManager8instanceEv+0x28>
   d8da2:	4806      	ldr	r0, [pc, #24]	; (d8dbc <_ZN5spark10LogManager8instanceEv+0x30>)
   d8da4:	f7ff ffdc 	bl	d8d60 <_ZN5spark10LogManagerC1Ev>
   d8da8:	4620      	mov	r0, r4
   d8daa:	f7fb f98a 	bl	d40c2 <__cxa_guard_release>
   d8dae:	4804      	ldr	r0, [pc, #16]	; (d8dc0 <_ZN5spark10LogManager8instanceEv+0x34>)
   d8db0:	f003 fd84 	bl	dc8bc <atexit>
    return &mgr;
}
   d8db4:	4801      	ldr	r0, [pc, #4]	; (d8dbc <_ZN5spark10LogManager8instanceEv+0x30>)
   d8db6:	bd10      	pop	{r4, pc}
   d8db8:	2003e630 	.word	0x2003e630
   d8dbc:	2003e640 	.word	0x2003e640
   d8dc0:	000d926d 	.word	0x000d926d

000d8dc4 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   d8dc4:	4a02      	ldr	r2, [pc, #8]	; (d8dd0 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   d8dc6:	4903      	ldr	r1, [pc, #12]	; (d8dd4 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   d8dc8:	4803      	ldr	r0, [pc, #12]	; (d8dd8 <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   d8dca:	2300      	movs	r3, #0
   d8dcc:	f7fe bd94 	b.w	d78f8 <log_set_callbacks>
   d8dd0:	000d90f5 	.word	0x000d90f5
   d8dd4:	000d9081 	.word	0x000d9081
   d8dd8:	000d9001 	.word	0x000d9001

000d8ddc <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   d8ddc:	2300      	movs	r3, #0
   d8dde:	461a      	mov	r2, r3
   d8de0:	4619      	mov	r1, r3
   d8de2:	4618      	mov	r0, r3
   d8de4:	f7fe bd88 	b.w	d78f8 <log_set_callbacks>

000d8de8 <_ZNK5spark18JSONObjectIterator5valueEv>:
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   d8de8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONValue(v_, d_);
   d8dea:	690d      	ldr	r5, [r1, #16]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d8dec:	f851 3b04 	ldr.w	r3, [r1], #4
   d8df0:	9300      	str	r3, [sp, #0]
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   d8df2:	4604      	mov	r4, r0
   d8df4:	a801      	add	r0, sp, #4
   d8df6:	f7fe ff30 	bl	d7c5a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return JSONValue(v_, d_);
   d8dfa:	466a      	mov	r2, sp
   d8dfc:	4629      	mov	r1, r5
   d8dfe:	4620      	mov	r0, r4
   d8e00:	f7ff fd1e 	bl	d8840 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d8e04:	a801      	add	r0, sp, #4
   d8e06:	f7fc ffc6 	bl	d5d96 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d8e0a:	4620      	mov	r0, r4
   d8e0c:	b003      	add	sp, #12
   d8e0e:	bd30      	pop	{r4, r5, pc}

000d8e10 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   d8e10:	b537      	push	{r0, r1, r2, r4, r5, lr}
        JSONObjectIterator(value.t_, value.d_) {
   d8e12:	688d      	ldr	r5, [r1, #8]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d8e14:	f851 3b04 	ldr.w	r3, [r1], #4
   d8e18:	9300      	str	r3, [sp, #0]
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   d8e1a:	4604      	mov	r4, r0
   d8e1c:	a801      	add	r0, sp, #4
   d8e1e:	f7fe ff1c 	bl	d7c5a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        JSONObjectIterator(value.t_, value.d_) {
   d8e22:	466a      	mov	r2, sp
   d8e24:	4629      	mov	r1, r5
   d8e26:	4620      	mov	r0, r4
   d8e28:	f7ff fd86 	bl	d8938 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d8e2c:	a801      	add	r0, sp, #4
   d8e2e:	f7fc ffb2 	bl	d5d96 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d8e32:	4620      	mov	r0, r4
   d8e34:	b003      	add	sp, #12
   d8e36:	bd30      	pop	{r4, r5, pc}

000d8e38 <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
   d8e38:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONString(k_, d_);
   d8e3a:	68cd      	ldr	r5, [r1, #12]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d8e3c:	f851 3b04 	ldr.w	r3, [r1], #4
   d8e40:	9300      	str	r3, [sp, #0]
inline spark::JSONString spark::JSONObjectIterator::name() const {
   d8e42:	4604      	mov	r4, r0
   d8e44:	a801      	add	r0, sp, #4
   d8e46:	f7fe ff08 	bl	d7c5a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return JSONString(k_, d_);
   d8e4a:	466a      	mov	r2, sp
   d8e4c:	4629      	mov	r1, r5
   d8e4e:	4620      	mov	r0, r4
   d8e50:	f7ff fd4e 	bl	d88f0 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d8e54:	a801      	add	r0, sp, #4
   d8e56:	f7fc ff9e 	bl	d5d96 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d8e5a:	4620      	mov	r0, r4
   d8e5c:	b003      	add	sp, #12
   d8e5e:	bd30      	pop	{r4, r5, pc}

000d8e60 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   d8e60:	b570      	push	{r4, r5, r6, lr}
   d8e62:	b08a      	sub	sp, #40	; 0x28
   d8e64:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   d8e66:	4601      	mov	r1, r0
   d8e68:	a804      	add	r0, sp, #16
   d8e6a:	f7ff ffd1 	bl	d8e10 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
   d8e6e:	4e14      	ldr	r6, [pc, #80]	; (d8ec0 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
   d8e70:	a804      	add	r0, sp, #16
   d8e72:	f7ff fd79 	bl	d8968 <_ZN5spark18JSONObjectIterator4nextEv>
   d8e76:	b1e8      	cbz	r0, d8eb4 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
   d8e78:	a904      	add	r1, sp, #16
   d8e7a:	4668      	mov	r0, sp
   d8e7c:	f7ff ffdc 	bl	d8e38 <_ZNK5spark18JSONObjectIterator4nameEv>
   d8e80:	9802      	ldr	r0, [sp, #8]
   d8e82:	4631      	mov	r1, r6
   d8e84:	f7ff fe78 	bl	d8b78 <_ZNK5spark10JSONStringeqEPKc.isra.0>
   d8e88:	4604      	mov	r4, r0
   d8e8a:	b110      	cbz	r0, d8e92 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
   d8e8c:	1e2c      	subs	r4, r5, #0
   d8e8e:	bf18      	it	ne
   d8e90:	2401      	movne	r4, #1
   d8e92:	a801      	add	r0, sp, #4
   d8e94:	f7fc ff7f 	bl	d5d96 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d8e98:	2c00      	cmp	r4, #0
   d8e9a:	d0e9      	beq.n	d8e70 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
   d8e9c:	a904      	add	r1, sp, #16
   d8e9e:	4668      	mov	r0, sp
   d8ea0:	f7ff ffa2 	bl	d8de8 <_ZNK5spark18JSONObjectIterator5valueEv>
   d8ea4:	4668      	mov	r0, sp
   d8ea6:	f7ff fd01 	bl	d88ac <_ZNK5spark9JSONValue5toIntEv>
   d8eaa:	6028      	str	r0, [r5, #0]
   d8eac:	a801      	add	r0, sp, #4
   d8eae:	f7fc ff72 	bl	d5d96 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d8eb2:	e7dd      	b.n	d8e70 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
   d8eb4:	a805      	add	r0, sp, #20
   d8eb6:	f7fc ff6e 	bl	d5d96 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d8eba:	b00a      	add	sp, #40	; 0x28
   d8ebc:	bd70      	pop	{r4, r5, r6, pc}
   d8ebe:	bf00      	nop
   d8ec0:	000df6c5 	.word	0x000df6c5

000d8ec4 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   d8ec4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d8ec6:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
   d8ec8:	4620      	mov	r0, r4
   d8eca:	4912      	ldr	r1, [pc, #72]	; (d8f14 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>)
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   d8ecc:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
   d8ece:	f003 fd7c 	bl	dc9ca <strcmp>
   d8ed2:	b948      	cbnz	r0, d8ee8 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x24>
        Serial.begin();
   d8ed4:	f002 fa5a 	bl	db38c <_Z16_fetch_usbserialv>
   d8ed8:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d8edc:	f002 fa46 	bl	db36c <_ZN9USBSerial5beginEl>
        return &Serial;
   d8ee0:	f002 fa54 	bl	db38c <_Z16_fetch_usbserialv>
}
   d8ee4:	b003      	add	sp, #12
   d8ee6:	bd30      	pop	{r4, r5, pc}
    if (strcmp(type, "Serial1") == 0) {
   d8ee8:	490b      	ldr	r1, [pc, #44]	; (d8f18 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
   d8eea:	4620      	mov	r0, r4
   d8eec:	f003 fd6d 	bl	dc9ca <strcmp>
   d8ef0:	b970      	cbnz	r0, d8f10 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
        int baud = 9600;
   d8ef2:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
   d8ef6:	a901      	add	r1, sp, #4
   d8ef8:	4628      	mov	r0, r5
        int baud = 9600;
   d8efa:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
   d8efc:	f7ff ffb0 	bl	d8e60 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   d8f00:	f002 f9a2 	bl	db248 <_Z22__fetch_global_Serial1v>
   d8f04:	9901      	ldr	r1, [sp, #4]
   d8f06:	f002 f999 	bl	db23c <_ZN11USARTSerial5beginEm>
        return &Serial1;
   d8f0a:	f002 f99d 	bl	db248 <_Z22__fetch_global_Serial1v>
   d8f0e:	e7e9      	b.n	d8ee4 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x20>
    return nullptr;
   d8f10:	2000      	movs	r0, #0
   d8f12:	e7e7      	b.n	d8ee4 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x20>
   d8f14:	000df6ca 	.word	0x000df6ca
   d8f18:	000df6d1 	.word	0x000df6d1

000d8f1c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   d8f1c:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d8f1e:	e9d0 5300 	ldrd	r5, r3, [r0]
   d8f22:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   d8f24:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d8f26:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   d8f2a:	42ae      	cmp	r6, r5
   d8f2c:	d005      	beq.n	d8f3a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
   d8f2e:	f105 0008 	add.w	r0, r5, #8
   d8f32:	f7ff fff3 	bl	d8f1c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d8f36:	3514      	adds	r5, #20
   d8f38:	e7f7      	b.n	d8f2a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   d8f3a:	6820      	ldr	r0, [r4, #0]
   d8f3c:	f7fe fe06 	bl	d7b4c <free>
}
   d8f40:	4620      	mov	r0, r4
   d8f42:	bd70      	pop	{r4, r5, r6, pc}

000d8f44 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   d8f44:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d8f46:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   d8f4a:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d8f4c:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
   d8f50:	42ae      	cmp	r6, r5
   d8f52:	d004      	beq.n	d8f5e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   d8f54:	4628      	mov	r0, r5
   d8f56:	f000 ffe3 	bl	d9f20 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
   d8f5a:	3510      	adds	r5, #16
   d8f5c:	e7f8      	b.n	d8f50 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   d8f5e:	6820      	ldr	r0, [r4, #0]
   d8f60:	f7fe fdf4 	bl	d7b4c <free>
}
   d8f64:	4620      	mov	r0, r4
   d8f66:	bd70      	pop	{r4, r5, r6, pc}

000d8f68 <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
   d8f68:	b510      	push	{r4, lr}
   d8f6a:	4604      	mov	r4, r0
   d8f6c:	300c      	adds	r0, #12
   d8f6e:	f7ff ffd5 	bl	d8f1c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d8f72:	4620      	mov	r0, r4
   d8f74:	f7ff ffe6 	bl	d8f44 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   d8f78:	4620      	mov	r0, r4
   d8f7a:	bd10      	pop	{r4, pc}

000d8f7c <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
   d8f7c:	b510      	push	{r4, lr}
    virtual ~LogHandler() = default;
   d8f7e:	4b04      	ldr	r3, [pc, #16]	; (d8f90 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
class StreamLogHandler: public LogHandler {
   d8f80:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
   d8f82:	f840 3b04 	str.w	r3, [r0], #4
   d8f86:	f7ff ffef 	bl	d8f68 <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
   d8f8a:	4620      	mov	r0, r4
   d8f8c:	bd10      	pop	{r4, pc}
   d8f8e:	bf00      	nop
   d8f90:	000def2c 	.word	0x000def2c

000d8f94 <_ZN5spark16StreamLogHandlerD0Ev>:
   d8f94:	b510      	push	{r4, lr}
   d8f96:	4604      	mov	r4, r0
   d8f98:	f7ff fff0 	bl	d8f7c <_ZN5spark16StreamLogHandlerD1Ev>
   d8f9c:	4620      	mov	r0, r4
   d8f9e:	2124      	movs	r1, #36	; 0x24
   d8fa0:	f002 fc04 	bl	db7ac <_ZdlPvj>
   d8fa4:	4620      	mov	r0, r4
   d8fa6:	bd10      	pop	{r4, pc}

000d8fa8 <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
   d8fa8:	b510      	push	{r4, lr}
   d8faa:	4b03      	ldr	r3, [pc, #12]	; (d8fb8 <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   d8fac:	6003      	str	r3, [r0, #0]
   d8fae:	4604      	mov	r4, r0
   d8fb0:	f7ff ffe4 	bl	d8f7c <_ZN5spark16StreamLogHandlerD1Ev>
   d8fb4:	4620      	mov	r0, r4
   d8fb6:	bd10      	pop	{r4, pc}
   d8fb8:	000df768 	.word	0x000df768

000d8fbc <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   d8fbc:	b510      	push	{r4, lr}
   d8fbe:	4604      	mov	r4, r0
   d8fc0:	f7ff fff2 	bl	d8fa8 <_ZN5spark20JSONStreamLogHandlerD1Ev>
   d8fc4:	4620      	mov	r0, r4
   d8fc6:	2124      	movs	r1, #36	; 0x24
   d8fc8:	f002 fbf0 	bl	db7ac <_ZdlPvj>
   d8fcc:	4620      	mov	r0, r4
   d8fce:	bd10      	pop	{r4, pc}

000d8fd0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
   d8fd0:	2200      	movs	r2, #0
   d8fd2:	e9c0 2200 	strd	r2, r2, [r0]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   d8fd6:	b510      	push	{r4, lr}
        capacity_(0) {
   d8fd8:	6082      	str	r2, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   d8fda:	680c      	ldr	r4, [r1, #0]
   d8fdc:	6004      	str	r4, [r0, #0]
   d8fde:	684c      	ldr	r4, [r1, #4]
   d8fe0:	6044      	str	r4, [r0, #4]
   d8fe2:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d8fe4:	600a      	str	r2, [r1, #0]
   d8fe6:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   d8fe8:	6084      	str	r4, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d8fea:	608a      	str	r2, [r1, #8]
}
   d8fec:	bd10      	pop	{r4, pc}

000d8fee <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      ~lock_guard()
   d8fee:	b510      	push	{r4, lr}
      { _M_device.unlock(); }
   d8ff0:	6803      	ldr	r3, [r0, #0]
      ~lock_guard()
   d8ff2:	4604      	mov	r4, r0
    }

    void lock() { os_mutex_recursive_lock(handle_); }
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d8ff4:	6818      	ldr	r0, [r3, #0]
   d8ff6:	f7fe fa67 	bl	d74c8 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   d8ffa:	4620      	mov	r0, r4
   d8ffc:	bd10      	pop	{r4, pc}
	...

000d9000 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   d9000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d9004:	b087      	sub	sp, #28
   d9006:	4680      	mov	r8, r0
   d9008:	9303      	str	r3, [sp, #12]
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   d900a:	4b1c      	ldr	r3, [pc, #112]	; (d907c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
   d900c:	685b      	ldr	r3, [r3, #4]
   d900e:	f3c3 0308 	ubfx	r3, r3, #0, #9
   d9012:	4689      	mov	r9, r1
   d9014:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d9016:	b96b      	cbnz	r3, d9034 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
   d9018:	f7ff feb8 	bl	d8d8c <_ZN5spark10LogManager8instanceEv>
   d901c:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   d901e:	f100 0324 	add.w	r3, r0, #36	; 0x24
    void lock() { os_mutex_recursive_lock(handle_); }
   d9022:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d9024:	9305      	str	r3, [sp, #20]
   d9026:	f7fe fa47 	bl	d74b8 <os_mutex_recursive_lock>
        // prevent re-entry
        if (that->isActive()) {
   d902a:	7b23      	ldrb	r3, [r4, #12]
   d902c:	b12b      	cbz	r3, d903a <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
   d902e:	a805      	add	r0, sp, #20
   d9030:	f7ff ffdd 	bl	d8fee <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   d9034:	b007      	add	sp, #28
   d9036:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   d903a:	2301      	movs	r3, #1
   d903c:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
   d903e:	e9d4 5300 	ldrd	r5, r3, [r4]
            handler->message(msg, (LogLevel)level, category, *attr);
   d9042:	fa5f f989 	uxtb.w	r9, r9
   d9046:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   d904a:	45aa      	cmp	sl, r5
   d904c:	d012      	beq.n	d9074 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
   d904e:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
   d9052:	4631      	mov	r1, r6
   d9054:	1d38      	adds	r0, r7, #4
   d9056:	f7ff fe25 	bl	d8ca4 <_ZNK5spark6detail9LogFilter5levelEPKc>
   d905a:	4581      	cmp	r9, r0
   d905c:	d3f5      	bcc.n	d904a <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
   d905e:	683b      	ldr	r3, [r7, #0]
   d9060:	9a03      	ldr	r2, [sp, #12]
   d9062:	9200      	str	r2, [sp, #0]
   d9064:	f8d3 b008 	ldr.w	fp, [r3, #8]
   d9068:	464a      	mov	r2, r9
   d906a:	4633      	mov	r3, r6
   d906c:	4641      	mov	r1, r8
   d906e:	4638      	mov	r0, r7
   d9070:	47d8      	blx	fp
   d9072:	e7ea      	b.n	d904a <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
   d9074:	2300      	movs	r3, #0
   d9076:	7323      	strb	r3, [r4, #12]
   d9078:	e7d9      	b.n	d902e <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
   d907a:	bf00      	nop
   d907c:	e000ed00 	.word	0xe000ed00

000d9080 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   d9080:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d9084:	469b      	mov	fp, r3
   d9086:	4b1a      	ldr	r3, [pc, #104]	; (d90f0 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
   d9088:	685b      	ldr	r3, [r3, #4]
   d908a:	f3c3 0308 	ubfx	r3, r3, #0, #9
   d908e:	4680      	mov	r8, r0
   d9090:	4689      	mov	r9, r1
   d9092:	4616      	mov	r6, r2
    if (HAL_IsISR()) {
   d9094:	b96b      	cbnz	r3, d90b2 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
   d9096:	f7ff fe79 	bl	d8d8c <_ZN5spark10LogManager8instanceEv>
   d909a:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   d909c:	f100 0324 	add.w	r3, r0, #36	; 0x24
   d90a0:	6a40      	ldr	r0, [r0, #36]	; 0x24
   d90a2:	9301      	str	r3, [sp, #4]
   d90a4:	f7fe fa08 	bl	d74b8 <os_mutex_recursive_lock>
        if (that->isActive()) {
   d90a8:	7b23      	ldrb	r3, [r4, #12]
   d90aa:	b12b      	cbz	r3, d90b8 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
   d90ac:	a801      	add	r0, sp, #4
   d90ae:	f7ff ff9e 	bl	d8fee <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   d90b2:	b003      	add	sp, #12
   d90b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
   d90b8:	2301      	movs	r3, #1
   d90ba:	7323      	strb	r3, [r4, #12]
   d90bc:	e9d4 5300 	ldrd	r5, r3, [r4]
    if (level >= filter_.level(category)) {
   d90c0:	b2f6      	uxtb	r6, r6
   d90c2:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   d90c6:	4555      	cmp	r5, sl
   d90c8:	d00e      	beq.n	d90e8 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
   d90ca:	f855 7b04 	ldr.w	r7, [r5], #4
   d90ce:	4659      	mov	r1, fp
   d90d0:	1d38      	adds	r0, r7, #4
   d90d2:	f7ff fde7 	bl	d8ca4 <_ZNK5spark6detail9LogFilter5levelEPKc>
   d90d6:	4286      	cmp	r6, r0
   d90d8:	d3f5      	bcc.n	d90c6 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
   d90da:	683b      	ldr	r3, [r7, #0]
   d90dc:	464a      	mov	r2, r9
   d90de:	68db      	ldr	r3, [r3, #12]
   d90e0:	4641      	mov	r1, r8
   d90e2:	4638      	mov	r0, r7
   d90e4:	4798      	blx	r3
   d90e6:	e7ee      	b.n	d90c6 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
   d90e8:	2300      	movs	r3, #0
   d90ea:	7323      	strb	r3, [r4, #12]
   d90ec:	e7de      	b.n	d90ac <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
   d90ee:	bf00      	nop
   d90f0:	e000ed00 	.word	0xe000ed00

000d90f4 <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   d90f4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d90f8:	4b16      	ldr	r3, [pc, #88]	; (d9154 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
   d90fa:	685b      	ldr	r3, [r3, #4]
   d90fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
   d9100:	4605      	mov	r5, r0
   d9102:	460f      	mov	r7, r1
    if (HAL_IsISR()) {
   d9104:	bb1b      	cbnz	r3, d914e <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
   d9106:	f7ff fe41 	bl	d8d8c <_ZN5spark10LogManager8instanceEv>
    LOG_WITH_LOCK(that->mutex_) {
   d910a:	f100 0324 	add.w	r3, r0, #36	; 0x24
    LogManager *that = instance();
   d910e:	4604      	mov	r4, r0
   d9110:	6a40      	ldr	r0, [r0, #36]	; 0x24
   d9112:	9301      	str	r3, [sp, #4]
   d9114:	f7fe f9d0 	bl	d74b8 <os_mutex_recursive_lock>
   d9118:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
   d911c:	2446      	movs	r4, #70	; 0x46
   d911e:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   d9122:	45b0      	cmp	r8, r6
   d9124:	d109      	bne.n	d913a <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
   d9126:	a801      	add	r0, sp, #4
   d9128:	f7ff ff61 	bl	d8fee <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
   d912c:	42a5      	cmp	r5, r4
   d912e:	bfb4      	ite	lt
   d9130:	2000      	movlt	r0, #0
   d9132:	2001      	movge	r0, #1
}
   d9134:	b002      	add	sp, #8
   d9136:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
   d913a:	f856 0b04 	ldr.w	r0, [r6], #4
   d913e:	4639      	mov	r1, r7
   d9140:	3004      	adds	r0, #4
   d9142:	f7ff fdaf 	bl	d8ca4 <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
   d9146:	4284      	cmp	r4, r0
   d9148:	bfa8      	it	ge
   d914a:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
   d914c:	e7e9      	b.n	d9122 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
   d914e:	2000      	movs	r0, #0
   d9150:	e7f0      	b.n	d9134 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
   d9152:	bf00      	nop
   d9154:	e000ed00 	.word	0xe000ed00

000d9158 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d9158:	b570      	push	{r4, r5, r6, lr}
   d915a:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   d915c:	e9d0 0200 	ldrd	r0, r2, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d9160:	460b      	mov	r3, r1
    T* const p = find(data_, data_ + size_, value);
   d9162:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
   d9166:	4282      	cmp	r2, r0
   d9168:	d007      	beq.n	d917a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x22>
   d916a:	4601      	mov	r1, r0
            if (*p == value) {
   d916c:	681d      	ldr	r5, [r3, #0]
   d916e:	f851 6b04 	ldr.w	r6, [r1], #4
   d9172:	42ae      	cmp	r6, r5
   d9174:	d003      	beq.n	d917e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x26>
   d9176:	4608      	mov	r0, r1
   d9178:	e7f5      	b.n	d9166 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
   d917a:	2000      	movs	r0, #0
}
   d917c:	bd70      	pop	{r4, r5, r6, pc}
        ::memmove(dest, p, (end - p) * sizeof(T));
   d917e:	1a52      	subs	r2, r2, r1
   d9180:	f003 fbc6 	bl	dc910 <memmove>
    --size_;
   d9184:	6863      	ldr	r3, [r4, #4]
   d9186:	3b01      	subs	r3, #1
   d9188:	6063      	str	r3, [r4, #4]
    return true;
   d918a:	2001      	movs	r0, #1
   d918c:	e7f6      	b.n	d917c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x24>

000d918e <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
   d918e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    LOG_WITH_LOCK(mutex_) {
   d9190:	f100 0324 	add.w	r3, r0, #36	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
   d9194:	4604      	mov	r4, r0
   d9196:	6a40      	ldr	r0, [r0, #36]	; 0x24
   d9198:	9101      	str	r1, [sp, #4]
   d919a:	9303      	str	r3, [sp, #12]
   d919c:	f7fe f98c 	bl	d74b8 <os_mutex_recursive_lock>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   d91a0:	a901      	add	r1, sp, #4
   d91a2:	4620      	mov	r0, r4
   d91a4:	f7ff ffd8 	bl	d9158 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   d91a8:	b118      	cbz	r0, d91b2 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
   d91aa:	6863      	ldr	r3, [r4, #4]
   d91ac:	b90b      	cbnz	r3, d91b2 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
   d91ae:	f7ff fe15 	bl	d8ddc <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   d91b2:	a803      	add	r0, sp, #12
   d91b4:	f7ff ff1b 	bl	d8fee <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   d91b8:	b004      	add	sp, #16
   d91ba:	bd10      	pop	{r4, pc}

000d91bc <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
void spark::LogManager::destroyFactoryHandlers() {
   d91bc:	b570      	push	{r4, r5, r6, lr}
    return data_ + size_;
   d91be:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
   d91c2:	2318      	movs	r3, #24
   d91c4:	4604      	mov	r4, r0
   d91c6:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   d91ca:	42ae      	cmp	r6, r5
   d91cc:	d015      	beq.n	d91fa <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   d91ce:	f105 0110 	add.w	r1, r5, #16
   d91d2:	4620      	mov	r0, r4
   d91d4:	f7ff ffc0 	bl	d9158 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   d91d8:	6863      	ldr	r3, [r4, #4]
   d91da:	b90b      	cbnz	r3, d91e0 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   d91dc:	f7ff fdfe 	bl	d8ddc <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
   d91e0:	69e0      	ldr	r0, [r4, #28]
   d91e2:	6929      	ldr	r1, [r5, #16]
   d91e4:	6803      	ldr	r3, [r0, #0]
   d91e6:	68db      	ldr	r3, [r3, #12]
   d91e8:	4798      	blx	r3
        if (h.stream) {
   d91ea:	6969      	ldr	r1, [r5, #20]
   d91ec:	b119      	cbz	r1, d91f6 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   d91ee:	6a20      	ldr	r0, [r4, #32]
   d91f0:	6803      	ldr	r3, [r0, #0]
   d91f2:	68db      	ldr	r3, [r3, #12]
   d91f4:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
   d91f6:	3518      	adds	r5, #24
   d91f8:	e7e7      	b.n	d91ca <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
   d91fa:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   d91fe:	2618      	movs	r6, #24
   d9200:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   d9204:	42ae      	cmp	r6, r5
   d9206:	d004      	beq.n	d9212 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
   d9208:	4628      	mov	r0, r5
   d920a:	f000 fe89 	bl	d9f20 <_ZN6StringD1Ev>
   d920e:	3518      	adds	r5, #24
   d9210:	e7f8      	b.n	d9204 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
   d9212:	2300      	movs	r3, #0
   d9214:	6163      	str	r3, [r4, #20]
}
   d9216:	bd70      	pop	{r4, r5, r6, pc}

000d9218 <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
   d9218:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d921a:	4604      	mov	r4, r0
    resetSystemCallbacks();
   d921c:	f7ff fdde 	bl	d8ddc <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   d9220:	f104 0324 	add.w	r3, r4, #36	; 0x24
   d9224:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d9226:	9301      	str	r3, [sp, #4]
   d9228:	f7fe f946 	bl	d74b8 <os_mutex_recursive_lock>
         destroyFactoryHandlers();
   d922c:	4620      	mov	r0, r4
   d922e:	f7ff ffc5 	bl	d91bc <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
   d9232:	a801      	add	r0, sp, #4
   d9234:	f7ff fedb 	bl	d8fee <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
   d9238:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d923a:	b108      	cbz	r0, d9240 <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
   d923c:	f7fe f934 	bl	d74a8 <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
   d9240:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   d9244:	2618      	movs	r6, #24
   d9246:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   d924a:	42ae      	cmp	r6, r5
   d924c:	d004      	beq.n	d9258 <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
   d924e:	4628      	mov	r0, r5
   d9250:	f000 fe66 	bl	d9f20 <_ZN6StringD1Ev>
   d9254:	3518      	adds	r5, #24
   d9256:	e7f8      	b.n	d924a <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
   d9258:	6920      	ldr	r0, [r4, #16]
   d925a:	f7fe fc77 	bl	d7b4c <free>
   d925e:	6820      	ldr	r0, [r4, #0]
   d9260:	f7fe fc74 	bl	d7b4c <free>
}
   d9264:	4620      	mov	r0, r4
   d9266:	b002      	add	sp, #8
   d9268:	bd70      	pop	{r4, r5, r6, pc}
	...

000d926c <__tcf_2>:
    static LogManager mgr;
   d926c:	4801      	ldr	r0, [pc, #4]	; (d9274 <__tcf_2+0x8>)
   d926e:	f7ff bfd3 	b.w	d9218 <_ZN5spark10LogManagerD1Ev>
   d9272:	bf00      	nop
   d9274:	2003e640 	.word	0x2003e640

000d9278 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
   d9278:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d927a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d927c:	4606      	mov	r6, r0
   d927e:	460c      	mov	r4, r1
   d9280:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d9282:	d927      	bls.n	d92d4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x5c>
   d9284:	4290      	cmp	r0, r2
   d9286:	d226      	bcs.n	d92d6 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x5e>
            --end;
   d9288:	f1a2 0514 	sub.w	r5, r2, #20
            dest += end - p - 1;
   d928c:	1a6c      	subs	r4, r5, r1
   d928e:	f1a1 0714 	sub.w	r7, r1, #20
   d9292:	4404      	add	r4, r0
        capacity_(0) {
   d9294:	2600      	movs	r6, #0
            for (; end != p; --end, --dest) {
   d9296:	42af      	cmp	r7, r5
   d9298:	d03d      	beq.n	d9316 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
                new(dest) T(std::move(*end));
   d929a:	b1a4      	cbz	r4, d92c6 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x4e>
struct spark::detail::LogFilter::Node {
   d929c:	682b      	ldr	r3, [r5, #0]
   d929e:	6023      	str	r3, [r4, #0]
   d92a0:	88ab      	ldrh	r3, [r5, #4]
   d92a2:	80a3      	strh	r3, [r4, #4]
   d92a4:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
   d92a8:	80e3      	strh	r3, [r4, #6]
        capacity_(0) {
   d92aa:	e9c4 6602 	strd	r6, r6, [r4, #8]
   d92ae:	6126      	str	r6, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   d92b0:	68ab      	ldr	r3, [r5, #8]
   d92b2:	60a3      	str	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d92b4:	60ae      	str	r6, [r5, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d92b6:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   d92b8:	68ea      	ldr	r2, [r5, #12]
   d92ba:	60e2      	str	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d92bc:	60eb      	str	r3, [r5, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d92be:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   d92c0:	692a      	ldr	r2, [r5, #16]
   d92c2:	6122      	str	r2, [r4, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d92c4:	612b      	str	r3, [r5, #16]
   d92c6:	f105 0008 	add.w	r0, r5, #8
   d92ca:	f7ff fe27 	bl	d8f1c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
   d92ce:	3d14      	subs	r5, #20
   d92d0:	3c14      	subs	r4, #20
   d92d2:	e7e0      	b.n	d9296 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1e>
        } else if (dest != p) {
   d92d4:	d01f      	beq.n	d9316 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
        capacity_(0) {
   d92d6:	2700      	movs	r7, #0
            for (; p != end; ++p, ++dest) {
   d92d8:	42ac      	cmp	r4, r5
   d92da:	d01c      	beq.n	d9316 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
                new(dest) T(std::move(*p));
   d92dc:	b1a6      	cbz	r6, d9308 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x90>
   d92de:	6823      	ldr	r3, [r4, #0]
   d92e0:	6033      	str	r3, [r6, #0]
   d92e2:	88a3      	ldrh	r3, [r4, #4]
   d92e4:	80b3      	strh	r3, [r6, #4]
   d92e6:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
   d92ea:	80f3      	strh	r3, [r6, #6]
        capacity_(0) {
   d92ec:	e9c6 7702 	strd	r7, r7, [r6, #8]
   d92f0:	6137      	str	r7, [r6, #16]
      __a = _GLIBCXX_MOVE(__b);
   d92f2:	68a3      	ldr	r3, [r4, #8]
   d92f4:	60b3      	str	r3, [r6, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d92f6:	60a7      	str	r7, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d92f8:	68f3      	ldr	r3, [r6, #12]
      __a = _GLIBCXX_MOVE(__b);
   d92fa:	68e2      	ldr	r2, [r4, #12]
   d92fc:	60f2      	str	r2, [r6, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d92fe:	60e3      	str	r3, [r4, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d9300:	6933      	ldr	r3, [r6, #16]
      __a = _GLIBCXX_MOVE(__b);
   d9302:	6922      	ldr	r2, [r4, #16]
   d9304:	6132      	str	r2, [r6, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d9306:	6123      	str	r3, [r4, #16]
   d9308:	f104 0008 	add.w	r0, r4, #8
   d930c:	f7ff fe06 	bl	d8f1c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
   d9310:	3414      	adds	r4, #20
   d9312:	3614      	adds	r6, #20
   d9314:	e7e0      	b.n	d92d8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x60>
    }
   d9316:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d9318 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   d9318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d931a:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
   d931e:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   d9320:	4604      	mov	r4, r0
   d9322:	460e      	mov	r6, r1
   d9324:	4617      	mov	r7, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d9326:	db0d      	blt.n	d9344 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x2c>
   d9328:	3501      	adds	r5, #1
        if (n > 0) {
   d932a:	2d00      	cmp	r5, #0
   d932c:	6800      	ldr	r0, [r0, #0]
   d932e:	dd04      	ble.n	d933a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x22>
    return ::realloc(ptr, size);
   d9330:	00a9      	lsls	r1, r5, #2
   d9332:	f7fe fc13 	bl	d7b5c <realloc>
            if (!d) {
   d9336:	b918      	cbnz	r0, d9340 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x28>
}
   d9338:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
   d933a:	f7fe fc07 	bl	d7b4c <free>
        T* d = nullptr;
   d933e:	2000      	movs	r0, #0
        data_ = d;
   d9340:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   d9342:	60a5      	str	r5, [r4, #8]
    T* const p = data_ + i;
   d9344:	6825      	ldr	r5, [r4, #0]
    move(p + 1, p, data_ + size_);
   d9346:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   d9348:	eb05 0186 	add.w	r1, r5, r6, lsl #2
    move(p + 1, p, data_ + size_);
   d934c:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
   d934e:	eba2 0286 	sub.w	r2, r2, r6, lsl #2
   d9352:	1d08      	adds	r0, r1, #4
   d9354:	f003 fadc 	bl	dc910 <memmove>
    new(p) T(std::move(value));
   d9358:	f845 7026 	str.w	r7, [r5, r6, lsl #2]
    ++size_;
   d935c:	6863      	ldr	r3, [r4, #4]
   d935e:	3301      	adds	r3, #1
   d9360:	6063      	str	r3, [r4, #4]
    return true;
   d9362:	2001      	movs	r0, #1
   d9364:	e7e8      	b.n	d9338 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x20>

000d9366 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
   d9366:	b537      	push	{r0, r1, r2, r4, r5, lr}
    LOG_WITH_LOCK(mutex_) {
   d9368:	f100 0324 	add.w	r3, r0, #36	; 0x24
bool spark::LogManager::addHandler(LogHandler *handler) {
   d936c:	4604      	mov	r4, r0
    void lock() { os_mutex_recursive_lock(handle_); }
   d936e:	6a40      	ldr	r0, [r0, #36]	; 0x24
   d9370:	9301      	str	r3, [sp, #4]
   d9372:	460d      	mov	r5, r1
   d9374:	f7fe f8a0 	bl	d74b8 <os_mutex_recursive_lock>
    return find(data_, data_ + size_, value);
   d9378:	e9d4 3100 	ldrd	r3, r1, [r4]
   d937c:	eb03 0081 	add.w	r0, r3, r1, lsl #2
        for (; p != end; ++p) {
   d9380:	4283      	cmp	r3, r0
   d9382:	461a      	mov	r2, r3
   d9384:	d00b      	beq.n	d939e <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x38>
            if (*p == value) {
   d9386:	6812      	ldr	r2, [r2, #0]
   d9388:	42aa      	cmp	r2, r5
   d938a:	f103 0304 	add.w	r3, r3, #4
   d938e:	d1f7      	bne.n	d9380 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
    LOG_WITH_LOCK(mutex_) {
   d9390:	a801      	add	r0, sp, #4
   d9392:	f7ff fe2c 	bl	d8fee <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
            return false;
   d9396:	2500      	movs	r5, #0
}
   d9398:	4628      	mov	r0, r5
   d939a:	b003      	add	sp, #12
   d939c:	bd30      	pop	{r4, r5, pc}
    return insert(size_, std::move(value));
   d939e:	462a      	mov	r2, r5
   d93a0:	4620      	mov	r0, r4
   d93a2:	f7ff ffb9 	bl	d9318 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   d93a6:	4605      	mov	r5, r0
   d93a8:	2800      	cmp	r0, #0
   d93aa:	d0f1      	beq.n	d9390 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x2a>
        if (activeHandlers_.size() == 1) {
   d93ac:	6863      	ldr	r3, [r4, #4]
   d93ae:	2b01      	cmp	r3, #1
   d93b0:	d101      	bne.n	d93b6 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x50>
            setSystemCallbacks();
   d93b2:	f7ff fd07 	bl	d8dc4 <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   d93b6:	a801      	add	r0, sp, #4
   d93b8:	f7ff fe19 	bl	d8fee <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   d93bc:	e7ec      	b.n	d9398 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x32>

000d93be <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   d93be:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d93c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d93c2:	4604      	mov	r4, r0
   d93c4:	460d      	mov	r5, r1
   d93c6:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   d93c8:	d914      	bls.n	d93f4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   d93ca:	4290      	cmp	r0, r2
   d93cc:	d213      	bcs.n	d93f6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
   d93ce:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
   d93d2:	1a75      	subs	r5, r6, r1
   d93d4:	f1a1 0710 	sub.w	r7, r1, #16
   d93d8:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   d93da:	42b7      	cmp	r7, r6
   d93dc:	d018      	beq.n	d9410 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   d93de:	b11c      	cbz	r4, d93e8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   d93e0:	4631      	mov	r1, r6
   d93e2:	4620      	mov	r0, r4
   d93e4:	f000 fe18 	bl	da018 <_ZN6StringC1EOS_>
                end->~T();
   d93e8:	4630      	mov	r0, r6
   d93ea:	f000 fd99 	bl	d9f20 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   d93ee:	3e10      	subs	r6, #16
   d93f0:	3c10      	subs	r4, #16
   d93f2:	e7f2      	b.n	d93da <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   d93f4:	d00c      	beq.n	d9410 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   d93f6:	42b5      	cmp	r5, r6
   d93f8:	d00a      	beq.n	d9410 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   d93fa:	b11c      	cbz	r4, d9404 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   d93fc:	4629      	mov	r1, r5
   d93fe:	4620      	mov	r0, r4
   d9400:	f000 fe0a 	bl	da018 <_ZN6StringC1EOS_>
                p->~T();
   d9404:	4628      	mov	r0, r5
   d9406:	f000 fd8b 	bl	d9f20 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   d940a:	3510      	adds	r5, #16
   d940c:	3410      	adds	r4, #16
   d940e:	e7f2      	b.n	d93f6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
   d9410:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d9412 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
   d9412:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   d9414:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   d9416:	4605      	mov	r5, r0
        if (n > 0) {
   d9418:	dd11      	ble.n	d943e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
   d941a:	0130      	lsls	r0, r6, #4
   d941c:	f7fe fb8e 	bl	d7b3c <malloc>
            if (!d) {
   d9420:	4604      	mov	r4, r0
   d9422:	b158      	cbz	r0, d943c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   d9424:	e9d5 1200 	ldrd	r1, r2, [r5]
   d9428:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   d942c:	f7ff ffc7 	bl	d93be <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   d9430:	6828      	ldr	r0, [r5, #0]
   d9432:	f7fe fb8b 	bl	d7b4c <free>
        data_ = d;
   d9436:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d9438:	60ae      	str	r6, [r5, #8]
        return true;
   d943a:	2001      	movs	r0, #1
    }
   d943c:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   d943e:	2400      	movs	r4, #0
   d9440:	e7f6      	b.n	d9430 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

000d9442 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   d9442:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d9446:	4691      	mov	r9, r2
   d9448:	b097      	sub	sp, #92	; 0x5c
        capacity_(0) {
   d944a:	2300      	movs	r3, #0
   d944c:	9103      	str	r1, [sp, #12]
    if (!cats.reserve(filters.size())) {
   d944e:	f8d9 1004 	ldr.w	r1, [r9, #4]
   d9452:	930c      	str	r3, [sp, #48]	; 0x30
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   d9454:	2246      	movs	r2, #70	; 0x46
    if (n > capacity_ && !realloc(n)) {
   d9456:	4299      	cmp	r1, r3
        capacity_(0) {
   d9458:	e9c0 3300 	strd	r3, r3, [r0]
   d945c:	e9c0 3302 	strd	r3, r3, [r0, #8]
   d9460:	e9c0 3304 	strd	r3, r3, [r0, #16]
   d9464:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   d9468:	4604      	mov	r4, r0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   d946a:	7602      	strb	r2, [r0, #24]
    if (n > capacity_ && !realloc(n)) {
   d946c:	dc23      	bgt.n	d94b6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
   d946e:	e9d9 5700 	ldrd	r5, r7, [r9]
   d9472:	2314      	movs	r3, #20
   d9474:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
   d9478:	42af      	cmp	r7, r5
   d947a:	d03b      	beq.n	d94f4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
   d947c:	4629      	mov	r1, r5
   d947e:	a80d      	add	r0, sp, #52	; 0x34
   d9480:	f000 fdca 	bl	da018 <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
   d9484:	a90d      	add	r1, sp, #52	; 0x34
   d9486:	a811      	add	r0, sp, #68	; 0x44
   d9488:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   d948a:	f000 fdc5 	bl	da018 <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d948e:	e9dd 130b 	ldrd	r1, r3, [sp, #44]	; 0x2c
   d9492:	4299      	cmp	r1, r3
   d9494:	da1b      	bge.n	d94ce <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
   d9496:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    move(p + 1, p, data_ + size_);
   d9498:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    T* const p = data_ + i;
   d949a:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   d949e:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   d94a2:	4631      	mov	r1, r6
   d94a4:	f106 0010 	add.w	r0, r6, #16
   d94a8:	f7ff ff89 	bl	d93be <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   d94ac:	b9ee      	cbnz	r6, d94ea <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
   d94ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   d94b0:	3301      	adds	r3, #1
   d94b2:	930b      	str	r3, [sp, #44]	; 0x2c
    return true;
   d94b4:	e011      	b.n	d94da <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
   d94b6:	a80a      	add	r0, sp, #40	; 0x28
   d94b8:	f7ff ffab 	bl	d9412 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   d94bc:	2800      	cmp	r0, #0
   d94be:	d1d6      	bne.n	d946e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
    Vector<String> cats;
   d94c0:	a80a      	add	r0, sp, #40	; 0x28
   d94c2:	f7ff fd3f 	bl	d8f44 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   d94c6:	4620      	mov	r0, r4
   d94c8:	b017      	add	sp, #92	; 0x5c
   d94ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d94ce:	3101      	adds	r1, #1
   d94d0:	a80a      	add	r0, sp, #40	; 0x28
   d94d2:	f7ff ff9e 	bl	d9412 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   d94d6:	2800      	cmp	r0, #0
   d94d8:	d1dd      	bne.n	d9496 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
   d94da:	a811      	add	r0, sp, #68	; 0x44
   d94dc:	f000 fd20 	bl	d9f20 <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
   d94e0:	a80d      	add	r0, sp, #52	; 0x34
   d94e2:	f000 fd1d 	bl	d9f20 <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
   d94e6:	3514      	adds	r5, #20
   d94e8:	e7c6      	b.n	d9478 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
   d94ea:	a911      	add	r1, sp, #68	; 0x44
   d94ec:	4630      	mov	r0, r6
   d94ee:	f000 fd93 	bl	da018 <_ZN6StringC1EOS_>
   d94f2:	e7dc      	b.n	d94ae <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
   d94f4:	2600      	movs	r6, #0
   d94f6:	e9cd 660d 	strd	r6, r6, [sp, #52]	; 0x34
   d94fa:	960f      	str	r6, [sp, #60]	; 0x3c
        size_t size = 0; // Name length
   d94fc:	4637      	mov	r7, r6
   d94fe:	f04f 0a14 	mov.w	sl, #20
    for (int i = 0; i < cats.size(); ++i) {
   d9502:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   d9506:	429e      	cmp	r6, r3
   d9508:	f280 8097 	bge.w	d963a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f8>
        const char *category = cats.at(i).c_str();
   d950c:	0133      	lsls	r3, r6, #4
   d950e:	58d3      	ldr	r3, [r2, r3]
   d9510:	9308      	str	r3, [sp, #32]
        if (!category) {
   d9512:	b90b      	cbnz	r3, d9518 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd6>
    for (int i = 0; i < cats.size(); ++i) {
   d9514:	3601      	adds	r6, #1
   d9516:	e7f4      	b.n	d9502 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xc0>
        size_t size = 0; // Name length
   d9518:	fb0a f306 	mul.w	r3, sl, r6
   d951c:	9709      	str	r7, [sp, #36]	; 0x24
   d951e:	9302      	str	r3, [sp, #8]
        Vector<Node> *pNodes = &nodes; // Root nodes
   d9520:	ad0d      	add	r5, sp, #52	; 0x34
        while ((name = nextSubcategoryName(category, size))) {
   d9522:	a909      	add	r1, sp, #36	; 0x24
   d9524:	a808      	add	r0, sp, #32
   d9526:	f7ff fb00 	bl	d8b2a <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   d952a:	4683      	mov	fp, r0
   d952c:	2800      	cmp	r0, #0
   d952e:	d0f1      	beq.n	d9514 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
            const int index = nodeIndex(*pNodes, name, size, found);
   d9530:	4601      	mov	r1, r0
   d9532:	9a09      	ldr	r2, [sp, #36]	; 0x24
            bool found = false;
   d9534:	f88d 701f 	strb.w	r7, [sp, #31]
            const int index = nodeIndex(*pNodes, name, size, found);
   d9538:	f10d 031f 	add.w	r3, sp, #31
   d953c:	4628      	mov	r0, r5
   d953e:	f7ff fb73 	bl	d8c28 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d9542:	f89d 801f 	ldrb.w	r8, [sp, #31]
            const int index = nodeIndex(*pNodes, name, size, found);
   d9546:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d9548:	f1b8 0f00 	cmp.w	r8, #0
   d954c:	d166      	bne.n	d961c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1da>
   d954e:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
            level(-1) {
   d9552:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
   d9556:	e9cd 8813 	strd	r8, r8, [sp, #76]	; 0x4c
   d955a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d955e:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
   d9562:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
   d9566:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d956a:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   d956e:	4293      	cmp	r3, r2
   d9570:	db1a      	blt.n	d95a8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x166>
   d9572:	f103 0b01 	add.w	fp, r3, #1
        if (n > 0) {
   d9576:	f1bb 0f00 	cmp.w	fp, #0
   d957a:	dd4a      	ble.n	d9612 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d0>
    return ::malloc(size);
   d957c:	fb0a f00b 	mul.w	r0, sl, fp
   d9580:	f7fe fadc 	bl	d7b3c <malloc>
            if (!d) {
   d9584:	9004      	str	r0, [sp, #16]
   d9586:	2800      	cmp	r0, #0
   d9588:	d045      	beq.n	d9616 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d4>
            move(d, data_, data_ + size_);
   d958a:	e9d5 1200 	ldrd	r1, r2, [r5]
   d958e:	fb0a 1202 	mla	r2, sl, r2, r1
   d9592:	f7ff fe71 	bl	d9278 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
   d9596:	9b04      	ldr	r3, [sp, #16]
    ::free(ptr);
   d9598:	6828      	ldr	r0, [r5, #0]
   d959a:	9304      	str	r3, [sp, #16]
   d959c:	f7fe fad6 	bl	d7b4c <free>
        data_ = d;
   d95a0:	9b04      	ldr	r3, [sp, #16]
   d95a2:	602b      	str	r3, [r5, #0]
        capacity_ = n;
   d95a4:	f8c5 b008 	str.w	fp, [r5, #8]
    T* const p = data_ + i;
   d95a8:	9b01      	ldr	r3, [sp, #4]
   d95aa:	f8d5 b000 	ldr.w	fp, [r5]
    move(p + 1, p, data_ + size_);
   d95ae:	686a      	ldr	r2, [r5, #4]
    T* const p = data_ + i;
   d95b0:	fb0a f303 	mul.w	r3, sl, r3
   d95b4:	eb0b 0103 	add.w	r1, fp, r3
    move(p + 1, p, data_ + size_);
   d95b8:	f101 0014 	add.w	r0, r1, #20
   d95bc:	fb0a b202 	mla	r2, sl, r2, fp
   d95c0:	9104      	str	r1, [sp, #16]
    T* const p = data_ + i;
   d95c2:	9305      	str	r3, [sp, #20]
    move(p + 1, p, data_ + size_);
   d95c4:	f7ff fe58 	bl	d9278 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   d95c8:	9904      	ldr	r1, [sp, #16]
   d95ca:	b1a9      	cbz	r1, d95f8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1b6>
struct spark::detail::LogFilter::Node {
   d95cc:	9b05      	ldr	r3, [sp, #20]
   d95ce:	9a11      	ldr	r2, [sp, #68]	; 0x44
   d95d0:	f84b 2003 	str.w	r2, [fp, r3]
   d95d4:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
   d95d8:	808b      	strh	r3, [r1, #4]
   d95da:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
   d95de:	80cb      	strh	r3, [r1, #6]
        capacity_(0) {
   d95e0:	e9c1 7702 	strd	r7, r7, [r1, #8]
   d95e4:	610f      	str	r7, [r1, #16]
      __a = _GLIBCXX_MOVE(__b);
   d95e6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   d95e8:	608b      	str	r3, [r1, #8]
   d95ea:	9b14      	ldr	r3, [sp, #80]	; 0x50
      __b = _GLIBCXX_MOVE(__tmp);
   d95ec:	9713      	str	r7, [sp, #76]	; 0x4c
      __a = _GLIBCXX_MOVE(__b);
   d95ee:	60cb      	str	r3, [r1, #12]
   d95f0:	9b15      	ldr	r3, [sp, #84]	; 0x54
      __b = _GLIBCXX_MOVE(__tmp);
   d95f2:	9714      	str	r7, [sp, #80]	; 0x50
      __a = _GLIBCXX_MOVE(__b);
   d95f4:	610b      	str	r3, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d95f6:	9715      	str	r7, [sp, #84]	; 0x54
    ++size_;
   d95f8:	686b      	ldr	r3, [r5, #4]
   d95fa:	3301      	adds	r3, #1
   d95fc:	606b      	str	r3, [r5, #4]
   d95fe:	a813      	add	r0, sp, #76	; 0x4c
   d9600:	f7ff fc8c 	bl	d8f1c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d9604:	f1b8 0f00 	cmp.w	r8, #0
   d9608:	d008      	beq.n	d961c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1da>
    Vector<Node> nodes;
   d960a:	a80d      	add	r0, sp, #52	; 0x34
   d960c:	f7ff fc86 	bl	d8f1c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d9610:	e756      	b.n	d94c0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
   d9612:	4643      	mov	r3, r8
   d9614:	e7c0      	b.n	d9598 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x156>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d9616:	f04f 0801 	mov.w	r8, #1
   d961a:	e7f0      	b.n	d95fe <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
    return data_[i];
   d961c:	9b01      	ldr	r3, [sp, #4]
   d961e:	682d      	ldr	r5, [r5, #0]
   d9620:	fb0a 5503 	mla	r5, sl, r3, r5
            if (!*category) { // Check if it's last subcategory
   d9624:	9b08      	ldr	r3, [sp, #32]
   d9626:	781b      	ldrb	r3, [r3, #0]
   d9628:	b92b      	cbnz	r3, d9636 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f4>
                node.level = filters.at(i).level_;
   d962a:	f8d9 3000 	ldr.w	r3, [r9]
   d962e:	9a02      	ldr	r2, [sp, #8]
   d9630:	4413      	add	r3, r2
   d9632:	7c1b      	ldrb	r3, [r3, #16]
   d9634:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
   d9636:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
   d9638:	e773      	b.n	d9522 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xe0>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d963a:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d963c:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d963e:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   d9640:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d9642:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d9644:	920b      	str	r2, [sp, #44]	; 0x2c
      __a = _GLIBCXX_MOVE(__b);
   d9646:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
   d9648:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d964a:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   d964c:	60a2      	str	r2, [r4, #8]
   d964e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
   d9650:	930d      	str	r3, [sp, #52]	; 0x34
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d9652:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   d9654:	60e2      	str	r2, [r4, #12]
   d9656:	9a0e      	ldr	r2, [sp, #56]	; 0x38
      __b = _GLIBCXX_MOVE(__tmp);
   d9658:	930e      	str	r3, [sp, #56]	; 0x38
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d965a:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
   d965c:	6122      	str	r2, [r4, #16]
   d965e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
      __b = _GLIBCXX_MOVE(__tmp);
   d9660:	930f      	str	r3, [sp, #60]	; 0x3c
    level_ = level;
   d9662:	9b03      	ldr	r3, [sp, #12]
   d9664:	910a      	str	r1, [sp, #40]	; 0x28
      __a = _GLIBCXX_MOVE(__b);
   d9666:	6162      	str	r2, [r4, #20]
   d9668:	7623      	strb	r3, [r4, #24]
   d966a:	e7ce      	b.n	d960a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c8>

000d966c <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
   d966c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
        filter_(level, filters) {
   d966e:	4605      	mov	r5, r0
   d9670:	4b09      	ldr	r3, [pc, #36]	; (d9698 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>)
   d9672:	f845 3b04 	str.w	r3, [r5], #4
inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
   d9676:	4604      	mov	r4, r0
   d9678:	460e      	mov	r6, r1
        filter_(level, filters) {
   d967a:	a801      	add	r0, sp, #4
   d967c:	4611      	mov	r1, r2
   d967e:	f7fb fbe7 	bl	d4e50 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d9682:	aa01      	add	r2, sp, #4
   d9684:	4631      	mov	r1, r6
   d9686:	4628      	mov	r0, r5
   d9688:	f7ff fedb 	bl	d9442 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d968c:	a801      	add	r0, sp, #4
   d968e:	f7fa fed9 	bl	d4444 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}
   d9692:	4620      	mov	r0, r4
   d9694:	b004      	add	sp, #16
   d9696:	bd70      	pop	{r4, r5, r6, pc}
   d9698:	000def2c 	.word	0x000def2c

000d969c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
   d969c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d969e:	460f      	mov	r7, r1
   d96a0:	b087      	sub	sp, #28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d96a2:	4926      	ldr	r1, [pc, #152]	; (d973c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa0>)
            Print *stream, const JSONValue &params) {
   d96a4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d96a6:	4638      	mov	r0, r7
            Print *stream, const JSONValue &params) {
   d96a8:	4616      	mov	r6, r2
   d96aa:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d96ac:	f003 f98d 	bl	dc9ca <strcmp>
   d96b0:	bb00      	cbnz	r0, d96f4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x58>
        if (!stream) {
   d96b2:	b1e4      	cbz	r4, d96ee <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   d96b4:	4629      	mov	r1, r5
   d96b6:	4668      	mov	r0, sp
   d96b8:	f7ff fc8a 	bl	d8fd0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   d96bc:	4920      	ldr	r1, [pc, #128]	; (d9740 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa4>)
   d96be:	2024      	movs	r0, #36	; 0x24
   d96c0:	f002 f876 	bl	db7b0 <_ZnwjRKSt9nothrow_t>
   d96c4:	4605      	mov	r5, r0
   d96c6:	b170      	cbz	r0, d96e6 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
        stream_(&stream) {
   d96c8:	4669      	mov	r1, sp
   d96ca:	a803      	add	r0, sp, #12
   d96cc:	f7fb fbc0 	bl	d4e50 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d96d0:	aa03      	add	r2, sp, #12
   d96d2:	4631      	mov	r1, r6
   d96d4:	4628      	mov	r0, r5
   d96d6:	f7ff ffc9 	bl	d966c <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d96da:	a803      	add	r0, sp, #12
   d96dc:	f7fa feb2 	bl	d4444 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
    using StreamLogHandler::StreamLogHandler;
   d96e0:	4b18      	ldr	r3, [pc, #96]	; (d9744 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa8>)
        stream_(&stream) {
   d96e2:	622c      	str	r4, [r5, #32]
    using StreamLogHandler::StreamLogHandler;
   d96e4:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   d96e6:	4668      	mov	r0, sp
   d96e8:	f7fa feac 	bl	d4444 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d96ec:	462c      	mov	r4, r5
}
   d96ee:	4620      	mov	r0, r4
   d96f0:	b007      	add	sp, #28
   d96f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   d96f4:	4914      	ldr	r1, [pc, #80]	; (d9748 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xac>)
   d96f6:	4638      	mov	r0, r7
   d96f8:	f003 f967 	bl	dc9ca <strcmp>
   d96fc:	b9e0      	cbnz	r0, d9738 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x9c>
        if (!stream) {
   d96fe:	2c00      	cmp	r4, #0
   d9700:	d0f5      	beq.n	d96ee <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   d9702:	4629      	mov	r1, r5
   d9704:	4668      	mov	r0, sp
   d9706:	f7ff fc63 	bl	d8fd0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   d970a:	490d      	ldr	r1, [pc, #52]	; (d9740 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa4>)
   d970c:	2024      	movs	r0, #36	; 0x24
   d970e:	f002 f84f 	bl	db7b0 <_ZnwjRKSt9nothrow_t>
   d9712:	4605      	mov	r5, r0
   d9714:	2800      	cmp	r0, #0
   d9716:	d0e6      	beq.n	d96e6 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
        stream_(&stream) {
   d9718:	4669      	mov	r1, sp
   d971a:	a803      	add	r0, sp, #12
   d971c:	f7fb fb98 	bl	d4e50 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d9720:	aa03      	add	r2, sp, #12
   d9722:	4631      	mov	r1, r6
   d9724:	4628      	mov	r0, r5
   d9726:	f7ff ffa1 	bl	d966c <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d972a:	a803      	add	r0, sp, #12
   d972c:	f7fa fe8a 	bl	d4444 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d9730:	4b06      	ldr	r3, [pc, #24]	; (d974c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb0>)
   d9732:	602b      	str	r3, [r5, #0]
   d9734:	622c      	str	r4, [r5, #32]
}
   d9736:	e7d6      	b.n	d96e6 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
            return nullptr; // Output stream is not specified
   d9738:	2400      	movs	r4, #0
   d973a:	e7d8      	b.n	d96ee <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
   d973c:	000df6d9 	.word	0x000df6d9
   d9740:	000df988 	.word	0x000df988
   d9744:	000df768 	.word	0x000df768
   d9748:	000df6dd 	.word	0x000df6dd
   d974c:	000df750 	.word	0x000df750

000d9750 <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
   d9750:	4b01      	ldr	r3, [pc, #4]	; (d9758 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d9752:	4a02      	ldr	r2, [pc, #8]	; (d975c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d9754:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d9756:	4770      	bx	lr
   d9758:	2003e63c 	.word	0x2003e63c
   d975c:	000df6ee 	.word	0x000df6ee

000d9760 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d9760:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d9764:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
   d9766:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d976a:	4604      	mov	r4, r0
   d976c:	460e      	mov	r6, r1
   d976e:	4617      	mov	r7, r2
   d9770:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
   d9772:	f001 fe0b 	bl	db38c <_Z16_fetch_usbserialv>
   d9776:	4581      	cmp	r9, r0
   d9778:	d04c      	beq.n	d9814 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb4>
    if (attr.has_time) {
   d977a:	792b      	ldrb	r3, [r5, #4]
   d977c:	0719      	lsls	r1, r3, #28
   d977e:	d504      	bpl.n	d978a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
   d9780:	696a      	ldr	r2, [r5, #20]
   d9782:	4954      	ldr	r1, [pc, #336]	; (d98d4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   d9784:	4620      	mov	r0, r4
   d9786:	f7ff fa40 	bl	d8c0a <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
   d978a:	f1b8 0f00 	cmp.w	r8, #0
   d978e:	d00d      	beq.n	d97ac <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
   d9790:	215b      	movs	r1, #91	; 0x5b
   d9792:	4620      	mov	r0, r4
   d9794:	f7ff fa2d 	bl	d8bf2 <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   d9798:	4641      	mov	r1, r8
   d979a:	4620      	mov	r0, r4
   d979c:	f7ff fa1a 	bl	d8bd4 <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   d97a0:	6823      	ldr	r3, [r4, #0]
   d97a2:	494d      	ldr	r1, [pc, #308]	; (d98d8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
   d97a4:	68db      	ldr	r3, [r3, #12]
   d97a6:	2202      	movs	r2, #2
   d97a8:	4620      	mov	r0, r4
   d97aa:	4798      	blx	r3
    if (attr.has_file) {
   d97ac:	792b      	ldrb	r3, [r5, #4]
   d97ae:	07da      	lsls	r2, r3, #31
   d97b0:	d523      	bpl.n	d97fa <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9a>
        s = extractFileName(attr.file); // Strip directory path
   d97b2:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
   d97b6:	212f      	movs	r1, #47	; 0x2f
   d97b8:	4640      	mov	r0, r8
   d97ba:	f003 f963 	bl	dca84 <strrchr>
    if (s1) {
   d97be:	b108      	cbz	r0, d97c4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
   d97c0:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
   d97c4:	4641      	mov	r1, r8
   d97c6:	4620      	mov	r0, r4
   d97c8:	f7ff fa04 	bl	d8bd4 <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   d97cc:	792b      	ldrb	r3, [r5, #4]
   d97ce:	079b      	lsls	r3, r3, #30
   d97d0:	d508      	bpl.n	d97e4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
   d97d2:	213a      	movs	r1, #58	; 0x3a
   d97d4:	4620      	mov	r0, r4
   d97d6:	f7ff fa0c 	bl	d8bf2 <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
   d97da:	68ea      	ldr	r2, [r5, #12]
   d97dc:	493f      	ldr	r1, [pc, #252]	; (d98dc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
   d97de:	4620      	mov	r0, r4
   d97e0:	f7ff fa13 	bl	d8c0a <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
   d97e4:	792a      	ldrb	r2, [r5, #4]
   d97e6:	6823      	ldr	r3, [r4, #0]
   d97e8:	f012 0f04 	tst.w	r2, #4
   d97ec:	68db      	ldr	r3, [r3, #12]
            write(", ", 2);
   d97ee:	bf14      	ite	ne
   d97f0:	493b      	ldrne	r1, [pc, #236]	; (d98e0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
            write(": ", 2);
   d97f2:	493c      	ldreq	r1, [pc, #240]	; (d98e4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(", ", 2);
   d97f4:	2202      	movs	r2, #2
            write(": ", 2);
   d97f6:	4620      	mov	r0, r4
   d97f8:	4798      	blx	r3
    if (attr.has_function) {
   d97fa:	792b      	ldrb	r3, [r5, #4]
   d97fc:	0758      	lsls	r0, r3, #29
   d97fe:	d51d      	bpl.n	d983c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xdc>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   d9800:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
   d9802:	460b      	mov	r3, r1
   d9804:	461a      	mov	r2, r3
    for (; *s; ++s) {
   d9806:	f813 0b01 	ldrb.w	r0, [r3], #1
   d980a:	b160      	cbz	r0, d9826 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
        if (*s == ' ') {
   d980c:	2820      	cmp	r0, #32
   d980e:	d108      	bne.n	d9822 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
            s1 = s + 1; // Skip return type
   d9810:	4619      	mov	r1, r3
   d9812:	e7f7      	b.n	d9804 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
    if (stream_ == &Serial && Network.listening()) {
   d9814:	4834      	ldr	r0, [pc, #208]	; (d98e8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   d9816:	f000 f966 	bl	d9ae6 <_ZN5spark12NetworkClass9listeningEv>
   d981a:	2800      	cmp	r0, #0
   d981c:	d0ad      	beq.n	d977a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
   d981e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
   d9822:	2828      	cmp	r0, #40	; 0x28
   d9824:	d1ee      	bne.n	d9804 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
        write(s, n);
   d9826:	6823      	ldr	r3, [r4, #0]
   d9828:	1a52      	subs	r2, r2, r1
   d982a:	68db      	ldr	r3, [r3, #12]
   d982c:	4620      	mov	r0, r4
   d982e:	4798      	blx	r3
        write("(): ", 4);
   d9830:	6823      	ldr	r3, [r4, #0]
   d9832:	492e      	ldr	r1, [pc, #184]	; (d98ec <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   d9834:	68db      	ldr	r3, [r3, #12]
   d9836:	2204      	movs	r2, #4
   d9838:	4620      	mov	r0, r4
   d983a:	4798      	blx	r3
    return log_level_name(level, nullptr);
   d983c:	2100      	movs	r1, #0
   d983e:	4638      	mov	r0, r7
   d9840:	f7fe f852 	bl	d78e8 <log_level_name>
   d9844:	4601      	mov	r1, r0
    write(s);
   d9846:	4620      	mov	r0, r4
   d9848:	f7ff f9c4 	bl	d8bd4 <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   d984c:	6823      	ldr	r3, [r4, #0]
   d984e:	4925      	ldr	r1, [pc, #148]	; (d98e4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   d9850:	68db      	ldr	r3, [r3, #12]
   d9852:	2202      	movs	r2, #2
   d9854:	4620      	mov	r0, r4
   d9856:	4798      	blx	r3
    if (msg) {
   d9858:	b11e      	cbz	r6, d9862 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x102>
        write(msg);
   d985a:	4631      	mov	r1, r6
   d985c:	4620      	mov	r0, r4
   d985e:	f7ff f9b9 	bl	d8bd4 <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
   d9862:	792b      	ldrb	r3, [r5, #4]
   d9864:	f013 0f30 	tst.w	r3, #48	; 0x30
   d9868:	d02c      	beq.n	d98c4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>
        write(" [", 2);
   d986a:	6823      	ldr	r3, [r4, #0]
   d986c:	4920      	ldr	r1, [pc, #128]	; (d98f0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   d986e:	68db      	ldr	r3, [r3, #12]
   d9870:	2202      	movs	r2, #2
   d9872:	4620      	mov	r0, r4
   d9874:	4798      	blx	r3
        if (attr.has_code) {
   d9876:	792b      	ldrb	r3, [r5, #4]
   d9878:	06d9      	lsls	r1, r3, #27
   d987a:	d50a      	bpl.n	d9892 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x132>
            write("code = ", 7);
   d987c:	6823      	ldr	r3, [r4, #0]
   d987e:	491d      	ldr	r1, [pc, #116]	; (d98f4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   d9880:	68db      	ldr	r3, [r3, #12]
   d9882:	2207      	movs	r2, #7
   d9884:	4620      	mov	r0, r4
   d9886:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
   d9888:	69aa      	ldr	r2, [r5, #24]
   d988a:	491b      	ldr	r1, [pc, #108]	; (d98f8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
   d988c:	4620      	mov	r0, r4
   d988e:	f7ff f9bc 	bl	d8c0a <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
   d9892:	792b      	ldrb	r3, [r5, #4]
   d9894:	069a      	lsls	r2, r3, #26
   d9896:	d511      	bpl.n	d98bc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>
            if (attr.has_code) {
   d9898:	06db      	lsls	r3, r3, #27
   d989a:	d505      	bpl.n	d98a8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>
                write(", ", 2);
   d989c:	6823      	ldr	r3, [r4, #0]
   d989e:	4910      	ldr	r1, [pc, #64]	; (d98e0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
   d98a0:	68db      	ldr	r3, [r3, #12]
   d98a2:	2202      	movs	r2, #2
   d98a4:	4620      	mov	r0, r4
   d98a6:	4798      	blx	r3
            write("details = ", 10);
   d98a8:	6823      	ldr	r3, [r4, #0]
   d98aa:	4914      	ldr	r1, [pc, #80]	; (d98fc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
   d98ac:	68db      	ldr	r3, [r3, #12]
   d98ae:	4620      	mov	r0, r4
   d98b0:	220a      	movs	r2, #10
   d98b2:	4798      	blx	r3
            write(attr.details);
   d98b4:	69e9      	ldr	r1, [r5, #28]
   d98b6:	4620      	mov	r0, r4
   d98b8:	f7ff f98c 	bl	d8bd4 <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
   d98bc:	215d      	movs	r1, #93	; 0x5d
   d98be:	4620      	mov	r0, r4
   d98c0:	f7ff f997 	bl	d8bf2 <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
   d98c4:	6823      	ldr	r3, [r4, #0]
   d98c6:	490e      	ldr	r1, [pc, #56]	; (d9900 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
   d98c8:	68db      	ldr	r3, [r3, #12]
   d98ca:	4620      	mov	r0, r4
   d98cc:	2202      	movs	r2, #2
}
   d98ce:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
   d98d2:	4718      	bx	r3
   d98d4:	000df6f2 	.word	0x000df6f2
   d98d8:	000df6f9 	.word	0x000df6f9
   d98dc:	000df81f 	.word	0x000df81f
   d98e0:	000df6fc 	.word	0x000df6fc
   d98e4:	000df701 	.word	0x000df701
   d98e8:	2003e668 	.word	0x2003e668
   d98ec:	000df6ff 	.word	0x000df6ff
   d98f0:	000df704 	.word	0x000df704
   d98f4:	000df707 	.word	0x000df707
   d98f8:	000df70f 	.word	0x000df70f
   d98fc:	000df712 	.word	0x000df712
   d9900:	000df321 	.word	0x000df321

000d9904 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d9904:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d9908:	b085      	sub	sp, #20
    if (this->stream() == &Serial && Network.listening()) {
   d990a:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d990e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   d9910:	4605      	mov	r5, r0
   d9912:	460f      	mov	r7, r1
   d9914:	4690      	mov	r8, r2
   d9916:	461e      	mov	r6, r3
    if (this->stream() == &Serial && Network.listening()) {
   d9918:	f001 fd38 	bl	db38c <_Z16_fetch_usbserialv>
   d991c:	4581      	cmp	r9, r0
   d991e:	d105      	bne.n	d992c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
   d9920:	4849      	ldr	r0, [pc, #292]	; (d9a48 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
   d9922:	f000 f8e0 	bl	d9ae6 <_ZN5spark12NetworkClass9listeningEv>
   d9926:	2800      	cmp	r0, #0
   d9928:	f040 808a 	bne.w	d9a40 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
    JSONStreamWriter json(*this->stream());
   d992c:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
   d992e:	4a47      	ldr	r2, [pc, #284]	; (d9a4c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   d9930:	9201      	str	r2, [sp, #4]
        state_(BEGIN) {
   d9932:	f04f 0900 	mov.w	r9, #0
    json.beginObject();
   d9936:	a801      	add	r0, sp, #4
        strm_(stream) {
   d9938:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
   d993a:	f88d 9008 	strb.w	r9, [sp, #8]
   d993e:	f7ff f83c 	bl	d89ba <_ZN5spark10JSONWriter11beginObjectEv>
   d9942:	4649      	mov	r1, r9
   d9944:	4640      	mov	r0, r8
   d9946:	f7fd ffcf 	bl	d78e8 <log_level_name>
    json.name("l", 1).value(s);
   d994a:	4941      	ldr	r1, [pc, #260]	; (d9a50 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   d994c:	4680      	mov	r8, r0
   d994e:	2201      	movs	r2, #1
   d9950:	a801      	add	r0, sp, #4
   d9952:	f7ff f8bb 	bl	d8acc <_ZN5spark10JSONWriter4nameEPKcj>
   d9956:	4641      	mov	r1, r8
   d9958:	f7ff f92e 	bl	d8bb8 <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
   d995c:	b13f      	cbz	r7, d996e <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
   d995e:	493d      	ldr	r1, [pc, #244]	; (d9a54 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   d9960:	2201      	movs	r2, #1
   d9962:	a801      	add	r0, sp, #4
   d9964:	f7ff f8b2 	bl	d8acc <_ZN5spark10JSONWriter4nameEPKcj>
   d9968:	4639      	mov	r1, r7
   d996a:	f7ff f925 	bl	d8bb8 <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
   d996e:	b13e      	cbz	r6, d9980 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
   d9970:	4939      	ldr	r1, [pc, #228]	; (d9a58 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   d9972:	2201      	movs	r2, #1
   d9974:	a801      	add	r0, sp, #4
   d9976:	f7ff f8a9 	bl	d8acc <_ZN5spark10JSONWriter4nameEPKcj>
   d997a:	4631      	mov	r1, r6
   d997c:	f7ff f91c 	bl	d8bb8 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
   d9980:	7923      	ldrb	r3, [r4, #4]
   d9982:	07df      	lsls	r7, r3, #31
   d9984:	d50e      	bpl.n	d99a4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
   d9986:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
   d9988:	212f      	movs	r1, #47	; 0x2f
   d998a:	4630      	mov	r0, r6
   d998c:	f003 f87a 	bl	dca84 <strrchr>
    if (s1) {
   d9990:	b100      	cbz	r0, d9994 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
   d9992:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
   d9994:	4931      	ldr	r1, [pc, #196]	; (d9a5c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   d9996:	2201      	movs	r2, #1
   d9998:	a801      	add	r0, sp, #4
   d999a:	f7ff f897 	bl	d8acc <_ZN5spark10JSONWriter4nameEPKcj>
   d999e:	4631      	mov	r1, r6
   d99a0:	f7ff f90a 	bl	d8bb8 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
   d99a4:	7923      	ldrb	r3, [r4, #4]
   d99a6:	079e      	lsls	r6, r3, #30
   d99a8:	d507      	bpl.n	d99ba <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
   d99aa:	492d      	ldr	r1, [pc, #180]	; (d9a60 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
   d99ac:	2202      	movs	r2, #2
   d99ae:	a801      	add	r0, sp, #4
   d99b0:	f7ff f88c 	bl	d8acc <_ZN5spark10JSONWriter4nameEPKcj>
   d99b4:	68e1      	ldr	r1, [r4, #12]
   d99b6:	f7ff f80d 	bl	d89d4 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
   d99ba:	7923      	ldrb	r3, [r4, #4]
   d99bc:	0758      	lsls	r0, r3, #29
   d99be:	d514      	bpl.n	d99ea <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   d99c0:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
   d99c2:	4633      	mov	r3, r6
   d99c4:	461f      	mov	r7, r3
    for (; *s; ++s) {
   d99c6:	f813 2b01 	ldrb.w	r2, [r3], #1
   d99ca:	b12a      	cbz	r2, d99d8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
   d99cc:	2a20      	cmp	r2, #32
   d99ce:	d101      	bne.n	d99d4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
   d99d0:	461e      	mov	r6, r3
   d99d2:	e7f7      	b.n	d99c4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
   d99d4:	2a28      	cmp	r2, #40	; 0x28
   d99d6:	d1f5      	bne.n	d99c4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
   d99d8:	4922      	ldr	r1, [pc, #136]	; (d9a64 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
   d99da:	2202      	movs	r2, #2
   d99dc:	a801      	add	r0, sp, #4
   d99de:	f7ff f875 	bl	d8acc <_ZN5spark10JSONWriter4nameEPKcj>
   d99e2:	1bba      	subs	r2, r7, r6
   d99e4:	4631      	mov	r1, r6
   d99e6:	f7ff f881 	bl	d8aec <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
   d99ea:	7923      	ldrb	r3, [r4, #4]
   d99ec:	0719      	lsls	r1, r3, #28
   d99ee:	d507      	bpl.n	d9a00 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
   d99f0:	491d      	ldr	r1, [pc, #116]	; (d9a68 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
   d99f2:	2201      	movs	r2, #1
   d99f4:	a801      	add	r0, sp, #4
   d99f6:	f7ff f869 	bl	d8acc <_ZN5spark10JSONWriter4nameEPKcj>
   d99fa:	6961      	ldr	r1, [r4, #20]
   d99fc:	f7fe fffc 	bl	d89f8 <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
   d9a00:	7923      	ldrb	r3, [r4, #4]
   d9a02:	06da      	lsls	r2, r3, #27
   d9a04:	d508      	bpl.n	d9a18 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
   d9a06:	2204      	movs	r2, #4
   d9a08:	4918      	ldr	r1, [pc, #96]	; (d9a6c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   d9a0a:	eb0d 0002 	add.w	r0, sp, r2
   d9a0e:	f7ff f85d 	bl	d8acc <_ZN5spark10JSONWriter4nameEPKcj>
   d9a12:	69a1      	ldr	r1, [r4, #24]
   d9a14:	f7fe ffde 	bl	d89d4 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
   d9a18:	7923      	ldrb	r3, [r4, #4]
   d9a1a:	069b      	lsls	r3, r3, #26
   d9a1c:	d507      	bpl.n	d9a2e <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
   d9a1e:	4914      	ldr	r1, [pc, #80]	; (d9a70 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   d9a20:	2206      	movs	r2, #6
   d9a22:	a801      	add	r0, sp, #4
   d9a24:	f7ff f852 	bl	d8acc <_ZN5spark10JSONWriter4nameEPKcj>
   d9a28:	69e1      	ldr	r1, [r4, #28]
   d9a2a:	f7ff f8c5 	bl	d8bb8 <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
   d9a2e:	a801      	add	r0, sp, #4
   d9a30:	f7fe ffad 	bl	d898e <_ZN5spark10JSONWriter9endObjectEv>
    this->stream()->write((const uint8_t*)"\r\n", 2);
   d9a34:	6a28      	ldr	r0, [r5, #32]
   d9a36:	490f      	ldr	r1, [pc, #60]	; (d9a74 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   d9a38:	6803      	ldr	r3, [r0, #0]
   d9a3a:	2202      	movs	r2, #2
   d9a3c:	68db      	ldr	r3, [r3, #12]
   d9a3e:	4798      	blx	r3
}
   d9a40:	b005      	add	sp, #20
   d9a42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d9a46:	bf00      	nop
   d9a48:	2003e668 	.word	0x2003e668
   d9a4c:	000df738 	.word	0x000df738
   d9a50:	000df6cf 	.word	0x000df6cf
   d9a54:	000df5e1 	.word	0x000df5e1
   d9a58:	000dee37 	.word	0x000dee37
   d9a5c:	000deda6 	.word	0x000deda6
   d9a60:	000df71d 	.word	0x000df71d
   d9a64:	000df720 	.word	0x000df720
   d9a68:	000df46d 	.word	0x000df46d
   d9a6c:	000df723 	.word	0x000df723
   d9a70:	000df728 	.word	0x000df728
   d9a74:	000df321 	.word	0x000df321

000d9a78 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d9a78:	2300      	movs	r3, #0
   d9a7a:	6840      	ldr	r0, [r0, #4]
   d9a7c:	461a      	mov	r2, r3
   d9a7e:	f7fd bffd 	b.w	d7a7c <network_connect>

000d9a82 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d9a82:	6840      	ldr	r0, [r0, #4]
   d9a84:	2200      	movs	r2, #0
   d9a86:	2102      	movs	r1, #2
   d9a88:	f7fe b808 	b.w	d7a9c <network_disconnect>

000d9a8c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d9a8c:	2200      	movs	r2, #0
   d9a8e:	6840      	ldr	r0, [r0, #4]
   d9a90:	4611      	mov	r1, r2
   d9a92:	f7fd bffb 	b.w	d7a8c <network_connecting>

000d9a96 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d9a96:	2200      	movs	r2, #0
   d9a98:	6840      	ldr	r0, [r0, #4]
   d9a9a:	4611      	mov	r1, r2
   d9a9c:	f7fe b806 	b.w	d7aac <network_ready>

000d9aa0 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d9aa0:	2300      	movs	r3, #0
   d9aa2:	6840      	ldr	r0, [r0, #4]
   d9aa4:	461a      	mov	r2, r3
   d9aa6:	4619      	mov	r1, r3
   d9aa8:	f7fe b808 	b.w	d7abc <network_on>

000d9aac <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d9aac:	2300      	movs	r3, #0
   d9aae:	6840      	ldr	r0, [r0, #4]
   d9ab0:	461a      	mov	r2, r3
   d9ab2:	4619      	mov	r1, r3
   d9ab4:	f7fe b80a 	b.w	d7acc <network_off>

000d9ab8 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   d9ab8:	6840      	ldr	r0, [r0, #4]
   d9aba:	2100      	movs	r1, #0
   d9abc:	f7fe b82e 	b.w	d7b1c <network_is_on>

000d9ac0 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   d9ac0:	6840      	ldr	r0, [r0, #4]
   d9ac2:	2100      	movs	r1, #0
   d9ac4:	f7fe b832 	b.w	d7b2c <network_is_off>

000d9ac8 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d9ac8:	6840      	ldr	r0, [r0, #4]
   d9aca:	2200      	movs	r2, #0
   d9acc:	f081 0101 	eor.w	r1, r1, #1
   d9ad0:	f7fe b804 	b.w	d7adc <network_listen>

000d9ad4 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d9ad4:	6840      	ldr	r0, [r0, #4]
   d9ad6:	2200      	movs	r2, #0
   d9ad8:	f7fe b810 	b.w	d7afc <network_set_listen_timeout>

000d9adc <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d9adc:	2200      	movs	r2, #0
   d9ade:	6840      	ldr	r0, [r0, #4]
   d9ae0:	4611      	mov	r1, r2
   d9ae2:	f7fe b813 	b.w	d7b0c <network_get_listen_timeout>

000d9ae6 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d9ae6:	2200      	movs	r2, #0
   d9ae8:	6840      	ldr	r0, [r0, #4]
   d9aea:	4611      	mov	r1, r2
   d9aec:	f7fd bffe 	b.w	d7aec <network_listening>

000d9af0 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d9af0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d9af4:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d9af6:	b095      	sub	sp, #84	; 0x54
   d9af8:	4616      	mov	r6, r2
   d9afa:	460d      	mov	r5, r1
   d9afc:	4607      	mov	r7, r0
    IPAddress addr;
   d9afe:	f7fe fdc3 	bl	d8688 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d9b02:	4621      	mov	r1, r4
   d9b04:	2218      	movs	r2, #24
   d9b06:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d9b08:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d9b0a:	f002 ff1b 	bl	dc944 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d9b0e:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d9b10:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d9b14:	4621      	mov	r1, r4
   d9b16:	466b      	mov	r3, sp
   d9b18:	aa0c      	add	r2, sp, #48	; 0x30
   d9b1a:	4630      	mov	r0, r6
   d9b1c:	f7fd fddc 	bl	d76d8 <netdb_getaddrinfo>
    if (!r) {
   d9b20:	4604      	mov	r4, r0
   d9b22:	2800      	cmp	r0, #0
   d9b24:	d146      	bne.n	d9bb4 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d9b26:	4602      	mov	r2, r0
   d9b28:	2101      	movs	r1, #1
   d9b2a:	6868      	ldr	r0, [r5, #4]
   d9b2c:	f7fd ffbe 	bl	d7aac <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d9b30:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d9b32:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d9b34:	4622      	mov	r2, r4
   d9b36:	6868      	ldr	r0, [r5, #4]
   d9b38:	f7fd ffb8 	bl	d7aac <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d9b3c:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d9b3e:	4681      	mov	r9, r0
        bool ok = false;
   d9b40:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d9b42:	2e00      	cmp	r6, #0
   d9b44:	d036      	beq.n	d9bb4 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
   d9b46:	2900      	cmp	r1, #0
   d9b48:	d134      	bne.n	d9bb4 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d9b4a:	6873      	ldr	r3, [r6, #4]
   d9b4c:	2b02      	cmp	r3, #2
   d9b4e:	d003      	beq.n	d9b58 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d9b50:	2b0a      	cmp	r3, #10
   d9b52:	d00b      	beq.n	d9b6c <_ZN5spark12NetworkClass7resolveEPKc+0x7c>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d9b54:	69f6      	ldr	r6, [r6, #28]
   d9b56:	e7f4      	b.n	d9b42 <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d9b58:	f1b8 0f00 	cmp.w	r8, #0
   d9b5c:	d004      	beq.n	d9b68 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d9b5e:	6971      	ldr	r1, [r6, #20]
   d9b60:	4638      	mov	r0, r7
   d9b62:	3104      	adds	r1, #4
   d9b64:	f7fe fde0 	bl	d8728 <_ZN9IPAddressaSEPKh>
                    ok = true;
                    break;
   d9b68:	4641      	mov	r1, r8
   d9b6a:	e7f3      	b.n	d9b54 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                }
                case AF_INET6: {
                    if (!ipv6) {
   d9b6c:	f1b9 0f00 	cmp.w	r9, #0
   d9b70:	d101      	bne.n	d9b76 <_ZN5spark12NetworkClass7resolveEPKc+0x86>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d9b72:	4649      	mov	r1, r9
   d9b74:	e7ee      	b.n	d9b54 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d9b76:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d9b78:	2210      	movs	r2, #16
   d9b7a:	a801      	add	r0, sp, #4
   d9b7c:	f002 fee2 	bl	dc944 <memset>
                    a.v = 6;
   d9b80:	2306      	movs	r3, #6
   d9b82:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d9b86:	ad01      	add	r5, sp, #4
   d9b88:	f104 0308 	add.w	r3, r4, #8
   d9b8c:	3418      	adds	r4, #24
   d9b8e:	6818      	ldr	r0, [r3, #0]
   d9b90:	6859      	ldr	r1, [r3, #4]
   d9b92:	462a      	mov	r2, r5
   d9b94:	c203      	stmia	r2!, {r0, r1}
   d9b96:	3308      	adds	r3, #8
   d9b98:	42a3      	cmp	r3, r4
   d9b9a:	4615      	mov	r5, r2
   d9b9c:	d1f7      	bne.n	d9b8e <_ZN5spark12NetworkClass7resolveEPKc+0x9e>
                    addr = IPAddress(a);
   d9b9e:	a901      	add	r1, sp, #4
   d9ba0:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d9ba2:	ad07      	add	r5, sp, #28
   d9ba4:	f7fe fd7e 	bl	d86a4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d9ba8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d9baa:	1d3c      	adds	r4, r7, #4
   d9bac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d9bae:	682b      	ldr	r3, [r5, #0]
   d9bb0:	7023      	strb	r3, [r4, #0]
   d9bb2:	e7de      	b.n	d9b72 <_ZN5spark12NetworkClass7resolveEPKc+0x82>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d9bb4:	9800      	ldr	r0, [sp, #0]
   d9bb6:	f7fd fd87 	bl	d76c8 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d9bba:	4638      	mov	r0, r7
   d9bbc:	b015      	add	sp, #84	; 0x54
   d9bbe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d9bc4 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d9bc4:	4b02      	ldr	r3, [pc, #8]	; (d9bd0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d9bc6:	4a03      	ldr	r2, [pc, #12]	; (d9bd4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d9bc8:	601a      	str	r2, [r3, #0]
   d9bca:	2200      	movs	r2, #0
   d9bcc:	605a      	str	r2, [r3, #4]

} // spark
   d9bce:	4770      	bx	lr
   d9bd0:	2003e668 	.word	0x2003e668
   d9bd4:	000df7b0 	.word	0x000df7b0

000d9bd8 <_ZN4PMIC4lockEv.constprop.0>:
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
   d9bd8:	b508      	push	{r3, lr}
            return &Wire1;
   d9bda:	f001 fdc3 	bl	db764 <_Z20__fetch_global_Wire1v>
    return pmicWireInstance()->lock();
}
   d9bde:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return pmicWireInstance()->lock();
   d9be2:	f7fe bcd9 	b.w	d8598 <_ZN7TwoWire4lockEv>

000d9be6 <_ZN4PMICC1Eb>:
PMIC::PMIC(bool _lock) :
   d9be6:	b510      	push	{r4, lr}
   d9be8:	4604      	mov	r4, r0
    lock_(_lock)
   d9bea:	7001      	strb	r1, [r0, #0]
    if (lock_) {
   d9bec:	b109      	cbz	r1, d9bf2 <_ZN4PMICC1Eb+0xc>
        lock();
   d9bee:	f7ff fff3 	bl	d9bd8 <_ZN4PMIC4lockEv.constprop.0>
}
   d9bf2:	4620      	mov	r0, r4
   d9bf4:	bd10      	pop	{r4, pc}

000d9bf6 <_ZN4PMIC5beginEv>:
{
   d9bf6:	b508      	push	{r3, lr}
            return &Wire1;
   d9bf8:	f001 fdb4 	bl	db764 <_Z20__fetch_global_Wire1v>
    if (!pmicWireInstance()->isEnabled()) {
   d9bfc:	f7fe fcc8 	bl	d8590 <_ZN7TwoWire9isEnabledEv>
   d9c00:	b918      	cbnz	r0, d9c0a <_ZN4PMIC5beginEv+0x14>
            return &Wire1;
   d9c02:	f001 fdaf 	bl	db764 <_Z20__fetch_global_Wire1v>
        pmicWireInstance()->begin();
   d9c06:	f7fe fc71 	bl	d84ec <_ZN7TwoWire5beginEv>
            return &Wire1;
   d9c0a:	f001 fdab 	bl	db764 <_Z20__fetch_global_Wire1v>
}
   d9c0e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return pmicWireInstance()->isEnabled();
   d9c12:	f7fe bcbd 	b.w	d8590 <_ZN7TwoWire9isEnabledEv>

000d9c16 <_ZN4PMIC6unlockEv>:

bool PMIC::unlock() {
   d9c16:	b508      	push	{r3, lr}
            return &Wire1;
   d9c18:	f001 fda4 	bl	db764 <_Z20__fetch_global_Wire1v>
    return pmicWireInstance()->unlock();
}
   d9c1c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return pmicWireInstance()->unlock();
   d9c20:	f7fe bcc3 	b.w	d85aa <_ZN7TwoWire6unlockEv>

000d9c24 <_ZNSt10lock_guardI4PMICED1Ev>:
      ~lock_guard()
   d9c24:	b510      	push	{r4, lr}
   d9c26:	4604      	mov	r4, r0
      { _M_device.unlock(); }
   d9c28:	6800      	ldr	r0, [r0, #0]
   d9c2a:	f7ff fff4 	bl	d9c16 <_ZN4PMIC6unlockEv>
   d9c2e:	4620      	mov	r0, r4
   d9c30:	bd10      	pop	{r4, pc}

000d9c32 <_ZN4PMIC12readRegisterEh>:
byte PMIC::readRegister(byte startAddress) {
   d9c32:	b530      	push	{r4, r5, lr}
   d9c34:	b087      	sub	sp, #28
   d9c36:	460d      	mov	r5, r1
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d9c38:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d9c3a:	f7ff ffcd 	bl	d9bd8 <_ZN4PMIC4lockEv.constprop.0>
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d9c3e:	236b      	movs	r3, #107	; 0x6b
   d9c40:	f88d 3008 	strb.w	r3, [sp, #8]
   d9c44:	2300      	movs	r3, #0
   d9c46:	2401      	movs	r4, #1
   d9c48:	9303      	str	r3, [sp, #12]
    timeout_ = ms;
   d9c4a:	230a      	movs	r3, #10
   d9c4c:	9305      	str	r3, [sp, #20]
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d9c4e:	f88d 4010 	strb.w	r4, [sp, #16]
            return &Wire1;
   d9c52:	f001 fd87 	bl	db764 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->beginTransmission(config);
   d9c56:	a902      	add	r1, sp, #8
   d9c58:	f7fe fc7e 	bl	d8558 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
            return &Wire1;
   d9c5c:	f001 fd82 	bl	db764 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->write(startAddress);
   d9c60:	6803      	ldr	r3, [r0, #0]
   d9c62:	4629      	mov	r1, r5
   d9c64:	689b      	ldr	r3, [r3, #8]
   d9c66:	4798      	blx	r3
            return &Wire1;
   d9c68:	f001 fd7c 	bl	db764 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->endTransmission(true);
   d9c6c:	4621      	mov	r1, r4
   d9c6e:	f7fe fc8b 	bl	d8588 <_ZN7TwoWire15endTransmissionEh>
    size_ = size;
   d9c72:	9403      	str	r4, [sp, #12]
            return &Wire1;
   d9c74:	f001 fd76 	bl	db764 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->requestFrom(config);
   d9c78:	a902      	add	r1, sp, #8
   d9c7a:	f7fe fc3d 	bl	d84f8 <_ZN7TwoWire11requestFromERK16WireTransmission>
            return &Wire1;
   d9c7e:	f001 fd71 	bl	db764 <_Z20__fetch_global_Wire1v>
    DATA = pmicWireInstance()->read();
   d9c82:	6803      	ldr	r3, [r0, #0]
   d9c84:	695b      	ldr	r3, [r3, #20]
   d9c86:	4798      	blx	r3
   d9c88:	4604      	mov	r4, r0
    std::lock_guard<PMIC> l(*this);
   d9c8a:	a801      	add	r0, sp, #4
   d9c8c:	f7ff ffca 	bl	d9c24 <_ZNSt10lock_guardI4PMICED1Ev>
}
   d9c90:	b2e0      	uxtb	r0, r4
   d9c92:	b007      	add	sp, #28
   d9c94:	bd30      	pop	{r4, r5, pc}

000d9c96 <_ZN4PMIC13writeRegisterEhh>:
void PMIC::writeRegister(byte address, byte DATA) {
   d9c96:	b570      	push	{r4, r5, r6, lr}
   d9c98:	b086      	sub	sp, #24
   d9c9a:	4614      	mov	r4, r2
   d9c9c:	460d      	mov	r5, r1
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d9c9e:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d9ca0:	f7ff ff9a 	bl	d9bd8 <_ZN4PMIC4lockEv.constprop.0>
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d9ca4:	236b      	movs	r3, #107	; 0x6b
   d9ca6:	f88d 3008 	strb.w	r3, [sp, #8]
   d9caa:	2300      	movs	r3, #0
   d9cac:	9303      	str	r3, [sp, #12]
   d9cae:	2601      	movs	r6, #1
    timeout_ = ms;
   d9cb0:	230a      	movs	r3, #10
   d9cb2:	9305      	str	r3, [sp, #20]
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d9cb4:	f88d 6010 	strb.w	r6, [sp, #16]
            return &Wire1;
   d9cb8:	f001 fd54 	bl	db764 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->beginTransmission(config);
   d9cbc:	a902      	add	r1, sp, #8
   d9cbe:	f7fe fc4b 	bl	d8558 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
            return &Wire1;
   d9cc2:	f001 fd4f 	bl	db764 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->write(address);
   d9cc6:	6803      	ldr	r3, [r0, #0]
   d9cc8:	4629      	mov	r1, r5
   d9cca:	689b      	ldr	r3, [r3, #8]
   d9ccc:	4798      	blx	r3
            return &Wire1;
   d9cce:	f001 fd49 	bl	db764 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->write(DATA);
   d9cd2:	6803      	ldr	r3, [r0, #0]
   d9cd4:	4621      	mov	r1, r4
   d9cd6:	689b      	ldr	r3, [r3, #8]
   d9cd8:	4798      	blx	r3
            return &Wire1;
   d9cda:	f001 fd43 	bl	db764 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->endTransmission(true);
   d9cde:	4631      	mov	r1, r6
   d9ce0:	f7fe fc52 	bl	d8588 <_ZN7TwoWire15endTransmissionEh>
    std::lock_guard<PMIC> l(*this);
   d9ce4:	a801      	add	r0, sp, #4
   d9ce6:	f7ff ff9d 	bl	d9c24 <_ZNSt10lock_guardI4PMICED1Ev>
}
   d9cea:	b006      	add	sp, #24
   d9cec:	bd70      	pop	{r4, r5, r6, pc}

000d9cee <_ZN4PMIC14enableChargingEv>:
bool PMIC::enableCharging() {
   d9cee:	b513      	push	{r0, r1, r4, lr}
   d9cf0:	4604      	mov	r4, r0
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d9cf2:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d9cf4:	f7ff ff70 	bl	d9bd8 <_ZN4PMIC4lockEv.constprop.0>
    byte DATA = readRegister(POWERON_CONFIG_REGISTER);
   d9cf8:	2101      	movs	r1, #1
   d9cfa:	4620      	mov	r0, r4
   d9cfc:	f7ff ff99 	bl	d9c32 <_ZN4PMIC12readRegisterEh>
    DATA = DATA & 0b11001111;
   d9d00:	f000 00cf 	and.w	r0, r0, #207	; 0xcf
    writeRegister(POWERON_CONFIG_REGISTER, DATA);
   d9d04:	f040 0210 	orr.w	r2, r0, #16
   d9d08:	2101      	movs	r1, #1
   d9d0a:	4620      	mov	r0, r4
   d9d0c:	f7ff ffc3 	bl	d9c96 <_ZN4PMIC13writeRegisterEhh>
    std::lock_guard<PMIC> l(*this);
   d9d10:	a801      	add	r0, sp, #4
   d9d12:	f7ff ff87 	bl	d9c24 <_ZNSt10lock_guardI4PMICED1Ev>
}
   d9d16:	2001      	movs	r0, #1
   d9d18:	b002      	add	sp, #8
   d9d1a:	bd10      	pop	{r4, pc}

000d9d1c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d9d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d9d1e:	4606      	mov	r6, r0
   d9d20:	460d      	mov	r5, r1
  size_t n = 0;
   d9d22:	188f      	adds	r7, r1, r2
   d9d24:	2400      	movs	r4, #0
  while (size--) {
   d9d26:	42bd      	cmp	r5, r7
   d9d28:	d00c      	beq.n	d9d44 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d9d2a:	6833      	ldr	r3, [r6, #0]
   d9d2c:	f815 1b01 	ldrb.w	r1, [r5], #1
   d9d30:	689b      	ldr	r3, [r3, #8]
   d9d32:	4630      	mov	r0, r6
   d9d34:	4798      	blx	r3
     if (chunk>=0)
   d9d36:	1e03      	subs	r3, r0, #0
   d9d38:	db01      	blt.n	d9d3e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d9d3a:	441c      	add	r4, r3
  while (size--) {
   d9d3c:	e7f3      	b.n	d9d26 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d9d3e:	2c00      	cmp	r4, #0
   d9d40:	bf08      	it	eq
   d9d42:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d9d44:	4620      	mov	r0, r4
   d9d46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d9d48 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   d9d48:	b513      	push	{r0, r1, r4, lr}
   d9d4a:	4604      	mov	r4, r0
    }
   d9d4c:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d9d4e:	b159      	cbz	r1, d9d68 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d9d50:	9101      	str	r1, [sp, #4]
   d9d52:	f002 fe6a 	bl	dca2a <strlen>
   d9d56:	6823      	ldr	r3, [r4, #0]
   d9d58:	9901      	ldr	r1, [sp, #4]
   d9d5a:	68db      	ldr	r3, [r3, #12]
   d9d5c:	4602      	mov	r2, r0
   d9d5e:	4620      	mov	r0, r4
    }
   d9d60:	b002      	add	sp, #8
   d9d62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d9d66:	4718      	bx	r3
    }
   d9d68:	b002      	add	sp, #8
   d9d6a:	bd10      	pop	{r4, pc}

000d9d6c <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   d9d6c:	b508      	push	{r3, lr}
  return write(str);
   d9d6e:	f7ff ffeb 	bl	d9d48 <_ZN5Print5writeEPKc>
}
   d9d72:	bd08      	pop	{r3, pc}

000d9d74 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   d9d74:	6803      	ldr	r3, [r0, #0]
   d9d76:	689b      	ldr	r3, [r3, #8]
   d9d78:	4718      	bx	r3

000d9d7a <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d9d7a:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d9d7c:	210d      	movs	r1, #13
{
   d9d7e:	4605      	mov	r5, r0
  size_t n = print('\r');
   d9d80:	f7ff fff8 	bl	d9d74 <_ZN5Print5printEc>
  n += print('\n');
   d9d84:	210a      	movs	r1, #10
  size_t n = print('\r');
   d9d86:	4604      	mov	r4, r0
  n += print('\n');
   d9d88:	4628      	mov	r0, r5
   d9d8a:	f7ff fff3 	bl	d9d74 <_ZN5Print5printEc>
  return n;
}
   d9d8e:	4420      	add	r0, r4
   d9d90:	bd38      	pop	{r3, r4, r5, pc}

000d9d92 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d9d92:	b538      	push	{r3, r4, r5, lr}
   d9d94:	4605      	mov	r5, r0
  return write(str);
   d9d96:	f7ff ffd7 	bl	d9d48 <_ZN5Print5writeEPKc>
   d9d9a:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   d9d9c:	4628      	mov	r0, r5
   d9d9e:	f7ff ffec 	bl	d9d7a <_ZN5Print7printlnEv>
  return n;
}
   d9da2:	4420      	add	r0, r4
   d9da4:	bd38      	pop	{r3, r4, r5, pc}

000d9da6 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d9da6:	b530      	push	{r4, r5, lr}
   d9da8:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d9daa:	2300      	movs	r3, #0
   d9dac:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d9db0:	2a01      	cmp	r2, #1
   d9db2:	bf98      	it	ls
   d9db4:	220a      	movls	r2, #10
   d9db6:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d9db8:	460d      	mov	r5, r1
   d9dba:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d9dbe:	fb01 5312 	mls	r3, r1, r2, r5
   d9dc2:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d9dc6:	2b09      	cmp	r3, #9
   d9dc8:	bf94      	ite	ls
   d9dca:	3330      	addls	r3, #48	; 0x30
   d9dcc:	3337      	addhi	r3, #55	; 0x37
   d9dce:	b2db      	uxtb	r3, r3
  } while(n);
   d9dd0:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d9dd2:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d9dd6:	d9ef      	bls.n	d9db8 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d9dd8:	4621      	mov	r1, r4
   d9dda:	f7ff ffb5 	bl	d9d48 <_ZN5Print5writeEPKc>
}
   d9dde:	b00b      	add	sp, #44	; 0x2c
   d9de0:	bd30      	pop	{r4, r5, pc}

000d9de2 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   d9de2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d9de6:	b086      	sub	sp, #24
   d9de8:	af00      	add	r7, sp, #0
   d9dea:	4605      	mov	r5, r0
   d9dec:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   d9dee:	1d38      	adds	r0, r7, #4
   d9df0:	2114      	movs	r1, #20
{
   d9df2:	4614      	mov	r4, r2
    va_copy(args2, args);
   d9df4:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   d9df6:	f7fd fed1 	bl	d7b9c <vsnprintf>

    if (n<bufsize)
   d9dfa:	2813      	cmp	r0, #19
   d9dfc:	d80e      	bhi.n	d9e1c <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   d9dfe:	1d39      	adds	r1, r7, #4
   d9e00:	4628      	mov	r0, r5
   d9e02:	f7ff ffa1 	bl	d9d48 <_ZN5Print5writeEPKc>
   d9e06:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   d9e08:	b11e      	cbz	r6, d9e12 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   d9e0a:	4628      	mov	r0, r5
   d9e0c:	f7ff ffb5 	bl	d9d7a <_ZN5Print7printlnEv>
   d9e10:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   d9e12:	4620      	mov	r0, r4
   d9e14:	3718      	adds	r7, #24
   d9e16:	46bd      	mov	sp, r7
   d9e18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   d9e1c:	f100 0308 	add.w	r3, r0, #8
   d9e20:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   d9e24:	46e8      	mov	r8, sp
        char bigger[n+1];
   d9e26:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   d9e2a:	4622      	mov	r2, r4
   d9e2c:	1c41      	adds	r1, r0, #1
   d9e2e:	683b      	ldr	r3, [r7, #0]
   d9e30:	4668      	mov	r0, sp
   d9e32:	f7fd feb3 	bl	d7b9c <vsnprintf>
  return write(str);
   d9e36:	4669      	mov	r1, sp
   d9e38:	4628      	mov	r0, r5
   d9e3a:	f7ff ff85 	bl	d9d48 <_ZN5Print5writeEPKc>
   d9e3e:	4604      	mov	r4, r0
   d9e40:	46c5      	mov	sp, r8
   d9e42:	e7e1      	b.n	d9e08 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000d9e44 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d9e44:	4b01      	ldr	r3, [pc, #4]	; (d9e4c <_GLOBAL__sub_I_RGB+0x8>)
   d9e46:	2200      	movs	r2, #0
   d9e48:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   d9e4a:	4770      	bx	lr
   d9e4c:	2003e670 	.word	0x2003e670

000d9e50 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d9e50:	b510      	push	{r4, lr}
   d9e52:	4604      	mov	r4, r0
   d9e54:	4608      	mov	r0, r1
{
    _spi = spi;
   d9e56:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d9e58:	f7fd fc8e 	bl	d7778 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d9e5c:	2300      	movs	r3, #0
   d9e5e:	6063      	str	r3, [r4, #4]
}
   d9e60:	4620      	mov	r0, r4
   d9e62:	bd10      	pop	{r4, pc}

000d9e64 <_Z4dtoadhPc>:
#include "string_convert.h"

//These are very crude implementations - will refine later
//------------------------------------------------------------------------------------------

void dtoa (double val, unsigned char prec, char *sout) {
   d9e64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d9e68:	ec57 6b10 	vmov	r6, r7, d0
   d9e6c:	4680      	mov	r8, r0
   d9e6e:	460c      	mov	r4, r1
    bool negative = val<0;
    if (negative) {
   d9e70:	ee10 0a10 	vmov	r0, s0
   d9e74:	2200      	movs	r2, #0
   d9e76:	2300      	movs	r3, #0
   d9e78:	4639      	mov	r1, r7
   d9e7a:	f002 fa93 	bl	dc3a4 <__aeabi_dcmplt>
   d9e7e:	b128      	cbz	r0, d9e8c <_Z4dtoadhPc+0x28>
        val = -val;
   d9e80:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   d9e84:	461f      	mov	r7, r3
        *sout++ = '-';
   d9e86:	232d      	movs	r3, #45	; 0x2d
   d9e88:	f804 3b01 	strb.w	r3, [r4], #1
   d9e8c:	2300      	movs	r3, #0
    }
    long scale = 1;
   d9e8e:	f04f 0901 	mov.w	r9, #1
    for (uint8_t i=0; i<prec; i++)
        scale *= 10;
   d9e92:	220a      	movs	r2, #10
    for (uint8_t i=0; i<prec; i++)
   d9e94:	b2d9      	uxtb	r1, r3
   d9e96:	4588      	cmp	r8, r1
   d9e98:	d903      	bls.n	d9ea2 <_Z4dtoadhPc+0x3e>
        scale *= 10;
   d9e9a:	fb02 f909 	mul.w	r9, r2, r9
    for (uint8_t i=0; i<prec; i++)
   d9e9e:	3301      	adds	r3, #1
   d9ea0:	e7f8      	b.n	d9e94 <_Z4dtoadhPc+0x30>
    val *= scale;   // capture all the significant digits
   d9ea2:	4648      	mov	r0, r9
   d9ea4:	f001 ffa2 	bl	dbdec <__aeabi_i2d>
   d9ea8:	4632      	mov	r2, r6
   d9eaa:	463b      	mov	r3, r7
   d9eac:	f002 f808 	bl	dbec0 <__aeabi_dmul>
   d9eb0:	4606      	mov	r6, r0
   d9eb2:	460f      	mov	r7, r1
    uint64_t fixed = uint64_t(val);
   d9eb4:	f002 fb5a 	bl	dc56c <__aeabi_d2ulz>
   d9eb8:	4605      	mov	r5, r0
   d9eba:	468a      	mov	sl, r1
    if ((val-fixed)>=0.5)    // round last digit
   d9ebc:	f001 ffca 	bl	dbe54 <__aeabi_ul2d>
   d9ec0:	4602      	mov	r2, r0
   d9ec2:	460b      	mov	r3, r1
   d9ec4:	4630      	mov	r0, r6
   d9ec6:	4639      	mov	r1, r7
   d9ec8:	f001 fe42 	bl	dbb50 <__aeabi_dsub>
   d9ecc:	4b13      	ldr	r3, [pc, #76]	; (d9f1c <_Z4dtoadhPc+0xb8>)
   d9ece:	2200      	movs	r2, #0
   d9ed0:	f002 fa7c 	bl	dc3cc <__aeabi_dcmpge>
   d9ed4:	b110      	cbz	r0, d9edc <_Z4dtoadhPc+0x78>
        fixed++;
   d9ed6:	3501      	adds	r5, #1
   d9ed8:	f14a 0a00 	adc.w	sl, sl, #0

    unsigned long first = (unsigned long)(fixed / scale);
   d9edc:	464a      	mov	r2, r9
   d9ede:	4628      	mov	r0, r5
   d9ee0:	17d3      	asrs	r3, r2, #31
   d9ee2:	4651      	mov	r1, sl
   d9ee4:	f002 faf6 	bl	dc4d4 <__aeabi_uldivmod>
    unsigned long second = (unsigned long)(fixed % scale);

    ultoa(first, sout, 10, 1);
   d9ee8:	2301      	movs	r3, #1
   d9eea:	4615      	mov	r5, r2
   d9eec:	4621      	mov	r1, r4
   d9eee:	220a      	movs	r2, #10
   d9ef0:	f001 fa83 	bl	db3fa <ultoa>
    if (prec) {
   d9ef4:	f1b8 0f00 	cmp.w	r8, #0
   d9ef8:	d00d      	beq.n	d9f16 <_Z4dtoadhPc+0xb2>
        sout += strlen(sout);
   d9efa:	4620      	mov	r0, r4
   d9efc:	f002 fd95 	bl	dca2a <strlen>
        *sout++ = '.';
   d9f00:	232e      	movs	r3, #46	; 0x2e
        sout += strlen(sout);
   d9f02:	1821      	adds	r1, r4, r0
        *sout++ = '.';
   d9f04:	5423      	strb	r3, [r4, r0]
        ultoa(second, sout, 10, prec);
   d9f06:	220a      	movs	r2, #10
   d9f08:	4643      	mov	r3, r8
   d9f0a:	4628      	mov	r0, r5
   d9f0c:	3101      	adds	r1, #1
    }
}
   d9f0e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        ultoa(second, sout, 10, prec);
   d9f12:	f001 ba72 	b.w	db3fa <ultoa>
}
   d9f16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d9f1a:	bf00      	nop
   d9f1c:	3fe00000 	.word	0x3fe00000

000d9f20 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d9f20:	b510      	push	{r4, lr}
   d9f22:	4604      	mov	r4, r0
{
	free(buffer);
   d9f24:	6800      	ldr	r0, [r0, #0]
   d9f26:	f7fd fe11 	bl	d7b4c <free>
}
   d9f2a:	4620      	mov	r0, r4
   d9f2c:	bd10      	pop	{r4, pc}

000d9f2e <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d9f2e:	b510      	push	{r4, lr}
   d9f30:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d9f32:	6800      	ldr	r0, [r0, #0]
   d9f34:	b108      	cbz	r0, d9f3a <_ZN6String10invalidateEv+0xc>
   d9f36:	f7fd fe09 	bl	d7b4c <free>
	buffer = NULL;
   d9f3a:	2300      	movs	r3, #0
	capacity = len = 0;
   d9f3c:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   d9f40:	6023      	str	r3, [r4, #0]
}
   d9f42:	bd10      	pop	{r4, pc}

000d9f44 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d9f44:	b538      	push	{r3, r4, r5, lr}
   d9f46:	4604      	mov	r4, r0
   d9f48:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d9f4a:	6800      	ldr	r0, [r0, #0]
   d9f4c:	3101      	adds	r1, #1
   d9f4e:	f7fd fe05 	bl	d7b5c <realloc>
	if (newbuffer) {
   d9f52:	b110      	cbz	r0, d9f5a <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d9f54:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   d9f58:	2001      	movs	r0, #1
	}
	return 0;
}
   d9f5a:	bd38      	pop	{r3, r4, r5, pc}

000d9f5c <_ZN6String7reserveEj>:
{
   d9f5c:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d9f5e:	6803      	ldr	r3, [r0, #0]
{
   d9f60:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d9f62:	b123      	cbz	r3, d9f6e <_ZN6String7reserveEj+0x12>
   d9f64:	6843      	ldr	r3, [r0, #4]
   d9f66:	428b      	cmp	r3, r1
   d9f68:	d301      	bcc.n	d9f6e <_ZN6String7reserveEj+0x12>
   d9f6a:	2001      	movs	r0, #1
}
   d9f6c:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   d9f6e:	4620      	mov	r0, r4
   d9f70:	f7ff ffe8 	bl	d9f44 <_ZN6String12changeBufferEj>
   d9f74:	2800      	cmp	r0, #0
   d9f76:	d0f9      	beq.n	d9f6c <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   d9f78:	68a3      	ldr	r3, [r4, #8]
   d9f7a:	2b00      	cmp	r3, #0
   d9f7c:	d1f5      	bne.n	d9f6a <_ZN6String7reserveEj+0xe>
   d9f7e:	6822      	ldr	r2, [r4, #0]
   d9f80:	7013      	strb	r3, [r2, #0]
   d9f82:	e7f2      	b.n	d9f6a <_ZN6String7reserveEj+0xe>

000d9f84 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d9f84:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d9f86:	460d      	mov	r5, r1
	if (!reserve(length)) {
   d9f88:	4611      	mov	r1, r2
   d9f8a:	9201      	str	r2, [sp, #4]
{
   d9f8c:	4604      	mov	r4, r0
	if (!reserve(length)) {
   d9f8e:	f7ff ffe5 	bl	d9f5c <_ZN6String7reserveEj>
   d9f92:	9a01      	ldr	r2, [sp, #4]
   d9f94:	b928      	cbnz	r0, d9fa2 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   d9f96:	4620      	mov	r0, r4
   d9f98:	f7ff ffc9 	bl	d9f2e <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   d9f9c:	4620      	mov	r0, r4
   d9f9e:	b003      	add	sp, #12
   d9fa0:	bd30      	pop	{r4, r5, pc}
	len = length;
   d9fa2:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   d9fa4:	4629      	mov	r1, r5
   d9fa6:	6820      	ldr	r0, [r4, #0]
   d9fa8:	f002 fca4 	bl	dc8f4 <memcpy>
	buffer[len] = 0;
   d9fac:	6822      	ldr	r2, [r4, #0]
   d9fae:	68a3      	ldr	r3, [r4, #8]
   d9fb0:	2100      	movs	r1, #0
   d9fb2:	54d1      	strb	r1, [r2, r3]
	return *this;
   d9fb4:	e7f2      	b.n	d9f9c <_ZN6String4copyEPKcj+0x18>

000d9fb6 <_ZN6StringC1EPKc>:
	buffer = NULL;
   d9fb6:	2300      	movs	r3, #0
String::String(const char *cstr)
   d9fb8:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   d9fba:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const char *cstr)
   d9fbe:	4604      	mov	r4, r0
	len = 0;
   d9fc0:	6083      	str	r3, [r0, #8]
	flags = 0;
   d9fc2:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   d9fc4:	b141      	cbz	r1, d9fd8 <_ZN6StringC1EPKc+0x22>
   d9fc6:	4608      	mov	r0, r1
   d9fc8:	9101      	str	r1, [sp, #4]
   d9fca:	f002 fd2e 	bl	dca2a <strlen>
   d9fce:	9901      	ldr	r1, [sp, #4]
   d9fd0:	4602      	mov	r2, r0
   d9fd2:	4620      	mov	r0, r4
   d9fd4:	f7ff ffd6 	bl	d9f84 <_ZN6String4copyEPKcj>
}
   d9fd8:	4620      	mov	r0, r4
   d9fda:	b002      	add	sp, #8
   d9fdc:	bd10      	pop	{r4, pc}

000d9fde <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   d9fde:	b538      	push	{r3, r4, r5, lr}
   d9fe0:	4605      	mov	r5, r0
	if (buffer) {
   d9fe2:	6800      	ldr	r0, [r0, #0]
{
   d9fe4:	460c      	mov	r4, r1
	if (buffer) {
   d9fe6:	b168      	cbz	r0, da004 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   d9fe8:	686a      	ldr	r2, [r5, #4]
   d9fea:	688b      	ldr	r3, [r1, #8]
   d9fec:	429a      	cmp	r2, r3
   d9fee:	d307      	bcc.n	da000 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   d9ff0:	6809      	ldr	r1, [r1, #0]
   d9ff2:	f002 fcf4 	bl	dc9de <strcpy>
			len = rhs.len;
   d9ff6:	68a3      	ldr	r3, [r4, #8]
   d9ff8:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   d9ffa:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   d9ffc:	60a3      	str	r3, [r4, #8]
}
   d9ffe:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   da000:	f7fd fda4 	bl	d7b4c <free>
	buffer = rhs.buffer;
   da004:	6823      	ldr	r3, [r4, #0]
   da006:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   da008:	6863      	ldr	r3, [r4, #4]
   da00a:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   da00c:	68a3      	ldr	r3, [r4, #8]
   da00e:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   da010:	2300      	movs	r3, #0
	rhs.capacity = 0;
   da012:	e9c4 3300 	strd	r3, r3, [r4]
   da016:	e7f1      	b.n	d9ffc <_ZN6String4moveERS_+0x1e>

000da018 <_ZN6StringC1EOS_>:
String::String(String &&rval)
   da018:	b510      	push	{r4, lr}
	buffer = NULL;
   da01a:	2300      	movs	r3, #0
	capacity = 0;
   da01c:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   da020:	4604      	mov	r4, r0
	len = 0;
   da022:	6083      	str	r3, [r0, #8]
	flags = 0;
   da024:	7303      	strb	r3, [r0, #12]
	move(rval);
   da026:	f7ff ffda 	bl	d9fde <_ZN6String4moveERS_>
}
   da02a:	4620      	mov	r0, r4
   da02c:	bd10      	pop	{r4, pc}

000da02e <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   da02e:	4288      	cmp	r0, r1
{
   da030:	b510      	push	{r4, lr}
   da032:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   da034:	d005      	beq.n	da042 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   da036:	680b      	ldr	r3, [r1, #0]
   da038:	b12b      	cbz	r3, da046 <_ZN6StringaSERKS_+0x18>
   da03a:	688a      	ldr	r2, [r1, #8]
   da03c:	4619      	mov	r1, r3
   da03e:	f7ff ffa1 	bl	d9f84 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   da042:	4620      	mov	r0, r4
   da044:	bd10      	pop	{r4, pc}
	else invalidate();
   da046:	f7ff ff72 	bl	d9f2e <_ZN6String10invalidateEv>
   da04a:	e7fa      	b.n	da042 <_ZN6StringaSERKS_+0x14>

000da04c <_ZN6StringC1ERKS_>:
String::String(const String &value)
   da04c:	b510      	push	{r4, lr}
	buffer = NULL;
   da04e:	2300      	movs	r3, #0
String::String(const String &value)
   da050:	4604      	mov	r4, r0
	capacity = 0;
   da052:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   da056:	6083      	str	r3, [r0, #8]
	flags = 0;
   da058:	7303      	strb	r3, [r0, #12]
	*this = value;
   da05a:	f7ff ffe8 	bl	da02e <_ZN6StringaSERKS_>
}
   da05e:	4620      	mov	r0, r4
   da060:	bd10      	pop	{r4, pc}

000da062 <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
   da062:	4288      	cmp	r0, r1
{
   da064:	b510      	push	{r4, lr}
   da066:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   da068:	d001      	beq.n	da06e <_ZN6StringaSEOS_+0xc>
   da06a:	f7ff ffb8 	bl	d9fde <_ZN6String4moveERS_>
	return *this;
}
   da06e:	4620      	mov	r0, r4
   da070:	bd10      	pop	{r4, pc}

000da072 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   da072:	b513      	push	{r0, r1, r4, lr}
   da074:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   da076:	b159      	cbz	r1, da090 <_ZN6StringaSEPKc+0x1e>
   da078:	4608      	mov	r0, r1
   da07a:	9101      	str	r1, [sp, #4]
   da07c:	f002 fcd5 	bl	dca2a <strlen>
   da080:	9901      	ldr	r1, [sp, #4]
   da082:	4602      	mov	r2, r0
   da084:	4620      	mov	r0, r4
   da086:	f7ff ff7d 	bl	d9f84 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   da08a:	4620      	mov	r0, r4
   da08c:	b002      	add	sp, #8
   da08e:	bd10      	pop	{r4, pc}
	else invalidate();
   da090:	f7ff ff4d 	bl	d9f2e <_ZN6String10invalidateEv>
   da094:	e7f9      	b.n	da08a <_ZN6StringaSEPKc+0x18>

000da096 <_ZN6StringC1Efi>:
String::String(float value, int decimalPlaces)
   da096:	b530      	push	{r4, r5, lr}
   da098:	4604      	mov	r4, r0
	buffer = NULL;
   da09a:	2300      	movs	r3, #0
String::String(float value, int decimalPlaces)
   da09c:	b08b      	sub	sp, #44	; 0x2c
	capacity = 0;
   da09e:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   da0a2:	60a3      	str	r3, [r4, #8]
	flags = 0;
   da0a4:	7323      	strb	r3, [r4, #12]
String::String(float value, int decimalPlaces)
   da0a6:	ee10 0a10 	vmov	r0, s0
	dtoa(value, decimalPlaces, buf);
   da0aa:	b2cd      	uxtb	r5, r1
   da0ac:	f001 feb0 	bl	dbe10 <__aeabi_f2d>
   da0b0:	ec41 0b10 	vmov	d0, r0, r1
   da0b4:	a901      	add	r1, sp, #4
   da0b6:	4628      	mov	r0, r5
   da0b8:	f7ff fed4 	bl	d9e64 <_Z4dtoadhPc>
        *this = buf;
   da0bc:	a901      	add	r1, sp, #4
   da0be:	4620      	mov	r0, r4
   da0c0:	f7ff ffd7 	bl	da072 <_ZN6StringaSEPKc>
}
   da0c4:	4620      	mov	r0, r4
   da0c6:	b00b      	add	sp, #44	; 0x2c
   da0c8:	bd30      	pop	{r4, r5, pc}

000da0ca <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   da0ca:	b570      	push	{r4, r5, r6, lr}
   da0cc:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   da0ce:	460e      	mov	r6, r1
   da0d0:	b909      	cbnz	r1, da0d6 <_ZN6String6concatEPKcj+0xc>
   da0d2:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   da0d4:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   da0d6:	b16a      	cbz	r2, da0f4 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   da0d8:	6884      	ldr	r4, [r0, #8]
   da0da:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   da0dc:	4621      	mov	r1, r4
   da0de:	f7ff ff3d 	bl	d9f5c <_ZN6String7reserveEj>
   da0e2:	2800      	cmp	r0, #0
   da0e4:	d0f5      	beq.n	da0d2 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   da0e6:	6828      	ldr	r0, [r5, #0]
   da0e8:	68ab      	ldr	r3, [r5, #8]
   da0ea:	4631      	mov	r1, r6
   da0ec:	4418      	add	r0, r3
   da0ee:	f002 fc76 	bl	dc9de <strcpy>
	len = newlen;
   da0f2:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   da0f4:	2001      	movs	r0, #1
   da0f6:	e7ed      	b.n	da0d4 <_ZN6String6concatEPKcj+0xa>

000da0f8 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   da0f8:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   da0fa:	688a      	ldr	r2, [r1, #8]
   da0fc:	6809      	ldr	r1, [r1, #0]
{
   da0fe:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   da100:	f7ff ffe3 	bl	da0ca <_ZN6String6concatEPKcj>
   da104:	b910      	cbnz	r0, da10c <_ZplRK15StringSumHelperRK6String+0x14>
   da106:	4620      	mov	r0, r4
   da108:	f7ff ff11 	bl	d9f2e <_ZN6String10invalidateEv>
	return a;
}
   da10c:	4620      	mov	r0, r4
   da10e:	bd10      	pop	{r4, pc}

000da110 <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   da110:	b513      	push	{r0, r1, r4, lr}
   da112:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   da114:	b929      	cbnz	r1, da122 <_ZplRK15StringSumHelperPKc+0x12>
   da116:	4620      	mov	r0, r4
   da118:	f7ff ff09 	bl	d9f2e <_ZN6String10invalidateEv>
	return a;
}
   da11c:	4620      	mov	r0, r4
   da11e:	b002      	add	sp, #8
   da120:	bd10      	pop	{r4, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   da122:	4608      	mov	r0, r1
   da124:	9101      	str	r1, [sp, #4]
   da126:	f002 fc80 	bl	dca2a <strlen>
   da12a:	9901      	ldr	r1, [sp, #4]
   da12c:	4602      	mov	r2, r0
   da12e:	4620      	mov	r0, r4
   da130:	f7ff ffcb 	bl	da0ca <_ZN6String6concatEPKcj>
   da134:	2800      	cmp	r0, #0
   da136:	d0ee      	beq.n	da116 <_ZplRK15StringSumHelperPKc+0x6>
   da138:	e7f0      	b.n	da11c <_ZplRK15StringSumHelperPKc+0xc>

000da13a <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   da13a:	b510      	push	{r4, lr}
   da13c:	4604      	mov	r4, r0
        if (wakeupSource_) {
   da13e:	6800      	ldr	r0, [r0, #0]
   da140:	b118      	cbz	r0, da14a <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
   da142:	f7fd fd03 	bl	d7b4c <free>
            wakeupSource_ = nullptr;
   da146:	2300      	movs	r3, #0
   da148:	6023      	str	r3, [r4, #0]
        }
    }
   da14a:	bd10      	pop	{r4, pc}

000da14c <_ZN17SystemSleepResultaSEOS_>:
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   da14c:	b538      	push	{r3, r4, r5, lr}
        error_ = result.error_;
   da14e:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
   da152:	8083      	strh	r3, [r0, #4]
        compatResult_ = result.compatResult_;
   da154:	460b      	mov	r3, r1
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   da156:	460d      	mov	r5, r1
        compatResult_ = result.compatResult_;
   da158:	f853 2f06 	ldr.w	r2, [r3, #6]!
   da15c:	f8c0 2006 	str.w	r2, [r0, #6]
   da160:	889b      	ldrh	r3, [r3, #4]
   da162:	8143      	strh	r3, [r0, #10]
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   da164:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
   da166:	f7ff ffe8 	bl	da13a <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
        if (result.wakeupSource_) {
   da16a:	682b      	ldr	r3, [r5, #0]
   da16c:	b113      	cbz	r3, da174 <_ZN17SystemSleepResultaSEOS_+0x28>
            wakeupSource_ = result.wakeupSource_;
   da16e:	6023      	str	r3, [r4, #0]
            result.wakeupSource_ = nullptr;
   da170:	2300      	movs	r3, #0
   da172:	602b      	str	r3, [r5, #0]
    }
   da174:	4620      	mov	r0, r4
   da176:	bd38      	pop	{r3, r4, r5, pc}

000da178 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>:

    int copyWakeupSource(hal_wakeup_source_base_t* source) {
   da178:	b538      	push	{r3, r4, r5, lr}
   da17a:	460c      	mov	r4, r1
   da17c:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
   da17e:	f7ff ffdc 	bl	da13a <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
        if (source) {
   da182:	b144      	cbz	r4, da196 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x1e>
            wakeupSource_ = (hal_wakeup_source_base_t*)malloc(source->size);
   da184:	8820      	ldrh	r0, [r4, #0]
   da186:	f7fd fcd9 	bl	d7b3c <malloc>
   da18a:	6028      	str	r0, [r5, #0]
            if (wakeupSource_) {
   da18c:	b128      	cbz	r0, da19a <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x22>
                memcpy(wakeupSource_, source, source->size);
   da18e:	8822      	ldrh	r2, [r4, #0]
   da190:	4621      	mov	r1, r4
   da192:	f002 fbaf 	bl	dc8f4 <memcpy>
            } else {
                return SYSTEM_ERROR_NO_MEMORY;
            }
        }
        return SYSTEM_ERROR_NONE;
   da196:	2000      	movs	r0, #0
    }
   da198:	bd38      	pop	{r3, r4, r5, pc}
                return SYSTEM_ERROR_NO_MEMORY;
   da19a:	4801      	ldr	r0, [pc, #4]	; (da1a0 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x28>)
   da19c:	e7fc      	b.n	da198 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x20>
   da19e:	bf00      	nop
   da1a0:	fffffefc 	.word	0xfffffefc

000da1a4 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>:
void SystemClass::enterSafeMode(SystemResetFlags flags)
{
    system_reset(SYSTEM_RESET_MODE_SAFE, 0, 0, flags.value(), nullptr);
}

SystemSleepResult SystemClass::sleep(const particle::SystemSleepConfiguration& config) {
   da1a4:	b5f0      	push	{r4, r5, r6, r7, lr}
   da1a6:	4d2d      	ldr	r5, [pc, #180]	; (da25c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
    }

    // It doesn't guarantee the combination of sleep mode and
    // wakeup sources that the platform supports.
    bool valid() const {
        if (!valid_) {
   da1a8:	7d0b      	ldrb	r3, [r1, #20]
   da1aa:	4604      	mov	r4, r0
   da1ac:	b08b      	sub	sp, #44	; 0x2c
   da1ae:	4608      	mov	r0, r1
   da1b0:	1daf      	adds	r7, r5, #6
   da1b2:	2b00      	cmp	r3, #0
   da1b4:	d038      	beq.n	da228 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x84>
        return static_cast<SystemSleepMode>(config_->mode);
   da1b6:	680b      	ldr	r3, [r1, #0]
            return valid_;
        }
        if (sleepMode() == SystemSleepMode::NONE) {
   da1b8:	791b      	ldrb	r3, [r3, #4]
   da1ba:	2b00      	cmp	r3, #0
   da1bc:	d034      	beq.n	da228 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x84>
              error_(SYSTEM_ERROR_NONE) {
   da1be:	2200      	movs	r2, #0
    SleepResult() {}
   da1c0:	4b27      	ldr	r3, [pc, #156]	; (da260 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
   da1c2:	9304      	str	r3, [sp, #16]
    if (!config.valid()) {
        LOG(ERROR, "System sleep configuration is invalid.");
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
    } else {
        SystemSleepResult result;
        int ret = system_sleep_ext(config.halConfig(), result.halWakeupSource(), nullptr);
   da1c4:	a902      	add	r1, sp, #8
   da1c6:	3004      	adds	r0, #4
              error_(SYSTEM_ERROR_NONE) {
   da1c8:	9202      	str	r2, [sp, #8]
   da1ca:	f8ad 200c 	strh.w	r2, [sp, #12]
    SleepResult() {}
   da1ce:	f88d 200e 	strb.w	r2, [sp, #14]
   da1d2:	f7fd fc01 	bl	d79d8 <system_sleep_ext>
        compatResult_ = result.compatResult_;
   da1d6:	f8dd 300e 	ldr.w	r3, [sp, #14]
   da1da:	f8c5 3006 	str.w	r3, [r5, #6]
        result.setError(static_cast<system_error_t>(ret));
   da1de:	b200      	sxth	r0, r0
   da1e0:	f8bd 3012 	ldrh.w	r3, [sp, #18]
        error_ = error;
   da1e4:	f8ad 000c 	strh.w	r0, [sp, #12]
        error_ = result.error_;
   da1e8:	80a8      	strh	r0, [r5, #4]
        copyWakeupSource(result.wakeupSource_);
   da1ea:	9902      	ldr	r1, [sp, #8]
        compatResult_ = result.compatResult_;
   da1ec:	80bb      	strh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   da1ee:	4628      	mov	r0, r5
   da1f0:	f7ff ffc2 	bl	da178 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>
        freeWakeupSourceMemory();
   da1f4:	a802      	add	r0, sp, #8
   da1f6:	f7ff ffa0 	bl	da13a <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
              error_(SYSTEM_ERROR_NONE) {
   da1fa:	2300      	movs	r3, #0
   da1fc:	6023      	str	r3, [r4, #0]
   da1fe:	80a3      	strh	r3, [r4, #4]
    SleepResult() {}
   da200:	71a3      	strb	r3, [r4, #6]
   da202:	8123      	strh	r3, [r4, #8]
   da204:	f64f 73ff 	movw	r3, #65535	; 0xffff
   da208:	8163      	strh	r3, [r4, #10]
        error_ = result.error_;
   da20a:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
   da20e:	80a3      	strh	r3, [r4, #4]
        compatResult_ = result.compatResult_;
   da210:	683b      	ldr	r3, [r7, #0]
   da212:	f8c4 3006 	str.w	r3, [r4, #6]
   da216:	88bb      	ldrh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   da218:	6829      	ldr	r1, [r5, #0]
        compatResult_ = result.compatResult_;
   da21a:	8163      	strh	r3, [r4, #10]
        copyWakeupSource(result.wakeupSource_);
   da21c:	4620      	mov	r0, r4
   da21e:	f7ff ffab 	bl	da178 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>
        System.systemSleepResult_ = result;
    }
    return System.systemSleepResult_;
}
   da222:	4620      	mov	r0, r4
   da224:	b00b      	add	sp, #44	; 0x2c
   da226:	bdf0      	pop	{r4, r5, r6, r7, pc}
        LOG(ERROR, "System sleep configuration is invalid.");
   da228:	2600      	movs	r6, #0
   da22a:	2320      	movs	r3, #32
   da22c:	e9cd 3602 	strd	r3, r6, [sp, #8]
   da230:	4b0c      	ldr	r3, [pc, #48]	; (da264 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xc0>)
   da232:	9300      	str	r3, [sp, #0]
   da234:	490c      	ldr	r1, [pc, #48]	; (da268 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xc4>)
   da236:	4633      	mov	r3, r6
   da238:	aa02      	add	r2, sp, #8
   da23a:	2032      	movs	r0, #50	; 0x32
   da23c:	f7fd fb44 	bl	d78c8 <log_message>
    SleepResult() {}
   da240:	4b07      	ldr	r3, [pc, #28]	; (da260 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
   da242:	9304      	str	r3, [sp, #16]
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
   da244:	a902      	add	r1, sp, #8
        error_ = error;
   da246:	f64f 63f2 	movw	r3, #65266	; 0xfef2
   da24a:	4804      	ldr	r0, [pc, #16]	; (da25c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
              error_(SYSTEM_ERROR_NONE) {
   da24c:	9602      	str	r6, [sp, #8]
    SleepResult() {}
   da24e:	f88d 600e 	strb.w	r6, [sp, #14]
        error_ = error;
   da252:	f8ad 300c 	strh.w	r3, [sp, #12]
   da256:	f7ff ff79 	bl	da14c <_ZN17SystemSleepResultaSEOS_>
   da25a:	e7cb      	b.n	da1f4 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x50>
   da25c:	2003e680 	.word	0x2003e680
   da260:	ffff0000 	.word	0xffff0000
   da264:	000df7eb 	.word	0x000df7eb
   da268:	000df7e4 	.word	0x000df7e4

000da26c <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   da26c:	4b05      	ldr	r3, [pc, #20]	; (da284 <_GLOBAL__sub_I_System+0x18>)
   da26e:	2202      	movs	r2, #2
   da270:	601a      	str	r2, [r3, #0]
              error_(SYSTEM_ERROR_NONE) {
   da272:	4b05      	ldr	r3, [pc, #20]	; (da288 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   da274:	4a05      	ldr	r2, [pc, #20]	; (da28c <_GLOBAL__sub_I_System+0x20>)
   da276:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   da278:	2000      	movs	r0, #0
   da27a:	6018      	str	r0, [r3, #0]
   da27c:	8098      	strh	r0, [r3, #4]
    SleepResult() {}
   da27e:	7198      	strb	r0, [r3, #6]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   da280:	f7fd bb54 	b.w	d792c <set_system_mode>
   da284:	2003e68c 	.word	0x2003e68c
   da288:	2003e680 	.word	0x2003e680
   da28c:	ffff0000 	.word	0xffff0000

000da290 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   da290:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   da292:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   da294:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   da298:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   da29a:	2201      	movs	r2, #1
   da29c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   da2a0:	f10d 0107 	add.w	r1, sp, #7
   da2a4:	47a0      	blx	r4
}
   da2a6:	b002      	add	sp, #8
   da2a8:	bd10      	pop	{r4, pc}

000da2aa <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   da2aa:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   da2ac:	6803      	ldr	r3, [r0, #0]
   da2ae:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   da2b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   da2b4:	46a4      	mov	ip, r4
}
   da2b6:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   da2ba:	4760      	bx	ip

000da2bc <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   da2bc:	b513      	push	{r0, r1, r4, lr}
   da2be:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   da2c0:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   da2c2:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   da2c6:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   da2c8:	f10d 0107 	add.w	r1, sp, #7
   da2cc:	2201      	movs	r2, #1
   da2ce:	47a0      	blx	r4
}
   da2d0:	b002      	add	sp, #8
   da2d2:	bd10      	pop	{r4, pc}

000da2d4 <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   da2d4:	4770      	bx	lr

000da2d6 <_ZN9TCPClient9connectedEv>:
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   da2d6:	b538      	push	{r3, r4, r5, lr}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   da2d8:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   da2da:	681a      	ldr	r2, [r3, #0]
   da2dc:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   da2de:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   da2e0:	da10      	bge.n	da304 <_ZN9TCPClient9connectedEv+0x2e>
   da2e2:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   da2e6:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   da2ea:	429a      	cmp	r2, r3
   da2ec:	d10a      	bne.n	da304 <_ZN9TCPClient9connectedEv+0x2e>
    if (!rv) {
        rv = available();
   da2ee:	6803      	ldr	r3, [r0, #0]
   da2f0:	691b      	ldr	r3, [r3, #16]
   da2f2:	4798      	blx	r3
        if (!rv) {
   da2f4:	4604      	mov	r4, r0
   da2f6:	b928      	cbnz	r0, da304 <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   da2f8:	682b      	ldr	r3, [r5, #0]
   da2fa:	4628      	mov	r0, r5
   da2fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   da2fe:	4798      	blx	r3
        rv = available();
   da300:	4620      	mov	r0, r4
        }
    }
    return rv;
}
   da302:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   da304:	2001      	movs	r0, #1
   da306:	e7fc      	b.n	da302 <_ZN9TCPClient9connectedEv+0x2c>

000da308 <_ZN9TCPClientcvbEv>:

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   da308:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   da30a:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   da30c:	43c0      	mvns	r0, r0
   da30e:	0fc0      	lsrs	r0, r0, #31
   da310:	4770      	bx	lr

000da312 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   da312:	4770      	bx	lr

000da314 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   da314:	4b06      	ldr	r3, [pc, #24]	; (da330 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   da316:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   da318:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   da31a:	f100 040c 	add.w	r4, r0, #12
	    ||
   da31e:	d005      	beq.n	da32c <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   da320:	4608      	mov	r0, r1
   da322:	f001 faff 	bl	db924 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	    ||
   da326:	2800      	cmp	r0, #0
	return nullptr;
   da328:	bf08      	it	eq
   da32a:	2400      	moveq	r4, #0
      }
   da32c:	4620      	mov	r0, r4
   da32e:	bd10      	pop	{r4, pc}
   da330:	000df5e4 	.word	0x000df5e4

000da334 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   da334:	b510      	push	{r4, lr}
   da336:	21ac      	movs	r1, #172	; 0xac
   da338:	4604      	mov	r4, r0
   da33a:	f001 fa37 	bl	db7ac <_ZdlPvj>
   da33e:	4620      	mov	r0, r4
   da340:	bd10      	pop	{r4, pc}

000da342 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   da342:	f7f9 beac 	b.w	d409e <_ZdlPv>

000da346 <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   da346:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   da34a:	f04f 0800 	mov.w	r8, #0
   da34e:	b086      	sub	sp, #24
   da350:	461d      	mov	r5, r3
   da352:	f8c0 8004 	str.w	r8, [r0, #4]
   da356:	4604      	mov	r4, r0
   da358:	460e      	mov	r6, r1
   da35a:	4617      	mov	r7, r2
    struct timeval tv = {};
   da35c:	4641      	mov	r1, r8
   da35e:	2210      	movs	r2, #16
   da360:	a802      	add	r0, sp, #8
   da362:	f002 faef 	bl	dc944 <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   da366:	1c6b      	adds	r3, r5, #1
   da368:	d009      	beq.n	da37e <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   da36a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   da36e:	fbb5 f3f0 	udiv	r3, r5, r0
   da372:	e9cd 3802 	strd	r3, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   da376:	fb00 5313 	mls	r3, r0, r3, r5
   da37a:	4358      	muls	r0, r3
   da37c:	9004      	str	r0, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   da37e:	6960      	ldr	r0, [r4, #20]
   da380:	2310      	movs	r3, #16
   da382:	9300      	str	r3, [sp, #0]
   da384:	6800      	ldr	r0, [r0, #0]
   da386:	ab02      	add	r3, sp, #8
   da388:	f241 0205 	movw	r2, #4101	; 0x1005
   da38c:	f640 71ff 	movw	r1, #4095	; 0xfff
   da390:	f7fd f9b2 	bl	d76f8 <sock_setsockopt>
    if (ret < 0) {
   da394:	2800      	cmp	r0, #0
   da396:	da07      	bge.n	da3a8 <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   da398:	f7fd fc18 	bl	d7bcc <__errno>
   da39c:	6803      	ldr	r3, [r0, #0]
   da39e:	6063      	str	r3, [r4, #4]
        return 0;
   da3a0:	2000      	movs	r0, #0
}
   da3a2:	b006      	add	sp, #24
   da3a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   da3a8:	6960      	ldr	r0, [r4, #20]
   da3aa:	2300      	movs	r3, #0
   da3ac:	6800      	ldr	r0, [r0, #0]
   da3ae:	463a      	mov	r2, r7
   da3b0:	4631      	mov	r1, r6
   da3b2:	f7fd f9c9 	bl	d7748 <sock_send>
    if (ret < 0) {
   da3b6:	1e03      	subs	r3, r0, #0
   da3b8:	dbee      	blt.n	da398 <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   da3ba:	4618      	mov	r0, r3
   da3bc:	e7f1      	b.n	da3a2 <_ZN9TCPClient5writeEPKhjm+0x5c>
	...

000da3c0 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   da3c0:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
   da3c2:	6984      	ldr	r4, [r0, #24]
   da3c4:	4b0a      	ldr	r3, [pc, #40]	; (da3f0 <_ZN9TCPClientD1Ev+0x30>)
   da3c6:	6003      	str	r3, [r0, #0]
   da3c8:	4605      	mov	r5, r0
   da3ca:	b17c      	cbz	r4, da3ec <_ZN9TCPClientD1Ev+0x2c>
      if (--_M_use_count == 0)
   da3cc:	6863      	ldr	r3, [r4, #4]
   da3ce:	3b01      	subs	r3, #1
   da3d0:	6063      	str	r3, [r4, #4]
   da3d2:	b95b      	cbnz	r3, da3ec <_ZN9TCPClientD1Ev+0x2c>
          _M_dispose();
   da3d4:	6823      	ldr	r3, [r4, #0]
   da3d6:	4620      	mov	r0, r4
   da3d8:	689b      	ldr	r3, [r3, #8]
   da3da:	4798      	blx	r3
          if (--_M_weak_count == 0)
   da3dc:	68a3      	ldr	r3, [r4, #8]
   da3de:	3b01      	subs	r3, #1
   da3e0:	60a3      	str	r3, [r4, #8]
   da3e2:	b91b      	cbnz	r3, da3ec <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   da3e4:	6823      	ldr	r3, [r4, #0]
   da3e6:	4620      	mov	r0, r4
   da3e8:	68db      	ldr	r3, [r3, #12]
   da3ea:	4798      	blx	r3
   da3ec:	4628      	mov	r0, r5
   da3ee:	bd38      	pop	{r3, r4, r5, pc}
   da3f0:	000df848 	.word	0x000df848

000da3f4 <_ZN9TCPClientD0Ev>:
   da3f4:	b510      	push	{r4, lr}
   da3f6:	4604      	mov	r4, r0
   da3f8:	f7ff ffe2 	bl	da3c0 <_ZN9TCPClientD1Ev>
   da3fc:	4620      	mov	r0, r4
   da3fe:	211c      	movs	r1, #28
   da400:	f001 f9d4 	bl	db7ac <_ZdlPvj>
   da404:	4620      	mov	r0, r4
   da406:	bd10      	pop	{r4, pc}

000da408 <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   da408:	b570      	push	{r4, r5, r6, lr}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   da40a:	694d      	ldr	r5, [r1, #20]
   da40c:	4b05      	ldr	r3, [pc, #20]	; (da424 <_ZN9TCPClient8remoteIPEv+0x1c>)
   da40e:	4604      	mov	r4, r0
   da410:	358c      	adds	r5, #140	; 0x8c
   da412:	f844 3b04 	str.w	r3, [r4], #4
   da416:	4606      	mov	r6, r0
   da418:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   da41a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   da41c:	682b      	ldr	r3, [r5, #0]
   da41e:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   da420:	4630      	mov	r0, r6
   da422:	bd70      	pop	{r4, r5, r6, pc}
   da424:	000df6b0 	.word	0x000df6b0

000da428 <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   da428:	b510      	push	{r4, lr}
   da42a:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   da42c:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   da430:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   da434:	429a      	cmp	r2, r3
int TCPClient::peek() {
   da436:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   da438:	d005      	beq.n	da446 <_ZN9TCPClient4peekEv+0x1e>
   da43a:	6963      	ldr	r3, [r4, #20]
   da43c:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   da440:	4413      	add	r3, r2
   da442:	7918      	ldrb	r0, [r3, #4]
}
   da444:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   da446:	6803      	ldr	r3, [r0, #0]
   da448:	691b      	ldr	r3, [r3, #16]
   da44a:	4798      	blx	r3
   da44c:	2800      	cmp	r0, #0
   da44e:	d1f4      	bne.n	da43a <_ZN9TCPClient4peekEv+0x12>
   da450:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   da454:	e7f6      	b.n	da444 <_ZN9TCPClient4peekEv+0x1c>

000da456 <_ZN9TCPClient4readEv>:
int TCPClient::read() {
   da456:	b510      	push	{r4, lr}
   da458:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   da45a:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   da45e:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   da462:	429a      	cmp	r2, r3
int TCPClient::read() {
   da464:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   da466:	d008      	beq.n	da47a <_ZN9TCPClient4readEv+0x24>
   da468:	6963      	ldr	r3, [r4, #20]
   da46a:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   da46e:	1c51      	adds	r1, r2, #1
   da470:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   da474:	4413      	add	r3, r2
   da476:	7918      	ldrb	r0, [r3, #4]
}
   da478:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   da47a:	6803      	ldr	r3, [r0, #0]
   da47c:	691b      	ldr	r3, [r3, #16]
   da47e:	4798      	blx	r3
   da480:	2800      	cmp	r0, #0
   da482:	d1f1      	bne.n	da468 <_ZN9TCPClient4readEv+0x12>
   da484:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   da488:	e7f6      	b.n	da478 <_ZN9TCPClient4readEv+0x22>

000da48a <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   da48a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   da48c:	6943      	ldr	r3, [r0, #20]
   da48e:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   da490:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   da494:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   da498:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   da49a:	4605      	mov	r5, r0
   da49c:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   da49e:	d016      	beq.n	da4ce <_ZN9TCPClient4readEPhj+0x44>
   da4a0:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   da4a2:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   da4a6:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   da4aa:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   da4ac:	42bc      	cmp	r4, r7
   da4ae:	bf28      	it	cs
   da4b0:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   da4b2:	3304      	adds	r3, #4
   da4b4:	4622      	mov	r2, r4
   da4b6:	4419      	add	r1, r3
   da4b8:	4630      	mov	r0, r6
   da4ba:	f002 fa1b 	bl	dc8f4 <memcpy>
   da4be:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   da4c0:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   da4c4:	4423      	add	r3, r4
   da4c6:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   da4ca:	4620      	mov	r0, r4
   da4cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   da4ce:	6803      	ldr	r3, [r0, #0]
   da4d0:	691b      	ldr	r3, [r3, #16]
   da4d2:	4798      	blx	r3
   da4d4:	2800      	cmp	r0, #0
   da4d6:	d1e3      	bne.n	da4a0 <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   da4d8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   da4dc:	e7f5      	b.n	da4ca <_ZN9TCPClient4readEPhj+0x40>
	...

000da4e0 <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   da4e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   da4e4:	4698      	mov	r8, r3
    stop();
   da4e6:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   da4e8:	b093      	sub	sp, #76	; 0x4c
   da4ea:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   da4ec:	2400      	movs	r4, #0
    stop();
   da4ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   da4f0:	4606      	mov	r6, r0
   da4f2:	4617      	mov	r7, r2
    stop();
   da4f4:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   da4f6:	4628      	mov	r0, r5
   da4f8:	466b      	mov	r3, sp
   da4fa:	4622      	mov	r2, r4
   da4fc:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   da4fe:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   da500:	f7fd f8ea 	bl	d76d8 <netdb_getaddrinfo>
   da504:	4605      	mov	r5, r0
   da506:	2800      	cmp	r0, #0
   da508:	d163      	bne.n	da5d2 <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   da50a:	9b00      	ldr	r3, [sp, #0]
   da50c:	2b00      	cmp	r3, #0
   da50e:	d04b      	beq.n	da5a8 <_ZN9TCPClient7connectEPKctm+0xc8>
   da510:	695b      	ldr	r3, [r3, #20]
   da512:	2b00      	cmp	r3, #0
   da514:	d048      	beq.n	da5a8 <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   da516:	a806      	add	r0, sp, #24
   da518:	f7fe f8b6 	bl	d8688 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   da51c:	9b00      	ldr	r3, [sp, #0]
   da51e:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   da520:	7863      	ldrb	r3, [r4, #1]
   da522:	2b02      	cmp	r3, #2
   da524:	d104      	bne.n	da530 <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   da526:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   da528:	a806      	add	r0, sp, #24
   da52a:	f7fe f8fd 	bl	d8728 <_ZN9IPAddressaSEPKh>
        }
        if (port) {
   da52e:	e026      	b.n	da57e <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   da530:	2b0a      	cmp	r3, #10
   da532:	d124      	bne.n	da57e <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   da534:	2211      	movs	r2, #17
   da536:	4629      	mov	r1, r5
   da538:	a801      	add	r0, sp, #4
   da53a:	f002 fa03 	bl	dc944 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   da53e:	68a3      	ldr	r3, [r4, #8]
   da540:	2b00      	cmp	r3, #0
   da542:	d038      	beq.n	da5b6 <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   da544:	f104 0308 	add.w	r3, r4, #8
   da548:	f10d 0c04 	add.w	ip, sp, #4
   da54c:	3418      	adds	r4, #24
   da54e:	6818      	ldr	r0, [r3, #0]
   da550:	6859      	ldr	r1, [r3, #4]
   da552:	4662      	mov	r2, ip
   da554:	c203      	stmia	r2!, {r0, r1}
   da556:	3308      	adds	r3, #8
   da558:	42a3      	cmp	r3, r4
   da55a:	4694      	mov	ip, r2
   da55c:	d1f7      	bne.n	da54e <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   da55e:	2306      	movs	r3, #6
            addr = IPAddress(a);
   da560:	a901      	add	r1, sp, #4
   da562:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   da564:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   da568:	f7fe f89c 	bl	d86a4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   da56c:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   da570:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   da574:	ac07      	add	r4, sp, #28
   da576:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   da578:	f8dc 3000 	ldr.w	r3, [ip]
   da57c:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   da57e:	a806      	add	r0, sp, #24
   da580:	f7fe f8a2 	bl	d86c8 <_ZNK9IPAddresscvbEv>
        if (addr) {
   da584:	b180      	cbz	r0, da5a8 <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   da586:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   da588:	ad07      	add	r5, sp, #28
   da58a:	f8d3 9020 	ldr.w	r9, [r3, #32]
   da58e:	4b12      	ldr	r3, [pc, #72]	; (da5d8 <_ZN9TCPClient7connectEPKctm+0xf8>)
   da590:	930c      	str	r3, [sp, #48]	; 0x30
   da592:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   da594:	ac0d      	add	r4, sp, #52	; 0x34
   da596:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   da598:	682b      	ldr	r3, [r5, #0]
   da59a:	7023      	strb	r3, [r4, #0]
   da59c:	463a      	mov	r2, r7
   da59e:	4643      	mov	r3, r8
   da5a0:	a90c      	add	r1, sp, #48	; 0x30
   da5a2:	4630      	mov	r0, r6
   da5a4:	47c8      	blx	r9
   da5a6:	4605      	mov	r5, r0
    SCOPE_GUARD({
   da5a8:	9800      	ldr	r0, [sp, #0]
   da5aa:	f7fd f88d 	bl	d76c8 <netdb_freeaddrinfo>
}
   da5ae:	4628      	mov	r0, r5
   da5b0:	b013      	add	sp, #76	; 0x4c
   da5b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   da5b6:	68e3      	ldr	r3, [r4, #12]
   da5b8:	2b00      	cmp	r3, #0
   da5ba:	d1c3      	bne.n	da544 <_ZN9TCPClient7connectEPKctm+0x64>
   da5bc:	f64f 70ff 	movw	r0, #65535	; 0xffff
   da5c0:	f8d4 9010 	ldr.w	r9, [r4, #16]
   da5c4:	f7fd f868 	bl	d7698 <inet_htonl>
   da5c8:	4581      	cmp	r9, r0
   da5ca:	d1bb      	bne.n	da544 <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   da5cc:	f104 0114 	add.w	r1, r4, #20
   da5d0:	e7aa      	b.n	da528 <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   da5d2:	4625      	mov	r5, r4
   da5d4:	e7e8      	b.n	da5a8 <_ZN9TCPClient7connectEPKctm+0xc8>
   da5d6:	bf00      	nop
   da5d8:	000df6b0 	.word	0x000df6b0

000da5dc <_ZN9TCPClient12flush_bufferEv>:
   da5dc:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   da5de:	2300      	movs	r3, #0
   da5e0:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   da5e4:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   da5e6:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   da5ea:	4770      	bx	lr

000da5ec <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   da5ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   da5f0:	461f      	mov	r7, r3
    stop();
   da5f2:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   da5f4:	460c      	mov	r4, r1
    stop();
   da5f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   da5f8:	b08a      	sub	sp, #40	; 0x28
   da5fa:	4605      	mov	r5, r0
   da5fc:	4616      	mov	r6, r2
    stop();
   da5fe:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   da600:	7d23      	ldrb	r3, [r4, #20]
   da602:	f8d5 8014 	ldr.w	r8, [r5, #20]
   da606:	2b04      	cmp	r3, #4
   da608:	bf0c      	ite	eq
   da60a:	2002      	moveq	r0, #2
   da60c:	200a      	movne	r0, #10
   da60e:	2206      	movs	r2, #6
   da610:	2101      	movs	r1, #1
   da612:	f7fd f8a9 	bl	d7768 <sock_socket>
   da616:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   da61a:	696b      	ldr	r3, [r5, #20]
   da61c:	681b      	ldr	r3, [r3, #0]
   da61e:	2b00      	cmp	r3, #0
   da620:	da08      	bge.n	da634 <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   da622:	682b      	ldr	r3, [r5, #0]
   da624:	4628      	mov	r0, r5
   da626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   da628:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   da62a:	4798      	blx	r3
}
   da62c:	4620      	mov	r0, r4
   da62e:	b00a      	add	sp, #40	; 0x28
   da630:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   da634:	4628      	mov	r0, r5
   da636:	f7ff ffd1 	bl	da5dc <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   da63a:	b1b7      	cbz	r7, da66a <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   da63c:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   da63e:	a903      	add	r1, sp, #12
   da640:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   da642:	9303      	str	r3, [sp, #12]
   da644:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   da648:	f7fd f816 	bl	d7678 <if_index_to_name>
   da64c:	2800      	cmp	r0, #0
   da64e:	d1e8      	bne.n	da622 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   da650:	6968      	ldr	r0, [r5, #20]
   da652:	2306      	movs	r3, #6
   da654:	9300      	str	r3, [sp, #0]
   da656:	6800      	ldr	r0, [r0, #0]
   da658:	ab03      	add	r3, sp, #12
   da65a:	f241 020b 	movw	r2, #4107	; 0x100b
   da65e:	f640 71ff 	movw	r1, #4095	; 0xfff
   da662:	f7fd f849 	bl	d76f8 <sock_setsockopt>
   da666:	2800      	cmp	r0, #0
   da668:	d1db      	bne.n	da622 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   da66a:	221c      	movs	r2, #28
   da66c:	2100      	movs	r1, #0
   da66e:	a803      	add	r0, sp, #12
   da670:	f002 f968 	bl	dc944 <memset>
    if (ip.version() == 4) {
   da674:	7d23      	ldrb	r3, [r4, #20]
   da676:	2b04      	cmp	r3, #4
   da678:	d11d      	bne.n	da6b6 <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   da67a:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   da67e:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   da680:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   da684:	f7fd f818 	bl	d76b8 <inet_htons>
   da688:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   da68c:	6860      	ldr	r0, [r4, #4]
   da68e:	f7fd f803 	bl	d7698 <inet_htonl>
   da692:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   da694:	696b      	ldr	r3, [r5, #20]
   da696:	221c      	movs	r2, #28
   da698:	6818      	ldr	r0, [r3, #0]
   da69a:	a903      	add	r1, sp, #12
   da69c:	f7fd f83c 	bl	d7718 <sock_connect>
   da6a0:	2800      	cmp	r0, #0
   da6a2:	d1be      	bne.n	da622 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   da6a4:	3404      	adds	r4, #4
   da6a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   da6a8:	696d      	ldr	r5, [r5, #20]
   da6aa:	358c      	adds	r5, #140	; 0x8c
   da6ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   da6ae:	6823      	ldr	r3, [r4, #0]
   da6b0:	702b      	strb	r3, [r5, #0]
    return 1; // success
   da6b2:	2401      	movs	r4, #1
   da6b4:	e7ba      	b.n	da62c <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   da6b6:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   da6ba:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   da6bc:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   da6c0:	f7fc fffa 	bl	d76b8 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   da6c4:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   da6c6:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   da6ca:	1d23      	adds	r3, r4, #4
   da6cc:	f104 0714 	add.w	r7, r4, #20
   da6d0:	6818      	ldr	r0, [r3, #0]
   da6d2:	6859      	ldr	r1, [r3, #4]
   da6d4:	4632      	mov	r2, r6
   da6d6:	c203      	stmia	r2!, {r0, r1}
   da6d8:	3308      	adds	r3, #8
   da6da:	42bb      	cmp	r3, r7
   da6dc:	4616      	mov	r6, r2
   da6de:	d1f7      	bne.n	da6d0 <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   da6e0:	e7d8      	b.n	da694 <_ZN9TCPClient7connectE9IPAddresstm+0xa8>
	...

000da6e4 <_ZN9TCPClient9availableEv>:
{
   da6e4:	b530      	push	{r4, r5, lr}
   da6e6:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   da6e8:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   da6ec:	b08b      	sub	sp, #44	; 0x2c
   da6ee:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   da6f0:	b12b      	cbz	r3, da6fe <_ZN9TCPClient9availableEv+0x1a>
   da6f2:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   da6f6:	429a      	cmp	r2, r3
   da6f8:	d101      	bne.n	da6fe <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   da6fa:	f7ff ff6f 	bl	da5dc <_ZN9TCPClient12flush_bufferEv>
   da6fe:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   da700:	6808      	ldr	r0, [r1, #0]
   da702:	2800      	cmp	r0, #0
   da704:	db18      	blt.n	da738 <_ZN9TCPClient9availableEv+0x54>
   da706:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
        if (d_->total < arraySize(d_->buffer)) {
   da70a:	2d7f      	cmp	r5, #127	; 0x7f
   da70c:	d814      	bhi.n	da738 <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   da70e:	3104      	adds	r1, #4
   da710:	2308      	movs	r3, #8
   da712:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   da716:	4429      	add	r1, r5
   da718:	f7fd f806 	bl	d7728 <sock_recv>
            if (ret > 0) {
   da71c:	2800      	cmp	r0, #0
   da71e:	dd13      	ble.n	da748 <_ZN9TCPClient9availableEv+0x64>
   da720:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   da722:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   da726:	b90a      	cbnz	r2, da72c <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   da728:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   da72c:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   da72e:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   da732:	4410      	add	r0, r2
   da734:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   da738:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   da73a:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   da73e:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   da742:	1ac0      	subs	r0, r0, r3
   da744:	b00b      	add	sp, #44	; 0x2c
   da746:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   da748:	f7fd fa40 	bl	d7bcc <__errno>
   da74c:	6803      	ldr	r3, [r0, #0]
   da74e:	2b0b      	cmp	r3, #11
   da750:	d0f2      	beq.n	da738 <_ZN9TCPClient9availableEv+0x54>
   da752:	f7fd fa3b 	bl	d7bcc <__errno>
   da756:	6803      	ldr	r3, [r0, #0]
   da758:	2b0b      	cmp	r3, #11
   da75a:	d0ed      	beq.n	da738 <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   da75c:	2320      	movs	r3, #32
   da75e:	2500      	movs	r5, #0
   da760:	e9cd 3502 	strd	r3, r5, [sp, #8]
   da764:	f7fd fa32 	bl	d7bcc <__errno>
   da768:	6803      	ldr	r3, [r0, #0]
   da76a:	9301      	str	r3, [sp, #4]
   da76c:	4b08      	ldr	r3, [pc, #32]	; (da790 <_ZN9TCPClient9availableEv+0xac>)
   da76e:	4909      	ldr	r1, [pc, #36]	; (da794 <_ZN9TCPClient9availableEv+0xb0>)
   da770:	9300      	str	r3, [sp, #0]
   da772:	aa02      	add	r2, sp, #8
   da774:	462b      	mov	r3, r5
   da776:	2032      	movs	r0, #50	; 0x32
   da778:	f7fd f8a6 	bl	d78c8 <log_message>
                    sock_close(d_->sock);
   da77c:	6963      	ldr	r3, [r4, #20]
   da77e:	6818      	ldr	r0, [r3, #0]
   da780:	f7fc ffc2 	bl	d7708 <sock_close>
   da784:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   da786:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   da78a:	601a      	str	r2, [r3, #0]
   da78c:	e7d4      	b.n	da738 <_ZN9TCPClient9availableEv+0x54>
   da78e:	bf00      	nop
   da790:	000df812 	.word	0x000df812
   da794:	000df7e4 	.word	0x000df7e4

000da798 <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   da798:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   da79a:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   da79c:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   da79e:	6818      	ldr	r0, [r3, #0]
   da7a0:	2800      	cmp	r0, #0
   da7a2:	db01      	blt.n	da7a8 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   da7a4:	f7fc ffb0 	bl	d7708 <sock_close>
   da7a8:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   da7aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   da7ae:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   da7b0:	6960      	ldr	r0, [r4, #20]
   da7b2:	2211      	movs	r2, #17
   da7b4:	2100      	movs	r1, #0
   da7b6:	308c      	adds	r0, #140	; 0x8c
   da7b8:	f002 f8c4 	bl	dc944 <memset>
    flush_buffer();
   da7bc:	4620      	mov	r0, r4
}
   da7be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   da7c2:	f7ff bf0b 	b.w	da5dc <_ZN9TCPClient12flush_bufferEv>

000da7c6 <_ZN9TCPClient6statusEv>:
    return (isOpen(d_->sock));
   da7c6:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   da7c8:	6818      	ldr	r0, [r3, #0]
}
   da7ca:	43c0      	mvns	r0, r0
   da7cc:	0fc0      	lsrs	r0, r0, #31
   da7ce:	4770      	bx	lr

000da7d0 <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   da7d0:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   da7d2:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   da7d4:	4604      	mov	r4, r0
          total(0) {
   da7d6:	6001      	str	r1, [r0, #0]
   da7d8:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   da7dc:	3088      	adds	r0, #136	; 0x88
   da7de:	f7fd ff53 	bl	d8688 <_ZN9IPAddressC1Ev>
}
   da7e2:	4620      	mov	r0, r4
   da7e4:	bd10      	pop	{r4, pc}
	...

000da7e8 <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   da7e8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   da7ea:	2300      	movs	r3, #0
   da7ec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   da7f0:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   da7f4:	4a0e      	ldr	r2, [pc, #56]	; (da830 <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   da7f6:	6103      	str	r3, [r0, #16]
   da7f8:	6002      	str	r2, [r0, #0]

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   da7fa:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   da7fc:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   da7fe:	20ac      	movs	r0, #172	; 0xac
   da800:	9101      	str	r1, [sp, #4]
   da802:	f7f9 fc48 	bl	d4096 <_Znwj>
	  auto __pi = ::new (__mem)
   da806:	1e05      	subs	r5, r0, #0
   da808:	f105 060c 	add.w	r6, r5, #12
   da80c:	d008      	beq.n	da820 <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   da80e:	2301      	movs	r3, #1
   da810:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   da814:	4b07      	ldr	r3, [pc, #28]	; (da834 <_ZN9TCPClientC1Ei+0x4c>)
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(noexcept(::new((void *)__p)
			    _Up(std::forward<_Args>(__args)...)))
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   da816:	9901      	ldr	r1, [sp, #4]
   da818:	602b      	str	r3, [r5, #0]
   da81a:	4630      	mov	r0, r6
   da81c:	f7ff ffd8 	bl	da7d0 <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   da820:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   da822:	e9c4 6505 	strd	r6, r5, [r4, #20]
   da826:	f7ff fed9 	bl	da5dc <_ZN9TCPClient12flush_bufferEv>
}
   da82a:	b002      	add	sp, #8
   da82c:	bd70      	pop	{r4, r5, r6, pc}
   da82e:	bf00      	nop
   da830:	000df848 	.word	0x000df848
   da834:	000df82c 	.word	0x000df82c

000da838 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   da838:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   da83a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
TCPClient::TCPClient()
   da83e:	4604      	mov	r4, r0
        : TCPClient(-1) {
   da840:	f7ff ffd2 	bl	da7e8 <_ZN9TCPClientC1Ei>
}
   da844:	4620      	mov	r0, r4
   da846:	bd10      	pop	{r4, pc}

000da848 <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   da848:	b510      	push	{r4, lr}
   da84a:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   da84c:	6800      	ldr	r0, [r0, #0]
   da84e:	2800      	cmp	r0, #0
   da850:	db01      	blt.n	da856 <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   da852:	f7fc ff59 	bl	d7708 <sock_close>
    }
}
   da856:	4620      	mov	r0, r4
   da858:	bd10      	pop	{r4, pc}

000da85a <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(noexcept( __p->~_Up()))
	{ __p->~_Up(); }
   da85a:	300c      	adds	r0, #12
   da85c:	f7ff bff4 	b.w	da848 <_ZN9TCPClient4DataD1Ev>

000da860 <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   da860:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
   da864:	4a15      	ldr	r2, [pc, #84]	; (da8bc <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   da866:	f8df 8060 	ldr.w	r8, [pc, #96]	; da8c8 <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
   da86a:	e9d2 3200 	ldrd	r3, r2, [r2]
   da86e:	18c0      	adds	r0, r0, r3
   da870:	eb42 0101 	adc.w	r1, r2, r1
    unix_time += dst_current_cache;
   da874:	4a12      	ldr	r2, [pc, #72]	; (da8c0 <_ZL22Refresh_UnixTime_Cachex+0x60>)
   da876:	e9d2 3200 	ldrd	r3, r2, [r2]
   da87a:	18c6      	adds	r6, r0, r3
   da87c:	eb41 0702 	adc.w	r7, r1, r2
    if(unix_time != unix_time_cache)
   da880:	e9d8 2300 	ldrd	r2, r3, [r8]
   da884:	42bb      	cmp	r3, r7
   da886:	bf08      	it	eq
   da888:	42b2      	cmpeq	r2, r6
{
   da88a:	b08c      	sub	sp, #48	; 0x30
    if(unix_time != unix_time_cache)
   da88c:	d013      	beq.n	da8b6 <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
   da88e:	a903      	add	r1, sp, #12
   da890:	4668      	mov	r0, sp
   da892:	e9cd 6700 	strd	r6, r7, [sp]
   da896:	f7fd f9b1 	bl	d7bfc <localtime_r>
	calendar_time.tm_year += 1900;
   da89a:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   da89c:	4d09      	ldr	r5, [pc, #36]	; (da8c4 <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
   da89e:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   da8a2:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
   da8a4:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   da8a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   da8a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   da8aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   da8ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   da8ae:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   da8b2:	6823      	ldr	r3, [r4, #0]
   da8b4:	602b      	str	r3, [r5, #0]
    }
}
   da8b6:	b00c      	add	sp, #48	; 0x30
   da8b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   da8bc:	2003e6c8 	.word	0x2003e6c8
   da8c0:	2003e6c0 	.word	0x2003e6c0
   da8c4:	2003e698 	.word	0x2003e698
   da8c8:	2003e6d0 	.word	0x2003e6d0

000da8cc <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
   da8cc:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
   da8ce:	2000      	movs	r0, #0
   da8d0:	f7fd f8bc 	bl	d7a4c <spark_sync_time_pending>
   da8d4:	b128      	cbz	r0, da8e2 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   da8d6:	f7fd f8a1 	bl	d7a1c <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   da8da:	f080 0001 	eor.w	r0, r0, #1
   da8de:	b2c0      	uxtb	r0, r0
    }
   da8e0:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   da8e2:	2001      	movs	r0, #1
   da8e4:	e7fc      	b.n	da8e0 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

000da8e8 <_ZN9TimeClass4zoneEf>:
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
	if(GMT_Offset < -12 || GMT_Offset > 14)
   da8e8:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
   da8ec:	eeb4 0ae7 	vcmpe.f32	s0, s15
   da8f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
   da8f4:	b508      	push	{r3, lr}
	if(GMT_Offset < -12 || GMT_Offset > 14)
   da8f6:	d411      	bmi.n	da91c <_ZN9TimeClass4zoneEf+0x34>
   da8f8:	eef2 7a0c 	vmov.f32	s15, #44	; 0x41600000  14.0
   da8fc:	eeb4 0ae7 	vcmpe.f32	s0, s15
   da900:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   da904:	dc0a      	bgt.n	da91c <_ZN9TimeClass4zoneEf+0x34>
	{
		return;
	}
	time_zone_cache = GMT_Offset * 3600;
   da906:	eddf 7a06 	vldr	s15, [pc, #24]	; da920 <_ZN9TimeClass4zoneEf+0x38>
   da90a:	ee60 7a27 	vmul.f32	s15, s0, s15
   da90e:	ee17 0a90 	vmov	r0, s15
   da912:	f001 fdf7 	bl	dc504 <__aeabi_f2lz>
   da916:	4b03      	ldr	r3, [pc, #12]	; (da924 <_ZN9TimeClass4zoneEf+0x3c>)
   da918:	e9c3 0100 	strd	r0, r1, [r3]
}
   da91c:	bd08      	pop	{r3, pc}
   da91e:	bf00      	nop
   da920:	45610000 	.word	0x45610000
   da924:	2003e6c8 	.word	0x2003e6c8

000da928 <_ZN9TimeClass12getDSTOffsetEv>:
{
	return time_zone_cache / 3600.0;
}

float TimeClass::getDSTOffset()
{
   da928:	b508      	push	{r3, lr}
    return dst_cache / 3600.0;
   da92a:	4b09      	ldr	r3, [pc, #36]	; (da950 <_ZN9TimeClass12getDSTOffsetEv+0x28>)
   da92c:	e9d3 0100 	ldrd	r0, r1, [r3]
   da930:	f001 fa98 	bl	dbe64 <__aeabi_l2d>
   da934:	a304      	add	r3, pc, #16	; (adr r3, da948 <_ZN9TimeClass12getDSTOffsetEv+0x20>)
   da936:	e9d3 2300 	ldrd	r2, r3, [r3]
   da93a:	f001 fbeb 	bl	dc114 <__aeabi_ddiv>
   da93e:	f001 fd79 	bl	dc434 <__aeabi_d2f>
}
   da942:	ee00 0a10 	vmov	s0, r0
   da946:	bd08      	pop	{r3, pc}
   da948:	00000000 	.word	0x00000000
   da94c:	40ac2000 	.word	0x40ac2000
   da950:	2003dec0 	.word	0x2003dec0

000da954 <_ZN9TimeClass7setTimeEx>:
    return !(dst_current_cache == 0);
}

/* set the given time as unix/rtc time */
void TimeClass::setTime(time_t t)
{
   da954:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   da956:	4602      	mov	r2, r0
   da958:	460b      	mov	r3, r1
    struct timeval tv = {
        .tv_sec = t,
        .tv_usec = 0
    };
    if (!hal_rtc_set_time(&tv, nullptr)) {
   da95a:	4668      	mov	r0, sp
    struct timeval tv = {
   da95c:	2100      	movs	r1, #0
    };
   da95e:	e9cd 2300 	strd	r2, r3, [sp]
    struct timeval tv = {
   da962:	e9cd 1102 	strd	r1, r1, [sp, #8]
    if (!hal_rtc_set_time(&tv, nullptr)) {
   da966:	f7fc fddf 	bl	d7528 <hal_rtc_set_time>
   da96a:	4602      	mov	r2, r0
   da96c:	b910      	cbnz	r0, da974 <_ZN9TimeClass7setTimeEx+0x20>
        system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
   da96e:	4601      	mov	r1, r0
   da970:	f7fd f80c 	bl	d798c <system_notify_time_changed>
    }
}
   da974:	b005      	add	sp, #20
   da976:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000da97c <_ZN9TimeClass7timeStrEx>:

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   da97c:	b530      	push	{r4, r5, lr}
   da97e:	4604      	mov	r4, r0
    t += time_zone_cache;
   da980:	4818      	ldr	r0, [pc, #96]	; (da9e4 <_ZN9TimeClass7timeStrEx+0x68>)
   da982:	e9d0 1000 	ldrd	r1, r0, [r0]
   da986:	1852      	adds	r2, r2, r1
   da988:	eb40 0303 	adc.w	r3, r0, r3
    t += dst_current_cache;
   da98c:	4816      	ldr	r0, [pc, #88]	; (da9e8 <_ZN9TimeClass7timeStrEx+0x6c>)
   da98e:	e9d0 1000 	ldrd	r1, r0, [r0]
   da992:	1852      	adds	r2, r2, r1
{
   da994:	b093      	sub	sp, #76	; 0x4c
    t += dst_current_cache;
   da996:	eb40 0303 	adc.w	r3, r0, r3
   da99a:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm calendar_time = {};
   da99e:	2224      	movs	r2, #36	; 0x24
   da9a0:	eb0d 0002 	add.w	r0, sp, r2
   da9a4:	2100      	movs	r1, #0
   da9a6:	f001 ffcd 	bl	dc944 <memset>
    localtime_r(&t, &calendar_time);
    char ascstr[26] = {};
   da9aa:	2500      	movs	r5, #0
    localtime_r(&t, &calendar_time);
   da9ac:	a909      	add	r1, sp, #36	; 0x24
   da9ae:	4668      	mov	r0, sp
   da9b0:	f7fd f924 	bl	d7bfc <localtime_r>
    char ascstr[26] = {};
   da9b4:	2216      	movs	r2, #22
   da9b6:	4629      	mov	r1, r5
   da9b8:	a803      	add	r0, sp, #12
   da9ba:	9502      	str	r5, [sp, #8]
   da9bc:	f001 ffc2 	bl	dc944 <memset>
    asctime_r(&calendar_time, ascstr);
   da9c0:	a902      	add	r1, sp, #8
   da9c2:	a809      	add	r0, sp, #36	; 0x24
   da9c4:	f001 ff54 	bl	dc870 <asctime_r>
    int len = strlen(ascstr);
   da9c8:	a802      	add	r0, sp, #8
   da9ca:	f002 f82e 	bl	dca2a <strlen>
    ascstr[len-1] = 0; // remove final newline
   da9ce:	ab12      	add	r3, sp, #72	; 0x48
   da9d0:	4418      	add	r0, r3
    return String(ascstr);
   da9d2:	a902      	add	r1, sp, #8
    ascstr[len-1] = 0; // remove final newline
   da9d4:	f800 5c41 	strb.w	r5, [r0, #-65]
    return String(ascstr);
   da9d8:	4620      	mov	r0, r4
   da9da:	f7ff faec 	bl	d9fb6 <_ZN6StringC1EPKc>
}
   da9de:	4620      	mov	r0, r4
   da9e0:	b013      	add	sp, #76	; 0x4c
   da9e2:	bd30      	pop	{r4, r5, pc}
   da9e4:	2003e6c8 	.word	0x2003e6c8
   da9e8:	2003e6c0 	.word	0x2003e6c0

000da9ec <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    localtime_r(&t, &calendar_time);
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   da9ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   da9f0:	b0a5      	sub	sp, #148	; 0x94
   da9f2:	4607      	mov	r7, r0
   da9f4:	4688      	mov	r8, r1
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   da9f6:	a814      	add	r0, sp, #80	; 0x50
{
   da9f8:	4611      	mov	r1, r2
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   da9fa:	223f      	movs	r2, #63	; 0x3f
{
   da9fc:	461d      	mov	r5, r3
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   da9fe:	f002 f82e 	bl	dca5e <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   daa02:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   daa04:	a814      	add	r0, sp, #80	; 0x50
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   daa06:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   daa0a:	f002 f80e 	bl	dca2a <strlen>
   daa0e:	4604      	mov	r4, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
   daa10:	bb5d      	cbnz	r5, daa6a <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x7e>
        strcpy(time_zone_str, "Z");
   daa12:	492a      	ldr	r1, [pc, #168]	; (daabc <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd0>)
   daa14:	a803      	add	r0, sp, #12
   daa16:	f001 ffe2 	bl	dc9de <strcpy>
   daa1a:	ae14      	add	r6, sp, #80	; 0x50
{
   daa1c:	2500      	movs	r5, #0
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
   daa1e:	f104 3bff 	add.w	fp, r4, #4294967295	; 0xffffffff
   daa22:	45ab      	cmp	fp, r5
   daa24:	d936      	bls.n	daa94 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xa8>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
   daa26:	46b1      	mov	r9, r6
   daa28:	f105 0a01 	add.w	sl, r5, #1
   daa2c:	f819 3b01 	ldrb.w	r3, [r9], #1
   daa30:	2b25      	cmp	r3, #37	; 0x25
   daa32:	d117      	bne.n	daa64 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x78>
   daa34:	7873      	ldrb	r3, [r6, #1]
   daa36:	2b7a      	cmp	r3, #122	; 0x7a
   daa38:	d114      	bne.n	daa64 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x78>
        {
            size_t tzlen = strlen(time_zone_str);
   daa3a:	a803      	add	r0, sp, #12
   daa3c:	f001 fff5 	bl	dca2a <strlen>
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   daa40:	ab14      	add	r3, sp, #80	; 0x50
            size_t tzlen = strlen(time_zone_str);
   daa42:	4604      	mov	r4, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   daa44:	1828      	adds	r0, r5, r0
   daa46:	4418      	add	r0, r3
   daa48:	ebab 0205 	sub.w	r2, fp, r5
   daa4c:	1cb1      	adds	r1, r6, #2
   daa4e:	f001 ff51 	bl	dc8f4 <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
   daa52:	4622      	mov	r2, r4
   daa54:	a903      	add	r1, sp, #12
   daa56:	4630      	mov	r0, r6
   daa58:	f001 ff4c 	bl	dc8f4 <memcpy>
            len = strlen(format_str);
   daa5c:	a814      	add	r0, sp, #80	; 0x50
   daa5e:	f001 ffe4 	bl	dca2a <strlen>
   daa62:	4604      	mov	r4, r0
    for (size_t i=0; i<len-1; i++)
   daa64:	464e      	mov	r6, r9
   daa66:	4655      	mov	r5, sl
   daa68:	e7d9      	b.n	daa1e <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x32>
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
   daa6a:	213c      	movs	r1, #60	; 0x3c
   daa6c:	fb95 f3f1 	sdiv	r3, r5, r1
   daa70:	2b00      	cmp	r3, #0
   daa72:	bfb8      	it	lt
   daa74:	425b      	neglt	r3, r3
   daa76:	fbb3 f2f1 	udiv	r2, r3, r1
   daa7a:	fb01 3312 	mls	r3, r1, r2, r3
   daa7e:	9300      	str	r3, [sp, #0]
   daa80:	4a0f      	ldr	r2, [pc, #60]	; (daac0 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd4>)
   daa82:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   daa86:	2110      	movs	r1, #16
   daa88:	a803      	add	r0, sp, #12
   daa8a:	fb95 f3f3 	sdiv	r3, r5, r3
   daa8e:	f7fd f87d 	bl	d7b8c <snprintf>
   daa92:	e7c2      	b.n	daa1a <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x2e>
        }
    }

    char buf[50] = {};
   daa94:	2100      	movs	r1, #0
   daa96:	222e      	movs	r2, #46	; 0x2e
   daa98:	a808      	add	r0, sp, #32
   daa9a:	9107      	str	r1, [sp, #28]
   daa9c:	f001 ff52 	bl	dc944 <memset>
    strftime(buf, sizeof(buf), format_str, calendar_time);
   daaa0:	4643      	mov	r3, r8
   daaa2:	aa14      	add	r2, sp, #80	; 0x50
   daaa4:	2132      	movs	r1, #50	; 0x32
   daaa6:	a807      	add	r0, sp, #28
   daaa8:	f7fd f8a0 	bl	d7bec <strftime>
    return String(buf);
   daaac:	a907      	add	r1, sp, #28
   daaae:	4638      	mov	r0, r7
   daab0:	f7ff fa81 	bl	d9fb6 <_ZN6StringC1EPKc>
}
   daab4:	4638      	mov	r0, r7
   daab6:	b025      	add	sp, #148	; 0x94
   daab8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   daabc:	000df88c 	.word	0x000df88c
   daac0:	000df88e 	.word	0x000df88e

000daac4 <_ZN9TimeClass6formatExPKc>:
{
   daac4:	b5f0      	push	{r4, r5, r6, r7, lr}
   daac6:	b08d      	sub	sp, #52	; 0x34
   daac8:	e9cd 2300 	strd	r2, r3, [sp]
   daacc:	9d12      	ldr	r5, [sp, #72]	; 0x48
   daace:	4604      	mov	r4, r0
    if (format_spec == nullptr)
   daad0:	b915      	cbnz	r5, daad8 <_ZN9TimeClass6formatExPKc+0x14>
        format_spec = this->format_spec;
   daad2:	4b19      	ldr	r3, [pc, #100]	; (dab38 <_ZN9TimeClass6formatExPKc+0x74>)
   daad4:	681d      	ldr	r5, [r3, #0]
    if (!format_spec || !strcmp(format_spec, TIME_FORMAT_DEFAULT)) {
   daad6:	b12d      	cbz	r5, daae4 <_ZN9TimeClass6formatExPKc+0x20>
   daad8:	4b18      	ldr	r3, [pc, #96]	; (dab3c <_ZN9TimeClass6formatExPKc+0x78>)
   daada:	4628      	mov	r0, r5
   daadc:	6819      	ldr	r1, [r3, #0]
   daade:	f001 ff74 	bl	dc9ca <strcmp>
   daae2:	b938      	cbnz	r0, daaf4 <_ZN9TimeClass6formatExPKc+0x30>
        return timeStr(t);
   daae4:	e9dd 2300 	ldrd	r2, r3, [sp]
   daae8:	4620      	mov	r0, r4
   daaea:	f7ff ff47 	bl	da97c <_ZN9TimeClass7timeStrEx>
}
   daaee:	4620      	mov	r0, r4
   daaf0:	b00d      	add	sp, #52	; 0x34
   daaf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    t += time_zone_cache;
   daaf4:	4e12      	ldr	r6, [pc, #72]	; (dab40 <_ZN9TimeClass6formatExPKc+0x7c>)
   daaf6:	9900      	ldr	r1, [sp, #0]
    t += dst_current_cache;
   daaf8:	4f12      	ldr	r7, [pc, #72]	; (dab44 <_ZN9TimeClass6formatExPKc+0x80>)
    t += time_zone_cache;
   daafa:	e9d6 3200 	ldrd	r3, r2, [r6]
   daafe:	185b      	adds	r3, r3, r1
   dab00:	9901      	ldr	r1, [sp, #4]
   dab02:	eb41 0202 	adc.w	r2, r1, r2
    t += dst_current_cache;
   dab06:	e9d7 0100 	ldrd	r0, r1, [r7]
   dab0a:	181b      	adds	r3, r3, r0
   dab0c:	eb41 0202 	adc.w	r2, r1, r2
   dab10:	e9cd 3200 	strd	r3, r2, [sp]
    struct tm calendar_time = {};
   dab14:	2100      	movs	r1, #0
   dab16:	2224      	movs	r2, #36	; 0x24
   dab18:	a803      	add	r0, sp, #12
   dab1a:	f001 ff13 	bl	dc944 <memset>
    localtime_r(&t, &calendar_time);
   dab1e:	a903      	add	r1, sp, #12
   dab20:	4668      	mov	r0, sp
   dab22:	f7fd f86b 	bl	d7bfc <localtime_r>
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
   dab26:	6832      	ldr	r2, [r6, #0]
   dab28:	683b      	ldr	r3, [r7, #0]
   dab2a:	a903      	add	r1, sp, #12
   dab2c:	4413      	add	r3, r2
   dab2e:	4620      	mov	r0, r4
   dab30:	462a      	mov	r2, r5
   dab32:	f7ff ff5b 	bl	da9ec <_ZN9TimeClass14timeFormatImplEP2tmPKci>
   dab36:	e7da      	b.n	daaee <_ZN9TimeClass6formatExPKc+0x2a>
   dab38:	2003e694 	.word	0x2003e694
   dab3c:	2003debc 	.word	0x2003debc
   dab40:	2003e6c8 	.word	0x2003e6c8
   dab44:	2003e6c0 	.word	0x2003e6c0

000dab48 <_ZN9TimeClass7isValidEv>:

bool TimeClass::isValid()
{
   dab48:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   dab4a:	2000      	movs	r0, #0
   dab4c:	f7fc fcdc 	bl	d7508 <hal_rtc_time_is_valid>
    if (rtcstate)
   dab50:	4604      	mov	r4, r0
   dab52:	b9a0      	cbnz	r0, dab7e <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   dab54:	f7fc fee2 	bl	d791c <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   dab58:	2801      	cmp	r0, #1
   dab5a:	d110      	bne.n	dab7e <_ZN9TimeClass7isValidEv+0x36>
   dab5c:	4620      	mov	r0, r4
   dab5e:	f7fc ff0d 	bl	d797c <system_thread_get_state>
   dab62:	b960      	cbnz	r0, dab7e <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   dab64:	f7ff feb2 	bl	da8cc <_ZN10CloudClass12syncTimeDoneEv.isra.0>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   dab68:	b910      	cbnz	r0, dab70 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   dab6a:	f7fc ff47 	bl	d79fc <spark_process>
        while (_while() && !_condition()) {
   dab6e:	e7f9      	b.n	dab64 <_ZN9TimeClass7isValidEv+0x1c>
   dab70:	f7ff feac 	bl	da8cc <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   dab74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   dab78:	2000      	movs	r0, #0
   dab7a:	f7fc bcc5 	b.w	d7508 <hal_rtc_time_is_valid>
}
   dab7e:	4620      	mov	r0, r4
   dab80:	bd10      	pop	{r4, pc}

000dab82 <_ZN9TimeClass3nowEv>:
{
   dab82:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   dab84:	f7ff ffe0 	bl	dab48 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   dab88:	2210      	movs	r2, #16
   dab8a:	2100      	movs	r1, #0
   dab8c:	4668      	mov	r0, sp
   dab8e:	f001 fed9 	bl	dc944 <memset>
    hal_rtc_get_time(&tv, nullptr);
   dab92:	2100      	movs	r1, #0
   dab94:	4668      	mov	r0, sp
   dab96:	f7fc fcbf 	bl	d7518 <hal_rtc_get_time>
}
   dab9a:	9800      	ldr	r0, [sp, #0]
   dab9c:	b005      	add	sp, #20
   dab9e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000daba4 <_ZN9TimeClass4yearEv>:
{
   daba4:	b508      	push	{r3, lr}
	return year(now());
   daba6:	f7ff ffec 	bl	dab82 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   dabaa:	17c1      	asrs	r1, r0, #31
   dabac:	f7ff fe58 	bl	da860 <_ZL22Refresh_UnixTime_Cachex>
}
   dabb0:	4b01      	ldr	r3, [pc, #4]	; (dabb8 <_ZN9TimeClass4yearEv+0x14>)
   dabb2:	6958      	ldr	r0, [r3, #20]
   dabb4:	bd08      	pop	{r3, pc}
   dabb6:	bf00      	nop
   dabb8:	2003e698 	.word	0x2003e698

000dabbc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   dabbc:	4b02      	ldr	r3, [pc, #8]	; (dabc8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   dabbe:	681a      	ldr	r2, [r3, #0]
   dabc0:	4b02      	ldr	r3, [pc, #8]	; (dabcc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   dabc2:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   dabc4:	4770      	bx	lr
   dabc6:	bf00      	nop
   dabc8:	2003debc 	.word	0x2003debc
   dabcc:	2003e694 	.word	0x2003e694

000dabd0 <_ZN3UDP13receivePacketEPcjm>:
     * @param buffer        The buffer to read data to
     * @param buf_size      The buffer size
     * @return The number of bytes written to the buffer, or a negative value on error.
     */
    virtual int receivePacket(uint8_t* buffer, size_t buf_size, system_tick_t timeout = 0);
    virtual int receivePacket(char* buffer, size_t buf_size, system_tick_t timeout = 0) {
   dabd0:	b410      	push	{r4}
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
   dabd2:	6804      	ldr	r4, [r0, #0]
   dabd4:	6b24      	ldr	r4, [r4, #48]	; 0x30
   dabd6:	46a4      	mov	ip, r4
    }
   dabd8:	f85d 4b04 	ldr.w	r4, [sp], #4
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
   dabdc:	4760      	bx	ip

000dabde <_ZN3UDP4readEPcj>:
     * @return
     */
    virtual int read();
    virtual int read(unsigned char* buffer, size_t len);

    virtual int read(char* buffer, size_t len) { return read((unsigned char*)buffer, len); };
   dabde:	6803      	ldr	r3, [r0, #0]
   dabe0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   dabe2:	4718      	bx	r3

000dabe4 <_ZN3UDP10remotePortEv>:
    void flush_buffer();

    const uint8_t* buffer() const { return _buffer; }

    virtual IPAddress remoteIP() { return _remoteIP; };
    virtual uint16_t remotePort() { return _remotePort; };
   dabe4:	8e80      	ldrh	r0, [r0, #52]	; 0x34
   dabe6:	4770      	bx	lr

000dabe8 <_ZN3UDP9availableEv>:
    }
    return bound;
}

int UDP::available() {
    return _total - _offset;
   dabe8:	8f02      	ldrh	r2, [r0, #56]	; 0x38
   dabea:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
}
   dabec:	1a10      	subs	r0, r2, r0
   dabee:	4770      	bx	lr

000dabf0 <_ZN3UDP5writeEh>:
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
}

size_t UDP::write(uint8_t byte) {
   dabf0:	b507      	push	{r0, r1, r2, lr}
    return write(&byte, 1);
   dabf2:	6803      	ldr	r3, [r0, #0]
size_t UDP::write(uint8_t byte) {
   dabf4:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&byte, 1);
   dabf8:	68db      	ldr	r3, [r3, #12]
   dabfa:	2201      	movs	r2, #1
   dabfc:	f10d 0107 	add.w	r1, sp, #7
   dac00:	4798      	blx	r3
}
   dac02:	b003      	add	sp, #12
   dac04:	f85d fb04 	ldr.w	pc, [sp], #4

000dac08 <_ZN3UDP4readEv>:
        }
    }
    return ret;
}

int UDP::read() {
   dac08:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset++] : -1;
   dac0a:	6803      	ldr	r3, [r0, #0]
   dac0c:	691b      	ldr	r3, [r3, #16]
int UDP::read() {
   dac0e:	4604      	mov	r4, r0
    return available() ? _buffer[_offset++] : -1;
   dac10:	4798      	blx	r3
   dac12:	b128      	cbz	r0, dac20 <_ZN3UDP4readEv+0x18>
   dac14:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   dac16:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   dac18:	1c59      	adds	r1, r3, #1
   dac1a:	86e1      	strh	r1, [r4, #54]	; 0x36
   dac1c:	5cd0      	ldrb	r0, [r2, r3]
}
   dac1e:	bd10      	pop	{r4, pc}
    return available() ? _buffer[_offset++] : -1;
   dac20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   dac24:	e7fb      	b.n	dac1e <_ZN3UDP4readEv+0x16>

000dac26 <_ZN3UDP4peekEv>:
        _offset += read;
    }
    return read;
}

int UDP::peek() {
   dac26:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset] : -1;
   dac28:	6803      	ldr	r3, [r0, #0]
   dac2a:	691b      	ldr	r3, [r3, #16]
int UDP::peek() {
   dac2c:	4604      	mov	r4, r0
    return available() ? _buffer[_offset] : -1;
   dac2e:	4798      	blx	r3
   dac30:	b118      	cbz	r0, dac3a <_ZN3UDP4peekEv+0x14>
   dac32:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   dac34:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   dac36:	5cd0      	ldrb	r0, [r2, r3]
}
   dac38:	bd10      	pop	{r4, pc}
    return available() ? _buffer[_offset] : -1;
   dac3a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   dac3e:	e7fb      	b.n	dac38 <_ZN3UDP4peekEv+0x12>

000dac40 <_ZN3UDP5flushEv>:

void UDP::flush() {
}
   dac40:	4770      	bx	lr

000dac42 <_ZNK3UDP7printToER5Print>:
void UDP::flush_buffer() {
    _offset = 0;
    _total = 0;
}

size_t UDP::printTo(Print& p) const {
   dac42:	b410      	push	{r4}
   dac44:	4603      	mov	r3, r0
   dac46:	4608      	mov	r0, r1
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer + _offset, size);
   dac48:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
    int size = _total - _offset;
   dac4a:	8ed9      	ldrh	r1, [r3, #54]	; 0x36
   dac4c:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
    return p.write(_buffer + _offset, size);
   dac4e:	6803      	ldr	r3, [r0, #0]
   dac50:	1a52      	subs	r2, r2, r1
   dac52:	68db      	ldr	r3, [r3, #12]
   dac54:	4421      	add	r1, r4
}
   dac56:	f85d 4b04 	ldr.w	r4, [sp], #4
    return p.write(_buffer + _offset, size);
   dac5a:	4718      	bx	r3

000dac5c <_ZThn16_NK3UDP7printToER5Print>:
    /**
     * Prints the current read parsed packet to the given output.
     * @param p
     * @return
     */
    virtual size_t printTo(Print& p) const;
   dac5c:	f1a0 0010 	sub.w	r0, r0, #16
   dac60:	f7ff bfef 	b.w	dac42 <_ZNK3UDP7printToER5Print>

000dac64 <_ZN3UDP5beginEtm>:
uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   dac64:	b570      	push	{r4, r5, r6, lr}
    stop();
   dac66:	6803      	ldr	r3, [r0, #0]
uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   dac68:	b08c      	sub	sp, #48	; 0x30
    stop();
   dac6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   dac6c:	4604      	mov	r4, r0
   dac6e:	460e      	mov	r6, r1
   dac70:	4615      	mov	r5, r2
    stop();
   dac72:	4798      	blx	r3
    const int one = 1;
   dac74:	2301      	movs	r3, #1
    struct sockaddr_in6 saddr = {};
   dac76:	221c      	movs	r2, #28
   dac78:	2100      	movs	r1, #0
   dac7a:	a805      	add	r0, sp, #20
    const int one = 1;
   dac7c:	9302      	str	r3, [sp, #8]
    struct sockaddr_in6 saddr = {};
   dac7e:	f001 fe61 	bl	dc944 <memset>
    saddr.sin6_len = sizeof(saddr);
   dac82:	f640 231c 	movw	r3, #2588	; 0xa1c
    saddr.sin6_port = htons(port);
   dac86:	4630      	mov	r0, r6
    saddr.sin6_len = sizeof(saddr);
   dac88:	f8ad 3014 	strh.w	r3, [sp, #20]
    saddr.sin6_port = htons(port);
   dac8c:	f7fc fd14 	bl	d76b8 <inet_htons>
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   dac90:	2211      	movs	r2, #17
    saddr.sin6_port = htons(port);
   dac92:	f8ad 0016 	strh.w	r0, [sp, #22]
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   dac96:	2102      	movs	r1, #2
   dac98:	200a      	movs	r0, #10
   dac9a:	f7fc fd65 	bl	d7768 <sock_socket>
    if (_sock < 0) {
   dac9e:	2800      	cmp	r0, #0
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   daca0:	6160      	str	r0, [r4, #20]
    if (_sock < 0) {
   daca2:	db25      	blt.n	dacf0 <_ZN3UDP5beginEtm+0x8c>
    if (sock_setsockopt(_sock, SOL_SOCKET, SO_REUSEADDR, &one, sizeof(one))) {
   daca4:	2204      	movs	r2, #4
   daca6:	9200      	str	r2, [sp, #0]
   daca8:	ab02      	add	r3, sp, #8
   dacaa:	f640 71ff 	movw	r1, #4095	; 0xfff
   dacae:	f7fc fd23 	bl	d76f8 <sock_setsockopt>
   dacb2:	b9e8      	cbnz	r0, dacf0 <_ZN3UDP5beginEtm+0x8c>
    if (nif != 0) {
   dacb4:	b195      	cbz	r5, dacdc <_ZN3UDP5beginEtm+0x78>
        struct ifreq ifr = {};
   dacb6:	9003      	str	r0, [sp, #12]
   dacb8:	f8ad 0010 	strh.w	r0, [sp, #16]
        if (if_index_to_name(nif, ifr.ifr_name)) {
   dacbc:	a903      	add	r1, sp, #12
   dacbe:	b2e8      	uxtb	r0, r5
   dacc0:	f7fc fcda 	bl	d7678 <if_index_to_name>
   dacc4:	b9a0      	cbnz	r0, dacf0 <_ZN3UDP5beginEtm+0x8c>
        if (sock_setsockopt(_sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr))) {
   dacc6:	2306      	movs	r3, #6
   dacc8:	9300      	str	r3, [sp, #0]
   dacca:	6960      	ldr	r0, [r4, #20]
   daccc:	ab03      	add	r3, sp, #12
   dacce:	f241 020b 	movw	r2, #4107	; 0x100b
   dacd2:	f640 71ff 	movw	r1, #4095	; 0xfff
   dacd6:	f7fc fd0f 	bl	d76f8 <sock_setsockopt>
   dacda:	b948      	cbnz	r0, dacf0 <_ZN3UDP5beginEtm+0x8c>
    if (sock_bind(_sock, (const struct sockaddr*)&saddr, sizeof(saddr))) {
   dacdc:	6960      	ldr	r0, [r4, #20]
   dacde:	221c      	movs	r2, #28
   dace0:	a905      	add	r1, sp, #20
   dace2:	f7fc fd01 	bl	d76e8 <sock_bind>
   dace6:	b918      	cbnz	r0, dacf0 <_ZN3UDP5beginEtm+0x8c>
    _nif = nif;
   dace8:	6465      	str	r5, [r4, #68]	; 0x44
    bound = true;
   dacea:	2001      	movs	r0, #1
}
   dacec:	b00c      	add	sp, #48	; 0x30
   dacee:	bd70      	pop	{r4, r5, r6, pc}
        stop();
   dacf0:	6823      	ldr	r3, [r4, #0]
   dacf2:	4620      	mov	r0, r4
   dacf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   dacf6:	4798      	blx	r3
   dacf8:	2000      	movs	r0, #0
   dacfa:	e7f7      	b.n	dacec <_ZN3UDP5beginEtm+0x88>

000dacfc <_ZN3UDP4stopEv>:
void UDP::stop() {
   dacfc:	b510      	push	{r4, lr}
   dacfe:	4604      	mov	r4, r0
    if (isOpen(_sock)) {
   dad00:	6940      	ldr	r0, [r0, #20]
   dad02:	2800      	cmp	r0, #0
   dad04:	db01      	blt.n	dad0a <_ZN3UDP4stopEv+0xe>
        sock_close(_sock);
   dad06:	f7fc fcff 	bl	d7708 <sock_close>
    _sock = -1;
   dad0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   dad0e:	6163      	str	r3, [r4, #20]
    _offset = 0;
   dad10:	2300      	movs	r3, #0
   dad12:	86e3      	strh	r3, [r4, #54]	; 0x36
    _total = 0;
   dad14:	8723      	strh	r3, [r4, #56]	; 0x38
}
   dad16:	bd10      	pop	{r4, pc}

000dad18 <_ZN3UDP5writeEPKhj>:
size_t UDP::write(const uint8_t *buffer, size_t size) {
   dad18:	b570      	push	{r4, r5, r6, lr}
   dad1a:	4605      	mov	r5, r0
    size_t available = _buffer ? _buffer_size - _offset : 0;
   dad1c:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   dad1e:	8eee      	ldrh	r6, [r5, #54]	; 0x36
   dad20:	b168      	cbz	r0, dad3e <_ZN3UDP5writeEPKhj+0x26>
   dad22:	6c2b      	ldr	r3, [r5, #64]	; 0x40
   dad24:	1b9c      	subs	r4, r3, r6
    if (size > available) {
   dad26:	4294      	cmp	r4, r2
   dad28:	bf28      	it	cs
   dad2a:	4614      	movcs	r4, r2
    memcpy(_buffer + _offset, buffer, size);
   dad2c:	4622      	mov	r2, r4
   dad2e:	4430      	add	r0, r6
   dad30:	f001 fde0 	bl	dc8f4 <memcpy>
    _offset += size;
   dad34:	8eeb      	ldrh	r3, [r5, #54]	; 0x36
   dad36:	4423      	add	r3, r4
   dad38:	86eb      	strh	r3, [r5, #54]	; 0x36
}
   dad3a:	4620      	mov	r0, r4
   dad3c:	bd70      	pop	{r4, r5, r6, pc}
    size_t available = _buffer ? _buffer_size - _offset : 0;
   dad3e:	4604      	mov	r4, r0
   dad40:	e7f1      	b.n	dad26 <_ZN3UDP5writeEPKhj+0xe>

000dad42 <_ZN3UDP4readEPhj>:
int UDP::read(unsigned char* buffer, size_t len) {
   dad42:	b5d0      	push	{r4, r6, r7, lr}
    if (available()) {
   dad44:	6803      	ldr	r3, [r0, #0]
   dad46:	691b      	ldr	r3, [r3, #16]
int UDP::read(unsigned char* buffer, size_t len) {
   dad48:	4604      	mov	r4, r0
   dad4a:	460f      	mov	r7, r1
   dad4c:	4616      	mov	r6, r2
    if (available()) {
   dad4e:	4798      	blx	r3
   dad50:	b190      	cbz	r0, dad78 <_ZN3UDP4readEPhj+0x36>
        read = min(int(len), available());
   dad52:	6823      	ldr	r3, [r4, #0]
   dad54:	4620      	mov	r0, r4
   dad56:	691b      	ldr	r3, [r3, #16]
   dad58:	4798      	blx	r3
        memcpy(buffer, &_buffer[_offset], read);
   dad5a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   dad5c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   dad5e:	4286      	cmp	r6, r0
   dad60:	bfa8      	it	ge
   dad62:	4606      	movge	r6, r0
   dad64:	4419      	add	r1, r3
   dad66:	4632      	mov	r2, r6
   dad68:	4638      	mov	r0, r7
   dad6a:	f001 fdc3 	bl	dc8f4 <memcpy>
        _offset += read;
   dad6e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   dad70:	4433      	add	r3, r6
   dad72:	86e3      	strh	r3, [r4, #54]	; 0x36
}
   dad74:	4630      	mov	r0, r6
   dad76:	bdd0      	pop	{r4, r6, r7, pc}
    int read = -1;
   dad78:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    return read;
   dad7c:	e7fa      	b.n	dad74 <_ZN3UDP4readEPhj+0x32>
	...

000dad80 <_ZN3UDP8remoteIPEv>:
    virtual IPAddress remoteIP() { return _remoteIP; };
   dad80:	b570      	push	{r4, r5, r6, lr}
class IPAddress : public Printable {
   dad82:	4604      	mov	r4, r0
   dad84:	4b05      	ldr	r3, [pc, #20]	; (dad9c <_ZN3UDP8remoteIPEv+0x1c>)
   dad86:	f844 3b04 	str.w	r3, [r4], #4
   dad8a:	f101 0520 	add.w	r5, r1, #32
   dad8e:	4606      	mov	r6, r0
   dad90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   dad92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   dad94:	682b      	ldr	r3, [r5, #0]
   dad96:	7023      	strb	r3, [r4, #0]
   dad98:	4630      	mov	r0, r6
   dad9a:	bd70      	pop	{r4, r5, r6, pc}
   dad9c:	000df6b0 	.word	0x000df6b0

000dada0 <_ZN3UDP10sendPacketEPKcj9IPAddresst>:
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   dada0:	b5f0      	push	{r4, r5, r6, r7, lr}
   dada2:	4696      	mov	lr, r2
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   dada4:	6802      	ldr	r2, [r0, #0]
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   dada6:	b089      	sub	sp, #36	; 0x24
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   dada8:	6a97      	ldr	r7, [r2, #40]	; 0x28
   dadaa:	4a0a      	ldr	r2, [pc, #40]	; (dadd4 <_ZN3UDP10sendPacketEPKcj9IPAddresst+0x34>)
   dadac:	9202      	str	r2, [sp, #8]
   dadae:	1d1c      	adds	r4, r3, #4
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   dadb0:	468c      	mov	ip, r1
   dadb2:	4606      	mov	r6, r0
   dadb4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   dadb6:	ad03      	add	r5, sp, #12
   dadb8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   dadba:	6823      	ldr	r3, [r4, #0]
   dadbc:	702b      	strb	r3, [r5, #0]
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   dadbe:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   dadc2:	9300      	str	r3, [sp, #0]
   dadc4:	4672      	mov	r2, lr
   dadc6:	ab02      	add	r3, sp, #8
   dadc8:	4661      	mov	r1, ip
   dadca:	4630      	mov	r0, r6
   dadcc:	47b8      	blx	r7
    }
   dadce:	b009      	add	sp, #36	; 0x24
   dadd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   dadd2:	bf00      	nop
   dadd4:	000df6b0 	.word	0x000df6b0

000dadd8 <_ZN3UDP9endPacketEv>:
int UDP::endPacket() {
   dadd8:	b5f0      	push	{r4, r5, r6, r7, lr}
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   dadda:	6803      	ldr	r3, [r0, #0]
int UDP::endPacket() {
   daddc:	b089      	sub	sp, #36	; 0x24
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   dadde:	6a9f      	ldr	r7, [r3, #40]	; 0x28
   dade0:	4b0c      	ldr	r3, [pc, #48]	; (dae14 <_ZN3UDP9endPacketEv+0x3c>)
   dade2:	9302      	str	r3, [sp, #8]
   dade4:	f100 0620 	add.w	r6, r0, #32
int UDP::endPacket() {
   dade8:	4604      	mov	r4, r0
   dadea:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   dadec:	ad03      	add	r5, sp, #12
   dadee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   dadf0:	6833      	ldr	r3, [r6, #0]
   dadf2:	702b      	strb	r3, [r5, #0]
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   dadf4:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
   dadf6:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
   dadf8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   dadfa:	9300      	str	r3, [sp, #0]
   dadfc:	4620      	mov	r0, r4
   dadfe:	ab02      	add	r3, sp, #8
   dae00:	47b8      	blx	r7
    flush(); // wait for send to complete
   dae02:	6823      	ldr	r3, [r4, #0]
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   dae04:	4605      	mov	r5, r0
    flush(); // wait for send to complete
   dae06:	69db      	ldr	r3, [r3, #28]
   dae08:	4620      	mov	r0, r4
   dae0a:	4798      	blx	r3
}
   dae0c:	4628      	mov	r0, r5
   dae0e:	b009      	add	sp, #36	; 0x24
   dae10:	bdf0      	pop	{r4, r5, r6, r7, pc}
   dae12:	bf00      	nop
   dae14:	000df6b0 	.word	0x000df6b0

000dae18 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>:
inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
   dae18:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (saddr->sa_family == AF_INET) {
   dae1a:	7843      	ldrb	r3, [r0, #1]
   dae1c:	2b02      	cmp	r3, #2
inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
   dae1e:	b08d      	sub	sp, #52	; 0x34
   dae20:	4605      	mov	r5, r0
   dae22:	460c      	mov	r4, r1
   dae24:	4617      	mov	r7, r2
    if (saddr->sa_family == AF_INET) {
   dae26:	d104      	bne.n	dae32 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x1a>
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   dae28:	1d01      	adds	r1, r0, #4
            addr = (const uint8_t*)(&ptr[3]);
   dae2a:	4620      	mov	r0, r4
   dae2c:	f7fd fc7c 	bl	d8728 <_ZN9IPAddressaSEPKh>
   dae30:	e022      	b.n	dae78 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x60>
    else if (saddr->sa_family == AF_INET6) {
   dae32:	2b0a      	cmp	r3, #10
   dae34:	d125      	bne.n	dae82 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x6a>
        HAL_IPAddress a = {};
   dae36:	2211      	movs	r2, #17
   dae38:	2100      	movs	r1, #0
   dae3a:	a801      	add	r0, sp, #4
   dae3c:	f001 fd82 	bl	dc944 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   dae40:	68ab      	ldr	r3, [r5, #8]
   dae42:	b303      	cbz	r3, dae86 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x6e>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   dae44:	f105 0308 	add.w	r3, r5, #8
   dae48:	ae01      	add	r6, sp, #4
   dae4a:	f105 0c18 	add.w	ip, r5, #24
   dae4e:	6818      	ldr	r0, [r3, #0]
   dae50:	6859      	ldr	r1, [r3, #4]
   dae52:	4632      	mov	r2, r6
   dae54:	c203      	stmia	r2!, {r0, r1}
   dae56:	3308      	adds	r3, #8
   dae58:	4563      	cmp	r3, ip
   dae5a:	4616      	mov	r6, r2
   dae5c:	d1f7      	bne.n	dae4e <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x36>
            a.v = 6;
   dae5e:	2306      	movs	r3, #6
            addr = IPAddress(a);
   dae60:	a901      	add	r1, sp, #4
   dae62:	a806      	add	r0, sp, #24
   dae64:	ae07      	add	r6, sp, #28
            a.v = 6;
   dae66:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   dae6a:	f7fd fc1b 	bl	d86a4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   dae6e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   dae70:	3404      	adds	r4, #4
   dae72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   dae74:	6833      	ldr	r3, [r6, #0]
   dae76:	7023      	strb	r3, [r4, #0]
        if (port) {
   dae78:	b11f      	cbz	r7, dae82 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x6a>
            *port = ntohs(in6addr->sin6_port);
   dae7a:	8868      	ldrh	r0, [r5, #2]
   dae7c:	f7fc fc14 	bl	d76a8 <inet_ntohs>
   dae80:	8038      	strh	r0, [r7, #0]
        }
    }
#endif // HAL_IPv6
}
   dae82:	b00d      	add	sp, #52	; 0x34
   dae84:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   dae86:	68eb      	ldr	r3, [r5, #12]
   dae88:	2b00      	cmp	r3, #0
   dae8a:	d1db      	bne.n	dae44 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x2c>
   dae8c:	f64f 70ff 	movw	r0, #65535	; 0xffff
   dae90:	692e      	ldr	r6, [r5, #16]
   dae92:	f7fc fc01 	bl	d7698 <inet_htonl>
   dae96:	4286      	cmp	r6, r0
   dae98:	d1d4      	bne.n	dae44 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x2c>
            addr = (const uint8_t*)(&ptr[3]);
   dae9a:	f105 0114 	add.w	r1, r5, #20
   dae9e:	e7c4      	b.n	dae2a <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x12>

000daea0 <_ZN3UDP11beginPacketEPKct>:
int UDP::beginPacket(const char *host, uint16_t port) {
   daea0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   daea4:	4617      	mov	r7, r2
   daea6:	b08e      	sub	sp, #56	; 0x38
    struct addrinfo* ais = nullptr;
   daea8:	2200      	movs	r2, #0
int UDP::beginPacket(const char *host, uint16_t port) {
   daeaa:	4606      	mov	r6, r0
    CHECK(netdb_getaddrinfo(host, nullptr, nullptr, &ais));
   daeac:	ab01      	add	r3, sp, #4
int UDP::beginPacket(const char *host, uint16_t port) {
   daeae:	4608      	mov	r0, r1
    CHECK(netdb_getaddrinfo(host, nullptr, nullptr, &ais));
   daeb0:	4611      	mov	r1, r2
    struct addrinfo* ais = nullptr;
   daeb2:	9201      	str	r2, [sp, #4]
    CHECK(netdb_getaddrinfo(host, nullptr, nullptr, &ais));
   daeb4:	f7fc fc10 	bl	d76d8 <netdb_getaddrinfo>
   daeb8:	1e04      	subs	r4, r0, #0
   daeba:	db20      	blt.n	daefe <_ZN3UDP11beginPacketEPKct+0x5e>
    if (ais && ais->ai_addr) {
   daebc:	9b01      	ldr	r3, [sp, #4]
   daebe:	b32b      	cbz	r3, daf0c <_ZN3UDP11beginPacketEPKct+0x6c>
   daec0:	695b      	ldr	r3, [r3, #20]
   daec2:	b31b      	cbz	r3, daf0c <_ZN3UDP11beginPacketEPKct+0x6c>
        IPAddress addr;
   daec4:	a802      	add	r0, sp, #8
   daec6:	f7fd fbdf 	bl	d8688 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   daeca:	9b01      	ldr	r3, [sp, #4]
   daecc:	2200      	movs	r2, #0
   daece:	6958      	ldr	r0, [r3, #20]
   daed0:	a902      	add	r1, sp, #8
   daed2:	f7ff ffa1 	bl	dae18 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>
        return static_cast<const IPAddress*>(this)->operator bool();
   daed6:	a802      	add	r0, sp, #8
   daed8:	f7fd fbf6 	bl	d86c8 <_ZNK9IPAddresscvbEv>
        if (addr) {
   daedc:	b1b0      	cbz	r0, daf0c <_ZN3UDP11beginPacketEPKct+0x6c>
            return beginPacket(addr, port);
   daede:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   daee0:	ad03      	add	r5, sp, #12
   daee2:	f8d3 8038 	ldr.w	r8, [r3, #56]	; 0x38
   daee6:	4b0b      	ldr	r3, [pc, #44]	; (daf14 <_ZN3UDP11beginPacketEPKct+0x74>)
   daee8:	9308      	str	r3, [sp, #32]
   daeea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   daeec:	ac09      	add	r4, sp, #36	; 0x24
   daeee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   daef0:	682b      	ldr	r3, [r5, #0]
   daef2:	7023      	strb	r3, [r4, #0]
   daef4:	463a      	mov	r2, r7
   daef6:	a908      	add	r1, sp, #32
   daef8:	4630      	mov	r0, r6
   daefa:	47c0      	blx	r8
   daefc:	4604      	mov	r4, r0
    SCOPE_GUARD({
   daefe:	9801      	ldr	r0, [sp, #4]
   daf00:	f7fc fbe2 	bl	d76c8 <netdb_freeaddrinfo>
}
   daf04:	4620      	mov	r0, r4
   daf06:	b00e      	add	sp, #56	; 0x38
   daf08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return -1;
   daf0c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   daf10:	e7f5      	b.n	daefe <_ZN3UDP11beginPacketEPKct+0x5e>
   daf12:	bf00      	nop
   daf14:	000df6b0 	.word	0x000df6b0

000daf18 <_ZN3UDP13receivePacketEPhjm>:
int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
   daf18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (isOpen(_sock) && buffer) {
   daf1c:	f8d0 9014 	ldr.w	r9, [r0, #20]
   daf20:	f1b9 0f00 	cmp.w	r9, #0
int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
   daf24:	b090      	sub	sp, #64	; 0x40
   daf26:	4605      	mov	r5, r0
   daf28:	460e      	mov	r6, r1
   daf2a:	4690      	mov	r8, r2
   daf2c:	461c      	mov	r4, r3
    if (isOpen(_sock) && buffer) {
   daf2e:	db3c      	blt.n	dafaa <_ZN3UDP13receivePacketEPhjm+0x92>
   daf30:	2900      	cmp	r1, #0
   daf32:	d03a      	beq.n	dafaa <_ZN3UDP13receivePacketEPhjm+0x92>
        sockaddr_storage saddr = {};
   daf34:	f04f 0a1c 	mov.w	sl, #28
   daf38:	af09      	add	r7, sp, #36	; 0x24
   daf3a:	4652      	mov	r2, sl
   daf3c:	2100      	movs	r1, #0
   daf3e:	4638      	mov	r0, r7
   daf40:	f001 fd00 	bl	dc944 <memset>
        socklen_t slen = sizeof(saddr);
   daf44:	f8cd a00c 	str.w	sl, [sp, #12]
        if (timeout == 0) {
   daf48:	b1dc      	cbz	r4, daf82 <_ZN3UDP13receivePacketEPhjm+0x6a>
            struct timeval tv = {};
   daf4a:	2200      	movs	r2, #0
            tv.tv_sec = timeout / 1000;
   daf4c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   daf50:	fbb4 f3f0 	udiv	r3, r4, r0
   daf54:	e9cd 3204 	strd	r3, r2, [sp, #16]
            tv.tv_usec = (timeout % 1000) * 1000;
   daf58:	fb00 4313 	mls	r3, r0, r3, r4
   daf5c:	4358      	muls	r0, r3
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
   daf5e:	2310      	movs	r3, #16
            struct timeval tv = {};
   daf60:	9207      	str	r2, [sp, #28]
            tv.tv_usec = (timeout % 1000) * 1000;
   daf62:	9006      	str	r0, [sp, #24]
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
   daf64:	9300      	str	r3, [sp, #0]
   daf66:	f241 0206 	movw	r2, #4102	; 0x1006
   daf6a:	446b      	add	r3, sp
   daf6c:	f640 71ff 	movw	r1, #4095	; 0xfff
   daf70:	4648      	mov	r0, r9
   daf72:	f7fc fbc1 	bl	d76f8 <sock_setsockopt>
            if (ret) {
   daf76:	4604      	mov	r4, r0
   daf78:	b120      	cbz	r0, daf84 <_ZN3UDP13receivePacketEPhjm+0x6c>
}
   daf7a:	4620      	mov	r0, r4
   daf7c:	b010      	add	sp, #64	; 0x40
   daf7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            flags = MSG_DONTWAIT;
   daf82:	2408      	movs	r4, #8
        ret = sock_recvfrom(_sock, buffer, size, flags, (struct sockaddr*)&saddr, &slen);
   daf84:	ab03      	add	r3, sp, #12
   daf86:	e9cd 7300 	strd	r7, r3, [sp]
   daf8a:	6968      	ldr	r0, [r5, #20]
   daf8c:	4623      	mov	r3, r4
   daf8e:	4642      	mov	r2, r8
   daf90:	4631      	mov	r1, r6
   daf92:	f7fc fbd1 	bl	d7738 <sock_recvfrom>
        if (ret >= 0) {
   daf96:	1e04      	subs	r4, r0, #0
   daf98:	dbef      	blt.n	daf7a <_ZN3UDP13receivePacketEPhjm+0x62>
            detail::sockaddrToIpAddressPort((const struct sockaddr*)&saddr, _remoteIP, &_remotePort);
   daf9a:	f105 0234 	add.w	r2, r5, #52	; 0x34
   daf9e:	f105 011c 	add.w	r1, r5, #28
   dafa2:	4638      	mov	r0, r7
   dafa4:	f7ff ff38 	bl	dae18 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>
            LOG_DEBUG(TRACE, "received %d bytes from %s#%d", ret, _remoteIP.toString().c_str(), _remotePort);
   dafa8:	e7e7      	b.n	daf7a <_ZN3UDP13receivePacketEPhjm+0x62>
    int ret = -1;
   dafaa:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   dafae:	e7e4      	b.n	daf7a <_ZN3UDP13receivePacketEPhjm+0x62>

000dafb0 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>:

inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
   dafb0:	b538      	push	{r3, r4, r5, lr}
   dafb2:	4605      	mov	r5, r0
   dafb4:	4614      	mov	r4, r2
    if (addr.version() == 6) {
   dafb6:	7d2b      	ldrb	r3, [r5, #20]
   dafb8:	2b06      	cmp	r3, #6
inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
   dafba:	4608      	mov	r0, r1
    if (addr.version() == 6) {
   dafbc:	d110      	bne.n	dafe0 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x30>
        struct sockaddr_in6* in6addr = (struct sockaddr_in6*)saddr;
        in6addr->sin6_len = sizeof(sockaddr_in6);
   dafbe:	f640 231c 	movw	r3, #2588	; 0xa1c
   dafc2:	8013      	strh	r3, [r2, #0]
        in6addr->sin6_family = AF_INET6;
        in6addr->sin6_port = htons(port);
   dafc4:	f7fc fb78 	bl	d76b8 <inet_htons>
        const auto& a = addr.raw();
        memcpy(in6addr->sin6_addr.s6_addr, a.ipv6, sizeof(a.ipv6));
   dafc8:	3408      	adds	r4, #8
   dafca:	1d2b      	adds	r3, r5, #4
        in6addr->sin6_port = htons(port);
   dafcc:	f824 0c06 	strh.w	r0, [r4, #-6]
        memcpy(in6addr->sin6_addr.s6_addr, a.ipv6, sizeof(a.ipv6));
   dafd0:	3514      	adds	r5, #20
   dafd2:	f853 2b04 	ldr.w	r2, [r3], #4
   dafd6:	f844 2b04 	str.w	r2, [r4], #4
   dafda:	42ab      	cmp	r3, r5
   dafdc:	d1f9      	bne.n	dafd2 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x22>
        const auto& a = addr.raw();
        // NOTE: HAL_IPAddress.ipv4 is host-order :|
        inaddr->sin_addr.s_addr = htonl(a.ipv4);
    }
#endif // HAL_IPv6
}
   dafde:	bd38      	pop	{r3, r4, r5, pc}
    else if (addr.version() == 4) {
   dafe0:	2b04      	cmp	r3, #4
   dafe2:	d1fc      	bne.n	dafde <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x2e>
        inaddr->sin_len = sizeof(sockaddr_in);
   dafe4:	f44f 7304 	mov.w	r3, #528	; 0x210
   dafe8:	8013      	strh	r3, [r2, #0]
        inaddr->sin_port = htons(port);
   dafea:	f7fc fb65 	bl	d76b8 <inet_htons>
   dafee:	8060      	strh	r0, [r4, #2]
        inaddr->sin_addr.s_addr = htonl(a.ipv4);
   daff0:	6868      	ldr	r0, [r5, #4]
   daff2:	f7fc fb51 	bl	d7698 <inet_htonl>
   daff6:	6060      	str	r0, [r4, #4]
}
   daff8:	e7f1      	b.n	dafde <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x2e>

000daffa <_ZN3UDP10sendPacketEPKhj9IPAddresst>:
int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
   daffa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   daffe:	b08b      	sub	sp, #44	; 0x2c
	sockaddr_storage s = {};
   db000:	af03      	add	r7, sp, #12
   db002:	f04f 091c 	mov.w	r9, #28
int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
   db006:	4698      	mov	r8, r3
   db008:	4604      	mov	r4, r0
   db00a:	460d      	mov	r5, r1
   db00c:	4616      	mov	r6, r2
	sockaddr_storage s = {};
   db00e:	2100      	movs	r1, #0
   db010:	464a      	mov	r2, r9
   db012:	4638      	mov	r0, r7
   db014:	f001 fc96 	bl	dc944 <memset>
    detail::ipAddressPortToSockaddr(remoteIP, port, (struct sockaddr*)&s);
   db018:	f8bd 1048 	ldrh.w	r1, [sp, #72]	; 0x48
   db01c:	463a      	mov	r2, r7
   db01e:	4640      	mov	r0, r8
   db020:	f7ff ffc6 	bl	dafb0 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>
    if (s.ss_family == AF_UNSPEC) {
   db024:	f89d 300d 	ldrb.w	r3, [sp, #13]
   db028:	b153      	cbz	r3, db040 <_ZN3UDP10sendPacketEPKhj9IPAddresst+0x46>
    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
   db02a:	e9cd 7900 	strd	r7, r9, [sp]
   db02e:	6960      	ldr	r0, [r4, #20]
   db030:	2300      	movs	r3, #0
   db032:	4632      	mov	r2, r6
   db034:	4629      	mov	r1, r5
   db036:	f7fc fb8f 	bl	d7758 <sock_sendto>
}
   db03a:	b00b      	add	sp, #44	; 0x2c
   db03c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return -1;
   db040:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   db044:	e7f9      	b.n	db03a <_ZN3UDP10sendPacketEPKhj9IPAddresst+0x40>
	...

000db048 <_ZN3UDPC1Ev>:
UDP::UDP()
   db048:	b538      	push	{r3, r4, r5, lr}
   db04a:	2500      	movs	r5, #0
   db04c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   db050:	e9c0 5301 	strd	r5, r3, [r0, #4]
          _buffer_allocated(false) {
   db054:	4b0b      	ldr	r3, [pc, #44]	; (db084 <_ZN3UDPC1Ev+0x3c>)
   db056:	f103 0208 	add.w	r2, r3, #8
   db05a:	336c      	adds	r3, #108	; 0x6c
   db05c:	6103      	str	r3, [r0, #16]
   db05e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
UDP::UDP()
   db062:	4604      	mov	r4, r0
          _buffer_allocated(false) {
   db064:	6002      	str	r2, [r0, #0]
   db066:	6143      	str	r3, [r0, #20]
   db068:	301c      	adds	r0, #28
   db06a:	f7fd fb0d 	bl	d8688 <_ZN9IPAddressC1Ev>
   db06e:	f44f 7300 	mov.w	r3, #512	; 0x200
   db072:	e9c4 3510 	strd	r3, r5, [r4, #64]	; 0x40
   db076:	86e5      	strh	r5, [r4, #54]	; 0x36
   db078:	8725      	strh	r5, [r4, #56]	; 0x38
   db07a:	63e5      	str	r5, [r4, #60]	; 0x3c
   db07c:	f884 5048 	strb.w	r5, [r4, #72]	; 0x48
}
   db080:	4620      	mov	r0, r4
   db082:	bd38      	pop	{r3, r4, r5, pc}
   db084:	000df8b8 	.word	0x000df8b8

000db088 <_ZN3UDP13releaseBufferEv>:
void UDP::releaseBuffer() {
   db088:	b510      	push	{r4, lr}
    if (_buffer_allocated && _buffer) {
   db08a:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
void UDP::releaseBuffer() {
   db08e:	4604      	mov	r4, r0
    if (_buffer_allocated && _buffer) {
   db090:	b123      	cbz	r3, db09c <_ZN3UDP13releaseBufferEv+0x14>
   db092:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   db094:	b110      	cbz	r0, db09c <_ZN3UDP13releaseBufferEv+0x14>
        delete _buffer;
   db096:	2101      	movs	r1, #1
   db098:	f000 fb88 	bl	db7ac <_ZdlPvj>
    _buffer = NULL;
   db09c:	2300      	movs	r3, #0
   db09e:	63e3      	str	r3, [r4, #60]	; 0x3c
    _buffer_allocated = false;
   db0a0:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    _buffer_size = 0;
   db0a4:	6423      	str	r3, [r4, #64]	; 0x40
    _offset = 0;
   db0a6:	86e3      	strh	r3, [r4, #54]	; 0x36
    _total = 0;
   db0a8:	8723      	strh	r3, [r4, #56]	; 0x38
}
   db0aa:	bd10      	pop	{r4, pc}

000db0ac <_ZN3UDP9setBufferEjPh>:
bool UDP::setBuffer(size_t buf_size, uint8_t* buffer) {
   db0ac:	b570      	push	{r4, r5, r6, lr}
   db0ae:	4604      	mov	r4, r0
   db0b0:	4616      	mov	r6, r2
   db0b2:	460d      	mov	r5, r1
    releaseBuffer();
   db0b4:	f7ff ffe8 	bl	db088 <_ZN3UDP13releaseBufferEv>
    _buffer_size = 0;
   db0b8:	2300      	movs	r3, #0
    _buffer = buffer;
   db0ba:	63e6      	str	r6, [r4, #60]	; 0x3c
    _buffer_size = 0;
   db0bc:	6423      	str	r3, [r4, #64]	; 0x40
    if (!_buffer && buf_size) {         // requested allocation
   db0be:	b12e      	cbz	r6, db0cc <_ZN3UDP9setBufferEjPh+0x20>
        _buffer_size = buf_size;
   db0c0:	6425      	str	r5, [r4, #64]	; 0x40
    return _buffer_size;
   db0c2:	6c20      	ldr	r0, [r4, #64]	; 0x40
}
   db0c4:	3800      	subs	r0, #0
   db0c6:	bf18      	it	ne
   db0c8:	2001      	movne	r0, #1
   db0ca:	bd70      	pop	{r4, r5, r6, pc}
    if (!_buffer && buf_size) {         // requested allocation
   db0cc:	2d00      	cmp	r5, #0
   db0ce:	d0f8      	beq.n	db0c2 <_ZN3UDP9setBufferEjPh+0x16>
        _buffer = new uint8_t[buf_size];
   db0d0:	4628      	mov	r0, r5
   db0d2:	f7f8 ffe2 	bl	d409a <_Znaj>
        _buffer_allocated = true;
   db0d6:	2301      	movs	r3, #1
        _buffer = new uint8_t[buf_size];
   db0d8:	63e0      	str	r0, [r4, #60]	; 0x3c
        _buffer_allocated = true;
   db0da:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    if (_buffer) {
   db0de:	2800      	cmp	r0, #0
   db0e0:	d0ef      	beq.n	db0c2 <_ZN3UDP9setBufferEjPh+0x16>
   db0e2:	e7ed      	b.n	db0c0 <_ZN3UDP9setBufferEjPh+0x14>

000db0e4 <_ZN3UDP11beginPacketE9IPAddresst>:
int UDP::beginPacket(IPAddress ip, uint16_t port) {
   db0e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   db0e6:	4617      	mov	r7, r2
    if (!_buffer && _buffer_size) {
   db0e8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
int UDP::beginPacket(IPAddress ip, uint16_t port) {
   db0ea:	4605      	mov	r5, r0
   db0ec:	460c      	mov	r4, r1
    if (!_buffer && _buffer_size) {
   db0ee:	b91a      	cbnz	r2, db0f8 <_ZN3UDP11beginPacketE9IPAddresst+0x14>
   db0f0:	6c01      	ldr	r1, [r0, #64]	; 0x40
   db0f2:	b109      	cbz	r1, db0f8 <_ZN3UDP11beginPacketE9IPAddresst+0x14>
        setBuffer(_buffer_size);
   db0f4:	f7ff ffda 	bl	db0ac <_ZN3UDP9setBufferEjPh>
   db0f8:	3404      	adds	r4, #4
   db0fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   db0fc:	f105 0620 	add.w	r6, r5, #32
   db100:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   db102:	6823      	ldr	r3, [r4, #0]
   db104:	7033      	strb	r3, [r6, #0]
    _offset = 0;
   db106:	2300      	movs	r3, #0
}
   db108:	6c28      	ldr	r0, [r5, #64]	; 0x40
    _remotePort = port;
   db10a:	86af      	strh	r7, [r5, #52]	; 0x34
    _offset = 0;
   db10c:	86eb      	strh	r3, [r5, #54]	; 0x36
    _total = 0;
   db10e:	872b      	strh	r3, [r5, #56]	; 0x38
}
   db110:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000db112 <_ZN3UDP11parsePacketEm>:
int UDP::parsePacket(system_tick_t timeout) {
   db112:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (!_buffer && _buffer_size) {
   db114:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
int UDP::parsePacket(system_tick_t timeout) {
   db116:	4604      	mov	r4, r0
   db118:	460b      	mov	r3, r1
    if (!_buffer && _buffer_size) {
   db11a:	b92a      	cbnz	r2, db128 <_ZN3UDP11parsePacketEm+0x16>
   db11c:	6c01      	ldr	r1, [r0, #64]	; 0x40
   db11e:	b119      	cbz	r1, db128 <_ZN3UDP11parsePacketEm+0x16>
   db120:	9301      	str	r3, [sp, #4]
        setBuffer(_buffer_size);
   db122:	f7ff ffc3 	bl	db0ac <_ZN3UDP9setBufferEjPh>
   db126:	9b01      	ldr	r3, [sp, #4]
    if (_buffer && _buffer_size) {
   db128:	6be1      	ldr	r1, [r4, #60]	; 0x3c
    _offset = 0;
   db12a:	2200      	movs	r2, #0
   db12c:	86e2      	strh	r2, [r4, #54]	; 0x36
    _total = 0;
   db12e:	8722      	strh	r2, [r4, #56]	; 0x38
    if (_buffer && _buffer_size) {
   db130:	b141      	cbz	r1, db144 <_ZN3UDP11parsePacketEm+0x32>
   db132:	6c22      	ldr	r2, [r4, #64]	; 0x40
   db134:	b132      	cbz	r2, db144 <_ZN3UDP11parsePacketEm+0x32>
        int result = receivePacket(_buffer, _buffer_size, timeout);
   db136:	6820      	ldr	r0, [r4, #0]
   db138:	6b05      	ldr	r5, [r0, #48]	; 0x30
   db13a:	4620      	mov	r0, r4
   db13c:	47a8      	blx	r5
        if (result > 0) {
   db13e:	2800      	cmp	r0, #0
            _total = result;
   db140:	bfc8      	it	gt
   db142:	8720      	strhgt	r0, [r4, #56]	; 0x38
    return available();
   db144:	6823      	ldr	r3, [r4, #0]
   db146:	691b      	ldr	r3, [r3, #16]
   db148:	4620      	mov	r0, r4
}
   db14a:	b003      	add	sp, #12
   db14c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return available();
   db150:	4718      	bx	r3
	...

000db154 <_ZN3UDPD1Ev>:
    virtual ~UDP() { stop(); releaseBuffer(); }
   db154:	b510      	push	{r4, lr}
   db156:	4b07      	ldr	r3, [pc, #28]	; (db174 <_ZN3UDPD1Ev+0x20>)
   db158:	f103 0208 	add.w	r2, r3, #8
   db15c:	336c      	adds	r3, #108	; 0x6c
   db15e:	4604      	mov	r4, r0
   db160:	6002      	str	r2, [r0, #0]
   db162:	6103      	str	r3, [r0, #16]
   db164:	f7ff fdca 	bl	dacfc <_ZN3UDP4stopEv>
   db168:	4620      	mov	r0, r4
   db16a:	f7ff ff8d 	bl	db088 <_ZN3UDP13releaseBufferEv>
   db16e:	4620      	mov	r0, r4
   db170:	bd10      	pop	{r4, pc}
   db172:	bf00      	nop
   db174:	000df8b8 	.word	0x000df8b8

000db178 <_ZN3UDPD0Ev>:
   db178:	b510      	push	{r4, lr}
   db17a:	4604      	mov	r4, r0
   db17c:	f7ff ffea 	bl	db154 <_ZN3UDPD1Ev>
   db180:	4620      	mov	r0, r4
   db182:	214c      	movs	r1, #76	; 0x4c
   db184:	f000 fb12 	bl	db7ac <_ZdlPvj>
   db188:	4620      	mov	r0, r4
   db18a:	bd10      	pop	{r4, pc}

000db18c <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   db18c:	4770      	bx	lr

000db18e <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   db18e:	7441      	strb	r1, [r0, #17]
}
   db190:	4770      	bx	lr

000db192 <__tcf_0>:
    serial1_rx_buffer = new hal_usart_ring_buffer_t();
  }
  if (!serial1_tx_buffer) {
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
   db192:	4770      	bx	lr

000db194 <_ZN11USARTSerial17availableForWriteEv>:
{
   db194:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   db196:	7c00      	ldrb	r0, [r0, #16]
   db198:	f7fc fb3e 	bl	d7818 <hal_usart_available_data_for_write>
}
   db19c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   db1a0:	bd08      	pop	{r3, pc}

000db1a2 <_ZN11USARTSerial9availableEv>:
{
   db1a2:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   db1a4:	7c00      	ldrb	r0, [r0, #16]
   db1a6:	f7fc fb0f 	bl	d77c8 <hal_usart_available>
}
   db1aa:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   db1ae:	bd08      	pop	{r3, pc}

000db1b0 <_ZN11USARTSerial4peekEv>:
{
   db1b0:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   db1b2:	7c00      	ldrb	r0, [r0, #16]
   db1b4:	f7fc fb18 	bl	d77e8 <hal_usart_peek>
}
   db1b8:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   db1bc:	bd08      	pop	{r3, pc}

000db1be <_ZN11USARTSerial4readEv>:
{
   db1be:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   db1c0:	7c00      	ldrb	r0, [r0, #16]
   db1c2:	f7fc fb09 	bl	d77d8 <hal_usart_read>
}
   db1c6:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   db1ca:	bd08      	pop	{r3, pc}

000db1cc <_ZN11USARTSerial5flushEv>:
  hal_usart_flush(_serial);
   db1cc:	7c00      	ldrb	r0, [r0, #16]
   db1ce:	f7fc bb13 	b.w	d77f8 <hal_usart_flush>

000db1d2 <_ZN11USARTSerial5writeEh>:
{
   db1d2:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   db1d4:	7c45      	ldrb	r5, [r0, #17]
{
   db1d6:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   db1d8:	b12d      	cbz	r5, db1e6 <_ZN11USARTSerial5writeEh+0x14>
	  return hal_usart_write(_serial, c);
   db1da:	7c20      	ldrb	r0, [r4, #16]
}
   db1dc:	b003      	add	sp, #12
   db1de:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   db1e2:	f7fc bae9 	b.w	d77b8 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   db1e6:	7c00      	ldrb	r0, [r0, #16]
   db1e8:	9101      	str	r1, [sp, #4]
   db1ea:	f7fc fb15 	bl	d7818 <hal_usart_available_data_for_write>
   db1ee:	2800      	cmp	r0, #0
   db1f0:	9901      	ldr	r1, [sp, #4]
   db1f2:	dcf2      	bgt.n	db1da <_ZN11USARTSerial5writeEh+0x8>
}
   db1f4:	4628      	mov	r0, r5
   db1f6:	b003      	add	sp, #12
   db1f8:	bd30      	pop	{r4, r5, pc}

000db1fa <_ZN11USARTSerialD0Ev>:
   db1fa:	b510      	push	{r4, lr}
   db1fc:	2114      	movs	r1, #20
   db1fe:	4604      	mov	r4, r0
   db200:	f000 fad4 	bl	db7ac <_ZdlPvj>
   db204:	4620      	mov	r0, r4
   db206:	bd10      	pop	{r4, pc}

000db208 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   db208:	b510      	push	{r4, lr}
   db20a:	f04f 0c00 	mov.w	ip, #0
   db20e:	4604      	mov	r4, r0
   db210:	4608      	mov	r0, r1
   db212:	4611      	mov	r1, r2
   db214:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   db218:	e9c4 c201 	strd	ip, r2, [r4, #4]
   db21c:	4a04      	ldr	r2, [pc, #16]	; (db230 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   db21e:	6022      	str	r2, [r4, #0]
  _blocking = true;
   db220:	2201      	movs	r2, #1
  _serial = serial;
   db222:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   db224:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   db226:	461a      	mov	r2, r3
   db228:	f7fc fab6 	bl	d7798 <hal_usart_init>
}
   db22c:	4620      	mov	r0, r4
   db22e:	bd10      	pop	{r4, pc}
   db230:	000df930 	.word	0x000df930

000db234 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   db234:	7c00      	ldrb	r0, [r0, #16]
   db236:	2300      	movs	r3, #0
   db238:	f7fc baf6 	b.w	d7828 <hal_usart_begin_config>

000db23c <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   db23c:	2200      	movs	r2, #0
   db23e:	f7ff bff9 	b.w	db234 <_ZN11USARTSerial5beginEmm>

000db242 <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
   db242:	7c00      	ldrb	r0, [r0, #16]
   db244:	f7fc bab0 	b.w	d77a8 <hal_usart_end>

000db248 <_Z22__fetch_global_Serial1v>:
{
   db248:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if (!serial1_rx_buffer) {
   db24a:	4c1a      	ldr	r4, [pc, #104]	; (db2b4 <_Z22__fetch_global_Serial1v+0x6c>)
   db24c:	6826      	ldr	r6, [r4, #0]
   db24e:	b94e      	cbnz	r6, db264 <_Z22__fetch_global_Serial1v+0x1c>
    serial1_rx_buffer = new hal_usart_ring_buffer_t();
   db250:	2084      	movs	r0, #132	; 0x84
   db252:	f7f8 ff20 	bl	d4096 <_Znwj>
   db256:	4605      	mov	r5, r0
   db258:	b118      	cbz	r0, db262 <_Z22__fetch_global_Serial1v+0x1a>
   db25a:	2284      	movs	r2, #132	; 0x84
   db25c:	4631      	mov	r1, r6
   db25e:	f001 fb71 	bl	dc944 <memset>
   db262:	6025      	str	r5, [r4, #0]
  if (!serial1_tx_buffer) {
   db264:	4d14      	ldr	r5, [pc, #80]	; (db2b8 <_Z22__fetch_global_Serial1v+0x70>)
   db266:	682f      	ldr	r7, [r5, #0]
   db268:	b94f      	cbnz	r7, db27e <_Z22__fetch_global_Serial1v+0x36>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
   db26a:	2084      	movs	r0, #132	; 0x84
   db26c:	f7f8 ff13 	bl	d4096 <_Znwj>
   db270:	4606      	mov	r6, r0
   db272:	b118      	cbz	r0, db27c <_Z22__fetch_global_Serial1v+0x34>
   db274:	2284      	movs	r2, #132	; 0x84
   db276:	4639      	mov	r1, r7
   db278:	f001 fb64 	bl	dc944 <memset>
   db27c:	602e      	str	r6, [r5, #0]
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
   db27e:	4e0f      	ldr	r6, [pc, #60]	; (db2bc <_Z22__fetch_global_Serial1v+0x74>)
   db280:	7831      	ldrb	r1, [r6, #0]
   db282:	f3bf 8f5b 	dmb	ish
   db286:	f011 0101 	ands.w	r1, r1, #1
   db28a:	d110      	bne.n	db2ae <_Z22__fetch_global_Serial1v+0x66>
   db28c:	4630      	mov	r0, r6
   db28e:	9101      	str	r1, [sp, #4]
   db290:	f7f8 ff12 	bl	d40b8 <__cxa_guard_acquire>
   db294:	9901      	ldr	r1, [sp, #4]
   db296:	b150      	cbz	r0, db2ae <_Z22__fetch_global_Serial1v+0x66>
   db298:	682b      	ldr	r3, [r5, #0]
   db29a:	6822      	ldr	r2, [r4, #0]
   db29c:	4808      	ldr	r0, [pc, #32]	; (db2c0 <_Z22__fetch_global_Serial1v+0x78>)
   db29e:	f7ff ffb3 	bl	db208 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   db2a2:	4630      	mov	r0, r6
   db2a4:	f7f8 ff0d 	bl	d40c2 <__cxa_guard_release>
   db2a8:	4806      	ldr	r0, [pc, #24]	; (db2c4 <_Z22__fetch_global_Serial1v+0x7c>)
   db2aa:	f001 fb07 	bl	dc8bc <atexit>
#endif
	return serial1;
}
   db2ae:	4804      	ldr	r0, [pc, #16]	; (db2c0 <_Z22__fetch_global_Serial1v+0x78>)
   db2b0:	b003      	add	sp, #12
   db2b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   db2b4:	2003e6dc 	.word	0x2003e6dc
   db2b8:	2003e6e0 	.word	0x2003e6e0
   db2bc:	2003e6d8 	.word	0x2003e6d8
   db2c0:	2003e6e4 	.word	0x2003e6e4
   db2c4:	000db193 	.word	0x000db193

000db2c8 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   db2c8:	7441      	strb	r1, [r0, #17]
}
   db2ca:	4770      	bx	lr

000db2cc <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   db2cc:	4770      	bx	lr

000db2ce <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   db2ce:	4770      	bx	lr

000db2d0 <_ZN9USBSerial4readEv>:
{
   db2d0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   db2d2:	2100      	movs	r1, #0
   db2d4:	7c00      	ldrb	r0, [r0, #16]
   db2d6:	f7fc fad7 	bl	d7888 <HAL_USB_USART_Receive_Data>
}
   db2da:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   db2de:	bd08      	pop	{r3, pc}

000db2e0 <_ZN9USBSerial4peekEv>:
{
   db2e0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   db2e2:	2101      	movs	r1, #1
   db2e4:	7c00      	ldrb	r0, [r0, #16]
   db2e6:	f7fc facf 	bl	d7888 <HAL_USB_USART_Receive_Data>
}
   db2ea:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   db2ee:	bd08      	pop	{r3, pc}

000db2f0 <_ZN9USBSerial17availableForWriteEv>:
{
   db2f0:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   db2f2:	7c00      	ldrb	r0, [r0, #16]
   db2f4:	f7fc fac0 	bl	d7878 <HAL_USB_USART_Available_Data_For_Write>
}
   db2f8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   db2fc:	bd08      	pop	{r3, pc}

000db2fe <_ZN9USBSerial9availableEv>:
{
   db2fe:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   db300:	7c00      	ldrb	r0, [r0, #16]
   db302:	f7fc fab1 	bl	d7868 <HAL_USB_USART_Available_Data>
}
   db306:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   db30a:	bd08      	pop	{r3, pc}

000db30c <_ZN9USBSerial5writeEh>:
{
   db30c:	b513      	push	{r0, r1, r4, lr}
   db30e:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   db310:	7c00      	ldrb	r0, [r0, #16]
{
   db312:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   db314:	f7fc fab0 	bl	d7878 <HAL_USB_USART_Available_Data_For_Write>
   db318:	2800      	cmp	r0, #0
   db31a:	9901      	ldr	r1, [sp, #4]
   db31c:	dc01      	bgt.n	db322 <_ZN9USBSerial5writeEh+0x16>
   db31e:	7c60      	ldrb	r0, [r4, #17]
   db320:	b120      	cbz	r0, db32c <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   db322:	7c20      	ldrb	r0, [r4, #16]
   db324:	f7fc fab8 	bl	d7898 <HAL_USB_USART_Send_Data>
   db328:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   db32c:	b002      	add	sp, #8
   db32e:	bd10      	pop	{r4, pc}

000db330 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   db330:	7c00      	ldrb	r0, [r0, #16]
   db332:	f7fc bab9 	b.w	d78a8 <HAL_USB_USART_Flush_Data>

000db336 <_ZN9USBSerialD0Ev>:
   db336:	b510      	push	{r4, lr}
   db338:	2114      	movs	r1, #20
   db33a:	4604      	mov	r4, r0
   db33c:	f000 fa36 	bl	db7ac <_ZdlPvj>
   db340:	4620      	mov	r0, r4
   db342:	bd10      	pop	{r4, pc}

000db344 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   db344:	b510      	push	{r4, lr}
   db346:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   db34a:	4604      	mov	r4, r0
   db34c:	4608      	mov	r0, r1
   db34e:	2100      	movs	r1, #0
   db350:	e9c4 1301 	strd	r1, r3, [r4, #4]
   db354:	4b04      	ldr	r3, [pc, #16]	; (db368 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   db356:	6023      	str	r3, [r4, #0]
  _blocking = true;
   db358:	2301      	movs	r3, #1
  _serial = serial;
   db35a:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   db35c:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   db35e:	4611      	mov	r1, r2
   db360:	f7fc fa6a 	bl	d7838 <HAL_USB_USART_Init>
}
   db364:	4620      	mov	r0, r4
   db366:	bd10      	pop	{r4, pc}
   db368:	000df960 	.word	0x000df960

000db36c <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   db36c:	7c00      	ldrb	r0, [r0, #16]
   db36e:	2200      	movs	r2, #0
   db370:	f7fc ba6a 	b.w	d7848 <HAL_USB_USART_Begin>

000db374 <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
   db374:	7c00      	ldrb	r0, [r0, #16]
   db376:	f7fc ba6f 	b.w	d7858 <HAL_USB_USART_End>

000db37a <_Z19acquireSerialBufferv>:
{
   db37a:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   db37c:	2214      	movs	r2, #20
{
   db37e:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   db380:	2100      	movs	r1, #0
   db382:	f001 fadf 	bl	dc944 <memset>
}
   db386:	4620      	mov	r0, r4
   db388:	bd10      	pop	{r4, pc}
	...

000db38c <_Z16_fetch_usbserialv>:
{
   db38c:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   db38e:	4c0f      	ldr	r4, [pc, #60]	; (db3cc <_Z16_fetch_usbserialv+0x40>)
{
   db390:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   db392:	a803      	add	r0, sp, #12
   db394:	f7ff fff1 	bl	db37a <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   db398:	7821      	ldrb	r1, [r4, #0]
   db39a:	f3bf 8f5b 	dmb	ish
   db39e:	f011 0101 	ands.w	r1, r1, #1
   db3a2:	d10f      	bne.n	db3c4 <_Z16_fetch_usbserialv+0x38>
   db3a4:	4620      	mov	r0, r4
   db3a6:	9101      	str	r1, [sp, #4]
   db3a8:	f7f8 fe86 	bl	d40b8 <__cxa_guard_acquire>
   db3ac:	9901      	ldr	r1, [sp, #4]
   db3ae:	b148      	cbz	r0, db3c4 <_Z16_fetch_usbserialv+0x38>
   db3b0:	aa03      	add	r2, sp, #12
   db3b2:	4807      	ldr	r0, [pc, #28]	; (db3d0 <_Z16_fetch_usbserialv+0x44>)
   db3b4:	f7ff ffc6 	bl	db344 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   db3b8:	4620      	mov	r0, r4
   db3ba:	f7f8 fe82 	bl	d40c2 <__cxa_guard_release>
   db3be:	4805      	ldr	r0, [pc, #20]	; (db3d4 <_Z16_fetch_usbserialv+0x48>)
   db3c0:	f001 fa7c 	bl	dc8bc <atexit>
	return _usbserial;
}
   db3c4:	4802      	ldr	r0, [pc, #8]	; (db3d0 <_Z16_fetch_usbserialv+0x44>)
   db3c6:	b008      	add	sp, #32
   db3c8:	bd10      	pop	{r4, pc}
   db3ca:	bf00      	nop
   db3cc:	2003e6f8 	.word	0x2003e6f8
   db3d0:	2003e6fc 	.word	0x2003e6fc
   db3d4:	000db2cd 	.word	0x000db2cd

000db3d8 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   db3d8:	b510      	push	{r4, lr}
   db3da:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   db3dc:	f001 fb25 	bl	dca2a <strlen>
   db3e0:	3801      	subs	r0, #1
   db3e2:	1823      	adds	r3, r4, r0
   db3e4:	4620      	mov	r0, r4
	while(i<j){
   db3e6:	4283      	cmp	r3, r0
   db3e8:	d906      	bls.n	db3f8 <_Z11str_reversePc+0x20>
		c = *i;
   db3ea:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   db3ec:	7819      	ldrb	r1, [r3, #0]
   db3ee:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   db3f2:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   db3f6:	e7f6      	b.n	db3e6 <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   db3f8:	bd10      	pop	{r4, pc}

000db3fa <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   db3fa:	b570      	push	{r4, r5, r6, lr}
   db3fc:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   db3fe:	1e91      	subs	r1, r2, #2
   db400:	2922      	cmp	r1, #34	; 0x22
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   db402:	4605      	mov	r5, r0
	if(radix<2 || radix>36){
   db404:	d822      	bhi.n	db44c <ultoa+0x52>
		return NULL;
	}
	char* ptr=buffer;
   db406:	4620      	mov	r0, r4

	div_t result;
	while(a){
   db408:	b16d      	cbz	r5, db426 <ultoa+0x2c>
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
   db40a:	fbb5 f6f2 	udiv	r6, r5, r2
            result.rem = a%radix;
   db40e:	fb02 5516 	mls	r5, r2, r6, r5
            *ptr = result.rem;
   db412:	b2e9      	uxtb	r1, r5
            if(result.rem<10){
   db414:	2d09      	cmp	r5, #9
                *ptr += '0';
   db416:	bf94      	ite	ls
   db418:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
   db41a:	3157      	addhi	r1, #87	; 0x57
   db41c:	b2c9      	uxtb	r1, r1
   db41e:	f800 1b01 	strb.w	r1, [r0], #1
            }
            ++ptr;
            a = result.quot;
   db422:	4635      	mov	r5, r6
	while(a){
   db424:	e7f0      	b.n	db408 <ultoa+0xe>
   db426:	4602      	mov	r2, r0
	}
        while (ptr < buffer+pad)
   db428:	4423      	add	r3, r4
            *ptr++ = '0';
   db42a:	2130      	movs	r1, #48	; 0x30
        while (ptr < buffer+pad)
   db42c:	4293      	cmp	r3, r2
   db42e:	d902      	bls.n	db436 <ultoa+0x3c>
            *ptr++ = '0';
   db430:	f802 1b01 	strb.w	r1, [r2], #1
        while (ptr < buffer+pad)
   db434:	e7fa      	b.n	db42c <ultoa+0x32>
   db436:	1a1a      	subs	r2, r3, r0
   db438:	4283      	cmp	r3, r0
   db43a:	bf38      	it	cc
   db43c:	2200      	movcc	r2, #0

	*ptr = '\0';
   db43e:	2300      	movs	r3, #0
   db440:	5483      	strb	r3, [r0, r2]
	str_reverse(buffer);
   db442:	4620      	mov	r0, r4
   db444:	f7ff ffc8 	bl	db3d8 <_Z11str_reversePc>
	return buffer;
   db448:	4620      	mov	r0, r4
}
   db44a:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   db44c:	2000      	movs	r0, #0
   db44e:	e7fc      	b.n	db44a <ultoa+0x50>

000db450 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   db450:	4b01      	ldr	r3, [pc, #4]	; (db458 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   db452:	6018      	str	r0, [r3, #0]
    }, nullptr);
   db454:	4770      	bx	lr
   db456:	bf00      	nop
   db458:	2003dec8 	.word	0x2003dec8

000db45c <serialEventRun>:
{
   db45c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   db45e:	4b0b      	ldr	r3, [pc, #44]	; (db48c <serialEventRun+0x30>)
   db460:	b143      	cbz	r3, db474 <serialEventRun+0x18>
   db462:	f7ff ff93 	bl	db38c <_Z16_fetch_usbserialv>
   db466:	6803      	ldr	r3, [r0, #0]
   db468:	691b      	ldr	r3, [r3, #16]
   db46a:	4798      	blx	r3
   db46c:	2800      	cmp	r0, #0
   db46e:	dd01      	ble.n	db474 <serialEventRun+0x18>
        serialEvent();
   db470:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   db474:	4b06      	ldr	r3, [pc, #24]	; (db490 <serialEventRun+0x34>)
   db476:	b143      	cbz	r3, db48a <serialEventRun+0x2e>
   db478:	f7ff fee6 	bl	db248 <_Z22__fetch_global_Serial1v>
   db47c:	6803      	ldr	r3, [r0, #0]
   db47e:	691b      	ldr	r3, [r3, #16]
   db480:	4798      	blx	r3
   db482:	2800      	cmp	r0, #0
   db484:	dd01      	ble.n	db48a <serialEventRun+0x2e>
        serialEvent1();
   db486:	f3af 8000 	nop.w
}
   db48a:	bd08      	pop	{r3, pc}
	...

000db494 <_post_loop>:
{
   db494:	b508      	push	{r3, lr}
	serialEventRun();
   db496:	f7ff ffe1 	bl	db45c <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   db49a:	f7fc f82d 	bl	d74f8 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   db49e:	4b01      	ldr	r3, [pc, #4]	; (db4a4 <_post_loop+0x10>)
   db4a0:	6018      	str	r0, [r3, #0]
}
   db4a2:	bd08      	pop	{r3, pc}
   db4a4:	2003e724 	.word	0x2003e724

000db4a8 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   db4a8:	4805      	ldr	r0, [pc, #20]	; (db4c0 <_Z33system_initialize_user_backup_ramv+0x18>)
   db4aa:	4a06      	ldr	r2, [pc, #24]	; (db4c4 <_Z33system_initialize_user_backup_ramv+0x1c>)
   db4ac:	4906      	ldr	r1, [pc, #24]	; (db4c8 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   db4ae:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   db4b0:	1a12      	subs	r2, r2, r0
   db4b2:	f001 fa1f 	bl	dc8f4 <memcpy>
    __backup_sram_signature = signature;
   db4b6:	4b05      	ldr	r3, [pc, #20]	; (db4cc <_Z33system_initialize_user_backup_ramv+0x24>)
   db4b8:	4a05      	ldr	r2, [pc, #20]	; (db4d0 <_Z33system_initialize_user_backup_ramv+0x28>)
   db4ba:	601a      	str	r2, [r3, #0]
}
   db4bc:	bd08      	pop	{r3, pc}
   db4be:	bf00      	nop
   db4c0:	2003f400 	.word	0x2003f400
   db4c4:	2003f404 	.word	0x2003f404
   db4c8:	000dfd98 	.word	0x000dfd98
   db4cc:	2003f400 	.word	0x2003f400
   db4d0:	9a271c1e 	.word	0x9a271c1e

000db4d4 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   db4d4:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   db4d6:	2300      	movs	r3, #0
   db4d8:	9300      	str	r3, [sp, #0]
   db4da:	461a      	mov	r2, r3
   db4dc:	f06f 0177 	mvn.w	r1, #119	; 0x77
   db4e0:	f7fc fa66 	bl	d79b0 <system_ctrl_set_result>
}
   db4e4:	b003      	add	sp, #12
   db4e6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000db4ec <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   db4ec:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   db4ee:	8843      	ldrh	r3, [r0, #2]
   db4f0:	2b0a      	cmp	r3, #10
   db4f2:	d008      	beq.n	db506 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   db4f4:	2b50      	cmp	r3, #80	; 0x50
   db4f6:	d10b      	bne.n	db510 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   db4f8:	4b09      	ldr	r3, [pc, #36]	; (db520 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   db4fa:	681b      	ldr	r3, [r3, #0]
   db4fc:	b14b      	cbz	r3, db512 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   db4fe:	b003      	add	sp, #12
   db500:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   db504:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   db506:	f7ff ffe5 	bl	db4d4 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   db50a:	b003      	add	sp, #12
   db50c:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   db510:	2300      	movs	r3, #0
   db512:	9300      	str	r3, [sp, #0]
   db514:	461a      	mov	r2, r3
   db516:	f06f 0177 	mvn.w	r1, #119	; 0x77
   db51a:	f7fc fa49 	bl	d79b0 <system_ctrl_set_result>
}
   db51e:	e7f4      	b.n	db50a <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   db520:	2003e714 	.word	0x2003e714

000db524 <module_user_init_hook>:
{
   db524:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   db526:	4812      	ldr	r0, [pc, #72]	; (db570 <module_user_init_hook+0x4c>)
   db528:	2100      	movs	r1, #0
   db52a:	f7fc fb57 	bl	d7bdc <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   db52e:	4b11      	ldr	r3, [pc, #68]	; (db574 <module_user_init_hook+0x50>)
   db530:	681a      	ldr	r2, [r3, #0]
   db532:	4b11      	ldr	r3, [pc, #68]	; (db578 <module_user_init_hook+0x54>)
   db534:	429a      	cmp	r2, r3
   db536:	4b11      	ldr	r3, [pc, #68]	; (db57c <module_user_init_hook+0x58>)
   db538:	bf0c      	ite	eq
   db53a:	2201      	moveq	r2, #1
   db53c:	2200      	movne	r2, #0
   db53e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   db540:	d001      	beq.n	db546 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   db542:	f7ff ffb1 	bl	db4a8 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   db546:	f7fb ffc7 	bl	d74d8 <HAL_RNG_GetRandomNumber>
   db54a:	4604      	mov	r4, r0
    srand(seed);
   db54c:	f001 fa02 	bl	dc954 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   db550:	4b0b      	ldr	r3, [pc, #44]	; (db580 <module_user_init_hook+0x5c>)
   db552:	b113      	cbz	r3, db55a <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   db554:	4620      	mov	r0, r4
   db556:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   db55a:	2100      	movs	r1, #0
   db55c:	4808      	ldr	r0, [pc, #32]	; (db580 <module_user_init_hook+0x5c>)
   db55e:	f7fc fa85 	bl	d7a6c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   db562:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   db566:	4807      	ldr	r0, [pc, #28]	; (db584 <module_user_init_hook+0x60>)
   db568:	2100      	movs	r1, #0
   db56a:	f7fc ba17 	b.w	d799c <system_ctrl_set_app_request_handler>
   db56e:	bf00      	nop
   db570:	000db451 	.word	0x000db451
   db574:	2003f400 	.word	0x2003f400
   db578:	9a271c1e 	.word	0x9a271c1e
   db57c:	2003e710 	.word	0x2003e710
   db580:	00000000 	.word	0x00000000
   db584:	000db4ed 	.word	0x000db4ed

000db588 <spark_protocol_instance>:
extern "C" {
#endif

DYNALIB_BEGIN(communication)

DYNALIB_FN(0, communication, spark_protocol_instance, ProtocolFacade*(void))
   db588:	b508      	push	{r3, lr}
   db58a:	4b02      	ldr	r3, [pc, #8]	; (db594 <spark_protocol_instance+0xc>)
   db58c:	681b      	ldr	r3, [r3, #0]
   db58e:	681b      	ldr	r3, [r3, #0]
   db590:	9301      	str	r3, [sp, #4]
   db592:	bd08      	pop	{r3, pc}
   db594:	0003025c 	.word	0x0003025c

000db598 <spark_protocol_set_product_id>:
DYNALIB_FN(1, communication, spark_protocol_set_product_id, void(ProtocolFacade*, product_id_t, unsigned, void*))
   db598:	b508      	push	{r3, lr}
   db59a:	4b02      	ldr	r3, [pc, #8]	; (db5a4 <spark_protocol_set_product_id+0xc>)
   db59c:	681b      	ldr	r3, [r3, #0]
   db59e:	685b      	ldr	r3, [r3, #4]
   db5a0:	9301      	str	r3, [sp, #4]
   db5a2:	bd08      	pop	{r3, pc}
   db5a4:	0003025c 	.word	0x0003025c

000db5a8 <spark_protocol_set_product_firmware_version>:
DYNALIB_FN(2, communication, spark_protocol_set_product_firmware_version, void(ProtocolFacade*, product_firmware_version_t, unsigned, void*))
   db5a8:	b508      	push	{r3, lr}
   db5aa:	4b02      	ldr	r3, [pc, #8]	; (db5b4 <spark_protocol_set_product_firmware_version+0xc>)
   db5ac:	681b      	ldr	r3, [r3, #0]
   db5ae:	689b      	ldr	r3, [r3, #8]
   db5b0:	9301      	str	r3, [sp, #4]
   db5b2:	bd08      	pop	{r3, pc}
   db5b4:	0003025c 	.word	0x0003025c

000db5b8 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   db5b8:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   db5ba:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   db5bc:	d902      	bls.n	db5c4 <pinAvailable+0xc>
    return false;
   db5be:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   db5c0:	b002      	add	sp, #8
   db5c2:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   db5c4:	f1a0 030b 	sub.w	r3, r0, #11
   db5c8:	2b02      	cmp	r3, #2
   db5ca:	d81a      	bhi.n	db602 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   db5cc:	4c17      	ldr	r4, [pc, #92]	; (db62c <pinAvailable+0x74>)
   db5ce:	7821      	ldrb	r1, [r4, #0]
   db5d0:	f3bf 8f5b 	dmb	ish
   db5d4:	f011 0101 	ands.w	r1, r1, #1
   db5d8:	d10b      	bne.n	db5f2 <pinAvailable+0x3a>
   db5da:	4620      	mov	r0, r4
   db5dc:	9101      	str	r1, [sp, #4]
   db5de:	f7f8 fd6b 	bl	d40b8 <__cxa_guard_acquire>
   db5e2:	9901      	ldr	r1, [sp, #4]
   db5e4:	b128      	cbz	r0, db5f2 <pinAvailable+0x3a>
   db5e6:	4812      	ldr	r0, [pc, #72]	; (db630 <pinAvailable+0x78>)
   db5e8:	f7fe fc32 	bl	d9e50 <_ZN8SPIClassC1E19hal_spi_interface_t>
   db5ec:	4620      	mov	r0, r4
   db5ee:	f7f8 fd68 	bl	d40c2 <__cxa_guard_release>
   db5f2:	4b0f      	ldr	r3, [pc, #60]	; (db630 <pinAvailable+0x78>)
   db5f4:	7818      	ldrb	r0, [r3, #0]
   db5f6:	f7fc f8c7 	bl	d7788 <hal_spi_is_enabled>
   db5fa:	2800      	cmp	r0, #0
   db5fc:	d1df      	bne.n	db5be <pinAvailable+0x6>
  return true; // 'pin' is available
   db5fe:	2001      	movs	r0, #1
   db600:	e7de      	b.n	db5c0 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   db602:	2801      	cmp	r0, #1
   db604:	d809      	bhi.n	db61a <pinAvailable+0x62>
   db606:	f000 f889 	bl	db71c <_Z19__fetch_global_Wirev>
   db60a:	2100      	movs	r1, #0
   db60c:	7c00      	ldrb	r0, [r0, #16]
   db60e:	f7fc f80b 	bl	d7628 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   db612:	f080 0001 	eor.w	r0, r0, #1
   db616:	b2c0      	uxtb	r0, r0
   db618:	e7d2      	b.n	db5c0 <pinAvailable+0x8>
   db61a:	3809      	subs	r0, #9
   db61c:	2801      	cmp	r0, #1
   db61e:	d8ee      	bhi.n	db5fe <pinAvailable+0x46>
   db620:	f7ff fe12 	bl	db248 <_Z22__fetch_global_Serial1v>
   db624:	7c00      	ldrb	r0, [r0, #16]
   db626:	f7fc f8ef 	bl	d7808 <hal_usart_is_enabled>
   db62a:	e7f2      	b.n	db612 <pinAvailable+0x5a>
   db62c:	2003e718 	.word	0x2003e718
   db630:	2003e71c 	.word	0x2003e71c

000db634 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   db634:	2823      	cmp	r0, #35	; 0x23
{
   db636:	b538      	push	{r3, r4, r5, lr}
   db638:	4604      	mov	r4, r0
   db63a:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   db63c:	d80a      	bhi.n	db654 <pinMode+0x20>
   db63e:	29ff      	cmp	r1, #255	; 0xff
   db640:	d008      	beq.n	db654 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   db642:	f7ff ffb9 	bl	db5b8 <pinAvailable>
   db646:	b128      	cbz	r0, db654 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   db648:	4629      	mov	r1, r5
   db64a:	4620      	mov	r0, r4
}
   db64c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   db650:	f7fb bf7a 	b.w	d7548 <HAL_Pin_Mode>
}
   db654:	bd38      	pop	{r3, r4, r5, pc}

000db656 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   db656:	b538      	push	{r3, r4, r5, lr}
   db658:	4604      	mov	r4, r0
   db65a:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   db65c:	f7fb ff7c 	bl	d7558 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   db660:	28ff      	cmp	r0, #255	; 0xff
   db662:	d010      	beq.n	db686 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   db664:	2806      	cmp	r0, #6
   db666:	d804      	bhi.n	db672 <digitalWrite+0x1c>
   db668:	234d      	movs	r3, #77	; 0x4d
   db66a:	fa23 f000 	lsr.w	r0, r3, r0
   db66e:	07c3      	lsls	r3, r0, #31
   db670:	d409      	bmi.n	db686 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   db672:	4620      	mov	r0, r4
   db674:	f7ff ffa0 	bl	db5b8 <pinAvailable>
   db678:	b128      	cbz	r0, db686 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   db67a:	4629      	mov	r1, r5
   db67c:	4620      	mov	r0, r4
}
   db67e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   db682:	f7fb bf71 	b.w	d7568 <HAL_GPIO_Write>
}
   db686:	bd38      	pop	{r3, r4, r5, pc}

000db688 <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   db688:	280d      	cmp	r0, #13
{
   db68a:	b510      	push	{r4, lr}
   db68c:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   db68e:	bf9c      	itt	ls
   db690:	340e      	addls	r4, #14
   db692:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   db694:	4620      	mov	r0, r4
   db696:	f7ff ff8f 	bl	db5b8 <pinAvailable>
   db69a:	b150      	cbz	r0, db6b2 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   db69c:	2103      	movs	r1, #3
   db69e:	4620      	mov	r0, r4
   db6a0:	f7fb ff4a 	bl	d7538 <HAL_Validate_Pin_Function>
   db6a4:	2803      	cmp	r0, #3
   db6a6:	d104      	bne.n	db6b2 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   db6a8:	4620      	mov	r0, r4
}
   db6aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   db6ae:	f7fb bf73 	b.w	d7598 <hal_adc_read>
}
   db6b2:	2000      	movs	r0, #0
   db6b4:	bd10      	pop	{r4, pc}

000db6b6 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   db6b6:	4770      	bx	lr

000db6b8 <__tcf_1>:
   db6b8:	4770      	bx	lr
	...

000db6bc <_Z17acquireWireBufferv>:
{
   db6bc:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   db6be:	2300      	movs	r3, #0
   db6c0:	2520      	movs	r5, #32
   db6c2:	8043      	strh	r3, [r0, #2]
   db6c4:	2314      	movs	r3, #20
{
   db6c6:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   db6c8:	8003      	strh	r3, [r0, #0]
   db6ca:	6085      	str	r5, [r0, #8]
   db6cc:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   db6ce:	4906      	ldr	r1, [pc, #24]	; (db6e8 <_Z17acquireWireBufferv+0x2c>)
   db6d0:	4628      	mov	r0, r5
   db6d2:	f000 f86f 	bl	db7b4 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   db6d6:	4904      	ldr	r1, [pc, #16]	; (db6e8 <_Z17acquireWireBufferv+0x2c>)
	};
   db6d8:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   db6da:	4628      	mov	r0, r5
   db6dc:	f000 f86a 	bl	db7b4 <_ZnajRKSt9nothrow_t>
	};
   db6e0:	60e0      	str	r0, [r4, #12]
}
   db6e2:	4620      	mov	r0, r4
   db6e4:	bd38      	pop	{r3, r4, r5, pc}
   db6e6:	bf00      	nop
   db6e8:	000df988 	.word	0x000df988

000db6ec <_Z18acquireWire1Bufferv>:
   db6ec:	b538      	push	{r3, r4, r5, lr}
   db6ee:	2300      	movs	r3, #0
   db6f0:	2520      	movs	r5, #32
   db6f2:	8043      	strh	r3, [r0, #2]
   db6f4:	2314      	movs	r3, #20
   db6f6:	4604      	mov	r4, r0
   db6f8:	8003      	strh	r3, [r0, #0]
   db6fa:	6085      	str	r5, [r0, #8]
   db6fc:	6105      	str	r5, [r0, #16]
   db6fe:	4906      	ldr	r1, [pc, #24]	; (db718 <_Z18acquireWire1Bufferv+0x2c>)
   db700:	4628      	mov	r0, r5
   db702:	f000 f857 	bl	db7b4 <_ZnajRKSt9nothrow_t>
   db706:	4904      	ldr	r1, [pc, #16]	; (db718 <_Z18acquireWire1Bufferv+0x2c>)
   db708:	6060      	str	r0, [r4, #4]
   db70a:	4628      	mov	r0, r5
   db70c:	f000 f852 	bl	db7b4 <_ZnajRKSt9nothrow_t>
   db710:	60e0      	str	r0, [r4, #12]
   db712:	4620      	mov	r0, r4
   db714:	bd38      	pop	{r3, r4, r5, pc}
   db716:	bf00      	nop
   db718:	000df988 	.word	0x000df988

000db71c <_Z19__fetch_global_Wirev>:
{
   db71c:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   db71e:	4d0e      	ldr	r5, [pc, #56]	; (db758 <_Z19__fetch_global_Wirev+0x3c>)
   db720:	7829      	ldrb	r1, [r5, #0]
   db722:	f3bf 8f5b 	dmb	ish
   db726:	f011 0401 	ands.w	r4, r1, #1
{
   db72a:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   db72c:	d111      	bne.n	db752 <_Z19__fetch_global_Wirev+0x36>
   db72e:	4628      	mov	r0, r5
   db730:	f7f8 fcc2 	bl	d40b8 <__cxa_guard_acquire>
   db734:	b168      	cbz	r0, db752 <_Z19__fetch_global_Wirev+0x36>
   db736:	a801      	add	r0, sp, #4
   db738:	f7ff ffc0 	bl	db6bc <_Z17acquireWireBufferv>
   db73c:	aa01      	add	r2, sp, #4
   db73e:	4621      	mov	r1, r4
   db740:	4806      	ldr	r0, [pc, #24]	; (db75c <_Z19__fetch_global_Wirev+0x40>)
   db742:	f7fc fec1 	bl	d84c8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   db746:	4628      	mov	r0, r5
   db748:	f7f8 fcbb 	bl	d40c2 <__cxa_guard_release>
   db74c:	4804      	ldr	r0, [pc, #16]	; (db760 <_Z19__fetch_global_Wirev+0x44>)
   db74e:	f001 f8b5 	bl	dc8bc <atexit>
	return wire;
}
   db752:	4802      	ldr	r0, [pc, #8]	; (db75c <_Z19__fetch_global_Wirev+0x40>)
   db754:	b007      	add	sp, #28
   db756:	bd30      	pop	{r4, r5, pc}
   db758:	2003e728 	.word	0x2003e728
   db75c:	2003e730 	.word	0x2003e730
   db760:	000db6b7 	.word	0x000db6b7

000db764 <_Z20__fetch_global_Wire1v>:

#if Wiring_Wire1
TwoWire& __fetch_global_Wire1()
{
   db764:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   db766:	4c0e      	ldr	r4, [pc, #56]	; (db7a0 <_Z20__fetch_global_Wire1v+0x3c>)
   db768:	7823      	ldrb	r3, [r4, #0]
   db76a:	f3bf 8f5b 	dmb	ish
   db76e:	07db      	lsls	r3, r3, #31
{
   db770:	b086      	sub	sp, #24
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   db772:	d411      	bmi.n	db798 <_Z20__fetch_global_Wire1v+0x34>
   db774:	4620      	mov	r0, r4
   db776:	f7f8 fc9f 	bl	d40b8 <__cxa_guard_acquire>
   db77a:	b168      	cbz	r0, db798 <_Z20__fetch_global_Wire1v+0x34>
   db77c:	a801      	add	r0, sp, #4
   db77e:	f7ff ffb5 	bl	db6ec <_Z18acquireWire1Bufferv>
   db782:	aa01      	add	r2, sp, #4
   db784:	2101      	movs	r1, #1
   db786:	4807      	ldr	r0, [pc, #28]	; (db7a4 <_Z20__fetch_global_Wire1v+0x40>)
   db788:	f7fc fe9e 	bl	d84c8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   db78c:	4620      	mov	r0, r4
   db78e:	f7f8 fc98 	bl	d40c2 <__cxa_guard_release>
   db792:	4805      	ldr	r0, [pc, #20]	; (db7a8 <_Z20__fetch_global_Wire1v+0x44>)
   db794:	f001 f892 	bl	dc8bc <atexit>
	return wire;
}
   db798:	4802      	ldr	r0, [pc, #8]	; (db7a4 <_Z20__fetch_global_Wire1v+0x40>)
   db79a:	b006      	add	sp, #24
   db79c:	bd10      	pop	{r4, pc}
   db79e:	bf00      	nop
   db7a0:	2003e72c 	.word	0x2003e72c
   db7a4:	2003e744 	.word	0x2003e744
   db7a8:	000db6b9 	.word	0x000db6b9

000db7ac <_ZdlPvj>:
   db7ac:	f7f8 bc77 	b.w	d409e <_ZdlPv>

000db7b0 <_ZnwjRKSt9nothrow_t>:
   db7b0:	f7f8 bc71 	b.w	d4096 <_Znwj>

000db7b4 <_ZnajRKSt9nothrow_t>:
   db7b4:	f7f8 bc71 	b.w	d409a <_Znaj>

000db7b8 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>:
   db7b8:	68c3      	ldr	r3, [r0, #12]
   db7ba:	689a      	ldr	r2, [r3, #8]
   db7bc:	60c2      	str	r2, [r0, #12]
   db7be:	b510      	push	{r4, lr}
   db7c0:	b102      	cbz	r2, db7c4 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0xc>
   db7c2:	6050      	str	r0, [r2, #4]
   db7c4:	6842      	ldr	r2, [r0, #4]
   db7c6:	605a      	str	r2, [r3, #4]
   db7c8:	680c      	ldr	r4, [r1, #0]
   db7ca:	4284      	cmp	r4, r0
   db7cc:	d103      	bne.n	db7d6 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x1e>
   db7ce:	600b      	str	r3, [r1, #0]
   db7d0:	6098      	str	r0, [r3, #8]
   db7d2:	6043      	str	r3, [r0, #4]
   db7d4:	bd10      	pop	{r4, pc}
   db7d6:	6891      	ldr	r1, [r2, #8]
   db7d8:	4281      	cmp	r1, r0
   db7da:	bf0c      	ite	eq
   db7dc:	6093      	streq	r3, [r2, #8]
   db7de:	60d3      	strne	r3, [r2, #12]
   db7e0:	e7f6      	b.n	db7d0 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x18>

000db7e2 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>:
   db7e2:	6883      	ldr	r3, [r0, #8]
   db7e4:	68da      	ldr	r2, [r3, #12]
   db7e6:	6082      	str	r2, [r0, #8]
   db7e8:	b510      	push	{r4, lr}
   db7ea:	b102      	cbz	r2, db7ee <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0xc>
   db7ec:	6050      	str	r0, [r2, #4]
   db7ee:	6842      	ldr	r2, [r0, #4]
   db7f0:	605a      	str	r2, [r3, #4]
   db7f2:	680c      	ldr	r4, [r1, #0]
   db7f4:	4284      	cmp	r4, r0
   db7f6:	d103      	bne.n	db800 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x1e>
   db7f8:	600b      	str	r3, [r1, #0]
   db7fa:	60d8      	str	r0, [r3, #12]
   db7fc:	6043      	str	r3, [r0, #4]
   db7fe:	bd10      	pop	{r4, pc}
   db800:	68d1      	ldr	r1, [r2, #12]
   db802:	4281      	cmp	r1, r0
   db804:	bf0c      	ite	eq
   db806:	60d3      	streq	r3, [r2, #12]
   db808:	6093      	strne	r3, [r2, #8]
   db80a:	e7f6      	b.n	db7fa <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x18>

000db80c <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>:
   db80c:	7803      	ldrb	r3, [r0, #0]
   db80e:	b933      	cbnz	r3, db81e <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
   db810:	6843      	ldr	r3, [r0, #4]
   db812:	685b      	ldr	r3, [r3, #4]
   db814:	4283      	cmp	r3, r0
   db816:	d102      	bne.n	db81e <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
   db818:	68db      	ldr	r3, [r3, #12]
   db81a:	4618      	mov	r0, r3
   db81c:	4770      	bx	lr
   db81e:	6882      	ldr	r2, [r0, #8]
   db820:	b122      	cbz	r2, db82c <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x20>
   db822:	4613      	mov	r3, r2
   db824:	68d2      	ldr	r2, [r2, #12]
   db826:	2a00      	cmp	r2, #0
   db828:	d1fb      	bne.n	db822 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x16>
   db82a:	e7f6      	b.n	db81a <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0xe>
   db82c:	6843      	ldr	r3, [r0, #4]
   db82e:	689a      	ldr	r2, [r3, #8]
   db830:	4282      	cmp	r2, r0
   db832:	d1f2      	bne.n	db81a <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0xe>
   db834:	4618      	mov	r0, r3
   db836:	685b      	ldr	r3, [r3, #4]
   db838:	e7f9      	b.n	db82e <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x22>

000db83a <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>:
   db83a:	68c3      	ldr	r3, [r0, #12]
   db83c:	b123      	cbz	r3, db848 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base+0xe>
   db83e:	4618      	mov	r0, r3
   db840:	689b      	ldr	r3, [r3, #8]
   db842:	2b00      	cmp	r3, #0
   db844:	d1fb      	bne.n	db83e <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base+0x4>
   db846:	4770      	bx	lr
   db848:	6843      	ldr	r3, [r0, #4]
   db84a:	68da      	ldr	r2, [r3, #12]
   db84c:	4282      	cmp	r2, r0
   db84e:	d102      	bne.n	db856 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base+0x1c>
   db850:	4618      	mov	r0, r3
   db852:	685b      	ldr	r3, [r3, #4]
   db854:	e7f9      	b.n	db84a <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base+0x10>
   db856:	68c2      	ldr	r2, [r0, #12]
   db858:	4293      	cmp	r3, r2
   db85a:	bf18      	it	ne
   db85c:	4618      	movne	r0, r3
   db85e:	4770      	bx	lr

000db860 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>:
   db860:	f7ff bfd4 	b.w	db80c <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>

000db864 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>:
   db864:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   db868:	461e      	mov	r6, r3
   db86a:	f103 0804 	add.w	r8, r3, #4
   db86e:	2300      	movs	r3, #0
   db870:	e9c1 3302 	strd	r3, r3, [r1, #8]
   db874:	460c      	mov	r4, r1
   db876:	604a      	str	r2, [r1, #4]
   db878:	700b      	strb	r3, [r1, #0]
   db87a:	b300      	cbz	r0, db8be <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x5a>
   db87c:	4296      	cmp	r6, r2
   db87e:	6091      	str	r1, [r2, #8]
   db880:	d118      	bne.n	db8b4 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x50>
   db882:	6071      	str	r1, [r6, #4]
   db884:	60f4      	str	r4, [r6, #12]
   db886:	2701      	movs	r7, #1
   db888:	f04f 0900 	mov.w	r9, #0
   db88c:	6873      	ldr	r3, [r6, #4]
   db88e:	42a3      	cmp	r3, r4
   db890:	d03f      	beq.n	db912 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xae>
   db892:	6860      	ldr	r0, [r4, #4]
   db894:	7802      	ldrb	r2, [r0, #0]
   db896:	2a00      	cmp	r2, #0
   db898:	d13c      	bne.n	db914 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xb0>
   db89a:	6845      	ldr	r5, [r0, #4]
   db89c:	68ab      	ldr	r3, [r5, #8]
   db89e:	4298      	cmp	r0, r3
   db8a0:	d123      	bne.n	db8ea <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x86>
   db8a2:	68eb      	ldr	r3, [r5, #12]
   db8a4:	b183      	cbz	r3, db8c8 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x64>
   db8a6:	781a      	ldrb	r2, [r3, #0]
   db8a8:	b972      	cbnz	r2, db8c8 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x64>
   db8aa:	7007      	strb	r7, [r0, #0]
   db8ac:	701f      	strb	r7, [r3, #0]
   db8ae:	702a      	strb	r2, [r5, #0]
   db8b0:	462c      	mov	r4, r5
   db8b2:	e7eb      	b.n	db88c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x28>
   db8b4:	68b3      	ldr	r3, [r6, #8]
   db8b6:	4293      	cmp	r3, r2
   db8b8:	d1e5      	bne.n	db886 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
   db8ba:	60b1      	str	r1, [r6, #8]
   db8bc:	e7e3      	b.n	db886 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
   db8be:	60d1      	str	r1, [r2, #12]
   db8c0:	68f3      	ldr	r3, [r6, #12]
   db8c2:	4293      	cmp	r3, r2
   db8c4:	d1df      	bne.n	db886 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
   db8c6:	e7dd      	b.n	db884 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x20>
   db8c8:	68c3      	ldr	r3, [r0, #12]
   db8ca:	42a3      	cmp	r3, r4
   db8cc:	d103      	bne.n	db8d6 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x72>
   db8ce:	4641      	mov	r1, r8
   db8d0:	f7ff ff72 	bl	db7b8 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
   db8d4:	4604      	mov	r4, r0
   db8d6:	6863      	ldr	r3, [r4, #4]
   db8d8:	4641      	mov	r1, r8
   db8da:	701f      	strb	r7, [r3, #0]
   db8dc:	4628      	mov	r0, r5
   db8de:	f885 9000 	strb.w	r9, [r5]
   db8e2:	f7ff ff7e 	bl	db7e2 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
   db8e6:	4625      	mov	r5, r4
   db8e8:	e7e2      	b.n	db8b0 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x4c>
   db8ea:	b113      	cbz	r3, db8f2 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x8e>
   db8ec:	781a      	ldrb	r2, [r3, #0]
   db8ee:	2a00      	cmp	r2, #0
   db8f0:	d0db      	beq.n	db8aa <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x46>
   db8f2:	6883      	ldr	r3, [r0, #8]
   db8f4:	42a3      	cmp	r3, r4
   db8f6:	d103      	bne.n	db900 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x9c>
   db8f8:	4641      	mov	r1, r8
   db8fa:	f7ff ff72 	bl	db7e2 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
   db8fe:	4604      	mov	r4, r0
   db900:	6863      	ldr	r3, [r4, #4]
   db902:	4641      	mov	r1, r8
   db904:	701f      	strb	r7, [r3, #0]
   db906:	4628      	mov	r0, r5
   db908:	f885 9000 	strb.w	r9, [r5]
   db90c:	f7ff ff54 	bl	db7b8 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
   db910:	e7e9      	b.n	db8e6 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x82>
   db912:	4623      	mov	r3, r4
   db914:	2201      	movs	r2, #1
   db916:	701a      	strb	r2, [r3, #0]
   db918:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000db91c <_ZSt25__throw_bad_function_callv>:
   db91c:	b508      	push	{r3, lr}
   db91e:	f7fc f945 	bl	d7bac <abort>
	...

000db924 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   db924:	4901      	ldr	r1, [pc, #4]	; (db92c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   db926:	f000 b8f9 	b.w	dbb1c <_ZNKSt9type_infoeqERKS_>
   db92a:	bf00      	nop
   db92c:	000df9a4 	.word	0x000df9a4

000db930 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   db930:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   db932:	2400      	movs	r4, #0
   db934:	2310      	movs	r3, #16
   db936:	e9cd 3402 	strd	r3, r4, [sp, #8]
   db93a:	6803      	ldr	r3, [r0, #0]
   db93c:	9400      	str	r4, [sp, #0]
   db93e:	699e      	ldr	r6, [r3, #24]
   db940:	f88d 4004 	strb.w	r4, [sp, #4]
   db944:	4615      	mov	r5, r2
   db946:	466b      	mov	r3, sp
   db948:	6812      	ldr	r2, [r2, #0]
   db94a:	47b0      	blx	r6
   db94c:	f89d 3004 	ldrb.w	r3, [sp, #4]
   db950:	f003 0306 	and.w	r3, r3, #6
   db954:	2b06      	cmp	r3, #6
   db956:	bf03      	ittte	eq
   db958:	9b00      	ldreq	r3, [sp, #0]
   db95a:	602b      	streq	r3, [r5, #0]
   db95c:	2001      	moveq	r0, #1
   db95e:	4620      	movne	r0, r4
   db960:	b004      	add	sp, #16
   db962:	bd70      	pop	{r4, r5, r6, pc}

000db964 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   db964:	9800      	ldr	r0, [sp, #0]
   db966:	4290      	cmp	r0, r2
   db968:	bf14      	ite	ne
   db96a:	2001      	movne	r0, #1
   db96c:	2006      	moveq	r0, #6
   db96e:	4770      	bx	lr

000db970 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   db970:	b510      	push	{r4, lr}
   db972:	4b03      	ldr	r3, [pc, #12]	; (db980 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   db974:	6003      	str	r3, [r0, #0]
   db976:	4604      	mov	r4, r0
   db978:	f000 f8cd 	bl	dbb16 <_ZNSt9type_infoD1Ev>
   db97c:	4620      	mov	r0, r4
   db97e:	bd10      	pop	{r4, pc}
   db980:	000df9e4 	.word	0x000df9e4

000db984 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   db984:	b510      	push	{r4, lr}
   db986:	4604      	mov	r4, r0
   db988:	f7ff fff2 	bl	db970 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   db98c:	4620      	mov	r0, r4
   db98e:	2108      	movs	r1, #8
   db990:	f7ff ff0c 	bl	db7ac <_ZdlPvj>
   db994:	4620      	mov	r0, r4
   db996:	bd10      	pop	{r4, pc}

000db998 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   db998:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   db99c:	461f      	mov	r7, r3
   db99e:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   db9a2:	f8dd 8018 	ldr.w	r8, [sp, #24]
   db9a6:	4598      	cmp	r8, r3
   db9a8:	4606      	mov	r6, r0
   db9aa:	4615      	mov	r5, r2
   db9ac:	d107      	bne.n	db9be <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   db9ae:	9907      	ldr	r1, [sp, #28]
   db9b0:	f000 f8b4 	bl	dbb1c <_ZNKSt9type_infoeqERKS_>
   db9b4:	b118      	cbz	r0, db9be <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   db9b6:	7165      	strb	r5, [r4, #5]
   db9b8:	2000      	movs	r0, #0
   db9ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   db9be:	4639      	mov	r1, r7
   db9c0:	4630      	mov	r0, r6
   db9c2:	f000 f8ab 	bl	dbb1c <_ZNKSt9type_infoeqERKS_>
   db9c6:	2800      	cmp	r0, #0
   db9c8:	d0f6      	beq.n	db9b8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   db9ca:	2301      	movs	r3, #1
   db9cc:	f8c4 8000 	str.w	r8, [r4]
   db9d0:	7125      	strb	r5, [r4, #4]
   db9d2:	71a3      	strb	r3, [r4, #6]
   db9d4:	e7f0      	b.n	db9b8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000db9d6 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   db9d6:	b538      	push	{r3, r4, r5, lr}
   db9d8:	4615      	mov	r5, r2
   db9da:	461c      	mov	r4, r3
   db9dc:	f000 f89e 	bl	dbb1c <_ZNKSt9type_infoeqERKS_>
   db9e0:	b120      	cbz	r0, db9ec <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   db9e2:	2308      	movs	r3, #8
   db9e4:	60e3      	str	r3, [r4, #12]
   db9e6:	2306      	movs	r3, #6
   db9e8:	6025      	str	r5, [r4, #0]
   db9ea:	7123      	strb	r3, [r4, #4]
   db9ec:	bd38      	pop	{r3, r4, r5, pc}

000db9ee <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   db9ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
   db9f0:	4605      	mov	r5, r0
   db9f2:	460c      	mov	r4, r1
   db9f4:	9201      	str	r2, [sp, #4]
   db9f6:	461e      	mov	r6, r3
   db9f8:	f000 f890 	bl	dbb1c <_ZNKSt9type_infoeqERKS_>
   db9fc:	b950      	cbnz	r0, dba14 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   db9fe:	2e03      	cmp	r6, #3
   dba00:	d808      	bhi.n	dba14 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   dba02:	6823      	ldr	r3, [r4, #0]
   dba04:	9a01      	ldr	r2, [sp, #4]
   dba06:	695b      	ldr	r3, [r3, #20]
   dba08:	4629      	mov	r1, r5
   dba0a:	4620      	mov	r0, r4
   dba0c:	b002      	add	sp, #8
   dba0e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   dba12:	4718      	bx	r3
   dba14:	b002      	add	sp, #8
   dba16:	bd70      	pop	{r4, r5, r6, pc}

000dba18 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   dba18:	b510      	push	{r4, lr}
   dba1a:	4b03      	ldr	r3, [pc, #12]	; (dba28 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   dba1c:	6003      	str	r3, [r0, #0]
   dba1e:	4604      	mov	r4, r0
   dba20:	f7ff ffa6 	bl	db970 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   dba24:	4620      	mov	r0, r4
   dba26:	bd10      	pop	{r4, pc}
   dba28:	000dfa44 	.word	0x000dfa44

000dba2c <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   dba2c:	b510      	push	{r4, lr}
   dba2e:	4604      	mov	r4, r0
   dba30:	f7ff fff2 	bl	dba18 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   dba34:	4620      	mov	r0, r4
   dba36:	210c      	movs	r1, #12
   dba38:	f7ff feb8 	bl	db7ac <_ZdlPvj>
   dba3c:	4620      	mov	r0, r4
   dba3e:	bd10      	pop	{r4, pc}

000dba40 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   dba40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   dba42:	9f08      	ldr	r7, [sp, #32]
   dba44:	4297      	cmp	r7, r2
   dba46:	4605      	mov	r5, r0
   dba48:	460e      	mov	r6, r1
   dba4a:	4614      	mov	r4, r2
   dba4c:	d00a      	beq.n	dba64 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   dba4e:	68a8      	ldr	r0, [r5, #8]
   dba50:	6802      	ldr	r2, [r0, #0]
   dba52:	9708      	str	r7, [sp, #32]
   dba54:	6a15      	ldr	r5, [r2, #32]
   dba56:	4631      	mov	r1, r6
   dba58:	4622      	mov	r2, r4
   dba5a:	46ac      	mov	ip, r5
   dba5c:	b003      	add	sp, #12
   dba5e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   dba62:	4760      	bx	ip
   dba64:	4619      	mov	r1, r3
   dba66:	9301      	str	r3, [sp, #4]
   dba68:	f000 f858 	bl	dbb1c <_ZNKSt9type_infoeqERKS_>
   dba6c:	9b01      	ldr	r3, [sp, #4]
   dba6e:	2800      	cmp	r0, #0
   dba70:	d0ed      	beq.n	dba4e <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   dba72:	2006      	movs	r0, #6
   dba74:	b003      	add	sp, #12
   dba76:	bdf0      	pop	{r4, r5, r6, r7, pc}

000dba78 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   dba78:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dba7c:	460d      	mov	r5, r1
   dba7e:	4619      	mov	r1, r3
   dba80:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   dba84:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   dba88:	4681      	mov	r9, r0
   dba8a:	4617      	mov	r7, r2
   dba8c:	4698      	mov	r8, r3
   dba8e:	f000 f845 	bl	dbb1c <_ZNKSt9type_infoeqERKS_>
   dba92:	b190      	cbz	r0, dbaba <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   dba94:	2d00      	cmp	r5, #0
   dba96:	6034      	str	r4, [r6, #0]
   dba98:	7137      	strb	r7, [r6, #4]
   dba9a:	db09      	blt.n	dbab0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   dba9c:	1961      	adds	r1, r4, r5
   dba9e:	458a      	cmp	sl, r1
   dbaa0:	bf0c      	ite	eq
   dbaa2:	2106      	moveq	r1, #6
   dbaa4:	2101      	movne	r1, #1
   dbaa6:	71b1      	strb	r1, [r6, #6]
   dbaa8:	2000      	movs	r0, #0
   dbaaa:	b001      	add	sp, #4
   dbaac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dbab0:	3502      	adds	r5, #2
   dbab2:	d1f9      	bne.n	dbaa8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   dbab4:	2301      	movs	r3, #1
   dbab6:	71b3      	strb	r3, [r6, #6]
   dbab8:	e7f6      	b.n	dbaa8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   dbaba:	4554      	cmp	r4, sl
   dbabc:	d106      	bne.n	dbacc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   dbabe:	4659      	mov	r1, fp
   dbac0:	4648      	mov	r0, r9
   dbac2:	f000 f82b 	bl	dbb1c <_ZNKSt9type_infoeqERKS_>
   dbac6:	b108      	cbz	r0, dbacc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   dbac8:	7177      	strb	r7, [r6, #5]
   dbaca:	e7ed      	b.n	dbaa8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   dbacc:	f8d9 0008 	ldr.w	r0, [r9, #8]
   dbad0:	6803      	ldr	r3, [r0, #0]
   dbad2:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   dbad6:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   dbada:	69dc      	ldr	r4, [r3, #28]
   dbadc:	463a      	mov	r2, r7
   dbade:	4643      	mov	r3, r8
   dbae0:	4629      	mov	r1, r5
   dbae2:	46a4      	mov	ip, r4
   dbae4:	b001      	add	sp, #4
   dbae6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dbaea:	4760      	bx	ip

000dbaec <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   dbaec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   dbaf0:	4607      	mov	r7, r0
   dbaf2:	460c      	mov	r4, r1
   dbaf4:	4615      	mov	r5, r2
   dbaf6:	461e      	mov	r6, r3
   dbaf8:	f7ff ff6d 	bl	db9d6 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   dbafc:	b948      	cbnz	r0, dbb12 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   dbafe:	68b8      	ldr	r0, [r7, #8]
   dbb00:	6803      	ldr	r3, [r0, #0]
   dbb02:	699f      	ldr	r7, [r3, #24]
   dbb04:	462a      	mov	r2, r5
   dbb06:	4633      	mov	r3, r6
   dbb08:	4621      	mov	r1, r4
   dbb0a:	46bc      	mov	ip, r7
   dbb0c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   dbb10:	4760      	bx	ip
   dbb12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000dbb16 <_ZNSt9type_infoD1Ev>:
   dbb16:	4770      	bx	lr

000dbb18 <_ZNKSt9type_info14__is_pointer_pEv>:
   dbb18:	2000      	movs	r0, #0
   dbb1a:	4770      	bx	lr

000dbb1c <_ZNKSt9type_infoeqERKS_>:
   dbb1c:	4281      	cmp	r1, r0
   dbb1e:	b508      	push	{r3, lr}
   dbb20:	d00e      	beq.n	dbb40 <_ZNKSt9type_infoeqERKS_+0x24>
   dbb22:	6840      	ldr	r0, [r0, #4]
   dbb24:	7803      	ldrb	r3, [r0, #0]
   dbb26:	2b2a      	cmp	r3, #42	; 0x2a
   dbb28:	d00c      	beq.n	dbb44 <_ZNKSt9type_infoeqERKS_+0x28>
   dbb2a:	6849      	ldr	r1, [r1, #4]
   dbb2c:	780b      	ldrb	r3, [r1, #0]
   dbb2e:	2b2a      	cmp	r3, #42	; 0x2a
   dbb30:	bf08      	it	eq
   dbb32:	3101      	addeq	r1, #1
   dbb34:	f000 ff49 	bl	dc9ca <strcmp>
   dbb38:	fab0 f080 	clz	r0, r0
   dbb3c:	0940      	lsrs	r0, r0, #5
   dbb3e:	bd08      	pop	{r3, pc}
   dbb40:	2001      	movs	r0, #1
   dbb42:	e7fc      	b.n	dbb3e <_ZNKSt9type_infoeqERKS_+0x22>
   dbb44:	2000      	movs	r0, #0
   dbb46:	e7fa      	b.n	dbb3e <_ZNKSt9type_infoeqERKS_+0x22>

000dbb48 <__aeabi_drsub>:
   dbb48:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   dbb4c:	e002      	b.n	dbb54 <__adddf3>
   dbb4e:	bf00      	nop

000dbb50 <__aeabi_dsub>:
   dbb50:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000dbb54 <__adddf3>:
   dbb54:	b530      	push	{r4, r5, lr}
   dbb56:	ea4f 0441 	mov.w	r4, r1, lsl #1
   dbb5a:	ea4f 0543 	mov.w	r5, r3, lsl #1
   dbb5e:	ea94 0f05 	teq	r4, r5
   dbb62:	bf08      	it	eq
   dbb64:	ea90 0f02 	teqeq	r0, r2
   dbb68:	bf1f      	itttt	ne
   dbb6a:	ea54 0c00 	orrsne.w	ip, r4, r0
   dbb6e:	ea55 0c02 	orrsne.w	ip, r5, r2
   dbb72:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   dbb76:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   dbb7a:	f000 80e2 	beq.w	dbd42 <__adddf3+0x1ee>
   dbb7e:	ea4f 5454 	mov.w	r4, r4, lsr #21
   dbb82:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   dbb86:	bfb8      	it	lt
   dbb88:	426d      	neglt	r5, r5
   dbb8a:	dd0c      	ble.n	dbba6 <__adddf3+0x52>
   dbb8c:	442c      	add	r4, r5
   dbb8e:	ea80 0202 	eor.w	r2, r0, r2
   dbb92:	ea81 0303 	eor.w	r3, r1, r3
   dbb96:	ea82 0000 	eor.w	r0, r2, r0
   dbb9a:	ea83 0101 	eor.w	r1, r3, r1
   dbb9e:	ea80 0202 	eor.w	r2, r0, r2
   dbba2:	ea81 0303 	eor.w	r3, r1, r3
   dbba6:	2d36      	cmp	r5, #54	; 0x36
   dbba8:	bf88      	it	hi
   dbbaa:	bd30      	pophi	{r4, r5, pc}
   dbbac:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   dbbb0:	ea4f 3101 	mov.w	r1, r1, lsl #12
   dbbb4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   dbbb8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   dbbbc:	d002      	beq.n	dbbc4 <__adddf3+0x70>
   dbbbe:	4240      	negs	r0, r0
   dbbc0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   dbbc4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   dbbc8:	ea4f 3303 	mov.w	r3, r3, lsl #12
   dbbcc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   dbbd0:	d002      	beq.n	dbbd8 <__adddf3+0x84>
   dbbd2:	4252      	negs	r2, r2
   dbbd4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   dbbd8:	ea94 0f05 	teq	r4, r5
   dbbdc:	f000 80a7 	beq.w	dbd2e <__adddf3+0x1da>
   dbbe0:	f1a4 0401 	sub.w	r4, r4, #1
   dbbe4:	f1d5 0e20 	rsbs	lr, r5, #32
   dbbe8:	db0d      	blt.n	dbc06 <__adddf3+0xb2>
   dbbea:	fa02 fc0e 	lsl.w	ip, r2, lr
   dbbee:	fa22 f205 	lsr.w	r2, r2, r5
   dbbf2:	1880      	adds	r0, r0, r2
   dbbf4:	f141 0100 	adc.w	r1, r1, #0
   dbbf8:	fa03 f20e 	lsl.w	r2, r3, lr
   dbbfc:	1880      	adds	r0, r0, r2
   dbbfe:	fa43 f305 	asr.w	r3, r3, r5
   dbc02:	4159      	adcs	r1, r3
   dbc04:	e00e      	b.n	dbc24 <__adddf3+0xd0>
   dbc06:	f1a5 0520 	sub.w	r5, r5, #32
   dbc0a:	f10e 0e20 	add.w	lr, lr, #32
   dbc0e:	2a01      	cmp	r2, #1
   dbc10:	fa03 fc0e 	lsl.w	ip, r3, lr
   dbc14:	bf28      	it	cs
   dbc16:	f04c 0c02 	orrcs.w	ip, ip, #2
   dbc1a:	fa43 f305 	asr.w	r3, r3, r5
   dbc1e:	18c0      	adds	r0, r0, r3
   dbc20:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   dbc24:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   dbc28:	d507      	bpl.n	dbc3a <__adddf3+0xe6>
   dbc2a:	f04f 0e00 	mov.w	lr, #0
   dbc2e:	f1dc 0c00 	rsbs	ip, ip, #0
   dbc32:	eb7e 0000 	sbcs.w	r0, lr, r0
   dbc36:	eb6e 0101 	sbc.w	r1, lr, r1
   dbc3a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   dbc3e:	d31b      	bcc.n	dbc78 <__adddf3+0x124>
   dbc40:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   dbc44:	d30c      	bcc.n	dbc60 <__adddf3+0x10c>
   dbc46:	0849      	lsrs	r1, r1, #1
   dbc48:	ea5f 0030 	movs.w	r0, r0, rrx
   dbc4c:	ea4f 0c3c 	mov.w	ip, ip, rrx
   dbc50:	f104 0401 	add.w	r4, r4, #1
   dbc54:	ea4f 5244 	mov.w	r2, r4, lsl #21
   dbc58:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   dbc5c:	f080 809a 	bcs.w	dbd94 <__adddf3+0x240>
   dbc60:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   dbc64:	bf08      	it	eq
   dbc66:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   dbc6a:	f150 0000 	adcs.w	r0, r0, #0
   dbc6e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   dbc72:	ea41 0105 	orr.w	r1, r1, r5
   dbc76:	bd30      	pop	{r4, r5, pc}
   dbc78:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   dbc7c:	4140      	adcs	r0, r0
   dbc7e:	eb41 0101 	adc.w	r1, r1, r1
   dbc82:	3c01      	subs	r4, #1
   dbc84:	bf28      	it	cs
   dbc86:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   dbc8a:	d2e9      	bcs.n	dbc60 <__adddf3+0x10c>
   dbc8c:	f091 0f00 	teq	r1, #0
   dbc90:	bf04      	itt	eq
   dbc92:	4601      	moveq	r1, r0
   dbc94:	2000      	moveq	r0, #0
   dbc96:	fab1 f381 	clz	r3, r1
   dbc9a:	bf08      	it	eq
   dbc9c:	3320      	addeq	r3, #32
   dbc9e:	f1a3 030b 	sub.w	r3, r3, #11
   dbca2:	f1b3 0220 	subs.w	r2, r3, #32
   dbca6:	da0c      	bge.n	dbcc2 <__adddf3+0x16e>
   dbca8:	320c      	adds	r2, #12
   dbcaa:	dd08      	ble.n	dbcbe <__adddf3+0x16a>
   dbcac:	f102 0c14 	add.w	ip, r2, #20
   dbcb0:	f1c2 020c 	rsb	r2, r2, #12
   dbcb4:	fa01 f00c 	lsl.w	r0, r1, ip
   dbcb8:	fa21 f102 	lsr.w	r1, r1, r2
   dbcbc:	e00c      	b.n	dbcd8 <__adddf3+0x184>
   dbcbe:	f102 0214 	add.w	r2, r2, #20
   dbcc2:	bfd8      	it	le
   dbcc4:	f1c2 0c20 	rsble	ip, r2, #32
   dbcc8:	fa01 f102 	lsl.w	r1, r1, r2
   dbccc:	fa20 fc0c 	lsr.w	ip, r0, ip
   dbcd0:	bfdc      	itt	le
   dbcd2:	ea41 010c 	orrle.w	r1, r1, ip
   dbcd6:	4090      	lslle	r0, r2
   dbcd8:	1ae4      	subs	r4, r4, r3
   dbcda:	bfa2      	ittt	ge
   dbcdc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   dbce0:	4329      	orrge	r1, r5
   dbce2:	bd30      	popge	{r4, r5, pc}
   dbce4:	ea6f 0404 	mvn.w	r4, r4
   dbce8:	3c1f      	subs	r4, #31
   dbcea:	da1c      	bge.n	dbd26 <__adddf3+0x1d2>
   dbcec:	340c      	adds	r4, #12
   dbcee:	dc0e      	bgt.n	dbd0e <__adddf3+0x1ba>
   dbcf0:	f104 0414 	add.w	r4, r4, #20
   dbcf4:	f1c4 0220 	rsb	r2, r4, #32
   dbcf8:	fa20 f004 	lsr.w	r0, r0, r4
   dbcfc:	fa01 f302 	lsl.w	r3, r1, r2
   dbd00:	ea40 0003 	orr.w	r0, r0, r3
   dbd04:	fa21 f304 	lsr.w	r3, r1, r4
   dbd08:	ea45 0103 	orr.w	r1, r5, r3
   dbd0c:	bd30      	pop	{r4, r5, pc}
   dbd0e:	f1c4 040c 	rsb	r4, r4, #12
   dbd12:	f1c4 0220 	rsb	r2, r4, #32
   dbd16:	fa20 f002 	lsr.w	r0, r0, r2
   dbd1a:	fa01 f304 	lsl.w	r3, r1, r4
   dbd1e:	ea40 0003 	orr.w	r0, r0, r3
   dbd22:	4629      	mov	r1, r5
   dbd24:	bd30      	pop	{r4, r5, pc}
   dbd26:	fa21 f004 	lsr.w	r0, r1, r4
   dbd2a:	4629      	mov	r1, r5
   dbd2c:	bd30      	pop	{r4, r5, pc}
   dbd2e:	f094 0f00 	teq	r4, #0
   dbd32:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   dbd36:	bf06      	itte	eq
   dbd38:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   dbd3c:	3401      	addeq	r4, #1
   dbd3e:	3d01      	subne	r5, #1
   dbd40:	e74e      	b.n	dbbe0 <__adddf3+0x8c>
   dbd42:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   dbd46:	bf18      	it	ne
   dbd48:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   dbd4c:	d029      	beq.n	dbda2 <__adddf3+0x24e>
   dbd4e:	ea94 0f05 	teq	r4, r5
   dbd52:	bf08      	it	eq
   dbd54:	ea90 0f02 	teqeq	r0, r2
   dbd58:	d005      	beq.n	dbd66 <__adddf3+0x212>
   dbd5a:	ea54 0c00 	orrs.w	ip, r4, r0
   dbd5e:	bf04      	itt	eq
   dbd60:	4619      	moveq	r1, r3
   dbd62:	4610      	moveq	r0, r2
   dbd64:	bd30      	pop	{r4, r5, pc}
   dbd66:	ea91 0f03 	teq	r1, r3
   dbd6a:	bf1e      	ittt	ne
   dbd6c:	2100      	movne	r1, #0
   dbd6e:	2000      	movne	r0, #0
   dbd70:	bd30      	popne	{r4, r5, pc}
   dbd72:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   dbd76:	d105      	bne.n	dbd84 <__adddf3+0x230>
   dbd78:	0040      	lsls	r0, r0, #1
   dbd7a:	4149      	adcs	r1, r1
   dbd7c:	bf28      	it	cs
   dbd7e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   dbd82:	bd30      	pop	{r4, r5, pc}
   dbd84:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   dbd88:	bf3c      	itt	cc
   dbd8a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   dbd8e:	bd30      	popcc	{r4, r5, pc}
   dbd90:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   dbd94:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   dbd98:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   dbd9c:	f04f 0000 	mov.w	r0, #0
   dbda0:	bd30      	pop	{r4, r5, pc}
   dbda2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   dbda6:	bf1a      	itte	ne
   dbda8:	4619      	movne	r1, r3
   dbdaa:	4610      	movne	r0, r2
   dbdac:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   dbdb0:	bf1c      	itt	ne
   dbdb2:	460b      	movne	r3, r1
   dbdb4:	4602      	movne	r2, r0
   dbdb6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   dbdba:	bf06      	itte	eq
   dbdbc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   dbdc0:	ea91 0f03 	teqeq	r1, r3
   dbdc4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   dbdc8:	bd30      	pop	{r4, r5, pc}
   dbdca:	bf00      	nop

000dbdcc <__aeabi_ui2d>:
   dbdcc:	f090 0f00 	teq	r0, #0
   dbdd0:	bf04      	itt	eq
   dbdd2:	2100      	moveq	r1, #0
   dbdd4:	4770      	bxeq	lr
   dbdd6:	b530      	push	{r4, r5, lr}
   dbdd8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   dbddc:	f104 0432 	add.w	r4, r4, #50	; 0x32
   dbde0:	f04f 0500 	mov.w	r5, #0
   dbde4:	f04f 0100 	mov.w	r1, #0
   dbde8:	e750      	b.n	dbc8c <__adddf3+0x138>
   dbdea:	bf00      	nop

000dbdec <__aeabi_i2d>:
   dbdec:	f090 0f00 	teq	r0, #0
   dbdf0:	bf04      	itt	eq
   dbdf2:	2100      	moveq	r1, #0
   dbdf4:	4770      	bxeq	lr
   dbdf6:	b530      	push	{r4, r5, lr}
   dbdf8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   dbdfc:	f104 0432 	add.w	r4, r4, #50	; 0x32
   dbe00:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   dbe04:	bf48      	it	mi
   dbe06:	4240      	negmi	r0, r0
   dbe08:	f04f 0100 	mov.w	r1, #0
   dbe0c:	e73e      	b.n	dbc8c <__adddf3+0x138>
   dbe0e:	bf00      	nop

000dbe10 <__aeabi_f2d>:
   dbe10:	0042      	lsls	r2, r0, #1
   dbe12:	ea4f 01e2 	mov.w	r1, r2, asr #3
   dbe16:	ea4f 0131 	mov.w	r1, r1, rrx
   dbe1a:	ea4f 7002 	mov.w	r0, r2, lsl #28
   dbe1e:	bf1f      	itttt	ne
   dbe20:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   dbe24:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   dbe28:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   dbe2c:	4770      	bxne	lr
   dbe2e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   dbe32:	bf08      	it	eq
   dbe34:	4770      	bxeq	lr
   dbe36:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   dbe3a:	bf04      	itt	eq
   dbe3c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   dbe40:	4770      	bxeq	lr
   dbe42:	b530      	push	{r4, r5, lr}
   dbe44:	f44f 7460 	mov.w	r4, #896	; 0x380
   dbe48:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   dbe4c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   dbe50:	e71c      	b.n	dbc8c <__adddf3+0x138>
   dbe52:	bf00      	nop

000dbe54 <__aeabi_ul2d>:
   dbe54:	ea50 0201 	orrs.w	r2, r0, r1
   dbe58:	bf08      	it	eq
   dbe5a:	4770      	bxeq	lr
   dbe5c:	b530      	push	{r4, r5, lr}
   dbe5e:	f04f 0500 	mov.w	r5, #0
   dbe62:	e00a      	b.n	dbe7a <__aeabi_l2d+0x16>

000dbe64 <__aeabi_l2d>:
   dbe64:	ea50 0201 	orrs.w	r2, r0, r1
   dbe68:	bf08      	it	eq
   dbe6a:	4770      	bxeq	lr
   dbe6c:	b530      	push	{r4, r5, lr}
   dbe6e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   dbe72:	d502      	bpl.n	dbe7a <__aeabi_l2d+0x16>
   dbe74:	4240      	negs	r0, r0
   dbe76:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   dbe7a:	f44f 6480 	mov.w	r4, #1024	; 0x400
   dbe7e:	f104 0432 	add.w	r4, r4, #50	; 0x32
   dbe82:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   dbe86:	f43f aed8 	beq.w	dbc3a <__adddf3+0xe6>
   dbe8a:	f04f 0203 	mov.w	r2, #3
   dbe8e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   dbe92:	bf18      	it	ne
   dbe94:	3203      	addne	r2, #3
   dbe96:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   dbe9a:	bf18      	it	ne
   dbe9c:	3203      	addne	r2, #3
   dbe9e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   dbea2:	f1c2 0320 	rsb	r3, r2, #32
   dbea6:	fa00 fc03 	lsl.w	ip, r0, r3
   dbeaa:	fa20 f002 	lsr.w	r0, r0, r2
   dbeae:	fa01 fe03 	lsl.w	lr, r1, r3
   dbeb2:	ea40 000e 	orr.w	r0, r0, lr
   dbeb6:	fa21 f102 	lsr.w	r1, r1, r2
   dbeba:	4414      	add	r4, r2
   dbebc:	e6bd      	b.n	dbc3a <__adddf3+0xe6>
   dbebe:	bf00      	nop

000dbec0 <__aeabi_dmul>:
   dbec0:	b570      	push	{r4, r5, r6, lr}
   dbec2:	f04f 0cff 	mov.w	ip, #255	; 0xff
   dbec6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   dbeca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   dbece:	bf1d      	ittte	ne
   dbed0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   dbed4:	ea94 0f0c 	teqne	r4, ip
   dbed8:	ea95 0f0c 	teqne	r5, ip
   dbedc:	f000 f8de 	bleq	dc09c <__aeabi_dmul+0x1dc>
   dbee0:	442c      	add	r4, r5
   dbee2:	ea81 0603 	eor.w	r6, r1, r3
   dbee6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   dbeea:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   dbeee:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   dbef2:	bf18      	it	ne
   dbef4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   dbef8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   dbefc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   dbf00:	d038      	beq.n	dbf74 <__aeabi_dmul+0xb4>
   dbf02:	fba0 ce02 	umull	ip, lr, r0, r2
   dbf06:	f04f 0500 	mov.w	r5, #0
   dbf0a:	fbe1 e502 	umlal	lr, r5, r1, r2
   dbf0e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   dbf12:	fbe0 e503 	umlal	lr, r5, r0, r3
   dbf16:	f04f 0600 	mov.w	r6, #0
   dbf1a:	fbe1 5603 	umlal	r5, r6, r1, r3
   dbf1e:	f09c 0f00 	teq	ip, #0
   dbf22:	bf18      	it	ne
   dbf24:	f04e 0e01 	orrne.w	lr, lr, #1
   dbf28:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   dbf2c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   dbf30:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   dbf34:	d204      	bcs.n	dbf40 <__aeabi_dmul+0x80>
   dbf36:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   dbf3a:	416d      	adcs	r5, r5
   dbf3c:	eb46 0606 	adc.w	r6, r6, r6
   dbf40:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   dbf44:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   dbf48:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   dbf4c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   dbf50:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   dbf54:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   dbf58:	bf88      	it	hi
   dbf5a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   dbf5e:	d81e      	bhi.n	dbf9e <__aeabi_dmul+0xde>
   dbf60:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   dbf64:	bf08      	it	eq
   dbf66:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   dbf6a:	f150 0000 	adcs.w	r0, r0, #0
   dbf6e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   dbf72:	bd70      	pop	{r4, r5, r6, pc}
   dbf74:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   dbf78:	ea46 0101 	orr.w	r1, r6, r1
   dbf7c:	ea40 0002 	orr.w	r0, r0, r2
   dbf80:	ea81 0103 	eor.w	r1, r1, r3
   dbf84:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   dbf88:	bfc2      	ittt	gt
   dbf8a:	ebd4 050c 	rsbsgt	r5, r4, ip
   dbf8e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   dbf92:	bd70      	popgt	{r4, r5, r6, pc}
   dbf94:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   dbf98:	f04f 0e00 	mov.w	lr, #0
   dbf9c:	3c01      	subs	r4, #1
   dbf9e:	f300 80ab 	bgt.w	dc0f8 <__aeabi_dmul+0x238>
   dbfa2:	f114 0f36 	cmn.w	r4, #54	; 0x36
   dbfa6:	bfde      	ittt	le
   dbfa8:	2000      	movle	r0, #0
   dbfaa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   dbfae:	bd70      	pople	{r4, r5, r6, pc}
   dbfb0:	f1c4 0400 	rsb	r4, r4, #0
   dbfb4:	3c20      	subs	r4, #32
   dbfb6:	da35      	bge.n	dc024 <__aeabi_dmul+0x164>
   dbfb8:	340c      	adds	r4, #12
   dbfba:	dc1b      	bgt.n	dbff4 <__aeabi_dmul+0x134>
   dbfbc:	f104 0414 	add.w	r4, r4, #20
   dbfc0:	f1c4 0520 	rsb	r5, r4, #32
   dbfc4:	fa00 f305 	lsl.w	r3, r0, r5
   dbfc8:	fa20 f004 	lsr.w	r0, r0, r4
   dbfcc:	fa01 f205 	lsl.w	r2, r1, r5
   dbfd0:	ea40 0002 	orr.w	r0, r0, r2
   dbfd4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   dbfd8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   dbfdc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   dbfe0:	fa21 f604 	lsr.w	r6, r1, r4
   dbfe4:	eb42 0106 	adc.w	r1, r2, r6
   dbfe8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   dbfec:	bf08      	it	eq
   dbfee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   dbff2:	bd70      	pop	{r4, r5, r6, pc}
   dbff4:	f1c4 040c 	rsb	r4, r4, #12
   dbff8:	f1c4 0520 	rsb	r5, r4, #32
   dbffc:	fa00 f304 	lsl.w	r3, r0, r4
   dc000:	fa20 f005 	lsr.w	r0, r0, r5
   dc004:	fa01 f204 	lsl.w	r2, r1, r4
   dc008:	ea40 0002 	orr.w	r0, r0, r2
   dc00c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   dc010:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   dc014:	f141 0100 	adc.w	r1, r1, #0
   dc018:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   dc01c:	bf08      	it	eq
   dc01e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   dc022:	bd70      	pop	{r4, r5, r6, pc}
   dc024:	f1c4 0520 	rsb	r5, r4, #32
   dc028:	fa00 f205 	lsl.w	r2, r0, r5
   dc02c:	ea4e 0e02 	orr.w	lr, lr, r2
   dc030:	fa20 f304 	lsr.w	r3, r0, r4
   dc034:	fa01 f205 	lsl.w	r2, r1, r5
   dc038:	ea43 0302 	orr.w	r3, r3, r2
   dc03c:	fa21 f004 	lsr.w	r0, r1, r4
   dc040:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   dc044:	fa21 f204 	lsr.w	r2, r1, r4
   dc048:	ea20 0002 	bic.w	r0, r0, r2
   dc04c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   dc050:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   dc054:	bf08      	it	eq
   dc056:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   dc05a:	bd70      	pop	{r4, r5, r6, pc}
   dc05c:	f094 0f00 	teq	r4, #0
   dc060:	d10f      	bne.n	dc082 <__aeabi_dmul+0x1c2>
   dc062:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   dc066:	0040      	lsls	r0, r0, #1
   dc068:	eb41 0101 	adc.w	r1, r1, r1
   dc06c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   dc070:	bf08      	it	eq
   dc072:	3c01      	subeq	r4, #1
   dc074:	d0f7      	beq.n	dc066 <__aeabi_dmul+0x1a6>
   dc076:	ea41 0106 	orr.w	r1, r1, r6
   dc07a:	f095 0f00 	teq	r5, #0
   dc07e:	bf18      	it	ne
   dc080:	4770      	bxne	lr
   dc082:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   dc086:	0052      	lsls	r2, r2, #1
   dc088:	eb43 0303 	adc.w	r3, r3, r3
   dc08c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   dc090:	bf08      	it	eq
   dc092:	3d01      	subeq	r5, #1
   dc094:	d0f7      	beq.n	dc086 <__aeabi_dmul+0x1c6>
   dc096:	ea43 0306 	orr.w	r3, r3, r6
   dc09a:	4770      	bx	lr
   dc09c:	ea94 0f0c 	teq	r4, ip
   dc0a0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   dc0a4:	bf18      	it	ne
   dc0a6:	ea95 0f0c 	teqne	r5, ip
   dc0aa:	d00c      	beq.n	dc0c6 <__aeabi_dmul+0x206>
   dc0ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   dc0b0:	bf18      	it	ne
   dc0b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   dc0b6:	d1d1      	bne.n	dc05c <__aeabi_dmul+0x19c>
   dc0b8:	ea81 0103 	eor.w	r1, r1, r3
   dc0bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   dc0c0:	f04f 0000 	mov.w	r0, #0
   dc0c4:	bd70      	pop	{r4, r5, r6, pc}
   dc0c6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   dc0ca:	bf06      	itte	eq
   dc0cc:	4610      	moveq	r0, r2
   dc0ce:	4619      	moveq	r1, r3
   dc0d0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   dc0d4:	d019      	beq.n	dc10a <__aeabi_dmul+0x24a>
   dc0d6:	ea94 0f0c 	teq	r4, ip
   dc0da:	d102      	bne.n	dc0e2 <__aeabi_dmul+0x222>
   dc0dc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   dc0e0:	d113      	bne.n	dc10a <__aeabi_dmul+0x24a>
   dc0e2:	ea95 0f0c 	teq	r5, ip
   dc0e6:	d105      	bne.n	dc0f4 <__aeabi_dmul+0x234>
   dc0e8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   dc0ec:	bf1c      	itt	ne
   dc0ee:	4610      	movne	r0, r2
   dc0f0:	4619      	movne	r1, r3
   dc0f2:	d10a      	bne.n	dc10a <__aeabi_dmul+0x24a>
   dc0f4:	ea81 0103 	eor.w	r1, r1, r3
   dc0f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   dc0fc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   dc100:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   dc104:	f04f 0000 	mov.w	r0, #0
   dc108:	bd70      	pop	{r4, r5, r6, pc}
   dc10a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   dc10e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   dc112:	bd70      	pop	{r4, r5, r6, pc}

000dc114 <__aeabi_ddiv>:
   dc114:	b570      	push	{r4, r5, r6, lr}
   dc116:	f04f 0cff 	mov.w	ip, #255	; 0xff
   dc11a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   dc11e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   dc122:	bf1d      	ittte	ne
   dc124:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   dc128:	ea94 0f0c 	teqne	r4, ip
   dc12c:	ea95 0f0c 	teqne	r5, ip
   dc130:	f000 f8a7 	bleq	dc282 <__aeabi_ddiv+0x16e>
   dc134:	eba4 0405 	sub.w	r4, r4, r5
   dc138:	ea81 0e03 	eor.w	lr, r1, r3
   dc13c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   dc140:	ea4f 3101 	mov.w	r1, r1, lsl #12
   dc144:	f000 8088 	beq.w	dc258 <__aeabi_ddiv+0x144>
   dc148:	ea4f 3303 	mov.w	r3, r3, lsl #12
   dc14c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   dc150:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   dc154:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   dc158:	ea4f 2202 	mov.w	r2, r2, lsl #8
   dc15c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   dc160:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   dc164:	ea4f 2600 	mov.w	r6, r0, lsl #8
   dc168:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   dc16c:	429d      	cmp	r5, r3
   dc16e:	bf08      	it	eq
   dc170:	4296      	cmpeq	r6, r2
   dc172:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   dc176:	f504 7440 	add.w	r4, r4, #768	; 0x300
   dc17a:	d202      	bcs.n	dc182 <__aeabi_ddiv+0x6e>
   dc17c:	085b      	lsrs	r3, r3, #1
   dc17e:	ea4f 0232 	mov.w	r2, r2, rrx
   dc182:	1ab6      	subs	r6, r6, r2
   dc184:	eb65 0503 	sbc.w	r5, r5, r3
   dc188:	085b      	lsrs	r3, r3, #1
   dc18a:	ea4f 0232 	mov.w	r2, r2, rrx
   dc18e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   dc192:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   dc196:	ebb6 0e02 	subs.w	lr, r6, r2
   dc19a:	eb75 0e03 	sbcs.w	lr, r5, r3
   dc19e:	bf22      	ittt	cs
   dc1a0:	1ab6      	subcs	r6, r6, r2
   dc1a2:	4675      	movcs	r5, lr
   dc1a4:	ea40 000c 	orrcs.w	r0, r0, ip
   dc1a8:	085b      	lsrs	r3, r3, #1
   dc1aa:	ea4f 0232 	mov.w	r2, r2, rrx
   dc1ae:	ebb6 0e02 	subs.w	lr, r6, r2
   dc1b2:	eb75 0e03 	sbcs.w	lr, r5, r3
   dc1b6:	bf22      	ittt	cs
   dc1b8:	1ab6      	subcs	r6, r6, r2
   dc1ba:	4675      	movcs	r5, lr
   dc1bc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   dc1c0:	085b      	lsrs	r3, r3, #1
   dc1c2:	ea4f 0232 	mov.w	r2, r2, rrx
   dc1c6:	ebb6 0e02 	subs.w	lr, r6, r2
   dc1ca:	eb75 0e03 	sbcs.w	lr, r5, r3
   dc1ce:	bf22      	ittt	cs
   dc1d0:	1ab6      	subcs	r6, r6, r2
   dc1d2:	4675      	movcs	r5, lr
   dc1d4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   dc1d8:	085b      	lsrs	r3, r3, #1
   dc1da:	ea4f 0232 	mov.w	r2, r2, rrx
   dc1de:	ebb6 0e02 	subs.w	lr, r6, r2
   dc1e2:	eb75 0e03 	sbcs.w	lr, r5, r3
   dc1e6:	bf22      	ittt	cs
   dc1e8:	1ab6      	subcs	r6, r6, r2
   dc1ea:	4675      	movcs	r5, lr
   dc1ec:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   dc1f0:	ea55 0e06 	orrs.w	lr, r5, r6
   dc1f4:	d018      	beq.n	dc228 <__aeabi_ddiv+0x114>
   dc1f6:	ea4f 1505 	mov.w	r5, r5, lsl #4
   dc1fa:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   dc1fe:	ea4f 1606 	mov.w	r6, r6, lsl #4
   dc202:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   dc206:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   dc20a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   dc20e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   dc212:	d1c0      	bne.n	dc196 <__aeabi_ddiv+0x82>
   dc214:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   dc218:	d10b      	bne.n	dc232 <__aeabi_ddiv+0x11e>
   dc21a:	ea41 0100 	orr.w	r1, r1, r0
   dc21e:	f04f 0000 	mov.w	r0, #0
   dc222:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   dc226:	e7b6      	b.n	dc196 <__aeabi_ddiv+0x82>
   dc228:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   dc22c:	bf04      	itt	eq
   dc22e:	4301      	orreq	r1, r0
   dc230:	2000      	moveq	r0, #0
   dc232:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   dc236:	bf88      	it	hi
   dc238:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   dc23c:	f63f aeaf 	bhi.w	dbf9e <__aeabi_dmul+0xde>
   dc240:	ebb5 0c03 	subs.w	ip, r5, r3
   dc244:	bf04      	itt	eq
   dc246:	ebb6 0c02 	subseq.w	ip, r6, r2
   dc24a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   dc24e:	f150 0000 	adcs.w	r0, r0, #0
   dc252:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   dc256:	bd70      	pop	{r4, r5, r6, pc}
   dc258:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   dc25c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   dc260:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   dc264:	bfc2      	ittt	gt
   dc266:	ebd4 050c 	rsbsgt	r5, r4, ip
   dc26a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   dc26e:	bd70      	popgt	{r4, r5, r6, pc}
   dc270:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   dc274:	f04f 0e00 	mov.w	lr, #0
   dc278:	3c01      	subs	r4, #1
   dc27a:	e690      	b.n	dbf9e <__aeabi_dmul+0xde>
   dc27c:	ea45 0e06 	orr.w	lr, r5, r6
   dc280:	e68d      	b.n	dbf9e <__aeabi_dmul+0xde>
   dc282:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   dc286:	ea94 0f0c 	teq	r4, ip
   dc28a:	bf08      	it	eq
   dc28c:	ea95 0f0c 	teqeq	r5, ip
   dc290:	f43f af3b 	beq.w	dc10a <__aeabi_dmul+0x24a>
   dc294:	ea94 0f0c 	teq	r4, ip
   dc298:	d10a      	bne.n	dc2b0 <__aeabi_ddiv+0x19c>
   dc29a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   dc29e:	f47f af34 	bne.w	dc10a <__aeabi_dmul+0x24a>
   dc2a2:	ea95 0f0c 	teq	r5, ip
   dc2a6:	f47f af25 	bne.w	dc0f4 <__aeabi_dmul+0x234>
   dc2aa:	4610      	mov	r0, r2
   dc2ac:	4619      	mov	r1, r3
   dc2ae:	e72c      	b.n	dc10a <__aeabi_dmul+0x24a>
   dc2b0:	ea95 0f0c 	teq	r5, ip
   dc2b4:	d106      	bne.n	dc2c4 <__aeabi_ddiv+0x1b0>
   dc2b6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   dc2ba:	f43f aefd 	beq.w	dc0b8 <__aeabi_dmul+0x1f8>
   dc2be:	4610      	mov	r0, r2
   dc2c0:	4619      	mov	r1, r3
   dc2c2:	e722      	b.n	dc10a <__aeabi_dmul+0x24a>
   dc2c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   dc2c8:	bf18      	it	ne
   dc2ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   dc2ce:	f47f aec5 	bne.w	dc05c <__aeabi_dmul+0x19c>
   dc2d2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   dc2d6:	f47f af0d 	bne.w	dc0f4 <__aeabi_dmul+0x234>
   dc2da:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   dc2de:	f47f aeeb 	bne.w	dc0b8 <__aeabi_dmul+0x1f8>
   dc2e2:	e712      	b.n	dc10a <__aeabi_dmul+0x24a>

000dc2e4 <__gedf2>:
   dc2e4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   dc2e8:	e006      	b.n	dc2f8 <__cmpdf2+0x4>
   dc2ea:	bf00      	nop

000dc2ec <__ledf2>:
   dc2ec:	f04f 0c01 	mov.w	ip, #1
   dc2f0:	e002      	b.n	dc2f8 <__cmpdf2+0x4>
   dc2f2:	bf00      	nop

000dc2f4 <__cmpdf2>:
   dc2f4:	f04f 0c01 	mov.w	ip, #1
   dc2f8:	f84d cd04 	str.w	ip, [sp, #-4]!
   dc2fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   dc300:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   dc304:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   dc308:	bf18      	it	ne
   dc30a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   dc30e:	d01b      	beq.n	dc348 <__cmpdf2+0x54>
   dc310:	b001      	add	sp, #4
   dc312:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   dc316:	bf0c      	ite	eq
   dc318:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   dc31c:	ea91 0f03 	teqne	r1, r3
   dc320:	bf02      	ittt	eq
   dc322:	ea90 0f02 	teqeq	r0, r2
   dc326:	2000      	moveq	r0, #0
   dc328:	4770      	bxeq	lr
   dc32a:	f110 0f00 	cmn.w	r0, #0
   dc32e:	ea91 0f03 	teq	r1, r3
   dc332:	bf58      	it	pl
   dc334:	4299      	cmppl	r1, r3
   dc336:	bf08      	it	eq
   dc338:	4290      	cmpeq	r0, r2
   dc33a:	bf2c      	ite	cs
   dc33c:	17d8      	asrcs	r0, r3, #31
   dc33e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   dc342:	f040 0001 	orr.w	r0, r0, #1
   dc346:	4770      	bx	lr
   dc348:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   dc34c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   dc350:	d102      	bne.n	dc358 <__cmpdf2+0x64>
   dc352:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   dc356:	d107      	bne.n	dc368 <__cmpdf2+0x74>
   dc358:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   dc35c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   dc360:	d1d6      	bne.n	dc310 <__cmpdf2+0x1c>
   dc362:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   dc366:	d0d3      	beq.n	dc310 <__cmpdf2+0x1c>
   dc368:	f85d 0b04 	ldr.w	r0, [sp], #4
   dc36c:	4770      	bx	lr
   dc36e:	bf00      	nop

000dc370 <__aeabi_cdrcmple>:
   dc370:	4684      	mov	ip, r0
   dc372:	4610      	mov	r0, r2
   dc374:	4662      	mov	r2, ip
   dc376:	468c      	mov	ip, r1
   dc378:	4619      	mov	r1, r3
   dc37a:	4663      	mov	r3, ip
   dc37c:	e000      	b.n	dc380 <__aeabi_cdcmpeq>
   dc37e:	bf00      	nop

000dc380 <__aeabi_cdcmpeq>:
   dc380:	b501      	push	{r0, lr}
   dc382:	f7ff ffb7 	bl	dc2f4 <__cmpdf2>
   dc386:	2800      	cmp	r0, #0
   dc388:	bf48      	it	mi
   dc38a:	f110 0f00 	cmnmi.w	r0, #0
   dc38e:	bd01      	pop	{r0, pc}

000dc390 <__aeabi_dcmpeq>:
   dc390:	f84d ed08 	str.w	lr, [sp, #-8]!
   dc394:	f7ff fff4 	bl	dc380 <__aeabi_cdcmpeq>
   dc398:	bf0c      	ite	eq
   dc39a:	2001      	moveq	r0, #1
   dc39c:	2000      	movne	r0, #0
   dc39e:	f85d fb08 	ldr.w	pc, [sp], #8
   dc3a2:	bf00      	nop

000dc3a4 <__aeabi_dcmplt>:
   dc3a4:	f84d ed08 	str.w	lr, [sp, #-8]!
   dc3a8:	f7ff ffea 	bl	dc380 <__aeabi_cdcmpeq>
   dc3ac:	bf34      	ite	cc
   dc3ae:	2001      	movcc	r0, #1
   dc3b0:	2000      	movcs	r0, #0
   dc3b2:	f85d fb08 	ldr.w	pc, [sp], #8
   dc3b6:	bf00      	nop

000dc3b8 <__aeabi_dcmple>:
   dc3b8:	f84d ed08 	str.w	lr, [sp, #-8]!
   dc3bc:	f7ff ffe0 	bl	dc380 <__aeabi_cdcmpeq>
   dc3c0:	bf94      	ite	ls
   dc3c2:	2001      	movls	r0, #1
   dc3c4:	2000      	movhi	r0, #0
   dc3c6:	f85d fb08 	ldr.w	pc, [sp], #8
   dc3ca:	bf00      	nop

000dc3cc <__aeabi_dcmpge>:
   dc3cc:	f84d ed08 	str.w	lr, [sp, #-8]!
   dc3d0:	f7ff ffce 	bl	dc370 <__aeabi_cdrcmple>
   dc3d4:	bf94      	ite	ls
   dc3d6:	2001      	movls	r0, #1
   dc3d8:	2000      	movhi	r0, #0
   dc3da:	f85d fb08 	ldr.w	pc, [sp], #8
   dc3de:	bf00      	nop

000dc3e0 <__aeabi_dcmpgt>:
   dc3e0:	f84d ed08 	str.w	lr, [sp, #-8]!
   dc3e4:	f7ff ffc4 	bl	dc370 <__aeabi_cdrcmple>
   dc3e8:	bf34      	ite	cc
   dc3ea:	2001      	movcc	r0, #1
   dc3ec:	2000      	movcs	r0, #0
   dc3ee:	f85d fb08 	ldr.w	pc, [sp], #8
   dc3f2:	bf00      	nop

000dc3f4 <__aeabi_d2uiz>:
   dc3f4:	004a      	lsls	r2, r1, #1
   dc3f6:	d211      	bcs.n	dc41c <__aeabi_d2uiz+0x28>
   dc3f8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   dc3fc:	d211      	bcs.n	dc422 <__aeabi_d2uiz+0x2e>
   dc3fe:	d50d      	bpl.n	dc41c <__aeabi_d2uiz+0x28>
   dc400:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   dc404:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   dc408:	d40e      	bmi.n	dc428 <__aeabi_d2uiz+0x34>
   dc40a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   dc40e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   dc412:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   dc416:	fa23 f002 	lsr.w	r0, r3, r2
   dc41a:	4770      	bx	lr
   dc41c:	f04f 0000 	mov.w	r0, #0
   dc420:	4770      	bx	lr
   dc422:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   dc426:	d102      	bne.n	dc42e <__aeabi_d2uiz+0x3a>
   dc428:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   dc42c:	4770      	bx	lr
   dc42e:	f04f 0000 	mov.w	r0, #0
   dc432:	4770      	bx	lr

000dc434 <__aeabi_d2f>:
   dc434:	ea4f 0241 	mov.w	r2, r1, lsl #1
   dc438:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   dc43c:	bf24      	itt	cs
   dc43e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   dc442:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   dc446:	d90d      	bls.n	dc464 <__aeabi_d2f+0x30>
   dc448:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   dc44c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   dc450:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   dc454:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   dc458:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   dc45c:	bf08      	it	eq
   dc45e:	f020 0001 	biceq.w	r0, r0, #1
   dc462:	4770      	bx	lr
   dc464:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   dc468:	d121      	bne.n	dc4ae <__aeabi_d2f+0x7a>
   dc46a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   dc46e:	bfbc      	itt	lt
   dc470:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   dc474:	4770      	bxlt	lr
   dc476:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   dc47a:	ea4f 5252 	mov.w	r2, r2, lsr #21
   dc47e:	f1c2 0218 	rsb	r2, r2, #24
   dc482:	f1c2 0c20 	rsb	ip, r2, #32
   dc486:	fa10 f30c 	lsls.w	r3, r0, ip
   dc48a:	fa20 f002 	lsr.w	r0, r0, r2
   dc48e:	bf18      	it	ne
   dc490:	f040 0001 	orrne.w	r0, r0, #1
   dc494:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   dc498:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   dc49c:	fa03 fc0c 	lsl.w	ip, r3, ip
   dc4a0:	ea40 000c 	orr.w	r0, r0, ip
   dc4a4:	fa23 f302 	lsr.w	r3, r3, r2
   dc4a8:	ea4f 0343 	mov.w	r3, r3, lsl #1
   dc4ac:	e7cc      	b.n	dc448 <__aeabi_d2f+0x14>
   dc4ae:	ea7f 5362 	mvns.w	r3, r2, asr #21
   dc4b2:	d107      	bne.n	dc4c4 <__aeabi_d2f+0x90>
   dc4b4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   dc4b8:	bf1e      	ittt	ne
   dc4ba:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   dc4be:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   dc4c2:	4770      	bxne	lr
   dc4c4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   dc4c8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   dc4cc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   dc4d0:	4770      	bx	lr
   dc4d2:	bf00      	nop

000dc4d4 <__aeabi_uldivmod>:
   dc4d4:	b953      	cbnz	r3, dc4ec <__aeabi_uldivmod+0x18>
   dc4d6:	b94a      	cbnz	r2, dc4ec <__aeabi_uldivmod+0x18>
   dc4d8:	2900      	cmp	r1, #0
   dc4da:	bf08      	it	eq
   dc4dc:	2800      	cmpeq	r0, #0
   dc4de:	bf1c      	itt	ne
   dc4e0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   dc4e4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   dc4e8:	f000 b9c0 	b.w	dc86c <__aeabi_idiv0>
   dc4ec:	f1ad 0c08 	sub.w	ip, sp, #8
   dc4f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   dc4f4:	f000 f858 	bl	dc5a8 <__udivmoddi4>
   dc4f8:	f8dd e004 	ldr.w	lr, [sp, #4]
   dc4fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   dc500:	b004      	add	sp, #16
   dc502:	4770      	bx	lr

000dc504 <__aeabi_f2lz>:
   dc504:	ee07 0a90 	vmov	s15, r0
   dc508:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   dc50c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   dc510:	d401      	bmi.n	dc516 <__aeabi_f2lz+0x12>
   dc512:	f000 b80b 	b.w	dc52c <__aeabi_f2ulz>
   dc516:	eef1 7a67 	vneg.f32	s15, s15
   dc51a:	b508      	push	{r3, lr}
   dc51c:	ee17 0a90 	vmov	r0, s15
   dc520:	f000 f804 	bl	dc52c <__aeabi_f2ulz>
   dc524:	4240      	negs	r0, r0
   dc526:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   dc52a:	bd08      	pop	{r3, pc}

000dc52c <__aeabi_f2ulz>:
   dc52c:	b5d0      	push	{r4, r6, r7, lr}
   dc52e:	f7ff fc6f 	bl	dbe10 <__aeabi_f2d>
   dc532:	4b0c      	ldr	r3, [pc, #48]	; (dc564 <__aeabi_f2ulz+0x38>)
   dc534:	2200      	movs	r2, #0
   dc536:	4606      	mov	r6, r0
   dc538:	460f      	mov	r7, r1
   dc53a:	f7ff fcc1 	bl	dbec0 <__aeabi_dmul>
   dc53e:	f7ff ff59 	bl	dc3f4 <__aeabi_d2uiz>
   dc542:	4604      	mov	r4, r0
   dc544:	f7ff fc42 	bl	dbdcc <__aeabi_ui2d>
   dc548:	4b07      	ldr	r3, [pc, #28]	; (dc568 <__aeabi_f2ulz+0x3c>)
   dc54a:	2200      	movs	r2, #0
   dc54c:	f7ff fcb8 	bl	dbec0 <__aeabi_dmul>
   dc550:	4602      	mov	r2, r0
   dc552:	460b      	mov	r3, r1
   dc554:	4630      	mov	r0, r6
   dc556:	4639      	mov	r1, r7
   dc558:	f7ff fafa 	bl	dbb50 <__aeabi_dsub>
   dc55c:	f7ff ff4a 	bl	dc3f4 <__aeabi_d2uiz>
   dc560:	4621      	mov	r1, r4
   dc562:	bdd0      	pop	{r4, r6, r7, pc}
   dc564:	3df00000 	.word	0x3df00000
   dc568:	41f00000 	.word	0x41f00000

000dc56c <__aeabi_d2ulz>:
   dc56c:	b5d0      	push	{r4, r6, r7, lr}
   dc56e:	4b0c      	ldr	r3, [pc, #48]	; (dc5a0 <__aeabi_d2ulz+0x34>)
   dc570:	2200      	movs	r2, #0
   dc572:	4606      	mov	r6, r0
   dc574:	460f      	mov	r7, r1
   dc576:	f7ff fca3 	bl	dbec0 <__aeabi_dmul>
   dc57a:	f7ff ff3b 	bl	dc3f4 <__aeabi_d2uiz>
   dc57e:	4604      	mov	r4, r0
   dc580:	f7ff fc24 	bl	dbdcc <__aeabi_ui2d>
   dc584:	4b07      	ldr	r3, [pc, #28]	; (dc5a4 <__aeabi_d2ulz+0x38>)
   dc586:	2200      	movs	r2, #0
   dc588:	f7ff fc9a 	bl	dbec0 <__aeabi_dmul>
   dc58c:	4602      	mov	r2, r0
   dc58e:	460b      	mov	r3, r1
   dc590:	4630      	mov	r0, r6
   dc592:	4639      	mov	r1, r7
   dc594:	f7ff fadc 	bl	dbb50 <__aeabi_dsub>
   dc598:	f7ff ff2c 	bl	dc3f4 <__aeabi_d2uiz>
   dc59c:	4621      	mov	r1, r4
   dc59e:	bdd0      	pop	{r4, r6, r7, pc}
   dc5a0:	3df00000 	.word	0x3df00000
   dc5a4:	41f00000 	.word	0x41f00000

000dc5a8 <__udivmoddi4>:
   dc5a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   dc5ac:	9d08      	ldr	r5, [sp, #32]
   dc5ae:	4604      	mov	r4, r0
   dc5b0:	468c      	mov	ip, r1
   dc5b2:	2b00      	cmp	r3, #0
   dc5b4:	f040 8083 	bne.w	dc6be <__udivmoddi4+0x116>
   dc5b8:	428a      	cmp	r2, r1
   dc5ba:	4617      	mov	r7, r2
   dc5bc:	d947      	bls.n	dc64e <__udivmoddi4+0xa6>
   dc5be:	fab2 f282 	clz	r2, r2
   dc5c2:	b142      	cbz	r2, dc5d6 <__udivmoddi4+0x2e>
   dc5c4:	f1c2 0020 	rsb	r0, r2, #32
   dc5c8:	fa24 f000 	lsr.w	r0, r4, r0
   dc5cc:	4091      	lsls	r1, r2
   dc5ce:	4097      	lsls	r7, r2
   dc5d0:	ea40 0c01 	orr.w	ip, r0, r1
   dc5d4:	4094      	lsls	r4, r2
   dc5d6:	ea4f 4817 	mov.w	r8, r7, lsr #16
   dc5da:	0c23      	lsrs	r3, r4, #16
   dc5dc:	fbbc f6f8 	udiv	r6, ip, r8
   dc5e0:	fa1f fe87 	uxth.w	lr, r7
   dc5e4:	fb08 c116 	mls	r1, r8, r6, ip
   dc5e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   dc5ec:	fb06 f10e 	mul.w	r1, r6, lr
   dc5f0:	4299      	cmp	r1, r3
   dc5f2:	d909      	bls.n	dc608 <__udivmoddi4+0x60>
   dc5f4:	18fb      	adds	r3, r7, r3
   dc5f6:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
   dc5fa:	f080 8119 	bcs.w	dc830 <__udivmoddi4+0x288>
   dc5fe:	4299      	cmp	r1, r3
   dc600:	f240 8116 	bls.w	dc830 <__udivmoddi4+0x288>
   dc604:	3e02      	subs	r6, #2
   dc606:	443b      	add	r3, r7
   dc608:	1a5b      	subs	r3, r3, r1
   dc60a:	b2a4      	uxth	r4, r4
   dc60c:	fbb3 f0f8 	udiv	r0, r3, r8
   dc610:	fb08 3310 	mls	r3, r8, r0, r3
   dc614:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   dc618:	fb00 fe0e 	mul.w	lr, r0, lr
   dc61c:	45a6      	cmp	lr, r4
   dc61e:	d909      	bls.n	dc634 <__udivmoddi4+0x8c>
   dc620:	193c      	adds	r4, r7, r4
   dc622:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   dc626:	f080 8105 	bcs.w	dc834 <__udivmoddi4+0x28c>
   dc62a:	45a6      	cmp	lr, r4
   dc62c:	f240 8102 	bls.w	dc834 <__udivmoddi4+0x28c>
   dc630:	3802      	subs	r0, #2
   dc632:	443c      	add	r4, r7
   dc634:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
   dc638:	eba4 040e 	sub.w	r4, r4, lr
   dc63c:	2600      	movs	r6, #0
   dc63e:	b11d      	cbz	r5, dc648 <__udivmoddi4+0xa0>
   dc640:	40d4      	lsrs	r4, r2
   dc642:	2300      	movs	r3, #0
   dc644:	e9c5 4300 	strd	r4, r3, [r5]
   dc648:	4631      	mov	r1, r6
   dc64a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dc64e:	b902      	cbnz	r2, dc652 <__udivmoddi4+0xaa>
   dc650:	deff      	udf	#255	; 0xff
   dc652:	fab2 f282 	clz	r2, r2
   dc656:	2a00      	cmp	r2, #0
   dc658:	d150      	bne.n	dc6fc <__udivmoddi4+0x154>
   dc65a:	1bcb      	subs	r3, r1, r7
   dc65c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   dc660:	fa1f f887 	uxth.w	r8, r7
   dc664:	2601      	movs	r6, #1
   dc666:	fbb3 fcfe 	udiv	ip, r3, lr
   dc66a:	0c21      	lsrs	r1, r4, #16
   dc66c:	fb0e 331c 	mls	r3, lr, ip, r3
   dc670:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   dc674:	fb08 f30c 	mul.w	r3, r8, ip
   dc678:	428b      	cmp	r3, r1
   dc67a:	d907      	bls.n	dc68c <__udivmoddi4+0xe4>
   dc67c:	1879      	adds	r1, r7, r1
   dc67e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
   dc682:	d202      	bcs.n	dc68a <__udivmoddi4+0xe2>
   dc684:	428b      	cmp	r3, r1
   dc686:	f200 80e9 	bhi.w	dc85c <__udivmoddi4+0x2b4>
   dc68a:	4684      	mov	ip, r0
   dc68c:	1ac9      	subs	r1, r1, r3
   dc68e:	b2a3      	uxth	r3, r4
   dc690:	fbb1 f0fe 	udiv	r0, r1, lr
   dc694:	fb0e 1110 	mls	r1, lr, r0, r1
   dc698:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
   dc69c:	fb08 f800 	mul.w	r8, r8, r0
   dc6a0:	45a0      	cmp	r8, r4
   dc6a2:	d907      	bls.n	dc6b4 <__udivmoddi4+0x10c>
   dc6a4:	193c      	adds	r4, r7, r4
   dc6a6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   dc6aa:	d202      	bcs.n	dc6b2 <__udivmoddi4+0x10a>
   dc6ac:	45a0      	cmp	r8, r4
   dc6ae:	f200 80d9 	bhi.w	dc864 <__udivmoddi4+0x2bc>
   dc6b2:	4618      	mov	r0, r3
   dc6b4:	eba4 0408 	sub.w	r4, r4, r8
   dc6b8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   dc6bc:	e7bf      	b.n	dc63e <__udivmoddi4+0x96>
   dc6be:	428b      	cmp	r3, r1
   dc6c0:	d909      	bls.n	dc6d6 <__udivmoddi4+0x12e>
   dc6c2:	2d00      	cmp	r5, #0
   dc6c4:	f000 80b1 	beq.w	dc82a <__udivmoddi4+0x282>
   dc6c8:	2600      	movs	r6, #0
   dc6ca:	e9c5 0100 	strd	r0, r1, [r5]
   dc6ce:	4630      	mov	r0, r6
   dc6d0:	4631      	mov	r1, r6
   dc6d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dc6d6:	fab3 f683 	clz	r6, r3
   dc6da:	2e00      	cmp	r6, #0
   dc6dc:	d14a      	bne.n	dc774 <__udivmoddi4+0x1cc>
   dc6de:	428b      	cmp	r3, r1
   dc6e0:	d302      	bcc.n	dc6e8 <__udivmoddi4+0x140>
   dc6e2:	4282      	cmp	r2, r0
   dc6e4:	f200 80b8 	bhi.w	dc858 <__udivmoddi4+0x2b0>
   dc6e8:	1a84      	subs	r4, r0, r2
   dc6ea:	eb61 0103 	sbc.w	r1, r1, r3
   dc6ee:	2001      	movs	r0, #1
   dc6f0:	468c      	mov	ip, r1
   dc6f2:	2d00      	cmp	r5, #0
   dc6f4:	d0a8      	beq.n	dc648 <__udivmoddi4+0xa0>
   dc6f6:	e9c5 4c00 	strd	r4, ip, [r5]
   dc6fa:	e7a5      	b.n	dc648 <__udivmoddi4+0xa0>
   dc6fc:	f1c2 0320 	rsb	r3, r2, #32
   dc700:	fa20 f603 	lsr.w	r6, r0, r3
   dc704:	4097      	lsls	r7, r2
   dc706:	fa01 f002 	lsl.w	r0, r1, r2
   dc70a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   dc70e:	40d9      	lsrs	r1, r3
   dc710:	4330      	orrs	r0, r6
   dc712:	0c03      	lsrs	r3, r0, #16
   dc714:	fbb1 f6fe 	udiv	r6, r1, lr
   dc718:	fa1f f887 	uxth.w	r8, r7
   dc71c:	fb0e 1116 	mls	r1, lr, r6, r1
   dc720:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   dc724:	fb06 f108 	mul.w	r1, r6, r8
   dc728:	4299      	cmp	r1, r3
   dc72a:	fa04 f402 	lsl.w	r4, r4, r2
   dc72e:	d909      	bls.n	dc744 <__udivmoddi4+0x19c>
   dc730:	18fb      	adds	r3, r7, r3
   dc732:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
   dc736:	f080 808d 	bcs.w	dc854 <__udivmoddi4+0x2ac>
   dc73a:	4299      	cmp	r1, r3
   dc73c:	f240 808a 	bls.w	dc854 <__udivmoddi4+0x2ac>
   dc740:	3e02      	subs	r6, #2
   dc742:	443b      	add	r3, r7
   dc744:	1a5b      	subs	r3, r3, r1
   dc746:	b281      	uxth	r1, r0
   dc748:	fbb3 f0fe 	udiv	r0, r3, lr
   dc74c:	fb0e 3310 	mls	r3, lr, r0, r3
   dc750:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   dc754:	fb00 f308 	mul.w	r3, r0, r8
   dc758:	428b      	cmp	r3, r1
   dc75a:	d907      	bls.n	dc76c <__udivmoddi4+0x1c4>
   dc75c:	1879      	adds	r1, r7, r1
   dc75e:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
   dc762:	d273      	bcs.n	dc84c <__udivmoddi4+0x2a4>
   dc764:	428b      	cmp	r3, r1
   dc766:	d971      	bls.n	dc84c <__udivmoddi4+0x2a4>
   dc768:	3802      	subs	r0, #2
   dc76a:	4439      	add	r1, r7
   dc76c:	1acb      	subs	r3, r1, r3
   dc76e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
   dc772:	e778      	b.n	dc666 <__udivmoddi4+0xbe>
   dc774:	f1c6 0c20 	rsb	ip, r6, #32
   dc778:	fa03 f406 	lsl.w	r4, r3, r6
   dc77c:	fa22 f30c 	lsr.w	r3, r2, ip
   dc780:	431c      	orrs	r4, r3
   dc782:	fa20 f70c 	lsr.w	r7, r0, ip
   dc786:	fa01 f306 	lsl.w	r3, r1, r6
   dc78a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
   dc78e:	fa21 f10c 	lsr.w	r1, r1, ip
   dc792:	431f      	orrs	r7, r3
   dc794:	0c3b      	lsrs	r3, r7, #16
   dc796:	fbb1 f9fe 	udiv	r9, r1, lr
   dc79a:	fa1f f884 	uxth.w	r8, r4
   dc79e:	fb0e 1119 	mls	r1, lr, r9, r1
   dc7a2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   dc7a6:	fb09 fa08 	mul.w	sl, r9, r8
   dc7aa:	458a      	cmp	sl, r1
   dc7ac:	fa02 f206 	lsl.w	r2, r2, r6
   dc7b0:	fa00 f306 	lsl.w	r3, r0, r6
   dc7b4:	d908      	bls.n	dc7c8 <__udivmoddi4+0x220>
   dc7b6:	1861      	adds	r1, r4, r1
   dc7b8:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
   dc7bc:	d248      	bcs.n	dc850 <__udivmoddi4+0x2a8>
   dc7be:	458a      	cmp	sl, r1
   dc7c0:	d946      	bls.n	dc850 <__udivmoddi4+0x2a8>
   dc7c2:	f1a9 0902 	sub.w	r9, r9, #2
   dc7c6:	4421      	add	r1, r4
   dc7c8:	eba1 010a 	sub.w	r1, r1, sl
   dc7cc:	b2bf      	uxth	r7, r7
   dc7ce:	fbb1 f0fe 	udiv	r0, r1, lr
   dc7d2:	fb0e 1110 	mls	r1, lr, r0, r1
   dc7d6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
   dc7da:	fb00 f808 	mul.w	r8, r0, r8
   dc7de:	45b8      	cmp	r8, r7
   dc7e0:	d907      	bls.n	dc7f2 <__udivmoddi4+0x24a>
   dc7e2:	19e7      	adds	r7, r4, r7
   dc7e4:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
   dc7e8:	d22e      	bcs.n	dc848 <__udivmoddi4+0x2a0>
   dc7ea:	45b8      	cmp	r8, r7
   dc7ec:	d92c      	bls.n	dc848 <__udivmoddi4+0x2a0>
   dc7ee:	3802      	subs	r0, #2
   dc7f0:	4427      	add	r7, r4
   dc7f2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   dc7f6:	eba7 0708 	sub.w	r7, r7, r8
   dc7fa:	fba0 8902 	umull	r8, r9, r0, r2
   dc7fe:	454f      	cmp	r7, r9
   dc800:	46c6      	mov	lr, r8
   dc802:	4649      	mov	r1, r9
   dc804:	d31a      	bcc.n	dc83c <__udivmoddi4+0x294>
   dc806:	d017      	beq.n	dc838 <__udivmoddi4+0x290>
   dc808:	b15d      	cbz	r5, dc822 <__udivmoddi4+0x27a>
   dc80a:	ebb3 020e 	subs.w	r2, r3, lr
   dc80e:	eb67 0701 	sbc.w	r7, r7, r1
   dc812:	fa07 fc0c 	lsl.w	ip, r7, ip
   dc816:	40f2      	lsrs	r2, r6
   dc818:	ea4c 0202 	orr.w	r2, ip, r2
   dc81c:	40f7      	lsrs	r7, r6
   dc81e:	e9c5 2700 	strd	r2, r7, [r5]
   dc822:	2600      	movs	r6, #0
   dc824:	4631      	mov	r1, r6
   dc826:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dc82a:	462e      	mov	r6, r5
   dc82c:	4628      	mov	r0, r5
   dc82e:	e70b      	b.n	dc648 <__udivmoddi4+0xa0>
   dc830:	4606      	mov	r6, r0
   dc832:	e6e9      	b.n	dc608 <__udivmoddi4+0x60>
   dc834:	4618      	mov	r0, r3
   dc836:	e6fd      	b.n	dc634 <__udivmoddi4+0x8c>
   dc838:	4543      	cmp	r3, r8
   dc83a:	d2e5      	bcs.n	dc808 <__udivmoddi4+0x260>
   dc83c:	ebb8 0e02 	subs.w	lr, r8, r2
   dc840:	eb69 0104 	sbc.w	r1, r9, r4
   dc844:	3801      	subs	r0, #1
   dc846:	e7df      	b.n	dc808 <__udivmoddi4+0x260>
   dc848:	4608      	mov	r0, r1
   dc84a:	e7d2      	b.n	dc7f2 <__udivmoddi4+0x24a>
   dc84c:	4660      	mov	r0, ip
   dc84e:	e78d      	b.n	dc76c <__udivmoddi4+0x1c4>
   dc850:	4681      	mov	r9, r0
   dc852:	e7b9      	b.n	dc7c8 <__udivmoddi4+0x220>
   dc854:	4666      	mov	r6, ip
   dc856:	e775      	b.n	dc744 <__udivmoddi4+0x19c>
   dc858:	4630      	mov	r0, r6
   dc85a:	e74a      	b.n	dc6f2 <__udivmoddi4+0x14a>
   dc85c:	f1ac 0c02 	sub.w	ip, ip, #2
   dc860:	4439      	add	r1, r7
   dc862:	e713      	b.n	dc68c <__udivmoddi4+0xe4>
   dc864:	3802      	subs	r0, #2
   dc866:	443c      	add	r4, r7
   dc868:	e724      	b.n	dc6b4 <__udivmoddi4+0x10c>
   dc86a:	bf00      	nop

000dc86c <__aeabi_idiv0>:
   dc86c:	4770      	bx	lr
   dc86e:	bf00      	nop

000dc870 <asctime_r>:
   dc870:	b510      	push	{r4, lr}
   dc872:	460c      	mov	r4, r1
   dc874:	6941      	ldr	r1, [r0, #20]
   dc876:	6903      	ldr	r3, [r0, #16]
   dc878:	6982      	ldr	r2, [r0, #24]
   dc87a:	b086      	sub	sp, #24
   dc87c:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   dc880:	9104      	str	r1, [sp, #16]
   dc882:	6801      	ldr	r1, [r0, #0]
   dc884:	9103      	str	r1, [sp, #12]
   dc886:	6841      	ldr	r1, [r0, #4]
   dc888:	9102      	str	r1, [sp, #8]
   dc88a:	6881      	ldr	r1, [r0, #8]
   dc88c:	9101      	str	r1, [sp, #4]
   dc88e:	68c1      	ldr	r1, [r0, #12]
   dc890:	9100      	str	r1, [sp, #0]
   dc892:	4907      	ldr	r1, [pc, #28]	; (dc8b0 <asctime_r+0x40>)
   dc894:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   dc898:	440b      	add	r3, r1
   dc89a:	4906      	ldr	r1, [pc, #24]	; (dc8b4 <asctime_r+0x44>)
   dc89c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   dc8a0:	440a      	add	r2, r1
   dc8a2:	4620      	mov	r0, r4
   dc8a4:	4904      	ldr	r1, [pc, #16]	; (dc8b8 <asctime_r+0x48>)
   dc8a6:	f7fb f969 	bl	d7b7c <siprintf>
   dc8aa:	4620      	mov	r0, r4
   dc8ac:	b006      	add	sp, #24
   dc8ae:	bd10      	pop	{r4, pc}
   dc8b0:	000dfab2 	.word	0x000dfab2
   dc8b4:	000dfa9d 	.word	0x000dfa9d
   dc8b8:	000dfa7d 	.word	0x000dfa7d

000dc8bc <atexit>:
   dc8bc:	2300      	movs	r3, #0
   dc8be:	4601      	mov	r1, r0
   dc8c0:	461a      	mov	r2, r3
   dc8c2:	4618      	mov	r0, r3
   dc8c4:	f001 b814 	b.w	dd8f0 <__register_exitproc>

000dc8c8 <atof>:
   dc8c8:	2100      	movs	r1, #0
   dc8ca:	f000 bf2f 	b.w	dd72c <strtod>
	...

000dc8d0 <gmtime>:
   dc8d0:	b538      	push	{r3, r4, r5, lr}
   dc8d2:	4b07      	ldr	r3, [pc, #28]	; (dc8f0 <gmtime+0x20>)
   dc8d4:	681d      	ldr	r5, [r3, #0]
   dc8d6:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   dc8d8:	4604      	mov	r4, r0
   dc8da:	b91b      	cbnz	r3, dc8e4 <gmtime+0x14>
   dc8dc:	2024      	movs	r0, #36	; 0x24
   dc8de:	f7fb f92d 	bl	d7b3c <malloc>
   dc8e2:	63e8      	str	r0, [r5, #60]	; 0x3c
   dc8e4:	6be9      	ldr	r1, [r5, #60]	; 0x3c
   dc8e6:	4620      	mov	r0, r4
   dc8e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   dc8ec:	f7fb b98e 	b.w	d7c0c <gmtime_r>
   dc8f0:	2003dec8 	.word	0x2003dec8

000dc8f4 <memcpy>:
   dc8f4:	440a      	add	r2, r1
   dc8f6:	4291      	cmp	r1, r2
   dc8f8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   dc8fc:	d100      	bne.n	dc900 <memcpy+0xc>
   dc8fe:	4770      	bx	lr
   dc900:	b510      	push	{r4, lr}
   dc902:	f811 4b01 	ldrb.w	r4, [r1], #1
   dc906:	f803 4f01 	strb.w	r4, [r3, #1]!
   dc90a:	4291      	cmp	r1, r2
   dc90c:	d1f9      	bne.n	dc902 <memcpy+0xe>
   dc90e:	bd10      	pop	{r4, pc}

000dc910 <memmove>:
   dc910:	4288      	cmp	r0, r1
   dc912:	b510      	push	{r4, lr}
   dc914:	eb01 0402 	add.w	r4, r1, r2
   dc918:	d902      	bls.n	dc920 <memmove+0x10>
   dc91a:	4284      	cmp	r4, r0
   dc91c:	4623      	mov	r3, r4
   dc91e:	d807      	bhi.n	dc930 <memmove+0x20>
   dc920:	1e43      	subs	r3, r0, #1
   dc922:	42a1      	cmp	r1, r4
   dc924:	d008      	beq.n	dc938 <memmove+0x28>
   dc926:	f811 2b01 	ldrb.w	r2, [r1], #1
   dc92a:	f803 2f01 	strb.w	r2, [r3, #1]!
   dc92e:	e7f8      	b.n	dc922 <memmove+0x12>
   dc930:	4402      	add	r2, r0
   dc932:	4601      	mov	r1, r0
   dc934:	428a      	cmp	r2, r1
   dc936:	d100      	bne.n	dc93a <memmove+0x2a>
   dc938:	bd10      	pop	{r4, pc}
   dc93a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   dc93e:	f802 4d01 	strb.w	r4, [r2, #-1]!
   dc942:	e7f7      	b.n	dc934 <memmove+0x24>

000dc944 <memset>:
   dc944:	4402      	add	r2, r0
   dc946:	4603      	mov	r3, r0
   dc948:	4293      	cmp	r3, r2
   dc94a:	d100      	bne.n	dc94e <memset+0xa>
   dc94c:	4770      	bx	lr
   dc94e:	f803 1b01 	strb.w	r1, [r3], #1
   dc952:	e7f9      	b.n	dc948 <memset+0x4>

000dc954 <srand>:
   dc954:	b538      	push	{r3, r4, r5, lr}
   dc956:	4b0d      	ldr	r3, [pc, #52]	; (dc98c <srand+0x38>)
   dc958:	681d      	ldr	r5, [r3, #0]
   dc95a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   dc95c:	4604      	mov	r4, r0
   dc95e:	b97b      	cbnz	r3, dc980 <srand+0x2c>
   dc960:	2018      	movs	r0, #24
   dc962:	f7fb f8eb 	bl	d7b3c <malloc>
   dc966:	4a0a      	ldr	r2, [pc, #40]	; (dc990 <srand+0x3c>)
   dc968:	4b0a      	ldr	r3, [pc, #40]	; (dc994 <srand+0x40>)
   dc96a:	63a8      	str	r0, [r5, #56]	; 0x38
   dc96c:	e9c0 2300 	strd	r2, r3, [r0]
   dc970:	4b09      	ldr	r3, [pc, #36]	; (dc998 <srand+0x44>)
   dc972:	6083      	str	r3, [r0, #8]
   dc974:	230b      	movs	r3, #11
   dc976:	8183      	strh	r3, [r0, #12]
   dc978:	2201      	movs	r2, #1
   dc97a:	2300      	movs	r3, #0
   dc97c:	e9c0 2304 	strd	r2, r3, [r0, #16]
   dc980:	6bab      	ldr	r3, [r5, #56]	; 0x38
   dc982:	2200      	movs	r2, #0
   dc984:	611c      	str	r4, [r3, #16]
   dc986:	615a      	str	r2, [r3, #20]
   dc988:	bd38      	pop	{r3, r4, r5, pc}
   dc98a:	bf00      	nop
   dc98c:	2003dec8 	.word	0x2003dec8
   dc990:	abcd330e 	.word	0xabcd330e
   dc994:	e66d1234 	.word	0xe66d1234
   dc998:	0005deec 	.word	0x0005deec

000dc99c <strchr>:
   dc99c:	b2c9      	uxtb	r1, r1
   dc99e:	4603      	mov	r3, r0
   dc9a0:	f810 2b01 	ldrb.w	r2, [r0], #1
   dc9a4:	b11a      	cbz	r2, dc9ae <strchr+0x12>
   dc9a6:	428a      	cmp	r2, r1
   dc9a8:	d1f9      	bne.n	dc99e <strchr+0x2>
   dc9aa:	4618      	mov	r0, r3
   dc9ac:	4770      	bx	lr
   dc9ae:	2900      	cmp	r1, #0
   dc9b0:	bf18      	it	ne
   dc9b2:	2300      	movne	r3, #0
   dc9b4:	e7f9      	b.n	dc9aa <strchr+0xe>

000dc9b6 <strchrnul>:
   dc9b6:	b510      	push	{r4, lr}
   dc9b8:	4604      	mov	r4, r0
   dc9ba:	f7ff ffef 	bl	dc99c <strchr>
   dc9be:	b918      	cbnz	r0, dc9c8 <strchrnul+0x12>
   dc9c0:	4620      	mov	r0, r4
   dc9c2:	f000 f832 	bl	dca2a <strlen>
   dc9c6:	4420      	add	r0, r4
   dc9c8:	bd10      	pop	{r4, pc}

000dc9ca <strcmp>:
   dc9ca:	f810 2b01 	ldrb.w	r2, [r0], #1
   dc9ce:	f811 3b01 	ldrb.w	r3, [r1], #1
   dc9d2:	2a01      	cmp	r2, #1
   dc9d4:	bf28      	it	cs
   dc9d6:	429a      	cmpcs	r2, r3
   dc9d8:	d0f7      	beq.n	dc9ca <strcmp>
   dc9da:	1ad0      	subs	r0, r2, r3
   dc9dc:	4770      	bx	lr

000dc9de <strcpy>:
   dc9de:	4603      	mov	r3, r0
   dc9e0:	f811 2b01 	ldrb.w	r2, [r1], #1
   dc9e4:	f803 2b01 	strb.w	r2, [r3], #1
   dc9e8:	2a00      	cmp	r2, #0
   dc9ea:	d1f9      	bne.n	dc9e0 <strcpy+0x2>
   dc9ec:	4770      	bx	lr
	...

000dc9f0 <strdup>:
   dc9f0:	4b02      	ldr	r3, [pc, #8]	; (dc9fc <strdup+0xc>)
   dc9f2:	4601      	mov	r1, r0
   dc9f4:	6818      	ldr	r0, [r3, #0]
   dc9f6:	f000 b803 	b.w	dca00 <_strdup_r>
   dc9fa:	bf00      	nop
   dc9fc:	2003dec8 	.word	0x2003dec8

000dca00 <_strdup_r>:
   dca00:	b537      	push	{r0, r1, r2, r4, r5, lr}
   dca02:	4604      	mov	r4, r0
   dca04:	4608      	mov	r0, r1
   dca06:	460d      	mov	r5, r1
   dca08:	f000 f80f 	bl	dca2a <strlen>
   dca0c:	1c42      	adds	r2, r0, #1
   dca0e:	4611      	mov	r1, r2
   dca10:	4620      	mov	r0, r4
   dca12:	9201      	str	r2, [sp, #4]
   dca14:	f7fb f8d2 	bl	d7bbc <_malloc_r>
   dca18:	4604      	mov	r4, r0
   dca1a:	b118      	cbz	r0, dca24 <_strdup_r+0x24>
   dca1c:	9a01      	ldr	r2, [sp, #4]
   dca1e:	4629      	mov	r1, r5
   dca20:	f7ff ff68 	bl	dc8f4 <memcpy>
   dca24:	4620      	mov	r0, r4
   dca26:	b003      	add	sp, #12
   dca28:	bd30      	pop	{r4, r5, pc}

000dca2a <strlen>:
   dca2a:	4603      	mov	r3, r0
   dca2c:	f813 2b01 	ldrb.w	r2, [r3], #1
   dca30:	2a00      	cmp	r2, #0
   dca32:	d1fb      	bne.n	dca2c <strlen+0x2>
   dca34:	1a18      	subs	r0, r3, r0
   dca36:	3801      	subs	r0, #1
   dca38:	4770      	bx	lr

000dca3a <strncmp>:
   dca3a:	b510      	push	{r4, lr}
   dca3c:	b16a      	cbz	r2, dca5a <strncmp+0x20>
   dca3e:	3901      	subs	r1, #1
   dca40:	1884      	adds	r4, r0, r2
   dca42:	f810 3b01 	ldrb.w	r3, [r0], #1
   dca46:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   dca4a:	4293      	cmp	r3, r2
   dca4c:	d103      	bne.n	dca56 <strncmp+0x1c>
   dca4e:	42a0      	cmp	r0, r4
   dca50:	d001      	beq.n	dca56 <strncmp+0x1c>
   dca52:	2b00      	cmp	r3, #0
   dca54:	d1f5      	bne.n	dca42 <strncmp+0x8>
   dca56:	1a98      	subs	r0, r3, r2
   dca58:	bd10      	pop	{r4, pc}
   dca5a:	4610      	mov	r0, r2
   dca5c:	e7fc      	b.n	dca58 <strncmp+0x1e>

000dca5e <strncpy>:
   dca5e:	b510      	push	{r4, lr}
   dca60:	3901      	subs	r1, #1
   dca62:	4603      	mov	r3, r0
   dca64:	b132      	cbz	r2, dca74 <strncpy+0x16>
   dca66:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   dca6a:	f803 4b01 	strb.w	r4, [r3], #1
   dca6e:	3a01      	subs	r2, #1
   dca70:	2c00      	cmp	r4, #0
   dca72:	d1f7      	bne.n	dca64 <strncpy+0x6>
   dca74:	441a      	add	r2, r3
   dca76:	2100      	movs	r1, #0
   dca78:	4293      	cmp	r3, r2
   dca7a:	d100      	bne.n	dca7e <strncpy+0x20>
   dca7c:	bd10      	pop	{r4, pc}
   dca7e:	f803 1b01 	strb.w	r1, [r3], #1
   dca82:	e7f9      	b.n	dca78 <strncpy+0x1a>

000dca84 <strrchr>:
   dca84:	b538      	push	{r3, r4, r5, lr}
   dca86:	4603      	mov	r3, r0
   dca88:	460c      	mov	r4, r1
   dca8a:	b969      	cbnz	r1, dcaa8 <strrchr+0x24>
   dca8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   dca90:	f7ff bf84 	b.w	dc99c <strchr>
   dca94:	1c43      	adds	r3, r0, #1
   dca96:	4605      	mov	r5, r0
   dca98:	4621      	mov	r1, r4
   dca9a:	4618      	mov	r0, r3
   dca9c:	f7ff ff7e 	bl	dc99c <strchr>
   dcaa0:	2800      	cmp	r0, #0
   dcaa2:	d1f7      	bne.n	dca94 <strrchr+0x10>
   dcaa4:	4628      	mov	r0, r5
   dcaa6:	bd38      	pop	{r3, r4, r5, pc}
   dcaa8:	2500      	movs	r5, #0
   dcaaa:	e7f5      	b.n	dca98 <strrchr+0x14>

000dcaac <strstr>:
   dcaac:	b5f0      	push	{r4, r5, r6, r7, lr}
   dcaae:	780c      	ldrb	r4, [r1, #0]
   dcab0:	b164      	cbz	r4, dcacc <strstr+0x20>
   dcab2:	4603      	mov	r3, r0
   dcab4:	781a      	ldrb	r2, [r3, #0]
   dcab6:	4618      	mov	r0, r3
   dcab8:	1c5e      	adds	r6, r3, #1
   dcaba:	b90a      	cbnz	r2, dcac0 <strstr+0x14>
   dcabc:	4610      	mov	r0, r2
   dcabe:	e005      	b.n	dcacc <strstr+0x20>
   dcac0:	4294      	cmp	r4, r2
   dcac2:	d108      	bne.n	dcad6 <strstr+0x2a>
   dcac4:	460d      	mov	r5, r1
   dcac6:	f815 2f01 	ldrb.w	r2, [r5, #1]!
   dcaca:	b902      	cbnz	r2, dcace <strstr+0x22>
   dcacc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   dcace:	f813 7f01 	ldrb.w	r7, [r3, #1]!
   dcad2:	4297      	cmp	r7, r2
   dcad4:	d0f7      	beq.n	dcac6 <strstr+0x1a>
   dcad6:	4633      	mov	r3, r6
   dcad8:	e7ec      	b.n	dcab4 <strstr+0x8>

000dcada <sulp>:
   dcada:	b570      	push	{r4, r5, r6, lr}
   dcadc:	4604      	mov	r4, r0
   dcade:	460d      	mov	r5, r1
   dcae0:	ec45 4b10 	vmov	d0, r4, r5
   dcae4:	4616      	mov	r6, r2
   dcae6:	f001 fdd5 	bl	de694 <__ulp>
   dcaea:	ec51 0b10 	vmov	r0, r1, d0
   dcaee:	b17e      	cbz	r6, dcb10 <sulp+0x36>
   dcaf0:	f3c5 530a 	ubfx	r3, r5, #20, #11
   dcaf4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   dcaf8:	2b00      	cmp	r3, #0
   dcafa:	dd09      	ble.n	dcb10 <sulp+0x36>
   dcafc:	051b      	lsls	r3, r3, #20
   dcafe:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   dcb02:	2400      	movs	r4, #0
   dcb04:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   dcb08:	4622      	mov	r2, r4
   dcb0a:	462b      	mov	r3, r5
   dcb0c:	f7ff f9d8 	bl	dbec0 <__aeabi_dmul>
   dcb10:	bd70      	pop	{r4, r5, r6, pc}
   dcb12:	0000      	movs	r0, r0
   dcb14:	0000      	movs	r0, r0
	...

000dcb18 <_strtod_l>:
   dcb18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dcb1c:	b0a3      	sub	sp, #140	; 0x8c
   dcb1e:	461f      	mov	r7, r3
   dcb20:	2300      	movs	r3, #0
   dcb22:	931e      	str	r3, [sp, #120]	; 0x78
   dcb24:	4ba4      	ldr	r3, [pc, #656]	; (dcdb8 <_strtod_l+0x2a0>)
   dcb26:	9219      	str	r2, [sp, #100]	; 0x64
   dcb28:	681b      	ldr	r3, [r3, #0]
   dcb2a:	9307      	str	r3, [sp, #28]
   dcb2c:	4604      	mov	r4, r0
   dcb2e:	4618      	mov	r0, r3
   dcb30:	4688      	mov	r8, r1
   dcb32:	f7ff ff7a 	bl	dca2a <strlen>
   dcb36:	f04f 0a00 	mov.w	sl, #0
   dcb3a:	4605      	mov	r5, r0
   dcb3c:	f04f 0b00 	mov.w	fp, #0
   dcb40:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
   dcb44:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   dcb46:	781a      	ldrb	r2, [r3, #0]
   dcb48:	2a2b      	cmp	r2, #43	; 0x2b
   dcb4a:	d04c      	beq.n	dcbe6 <_strtod_l+0xce>
   dcb4c:	d839      	bhi.n	dcbc2 <_strtod_l+0xaa>
   dcb4e:	2a0d      	cmp	r2, #13
   dcb50:	d832      	bhi.n	dcbb8 <_strtod_l+0xa0>
   dcb52:	2a08      	cmp	r2, #8
   dcb54:	d832      	bhi.n	dcbbc <_strtod_l+0xa4>
   dcb56:	2a00      	cmp	r2, #0
   dcb58:	d03c      	beq.n	dcbd4 <_strtod_l+0xbc>
   dcb5a:	2300      	movs	r3, #0
   dcb5c:	930e      	str	r3, [sp, #56]	; 0x38
   dcb5e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
   dcb60:	7833      	ldrb	r3, [r6, #0]
   dcb62:	2b30      	cmp	r3, #48	; 0x30
   dcb64:	f040 80b4 	bne.w	dccd0 <_strtod_l+0x1b8>
   dcb68:	7873      	ldrb	r3, [r6, #1]
   dcb6a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   dcb6e:	2b58      	cmp	r3, #88	; 0x58
   dcb70:	d16c      	bne.n	dcc4c <_strtod_l+0x134>
   dcb72:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   dcb74:	9301      	str	r3, [sp, #4]
   dcb76:	ab1e      	add	r3, sp, #120	; 0x78
   dcb78:	9702      	str	r7, [sp, #8]
   dcb7a:	9300      	str	r3, [sp, #0]
   dcb7c:	4a8f      	ldr	r2, [pc, #572]	; (dcdbc <_strtod_l+0x2a4>)
   dcb7e:	ab1f      	add	r3, sp, #124	; 0x7c
   dcb80:	a91d      	add	r1, sp, #116	; 0x74
   dcb82:	4620      	mov	r0, r4
   dcb84:	f000 ff7e 	bl	dda84 <__gethex>
   dcb88:	f010 0707 	ands.w	r7, r0, #7
   dcb8c:	4605      	mov	r5, r0
   dcb8e:	d005      	beq.n	dcb9c <_strtod_l+0x84>
   dcb90:	2f06      	cmp	r7, #6
   dcb92:	d12a      	bne.n	dcbea <_strtod_l+0xd2>
   dcb94:	3601      	adds	r6, #1
   dcb96:	2300      	movs	r3, #0
   dcb98:	961d      	str	r6, [sp, #116]	; 0x74
   dcb9a:	930e      	str	r3, [sp, #56]	; 0x38
   dcb9c:	9b19      	ldr	r3, [sp, #100]	; 0x64
   dcb9e:	2b00      	cmp	r3, #0
   dcba0:	f040 8596 	bne.w	dd6d0 <_strtod_l+0xbb8>
   dcba4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   dcba6:	b1db      	cbz	r3, dcbe0 <_strtod_l+0xc8>
   dcba8:	4652      	mov	r2, sl
   dcbaa:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   dcbae:	ec43 2b10 	vmov	d0, r2, r3
   dcbb2:	b023      	add	sp, #140	; 0x8c
   dcbb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dcbb8:	2a20      	cmp	r2, #32
   dcbba:	d1ce      	bne.n	dcb5a <_strtod_l+0x42>
   dcbbc:	3301      	adds	r3, #1
   dcbbe:	931d      	str	r3, [sp, #116]	; 0x74
   dcbc0:	e7c0      	b.n	dcb44 <_strtod_l+0x2c>
   dcbc2:	2a2d      	cmp	r2, #45	; 0x2d
   dcbc4:	d1c9      	bne.n	dcb5a <_strtod_l+0x42>
   dcbc6:	2201      	movs	r2, #1
   dcbc8:	920e      	str	r2, [sp, #56]	; 0x38
   dcbca:	1c5a      	adds	r2, r3, #1
   dcbcc:	921d      	str	r2, [sp, #116]	; 0x74
   dcbce:	785b      	ldrb	r3, [r3, #1]
   dcbd0:	2b00      	cmp	r3, #0
   dcbd2:	d1c4      	bne.n	dcb5e <_strtod_l+0x46>
   dcbd4:	9b19      	ldr	r3, [sp, #100]	; 0x64
   dcbd6:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
   dcbda:	2b00      	cmp	r3, #0
   dcbdc:	f040 8576 	bne.w	dd6cc <_strtod_l+0xbb4>
   dcbe0:	4652      	mov	r2, sl
   dcbe2:	465b      	mov	r3, fp
   dcbe4:	e7e3      	b.n	dcbae <_strtod_l+0x96>
   dcbe6:	2200      	movs	r2, #0
   dcbe8:	e7ee      	b.n	dcbc8 <_strtod_l+0xb0>
   dcbea:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   dcbec:	b13a      	cbz	r2, dcbfe <_strtod_l+0xe6>
   dcbee:	2135      	movs	r1, #53	; 0x35
   dcbf0:	a820      	add	r0, sp, #128	; 0x80
   dcbf2:	f001 fe4e 	bl	de892 <__copybits>
   dcbf6:	991e      	ldr	r1, [sp, #120]	; 0x78
   dcbf8:	4620      	mov	r0, r4
   dcbfa:	f001 fa82 	bl	de102 <_Bfree>
   dcbfe:	3f01      	subs	r7, #1
   dcc00:	2f05      	cmp	r7, #5
   dcc02:	d807      	bhi.n	dcc14 <_strtod_l+0xfc>
   dcc04:	e8df f007 	tbb	[pc, r7]
   dcc08:	1d180b0e 	.word	0x1d180b0e
   dcc0c:	030e      	.short	0x030e
   dcc0e:	f04f 0b00 	mov.w	fp, #0
   dcc12:	46da      	mov	sl, fp
   dcc14:	0728      	lsls	r0, r5, #28
   dcc16:	d5c1      	bpl.n	dcb9c <_strtod_l+0x84>
   dcc18:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   dcc1c:	e7be      	b.n	dcb9c <_strtod_l+0x84>
   dcc1e:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
   dcc22:	e7f7      	b.n	dcc14 <_strtod_l+0xfc>
   dcc24:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
   dcc28:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   dcc2a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   dcc2e:	f202 4233 	addw	r2, r2, #1075	; 0x433
   dcc32:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   dcc36:	e7ed      	b.n	dcc14 <_strtod_l+0xfc>
   dcc38:	f8df b184 	ldr.w	fp, [pc, #388]	; dcdc0 <_strtod_l+0x2a8>
   dcc3c:	f04f 0a00 	mov.w	sl, #0
   dcc40:	e7e8      	b.n	dcc14 <_strtod_l+0xfc>
   dcc42:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   dcc46:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   dcc4a:	e7e3      	b.n	dcc14 <_strtod_l+0xfc>
   dcc4c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   dcc4e:	1c5a      	adds	r2, r3, #1
   dcc50:	921d      	str	r2, [sp, #116]	; 0x74
   dcc52:	785b      	ldrb	r3, [r3, #1]
   dcc54:	2b30      	cmp	r3, #48	; 0x30
   dcc56:	d0f9      	beq.n	dcc4c <_strtod_l+0x134>
   dcc58:	2b00      	cmp	r3, #0
   dcc5a:	d09f      	beq.n	dcb9c <_strtod_l+0x84>
   dcc5c:	2301      	movs	r3, #1
   dcc5e:	f04f 0900 	mov.w	r9, #0
   dcc62:	9304      	str	r3, [sp, #16]
   dcc64:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   dcc66:	930a      	str	r3, [sp, #40]	; 0x28
   dcc68:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
   dcc6c:	464f      	mov	r7, r9
   dcc6e:	220a      	movs	r2, #10
   dcc70:	981d      	ldr	r0, [sp, #116]	; 0x74
   dcc72:	7806      	ldrb	r6, [r0, #0]
   dcc74:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   dcc78:	b2d9      	uxtb	r1, r3
   dcc7a:	2909      	cmp	r1, #9
   dcc7c:	d92a      	bls.n	dccd4 <_strtod_l+0x1bc>
   dcc7e:	9907      	ldr	r1, [sp, #28]
   dcc80:	462a      	mov	r2, r5
   dcc82:	f7ff feda 	bl	dca3a <strncmp>
   dcc86:	b398      	cbz	r0, dccf0 <_strtod_l+0x1d8>
   dcc88:	2000      	movs	r0, #0
   dcc8a:	4633      	mov	r3, r6
   dcc8c:	463d      	mov	r5, r7
   dcc8e:	9007      	str	r0, [sp, #28]
   dcc90:	4602      	mov	r2, r0
   dcc92:	2b65      	cmp	r3, #101	; 0x65
   dcc94:	d001      	beq.n	dcc9a <_strtod_l+0x182>
   dcc96:	2b45      	cmp	r3, #69	; 0x45
   dcc98:	d118      	bne.n	dcccc <_strtod_l+0x1b4>
   dcc9a:	b91d      	cbnz	r5, dcca4 <_strtod_l+0x18c>
   dcc9c:	9b04      	ldr	r3, [sp, #16]
   dcc9e:	4303      	orrs	r3, r0
   dcca0:	d098      	beq.n	dcbd4 <_strtod_l+0xbc>
   dcca2:	2500      	movs	r5, #0
   dcca4:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
   dcca8:	f108 0301 	add.w	r3, r8, #1
   dccac:	931d      	str	r3, [sp, #116]	; 0x74
   dccae:	f898 3001 	ldrb.w	r3, [r8, #1]
   dccb2:	2b2b      	cmp	r3, #43	; 0x2b
   dccb4:	d075      	beq.n	dcda2 <_strtod_l+0x28a>
   dccb6:	2b2d      	cmp	r3, #45	; 0x2d
   dccb8:	d07b      	beq.n	dcdb2 <_strtod_l+0x29a>
   dccba:	f04f 0c00 	mov.w	ip, #0
   dccbe:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   dccc2:	2909      	cmp	r1, #9
   dccc4:	f240 8082 	bls.w	dcdcc <_strtod_l+0x2b4>
   dccc8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
   dcccc:	2600      	movs	r6, #0
   dccce:	e09d      	b.n	dce0c <_strtod_l+0x2f4>
   dccd0:	2300      	movs	r3, #0
   dccd2:	e7c4      	b.n	dcc5e <_strtod_l+0x146>
   dccd4:	2f08      	cmp	r7, #8
   dccd6:	bfd8      	it	le
   dccd8:	9909      	ldrle	r1, [sp, #36]	; 0x24
   dccda:	f100 0001 	add.w	r0, r0, #1
   dccde:	bfda      	itte	le
   dcce0:	fb02 3301 	mlale	r3, r2, r1, r3
   dcce4:	9309      	strle	r3, [sp, #36]	; 0x24
   dcce6:	fb02 3909 	mlagt	r9, r2, r9, r3
   dccea:	3701      	adds	r7, #1
   dccec:	901d      	str	r0, [sp, #116]	; 0x74
   dccee:	e7bf      	b.n	dcc70 <_strtod_l+0x158>
   dccf0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   dccf2:	195a      	adds	r2, r3, r5
   dccf4:	921d      	str	r2, [sp, #116]	; 0x74
   dccf6:	5d5b      	ldrb	r3, [r3, r5]
   dccf8:	2f00      	cmp	r7, #0
   dccfa:	d037      	beq.n	dcd6c <_strtod_l+0x254>
   dccfc:	9007      	str	r0, [sp, #28]
   dccfe:	463d      	mov	r5, r7
   dcd00:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   dcd04:	2a09      	cmp	r2, #9
   dcd06:	d912      	bls.n	dcd2e <_strtod_l+0x216>
   dcd08:	2201      	movs	r2, #1
   dcd0a:	e7c2      	b.n	dcc92 <_strtod_l+0x17a>
   dcd0c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   dcd0e:	1c5a      	adds	r2, r3, #1
   dcd10:	921d      	str	r2, [sp, #116]	; 0x74
   dcd12:	785b      	ldrb	r3, [r3, #1]
   dcd14:	3001      	adds	r0, #1
   dcd16:	2b30      	cmp	r3, #48	; 0x30
   dcd18:	d0f8      	beq.n	dcd0c <_strtod_l+0x1f4>
   dcd1a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
   dcd1e:	2a08      	cmp	r2, #8
   dcd20:	f200 84db 	bhi.w	dd6da <_strtod_l+0xbc2>
   dcd24:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   dcd26:	9007      	str	r0, [sp, #28]
   dcd28:	2000      	movs	r0, #0
   dcd2a:	920a      	str	r2, [sp, #40]	; 0x28
   dcd2c:	4605      	mov	r5, r0
   dcd2e:	3b30      	subs	r3, #48	; 0x30
   dcd30:	f100 0201 	add.w	r2, r0, #1
   dcd34:	d014      	beq.n	dcd60 <_strtod_l+0x248>
   dcd36:	9907      	ldr	r1, [sp, #28]
   dcd38:	4411      	add	r1, r2
   dcd3a:	9107      	str	r1, [sp, #28]
   dcd3c:	462a      	mov	r2, r5
   dcd3e:	eb00 0e05 	add.w	lr, r0, r5
   dcd42:	210a      	movs	r1, #10
   dcd44:	4572      	cmp	r2, lr
   dcd46:	d113      	bne.n	dcd70 <_strtod_l+0x258>
   dcd48:	182a      	adds	r2, r5, r0
   dcd4a:	2a08      	cmp	r2, #8
   dcd4c:	f105 0501 	add.w	r5, r5, #1
   dcd50:	4405      	add	r5, r0
   dcd52:	dc1c      	bgt.n	dcd8e <_strtod_l+0x276>
   dcd54:	9909      	ldr	r1, [sp, #36]	; 0x24
   dcd56:	220a      	movs	r2, #10
   dcd58:	fb02 3301 	mla	r3, r2, r1, r3
   dcd5c:	9309      	str	r3, [sp, #36]	; 0x24
   dcd5e:	2200      	movs	r2, #0
   dcd60:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   dcd62:	1c59      	adds	r1, r3, #1
   dcd64:	911d      	str	r1, [sp, #116]	; 0x74
   dcd66:	785b      	ldrb	r3, [r3, #1]
   dcd68:	4610      	mov	r0, r2
   dcd6a:	e7c9      	b.n	dcd00 <_strtod_l+0x1e8>
   dcd6c:	4638      	mov	r0, r7
   dcd6e:	e7d2      	b.n	dcd16 <_strtod_l+0x1fe>
   dcd70:	2a08      	cmp	r2, #8
   dcd72:	dc04      	bgt.n	dcd7e <_strtod_l+0x266>
   dcd74:	9e09      	ldr	r6, [sp, #36]	; 0x24
   dcd76:	434e      	muls	r6, r1
   dcd78:	9609      	str	r6, [sp, #36]	; 0x24
   dcd7a:	3201      	adds	r2, #1
   dcd7c:	e7e2      	b.n	dcd44 <_strtod_l+0x22c>
   dcd7e:	f102 0c01 	add.w	ip, r2, #1
   dcd82:	f1bc 0f10 	cmp.w	ip, #16
   dcd86:	bfd8      	it	le
   dcd88:	fb01 f909 	mulle.w	r9, r1, r9
   dcd8c:	e7f5      	b.n	dcd7a <_strtod_l+0x262>
   dcd8e:	2d10      	cmp	r5, #16
   dcd90:	bfdc      	itt	le
   dcd92:	220a      	movle	r2, #10
   dcd94:	fb02 3909 	mlale	r9, r2, r9, r3
   dcd98:	e7e1      	b.n	dcd5e <_strtod_l+0x246>
   dcd9a:	2300      	movs	r3, #0
   dcd9c:	9307      	str	r3, [sp, #28]
   dcd9e:	2201      	movs	r2, #1
   dcda0:	e77c      	b.n	dcc9c <_strtod_l+0x184>
   dcda2:	f04f 0c00 	mov.w	ip, #0
   dcda6:	f108 0302 	add.w	r3, r8, #2
   dcdaa:	931d      	str	r3, [sp, #116]	; 0x74
   dcdac:	f898 3002 	ldrb.w	r3, [r8, #2]
   dcdb0:	e785      	b.n	dccbe <_strtod_l+0x1a6>
   dcdb2:	f04f 0c01 	mov.w	ip, #1
   dcdb6:	e7f6      	b.n	dcda6 <_strtod_l+0x28e>
   dcdb8:	000dfc3c 	.word	0x000dfc3c
   dcdbc:	000dfae4 	.word	0x000dfae4
   dcdc0:	7ff00000 	.word	0x7ff00000
   dcdc4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   dcdc6:	1c59      	adds	r1, r3, #1
   dcdc8:	911d      	str	r1, [sp, #116]	; 0x74
   dcdca:	785b      	ldrb	r3, [r3, #1]
   dcdcc:	2b30      	cmp	r3, #48	; 0x30
   dcdce:	d0f9      	beq.n	dcdc4 <_strtod_l+0x2ac>
   dcdd0:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
   dcdd4:	2908      	cmp	r1, #8
   dcdd6:	f63f af79 	bhi.w	dcccc <_strtod_l+0x1b4>
   dcdda:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
   dcdde:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   dcde0:	9308      	str	r3, [sp, #32]
   dcde2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   dcde4:	1c59      	adds	r1, r3, #1
   dcde6:	911d      	str	r1, [sp, #116]	; 0x74
   dcde8:	785b      	ldrb	r3, [r3, #1]
   dcdea:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
   dcdee:	2e09      	cmp	r6, #9
   dcdf0:	d937      	bls.n	dce62 <_strtod_l+0x34a>
   dcdf2:	9e08      	ldr	r6, [sp, #32]
   dcdf4:	1b89      	subs	r1, r1, r6
   dcdf6:	2908      	cmp	r1, #8
   dcdf8:	f644 661f 	movw	r6, #19999	; 0x4e1f
   dcdfc:	dc02      	bgt.n	dce04 <_strtod_l+0x2ec>
   dcdfe:	4576      	cmp	r6, lr
   dce00:	bfa8      	it	ge
   dce02:	4676      	movge	r6, lr
   dce04:	f1bc 0f00 	cmp.w	ip, #0
   dce08:	d000      	beq.n	dce0c <_strtod_l+0x2f4>
   dce0a:	4276      	negs	r6, r6
   dce0c:	2d00      	cmp	r5, #0
   dce0e:	d14f      	bne.n	dceb0 <_strtod_l+0x398>
   dce10:	9904      	ldr	r1, [sp, #16]
   dce12:	4301      	orrs	r1, r0
   dce14:	f47f aec2 	bne.w	dcb9c <_strtod_l+0x84>
   dce18:	2a00      	cmp	r2, #0
   dce1a:	f47f aedb 	bne.w	dcbd4 <_strtod_l+0xbc>
   dce1e:	2b69      	cmp	r3, #105	; 0x69
   dce20:	d027      	beq.n	dce72 <_strtod_l+0x35a>
   dce22:	dc24      	bgt.n	dce6e <_strtod_l+0x356>
   dce24:	2b49      	cmp	r3, #73	; 0x49
   dce26:	d024      	beq.n	dce72 <_strtod_l+0x35a>
   dce28:	2b4e      	cmp	r3, #78	; 0x4e
   dce2a:	f47f aed3 	bne.w	dcbd4 <_strtod_l+0xbc>
   dce2e:	499e      	ldr	r1, [pc, #632]	; (dd0a8 <_strtod_l+0x590>)
   dce30:	a81d      	add	r0, sp, #116	; 0x74
   dce32:	f001 f86d 	bl	ddf10 <__match>
   dce36:	2800      	cmp	r0, #0
   dce38:	f43f aecc 	beq.w	dcbd4 <_strtod_l+0xbc>
   dce3c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   dce3e:	781b      	ldrb	r3, [r3, #0]
   dce40:	2b28      	cmp	r3, #40	; 0x28
   dce42:	d12d      	bne.n	dcea0 <_strtod_l+0x388>
   dce44:	4999      	ldr	r1, [pc, #612]	; (dd0ac <_strtod_l+0x594>)
   dce46:	aa20      	add	r2, sp, #128	; 0x80
   dce48:	a81d      	add	r0, sp, #116	; 0x74
   dce4a:	f001 f875 	bl	ddf38 <__hexnan>
   dce4e:	2805      	cmp	r0, #5
   dce50:	d126      	bne.n	dcea0 <_strtod_l+0x388>
   dce52:	9b21      	ldr	r3, [sp, #132]	; 0x84
   dce54:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
   dce58:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   dce5c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   dce60:	e69c      	b.n	dcb9c <_strtod_l+0x84>
   dce62:	210a      	movs	r1, #10
   dce64:	fb01 3e0e 	mla	lr, r1, lr, r3
   dce68:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   dce6c:	e7b9      	b.n	dcde2 <_strtod_l+0x2ca>
   dce6e:	2b6e      	cmp	r3, #110	; 0x6e
   dce70:	e7db      	b.n	dce2a <_strtod_l+0x312>
   dce72:	498f      	ldr	r1, [pc, #572]	; (dd0b0 <_strtod_l+0x598>)
   dce74:	a81d      	add	r0, sp, #116	; 0x74
   dce76:	f001 f84b 	bl	ddf10 <__match>
   dce7a:	2800      	cmp	r0, #0
   dce7c:	f43f aeaa 	beq.w	dcbd4 <_strtod_l+0xbc>
   dce80:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   dce82:	498c      	ldr	r1, [pc, #560]	; (dd0b4 <_strtod_l+0x59c>)
   dce84:	3b01      	subs	r3, #1
   dce86:	a81d      	add	r0, sp, #116	; 0x74
   dce88:	931d      	str	r3, [sp, #116]	; 0x74
   dce8a:	f001 f841 	bl	ddf10 <__match>
   dce8e:	b910      	cbnz	r0, dce96 <_strtod_l+0x37e>
   dce90:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   dce92:	3301      	adds	r3, #1
   dce94:	931d      	str	r3, [sp, #116]	; 0x74
   dce96:	f8df b22c 	ldr.w	fp, [pc, #556]	; dd0c4 <_strtod_l+0x5ac>
   dce9a:	f04f 0a00 	mov.w	sl, #0
   dce9e:	e67d      	b.n	dcb9c <_strtod_l+0x84>
   dcea0:	4885      	ldr	r0, [pc, #532]	; (dd0b8 <_strtod_l+0x5a0>)
   dcea2:	f001 fd49 	bl	de938 <nan>
   dcea6:	ed8d 0b04 	vstr	d0, [sp, #16]
   dceaa:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
   dceae:	e675      	b.n	dcb9c <_strtod_l+0x84>
   dceb0:	9b07      	ldr	r3, [sp, #28]
   dceb2:	9809      	ldr	r0, [sp, #36]	; 0x24
   dceb4:	1af3      	subs	r3, r6, r3
   dceb6:	2f00      	cmp	r7, #0
   dceb8:	bf08      	it	eq
   dceba:	462f      	moveq	r7, r5
   dcebc:	2d10      	cmp	r5, #16
   dcebe:	9308      	str	r3, [sp, #32]
   dcec0:	46a8      	mov	r8, r5
   dcec2:	bfa8      	it	ge
   dcec4:	f04f 0810 	movge.w	r8, #16
   dcec8:	f7fe ff80 	bl	dbdcc <__aeabi_ui2d>
   dcecc:	2d09      	cmp	r5, #9
   dcece:	4682      	mov	sl, r0
   dced0:	468b      	mov	fp, r1
   dced2:	dd13      	ble.n	dcefc <_strtod_l+0x3e4>
   dced4:	4b79      	ldr	r3, [pc, #484]	; (dd0bc <_strtod_l+0x5a4>)
   dced6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   dceda:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   dcede:	f7fe ffef 	bl	dbec0 <__aeabi_dmul>
   dcee2:	4682      	mov	sl, r0
   dcee4:	4648      	mov	r0, r9
   dcee6:	468b      	mov	fp, r1
   dcee8:	f7fe ff70 	bl	dbdcc <__aeabi_ui2d>
   dceec:	4602      	mov	r2, r0
   dceee:	460b      	mov	r3, r1
   dcef0:	4650      	mov	r0, sl
   dcef2:	4659      	mov	r1, fp
   dcef4:	f7fe fe2e 	bl	dbb54 <__adddf3>
   dcef8:	4682      	mov	sl, r0
   dcefa:	468b      	mov	fp, r1
   dcefc:	2d0f      	cmp	r5, #15
   dcefe:	dc38      	bgt.n	dcf72 <_strtod_l+0x45a>
   dcf00:	9b08      	ldr	r3, [sp, #32]
   dcf02:	2b00      	cmp	r3, #0
   dcf04:	f43f ae4a 	beq.w	dcb9c <_strtod_l+0x84>
   dcf08:	dd24      	ble.n	dcf54 <_strtod_l+0x43c>
   dcf0a:	2b16      	cmp	r3, #22
   dcf0c:	dc0b      	bgt.n	dcf26 <_strtod_l+0x40e>
   dcf0e:	4d6b      	ldr	r5, [pc, #428]	; (dd0bc <_strtod_l+0x5a4>)
   dcf10:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
   dcf14:	e9d5 0100 	ldrd	r0, r1, [r5]
   dcf18:	4652      	mov	r2, sl
   dcf1a:	465b      	mov	r3, fp
   dcf1c:	f7fe ffd0 	bl	dbec0 <__aeabi_dmul>
   dcf20:	4682      	mov	sl, r0
   dcf22:	468b      	mov	fp, r1
   dcf24:	e63a      	b.n	dcb9c <_strtod_l+0x84>
   dcf26:	9a08      	ldr	r2, [sp, #32]
   dcf28:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   dcf2c:	4293      	cmp	r3, r2
   dcf2e:	db20      	blt.n	dcf72 <_strtod_l+0x45a>
   dcf30:	4c62      	ldr	r4, [pc, #392]	; (dd0bc <_strtod_l+0x5a4>)
   dcf32:	f1c5 050f 	rsb	r5, r5, #15
   dcf36:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   dcf3a:	4652      	mov	r2, sl
   dcf3c:	465b      	mov	r3, fp
   dcf3e:	e9d1 0100 	ldrd	r0, r1, [r1]
   dcf42:	f7fe ffbd 	bl	dbec0 <__aeabi_dmul>
   dcf46:	9b08      	ldr	r3, [sp, #32]
   dcf48:	1b5d      	subs	r5, r3, r5
   dcf4a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   dcf4e:	e9d4 2300 	ldrd	r2, r3, [r4]
   dcf52:	e7e3      	b.n	dcf1c <_strtod_l+0x404>
   dcf54:	9b08      	ldr	r3, [sp, #32]
   dcf56:	3316      	adds	r3, #22
   dcf58:	db0b      	blt.n	dcf72 <_strtod_l+0x45a>
   dcf5a:	9b07      	ldr	r3, [sp, #28]
   dcf5c:	4a57      	ldr	r2, [pc, #348]	; (dd0bc <_strtod_l+0x5a4>)
   dcf5e:	1b9e      	subs	r6, r3, r6
   dcf60:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
   dcf64:	e9d6 2300 	ldrd	r2, r3, [r6]
   dcf68:	4650      	mov	r0, sl
   dcf6a:	4659      	mov	r1, fp
   dcf6c:	f7ff f8d2 	bl	dc114 <__aeabi_ddiv>
   dcf70:	e7d6      	b.n	dcf20 <_strtod_l+0x408>
   dcf72:	9b08      	ldr	r3, [sp, #32]
   dcf74:	eba5 0808 	sub.w	r8, r5, r8
   dcf78:	4498      	add	r8, r3
   dcf7a:	f1b8 0f00 	cmp.w	r8, #0
   dcf7e:	dd71      	ble.n	dd064 <_strtod_l+0x54c>
   dcf80:	f018 030f 	ands.w	r3, r8, #15
   dcf84:	d00a      	beq.n	dcf9c <_strtod_l+0x484>
   dcf86:	494d      	ldr	r1, [pc, #308]	; (dd0bc <_strtod_l+0x5a4>)
   dcf88:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   dcf8c:	4652      	mov	r2, sl
   dcf8e:	465b      	mov	r3, fp
   dcf90:	e9d1 0100 	ldrd	r0, r1, [r1]
   dcf94:	f7fe ff94 	bl	dbec0 <__aeabi_dmul>
   dcf98:	4682      	mov	sl, r0
   dcf9a:	468b      	mov	fp, r1
   dcf9c:	f038 080f 	bics.w	r8, r8, #15
   dcfa0:	d04d      	beq.n	dd03e <_strtod_l+0x526>
   dcfa2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   dcfa6:	dd22      	ble.n	dcfee <_strtod_l+0x4d6>
   dcfa8:	2500      	movs	r5, #0
   dcfaa:	462e      	mov	r6, r5
   dcfac:	9509      	str	r5, [sp, #36]	; 0x24
   dcfae:	9507      	str	r5, [sp, #28]
   dcfb0:	2322      	movs	r3, #34	; 0x22
   dcfb2:	f8df b110 	ldr.w	fp, [pc, #272]	; dd0c4 <_strtod_l+0x5ac>
   dcfb6:	6023      	str	r3, [r4, #0]
   dcfb8:	f04f 0a00 	mov.w	sl, #0
   dcfbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   dcfbe:	2b00      	cmp	r3, #0
   dcfc0:	f43f adec 	beq.w	dcb9c <_strtod_l+0x84>
   dcfc4:	991e      	ldr	r1, [sp, #120]	; 0x78
   dcfc6:	4620      	mov	r0, r4
   dcfc8:	f001 f89b 	bl	de102 <_Bfree>
   dcfcc:	9907      	ldr	r1, [sp, #28]
   dcfce:	4620      	mov	r0, r4
   dcfd0:	f001 f897 	bl	de102 <_Bfree>
   dcfd4:	4631      	mov	r1, r6
   dcfd6:	4620      	mov	r0, r4
   dcfd8:	f001 f893 	bl	de102 <_Bfree>
   dcfdc:	9909      	ldr	r1, [sp, #36]	; 0x24
   dcfde:	4620      	mov	r0, r4
   dcfe0:	f001 f88f 	bl	de102 <_Bfree>
   dcfe4:	4629      	mov	r1, r5
   dcfe6:	4620      	mov	r0, r4
   dcfe8:	f001 f88b 	bl	de102 <_Bfree>
   dcfec:	e5d6      	b.n	dcb9c <_strtod_l+0x84>
   dcfee:	2300      	movs	r3, #0
   dcff0:	ea4f 1828 	mov.w	r8, r8, asr #4
   dcff4:	4650      	mov	r0, sl
   dcff6:	4659      	mov	r1, fp
   dcff8:	4699      	mov	r9, r3
   dcffa:	f1b8 0f01 	cmp.w	r8, #1
   dcffe:	dc21      	bgt.n	dd044 <_strtod_l+0x52c>
   dd000:	b10b      	cbz	r3, dd006 <_strtod_l+0x4ee>
   dd002:	4682      	mov	sl, r0
   dd004:	468b      	mov	fp, r1
   dd006:	4b2e      	ldr	r3, [pc, #184]	; (dd0c0 <_strtod_l+0x5a8>)
   dd008:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   dd00c:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   dd010:	4652      	mov	r2, sl
   dd012:	465b      	mov	r3, fp
   dd014:	e9d9 0100 	ldrd	r0, r1, [r9]
   dd018:	f7fe ff52 	bl	dbec0 <__aeabi_dmul>
   dd01c:	4b29      	ldr	r3, [pc, #164]	; (dd0c4 <_strtod_l+0x5ac>)
   dd01e:	460a      	mov	r2, r1
   dd020:	400b      	ands	r3, r1
   dd022:	4929      	ldr	r1, [pc, #164]	; (dd0c8 <_strtod_l+0x5b0>)
   dd024:	428b      	cmp	r3, r1
   dd026:	4682      	mov	sl, r0
   dd028:	d8be      	bhi.n	dcfa8 <_strtod_l+0x490>
   dd02a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   dd02e:	428b      	cmp	r3, r1
   dd030:	bf86      	itte	hi
   dd032:	f8df b098 	ldrhi.w	fp, [pc, #152]	; dd0cc <_strtod_l+0x5b4>
   dd036:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
   dd03a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   dd03e:	2300      	movs	r3, #0
   dd040:	9304      	str	r3, [sp, #16]
   dd042:	e081      	b.n	dd148 <_strtod_l+0x630>
   dd044:	f018 0f01 	tst.w	r8, #1
   dd048:	d007      	beq.n	dd05a <_strtod_l+0x542>
   dd04a:	4b1d      	ldr	r3, [pc, #116]	; (dd0c0 <_strtod_l+0x5a8>)
   dd04c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
   dd050:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd054:	f7fe ff34 	bl	dbec0 <__aeabi_dmul>
   dd058:	2301      	movs	r3, #1
   dd05a:	f109 0901 	add.w	r9, r9, #1
   dd05e:	ea4f 0868 	mov.w	r8, r8, asr #1
   dd062:	e7ca      	b.n	dcffa <_strtod_l+0x4e2>
   dd064:	d0eb      	beq.n	dd03e <_strtod_l+0x526>
   dd066:	f1c8 0800 	rsb	r8, r8, #0
   dd06a:	f018 020f 	ands.w	r2, r8, #15
   dd06e:	d00a      	beq.n	dd086 <_strtod_l+0x56e>
   dd070:	4b12      	ldr	r3, [pc, #72]	; (dd0bc <_strtod_l+0x5a4>)
   dd072:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   dd076:	4650      	mov	r0, sl
   dd078:	4659      	mov	r1, fp
   dd07a:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd07e:	f7ff f849 	bl	dc114 <__aeabi_ddiv>
   dd082:	4682      	mov	sl, r0
   dd084:	468b      	mov	fp, r1
   dd086:	ea5f 1828 	movs.w	r8, r8, asr #4
   dd08a:	d0d8      	beq.n	dd03e <_strtod_l+0x526>
   dd08c:	f1b8 0f1f 	cmp.w	r8, #31
   dd090:	dd1e      	ble.n	dd0d0 <_strtod_l+0x5b8>
   dd092:	2500      	movs	r5, #0
   dd094:	462e      	mov	r6, r5
   dd096:	9509      	str	r5, [sp, #36]	; 0x24
   dd098:	9507      	str	r5, [sp, #28]
   dd09a:	2322      	movs	r3, #34	; 0x22
   dd09c:	f04f 0a00 	mov.w	sl, #0
   dd0a0:	f04f 0b00 	mov.w	fp, #0
   dd0a4:	6023      	str	r3, [r4, #0]
   dd0a6:	e789      	b.n	dcfbc <_strtod_l+0x4a4>
   dd0a8:	000dfadf 	.word	0x000dfadf
   dd0ac:	000dfaf8 	.word	0x000dfaf8
   dd0b0:	000dfad6 	.word	0x000dfad6
   dd0b4:	000dfad9 	.word	0x000dfad9
   dd0b8:	000df323 	.word	0x000df323
   dd0bc:	000dfc78 	.word	0x000dfc78
   dd0c0:	000dfc50 	.word	0x000dfc50
   dd0c4:	7ff00000 	.word	0x7ff00000
   dd0c8:	7ca00000 	.word	0x7ca00000
   dd0cc:	7fefffff 	.word	0x7fefffff
   dd0d0:	f018 0310 	ands.w	r3, r8, #16
   dd0d4:	bf18      	it	ne
   dd0d6:	236a      	movne	r3, #106	; 0x6a
   dd0d8:	f8df 93b4 	ldr.w	r9, [pc, #948]	; dd490 <_strtod_l+0x978>
   dd0dc:	9304      	str	r3, [sp, #16]
   dd0de:	4650      	mov	r0, sl
   dd0e0:	4659      	mov	r1, fp
   dd0e2:	2300      	movs	r3, #0
   dd0e4:	f018 0f01 	tst.w	r8, #1
   dd0e8:	d004      	beq.n	dd0f4 <_strtod_l+0x5dc>
   dd0ea:	e9d9 2300 	ldrd	r2, r3, [r9]
   dd0ee:	f7fe fee7 	bl	dbec0 <__aeabi_dmul>
   dd0f2:	2301      	movs	r3, #1
   dd0f4:	ea5f 0868 	movs.w	r8, r8, asr #1
   dd0f8:	f109 0908 	add.w	r9, r9, #8
   dd0fc:	d1f2      	bne.n	dd0e4 <_strtod_l+0x5cc>
   dd0fe:	b10b      	cbz	r3, dd104 <_strtod_l+0x5ec>
   dd100:	4682      	mov	sl, r0
   dd102:	468b      	mov	fp, r1
   dd104:	9b04      	ldr	r3, [sp, #16]
   dd106:	b1bb      	cbz	r3, dd138 <_strtod_l+0x620>
   dd108:	f3cb 530a 	ubfx	r3, fp, #20, #11
   dd10c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   dd110:	2b00      	cmp	r3, #0
   dd112:	4659      	mov	r1, fp
   dd114:	dd10      	ble.n	dd138 <_strtod_l+0x620>
   dd116:	2b1f      	cmp	r3, #31
   dd118:	f340 8128 	ble.w	dd36c <_strtod_l+0x854>
   dd11c:	2b34      	cmp	r3, #52	; 0x34
   dd11e:	bfde      	ittt	le
   dd120:	3b20      	suble	r3, #32
   dd122:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
   dd126:	fa02 f303 	lslle.w	r3, r2, r3
   dd12a:	f04f 0a00 	mov.w	sl, #0
   dd12e:	bfcc      	ite	gt
   dd130:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   dd134:	ea03 0b01 	andle.w	fp, r3, r1
   dd138:	2200      	movs	r2, #0
   dd13a:	2300      	movs	r3, #0
   dd13c:	4650      	mov	r0, sl
   dd13e:	4659      	mov	r1, fp
   dd140:	f7ff f926 	bl	dc390 <__aeabi_dcmpeq>
   dd144:	2800      	cmp	r0, #0
   dd146:	d1a4      	bne.n	dd092 <_strtod_l+0x57a>
   dd148:	9b09      	ldr	r3, [sp, #36]	; 0x24
   dd14a:	9300      	str	r3, [sp, #0]
   dd14c:	990a      	ldr	r1, [sp, #40]	; 0x28
   dd14e:	462b      	mov	r3, r5
   dd150:	463a      	mov	r2, r7
   dd152:	4620      	mov	r0, r4
   dd154:	f001 f82a 	bl	de1ac <__s2b>
   dd158:	9009      	str	r0, [sp, #36]	; 0x24
   dd15a:	2800      	cmp	r0, #0
   dd15c:	f43f af24 	beq.w	dcfa8 <_strtod_l+0x490>
   dd160:	9b07      	ldr	r3, [sp, #28]
   dd162:	1b9e      	subs	r6, r3, r6
   dd164:	9b08      	ldr	r3, [sp, #32]
   dd166:	2b00      	cmp	r3, #0
   dd168:	bfb4      	ite	lt
   dd16a:	4633      	movlt	r3, r6
   dd16c:	2300      	movge	r3, #0
   dd16e:	9310      	str	r3, [sp, #64]	; 0x40
   dd170:	9b08      	ldr	r3, [sp, #32]
   dd172:	2500      	movs	r5, #0
   dd174:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   dd178:	9318      	str	r3, [sp, #96]	; 0x60
   dd17a:	462e      	mov	r6, r5
   dd17c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   dd17e:	4620      	mov	r0, r4
   dd180:	6859      	ldr	r1, [r3, #4]
   dd182:	f000 ff8a 	bl	de09a <_Balloc>
   dd186:	9007      	str	r0, [sp, #28]
   dd188:	2800      	cmp	r0, #0
   dd18a:	f43f af11 	beq.w	dcfb0 <_strtod_l+0x498>
   dd18e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   dd190:	691a      	ldr	r2, [r3, #16]
   dd192:	3202      	adds	r2, #2
   dd194:	f103 010c 	add.w	r1, r3, #12
   dd198:	0092      	lsls	r2, r2, #2
   dd19a:	300c      	adds	r0, #12
   dd19c:	f7ff fbaa 	bl	dc8f4 <memcpy>
   dd1a0:	ec4b ab10 	vmov	d0, sl, fp
   dd1a4:	aa20      	add	r2, sp, #128	; 0x80
   dd1a6:	a91f      	add	r1, sp, #124	; 0x7c
   dd1a8:	4620      	mov	r0, r4
   dd1aa:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
   dd1ae:	f001 faed 	bl	de78c <__d2b>
   dd1b2:	901e      	str	r0, [sp, #120]	; 0x78
   dd1b4:	2800      	cmp	r0, #0
   dd1b6:	f43f aefb 	beq.w	dcfb0 <_strtod_l+0x498>
   dd1ba:	2101      	movs	r1, #1
   dd1bc:	4620      	mov	r0, r4
   dd1be:	f001 f883 	bl	de2c8 <__i2b>
   dd1c2:	4606      	mov	r6, r0
   dd1c4:	2800      	cmp	r0, #0
   dd1c6:	f43f aef3 	beq.w	dcfb0 <_strtod_l+0x498>
   dd1ca:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   dd1cc:	9904      	ldr	r1, [sp, #16]
   dd1ce:	2b00      	cmp	r3, #0
   dd1d0:	bfab      	itete	ge
   dd1d2:	9a10      	ldrge	r2, [sp, #64]	; 0x40
   dd1d4:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
   dd1d6:	9f18      	ldrge	r7, [sp, #96]	; 0x60
   dd1d8:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
   dd1dc:	bfac      	ite	ge
   dd1de:	eb03 0902 	addge.w	r9, r3, r2
   dd1e2:	1ad7      	sublt	r7, r2, r3
   dd1e4:	9a20      	ldr	r2, [sp, #128]	; 0x80
   dd1e6:	eba3 0801 	sub.w	r8, r3, r1
   dd1ea:	4490      	add	r8, r2
   dd1ec:	4ba3      	ldr	r3, [pc, #652]	; (dd47c <_strtod_l+0x964>)
   dd1ee:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   dd1f2:	4598      	cmp	r8, r3
   dd1f4:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   dd1f8:	f280 80cc 	bge.w	dd394 <_strtod_l+0x87c>
   dd1fc:	eba3 0308 	sub.w	r3, r3, r8
   dd200:	2b1f      	cmp	r3, #31
   dd202:	eba2 0203 	sub.w	r2, r2, r3
   dd206:	f04f 0101 	mov.w	r1, #1
   dd20a:	f300 80b6 	bgt.w	dd37a <_strtod_l+0x862>
   dd20e:	fa01 f303 	lsl.w	r3, r1, r3
   dd212:	9311      	str	r3, [sp, #68]	; 0x44
   dd214:	2300      	movs	r3, #0
   dd216:	930c      	str	r3, [sp, #48]	; 0x30
   dd218:	eb09 0802 	add.w	r8, r9, r2
   dd21c:	9b04      	ldr	r3, [sp, #16]
   dd21e:	45c1      	cmp	r9, r8
   dd220:	4417      	add	r7, r2
   dd222:	441f      	add	r7, r3
   dd224:	464b      	mov	r3, r9
   dd226:	bfa8      	it	ge
   dd228:	4643      	movge	r3, r8
   dd22a:	42bb      	cmp	r3, r7
   dd22c:	bfa8      	it	ge
   dd22e:	463b      	movge	r3, r7
   dd230:	2b00      	cmp	r3, #0
   dd232:	bfc2      	ittt	gt
   dd234:	eba8 0803 	subgt.w	r8, r8, r3
   dd238:	1aff      	subgt	r7, r7, r3
   dd23a:	eba9 0903 	subgt.w	r9, r9, r3
   dd23e:	9b10      	ldr	r3, [sp, #64]	; 0x40
   dd240:	2b00      	cmp	r3, #0
   dd242:	dd17      	ble.n	dd274 <_strtod_l+0x75c>
   dd244:	4631      	mov	r1, r6
   dd246:	461a      	mov	r2, r3
   dd248:	4620      	mov	r0, r4
   dd24a:	f001 f8e3 	bl	de414 <__pow5mult>
   dd24e:	4606      	mov	r6, r0
   dd250:	2800      	cmp	r0, #0
   dd252:	f43f aead 	beq.w	dcfb0 <_strtod_l+0x498>
   dd256:	4601      	mov	r1, r0
   dd258:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   dd25a:	4620      	mov	r0, r4
   dd25c:	f001 f83d 	bl	de2da <__multiply>
   dd260:	900f      	str	r0, [sp, #60]	; 0x3c
   dd262:	2800      	cmp	r0, #0
   dd264:	f43f aea4 	beq.w	dcfb0 <_strtod_l+0x498>
   dd268:	991e      	ldr	r1, [sp, #120]	; 0x78
   dd26a:	4620      	mov	r0, r4
   dd26c:	f000 ff49 	bl	de102 <_Bfree>
   dd270:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   dd272:	931e      	str	r3, [sp, #120]	; 0x78
   dd274:	f1b8 0f00 	cmp.w	r8, #0
   dd278:	f300 8091 	bgt.w	dd39e <_strtod_l+0x886>
   dd27c:	9b08      	ldr	r3, [sp, #32]
   dd27e:	2b00      	cmp	r3, #0
   dd280:	dd08      	ble.n	dd294 <_strtod_l+0x77c>
   dd282:	9a18      	ldr	r2, [sp, #96]	; 0x60
   dd284:	9907      	ldr	r1, [sp, #28]
   dd286:	4620      	mov	r0, r4
   dd288:	f001 f8c4 	bl	de414 <__pow5mult>
   dd28c:	9007      	str	r0, [sp, #28]
   dd28e:	2800      	cmp	r0, #0
   dd290:	f43f ae8e 	beq.w	dcfb0 <_strtod_l+0x498>
   dd294:	2f00      	cmp	r7, #0
   dd296:	dd08      	ble.n	dd2aa <_strtod_l+0x792>
   dd298:	9907      	ldr	r1, [sp, #28]
   dd29a:	463a      	mov	r2, r7
   dd29c:	4620      	mov	r0, r4
   dd29e:	f001 f907 	bl	de4b0 <__lshift>
   dd2a2:	9007      	str	r0, [sp, #28]
   dd2a4:	2800      	cmp	r0, #0
   dd2a6:	f43f ae83 	beq.w	dcfb0 <_strtod_l+0x498>
   dd2aa:	f1b9 0f00 	cmp.w	r9, #0
   dd2ae:	dd08      	ble.n	dd2c2 <_strtod_l+0x7aa>
   dd2b0:	4631      	mov	r1, r6
   dd2b2:	464a      	mov	r2, r9
   dd2b4:	4620      	mov	r0, r4
   dd2b6:	f001 f8fb 	bl	de4b0 <__lshift>
   dd2ba:	4606      	mov	r6, r0
   dd2bc:	2800      	cmp	r0, #0
   dd2be:	f43f ae77 	beq.w	dcfb0 <_strtod_l+0x498>
   dd2c2:	9a07      	ldr	r2, [sp, #28]
   dd2c4:	991e      	ldr	r1, [sp, #120]	; 0x78
   dd2c6:	4620      	mov	r0, r4
   dd2c8:	f001 f96d 	bl	de5a6 <__mdiff>
   dd2cc:	4605      	mov	r5, r0
   dd2ce:	2800      	cmp	r0, #0
   dd2d0:	f43f ae6e 	beq.w	dcfb0 <_strtod_l+0x498>
   dd2d4:	68c3      	ldr	r3, [r0, #12]
   dd2d6:	930f      	str	r3, [sp, #60]	; 0x3c
   dd2d8:	2300      	movs	r3, #0
   dd2da:	60c3      	str	r3, [r0, #12]
   dd2dc:	4631      	mov	r1, r6
   dd2de:	f001 f946 	bl	de56e <__mcmp>
   dd2e2:	2800      	cmp	r0, #0
   dd2e4:	da65      	bge.n	dd3b2 <_strtod_l+0x89a>
   dd2e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   dd2e8:	ea53 030a 	orrs.w	r3, r3, sl
   dd2ec:	f040 8087 	bne.w	dd3fe <_strtod_l+0x8e6>
   dd2f0:	f3cb 0313 	ubfx	r3, fp, #0, #20
   dd2f4:	2b00      	cmp	r3, #0
   dd2f6:	f040 8082 	bne.w	dd3fe <_strtod_l+0x8e6>
   dd2fa:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   dd2fe:	0d1b      	lsrs	r3, r3, #20
   dd300:	051b      	lsls	r3, r3, #20
   dd302:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   dd306:	d97a      	bls.n	dd3fe <_strtod_l+0x8e6>
   dd308:	696b      	ldr	r3, [r5, #20]
   dd30a:	b913      	cbnz	r3, dd312 <_strtod_l+0x7fa>
   dd30c:	692b      	ldr	r3, [r5, #16]
   dd30e:	2b01      	cmp	r3, #1
   dd310:	dd75      	ble.n	dd3fe <_strtod_l+0x8e6>
   dd312:	4629      	mov	r1, r5
   dd314:	2201      	movs	r2, #1
   dd316:	4620      	mov	r0, r4
   dd318:	f001 f8ca 	bl	de4b0 <__lshift>
   dd31c:	4631      	mov	r1, r6
   dd31e:	4605      	mov	r5, r0
   dd320:	f001 f925 	bl	de56e <__mcmp>
   dd324:	2800      	cmp	r0, #0
   dd326:	dd6a      	ble.n	dd3fe <_strtod_l+0x8e6>
   dd328:	9904      	ldr	r1, [sp, #16]
   dd32a:	4a55      	ldr	r2, [pc, #340]	; (dd480 <_strtod_l+0x968>)
   dd32c:	465b      	mov	r3, fp
   dd32e:	2900      	cmp	r1, #0
   dd330:	f000 8085 	beq.w	dd43e <_strtod_l+0x926>
   dd334:	ea02 010b 	and.w	r1, r2, fp
   dd338:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   dd33c:	dc7f      	bgt.n	dd43e <_strtod_l+0x926>
   dd33e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   dd342:	f77f aeaa 	ble.w	dd09a <_strtod_l+0x582>
   dd346:	4a4f      	ldr	r2, [pc, #316]	; (dd484 <_strtod_l+0x96c>)
   dd348:	2300      	movs	r3, #0
   dd34a:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
   dd34e:	4650      	mov	r0, sl
   dd350:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
   dd354:	4659      	mov	r1, fp
   dd356:	f7fe fdb3 	bl	dbec0 <__aeabi_dmul>
   dd35a:	460b      	mov	r3, r1
   dd35c:	4303      	orrs	r3, r0
   dd35e:	bf08      	it	eq
   dd360:	2322      	moveq	r3, #34	; 0x22
   dd362:	4682      	mov	sl, r0
   dd364:	468b      	mov	fp, r1
   dd366:	bf08      	it	eq
   dd368:	6023      	streq	r3, [r4, #0]
   dd36a:	e62b      	b.n	dcfc4 <_strtod_l+0x4ac>
   dd36c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   dd370:	fa02 f303 	lsl.w	r3, r2, r3
   dd374:	ea03 0a0a 	and.w	sl, r3, sl
   dd378:	e6de      	b.n	dd138 <_strtod_l+0x620>
   dd37a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
   dd37e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
   dd382:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
   dd386:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
   dd38a:	fa01 f308 	lsl.w	r3, r1, r8
   dd38e:	930c      	str	r3, [sp, #48]	; 0x30
   dd390:	9111      	str	r1, [sp, #68]	; 0x44
   dd392:	e741      	b.n	dd218 <_strtod_l+0x700>
   dd394:	2300      	movs	r3, #0
   dd396:	930c      	str	r3, [sp, #48]	; 0x30
   dd398:	2301      	movs	r3, #1
   dd39a:	9311      	str	r3, [sp, #68]	; 0x44
   dd39c:	e73c      	b.n	dd218 <_strtod_l+0x700>
   dd39e:	991e      	ldr	r1, [sp, #120]	; 0x78
   dd3a0:	4642      	mov	r2, r8
   dd3a2:	4620      	mov	r0, r4
   dd3a4:	f001 f884 	bl	de4b0 <__lshift>
   dd3a8:	901e      	str	r0, [sp, #120]	; 0x78
   dd3aa:	2800      	cmp	r0, #0
   dd3ac:	f47f af66 	bne.w	dd27c <_strtod_l+0x764>
   dd3b0:	e5fe      	b.n	dcfb0 <_strtod_l+0x498>
   dd3b2:	465f      	mov	r7, fp
   dd3b4:	d16e      	bne.n	dd494 <_strtod_l+0x97c>
   dd3b6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   dd3b8:	f3cb 0313 	ubfx	r3, fp, #0, #20
   dd3bc:	b342      	cbz	r2, dd410 <_strtod_l+0x8f8>
   dd3be:	4a32      	ldr	r2, [pc, #200]	; (dd488 <_strtod_l+0x970>)
   dd3c0:	4293      	cmp	r3, r2
   dd3c2:	d128      	bne.n	dd416 <_strtod_l+0x8fe>
   dd3c4:	9b04      	ldr	r3, [sp, #16]
   dd3c6:	4650      	mov	r0, sl
   dd3c8:	b1eb      	cbz	r3, dd406 <_strtod_l+0x8ee>
   dd3ca:	4a2d      	ldr	r2, [pc, #180]	; (dd480 <_strtod_l+0x968>)
   dd3cc:	403a      	ands	r2, r7
   dd3ce:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
   dd3d2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   dd3d6:	d819      	bhi.n	dd40c <_strtod_l+0x8f4>
   dd3d8:	0d12      	lsrs	r2, r2, #20
   dd3da:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   dd3de:	fa01 f303 	lsl.w	r3, r1, r3
   dd3e2:	4298      	cmp	r0, r3
   dd3e4:	d117      	bne.n	dd416 <_strtod_l+0x8fe>
   dd3e6:	4b29      	ldr	r3, [pc, #164]	; (dd48c <_strtod_l+0x974>)
   dd3e8:	429f      	cmp	r7, r3
   dd3ea:	d102      	bne.n	dd3f2 <_strtod_l+0x8da>
   dd3ec:	3001      	adds	r0, #1
   dd3ee:	f43f addf 	beq.w	dcfb0 <_strtod_l+0x498>
   dd3f2:	4b23      	ldr	r3, [pc, #140]	; (dd480 <_strtod_l+0x968>)
   dd3f4:	403b      	ands	r3, r7
   dd3f6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   dd3fa:	f04f 0a00 	mov.w	sl, #0
   dd3fe:	9b04      	ldr	r3, [sp, #16]
   dd400:	2b00      	cmp	r3, #0
   dd402:	d1a0      	bne.n	dd346 <_strtod_l+0x82e>
   dd404:	e5de      	b.n	dcfc4 <_strtod_l+0x4ac>
   dd406:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   dd40a:	e7ea      	b.n	dd3e2 <_strtod_l+0x8ca>
   dd40c:	460b      	mov	r3, r1
   dd40e:	e7e8      	b.n	dd3e2 <_strtod_l+0x8ca>
   dd410:	ea53 030a 	orrs.w	r3, r3, sl
   dd414:	d088      	beq.n	dd328 <_strtod_l+0x810>
   dd416:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   dd418:	b1db      	cbz	r3, dd452 <_strtod_l+0x93a>
   dd41a:	423b      	tst	r3, r7
   dd41c:	d0ef      	beq.n	dd3fe <_strtod_l+0x8e6>
   dd41e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   dd420:	9a04      	ldr	r2, [sp, #16]
   dd422:	4650      	mov	r0, sl
   dd424:	4659      	mov	r1, fp
   dd426:	b1c3      	cbz	r3, dd45a <_strtod_l+0x942>
   dd428:	f7ff fb57 	bl	dcada <sulp>
   dd42c:	4602      	mov	r2, r0
   dd42e:	460b      	mov	r3, r1
   dd430:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   dd434:	f7fe fb8e 	bl	dbb54 <__adddf3>
   dd438:	4682      	mov	sl, r0
   dd43a:	468b      	mov	fp, r1
   dd43c:	e7df      	b.n	dd3fe <_strtod_l+0x8e6>
   dd43e:	4013      	ands	r3, r2
   dd440:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   dd444:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   dd448:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   dd44c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   dd450:	e7d5      	b.n	dd3fe <_strtod_l+0x8e6>
   dd452:	9b11      	ldr	r3, [sp, #68]	; 0x44
   dd454:	ea13 0f0a 	tst.w	r3, sl
   dd458:	e7e0      	b.n	dd41c <_strtod_l+0x904>
   dd45a:	f7ff fb3e 	bl	dcada <sulp>
   dd45e:	4602      	mov	r2, r0
   dd460:	460b      	mov	r3, r1
   dd462:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   dd466:	f7fe fb73 	bl	dbb50 <__aeabi_dsub>
   dd46a:	2200      	movs	r2, #0
   dd46c:	2300      	movs	r3, #0
   dd46e:	4682      	mov	sl, r0
   dd470:	468b      	mov	fp, r1
   dd472:	f7fe ff8d 	bl	dc390 <__aeabi_dcmpeq>
   dd476:	2800      	cmp	r0, #0
   dd478:	d0c1      	beq.n	dd3fe <_strtod_l+0x8e6>
   dd47a:	e60e      	b.n	dd09a <_strtod_l+0x582>
   dd47c:	fffffc02 	.word	0xfffffc02
   dd480:	7ff00000 	.word	0x7ff00000
   dd484:	39500000 	.word	0x39500000
   dd488:	000fffff 	.word	0x000fffff
   dd48c:	7fefffff 	.word	0x7fefffff
   dd490:	000dfb10 	.word	0x000dfb10
   dd494:	4631      	mov	r1, r6
   dd496:	4628      	mov	r0, r5
   dd498:	f001 f9c8 	bl	de82c <__ratio>
   dd49c:	ec59 8b10 	vmov	r8, r9, d0
   dd4a0:	ee10 0a10 	vmov	r0, s0
   dd4a4:	2200      	movs	r2, #0
   dd4a6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   dd4aa:	4649      	mov	r1, r9
   dd4ac:	f7fe ff84 	bl	dc3b8 <__aeabi_dcmple>
   dd4b0:	2800      	cmp	r0, #0
   dd4b2:	d07c      	beq.n	dd5ae <_strtod_l+0xa96>
   dd4b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   dd4b6:	2b00      	cmp	r3, #0
   dd4b8:	d04c      	beq.n	dd554 <_strtod_l+0xa3c>
   dd4ba:	4b95      	ldr	r3, [pc, #596]	; (dd710 <_strtod_l+0xbf8>)
   dd4bc:	2200      	movs	r2, #0
   dd4be:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   dd4c2:	f8df 924c 	ldr.w	r9, [pc, #588]	; dd710 <_strtod_l+0xbf8>
   dd4c6:	f04f 0800 	mov.w	r8, #0
   dd4ca:	4b92      	ldr	r3, [pc, #584]	; (dd714 <_strtod_l+0xbfc>)
   dd4cc:	403b      	ands	r3, r7
   dd4ce:	9311      	str	r3, [sp, #68]	; 0x44
   dd4d0:	9a11      	ldr	r2, [sp, #68]	; 0x44
   dd4d2:	4b91      	ldr	r3, [pc, #580]	; (dd718 <_strtod_l+0xc00>)
   dd4d4:	429a      	cmp	r2, r3
   dd4d6:	f040 80b2 	bne.w	dd63e <_strtod_l+0xb26>
   dd4da:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   dd4de:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   dd4e2:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
   dd4e6:	ec4b ab10 	vmov	d0, sl, fp
   dd4ea:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
   dd4ee:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   dd4f2:	f001 f8cf 	bl	de694 <__ulp>
   dd4f6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   dd4fa:	ec53 2b10 	vmov	r2, r3, d0
   dd4fe:	f7fe fcdf 	bl	dbec0 <__aeabi_dmul>
   dd502:	4652      	mov	r2, sl
   dd504:	465b      	mov	r3, fp
   dd506:	f7fe fb25 	bl	dbb54 <__adddf3>
   dd50a:	460b      	mov	r3, r1
   dd50c:	4981      	ldr	r1, [pc, #516]	; (dd714 <_strtod_l+0xbfc>)
   dd50e:	4a83      	ldr	r2, [pc, #524]	; (dd71c <_strtod_l+0xc04>)
   dd510:	4019      	ands	r1, r3
   dd512:	4291      	cmp	r1, r2
   dd514:	4682      	mov	sl, r0
   dd516:	d95e      	bls.n	dd5d6 <_strtod_l+0xabe>
   dd518:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   dd51a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   dd51e:	4293      	cmp	r3, r2
   dd520:	d103      	bne.n	dd52a <_strtod_l+0xa12>
   dd522:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   dd524:	3301      	adds	r3, #1
   dd526:	f43f ad43 	beq.w	dcfb0 <_strtod_l+0x498>
   dd52a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; dd728 <_strtod_l+0xc10>
   dd52e:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   dd532:	991e      	ldr	r1, [sp, #120]	; 0x78
   dd534:	4620      	mov	r0, r4
   dd536:	f000 fde4 	bl	de102 <_Bfree>
   dd53a:	9907      	ldr	r1, [sp, #28]
   dd53c:	4620      	mov	r0, r4
   dd53e:	f000 fde0 	bl	de102 <_Bfree>
   dd542:	4631      	mov	r1, r6
   dd544:	4620      	mov	r0, r4
   dd546:	f000 fddc 	bl	de102 <_Bfree>
   dd54a:	4629      	mov	r1, r5
   dd54c:	4620      	mov	r0, r4
   dd54e:	f000 fdd8 	bl	de102 <_Bfree>
   dd552:	e613      	b.n	dd17c <_strtod_l+0x664>
   dd554:	f1ba 0f00 	cmp.w	sl, #0
   dd558:	d11b      	bne.n	dd592 <_strtod_l+0xa7a>
   dd55a:	f3cb 0313 	ubfx	r3, fp, #0, #20
   dd55e:	b9f3      	cbnz	r3, dd59e <_strtod_l+0xa86>
   dd560:	4b6b      	ldr	r3, [pc, #428]	; (dd710 <_strtod_l+0xbf8>)
   dd562:	2200      	movs	r2, #0
   dd564:	4640      	mov	r0, r8
   dd566:	4649      	mov	r1, r9
   dd568:	f7fe ff1c 	bl	dc3a4 <__aeabi_dcmplt>
   dd56c:	b9d0      	cbnz	r0, dd5a4 <_strtod_l+0xa8c>
   dd56e:	4640      	mov	r0, r8
   dd570:	4649      	mov	r1, r9
   dd572:	4b6b      	ldr	r3, [pc, #428]	; (dd720 <_strtod_l+0xc08>)
   dd574:	2200      	movs	r2, #0
   dd576:	f7fe fca3 	bl	dbec0 <__aeabi_dmul>
   dd57a:	4680      	mov	r8, r0
   dd57c:	4689      	mov	r9, r1
   dd57e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   dd582:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
   dd586:	931b      	str	r3, [sp, #108]	; 0x6c
   dd588:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
   dd58c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   dd590:	e79b      	b.n	dd4ca <_strtod_l+0x9b2>
   dd592:	f1ba 0f01 	cmp.w	sl, #1
   dd596:	d102      	bne.n	dd59e <_strtod_l+0xa86>
   dd598:	2f00      	cmp	r7, #0
   dd59a:	f43f ad7e 	beq.w	dd09a <_strtod_l+0x582>
   dd59e:	4b61      	ldr	r3, [pc, #388]	; (dd724 <_strtod_l+0xc0c>)
   dd5a0:	2200      	movs	r2, #0
   dd5a2:	e78c      	b.n	dd4be <_strtod_l+0x9a6>
   dd5a4:	f8df 9178 	ldr.w	r9, [pc, #376]	; dd720 <_strtod_l+0xc08>
   dd5a8:	f04f 0800 	mov.w	r8, #0
   dd5ac:	e7e7      	b.n	dd57e <_strtod_l+0xa66>
   dd5ae:	4b5c      	ldr	r3, [pc, #368]	; (dd720 <_strtod_l+0xc08>)
   dd5b0:	4640      	mov	r0, r8
   dd5b2:	4649      	mov	r1, r9
   dd5b4:	2200      	movs	r2, #0
   dd5b6:	f7fe fc83 	bl	dbec0 <__aeabi_dmul>
   dd5ba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   dd5bc:	4680      	mov	r8, r0
   dd5be:	4689      	mov	r9, r1
   dd5c0:	b933      	cbnz	r3, dd5d0 <_strtod_l+0xab8>
   dd5c2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   dd5c6:	9012      	str	r0, [sp, #72]	; 0x48
   dd5c8:	9313      	str	r3, [sp, #76]	; 0x4c
   dd5ca:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
   dd5ce:	e7dd      	b.n	dd58c <_strtod_l+0xa74>
   dd5d0:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
   dd5d4:	e7f9      	b.n	dd5ca <_strtod_l+0xab2>
   dd5d6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   dd5da:	9b04      	ldr	r3, [sp, #16]
   dd5dc:	2b00      	cmp	r3, #0
   dd5de:	d1a8      	bne.n	dd532 <_strtod_l+0xa1a>
   dd5e0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   dd5e4:	9a11      	ldr	r2, [sp, #68]	; 0x44
   dd5e6:	0d1b      	lsrs	r3, r3, #20
   dd5e8:	051b      	lsls	r3, r3, #20
   dd5ea:	429a      	cmp	r2, r3
   dd5ec:	d1a1      	bne.n	dd532 <_strtod_l+0xa1a>
   dd5ee:	4640      	mov	r0, r8
   dd5f0:	4649      	mov	r1, r9
   dd5f2:	f001 f9b7 	bl	de964 <__aeabi_d2lz>
   dd5f6:	f7fe fc35 	bl	dbe64 <__aeabi_l2d>
   dd5fa:	4602      	mov	r2, r0
   dd5fc:	460b      	mov	r3, r1
   dd5fe:	4640      	mov	r0, r8
   dd600:	4649      	mov	r1, r9
   dd602:	f7fe faa5 	bl	dbb50 <__aeabi_dsub>
   dd606:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   dd608:	f3cb 0313 	ubfx	r3, fp, #0, #20
   dd60c:	ea43 030a 	orr.w	r3, r3, sl
   dd610:	4313      	orrs	r3, r2
   dd612:	4680      	mov	r8, r0
   dd614:	4689      	mov	r9, r1
   dd616:	d053      	beq.n	dd6c0 <_strtod_l+0xba8>
   dd618:	a335      	add	r3, pc, #212	; (adr r3, dd6f0 <_strtod_l+0xbd8>)
   dd61a:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd61e:	f7fe fec1 	bl	dc3a4 <__aeabi_dcmplt>
   dd622:	2800      	cmp	r0, #0
   dd624:	f47f acce 	bne.w	dcfc4 <_strtod_l+0x4ac>
   dd628:	a333      	add	r3, pc, #204	; (adr r3, dd6f8 <_strtod_l+0xbe0>)
   dd62a:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd62e:	4640      	mov	r0, r8
   dd630:	4649      	mov	r1, r9
   dd632:	f7fe fed5 	bl	dc3e0 <__aeabi_dcmpgt>
   dd636:	2800      	cmp	r0, #0
   dd638:	f43f af7b 	beq.w	dd532 <_strtod_l+0xa1a>
   dd63c:	e4c2      	b.n	dcfc4 <_strtod_l+0x4ac>
   dd63e:	9b04      	ldr	r3, [sp, #16]
   dd640:	b333      	cbz	r3, dd690 <_strtod_l+0xb78>
   dd642:	9b11      	ldr	r3, [sp, #68]	; 0x44
   dd644:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   dd648:	d822      	bhi.n	dd690 <_strtod_l+0xb78>
   dd64a:	a32d      	add	r3, pc, #180	; (adr r3, dd700 <_strtod_l+0xbe8>)
   dd64c:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd650:	4640      	mov	r0, r8
   dd652:	4649      	mov	r1, r9
   dd654:	f7fe feb0 	bl	dc3b8 <__aeabi_dcmple>
   dd658:	b1a0      	cbz	r0, dd684 <_strtod_l+0xb6c>
   dd65a:	4649      	mov	r1, r9
   dd65c:	4640      	mov	r0, r8
   dd65e:	f7fe fec9 	bl	dc3f4 <__aeabi_d2uiz>
   dd662:	2801      	cmp	r0, #1
   dd664:	bf38      	it	cc
   dd666:	2001      	movcc	r0, #1
   dd668:	f7fe fbb0 	bl	dbdcc <__aeabi_ui2d>
   dd66c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   dd66e:	4680      	mov	r8, r0
   dd670:	4689      	mov	r9, r1
   dd672:	bb13      	cbnz	r3, dd6ba <_strtod_l+0xba2>
   dd674:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   dd678:	9014      	str	r0, [sp, #80]	; 0x50
   dd67a:	9315      	str	r3, [sp, #84]	; 0x54
   dd67c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   dd680:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   dd684:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   dd686:	9a11      	ldr	r2, [sp, #68]	; 0x44
   dd688:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   dd68c:	1a9b      	subs	r3, r3, r2
   dd68e:	930d      	str	r3, [sp, #52]	; 0x34
   dd690:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   dd694:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
   dd698:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   dd69c:	f000 fffa 	bl	de694 <__ulp>
   dd6a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   dd6a4:	ec53 2b10 	vmov	r2, r3, d0
   dd6a8:	f7fe fc0a 	bl	dbec0 <__aeabi_dmul>
   dd6ac:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   dd6b0:	f7fe fa50 	bl	dbb54 <__adddf3>
   dd6b4:	4682      	mov	sl, r0
   dd6b6:	468b      	mov	fp, r1
   dd6b8:	e78f      	b.n	dd5da <_strtod_l+0xac2>
   dd6ba:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
   dd6be:	e7dd      	b.n	dd67c <_strtod_l+0xb64>
   dd6c0:	a311      	add	r3, pc, #68	; (adr r3, dd708 <_strtod_l+0xbf0>)
   dd6c2:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd6c6:	f7fe fe6d 	bl	dc3a4 <__aeabi_dcmplt>
   dd6ca:	e7b4      	b.n	dd636 <_strtod_l+0xb1e>
   dd6cc:	2300      	movs	r3, #0
   dd6ce:	930e      	str	r3, [sp, #56]	; 0x38
   dd6d0:	9a19      	ldr	r2, [sp, #100]	; 0x64
   dd6d2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   dd6d4:	6013      	str	r3, [r2, #0]
   dd6d6:	f7ff ba65 	b.w	dcba4 <_strtod_l+0x8c>
   dd6da:	2b65      	cmp	r3, #101	; 0x65
   dd6dc:	f43f ab5d 	beq.w	dcd9a <_strtod_l+0x282>
   dd6e0:	2b45      	cmp	r3, #69	; 0x45
   dd6e2:	f43f ab5a 	beq.w	dcd9a <_strtod_l+0x282>
   dd6e6:	2201      	movs	r2, #1
   dd6e8:	f7ff bb92 	b.w	dce10 <_strtod_l+0x2f8>
   dd6ec:	f3af 8000 	nop.w
   dd6f0:	94a03595 	.word	0x94a03595
   dd6f4:	3fdfffff 	.word	0x3fdfffff
   dd6f8:	35afe535 	.word	0x35afe535
   dd6fc:	3fe00000 	.word	0x3fe00000
   dd700:	ffc00000 	.word	0xffc00000
   dd704:	41dfffff 	.word	0x41dfffff
   dd708:	94a03595 	.word	0x94a03595
   dd70c:	3fcfffff 	.word	0x3fcfffff
   dd710:	3ff00000 	.word	0x3ff00000
   dd714:	7ff00000 	.word	0x7ff00000
   dd718:	7fe00000 	.word	0x7fe00000
   dd71c:	7c9fffff 	.word	0x7c9fffff
   dd720:	3fe00000 	.word	0x3fe00000
   dd724:	bff00000 	.word	0xbff00000
   dd728:	7fefffff 	.word	0x7fefffff

000dd72c <strtod>:
   dd72c:	460a      	mov	r2, r1
   dd72e:	4601      	mov	r1, r0
   dd730:	4802      	ldr	r0, [pc, #8]	; (dd73c <strtod+0x10>)
   dd732:	4b03      	ldr	r3, [pc, #12]	; (dd740 <strtod+0x14>)
   dd734:	6800      	ldr	r0, [r0, #0]
   dd736:	f7ff b9ef 	b.w	dcb18 <_strtod_l>
   dd73a:	bf00      	nop
   dd73c:	2003dec8 	.word	0x2003dec8
   dd740:	2003df34 	.word	0x2003df34

000dd744 <strtok>:
   dd744:	4b13      	ldr	r3, [pc, #76]	; (dd794 <strtok+0x50>)
   dd746:	b573      	push	{r0, r1, r4, r5, r6, lr}
   dd748:	681e      	ldr	r6, [r3, #0]
   dd74a:	6db4      	ldr	r4, [r6, #88]	; 0x58
   dd74c:	4605      	mov	r5, r0
   dd74e:	b9c4      	cbnz	r4, dd782 <strtok+0x3e>
   dd750:	2050      	movs	r0, #80	; 0x50
   dd752:	9101      	str	r1, [sp, #4]
   dd754:	f7fa f9f2 	bl	d7b3c <malloc>
   dd758:	65b0      	str	r0, [r6, #88]	; 0x58
   dd75a:	e9c0 4400 	strd	r4, r4, [r0]
   dd75e:	e9c0 4402 	strd	r4, r4, [r0, #8]
   dd762:	e9c0 4404 	strd	r4, r4, [r0, #16]
   dd766:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
   dd76a:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
   dd76e:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
   dd772:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
   dd776:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
   dd77a:	9901      	ldr	r1, [sp, #4]
   dd77c:	6184      	str	r4, [r0, #24]
   dd77e:	7704      	strb	r4, [r0, #28]
   dd780:	6244      	str	r4, [r0, #36]	; 0x24
   dd782:	6db2      	ldr	r2, [r6, #88]	; 0x58
   dd784:	2301      	movs	r3, #1
   dd786:	4628      	mov	r0, r5
   dd788:	b002      	add	sp, #8
   dd78a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   dd78e:	f000 b803 	b.w	dd798 <__strtok_r>
   dd792:	bf00      	nop
   dd794:	2003dec8 	.word	0x2003dec8

000dd798 <__strtok_r>:
   dd798:	b5f0      	push	{r4, r5, r6, r7, lr}
   dd79a:	b908      	cbnz	r0, dd7a0 <__strtok_r+0x8>
   dd79c:	6810      	ldr	r0, [r2, #0]
   dd79e:	b188      	cbz	r0, dd7c4 <__strtok_r+0x2c>
   dd7a0:	4604      	mov	r4, r0
   dd7a2:	4620      	mov	r0, r4
   dd7a4:	f814 5b01 	ldrb.w	r5, [r4], #1
   dd7a8:	460f      	mov	r7, r1
   dd7aa:	f817 6b01 	ldrb.w	r6, [r7], #1
   dd7ae:	b91e      	cbnz	r6, dd7b8 <__strtok_r+0x20>
   dd7b0:	b965      	cbnz	r5, dd7cc <__strtok_r+0x34>
   dd7b2:	6015      	str	r5, [r2, #0]
   dd7b4:	4628      	mov	r0, r5
   dd7b6:	e005      	b.n	dd7c4 <__strtok_r+0x2c>
   dd7b8:	42b5      	cmp	r5, r6
   dd7ba:	d1f6      	bne.n	dd7aa <__strtok_r+0x12>
   dd7bc:	2b00      	cmp	r3, #0
   dd7be:	d1f0      	bne.n	dd7a2 <__strtok_r+0xa>
   dd7c0:	6014      	str	r4, [r2, #0]
   dd7c2:	7003      	strb	r3, [r0, #0]
   dd7c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   dd7c6:	461c      	mov	r4, r3
   dd7c8:	e00c      	b.n	dd7e4 <__strtok_r+0x4c>
   dd7ca:	b915      	cbnz	r5, dd7d2 <__strtok_r+0x3a>
   dd7cc:	f814 3b01 	ldrb.w	r3, [r4], #1
   dd7d0:	460e      	mov	r6, r1
   dd7d2:	f816 5b01 	ldrb.w	r5, [r6], #1
   dd7d6:	42ab      	cmp	r3, r5
   dd7d8:	d1f7      	bne.n	dd7ca <__strtok_r+0x32>
   dd7da:	2b00      	cmp	r3, #0
   dd7dc:	d0f3      	beq.n	dd7c6 <__strtok_r+0x2e>
   dd7de:	2300      	movs	r3, #0
   dd7e0:	f804 3c01 	strb.w	r3, [r4, #-1]
   dd7e4:	6014      	str	r4, [r2, #0]
   dd7e6:	e7ed      	b.n	dd7c4 <__strtok_r+0x2c>

000dd7e8 <_strtol_l.isra.0>:
   dd7e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   dd7ec:	4e3a      	ldr	r6, [pc, #232]	; (dd8d8 <_strtol_l.isra.0+0xf0>)
   dd7ee:	4686      	mov	lr, r0
   dd7f0:	468c      	mov	ip, r1
   dd7f2:	4660      	mov	r0, ip
   dd7f4:	f81c 4b01 	ldrb.w	r4, [ip], #1
   dd7f8:	5da5      	ldrb	r5, [r4, r6]
   dd7fa:	f015 0508 	ands.w	r5, r5, #8
   dd7fe:	d1f8      	bne.n	dd7f2 <_strtol_l.isra.0+0xa>
   dd800:	2c2d      	cmp	r4, #45	; 0x2d
   dd802:	d133      	bne.n	dd86c <_strtol_l.isra.0+0x84>
   dd804:	f89c 4000 	ldrb.w	r4, [ip]
   dd808:	f04f 0801 	mov.w	r8, #1
   dd80c:	f100 0c02 	add.w	ip, r0, #2
   dd810:	2b00      	cmp	r3, #0
   dd812:	d05c      	beq.n	dd8ce <_strtol_l.isra.0+0xe6>
   dd814:	2b10      	cmp	r3, #16
   dd816:	d10c      	bne.n	dd832 <_strtol_l.isra.0+0x4a>
   dd818:	2c30      	cmp	r4, #48	; 0x30
   dd81a:	d10a      	bne.n	dd832 <_strtol_l.isra.0+0x4a>
   dd81c:	f89c 0000 	ldrb.w	r0, [ip]
   dd820:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   dd824:	2858      	cmp	r0, #88	; 0x58
   dd826:	d14d      	bne.n	dd8c4 <_strtol_l.isra.0+0xdc>
   dd828:	f89c 4001 	ldrb.w	r4, [ip, #1]
   dd82c:	2310      	movs	r3, #16
   dd82e:	f10c 0c02 	add.w	ip, ip, #2
   dd832:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
   dd836:	3f01      	subs	r7, #1
   dd838:	2600      	movs	r6, #0
   dd83a:	fbb7 f9f3 	udiv	r9, r7, r3
   dd83e:	4630      	mov	r0, r6
   dd840:	fb03 7a19 	mls	sl, r3, r9, r7
   dd844:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
   dd848:	2d09      	cmp	r5, #9
   dd84a:	d818      	bhi.n	dd87e <_strtol_l.isra.0+0x96>
   dd84c:	462c      	mov	r4, r5
   dd84e:	42a3      	cmp	r3, r4
   dd850:	dd24      	ble.n	dd89c <_strtol_l.isra.0+0xb4>
   dd852:	1c75      	adds	r5, r6, #1
   dd854:	d007      	beq.n	dd866 <_strtol_l.isra.0+0x7e>
   dd856:	4581      	cmp	r9, r0
   dd858:	d31d      	bcc.n	dd896 <_strtol_l.isra.0+0xae>
   dd85a:	d101      	bne.n	dd860 <_strtol_l.isra.0+0x78>
   dd85c:	45a2      	cmp	sl, r4
   dd85e:	db1a      	blt.n	dd896 <_strtol_l.isra.0+0xae>
   dd860:	fb00 4003 	mla	r0, r0, r3, r4
   dd864:	2601      	movs	r6, #1
   dd866:	f81c 4b01 	ldrb.w	r4, [ip], #1
   dd86a:	e7eb      	b.n	dd844 <_strtol_l.isra.0+0x5c>
   dd86c:	2c2b      	cmp	r4, #43	; 0x2b
   dd86e:	bf08      	it	eq
   dd870:	f89c 4000 	ldrbeq.w	r4, [ip]
   dd874:	46a8      	mov	r8, r5
   dd876:	bf08      	it	eq
   dd878:	f100 0c02 	addeq.w	ip, r0, #2
   dd87c:	e7c8      	b.n	dd810 <_strtol_l.isra.0+0x28>
   dd87e:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
   dd882:	2d19      	cmp	r5, #25
   dd884:	d801      	bhi.n	dd88a <_strtol_l.isra.0+0xa2>
   dd886:	3c37      	subs	r4, #55	; 0x37
   dd888:	e7e1      	b.n	dd84e <_strtol_l.isra.0+0x66>
   dd88a:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
   dd88e:	2d19      	cmp	r5, #25
   dd890:	d804      	bhi.n	dd89c <_strtol_l.isra.0+0xb4>
   dd892:	3c57      	subs	r4, #87	; 0x57
   dd894:	e7db      	b.n	dd84e <_strtol_l.isra.0+0x66>
   dd896:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   dd89a:	e7e4      	b.n	dd866 <_strtol_l.isra.0+0x7e>
   dd89c:	1c73      	adds	r3, r6, #1
   dd89e:	d106      	bne.n	dd8ae <_strtol_l.isra.0+0xc6>
   dd8a0:	2322      	movs	r3, #34	; 0x22
   dd8a2:	f8ce 3000 	str.w	r3, [lr]
   dd8a6:	4638      	mov	r0, r7
   dd8a8:	b942      	cbnz	r2, dd8bc <_strtol_l.isra.0+0xd4>
   dd8aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dd8ae:	f1b8 0f00 	cmp.w	r8, #0
   dd8b2:	d000      	beq.n	dd8b6 <_strtol_l.isra.0+0xce>
   dd8b4:	4240      	negs	r0, r0
   dd8b6:	2a00      	cmp	r2, #0
   dd8b8:	d0f7      	beq.n	dd8aa <_strtol_l.isra.0+0xc2>
   dd8ba:	b10e      	cbz	r6, dd8c0 <_strtol_l.isra.0+0xd8>
   dd8bc:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
   dd8c0:	6011      	str	r1, [r2, #0]
   dd8c2:	e7f2      	b.n	dd8aa <_strtol_l.isra.0+0xc2>
   dd8c4:	2430      	movs	r4, #48	; 0x30
   dd8c6:	2b00      	cmp	r3, #0
   dd8c8:	d1b3      	bne.n	dd832 <_strtol_l.isra.0+0x4a>
   dd8ca:	2308      	movs	r3, #8
   dd8cc:	e7b1      	b.n	dd832 <_strtol_l.isra.0+0x4a>
   dd8ce:	2c30      	cmp	r4, #48	; 0x30
   dd8d0:	d0a4      	beq.n	dd81c <_strtol_l.isra.0+0x34>
   dd8d2:	230a      	movs	r3, #10
   dd8d4:	e7ad      	b.n	dd832 <_strtol_l.isra.0+0x4a>
   dd8d6:	bf00      	nop
   dd8d8:	000dfb39 	.word	0x000dfb39

000dd8dc <strtol>:
   dd8dc:	4613      	mov	r3, r2
   dd8de:	460a      	mov	r2, r1
   dd8e0:	4601      	mov	r1, r0
   dd8e2:	4802      	ldr	r0, [pc, #8]	; (dd8ec <strtol+0x10>)
   dd8e4:	6800      	ldr	r0, [r0, #0]
   dd8e6:	f7ff bf7f 	b.w	dd7e8 <_strtol_l.isra.0>
   dd8ea:	bf00      	nop
   dd8ec:	2003dec8 	.word	0x2003dec8

000dd8f0 <__register_exitproc>:
   dd8f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   dd8f4:	f8df 80b8 	ldr.w	r8, [pc, #184]	; dd9b0 <__register_exitproc+0xc0>
   dd8f8:	4606      	mov	r6, r0
   dd8fa:	f8d8 0000 	ldr.w	r0, [r8]
   dd8fe:	461f      	mov	r7, r3
   dd900:	460d      	mov	r5, r1
   dd902:	4691      	mov	r9, r2
   dd904:	f000 fbb4 	bl	de070 <__retarget_lock_acquire_recursive>
   dd908:	4b25      	ldr	r3, [pc, #148]	; (dd9a0 <__register_exitproc+0xb0>)
   dd90a:	681c      	ldr	r4, [r3, #0]
   dd90c:	b934      	cbnz	r4, dd91c <__register_exitproc+0x2c>
   dd90e:	4c25      	ldr	r4, [pc, #148]	; (dd9a4 <__register_exitproc+0xb4>)
   dd910:	601c      	str	r4, [r3, #0]
   dd912:	4b25      	ldr	r3, [pc, #148]	; (dd9a8 <__register_exitproc+0xb8>)
   dd914:	b113      	cbz	r3, dd91c <__register_exitproc+0x2c>
   dd916:	681b      	ldr	r3, [r3, #0]
   dd918:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   dd91c:	6863      	ldr	r3, [r4, #4]
   dd91e:	2b1f      	cmp	r3, #31
   dd920:	dd07      	ble.n	dd932 <__register_exitproc+0x42>
   dd922:	f8d8 0000 	ldr.w	r0, [r8]
   dd926:	f000 fba5 	bl	de074 <__retarget_lock_release_recursive>
   dd92a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   dd92e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   dd932:	b34e      	cbz	r6, dd988 <__register_exitproc+0x98>
   dd934:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   dd938:	b988      	cbnz	r0, dd95e <__register_exitproc+0x6e>
   dd93a:	4b1c      	ldr	r3, [pc, #112]	; (dd9ac <__register_exitproc+0xbc>)
   dd93c:	b923      	cbnz	r3, dd948 <__register_exitproc+0x58>
   dd93e:	f8d8 0000 	ldr.w	r0, [r8]
   dd942:	f000 fb96 	bl	de072 <__retarget_lock_release>
   dd946:	e7f0      	b.n	dd92a <__register_exitproc+0x3a>
   dd948:	f44f 7084 	mov.w	r0, #264	; 0x108
   dd94c:	f7fa f8f6 	bl	d7b3c <malloc>
   dd950:	2800      	cmp	r0, #0
   dd952:	d0f4      	beq.n	dd93e <__register_exitproc+0x4e>
   dd954:	2300      	movs	r3, #0
   dd956:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   dd95a:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   dd95e:	6863      	ldr	r3, [r4, #4]
   dd960:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   dd964:	2201      	movs	r2, #1
   dd966:	409a      	lsls	r2, r3
   dd968:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   dd96c:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   dd970:	4313      	orrs	r3, r2
   dd972:	2e02      	cmp	r6, #2
   dd974:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   dd978:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   dd97c:	bf02      	ittt	eq
   dd97e:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   dd982:	431a      	orreq	r2, r3
   dd984:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
   dd988:	6863      	ldr	r3, [r4, #4]
   dd98a:	f8d8 0000 	ldr.w	r0, [r8]
   dd98e:	1c5a      	adds	r2, r3, #1
   dd990:	3302      	adds	r3, #2
   dd992:	6062      	str	r2, [r4, #4]
   dd994:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   dd998:	f000 fb6c 	bl	de074 <__retarget_lock_release_recursive>
   dd99c:	2000      	movs	r0, #0
   dd99e:	e7c6      	b.n	dd92e <__register_exitproc+0x3e>
   dd9a0:	2003e7e4 	.word	0x2003e7e4
   dd9a4:	2003e758 	.word	0x2003e758
   dd9a8:	00000000 	.word	0x00000000
   dd9ac:	000d7b3d 	.word	0x000d7b3d
   dd9b0:	2003df2c 	.word	0x2003df2c

000dd9b4 <rshift>:
   dd9b4:	6903      	ldr	r3, [r0, #16]
   dd9b6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   dd9ba:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   dd9be:	ea4f 1261 	mov.w	r2, r1, asr #5
   dd9c2:	f100 0414 	add.w	r4, r0, #20
   dd9c6:	dd45      	ble.n	dda54 <rshift+0xa0>
   dd9c8:	f011 011f 	ands.w	r1, r1, #31
   dd9cc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   dd9d0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   dd9d4:	d10c      	bne.n	dd9f0 <rshift+0x3c>
   dd9d6:	f100 0710 	add.w	r7, r0, #16
   dd9da:	4629      	mov	r1, r5
   dd9dc:	42b1      	cmp	r1, r6
   dd9de:	d334      	bcc.n	dda4a <rshift+0x96>
   dd9e0:	1a9b      	subs	r3, r3, r2
   dd9e2:	009b      	lsls	r3, r3, #2
   dd9e4:	1eea      	subs	r2, r5, #3
   dd9e6:	4296      	cmp	r6, r2
   dd9e8:	bf38      	it	cc
   dd9ea:	2300      	movcc	r3, #0
   dd9ec:	4423      	add	r3, r4
   dd9ee:	e015      	b.n	dda1c <rshift+0x68>
   dd9f0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   dd9f4:	f1c1 0820 	rsb	r8, r1, #32
   dd9f8:	40cf      	lsrs	r7, r1
   dd9fa:	f105 0e04 	add.w	lr, r5, #4
   dd9fe:	46a1      	mov	r9, r4
   dda00:	4576      	cmp	r6, lr
   dda02:	46f4      	mov	ip, lr
   dda04:	d815      	bhi.n	dda32 <rshift+0x7e>
   dda06:	1a9b      	subs	r3, r3, r2
   dda08:	009a      	lsls	r2, r3, #2
   dda0a:	3a04      	subs	r2, #4
   dda0c:	3501      	adds	r5, #1
   dda0e:	42ae      	cmp	r6, r5
   dda10:	bf38      	it	cc
   dda12:	2200      	movcc	r2, #0
   dda14:	18a3      	adds	r3, r4, r2
   dda16:	50a7      	str	r7, [r4, r2]
   dda18:	b107      	cbz	r7, dda1c <rshift+0x68>
   dda1a:	3304      	adds	r3, #4
   dda1c:	1b1a      	subs	r2, r3, r4
   dda1e:	42a3      	cmp	r3, r4
   dda20:	ea4f 02a2 	mov.w	r2, r2, asr #2
   dda24:	bf08      	it	eq
   dda26:	2300      	moveq	r3, #0
   dda28:	6102      	str	r2, [r0, #16]
   dda2a:	bf08      	it	eq
   dda2c:	6143      	streq	r3, [r0, #20]
   dda2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   dda32:	f8dc c000 	ldr.w	ip, [ip]
   dda36:	fa0c fc08 	lsl.w	ip, ip, r8
   dda3a:	ea4c 0707 	orr.w	r7, ip, r7
   dda3e:	f849 7b04 	str.w	r7, [r9], #4
   dda42:	f85e 7b04 	ldr.w	r7, [lr], #4
   dda46:	40cf      	lsrs	r7, r1
   dda48:	e7da      	b.n	dda00 <rshift+0x4c>
   dda4a:	f851 cb04 	ldr.w	ip, [r1], #4
   dda4e:	f847 cf04 	str.w	ip, [r7, #4]!
   dda52:	e7c3      	b.n	dd9dc <rshift+0x28>
   dda54:	4623      	mov	r3, r4
   dda56:	e7e1      	b.n	dda1c <rshift+0x68>

000dda58 <__hexdig_fun>:
   dda58:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   dda5c:	2b09      	cmp	r3, #9
   dda5e:	d802      	bhi.n	dda66 <__hexdig_fun+0xe>
   dda60:	3820      	subs	r0, #32
   dda62:	b2c0      	uxtb	r0, r0
   dda64:	4770      	bx	lr
   dda66:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   dda6a:	2b05      	cmp	r3, #5
   dda6c:	d801      	bhi.n	dda72 <__hexdig_fun+0x1a>
   dda6e:	3847      	subs	r0, #71	; 0x47
   dda70:	e7f7      	b.n	dda62 <__hexdig_fun+0xa>
   dda72:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   dda76:	2b05      	cmp	r3, #5
   dda78:	d801      	bhi.n	dda7e <__hexdig_fun+0x26>
   dda7a:	3827      	subs	r0, #39	; 0x27
   dda7c:	e7f1      	b.n	dda62 <__hexdig_fun+0xa>
   dda7e:	2000      	movs	r0, #0
   dda80:	4770      	bx	lr
	...

000dda84 <__gethex>:
   dda84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dda88:	ed2d 8b02 	vpush	{d8}
   dda8c:	b089      	sub	sp, #36	; 0x24
   dda8e:	ee08 0a10 	vmov	s16, r0
   dda92:	9304      	str	r3, [sp, #16]
   dda94:	4bbc      	ldr	r3, [pc, #752]	; (ddd88 <__gethex+0x304>)
   dda96:	681b      	ldr	r3, [r3, #0]
   dda98:	9301      	str	r3, [sp, #4]
   dda9a:	4618      	mov	r0, r3
   dda9c:	468b      	mov	fp, r1
   dda9e:	4690      	mov	r8, r2
   ddaa0:	f7fe ffc3 	bl	dca2a <strlen>
   ddaa4:	9b01      	ldr	r3, [sp, #4]
   ddaa6:	f8db 2000 	ldr.w	r2, [fp]
   ddaaa:	4403      	add	r3, r0
   ddaac:	4682      	mov	sl, r0
   ddaae:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   ddab2:	9305      	str	r3, [sp, #20]
   ddab4:	1c93      	adds	r3, r2, #2
   ddab6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   ddaba:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   ddabe:	32fe      	adds	r2, #254	; 0xfe
   ddac0:	18d1      	adds	r1, r2, r3
   ddac2:	461f      	mov	r7, r3
   ddac4:	f813 0b01 	ldrb.w	r0, [r3], #1
   ddac8:	9100      	str	r1, [sp, #0]
   ddaca:	2830      	cmp	r0, #48	; 0x30
   ddacc:	d0f8      	beq.n	ddac0 <__gethex+0x3c>
   ddace:	f7ff ffc3 	bl	dda58 <__hexdig_fun>
   ddad2:	4604      	mov	r4, r0
   ddad4:	2800      	cmp	r0, #0
   ddad6:	d13a      	bne.n	ddb4e <__gethex+0xca>
   ddad8:	9901      	ldr	r1, [sp, #4]
   ddada:	4652      	mov	r2, sl
   ddadc:	4638      	mov	r0, r7
   ddade:	f7fe ffac 	bl	dca3a <strncmp>
   ddae2:	4605      	mov	r5, r0
   ddae4:	2800      	cmp	r0, #0
   ddae6:	d168      	bne.n	ddbba <__gethex+0x136>
   ddae8:	f817 000a 	ldrb.w	r0, [r7, sl]
   ddaec:	eb07 060a 	add.w	r6, r7, sl
   ddaf0:	f7ff ffb2 	bl	dda58 <__hexdig_fun>
   ddaf4:	2800      	cmp	r0, #0
   ddaf6:	d062      	beq.n	ddbbe <__gethex+0x13a>
   ddaf8:	4633      	mov	r3, r6
   ddafa:	7818      	ldrb	r0, [r3, #0]
   ddafc:	2830      	cmp	r0, #48	; 0x30
   ddafe:	461f      	mov	r7, r3
   ddb00:	f103 0301 	add.w	r3, r3, #1
   ddb04:	d0f9      	beq.n	ddafa <__gethex+0x76>
   ddb06:	f7ff ffa7 	bl	dda58 <__hexdig_fun>
   ddb0a:	2301      	movs	r3, #1
   ddb0c:	fab0 f480 	clz	r4, r0
   ddb10:	0964      	lsrs	r4, r4, #5
   ddb12:	4635      	mov	r5, r6
   ddb14:	9300      	str	r3, [sp, #0]
   ddb16:	463a      	mov	r2, r7
   ddb18:	4616      	mov	r6, r2
   ddb1a:	3201      	adds	r2, #1
   ddb1c:	7830      	ldrb	r0, [r6, #0]
   ddb1e:	f7ff ff9b 	bl	dda58 <__hexdig_fun>
   ddb22:	2800      	cmp	r0, #0
   ddb24:	d1f8      	bne.n	ddb18 <__gethex+0x94>
   ddb26:	9901      	ldr	r1, [sp, #4]
   ddb28:	4652      	mov	r2, sl
   ddb2a:	4630      	mov	r0, r6
   ddb2c:	f7fe ff85 	bl	dca3a <strncmp>
   ddb30:	b980      	cbnz	r0, ddb54 <__gethex+0xd0>
   ddb32:	b94d      	cbnz	r5, ddb48 <__gethex+0xc4>
   ddb34:	eb06 050a 	add.w	r5, r6, sl
   ddb38:	462a      	mov	r2, r5
   ddb3a:	4616      	mov	r6, r2
   ddb3c:	3201      	adds	r2, #1
   ddb3e:	7830      	ldrb	r0, [r6, #0]
   ddb40:	f7ff ff8a 	bl	dda58 <__hexdig_fun>
   ddb44:	2800      	cmp	r0, #0
   ddb46:	d1f8      	bne.n	ddb3a <__gethex+0xb6>
   ddb48:	1bad      	subs	r5, r5, r6
   ddb4a:	00ad      	lsls	r5, r5, #2
   ddb4c:	e004      	b.n	ddb58 <__gethex+0xd4>
   ddb4e:	2400      	movs	r4, #0
   ddb50:	4625      	mov	r5, r4
   ddb52:	e7e0      	b.n	ddb16 <__gethex+0x92>
   ddb54:	2d00      	cmp	r5, #0
   ddb56:	d1f7      	bne.n	ddb48 <__gethex+0xc4>
   ddb58:	7833      	ldrb	r3, [r6, #0]
   ddb5a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   ddb5e:	2b50      	cmp	r3, #80	; 0x50
   ddb60:	d13b      	bne.n	ddbda <__gethex+0x156>
   ddb62:	7873      	ldrb	r3, [r6, #1]
   ddb64:	2b2b      	cmp	r3, #43	; 0x2b
   ddb66:	d02c      	beq.n	ddbc2 <__gethex+0x13e>
   ddb68:	2b2d      	cmp	r3, #45	; 0x2d
   ddb6a:	d02e      	beq.n	ddbca <__gethex+0x146>
   ddb6c:	1c71      	adds	r1, r6, #1
   ddb6e:	f04f 0900 	mov.w	r9, #0
   ddb72:	7808      	ldrb	r0, [r1, #0]
   ddb74:	f7ff ff70 	bl	dda58 <__hexdig_fun>
   ddb78:	1e43      	subs	r3, r0, #1
   ddb7a:	b2db      	uxtb	r3, r3
   ddb7c:	2b18      	cmp	r3, #24
   ddb7e:	d82c      	bhi.n	ddbda <__gethex+0x156>
   ddb80:	f1a0 0210 	sub.w	r2, r0, #16
   ddb84:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   ddb88:	f7ff ff66 	bl	dda58 <__hexdig_fun>
   ddb8c:	1e43      	subs	r3, r0, #1
   ddb8e:	b2db      	uxtb	r3, r3
   ddb90:	2b18      	cmp	r3, #24
   ddb92:	d91d      	bls.n	ddbd0 <__gethex+0x14c>
   ddb94:	f1b9 0f00 	cmp.w	r9, #0
   ddb98:	d000      	beq.n	ddb9c <__gethex+0x118>
   ddb9a:	4252      	negs	r2, r2
   ddb9c:	4415      	add	r5, r2
   ddb9e:	f8cb 1000 	str.w	r1, [fp]
   ddba2:	b1e4      	cbz	r4, ddbde <__gethex+0x15a>
   ddba4:	9b00      	ldr	r3, [sp, #0]
   ddba6:	2b00      	cmp	r3, #0
   ddba8:	bf14      	ite	ne
   ddbaa:	2700      	movne	r7, #0
   ddbac:	2706      	moveq	r7, #6
   ddbae:	4638      	mov	r0, r7
   ddbb0:	b009      	add	sp, #36	; 0x24
   ddbb2:	ecbd 8b02 	vpop	{d8}
   ddbb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   ddbba:	463e      	mov	r6, r7
   ddbbc:	4625      	mov	r5, r4
   ddbbe:	2401      	movs	r4, #1
   ddbc0:	e7ca      	b.n	ddb58 <__gethex+0xd4>
   ddbc2:	f04f 0900 	mov.w	r9, #0
   ddbc6:	1cb1      	adds	r1, r6, #2
   ddbc8:	e7d3      	b.n	ddb72 <__gethex+0xee>
   ddbca:	f04f 0901 	mov.w	r9, #1
   ddbce:	e7fa      	b.n	ddbc6 <__gethex+0x142>
   ddbd0:	230a      	movs	r3, #10
   ddbd2:	fb03 0202 	mla	r2, r3, r2, r0
   ddbd6:	3a10      	subs	r2, #16
   ddbd8:	e7d4      	b.n	ddb84 <__gethex+0x100>
   ddbda:	4631      	mov	r1, r6
   ddbdc:	e7df      	b.n	ddb9e <__gethex+0x11a>
   ddbde:	1bf3      	subs	r3, r6, r7
   ddbe0:	3b01      	subs	r3, #1
   ddbe2:	4621      	mov	r1, r4
   ddbe4:	2b07      	cmp	r3, #7
   ddbe6:	dc52      	bgt.n	ddc8e <__gethex+0x20a>
   ddbe8:	ee18 0a10 	vmov	r0, s16
   ddbec:	f000 fa55 	bl	de09a <_Balloc>
   ddbf0:	f04f 0b00 	mov.w	fp, #0
   ddbf4:	f100 0914 	add.w	r9, r0, #20
   ddbf8:	f1ca 0301 	rsb	r3, sl, #1
   ddbfc:	4604      	mov	r4, r0
   ddbfe:	f8cd 9008 	str.w	r9, [sp, #8]
   ddc02:	f8cd b000 	str.w	fp, [sp]
   ddc06:	9306      	str	r3, [sp, #24]
   ddc08:	42b7      	cmp	r7, r6
   ddc0a:	d343      	bcc.n	ddc94 <__gethex+0x210>
   ddc0c:	9802      	ldr	r0, [sp, #8]
   ddc0e:	9b00      	ldr	r3, [sp, #0]
   ddc10:	f840 3b04 	str.w	r3, [r0], #4
   ddc14:	eba0 0009 	sub.w	r0, r0, r9
   ddc18:	1080      	asrs	r0, r0, #2
   ddc1a:	0146      	lsls	r6, r0, #5
   ddc1c:	6120      	str	r0, [r4, #16]
   ddc1e:	4618      	mov	r0, r3
   ddc20:	f000 fb02 	bl	de228 <__hi0bits>
   ddc24:	1a30      	subs	r0, r6, r0
   ddc26:	f8d8 6000 	ldr.w	r6, [r8]
   ddc2a:	42b0      	cmp	r0, r6
   ddc2c:	dd66      	ble.n	ddcfc <__gethex+0x278>
   ddc2e:	1b87      	subs	r7, r0, r6
   ddc30:	4639      	mov	r1, r7
   ddc32:	4620      	mov	r0, r4
   ddc34:	f000 fe50 	bl	de8d8 <__any_on>
   ddc38:	4682      	mov	sl, r0
   ddc3a:	b1a8      	cbz	r0, ddc68 <__gethex+0x1e4>
   ddc3c:	1e7b      	subs	r3, r7, #1
   ddc3e:	1159      	asrs	r1, r3, #5
   ddc40:	f003 021f 	and.w	r2, r3, #31
   ddc44:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   ddc48:	f04f 0a01 	mov.w	sl, #1
   ddc4c:	fa0a f202 	lsl.w	r2, sl, r2
   ddc50:	420a      	tst	r2, r1
   ddc52:	d009      	beq.n	ddc68 <__gethex+0x1e4>
   ddc54:	4553      	cmp	r3, sl
   ddc56:	dd05      	ble.n	ddc64 <__gethex+0x1e0>
   ddc58:	1eb9      	subs	r1, r7, #2
   ddc5a:	4620      	mov	r0, r4
   ddc5c:	f000 fe3c 	bl	de8d8 <__any_on>
   ddc60:	2800      	cmp	r0, #0
   ddc62:	d148      	bne.n	ddcf6 <__gethex+0x272>
   ddc64:	f04f 0a02 	mov.w	sl, #2
   ddc68:	4639      	mov	r1, r7
   ddc6a:	4620      	mov	r0, r4
   ddc6c:	f7ff fea2 	bl	dd9b4 <rshift>
   ddc70:	443d      	add	r5, r7
   ddc72:	f8d8 3008 	ldr.w	r3, [r8, #8]
   ddc76:	42ab      	cmp	r3, r5
   ddc78:	da4f      	bge.n	ddd1a <__gethex+0x296>
   ddc7a:	ee18 0a10 	vmov	r0, s16
   ddc7e:	4621      	mov	r1, r4
   ddc80:	f000 fa3f 	bl	de102 <_Bfree>
   ddc84:	9a14      	ldr	r2, [sp, #80]	; 0x50
   ddc86:	2300      	movs	r3, #0
   ddc88:	6013      	str	r3, [r2, #0]
   ddc8a:	27a3      	movs	r7, #163	; 0xa3
   ddc8c:	e78f      	b.n	ddbae <__gethex+0x12a>
   ddc8e:	3101      	adds	r1, #1
   ddc90:	105b      	asrs	r3, r3, #1
   ddc92:	e7a7      	b.n	ddbe4 <__gethex+0x160>
   ddc94:	1e73      	subs	r3, r6, #1
   ddc96:	9a05      	ldr	r2, [sp, #20]
   ddc98:	9303      	str	r3, [sp, #12]
   ddc9a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   ddc9e:	4293      	cmp	r3, r2
   ddca0:	d019      	beq.n	ddcd6 <__gethex+0x252>
   ddca2:	f1bb 0f20 	cmp.w	fp, #32
   ddca6:	d107      	bne.n	ddcb8 <__gethex+0x234>
   ddca8:	9b02      	ldr	r3, [sp, #8]
   ddcaa:	9a00      	ldr	r2, [sp, #0]
   ddcac:	f843 2b04 	str.w	r2, [r3], #4
   ddcb0:	9302      	str	r3, [sp, #8]
   ddcb2:	2300      	movs	r3, #0
   ddcb4:	9300      	str	r3, [sp, #0]
   ddcb6:	469b      	mov	fp, r3
   ddcb8:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   ddcbc:	f7ff fecc 	bl	dda58 <__hexdig_fun>
   ddcc0:	9b00      	ldr	r3, [sp, #0]
   ddcc2:	f000 000f 	and.w	r0, r0, #15
   ddcc6:	fa00 f00b 	lsl.w	r0, r0, fp
   ddcca:	4303      	orrs	r3, r0
   ddccc:	9300      	str	r3, [sp, #0]
   ddcce:	f10b 0b04 	add.w	fp, fp, #4
   ddcd2:	9b03      	ldr	r3, [sp, #12]
   ddcd4:	e00d      	b.n	ddcf2 <__gethex+0x26e>
   ddcd6:	9b03      	ldr	r3, [sp, #12]
   ddcd8:	9a06      	ldr	r2, [sp, #24]
   ddcda:	4413      	add	r3, r2
   ddcdc:	42bb      	cmp	r3, r7
   ddcde:	d3e0      	bcc.n	ddca2 <__gethex+0x21e>
   ddce0:	4618      	mov	r0, r3
   ddce2:	9901      	ldr	r1, [sp, #4]
   ddce4:	9307      	str	r3, [sp, #28]
   ddce6:	4652      	mov	r2, sl
   ddce8:	f7fe fea7 	bl	dca3a <strncmp>
   ddcec:	9b07      	ldr	r3, [sp, #28]
   ddcee:	2800      	cmp	r0, #0
   ddcf0:	d1d7      	bne.n	ddca2 <__gethex+0x21e>
   ddcf2:	461e      	mov	r6, r3
   ddcf4:	e788      	b.n	ddc08 <__gethex+0x184>
   ddcf6:	f04f 0a03 	mov.w	sl, #3
   ddcfa:	e7b5      	b.n	ddc68 <__gethex+0x1e4>
   ddcfc:	da0a      	bge.n	ddd14 <__gethex+0x290>
   ddcfe:	1a37      	subs	r7, r6, r0
   ddd00:	4621      	mov	r1, r4
   ddd02:	ee18 0a10 	vmov	r0, s16
   ddd06:	463a      	mov	r2, r7
   ddd08:	f000 fbd2 	bl	de4b0 <__lshift>
   ddd0c:	1bed      	subs	r5, r5, r7
   ddd0e:	4604      	mov	r4, r0
   ddd10:	f100 0914 	add.w	r9, r0, #20
   ddd14:	f04f 0a00 	mov.w	sl, #0
   ddd18:	e7ab      	b.n	ddc72 <__gethex+0x1ee>
   ddd1a:	f8d8 0004 	ldr.w	r0, [r8, #4]
   ddd1e:	42a8      	cmp	r0, r5
   ddd20:	dd6d      	ble.n	dddfe <__gethex+0x37a>
   ddd22:	1b45      	subs	r5, r0, r5
   ddd24:	42ae      	cmp	r6, r5
   ddd26:	dc31      	bgt.n	ddd8c <__gethex+0x308>
   ddd28:	f8d8 300c 	ldr.w	r3, [r8, #12]
   ddd2c:	2b02      	cmp	r3, #2
   ddd2e:	d023      	beq.n	ddd78 <__gethex+0x2f4>
   ddd30:	2b03      	cmp	r3, #3
   ddd32:	d025      	beq.n	ddd80 <__gethex+0x2fc>
   ddd34:	2b01      	cmp	r3, #1
   ddd36:	d115      	bne.n	ddd64 <__gethex+0x2e0>
   ddd38:	42ae      	cmp	r6, r5
   ddd3a:	d113      	bne.n	ddd64 <__gethex+0x2e0>
   ddd3c:	2e01      	cmp	r6, #1
   ddd3e:	d10b      	bne.n	ddd58 <__gethex+0x2d4>
   ddd40:	9a04      	ldr	r2, [sp, #16]
   ddd42:	f8d8 3004 	ldr.w	r3, [r8, #4]
   ddd46:	6013      	str	r3, [r2, #0]
   ddd48:	2301      	movs	r3, #1
   ddd4a:	6123      	str	r3, [r4, #16]
   ddd4c:	f8c9 3000 	str.w	r3, [r9]
   ddd50:	9b14      	ldr	r3, [sp, #80]	; 0x50
   ddd52:	2762      	movs	r7, #98	; 0x62
   ddd54:	601c      	str	r4, [r3, #0]
   ddd56:	e72a      	b.n	ddbae <__gethex+0x12a>
   ddd58:	1e71      	subs	r1, r6, #1
   ddd5a:	4620      	mov	r0, r4
   ddd5c:	f000 fdbc 	bl	de8d8 <__any_on>
   ddd60:	2800      	cmp	r0, #0
   ddd62:	d1ed      	bne.n	ddd40 <__gethex+0x2bc>
   ddd64:	ee18 0a10 	vmov	r0, s16
   ddd68:	4621      	mov	r1, r4
   ddd6a:	f000 f9ca 	bl	de102 <_Bfree>
   ddd6e:	9a14      	ldr	r2, [sp, #80]	; 0x50
   ddd70:	2300      	movs	r3, #0
   ddd72:	6013      	str	r3, [r2, #0]
   ddd74:	2750      	movs	r7, #80	; 0x50
   ddd76:	e71a      	b.n	ddbae <__gethex+0x12a>
   ddd78:	9b15      	ldr	r3, [sp, #84]	; 0x54
   ddd7a:	2b00      	cmp	r3, #0
   ddd7c:	d1f2      	bne.n	ddd64 <__gethex+0x2e0>
   ddd7e:	e7df      	b.n	ddd40 <__gethex+0x2bc>
   ddd80:	9b15      	ldr	r3, [sp, #84]	; 0x54
   ddd82:	2b00      	cmp	r3, #0
   ddd84:	d1dc      	bne.n	ddd40 <__gethex+0x2bc>
   ddd86:	e7ed      	b.n	ddd64 <__gethex+0x2e0>
   ddd88:	000dfc3c 	.word	0x000dfc3c
   ddd8c:	1e6f      	subs	r7, r5, #1
   ddd8e:	f1ba 0f00 	cmp.w	sl, #0
   ddd92:	d131      	bne.n	dddf8 <__gethex+0x374>
   ddd94:	b127      	cbz	r7, ddda0 <__gethex+0x31c>
   ddd96:	4639      	mov	r1, r7
   ddd98:	4620      	mov	r0, r4
   ddd9a:	f000 fd9d 	bl	de8d8 <__any_on>
   ddd9e:	4682      	mov	sl, r0
   ddda0:	117b      	asrs	r3, r7, #5
   ddda2:	2101      	movs	r1, #1
   ddda4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   ddda8:	f007 071f 	and.w	r7, r7, #31
   dddac:	fa01 f707 	lsl.w	r7, r1, r7
   dddb0:	421f      	tst	r7, r3
   dddb2:	4629      	mov	r1, r5
   dddb4:	4620      	mov	r0, r4
   dddb6:	bf18      	it	ne
   dddb8:	f04a 0a02 	orrne.w	sl, sl, #2
   dddbc:	1b76      	subs	r6, r6, r5
   dddbe:	f7ff fdf9 	bl	dd9b4 <rshift>
   dddc2:	f8d8 5004 	ldr.w	r5, [r8, #4]
   dddc6:	2702      	movs	r7, #2
   dddc8:	f1ba 0f00 	cmp.w	sl, #0
   dddcc:	d048      	beq.n	dde60 <__gethex+0x3dc>
   dddce:	f8d8 300c 	ldr.w	r3, [r8, #12]
   dddd2:	2b02      	cmp	r3, #2
   dddd4:	d015      	beq.n	dde02 <__gethex+0x37e>
   dddd6:	2b03      	cmp	r3, #3
   dddd8:	d017      	beq.n	dde0a <__gethex+0x386>
   dddda:	2b01      	cmp	r3, #1
   ddddc:	d109      	bne.n	dddf2 <__gethex+0x36e>
   dddde:	f01a 0f02 	tst.w	sl, #2
   ddde2:	d006      	beq.n	dddf2 <__gethex+0x36e>
   ddde4:	f8d9 0000 	ldr.w	r0, [r9]
   ddde8:	ea4a 0a00 	orr.w	sl, sl, r0
   dddec:	f01a 0f01 	tst.w	sl, #1
   dddf0:	d10e      	bne.n	dde10 <__gethex+0x38c>
   dddf2:	f047 0710 	orr.w	r7, r7, #16
   dddf6:	e033      	b.n	dde60 <__gethex+0x3dc>
   dddf8:	f04f 0a01 	mov.w	sl, #1
   dddfc:	e7d0      	b.n	ddda0 <__gethex+0x31c>
   dddfe:	2701      	movs	r7, #1
   dde00:	e7e2      	b.n	dddc8 <__gethex+0x344>
   dde02:	9b15      	ldr	r3, [sp, #84]	; 0x54
   dde04:	f1c3 0301 	rsb	r3, r3, #1
   dde08:	9315      	str	r3, [sp, #84]	; 0x54
   dde0a:	9b15      	ldr	r3, [sp, #84]	; 0x54
   dde0c:	2b00      	cmp	r3, #0
   dde0e:	d0f0      	beq.n	dddf2 <__gethex+0x36e>
   dde10:	f8d4 9010 	ldr.w	r9, [r4, #16]
   dde14:	f104 0314 	add.w	r3, r4, #20
   dde18:	ea4f 0b89 	mov.w	fp, r9, lsl #2
   dde1c:	eb03 0189 	add.w	r1, r3, r9, lsl #2
   dde20:	f04f 0c00 	mov.w	ip, #0
   dde24:	4618      	mov	r0, r3
   dde26:	f853 2b04 	ldr.w	r2, [r3], #4
   dde2a:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   dde2e:	d01c      	beq.n	dde6a <__gethex+0x3e6>
   dde30:	3201      	adds	r2, #1
   dde32:	6002      	str	r2, [r0, #0]
   dde34:	2f02      	cmp	r7, #2
   dde36:	f104 0314 	add.w	r3, r4, #20
   dde3a:	d13a      	bne.n	ddeb2 <__gethex+0x42e>
   dde3c:	f8d8 2000 	ldr.w	r2, [r8]
   dde40:	3a01      	subs	r2, #1
   dde42:	42b2      	cmp	r2, r6
   dde44:	d10a      	bne.n	dde5c <__gethex+0x3d8>
   dde46:	1171      	asrs	r1, r6, #5
   dde48:	2201      	movs	r2, #1
   dde4a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   dde4e:	f006 061f 	and.w	r6, r6, #31
   dde52:	fa02 f606 	lsl.w	r6, r2, r6
   dde56:	421e      	tst	r6, r3
   dde58:	bf18      	it	ne
   dde5a:	4617      	movne	r7, r2
   dde5c:	f047 0720 	orr.w	r7, r7, #32
   dde60:	9b14      	ldr	r3, [sp, #80]	; 0x50
   dde62:	601c      	str	r4, [r3, #0]
   dde64:	9b04      	ldr	r3, [sp, #16]
   dde66:	601d      	str	r5, [r3, #0]
   dde68:	e6a1      	b.n	ddbae <__gethex+0x12a>
   dde6a:	4299      	cmp	r1, r3
   dde6c:	f843 cc04 	str.w	ip, [r3, #-4]
   dde70:	d8d8      	bhi.n	dde24 <__gethex+0x3a0>
   dde72:	68a3      	ldr	r3, [r4, #8]
   dde74:	4599      	cmp	r9, r3
   dde76:	db14      	blt.n	ddea2 <__gethex+0x41e>
   dde78:	6861      	ldr	r1, [r4, #4]
   dde7a:	ee18 0a10 	vmov	r0, s16
   dde7e:	3101      	adds	r1, #1
   dde80:	f000 f90b 	bl	de09a <_Balloc>
   dde84:	6922      	ldr	r2, [r4, #16]
   dde86:	3202      	adds	r2, #2
   dde88:	f104 010c 	add.w	r1, r4, #12
   dde8c:	4682      	mov	sl, r0
   dde8e:	0092      	lsls	r2, r2, #2
   dde90:	300c      	adds	r0, #12
   dde92:	f7fe fd2f 	bl	dc8f4 <memcpy>
   dde96:	4621      	mov	r1, r4
   dde98:	ee18 0a10 	vmov	r0, s16
   dde9c:	f000 f931 	bl	de102 <_Bfree>
   ddea0:	4654      	mov	r4, sl
   ddea2:	6923      	ldr	r3, [r4, #16]
   ddea4:	1c5a      	adds	r2, r3, #1
   ddea6:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   ddeaa:	6122      	str	r2, [r4, #16]
   ddeac:	2201      	movs	r2, #1
   ddeae:	615a      	str	r2, [r3, #20]
   ddeb0:	e7c0      	b.n	dde34 <__gethex+0x3b0>
   ddeb2:	6922      	ldr	r2, [r4, #16]
   ddeb4:	454a      	cmp	r2, r9
   ddeb6:	dd0b      	ble.n	dded0 <__gethex+0x44c>
   ddeb8:	2101      	movs	r1, #1
   ddeba:	4620      	mov	r0, r4
   ddebc:	f7ff fd7a 	bl	dd9b4 <rshift>
   ddec0:	f8d8 3008 	ldr.w	r3, [r8, #8]
   ddec4:	3501      	adds	r5, #1
   ddec6:	42ab      	cmp	r3, r5
   ddec8:	f6ff aed7 	blt.w	ddc7a <__gethex+0x1f6>
   ddecc:	2701      	movs	r7, #1
   ddece:	e7c5      	b.n	dde5c <__gethex+0x3d8>
   dded0:	f016 061f 	ands.w	r6, r6, #31
   dded4:	d0fa      	beq.n	ddecc <__gethex+0x448>
   dded6:	449b      	add	fp, r3
   dded8:	f1c6 0620 	rsb	r6, r6, #32
   ddedc:	f85b 0c04 	ldr.w	r0, [fp, #-4]
   ddee0:	f000 f9a2 	bl	de228 <__hi0bits>
   ddee4:	42b0      	cmp	r0, r6
   ddee6:	dbe7      	blt.n	ddeb8 <__gethex+0x434>
   ddee8:	e7f0      	b.n	ddecc <__gethex+0x448>
   ddeea:	bf00      	nop

000ddeec <L_shift>:
   ddeec:	f1c2 0208 	rsb	r2, r2, #8
   ddef0:	0092      	lsls	r2, r2, #2
   ddef2:	b570      	push	{r4, r5, r6, lr}
   ddef4:	f1c2 0620 	rsb	r6, r2, #32
   ddef8:	6843      	ldr	r3, [r0, #4]
   ddefa:	6804      	ldr	r4, [r0, #0]
   ddefc:	fa03 f506 	lsl.w	r5, r3, r6
   ddf00:	432c      	orrs	r4, r5
   ddf02:	40d3      	lsrs	r3, r2
   ddf04:	6004      	str	r4, [r0, #0]
   ddf06:	f840 3f04 	str.w	r3, [r0, #4]!
   ddf0a:	4288      	cmp	r0, r1
   ddf0c:	d3f4      	bcc.n	ddef8 <L_shift+0xc>
   ddf0e:	bd70      	pop	{r4, r5, r6, pc}

000ddf10 <__match>:
   ddf10:	b530      	push	{r4, r5, lr}
   ddf12:	6803      	ldr	r3, [r0, #0]
   ddf14:	3301      	adds	r3, #1
   ddf16:	f811 4b01 	ldrb.w	r4, [r1], #1
   ddf1a:	b914      	cbnz	r4, ddf22 <__match+0x12>
   ddf1c:	6003      	str	r3, [r0, #0]
   ddf1e:	2001      	movs	r0, #1
   ddf20:	bd30      	pop	{r4, r5, pc}
   ddf22:	f813 2b01 	ldrb.w	r2, [r3], #1
   ddf26:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   ddf2a:	2d19      	cmp	r5, #25
   ddf2c:	bf98      	it	ls
   ddf2e:	3220      	addls	r2, #32
   ddf30:	42a2      	cmp	r2, r4
   ddf32:	d0f0      	beq.n	ddf16 <__match+0x6>
   ddf34:	2000      	movs	r0, #0
   ddf36:	e7f3      	b.n	ddf20 <__match+0x10>

000ddf38 <__hexnan>:
   ddf38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ddf3c:	680b      	ldr	r3, [r1, #0]
   ddf3e:	6801      	ldr	r1, [r0, #0]
   ddf40:	115e      	asrs	r6, r3, #5
   ddf42:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   ddf46:	f013 031f 	ands.w	r3, r3, #31
   ddf4a:	b087      	sub	sp, #28
   ddf4c:	bf18      	it	ne
   ddf4e:	3604      	addne	r6, #4
   ddf50:	2500      	movs	r5, #0
   ddf52:	1f37      	subs	r7, r6, #4
   ddf54:	4682      	mov	sl, r0
   ddf56:	4690      	mov	r8, r2
   ddf58:	9301      	str	r3, [sp, #4]
   ddf5a:	f846 5c04 	str.w	r5, [r6, #-4]
   ddf5e:	46b9      	mov	r9, r7
   ddf60:	463c      	mov	r4, r7
   ddf62:	9502      	str	r5, [sp, #8]
   ddf64:	46ab      	mov	fp, r5
   ddf66:	784a      	ldrb	r2, [r1, #1]
   ddf68:	1c4b      	adds	r3, r1, #1
   ddf6a:	9303      	str	r3, [sp, #12]
   ddf6c:	b342      	cbz	r2, ddfc0 <__hexnan+0x88>
   ddf6e:	4610      	mov	r0, r2
   ddf70:	9105      	str	r1, [sp, #20]
   ddf72:	9204      	str	r2, [sp, #16]
   ddf74:	f7ff fd70 	bl	dda58 <__hexdig_fun>
   ddf78:	2800      	cmp	r0, #0
   ddf7a:	d14f      	bne.n	de01c <__hexnan+0xe4>
   ddf7c:	9a04      	ldr	r2, [sp, #16]
   ddf7e:	9905      	ldr	r1, [sp, #20]
   ddf80:	2a20      	cmp	r2, #32
   ddf82:	d818      	bhi.n	ddfb6 <__hexnan+0x7e>
   ddf84:	9b02      	ldr	r3, [sp, #8]
   ddf86:	459b      	cmp	fp, r3
   ddf88:	dd13      	ble.n	ddfb2 <__hexnan+0x7a>
   ddf8a:	454c      	cmp	r4, r9
   ddf8c:	d206      	bcs.n	ddf9c <__hexnan+0x64>
   ddf8e:	2d07      	cmp	r5, #7
   ddf90:	dc04      	bgt.n	ddf9c <__hexnan+0x64>
   ddf92:	462a      	mov	r2, r5
   ddf94:	4649      	mov	r1, r9
   ddf96:	4620      	mov	r0, r4
   ddf98:	f7ff ffa8 	bl	ddeec <L_shift>
   ddf9c:	4544      	cmp	r4, r8
   ddf9e:	d950      	bls.n	de042 <__hexnan+0x10a>
   ddfa0:	2300      	movs	r3, #0
   ddfa2:	f1a4 0904 	sub.w	r9, r4, #4
   ddfa6:	f844 3c04 	str.w	r3, [r4, #-4]
   ddfaa:	f8cd b008 	str.w	fp, [sp, #8]
   ddfae:	464c      	mov	r4, r9
   ddfb0:	461d      	mov	r5, r3
   ddfb2:	9903      	ldr	r1, [sp, #12]
   ddfb4:	e7d7      	b.n	ddf66 <__hexnan+0x2e>
   ddfb6:	2a29      	cmp	r2, #41	; 0x29
   ddfb8:	d156      	bne.n	de068 <__hexnan+0x130>
   ddfba:	3102      	adds	r1, #2
   ddfbc:	f8ca 1000 	str.w	r1, [sl]
   ddfc0:	f1bb 0f00 	cmp.w	fp, #0
   ddfc4:	d050      	beq.n	de068 <__hexnan+0x130>
   ddfc6:	454c      	cmp	r4, r9
   ddfc8:	d206      	bcs.n	ddfd8 <__hexnan+0xa0>
   ddfca:	2d07      	cmp	r5, #7
   ddfcc:	dc04      	bgt.n	ddfd8 <__hexnan+0xa0>
   ddfce:	462a      	mov	r2, r5
   ddfd0:	4649      	mov	r1, r9
   ddfd2:	4620      	mov	r0, r4
   ddfd4:	f7ff ff8a 	bl	ddeec <L_shift>
   ddfd8:	4544      	cmp	r4, r8
   ddfda:	d934      	bls.n	de046 <__hexnan+0x10e>
   ddfdc:	f1a8 0204 	sub.w	r2, r8, #4
   ddfe0:	4623      	mov	r3, r4
   ddfe2:	f853 1b04 	ldr.w	r1, [r3], #4
   ddfe6:	f842 1f04 	str.w	r1, [r2, #4]!
   ddfea:	429f      	cmp	r7, r3
   ddfec:	d2f9      	bcs.n	ddfe2 <__hexnan+0xaa>
   ddfee:	1b3b      	subs	r3, r7, r4
   ddff0:	f023 0303 	bic.w	r3, r3, #3
   ddff4:	3304      	adds	r3, #4
   ddff6:	3401      	adds	r4, #1
   ddff8:	3e03      	subs	r6, #3
   ddffa:	42b4      	cmp	r4, r6
   ddffc:	bf88      	it	hi
   ddffe:	2304      	movhi	r3, #4
   de000:	4443      	add	r3, r8
   de002:	2200      	movs	r2, #0
   de004:	f843 2b04 	str.w	r2, [r3], #4
   de008:	429f      	cmp	r7, r3
   de00a:	d2fb      	bcs.n	de004 <__hexnan+0xcc>
   de00c:	683b      	ldr	r3, [r7, #0]
   de00e:	b91b      	cbnz	r3, de018 <__hexnan+0xe0>
   de010:	4547      	cmp	r7, r8
   de012:	d127      	bne.n	de064 <__hexnan+0x12c>
   de014:	2301      	movs	r3, #1
   de016:	603b      	str	r3, [r7, #0]
   de018:	2005      	movs	r0, #5
   de01a:	e026      	b.n	de06a <__hexnan+0x132>
   de01c:	3501      	adds	r5, #1
   de01e:	2d08      	cmp	r5, #8
   de020:	f10b 0b01 	add.w	fp, fp, #1
   de024:	dd06      	ble.n	de034 <__hexnan+0xfc>
   de026:	4544      	cmp	r4, r8
   de028:	d9c3      	bls.n	ddfb2 <__hexnan+0x7a>
   de02a:	2300      	movs	r3, #0
   de02c:	f844 3c04 	str.w	r3, [r4, #-4]
   de030:	2501      	movs	r5, #1
   de032:	3c04      	subs	r4, #4
   de034:	6822      	ldr	r2, [r4, #0]
   de036:	f000 000f 	and.w	r0, r0, #15
   de03a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   de03e:	6022      	str	r2, [r4, #0]
   de040:	e7b7      	b.n	ddfb2 <__hexnan+0x7a>
   de042:	2508      	movs	r5, #8
   de044:	e7b5      	b.n	ddfb2 <__hexnan+0x7a>
   de046:	9b01      	ldr	r3, [sp, #4]
   de048:	2b00      	cmp	r3, #0
   de04a:	d0df      	beq.n	de00c <__hexnan+0xd4>
   de04c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   de050:	f1c3 0320 	rsb	r3, r3, #32
   de054:	fa22 f303 	lsr.w	r3, r2, r3
   de058:	f856 2c04 	ldr.w	r2, [r6, #-4]
   de05c:	401a      	ands	r2, r3
   de05e:	f846 2c04 	str.w	r2, [r6, #-4]
   de062:	e7d3      	b.n	de00c <__hexnan+0xd4>
   de064:	3f04      	subs	r7, #4
   de066:	e7d1      	b.n	de00c <__hexnan+0xd4>
   de068:	2004      	movs	r0, #4
   de06a:	b007      	add	sp, #28
   de06c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000de070 <__retarget_lock_acquire_recursive>:
   de070:	4770      	bx	lr

000de072 <__retarget_lock_release>:
   de072:	4770      	bx	lr

000de074 <__retarget_lock_release_recursive>:
   de074:	4770      	bx	lr

000de076 <__ascii_mbtowc>:
   de076:	b082      	sub	sp, #8
   de078:	b901      	cbnz	r1, de07c <__ascii_mbtowc+0x6>
   de07a:	a901      	add	r1, sp, #4
   de07c:	b142      	cbz	r2, de090 <__ascii_mbtowc+0x1a>
   de07e:	b14b      	cbz	r3, de094 <__ascii_mbtowc+0x1e>
   de080:	7813      	ldrb	r3, [r2, #0]
   de082:	600b      	str	r3, [r1, #0]
   de084:	7812      	ldrb	r2, [r2, #0]
   de086:	1e10      	subs	r0, r2, #0
   de088:	bf18      	it	ne
   de08a:	2001      	movne	r0, #1
   de08c:	b002      	add	sp, #8
   de08e:	4770      	bx	lr
   de090:	4610      	mov	r0, r2
   de092:	e7fb      	b.n	de08c <__ascii_mbtowc+0x16>
   de094:	f06f 0001 	mvn.w	r0, #1
   de098:	e7f8      	b.n	de08c <__ascii_mbtowc+0x16>

000de09a <_Balloc>:
   de09a:	b570      	push	{r4, r5, r6, lr}
   de09c:	6a46      	ldr	r6, [r0, #36]	; 0x24
   de09e:	4604      	mov	r4, r0
   de0a0:	460d      	mov	r5, r1
   de0a2:	b93e      	cbnz	r6, de0b4 <_Balloc+0x1a>
   de0a4:	2010      	movs	r0, #16
   de0a6:	f7f9 fd49 	bl	d7b3c <malloc>
   de0aa:	e9c0 6601 	strd	r6, r6, [r0, #4]
   de0ae:	6260      	str	r0, [r4, #36]	; 0x24
   de0b0:	6006      	str	r6, [r0, #0]
   de0b2:	60c6      	str	r6, [r0, #12]
   de0b4:	6a66      	ldr	r6, [r4, #36]	; 0x24
   de0b6:	68f3      	ldr	r3, [r6, #12]
   de0b8:	b183      	cbz	r3, de0dc <_Balloc+0x42>
   de0ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
   de0bc:	68db      	ldr	r3, [r3, #12]
   de0be:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   de0c2:	b9b8      	cbnz	r0, de0f4 <_Balloc+0x5a>
   de0c4:	2101      	movs	r1, #1
   de0c6:	fa01 f605 	lsl.w	r6, r1, r5
   de0ca:	1d72      	adds	r2, r6, #5
   de0cc:	0092      	lsls	r2, r2, #2
   de0ce:	4620      	mov	r0, r4
   de0d0:	f000 fc23 	bl	de91a <_calloc_r>
   de0d4:	b160      	cbz	r0, de0f0 <_Balloc+0x56>
   de0d6:	e9c0 5601 	strd	r5, r6, [r0, #4]
   de0da:	e00e      	b.n	de0fa <_Balloc+0x60>
   de0dc:	2221      	movs	r2, #33	; 0x21
   de0de:	2104      	movs	r1, #4
   de0e0:	4620      	mov	r0, r4
   de0e2:	f000 fc1a 	bl	de91a <_calloc_r>
   de0e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   de0e8:	60f0      	str	r0, [r6, #12]
   de0ea:	68db      	ldr	r3, [r3, #12]
   de0ec:	2b00      	cmp	r3, #0
   de0ee:	d1e4      	bne.n	de0ba <_Balloc+0x20>
   de0f0:	2000      	movs	r0, #0
   de0f2:	bd70      	pop	{r4, r5, r6, pc}
   de0f4:	6802      	ldr	r2, [r0, #0]
   de0f6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   de0fa:	2300      	movs	r3, #0
   de0fc:	e9c0 3303 	strd	r3, r3, [r0, #12]
   de100:	e7f7      	b.n	de0f2 <_Balloc+0x58>

000de102 <_Bfree>:
   de102:	b570      	push	{r4, r5, r6, lr}
   de104:	6a46      	ldr	r6, [r0, #36]	; 0x24
   de106:	4605      	mov	r5, r0
   de108:	460c      	mov	r4, r1
   de10a:	b93e      	cbnz	r6, de11c <_Bfree+0x1a>
   de10c:	2010      	movs	r0, #16
   de10e:	f7f9 fd15 	bl	d7b3c <malloc>
   de112:	e9c0 6601 	strd	r6, r6, [r0, #4]
   de116:	6268      	str	r0, [r5, #36]	; 0x24
   de118:	6006      	str	r6, [r0, #0]
   de11a:	60c6      	str	r6, [r0, #12]
   de11c:	b13c      	cbz	r4, de12e <_Bfree+0x2c>
   de11e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   de120:	6862      	ldr	r2, [r4, #4]
   de122:	68db      	ldr	r3, [r3, #12]
   de124:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   de128:	6021      	str	r1, [r4, #0]
   de12a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   de12e:	bd70      	pop	{r4, r5, r6, pc}

000de130 <__multadd>:
   de130:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   de134:	690e      	ldr	r6, [r1, #16]
   de136:	4607      	mov	r7, r0
   de138:	4698      	mov	r8, r3
   de13a:	460c      	mov	r4, r1
   de13c:	f101 0014 	add.w	r0, r1, #20
   de140:	2300      	movs	r3, #0
   de142:	6805      	ldr	r5, [r0, #0]
   de144:	b2a9      	uxth	r1, r5
   de146:	fb02 8101 	mla	r1, r2, r1, r8
   de14a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
   de14e:	0c2d      	lsrs	r5, r5, #16
   de150:	fb02 c505 	mla	r5, r2, r5, ip
   de154:	b289      	uxth	r1, r1
   de156:	3301      	adds	r3, #1
   de158:	eb01 4105 	add.w	r1, r1, r5, lsl #16
   de15c:	429e      	cmp	r6, r3
   de15e:	f840 1b04 	str.w	r1, [r0], #4
   de162:	ea4f 4815 	mov.w	r8, r5, lsr #16
   de166:	dcec      	bgt.n	de142 <__multadd+0x12>
   de168:	f1b8 0f00 	cmp.w	r8, #0
   de16c:	d01b      	beq.n	de1a6 <__multadd+0x76>
   de16e:	68a3      	ldr	r3, [r4, #8]
   de170:	42b3      	cmp	r3, r6
   de172:	dc12      	bgt.n	de19a <__multadd+0x6a>
   de174:	6861      	ldr	r1, [r4, #4]
   de176:	4638      	mov	r0, r7
   de178:	3101      	adds	r1, #1
   de17a:	f7ff ff8e 	bl	de09a <_Balloc>
   de17e:	6922      	ldr	r2, [r4, #16]
   de180:	3202      	adds	r2, #2
   de182:	f104 010c 	add.w	r1, r4, #12
   de186:	4605      	mov	r5, r0
   de188:	0092      	lsls	r2, r2, #2
   de18a:	300c      	adds	r0, #12
   de18c:	f7fe fbb2 	bl	dc8f4 <memcpy>
   de190:	4621      	mov	r1, r4
   de192:	4638      	mov	r0, r7
   de194:	f7ff ffb5 	bl	de102 <_Bfree>
   de198:	462c      	mov	r4, r5
   de19a:	eb04 0386 	add.w	r3, r4, r6, lsl #2
   de19e:	3601      	adds	r6, #1
   de1a0:	f8c3 8014 	str.w	r8, [r3, #20]
   de1a4:	6126      	str	r6, [r4, #16]
   de1a6:	4620      	mov	r0, r4
   de1a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000de1ac <__s2b>:
   de1ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   de1b0:	460c      	mov	r4, r1
   de1b2:	4615      	mov	r5, r2
   de1b4:	461f      	mov	r7, r3
   de1b6:	2209      	movs	r2, #9
   de1b8:	3308      	adds	r3, #8
   de1ba:	4606      	mov	r6, r0
   de1bc:	fb93 f3f2 	sdiv	r3, r3, r2
   de1c0:	2100      	movs	r1, #0
   de1c2:	2201      	movs	r2, #1
   de1c4:	429a      	cmp	r2, r3
   de1c6:	db20      	blt.n	de20a <__s2b+0x5e>
   de1c8:	4630      	mov	r0, r6
   de1ca:	f7ff ff66 	bl	de09a <_Balloc>
   de1ce:	9b08      	ldr	r3, [sp, #32]
   de1d0:	6143      	str	r3, [r0, #20]
   de1d2:	2d09      	cmp	r5, #9
   de1d4:	f04f 0301 	mov.w	r3, #1
   de1d8:	6103      	str	r3, [r0, #16]
   de1da:	dd19      	ble.n	de210 <__s2b+0x64>
   de1dc:	f104 0909 	add.w	r9, r4, #9
   de1e0:	46c8      	mov	r8, r9
   de1e2:	442c      	add	r4, r5
   de1e4:	f818 3b01 	ldrb.w	r3, [r8], #1
   de1e8:	4601      	mov	r1, r0
   de1ea:	3b30      	subs	r3, #48	; 0x30
   de1ec:	220a      	movs	r2, #10
   de1ee:	4630      	mov	r0, r6
   de1f0:	f7ff ff9e 	bl	de130 <__multadd>
   de1f4:	45a0      	cmp	r8, r4
   de1f6:	d1f5      	bne.n	de1e4 <__s2b+0x38>
   de1f8:	f1a5 0408 	sub.w	r4, r5, #8
   de1fc:	444c      	add	r4, r9
   de1fe:	1b2d      	subs	r5, r5, r4
   de200:	1963      	adds	r3, r4, r5
   de202:	42bb      	cmp	r3, r7
   de204:	db07      	blt.n	de216 <__s2b+0x6a>
   de206:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   de20a:	0052      	lsls	r2, r2, #1
   de20c:	3101      	adds	r1, #1
   de20e:	e7d9      	b.n	de1c4 <__s2b+0x18>
   de210:	340a      	adds	r4, #10
   de212:	2509      	movs	r5, #9
   de214:	e7f3      	b.n	de1fe <__s2b+0x52>
   de216:	f814 3b01 	ldrb.w	r3, [r4], #1
   de21a:	4601      	mov	r1, r0
   de21c:	3b30      	subs	r3, #48	; 0x30
   de21e:	220a      	movs	r2, #10
   de220:	4630      	mov	r0, r6
   de222:	f7ff ff85 	bl	de130 <__multadd>
   de226:	e7eb      	b.n	de200 <__s2b+0x54>

000de228 <__hi0bits>:
   de228:	0c03      	lsrs	r3, r0, #16
   de22a:	041b      	lsls	r3, r3, #16
   de22c:	b9d3      	cbnz	r3, de264 <__hi0bits+0x3c>
   de22e:	0400      	lsls	r0, r0, #16
   de230:	2310      	movs	r3, #16
   de232:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   de236:	bf04      	itt	eq
   de238:	0200      	lsleq	r0, r0, #8
   de23a:	3308      	addeq	r3, #8
   de23c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   de240:	bf04      	itt	eq
   de242:	0100      	lsleq	r0, r0, #4
   de244:	3304      	addeq	r3, #4
   de246:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   de24a:	bf04      	itt	eq
   de24c:	0080      	lsleq	r0, r0, #2
   de24e:	3302      	addeq	r3, #2
   de250:	2800      	cmp	r0, #0
   de252:	db05      	blt.n	de260 <__hi0bits+0x38>
   de254:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   de258:	f103 0301 	add.w	r3, r3, #1
   de25c:	bf08      	it	eq
   de25e:	2320      	moveq	r3, #32
   de260:	4618      	mov	r0, r3
   de262:	4770      	bx	lr
   de264:	2300      	movs	r3, #0
   de266:	e7e4      	b.n	de232 <__hi0bits+0xa>

000de268 <__lo0bits>:
   de268:	6803      	ldr	r3, [r0, #0]
   de26a:	f013 0207 	ands.w	r2, r3, #7
   de26e:	4601      	mov	r1, r0
   de270:	d00b      	beq.n	de28a <__lo0bits+0x22>
   de272:	07da      	lsls	r2, r3, #31
   de274:	d424      	bmi.n	de2c0 <__lo0bits+0x58>
   de276:	0798      	lsls	r0, r3, #30
   de278:	bf49      	itett	mi
   de27a:	085b      	lsrmi	r3, r3, #1
   de27c:	089b      	lsrpl	r3, r3, #2
   de27e:	2001      	movmi	r0, #1
   de280:	600b      	strmi	r3, [r1, #0]
   de282:	bf5c      	itt	pl
   de284:	600b      	strpl	r3, [r1, #0]
   de286:	2002      	movpl	r0, #2
   de288:	4770      	bx	lr
   de28a:	b298      	uxth	r0, r3
   de28c:	b9b0      	cbnz	r0, de2bc <__lo0bits+0x54>
   de28e:	0c1b      	lsrs	r3, r3, #16
   de290:	2010      	movs	r0, #16
   de292:	f013 0fff 	tst.w	r3, #255	; 0xff
   de296:	bf04      	itt	eq
   de298:	0a1b      	lsreq	r3, r3, #8
   de29a:	3008      	addeq	r0, #8
   de29c:	071a      	lsls	r2, r3, #28
   de29e:	bf04      	itt	eq
   de2a0:	091b      	lsreq	r3, r3, #4
   de2a2:	3004      	addeq	r0, #4
   de2a4:	079a      	lsls	r2, r3, #30
   de2a6:	bf04      	itt	eq
   de2a8:	089b      	lsreq	r3, r3, #2
   de2aa:	3002      	addeq	r0, #2
   de2ac:	07da      	lsls	r2, r3, #31
   de2ae:	d403      	bmi.n	de2b8 <__lo0bits+0x50>
   de2b0:	085b      	lsrs	r3, r3, #1
   de2b2:	f100 0001 	add.w	r0, r0, #1
   de2b6:	d005      	beq.n	de2c4 <__lo0bits+0x5c>
   de2b8:	600b      	str	r3, [r1, #0]
   de2ba:	4770      	bx	lr
   de2bc:	4610      	mov	r0, r2
   de2be:	e7e8      	b.n	de292 <__lo0bits+0x2a>
   de2c0:	2000      	movs	r0, #0
   de2c2:	4770      	bx	lr
   de2c4:	2020      	movs	r0, #32
   de2c6:	4770      	bx	lr

000de2c8 <__i2b>:
   de2c8:	b510      	push	{r4, lr}
   de2ca:	460c      	mov	r4, r1
   de2cc:	2101      	movs	r1, #1
   de2ce:	f7ff fee4 	bl	de09a <_Balloc>
   de2d2:	2201      	movs	r2, #1
   de2d4:	6144      	str	r4, [r0, #20]
   de2d6:	6102      	str	r2, [r0, #16]
   de2d8:	bd10      	pop	{r4, pc}

000de2da <__multiply>:
   de2da:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   de2de:	4615      	mov	r5, r2
   de2e0:	690a      	ldr	r2, [r1, #16]
   de2e2:	692b      	ldr	r3, [r5, #16]
   de2e4:	429a      	cmp	r2, r3
   de2e6:	bfb8      	it	lt
   de2e8:	460b      	movlt	r3, r1
   de2ea:	460c      	mov	r4, r1
   de2ec:	bfbc      	itt	lt
   de2ee:	462c      	movlt	r4, r5
   de2f0:	461d      	movlt	r5, r3
   de2f2:	6927      	ldr	r7, [r4, #16]
   de2f4:	f8d5 9010 	ldr.w	r9, [r5, #16]
   de2f8:	68a3      	ldr	r3, [r4, #8]
   de2fa:	6861      	ldr	r1, [r4, #4]
   de2fc:	eb07 0609 	add.w	r6, r7, r9
   de300:	42b3      	cmp	r3, r6
   de302:	bfb8      	it	lt
   de304:	3101      	addlt	r1, #1
   de306:	b085      	sub	sp, #20
   de308:	f7ff fec7 	bl	de09a <_Balloc>
   de30c:	f100 0114 	add.w	r1, r0, #20
   de310:	eb01 0886 	add.w	r8, r1, r6, lsl #2
   de314:	460b      	mov	r3, r1
   de316:	2200      	movs	r2, #0
   de318:	4543      	cmp	r3, r8
   de31a:	d31d      	bcc.n	de358 <__multiply+0x7e>
   de31c:	f104 0314 	add.w	r3, r4, #20
   de320:	f105 0214 	add.w	r2, r5, #20
   de324:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   de328:	eb02 0389 	add.w	r3, r2, r9, lsl #2
   de32c:	9302      	str	r3, [sp, #8]
   de32e:	1b3b      	subs	r3, r7, r4
   de330:	3b15      	subs	r3, #21
   de332:	f023 0303 	bic.w	r3, r3, #3
   de336:	3304      	adds	r3, #4
   de338:	f104 0515 	add.w	r5, r4, #21
   de33c:	42af      	cmp	r7, r5
   de33e:	bf38      	it	cc
   de340:	2304      	movcc	r3, #4
   de342:	9301      	str	r3, [sp, #4]
   de344:	9b02      	ldr	r3, [sp, #8]
   de346:	9203      	str	r2, [sp, #12]
   de348:	4293      	cmp	r3, r2
   de34a:	d808      	bhi.n	de35e <__multiply+0x84>
   de34c:	2e00      	cmp	r6, #0
   de34e:	dc5a      	bgt.n	de406 <__multiply+0x12c>
   de350:	6106      	str	r6, [r0, #16]
   de352:	b005      	add	sp, #20
   de354:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   de358:	f843 2b04 	str.w	r2, [r3], #4
   de35c:	e7dc      	b.n	de318 <__multiply+0x3e>
   de35e:	f8b2 a000 	ldrh.w	sl, [r2]
   de362:	f1ba 0f00 	cmp.w	sl, #0
   de366:	d024      	beq.n	de3b2 <__multiply+0xd8>
   de368:	f104 0e14 	add.w	lr, r4, #20
   de36c:	4689      	mov	r9, r1
   de36e:	f04f 0c00 	mov.w	ip, #0
   de372:	f85e 5b04 	ldr.w	r5, [lr], #4
   de376:	f8d9 b000 	ldr.w	fp, [r9]
   de37a:	b2ab      	uxth	r3, r5
   de37c:	fa1f fb8b 	uxth.w	fp, fp
   de380:	fb0a b303 	mla	r3, sl, r3, fp
   de384:	ea4f 4b15 	mov.w	fp, r5, lsr #16
   de388:	f8d9 5000 	ldr.w	r5, [r9]
   de38c:	4463      	add	r3, ip
   de38e:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   de392:	fb0a c50b 	mla	r5, sl, fp, ip
   de396:	eb05 4513 	add.w	r5, r5, r3, lsr #16
   de39a:	b29b      	uxth	r3, r3
   de39c:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
   de3a0:	4577      	cmp	r7, lr
   de3a2:	f849 3b04 	str.w	r3, [r9], #4
   de3a6:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   de3aa:	d8e2      	bhi.n	de372 <__multiply+0x98>
   de3ac:	9b01      	ldr	r3, [sp, #4]
   de3ae:	f841 c003 	str.w	ip, [r1, r3]
   de3b2:	9b03      	ldr	r3, [sp, #12]
   de3b4:	f8b3 9002 	ldrh.w	r9, [r3, #2]
   de3b8:	3204      	adds	r2, #4
   de3ba:	f1b9 0f00 	cmp.w	r9, #0
   de3be:	d020      	beq.n	de402 <__multiply+0x128>
   de3c0:	680b      	ldr	r3, [r1, #0]
   de3c2:	f104 0c14 	add.w	ip, r4, #20
   de3c6:	468e      	mov	lr, r1
   de3c8:	f04f 0a00 	mov.w	sl, #0
   de3cc:	f8bc 5000 	ldrh.w	r5, [ip]
   de3d0:	f8be b002 	ldrh.w	fp, [lr, #2]
   de3d4:	fb09 b505 	mla	r5, r9, r5, fp
   de3d8:	44aa      	add	sl, r5
   de3da:	b29b      	uxth	r3, r3
   de3dc:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
   de3e0:	f84e 3b04 	str.w	r3, [lr], #4
   de3e4:	f85c 3b04 	ldr.w	r3, [ip], #4
   de3e8:	f8be 5000 	ldrh.w	r5, [lr]
   de3ec:	0c1b      	lsrs	r3, r3, #16
   de3ee:	fb09 5303 	mla	r3, r9, r3, r5
   de3f2:	eb03 431a 	add.w	r3, r3, sl, lsr #16
   de3f6:	4567      	cmp	r7, ip
   de3f8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   de3fc:	d8e6      	bhi.n	de3cc <__multiply+0xf2>
   de3fe:	9d01      	ldr	r5, [sp, #4]
   de400:	514b      	str	r3, [r1, r5]
   de402:	3104      	adds	r1, #4
   de404:	e79e      	b.n	de344 <__multiply+0x6a>
   de406:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   de40a:	2b00      	cmp	r3, #0
   de40c:	d1a0      	bne.n	de350 <__multiply+0x76>
   de40e:	3e01      	subs	r6, #1
   de410:	e79c      	b.n	de34c <__multiply+0x72>
	...

000de414 <__pow5mult>:
   de414:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   de418:	4615      	mov	r5, r2
   de41a:	f012 0203 	ands.w	r2, r2, #3
   de41e:	4606      	mov	r6, r0
   de420:	460f      	mov	r7, r1
   de422:	d007      	beq.n	de434 <__pow5mult+0x20>
   de424:	4c21      	ldr	r4, [pc, #132]	; (de4ac <__pow5mult+0x98>)
   de426:	3a01      	subs	r2, #1
   de428:	2300      	movs	r3, #0
   de42a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   de42e:	f7ff fe7f 	bl	de130 <__multadd>
   de432:	4607      	mov	r7, r0
   de434:	10ad      	asrs	r5, r5, #2
   de436:	d035      	beq.n	de4a4 <__pow5mult+0x90>
   de438:	6a74      	ldr	r4, [r6, #36]	; 0x24
   de43a:	b93c      	cbnz	r4, de44c <__pow5mult+0x38>
   de43c:	2010      	movs	r0, #16
   de43e:	f7f9 fb7d 	bl	d7b3c <malloc>
   de442:	e9c0 4401 	strd	r4, r4, [r0, #4]
   de446:	6270      	str	r0, [r6, #36]	; 0x24
   de448:	6004      	str	r4, [r0, #0]
   de44a:	60c4      	str	r4, [r0, #12]
   de44c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   de450:	f8d8 4008 	ldr.w	r4, [r8, #8]
   de454:	b94c      	cbnz	r4, de46a <__pow5mult+0x56>
   de456:	f240 2171 	movw	r1, #625	; 0x271
   de45a:	4630      	mov	r0, r6
   de45c:	f7ff ff34 	bl	de2c8 <__i2b>
   de460:	2300      	movs	r3, #0
   de462:	f8c8 0008 	str.w	r0, [r8, #8]
   de466:	4604      	mov	r4, r0
   de468:	6003      	str	r3, [r0, #0]
   de46a:	f04f 0900 	mov.w	r9, #0
   de46e:	07eb      	lsls	r3, r5, #31
   de470:	d50a      	bpl.n	de488 <__pow5mult+0x74>
   de472:	4639      	mov	r1, r7
   de474:	4622      	mov	r2, r4
   de476:	4630      	mov	r0, r6
   de478:	f7ff ff2f 	bl	de2da <__multiply>
   de47c:	4639      	mov	r1, r7
   de47e:	4680      	mov	r8, r0
   de480:	4630      	mov	r0, r6
   de482:	f7ff fe3e 	bl	de102 <_Bfree>
   de486:	4647      	mov	r7, r8
   de488:	106d      	asrs	r5, r5, #1
   de48a:	d00b      	beq.n	de4a4 <__pow5mult+0x90>
   de48c:	6820      	ldr	r0, [r4, #0]
   de48e:	b938      	cbnz	r0, de4a0 <__pow5mult+0x8c>
   de490:	4622      	mov	r2, r4
   de492:	4621      	mov	r1, r4
   de494:	4630      	mov	r0, r6
   de496:	f7ff ff20 	bl	de2da <__multiply>
   de49a:	6020      	str	r0, [r4, #0]
   de49c:	f8c0 9000 	str.w	r9, [r0]
   de4a0:	4604      	mov	r4, r0
   de4a2:	e7e4      	b.n	de46e <__pow5mult+0x5a>
   de4a4:	4638      	mov	r0, r7
   de4a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   de4aa:	bf00      	nop
   de4ac:	000dfd40 	.word	0x000dfd40

000de4b0 <__lshift>:
   de4b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   de4b4:	460c      	mov	r4, r1
   de4b6:	6849      	ldr	r1, [r1, #4]
   de4b8:	6923      	ldr	r3, [r4, #16]
   de4ba:	eb03 1862 	add.w	r8, r3, r2, asr #5
   de4be:	68a3      	ldr	r3, [r4, #8]
   de4c0:	4607      	mov	r7, r0
   de4c2:	4691      	mov	r9, r2
   de4c4:	ea4f 1a62 	mov.w	sl, r2, asr #5
   de4c8:	f108 0601 	add.w	r6, r8, #1
   de4cc:	42b3      	cmp	r3, r6
   de4ce:	db3f      	blt.n	de550 <__lshift+0xa0>
   de4d0:	4638      	mov	r0, r7
   de4d2:	f7ff fde2 	bl	de09a <_Balloc>
   de4d6:	2300      	movs	r3, #0
   de4d8:	4605      	mov	r5, r0
   de4da:	f100 0114 	add.w	r1, r0, #20
   de4de:	f100 0210 	add.w	r2, r0, #16
   de4e2:	4618      	mov	r0, r3
   de4e4:	4553      	cmp	r3, sl
   de4e6:	db36      	blt.n	de556 <__lshift+0xa6>
   de4e8:	6920      	ldr	r0, [r4, #16]
   de4ea:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   de4ee:	f104 0314 	add.w	r3, r4, #20
   de4f2:	f019 091f 	ands.w	r9, r9, #31
   de4f6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   de4fa:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   de4fe:	d02e      	beq.n	de55e <__lshift+0xae>
   de500:	f1c9 0e20 	rsb	lr, r9, #32
   de504:	468a      	mov	sl, r1
   de506:	2200      	movs	r2, #0
   de508:	6818      	ldr	r0, [r3, #0]
   de50a:	fa00 f009 	lsl.w	r0, r0, r9
   de50e:	4302      	orrs	r2, r0
   de510:	f84a 2b04 	str.w	r2, [sl], #4
   de514:	f853 2b04 	ldr.w	r2, [r3], #4
   de518:	459c      	cmp	ip, r3
   de51a:	fa22 f20e 	lsr.w	r2, r2, lr
   de51e:	d8f3      	bhi.n	de508 <__lshift+0x58>
   de520:	ebac 0304 	sub.w	r3, ip, r4
   de524:	3b15      	subs	r3, #21
   de526:	f023 0303 	bic.w	r3, r3, #3
   de52a:	3304      	adds	r3, #4
   de52c:	f104 0015 	add.w	r0, r4, #21
   de530:	4560      	cmp	r0, ip
   de532:	bf88      	it	hi
   de534:	2304      	movhi	r3, #4
   de536:	50ca      	str	r2, [r1, r3]
   de538:	b10a      	cbz	r2, de53e <__lshift+0x8e>
   de53a:	f108 0602 	add.w	r6, r8, #2
   de53e:	3e01      	subs	r6, #1
   de540:	4638      	mov	r0, r7
   de542:	612e      	str	r6, [r5, #16]
   de544:	4621      	mov	r1, r4
   de546:	f7ff fddc 	bl	de102 <_Bfree>
   de54a:	4628      	mov	r0, r5
   de54c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   de550:	3101      	adds	r1, #1
   de552:	005b      	lsls	r3, r3, #1
   de554:	e7ba      	b.n	de4cc <__lshift+0x1c>
   de556:	f842 0f04 	str.w	r0, [r2, #4]!
   de55a:	3301      	adds	r3, #1
   de55c:	e7c2      	b.n	de4e4 <__lshift+0x34>
   de55e:	3904      	subs	r1, #4
   de560:	f853 2b04 	ldr.w	r2, [r3], #4
   de564:	f841 2f04 	str.w	r2, [r1, #4]!
   de568:	459c      	cmp	ip, r3
   de56a:	d8f9      	bhi.n	de560 <__lshift+0xb0>
   de56c:	e7e7      	b.n	de53e <__lshift+0x8e>

000de56e <__mcmp>:
   de56e:	b530      	push	{r4, r5, lr}
   de570:	6902      	ldr	r2, [r0, #16]
   de572:	690c      	ldr	r4, [r1, #16]
   de574:	1b12      	subs	r2, r2, r4
   de576:	d10e      	bne.n	de596 <__mcmp+0x28>
   de578:	f100 0314 	add.w	r3, r0, #20
   de57c:	3114      	adds	r1, #20
   de57e:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   de582:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   de586:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   de58a:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   de58e:	42a5      	cmp	r5, r4
   de590:	d003      	beq.n	de59a <__mcmp+0x2c>
   de592:	d305      	bcc.n	de5a0 <__mcmp+0x32>
   de594:	2201      	movs	r2, #1
   de596:	4610      	mov	r0, r2
   de598:	bd30      	pop	{r4, r5, pc}
   de59a:	4283      	cmp	r3, r0
   de59c:	d3f3      	bcc.n	de586 <__mcmp+0x18>
   de59e:	e7fa      	b.n	de596 <__mcmp+0x28>
   de5a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   de5a4:	e7f7      	b.n	de596 <__mcmp+0x28>

000de5a6 <__mdiff>:
   de5a6:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   de5aa:	460c      	mov	r4, r1
   de5ac:	4606      	mov	r6, r0
   de5ae:	4611      	mov	r1, r2
   de5b0:	4620      	mov	r0, r4
   de5b2:	4617      	mov	r7, r2
   de5b4:	f7ff ffdb 	bl	de56e <__mcmp>
   de5b8:	1e05      	subs	r5, r0, #0
   de5ba:	d108      	bne.n	de5ce <__mdiff+0x28>
   de5bc:	4629      	mov	r1, r5
   de5be:	4630      	mov	r0, r6
   de5c0:	f7ff fd6b 	bl	de09a <_Balloc>
   de5c4:	2301      	movs	r3, #1
   de5c6:	e9c0 3504 	strd	r3, r5, [r0, #16]
   de5ca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   de5ce:	bfa4      	itt	ge
   de5d0:	463b      	movge	r3, r7
   de5d2:	4627      	movge	r7, r4
   de5d4:	4630      	mov	r0, r6
   de5d6:	6879      	ldr	r1, [r7, #4]
   de5d8:	bfa6      	itte	ge
   de5da:	461c      	movge	r4, r3
   de5dc:	2500      	movge	r5, #0
   de5de:	2501      	movlt	r5, #1
   de5e0:	f7ff fd5b 	bl	de09a <_Balloc>
   de5e4:	693e      	ldr	r6, [r7, #16]
   de5e6:	60c5      	str	r5, [r0, #12]
   de5e8:	6925      	ldr	r5, [r4, #16]
   de5ea:	f107 0114 	add.w	r1, r7, #20
   de5ee:	f104 0914 	add.w	r9, r4, #20
   de5f2:	f100 0e14 	add.w	lr, r0, #20
   de5f6:	f107 0210 	add.w	r2, r7, #16
   de5fa:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
   de5fe:	eb09 0585 	add.w	r5, r9, r5, lsl #2
   de602:	46f2      	mov	sl, lr
   de604:	2700      	movs	r7, #0
   de606:	f859 3b04 	ldr.w	r3, [r9], #4
   de60a:	f852 bf04 	ldr.w	fp, [r2, #4]!
   de60e:	fa1f f883 	uxth.w	r8, r3
   de612:	fa17 f78b 	uxtah	r7, r7, fp
   de616:	0c1b      	lsrs	r3, r3, #16
   de618:	eba7 0808 	sub.w	r8, r7, r8
   de61c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   de620:	eb03 4328 	add.w	r3, r3, r8, asr #16
   de624:	fa1f f888 	uxth.w	r8, r8
   de628:	141f      	asrs	r7, r3, #16
   de62a:	454d      	cmp	r5, r9
   de62c:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   de630:	f84a 3b04 	str.w	r3, [sl], #4
   de634:	d8e7      	bhi.n	de606 <__mdiff+0x60>
   de636:	1b2b      	subs	r3, r5, r4
   de638:	3b15      	subs	r3, #21
   de63a:	f023 0303 	bic.w	r3, r3, #3
   de63e:	3304      	adds	r3, #4
   de640:	3415      	adds	r4, #21
   de642:	42a5      	cmp	r5, r4
   de644:	bf38      	it	cc
   de646:	2304      	movcc	r3, #4
   de648:	4419      	add	r1, r3
   de64a:	4473      	add	r3, lr
   de64c:	469e      	mov	lr, r3
   de64e:	460d      	mov	r5, r1
   de650:	4565      	cmp	r5, ip
   de652:	d30e      	bcc.n	de672 <__mdiff+0xcc>
   de654:	f10c 0203 	add.w	r2, ip, #3
   de658:	1a52      	subs	r2, r2, r1
   de65a:	f022 0203 	bic.w	r2, r2, #3
   de65e:	3903      	subs	r1, #3
   de660:	458c      	cmp	ip, r1
   de662:	bf38      	it	cc
   de664:	2200      	movcc	r2, #0
   de666:	441a      	add	r2, r3
   de668:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   de66c:	b17b      	cbz	r3, de68e <__mdiff+0xe8>
   de66e:	6106      	str	r6, [r0, #16]
   de670:	e7ab      	b.n	de5ca <__mdiff+0x24>
   de672:	f855 8b04 	ldr.w	r8, [r5], #4
   de676:	fa17 f488 	uxtah	r4, r7, r8
   de67a:	1422      	asrs	r2, r4, #16
   de67c:	eb02 4218 	add.w	r2, r2, r8, lsr #16
   de680:	b2a4      	uxth	r4, r4
   de682:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
   de686:	f84e 4b04 	str.w	r4, [lr], #4
   de68a:	1417      	asrs	r7, r2, #16
   de68c:	e7e0      	b.n	de650 <__mdiff+0xaa>
   de68e:	3e01      	subs	r6, #1
   de690:	e7ea      	b.n	de668 <__mdiff+0xc2>
	...

000de694 <__ulp>:
   de694:	b082      	sub	sp, #8
   de696:	ed8d 0b00 	vstr	d0, [sp]
   de69a:	9b01      	ldr	r3, [sp, #4]
   de69c:	4912      	ldr	r1, [pc, #72]	; (de6e8 <__ulp+0x54>)
   de69e:	4019      	ands	r1, r3
   de6a0:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
   de6a4:	2900      	cmp	r1, #0
   de6a6:	dd05      	ble.n	de6b4 <__ulp+0x20>
   de6a8:	2200      	movs	r2, #0
   de6aa:	460b      	mov	r3, r1
   de6ac:	ec43 2b10 	vmov	d0, r2, r3
   de6b0:	b002      	add	sp, #8
   de6b2:	4770      	bx	lr
   de6b4:	4249      	negs	r1, r1
   de6b6:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
   de6ba:	ea4f 5021 	mov.w	r0, r1, asr #20
   de6be:	f04f 0200 	mov.w	r2, #0
   de6c2:	f04f 0300 	mov.w	r3, #0
   de6c6:	da04      	bge.n	de6d2 <__ulp+0x3e>
   de6c8:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   de6cc:	fa41 f300 	asr.w	r3, r1, r0
   de6d0:	e7ec      	b.n	de6ac <__ulp+0x18>
   de6d2:	f1a0 0114 	sub.w	r1, r0, #20
   de6d6:	291e      	cmp	r1, #30
   de6d8:	bfda      	itte	le
   de6da:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
   de6de:	fa20 f101 	lsrle.w	r1, r0, r1
   de6e2:	2101      	movgt	r1, #1
   de6e4:	460a      	mov	r2, r1
   de6e6:	e7e1      	b.n	de6ac <__ulp+0x18>
   de6e8:	7ff00000 	.word	0x7ff00000

000de6ec <__b2d>:
   de6ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   de6ee:	6905      	ldr	r5, [r0, #16]
   de6f0:	f100 0714 	add.w	r7, r0, #20
   de6f4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   de6f8:	1f2e      	subs	r6, r5, #4
   de6fa:	f855 4c04 	ldr.w	r4, [r5, #-4]
   de6fe:	4620      	mov	r0, r4
   de700:	f7ff fd92 	bl	de228 <__hi0bits>
   de704:	f1c0 0320 	rsb	r3, r0, #32
   de708:	280a      	cmp	r0, #10
   de70a:	f8df c07c 	ldr.w	ip, [pc, #124]	; de788 <__b2d+0x9c>
   de70e:	600b      	str	r3, [r1, #0]
   de710:	dc14      	bgt.n	de73c <__b2d+0x50>
   de712:	f1c0 0e0b 	rsb	lr, r0, #11
   de716:	fa24 f10e 	lsr.w	r1, r4, lr
   de71a:	42b7      	cmp	r7, r6
   de71c:	ea41 030c 	orr.w	r3, r1, ip
   de720:	bf34      	ite	cc
   de722:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   de726:	2100      	movcs	r1, #0
   de728:	3015      	adds	r0, #21
   de72a:	fa04 f000 	lsl.w	r0, r4, r0
   de72e:	fa21 f10e 	lsr.w	r1, r1, lr
   de732:	ea40 0201 	orr.w	r2, r0, r1
   de736:	ec43 2b10 	vmov	d0, r2, r3
   de73a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   de73c:	42b7      	cmp	r7, r6
   de73e:	bf3a      	itte	cc
   de740:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   de744:	f1a5 0608 	subcc.w	r6, r5, #8
   de748:	2100      	movcs	r1, #0
   de74a:	380b      	subs	r0, #11
   de74c:	d017      	beq.n	de77e <__b2d+0x92>
   de74e:	f1c0 0c20 	rsb	ip, r0, #32
   de752:	fa04 f500 	lsl.w	r5, r4, r0
   de756:	42be      	cmp	r6, r7
   de758:	fa21 f40c 	lsr.w	r4, r1, ip
   de75c:	ea45 0504 	orr.w	r5, r5, r4
   de760:	bf8c      	ite	hi
   de762:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   de766:	2400      	movls	r4, #0
   de768:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   de76c:	fa01 f000 	lsl.w	r0, r1, r0
   de770:	fa24 f40c 	lsr.w	r4, r4, ip
   de774:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   de778:	ea40 0204 	orr.w	r2, r0, r4
   de77c:	e7db      	b.n	de736 <__b2d+0x4a>
   de77e:	ea44 030c 	orr.w	r3, r4, ip
   de782:	460a      	mov	r2, r1
   de784:	e7d7      	b.n	de736 <__b2d+0x4a>
   de786:	bf00      	nop
   de788:	3ff00000 	.word	0x3ff00000

000de78c <__d2b>:
   de78c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   de790:	4689      	mov	r9, r1
   de792:	2101      	movs	r1, #1
   de794:	ec57 6b10 	vmov	r6, r7, d0
   de798:	4690      	mov	r8, r2
   de79a:	f7ff fc7e 	bl	de09a <_Balloc>
   de79e:	f3c7 550a 	ubfx	r5, r7, #20, #11
   de7a2:	4604      	mov	r4, r0
   de7a4:	f3c7 0313 	ubfx	r3, r7, #0, #20
   de7a8:	bb35      	cbnz	r5, de7f8 <__d2b+0x6c>
   de7aa:	2e00      	cmp	r6, #0
   de7ac:	9301      	str	r3, [sp, #4]
   de7ae:	d028      	beq.n	de802 <__d2b+0x76>
   de7b0:	4668      	mov	r0, sp
   de7b2:	9600      	str	r6, [sp, #0]
   de7b4:	f7ff fd58 	bl	de268 <__lo0bits>
   de7b8:	9900      	ldr	r1, [sp, #0]
   de7ba:	b300      	cbz	r0, de7fe <__d2b+0x72>
   de7bc:	9a01      	ldr	r2, [sp, #4]
   de7be:	f1c0 0320 	rsb	r3, r0, #32
   de7c2:	fa02 f303 	lsl.w	r3, r2, r3
   de7c6:	430b      	orrs	r3, r1
   de7c8:	40c2      	lsrs	r2, r0
   de7ca:	6163      	str	r3, [r4, #20]
   de7cc:	9201      	str	r2, [sp, #4]
   de7ce:	9b01      	ldr	r3, [sp, #4]
   de7d0:	61a3      	str	r3, [r4, #24]
   de7d2:	2b00      	cmp	r3, #0
   de7d4:	bf14      	ite	ne
   de7d6:	2202      	movne	r2, #2
   de7d8:	2201      	moveq	r2, #1
   de7da:	6122      	str	r2, [r4, #16]
   de7dc:	b1d5      	cbz	r5, de814 <__d2b+0x88>
   de7de:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   de7e2:	4405      	add	r5, r0
   de7e4:	f8c9 5000 	str.w	r5, [r9]
   de7e8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   de7ec:	f8c8 0000 	str.w	r0, [r8]
   de7f0:	4620      	mov	r0, r4
   de7f2:	b003      	add	sp, #12
   de7f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   de7f8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   de7fc:	e7d5      	b.n	de7aa <__d2b+0x1e>
   de7fe:	6161      	str	r1, [r4, #20]
   de800:	e7e5      	b.n	de7ce <__d2b+0x42>
   de802:	a801      	add	r0, sp, #4
   de804:	f7ff fd30 	bl	de268 <__lo0bits>
   de808:	9b01      	ldr	r3, [sp, #4]
   de80a:	6163      	str	r3, [r4, #20]
   de80c:	2201      	movs	r2, #1
   de80e:	6122      	str	r2, [r4, #16]
   de810:	3020      	adds	r0, #32
   de812:	e7e3      	b.n	de7dc <__d2b+0x50>
   de814:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   de818:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   de81c:	f8c9 0000 	str.w	r0, [r9]
   de820:	6918      	ldr	r0, [r3, #16]
   de822:	f7ff fd01 	bl	de228 <__hi0bits>
   de826:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   de82a:	e7df      	b.n	de7ec <__d2b+0x60>

000de82c <__ratio>:
   de82c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   de830:	4688      	mov	r8, r1
   de832:	4669      	mov	r1, sp
   de834:	4681      	mov	r9, r0
   de836:	f7ff ff59 	bl	de6ec <__b2d>
   de83a:	a901      	add	r1, sp, #4
   de83c:	4640      	mov	r0, r8
   de83e:	ec55 4b10 	vmov	r4, r5, d0
   de842:	f7ff ff53 	bl	de6ec <__b2d>
   de846:	f8d9 3010 	ldr.w	r3, [r9, #16]
   de84a:	f8d8 2010 	ldr.w	r2, [r8, #16]
   de84e:	eba3 0c02 	sub.w	ip, r3, r2
   de852:	e9dd 3200 	ldrd	r3, r2, [sp]
   de856:	1a9b      	subs	r3, r3, r2
   de858:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   de85c:	ec51 0b10 	vmov	r0, r1, d0
   de860:	2b00      	cmp	r3, #0
   de862:	bfd6      	itet	le
   de864:	460a      	movle	r2, r1
   de866:	462a      	movgt	r2, r5
   de868:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   de86c:	468b      	mov	fp, r1
   de86e:	462f      	mov	r7, r5
   de870:	bfd4      	ite	le
   de872:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   de876:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   de87a:	4620      	mov	r0, r4
   de87c:	ee10 2a10 	vmov	r2, s0
   de880:	465b      	mov	r3, fp
   de882:	4639      	mov	r1, r7
   de884:	f7fd fc46 	bl	dc114 <__aeabi_ddiv>
   de888:	ec41 0b10 	vmov	d0, r0, r1
   de88c:	b003      	add	sp, #12
   de88e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000de892 <__copybits>:
   de892:	3901      	subs	r1, #1
   de894:	b570      	push	{r4, r5, r6, lr}
   de896:	1149      	asrs	r1, r1, #5
   de898:	6914      	ldr	r4, [r2, #16]
   de89a:	3101      	adds	r1, #1
   de89c:	f102 0314 	add.w	r3, r2, #20
   de8a0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   de8a4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   de8a8:	1f05      	subs	r5, r0, #4
   de8aa:	42a3      	cmp	r3, r4
   de8ac:	d30c      	bcc.n	de8c8 <__copybits+0x36>
   de8ae:	1aa3      	subs	r3, r4, r2
   de8b0:	3b11      	subs	r3, #17
   de8b2:	f023 0303 	bic.w	r3, r3, #3
   de8b6:	3211      	adds	r2, #17
   de8b8:	42a2      	cmp	r2, r4
   de8ba:	bf88      	it	hi
   de8bc:	2300      	movhi	r3, #0
   de8be:	4418      	add	r0, r3
   de8c0:	2300      	movs	r3, #0
   de8c2:	4288      	cmp	r0, r1
   de8c4:	d305      	bcc.n	de8d2 <__copybits+0x40>
   de8c6:	bd70      	pop	{r4, r5, r6, pc}
   de8c8:	f853 6b04 	ldr.w	r6, [r3], #4
   de8cc:	f845 6f04 	str.w	r6, [r5, #4]!
   de8d0:	e7eb      	b.n	de8aa <__copybits+0x18>
   de8d2:	f840 3b04 	str.w	r3, [r0], #4
   de8d6:	e7f4      	b.n	de8c2 <__copybits+0x30>

000de8d8 <__any_on>:
   de8d8:	f100 0214 	add.w	r2, r0, #20
   de8dc:	6900      	ldr	r0, [r0, #16]
   de8de:	114b      	asrs	r3, r1, #5
   de8e0:	4298      	cmp	r0, r3
   de8e2:	b510      	push	{r4, lr}
   de8e4:	db11      	blt.n	de90a <__any_on+0x32>
   de8e6:	dd0a      	ble.n	de8fe <__any_on+0x26>
   de8e8:	f011 011f 	ands.w	r1, r1, #31
   de8ec:	d007      	beq.n	de8fe <__any_on+0x26>
   de8ee:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   de8f2:	fa24 f001 	lsr.w	r0, r4, r1
   de8f6:	fa00 f101 	lsl.w	r1, r0, r1
   de8fa:	428c      	cmp	r4, r1
   de8fc:	d10b      	bne.n	de916 <__any_on+0x3e>
   de8fe:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   de902:	4293      	cmp	r3, r2
   de904:	d803      	bhi.n	de90e <__any_on+0x36>
   de906:	2000      	movs	r0, #0
   de908:	bd10      	pop	{r4, pc}
   de90a:	4603      	mov	r3, r0
   de90c:	e7f7      	b.n	de8fe <__any_on+0x26>
   de90e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   de912:	2900      	cmp	r1, #0
   de914:	d0f5      	beq.n	de902 <__any_on+0x2a>
   de916:	2001      	movs	r0, #1
   de918:	e7f6      	b.n	de908 <__any_on+0x30>

000de91a <_calloc_r>:
   de91a:	b513      	push	{r0, r1, r4, lr}
   de91c:	434a      	muls	r2, r1
   de91e:	4611      	mov	r1, r2
   de920:	9201      	str	r2, [sp, #4]
   de922:	f7f9 f94b 	bl	d7bbc <_malloc_r>
   de926:	4604      	mov	r4, r0
   de928:	b118      	cbz	r0, de932 <_calloc_r+0x18>
   de92a:	9a01      	ldr	r2, [sp, #4]
   de92c:	2100      	movs	r1, #0
   de92e:	f7fe f809 	bl	dc944 <memset>
   de932:	4620      	mov	r0, r4
   de934:	b002      	add	sp, #8
   de936:	bd10      	pop	{r4, pc}

000de938 <nan>:
   de938:	ed9f 0b01 	vldr	d0, [pc, #4]	; de940 <nan+0x8>
   de93c:	4770      	bx	lr
   de93e:	bf00      	nop
   de940:	00000000 	.word	0x00000000
   de944:	7ff80000 	.word	0x7ff80000

000de948 <__ascii_wctomb>:
   de948:	b149      	cbz	r1, de95e <__ascii_wctomb+0x16>
   de94a:	2aff      	cmp	r2, #255	; 0xff
   de94c:	bf85      	ittet	hi
   de94e:	238a      	movhi	r3, #138	; 0x8a
   de950:	6003      	strhi	r3, [r0, #0]
   de952:	700a      	strbls	r2, [r1, #0]
   de954:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
   de958:	bf98      	it	ls
   de95a:	2001      	movls	r0, #1
   de95c:	4770      	bx	lr
   de95e:	4608      	mov	r0, r1
   de960:	4770      	bx	lr
	...

000de964 <__aeabi_d2lz>:
   de964:	b538      	push	{r3, r4, r5, lr}
   de966:	2200      	movs	r2, #0
   de968:	2300      	movs	r3, #0
   de96a:	4604      	mov	r4, r0
   de96c:	460d      	mov	r5, r1
   de96e:	f7fd fd19 	bl	dc3a4 <__aeabi_dcmplt>
   de972:	b928      	cbnz	r0, de980 <__aeabi_d2lz+0x1c>
   de974:	4620      	mov	r0, r4
   de976:	4629      	mov	r1, r5
   de978:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   de97c:	f7fd bdf6 	b.w	dc56c <__aeabi_d2ulz>
   de980:	4620      	mov	r0, r4
   de982:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   de986:	f7fd fdf1 	bl	dc56c <__aeabi_d2ulz>
   de98a:	4240      	negs	r0, r0
   de98c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   de990:	bd38      	pop	{r3, r4, r5, pc}
   de992:	bf00      	nop

000de994 <dynalib_user>:
   de994:	4021 000d 405d 000d 4085 000d 4089 000d     !@..]@...@...@..
   de9a4:	0000 0000 6573 5074 776f 7265 6f43 666e     ....setPowerConf
   de9b4:	6769 7275 7461 6f69 3d6e 6425 4e00 6d61     iguration=%d.Nam
   de9c4:	3a65 0020 6553 4c74 6261 6c65 5000 5241     e: .SetLabel.PAR
   de9d4:	4954 4c43 0045 4150 5452 4349 454c 4320     TICLE.PARTICLE C
   de9e4:	4e4f 454e 5443 4445 5300 454c 5045 5220     ONNECTED.SLEEP R
   de9f4:	5345 4c55 0054 6f57 656b 4220 2079 6157     ESULT.Woke By Wa
   dea04:	6374 6864 6f64 0067 6f57 656b 4220 2079     tcdhdog.Woke By 
   dea14:	5452 0043 6f57 656b 4220 2079 4950 0052     RTC.Woke By PIR.
   dea24:	4150 5452 4349 454c 4620 4941 454c 2044     PARTICLE FAILED 
   dea34:	4f54 4320 4e4f 454e 5443 5300 4d41 4c50     TO CONNECT.SAMPL
   dea44:	4e49 5f47 4157 5449 535f 4154 4554 5300     ING_WAIT_STATE.S
   dea54:	4154 5452 5320 4d41 4c50 4e49 0047 4f50     TART SAMPLING.PO
   dea64:	4557 0052 4e45 4142 4c42 2045 4843 5241     WER.ENBABLE CHAR
   dea74:	4947 474e 5000 4255 494c 4853 4e49 0047     GING.PUBLISHING.
   dea84:	5453 5241 2054 5550 4c42 5349 5f48 5453     START PUBLISH_ST
   dea94:	5441 0045 6f50 6577 2072 6f73 7275 6563     ATE.Power source
   deaa4:	0073 6142 7474 7265 2079 7473 7461 0065     s.Battery state.
   deab4:	6142 7474 7265 2079 6863 7261 6567 4200     Battery charge.B
   deac4:	7461 6574 7972 5620 6543 6c6c 4200 7461     attery VCell.Bat
   dead4:	6574 7972 5320 436f 4600 6f6c 646f 445f     tery SoC.Flood_D
   deae4:	676f 432d 7061 562d 6c61 6575 4600 6f6c     og-Cap-Value.Flo
   deaf4:	646f 445f 676f 542d 6d65 2d70 6156 756c     od_Dog-Temp-Valu
   deb04:	0065 6c46 6f6f 5f64 6f44 2d67 6142 7474     e.Flood_Dog-Batt
   deb14:	562d 6c61 6575 4200 6675 6566 2072 6553     -Value.Buffer Se
   deb24:	746e 5900 5345 5300 4154 5452 5320 454c     nt.YES.START SLE
   deb34:	5045 575f 4941 5f54 5453 5441 0045 4f47     EP_WAIT_STATE.GO
   deb44:	4e49 2047 4f54 5320 454c 5045 5300 454c     ING TO SLEEP.SLE
   deb54:	5045 5320 4f54 2050 4c53 4545 0050 6f57     EP STOP SLEEP.Wo
   deb64:	656b 4220 2079 5942 475f 4950 204f 4950     ke By BY_GPIO PI
   deb74:	0052 6f57 656b 4220 2079 5942 475f 4950     R.Woke By BY_GPI
   deb84:	204f 5452 0043 4c53 4545 2050 4552 5553     O RTC.SLEEP RESU
   deb94:	544c 2d20 5720 6b6f 2065 5942 525f 4354     LT - Woke BY_RTC
   deba4:	5300 454c 5045 5220 5345 4c55 2054 202d     .SLEEP RESULT - 
   debb4:	6f57 656b 4220 5f59 454e 5754 524f 004b     Woke BY_NETWORK.
   debc4:	4c53 4545 2050 4552 5553 544c 2d20 5720     SLEEP RESULT - W
   debd4:	6b6f 2065 7942 5520 4b4e 4f4e 4e57 5300     oke By UNKNOWN.S
   debe4:	454c 5045 5420 4d49 4445 5320 454c 5045     LEEP TIMED SLEEP
   debf4:	7700 6265 6f68 6b6f 4600 6f6c 646f 445f     .webhook.Flood_D
   dec04:	676f 445f 7665 305f 2d31 6143 2d70 6156     og_Dev_01-Cap-Va
   dec14:	756c 0065 6c46 6f6f 5f64 6f44 5f67 6544     lue.Flood_Dog_De
   dec24:	5f76 3130 432d 7061 502d 7265 6563 746e     v_01-Cap-Percent
   dec34:	6761 0065 6c46 6f6f 5f64 6f44 5f67 6544     age.Flood_Dog_De
   dec44:	5f76 3130 422d 7461 0074 6c46 6f6f 5f64     v_01-Batt.Flood_
   dec54:	6f44 5f67 3030 2d31 6143 2d70 6156 756c     Dog_001-Cap-Valu
   dec64:	0065 6c46 6f6f 5f64 6f44 5f67 3030 2d31     e.Flood_Dog_001-
   dec74:	6143 2d70 6550 6372 6e65 6174 6567 4600     Cap-Percentage.F
   dec84:	6f6c 646f 445f 676f 305f 3130 422d 7461     lood_Dog_001-Bat
   dec94:	0074 6c46 6f6f 5f64 6f44 5f67 3030 2d32     t.Flood_Dog_002-
   deca4:	6143 2d70 6156 756c 0065 6c46 6f6f 5f64     Cap-Value.Flood_
   decb4:	6f44 5f67 3030 2d32 6143 2d70 6550 6372     Dog_002-Cap-Perc
   decc4:	6e65 6174 6567 4600 6f6c 646f 445f 676f     entage.Flood_Dog
   decd4:	305f 3230 422d 7461 0074 6c46 6f6f 5f64     _002-Batt.Flood_
   dece4:	6f44 5f67 3030 2d33 6143 2d70 6156 756c     Dog_003-Cap-Valu
   decf4:	0065 6c46 6f6f 5f64 6f44 5f67 3030 2d33     e.Flood_Dog_003-
   ded04:	6143 2d70 6550 6372 6e65 6174 6567 4600     Cap-Percentage.F
   ded14:	6f6c 646f 445f 676f 305f 3330 422d 7461     lood_Dog_003-Bat
   ded24:	0074 6c46 6f6f 5f64 6f44 5f67 3030 2d34     t.Flood_Dog_004-
   ded34:	6143 2d70 6156 756c 0065 6c46 6f6f 5f64     Cap-Value.Flood_
   ded44:	6f44 5f67 3030 2d34 6143 2d70 6550 6372     Dog_004-Cap-Perc
   ded54:	6e65 6174 6567 4600 6f6c 646f 445f 676f     entage.Flood_Dog
   ded64:	305f 3430 422d 7461 0074 3448 5179 546e     _004-Batt.H4yQnT
   ded74:	4a53 514e 5777 7061 3632 4b44 6b44 6b74     SJNQwWap26DKDktk
   ded84:	4a5a 5741 7969 5700 7956 3456 7970 7337     ZJAWiy.WVyV4py7s
   ded94:	5962 454a 6e6d 734a 7976 5976 4638 4647     bYJEmnJsvyvY8FGF
   deda4:	3754 0066 4d67 366d 7071 4c7a 616b 5768     T7f.gMm6qpzLkahW
   dedb4:	6761 745a 4573 3957 6f54 6734 5a6f 3768     agZtsEW9To4goZh7
   dedc4:	6100 5258 6871 4457 6976 6136 524d 4342     .aXRqhWDvi6aMRBC
   dedd4:	7550 4577 3755 4b59 656e 7435 0076 5158     PuwEU7YKne5tv.XQ
   dede4:	6475 326b 7334 6a72 5969 4a66 3159 3368     udk24srjiYfJY1h3
   dedf4:	4477 6a43 4676 7155 7644 4800 5531 7347     wDCjvFUqDv.H1UGs
   dee04:	3542 4b45 4363 6334 505a 534c 754c 685a     B5EKcC4cZPLSLuZh
   dee14:	7870 3159 6739 004b 4d67 4b65 6e74 3945     pxY19gK.gMeKtnE9
   dee24:	7845 4a76 3970 6f6b 6132 4e55 4d32 5537     ExvJp9ko2aUN2M7U
   dee34:	7765 634e 5300 7446 4378 6b63 6b47 4436     ewNc.SFtxCckGk6D
   dee44:	5734 6656 7a56 5944 5172 4665 7337 4d50     4WVfVzDYrQeF7sPM
   dee54:	0043 3451 4155 3354 3268 4e67 4579 6e6f     C.Q4UAT3h2gNyEon
   dee64:	7069 7034 4658 3471 4643 3773 3343 3400     ip4pXFq4CFs7C3.4
   dee74:	3576 4a55 7954 5967 6759 5273 4c5a 546d     v5UJTygYYgsRZLmT
   dee84:	4344 4359 5873 6e63 726f 006a 4c70 5862     DCYCsXcnorj.pLbX
   dee94:	4367 5867 7967 5558 5032 334d 6a56 6f54     gCgXgyXU2PM3VjTo
   deea4:	717a 6d53 4261 7366 7500 6356 3272 3277     zqSmaBfs.uVcr2w2
   deeb4:	4855 316f 7054 3973 705a 7a78 776d 3245     UHo1Tps9ZpxzmwE2
   deec4:	3577 6731 0052 6e41 5a4b 6556 3450 4447     w51gR.AnKZVeP4GD
   deed4:	706d 4452 6169 4b39 5777 7537 4a74 3259     mpRDia9KwW7utJY2
   deee4:	3554 6e00 7279 456e 436e 7477 694d 6350     T5.nyrnEnCwtMiPc
   deef4:	4b56 4842 3758 3144 3466 4736 716d 0064     VKBHX7D1f46Gmqd.
   def04:	5041 6253 517a 6f52 3843 4a6b 3632 5659     APSbzQRoC8kJ26YV
   def14:	4b43 394d 3543 624d 5259 3178 0000 0000     CKM9C5MbYRx1....

000def24 <_ZTVN5spark10LogHandlerE>:
	...
   def34:	40a5 000d 40c9 000d                         .@...@..

000def3c <_ZTVN5spark16SerialLogHandlerE>:
	...
   def44:	40fd 000d 4131 000d 9761 000d 40cb 000d     .@..1A..a....@..

000def54 <_ZTV8MB85RC64>:
	...
   def5c:	40d5 000d 40e9 000d 52ed 000d 5383 000d     .@...@...R...S..
   def6c:	5405 000d 6e75 6e6b 776f 006e 6976 006e     .T..unknown.vin.
   def7c:	7375 2062 6f68 7473 7500 6273 6120 6164     usb host.usb ada
   def8c:	7470 7265 7500 6273 6f20 6774 6200 7461     pter.usb otg.bat
   def9c:	6574 7972 6e00 746f 6320 6168 6772 6e69     tery.not chargin
   defac:	0067 6863 7261 6567 0064 6964 6373 6168     g.charged.discha
   defbc:	6772 6e69 0067 6166 6c75 0074 6964 6373     rging.fault.disc
   defcc:	6e6f 656e 7463 6465 5500 6962 6f64 7374     onnected.Ubidots
   defdc:	0000 0000                                   ....

000defe0 <_ZL12powerSources>:
   defe0:	ef70 000d ef78 000d ef7c 000d ef85 000d     p...x...|.......
   deff0:	ef91 000d ef99 000d                         ........

000deff8 <_ZL13batteryStates>:
   deff8:	ef70 000d efa1 000d efa5 000d efae 000d     p...............
   df008:	efb6 000d efc2 000d efc8 000d               ............

000df014 <_ZTV6MB85RC>:
	...
   df01c:	52ad 000d 52af 000d 52ed 000d 5383 000d     .R...R...R...S..
   df02c:	5405 000d 6564 6976 6563 6552 6461 6620     .T..deviceRead f
   df03c:	6961 656c 2064 7473 7461 253d 0064 6573     ailed stat=%d.se
   df04c:	2074 6954 656d 6620 6f72 206d 5452 2043     t Time from RTC 
   df05c:	7325 6400 7665 6369 5765 6972 6574 6620     %s.deviceWrite f
   df06c:	6961 656c 2064 7473 7461 253d 0064 6573     ailed stat=%d.se
   df07c:	2074 5452 2043 7266 6d6f 6320 6f6c 6475     t RTC from cloud
   df08c:	2520 0073 6c63 756f 2064 6974 656d 6e20      %s.cloud time n
   df09c:	746f 7620 6c61 6469 6400 7665 6369 5765     ot valid.deviceW
   df0ac:	6972 6574 4545 5250 4d4f 6620 6961 656c     riteEEPROM faile
   df0bc:	2064 7473 7461 253d 0064 7061 2e70 7472     d stat=%d.app.rt
   df0cc:	0063 0000                                   c...

000df0d0 <_ZTV12MCP79410SRAM>:
	...
   df0d8:	54c5 000d 54db 000d 54b5 000d 54b9 000d     .T...T...T...T..
   df0e8:	5505 000d 57ed 000d 5a0d 000d               .U...W...Z..

000df0f4 <_ZTV12MCP79410Time>:
	...
   df0fc:	54c9 000d 54cd 000d                         .T...T..

000df104 <_ZTV14MCP79410EEPROM>:
	...
   df10c:	54c7 000d 54e9 000d 54bd 000d 54c1 000d     .T...T...T...T..
   df11c:	5505 000d 5827 000d 5bf1 000d               .U..'X...[..

000df128 <_ZTV8MCP79410>:
	...
   df130:	54cb 000d 54f7 000d 6255 6469 746f 5073     .T...T..UbidotsP
   df140:	7261 6974 6c63 2f65 2e33 0032 7254 6979     article/3.2.Tryi
   df150:	676e 7420 206f 6f63 6e6e 6365 2074 6f74     ng to connect to
   df160:	0020 2c20 6120 7474 6d65 7470 6e20 6d75      . , attempt num
   df170:	6562 3a72 0020 7441 6574 706d 2074 6966     ber: .Attempt fi
   df180:	696e 6873 6465 5300 7265 6576 2772 2073     nished.Server's 
   df190:	6572 7073 6e6f 6573 003a 2d0a 2d2d 2d2d     response:..-----
   df1a0:	2d2d 2d2d 002d 6974 656d 756f 2c74 6320     -----.timeout, c
   df1b0:	756f 646c 6e20 746f 7220 6165 2064 6e61     ould not read an
   df1c0:	2079 6572 7073 6e6f 6573 6620 6f72 206d     y response from 
   df1d0:	6874 2065 6f68 7473 5000 534f 2054 612f     the host.POST /a
   df1e0:	6970 762f 2e31 2f36 6564 6976 6563 2f73     pi/v1.6/devices/
   df1f0:	2000 5448 5054 312f 312e 0a0d 4800 736f     . HTTP/1.1...Hos
   df200:	3a74 0020 7355 7265 412d 6567 746e 203a     t: .User-Agent: 
   df210:	5800 412d 7475 2d68 6f54 656b 3a6e 0020     .X-Auth-Token: .
   df220:	6f43 6e6e 6365 6974 6e6f 203a 6c63 736f     Connection: clos
   df230:	0d65 000a 6f43 746e 6e65 2d74 7954 6570     e...Content-Type
   df240:	203a 7061 6c70 6369 7461 6f69 2f6e 736a     : application/js
   df250:	6e6f 0a0d 4300 6e6f 6574 746e 4c2d 6e65     on...Content-Len
   df260:	7467 3a68 0020 614d 696b 676e 7220 7165     gth: .Making req
   df270:	6575 7473 7420 206f 6255 6469 746f 3a73     uest to Ubidots:
   df280:	000a 6177 7469 6e69 2067 6f66 2072 6573     ..waiting for se
   df290:	7672 7265 6120 736e 6577 2072 2e2e 002e     rver answer ....
   df2a0:	550a 6962 6f64 7374 2027 6553 7672 7265     .Ubidots' Server
   df2b0:	7220 7365 6f70 736e 3a65 000a 6f43 6c75      response:..Coul
   df2c0:	2064 6f6e 2074 6573 646e 6420 7461 2061     d not send data 
   df2d0:	6f74 7520 6962 6f64 7374 7520 6973 676e     to ubidots using
   df2e0:	4820 5454 0050 4547 2054 612f 6970 762f      HTTP.GET /api/v
   df2f0:	2e31 2f36 6564 6976 6563 2f73 2f00 766c     1.6/devices/./lv
   df300:	4300 6e6f 6574 746e 542d 7079 3a65 6120     .Content-Type: a
   df310:	7070 696c 6163 6974 6e6f 6a2f 6f73 0d6e     pplication/json.
   df320:	0d0a 000a 6f43 6e6e 6365 6974 6e6f 4620     ....Connection F
   df330:	6961 656c 2064 6275 6469 746f 2073 202d     ailed ubidots - 
   df340:	7254 2079 6741 6961 006e 0000               Try Again...

000df34c <_ZTV7UbiHTTP>:
	...
   df354:	6255 000d 6485 000d 6001 000d 6005 000d     Ub...d...`...`..

000df364 <_ZTV11UbiParticle>:
	...
   df36c:	668d 000d 666d 000d 6679 000d 667d 000d     .f..mf..yf..}f..
   df37c:	6f59 2075 7261 2065 6573 646e 6e69 2067     You are sending 
   df38c:	6f6d 6572 7420 6168 206e 6874 2065 616d     more than the ma
   df39c:	6978 756d 206d 666f 6320 6e6f 6573 7563     ximum of consecu
   df3ac:	6974 6576 7620 7261 6169 6c62 7365 2500     tive variables.%
   df3bc:	3731 0067 007b 7325 2522 2273 7b3a 7622     17g.{.%s"%s":{"v
   df3cc:	6c61 6575 3a22 7325 2500 2c73 7422 6d69     alue":%s.%s,"tim
   df3dc:	7365 6174 706d 3a22 6c25 0075 6425 6425     estamp":%lu.%d%d
   df3ec:	6425 2500 2573 0073 7325 3030 0030 7325     %d.%s%s.%s000.%s
   df3fc:	222c 6f63 746e 7865 2274 203a 257b 7d73     ,"context": {%s}
   df40c:	2500 2c73 7000 7961 6f6c 6461 003a 7325     .%s,.payload:.%s
   df41c:	507c 534f 7c54 7325 007c 7325 7325 253a     |POST|%s|.%s%s:%
   df42c:	0073 7325 3e3d 2500 2473 7325 2500 4073     s.%s=>.%s$%s.%s@
   df43c:	6c25 0075 7325 657c 646e 5300 6e65 6964     %lu.%s|end.Sendi
   df44c:	676e 6420 7461 2e61 2e2e 4100 7474 6d65     ng data....Attem
   df45c:	7470 6e69 2067 6f74 7220 6365 6e6f 656e     pting to reconne
   df46c:	7463 7c00 564c 007c 6150 6c79 616f 2064     ct.|LV|.Payload 
   df47c:	6f66 2072 6572 7571 7365 3a74 0a00 2d2d     for request:..--
   df48c:	2d2d 5000 534f 0054 4b4f 4300 756f 646c     --.POST.OK.Could
   df49c:	6e20 746f 6320 6e6f 656e 7463 7420 206f      not connect to 
   df4ac:	6874 2065 6f68 7473 4c00 0056 5245 4f52     the host.LV.ERRO
   df4bc:	2052 6f63 6c75 2064 6f6e 2074 6f63 6e6e     R could not conn
   df4cc:	6365 2074 6f74 7420 6568 7320 7265 6576     ect to the serve
   df4dc:	0072 756e 6c6c 4500 5252 524f 0000 0000     r.null.ERROR....

000df4ec <_ZTV6UbiTCP>:
	...
   df4f4:	6f0d 000d 6fb1 000d 6c5d 000d 720d 000d     .o...o..]l...r..
   df504:	575b 7261 696e 676e 205d 6f43 6c75 2064     [Warning] Could 
   df514:	6f6e 2074 6f73 766c 2065 5049 4120 6464     not solve IP Add
   df524:	6572 7373 6f20 2066 6874 2065 6572 6f6d     ress of the remo
   df534:	6574 6820 736f 2c74 7720 7469 2068 6f79     te host, with yo
   df544:	7275 4420 534e 7320 7465 7075 202e 2020     ur DNS setup.   
   df554:	2020 2020 2020 2020 550a 6973 676e 6420             .Using d
   df564:	6665 7561 746c 4920 646e 7375 7274 6169     efault Industria
   df574:	206c 6255 6469 746f 2073 5049 203a 3631     l Ubidots IP: 16
   df584:	2e39 3535 362e 2e31 3432 0033 5245 4f52     9.55.61.243.ERRO
   df594:	2052 6573 646e 6e69 2067 6176 756c 7365     R sending values
   df5a4:	7720 7469 2068 4455 0050 0000                with UDP...

000df5b0 <_ZTV6UbiUDP>:
	...
   df5b8:	735d 000d 72fd 000d 7309 000d 730d 000d     ]s...r...s...s..
   df5c8:	6e69 7564 7473 6972 6c61 612e 6970 752e     industrial.api.u
   df5d8:	6962 6f64 7374 632e 6d6f 0000               bidots.com..

000df5e4 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...

000df5ec <_ZTVN5spark13CellularClassE>:
	...
   df5f4:	7cd7 000d 7ccd 000d 7cc3 000d 7c79 000d     .|...|...|..y|..
   df604:	7cb7 000d 7cab 000d 9ab9 000d 9ac1 000d     .|...|..........
   df614:	7c9f 000d 7c97 000d 7c8d 000d 7c83 000d     .|...|...|...|..
   df624:	9af1 000d                                   ....

000df628 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   df630:	7d11 000d 7d17 000d 7d55 000d 7d25 000d     .}...}..U}..%}..
   df640:	7d13 000d                                   .}..

000df644 <_ZTVN5spark13EthernetClassE>:
	...
   df64c:	82f7 000d 82ed 000d 82e3 000d 82d9 000d     ................
   df65c:	82cd 000d 82c1 000d 9ab9 000d 9ac1 000d     ................
   df66c:	82b5 000d 82ad 000d 82a3 000d 8299 000d     ................
   df67c:	9af1 000d                                   ....

000df680 <_ZTV7TwoWire>:
	...
   df688:	8471 000d 84bb 000d 8493 000d 8473 000d     q...........s...
   df698:	849b 000d 84a3 000d 84ab 000d 84b3 000d     ................

000df6a8 <_ZTV9IPAddress>:
	...
   df6b0:	8625 000d 8615 000d 8617 000d 7525 7500     %...........%u.u
   df6c0:	3025 7834 6200 7561 0064 6553 6972 6c61     %04x.baud.Serial
   df6d0:	5300 7265 6169 316c 4a00 4f53 534e 7274     .Serial1.JSONStr
   df6e0:	6165 4c6d 676f 6148 646e 656c 0072 7061     eamLogHandler.ap
   df6f0:	0070 3025 3031 2075 5d00 0020 202c 2800     p.%010u .] ., .(
   df700:	3a29 0020 5b20 6300 646f 2065 203d 2500     ): . [.code = .%
   df710:	0069 6564 6174 6c69 2073 203d 6c00 006e     i.details = .ln.
   df720:	6e66 6300 646f 0065 6564 6174 6c69 0000     fn.code.detail..

000df730 <_ZTVN5spark16JSONStreamWriterE>:
	...
   df738:	8b29 000d 8b4f 000d 8b0d 000d 876b 000d     )...O.......k...

000df748 <_ZTVN5spark16StreamLogHandlerE>:
	...
   df750:	8f7d 000d 8f95 000d 9761 000d 40cb 000d     }.......a....@..

000df760 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   df768:	8fa9 000d 8fbd 000d 9905 000d 8b15 000d     ................

000df778 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   df780:	8b27 000d 8b5d 000d 969d 000d 8b17 000d     '...]...........

000df790 <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   df798:	8b25 000d 8b6b 000d 8ec5 000d 8b89 000d     %...k...........

000df7a8 <_ZTVN5spark12NetworkClassE>:
	...
   df7b0:	9a79 000d 9a83 000d 9a8d 000d 9a97 000d     y...............
   df7c0:	9aa1 000d 9aad 000d 9ab9 000d 9ac1 000d     ................
   df7d0:	9ac9 000d 9ad5 000d 9add 000d 9ae7 000d     ................
   df7e0:	9af1 000d 6977 6972 676e 5300 7379 6574     ....wiring.Syste
   df7f0:	206d 6c73 6565 2070 6f63 666e 6769 7275     m sleep configur
   df800:	7461 6f69 206e 7369 6920 766e 6c61 6469     ation is invalid
   df810:	002e 6572 7663 6520 7272 726f 3d20 2520     ..recv error = %
   df820:	0064 0000                                   d...

000df824 <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   df82c:	a313 000d a335 000d a85b 000d a343 000d     ....5...[...C...
   df83c:	a315 000d                                   ....

000df840 <_ZTV9TCPClient>:
	...
   df848:	a3c1 000d a3f5 000d a291 000d a2ab 000d     ................
   df858:	a6e5 000d a457 000d a429 000d a2d5 000d     ....W...).......
   df868:	a5ed 000d a4e1 000d a48b 000d a799 000d     ................
   df878:	a2d7 000d a309 000d a2bd 000d a347 000d     ............G...
   df888:	a409 000d 005a 2b25 3330 3a64 3025 7532     ....Z.%+03d:%02u
   df898:	2500 2d59 6d25 252d 5464 4825 253a 3a4d     .%Y-%m-%dT%H:%M:
   df8a8:	5325 7a25 6100 6373 6974 656d 0000 0000     %S%z.asctime....

000df8b8 <_ZTV3UDP>:
	...
   df8c0:	b155 000d b179 000d abf1 000d ad19 000d     U...y...........
   df8d0:	abe9 000d ac09 000d ac27 000d ac41 000d     ........'...A...
   df8e0:	ac65 000d acfd 000d affb 000d ada1 000d     e...............
   df8f0:	af19 000d abd1 000d b0e5 000d aea1 000d     ................
   df900:	add9 000d b113 000d ad43 000d abdf 000d     ........C.......
   df910:	ad81 000d abe5 000d ac43 000d fff0 ffff     ........C.......
   df920:	0000 0000 ac5d 000d                         ....]...

000df928 <_ZTV11USARTSerial>:
	...
   df930:	b18d 000d b1fb 000d b1d3 000d 9d1d 000d     ................
   df940:	b1a3 000d b1bf 000d b1b1 000d b1cd 000d     ................
   df950:	b18f 000d b195 000d                         ........

000df958 <_ZTV9USBSerial>:
	...
   df960:	b2cf 000d b337 000d b30d 000d 9d1d 000d     ....7...........
   df970:	b2ff 000d b2d1 000d b2e1 000d b331 000d     ............1...
   df980:	b2f1 000d b2c9 000d                         ........

000df988 <_ZSt7nothrow>:
	...

000df989 <_ZTSSt19_Sp_make_shared_tag>:
   df989:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   df999:	6572 5f64 6174 0067 0000                     red_tag....

000df9a4 <_ZTISt19_Sp_make_shared_tag>:
   df9a4:	f9e4 000d f989 000d                         ........

000df9ac <_ZTIN10__cxxabiv117__class_type_infoE>:
   df9ac:	fa44 000d f9b8 000d fa68 000d               D.......h...

000df9b8 <_ZTSN10__cxxabiv117__class_type_infoE>:
   df9b8:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   df9c8:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   df9d8:	0045 0000                                   E...

000df9dc <_ZTVN10__cxxabiv117__class_type_infoE>:
   df9dc:	0000 0000 f9ac 000d b971 000d b985 000d     ........q.......
   df9ec:	bb19 000d bb19 000d b9ef 000d b931 000d     ............1...
   df9fc:	b9d7 000d b999 000d b965 000d               ........e...

000dfa08 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   dfa08:	fa44 000d fa14 000d f9ac 000d               D...........

000dfa14 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   dfa14:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   dfa24:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   dfa34:	666e 456f 0000 0000                         nfoE....

000dfa3c <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   dfa3c:	0000 0000 fa08 000d ba19 000d ba2d 000d     ............-...
   dfa4c:	bb19 000d bb19 000d b9ef 000d b931 000d     ............1...
   dfa5c:	baed 000d ba79 000d ba41 000d               ....y...A...

000dfa68 <_ZTISt9type_info>:
   dfa68:	f9e4 000d fa70 000d                         ....p...

000dfa70 <_ZTSSt9type_info>:
   dfa70:	7453 7439 7079 5f65 6e69 6f66 2500 332e     St9type_info.%.3
   dfa80:	2073 2e25 7333 3325 2064 2e25 6432 253a     s %.3s%3d %.2d:%
   dfa90:	322e 3a64 2e25 6432 2520 0a64                .2d:%.2d %d..

000dfa9d <day_name.6145>:
   dfa9d:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
   dfaad:	6972 6153                                    riSat

000dfab2 <mon_name.6146>:
   dfab2:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
   dfac2:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
   dfad2:	4476 6365 666e 6900 696e 7974 6100 006e     vDecnf.inity.an.
	...

000dfae4 <fpi.7566>:
   dfae4:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   dfaf4:	0000 0000                                   ....

000dfaf8 <fpinan.7602>:
   dfaf8:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
	...

000dfb10 <tinytens>:
   dfb10:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   dfb20:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   dfb30:	6f43 64ac 0628 1168                         Co.d(.h.

000dfb38 <_ctype_>:
   dfb38:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   dfb48:	2020 2020 2020 2020 2020 2020 2020 2020                     
   dfb58:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   dfb68:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   dfb78:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   dfb88:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   dfb98:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   dfba8:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   dfbb8:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000dfc3c <_C_numeric_locale>:
   dfc3c:	f29e 000d f323 000d df30 2003 4f50 4953     ....#...0.. POSI
   dfc4c:	0058 0000                                   X...

000dfc50 <__mprec_bigtens>:
   dfc50:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   dfc60:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   dfc70:	bf3c 7f73 4fdd 7515                         <.s..O.u

000dfc78 <__mprec_tens>:
   dfc78:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   dfc88:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   dfc98:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   dfca8:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   dfcb8:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   dfcc8:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   dfcd8:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   dfce8:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   dfcf8:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   dfd08:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   dfd18:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   dfd28:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   dfd38:	9db4 79d9 7843 44ea                         ...yCx.D

000dfd40 <p05.7490>:
   dfd40:	0005 0000 0019 0000 007d 0000               ........}...

000dfd4c <link_const_variable_data_end>:
   dfd4c:	000d4eb5 	.word	0x000d4eb5
   dfd50:	000d52a1 	.word	0x000d52a1
   dfd54:	000d5c21 	.word	0x000d5c21
   dfd58:	000d5fdd 	.word	0x000d5fdd
   dfd5c:	000d6661 	.word	0x000d6661
   dfd60:	000d6c2d 	.word	0x000d6c2d
   dfd64:	000d72f1 	.word	0x000d72f1
   dfd68:	000d733d 	.word	0x000d733d
   dfd6c:	000d7c69 	.word	0x000d7c69
   dfd70:	000d7ce1 	.word	0x000d7ce1
   dfd74:	000d8301 	.word	0x000d8301
   dfd78:	000d9751 	.word	0x000d9751
   dfd7c:	000d9bc5 	.word	0x000d9bc5
   dfd80:	000d9e45 	.word	0x000d9e45
   dfd84:	000da26d 	.word	0x000da26d
   dfd88:	000dabbd 	.word	0x000dabbd

000dfd8c <link_constructors_end>:
   dfd8c:	00000000 	.word	0x00000000
