
/Users/philipchatterton/IoCP/Particle/Flood_Dog/Flood_Dog_v05/target/2.2.0/boron/Flood_Dog_v05.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00007270  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  000db290  000db290  0000b290  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000db298  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000090  2003e398  000db29c  0001e398  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000003cc  2003e428  2003e428  0002e428  2**3
                  ALLOC
  7 .module_info_suffix 0000002c  000db32c  000db32c  0002b32c  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  8 .module_info_crc 00000004  000db358  000db358  0002b358  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   001b87bd  00000000  00000000  0002b35c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0001c91d  00000000  00000000  001e3b19  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000382ad  00000000  00000000  00200436  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00003240  00000000  00000000  002386e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00009668  00000000  00000000  0023b923  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0003e217  00000000  00000000  00244f8b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00048c43  00000000  00000000  002831a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00119adf  00000000  00000000  002cbde5  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  000090b0  00000000  00000000  003e58c4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f006 fab3 	bl	da59c <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f006 fad5 	bl	da5ec <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e398 	.word	0x2003e398
   d404c:	000db29c 	.word	0x000db29c
   d4050:	2003e428 	.word	0x2003e428
   d4054:	2003e428 	.word	0x2003e428
   d4058:	2003e7f1 	.word	0x2003e7f1

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405e:	4e07      	ldr	r6, [pc, #28]	; (d407c <module_user_init+0x20>)
   d4060:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
    module_user_init_hook();
   d4062:	f005 fa65 	bl	d9530 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	1ba4      	subs	r4, r4, r6
   d4068:	08a4      	lsrs	r4, r4, #2
   d406a:	2500      	movs	r5, #0
   d406c:	42a5      	cmp	r5, r4
   d406e:	d100      	bne.n	d4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d4072:	f856 3b04 	ldr.w	r3, [r6], #4
   d4076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f7      	b.n	d406c <module_user_init+0x10>
   d407c:	000db258 	.word	0x000db258
   d4080:	000db284 	.word	0x000db284

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 ba06 	b.w	d4494 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 fa5f 	bl	d454c <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d4092:	f005 ba05 	b.w	d94a0 <_post_loop>

000d4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4096:	f002 bb25 	b.w	d66e4 <malloc>

000d409a <_Znaj>:
   d409a:	f002 bb23 	b.w	d66e4 <malloc>

000d409e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409e:	f002 bb29 	b.w	d66f4 <free>
	...

000d40a4 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40a6:	4a03      	ldr	r2, [pc, #12]	; (d40b4 <__cxa_pure_virtual+0x10>)
   d40a8:	2100      	movs	r1, #0
   d40aa:	200c      	movs	r0, #12
   d40ac:	f002 f9e0 	bl	d6470 <panic_>
  while (1);
   d40b0:	e7fe      	b.n	d40b0 <__cxa_pure_virtual+0xc>
   d40b2:	bf00      	nop
   d40b4:	000d6141 	.word	0x000d6141

000d40b8 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40b8:	7800      	ldrb	r0, [r0, #0]
   d40ba:	fab0 f080 	clz	r0, r0
   d40be:	0940      	lsrs	r0, r0, #5
   d40c0:	4770      	bx	lr

000d40c2 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40c2:	2301      	movs	r3, #1
   d40c4:	7003      	strb	r3, [r0, #0]
   d40c6:	4770      	bx	lr

000d40c8 <_ZN5spark10LogHandler5writeEPKcj>:
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
    // Default implementation does nothing
}
   d40c8:	4770      	bx	lr

000d40ca <_ZN5spark16StreamLogHandler5writeEPKcj>:
inline Print* spark::StreamLogHandler::stream() const {
    return stream_;
}

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
   d40ca:	6a00      	ldr	r0, [r0, #32]
   d40cc:	6803      	ldr	r3, [r0, #0]
   d40ce:	68db      	ldr	r3, [r3, #12]
   d40d0:	4718      	bx	r3
	...

000d40d4 <_ZN8MB85RC64D1Ev>:
	size_t memorySize;
	int addr; // This is just 0-7, the (0b1010000 of the 7-bit address is ORed in later)

};

class MB85RC64 : public MB85RC {
   d40d4:	b510      	push	{r4, lr}
   d40d6:	4b03      	ldr	r3, [pc, #12]	; (d40e4 <_ZN8MB85RC64D1Ev+0x10>)
   d40d8:	6003      	str	r3, [r0, #0]
   d40da:	4604      	mov	r4, r0
   d40dc:	f001 f880 	bl	d51e0 <_ZN6MB85RCD1Ev>
   d40e0:	4620      	mov	r0, r4
   d40e2:	bd10      	pop	{r4, pc}
   d40e4:	000dac34 	.word	0x000dac34

000d40e8 <_ZN8MB85RC64D0Ev>:
   d40e8:	b510      	push	{r4, lr}
   d40ea:	4604      	mov	r4, r0
   d40ec:	f7ff fff2 	bl	d40d4 <_ZN8MB85RC64D1Ev>
   d40f0:	4620      	mov	r0, r4
   d40f2:	2110      	movs	r1, #16
   d40f4:	f005 fb76 	bl	d97e4 <_ZdlPvj>
   d40f8:	4620      	mov	r0, r4
   d40fa:	bd10      	pop	{r4, pc}

000d40fc <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   d40fc:	4b0a      	ldr	r3, [pc, #40]	; (d4128 <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
   d40fe:	b510      	push	{r4, lr}
   d4100:	4604      	mov	r4, r0
   d4102:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   d4104:	f003 fbf0 	bl	d78e8 <_ZN5spark10LogManager8instanceEv>
   d4108:	4621      	mov	r1, r4
   d410a:	f003 fdee 	bl	d7cea <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
   d410e:	f005 f943 	bl	d9398 <_Z16_fetch_usbserialv>
   d4112:	f005 f935 	bl	d9380 <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
   d4116:	4620      	mov	r0, r4
   d4118:	4b04      	ldr	r3, [pc, #16]	; (d412c <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
   d411a:	f840 3b04 	str.w	r3, [r0], #4
   d411e:	f003 fcd1 	bl	d7ac4 <_ZN5spark6detail9LogFilterD1Ev>
    }
   d4122:	4620      	mov	r0, r4
   d4124:	bd10      	pop	{r4, pc}
   d4126:	bf00      	nop
   d4128:	000dac1c 	.word	0x000dac1c
   d412c:	000dac04 	.word	0x000dac04

000d4130 <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
   d4130:	b510      	push	{r4, lr}
   d4132:	4604      	mov	r4, r0
    }
   d4134:	f7ff ffe2 	bl	d40fc <_ZN5spark16SerialLogHandlerD1Ev>
   d4138:	4620      	mov	r0, r4
   d413a:	2124      	movs	r1, #36	; 0x24
   d413c:	f005 fb52 	bl	d97e4 <_ZdlPvj>
   d4140:	4620      	mov	r0, r4
   d4142:	bd10      	pop	{r4, pc}

000d4144 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode>:
            config_.flags |= f.value();
        }
        return *this;
    }

    SystemSleepConfiguration& gpio(pin_t pin, InterruptMode mode) {
   d4144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (valid_) {
   d4146:	7d03      	ldrb	r3, [r0, #20]
    SystemSleepConfiguration& gpio(pin_t pin, InterruptMode mode) {
   d4148:	4605      	mov	r5, r0
   d414a:	460f      	mov	r7, r1
   d414c:	4616      	mov	r6, r2
        if (valid_) {
   d414e:	b18b      	cbz	r3, d4174 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x30>
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   d4150:	6803      	ldr	r3, [r0, #0]
   d4152:	68db      	ldr	r3, [r3, #12]
        if (!start) {
   d4154:	b183      	cbz	r3, d4178 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x34>
            if (start->type == type) {
   d4156:	889a      	ldrh	r2, [r3, #4]
   d4158:	2a01      	cmp	r2, #1
   d415a:	d006      	beq.n	d416a <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x26>
            start = start->next;
   d415c:	689b      	ldr	r3, [r3, #8]
        while (start) {
   d415e:	e7f9      	b.n	d4154 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x10>
                auto gpioWakeup = reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeup);
                if (gpioWakeup->pin == pin) {
                    gpioWakeup->mode = mode;
                    return *this;
                }
                wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_GPIO, wakeup->next);
   d4160:	689b      	ldr	r3, [r3, #8]
        if (!start) {
   d4162:	b14b      	cbz	r3, d4178 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x34>
            if (start->type == type) {
   d4164:	889a      	ldrh	r2, [r3, #4]
   d4166:	2a01      	cmp	r2, #1
   d4168:	d1fa      	bne.n	d4160 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x1c>
            while (wakeup) {
   d416a:	b12b      	cbz	r3, d4178 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x34>
                if (gpioWakeup->pin == pin) {
   d416c:	899a      	ldrh	r2, [r3, #12]
   d416e:	42ba      	cmp	r2, r7
   d4170:	d1f6      	bne.n	d4160 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x1c>
                    gpioWakeup->mode = mode;
   d4172:	739e      	strb	r6, [r3, #14]
            wakeupSource->pin = pin;
            wakeupSource->mode = mode;
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
        }
        return *this;
    }
   d4174:	4628      	mov	r0, r5
   d4176:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_gpio_t();
   d4178:	490a      	ldr	r1, [pc, #40]	; (d41a4 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x60>)
   d417a:	2010      	movs	r0, #16
   d417c:	f005 fb34 	bl	d97e8 <_ZnwjRKSt9nothrow_t>
   d4180:	4604      	mov	r4, r0
   d4182:	b168      	cbz	r0, d41a0 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x5c>
   d4184:	2210      	movs	r2, #16
   d4186:	2100      	movs	r1, #0
   d4188:	f006 fa30 	bl	da5ec <memset>
            wakeupSource->base.size = sizeof(hal_wakeup_source_gpio_t);
   d418c:	4b06      	ldr	r3, [pc, #24]	; (d41a8 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x64>)
   d418e:	6023      	str	r3, [r4, #0]
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_GPIO;
   d4190:	2301      	movs	r3, #1
   d4192:	80a3      	strh	r3, [r4, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   d4194:	692b      	ldr	r3, [r5, #16]
   d4196:	60a3      	str	r3, [r4, #8]
            wakeupSource->pin = pin;
   d4198:	81a7      	strh	r7, [r4, #12]
            wakeupSource->mode = mode;
   d419a:	73a6      	strb	r6, [r4, #14]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   d419c:	612c      	str	r4, [r5, #16]
   d419e:	e7e9      	b.n	d4174 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x30>
                valid_ = false;
   d41a0:	7528      	strb	r0, [r5, #20]
                return *this;
   d41a2:	e7e7      	b.n	d4174 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x30>
   d41a4:	000db0fc 	.word	0x000db0fc
   d41a8:	00030010 	.word	0x00030010

000d41ac <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   d41ac:	b40e      	push	{r1, r2, r3}
   d41ae:	b510      	push	{r4, lr}
   d41b0:	b08d      	sub	sp, #52	; 0x34
   d41b2:	aa0f      	add	r2, sp, #60	; 0x3c
    va_list args;
    va_start(args, fmt);
    log(LOG_LEVEL_INFO, fmt, args);
   d41b4:	6801      	ldr	r1, [r0, #0]
inline void spark::Logger::info(const char *fmt, ...) const {
   d41b6:	f852 4b04 	ldr.w	r4, [r2], #4
    va_start(args, fmt);
   d41ba:	9203      	str	r2, [sp, #12]
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   d41bc:	2300      	movs	r3, #0
   d41be:	2020      	movs	r0, #32
   d41c0:	e9cd 0304 	strd	r0, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d41c4:	e9cd 4200 	strd	r4, r2, [sp]
   d41c8:	201e      	movs	r0, #30
   d41ca:	aa04      	add	r2, sp, #16
   d41cc:	f002 f960 	bl	d6490 <log_message_v>
}
   d41d0:	b00d      	add	sp, #52	; 0x34
   d41d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d41d6:	b003      	add	sp, #12
   d41d8:	4770      	bx	lr
	...

000d41dc <_Z9setupPMICv>:

FuelGauge fuel;
String VCellString;
String SoCString;

void setupPMIC(){
   d41dc:	b508      	push	{r3, lr}
	pmic.begin();
   d41de:	480a      	ldr	r0, [pc, #40]	; (d4208 <_Z9setupPMICv+0x2c>)
   d41e0:	f004 fab7 	bl	d8752 <_ZN4PMIC5beginEv>

    SystemPowerConfiguration(SystemPowerConfiguration&&) = default;
    SystemPowerConfiguration& operator=(SystemPowerConfiguration&&) = default;

    SystemPowerConfiguration& powerSourceMinVoltage(uint16_t voltage) {
        conf_.vin_min_voltage = voltage;
   d41e4:	4809      	ldr	r0, [pc, #36]	; (d420c <_Z9setupPMICv+0x30>)
   d41e6:	f241 03cc 	movw	r3, #4300	; 0x10cc
   d41ea:	80c3      	strh	r3, [r0, #6]
        return *this;
    }

    SystemPowerConfiguration& powerSourceMaxCurrent(uint16_t current) {
        conf_.vin_max_current = current;
   d41ec:	4b08      	ldr	r3, [pc, #32]	; (d4210 <_Z9setupPMICv+0x34>)
   d41ee:	6083      	str	r3, [r0, #8]
        return (hal_timer_millis(nullptr) / 1000);
    }

#if HAL_PLATFORM_POWER_MANAGEMENT
    int setPowerConfiguration(const particle::SystemPowerConfiguration& conf) {
        return system_power_management_set_config(conf.config(), nullptr);
   d41f0:	2100      	movs	r1, #0
        return *this;
    }

    SystemPowerConfiguration& batteryChargeVoltage(uint16_t voltage) {
        conf_.termination_voltage = voltage;
   d41f2:	f241 0372 	movw	r3, #4210	; 0x1072
   d41f6:	8183      	strh	r3, [r0, #12]
   d41f8:	f002 f9c0 	bl	d657c <system_power_management_set_config>
        .powerSourceMinVoltage(4300) 
        .batteryChargeCurrent(850) 
        .batteryChargeVoltage(4210);

    int res = System.setPowerConfiguration(conf);
    Log.info("setPowerConfiguration=%d", res);
   d41fc:	4905      	ldr	r1, [pc, #20]	; (d4214 <_Z9setupPMICv+0x38>)
   d41fe:	4602      	mov	r2, r0
   d4200:	4805      	ldr	r0, [pc, #20]	; (d4218 <_Z9setupPMICv+0x3c>)
   d4202:	f7ff ffd3 	bl	d41ac <_ZNK5spark6Logger4infoEPKcz>
    // returns SYSTEM_ERROR_NONE (0) in case of success
}
   d4206:	bd08      	pop	{r3, pc}
   d4208:	2003e561 	.word	0x2003e561
   d420c:	2003e478 	.word	0x2003e478
   d4210:	03520226 	.word	0x03520226
   d4214:	000da93c 	.word	0x000da93c
   d4218:	2003e638 	.word	0x2003e638
   d421c:	00000000 	.word	0x00000000

000d4220 <_Z14getTemperaturev>:

	digitalWrite(donePin, HIGH);                           // Pet the watchdog
	digitalWrite(donePin, LOW);
}

bool getTemperature() {
   d4220:	b510      	push	{r4, lr}
	int reading = analogRead(tmp36Pin);   //getting the voltage reading from the temperature sensor
   d4222:	200f      	movs	r0, #15
bool getTemperature() {
   d4224:	ed2d 8b02 	vpush	{d8}
	int reading = analogRead(tmp36Pin);   //getting the voltage reading from the temperature sensor
   d4228:	f005 fa34 	bl	d9694 <analogRead>
	delay(1000);
   d422c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d4230:	f002 facc 	bl	d67cc <delay>
	reading = analogRead(tmp36Pin);   //getting the voltage reading from the temperature sensor
   d4234:	200f      	movs	r0, #15
   d4236:	f005 fa2d 	bl	d9694 <analogRead>
   d423a:	4604      	mov	r4, r0
	delay(1000);
   d423c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d4240:	f002 fac4 	bl	d67cc <delay>
	float voltage = reading * 3.3;        // converting that reading to voltage, for 3.3v arduino use 3.3
   d4244:	4620      	mov	r0, r4
   d4246:	f005 fc29 	bl	d9a9c <__aeabi_i2d>
   d424a:	a32b      	add	r3, pc, #172	; (adr r3, d42f8 <_Z14getTemperaturev+0xd8>)
   d424c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4250:	f005 fc8e 	bl	d9b70 <__aeabi_dmul>
   d4254:	f005 ff46 	bl	da0e4 <__aeabi_d2f>
	voltage /= 4096.0;                    // Electron is different than the Arduino where there are only 1024 steps
	temperatureC = (voltage - 0.5) * 100.0;  //converting from 10 mv per degree with 500 mV offset to degrees ((voltage - 500mV) times 100) - 5 degree calibration
   d4258:	eddf 7a1f 	vldr	s15, [pc, #124]	; d42d8 <_Z14getTemperaturev+0xb8>
   d425c:	ee07 0a10 	vmov	s14, r0
   d4260:	ee67 7a27 	vmul.f32	s15, s14, s15
   d4264:	ee17 0a90 	vmov	r0, s15
   d4268:	f005 fc2a 	bl	d9ac0 <__aeabi_f2d>
   d426c:	4b1b      	ldr	r3, [pc, #108]	; (d42dc <_Z14getTemperaturev+0xbc>)
   d426e:	2200      	movs	r2, #0
   d4270:	f005 fac6 	bl	d9800 <__aeabi_dsub>
   d4274:	2200      	movs	r2, #0
   d4276:	4b1a      	ldr	r3, [pc, #104]	; (d42e0 <_Z14getTemperaturev+0xc0>)
   d4278:	f005 fc7a 	bl	d9b70 <__aeabi_dmul>
   d427c:	f005 ff32 	bl	da0e4 <__aeabi_d2f>
   d4280:	4b18      	ldr	r3, [pc, #96]	; (d42e4 <_Z14getTemperaturev+0xc4>)
   d4282:	6018      	str	r0, [r3, #0]
   d4284:	ee08 0a10 	vmov	s16, r0
	temperatureF = (temperatureC * 9.0 / 5.0) + 32.0;  // now convert to Fahrenheit
   d4288:	f005 fc1a 	bl	d9ac0 <__aeabi_f2d>
   d428c:	4b16      	ldr	r3, [pc, #88]	; (d42e8 <_Z14getTemperaturev+0xc8>)
   d428e:	2200      	movs	r2, #0
   d4290:	f005 fc6e 	bl	d9b70 <__aeabi_dmul>
   d4294:	4b15      	ldr	r3, [pc, #84]	; (d42ec <_Z14getTemperaturev+0xcc>)
   d4296:	2200      	movs	r2, #0
   d4298:	f005 fd94 	bl	d9dc4 <__aeabi_ddiv>
   d429c:	4b14      	ldr	r3, [pc, #80]	; (d42f0 <_Z14getTemperaturev+0xd0>)
   d429e:	2200      	movs	r2, #0
   d42a0:	f005 fab0 	bl	d9804 <__adddf3>
   d42a4:	f005 ff1e 	bl	da0e4 <__aeabi_d2f>
	
	if (temperatureC < -20.0 || temperatureC > 30.0) {             // Reasonable range for garage temperature
   d42a8:	eefb 7a04 	vmov.f32	s15, #180	; 0xc1a00000 -20.0
	temperatureF = (temperatureC * 9.0 / 5.0) + 32.0;  // now convert to Fahrenheit
   d42ac:	4b11      	ldr	r3, [pc, #68]	; (d42f4 <_Z14getTemperaturev+0xd4>)
	if (temperatureC < -20.0 || temperatureC > 30.0) {             // Reasonable range for garage temperature
   d42ae:	eeb4 8ae7 	vcmpe.f32	s16, s15
   d42b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	temperatureF = (temperatureC * 9.0 / 5.0) + 32.0;  // now convert to Fahrenheit
   d42b6:	6018      	str	r0, [r3, #0]
	if (temperatureC < -20.0 || temperatureC > 30.0) {             // Reasonable range for garage temperature
   d42b8:	d40b      	bmi.n	d42d2 <_Z14getTemperaturev+0xb2>
   d42ba:	eef3 7a0e 	vmov.f32	s15, #62	; 0x41f00000  30.0
   d42be:	eeb4 8ae7 	vcmpe.f32	s16, s15
   d42c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d42c6:	bfd4      	ite	le
   d42c8:	2001      	movle	r0, #1
   d42ca:	2000      	movgt	r0, #0
	}
	else {
		// snprintf(resultStr, sizeof(resultStr),"Temperature is: %3.1f", temperatureF);
		return 1;
	}
}
   d42cc:	ecbd 8b02 	vpop	{d8}
   d42d0:	bd10      	pop	{r4, pc}
		return 0;
   d42d2:	2000      	movs	r0, #0
   d42d4:	e7fa      	b.n	d42cc <_Z14getTemperaturev+0xac>
   d42d6:	bf00      	nop
   d42d8:	39800000 	.word	0x39800000
   d42dc:	3fe00000 	.word	0x3fe00000
   d42e0:	40590000 	.word	0x40590000
   d42e4:	2003e5b8 	.word	0x2003e5b8
   d42e8:	40220000 	.word	0x40220000
   d42ec:	40140000 	.word	0x40140000
   d42f0:	40400000 	.word	0x40400000
   d42f4:	2003e5bc 	.word	0x2003e5bc
   d42f8:	66666666 	.word	0x66666666
   d42fc:	400a6666 	.word	0x400a6666

000d4300 <_Z20meterParticlePublishv>:
		Particle.publish(tempEvent, tempData, 60, PRIVATE);
	}
	return true;
}

bool meterParticlePublish(void){                           // Enforces Particle's limit on 1 publish a second
   d4300:	b510      	push	{r4, lr}
  static unsigned long lastPublish = 0;                    // Initialize and store value here
  if(millis() - lastPublish >= 1000) {                     // Particle rate limits at 1 publish per second
   d4302:	4c07      	ldr	r4, [pc, #28]	; (d4320 <_Z20meterParticlePublishv+0x20>)

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4304:	f001 ff24 	bl	d6150 <HAL_Timer_Get_Milli_Seconds>
   d4308:	6823      	ldr	r3, [r4, #0]
   d430a:	1ac0      	subs	r0, r0, r3
   d430c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   d4310:	d304      	bcc.n	d431c <_Z20meterParticlePublishv+0x1c>
   d4312:	f001 ff1d 	bl	d6150 <HAL_Timer_Get_Milli_Seconds>
    lastPublish = millis();
   d4316:	6020      	str	r0, [r4, #0]
   d4318:	2001      	movs	r0, #1
    return 1;
  }
  else return 0;
}
   d431a:	bd10      	pop	{r4, pc}
  else return 0;
   d431c:	2000      	movs	r0, #0
   d431e:	e7fc      	b.n	d431a <_Z20meterParticlePublishv+0x1a>
   d4320:	2003e44c 	.word	0x2003e44c

000d4324 <_Z7logData6StringS_bb.part.0>:
bool logData(String tempEvent, String tempData, bool tempLogSerial, bool tempLogParticle){
   d4324:	b530      	push	{r4, r5, lr}
   d4326:	4604      	mov	r4, r0
   d4328:	b085      	sub	sp, #20
   d432a:	460d      	mov	r5, r1
		waitUntil(meterParticlePublish);
   d432c:	f7ff ffe8 	bl	d4300 <_Z20meterParticlePublishv>
        while (_while() && !_condition()) {
   d4330:	b910      	cbnz	r0, d4338 <_Z7logData6StringS_bb.part.0+0x14>
            spark_process();
   d4332:	f002 f937 	bl	d65a4 <spark_process>
        while (_while() && !_condition()) {
   d4336:	e7f9      	b.n	d432c <_Z7logData6StringS_bb.part.0+0x8>
   d4338:	f7ff ffe2 	bl	d4300 <_Z20meterParticlePublishv>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   d433c:	4b0e      	ldr	r3, [pc, #56]	; (d4378 <_Z7logData6StringS_bb.part.0+0x54>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d433e:	682a      	ldr	r2, [r5, #0]
   d4340:	781b      	ldrb	r3, [r3, #0]
   d4342:	f88d 3000 	strb.w	r3, [sp]
   d4346:	6821      	ldr	r1, [r4, #0]
   d4348:	233c      	movs	r3, #60	; 0x3c
   d434a:	a802      	add	r0, sp, #8
   d434c:	f002 fc00 	bl	d6b50 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d4350:	9c03      	ldr	r4, [sp, #12]
   d4352:	b17c      	cbz	r4, d4374 <_Z7logData6StringS_bb.part.0+0x50>
      if (--_M_use_count == 0)
   d4354:	6863      	ldr	r3, [r4, #4]
   d4356:	3b01      	subs	r3, #1
   d4358:	6063      	str	r3, [r4, #4]
   d435a:	b95b      	cbnz	r3, d4374 <_Z7logData6StringS_bb.part.0+0x50>
          _M_dispose();
   d435c:	6823      	ldr	r3, [r4, #0]
   d435e:	4620      	mov	r0, r4
   d4360:	689b      	ldr	r3, [r3, #8]
   d4362:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4364:	68a3      	ldr	r3, [r4, #8]
   d4366:	3b01      	subs	r3, #1
   d4368:	60a3      	str	r3, [r4, #8]
   d436a:	b91b      	cbnz	r3, d4374 <_Z7logData6StringS_bb.part.0+0x50>
            _M_destroy();
   d436c:	6823      	ldr	r3, [r4, #0]
   d436e:	4620      	mov	r0, r4
   d4370:	68db      	ldr	r3, [r3, #12]
   d4372:	4798      	blx	r3
}
   d4374:	b005      	add	sp, #20
   d4376:	bd30      	pop	{r4, r5, pc}
   d4378:	2003e448 	.word	0x2003e448

000d437c <_Z7logData6StringS_bb>:
bool logData(String tempEvent, String tempData, bool tempLogSerial, bool tempLogParticle){
   d437c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d437e:	4604      	mov	r4, r0
   d4380:	460d      	mov	r5, r1
   d4382:	461e      	mov	r6, r3
	if (tempLogSerial){
   d4384:	b18a      	cbz	r2, d43aa <_Z7logData6StringS_bb+0x2e>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d4386:	4601      	mov	r1, r0
   d4388:	4668      	mov	r0, sp
   d438a:	f004 fbff 	bl	d8b8c <_ZN6StringC1ERKS_>
		Log.info(tempEvent + ": " + tempData);
   d438e:	490b      	ldr	r1, [pc, #44]	; (d43bc <_Z7logData6StringS_bb+0x40>)
   d4390:	4668      	mov	r0, sp
   d4392:	f004 fc5d 	bl	d8c50 <_ZplRK15StringSumHelperPKc>
   d4396:	4629      	mov	r1, r5
   d4398:	f004 fc4e 	bl	d8c38 <_ZplRK15StringSumHelperRK6String>
   d439c:	6801      	ldr	r1, [r0, #0]
   d439e:	4808      	ldr	r0, [pc, #32]	; (d43c0 <_Z7logData6StringS_bb+0x44>)
   d43a0:	f7ff ff04 	bl	d41ac <_ZNK5spark6Logger4infoEPKcz>
class StringSumHelper : public String
   d43a4:	4668      	mov	r0, sp
   d43a6:	f004 fb5b 	bl	d8a60 <_ZN6StringD1Ev>
	if (tempLogParticle){
   d43aa:	b11e      	cbz	r6, d43b4 <_Z7logData6StringS_bb+0x38>
   d43ac:	4629      	mov	r1, r5
   d43ae:	4620      	mov	r0, r4
   d43b0:	f7ff ffb8 	bl	d4324 <_Z7logData6StringS_bb.part.0>
}
   d43b4:	2001      	movs	r0, #1
   d43b6:	b004      	add	sp, #16
   d43b8:	bd70      	pop	{r4, r5, r6, pc}
   d43ba:	bf00      	nop
   d43bc:	000daf5d 	.word	0x000daf5d
   d43c0:	2003e638 	.word	0x2003e638

000d43c4 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>:
inline AbstractTypeDiagnosticData<UnderlyingTypeT>::AbstractTypeDiagnosticData(DiagnosticDataId id, const char* name, diag_type type) :
        AbstractDiagnosticData(id, name, type) {
}

template<typename UnderlyingTypeT>
inline int AbstractTypeDiagnosticData<UnderlyingTypeT>::get(DiagnosticDataId id, UnderlyingTypeT& val) {
   d43c4:	b530      	push	{r4, r5, lr}
   d43c6:	b085      	sub	sp, #20
   d43c8:	460d      	mov	r5, r1
    const diag_source* src = nullptr;
   d43ca:	2200      	movs	r2, #0
    const int ret = diag_get_source(id, &src, nullptr);
   d43cc:	4669      	mov	r1, sp
    const diag_source* src = nullptr;
   d43ce:	9200      	str	r2, [sp, #0]
    const int ret = diag_get_source(id, &src, nullptr);
   d43d0:	f002 f876 	bl	d64c0 <diag_get_source>
    if (ret != SYSTEM_ERROR_NONE) {
   d43d4:	b9b0      	cbnz	r0, d4404 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x40>
        return ret;
    }
    return get(src, val);
   d43d6:	9c00      	ldr	r4, [sp, #0]
    SPARK_ASSERT(src && src->callback);
   d43d8:	b10c      	cbz	r4, d43de <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x1a>
   d43da:	6923      	ldr	r3, [r4, #16]
   d43dc:	b923      	cbnz	r3, d43e8 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x24>
   d43de:	4a0a      	ldr	r2, [pc, #40]	; (d4408 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x44>)
   d43e0:	2100      	movs	r1, #0
   d43e2:	200a      	movs	r0, #10
   d43e4:	f002 f844 	bl	d6470 <panic_>
    diag_source_get_cmd_data d = { sizeof(diag_source_get_cmd_data), 0 /* reserved */, data, size };
   d43e8:	2300      	movs	r3, #0
   d43ea:	f8ad 3006 	strh.w	r3, [sp, #6]
   d43ee:	230c      	movs	r3, #12
   d43f0:	f8ad 3004 	strh.w	r3, [sp, #4]
   d43f4:	2304      	movs	r3, #4
   d43f6:	9303      	str	r3, [sp, #12]
   d43f8:	9502      	str	r5, [sp, #8]
    const int ret = src->callback(src, DIAG_SOURCE_CMD_GET, &d);
   d43fa:	6923      	ldr	r3, [r4, #16]
   d43fc:	aa01      	add	r2, sp, #4
   d43fe:	2101      	movs	r1, #1
   d4400:	4620      	mov	r0, r4
   d4402:	4798      	blx	r3
}
   d4404:	b005      	add	sp, #20
   d4406:	bd30      	pop	{r4, r5, pc}
   d4408:	000d6141 	.word	0x000d6141

000d440c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d440c:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d440e:	e9d0 5300 	ldrd	r5, r3, [r0]
   d4412:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   d4414:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d4416:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   d441a:	42ae      	cmp	r6, r5
   d441c:	d004      	beq.n	d4428 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
   d441e:	4628      	mov	r0, r5
   d4420:	f004 fb1e 	bl	d8a60 <_ZN6StringD1Ev>
   d4424:	3514      	adds	r5, #20
   d4426:	e7f8      	b.n	d441a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   d4428:	6820      	ldr	r0, [r4, #0]
   d442a:	f002 f963 	bl	d66f4 <free>
    AllocatorT::free(data_);
}
   d442e:	4620      	mov	r0, r4
   d4430:	bd70      	pop	{r4, r5, r6, pc}

000d4432 <_ZN6MB85RC3putIhEERKT_jS3_>:
    template <typename T> const T &put(size_t framAddr, const T &t) {
   d4432:	b538      	push	{r3, r4, r5, lr}
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
   d4434:	6803      	ldr	r3, [r0, #0]
    template <typename T> const T &put(size_t framAddr, const T &t) {
   d4436:	4614      	mov	r4, r2
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
   d4438:	68dd      	ldr	r5, [r3, #12]
   d443a:	2301      	movs	r3, #1
   d443c:	47a8      	blx	r5
    }
   d443e:	4620      	mov	r0, r4
   d4440:	bd38      	pop	{r3, r4, r5, pc}
	...

000d4444 <_Z11watchdogISRv>:
void watchdogISR(){
   d4444:	b570      	push	{r4, r5, r6, lr}
	fram.put(FRAM::pirAddr, pirState);
   d4446:	4d0f      	ldr	r5, [pc, #60]	; (d4484 <_Z11watchdogISRv+0x40>)
	pirState = 0;
   d4448:	4a0f      	ldr	r2, [pc, #60]	; (d4488 <_Z11watchdogISRv+0x44>)
   d444a:	2400      	movs	r4, #0
	fram.put(FRAM::pirAddr, pirState);
   d444c:	2111      	movs	r1, #17
   d444e:	4628      	mov	r0, r5
	pirState = 0;
   d4450:	7014      	strb	r4, [r2, #0]
	fram.put(FRAM::pirAddr, pirState);
   d4452:	f7ff ffee 	bl	d4432 <_ZN6MB85RC3putIhEERKT_jS3_>
	rtcState = 0;
   d4456:	4a0d      	ldr	r2, [pc, #52]	; (d448c <_Z11watchdogISRv+0x48>)
	fram.put(FRAM::rtcAddr, rtcState);
   d4458:	2109      	movs	r1, #9
   d445a:	4628      	mov	r0, r5
	rtcState = 0;
   d445c:	7014      	strb	r4, [r2, #0]
	fram.put(FRAM::rtcAddr, rtcState);
   d445e:	f7ff ffe8 	bl	d4432 <_ZN6MB85RC3putIhEERKT_jS3_>
	watchdogState = 1;
   d4462:	4a0b      	ldr	r2, [pc, #44]	; (d4490 <_Z11watchdogISRv+0x4c>)
   d4464:	2601      	movs	r6, #1
	fram.put(FRAM::watchdogAddr, watchdogState);
   d4466:	2110      	movs	r1, #16
   d4468:	4628      	mov	r0, r5
	watchdogState = 1;
   d446a:	7016      	strb	r6, [r2, #0]
	fram.put(FRAM::watchdogAddr, watchdogState);
   d446c:	f7ff ffe1 	bl	d4432 <_ZN6MB85RC3putIhEERKT_jS3_>
	digitalWrite(donePin, HIGH);                           // Pet the watchdog
   d4470:	4631      	mov	r1, r6
   d4472:	2005      	movs	r0, #5
   d4474:	f005 f8f5 	bl	d9662 <digitalWrite>
	digitalWrite(donePin, LOW);
   d4478:	4621      	mov	r1, r4
   d447a:	2005      	movs	r0, #5
}
   d447c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	digitalWrite(donePin, LOW);
   d4480:	f005 b8ef 	b.w	d9662 <digitalWrite>
   d4484:	2003e4e0 	.word	0x2003e4e0
   d4488:	2003e560 	.word	0x2003e560
   d448c:	2003e5a4 	.word	0x2003e5a4
   d4490:	2003e5e0 	.word	0x2003e5e0

000d4494 <setup>:
void setup() {
   d4494:	b507      	push	{r0, r1, r2, lr}
	Serial.begin(115200);
   d4496:	f004 ff7f 	bl	d9398 <_Z16_fetch_usbserialv>
   d449a:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   d449e:	f004 ff6b 	bl	d9378 <_ZN9USBSerial5beginEl>
	setupPMIC();
   d44a2:	f7ff fe9b 	bl	d41dc <_Z9setupPMICv>
	pinMode(userSwitch, INPUT);										// Button for user input
   d44a6:	2100      	movs	r1, #0
   d44a8:	2004      	movs	r0, #4
   d44aa:	f005 f8c9 	bl	d9640 <pinMode>
	pinMode(wakeUpPin, INPUT_PULLDOWN);								// This pin is active HIGH
   d44ae:	2103      	movs	r1, #3
   d44b0:	2008      	movs	r0, #8
   d44b2:	f005 f8c5 	bl	d9640 <pinMode>
	pinMode(BUILT_IN_LED, OUTPUT);									// declare the Blue LED Pin as an output
   d44b6:	2101      	movs	r1, #1
   d44b8:	2007      	movs	r0, #7
   d44ba:	f005 f8c1 	bl	d9640 <pinMode>
	pinMode(donePin, OUTPUT);										// Allows us to pet the watchdog
   d44be:	2101      	movs	r1, #1
   d44c0:	2005      	movs	r0, #5
   d44c2:	f005 f8bd 	bl	d9640 <pinMode>
	digitalWrite(donePin, HIGH);
   d44c6:	2101      	movs	r1, #1
   d44c8:	2005      	movs	r0, #5
   d44ca:	f005 f8ca 	bl	d9662 <digitalWrite>
	digitalWrite(donePin, LOW);										// Pet the watchdog
   d44ce:	2100      	movs	r1, #0
   d44d0:	2005      	movs	r0, #5
   d44d2:	f005 f8c6 	bl	d9662 <digitalWrite>
	pinMode(DeepSleepPin , OUTPUT);									// For a hard reset active HIGH
   d44d6:	2101      	movs	r1, #1
   d44d8:	2006      	movs	r0, #6
   d44da:	f005 f8b1 	bl	d9640 <pinMode>
	pinMode(ANALOG_DETECTOR, INPUT_PULLDOWN);						// This pin is active HIGH
   d44de:	2103      	movs	r1, #3
   d44e0:	2010      	movs	r0, #16
   d44e2:	f005 f8ad 	bl	d9640 <pinMode>
	pinMode(PIRPin, INPUT_PULLDOWN);								// PIR Sensor Digital
   d44e6:	2103      	movs	r1, #3
   d44e8:	2013      	movs	r0, #19
   d44ea:	f005 f8a9 	bl	d9640 <pinMode>
	digitalWrite(PIRPin, LOW);										// SET PIR Sensor Digital
   d44ee:	2100      	movs	r1, #0
   d44f0:	2013      	movs	r0, #19
   d44f2:	f005 f8b6 	bl	d9662 <digitalWrite>
    DeviceNameHelperEEPROM::instance().setup(EEPROM_OFFSET);
   d44f6:	f001 fbfd 	bl	d5cf4 <_ZN22DeviceNameHelperEEPROM8instanceEv>
   d44fa:	4b10      	ldr	r3, [pc, #64]	; (d453c <setup+0xa8>)
   d44fc:	6819      	ldr	r1, [r3, #0]
   d44fe:	f001 fc7f 	bl	d5e00 <_ZN22DeviceNameHelperEEPROM5setupEi>
	Time.zone(-5 + Time.getDSTOffset());
   d4502:	f004 fcf5 	bl	d8ef0 <_ZN9TimeClass12getDSTOffsetEv>
   d4506:	eef1 7a04 	vmov.f32	s15, #20	; 0x40a00000  5.0
   d450a:	ee30 0a67 	vsub.f32	s0, s0, s15
   d450e:	f004 fccd 	bl	d8eac <_ZN9TimeClass4zoneEf>
	rtc.setup();
   d4512:	480b      	ldr	r0, [pc, #44]	; (d4540 <setup+0xac>)
   d4514:	f001 f9a6 	bl	d5864 <_ZN8MCP794105setupEv>
	fram.begin();									  				// Initializes Wire but does not return a boolean on successful initialization
   d4518:	480a      	ldr	r0, [pc, #40]	; (d4544 <setup+0xb0>)
   d451a:	f000 fe77 	bl	d520c <_ZN6MB85RC5beginEv>
	attachInterrupt(wakeUpPin, watchdogISR, RISING);  				// Need to pet the watchdog when needed
   d451e:	2300      	movs	r3, #0
   d4520:	9300      	str	r3, [sp, #0]
   d4522:	4909      	ldr	r1, [pc, #36]	; (d4548 <setup+0xb4>)
   d4524:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d4528:	2201      	movs	r2, #1
   d452a:	2008      	movs	r0, #8
   d452c:	f002 fe1a 	bl	d7164 <_Z15attachInterrupttPFvvE13InterruptModeah>
}
   d4530:	b003      	add	sp, #12
   d4532:	f85d eb04 	ldr.w	lr, [sp], #4
	watchdogISR();
   d4536:	f7ff bf85 	b.w	d4444 <_Z11watchdogISRv>
   d453a:	bf00      	nop
   d453c:	2003e398 	.word	0x2003e398
   d4540:	2003e588 	.word	0x2003e588
   d4544:	2003e4e0 	.word	0x2003e4e0
   d4548:	000d4445 	.word	0x000d4445

000d454c <loop>:
void loop() {
   d454c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	switch(state){
   d4550:	4c99      	ldr	r4, [pc, #612]	; (d47b8 <loop+0x26c>)
	rtc.loop();									  				// Need to run this in the main loop
   d4552:	489a      	ldr	r0, [pc, #616]	; (d47bc <loop+0x270>)
void loop() {
   d4554:	b094      	sub	sp, #80	; 0x50
	rtc.loop();									  				// Need to run this in the main loop
   d4556:	f001 fa8b 	bl	d5a70 <_ZN8MCP794104loopEv>
	switch(state){
   d455a:	7823      	ldrb	r3, [r4, #0]
   d455c:	3b02      	subs	r3, #2
   d455e:	2b06      	cmp	r3, #6
   d4560:	f200 80aa 	bhi.w	d46b8 <loop+0x16c>
   d4564:	e8df f013 	tbh	[pc, r3, lsl #1]
   d4568:	007e0007 	.word	0x007e0007
   d456c:	00d900ab 	.word	0x00d900ab
   d4570:	035e016a 	.word	0x035e016a
   d4574:	0380      	.short	0x0380
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4576:	f002 f825 	bl	d65c4 <spark_cloud_flag_connected>
   d457a:	4e91      	ldr	r6, [pc, #580]	; (d47c0 <loop+0x274>)
			if (Particle.connected()) {
   d457c:	4605      	mov	r5, r0
   d457e:	2800      	cmp	r0, #0
   d4580:	d04e      	beq.n	d4620 <loop+0xd4>
				logData("PARTICLE", "PARTICLE CONNECTED", true, false);
   d4582:	4990      	ldr	r1, [pc, #576]	; (d47c4 <loop+0x278>)
   d4584:	a80a      	add	r0, sp, #40	; 0x28
   d4586:	f004 fab6 	bl	d8af6 <_ZN6StringC1EPKc>
   d458a:	498f      	ldr	r1, [pc, #572]	; (d47c8 <loop+0x27c>)
   d458c:	a80e      	add	r0, sp, #56	; 0x38
   d458e:	f004 fab2 	bl	d8af6 <_ZN6StringC1EPKc>
   d4592:	2300      	movs	r3, #0
   d4594:	2201      	movs	r2, #1
   d4596:	a90e      	add	r1, sp, #56	; 0x38
   d4598:	a80a      	add	r0, sp, #40	; 0x28
   d459a:	f7ff feef 	bl	d437c <_Z7logData6StringS_bb>
   d459e:	a80e      	add	r0, sp, #56	; 0x38
   d45a0:	f004 fa5e 	bl	d8a60 <_ZN6StringD1Ev>
   d45a4:	a80a      	add	r0, sp, #40	; 0x28
   d45a6:	f004 fa5b 	bl	d8a60 <_ZN6StringD1Ev>
				if(watchdogState){
   d45aa:	4b88      	ldr	r3, [pc, #544]	; (d47cc <loop+0x280>)
   d45ac:	781b      	ldrb	r3, [r3, #0]
   d45ae:	b1c3      	cbz	r3, d45e2 <loop+0x96>
					logData("SLEEP RESULT", "Woke By Watcdhdog", true, true);
   d45b0:	4987      	ldr	r1, [pc, #540]	; (d47d0 <loop+0x284>)
   d45b2:	a80a      	add	r0, sp, #40	; 0x28
   d45b4:	f004 fa9f 	bl	d8af6 <_ZN6StringC1EPKc>
   d45b8:	4986      	ldr	r1, [pc, #536]	; (d47d4 <loop+0x288>)
						logData("SLEEP RESULT", "Woke By PIR", true, true);
   d45ba:	a80e      	add	r0, sp, #56	; 0x38
   d45bc:	f004 fa9b 	bl	d8af6 <_ZN6StringC1EPKc>
   d45c0:	2301      	movs	r3, #1
   d45c2:	461a      	mov	r2, r3
   d45c4:	a90e      	add	r1, sp, #56	; 0x38
   d45c6:	a80a      	add	r0, sp, #40	; 0x28
   d45c8:	f7ff fed8 	bl	d437c <_Z7logData6StringS_bb>
   d45cc:	a80e      	add	r0, sp, #56	; 0x38
   d45ce:	f004 fa47 	bl	d8a60 <_ZN6StringD1Ev>
   d45d2:	a80a      	add	r0, sp, #40	; 0x28
   d45d4:	f004 fa44 	bl	d8a60 <_ZN6StringD1Ev>
   d45d8:	f001 fdba 	bl	d6150 <HAL_Timer_Get_Milli_Seconds>
				stateTime = millis();
   d45dc:	6030      	str	r0, [r6, #0]
					state = SAMPLING_WAIT_STATE;
   d45de:	2303      	movs	r3, #3
   d45e0:	e069      	b.n	d46b6 <loop+0x16a>
        readData(framAddr, (uint8_t *)&t, sizeof(T));
   d45e2:	4f7d      	ldr	r7, [pc, #500]	; (d47d8 <loop+0x28c>)
   d45e4:	4d7d      	ldr	r5, [pc, #500]	; (d47dc <loop+0x290>)
   d45e6:	487e      	ldr	r0, [pc, #504]	; (d47e0 <loop+0x294>)
   d45e8:	2301      	movs	r3, #1
   d45ea:	463a      	mov	r2, r7
   d45ec:	2109      	movs	r1, #9
   d45ee:	f000 fe17 	bl	d5220 <_ZN6MB85RC8readDataEjPhj>
   d45f2:	2301      	movs	r3, #1
   d45f4:	487a      	ldr	r0, [pc, #488]	; (d47e0 <loop+0x294>)
   d45f6:	462a      	mov	r2, r5
   d45f8:	2111      	movs	r1, #17
   d45fa:	f000 fe11 	bl	d5220 <_ZN6MB85RC8readDataEjPhj>
					if(rtcState){
   d45fe:	783b      	ldrb	r3, [r7, #0]
   d4600:	b12b      	cbz	r3, d460e <loop+0xc2>
						logData("SLEEP RESULT", "Woke By RTC", true, true);
   d4602:	4973      	ldr	r1, [pc, #460]	; (d47d0 <loop+0x284>)
   d4604:	a80a      	add	r0, sp, #40	; 0x28
   d4606:	f004 fa76 	bl	d8af6 <_ZN6StringC1EPKc>
   d460a:	4976      	ldr	r1, [pc, #472]	; (d47e4 <loop+0x298>)
   d460c:	e7d5      	b.n	d45ba <loop+0x6e>
					} else if(pirState){
   d460e:	782b      	ldrb	r3, [r5, #0]
   d4610:	2b00      	cmp	r3, #0
   d4612:	d0e1      	beq.n	d45d8 <loop+0x8c>
						logData("SLEEP RESULT", "Woke By PIR", true, true);
   d4614:	496e      	ldr	r1, [pc, #440]	; (d47d0 <loop+0x284>)
   d4616:	a80a      	add	r0, sp, #40	; 0x28
   d4618:	f004 fa6d 	bl	d8af6 <_ZN6StringC1EPKc>
   d461c:	4972      	ldr	r1, [pc, #456]	; (d47e8 <loop+0x29c>)
   d461e:	e7cc      	b.n	d45ba <loop+0x6e>
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
   d4620:	f001 ffc8 	bl	d65b4 <spark_cloud_flag_connect>
   d4624:	f001 fd94 	bl	d6150 <HAL_Timer_Get_Milli_Seconds>
				if(millis() - stateTime > MAX_TIME_TO_WAIT_FOR_CONNECT_MS){
   d4628:	6833      	ldr	r3, [r6, #0]
   d462a:	1ac0      	subs	r0, r0, r3
   d462c:	4b6f      	ldr	r3, [pc, #444]	; (d47ec <loop+0x2a0>)
   d462e:	4298      	cmp	r0, r3
   d4630:	d942      	bls.n	d46b8 <loop+0x16c>
					logData("PARTICLE", "PARTICLE FAILED TO CONNECT", true, false);
   d4632:	4964      	ldr	r1, [pc, #400]	; (d47c4 <loop+0x278>)
   d4634:	a80a      	add	r0, sp, #40	; 0x28
   d4636:	f004 fa5e 	bl	d8af6 <_ZN6StringC1EPKc>
   d463a:	496d      	ldr	r1, [pc, #436]	; (d47f0 <loop+0x2a4>)
   d463c:	a80e      	add	r0, sp, #56	; 0x38
   d463e:	f004 fa5a 	bl	d8af6 <_ZN6StringC1EPKc>
   d4642:	462b      	mov	r3, r5
   d4644:	2201      	movs	r2, #1
   d4646:	a90e      	add	r1, sp, #56	; 0x38
   d4648:	a80a      	add	r0, sp, #40	; 0x28
   d464a:	f7ff fe97 	bl	d437c <_Z7logData6StringS_bb>
   d464e:	a80e      	add	r0, sp, #56	; 0x38
   d4650:	f004 fa06 	bl	d8a60 <_ZN6StringD1Ev>
   d4654:	a80a      	add	r0, sp, #40	; 0x28
   d4656:	f004 fa03 	bl	d8a60 <_ZN6StringD1Ev>
   d465a:	f001 fd79 	bl	d6150 <HAL_Timer_Get_Milli_Seconds>
					stateTime = millis();
   d465e:	6030      	str	r0, [r6, #0]
			state = SLEEP_WAIT_STATE;
   d4660:	2307      	movs	r3, #7
   d4662:	e028      	b.n	d46b6 <loop+0x16a>
			if(millis() - stateTime >= MAX_TIME_TO_SAMPLE_WAIT){
   d4664:	4d56      	ldr	r5, [pc, #344]	; (d47c0 <loop+0x274>)
   d4666:	f001 fd73 	bl	d6150 <HAL_Timer_Get_Milli_Seconds>
   d466a:	682b      	ldr	r3, [r5, #0]
   d466c:	1ac0      	subs	r0, r0, r3
   d466e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   d4672:	d321      	bcc.n	d46b8 <loop+0x16c>
				logData("SAMPLING_WAIT_STATE", "START SAMPLING", true, false);
   d4674:	495f      	ldr	r1, [pc, #380]	; (d47f4 <loop+0x2a8>)
   d4676:	a80a      	add	r0, sp, #40	; 0x28
   d4678:	f004 fa3d 	bl	d8af6 <_ZN6StringC1EPKc>
   d467c:	495e      	ldr	r1, [pc, #376]	; (d47f8 <loop+0x2ac>)
   d467e:	a80e      	add	r0, sp, #56	; 0x38
   d4680:	f004 fa39 	bl	d8af6 <_ZN6StringC1EPKc>
   d4684:	2300      	movs	r3, #0
   d4686:	2201      	movs	r2, #1
   d4688:	a90e      	add	r1, sp, #56	; 0x38
   d468a:	a80a      	add	r0, sp, #40	; 0x28
   d468c:	f7ff fe76 	bl	d437c <_Z7logData6StringS_bb>
   d4690:	a80e      	add	r0, sp, #56	; 0x38
   d4692:	f004 f9e5 	bl	d8a60 <_ZN6StringD1Ev>
   d4696:	a80a      	add	r0, sp, #40	; 0x28
   d4698:	f004 f9e2 	bl	d8a60 <_ZN6StringD1Ev>
				sampleCounter = 1;
   d469c:	4b57      	ldr	r3, [pc, #348]	; (d47fc <loop+0x2b0>)
   d469e:	2201      	movs	r2, #1
   d46a0:	601a      	str	r2, [r3, #0]
				sampleSum = 0;
   d46a2:	4b57      	ldr	r3, [pc, #348]	; (d4800 <loop+0x2b4>)
   d46a4:	2200      	movs	r2, #0
   d46a6:	601a      	str	r2, [r3, #0]
				sampleAverage = 0;
   d46a8:	4b56      	ldr	r3, [pc, #344]	; (d4804 <loop+0x2b8>)
   d46aa:	2200      	movs	r2, #0
   d46ac:	601a      	str	r2, [r3, #0]
   d46ae:	f001 fd4f 	bl	d6150 <HAL_Timer_Get_Milli_Seconds>
				state = SAMPLE_STATE;
   d46b2:	2304      	movs	r3, #4
				stateTime = millis();
   d46b4:	6028      	str	r0, [r5, #0]
					state = SAMPLING_WAIT_STATE;
   d46b6:	7023      	strb	r3, [r4, #0]
}
   d46b8:	b014      	add	sp, #80	; 0x50
   d46ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			analogValue = analogRead(ANALOG_DETECTOR);
   d46be:	2010      	movs	r0, #16
   d46c0:	f004 ffe8 	bl	d9694 <analogRead>
			sampleSum = sampleSum + analogValue;
   d46c4:	4d4e      	ldr	r5, [pc, #312]	; (d4800 <loop+0x2b4>)
			analogValue = analogRead(ANALOG_DETECTOR);
   d46c6:	4a50      	ldr	r2, [pc, #320]	; (d4808 <loop+0x2bc>)
			if(sampleCounter++ > sampleTotalCount){
   d46c8:	4e50      	ldr	r6, [pc, #320]	; (d480c <loop+0x2c0>)
			analogValue = analogRead(ANALOG_DETECTOR);
   d46ca:	6010      	str	r0, [r2, #0]
			sampleSum = sampleSum + analogValue;
   d46cc:	682a      	ldr	r2, [r5, #0]
			analogValue = analogRead(ANALOG_DETECTOR);
   d46ce:	4603      	mov	r3, r0
			sampleSum = sampleSum + analogValue;
   d46d0:	4413      	add	r3, r2
			if(sampleCounter++ > sampleTotalCount){
   d46d2:	4a4a      	ldr	r2, [pc, #296]	; (d47fc <loop+0x2b0>)
			sampleSum = sampleSum + analogValue;
   d46d4:	602b      	str	r3, [r5, #0]
			if(sampleCounter++ > sampleTotalCount){
   d46d6:	6813      	ldr	r3, [r2, #0]
   d46d8:	1c59      	adds	r1, r3, #1
   d46da:	6011      	str	r1, [r2, #0]
   d46dc:	6832      	ldr	r2, [r6, #0]
   d46de:	4293      	cmp	r3, r2
   d46e0:	dd1b      	ble.n	d471a <loop+0x1ce>
				digitalValue = map(analogValue, minValue, maxValue, 0, 100);
   d46e2:	2364      	movs	r3, #100	; 0x64
   d46e4:	4a4a      	ldr	r2, [pc, #296]	; (d4810 <loop+0x2c4>)
   d46e6:	494b      	ldr	r1, [pc, #300]	; (d4814 <loop+0x2c8>)
   d46e8:	9300      	str	r3, [sp, #0]
   d46ea:	6812      	ldr	r2, [r2, #0]
   d46ec:	6809      	ldr	r1, [r1, #0]
   d46ee:	2300      	movs	r3, #0
   d46f0:	f002 f860 	bl	d67b4 <_Z3mapiiiii>
   d46f4:	4b48      	ldr	r3, [pc, #288]	; (d4818 <loop+0x2cc>)
				sampleAverage = sampleSum / sampleTotalCount;
   d46f6:	6832      	ldr	r2, [r6, #0]
				digitalValue = map(analogValue, minValue, maxValue, 0, 100);
   d46f8:	6018      	str	r0, [r3, #0]
				sampleAverage = sampleSum / sampleTotalCount;
   d46fa:	682b      	ldr	r3, [r5, #0]
   d46fc:	fb93 f3f2 	sdiv	r3, r3, r2
   d4700:	ee07 3a90 	vmov	s15, r3
   d4704:	4b3f      	ldr	r3, [pc, #252]	; (d4804 <loop+0x2b8>)
   d4706:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d470a:	edc3 7a00 	vstr	s15, [r3]
   d470e:	f001 fd1f 	bl	d6150 <HAL_Timer_Get_Milli_Seconds>
				stateTime = millis();
   d4712:	4b2b      	ldr	r3, [pc, #172]	; (d47c0 <loop+0x274>)
   d4714:	6018      	str	r0, [r3, #0]
				state = PUBLISH_WAIT_STATE;
   d4716:	2305      	movs	r3, #5
   d4718:	7023      	strb	r3, [r4, #0]
			if(millis() - stateTime >= MAX_TIME_TO_WAIT_PUBLISH_MS){
   d471a:	4d29      	ldr	r5, [pc, #164]	; (d47c0 <loop+0x274>)
   d471c:	f001 fd18 	bl	d6150 <HAL_Timer_Get_Milli_Seconds>
   d4720:	682a      	ldr	r2, [r5, #0]
   d4722:	1a80      	subs	r0, r0, r2
   d4724:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   d4728:	d3c6      	bcc.n	d46b8 <loop+0x16c>
				getTemperature() ? temperatureStringC = String(temperatureC, 2) : temperatureStringC = "0";
   d472a:	f7ff fd79 	bl	d4220 <_Z14getTemperaturev>
   d472e:	4e3b      	ldr	r6, [pc, #236]	; (d481c <loop+0x2d0>)
   d4730:	2800      	cmp	r0, #0
   d4732:	d03c      	beq.n	d47ae <loop+0x262>
   d4734:	ed96 0a00 	vldr	s0, [r6]
   d4738:	2102      	movs	r1, #2
   d473a:	a80e      	add	r0, sp, #56	; 0x38
   d473c:	f004 fa4b 	bl	d8bd6 <_ZN6StringC1Efi>
   d4740:	4837      	ldr	r0, [pc, #220]	; (d4820 <loop+0x2d4>)
   d4742:	a90e      	add	r1, sp, #56	; 0x38
   d4744:	f004 fa2d 	bl	d8ba2 <_ZN6StringaSEOS_>
   d4748:	a80e      	add	r0, sp, #56	; 0x38
   d474a:	f004 f989 	bl	d8a60 <_ZN6StringD1Ev>
					logData("POWER", "ENBABLE CHARGING", true, true);
   d474e:	4935      	ldr	r1, [pc, #212]	; (d4824 <loop+0x2d8>)
   d4750:	a80a      	add	r0, sp, #40	; 0x28
					logData("POWER", "ENBABLE CHARGING", true, true);
   d4752:	f004 f9d0 	bl	d8af6 <_ZN6StringC1EPKc>
   d4756:	4934      	ldr	r1, [pc, #208]	; (d4828 <loop+0x2dc>)
   d4758:	a80e      	add	r0, sp, #56	; 0x38
   d475a:	f004 f9cc 	bl	d8af6 <_ZN6StringC1EPKc>
   d475e:	2301      	movs	r3, #1
   d4760:	461a      	mov	r2, r3
   d4762:	a90e      	add	r1, sp, #56	; 0x38
   d4764:	a80a      	add	r0, sp, #40	; 0x28
   d4766:	f7ff fe09 	bl	d437c <_Z7logData6StringS_bb>
   d476a:	a80e      	add	r0, sp, #56	; 0x38
   d476c:	f004 f978 	bl	d8a60 <_ZN6StringD1Ev>
   d4770:	a80a      	add	r0, sp, #40	; 0x28
   d4772:	f004 f975 	bl	d8a60 <_ZN6StringD1Ev>
					pmic.enableCharging();
   d4776:	482d      	ldr	r0, [pc, #180]	; (d482c <loop+0x2e0>)
   d4778:	f004 f867 	bl	d884a <_ZN4PMIC14enableChargingEv>
				logData("PUBLISHING", "START PUBLISH_STATE", true, false);
   d477c:	492c      	ldr	r1, [pc, #176]	; (d4830 <loop+0x2e4>)
   d477e:	a80a      	add	r0, sp, #40	; 0x28
   d4780:	f004 f9b9 	bl	d8af6 <_ZN6StringC1EPKc>
   d4784:	492b      	ldr	r1, [pc, #172]	; (d4834 <loop+0x2e8>)
   d4786:	a80e      	add	r0, sp, #56	; 0x38
   d4788:	f004 f9b5 	bl	d8af6 <_ZN6StringC1EPKc>
   d478c:	2300      	movs	r3, #0
   d478e:	2201      	movs	r2, #1
   d4790:	a90e      	add	r1, sp, #56	; 0x38
   d4792:	a80a      	add	r0, sp, #40	; 0x28
   d4794:	f7ff fdf2 	bl	d437c <_Z7logData6StringS_bb>
   d4798:	a80e      	add	r0, sp, #56	; 0x38
   d479a:	f004 f961 	bl	d8a60 <_ZN6StringD1Ev>
   d479e:	a80a      	add	r0, sp, #40	; 0x28
   d47a0:	f004 f95e 	bl	d8a60 <_ZN6StringD1Ev>
   d47a4:	f001 fcd4 	bl	d6150 <HAL_Timer_Get_Milli_Seconds>
				state = PUBLISH_STATE;
   d47a8:	2306      	movs	r3, #6
				stateTime = millis();
   d47aa:	6028      	str	r0, [r5, #0]
				state = PUBLISH_STATE;
   d47ac:	e783      	b.n	d46b6 <loop+0x16a>
				getTemperature() ? temperatureStringC = String(temperatureC, 2) : temperatureStringC = "0";
   d47ae:	4922      	ldr	r1, [pc, #136]	; (d4838 <loop+0x2ec>)
   d47b0:	481b      	ldr	r0, [pc, #108]	; (d4820 <loop+0x2d4>)
   d47b2:	f004 f9fe 	bl	d8bb2 <_ZN6StringaSEPKc>
   d47b6:	e7ca      	b.n	d474e <loop+0x202>
   d47b8:	2003e3a4 	.word	0x2003e3a4
   d47bc:	2003e588 	.word	0x2003e588
   d47c0:	2003e5b4 	.word	0x2003e5b4
   d47c4:	000da955 	.word	0x000da955
   d47c8:	000da95e 	.word	0x000da95e
   d47cc:	2003e5e0 	.word	0x2003e5e0
   d47d0:	000da971 	.word	0x000da971
   d47d4:	000da97e 	.word	0x000da97e
   d47d8:	2003e5a4 	.word	0x2003e5a4
   d47dc:	2003e560 	.word	0x2003e560
   d47e0:	2003e4e0 	.word	0x2003e4e0
   d47e4:	000da990 	.word	0x000da990
   d47e8:	000da99c 	.word	0x000da99c
   d47ec:	000493e0 	.word	0x000493e0
   d47f0:	000da9a8 	.word	0x000da9a8
   d47f4:	000da9c3 	.word	0x000da9c3
   d47f8:	000da9d7 	.word	0x000da9d7
   d47fc:	2003e5ac 	.word	0x2003e5ac
   d4800:	2003e5b0 	.word	0x2003e5b0
   d4804:	2003e5a8 	.word	0x2003e5a8
   d4808:	2003e450 	.word	0x2003e450
   d480c:	2003e3a0 	.word	0x2003e3a0
   d4810:	2003e39c 	.word	0x2003e39c
   d4814:	2003e55c 	.word	0x2003e55c
   d4818:	2003e49c 	.word	0x2003e49c
   d481c:	2003e5b8 	.word	0x2003e5b8
   d4820:	2003e5c0 	.word	0x2003e5c0
   d4824:	000da9e8 	.word	0x000da9e8
   d4828:	000da9ee 	.word	0x000da9ee
   d482c:	2003e561 	.word	0x2003e561
   d4830:	000da9ff 	.word	0x000da9ff
   d4834:	000daa0a 	.word	0x000daa0a
   d4838:	000da9e6 	.word	0x000da9e6
			Serial.println(analogValue);
   d483c:	f004 fdac 	bl	d9398 <_Z16_fetch_usbserialv>
   d4840:	4bb8      	ldr	r3, [pc, #736]	; (d4b24 <loop+0x5d8>)
   d4842:	681d      	ldr	r5, [r3, #0]
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
   d4844:	2d00      	cmp	r5, #0
   d4846:	4606      	mov	r6, r0
   d4848:	f280 81e5 	bge.w	d4c16 <loop+0x6ca>
            t = print('-');
   d484c:	212d      	movs	r1, #45	; 0x2d
   d484e:	f004 f83b 	bl	d88c8 <_ZN5Print5printEc>
            val = -n;
   d4852:	4269      	negs	r1, r5
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d4854:	220a      	movs	r2, #10
   d4856:	4630      	mov	r0, r6
			Serial.println(digitalValue);
   d4858:	4fb3      	ldr	r7, [pc, #716]	; (d4b28 <loop+0x5dc>)
   d485a:	f004 f844 	bl	d88e6 <_ZN5Print11printNumberEmh>
        n += println();
   d485e:	4630      	mov	r0, r6
   d4860:	f004 f835 	bl	d88ce <_ZN5Print7printlnEv>
   d4864:	f004 fd98 	bl	d9398 <_Z16_fetch_usbserialv>
   d4868:	683d      	ldr	r5, [r7, #0]
        if (n < 0 && base == 10) {
   d486a:	2d00      	cmp	r5, #0
   d486c:	4606      	mov	r6, r0
   d486e:	f280 81d4 	bge.w	d4c1a <loop+0x6ce>
            t = print('-');
   d4872:	212d      	movs	r1, #45	; 0x2d
   d4874:	f004 f828 	bl	d88c8 <_ZN5Print5printEc>
            val = -n;
   d4878:	4269      	negs	r1, r5
        return printNumber(val, base) + t;
   d487a:	220a      	movs	r2, #10
   d487c:	4630      	mov	r0, r6
   d487e:	f004 f832 	bl	d88e6 <_ZN5Print11printNumberEmh>
        n += println();
   d4882:	4630      	mov	r0, r6
   d4884:	f004 f823 	bl	d88ce <_ZN5Print7printlnEv>
				feedName = "Garden-Lady-Bug-04-Cap";
   d4888:	49a8      	ldr	r1, [pc, #672]	; (d4b2c <loop+0x5e0>)
   d488a:	48a9      	ldr	r0, [pc, #676]	; (d4b30 <loop+0x5e4>)
				powerSource = System.powerSource();
   d488c:	4da9      	ldr	r5, [pc, #676]	; (d4b34 <loop+0x5e8>)
				batteryState = System.batteryState();
   d488e:	4eaa      	ldr	r6, [pc, #680]	; (d4b38 <loop+0x5ec>)
				feedName = "Garden-Lady-Bug-04-Cap";
   d4890:	f004 f98f 	bl	d8bb2 <_ZN6StringaSEPKc>
				feedID = "6cUonqXsLchfn8t5F6UsUrxF58qE";
   d4894:	49a9      	ldr	r1, [pc, #676]	; (d4b3c <loop+0x5f0>)
   d4896:	48aa      	ldr	r0, [pc, #680]	; (d4b40 <loop+0x5f4>)
   d4898:	f004 f98b 	bl	d8bb2 <_ZN6StringaSEPKc>
	StringSumHelper(const char *p) : String(p) {}
   d489c:	49a9      	ldr	r1, [pc, #676]	; (d4b44 <loop+0x5f8>)
   d489e:	a80e      	add	r0, sp, #56	; 0x38
   d48a0:	f004 f929 	bl	d8af6 <_ZN6StringC1EPKc>
				feedData = "{ \"value\": \"" + String::format("%.2f", sampleAverage) + "\", \"feedID\": \"" + feedID + "\"}";
   d48a4:	4ba8      	ldr	r3, [pc, #672]	; (d4b48 <loop+0x5fc>)
   d48a6:	6818      	ldr	r0, [r3, #0]
   d48a8:	f005 f90a 	bl	d9ac0 <__aeabi_f2d>
   d48ac:	4602      	mov	r2, r0
   d48ae:	460b      	mov	r3, r1
   d48b0:	a80a      	add	r0, sp, #40	; 0x28
   d48b2:	49a6      	ldr	r1, [pc, #664]	; (d4b4c <loop+0x600>)
   d48b4:	f004 f9e2 	bl	d8c7c <_ZN6String6formatEPKcz>
   d48b8:	a90a      	add	r1, sp, #40	; 0x28
   d48ba:	a80e      	add	r0, sp, #56	; 0x38
   d48bc:	f004 f9bc 	bl	d8c38 <_ZplRK15StringSumHelperRK6String>
   d48c0:	49a3      	ldr	r1, [pc, #652]	; (d4b50 <loop+0x604>)
   d48c2:	f004 f9c5 	bl	d8c50 <_ZplRK15StringSumHelperPKc>
   d48c6:	499e      	ldr	r1, [pc, #632]	; (d4b40 <loop+0x5f4>)
   d48c8:	f004 f9b6 	bl	d8c38 <_ZplRK15StringSumHelperRK6String>
   d48cc:	49a1      	ldr	r1, [pc, #644]	; (d4b54 <loop+0x608>)
   d48ce:	f004 f9bf 	bl	d8c50 <_ZplRK15StringSumHelperPKc>
   d48d2:	4601      	mov	r1, r0
   d48d4:	48a0      	ldr	r0, [pc, #640]	; (d4b58 <loop+0x60c>)
   d48d6:	f004 f94a 	bl	d8b6e <_ZN6StringaSERKS_>
   d48da:	a80a      	add	r0, sp, #40	; 0x28
   d48dc:	f004 f8c0 	bl	d8a60 <_ZN6StringD1Ev>
class StringSumHelper : public String
   d48e0:	a80e      	add	r0, sp, #56	; 0x38
   d48e2:	f004 f8bd 	bl	d8a60 <_ZN6StringD1Ev>
				logData(feedName, feedData, true, true);
   d48e6:	4992      	ldr	r1, [pc, #584]	; (d4b30 <loop+0x5e4>)
   d48e8:	a80a      	add	r0, sp, #40	; 0x28
   d48ea:	f004 f94f 	bl	d8b8c <_ZN6StringC1ERKS_>
   d48ee:	499a      	ldr	r1, [pc, #616]	; (d4b58 <loop+0x60c>)
   d48f0:	a80e      	add	r0, sp, #56	; 0x38
   d48f2:	f004 f94b 	bl	d8b8c <_ZN6StringC1ERKS_>
   d48f6:	2301      	movs	r3, #1
   d48f8:	461a      	mov	r2, r3
   d48fa:	a90e      	add	r1, sp, #56	; 0x38
   d48fc:	a80a      	add	r0, sp, #40	; 0x28
   d48fe:	f7ff fd3d 	bl	d437c <_Z7logData6StringS_bb>
   d4902:	a80e      	add	r0, sp, #56	; 0x38
   d4904:	f004 f8ac 	bl	d8a60 <_ZN6StringD1Ev>
   d4908:	a80a      	add	r0, sp, #40	; 0x28
   d490a:	f004 f8a9 	bl	d8a60 <_ZN6StringD1Ev>
				feedName = "Garden-Lady-Bug-04-Cap-Percentage";
   d490e:	4993      	ldr	r1, [pc, #588]	; (d4b5c <loop+0x610>)
   d4910:	4887      	ldr	r0, [pc, #540]	; (d4b30 <loop+0x5e4>)
   d4912:	f004 f94e 	bl	d8bb2 <_ZN6StringaSEPKc>
				feedID = "n8epcPsCFksb9UWYtgXtoe4Kjhkv";
   d4916:	4992      	ldr	r1, [pc, #584]	; (d4b60 <loop+0x614>)
   d4918:	4889      	ldr	r0, [pc, #548]	; (d4b40 <loop+0x5f4>)
   d491a:	f004 f94a 	bl	d8bb2 <_ZN6StringaSEPKc>
	StringSumHelper(const char *p) : String(p) {}
   d491e:	4989      	ldr	r1, [pc, #548]	; (d4b44 <loop+0x5f8>)
   d4920:	a80e      	add	r0, sp, #56	; 0x38
   d4922:	f004 f8e8 	bl	d8af6 <_ZN6StringC1EPKc>
				feedData = "{ \"value\": \"" + String::format("%d", digitalValue) + "\", \"feedID\": \"" + feedID + "\"}";
   d4926:	683a      	ldr	r2, [r7, #0]
   d4928:	498e      	ldr	r1, [pc, #568]	; (d4b64 <loop+0x618>)
   d492a:	a80a      	add	r0, sp, #40	; 0x28
   d492c:	f004 f9a6 	bl	d8c7c <_ZN6String6formatEPKcz>
   d4930:	a90a      	add	r1, sp, #40	; 0x28
   d4932:	a80e      	add	r0, sp, #56	; 0x38
   d4934:	f004 f980 	bl	d8c38 <_ZplRK15StringSumHelperRK6String>
   d4938:	4985      	ldr	r1, [pc, #532]	; (d4b50 <loop+0x604>)
   d493a:	f004 f989 	bl	d8c50 <_ZplRK15StringSumHelperPKc>
   d493e:	4980      	ldr	r1, [pc, #512]	; (d4b40 <loop+0x5f4>)
   d4940:	f004 f97a 	bl	d8c38 <_ZplRK15StringSumHelperRK6String>
   d4944:	4983      	ldr	r1, [pc, #524]	; (d4b54 <loop+0x608>)
   d4946:	f004 f983 	bl	d8c50 <_ZplRK15StringSumHelperPKc>
   d494a:	4601      	mov	r1, r0
   d494c:	4882      	ldr	r0, [pc, #520]	; (d4b58 <loop+0x60c>)
   d494e:	f004 f90e 	bl	d8b6e <_ZN6StringaSERKS_>
   d4952:	a80a      	add	r0, sp, #40	; 0x28
   d4954:	f004 f884 	bl	d8a60 <_ZN6StringD1Ev>
class StringSumHelper : public String
   d4958:	a80e      	add	r0, sp, #56	; 0x38
   d495a:	f004 f881 	bl	d8a60 <_ZN6StringD1Ev>
				logData(feedName, feedData, false, true);    
   d495e:	4974      	ldr	r1, [pc, #464]	; (d4b30 <loop+0x5e4>)
   d4960:	a80a      	add	r0, sp, #40	; 0x28
   d4962:	f004 f913 	bl	d8b8c <_ZN6StringC1ERKS_>
   d4966:	497c      	ldr	r1, [pc, #496]	; (d4b58 <loop+0x60c>)
   d4968:	a80e      	add	r0, sp, #56	; 0x38
   d496a:	f004 f90f 	bl	d8b8c <_ZN6StringC1ERKS_>
	if (tempLogParticle){
   d496e:	a90e      	add	r1, sp, #56	; 0x38
   d4970:	a80a      	add	r0, sp, #40	; 0x28
   d4972:	f7ff fcd7 	bl	d4324 <_Z7logData6StringS_bb.part.0>
				logData(feedName, feedData, false, true);    
   d4976:	a80e      	add	r0, sp, #56	; 0x38
   d4978:	f004 f872 	bl	d8a60 <_ZN6StringD1Ev>
   d497c:	a80a      	add	r0, sp, #40	; 0x28
   d497e:	f004 f86f 	bl	d8a60 <_ZN6StringD1Ev>
inline AbstractIntegerDiagnosticData::AbstractIntegerDiagnosticData(DiagnosticDataId id, const char* name) :
        AbstractTypeDiagnosticData<int32_t>(id, name, DIAG_TYPE_INT) {
}

inline int AbstractIntegerDiagnosticData::get(DiagnosticDataId id, IntType& val) {
    return AbstractTypeDiagnosticData<IntType>::get(id, val);
   d4982:	a90e      	add	r1, sp, #56	; 0x38
   d4984:	2018      	movs	r0, #24
   d4986:	f7ff fd1d 	bl	d43c4 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
    }

    int powerSource() const {
        particle::AbstractIntegerDiagnosticData::IntType val;
        const auto r = particle::AbstractIntegerDiagnosticData::get(DIAG_ID_SYSTEM_POWER_SOURCE, val);
        if (r < 0) {
   d498a:	2800      	cmp	r0, #0
            return r;
        }
        return val;
   d498c:	bfa8      	it	ge
   d498e:	980e      	ldrge	r0, [sp, #56]	; 0x38
				powerSource = System.powerSource();
   d4990:	6028      	str	r0, [r5, #0]
   d4992:	a90e      	add	r1, sp, #56	; 0x38
   d4994:	2007      	movs	r0, #7
   d4996:	f7ff fd15 	bl	d43c4 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
				powerSString = powerSources[std::max(0, powerSource)];
   d499a:	682b      	ldr	r3, [r5, #0]
   d499c:	4a72      	ldr	r2, [pc, #456]	; (d4b68 <loop+0x61c>)
    }

    int batteryState() const {
        particle::AbstractIntegerDiagnosticData::IntType val;
        const auto r = particle::AbstractIntegerDiagnosticData::get(DIAG_ID_SYSTEM_BATTERY_STATE, val);
        if (r < 0) {
   d499e:	2800      	cmp	r0, #0
   d49a0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
            return r;
        }
        return val;
   d49a4:	bfa8      	it	ge
   d49a6:	980e      	ldrge	r0, [sp, #56]	; 0x38
   d49a8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
				batteryState = System.batteryState();
   d49ac:	6030      	str	r0, [r6, #0]
				powerSString = powerSources[std::max(0, powerSource)];
   d49ae:	486f      	ldr	r0, [pc, #444]	; (d4b6c <loop+0x620>)
   d49b0:	f004 f8ff 	bl	d8bb2 <_ZN6StringaSEPKc>
				powerBSString = batteryStates[std::max(0, batteryState)];
   d49b4:	6833      	ldr	r3, [r6, #0]
   d49b6:	4a6e      	ldr	r2, [pc, #440]	; (d4b70 <loop+0x624>)
   d49b8:	486e      	ldr	r0, [pc, #440]	; (d4b74 <loop+0x628>)
   d49ba:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   d49be:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
   d49c2:	f004 f8f6 	bl	d8bb2 <_ZN6StringaSEPKc>
   d49c6:	a90e      	add	r1, sp, #56	; 0x38
   d49c8:	2003      	movs	r0, #3
   d49ca:	f7ff fcfb 	bl	d43c4 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
        // XXX: we could potentially simply call FuelGauge::getNormalizedSoC(),
        // however in order to exactly match the vitals values sent to the cloud we are going to use
        // diagnostic source as well.
        particle::AbstractIntegerDiagnosticData::IntType val;
        int r = particle::AbstractIntegerDiagnosticData::get(DIAG_ID_SYSTEM_BATTERY_CHARGE, val);
        if (r) {
   d49ce:	2800      	cmp	r0, #0
   d49d0:	f040 8125 	bne.w	d4c1e <loop+0x6d2>
    StorageT value() const {
        return value_;
    }

    constexpr float toFloat() const {
        return static_cast<float>(value_) / constexpr_pow(2.0f, N);
   d49d4:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   d49d8:	ee00 3a10 	vmov	s0, r3
   d49dc:	eebb 0acc 	vcvt.f32.u32	s0, s0, #8
				batterySocString = String(System.batteryCharge(), 2);
   d49e0:	2102      	movs	r1, #2
   d49e2:	a80e      	add	r0, sp, #56	; 0x38
   d49e4:	f004 f8f7 	bl	d8bd6 <_ZN6StringC1Efi>
   d49e8:	a90e      	add	r1, sp, #56	; 0x38
   d49ea:	4863      	ldr	r0, [pc, #396]	; (d4b78 <loop+0x62c>)
   d49ec:	f004 f8d9 	bl	d8ba2 <_ZN6StringaSEOS_>
   d49f0:	a80e      	add	r0, sp, #56	; 0x38
   d49f2:	f004 f835 	bl	d8a60 <_ZN6StringD1Ev>
				VCellString = String(fuel.getVCell(), 2);
   d49f6:	4861      	ldr	r0, [pc, #388]	; (d4b7c <loop+0x630>)
   d49f8:	f002 fac6 	bl	d6f88 <_ZN9FuelGauge8getVCellEv>
   d49fc:	2102      	movs	r1, #2
   d49fe:	a80e      	add	r0, sp, #56	; 0x38
   d4a00:	f004 f8e9 	bl	d8bd6 <_ZN6StringC1Efi>
   d4a04:	a90e      	add	r1, sp, #56	; 0x38
   d4a06:	485e      	ldr	r0, [pc, #376]	; (d4b80 <loop+0x634>)
   d4a08:	f004 f8cb 	bl	d8ba2 <_ZN6StringaSEOS_>
   d4a0c:	a80e      	add	r0, sp, #56	; 0x38
   d4a0e:	f004 f827 	bl	d8a60 <_ZN6StringD1Ev>
				SoCString = String(fuel.getSoC(), 2);
   d4a12:	485a      	ldr	r0, [pc, #360]	; (d4b7c <loop+0x630>)
   d4a14:	f002 fad4 	bl	d6fc0 <_ZN9FuelGauge6getSoCEv>
   d4a18:	2102      	movs	r1, #2
   d4a1a:	a80e      	add	r0, sp, #56	; 0x38
   d4a1c:	f004 f8db 	bl	d8bd6 <_ZN6StringC1Efi>
   d4a20:	a90e      	add	r1, sp, #56	; 0x38
   d4a22:	4858      	ldr	r0, [pc, #352]	; (d4b84 <loop+0x638>)
   d4a24:	f004 f8bd 	bl	d8ba2 <_ZN6StringaSEOS_>
   d4a28:	a80e      	add	r0, sp, #56	; 0x38
   d4a2a:	f004 f819 	bl	d8a60 <_ZN6StringD1Ev>
				logData("Power sources", powerSString, true, true);
   d4a2e:	4956      	ldr	r1, [pc, #344]	; (d4b88 <loop+0x63c>)
   d4a30:	a80a      	add	r0, sp, #40	; 0x28
   d4a32:	f004 f860 	bl	d8af6 <_ZN6StringC1EPKc>
   d4a36:	494d      	ldr	r1, [pc, #308]	; (d4b6c <loop+0x620>)
   d4a38:	a80e      	add	r0, sp, #56	; 0x38
   d4a3a:	f004 f8a7 	bl	d8b8c <_ZN6StringC1ERKS_>
   d4a3e:	2301      	movs	r3, #1
   d4a40:	461a      	mov	r2, r3
   d4a42:	a90e      	add	r1, sp, #56	; 0x38
   d4a44:	a80a      	add	r0, sp, #40	; 0x28
   d4a46:	f7ff fc99 	bl	d437c <_Z7logData6StringS_bb>
   d4a4a:	a80e      	add	r0, sp, #56	; 0x38
   d4a4c:	f004 f808 	bl	d8a60 <_ZN6StringD1Ev>
   d4a50:	a80a      	add	r0, sp, #40	; 0x28
   d4a52:	f004 f805 	bl	d8a60 <_ZN6StringD1Ev>
				logData("Battery state", powerBSString, true, true);
   d4a56:	494d      	ldr	r1, [pc, #308]	; (d4b8c <loop+0x640>)
   d4a58:	a80a      	add	r0, sp, #40	; 0x28
   d4a5a:	f004 f84c 	bl	d8af6 <_ZN6StringC1EPKc>
   d4a5e:	4945      	ldr	r1, [pc, #276]	; (d4b74 <loop+0x628>)
   d4a60:	a80e      	add	r0, sp, #56	; 0x38
   d4a62:	f004 f893 	bl	d8b8c <_ZN6StringC1ERKS_>
   d4a66:	2301      	movs	r3, #1
   d4a68:	461a      	mov	r2, r3
   d4a6a:	a90e      	add	r1, sp, #56	; 0x38
   d4a6c:	a80a      	add	r0, sp, #40	; 0x28
   d4a6e:	f7ff fc85 	bl	d437c <_Z7logData6StringS_bb>
   d4a72:	a80e      	add	r0, sp, #56	; 0x38
   d4a74:	f003 fff4 	bl	d8a60 <_ZN6StringD1Ev>
   d4a78:	a80a      	add	r0, sp, #40	; 0x28
   d4a7a:	f003 fff1 	bl	d8a60 <_ZN6StringD1Ev>
				logData("Battery charge", batterySocString, true, true);
   d4a7e:	4944      	ldr	r1, [pc, #272]	; (d4b90 <loop+0x644>)
   d4a80:	a80a      	add	r0, sp, #40	; 0x28
   d4a82:	f004 f838 	bl	d8af6 <_ZN6StringC1EPKc>
   d4a86:	493c      	ldr	r1, [pc, #240]	; (d4b78 <loop+0x62c>)
   d4a88:	a80e      	add	r0, sp, #56	; 0x38
   d4a8a:	f004 f87f 	bl	d8b8c <_ZN6StringC1ERKS_>
   d4a8e:	2301      	movs	r3, #1
   d4a90:	461a      	mov	r2, r3
   d4a92:	a90e      	add	r1, sp, #56	; 0x38
   d4a94:	a80a      	add	r0, sp, #40	; 0x28
   d4a96:	f7ff fc71 	bl	d437c <_Z7logData6StringS_bb>
   d4a9a:	a80e      	add	r0, sp, #56	; 0x38
   d4a9c:	f003 ffe0 	bl	d8a60 <_ZN6StringD1Ev>
   d4aa0:	a80a      	add	r0, sp, #40	; 0x28
   d4aa2:	f003 ffdd 	bl	d8a60 <_ZN6StringD1Ev>
				logData("Battery VCell", VCellString, true, true);
   d4aa6:	493b      	ldr	r1, [pc, #236]	; (d4b94 <loop+0x648>)
   d4aa8:	a80a      	add	r0, sp, #40	; 0x28
   d4aaa:	f004 f824 	bl	d8af6 <_ZN6StringC1EPKc>
   d4aae:	4934      	ldr	r1, [pc, #208]	; (d4b80 <loop+0x634>)
   d4ab0:	a80e      	add	r0, sp, #56	; 0x38
   d4ab2:	f004 f86b 	bl	d8b8c <_ZN6StringC1ERKS_>
   d4ab6:	2301      	movs	r3, #1
   d4ab8:	461a      	mov	r2, r3
   d4aba:	a90e      	add	r1, sp, #56	; 0x38
   d4abc:	a80a      	add	r0, sp, #40	; 0x28
   d4abe:	f7ff fc5d 	bl	d437c <_Z7logData6StringS_bb>
   d4ac2:	a80e      	add	r0, sp, #56	; 0x38
   d4ac4:	f003 ffcc 	bl	d8a60 <_ZN6StringD1Ev>
   d4ac8:	a80a      	add	r0, sp, #40	; 0x28
   d4aca:	f003 ffc9 	bl	d8a60 <_ZN6StringD1Ev>
				logData("Battery SoC", SoCString, true, true);
   d4ace:	4932      	ldr	r1, [pc, #200]	; (d4b98 <loop+0x64c>)
   d4ad0:	a80a      	add	r0, sp, #40	; 0x28
   d4ad2:	f004 f810 	bl	d8af6 <_ZN6StringC1EPKc>
   d4ad6:	492b      	ldr	r1, [pc, #172]	; (d4b84 <loop+0x638>)
   d4ad8:	a80e      	add	r0, sp, #56	; 0x38
   d4ada:	f004 f857 	bl	d8b8c <_ZN6StringC1ERKS_>
   d4ade:	2301      	movs	r3, #1
   d4ae0:	461a      	mov	r2, r3
   d4ae2:	a90e      	add	r1, sp, #56	; 0x38
   d4ae4:	a80a      	add	r0, sp, #40	; 0x28
   d4ae6:	f7ff fc49 	bl	d437c <_Z7logData6StringS_bb>
   d4aea:	a80e      	add	r0, sp, #56	; 0x38
   d4aec:	f003 ffb8 	bl	d8a60 <_ZN6StringD1Ev>
   d4af0:	a80a      	add	r0, sp, #40	; 0x28
   d4af2:	f003 ffb5 	bl	d8a60 <_ZN6StringD1Ev>
				feedName = "Garden-Lady-Bug-04-BATT";
   d4af6:	4929      	ldr	r1, [pc, #164]	; (d4b9c <loop+0x650>)
   d4af8:	480d      	ldr	r0, [pc, #52]	; (d4b30 <loop+0x5e4>)
   d4afa:	f004 f85a 	bl	d8bb2 <_ZN6StringaSEPKc>
				feedID = "UjkrHg96u4xRvT4uECcsENvwTqhu";
   d4afe:	4928      	ldr	r1, [pc, #160]	; (d4ba0 <loop+0x654>)
   d4b00:	480f      	ldr	r0, [pc, #60]	; (d4b40 <loop+0x5f4>)
   d4b02:	f004 f856 	bl	d8bb2 <_ZN6StringaSEPKc>
	StringSumHelper(const char *p) : String(p) {}
   d4b06:	490f      	ldr	r1, [pc, #60]	; (d4b44 <loop+0x5f8>)
   d4b08:	a80e      	add	r0, sp, #56	; 0x38
   d4b0a:	f003 fff4 	bl	d8af6 <_ZN6StringC1EPKc>
				feedData = "{ \"value\": \"" + VCellString + "\", \"feedID\": \"" + feedID + "\"}";
   d4b0e:	491c      	ldr	r1, [pc, #112]	; (d4b80 <loop+0x634>)
   d4b10:	a80e      	add	r0, sp, #56	; 0x38
   d4b12:	f004 f891 	bl	d8c38 <_ZplRK15StringSumHelperRK6String>
   d4b16:	490e      	ldr	r1, [pc, #56]	; (d4b50 <loop+0x604>)
   d4b18:	f004 f89a 	bl	d8c50 <_ZplRK15StringSumHelperPKc>
   d4b1c:	4908      	ldr	r1, [pc, #32]	; (d4b40 <loop+0x5f4>)
   d4b1e:	f004 f88b 	bl	d8c38 <_ZplRK15StringSumHelperRK6String>
   d4b22:	e03f      	b.n	d4ba4 <loop+0x658>
   d4b24:	2003e450 	.word	0x2003e450
   d4b28:	2003e49c 	.word	0x2003e49c
   d4b2c:	000daa1e 	.word	0x000daa1e
   d4b30:	2003e4d0 	.word	0x2003e4d0
   d4b34:	2003e584 	.word	0x2003e584
   d4b38:	2003e474 	.word	0x2003e474
   d4b3c:	000daa35 	.word	0x000daa35
   d4b40:	2003e4c0 	.word	0x2003e4c0
   d4b44:	000daa52 	.word	0x000daa52
   d4b48:	2003e5a8 	.word	0x2003e5a8
   d4b4c:	000daa5f 	.word	0x000daa5f
   d4b50:	000daa64 	.word	0x000daa64
   d4b54:	000daa73 	.word	0x000daa73
   d4b58:	2003e4b0 	.word	0x2003e4b0
   d4b5c:	000daa76 	.word	0x000daa76
   d4b60:	000daa98 	.word	0x000daa98
   d4b64:	000da952 	.word	0x000da952
   d4b68:	000dacb0 	.word	0x000dacb0
   d4b6c:	2003e574 	.word	0x2003e574
   d4b70:	000dacc8 	.word	0x000dacc8
   d4b74:	2003e564 	.word	0x2003e564
   d4b78:	2003e464 	.word	0x2003e464
   d4b7c:	2003e4f0 	.word	0x2003e4f0
   d4b80:	2003e438 	.word	0x2003e438
   d4b84:	2003e428 	.word	0x2003e428
   d4b88:	000daab5 	.word	0x000daab5
   d4b8c:	000daac3 	.word	0x000daac3
   d4b90:	000daad1 	.word	0x000daad1
   d4b94:	000daae0 	.word	0x000daae0
   d4b98:	000daaee 	.word	0x000daaee
   d4b9c:	000daafa 	.word	0x000daafa
   d4ba0:	000dab12 	.word	0x000dab12
   d4ba4:	49a9      	ldr	r1, [pc, #676]	; (d4e4c <loop+0x900>)
   d4ba6:	f004 f853 	bl	d8c50 <_ZplRK15StringSumHelperPKc>
   d4baa:	4601      	mov	r1, r0
   d4bac:	48a8      	ldr	r0, [pc, #672]	; (d4e50 <loop+0x904>)
   d4bae:	f003 ffde 	bl	d8b6e <_ZN6StringaSERKS_>
class StringSumHelper : public String
   d4bb2:	a80e      	add	r0, sp, #56	; 0x38
   d4bb4:	f003 ff54 	bl	d8a60 <_ZN6StringD1Ev>
				logData(feedName, feedData, false, true);    
   d4bb8:	49a6      	ldr	r1, [pc, #664]	; (d4e54 <loop+0x908>)
   d4bba:	a80a      	add	r0, sp, #40	; 0x28
   d4bbc:	f003 ffe6 	bl	d8b8c <_ZN6StringC1ERKS_>
   d4bc0:	49a3      	ldr	r1, [pc, #652]	; (d4e50 <loop+0x904>)
   d4bc2:	a80e      	add	r0, sp, #56	; 0x38
   d4bc4:	f003 ffe2 	bl	d8b8c <_ZN6StringC1ERKS_>
	if (tempLogParticle){
   d4bc8:	a90e      	add	r1, sp, #56	; 0x38
   d4bca:	a80a      	add	r0, sp, #40	; 0x28
   d4bcc:	f7ff fbaa 	bl	d4324 <_Z7logData6StringS_bb.part.0>
				logData(feedName, feedData, false, true);    
   d4bd0:	a80e      	add	r0, sp, #56	; 0x38
   d4bd2:	f003 ff45 	bl	d8a60 <_ZN6StringD1Ev>
   d4bd6:	a80a      	add	r0, sp, #40	; 0x28
   d4bd8:	f003 ff42 	bl	d8a60 <_ZN6StringD1Ev>
			logData("PUBLISH_STATE", "START SLEEP_WAIT_STATE", true, false);
   d4bdc:	499e      	ldr	r1, [pc, #632]	; (d4e58 <loop+0x90c>)
   d4bde:	a80a      	add	r0, sp, #40	; 0x28
   d4be0:	f003 ff89 	bl	d8af6 <_ZN6StringC1EPKc>
   d4be4:	499d      	ldr	r1, [pc, #628]	; (d4e5c <loop+0x910>)
   d4be6:	a80e      	add	r0, sp, #56	; 0x38
   d4be8:	f003 ff85 	bl	d8af6 <_ZN6StringC1EPKc>
   d4bec:	2300      	movs	r3, #0
   d4bee:	2201      	movs	r2, #1
   d4bf0:	a90e      	add	r1, sp, #56	; 0x38
   d4bf2:	a80a      	add	r0, sp, #40	; 0x28
   d4bf4:	f7ff fbc2 	bl	d437c <_Z7logData6StringS_bb>
   d4bf8:	a80e      	add	r0, sp, #56	; 0x38
   d4bfa:	f003 ff31 	bl	d8a60 <_ZN6StringD1Ev>
   d4bfe:	a80a      	add	r0, sp, #40	; 0x28
   d4c00:	f003 ff2e 	bl	d8a60 <_ZN6StringD1Ev>
			digitalWrite(BUILT_IN_LED, LOW);
   d4c04:	2100      	movs	r1, #0
   d4c06:	2007      	movs	r0, #7
   d4c08:	f004 fd2b 	bl	d9662 <digitalWrite>
   d4c0c:	f001 faa0 	bl	d6150 <HAL_Timer_Get_Milli_Seconds>
			stateTime = millis();
   d4c10:	4b93      	ldr	r3, [pc, #588]	; (d4e60 <loop+0x914>)
   d4c12:	6018      	str	r0, [r3, #0]
   d4c14:	e524      	b.n	d4660 <loop+0x114>
            val = n;
   d4c16:	4629      	mov	r1, r5
   d4c18:	e61c      	b.n	d4854 <loop+0x308>
   d4c1a:	4629      	mov	r1, r5
   d4c1c:	e62d      	b.n	d487a <loop+0x32e>
            return -1.0f;
   d4c1e:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
   d4c22:	e6dd      	b.n	d49e0 <loop+0x494>
			if(millis() - stateTime >= MAX_TIME_TO_WAIT_BEFORE_SLEEP_MS){
   d4c24:	4d8e      	ldr	r5, [pc, #568]	; (d4e60 <loop+0x914>)
   d4c26:	f001 fa93 	bl	d6150 <HAL_Timer_Get_Milli_Seconds>
   d4c2a:	682b      	ldr	r3, [r5, #0]
   d4c2c:	1ac0      	subs	r0, r0, r3
   d4c2e:	4b8d      	ldr	r3, [pc, #564]	; (d4e64 <loop+0x918>)
   d4c30:	4298      	cmp	r0, r3
   d4c32:	f67f ad41 	bls.w	d46b8 <loop+0x16c>
				logData("SLEEP", "GOING TO SLEEP", true, false);
   d4c36:	498c      	ldr	r1, [pc, #560]	; (d4e68 <loop+0x91c>)
   d4c38:	a80a      	add	r0, sp, #40	; 0x28
   d4c3a:	f003 ff5c 	bl	d8af6 <_ZN6StringC1EPKc>
   d4c3e:	498b      	ldr	r1, [pc, #556]	; (d4e6c <loop+0x920>)
   d4c40:	a80e      	add	r0, sp, #56	; 0x38
   d4c42:	f003 ff58 	bl	d8af6 <_ZN6StringC1EPKc>
   d4c46:	2300      	movs	r3, #0
   d4c48:	2201      	movs	r2, #1
   d4c4a:	a90e      	add	r1, sp, #56	; 0x38
   d4c4c:	a80a      	add	r0, sp, #40	; 0x28
   d4c4e:	f7ff fb95 	bl	d437c <_Z7logData6StringS_bb>
   d4c52:	a80e      	add	r0, sp, #56	; 0x38
   d4c54:	f003 ff04 	bl	d8a60 <_ZN6StringD1Ev>
   d4c58:	a80a      	add	r0, sp, #40	; 0x28
   d4c5a:	f003 ff01 	bl	d8a60 <_ZN6StringD1Ev>
   d4c5e:	f001 fa77 	bl	d6150 <HAL_Timer_Get_Milli_Seconds>
				state = SLEEP_STATE;
   d4c62:	2308      	movs	r3, #8
				stateTime = millis();
   d4c64:	6028      	str	r0, [r5, #0]
				state = SLEEP_STATE;
   d4c66:	e526      	b.n	d46b6 <loop+0x16a>
			if(!debug){
   d4c68:	4b81      	ldr	r3, [pc, #516]	; (d4e70 <loop+0x924>)
   d4c6a:	781d      	ldrb	r5, [r3, #0]
   d4c6c:	2d00      	cmp	r5, #0
   d4c6e:	f040 8131 	bne.w	d4ed4 <loop+0x988>
				logData("SLEEP", "SLEEP STOP SLEEP", true, false);
   d4c72:	497d      	ldr	r1, [pc, #500]	; (d4e68 <loop+0x91c>)
				pirState = 0;
   d4c74:	f8df 8220 	ldr.w	r8, [pc, #544]	; d4e98 <loop+0x94c>
				rtcState = 0;
   d4c78:	4f7e      	ldr	r7, [pc, #504]	; (d4e74 <loop+0x928>)
				logData("SLEEP", "SLEEP STOP SLEEP", true, false);
   d4c7a:	a80a      	add	r0, sp, #40	; 0x28
   d4c7c:	f003 ff3b 	bl	d8af6 <_ZN6StringC1EPKc>
   d4c80:	497d      	ldr	r1, [pc, #500]	; (d4e78 <loop+0x92c>)
   d4c82:	a80e      	add	r0, sp, #56	; 0x38
   d4c84:	f003 ff37 	bl	d8af6 <_ZN6StringC1EPKc>
   d4c88:	462b      	mov	r3, r5
   d4c8a:	2201      	movs	r2, #1
   d4c8c:	a90e      	add	r1, sp, #56	; 0x38
   d4c8e:	a80a      	add	r0, sp, #40	; 0x28
   d4c90:	f7ff fb74 	bl	d437c <_Z7logData6StringS_bb>
   d4c94:	a80e      	add	r0, sp, #56	; 0x38
   d4c96:	f003 fee3 	bl	d8a60 <_ZN6StringD1Ev>
   d4c9a:	a80a      	add	r0, sp, #40	; 0x28
   d4c9c:	f003 fee0 	bl	d8a60 <_ZN6StringD1Ev>
				fram.put(FRAM::pirAddr, pirState);
   d4ca0:	4642      	mov	r2, r8
   d4ca2:	2111      	movs	r1, #17
   d4ca4:	4875      	ldr	r0, [pc, #468]	; (d4e7c <loop+0x930>)
				pirState = 0;
   d4ca6:	f888 5000 	strb.w	r5, [r8]
				fram.put(FRAM::pirAddr, pirState);
   d4caa:	f7ff fbc2 	bl	d4432 <_ZN6MB85RC3putIhEERKT_jS3_>
				fram.put(FRAM::rtcAddr, rtcState);
   d4cae:	463a      	mov	r2, r7
   d4cb0:	2109      	movs	r1, #9
   d4cb2:	4872      	ldr	r0, [pc, #456]	; (d4e7c <loop+0x930>)
				rtcState = 0;
   d4cb4:	703d      	strb	r5, [r7, #0]
				fram.put(FRAM::rtcAddr, rtcState);
   d4cb6:	f7ff fbbc 	bl	d4432 <_ZN6MB85RC3putIhEERKT_jS3_>
				watchdogState = 0;
   d4cba:	4a71      	ldr	r2, [pc, #452]	; (d4e80 <loop+0x934>)
				fram.put(FRAM::watchdogAddr, watchdogState);
   d4cbc:	486f      	ldr	r0, [pc, #444]	; (d4e7c <loop+0x930>)
				watchdogState = 0;
   d4cbe:	7015      	strb	r5, [r2, #0]
				fram.put(FRAM::watchdogAddr, watchdogState);
   d4cc0:	2110      	movs	r1, #16
   d4cc2:	f7ff fbb6 	bl	d4432 <_ZN6MB85RC3putIhEERKT_jS3_>
        : config_(config) {
   d4cc6:	ab0f      	add	r3, sp, #60	; 0x3c
              valid_(true) {
   d4cc8:	2201      	movs	r2, #1
        : config_(config) {
   d4cca:	930e      	str	r3, [sp, #56]	; 0x38
					.gpio(PIRPin, RISING)
   d4ccc:	2113      	movs	r1, #19
        config_.size = sizeof(hal_sleep_config_t);
   d4cce:	4b6d      	ldr	r3, [pc, #436]	; (d4e84 <loop+0x938>)
   d4cd0:	930f      	str	r3, [sp, #60]	; 0x3c
   d4cd2:	a80e      	add	r0, sp, #56	; 0x38
        config_.wakeup_sources = nullptr;
   d4cd4:	e9cd 5511 	strd	r5, r5, [sp, #68]	; 0x44
              valid_(true) {
   d4cd8:	f8ad 5041 	strh.w	r5, [sp, #65]	; 0x41
   d4cdc:	f88d 5043 	strb.w	r5, [sp, #67]	; 0x43
   d4ce0:	f88d 204c 	strb.w	r2, [sp, #76]	; 0x4c
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
   d4ce4:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
   d4ce8:	f7ff fa2c 	bl	d4144 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode>

    SystemSleepConfiguration& duration(system_tick_t ms) {
        if (valid_) {
   d4cec:	7d03      	ldrb	r3, [r0, #20]
   d4cee:	4606      	mov	r6, r0
   d4cf0:	b1eb      	cbz	r3, d4d2e <loop+0x7e2>
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   d4cf2:	6803      	ldr	r3, [r0, #0]
   d4cf4:	68db      	ldr	r3, [r3, #12]
        if (!start) {
   d4cf6:	b12b      	cbz	r3, d4d04 <loop+0x7b8>
            if (start->type == type) {
   d4cf8:	889a      	ldrh	r2, [r3, #4]
   d4cfa:	2a04      	cmp	r2, #4
   d4cfc:	f000 810e 	beq.w	d4f1c <loop+0x9d0>
            start = start->next;
   d4d00:	689b      	ldr	r3, [r3, #8]
        while (start) {
   d4d02:	e7f8      	b.n	d4cf6 <loop+0x7aa>
            if (wakeup) {
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
                return *this;
            }
            // Otherwise, configure RTC as wakeup source.
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
   d4d04:	4960      	ldr	r1, [pc, #384]	; (d4e88 <loop+0x93c>)
   d4d06:	2010      	movs	r0, #16
   d4d08:	f004 fd6e 	bl	d97e8 <_ZnwjRKSt9nothrow_t>
   d4d0c:	4605      	mov	r5, r0
   d4d0e:	2800      	cmp	r0, #0
   d4d10:	f000 8102 	beq.w	d4f18 <loop+0x9cc>
   d4d14:	2210      	movs	r2, #16
   d4d16:	2100      	movs	r1, #0
   d4d18:	f005 fc68 	bl	da5ec <memset>
            if (!wakeupSource) {
                valid_ = false;
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_rtc_t);
   d4d1c:	4b59      	ldr	r3, [pc, #356]	; (d4e84 <loop+0x938>)
   d4d1e:	602b      	str	r3, [r5, #0]
            wakeupSource->base.version = HAL_SLEEP_VERSION;
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_RTC;
   d4d20:	2304      	movs	r3, #4
   d4d22:	80ab      	strh	r3, [r5, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   d4d24:	6933      	ldr	r3, [r6, #16]
   d4d26:	60ab      	str	r3, [r5, #8]
            wakeupSource->ms = ms;
   d4d28:	4b58      	ldr	r3, [pc, #352]	; (d4e8c <loop+0x940>)
   d4d2a:	60eb      	str	r3, [r5, #12]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   d4d2c:	6135      	str	r5, [r6, #16]
				SystemSleepResult result = System.sleep(config);
   d4d2e:	a90e      	add	r1, sp, #56	; 0x38
   d4d30:	a803      	add	r0, sp, #12
   d4d32:	f004 f801 	bl	d8d38 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>
				digitalWrite(PIRPin, LOW);												// Pet the watchdog
   d4d36:	2100      	movs	r1, #0
   d4d38:	2013      	movs	r0, #19
   d4d3a:	f004 fc92 	bl	d9662 <digitalWrite>
				if (result.wakeupReason() == SystemSleepWakeupReason::BY_GPIO) {
   d4d3e:	9b03      	ldr	r3, [sp, #12]
        if (wakeupSource_) {
   d4d40:	b32b      	cbz	r3, d4d8e <loop+0x842>
   d4d42:	889d      	ldrh	r5, [r3, #4]
   d4d44:	2d01      	cmp	r5, #1
   d4d46:	d122      	bne.n	d4d8e <loop+0x842>
					if(whichPin == A0){
   d4d48:	899b      	ldrh	r3, [r3, #12]
						logData("SLEEP RESULT", "Woke By BY_GPIO PIR", true, false);
   d4d4a:	4951      	ldr	r1, [pc, #324]	; (d4e90 <loop+0x944>)
					if(whichPin == A0){
   d4d4c:	2b13      	cmp	r3, #19
						logData("SLEEP RESULT", "Woke By BY_GPIO PIR", true, false);
   d4d4e:	a806      	add	r0, sp, #24
					if(whichPin == A0){
   d4d50:	f040 80aa 	bne.w	d4ea8 <loop+0x95c>
						logData("SLEEP RESULT", "Woke By BY_GPIO PIR", true, false);
   d4d54:	f003 fecf 	bl	d8af6 <_ZN6StringC1EPKc>
   d4d58:	494e      	ldr	r1, [pc, #312]	; (d4e94 <loop+0x948>)
   d4d5a:	a80a      	add	r0, sp, #40	; 0x28
   d4d5c:	f003 fecb 	bl	d8af6 <_ZN6StringC1EPKc>
   d4d60:	462a      	mov	r2, r5
   d4d62:	2300      	movs	r3, #0
   d4d64:	a90a      	add	r1, sp, #40	; 0x28
   d4d66:	a806      	add	r0, sp, #24
   d4d68:	f7ff fb08 	bl	d437c <_Z7logData6StringS_bb>
   d4d6c:	a80a      	add	r0, sp, #40	; 0x28
   d4d6e:	f003 fe77 	bl	d8a60 <_ZN6StringD1Ev>
   d4d72:	a806      	add	r0, sp, #24
   d4d74:	f003 fe74 	bl	d8a60 <_ZN6StringD1Ev>
						digitalWrite(BUILT_IN_LED, HIGH);
   d4d78:	4629      	mov	r1, r5
   d4d7a:	2007      	movs	r0, #7
   d4d7c:	f004 fc71 	bl	d9662 <digitalWrite>
						fram.put(FRAM::pirAddr, pirState);
   d4d80:	4a45      	ldr	r2, [pc, #276]	; (d4e98 <loop+0x94c>)
						pirState = 1;
   d4d82:	f888 5000 	strb.w	r5, [r8]
						fram.put(FRAM::pirAddr, pirState);
   d4d86:	2111      	movs	r1, #17
						fram.put(FRAM::rtcAddr, rtcState);
   d4d88:	483c      	ldr	r0, [pc, #240]	; (d4e7c <loop+0x930>)
   d4d8a:	f7ff fb52 	bl	d4432 <_ZN6MB85RC3putIhEERKT_jS3_>
				if (result.wakeupReason() == SystemSleepWakeupReason::BY_RTC) {
   d4d8e:	9b03      	ldr	r3, [sp, #12]
   d4d90:	b1b3      	cbz	r3, d4dc0 <loop+0x874>
   d4d92:	889b      	ldrh	r3, [r3, #4]
   d4d94:	2b04      	cmp	r3, #4
   d4d96:	d113      	bne.n	d4dc0 <loop+0x874>
					logData("SLEEP RESULT", "SLEEP RESULT - Woke BY_RTC", true, false);
   d4d98:	493d      	ldr	r1, [pc, #244]	; (d4e90 <loop+0x944>)
   d4d9a:	a806      	add	r0, sp, #24
   d4d9c:	f003 feab 	bl	d8af6 <_ZN6StringC1EPKc>
   d4da0:	493e      	ldr	r1, [pc, #248]	; (d4e9c <loop+0x950>)
   d4da2:	a80a      	add	r0, sp, #40	; 0x28
   d4da4:	f003 fea7 	bl	d8af6 <_ZN6StringC1EPKc>
   d4da8:	2300      	movs	r3, #0
   d4daa:	2201      	movs	r2, #1
   d4dac:	a90a      	add	r1, sp, #40	; 0x28
   d4dae:	a806      	add	r0, sp, #24
   d4db0:	f7ff fae4 	bl	d437c <_Z7logData6StringS_bb>
   d4db4:	a80a      	add	r0, sp, #40	; 0x28
   d4db6:	f003 fe53 	bl	d8a60 <_ZN6StringD1Ev>
   d4dba:	a806      	add	r0, sp, #24
   d4dbc:	f003 fe50 	bl	d8a60 <_ZN6StringD1Ev>
				if (result.wakeupReason() == SystemSleepWakeupReason::BY_NETWORK) {
   d4dc0:	9b03      	ldr	r3, [sp, #12]
   d4dc2:	b1b3      	cbz	r3, d4df2 <loop+0x8a6>
   d4dc4:	889b      	ldrh	r3, [r3, #4]
   d4dc6:	2b0e      	cmp	r3, #14
   d4dc8:	d113      	bne.n	d4df2 <loop+0x8a6>
					logData("SLEEP RESULT", "SLEEP RESULT - Woke BY_NETWORK", true, false);
   d4dca:	4931      	ldr	r1, [pc, #196]	; (d4e90 <loop+0x944>)
   d4dcc:	a806      	add	r0, sp, #24
   d4dce:	f003 fe92 	bl	d8af6 <_ZN6StringC1EPKc>
   d4dd2:	4933      	ldr	r1, [pc, #204]	; (d4ea0 <loop+0x954>)
   d4dd4:	a80a      	add	r0, sp, #40	; 0x28
   d4dd6:	f003 fe8e 	bl	d8af6 <_ZN6StringC1EPKc>
   d4dda:	2300      	movs	r3, #0
   d4ddc:	2201      	movs	r2, #1
   d4dde:	a90a      	add	r1, sp, #40	; 0x28
   d4de0:	a806      	add	r0, sp, #24
   d4de2:	f7ff facb 	bl	d437c <_Z7logData6StringS_bb>
   d4de6:	a80a      	add	r0, sp, #40	; 0x28
   d4de8:	f003 fe3a 	bl	d8a60 <_ZN6StringD1Ev>
   d4dec:	a806      	add	r0, sp, #24
   d4dee:	f003 fe37 	bl	d8a60 <_ZN6StringD1Ev>
				if (result.wakeupReason() == SystemSleepWakeupReason::UNKNOWN) {
   d4df2:	9b03      	ldr	r3, [sp, #12]
   d4df4:	b10b      	cbz	r3, d4dfa <loop+0x8ae>
   d4df6:	889b      	ldrh	r3, [r3, #4]
   d4df8:	b99b      	cbnz	r3, d4e22 <loop+0x8d6>
					logData("SLEEP RESULT", "SLEEP RESULT - Woke By UNKNOWN", true, false);
   d4dfa:	4925      	ldr	r1, [pc, #148]	; (d4e90 <loop+0x944>)
   d4dfc:	a806      	add	r0, sp, #24
   d4dfe:	f003 fe7a 	bl	d8af6 <_ZN6StringC1EPKc>
   d4e02:	4928      	ldr	r1, [pc, #160]	; (d4ea4 <loop+0x958>)
   d4e04:	a80a      	add	r0, sp, #40	; 0x28
   d4e06:	f003 fe76 	bl	d8af6 <_ZN6StringC1EPKc>
   d4e0a:	2300      	movs	r3, #0
   d4e0c:	2201      	movs	r2, #1
   d4e0e:	a90a      	add	r1, sp, #40	; 0x28
   d4e10:	a806      	add	r0, sp, #24
   d4e12:	f7ff fab3 	bl	d437c <_Z7logData6StringS_bb>
   d4e16:	a80a      	add	r0, sp, #40	; 0x28
   d4e18:	f003 fe22 	bl	d8a60 <_ZN6StringD1Ev>
   d4e1c:	a806      	add	r0, sp, #24
   d4e1e:	f003 fe1f 	bl	d8a60 <_ZN6StringD1Ev>
   d4e22:	f001 f995 	bl	d6150 <HAL_Timer_Get_Milli_Seconds>
				stateTime = millis();
   d4e26:	4b0e      	ldr	r3, [pc, #56]	; (d4e60 <loop+0x914>)
   d4e28:	6018      	str	r0, [r3, #0]
        if (wakeupSource_) {
   d4e2a:	9803      	ldr	r0, [sp, #12]
				state = PARTICLE_CONNECT_WAIT_STATE;
   d4e2c:	2302      	movs	r3, #2
   d4e2e:	7023      	strb	r3, [r4, #0]
   d4e30:	b108      	cbz	r0, d4e36 <loop+0x8ea>
            free(wakeupSource_);
   d4e32:	f001 fc5f 	bl	d66f4 <free>
        auto wakeupSource = config_.wakeup_sources;
   d4e36:	9812      	ldr	r0, [sp, #72]	; 0x48
        while (wakeupSource) {
   d4e38:	2800      	cmp	r0, #0
   d4e3a:	f43f ac3d 	beq.w	d46b8 <loop+0x16c>
            auto next = wakeupSource->next;
   d4e3e:	6884      	ldr	r4, [r0, #8]
            delete wakeupSource;
   d4e40:	210c      	movs	r1, #12
   d4e42:	f004 fccf 	bl	d97e4 <_ZdlPvj>
            wakeupSource = next;
   d4e46:	4620      	mov	r0, r4
        while (wakeupSource) {
   d4e48:	e7f6      	b.n	d4e38 <loop+0x8ec>
   d4e4a:	bf00      	nop
   d4e4c:	000daa73 	.word	0x000daa73
   d4e50:	2003e4b0 	.word	0x2003e4b0
   d4e54:	2003e4d0 	.word	0x2003e4d0
   d4e58:	000daa10 	.word	0x000daa10
   d4e5c:	000dab2f 	.word	0x000dab2f
   d4e60:	2003e5b4 	.word	0x2003e5b4
   d4e64:	0001d4bf 	.word	0x0001d4bf
   d4e68:	000dabf3 	.word	0x000dabf3
   d4e6c:	000dab46 	.word	0x000dab46
   d4e70:	2003e498 	.word	0x2003e498
   d4e74:	2003e5a4 	.word	0x2003e5a4
   d4e78:	000dab55 	.word	0x000dab55
   d4e7c:	2003e4e0 	.word	0x2003e4e0
   d4e80:	2003e5e0 	.word	0x2003e5e0
   d4e84:	00030010 	.word	0x00030010
   d4e88:	000db0fc 	.word	0x000db0fc
   d4e8c:	001b7740 	.word	0x001b7740
   d4e90:	000da971 	.word	0x000da971
   d4e94:	000dab66 	.word	0x000dab66
   d4e98:	2003e560 	.word	0x2003e560
   d4e9c:	000dab8e 	.word	0x000dab8e
   d4ea0:	000daba9 	.word	0x000daba9
   d4ea4:	000dabc8 	.word	0x000dabc8
						logData("SLEEP RESULT", "Woke By BY_GPIO RTC", true, false);
   d4ea8:	f003 fe25 	bl	d8af6 <_ZN6StringC1EPKc>
   d4eac:	491d      	ldr	r1, [pc, #116]	; (d4f24 <loop+0x9d8>)
   d4eae:	a80a      	add	r0, sp, #40	; 0x28
   d4eb0:	f003 fe21 	bl	d8af6 <_ZN6StringC1EPKc>
   d4eb4:	462a      	mov	r2, r5
   d4eb6:	a90a      	add	r1, sp, #40	; 0x28
   d4eb8:	2300      	movs	r3, #0
   d4eba:	a806      	add	r0, sp, #24
   d4ebc:	f7ff fa5e 	bl	d437c <_Z7logData6StringS_bb>
   d4ec0:	a80a      	add	r0, sp, #40	; 0x28
   d4ec2:	f003 fdcd 	bl	d8a60 <_ZN6StringD1Ev>
   d4ec6:	a806      	add	r0, sp, #24
   d4ec8:	f003 fdca 	bl	d8a60 <_ZN6StringD1Ev>
						fram.put(FRAM::rtcAddr, rtcState);
   d4ecc:	4a16      	ldr	r2, [pc, #88]	; (d4f28 <loop+0x9dc>)
						rtcState = 1;
   d4ece:	703d      	strb	r5, [r7, #0]
						fram.put(FRAM::rtcAddr, rtcState);
   d4ed0:	2109      	movs	r1, #9
   d4ed2:	e759      	b.n	d4d88 <loop+0x83c>
				if(millis() - stateTime >= MAX_TIME_TO_SLEEP_MS){
   d4ed4:	4d15      	ldr	r5, [pc, #84]	; (d4f2c <loop+0x9e0>)
   d4ed6:	f001 f93b 	bl	d6150 <HAL_Timer_Get_Milli_Seconds>
   d4eda:	682b      	ldr	r3, [r5, #0]
   d4edc:	1ac0      	subs	r0, r0, r3
   d4ede:	4b14      	ldr	r3, [pc, #80]	; (d4f30 <loop+0x9e4>)
   d4ee0:	4298      	cmp	r0, r3
   d4ee2:	f4ff abe9 	bcc.w	d46b8 <loop+0x16c>
					logData("SLEEP", "SLEEP TIMED SLEEP", true, false);
   d4ee6:	4913      	ldr	r1, [pc, #76]	; (d4f34 <loop+0x9e8>)
   d4ee8:	a80a      	add	r0, sp, #40	; 0x28
   d4eea:	f003 fe04 	bl	d8af6 <_ZN6StringC1EPKc>
   d4eee:	4912      	ldr	r1, [pc, #72]	; (d4f38 <loop+0x9ec>)
   d4ef0:	a80e      	add	r0, sp, #56	; 0x38
   d4ef2:	f003 fe00 	bl	d8af6 <_ZN6StringC1EPKc>
   d4ef6:	2300      	movs	r3, #0
   d4ef8:	2201      	movs	r2, #1
   d4efa:	a90e      	add	r1, sp, #56	; 0x38
   d4efc:	a80a      	add	r0, sp, #40	; 0x28
   d4efe:	f7ff fa3d 	bl	d437c <_Z7logData6StringS_bb>
   d4f02:	a80e      	add	r0, sp, #56	; 0x38
   d4f04:	f003 fdac 	bl	d8a60 <_ZN6StringD1Ev>
   d4f08:	a80a      	add	r0, sp, #40	; 0x28
   d4f0a:	f003 fda9 	bl	d8a60 <_ZN6StringD1Ev>
   d4f0e:	f001 f91f 	bl	d6150 <HAL_Timer_Get_Milli_Seconds>
					stateTime = millis();
   d4f12:	6028      	str	r0, [r5, #0]
   d4f14:	f7ff bb63 	b.w	d45de <loop+0x92>
                valid_ = false;
   d4f18:	7530      	strb	r0, [r6, #20]
                return *this;
   d4f1a:	e708      	b.n	d4d2e <loop+0x7e2>
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
   d4f1c:	4a07      	ldr	r2, [pc, #28]	; (d4f3c <loop+0x9f0>)
   d4f1e:	60da      	str	r2, [r3, #12]
                return *this;
   d4f20:	e705      	b.n	d4d2e <loop+0x7e2>
   d4f22:	bf00      	nop
   d4f24:	000dab7a 	.word	0x000dab7a
   d4f28:	2003e5a4 	.word	0x2003e5a4
   d4f2c:	2003e5b4 	.word	0x2003e5b4
   d4f30:	002932e0 	.word	0x002932e0
   d4f34:	000dabf3 	.word	0x000dabf3
   d4f38:	000dabe7 	.word	0x000dabe7
   d4f3c:	001b7740 	.word	0x001b7740

000d4f40 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   d4f40:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d4f42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4f44:	4604      	mov	r4, r0
   d4f46:	460d      	mov	r5, r1
   d4f48:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   d4f4a:	d916      	bls.n	d4f7a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
   d4f4c:	4290      	cmp	r0, r2
   d4f4e:	d215      	bcs.n	d4f7c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
   d4f50:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   d4f54:	1a75      	subs	r5, r6, r1
   d4f56:	f1a1 0714 	sub.w	r7, r1, #20
   d4f5a:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   d4f5c:	42b7      	cmp	r7, r6
   d4f5e:	d01c      	beq.n	d4f9a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
   d4f60:	b12c      	cbz	r4, d4f6e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
   d4f62:	4631      	mov	r1, r6
   d4f64:	4620      	mov	r0, r4
   d4f66:	f003 fdf7 	bl	d8b58 <_ZN6StringC1EOS_>
   d4f6a:	7c33      	ldrb	r3, [r6, #16]
   d4f6c:	7423      	strb	r3, [r4, #16]
   d4f6e:	4630      	mov	r0, r6
   d4f70:	f003 fd76 	bl	d8a60 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   d4f74:	3e14      	subs	r6, #20
   d4f76:	3c14      	subs	r4, #20
   d4f78:	e7f0      	b.n	d4f5c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   d4f7a:	d00e      	beq.n	d4f9a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
   d4f7c:	42b5      	cmp	r5, r6
   d4f7e:	d00c      	beq.n	d4f9a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
   d4f80:	b12c      	cbz	r4, d4f8e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
   d4f82:	4629      	mov	r1, r5
   d4f84:	4620      	mov	r0, r4
   d4f86:	f003 fde7 	bl	d8b58 <_ZN6StringC1EOS_>
   d4f8a:	7c2b      	ldrb	r3, [r5, #16]
   d4f8c:	7423      	strb	r3, [r4, #16]
   d4f8e:	4628      	mov	r0, r5
   d4f90:	f003 fd66 	bl	d8a60 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   d4f94:	3514      	adds	r5, #20
   d4f96:	3414      	adds	r4, #20
   d4f98:	e7f0      	b.n	d4f7c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
   d4f9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4f9c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d4f9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   d4fa0:	2300      	movs	r3, #0
   d4fa2:	e9c0 3300 	strd	r3, r3, [r0]
   d4fa6:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d4fa8:	684f      	ldr	r7, [r1, #4]
   d4faa:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d4fac:	4604      	mov	r4, r0
   d4fae:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d4fb0:	dd23      	ble.n	d4ffa <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   d4fb2:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
   d4fb6:	fb08 f007 	mul.w	r0, r8, r7
   d4fba:	f001 fb93 	bl	d66e4 <malloc>
            if (!d) {
   d4fbe:	4605      	mov	r5, r0
   d4fc0:	b1d8      	cbz	r0, d4ffa <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            move(d, data_, data_ + size_);
   d4fc2:	e9d4 1200 	ldrd	r1, r2, [r4]
   d4fc6:	fb08 1202 	mla	r2, r8, r2, r1
   d4fca:	f7ff ffb9 	bl	d4f40 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   d4fce:	6820      	ldr	r0, [r4, #0]
   d4fd0:	f001 fb90 	bl	d66f4 <free>
        data_ = d;
   d4fd4:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   d4fd6:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   d4fd8:	e9d6 7300 	ldrd	r7, r3, [r6]
   d4fdc:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
   d4fe0:	45b8      	cmp	r8, r7
   d4fe2:	d008      	beq.n	d4ff6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5a>
   d4fe4:	4639      	mov	r1, r7
   d4fe6:	4628      	mov	r0, r5
   d4fe8:	f003 fdd0 	bl	d8b8c <_ZN6StringC1ERKS_>
   d4fec:	7c3b      	ldrb	r3, [r7, #16]
   d4fee:	742b      	strb	r3, [r5, #16]
   d4ff0:	3714      	adds	r7, #20
   d4ff2:	3514      	adds	r5, #20
   d4ff4:	e7f4      	b.n	d4fe0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
   d4ff6:	6873      	ldr	r3, [r6, #4]
   d4ff8:	6063      	str	r3, [r4, #4]
}
   d4ffa:	4620      	mov	r0, r4
   d4ffc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d5000 <_GLOBAL__sub_I_logHandler>:
		digitalWrite(ANTSW1, 0);
	#else
		digitalWrite(ANTSW1, 0);
		digitalWrite(ANTSW2, 1);
	#endif
   d5000:	b5f0      	push	{r4, r5, r6, r7, lr}
        val_(val) {
   d5002:	4b5a      	ldr	r3, [pc, #360]	; (d516c <_GLOBAL__sub_I_logHandler+0x16c>)
        filter_(level, filters) {
   d5004:	4c5a      	ldr	r4, [pc, #360]	; (d5170 <_GLOBAL__sub_I_logHandler+0x170>)
   d5006:	b08d      	sub	sp, #52	; 0x34
   d5008:	2001      	movs	r0, #1
        capacity_(0) {
   d500a:	2500      	movs	r5, #0
   d500c:	7018      	strb	r0, [r3, #0]
SYSTEM_THREAD(ENABLED)
   d500e:	2100      	movs	r1, #0
   d5010:	f001 fa78 	bl	d6504 <system_thread_set_state>
   d5014:	e9cd 5500 	strd	r5, r5, [sp]
   d5018:	9502      	str	r5, [sp, #8]
            StreamLogHandler(Serial, level, filters) {
   d501a:	f004 f9bd 	bl	d9398 <_Z16_fetch_usbserialv>
   d501e:	4669      	mov	r1, sp
   d5020:	4606      	mov	r6, r0
   d5022:	a803      	add	r0, sp, #12
   d5024:	f7ff ffba 	bl	d4f9c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d5028:	4627      	mov	r7, r4
        stream_(&stream) {
   d502a:	a903      	add	r1, sp, #12
   d502c:	a806      	add	r0, sp, #24
   d502e:	f7ff ffb5 	bl	d4f9c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   d5032:	4b50      	ldr	r3, [pc, #320]	; (d5174 <_GLOBAL__sub_I_logHandler+0x174>)
   d5034:	f847 3b04 	str.w	r3, [r7], #4
   d5038:	a906      	add	r1, sp, #24
   d503a:	a809      	add	r0, sp, #36	; 0x24
   d503c:	f7ff ffae 	bl	d4f9c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d5040:	aa09      	add	r2, sp, #36	; 0x24
   d5042:	211e      	movs	r1, #30
   d5044:	4638      	mov	r0, r7
   d5046:	f002 ffaa 	bl	d7f9e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d504a:	a809      	add	r0, sp, #36	; 0x24
   d504c:	f7ff f9de 	bl	d440c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   d5050:	a806      	add	r0, sp, #24
   d5052:	f7ff f9db 	bl	d440c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d5056:	4b48      	ldr	r3, [pc, #288]	; (d5178 <_GLOBAL__sub_I_logHandler+0x178>)
   d5058:	6023      	str	r3, [r4, #0]
   d505a:	6226      	str	r6, [r4, #32]
   d505c:	a803      	add	r0, sp, #12
   d505e:	f7ff f9d5 	bl	d440c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d5062:	4b46      	ldr	r3, [pc, #280]	; (d517c <_GLOBAL__sub_I_logHandler+0x17c>)
   d5064:	6023      	str	r3, [r4, #0]
        Serial.begin();
   d5066:	f004 f997 	bl	d9398 <_Z16_fetch_usbserialv>
   d506a:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d506e:	f004 f983 	bl	d9378 <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
   d5072:	f002 fc39 	bl	d78e8 <_ZN5spark10LogManager8instanceEv>
   d5076:	4621      	mov	r1, r4
   d5078:	f002 ff23 	bl	d7ec2 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler logHandler;
   d507c:	4668      	mov	r0, sp
   d507e:	f7ff f9c5 	bl	d440c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
#include "spark_protocol_functions.h"


struct __ApplicationProductID {
    __ApplicationProductID(product_id_t id) {
        spark_protocol_set_product_id(spark_protocol_instance(), id);
   d5082:	f004 fa87 	bl	d9594 <spark_protocol_instance>
   d5086:	462b      	mov	r3, r5
   d5088:	462a      	mov	r2, r5
   d508a:	f643 41a6 	movw	r1, #15526	; 0x3ca6
   d508e:	f004 fa89 	bl	d95a4 <spark_protocol_set_product_id>
    }
};

struct __ApplicationProductVersion {
    __ApplicationProductVersion(product_firmware_version_t version) {
        spark_protocol_set_product_firmware_version(spark_protocol_instance(), version);
   d5092:	f004 fa7f 	bl	d9594 <spark_protocol_instance>
   d5096:	462b      	mov	r3, r5
   d5098:	462a      	mov	r2, r5
   d509a:	2105      	movs	r1, #5
   d509c:	f004 fa8a 	bl	d95b4 <spark_protocol_set_product_firmware_version>
MCP79410 rtc;											// Rickkas MCP79410 libarary
   d50a0:	f004 fb58 	bl	d9754 <_Z19__fetch_global_Wirev>
   d50a4:	4601      	mov	r1, r0
   d50a6:	4836      	ldr	r0, [pc, #216]	; (d5180 <_GLOBAL__sub_I_logHandler+0x180>)
	 *
	 * @param addr The address 0-7 based on the setting of A0, A1 and A2.
	 *
	 * You typically create one of these objects as a global variable.
	 */
	MB85RC64(TwoWire &wire, int addr = 0) : MB85RC(wire, 8192, addr) {};
   d50a8:	4c36      	ldr	r4, [pc, #216]	; (d5184 <_GLOBAL__sub_I_logHandler+0x184>)
   d50aa:	f000 fae3 	bl	d5674 <_ZN8MCP79410C1ER7TwoWire>
MB85RC64 fram(Wire, 0);
   d50ae:	f004 fb51 	bl	d9754 <_Z19__fetch_global_Wirev>
   d50b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   d50b6:	4601      	mov	r1, r0
   d50b8:	462b      	mov	r3, r5
   d50ba:	4620      	mov	r0, r4
   d50bc:	f000 f89c 	bl	d51f8 <_ZN6MB85RCC1ER7TwoWireji>
   d50c0:	4b31      	ldr	r3, [pc, #196]	; (d5188 <_GLOBAL__sub_I_logHandler+0x188>)
   d50c2:	6023      	str	r3, [r4, #0]
String analogValueString = "0";
   d50c4:	4931      	ldr	r1, [pc, #196]	; (d518c <_GLOBAL__sub_I_logHandler+0x18c>)
   d50c6:	4832      	ldr	r0, [pc, #200]	; (d5190 <_GLOBAL__sub_I_logHandler+0x190>)
String getInputVoltageLimit;
   d50c8:	4c32      	ldr	r4, [pc, #200]	; (d5194 <_GLOBAL__sub_I_logHandler+0x194>)
String analogValueString = "0";
   d50ca:	f003 fd14 	bl	d8af6 <_ZN6StringC1EPKc>
String digitalValueString = "0";
   d50ce:	492f      	ldr	r1, [pc, #188]	; (d518c <_GLOBAL__sub_I_logHandler+0x18c>)
   d50d0:	4831      	ldr	r0, [pc, #196]	; (d5198 <_GLOBAL__sub_I_logHandler+0x198>)
   d50d2:	f003 fd10 	bl	d8af6 <_ZN6StringC1EPKc>
String temperatureStringC = "0";
   d50d6:	492d      	ldr	r1, [pc, #180]	; (d518c <_GLOBAL__sub_I_logHandler+0x18c>)
   d50d8:	4830      	ldr	r0, [pc, #192]	; (d519c <_GLOBAL__sub_I_logHandler+0x19c>)
   d50da:	f003 fd0c 	bl	d8af6 <_ZN6StringC1EPKc>
String temperatureStringF = "0";
   d50de:	492b      	ldr	r1, [pc, #172]	; (d518c <_GLOBAL__sub_I_logHandler+0x18c>)
   d50e0:	482f      	ldr	r0, [pc, #188]	; (d51a0 <_GLOBAL__sub_I_logHandler+0x1a0>)
   d50e2:	f003 fd08 	bl	d8af6 <_ZN6StringC1EPKc>
String getInputVoltageLimit;
   d50e6:	4621      	mov	r1, r4
   d50e8:	482e      	ldr	r0, [pc, #184]	; (d51a4 <_GLOBAL__sub_I_logHandler+0x1a4>)
   d50ea:	f003 fd04 	bl	d8af6 <_ZN6StringC1EPKc>
String getInputCurrentLimit;
   d50ee:	4621      	mov	r1, r4
   d50f0:	482d      	ldr	r0, [pc, #180]	; (d51a8 <_GLOBAL__sub_I_logHandler+0x1a8>)
   d50f2:	f003 fd00 	bl	d8af6 <_ZN6StringC1EPKc>
String getChargeCurrentValue;
   d50f6:	4621      	mov	r1, r4
   d50f8:	482c      	ldr	r0, [pc, #176]	; (d51ac <_GLOBAL__sub_I_logHandler+0x1ac>)
   d50fa:	f003 fcfc 	bl	d8af6 <_ZN6StringC1EPKc>
String getChargeVoltageValue;
   d50fe:	4621      	mov	r1, r4
   d5100:	482b      	ldr	r0, [pc, #172]	; (d51b0 <_GLOBAL__sub_I_logHandler+0x1b0>)
   d5102:	f003 fcf8 	bl	d8af6 <_ZN6StringC1EPKc>
String feedName;
   d5106:	4621      	mov	r1, r4
   d5108:	482a      	ldr	r0, [pc, #168]	; (d51b4 <_GLOBAL__sub_I_logHandler+0x1b4>)
   d510a:	f003 fcf4 	bl	d8af6 <_ZN6StringC1EPKc>
String feedID;
   d510e:	4621      	mov	r1, r4
   d5110:	4829      	ldr	r0, [pc, #164]	; (d51b8 <_GLOBAL__sub_I_logHandler+0x1b8>)
   d5112:	f003 fcf0 	bl	d8af6 <_ZN6StringC1EPKc>
String feedData;
   d5116:	4621      	mov	r1, r4
   d5118:	4828      	ldr	r0, [pc, #160]	; (d51bc <_GLOBAL__sub_I_logHandler+0x1bc>)
   d511a:	f003 fcec 	bl	d8af6 <_ZN6StringC1EPKc>
String powerSString;
   d511e:	4621      	mov	r1, r4
   d5120:	4827      	ldr	r0, [pc, #156]	; (d51c0 <_GLOBAL__sub_I_logHandler+0x1c0>)
   d5122:	f003 fce8 	bl	d8af6 <_ZN6StringC1EPKc>
String powerBSString;
   d5126:	4621      	mov	r1, r4
   d5128:	4826      	ldr	r0, [pc, #152]	; (d51c4 <_GLOBAL__sub_I_logHandler+0x1c4>)
   d512a:	f003 fce4 	bl	d8af6 <_ZN6StringC1EPKc>
String batterySocString;
   d512e:	4621      	mov	r1, r4
   d5130:	4825      	ldr	r0, [pc, #148]	; (d51c8 <_GLOBAL__sub_I_logHandler+0x1c8>)
   d5132:	f003 fce0 	bl	d8af6 <_ZN6StringC1EPKc>
PMIC pmic;
   d5136:	4629      	mov	r1, r5
   d5138:	4824      	ldr	r0, [pc, #144]	; (d51cc <_GLOBAL__sub_I_logHandler+0x1cc>)
   d513a:	f003 fb02 	bl	d8742 <_ZN4PMICC1Eb>
            : conf_{} {
   d513e:	4b24      	ldr	r3, [pc, #144]	; (d51d0 <_GLOBAL__sub_I_logHandler+0x1d0>)
   d5140:	2620      	movs	r6, #32
   d5142:	4632      	mov	r2, r6
   d5144:	4618      	mov	r0, r3
   d5146:	4629      	mov	r1, r5
   d5148:	f005 fa50 	bl	da5ec <memset>
FuelGauge fuel;
   d514c:	4629      	mov	r1, r5
        conf_.size = sizeof(conf_);
   d514e:	7146      	strb	r6, [r0, #5]
   d5150:	4820      	ldr	r0, [pc, #128]	; (d51d4 <_GLOBAL__sub_I_logHandler+0x1d4>)
   d5152:	f001 fecb 	bl	d6eec <_ZN9FuelGaugeC1Eb>
String VCellString;
   d5156:	4621      	mov	r1, r4
   d5158:	481f      	ldr	r0, [pc, #124]	; (d51d8 <_GLOBAL__sub_I_logHandler+0x1d8>)
   d515a:	f003 fccc 	bl	d8af6 <_ZN6StringC1EPKc>
String SoCString;
   d515e:	4621      	mov	r1, r4
   d5160:	481e      	ldr	r0, [pc, #120]	; (d51dc <_GLOBAL__sub_I_logHandler+0x1dc>)
   d5162:	f003 fcc8 	bl	d8af6 <_ZN6StringC1EPKc>
   d5166:	b00d      	add	sp, #52	; 0x34
   d5168:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d516a:	bf00      	nop
   d516c:	2003e448 	.word	0x2003e448
   d5170:	2003e538 	.word	0x2003e538
   d5174:	000dac04 	.word	0x000dac04
   d5178:	000dafb0 	.word	0x000dafb0
   d517c:	000dac1c 	.word	0x000dac1c
   d5180:	2003e588 	.word	0x2003e588
   d5184:	2003e4e0 	.word	0x2003e4e0
   d5188:	000dac34 	.word	0x000dac34
   d518c:	000da9e6 	.word	0x000da9e6
   d5190:	2003e454 	.word	0x2003e454
   d5194:	000daf7b 	.word	0x000daf7b
   d5198:	2003e4a0 	.word	0x2003e4a0
   d519c:	2003e5c0 	.word	0x2003e5c0
   d51a0:	2003e5d0 	.word	0x2003e5d0
   d51a4:	2003e528 	.word	0x2003e528
   d51a8:	2003e518 	.word	0x2003e518
   d51ac:	2003e4f8 	.word	0x2003e4f8
   d51b0:	2003e508 	.word	0x2003e508
   d51b4:	2003e4d0 	.word	0x2003e4d0
   d51b8:	2003e4c0 	.word	0x2003e4c0
   d51bc:	2003e4b0 	.word	0x2003e4b0
   d51c0:	2003e574 	.word	0x2003e574
   d51c4:	2003e564 	.word	0x2003e564
   d51c8:	2003e464 	.word	0x2003e464
   d51cc:	2003e561 	.word	0x2003e561
   d51d0:	2003e478 	.word	0x2003e478
   d51d4:	2003e4f0 	.word	0x2003e4f0
   d51d8:	2003e438 	.word	0x2003e438
   d51dc:	2003e428 	.word	0x2003e428

000d51e0 <_ZN6MB85RCD1Ev>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
	wire(wire), memorySize(memorySize), addr(addr) {
}

MB85RC::~MB85RC() {
}
   d51e0:	4770      	bx	lr

000d51e2 <_ZN6MB85RCD0Ev>:
MB85RC::~MB85RC() {
   d51e2:	b510      	push	{r4, lr}
}
   d51e4:	2110      	movs	r1, #16
MB85RC::~MB85RC() {
   d51e6:	4604      	mov	r4, r0
}
   d51e8:	f004 fafc 	bl	d97e4 <_ZdlPvj>
   d51ec:	4620      	mov	r0, r4
   d51ee:	bd10      	pop	{r4, pc}

000d51f0 <_ZN7TwoWire5writeEj>:
  bool lock();
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
   d51f0:	6803      	ldr	r3, [r0, #0]
   d51f2:	b2c9      	uxtb	r1, r1
   d51f4:	689b      	ldr	r3, [r3, #8]
   d51f6:	4718      	bx	r3

000d51f8 <_ZN6MB85RCC1ER7TwoWireji>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
   d51f8:	b530      	push	{r4, r5, lr}
	wire(wire), memorySize(memorySize), addr(addr) {
   d51fa:	4d03      	ldr	r5, [pc, #12]	; (d5208 <_ZN6MB85RCC1ER7TwoWireji+0x10>)
   d51fc:	e9c0 2302 	strd	r2, r3, [r0, #8]
   d5200:	e9c0 5100 	strd	r5, r1, [r0]
}
   d5204:	bd30      	pop	{r4, r5, pc}
   d5206:	bf00      	nop
   d5208:	000dacec 	.word	0x000dacec

000d520c <_ZN6MB85RC5beginEv>:

void MB85RC::begin() {
	wire.begin();
   d520c:	6840      	ldr	r0, [r0, #4]
   d520e:	f001 bf3f 	b.w	d7090 <_ZN7TwoWire5beginEv>

000d5212 <_ZNSt10lock_guardIR7TwoWireED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   d5212:	b510      	push	{r4, lr}
   d5214:	4604      	mov	r4, r0
      { _M_device.unlock(); }
   d5216:	6800      	ldr	r0, [r0, #0]
   d5218:	f001 ff99 	bl	d714e <_ZN7TwoWire6unlockEv>
   d521c:	4620      	mov	r0, r4
   d521e:	bd10      	pop	{r4, pc}

000d5220 <_ZN6MB85RC8readDataEjPhj>:

	return true;
}


bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   d5220:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d5224:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   d5226:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d5228:	9001      	str	r0, [sp, #4]
bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   d522a:	460d      	mov	r5, r1
   d522c:	4616      	mov	r6, r2
   d522e:	461f      	mov	r7, r3
      { _M_device.lock(); }
   d5230:	f001 ff84 	bl	d713c <_ZN7TwoWire4lockEv>

		while(dataLen > 0) {
   d5234:	b1a7      	cbz	r7, d5260 <_ZN6MB85RC8readDataEjPhj+0x40>
			wire.beginTransmission(addr | DEVICE_ADDR);
   d5236:	68e1      	ldr	r1, [r4, #12]
   d5238:	6860      	ldr	r0, [r4, #4]
   d523a:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d523e:	f001 ff5a 	bl	d70f6 <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   d5242:	0a29      	lsrs	r1, r5, #8
   d5244:	6860      	ldr	r0, [r4, #4]
   d5246:	f7ff ffd3 	bl	d51f0 <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   d524a:	4629      	mov	r1, r5
   d524c:	6860      	ldr	r0, [r4, #4]
   d524e:	f7ff ffcf 	bl	d51f0 <_ZN7TwoWire5writeEj>
			int stat = wire.endTransmission(false);
   d5252:	6860      	ldr	r0, [r4, #4]
   d5254:	2100      	movs	r1, #0
   d5256:	f001 ff69 	bl	d712c <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   d525a:	b148      	cbz	r0, d5270 <_ZN6MB85RC8readDataEjPhj+0x50>
				//Serial.printlnf("read set address failed %d", stat);
				result = false;
   d525c:	2400      	movs	r4, #0
   d525e:	e000      	b.n	d5262 <_ZN6MB85RC8readDataEjPhj+0x42>
   d5260:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
   d5262:	a801      	add	r0, sp, #4
   d5264:	f7ff ffd5 	bl	d5212 <_ZNSt10lock_guardIR7TwoWireED1Ev>
				dataLen--;
			}
		}
	}
	return result;
}
   d5268:	4620      	mov	r0, r4
   d526a:	b003      	add	sp, #12
   d526c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			if (bytesToRead > 32) {
   d5270:	2f20      	cmp	r7, #32
			wire.requestFrom((uint8_t)(addr | DEVICE_ADDR), bytesToRead, (uint8_t) true);
   d5272:	7b21      	ldrb	r1, [r4, #12]
   d5274:	6860      	ldr	r0, [r4, #4]
   d5276:	46b8      	mov	r8, r7
   d5278:	bf28      	it	cs
   d527a:	f04f 0820 	movcs.w	r8, #32
   d527e:	2301      	movs	r3, #1
   d5280:	4642      	mov	r2, r8
   d5282:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d5286:	f001 ff20 	bl	d70ca <_ZN7TwoWire11requestFromEhjh>
			if (Wire.available() < (int) bytesToRead) {
   d528a:	f004 fa63 	bl	d9754 <_Z19__fetch_global_Wirev>
   d528e:	6803      	ldr	r3, [r0, #0]
   d5290:	691b      	ldr	r3, [r3, #16]
   d5292:	4798      	blx	r3
   d5294:	4540      	cmp	r0, r8
   d5296:	dbe1      	blt.n	d525c <_ZN6MB85RC8readDataEjPhj+0x3c>
   d5298:	eb06 0908 	add.w	r9, r6, r8
				*data++ = Wire.read();    // receive a byte as character
   d529c:	f004 fa5a 	bl	d9754 <_Z19__fetch_global_Wirev>
   d52a0:	6803      	ldr	r3, [r0, #0]
   d52a2:	695b      	ldr	r3, [r3, #20]
   d52a4:	4798      	blx	r3
   d52a6:	f806 0b01 	strb.w	r0, [r6], #1
			for(size_t ii = 0; ii < bytesToRead; ii++) {
   d52aa:	454e      	cmp	r6, r9
   d52ac:	d1f6      	bne.n	d529c <_ZN6MB85RC8readDataEjPhj+0x7c>
   d52ae:	4445      	add	r5, r8
   d52b0:	eba7 0708 	sub.w	r7, r7, r8
   d52b4:	e7be      	b.n	d5234 <_ZN6MB85RC8readDataEjPhj+0x14>

000d52b6 <_ZN6MB85RC9writeDataEjPKhj>:


bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   d52b6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d52ba:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   d52bc:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d52be:	9001      	str	r0, [sp, #4]
bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   d52c0:	460e      	mov	r6, r1
   d52c2:	4690      	mov	r8, r2
   d52c4:	461d      	mov	r5, r3
      { _M_device.lock(); }
   d52c6:	f001 ff39 	bl	d713c <_ZN7TwoWire4lockEv>
   d52ca:	f04f 0901 	mov.w	r9, #1
	WITH_LOCK(wire) {
   d52ce:	f1b9 0f00 	cmp.w	r9, #0
   d52d2:	d02a      	beq.n	d532a <_ZN6MB85RC9writeDataEjPKhj+0x74>
		while(dataLen > 0) {
   d52d4:	b34d      	cbz	r5, d532a <_ZN6MB85RC9writeDataEjPKhj+0x74>
			wire.beginTransmission(addr | DEVICE_ADDR);
   d52d6:	68e1      	ldr	r1, [r4, #12]
   d52d8:	6860      	ldr	r0, [r4, #4]
   d52da:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d52de:	f001 ff0a 	bl	d70f6 <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   d52e2:	0a31      	lsrs	r1, r6, #8
   d52e4:	6860      	ldr	r0, [r4, #4]
   d52e6:	f7ff ff83 	bl	d51f0 <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   d52ea:	6860      	ldr	r0, [r4, #4]
   d52ec:	4631      	mov	r1, r6
   d52ee:	f7ff ff7f 	bl	d51f0 <_ZN7TwoWire5writeEj>

			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   d52f2:	f1a5 0a1e 	sub.w	sl, r5, #30
			wire.write(framAddr);
   d52f6:	4647      	mov	r7, r8
   d52f8:	eba6 0b08 	sub.w	fp, r6, r8
				wire.write(*data);
   d52fc:	6860      	ldr	r0, [r4, #4]
   d52fe:	f817 1b01 	ldrb.w	r1, [r7], #1
   d5302:	6803      	ldr	r3, [r0, #0]
				framAddr++;
				data++;
				dataLen--;
   d5304:	3d01      	subs	r5, #1
				wire.write(*data);
   d5306:	689b      	ldr	r3, [r3, #8]
   d5308:	4798      	blx	r3
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   d530a:	4555      	cmp	r5, sl
   d530c:	eb0b 0607 	add.w	r6, fp, r7
				data++;
   d5310:	46b8      	mov	r8, r7
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   d5312:	d001      	beq.n	d5318 <_ZN6MB85RC9writeDataEjPKhj+0x62>
   d5314:	2d00      	cmp	r5, #0
   d5316:	d1f1      	bne.n	d52fc <_ZN6MB85RC9writeDataEjPKhj+0x46>
			}

			int stat = wire.endTransmission(true);
   d5318:	6860      	ldr	r0, [r4, #4]
   d531a:	2101      	movs	r1, #1
   d531c:	f001 ff06 	bl	d712c <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   d5320:	2800      	cmp	r0, #0
   d5322:	d0d7      	beq.n	d52d4 <_ZN6MB85RC9writeDataEjPKhj+0x1e>
				//Serial.printlnf("write failed %d", stat);
				result = false;
   d5324:	f04f 0900 	mov.w	r9, #0
   d5328:	e7d1      	b.n	d52ce <_ZN6MB85RC9writeDataEjPKhj+0x18>
	WITH_LOCK(wire) {
   d532a:	a801      	add	r0, sp, #4
   d532c:	f7ff ff71 	bl	d5212 <_ZNSt10lock_guardIR7TwoWireED1Ev>
				break;
			}
		}
	}
	return result;
}
   d5330:	4648      	mov	r0, r9
   d5332:	b003      	add	sp, #12
   d5334:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d5338 <_ZN6MB85RC8moveDataEjjj>:


bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   d5338:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d533c:	b08b      	sub	sp, #44	; 0x2c
   d533e:	460e      	mov	r6, r1
   d5340:	4615      	mov	r5, r2
   d5342:	4680      	mov	r8, r0
	bool result = true;

	// Maximum number of bytes we can write is 30
	uint8_t buf[30];

	WITH_LOCK(wire) {
   d5344:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d5346:	9001      	str	r0, [sp, #4]
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   d5348:	461c      	mov	r4, r3
      { _M_device.lock(); }
   d534a:	f001 fef7 	bl	d713c <_ZN7TwoWire4lockEv>
		if (framAddrFrom < framAddrTo) {
   d534e:	42ae      	cmp	r6, r5
   d5350:	d229      	bcs.n	d53a6 <_ZN6MB85RC8moveDataEjjj+0x6e>
			// Moving to a higher address - copy from the end of the from buffer
			framAddrFrom += numBytes;
   d5352:	4426      	add	r6, r4
			framAddrTo += numBytes;
   d5354:	4425      	add	r5, r4
			while(numBytes > 0) {
   d5356:	b18c      	cbz	r4, d537c <_ZN6MB85RC8moveDataEjjj+0x44>
				size_t count = numBytes;
				if (count > sizeof(buf)) {
   d5358:	2c1e      	cmp	r4, #30
   d535a:	4627      	mov	r7, r4
					count = sizeof(buf);
				}
				framAddrFrom -= count;
				framAddrTo -= count;

				result = readData(framAddrFrom, buf, count);
   d535c:	f8d8 3000 	ldr.w	r3, [r8]
   d5360:	bf28      	it	cs
   d5362:	271e      	movcs	r7, #30
				framAddrFrom -= count;
   d5364:	1bf6      	subs	r6, r6, r7
				result = readData(framAddrFrom, buf, count);
   d5366:	f8d3 9008 	ldr.w	r9, [r3, #8]
   d536a:	aa02      	add	r2, sp, #8
   d536c:	463b      	mov	r3, r7
   d536e:	4631      	mov	r1, r6
   d5370:	4640      	mov	r0, r8
				framAddrTo -= count;
   d5372:	1bed      	subs	r5, r5, r7
				result = readData(framAddrFrom, buf, count);
   d5374:	47c8      	blx	r9
				if (!result) {
   d5376:	b948      	cbnz	r0, d538c <_ZN6MB85RC8moveDataEjjj+0x54>
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   d5378:	2400      	movs	r4, #0
   d537a:	e000      	b.n	d537e <_ZN6MB85RC8moveDataEjjj+0x46>
   d537c:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
   d537e:	a801      	add	r0, sp, #4
   d5380:	f7ff ff47 	bl	d5212 <_ZNSt10lock_guardIR7TwoWireED1Ev>
				numBytes -= count;
			}
		}
	}
	return result;
}
   d5384:	4620      	mov	r0, r4
   d5386:	b00b      	add	sp, #44	; 0x2c
   d5388:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				result = writeData(framAddrTo, buf, count);
   d538c:	f8d8 3000 	ldr.w	r3, [r8]
   d5390:	aa02      	add	r2, sp, #8
   d5392:	f8d3 900c 	ldr.w	r9, [r3, #12]
   d5396:	4629      	mov	r1, r5
   d5398:	463b      	mov	r3, r7
   d539a:	4640      	mov	r0, r8
   d539c:	47c8      	blx	r9
				if (!result) {
   d539e:	2800      	cmp	r0, #0
   d53a0:	d0ea      	beq.n	d5378 <_ZN6MB85RC8moveDataEjjj+0x40>
				numBytes -= count;
   d53a2:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
   d53a4:	e7d7      	b.n	d5356 <_ZN6MB85RC8moveDataEjjj+0x1e>
		if (framAddrFrom > framAddrTo) {
   d53a6:	d9e9      	bls.n	d537c <_ZN6MB85RC8moveDataEjjj+0x44>
			while(numBytes > 0) {
   d53a8:	2c00      	cmp	r4, #0
   d53aa:	d0e7      	beq.n	d537c <_ZN6MB85RC8moveDataEjjj+0x44>
				result = readData(framAddrFrom, buf, count);
   d53ac:	f8d8 3000 	ldr.w	r3, [r8]
   d53b0:	2c1e      	cmp	r4, #30
   d53b2:	4627      	mov	r7, r4
   d53b4:	bf28      	it	cs
   d53b6:	271e      	movcs	r7, #30
   d53b8:	f8d3 9008 	ldr.w	r9, [r3, #8]
   d53bc:	aa02      	add	r2, sp, #8
   d53be:	463b      	mov	r3, r7
   d53c0:	4631      	mov	r1, r6
   d53c2:	4640      	mov	r0, r8
   d53c4:	47c8      	blx	r9
				if (!result) {
   d53c6:	2800      	cmp	r0, #0
   d53c8:	d0d6      	beq.n	d5378 <_ZN6MB85RC8moveDataEjjj+0x40>
				result = writeData(framAddrTo, buf, count);
   d53ca:	f8d8 3000 	ldr.w	r3, [r8]
   d53ce:	aa02      	add	r2, sp, #8
   d53d0:	f8d3 900c 	ldr.w	r9, [r3, #12]
   d53d4:	4629      	mov	r1, r5
   d53d6:	463b      	mov	r3, r7
   d53d8:	4640      	mov	r0, r8
   d53da:	47c8      	blx	r9
				if (!result) {
   d53dc:	2800      	cmp	r0, #0
   d53de:	d0cb      	beq.n	d5378 <_ZN6MB85RC8moveDataEjjj+0x40>
				framAddrFrom += count;
   d53e0:	443e      	add	r6, r7
				framAddrTo += count;
   d53e2:	443d      	add	r5, r7
				numBytes -= count;
   d53e4:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
   d53e6:	e7df      	b.n	d53a8 <_ZN6MB85RC8moveDataEjjj+0x70>

000d53e8 <_ZNK12MCP79410SRAM6lengthEv>:
	virtual ~MCP79410SRAM();

	/**
	 * @brief Returns the length (64)
	 */
	virtual size_t length() const { return 64; };
   d53e8:	2040      	movs	r0, #64	; 0x40
   d53ea:	4770      	bx	lr

000d53ec <_ZNK12MCP79410SRAM10eraseValueEv>:
	/**
	 * @brief Erase erases to 0
	 *
	 * Note that on cold power up, the values are random, not zero!
	 */
	virtual uint8_t eraseValue() const { return 0; };
   d53ec:	2000      	movs	r0, #0
   d53ee:	4770      	bx	lr

000d53f0 <_ZNK14MCP79410EEPROM6lengthEv>:
	bool protectedBlockRead(uint8_t *buf);

	/**
	 * @brief Returns the length (128)
	 */
	virtual size_t length() const { return 128; };
   d53f0:	2080      	movs	r0, #128	; 0x80
   d53f2:	4770      	bx	lr

000d53f4 <_ZNK14MCP79410EEPROM10eraseValueEv>:

	/**
	 * @brief Erased value is 0xff.
	 */
	virtual uint8_t eraseValue() const { return 0xff; };
   d53f4:	20ff      	movs	r0, #255	; 0xff
   d53f6:	4770      	bx	lr

000d53f8 <_ZN12MCP79410SRAMD1Ev>:

}

MCP79410SRAM::~MCP79410SRAM() {

}
   d53f8:	4770      	bx	lr

000d53fa <_ZN14MCP79410EEPROMD1Ev>:

}

MCP79410EEPROM::~MCP79410EEPROM() {

}
   d53fa:	4770      	bx	lr

000d53fc <_ZN12MCP79410TimeD1Ev>:
	clear();
}

MCP79410Time::~MCP79410Time() {

}
   d53fc:	4770      	bx	lr

000d53fe <_ZN8MCP79410D1Ev>:
}


MCP79410::~MCP79410() {

}
   d53fe:	4770      	bx	lr

000d5400 <_ZN12MCP79410TimeD0Ev>:
MCP79410Time::~MCP79410Time() {
   d5400:	b510      	push	{r4, lr}
}
   d5402:	2114      	movs	r1, #20
MCP79410Time::~MCP79410Time() {
   d5404:	4604      	mov	r4, r0
}
   d5406:	f004 f9ed 	bl	d97e4 <_ZdlPvj>
   d540a:	4620      	mov	r0, r4
   d540c:	bd10      	pop	{r4, pc}

000d540e <_ZN12MCP79410SRAMD0Ev>:
MCP79410SRAM::~MCP79410SRAM() {
   d540e:	b510      	push	{r4, lr}
}
   d5410:	2108      	movs	r1, #8
MCP79410SRAM::~MCP79410SRAM() {
   d5412:	4604      	mov	r4, r0
}
   d5414:	f004 f9e6 	bl	d97e4 <_ZdlPvj>
   d5418:	4620      	mov	r0, r4
   d541a:	bd10      	pop	{r4, pc}

000d541c <_ZN14MCP79410EEPROMD0Ev>:
MCP79410EEPROM::~MCP79410EEPROM() {
   d541c:	b510      	push	{r4, lr}
}
   d541e:	2108      	movs	r1, #8
MCP79410EEPROM::~MCP79410EEPROM() {
   d5420:	4604      	mov	r4, r0
}
   d5422:	f004 f9df 	bl	d97e4 <_ZdlPvj>
   d5426:	4620      	mov	r0, r4
   d5428:	bd10      	pop	{r4, pc}

000d542a <_ZN8MCP79410D0Ev>:
MCP79410::~MCP79410() {
   d542a:	b510      	push	{r4, lr}
}
   d542c:	211c      	movs	r1, #28
MCP79410::~MCP79410() {
   d542e:	4604      	mov	r4, r0
}
   d5430:	f004 f9d8 	bl	d97e4 <_ZdlPvj>
   d5434:	4620      	mov	r0, r4
   d5436:	bd10      	pop	{r4, pc}

000d5438 <_ZN18MCP79410MemoryBase5eraseEv>:
bool MCP79410MemoryBase::erase() {
   d5438:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	memset(buf, eraseValue(), sizeof(buf));
   d543c:	6803      	ldr	r3, [r0, #0]
   d543e:	68db      	ldr	r3, [r3, #12]
bool MCP79410MemoryBase::erase() {
   d5440:	4604      	mov	r4, r0
	memset(buf, eraseValue(), sizeof(buf));
   d5442:	4798      	blx	r3
   d5444:	2210      	movs	r2, #16
   d5446:	4601      	mov	r1, r0
   d5448:	4668      	mov	r0, sp
   d544a:	f005 f8cf 	bl	da5ec <memset>
	size_t len = length();
   d544e:	6823      	ldr	r3, [r4, #0]
   d5450:	4620      	mov	r0, r4
   d5452:	689b      	ldr	r3, [r3, #8]
   d5454:	4798      	blx	r3
	size_t offset = 0;
   d5456:	2500      	movs	r5, #0
	size_t len = length();
   d5458:	4607      	mov	r7, r0
	bool bResult = false;
   d545a:	4628      	mov	r0, r5
	while(offset < len) {
   d545c:	42bd      	cmp	r5, r7
   d545e:	d20e      	bcs.n	d547e <_ZN18MCP79410MemoryBase5eraseEv+0x46>
		if (count > (len - offset)) {
   d5460:	1b7e      	subs	r6, r7, r5
		bResult = writeData(offset, buf, count);
   d5462:	6823      	ldr	r3, [r4, #0]
		size_t count = sizeof(buf);
   d5464:	2e10      	cmp	r6, #16
   d5466:	bf28      	it	cs
   d5468:	2610      	movcs	r6, #16
		bResult = writeData(offset, buf, count);
   d546a:	f8d3 8018 	ldr.w	r8, [r3, #24]
   d546e:	466a      	mov	r2, sp
   d5470:	4633      	mov	r3, r6
   d5472:	4629      	mov	r1, r5
   d5474:	4620      	mov	r0, r4
   d5476:	47c0      	blx	r8
		if (!bResult) {
   d5478:	b108      	cbz	r0, d547e <_ZN18MCP79410MemoryBase5eraseEv+0x46>
		offset += count;
   d547a:	4435      	add	r5, r6
	while(offset < len) {
   d547c:	e7ee      	b.n	d545c <_ZN18MCP79410MemoryBase5eraseEv+0x24>
}
   d547e:	b004      	add	sp, #16
   d5480:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d5484 <_ZN12MCP79410Time5clearEv>:
	rawYear = 0;
   d5484:	f44f 7380 	mov.w	r3, #256	; 0x100
   d5488:	8143      	strh	r3, [r0, #10]
	rawDayOfMonth = 1;
   d548a:	f240 1301 	movw	r3, #257	; 0x101
   d548e:	60c3      	str	r3, [r0, #12]
	rawSecond = 0;
   d5490:	2300      	movs	r3, #0
   d5492:	8203      	strh	r3, [r0, #16]
}
   d5494:	4770      	bx	lr
	...

000d5498 <_ZN12MCP79410TimeC1Ev>:
MCP79410Time::MCP79410Time() {
   d5498:	b508      	push	{r3, lr}
   d549a:	4b06      	ldr	r3, [pc, #24]	; (d54b4 <_ZN12MCP79410TimeC1Ev+0x1c>)
   d549c:	6003      	str	r3, [r0, #0]
   d549e:	4b06      	ldr	r3, [pc, #24]	; (d54b8 <_ZN12MCP79410TimeC1Ev+0x20>)
   d54a0:	6043      	str	r3, [r0, #4]
   d54a2:	f240 7304 	movw	r3, #1796	; 0x704
   d54a6:	8103      	strh	r3, [r0, #8]
   d54a8:	2300      	movs	r3, #0
   d54aa:	7443      	strb	r3, [r0, #17]
	clear();
   d54ac:	f7ff ffea 	bl	d5484 <_ZN12MCP79410Time5clearEv>
}
   d54b0:	bd08      	pop	{r3, pc}
   d54b2:	bf00      	nop
   d54b4:	000dadcc 	.word	0x000dadcc
   d54b8:	03020100 	.word	0x03020100

000d54bc <_ZN12MCP79410Time8bcdToIntEh>:
	return ((value >> 4) & 0xf) * 10 + (value & 0xf);
   d54bc:	0903      	lsrs	r3, r0, #4
}
   d54be:	220a      	movs	r2, #10
	return ((value >> 4) & 0xf) * 10 + (value & 0xf);
   d54c0:	f000 000f 	and.w	r0, r0, #15
}
   d54c4:	fb02 0003 	mla	r0, r2, r3, r0
   d54c8:	4770      	bx	lr

000d54ca <_ZNK12MCP79410Time7getYearEv>:
int MCP79410Time::getYear() const {
   d54ca:	b508      	push	{r3, lr}
	return bcdToInt(rawYear) + 2000;
   d54cc:	7a80      	ldrb	r0, [r0, #10]
   d54ce:	f7ff fff5 	bl	d54bc <_ZN12MCP79410Time8bcdToIntEh>
}
   d54d2:	f500 60fa 	add.w	r0, r0, #2000	; 0x7d0
   d54d6:	bd08      	pop	{r3, pc}

000d54d8 <_ZNK12MCP79410Time8getMonthEv>:
	return bcdToInt(rawMonth & 0x1f);
   d54d8:	7ac0      	ldrb	r0, [r0, #11]
   d54da:	f000 001f 	and.w	r0, r0, #31
   d54de:	f7ff bfed 	b.w	d54bc <_ZN12MCP79410Time8bcdToIntEh>

000d54e2 <_ZNK12MCP79410Time13getDayOfMonthEv>:
	return bcdToInt(rawDayOfMonth & 0x3f);
   d54e2:	7b00      	ldrb	r0, [r0, #12]
   d54e4:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   d54e8:	f7ff bfe8 	b.w	d54bc <_ZN12MCP79410Time8bcdToIntEh>

000d54ec <_ZNK12MCP79410Time7getHourEv>:
int MCP79410Time::getHour() const {
   d54ec:	b508      	push	{r3, lr}
	if (rawHour & 0x40) {
   d54ee:	7b81      	ldrb	r1, [r0, #14]
   d54f0:	064a      	lsls	r2, r1, #25
   d54f2:	d50d      	bpl.n	d5510 <_ZNK12MCP79410Time7getHourEv+0x24>
		int hour12 = bcdToInt(rawHour & 0x1f);
   d54f4:	f001 001f 	and.w	r0, r1, #31
   d54f8:	f7ff ffe0 	bl	d54bc <_ZN12MCP79410Time8bcdToIntEh>
		if (rawHour & 0x20) {
   d54fc:	068b      	lsls	r3, r1, #26
   d54fe:	d503      	bpl.n	d5508 <_ZNK12MCP79410Time7getHourEv+0x1c>
			if (hour12 == 12) {
   d5500:	280c      	cmp	r0, #12
   d5502:	d000      	beq.n	d5506 <_ZNK12MCP79410Time7getHourEv+0x1a>
				return hour12 + 12;
   d5504:	300c      	adds	r0, #12
}
   d5506:	bd08      	pop	{r3, pc}
				return 0;
   d5508:	280c      	cmp	r0, #12
   d550a:	bf08      	it	eq
   d550c:	2000      	moveq	r0, #0
   d550e:	e7fa      	b.n	d5506 <_ZNK12MCP79410Time7getHourEv+0x1a>
}
   d5510:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		return bcdToInt(rawHour & 0x3f);
   d5514:	f001 003f 	and.w	r0, r1, #63	; 0x3f
   d5518:	f7ff bfd0 	b.w	d54bc <_ZN12MCP79410Time8bcdToIntEh>

000d551c <_ZNK12MCP79410Time9getMinuteEv>:
	return bcdToInt(rawMinute & 0x7f);
   d551c:	7bc0      	ldrb	r0, [r0, #15]
   d551e:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   d5522:	f7ff bfcb 	b.w	d54bc <_ZN12MCP79410Time8bcdToIntEh>

000d5526 <_ZNK12MCP79410Time9getSecondEv>:
	return bcdToInt(rawSecond & 0x7f);
   d5526:	7c00      	ldrb	r0, [r0, #16]
   d5528:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   d552c:	f7ff bfc6 	b.w	d54bc <_ZN12MCP79410Time8bcdToIntEh>

000d5530 <_ZNK12MCP79410Time10toUnixTimeEv>:
time_t MCP79410Time::toUnixTime() const {
   d5530:	b510      	push	{r4, lr}
   d5532:	b08a      	sub	sp, #40	; 0x28
	memset(&tm, 0, sizeof(struct tm));
   d5534:	2224      	movs	r2, #36	; 0x24
time_t MCP79410Time::toUnixTime() const {
   d5536:	4604      	mov	r4, r0
	memset(&tm, 0, sizeof(struct tm));
   d5538:	2100      	movs	r1, #0
   d553a:	a801      	add	r0, sp, #4
   d553c:	f005 f856 	bl	da5ec <memset>
	tm.tm_year = getYear() - 1900; // tm_year is years since 1900
   d5540:	4620      	mov	r0, r4
   d5542:	f7ff ffc2 	bl	d54ca <_ZNK12MCP79410Time7getYearEv>
   d5546:	f2a0 706c 	subw	r0, r0, #1900	; 0x76c
   d554a:	9006      	str	r0, [sp, #24]
	tm.tm_mon = getMonth() - 1; // tm_mon is 0-11!
   d554c:	4620      	mov	r0, r4
   d554e:	f7ff ffc3 	bl	d54d8 <_ZNK12MCP79410Time8getMonthEv>
   d5552:	3801      	subs	r0, #1
   d5554:	9005      	str	r0, [sp, #20]
	tm.tm_mday = getDayOfMonth(); // 1-31
   d5556:	4620      	mov	r0, r4
   d5558:	f7ff ffc3 	bl	d54e2 <_ZNK12MCP79410Time13getDayOfMonthEv>
   d555c:	9004      	str	r0, [sp, #16]
	tm.tm_hour = getHour();
   d555e:	4620      	mov	r0, r4
   d5560:	f7ff ffc4 	bl	d54ec <_ZNK12MCP79410Time7getHourEv>
   d5564:	9003      	str	r0, [sp, #12]
	tm.tm_min = getMinute();
   d5566:	4620      	mov	r0, r4
   d5568:	f7ff ffd8 	bl	d551c <_ZNK12MCP79410Time9getMinuteEv>
   d556c:	9002      	str	r0, [sp, #8]
	tm.tm_sec = getSecond();
   d556e:	4620      	mov	r0, r4
   d5570:	f7ff ffd9 	bl	d5526 <_ZNK12MCP79410Time9getSecondEv>
   d5574:	9001      	str	r0, [sp, #4]
	return mktime(&tm);
   d5576:	a801      	add	r0, sp, #4
   d5578:	f001 f914 	bl	d67a4 <mktime>
}
   d557c:	b00a      	add	sp, #40	; 0x28
   d557e:	bd10      	pop	{r4, pc}

000d5580 <_ZN12MCP79410Time8intToBcdEi>:
	result = (uint8_t) (((value / 10) % 10) << 4);
   d5580:	210a      	movs	r1, #10
   d5582:	fb90 f2f1 	sdiv	r2, r0, r1
   d5586:	fb92 f3f1 	sdiv	r3, r2, r1
   d558a:	fb01 2313 	mls	r3, r1, r3, r2
   d558e:	011b      	lsls	r3, r3, #4
   d5590:	b2db      	uxtb	r3, r3
	result |= (uint8_t) (value % 10);
   d5592:	fb01 0012 	mls	r0, r1, r2, r0
   d5596:	4318      	orrs	r0, r3
}
   d5598:	b2c0      	uxtb	r0, r0
   d559a:	4770      	bx	lr

000d559c <_ZN12MCP79410Time7setYearEi>:
	rawYear = intToBcd(value % 100);
   d559c:	2364      	movs	r3, #100	; 0x64
void MCP79410Time::setYear(int value) {
   d559e:	b510      	push	{r4, lr}
   d55a0:	4604      	mov	r4, r0
	rawYear = intToBcd(value % 100);
   d55a2:	fb91 f0f3 	sdiv	r0, r1, r3
   d55a6:	fb00 1013 	mls	r0, r0, r3, r1
   d55aa:	f7ff ffe9 	bl	d5580 <_ZN12MCP79410Time8intToBcdEi>
   d55ae:	72a0      	strb	r0, [r4, #10]
}
   d55b0:	bd10      	pop	{r4, pc}

000d55b2 <_ZN12MCP79410Time8setMonthEi>:
void MCP79410Time::setMonth(int value) {
   d55b2:	b510      	push	{r4, lr}
   d55b4:	4604      	mov	r4, r0
	rawMonth = intToBcd(value);
   d55b6:	4608      	mov	r0, r1
   d55b8:	f7ff ffe2 	bl	d5580 <_ZN12MCP79410Time8intToBcdEi>
   d55bc:	72e0      	strb	r0, [r4, #11]
}
   d55be:	bd10      	pop	{r4, pc}

000d55c0 <_ZN12MCP79410Time13setDayOfMonthEi>:
void MCP79410Time::setDayOfMonth(int value) {
   d55c0:	b510      	push	{r4, lr}
   d55c2:	4604      	mov	r4, r0
	rawDayOfMonth |= intToBcd(value);
   d55c4:	4608      	mov	r0, r1
   d55c6:	f7ff ffdb 	bl	d5580 <_ZN12MCP79410Time8intToBcdEi>
	rawDayOfMonth &= ~0x3f;
   d55ca:	7b23      	ldrb	r3, [r4, #12]
   d55cc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
	rawDayOfMonth |= intToBcd(value);
   d55d0:	4318      	orrs	r0, r3
   d55d2:	7320      	strb	r0, [r4, #12]
}
   d55d4:	bd10      	pop	{r4, pc}

000d55d6 <_ZN12MCP79410Time12setDayOfWeekEi>:
void MCP79410Time::setDayOfWeek(int value) {
   d55d6:	b510      	push	{r4, lr}
   d55d8:	4604      	mov	r4, r0
	rawDayOfWeek |= intToBcd(value + 1);
   d55da:	1c48      	adds	r0, r1, #1
   d55dc:	f7ff ffd0 	bl	d5580 <_ZN12MCP79410Time8intToBcdEi>
	rawDayOfWeek &= ~0x7;
   d55e0:	7b63      	ldrb	r3, [r4, #13]
   d55e2:	f023 0307 	bic.w	r3, r3, #7
	rawDayOfWeek |= intToBcd(value + 1);
   d55e6:	4318      	orrs	r0, r3
   d55e8:	7360      	strb	r0, [r4, #13]
}
   d55ea:	bd10      	pop	{r4, pc}

000d55ec <_ZN12MCP79410Time7setHourEi>:
void MCP79410Time::setHour(int value) {
   d55ec:	b510      	push	{r4, lr}
   d55ee:	4604      	mov	r4, r0
	rawHour = intToBcd(value);
   d55f0:	4608      	mov	r0, r1
   d55f2:	f7ff ffc5 	bl	d5580 <_ZN12MCP79410Time8intToBcdEi>
   d55f6:	73a0      	strb	r0, [r4, #14]
}
   d55f8:	bd10      	pop	{r4, pc}

000d55fa <_ZN12MCP79410Time9setMinuteEi>:
void MCP79410Time::setMinute(int value) {
   d55fa:	b510      	push	{r4, lr}
   d55fc:	4604      	mov	r4, r0
	rawMinute = intToBcd(value);
   d55fe:	4608      	mov	r0, r1
   d5600:	f7ff ffbe 	bl	d5580 <_ZN12MCP79410Time8intToBcdEi>
   d5604:	73e0      	strb	r0, [r4, #15]
}
   d5606:	bd10      	pop	{r4, pc}

000d5608 <_ZN12MCP79410Time9setSecondEi>:
void MCP79410Time::setSecond(int value) {
   d5608:	b510      	push	{r4, lr}
   d560a:	4604      	mov	r4, r0
	rawSecond |= intToBcd(value);
   d560c:	4608      	mov	r0, r1
   d560e:	f7ff ffb7 	bl	d5580 <_ZN12MCP79410Time8intToBcdEi>
	rawSecond &= ~0x7f;
   d5612:	7c23      	ldrb	r3, [r4, #16]
   d5614:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
	rawSecond |= intToBcd(value);
   d5618:	4318      	orrs	r0, r3
   d561a:	7420      	strb	r0, [r4, #16]
}
   d561c:	bd10      	pop	{r4, pc}

000d561e <_ZN12MCP79410Time12fromUnixTimeEx>:
void MCP79410Time::fromUnixTime(time_t time) {
   d561e:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d5620:	4604      	mov	r4, r0
	struct tm *tm = gmtime(&time);
   d5622:	4668      	mov	r0, sp
void MCP79410Time::fromUnixTime(time_t time) {
   d5624:	e9cd 2300 	strd	r2, r3, [sp]
	struct tm *tm = gmtime(&time);
   d5628:	f004 ffa6 	bl	da578 <gmtime>
   d562c:	4605      	mov	r5, r0
	setYear(tm->tm_year);
   d562e:	6941      	ldr	r1, [r0, #20]
   d5630:	4620      	mov	r0, r4
   d5632:	f7ff ffb3 	bl	d559c <_ZN12MCP79410Time7setYearEi>
	setMonth(tm->tm_mon + 1);
   d5636:	6929      	ldr	r1, [r5, #16]
   d5638:	4620      	mov	r0, r4
   d563a:	3101      	adds	r1, #1
   d563c:	f7ff ffb9 	bl	d55b2 <_ZN12MCP79410Time8setMonthEi>
	setDayOfMonth(tm->tm_mday);
   d5640:	68e9      	ldr	r1, [r5, #12]
   d5642:	4620      	mov	r0, r4
   d5644:	f7ff ffbc 	bl	d55c0 <_ZN12MCP79410Time13setDayOfMonthEi>
	setDayOfWeek(tm->tm_wday);
   d5648:	69a9      	ldr	r1, [r5, #24]
   d564a:	4620      	mov	r0, r4
   d564c:	f7ff ffc3 	bl	d55d6 <_ZN12MCP79410Time12setDayOfWeekEi>
	setHour(tm->tm_hour); // tm_hour is 0-23
   d5650:	68a9      	ldr	r1, [r5, #8]
   d5652:	4620      	mov	r0, r4
   d5654:	f7ff ffca 	bl	d55ec <_ZN12MCP79410Time7setHourEi>
	setMinute(tm->tm_min); // tm_min is 0-59
   d5658:	6869      	ldr	r1, [r5, #4]
   d565a:	4620      	mov	r0, r4
   d565c:	f7ff ffcd 	bl	d55fa <_ZN12MCP79410Time9setMinuteEi>
	setSecond(tm->tm_sec < 60 ? tm->tm_sec : 59); // tm_sec is 0-61, inclusive, because of leap seconds.
   d5660:	6829      	ldr	r1, [r5, #0]
   d5662:	293b      	cmp	r1, #59	; 0x3b
   d5664:	bfa8      	it	ge
   d5666:	213b      	movge	r1, #59	; 0x3b
   d5668:	4620      	mov	r0, r4
   d566a:	f7ff ffcd 	bl	d5608 <_ZN12MCP79410Time9setSecondEi>
}
   d566e:	b003      	add	sp, #12
   d5670:	bd30      	pop	{r4, r5, pc}
	...

000d5674 <_ZN8MCP79410C1ER7TwoWire>:
MCP79410::MCP79410(TwoWire &wire) : wire(wire), sramObj(this), eepromObj(this) {
   d5674:	4a05      	ldr	r2, [pc, #20]	; (d568c <_ZN8MCP79410C1ER7TwoWire+0x18>)
MCP79410MemoryBase::MCP79410MemoryBase(MCP79410 *parent) : parent(parent) {
   d5676:	6100      	str	r0, [r0, #16]
MCP79410::MCP79410(TwoWire &wire) : wire(wire), sramObj(this), eepromObj(this) {
   d5678:	e9c0 2100 	strd	r2, r1, [r0]
   d567c:	4a04      	ldr	r2, [pc, #16]	; (d5690 <_ZN8MCP79410C1ER7TwoWire+0x1c>)
   d567e:	6082      	str	r2, [r0, #8]
MCP79410SRAM::MCP79410SRAM(MCP79410 *parent) : MCP79410MemoryBase(parent) {
   d5680:	4a04      	ldr	r2, [pc, #16]	; (d5694 <_ZN8MCP79410C1ER7TwoWire+0x20>)
   d5682:	60c2      	str	r2, [r0, #12]
MCP79410EEPROM::MCP79410EEPROM(MCP79410 *parent) : MCP79410MemoryBase(parent) {
   d5684:	4a04      	ldr	r2, [pc, #16]	; (d5698 <_ZN8MCP79410C1ER7TwoWire+0x24>)
MCP79410MemoryBase::MCP79410MemoryBase(MCP79410 *parent) : parent(parent) {
   d5686:	6180      	str	r0, [r0, #24]
MCP79410EEPROM::MCP79410EEPROM(MCP79410 *parent) : MCP79410MemoryBase(parent) {
   d5688:	6142      	str	r2, [r0, #20]
}
   d568a:	4770      	bx	lr
   d568c:	000dae00 	.word	0x000dae00
   d5690:	03010000 	.word	0x03010000
   d5694:	000dada8 	.word	0x000dada8
   d5698:	000daddc 	.word	0x000daddc

000d569c <_ZNK8MCP7941010deviceReadEhhPhj>:
	return deviceWriteRegisterByte(addr, value);
}



int MCP79410::deviceRead(uint8_t i2cAddr, uint8_t addr, uint8_t *buf, size_t bufLen) const {
   d569c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d56a0:	4604      	mov	r4, r0
   d56a2:	460f      	mov	r7, r1
   d56a4:	4690      	mov	r8, r2
   d56a6:	4699      	mov	r9, r3
	// log.trace("deviceRead i2cAddr=%02x addr=%02x bufLen=%u", i2cAddr, addr, bufLen);

	int stat = 0;
	size_t offset = 0;
   d56a8:	2600      	movs	r6, #0

	while(offset < bufLen) {
   d56aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d56ac:	429e      	cmp	r6, r3
   d56ae:	d231      	bcs.n	d5714 <_ZNK8MCP7941010deviceReadEhhPhj+0x78>
		wire.beginTransmission(i2cAddr);
   d56b0:	6860      	ldr	r0, [r4, #4]
   d56b2:	4639      	mov	r1, r7
   d56b4:	f001 fd1b 	bl	d70ee <_ZN7TwoWire17beginTransmissionEh>
		wire.write(addr + offset);
   d56b8:	eb08 0106 	add.w	r1, r8, r6
   d56bc:	6860      	ldr	r0, [r4, #4]
   d56be:	f7ff fd97 	bl	d51f0 <_ZN7TwoWire5writeEj>
		stat = wire.endTransmission(false);
   d56c2:	6860      	ldr	r0, [r4, #4]
   d56c4:	2100      	movs	r1, #0
   d56c6:	f001 fd31 	bl	d712c <_ZN7TwoWire15endTransmissionEh>
		if (stat == 0) {
   d56ca:	4605      	mov	r5, r0
   d56cc:	b9d0      	cbnz	r0, d5704 <_ZNK8MCP7941010deviceReadEhhPhj+0x68>
			// Maximum read is 32 because of the limitation of the Wire implementation
			size_t count = bufLen - offset;
   d56ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
				count = 32;
			}

			// log.trace("deviceRead addr=%u count=%u", addr + offset, count);

			count = wire.requestFrom(i2cAddr, count, (uint8_t) true);
   d56d0:	6860      	ldr	r0, [r4, #4]
			size_t count = bufLen - offset;
   d56d2:	1b9a      	subs	r2, r3, r6
			count = wire.requestFrom(i2cAddr, count, (uint8_t) true);
   d56d4:	2a20      	cmp	r2, #32
   d56d6:	f04f 0301 	mov.w	r3, #1
   d56da:	bf28      	it	cs
   d56dc:	2220      	movcs	r2, #32
   d56de:	4639      	mov	r1, r7
   d56e0:	f001 fcf3 	bl	d70ca <_ZN7TwoWire11requestFromEhjh>
   d56e4:	eb09 0b06 	add.w	fp, r9, r6
   d56e8:	4605      	mov	r5, r0
			for(size_t ii = 0; ii < count; ii++) {
   d56ea:	eb0b 0a00 	add.w	sl, fp, r0
   d56ee:	45da      	cmp	sl, fp
   d56f0:	d006      	beq.n	d5700 <_ZNK8MCP7941010deviceReadEhhPhj+0x64>
				buf[ii + offset] = wire.read();
   d56f2:	6860      	ldr	r0, [r4, #4]
   d56f4:	6803      	ldr	r3, [r0, #0]
   d56f6:	695b      	ldr	r3, [r3, #20]
   d56f8:	4798      	blx	r3
   d56fa:	f80b 0b01 	strb.w	r0, [fp], #1
			for(size_t ii = 0; ii < count; ii++) {
   d56fe:	e7f6      	b.n	d56ee <_ZNK8MCP7941010deviceReadEhhPhj+0x52>
			}
			offset += count;
   d5700:	442e      	add	r6, r5
	while(offset < bufLen) {
   d5702:	e7d2      	b.n	d56aa <_ZNK8MCP7941010deviceReadEhhPhj+0xe>
		}
		else {
			log.info("deviceRead failed stat=%d", stat);
   d5704:	4602      	mov	r2, r0
   d5706:	4904      	ldr	r1, [pc, #16]	; (d5718 <_ZNK8MCP7941010deviceReadEhhPhj+0x7c>)
   d5708:	4804      	ldr	r0, [pc, #16]	; (d571c <_ZNK8MCP7941010deviceReadEhhPhj+0x80>)
   d570a:	f7fe fd4f 	bl	d41ac <_ZNK5spark6Logger4infoEPKcz>
			break;
		}
	}
	return stat;
}
   d570e:	4628      	mov	r0, r5
   d5710:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5714:	2500      	movs	r5, #0
	return stat;
   d5716:	e7fa      	b.n	d570e <_ZNK8MCP7941010deviceReadEhhPhj+0x72>
   d5718:	000dad00 	.word	0x000dad00
   d571c:	2003e5e4 	.word	0x2003e5e4

000d5720 <_ZN12MCP79410SRAM8readDataEjPhj>:
bool MCP79410SRAM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d5720:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if ((addr + dataLen) > length()) {
   d5724:	eb01 0803 	add.w	r8, r1, r3
bool MCP79410SRAM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d5728:	461e      	mov	r6, r3
	if ((addr + dataLen) > length()) {
   d572a:	6803      	ldr	r3, [r0, #0]
   d572c:	689b      	ldr	r3, [r3, #8]
bool MCP79410SRAM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d572e:	4605      	mov	r5, r0
   d5730:	460c      	mov	r4, r1
   d5732:	4617      	mov	r7, r2
	if ((addr + dataLen) > length()) {
   d5734:	4798      	blx	r3
   d5736:	4580      	cmp	r8, r0
   d5738:	d80d      	bhi.n	d5756 <_ZN12MCP79410SRAM8readDataEjPhj+0x36>
	int stat = parent->deviceRead(MCP79410::REG_I2C_ADDR, MCP79410::REG_SRAM + addr, data, dataLen);
   d573a:	3420      	adds	r4, #32
   d573c:	6868      	ldr	r0, [r5, #4]
   d573e:	9600      	str	r6, [sp, #0]
   d5740:	463b      	mov	r3, r7
   d5742:	b2e2      	uxtb	r2, r4
   d5744:	216f      	movs	r1, #111	; 0x6f
   d5746:	f7ff ffa9 	bl	d569c <_ZNK8MCP7941010deviceReadEhhPhj>
	return (stat == 0);
   d574a:	fab0 f080 	clz	r0, r0
   d574e:	0940      	lsrs	r0, r0, #5
}
   d5750:	b002      	add	sp, #8
   d5752:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return false;
   d5756:	2000      	movs	r0, #0
   d5758:	e7fa      	b.n	d5750 <_ZN12MCP79410SRAM8readDataEjPhj+0x30>

000d575a <_ZN14MCP79410EEPROM8readDataEjPhj>:
bool MCP79410EEPROM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d575a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if ((addr + dataLen) > length()) {
   d575e:	eb01 0803 	add.w	r8, r1, r3
bool MCP79410EEPROM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d5762:	461e      	mov	r6, r3
	if ((addr + dataLen) > length()) {
   d5764:	6803      	ldr	r3, [r0, #0]
   d5766:	689b      	ldr	r3, [r3, #8]
bool MCP79410EEPROM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d5768:	4604      	mov	r4, r0
   d576a:	460d      	mov	r5, r1
   d576c:	4617      	mov	r7, r2
	if ((addr + dataLen) > length()) {
   d576e:	4798      	blx	r3
   d5770:	4580      	cmp	r8, r0
   d5772:	d80c      	bhi.n	d578e <_ZN14MCP79410EEPROM8readDataEjPhj+0x34>
	int stat = parent->deviceRead(MCP79410::EEPROM_I2C_ADDR, addr, data, dataLen);
   d5774:	6860      	ldr	r0, [r4, #4]
   d5776:	9600      	str	r6, [sp, #0]
   d5778:	463b      	mov	r3, r7
   d577a:	b2ea      	uxtb	r2, r5
   d577c:	2157      	movs	r1, #87	; 0x57
   d577e:	f7ff ff8d 	bl	d569c <_ZNK8MCP7941010deviceReadEhhPhj>
	return (stat == 0);
   d5782:	fab0 f080 	clz	r0, r0
   d5786:	0940      	lsrs	r0, r0, #5
}
   d5788:	b002      	add	sp, #8
   d578a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return false;
   d578e:	2000      	movs	r0, #0
   d5790:	e7fa      	b.n	d5788 <_ZN14MCP79410EEPROM8readDataEjPhj+0x2e>

000d5792 <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei.part.0>:
int MCP79410::deviceReadTime(uint8_t addr, MCP79410Time &time, int timeMode) const {
   d5792:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
		size_t numBytes = (timeMode == TIME_MODE_RTC) ? 7 : 6;
   d5794:	1e1e      	subs	r6, r3, #0
   d5796:	bf0c      	ite	eq
   d5798:	2307      	moveq	r3, #7
   d579a:	2306      	movne	r3, #6
		stat = deviceRead(REG_I2C_ADDR, addr, buf, numBytes);
   d579c:	9300      	str	r3, [sp, #0]
int MCP79410::deviceReadTime(uint8_t addr, MCP79410Time &time, int timeMode) const {
   d579e:	4614      	mov	r4, r2
		stat = deviceRead(REG_I2C_ADDR, addr, buf, numBytes);
   d57a0:	ab02      	add	r3, sp, #8
   d57a2:	460a      	mov	r2, r1
   d57a4:	216f      	movs	r1, #111	; 0x6f
   d57a6:	f7ff ff79 	bl	d569c <_ZNK8MCP7941010deviceReadEhhPhj>
		if (stat == 0) {
   d57aa:	4605      	mov	r5, r0
   d57ac:	b9a8      	cbnz	r0, d57da <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei.part.0+0x48>
			time.rawSecond = buf[0];
   d57ae:	f89d 3008 	ldrb.w	r3, [sp, #8]
   d57b2:	7423      	strb	r3, [r4, #16]
			time.rawMinute = buf[1];
   d57b4:	f89d 3009 	ldrb.w	r3, [sp, #9]
   d57b8:	73e3      	strb	r3, [r4, #15]
			time.rawHour = buf[2];
   d57ba:	f89d 300a 	ldrb.w	r3, [sp, #10]
   d57be:	73a3      	strb	r3, [r4, #14]
			time.rawDayOfWeek = buf[3];
   d57c0:	f89d 300b 	ldrb.w	r3, [sp, #11]
   d57c4:	7363      	strb	r3, [r4, #13]
			time.rawDayOfMonth = buf[4];
   d57c6:	f89d 300c 	ldrb.w	r3, [sp, #12]
   d57ca:	7323      	strb	r3, [r4, #12]
			time.rawMonth = buf[5];
   d57cc:	f89d 300d 	ldrb.w	r3, [sp, #13]
   d57d0:	72e3      	strb	r3, [r4, #11]
			if (timeMode == TIME_MODE_RTC) {
   d57d2:	b92e      	cbnz	r6, d57e0 <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei.part.0+0x4e>
				time.rawYear = buf[6];
   d57d4:	f89d 300e 	ldrb.w	r3, [sp, #14]
   d57d8:	72a3      	strb	r3, [r4, #10]
}
   d57da:	4628      	mov	r0, r5
   d57dc:	b004      	add	sp, #16
   d57de:	bd70      	pop	{r4, r5, r6, pc}
				time.rawYear = MCP79410Time::intToBcd(Time.year());
   d57e0:	f003 fcc4 	bl	d916c <_ZN9TimeClass4yearEv>
   d57e4:	f7ff fecc 	bl	d5580 <_ZN12MCP79410Time8intToBcdEi>
   d57e8:	72a0      	strb	r0, [r4, #10]
	return stat;
   d57ea:	e7f6      	b.n	d57da <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei.part.0+0x48>

000d57ec <_ZNK8MCP7941022deviceReadRegisterByteEh>:
uint8_t MCP79410::deviceReadRegisterByte(uint8_t addr) const {
   d57ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	if (deviceRead(REG_I2C_ADDR, addr, buf, 1) == 0) {
   d57ee:	2301      	movs	r3, #1
uint8_t MCP79410::deviceReadRegisterByte(uint8_t addr) const {
   d57f0:	460a      	mov	r2, r1
	if (deviceRead(REG_I2C_ADDR, addr, buf, 1) == 0) {
   d57f2:	9300      	str	r3, [sp, #0]
   d57f4:	216f      	movs	r1, #111	; 0x6f
   d57f6:	ab03      	add	r3, sp, #12
   d57f8:	f7ff ff50 	bl	d569c <_ZNK8MCP7941010deviceReadEhhPhj>
   d57fc:	b920      	cbnz	r0, d5808 <_ZNK8MCP7941022deviceReadRegisterByteEh+0x1c>
		return buf[0];
   d57fe:	f89d 000c 	ldrb.w	r0, [sp, #12]
}
   d5802:	b005      	add	sp, #20
   d5804:	f85d fb04 	ldr.w	pc, [sp], #4
		return 0;
   d5808:	2000      	movs	r0, #0
   d580a:	e7fa      	b.n	d5802 <_ZNK8MCP7941022deviceReadRegisterByteEh+0x16>

000d580c <_ZNK8MCP7941020getOscillatorRunningEv>:
bool MCP79410::getOscillatorRunning() const {
   d580c:	b508      	push	{r3, lr}
	return (deviceReadRegisterByte(REG_RTCWKDAY) & REG_RTCWKDAY_OSCRUN) != 0;
   d580e:	2103      	movs	r1, #3
   d5810:	f7ff ffec 	bl	d57ec <_ZNK8MCP7941022deviceReadRegisterByteEh>
}
   d5814:	f3c0 1040 	ubfx	r0, r0, #5, #1
   d5818:	bd08      	pop	{r3, pc}

000d581a <_ZNK8MCP7941010getRTCTimeER12MCP79410Time>:
bool MCP79410::getRTCTime(MCP79410Time &time) const {
   d581a:	b538      	push	{r3, r4, r5, lr}
   d581c:	2300      	movs	r3, #0
   d581e:	460c      	mov	r4, r1
   d5820:	460a      	mov	r2, r1
   d5822:	4619      	mov	r1, r3
   d5824:	4605      	mov	r5, r0
	if (timeMode == TIME_MODE_RTC || timeMode == TIME_MODE_ALARM) {
   d5826:	f7ff ffb4 	bl	d5792 <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei.part.0>
	if (stat == 0) {
   d582a:	b930      	cbnz	r0, d583a <_ZNK8MCP7941010getRTCTimeER12MCP79410Time+0x20>
		if (time.rawYear > 0 && getOscillatorRunning()) {
   d582c:	7aa3      	ldrb	r3, [r4, #10]
   d582e:	b123      	cbz	r3, d583a <_ZNK8MCP7941010getRTCTimeER12MCP79410Time+0x20>
   d5830:	4628      	mov	r0, r5
}
   d5832:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		if (time.rawYear > 0 && getOscillatorRunning()) {
   d5836:	f7ff bfe9 	b.w	d580c <_ZNK8MCP7941020getOscillatorRunningEv>
}
   d583a:	2000      	movs	r0, #0
   d583c:	bd38      	pop	{r3, r4, r5, pc}

000d583e <_ZNK8MCP7941010getRTCTimeEv>:
time_t MCP79410::getRTCTime() const {
   d583e:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d5840:	4602      	mov	r2, r0
	MCP79410Time time;
   d5842:	a801      	add	r0, sp, #4
   d5844:	f7ff fe28 	bl	d5498 <_ZN12MCP79410TimeC1Ev>
	bool bResult = getRTCTime(time);
   d5848:	a901      	add	r1, sp, #4
   d584a:	4610      	mov	r0, r2
   d584c:	f7ff ffe5 	bl	d581a <_ZNK8MCP7941010getRTCTimeER12MCP79410Time>
	if (bResult) {
   d5850:	b128      	cbz	r0, d585e <_ZNK8MCP7941010getRTCTimeEv+0x20>
		return time.toUnixTime();
   d5852:	a801      	add	r0, sp, #4
   d5854:	f7ff fe6c 	bl	d5530 <_ZNK12MCP79410Time10toUnixTimeEv>
}
   d5858:	b007      	add	sp, #28
   d585a:	f85d fb04 	ldr.w	pc, [sp], #4
		return 0;
   d585e:	2000      	movs	r0, #0
   d5860:	4601      	mov	r1, r0
   d5862:	e7f9      	b.n	d5858 <_ZNK8MCP7941010getRTCTimeEv+0x1a>

000d5864 <_ZN8MCP794105setupEv>:
void MCP79410::setup() {
   d5864:	b5d0      	push	{r4, r6, r7, lr}
   d5866:	4604      	mov	r4, r0
   d5868:	b086      	sub	sp, #24
	wire.begin();
   d586a:	6840      	ldr	r0, [r0, #4]
   d586c:	f001 fc10 	bl	d7090 <_ZN7TwoWire5beginEv>
	if (!Time.isValid()) {
   d5870:	f003 fc4e 	bl	d9110 <_ZN9TimeClass7isValidEv>
   d5874:	b9e8      	cbnz	r0, d58b2 <_ZN8MCP794105setupEv+0x4e>
		if ((timeSyncMode & TIME_SYNC_RTC_TO_TIME) != 0) {
   d5876:	7ae3      	ldrb	r3, [r4, #11]
   d5878:	079b      	lsls	r3, r3, #30
   d587a:	d51a      	bpl.n	d58b2 <_ZN8MCP794105setupEv+0x4e>
			time_t rtcTime = getRTCTime();
   d587c:	4620      	mov	r0, r4
   d587e:	f7ff ffde 	bl	d583e <_ZNK8MCP7941010getRTCTimeEv>
   d5882:	4606      	mov	r6, r0
   d5884:	460f      	mov	r7, r1
			if (rtcTime != 0) {
   d5886:	ea56 0307 	orrs.w	r3, r6, r7
   d588a:	d012      	beq.n	d58b2 <_ZN8MCP794105setupEv+0x4e>
				Time.setTime(rtcTime);
   d588c:	f003 fb46 	bl	d8f1c <_ZN9TimeClass7setTimeEx>
				log.info("set Time from RTC %s", Time.format(rtcTime, TIME_FORMAT_DEFAULT).c_str());
   d5890:	4b0a      	ldr	r3, [pc, #40]	; (d58bc <_ZN8MCP794105setupEv+0x58>)
   d5892:	490b      	ldr	r1, [pc, #44]	; (d58c0 <_ZN8MCP794105setupEv+0x5c>)
   d5894:	681b      	ldr	r3, [r3, #0]
   d5896:	9300      	str	r3, [sp, #0]
   d5898:	4632      	mov	r2, r6
   d589a:	463b      	mov	r3, r7
   d589c:	a802      	add	r0, sp, #8
   d589e:	f003 fbf5 	bl	d908c <_ZN9TimeClass6formatExPKc>
   d58a2:	4808      	ldr	r0, [pc, #32]	; (d58c4 <_ZN8MCP794105setupEv+0x60>)
   d58a4:	9a02      	ldr	r2, [sp, #8]
   d58a6:	4908      	ldr	r1, [pc, #32]	; (d58c8 <_ZN8MCP794105setupEv+0x64>)
   d58a8:	f7fe fc80 	bl	d41ac <_ZNK5spark6Logger4infoEPKcz>
   d58ac:	a802      	add	r0, sp, #8
   d58ae:	f003 f8d7 	bl	d8a60 <_ZN6StringD1Ev>
	setupDone = true;
   d58b2:	2301      	movs	r3, #1
   d58b4:	7223      	strb	r3, [r4, #8]
}
   d58b6:	b006      	add	sp, #24
   d58b8:	bdd0      	pop	{r4, r6, r7, pc}
   d58ba:	bf00      	nop
   d58bc:	2003e3b0 	.word	0x2003e3b0
   d58c0:	2003e68c 	.word	0x2003e68c
   d58c4:	2003e5e4 	.word	0x2003e5e4
   d58c8:	000dad1a 	.word	0x000dad1a

000d58cc <_ZN8MCP7941011deviceWriteEhhPKhj>:

int MCP79410::deviceWrite(uint8_t i2cAddr, uint8_t addr, const uint8_t *buf, size_t bufLen) {
   d58cc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d58d0:	4606      	mov	r6, r0
   d58d2:	4688      	mov	r8, r1
   d58d4:	4691      	mov	r9, r2
   d58d6:	469a      	mov	sl, r3
	// log.trace("deviceWrite i2cAddr=%02x addr=%02x bufLen=%u", i2cAddr, addr, bufLen);

	int stat = 0;
	size_t offset = 0;
   d58d8:	2500      	movs	r5, #0

	while(offset < bufLen) {
   d58da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d58dc:	429d      	cmp	r5, r3
   d58de:	d229      	bcs.n	d5934 <_ZN8MCP7941011deviceWriteEhhPKhj+0x68>
		wire.beginTransmission(i2cAddr);
   d58e0:	6870      	ldr	r0, [r6, #4]
   d58e2:	4641      	mov	r1, r8
   d58e4:	f001 fc03 	bl	d70ee <_ZN7TwoWire17beginTransmissionEh>
		wire.write(addr + offset);
   d58e8:	6870      	ldr	r0, [r6, #4]
   d58ea:	eb09 0105 	add.w	r1, r9, r5
   d58ee:	f7ff fc7f 	bl	d51f0 <_ZN7TwoWire5writeEj>

		// Maximum write is 31, not 32, because of the address byte
		size_t count = bufLen - offset;
   d58f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d58f4:	1b5f      	subs	r7, r3, r5
		if (count > 31) {
   d58f6:	2f1f      	cmp	r7, #31
   d58f8:	bf28      	it	cs
   d58fa:	271f      	movcs	r7, #31
			count = 31;
		}

		// log.trace("deviceWrite addr=%u count=%u", addr + offset, count);

		for(size_t ii = 0; ii < count; ii++) {
   d58fc:	eb0a 0405 	add.w	r4, sl, r5
   d5900:	eb07 0b04 	add.w	fp, r7, r4
			wire.write(buf[ii + offset]);
   d5904:	6870      	ldr	r0, [r6, #4]
   d5906:	f814 1b01 	ldrb.w	r1, [r4], #1
   d590a:	6802      	ldr	r2, [r0, #0]
   d590c:	6892      	ldr	r2, [r2, #8]
   d590e:	4790      	blx	r2
		for(size_t ii = 0; ii < count; ii++) {
   d5910:	45a3      	cmp	fp, r4
   d5912:	d1f7      	bne.n	d5904 <_ZN8MCP7941011deviceWriteEhhPKhj+0x38>
		}

		stat = wire.endTransmission(true);
   d5914:	6870      	ldr	r0, [r6, #4]
   d5916:	2101      	movs	r1, #1
   d5918:	f001 fc08 	bl	d712c <_ZN7TwoWire15endTransmissionEh>
		if (stat != 0) {
   d591c:	4604      	mov	r4, r0
   d591e:	b138      	cbz	r0, d5930 <_ZN8MCP7941011deviceWriteEhhPKhj+0x64>
			log.info("deviceWrite failed stat=%d", stat);
   d5920:	4602      	mov	r2, r0
   d5922:	4905      	ldr	r1, [pc, #20]	; (d5938 <_ZN8MCP7941011deviceWriteEhhPKhj+0x6c>)
   d5924:	4805      	ldr	r0, [pc, #20]	; (d593c <_ZN8MCP7941011deviceWriteEhhPKhj+0x70>)
   d5926:	f7fe fc41 	bl	d41ac <_ZNK5spark6Logger4infoEPKcz>

		offset += count;
	}

	return stat;
}
   d592a:	4620      	mov	r0, r4
   d592c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		offset += count;
   d5930:	443d      	add	r5, r7
	while(offset < bufLen) {
   d5932:	e7d2      	b.n	d58da <_ZN8MCP7941011deviceWriteEhhPKhj+0xe>
   d5934:	2400      	movs	r4, #0
	return stat;
   d5936:	e7f8      	b.n	d592a <_ZN8MCP7941011deviceWriteEhhPKhj+0x5e>
   d5938:	000dad2f 	.word	0x000dad2f
   d593c:	2003e5e4 	.word	0x2003e5e4

000d5940 <_ZN12MCP79410SRAM9writeDataEjPKhj>:
bool MCP79410SRAM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d5940:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if ((addr + dataLen) > length()) {
   d5944:	eb01 0803 	add.w	r8, r1, r3
bool MCP79410SRAM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d5948:	461e      	mov	r6, r3
	if ((addr + dataLen) > length()) {
   d594a:	6803      	ldr	r3, [r0, #0]
   d594c:	689b      	ldr	r3, [r3, #8]
bool MCP79410SRAM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d594e:	4605      	mov	r5, r0
   d5950:	460c      	mov	r4, r1
   d5952:	4617      	mov	r7, r2
	if ((addr + dataLen) > length()) {
   d5954:	4798      	blx	r3
   d5956:	4580      	cmp	r8, r0
   d5958:	d80d      	bhi.n	d5976 <_ZN12MCP79410SRAM9writeDataEjPKhj+0x36>
	int stat = parent->deviceWrite(MCP79410::REG_I2C_ADDR, MCP79410::REG_SRAM + addr, data, dataLen);
   d595a:	3420      	adds	r4, #32
   d595c:	6868      	ldr	r0, [r5, #4]
   d595e:	9600      	str	r6, [sp, #0]
   d5960:	463b      	mov	r3, r7
   d5962:	b2e2      	uxtb	r2, r4
   d5964:	216f      	movs	r1, #111	; 0x6f
   d5966:	f7ff ffb1 	bl	d58cc <_ZN8MCP7941011deviceWriteEhhPKhj>
	return (stat == 0);
   d596a:	fab0 f080 	clz	r0, r0
   d596e:	0940      	lsrs	r0, r0, #5
}
   d5970:	b002      	add	sp, #8
   d5972:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return false;
   d5976:	2000      	movs	r0, #0
   d5978:	e7fa      	b.n	d5970 <_ZN12MCP79410SRAM9writeDataEjPKhj+0x30>

000d597a <_ZN8MCP7941018deviceWriteRTCTimeEhRK12MCP79410Time>:
int MCP79410::deviceWriteRTCTime(uint8_t addr, const MCP79410Time &time) {
   d597a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	buf[0] = time.rawSecond;
   d597c:	7c13      	ldrb	r3, [r2, #16]
   d597e:	f88d 3008 	strb.w	r3, [sp, #8]
	buf[1] = time.rawMinute;
   d5982:	7bd3      	ldrb	r3, [r2, #15]
   d5984:	f88d 3009 	strb.w	r3, [sp, #9]
	buf[2] = time.rawHour;
   d5988:	7b93      	ldrb	r3, [r2, #14]
   d598a:	f88d 300a 	strb.w	r3, [sp, #10]
	buf[3] = time.rawDayOfWeek;
   d598e:	7b53      	ldrb	r3, [r2, #13]
   d5990:	f88d 300b 	strb.w	r3, [sp, #11]
	buf[4] = time.rawDayOfMonth;
   d5994:	7b13      	ldrb	r3, [r2, #12]
   d5996:	f88d 300c 	strb.w	r3, [sp, #12]
	buf[5] = time.rawMonth;
   d599a:	7ad3      	ldrb	r3, [r2, #11]
   d599c:	f88d 300d 	strb.w	r3, [sp, #13]
	buf[6] = time.rawYear;
   d59a0:	7a93      	ldrb	r3, [r2, #10]
   d59a2:	f88d 300e 	strb.w	r3, [sp, #14]
	return deviceWrite(REG_I2C_ADDR, addr, buf, sizeof(buf));
   d59a6:	2307      	movs	r3, #7
   d59a8:	9300      	str	r3, [sp, #0]
   d59aa:	460a      	mov	r2, r1
   d59ac:	ab02      	add	r3, sp, #8
   d59ae:	216f      	movs	r1, #111	; 0x6f
   d59b0:	f7ff ff8c 	bl	d58cc <_ZN8MCP7941011deviceWriteEhhPKhj>
}
   d59b4:	b005      	add	sp, #20
   d59b6:	f85d fb04 	ldr.w	pc, [sp], #4

000d59ba <_ZN8MCP7941010setRTCTimeEx>:
bool MCP79410::setRTCTime(time_t unixTime) {
   d59ba:	b510      	push	{r4, lr}
   d59bc:	b088      	sub	sp, #32
   d59be:	4604      	mov	r4, r0
	MCP79410Time time;
   d59c0:	a803      	add	r0, sp, #12
bool MCP79410::setRTCTime(time_t unixTime) {
   d59c2:	9301      	str	r3, [sp, #4]
	MCP79410Time time;
   d59c4:	f7ff fd68 	bl	d5498 <_ZN12MCP79410TimeC1Ev>
	time.fromUnixTime(unixTime);
   d59c8:	9b01      	ldr	r3, [sp, #4]
   d59ca:	a803      	add	r0, sp, #12
   d59cc:	f7ff fe27 	bl	d561e <_ZN12MCP79410Time12fromUnixTimeEx>
	time.rawSecond |= REG_DATE_RTCSEC_ST;
   d59d0:	f89d 301c 	ldrb.w	r3, [sp, #28]
	if (batteryEnable) {
   d59d4:	7aa2      	ldrb	r2, [r4, #10]
	time.rawSecond |= REG_DATE_RTCSEC_ST;
   d59d6:	f063 037f 	orn	r3, r3, #127	; 0x7f
   d59da:	f88d 301c 	strb.w	r3, [sp, #28]
	if (batteryEnable) {
   d59de:	f89d 3019 	ldrb.w	r3, [sp, #25]
   d59e2:	b16a      	cbz	r2, d5a00 <_ZN8MCP7941010setRTCTimeEx+0x46>
		time.rawDayOfWeek |= REG_RTCWKDAY_VBATEN;
   d59e4:	f043 0308 	orr.w	r3, r3, #8
	return deviceWriteRTCTime(REG_DATE_TIME, time) == 0;
   d59e8:	aa03      	add	r2, sp, #12
   d59ea:	2100      	movs	r1, #0
   d59ec:	4620      	mov	r0, r4
   d59ee:	f88d 3019 	strb.w	r3, [sp, #25]
   d59f2:	f7ff ffc2 	bl	d597a <_ZN8MCP7941018deviceWriteRTCTimeEhRK12MCP79410Time>
}
   d59f6:	fab0 f080 	clz	r0, r0
   d59fa:	0940      	lsrs	r0, r0, #5
   d59fc:	b008      	add	sp, #32
   d59fe:	bd10      	pop	{r4, pc}
		time.rawDayOfWeek &= ~REG_RTCWKDAY_VBATEN;
   d5a00:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
   d5a04:	e7f0      	b.n	d59e8 <_ZN8MCP7941010setRTCTimeEx+0x2e>
	...

000d5a08 <_ZN8MCP7941015setRTCFromCloudEv>:
bool MCP79410::setRTCFromCloud() {
   d5a08:	b5f0      	push	{r4, r5, r6, r7, lr}
   d5a0a:	b087      	sub	sp, #28
   d5a0c:	4605      	mov	r5, r0
	if (Time.isValid()) {
   d5a0e:	f003 fb7f 	bl	d9110 <_ZN9TimeClass7isValidEv>
   d5a12:	4604      	mov	r4, r0
   d5a14:	b1e8      	cbz	r0, d5a52 <_ZN8MCP7941015setRTCFromCloudEv+0x4a>
		time_t now = Time.now();
   d5a16:	f003 fb98 	bl	d914a <_ZN9TimeClass3nowEv>
   d5a1a:	17c7      	asrs	r7, r0, #31
		bResult = setRTCTime(now);
   d5a1c:	4602      	mov	r2, r0
		time_t now = Time.now();
   d5a1e:	4606      	mov	r6, r0
		bResult = setRTCTime(now);
   d5a20:	463b      	mov	r3, r7
   d5a22:	4628      	mov	r0, r5
   d5a24:	f7ff ffc9 	bl	d59ba <_ZN8MCP7941010setRTCTimeEx>
		log.info("set RTC from cloud %s", Time.format(now, TIME_FORMAT_DEFAULT).c_str());
   d5a28:	4b0c      	ldr	r3, [pc, #48]	; (d5a5c <_ZN8MCP7941015setRTCFromCloudEv+0x54>)
   d5a2a:	490d      	ldr	r1, [pc, #52]	; (d5a60 <_ZN8MCP7941015setRTCFromCloudEv+0x58>)
   d5a2c:	681b      	ldr	r3, [r3, #0]
   d5a2e:	9300      	str	r3, [sp, #0]
   d5a30:	4632      	mov	r2, r6
   d5a32:	463b      	mov	r3, r7
		bResult = setRTCTime(now);
   d5a34:	4604      	mov	r4, r0
		log.info("set RTC from cloud %s", Time.format(now, TIME_FORMAT_DEFAULT).c_str());
   d5a36:	a802      	add	r0, sp, #8
   d5a38:	f003 fb28 	bl	d908c <_ZN9TimeClass6formatExPKc>
   d5a3c:	4809      	ldr	r0, [pc, #36]	; (d5a64 <_ZN8MCP7941015setRTCFromCloudEv+0x5c>)
   d5a3e:	9a02      	ldr	r2, [sp, #8]
   d5a40:	4909      	ldr	r1, [pc, #36]	; (d5a68 <_ZN8MCP7941015setRTCFromCloudEv+0x60>)
   d5a42:	f7fe fbb3 	bl	d41ac <_ZNK5spark6Logger4infoEPKcz>
   d5a46:	a802      	add	r0, sp, #8
   d5a48:	f003 f80a 	bl	d8a60 <_ZN6StringD1Ev>
}
   d5a4c:	4620      	mov	r0, r4
   d5a4e:	b007      	add	sp, #28
   d5a50:	bdf0      	pop	{r4, r5, r6, r7, pc}
		log.info("cloud time not valid");
   d5a52:	4906      	ldr	r1, [pc, #24]	; (d5a6c <_ZN8MCP7941015setRTCFromCloudEv+0x64>)
   d5a54:	4803      	ldr	r0, [pc, #12]	; (d5a64 <_ZN8MCP7941015setRTCFromCloudEv+0x5c>)
   d5a56:	f7fe fba9 	bl	d41ac <_ZNK5spark6Logger4infoEPKcz>
   d5a5a:	e7f7      	b.n	d5a4c <_ZN8MCP7941015setRTCFromCloudEv+0x44>
   d5a5c:	2003e3b0 	.word	0x2003e3b0
   d5a60:	2003e68c 	.word	0x2003e68c
   d5a64:	2003e5e4 	.word	0x2003e5e4
   d5a68:	000dad4a 	.word	0x000dad4a
   d5a6c:	000dad60 	.word	0x000dad60

000d5a70 <_ZN8MCP794104loopEv>:
void MCP79410::loop() {
   d5a70:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (!timeSet) {
   d5a72:	7a45      	ldrb	r5, [r0, #9]
void MCP79410::loop() {
   d5a74:	4604      	mov	r4, r0
	if (!timeSet) {
   d5a76:	b99d      	cbnz	r5, d5aa0 <_ZN8MCP794104loopEv+0x30>
		if (Time.isValid()) {
   d5a78:	f003 fb4a 	bl	d9110 <_ZN9TimeClass7isValidEv>
   d5a7c:	b180      	cbz	r0, d5aa0 <_ZN8MCP794104loopEv+0x30>
        tm = 0;
   d5a7e:	2200      	movs	r2, #0
   d5a80:	2300      	movs	r3, #0
        return spark_sync_time_last(nullptr, &tm);
   d5a82:	4669      	mov	r1, sp
   d5a84:	4628      	mov	r0, r5
        tm = 0;
   d5a86:	e9cd 2300 	strd	r2, r3, [sp]
        return spark_sync_time_last(nullptr, &tm);
   d5a8a:	f000 fdbb 	bl	d6604 <spark_sync_time_last>
			if (lastSync != 0) {
   d5a8e:	b138      	cbz	r0, d5aa0 <_ZN8MCP794104loopEv+0x30>
				if ((timeSyncMode & TIME_SYNC_CLOUD_TO_RTC) != 0) {
   d5a90:	7ae3      	ldrb	r3, [r4, #11]
   d5a92:	07db      	lsls	r3, r3, #31
   d5a94:	d502      	bpl.n	d5a9c <_ZN8MCP794104loopEv+0x2c>
					setRTCFromCloud();
   d5a96:	4620      	mov	r0, r4
   d5a98:	f7ff ffb6 	bl	d5a08 <_ZN8MCP7941015setRTCFromCloudEv>
				timeSet = true;
   d5a9c:	2301      	movs	r3, #1
   d5a9e:	7263      	strb	r3, [r4, #9]
}
   d5aa0:	b003      	add	sp, #12
   d5aa2:	bd30      	pop	{r4, r5, pc}

000d5aa4 <_ZN8MCP7941013waitForEEPROMEv>:
	}

	return stat;
}

void MCP79410::waitForEEPROM() {
   d5aa4:	b538      	push	{r3, r4, r5, lr}
   d5aa6:	4604      	mov	r4, r0
   d5aa8:	2532      	movs	r5, #50	; 0x32
	for(size_t tries = 0; tries < 50; tries++) {
		wire.beginTransmission(EEPROM_I2C_ADDR);
   d5aaa:	6860      	ldr	r0, [r4, #4]
   d5aac:	2157      	movs	r1, #87	; 0x57
   d5aae:	f001 fb1e 	bl	d70ee <_ZN7TwoWire17beginTransmissionEh>
		int stat = wire.endTransmission(true);
   d5ab2:	6860      	ldr	r0, [r4, #4]
   d5ab4:	2101      	movs	r1, #1
   d5ab6:	f001 fb39 	bl	d712c <_ZN7TwoWire15endTransmissionEh>
		if (stat == 0) {
   d5aba:	b108      	cbz	r0, d5ac0 <_ZN8MCP7941013waitForEEPROMEv+0x1c>
	for(size_t tries = 0; tries < 50; tries++) {
   d5abc:	3d01      	subs	r5, #1
   d5abe:	d1f4      	bne.n	d5aaa <_ZN8MCP7941013waitForEEPROMEv+0x6>
			// log.trace("deviceWriteEEPROM got ack after %u tries", tries);
			break;
		}
	}
}
   d5ac0:	bd38      	pop	{r3, r4, r5, pc}
	...

000d5ac4 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj>:
int MCP79410::deviceWriteEEPROM(uint8_t addr, const uint8_t *buf, size_t bufLen) {
   d5ac4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5ac8:	4604      	mov	r4, r0
   d5aca:	460f      	mov	r7, r1
   d5acc:	4616      	mov	r6, r2
   d5ace:	eb02 0803 	add.w	r8, r2, r3
	while(offset < bufLen) {
   d5ad2:	45b0      	cmp	r8, r6
   d5ad4:	d020      	beq.n	d5b18 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x54>
		wire.beginTransmission(EEPROM_I2C_ADDR);
   d5ad6:	6860      	ldr	r0, [r4, #4]
   d5ad8:	2157      	movs	r1, #87	; 0x57
   d5ada:	f001 fb08 	bl	d70ee <_ZN7TwoWire17beginTransmissionEh>
		wire.write(addr + offset);
   d5ade:	4639      	mov	r1, r7
   d5ae0:	6860      	ldr	r0, [r4, #4]
   d5ae2:	f7ff fb85 	bl	d51f0 <_ZN7TwoWire5writeEj>
			wire.write(buf[ii + offset]);
   d5ae6:	6860      	ldr	r0, [r4, #4]
   d5ae8:	f816 1b01 	ldrb.w	r1, [r6], #1
   d5aec:	6803      	ldr	r3, [r0, #0]
   d5aee:	689b      	ldr	r3, [r3, #8]
   d5af0:	4798      	blx	r3
		stat = wire.endTransmission(true);
   d5af2:	6860      	ldr	r0, [r4, #4]
   d5af4:	2101      	movs	r1, #1
   d5af6:	f001 fb19 	bl	d712c <_ZN7TwoWire15endTransmissionEh>
		if (stat != 0) {
   d5afa:	3701      	adds	r7, #1
   d5afc:	4605      	mov	r5, r0
   d5afe:	b138      	cbz	r0, d5b10 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x4c>
			log.info("deviceWriteEEPROM failed stat=%d", stat);
   d5b00:	4602      	mov	r2, r0
   d5b02:	4906      	ldr	r1, [pc, #24]	; (d5b1c <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x58>)
   d5b04:	4806      	ldr	r0, [pc, #24]	; (d5b20 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x5c>)
   d5b06:	f7fe fb51 	bl	d41ac <_ZNK5spark6Logger4infoEPKcz>
}
   d5b0a:	4628      	mov	r0, r5
   d5b0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		waitForEEPROM();
   d5b10:	4620      	mov	r0, r4
   d5b12:	f7ff ffc7 	bl	d5aa4 <_ZN8MCP7941013waitForEEPROMEv>
	while(offset < bufLen) {
   d5b16:	e7dc      	b.n	d5ad2 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0xe>
   d5b18:	2500      	movs	r5, #0
	return stat;
   d5b1a:	e7f6      	b.n	d5b0a <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x46>
   d5b1c:	000dad75 	.word	0x000dad75
   d5b20:	2003e5e4 	.word	0x2003e5e4

000d5b24 <_ZN14MCP79410EEPROM9writeDataEjPKhj>:
bool MCP79410EEPROM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d5b24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if ((addr + dataLen) > length()) {
   d5b26:	18cf      	adds	r7, r1, r3
bool MCP79410EEPROM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d5b28:	461e      	mov	r6, r3
	if ((addr + dataLen) > length()) {
   d5b2a:	6803      	ldr	r3, [r0, #0]
bool MCP79410EEPROM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d5b2c:	9201      	str	r2, [sp, #4]
	if ((addr + dataLen) > length()) {
   d5b2e:	689b      	ldr	r3, [r3, #8]
bool MCP79410EEPROM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d5b30:	4604      	mov	r4, r0
   d5b32:	460d      	mov	r5, r1
	if ((addr + dataLen) > length()) {
   d5b34:	4798      	blx	r3
   d5b36:	4287      	cmp	r7, r0
   d5b38:	d80a      	bhi.n	d5b50 <_ZN14MCP79410EEPROM9writeDataEjPKhj+0x2c>
	int stat = parent->deviceWriteEEPROM(addr, data, dataLen);
   d5b3a:	9a01      	ldr	r2, [sp, #4]
   d5b3c:	6860      	ldr	r0, [r4, #4]
   d5b3e:	4633      	mov	r3, r6
   d5b40:	b2e9      	uxtb	r1, r5
   d5b42:	f7ff ffbf 	bl	d5ac4 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj>
	return (stat == 0);
   d5b46:	fab0 f080 	clz	r0, r0
   d5b4a:	0940      	lsrs	r0, r0, #5
}
   d5b4c:	b003      	add	sp, #12
   d5b4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return false;
   d5b50:	2000      	movs	r0, #0
   d5b52:	e7fb      	b.n	d5b4c <_ZN14MCP79410EEPROM9writeDataEjPKhj+0x28>

000d5b54 <_GLOBAL__sub_I__ZN18MCP79410MemoryBaseC2EP8MCP79410>:
        name_(name) {
   d5b54:	4b01      	ldr	r3, [pc, #4]	; (d5b5c <_GLOBAL__sub_I__ZN18MCP79410MemoryBaseC2EP8MCP79410+0x8>)
   d5b56:	4a02      	ldr	r2, [pc, #8]	; (d5b60 <_GLOBAL__sub_I__ZN18MCP79410MemoryBaseC2EP8MCP79410+0xc>)
   d5b58:	601a      	str	r2, [r3, #0]
}
   d5b5a:	4770      	bx	lr
   d5b5c:	2003e5e4 	.word	0x2003e5e4
   d5b60:	000dad96 	.word	0x000dad96

000d5b64 <_ZN16DeviceNameHelper4saveEv>:
}


void DeviceNameHelper::save() {
    // Overridden by DeviceNameHelperEEPROM
}
   d5b64:	4770      	bx	lr

000d5b66 <_ZNSt17_Function_handlerIFvR16DeviceNameHelperEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
    public:
      static bool
      _M_manager(_Any_data& __dest, const _Any_data& __source,
		 _Manager_operation __op)
      {
	switch (__op)
   d5b66:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   d5b68:	4603      	mov	r3, r0
	switch (__op)
   d5b6a:	d102      	bne.n	d5b72 <_ZNSt17_Function_handlerIFvR16DeviceNameHelperEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0xc>
	  case __get_type_info:
	    __dest._M_access<const type_info*>() = &typeid(_Functor);
	    break;
#endif
	  case __get_functor_ptr:
	    __dest._M_access<_Functor*>() =
   d5b6c:	6001      	str	r1, [r0, #0]

	  default:
	    _Base::_M_manager(__dest, __source, __op);
	  }
	return false;
      }
   d5b6e:	2000      	movs	r0, #0
   d5b70:	4770      	bx	lr
	  switch (__op)
   d5b72:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d5b74:	bf04      	itt	eq
   d5b76:	e9d1 0100 	ldrdeq	r0, r1, [r1]
   d5b7a:	e9c3 0100 	strdeq	r0, r1, [r3]
	}
   d5b7e:	e7f6      	b.n	d5b6e <_ZNSt17_Function_handlerIFvR16DeviceNameHelperEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x8>

000d5b80 <_ZN16DeviceNameHelper19subscriptionHandlerEPKcS1_>:
    }
}



void DeviceNameHelper::subscriptionHandler(const char *eventName, const char *eventData) {
   d5b80:	b513      	push	{r0, r1, r4, lr}
   d5b82:	4604      	mov	r4, r0

    if (strlen(eventData) < DEVICENAMEHELPER_MAX_NAME_LEN) {
   d5b84:	4610      	mov	r0, r2
   d5b86:	9201      	str	r2, [sp, #4]
   d5b88:	f004 fda3 	bl	da6d2 <strlen>
   d5b8c:	6863      	ldr	r3, [r4, #4]
   d5b8e:	9901      	ldr	r1, [sp, #4]
   d5b90:	4602      	mov	r2, r0
   d5b92:	2a1e      	cmp	r2, #30
   d5b94:	f103 000c 	add.w	r0, r3, #12
   d5b98:	d806      	bhi.n	d5ba8 <_ZN16DeviceNameHelper19subscriptionHandlerEPKcS1_+0x28>
        // Fits
        strcpy(data->name, eventData);
   d5b9a:	f004 fd74 	bl	da686 <strcpy>
    else {
        // Need to truncate
        strncpy(data->name, eventData, DEVICENAMEHELPER_MAX_NAME_LEN);
        data->name[DEVICENAMEHELPER_MAX_NAME_LEN] = 0;
    }
    gotResponse = true;
   d5b9e:	2301      	movs	r3, #1
   d5ba0:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
   d5ba4:	b002      	add	sp, #8
   d5ba6:	bd10      	pop	{r4, pc}
        strncpy(data->name, eventData, DEVICENAMEHELPER_MAX_NAME_LEN);
   d5ba8:	221f      	movs	r2, #31
   d5baa:	f004 fdac 	bl	da706 <strncpy>
        data->name[DEVICENAMEHELPER_MAX_NAME_LEN] = 0;
   d5bae:	6863      	ldr	r3, [r4, #4]
   d5bb0:	2200      	movs	r2, #0
   d5bb2:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
   d5bb6:	e7f2      	b.n	d5b9e <_ZN16DeviceNameHelper19subscriptionHandlerEPKcS1_+0x1e>

000d5bb8 <_ZN22DeviceNameHelperEEPROM4saveEv>:
}
DeviceNameHelperEEPROM::~DeviceNameHelperEEPROM() {

}

void DeviceNameHelperEEPROM::save() {
   d5bb8:	b510      	push	{r4, lr}
   d5bba:	4604      	mov	r4, r0
    EEPROM.put(eepromStart, eepromData);
   d5bbc:	f003 fd82 	bl	d96c4 <_Z21__fetch_global_EEPROMv>
        return t;
    }

    template <typename T> const T &put( int idx, const T &t )
    {
        HAL_EEPROM_Put(idx, &t, sizeof(T));
   d5bc0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   d5bc2:	f104 013c 	add.w	r1, r4, #60	; 0x3c
   d5bc6:	222c      	movs	r2, #44	; 0x2c
}
   d5bc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d5bcc:	f000 bad8 	b.w	d6180 <HAL_EEPROM_Put>

000d5bd0 <_ZNSt17_Function_handlerIFvR16DeviceNameHelperEMS0_FvvEE9_M_invokeERKSt9_Any_dataS1_>:

      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d5bd0:	b410      	push	{r4}

  template<typename _Res, typename _MemFun, typename _Tp, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_memfun_ref, _MemFun&& __f, _Tp&& __t,
		  _Args&&... __args)
    { return (__invfwd<_Tp>(__t).*__f)(std::forward<_Args>(__args)...); }
   d5bd2:	6842      	ldr	r2, [r0, #4]
   d5bd4:	4603      	mov	r3, r0
   d5bd6:	1054      	asrs	r4, r2, #1
   d5bd8:	eb01 0062 	add.w	r0, r1, r2, asr #1
   d5bdc:	07d2      	lsls	r2, r2, #31
   d5bde:	bf48      	it	mi
   d5be0:	590a      	ldrmi	r2, [r1, r4]
   d5be2:	681b      	ldr	r3, [r3, #0]
      {
	std::__invoke(_Base::_M_get_pointer(__functor)->__value,
		      std::forward<_ArgTypes>(__args)...);
      }
   d5be4:	f85d 4b04 	ldr.w	r4, [sp], #4
   d5be8:	bf48      	it	mi
   d5bea:	58d3      	ldrmi	r3, [r2, r3]
   d5bec:	4718      	bx	r3

000d5bee <_ZNSt14_Function_base13_Base_managerISt5_BindIFM16DeviceNameHelperFvPKcS4_EPS2_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation>:
	  switch (__op)
   d5bee:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d5bf0:	b538      	push	{r3, r4, r5, lr}
   d5bf2:	4604      	mov	r4, r0
	  switch (__op)
   d5bf4:	d007      	beq.n	d5c06 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM16DeviceNameHelperFvPKcS4_EPS2_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x18>
   d5bf6:	2a03      	cmp	r2, #3
   d5bf8:	d011      	beq.n	d5c1e <_ZNSt14_Function_base13_Base_managerISt5_BindIFM16DeviceNameHelperFvPKcS4_EPS2_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x30>
   d5bfa:	2a01      	cmp	r2, #1
   d5bfc:	d101      	bne.n	d5c02 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM16DeviceNameHelperFvPKcS4_EPS2_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d5bfe:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   d5c00:	6023      	str	r3, [r4, #0]
	}
   d5c02:	2000      	movs	r0, #0
   d5c04:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d5c06:	200c      	movs	r0, #12
	  __dest._M_access<_Functor*>() =
   d5c08:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d5c0a:	f7fe fa44 	bl	d4096 <_Znwj>
   d5c0e:	4603      	mov	r3, r0
   d5c10:	2800      	cmp	r0, #0
   d5c12:	d0f5      	beq.n	d5c00 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM16DeviceNameHelperFvPKcS4_EPS2_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x12>
   d5c14:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   d5c18:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   d5c1c:	e7f0      	b.n	d5c00 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM16DeviceNameHelperFvPKcS4_EPS2_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x12>
	  delete __victim._M_access<_Functor*>();
   d5c1e:	6800      	ldr	r0, [r0, #0]
   d5c20:	2800      	cmp	r0, #0
   d5c22:	d0ee      	beq.n	d5c02 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM16DeviceNameHelperFvPKcS4_EPS2_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x14>
   d5c24:	210c      	movs	r1, #12
   d5c26:	f003 fddd 	bl	d97e4 <_ZdlPvj>
   d5c2a:	e7ea      	b.n	d5c02 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM16DeviceNameHelperFvPKcS4_EPS2_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x14>

000d5c2c <_ZNSt17_Function_handlerIFvPKcS1_ESt5_BindIFM16DeviceNameHelperFvS1_S1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE9_M_invokeERKSt9_Any_dataOS1_SH_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d5c2c:	b470      	push	{r4, r5, r6}
	    return __source._M_access<_Functor*>();
   d5c2e:	6803      	ldr	r3, [r0, #0]
      // Call unqualified
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return std::__invoke(_M_f,
   d5c30:	6809      	ldr	r1, [r1, #0]
  template<typename _Res, typename _MemFun, typename _Tp, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_memfun_deref, _MemFun&& __f, _Tp&& __t,
		  _Args&&... __args)
    {
      return ((*std::forward<_Tp>(__t)).*__f)(std::forward<_Args>(__args)...);
   d5c32:	685c      	ldr	r4, [r3, #4]
   d5c34:	689d      	ldr	r5, [r3, #8]
   d5c36:	681b      	ldr	r3, [r3, #0]
   d5c38:	6812      	ldr	r2, [r2, #0]
   d5c3a:	1066      	asrs	r6, r4, #1
   d5c3c:	eb05 0064 	add.w	r0, r5, r4, asr #1
   d5c40:	07e4      	lsls	r4, r4, #31
   d5c42:	bf44      	itt	mi
   d5c44:	59ac      	ldrmi	r4, [r5, r6]
   d5c46:	58e3      	ldrmi	r3, [r4, r3]
      }
   d5c48:	bc70      	pop	{r4, r5, r6}
   d5c4a:	4718      	bx	r3

000d5c4c <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   d5c4c:	b510      	push	{r4, lr}
      if (_M_manager)
   d5c4e:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d5c50:	4604      	mov	r4, r0
      if (_M_manager)
   d5c52:	b113      	cbz	r3, d5c5a <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5c54:	2203      	movs	r2, #3
   d5c56:	4601      	mov	r1, r0
   d5c58:	4798      	blx	r3
    }
   d5c5a:	4620      	mov	r0, r4
   d5c5c:	bd10      	pop	{r4, pc}
	...

000d5c60 <_ZN16DeviceNameHelperD1Ev>:
DeviceNameHelper::~DeviceNameHelper() {
   d5c60:	b510      	push	{r4, lr}
   d5c62:	4b06      	ldr	r3, [pc, #24]	; (d5c7c <_ZN16DeviceNameHelperD1Ev+0x1c>)
   d5c64:	4604      	mov	r4, r0
   d5c66:	f840 3b20 	str.w	r3, [r0], #32
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5c6a:	f7ff ffef 	bl	d5c4c <_ZNSt14_Function_baseD1Ev>
   d5c6e:	f104 0010 	add.w	r0, r4, #16
   d5c72:	f7ff ffeb 	bl	d5c4c <_ZNSt14_Function_baseD1Ev>
}
   d5c76:	4620      	mov	r0, r4
   d5c78:	bd10      	pop	{r4, pc}
   d5c7a:	bf00      	nop
   d5c7c:	000dae28 	.word	0x000dae28

000d5c80 <_ZN16DeviceNameHelperD0Ev>:
DeviceNameHelper::~DeviceNameHelper() {
   d5c80:	b510      	push	{r4, lr}
   d5c82:	4604      	mov	r4, r0
}
   d5c84:	f7ff ffec 	bl	d5c60 <_ZN16DeviceNameHelperD1Ev>
   d5c88:	4620      	mov	r0, r4
   d5c8a:	2138      	movs	r1, #56	; 0x38
   d5c8c:	f003 fdaa 	bl	d97e4 <_ZdlPvj>
   d5c90:	4620      	mov	r0, r4
   d5c92:	bd10      	pop	{r4, pc}

000d5c94 <_ZN22DeviceNameHelperEEPROMD1Ev>:
DeviceNameHelperEEPROM::~DeviceNameHelperEEPROM() {
   d5c94:	b510      	push	{r4, lr}
   d5c96:	4b03      	ldr	r3, [pc, #12]	; (d5ca4 <_ZN22DeviceNameHelperEEPROMD1Ev+0x10>)
   d5c98:	6003      	str	r3, [r0, #0]
   d5c9a:	4604      	mov	r4, r0
   d5c9c:	f7ff ffe0 	bl	d5c60 <_ZN16DeviceNameHelperD1Ev>
}
   d5ca0:	4620      	mov	r0, r4
   d5ca2:	bd10      	pop	{r4, pc}
   d5ca4:	000dae3c 	.word	0x000dae3c

000d5ca8 <_ZN22DeviceNameHelperEEPROMD0Ev>:
DeviceNameHelperEEPROM::~DeviceNameHelperEEPROM() {
   d5ca8:	b510      	push	{r4, lr}
   d5caa:	4604      	mov	r4, r0
}
   d5cac:	f7ff fff2 	bl	d5c94 <_ZN22DeviceNameHelperEEPROMD1Ev>
   d5cb0:	4620      	mov	r0, r4
   d5cb2:	2168      	movs	r1, #104	; 0x68
   d5cb4:	f003 fd96 	bl	d97e4 <_ZdlPvj>
   d5cb8:	4620      	mov	r0, r4
   d5cba:	bd10      	pop	{r4, pc}

000d5cbc <_ZN16DeviceNameHelperC1Ev>:
DeviceNameHelper::DeviceNameHelper() {
   d5cbc:	b530      	push	{r4, r5, lr}
   d5cbe:	4a07      	ldr	r2, [pc, #28]	; (d5cdc <_ZN16DeviceNameHelperC1Ev+0x20>)
   d5cc0:	6002      	str	r2, [r0, #0]
   d5cc2:	2400      	movs	r4, #0
   d5cc4:	2200      	movs	r2, #0
   d5cc6:	2500      	movs	r5, #0
   d5cc8:	e9c0 4502 	strd	r4, r5, [r0, #8]
   d5ccc:	6042      	str	r2, [r0, #4]
    _Function_base() : _M_manager(nullptr) { }
   d5cce:	6182      	str	r2, [r0, #24]
   d5cd0:	6282      	str	r2, [r0, #40]	; 0x28
   d5cd2:	6302      	str	r2, [r0, #48]	; 0x30
   d5cd4:	8682      	strh	r2, [r0, #52]	; 0x34
   d5cd6:	f880 2036 	strb.w	r2, [r0, #54]	; 0x36
}
   d5cda:	bd30      	pop	{r4, r5, pc}
   d5cdc:	000dae28 	.word	0x000dae28

000d5ce0 <_ZN22DeviceNameHelperEEPROMC1Ev>:
DeviceNameHelperEEPROM::DeviceNameHelperEEPROM() {
   d5ce0:	b508      	push	{r3, lr}
   d5ce2:	4603      	mov	r3, r0
   d5ce4:	f7ff ffea 	bl	d5cbc <_ZN16DeviceNameHelperC1Ev>
   d5ce8:	4a01      	ldr	r2, [pc, #4]	; (d5cf0 <_ZN22DeviceNameHelperEEPROMC1Ev+0x10>)
   d5cea:	601a      	str	r2, [r3, #0]
}
   d5cec:	4618      	mov	r0, r3
   d5cee:	bd08      	pop	{r3, pc}
   d5cf0:	000dae3c 	.word	0x000dae3c

000d5cf4 <_ZN22DeviceNameHelperEEPROM8instanceEv>:
DeviceNameHelperEEPROM &DeviceNameHelperEEPROM::instance() {
   d5cf4:	b510      	push	{r4, lr}
    if (!_instance) {
   d5cf6:	4c06      	ldr	r4, [pc, #24]	; (d5d10 <_ZN22DeviceNameHelperEEPROM8instanceEv+0x1c>)
   d5cf8:	6823      	ldr	r3, [r4, #0]
   d5cfa:	b93b      	cbnz	r3, d5d0c <_ZN22DeviceNameHelperEEPROM8instanceEv+0x18>
        _instance = new DeviceNameHelperEEPROM();
   d5cfc:	2068      	movs	r0, #104	; 0x68
   d5cfe:	f7fe f9ca 	bl	d4096 <_Znwj>
   d5d02:	4601      	mov	r1, r0
   d5d04:	b108      	cbz	r0, d5d0a <_ZN22DeviceNameHelperEEPROM8instanceEv+0x16>
   d5d06:	f7ff ffeb 	bl	d5ce0 <_ZN22DeviceNameHelperEEPROMC1Ev>
   d5d0a:	6021      	str	r1, [r4, #0]
}
   d5d0c:	6820      	ldr	r0, [r4, #0]
   d5d0e:	bd10      	pop	{r4, pc}
   d5d10:	2003e5ec 	.word	0x2003e5ec

000d5d14 <_ZNSt8functionIFvPKcS1_EEC1ERKS3_>:
    function(_Functor) -> function<_Signature>;
#endif

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d5d14:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d5d16:	2300      	movs	r3, #0
   d5d18:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d5d1a:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d5d1c:	4604      	mov	r4, r0
   d5d1e:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d5d20:	b12b      	cbz	r3, d5d2e <_ZNSt8functionIFvPKcS1_EEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d5d22:	2202      	movs	r2, #2
   d5d24:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d5d26:	68eb      	ldr	r3, [r5, #12]
   d5d28:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d5d2a:	68ab      	ldr	r3, [r5, #8]
   d5d2c:	60a3      	str	r3, [r4, #8]
	}
    }
   d5d2e:	4620      	mov	r0, r4
   d5d30:	bd38      	pop	{r3, r4, r5, pc}

000d5d32 <_ZNKSt8functionIFvPKcEEclES1_>:
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d5d32:	b507      	push	{r0, r1, r2, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5d34:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d5d36:	9101      	str	r1, [sp, #4]
      if (_M_empty())
   d5d38:	b90a      	cbnz	r2, d5d3e <_ZNKSt8functionIFvPKcEEclES1_+0xc>
	__throw_bad_function_call();
   d5d3a:	f003 fd59 	bl	d97f0 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5d3e:	68c3      	ldr	r3, [r0, #12]
   d5d40:	a901      	add	r1, sp, #4
   d5d42:	4798      	blx	r3
    }
   d5d44:	b003      	add	sp, #12
   d5d46:	f85d fb04 	ldr.w	pc, [sp], #4

000d5d4a <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    inline
#if __cplusplus >= 201103L
    typename enable_if<__and_<__not_<__is_tuple_like<_Tp>>,
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
    swap(_Tp& __a, _Tp& __b)
   d5d4a:	b513      	push	{r0, r1, r4, lr}
   d5d4c:	460b      	mov	r3, r1
   d5d4e:	4602      	mov	r2, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5d50:	e9d0 0100 	ldrd	r0, r1, [r0]
   d5d54:	466c      	mov	r4, sp
   d5d56:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d5d5a:	e893 0003 	ldmia.w	r3, {r0, r1}
   d5d5e:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d5d62:	e894 0003 	ldmia.w	r4, {r0, r1}
   d5d66:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d5d6a:	b002      	add	sp, #8
   d5d6c:	bd10      	pop	{r4, pc}
	...

000d5d70 <_ZNSt8functionIFvR16DeviceNameHelperEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>:
	operator=(_Functor&& __f)
   d5d70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d5d72:	e9d1 2300 	ldrd	r2, r3, [r1]
    _Function_base() : _M_manager(nullptr) { }
   d5d76:	2100      	movs	r1, #0
	operator=(_Functor&& __f)
   d5d78:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   d5d7a:	9102      	str	r1, [sp, #8]
	  { return __mp != nullptr; }
   d5d7c:	b90a      	cbnz	r2, d5d82 <_ZNSt8functionIFvR16DeviceNameHelperEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x12>
   d5d7e:	07d9      	lsls	r1, r3, #31
   d5d80:	d505      	bpl.n	d5d8e <_ZNSt8functionIFvR16DeviceNameHelperEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x1e>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d5d82:	e9cd 2300 	strd	r2, r3, [sp]
	    _M_invoker = &_My_handler::_M_invoke;
   d5d86:	4b0b      	ldr	r3, [pc, #44]	; (d5db4 <_ZNSt8functionIFvR16DeviceNameHelperEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x44>)
   d5d88:	9303      	str	r3, [sp, #12]
	    _M_manager = &_My_handler::_M_manager;
   d5d8a:	4b0b      	ldr	r3, [pc, #44]	; (d5db8 <_ZNSt8functionIFvR16DeviceNameHelperEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x48>)
   d5d8c:	9302      	str	r3, [sp, #8]
	std::swap(_M_functor, __x._M_functor);
   d5d8e:	4621      	mov	r1, r4
   d5d90:	4668      	mov	r0, sp
   d5d92:	f7ff ffda 	bl	d5d4a <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5d96:	9b02      	ldr	r3, [sp, #8]
      __a = _GLIBCXX_MOVE(__b);
   d5d98:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d5d9a:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5d9c:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d5d9e:	9202      	str	r2, [sp, #8]
    class function<_Res(_ArgTypes...)>
   d5da0:	4668      	mov	r0, sp
   d5da2:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d5da4:	60e3      	str	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   d5da6:	9203      	str	r2, [sp, #12]
   d5da8:	f7ff ff50 	bl	d5c4c <_ZNSt14_Function_baseD1Ev>
	}
   d5dac:	4620      	mov	r0, r4
   d5dae:	b004      	add	sp, #16
   d5db0:	bd10      	pop	{r4, pc}
   d5db2:	bf00      	nop
   d5db4:	000d5bd1 	.word	0x000d5bd1
   d5db8:	000d5b67 	.word	0x000d5b67

000d5dbc <_ZN16DeviceNameHelper11commonSetupEv>:
void DeviceNameHelper::commonSetup() {
   d5dbc:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d5dbe:	4604      	mov	r4, r0
    if (data->magic != DATA_MAGIC || data->size != sizeof(DeviceNameHelperData)) {
   d5dc0:	6840      	ldr	r0, [r0, #4]
   d5dc2:	4d0d      	ldr	r5, [pc, #52]	; (d5df8 <_ZN16DeviceNameHelper11commonSetupEv+0x3c>)
   d5dc4:	6802      	ldr	r2, [r0, #0]
   d5dc6:	42aa      	cmp	r2, r5
   d5dc8:	d102      	bne.n	d5dd0 <_ZN16DeviceNameHelper11commonSetupEv+0x14>
   d5dca:	7903      	ldrb	r3, [r0, #4]
   d5dcc:	2b2c      	cmp	r3, #44	; 0x2c
   d5dce:	d008      	beq.n	d5de2 <_ZN16DeviceNameHelper11commonSetupEv+0x26>
        memset(data, 0, sizeof(DeviceNameHelperData));     
   d5dd0:	262c      	movs	r6, #44	; 0x2c
   d5dd2:	4632      	mov	r2, r6
   d5dd4:	2100      	movs	r1, #0
   d5dd6:	f004 fc09 	bl	da5ec <memset>
        data->magic = DATA_MAGIC;
   d5dda:	6863      	ldr	r3, [r4, #4]
   d5ddc:	601d      	str	r5, [r3, #0]
        data->size = (uint8_t) sizeof(DeviceNameHelperData);
   d5dde:	6863      	ldr	r3, [r4, #4]
   d5de0:	711e      	strb	r6, [r3, #4]
    stateHandler = &DeviceNameHelper::stateStart;
   d5de2:	4b06      	ldr	r3, [pc, #24]	; (d5dfc <_ZN16DeviceNameHelper11commonSetupEv+0x40>)
   d5de4:	9300      	str	r3, [sp, #0]
   d5de6:	4669      	mov	r1, sp
   d5de8:	2300      	movs	r3, #0
   d5dea:	f104 0020 	add.w	r0, r4, #32
   d5dee:	9301      	str	r3, [sp, #4]
   d5df0:	f7ff ffbe 	bl	d5d70 <_ZNSt8functionIFvR16DeviceNameHelperEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
}
   d5df4:	b002      	add	sp, #8
   d5df6:	bd70      	pop	{r4, r5, r6, pc}
   d5df8:	7787a2f2 	.word	0x7787a2f2
   d5dfc:	000d5e29 	.word	0x000d5e29

000d5e00 <_ZN22DeviceNameHelperEEPROM5setupEi>:
void DeviceNameHelperEEPROM::setup(int eepromStart) {
   d5e00:	b570      	push	{r4, r5, r6, lr}
    this->data = &eepromData;
   d5e02:	f100 063c 	add.w	r6, r0, #60	; 0x3c
void DeviceNameHelperEEPROM::setup(int eepromStart) {
   d5e06:	460d      	mov	r5, r1
    this->eepromStart = eepromStart;
   d5e08:	6381      	str	r1, [r0, #56]	; 0x38
    this->data = &eepromData;
   d5e0a:	6046      	str	r6, [r0, #4]
void DeviceNameHelperEEPROM::setup(int eepromStart) {
   d5e0c:	4604      	mov	r4, r0
    EEPROM.get(eepromStart, eepromData);
   d5e0e:	f003 fc59 	bl	d96c4 <_Z21__fetch_global_EEPROMv>
        HAL_EEPROM_Get(idx, &t, sizeof(T));
   d5e12:	4628      	mov	r0, r5
   d5e14:	4631      	mov	r1, r6
   d5e16:	222c      	movs	r2, #44	; 0x2c
   d5e18:	f000 f9aa 	bl	d6170 <HAL_EEPROM_Get>
    commonSetup();
   d5e1c:	4620      	mov	r0, r4
}
   d5e1e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    commonSetup();
   d5e22:	f7ff bfcb 	b.w	d5dbc <_ZN16DeviceNameHelper11commonSetupEv>
	...

000d5e28 <_ZN16DeviceNameHelper10stateStartEv>:
void DeviceNameHelper::stateStart() {
   d5e28:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (data->name[0]) {
   d5e2a:	6841      	ldr	r1, [r0, #4]
   d5e2c:	7b0b      	ldrb	r3, [r1, #12]
void DeviceNameHelper::stateStart() {
   d5e2e:	4604      	mov	r4, r0
   d5e30:	f100 0520 	add.w	r5, r0, #32
    if (data->name[0]) {
   d5e34:	b193      	cbz	r3, d5e5c <_ZN16DeviceNameHelper10stateStartEv+0x34>
        if (nameCallback) {
   d5e36:	6983      	ldr	r3, [r0, #24]
   d5e38:	b11b      	cbz	r3, d5e42 <_ZN16DeviceNameHelper10stateStartEv+0x1a>
            nameCallback(data->name);
   d5e3a:	310c      	adds	r1, #12
   d5e3c:	3010      	adds	r0, #16
   d5e3e:	f7ff ff78 	bl	d5d32 <_ZNKSt8functionIFvPKcEEclES1_>
        stateHandler = &DeviceNameHelper::stateWaitRecheck;
   d5e42:	4b0a      	ldr	r3, [pc, #40]	; (d5e6c <_ZN16DeviceNameHelper10stateStartEv+0x44>)
   d5e44:	9300      	str	r3, [sp, #0]
   d5e46:	4669      	mov	r1, sp
   d5e48:	2300      	movs	r3, #0
   d5e4a:	4628      	mov	r0, r5
   d5e4c:	9301      	str	r3, [sp, #4]
   d5e4e:	f7ff ff8f 	bl	d5d70 <_ZNSt8functionIFvR16DeviceNameHelperEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
   d5e52:	f000 f97d 	bl	d6150 <HAL_Timer_Get_Milli_Seconds>
        stateTime = millis();
   d5e56:	6320      	str	r0, [r4, #48]	; 0x30
}
   d5e58:	b003      	add	sp, #12
   d5e5a:	bd30      	pop	{r4, r5, pc}
    stateHandler = &DeviceNameHelper::stateSubscribe;
   d5e5c:	4a04      	ldr	r2, [pc, #16]	; (d5e70 <_ZN16DeviceNameHelper10stateStartEv+0x48>)
   d5e5e:	4669      	mov	r1, sp
   d5e60:	4628      	mov	r0, r5
   d5e62:	e9cd 2300 	strd	r2, r3, [sp]
   d5e66:	f7ff ff83 	bl	d5d70 <_ZNSt8functionIFvR16DeviceNameHelperEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
   d5e6a:	e7f5      	b.n	d5e58 <_ZN16DeviceNameHelper10stateStartEv+0x30>
   d5e6c:	000d5fc5 	.word	0x000d5fc5
   d5e70:	000d604d 	.word	0x000d604d

000d5e74 <_ZN16DeviceNameHelper18stateWaitConnectedEv>:
void DeviceNameHelper::stateWaitConnected() {
   d5e74:	b513      	push	{r0, r1, r4, lr}
   d5e76:	4604      	mov	r4, r0
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d5e78:	f000 fba4 	bl	d65c4 <spark_cloud_flag_connected>
    if (!Particle.connected() || !Time.isValid()) {
   d5e7c:	b170      	cbz	r0, d5e9c <_ZN16DeviceNameHelper18stateWaitConnectedEv+0x28>
   d5e7e:	f003 f947 	bl	d9110 <_ZN9TimeClass7isValidEv>
   d5e82:	b158      	cbz	r0, d5e9c <_ZN16DeviceNameHelper18stateWaitConnectedEv+0x28>
    stateHandler = &DeviceNameHelper::stateWaitRequest;
   d5e84:	4b06      	ldr	r3, [pc, #24]	; (d5ea0 <_ZN16DeviceNameHelper18stateWaitConnectedEv+0x2c>)
   d5e86:	9300      	str	r3, [sp, #0]
   d5e88:	4669      	mov	r1, sp
   d5e8a:	2300      	movs	r3, #0
   d5e8c:	f104 0020 	add.w	r0, r4, #32
   d5e90:	9301      	str	r3, [sp, #4]
   d5e92:	f7ff ff6d 	bl	d5d70 <_ZNSt8functionIFvR16DeviceNameHelperEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
   d5e96:	f000 f95b 	bl	d6150 <HAL_Timer_Get_Milli_Seconds>
    stateTime = millis();
   d5e9a:	6320      	str	r0, [r4, #48]	; 0x30
}
   d5e9c:	b002      	add	sp, #8
   d5e9e:	bd10      	pop	{r4, pc}
   d5ea0:	000d5ea5 	.word	0x000d5ea5

000d5ea4 <_ZN16DeviceNameHelper16stateWaitRequestEv>:
void DeviceNameHelper::stateWaitRequest() {
   d5ea4:	b530      	push	{r4, r5, lr}
   d5ea6:	4605      	mov	r5, r0
   d5ea8:	b085      	sub	sp, #20
   d5eaa:	f000 f951 	bl	d6150 <HAL_Timer_Get_Milli_Seconds>
    if (millis() - stateTime < POST_CONNECT_WAIT_MS) {
   d5eae:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   d5eb0:	1ac0      	subs	r0, r0, r3
   d5eb2:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
   d5eb6:	d329      	bcc.n	d5f0c <_ZN16DeviceNameHelper16stateWaitRequestEv+0x68>
    gotResponse = false;
   d5eb8:	4b15      	ldr	r3, [pc, #84]	; (d5f10 <_ZN16DeviceNameHelper16stateWaitRequestEv+0x6c>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d5eba:	4916      	ldr	r1, [pc, #88]	; (d5f14 <_ZN16DeviceNameHelper16stateWaitRequestEv+0x70>)
   d5ebc:	781b      	ldrb	r3, [r3, #0]
   d5ebe:	f88d 3000 	strb.w	r3, [sp]
   d5ec2:	2200      	movs	r2, #0
   d5ec4:	f885 2035 	strb.w	r2, [r5, #53]	; 0x35
   d5ec8:	233c      	movs	r3, #60	; 0x3c
   d5eca:	a802      	add	r0, sp, #8
   d5ecc:	f000 fe40 	bl	d6b50 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	if (_M_pi != nullptr)
   d5ed0:	9c03      	ldr	r4, [sp, #12]
   d5ed2:	b17c      	cbz	r4, d5ef4 <_ZN16DeviceNameHelper16stateWaitRequestEv+0x50>
      if (--_M_use_count == 0)
   d5ed4:	6863      	ldr	r3, [r4, #4]
   d5ed6:	3b01      	subs	r3, #1
   d5ed8:	6063      	str	r3, [r4, #4]
   d5eda:	b95b      	cbnz	r3, d5ef4 <_ZN16DeviceNameHelper16stateWaitRequestEv+0x50>
          _M_dispose();
   d5edc:	6823      	ldr	r3, [r4, #0]
   d5ede:	4620      	mov	r0, r4
   d5ee0:	689b      	ldr	r3, [r3, #8]
   d5ee2:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d5ee4:	68a3      	ldr	r3, [r4, #8]
   d5ee6:	3b01      	subs	r3, #1
   d5ee8:	60a3      	str	r3, [r4, #8]
   d5eea:	b91b      	cbnz	r3, d5ef4 <_ZN16DeviceNameHelper16stateWaitRequestEv+0x50>
            _M_destroy();
   d5eec:	6823      	ldr	r3, [r4, #0]
   d5eee:	4620      	mov	r0, r4
   d5ef0:	68db      	ldr	r3, [r3, #12]
   d5ef2:	4798      	blx	r3
    stateHandler = &DeviceNameHelper::stateWaitResponse;
   d5ef4:	4b08      	ldr	r3, [pc, #32]	; (d5f18 <_ZN16DeviceNameHelper16stateWaitRequestEv+0x74>)
   d5ef6:	9302      	str	r3, [sp, #8]
   d5ef8:	a902      	add	r1, sp, #8
   d5efa:	2300      	movs	r3, #0
   d5efc:	f105 0020 	add.w	r0, r5, #32
   d5f00:	9303      	str	r3, [sp, #12]
   d5f02:	f7ff ff35 	bl	d5d70 <_ZNSt8functionIFvR16DeviceNameHelperEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
   d5f06:	f000 f923 	bl	d6150 <HAL_Timer_Get_Milli_Seconds>
    stateTime = millis();
   d5f0a:	6328      	str	r0, [r5, #48]	; 0x30
}
   d5f0c:	b005      	add	sp, #20
   d5f0e:	bd30      	pop	{r4, r5, pc}
   d5f10:	2003e5e8 	.word	0x2003e5e8
   d5f14:	000dae08 	.word	0x000dae08
   d5f18:	000d5f1d 	.word	0x000d5f1d

000d5f1c <_ZN16DeviceNameHelper17stateWaitResponseEv>:
void DeviceNameHelper::stateWaitResponse() {
   d5f1c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if (gotResponse) {
   d5f1e:	f890 5035 	ldrb.w	r5, [r0, #53]	; 0x35
void DeviceNameHelper::stateWaitResponse() {
   d5f22:	4604      	mov	r4, r0
    if (gotResponse) {
   d5f24:	b31d      	cbz	r5, d5f6e <_ZN16DeviceNameHelper17stateWaitResponseEv+0x52>
        if (data->name[0]) {
   d5f26:	6846      	ldr	r6, [r0, #4]
   d5f28:	7b33      	ldrb	r3, [r6, #12]
   d5f2a:	f100 0520 	add.w	r5, r0, #32
   d5f2e:	b1db      	cbz	r3, d5f68 <_ZN16DeviceNameHelper17stateWaitResponseEv+0x4c>
            data->lastCheck = Time.now();
   d5f30:	f003 f90b 	bl	d914a <_ZN9TimeClass3nowEv>
   d5f34:	60b0      	str	r0, [r6, #8]
            save();
   d5f36:	6823      	ldr	r3, [r4, #0]
   d5f38:	4620      	mov	r0, r4
   d5f3a:	689b      	ldr	r3, [r3, #8]
   d5f3c:	4798      	blx	r3
            if (nameCallback) {
   d5f3e:	69a3      	ldr	r3, [r4, #24]
   d5f40:	b12b      	cbz	r3, d5f4e <_ZN16DeviceNameHelper17stateWaitResponseEv+0x32>
                nameCallback(data->name);
   d5f42:	6861      	ldr	r1, [r4, #4]
   d5f44:	f104 0010 	add.w	r0, r4, #16
   d5f48:	310c      	adds	r1, #12
   d5f4a:	f7ff fef2 	bl	d5d32 <_ZNKSt8functionIFvPKcEEclES1_>
            stateHandler = &DeviceNameHelper::stateWaitRecheck;
   d5f4e:	4b0f      	ldr	r3, [pc, #60]	; (d5f8c <_ZN16DeviceNameHelper17stateWaitResponseEv+0x70>)
   d5f50:	9300      	str	r3, [sp, #0]
   d5f52:	2300      	movs	r3, #0
            stateHandler = &DeviceNameHelper::stateWaitRetry;
   d5f54:	9301      	str	r3, [sp, #4]
   d5f56:	4669      	mov	r1, sp
   d5f58:	4628      	mov	r0, r5
        stateHandler = &DeviceNameHelper::stateWaitRetry;
   d5f5a:	f7ff ff09 	bl	d5d70 <_ZNSt8functionIFvR16DeviceNameHelperEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
   d5f5e:	f000 f8f7 	bl	d6150 <HAL_Timer_Get_Milli_Seconds>
        stateTime = millis();
   d5f62:	6320      	str	r0, [r4, #48]	; 0x30
}
   d5f64:	b002      	add	sp, #8
   d5f66:	bd70      	pop	{r4, r5, r6, pc}
            stateHandler = &DeviceNameHelper::stateWaitRetry;
   d5f68:	4a09      	ldr	r2, [pc, #36]	; (d5f90 <_ZN16DeviceNameHelper17stateWaitResponseEv+0x74>)
   d5f6a:	9200      	str	r2, [sp, #0]
   d5f6c:	e7f2      	b.n	d5f54 <_ZN16DeviceNameHelper17stateWaitResponseEv+0x38>
   d5f6e:	f000 f8ef 	bl	d6150 <HAL_Timer_Get_Milli_Seconds>
    if (millis() - stateTime >= RESPONSE_WAIT_MS) {
   d5f72:	6b23      	ldr	r3, [r4, #48]	; 0x30
   d5f74:	1ac0      	subs	r0, r0, r3
   d5f76:	f643 2397 	movw	r3, #14999	; 0x3a97
   d5f7a:	4298      	cmp	r0, r3
   d5f7c:	d9f2      	bls.n	d5f64 <_ZN16DeviceNameHelper17stateWaitResponseEv+0x48>
        stateHandler = &DeviceNameHelper::stateWaitRetry;
   d5f7e:	4b04      	ldr	r3, [pc, #16]	; (d5f90 <_ZN16DeviceNameHelper17stateWaitResponseEv+0x74>)
   d5f80:	4669      	mov	r1, sp
   d5f82:	e9cd 3500 	strd	r3, r5, [sp]
   d5f86:	f104 0020 	add.w	r0, r4, #32
   d5f8a:	e7e6      	b.n	d5f5a <_ZN16DeviceNameHelper17stateWaitResponseEv+0x3e>
   d5f8c:	000d5fc5 	.word	0x000d5fc5
   d5f90:	000d5f95 	.word	0x000d5f95

000d5f94 <_ZN16DeviceNameHelper14stateWaitRetryEv>:
void DeviceNameHelper::stateWaitRetry() {
   d5f94:	b513      	push	{r0, r1, r4, lr}
   d5f96:	4604      	mov	r4, r0
   d5f98:	f000 f8da 	bl	d6150 <HAL_Timer_Get_Milli_Seconds>
    if (millis() - stateTime >= RETRY_WAIT_MS) {
   d5f9c:	6b23      	ldr	r3, [r4, #48]	; 0x30
   d5f9e:	1ac0      	subs	r0, r0, r3
   d5fa0:	4b06      	ldr	r3, [pc, #24]	; (d5fbc <_ZN16DeviceNameHelper14stateWaitRetryEv+0x28>)
   d5fa2:	4298      	cmp	r0, r3
   d5fa4:	d908      	bls.n	d5fb8 <_ZN16DeviceNameHelper14stateWaitRetryEv+0x24>
        stateHandler = &DeviceNameHelper::stateWaitConnected;
   d5fa6:	4b06      	ldr	r3, [pc, #24]	; (d5fc0 <_ZN16DeviceNameHelper14stateWaitRetryEv+0x2c>)
   d5fa8:	9300      	str	r3, [sp, #0]
   d5faa:	4669      	mov	r1, sp
   d5fac:	2300      	movs	r3, #0
   d5fae:	f104 0020 	add.w	r0, r4, #32
   d5fb2:	9301      	str	r3, [sp, #4]
   d5fb4:	f7ff fedc 	bl	d5d70 <_ZNSt8functionIFvR16DeviceNameHelperEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
}
   d5fb8:	b002      	add	sp, #8
   d5fba:	bd10      	pop	{r4, pc}
   d5fbc:	000493df 	.word	0x000493df
   d5fc0:	000d5e75 	.word	0x000d5e75

000d5fc4 <_ZN16DeviceNameHelper16stateWaitRecheckEv>:
void DeviceNameHelper::stateWaitRecheck() {
   d5fc4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d5fc6:	4604      	mov	r4, r0
   d5fc8:	f000 f8c2 	bl	d6150 <HAL_Timer_Get_Milli_Seconds>
    if (millis() - stateTime < 10000) {
   d5fcc:	6b23      	ldr	r3, [r4, #48]	; 0x30
   d5fce:	1ac0      	subs	r0, r0, r3
   d5fd0:	f242 730f 	movw	r3, #9999	; 0x270f
   d5fd4:	4298      	cmp	r0, r3
   d5fd6:	d91e      	bls.n	d6016 <_ZN16DeviceNameHelper16stateWaitRecheckEv+0x52>
   d5fd8:	f000 f8ba 	bl	d6150 <HAL_Timer_Get_Milli_Seconds>
    if (forceCheck) {
   d5fdc:	f894 5036 	ldrb.w	r5, [r4, #54]	; 0x36
    stateTime = millis();
   d5fe0:	6320      	str	r0, [r4, #48]	; 0x30
    if (forceCheck) {
   d5fe2:	b15d      	cbz	r5, d5ffc <_ZN16DeviceNameHelper16stateWaitRecheckEv+0x38>
        stateHandler = &DeviceNameHelper::stateSubscribe;
   d5fe4:	4a18      	ldr	r2, [pc, #96]	; (d6048 <_ZN16DeviceNameHelper16stateWaitRecheckEv+0x84>)
        forceCheck = false;
   d5fe6:	2300      	movs	r3, #0
        stateHandler = &DeviceNameHelper::stateSubscribe;
   d5fe8:	e9cd 2300 	strd	r2, r3, [sp]
        forceCheck = false;
   d5fec:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
        stateHandler = &DeviceNameHelper::stateSubscribe;
   d5ff0:	4669      	mov	r1, sp
   d5ff2:	f104 0020 	add.w	r0, r4, #32
   d5ff6:	f7ff febb 	bl	d5d70 <_ZNSt8functionIFvR16DeviceNameHelperEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
        return;
   d5ffa:	e00c      	b.n	d6016 <_ZN16DeviceNameHelper16stateWaitRecheckEv+0x52>
    if (checkPeriod.count() == 0) {
   d5ffc:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   d6000:	4313      	orrs	r3, r2
   d6002:	d10a      	bne.n	d601a <_ZN16DeviceNameHelper16stateWaitRecheckEv+0x56>
	if (_M_manager)
   d6004:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   d6006:	b133      	cbz	r3, d6016 <_ZN16DeviceNameHelper16stateWaitRecheckEv+0x52>
        stateHandler = 0;
   d6008:	f104 0120 	add.w	r1, r4, #32
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
   d600c:	2203      	movs	r2, #3
   d600e:	4608      	mov	r0, r1
   d6010:	4798      	blx	r3
	    _M_invoker = nullptr;
   d6012:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
}
   d6016:	b003      	add	sp, #12
   d6018:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (Time.isValid() && (data->lastCheck + checkPeriod.count()) < Time.now()) {
   d601a:	f003 f879 	bl	d9110 <_ZN9TimeClass7isValidEv>
   d601e:	2800      	cmp	r0, #0
   d6020:	d0f9      	beq.n	d6016 <_ZN16DeviceNameHelper16stateWaitRecheckEv+0x52>
   d6022:	6863      	ldr	r3, [r4, #4]
   d6024:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
   d6028:	689b      	ldr	r3, [r3, #8]
   d602a:	18f6      	adds	r6, r6, r3
   d602c:	eb47 77e3 	adc.w	r7, r7, r3, asr #31
   d6030:	f003 f88b 	bl	d914a <_ZN9TimeClass3nowEv>
   d6034:	17c1      	asrs	r1, r0, #31
   d6036:	4286      	cmp	r6, r0
   d6038:	eb77 0301 	sbcs.w	r3, r7, r1
   d603c:	daeb      	bge.n	d6016 <_ZN16DeviceNameHelper16stateWaitRecheckEv+0x52>
        stateHandler = &DeviceNameHelper::stateSubscribe;
   d603e:	4b02      	ldr	r3, [pc, #8]	; (d6048 <_ZN16DeviceNameHelper16stateWaitRecheckEv+0x84>)
   d6040:	e9cd 3500 	strd	r3, r5, [sp]
   d6044:	e7d4      	b.n	d5ff0 <_ZN16DeviceNameHelper16stateWaitRecheckEv+0x2c>
   d6046:	bf00      	nop
   d6048:	000d604d 	.word	0x000d604d

000d604c <_ZN16DeviceNameHelper14stateSubscribeEv>:
void DeviceNameHelper::stateSubscribe() {
   d604c:	b530      	push	{r4, r5, lr}
    if (!hasSubscribed) {
   d604e:	f890 5034 	ldrb.w	r5, [r0, #52]	; 0x34
void DeviceNameHelper::stateSubscribe() {
   d6052:	b08b      	sub	sp, #44	; 0x2c
   d6054:	4604      	mov	r4, r0
    if (!hasSubscribed) {
   d6056:	bb6d      	cbnz	r5, d60b4 <_ZN16DeviceNameHelper14stateSubscribeEv+0x68>
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6058:	200c      	movs	r0, #12
    _Function_base() : _M_manager(nullptr) { }
   d605a:	9504      	str	r5, [sp, #16]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d605c:	f7fe f81b 	bl	d4096 <_Znwj>
   d6060:	b118      	cbz	r0, d606a <_ZN16DeviceNameHelper14stateSubscribeEv+0x1e>
	{ }

      _Bind(const _Bind&) = default;

      _Bind(_Bind&& __b)
      : _M_f(std::move(__b._M_f)), _M_bound_args(std::move(__b._M_bound_args))
   d6062:	4b1a      	ldr	r3, [pc, #104]	; (d60cc <_ZN16DeviceNameHelper14stateSubscribeEv+0x80>)
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d6064:	6084      	str	r4, [r0, #8]
   d6066:	e9c0 3500 	strd	r3, r5, [r0]
	    _M_invoker = &_My_handler::_M_invoke;
   d606a:	4b19      	ldr	r3, [pc, #100]	; (d60d0 <_ZN16DeviceNameHelper14stateSubscribeEv+0x84>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d606c:	9002      	str	r0, [sp, #8]
	    _M_invoker = &_My_handler::_M_invoke;
   d606e:	9305      	str	r3, [sp, #20]
        return subscribe_wiring(eventName, handler, scope);
   d6070:	a902      	add	r1, sp, #8
	    _M_manager = &_My_handler::_M_manager;
   d6072:	4b18      	ldr	r3, [pc, #96]	; (d60d4 <_ZN16DeviceNameHelper14stateSubscribeEv+0x88>)
   d6074:	9304      	str	r3, [sp, #16]
   d6076:	a806      	add	r0, sp, #24
   d6078:	f7ff fe4c 	bl	d5d14 <_ZNSt8functionIFvPKcS1_EEC1ERKS3_>
    }

    bool subscribe_wiring(const char *eventName, wiring_event_handler_t handler, Spark_Subscription_Scope_TypeDef scope, const char *deviceID = NULL)
    {
        bool success = false;
        if (handler) // if the call-wrapper has wrapped a callable object
   d607c:	9b08      	ldr	r3, [sp, #32]
   d607e:	b183      	cbz	r3, d60a2 <_ZN16DeviceNameHelper14stateSubscribeEv+0x56>
        {
            auto wrapper = new wiring_event_handler_t(handler);
   d6080:	2010      	movs	r0, #16
   d6082:	f7fe f808 	bl	d4096 <_Znwj>
   d6086:	4605      	mov	r5, r0
   d6088:	b158      	cbz	r0, d60a2 <_ZN16DeviceNameHelper14stateSubscribeEv+0x56>
   d608a:	a906      	add	r1, sp, #24
   d608c:	f7ff fe42 	bl	d5d14 <_ZNSt8functionIFvPKcS1_EEC1ERKS3_>
            if (wrapper) {
                success = spark_subscribe(eventName, (EventHandler)call_wiring_event_handler, wrapper, scope, deviceID, NULL);
   d6090:	2300      	movs	r3, #0
   d6092:	e9cd 3300 	strd	r3, r3, [sp]
   d6096:	4910      	ldr	r1, [pc, #64]	; (d60d8 <_ZN16DeviceNameHelper14stateSubscribeEv+0x8c>)
   d6098:	4810      	ldr	r0, [pc, #64]	; (d60dc <_ZN16DeviceNameHelper14stateSubscribeEv+0x90>)
   d609a:	2301      	movs	r3, #1
   d609c:	462a      	mov	r2, r5
   d609e:	f000 faa1 	bl	d65e4 <spark_subscribe>
    class function<_Res(_ArgTypes...)>
   d60a2:	a806      	add	r0, sp, #24
   d60a4:	f7ff fdd2 	bl	d5c4c <_ZNSt14_Function_baseD1Ev>
   d60a8:	a802      	add	r0, sp, #8
   d60aa:	f7ff fdcf 	bl	d5c4c <_ZNSt14_Function_baseD1Ev>
        hasSubscribed = true;
   d60ae:	2301      	movs	r3, #1
   d60b0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    stateHandler = &DeviceNameHelper::stateWaitConnected;
   d60b4:	4b0a      	ldr	r3, [pc, #40]	; (d60e0 <_ZN16DeviceNameHelper14stateSubscribeEv+0x94>)
   d60b6:	9306      	str	r3, [sp, #24]
   d60b8:	a906      	add	r1, sp, #24
   d60ba:	2300      	movs	r3, #0
   d60bc:	f104 0020 	add.w	r0, r4, #32
   d60c0:	9307      	str	r3, [sp, #28]
   d60c2:	f7ff fe55 	bl	d5d70 <_ZNSt8functionIFvR16DeviceNameHelperEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
}
   d60c6:	b00b      	add	sp, #44	; 0x2c
   d60c8:	bd30      	pop	{r4, r5, pc}
   d60ca:	bf00      	nop
   d60cc:	000d5b81 	.word	0x000d5b81
   d60d0:	000d5c2d 	.word	0x000d5c2d
   d60d4:	000d5bef 	.word	0x000d5bef
   d60d8:	000d6973 	.word	0x000d6973
   d60dc:	000dae08 	.word	0x000dae08
   d60e0:	000d5e75 	.word	0x000d5e75

000d60e4 <_GLOBAL__sub_I__ZN16DeviceNameHelper9_instanceE>:
   d60e4:	4b01      	ldr	r3, [pc, #4]	; (d60ec <_GLOBAL__sub_I__ZN16DeviceNameHelper9_instanceE+0x8>)
   d60e6:	2200      	movs	r2, #0
   d60e8:	701a      	strb	r2, [r3, #0]
    int fd = open(path, O_RDWR | O_CREAT);
    if (fd != -1) {
        write(fd, &fileData, sizeof(DeviceNameHelperData));
        close(fd);   
    }
}
   d60ea:	4770      	bx	lr
   d60ec:	2003e5e8 	.word	0x2003e5e8

000d60f0 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d60f0:	b508      	push	{r3, lr}
   d60f2:	4b02      	ldr	r3, [pc, #8]	; (d60fc <os_mutex_recursive_create+0xc>)
   d60f4:	681b      	ldr	r3, [r3, #0]
   d60f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d60f8:	9301      	str	r3, [sp, #4]
   d60fa:	bd08      	pop	{r3, pc}
   d60fc:	00030248 	.word	0x00030248

000d6100 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d6100:	b508      	push	{r3, lr}
   d6102:	4b02      	ldr	r3, [pc, #8]	; (d610c <os_mutex_recursive_destroy+0xc>)
   d6104:	681b      	ldr	r3, [r3, #0]
   d6106:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d6108:	9301      	str	r3, [sp, #4]
   d610a:	bd08      	pop	{r3, pc}
   d610c:	00030248 	.word	0x00030248

000d6110 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   d6110:	b508      	push	{r3, lr}
   d6112:	4b02      	ldr	r3, [pc, #8]	; (d611c <os_mutex_recursive_lock+0xc>)
   d6114:	681b      	ldr	r3, [r3, #0]
   d6116:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d6118:	9301      	str	r3, [sp, #4]
   d611a:	bd08      	pop	{r3, pc}
   d611c:	00030248 	.word	0x00030248

000d6120 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   d6120:	b508      	push	{r3, lr}
   d6122:	4b02      	ldr	r3, [pc, #8]	; (d612c <os_mutex_recursive_unlock+0xc>)
   d6124:	681b      	ldr	r3, [r3, #0]
   d6126:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d6128:	9301      	str	r3, [sp, #4]
   d612a:	bd08      	pop	{r3, pc}
   d612c:	00030248 	.word	0x00030248

000d6130 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d6130:	b508      	push	{r3, lr}
   d6132:	4b02      	ldr	r3, [pc, #8]	; (d613c <HAL_RNG_GetRandomNumber+0xc>)
   d6134:	681b      	ldr	r3, [r3, #0]
   d6136:	685b      	ldr	r3, [r3, #4]
   d6138:	9301      	str	r3, [sp, #4]
   d613a:	bd08      	pop	{r3, pc}
   d613c:	00030218 	.word	0x00030218

000d6140 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d6140:	b508      	push	{r3, lr}
   d6142:	4b02      	ldr	r3, [pc, #8]	; (d614c <HAL_Delay_Microseconds+0xc>)
   d6144:	681b      	ldr	r3, [r3, #0]
   d6146:	68db      	ldr	r3, [r3, #12]
   d6148:	9301      	str	r3, [sp, #4]
   d614a:	bd08      	pop	{r3, pc}
   d614c:	00030218 	.word	0x00030218

000d6150 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d6150:	b508      	push	{r3, lr}
   d6152:	4b02      	ldr	r3, [pc, #8]	; (d615c <HAL_Timer_Get_Milli_Seconds+0xc>)
   d6154:	681b      	ldr	r3, [r3, #0]
   d6156:	695b      	ldr	r3, [r3, #20]
   d6158:	9301      	str	r3, [sp, #4]
   d615a:	bd08      	pop	{r3, pc}
   d615c:	00030218 	.word	0x00030218

000d6160 <HAL_EEPROM_Init>:
DYNALIB_FN(BASE_IDX + 5, hal, hal_rtc_get_unixtime_deprecated, time32_t(void))
DYNALIB_FN(BASE_IDX + 6, hal, hal_rtc_set_unixtime_deprecated, void(time32_t))

DYNALIB_FN(BASE_IDX + 7, hal, hal_rtc_set_alarm, int(const struct timeval*, uint32_t, hal_rtc_alarm_handler, void*, void*))

DYNALIB_FN(BASE_IDX + 8, hal, HAL_EEPROM_Init, void(void))
   d6160:	b508      	push	{r3, lr}
   d6162:	4b02      	ldr	r3, [pc, #8]	; (d616c <HAL_EEPROM_Init+0xc>)
   d6164:	681b      	ldr	r3, [r3, #0]
   d6166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6168:	9301      	str	r3, [sp, #4]
   d616a:	bd08      	pop	{r3, pc}
   d616c:	00030218 	.word	0x00030218

000d6170 <HAL_EEPROM_Get>:

DYNALIB_FN(BASE_IDX + 12, hal, HAL_disable_irq, int(void))
DYNALIB_FN(BASE_IDX + 13, hal, HAL_enable_irq, void(int))
DYNALIB_FN(BASE_IDX + 14, hal, hal_rtc_cancel_alarm, void(void))

DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
   d6170:	b508      	push	{r3, lr}
   d6172:	4b02      	ldr	r3, [pc, #8]	; (d617c <HAL_EEPROM_Get+0xc>)
   d6174:	681b      	ldr	r3, [r3, #0]
   d6176:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d6178:	9301      	str	r3, [sp, #4]
   d617a:	bd08      	pop	{r3, pc}
   d617c:	00030218 	.word	0x00030218

000d6180 <HAL_EEPROM_Put>:
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
   d6180:	b508      	push	{r3, lr}
   d6182:	4b02      	ldr	r3, [pc, #8]	; (d618c <HAL_EEPROM_Put+0xc>)
   d6184:	681b      	ldr	r3, [r3, #0]
   d6186:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d6188:	9301      	str	r3, [sp, #4]
   d618a:	bd08      	pop	{r3, pc}
   d618c:	00030218 	.word	0x00030218

000d6190 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   d6190:	b508      	push	{r3, lr}
   d6192:	4b02      	ldr	r3, [pc, #8]	; (d619c <hal_rtc_time_is_valid+0xc>)
   d6194:	681b      	ldr	r3, [r3, #0]
   d6196:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d6198:	9301      	str	r3, [sp, #4]
   d619a:	bd08      	pop	{r3, pc}
   d619c:	00030218 	.word	0x00030218

000d61a0 <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   d61a0:	b508      	push	{r3, lr}
   d61a2:	4b02      	ldr	r3, [pc, #8]	; (d61ac <hal_rtc_get_time+0xc>)
   d61a4:	681b      	ldr	r3, [r3, #0]
   d61a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   d61a8:	9301      	str	r3, [sp, #4]
   d61aa:	bd08      	pop	{r3, pc}
   d61ac:	00030218 	.word	0x00030218

000d61b0 <hal_rtc_set_time>:
DYNALIB_FN(BASE_IDX + 24, hal, hal_rtc_set_time, int(const struct timeval*, void*))
   d61b0:	b508      	push	{r3, lr}
   d61b2:	4b02      	ldr	r3, [pc, #8]	; (d61bc <hal_rtc_set_time+0xc>)
   d61b4:	681b      	ldr	r3, [r3, #0]
   d61b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   d61b8:	9301      	str	r3, [sp, #4]
   d61ba:	bd08      	pop	{r3, pc}
   d61bc:	00030218 	.word	0x00030218

000d61c0 <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d61c0:	b508      	push	{r3, lr}
   d61c2:	4b02      	ldr	r3, [pc, #8]	; (d61cc <HAL_Validate_Pin_Function+0xc>)
   d61c4:	681b      	ldr	r3, [r3, #0]
   d61c6:	685b      	ldr	r3, [r3, #4]
   d61c8:	9301      	str	r3, [sp, #4]
   d61ca:	bd08      	pop	{r3, pc}
   d61cc:	0003022c 	.word	0x0003022c

000d61d0 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d61d0:	b508      	push	{r3, lr}
   d61d2:	4b02      	ldr	r3, [pc, #8]	; (d61dc <HAL_Pin_Mode+0xc>)
   d61d4:	681b      	ldr	r3, [r3, #0]
   d61d6:	689b      	ldr	r3, [r3, #8]
   d61d8:	9301      	str	r3, [sp, #4]
   d61da:	bd08      	pop	{r3, pc}
   d61dc:	0003022c 	.word	0x0003022c

000d61e0 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d61e0:	b508      	push	{r3, lr}
   d61e2:	4b02      	ldr	r3, [pc, #8]	; (d61ec <HAL_Get_Pin_Mode+0xc>)
   d61e4:	681b      	ldr	r3, [r3, #0]
   d61e6:	68db      	ldr	r3, [r3, #12]
   d61e8:	9301      	str	r3, [sp, #4]
   d61ea:	bd08      	pop	{r3, pc}
   d61ec:	0003022c 	.word	0x0003022c

000d61f0 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d61f0:	b508      	push	{r3, lr}
   d61f2:	4b02      	ldr	r3, [pc, #8]	; (d61fc <HAL_GPIO_Write+0xc>)
   d61f4:	681b      	ldr	r3, [r3, #0]
   d61f6:	691b      	ldr	r3, [r3, #16]
   d61f8:	9301      	str	r3, [sp, #4]
   d61fa:	bd08      	pop	{r3, pc}
   d61fc:	0003022c 	.word	0x0003022c

000d6200 <HAL_Interrupts_Attach>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   d6200:	b508      	push	{r3, lr}
   d6202:	4b02      	ldr	r3, [pc, #8]	; (d620c <HAL_Interrupts_Attach+0xc>)
   d6204:	681b      	ldr	r3, [r3, #0]
   d6206:	699b      	ldr	r3, [r3, #24]
   d6208:	9301      	str	r3, [sp, #4]
   d620a:	bd08      	pop	{r3, pc}
   d620c:	0003022c 	.word	0x0003022c

000d6210 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   d6210:	b508      	push	{r3, lr}
   d6212:	4b02      	ldr	r3, [pc, #8]	; (d621c <HAL_Interrupts_Detach+0xc>)
   d6214:	681b      	ldr	r3, [r3, #0]
   d6216:	69db      	ldr	r3, [r3, #28]
   d6218:	9301      	str	r3, [sp, #4]
   d621a:	bd08      	pop	{r3, pc}
   d621c:	0003022c 	.word	0x0003022c

000d6220 <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   d6220:	b508      	push	{r3, lr}
   d6222:	4b02      	ldr	r3, [pc, #8]	; (d622c <hal_adc_read+0xc>)
   d6224:	681b      	ldr	r3, [r3, #0]
   d6226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6228:	9301      	str	r3, [sp, #4]
   d622a:	bd08      	pop	{r3, pc}
   d622c:	0003022c 	.word	0x0003022c

000d6230 <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   d6230:	b508      	push	{r3, lr}
   d6232:	4b02      	ldr	r3, [pc, #8]	; (d623c <hal_i2c_begin+0xc>)
   d6234:	681b      	ldr	r3, [r3, #0]
   d6236:	68db      	ldr	r3, [r3, #12]
   d6238:	9301      	str	r3, [sp, #4]
   d623a:	bd08      	pop	{r3, pc}
   d623c:	00030228 	.word	0x00030228

000d6240 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   d6240:	b508      	push	{r3, lr}
   d6242:	4b02      	ldr	r3, [pc, #8]	; (d624c <hal_i2c_begin_transmission+0xc>)
   d6244:	681b      	ldr	r3, [r3, #0]
   d6246:	699b      	ldr	r3, [r3, #24]
   d6248:	9301      	str	r3, [sp, #4]
   d624a:	bd08      	pop	{r3, pc}
   d624c:	00030228 	.word	0x00030228

000d6250 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   d6250:	b508      	push	{r3, lr}
   d6252:	4b02      	ldr	r3, [pc, #8]	; (d625c <hal_i2c_end_transmission+0xc>)
   d6254:	681b      	ldr	r3, [r3, #0]
   d6256:	69db      	ldr	r3, [r3, #28]
   d6258:	9301      	str	r3, [sp, #4]
   d625a:	bd08      	pop	{r3, pc}
   d625c:	00030228 	.word	0x00030228

000d6260 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d6260:	b508      	push	{r3, lr}
   d6262:	4b02      	ldr	r3, [pc, #8]	; (d626c <hal_i2c_write+0xc>)
   d6264:	681b      	ldr	r3, [r3, #0]
   d6266:	6a1b      	ldr	r3, [r3, #32]
   d6268:	9301      	str	r3, [sp, #4]
   d626a:	bd08      	pop	{r3, pc}
   d626c:	00030228 	.word	0x00030228

000d6270 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d6270:	b508      	push	{r3, lr}
   d6272:	4b02      	ldr	r3, [pc, #8]	; (d627c <hal_i2c_available+0xc>)
   d6274:	681b      	ldr	r3, [r3, #0]
   d6276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6278:	9301      	str	r3, [sp, #4]
   d627a:	bd08      	pop	{r3, pc}
   d627c:	00030228 	.word	0x00030228

000d6280 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d6280:	b508      	push	{r3, lr}
   d6282:	4b02      	ldr	r3, [pc, #8]	; (d628c <hal_i2c_read+0xc>)
   d6284:	681b      	ldr	r3, [r3, #0]
   d6286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6288:	9301      	str	r3, [sp, #4]
   d628a:	bd08      	pop	{r3, pc}
   d628c:	00030228 	.word	0x00030228

000d6290 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d6290:	b508      	push	{r3, lr}
   d6292:	4b02      	ldr	r3, [pc, #8]	; (d629c <hal_i2c_peek+0xc>)
   d6294:	681b      	ldr	r3, [r3, #0]
   d6296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6298:	9301      	str	r3, [sp, #4]
   d629a:	bd08      	pop	{r3, pc}
   d629c:	00030228 	.word	0x00030228

000d62a0 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d62a0:	b508      	push	{r3, lr}
   d62a2:	4b02      	ldr	r3, [pc, #8]	; (d62ac <hal_i2c_flush+0xc>)
   d62a4:	681b      	ldr	r3, [r3, #0]
   d62a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d62a8:	9301      	str	r3, [sp, #4]
   d62aa:	bd08      	pop	{r3, pc}
   d62ac:	00030228 	.word	0x00030228

000d62b0 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d62b0:	b508      	push	{r3, lr}
   d62b2:	4b02      	ldr	r3, [pc, #8]	; (d62bc <hal_i2c_is_enabled+0xc>)
   d62b4:	681b      	ldr	r3, [r3, #0]
   d62b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d62b8:	9301      	str	r3, [sp, #4]
   d62ba:	bd08      	pop	{r3, pc}
   d62bc:	00030228 	.word	0x00030228

000d62c0 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d62c0:	b508      	push	{r3, lr}
   d62c2:	4b02      	ldr	r3, [pc, #8]	; (d62cc <hal_i2c_init+0xc>)
   d62c4:	681b      	ldr	r3, [r3, #0]
   d62c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d62c8:	9301      	str	r3, [sp, #4]
   d62ca:	bd08      	pop	{r3, pc}
   d62cc:	00030228 	.word	0x00030228

000d62d0 <hal_i2c_lock>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
   d62d0:	b508      	push	{r3, lr}
   d62d2:	4b02      	ldr	r3, [pc, #8]	; (d62dc <hal_i2c_lock+0xc>)
   d62d4:	681b      	ldr	r3, [r3, #0]
   d62d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d62d8:	9301      	str	r3, [sp, #4]
   d62da:	bd08      	pop	{r3, pc}
   d62dc:	00030228 	.word	0x00030228

000d62e0 <hal_i2c_unlock>:
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
   d62e0:	b508      	push	{r3, lr}
   d62e2:	4b02      	ldr	r3, [pc, #8]	; (d62ec <hal_i2c_unlock+0xc>)
   d62e4:	681b      	ldr	r3, [r3, #0]
   d62e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d62e8:	9301      	str	r3, [sp, #4]
   d62ea:	bd08      	pop	{r3, pc}
   d62ec:	00030228 	.word	0x00030228

000d62f0 <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   d62f0:	b508      	push	{r3, lr}
   d62f2:	4b02      	ldr	r3, [pc, #8]	; (d62fc <hal_i2c_request_ex+0xc>)
   d62f4:	681b      	ldr	r3, [r3, #0]
   d62f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d62f8:	9301      	str	r3, [sp, #4]
   d62fa:	bd08      	pop	{r3, pc}
   d62fc:	00030228 	.word	0x00030228

000d6300 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d6300:	b508      	push	{r3, lr}
   d6302:	4b02      	ldr	r3, [pc, #8]	; (d630c <inet_inet_ntop+0xc>)
   d6304:	681b      	ldr	r3, [r3, #0]
   d6306:	695b      	ldr	r3, [r3, #20]
   d6308:	9301      	str	r3, [sp, #4]
   d630a:	bd08      	pop	{r3, pc}
   d630c:	00030264 	.word	0x00030264

000d6310 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d6310:	b508      	push	{r3, lr}
   d6312:	4b02      	ldr	r3, [pc, #8]	; (d631c <netdb_freeaddrinfo+0xc>)
   d6314:	681b      	ldr	r3, [r3, #0]
   d6316:	689b      	ldr	r3, [r3, #8]
   d6318:	9301      	str	r3, [sp, #4]
   d631a:	bd08      	pop	{r3, pc}
   d631c:	00030268 	.word	0x00030268

000d6320 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d6320:	b508      	push	{r3, lr}
   d6322:	4b02      	ldr	r3, [pc, #8]	; (d632c <netdb_getaddrinfo+0xc>)
   d6324:	681b      	ldr	r3, [r3, #0]
   d6326:	68db      	ldr	r3, [r3, #12]
   d6328:	9301      	str	r3, [sp, #4]
   d632a:	bd08      	pop	{r3, pc}
   d632c:	00030268 	.word	0x00030268

000d6330 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d6330:	b508      	push	{r3, lr}
   d6332:	4b02      	ldr	r3, [pc, #8]	; (d633c <hal_spi_init+0xc>)
   d6334:	681b      	ldr	r3, [r3, #0]
   d6336:	69db      	ldr	r3, [r3, #28]
   d6338:	9301      	str	r3, [sp, #4]
   d633a:	bd08      	pop	{r3, pc}
   d633c:	00030230 	.word	0x00030230

000d6340 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d6340:	b508      	push	{r3, lr}
   d6342:	4b02      	ldr	r3, [pc, #8]	; (d634c <hal_spi_is_enabled+0xc>)
   d6344:	681b      	ldr	r3, [r3, #0]
   d6346:	6a1b      	ldr	r3, [r3, #32]
   d6348:	9301      	str	r3, [sp, #4]
   d634a:	bd08      	pop	{r3, pc}
   d634c:	00030230 	.word	0x00030230

000d6350 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d6350:	b508      	push	{r3, lr}
   d6352:	4b02      	ldr	r3, [pc, #8]	; (d635c <hal_usart_init+0xc>)
   d6354:	681b      	ldr	r3, [r3, #0]
   d6356:	681b      	ldr	r3, [r3, #0]
   d6358:	9301      	str	r3, [sp, #4]
   d635a:	bd08      	pop	{r3, pc}
   d635c:	0003023c 	.word	0x0003023c

000d6360 <hal_usart_end>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
   d6360:	b508      	push	{r3, lr}
   d6362:	4b02      	ldr	r3, [pc, #8]	; (d636c <hal_usart_end+0xc>)
   d6364:	681b      	ldr	r3, [r3, #0]
   d6366:	689b      	ldr	r3, [r3, #8]
   d6368:	9301      	str	r3, [sp, #4]
   d636a:	bd08      	pop	{r3, pc}
   d636c:	0003023c 	.word	0x0003023c

000d6370 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d6370:	b508      	push	{r3, lr}
   d6372:	4b02      	ldr	r3, [pc, #8]	; (d637c <hal_usart_write+0xc>)
   d6374:	681b      	ldr	r3, [r3, #0]
   d6376:	68db      	ldr	r3, [r3, #12]
   d6378:	9301      	str	r3, [sp, #4]
   d637a:	bd08      	pop	{r3, pc}
   d637c:	0003023c 	.word	0x0003023c

000d6380 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d6380:	b508      	push	{r3, lr}
   d6382:	4b02      	ldr	r3, [pc, #8]	; (d638c <hal_usart_available+0xc>)
   d6384:	681b      	ldr	r3, [r3, #0]
   d6386:	691b      	ldr	r3, [r3, #16]
   d6388:	9301      	str	r3, [sp, #4]
   d638a:	bd08      	pop	{r3, pc}
   d638c:	0003023c 	.word	0x0003023c

000d6390 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d6390:	b508      	push	{r3, lr}
   d6392:	4b02      	ldr	r3, [pc, #8]	; (d639c <hal_usart_read+0xc>)
   d6394:	681b      	ldr	r3, [r3, #0]
   d6396:	695b      	ldr	r3, [r3, #20]
   d6398:	9301      	str	r3, [sp, #4]
   d639a:	bd08      	pop	{r3, pc}
   d639c:	0003023c 	.word	0x0003023c

000d63a0 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d63a0:	b508      	push	{r3, lr}
   d63a2:	4b02      	ldr	r3, [pc, #8]	; (d63ac <hal_usart_peek+0xc>)
   d63a4:	681b      	ldr	r3, [r3, #0]
   d63a6:	699b      	ldr	r3, [r3, #24]
   d63a8:	9301      	str	r3, [sp, #4]
   d63aa:	bd08      	pop	{r3, pc}
   d63ac:	0003023c 	.word	0x0003023c

000d63b0 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d63b0:	b508      	push	{r3, lr}
   d63b2:	4b02      	ldr	r3, [pc, #8]	; (d63bc <hal_usart_flush+0xc>)
   d63b4:	681b      	ldr	r3, [r3, #0]
   d63b6:	69db      	ldr	r3, [r3, #28]
   d63b8:	9301      	str	r3, [sp, #4]
   d63ba:	bd08      	pop	{r3, pc}
   d63bc:	0003023c 	.word	0x0003023c

000d63c0 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d63c0:	b508      	push	{r3, lr}
   d63c2:	4b02      	ldr	r3, [pc, #8]	; (d63cc <hal_usart_is_enabled+0xc>)
   d63c4:	681b      	ldr	r3, [r3, #0]
   d63c6:	6a1b      	ldr	r3, [r3, #32]
   d63c8:	9301      	str	r3, [sp, #4]
   d63ca:	bd08      	pop	{r3, pc}
   d63cc:	0003023c 	.word	0x0003023c

000d63d0 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d63d0:	b508      	push	{r3, lr}
   d63d2:	4b02      	ldr	r3, [pc, #8]	; (d63dc <hal_usart_available_data_for_write+0xc>)
   d63d4:	681b      	ldr	r3, [r3, #0]
   d63d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d63d8:	9301      	str	r3, [sp, #4]
   d63da:	bd08      	pop	{r3, pc}
   d63dc:	0003023c 	.word	0x0003023c

000d63e0 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   d63e0:	b508      	push	{r3, lr}
   d63e2:	4b02      	ldr	r3, [pc, #8]	; (d63ec <hal_usart_begin_config+0xc>)
   d63e4:	681b      	ldr	r3, [r3, #0]
   d63e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d63e8:	9301      	str	r3, [sp, #4]
   d63ea:	bd08      	pop	{r3, pc}
   d63ec:	0003023c 	.word	0x0003023c

000d63f0 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d63f0:	b508      	push	{r3, lr}
   d63f2:	4b02      	ldr	r3, [pc, #8]	; (d63fc <HAL_USB_USART_Init+0xc>)
   d63f4:	681b      	ldr	r3, [r3, #0]
   d63f6:	681b      	ldr	r3, [r3, #0]
   d63f8:	9301      	str	r3, [sp, #4]
   d63fa:	bd08      	pop	{r3, pc}
   d63fc:	0003024c 	.word	0x0003024c

000d6400 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d6400:	b508      	push	{r3, lr}
   d6402:	4b02      	ldr	r3, [pc, #8]	; (d640c <HAL_USB_USART_Begin+0xc>)
   d6404:	681b      	ldr	r3, [r3, #0]
   d6406:	685b      	ldr	r3, [r3, #4]
   d6408:	9301      	str	r3, [sp, #4]
   d640a:	bd08      	pop	{r3, pc}
   d640c:	0003024c 	.word	0x0003024c

000d6410 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   d6410:	b508      	push	{r3, lr}
   d6412:	4b02      	ldr	r3, [pc, #8]	; (d641c <HAL_USB_USART_End+0xc>)
   d6414:	681b      	ldr	r3, [r3, #0]
   d6416:	689b      	ldr	r3, [r3, #8]
   d6418:	9301      	str	r3, [sp, #4]
   d641a:	bd08      	pop	{r3, pc}
   d641c:	0003024c 	.word	0x0003024c

000d6420 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d6420:	b508      	push	{r3, lr}
   d6422:	4b02      	ldr	r3, [pc, #8]	; (d642c <HAL_USB_USART_Available_Data+0xc>)
   d6424:	681b      	ldr	r3, [r3, #0]
   d6426:	691b      	ldr	r3, [r3, #16]
   d6428:	9301      	str	r3, [sp, #4]
   d642a:	bd08      	pop	{r3, pc}
   d642c:	0003024c 	.word	0x0003024c

000d6430 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d6430:	b508      	push	{r3, lr}
   d6432:	4b02      	ldr	r3, [pc, #8]	; (d643c <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d6434:	681b      	ldr	r3, [r3, #0]
   d6436:	695b      	ldr	r3, [r3, #20]
   d6438:	9301      	str	r3, [sp, #4]
   d643a:	bd08      	pop	{r3, pc}
   d643c:	0003024c 	.word	0x0003024c

000d6440 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d6440:	b508      	push	{r3, lr}
   d6442:	4b02      	ldr	r3, [pc, #8]	; (d644c <HAL_USB_USART_Receive_Data+0xc>)
   d6444:	681b      	ldr	r3, [r3, #0]
   d6446:	699b      	ldr	r3, [r3, #24]
   d6448:	9301      	str	r3, [sp, #4]
   d644a:	bd08      	pop	{r3, pc}
   d644c:	0003024c 	.word	0x0003024c

000d6450 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d6450:	b508      	push	{r3, lr}
   d6452:	4b02      	ldr	r3, [pc, #8]	; (d645c <HAL_USB_USART_Send_Data+0xc>)
   d6454:	681b      	ldr	r3, [r3, #0]
   d6456:	69db      	ldr	r3, [r3, #28]
   d6458:	9301      	str	r3, [sp, #4]
   d645a:	bd08      	pop	{r3, pc}
   d645c:	0003024c 	.word	0x0003024c

000d6460 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d6460:	b508      	push	{r3, lr}
   d6462:	4b02      	ldr	r3, [pc, #8]	; (d646c <HAL_USB_USART_Flush_Data+0xc>)
   d6464:	681b      	ldr	r3, [r3, #0]
   d6466:	6a1b      	ldr	r3, [r3, #32]
   d6468:	9301      	str	r3, [sp, #4]
   d646a:	bd08      	pop	{r3, pc}
   d646c:	0003024c 	.word	0x0003024c

000d6470 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d6470:	b508      	push	{r3, lr}
   d6472:	4b02      	ldr	r3, [pc, #8]	; (d647c <panic_+0xc>)
   d6474:	681b      	ldr	r3, [r3, #0]
   d6476:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d6478:	9301      	str	r3, [sp, #4]
   d647a:	bd08      	pop	{r3, pc}
   d647c:	00030260 	.word	0x00030260

000d6480 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d6480:	b508      	push	{r3, lr}
   d6482:	4b02      	ldr	r3, [pc, #8]	; (d648c <log_message+0xc>)
   d6484:	681b      	ldr	r3, [r3, #0]
   d6486:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d6488:	9301      	str	r3, [sp, #4]
   d648a:	bd08      	pop	{r3, pc}
   d648c:	00030260 	.word	0x00030260

000d6490 <log_message_v>:
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   d6490:	b508      	push	{r3, lr}
   d6492:	4b02      	ldr	r3, [pc, #8]	; (d649c <log_message_v+0xc>)
   d6494:	681b      	ldr	r3, [r3, #0]
   d6496:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d6498:	9301      	str	r3, [sp, #4]
   d649a:	bd08      	pop	{r3, pc}
   d649c:	00030260 	.word	0x00030260

000d64a0 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   d64a0:	b508      	push	{r3, lr}
   d64a2:	4b02      	ldr	r3, [pc, #8]	; (d64ac <log_level_name+0xc>)
   d64a4:	681b      	ldr	r3, [r3, #0]
   d64a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d64a8:	9301      	str	r3, [sp, #4]
   d64aa:	bd08      	pop	{r3, pc}
   d64ac:	00030260 	.word	0x00030260

000d64b0 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   d64b0:	b508      	push	{r3, lr}
   d64b2:	4b02      	ldr	r3, [pc, #8]	; (d64bc <log_set_callbacks+0xc>)
   d64b4:	681b      	ldr	r3, [r3, #0]
   d64b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   d64b8:	9301      	str	r3, [sp, #4]
   d64ba:	bd08      	pop	{r3, pc}
   d64bc:	00030260 	.word	0x00030260

000d64c0 <diag_get_source>:
DYNALIB_FN(34, services, led_update_enabled, int(void*))
DYNALIB_FN(35, services, led_update, void(system_tick_t, LEDStatusData*, void*))

DYNALIB_FN(36, services, diag_register_source, int(const diag_source*, void*))
DYNALIB_FN(37, services, diag_enum_sources, int(diag_enum_sources_callback, size_t*, void*, void*))
DYNALIB_FN(38, services, diag_get_source, int(uint16_t, const diag_source**, void*))
   d64c0:	b508      	push	{r3, lr}
   d64c2:	4b03      	ldr	r3, [pc, #12]	; (d64d0 <diag_get_source+0x10>)
   d64c4:	681b      	ldr	r3, [r3, #0]
   d64c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   d64ca:	9301      	str	r3, [sp, #4]
   d64cc:	bd08      	pop	{r3, pc}
   d64ce:	0000      	.short	0x0000
   d64d0:	00030260 	.word	0x00030260

000d64d4 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d64d4:	b508      	push	{r3, lr}
   d64d6:	4b02      	ldr	r3, [pc, #8]	; (d64e0 <system_mode+0xc>)
   d64d8:	681b      	ldr	r3, [r3, #0]
   d64da:	681b      	ldr	r3, [r3, #0]
   d64dc:	9301      	str	r3, [sp, #4]
   d64de:	bd08      	pop	{r3, pc}
   d64e0:	00030220 	.word	0x00030220

000d64e4 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d64e4:	b508      	push	{r3, lr}
   d64e6:	4b02      	ldr	r3, [pc, #8]	; (d64f0 <set_system_mode+0xc>)
   d64e8:	681b      	ldr	r3, [r3, #0]
   d64ea:	685b      	ldr	r3, [r3, #4]
   d64ec:	9301      	str	r3, [sp, #4]
   d64ee:	bd08      	pop	{r3, pc}
   d64f0:	00030220 	.word	0x00030220

000d64f4 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d64f4:	b508      	push	{r3, lr}
   d64f6:	4b02      	ldr	r3, [pc, #8]	; (d6500 <system_delay_ms+0xc>)
   d64f8:	681b      	ldr	r3, [r3, #0]
   d64fa:	695b      	ldr	r3, [r3, #20]
   d64fc:	9301      	str	r3, [sp, #4]
   d64fe:	bd08      	pop	{r3, pc}
   d6500:	00030220 	.word	0x00030220

000d6504 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d6504:	b508      	push	{r3, lr}
   d6506:	4b02      	ldr	r3, [pc, #8]	; (d6510 <system_thread_set_state+0xc>)
   d6508:	681b      	ldr	r3, [r3, #0]
   d650a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d650c:	9301      	str	r3, [sp, #4]
   d650e:	bd08      	pop	{r3, pc}
   d6510:	00030220 	.word	0x00030220

000d6514 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d6514:	b508      	push	{r3, lr}
   d6516:	4b02      	ldr	r3, [pc, #8]	; (d6520 <application_thread_current+0xc>)
   d6518:	681b      	ldr	r3, [r3, #0]
   d651a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d651c:	9301      	str	r3, [sp, #4]
   d651e:	bd08      	pop	{r3, pc}
   d6520:	00030220 	.word	0x00030220

000d6524 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d6524:	b508      	push	{r3, lr}
   d6526:	4b02      	ldr	r3, [pc, #8]	; (d6530 <application_thread_invoke+0xc>)
   d6528:	681b      	ldr	r3, [r3, #0]
   d652a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d652c:	9301      	str	r3, [sp, #4]
   d652e:	bd08      	pop	{r3, pc}
   d6530:	00030220 	.word	0x00030220

000d6534 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d6534:	b508      	push	{r3, lr}
   d6536:	4b02      	ldr	r3, [pc, #8]	; (d6540 <system_thread_get_state+0xc>)
   d6538:	681b      	ldr	r3, [r3, #0]
   d653a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d653c:	9301      	str	r3, [sp, #4]
   d653e:	bd08      	pop	{r3, pc}
   d6540:	00030220 	.word	0x00030220

000d6544 <system_notify_time_changed>:
DYNALIB_FN(23, system, system_notify_time_changed, void(uint32_t, void*, void*))
   d6544:	b508      	push	{r3, lr}
   d6546:	4b02      	ldr	r3, [pc, #8]	; (d6550 <system_notify_time_changed+0xc>)
   d6548:	681b      	ldr	r3, [r3, #0]
   d654a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   d654c:	9301      	str	r3, [sp, #4]
   d654e:	bd08      	pop	{r3, pc}
   d6550:	00030220 	.word	0x00030220

000d6554 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d6554:	b508      	push	{r3, lr}
   d6556:	4b03      	ldr	r3, [pc, #12]	; (d6564 <system_ctrl_set_app_request_handler+0x10>)
   d6558:	681b      	ldr	r3, [r3, #0]
   d655a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d655e:	9301      	str	r3, [sp, #4]
   d6560:	bd08      	pop	{r3, pc}
   d6562:	0000      	.short	0x0000
   d6564:	00030220 	.word	0x00030220

000d6568 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d6568:	b508      	push	{r3, lr}
   d656a:	4b03      	ldr	r3, [pc, #12]	; (d6578 <system_ctrl_set_result+0x10>)
   d656c:	681b      	ldr	r3, [r3, #0]
   d656e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d6572:	9301      	str	r3, [sp, #4]
   d6574:	bd08      	pop	{r3, pc}
   d6576:	0000      	.short	0x0000
   d6578:	00030220 	.word	0x00030220

000d657c <system_power_management_set_config>:
DYNALIB_FN(BASE_IDX + 14, system, system_pool_free, void(void*, void*))
DYNALIB_FN(BASE_IDX + 15, system, system_sleep_pins, int(const uint16_t*, size_t, const InterruptMode*, size_t, long, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 16, system, system_invoke_event_handler, int(uint16_t handlerInfoSize, FilteringEventHandler* handlerInfo, const char* event_name, const char* event_data, void* reserved))

#if HAL_PLATFORM_POWER_MANAGEMENT
DYNALIB_FN(BASE_IDX + 17, system, system_power_management_set_config, int(const hal_power_config*, void*))
   d657c:	b508      	push	{r3, lr}
   d657e:	4b03      	ldr	r3, [pc, #12]	; (d658c <system_power_management_set_config+0x10>)
   d6580:	681b      	ldr	r3, [r3, #0]
   d6582:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   d6586:	9301      	str	r3, [sp, #4]
   d6588:	bd08      	pop	{r3, pc}
   d658a:	0000      	.short	0x0000
   d658c:	00030220 	.word	0x00030220

000d6590 <system_sleep_ext>:
#define BASE_IDX1 (BASE_IDX + 18)
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
   d6590:	b508      	push	{r3, lr}
   d6592:	4b03      	ldr	r3, [pc, #12]	; (d65a0 <system_sleep_ext+0x10>)
   d6594:	681b      	ldr	r3, [r3, #0]
   d6596:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
   d659a:	9301      	str	r3, [sp, #4]
   d659c:	bd08      	pop	{r3, pc}
   d659e:	0000      	.short	0x0000
   d65a0:	00030220 	.word	0x00030220

000d65a4 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d65a4:	b508      	push	{r3, lr}
   d65a6:	4b02      	ldr	r3, [pc, #8]	; (d65b0 <spark_process+0xc>)
   d65a8:	681b      	ldr	r3, [r3, #0]
   d65aa:	689b      	ldr	r3, [r3, #8]
   d65ac:	9301      	str	r3, [sp, #4]
   d65ae:	bd08      	pop	{r3, pc}
   d65b0:	00030244 	.word	0x00030244

000d65b4 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   d65b4:	b508      	push	{r3, lr}
   d65b6:	4b02      	ldr	r3, [pc, #8]	; (d65c0 <spark_cloud_flag_connect+0xc>)
   d65b8:	681b      	ldr	r3, [r3, #0]
   d65ba:	68db      	ldr	r3, [r3, #12]
   d65bc:	9301      	str	r3, [sp, #4]
   d65be:	bd08      	pop	{r3, pc}
   d65c0:	00030244 	.word	0x00030244

000d65c4 <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d65c4:	b508      	push	{r3, lr}
   d65c6:	4b02      	ldr	r3, [pc, #8]	; (d65d0 <spark_cloud_flag_connected+0xc>)
   d65c8:	681b      	ldr	r3, [r3, #0]
   d65ca:	695b      	ldr	r3, [r3, #20]
   d65cc:	9301      	str	r3, [sp, #4]
   d65ce:	bd08      	pop	{r3, pc}
   d65d0:	00030244 	.word	0x00030244

000d65d4 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d65d4:	b508      	push	{r3, lr}
   d65d6:	4b02      	ldr	r3, [pc, #8]	; (d65e0 <spark_send_event+0xc>)
   d65d8:	681b      	ldr	r3, [r3, #0]
   d65da:	6a1b      	ldr	r3, [r3, #32]
   d65dc:	9301      	str	r3, [sp, #4]
   d65de:	bd08      	pop	{r3, pc}
   d65e0:	00030244 	.word	0x00030244

000d65e4 <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   d65e4:	b508      	push	{r3, lr}
   d65e6:	4b02      	ldr	r3, [pc, #8]	; (d65f0 <spark_subscribe+0xc>)
   d65e8:	681b      	ldr	r3, [r3, #0]
   d65ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d65ec:	9301      	str	r3, [sp, #4]
   d65ee:	bd08      	pop	{r3, pc}
   d65f0:	00030244 	.word	0x00030244

000d65f4 <spark_sync_time_pending>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d65f4:	b508      	push	{r3, lr}
   d65f6:	4b02      	ldr	r3, [pc, #8]	; (d6600 <spark_sync_time_pending+0xc>)
   d65f8:	681b      	ldr	r3, [r3, #0]
   d65fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d65fc:	9301      	str	r3, [sp, #4]
   d65fe:	bd08      	pop	{r3, pc}
   d6600:	00030244 	.word	0x00030244

000d6604 <spark_sync_time_last>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
   d6604:	b508      	push	{r3, lr}
   d6606:	4b02      	ldr	r3, [pc, #8]	; (d6610 <spark_sync_time_last+0xc>)
   d6608:	681b      	ldr	r3, [r3, #0]
   d660a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d660c:	9301      	str	r3, [sp, #4]
   d660e:	bd08      	pop	{r3, pc}
   d6610:	00030244 	.word	0x00030244

000d6614 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d6614:	b508      	push	{r3, lr}
   d6616:	4b02      	ldr	r3, [pc, #8]	; (d6620 <spark_set_random_seed_from_cloud_handler+0xc>)
   d6618:	681b      	ldr	r3, [r3, #0]
   d661a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d661c:	9301      	str	r3, [sp, #4]
   d661e:	bd08      	pop	{r3, pc}
   d6620:	00030244 	.word	0x00030244

000d6624 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d6624:	b508      	push	{r3, lr}
   d6626:	4b02      	ldr	r3, [pc, #8]	; (d6630 <network_connect+0xc>)
   d6628:	681b      	ldr	r3, [r3, #0]
   d662a:	685b      	ldr	r3, [r3, #4]
   d662c:	9301      	str	r3, [sp, #4]
   d662e:	bd08      	pop	{r3, pc}
   d6630:	00030240 	.word	0x00030240

000d6634 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d6634:	b508      	push	{r3, lr}
   d6636:	4b02      	ldr	r3, [pc, #8]	; (d6640 <network_connecting+0xc>)
   d6638:	681b      	ldr	r3, [r3, #0]
   d663a:	689b      	ldr	r3, [r3, #8]
   d663c:	9301      	str	r3, [sp, #4]
   d663e:	bd08      	pop	{r3, pc}
   d6640:	00030240 	.word	0x00030240

000d6644 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d6644:	b508      	push	{r3, lr}
   d6646:	4b02      	ldr	r3, [pc, #8]	; (d6650 <network_disconnect+0xc>)
   d6648:	681b      	ldr	r3, [r3, #0]
   d664a:	68db      	ldr	r3, [r3, #12]
   d664c:	9301      	str	r3, [sp, #4]
   d664e:	bd08      	pop	{r3, pc}
   d6650:	00030240 	.word	0x00030240

000d6654 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d6654:	b508      	push	{r3, lr}
   d6656:	4b02      	ldr	r3, [pc, #8]	; (d6660 <network_ready+0xc>)
   d6658:	681b      	ldr	r3, [r3, #0]
   d665a:	691b      	ldr	r3, [r3, #16]
   d665c:	9301      	str	r3, [sp, #4]
   d665e:	bd08      	pop	{r3, pc}
   d6660:	00030240 	.word	0x00030240

000d6664 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d6664:	b508      	push	{r3, lr}
   d6666:	4b02      	ldr	r3, [pc, #8]	; (d6670 <network_on+0xc>)
   d6668:	681b      	ldr	r3, [r3, #0]
   d666a:	695b      	ldr	r3, [r3, #20]
   d666c:	9301      	str	r3, [sp, #4]
   d666e:	bd08      	pop	{r3, pc}
   d6670:	00030240 	.word	0x00030240

000d6674 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d6674:	b508      	push	{r3, lr}
   d6676:	4b02      	ldr	r3, [pc, #8]	; (d6680 <network_off+0xc>)
   d6678:	681b      	ldr	r3, [r3, #0]
   d667a:	699b      	ldr	r3, [r3, #24]
   d667c:	9301      	str	r3, [sp, #4]
   d667e:	bd08      	pop	{r3, pc}
   d6680:	00030240 	.word	0x00030240

000d6684 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d6684:	b508      	push	{r3, lr}
   d6686:	4b02      	ldr	r3, [pc, #8]	; (d6690 <network_listen+0xc>)
   d6688:	681b      	ldr	r3, [r3, #0]
   d668a:	69db      	ldr	r3, [r3, #28]
   d668c:	9301      	str	r3, [sp, #4]
   d668e:	bd08      	pop	{r3, pc}
   d6690:	00030240 	.word	0x00030240

000d6694 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d6694:	b508      	push	{r3, lr}
   d6696:	4b02      	ldr	r3, [pc, #8]	; (d66a0 <network_listening+0xc>)
   d6698:	681b      	ldr	r3, [r3, #0]
   d669a:	6a1b      	ldr	r3, [r3, #32]
   d669c:	9301      	str	r3, [sp, #4]
   d669e:	bd08      	pop	{r3, pc}
   d66a0:	00030240 	.word	0x00030240

000d66a4 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d66a4:	b508      	push	{r3, lr}
   d66a6:	4b02      	ldr	r3, [pc, #8]	; (d66b0 <network_set_listen_timeout+0xc>)
   d66a8:	681b      	ldr	r3, [r3, #0]
   d66aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d66ac:	9301      	str	r3, [sp, #4]
   d66ae:	bd08      	pop	{r3, pc}
   d66b0:	00030240 	.word	0x00030240

000d66b4 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d66b4:	b508      	push	{r3, lr}
   d66b6:	4b02      	ldr	r3, [pc, #8]	; (d66c0 <network_get_listen_timeout+0xc>)
   d66b8:	681b      	ldr	r3, [r3, #0]
   d66ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d66bc:	9301      	str	r3, [sp, #4]
   d66be:	bd08      	pop	{r3, pc}
   d66c0:	00030240 	.word	0x00030240

000d66c4 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   d66c4:	b508      	push	{r3, lr}
   d66c6:	4b02      	ldr	r3, [pc, #8]	; (d66d0 <network_is_on+0xc>)
   d66c8:	681b      	ldr	r3, [r3, #0]
   d66ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d66cc:	9301      	str	r3, [sp, #4]
   d66ce:	bd08      	pop	{r3, pc}
   d66d0:	00030240 	.word	0x00030240

000d66d4 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   d66d4:	b508      	push	{r3, lr}
   d66d6:	4b02      	ldr	r3, [pc, #8]	; (d66e0 <network_is_off+0xc>)
   d66d8:	681b      	ldr	r3, [r3, #0]
   d66da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d66dc:	9301      	str	r3, [sp, #4]
   d66de:	bd08      	pop	{r3, pc}
   d66e0:	00030240 	.word	0x00030240

000d66e4 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d66e4:	b508      	push	{r3, lr}
   d66e6:	4b02      	ldr	r3, [pc, #8]	; (d66f0 <malloc+0xc>)
   d66e8:	681b      	ldr	r3, [r3, #0]
   d66ea:	681b      	ldr	r3, [r3, #0]
   d66ec:	9301      	str	r3, [sp, #4]
   d66ee:	bd08      	pop	{r3, pc}
   d66f0:	0003021c 	.word	0x0003021c

000d66f4 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d66f4:	b508      	push	{r3, lr}
   d66f6:	4b02      	ldr	r3, [pc, #8]	; (d6700 <free+0xc>)
   d66f8:	681b      	ldr	r3, [r3, #0]
   d66fa:	685b      	ldr	r3, [r3, #4]
   d66fc:	9301      	str	r3, [sp, #4]
   d66fe:	bd08      	pop	{r3, pc}
   d6700:	0003021c 	.word	0x0003021c

000d6704 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d6704:	b508      	push	{r3, lr}
   d6706:	4b02      	ldr	r3, [pc, #8]	; (d6710 <realloc+0xc>)
   d6708:	681b      	ldr	r3, [r3, #0]
   d670a:	689b      	ldr	r3, [r3, #8]
   d670c:	9301      	str	r3, [sp, #4]
   d670e:	bd08      	pop	{r3, pc}
   d6710:	0003021c 	.word	0x0003021c

000d6714 <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   d6714:	b508      	push	{r3, lr}
   d6716:	4b02      	ldr	r3, [pc, #8]	; (d6720 <siprintf+0xc>)
   d6718:	681b      	ldr	r3, [r3, #0]
   d671a:	691b      	ldr	r3, [r3, #16]
   d671c:	9301      	str	r3, [sp, #4]
   d671e:	bd08      	pop	{r3, pc}
   d6720:	0003021c 	.word	0x0003021c

000d6724 <snprintf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   d6724:	b508      	push	{r3, lr}
   d6726:	4b02      	ldr	r3, [pc, #8]	; (d6730 <snprintf+0xc>)
   d6728:	681b      	ldr	r3, [r3, #0]
   d672a:	69db      	ldr	r3, [r3, #28]
   d672c:	9301      	str	r3, [sp, #4]
   d672e:	bd08      	pop	{r3, pc}
   d6730:	0003021c 	.word	0x0003021c

000d6734 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d6734:	b508      	push	{r3, lr}
   d6736:	4b02      	ldr	r3, [pc, #8]	; (d6740 <vsnprintf+0xc>)
   d6738:	681b      	ldr	r3, [r3, #0]
   d673a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d673c:	9301      	str	r3, [sp, #4]
   d673e:	bd08      	pop	{r3, pc}
   d6740:	0003021c 	.word	0x0003021c

000d6744 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d6744:	b508      	push	{r3, lr}
   d6746:	4b02      	ldr	r3, [pc, #8]	; (d6750 <abort+0xc>)
   d6748:	681b      	ldr	r3, [r3, #0]
   d674a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d674c:	9301      	str	r3, [sp, #4]
   d674e:	bd08      	pop	{r3, pc}
   d6750:	0003021c 	.word	0x0003021c

000d6754 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d6754:	b508      	push	{r3, lr}
   d6756:	4b02      	ldr	r3, [pc, #8]	; (d6760 <_malloc_r+0xc>)
   d6758:	681b      	ldr	r3, [r3, #0]
   d675a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d675c:	9301      	str	r3, [sp, #4]
   d675e:	bd08      	pop	{r3, pc}
   d6760:	0003021c 	.word	0x0003021c

000d6764 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d6764:	b508      	push	{r3, lr}
   d6766:	4b02      	ldr	r3, [pc, #8]	; (d6770 <newlib_impure_ptr_callback+0xc>)
   d6768:	681b      	ldr	r3, [r3, #0]
   d676a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d676c:	9301      	str	r3, [sp, #4]
   d676e:	bd08      	pop	{r3, pc}
   d6770:	0003021c 	.word	0x0003021c

000d6774 <strftime>:
// Electron has some of these exported from a different system part through services2 dynalib
// Photon/P1 do not have enough space in system-part2
#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
   d6774:	b508      	push	{r3, lr}
   d6776:	4b02      	ldr	r3, [pc, #8]	; (d6780 <strftime+0xc>)
   d6778:	681b      	ldr	r3, [r3, #0]
   d677a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d677c:	9301      	str	r3, [sp, #4]
   d677e:	bd08      	pop	{r3, pc}
   d6780:	0003021c 	.word	0x0003021c

000d6784 <localtime_r>:
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   d6784:	b508      	push	{r3, lr}
   d6786:	4b02      	ldr	r3, [pc, #8]	; (d6790 <localtime_r+0xc>)
   d6788:	681b      	ldr	r3, [r3, #0]
   d678a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d678c:	9301      	str	r3, [sp, #4]
   d678e:	bd08      	pop	{r3, pc}
   d6790:	0003021c 	.word	0x0003021c

000d6794 <gmtime_r>:
DYNALIB_FN(20, rt, gmtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   d6794:	b508      	push	{r3, lr}
   d6796:	4b02      	ldr	r3, [pc, #8]	; (d67a0 <gmtime_r+0xc>)
   d6798:	681b      	ldr	r3, [r3, #0]
   d679a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d679c:	9301      	str	r3, [sp, #4]
   d679e:	bd08      	pop	{r3, pc}
   d67a0:	0003021c 	.word	0x0003021c

000d67a4 <mktime>:
DYNALIB_FN(21, rt, mktime, time_t(struct tm*))
   d67a4:	b508      	push	{r3, lr}
   d67a6:	4b02      	ldr	r3, [pc, #8]	; (d67b0 <mktime+0xc>)
   d67a8:	681b      	ldr	r3, [r3, #0]
   d67aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d67ac:	9301      	str	r3, [sp, #4]
   d67ae:	bd08      	pop	{r3, pc}
   d67b0:	0003021c 	.word	0x0003021c

000d67b4 <_Z3mapiiiii>:
    hal_adc_set_sample_time(ADC_SampleTime);
}

int map(int value, int fromStart, int fromEnd, int toStart, int toEnd)
{
    if (fromEnd == fromStart) {
   d67b4:	428a      	cmp	r2, r1
{
   d67b6:	b510      	push	{r4, lr}
    if (fromEnd == fromStart) {
   d67b8:	d007      	beq.n	d67ca <_Z3mapiiiii+0x16>
        return value;
    }
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
   d67ba:	9c02      	ldr	r4, [sp, #8]
   d67bc:	1a40      	subs	r0, r0, r1
   d67be:	1ae4      	subs	r4, r4, r3
   d67c0:	4360      	muls	r0, r4
   d67c2:	1a52      	subs	r2, r2, r1
   d67c4:	fb90 f0f2 	sdiv	r0, r0, r2
   d67c8:	4418      	add	r0, r3
}
   d67ca:	bd10      	pop	{r4, pc}

000d67cc <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d67cc:	2100      	movs	r1, #0
   d67ce:	f7ff be91 	b.w	d64f4 <system_delay_ms>

000d67d2 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d67d2:	b510      	push	{r4, lr}
      if (_M_empty())
   d67d4:	6883      	ldr	r3, [r0, #8]
   d67d6:	4604      	mov	r4, r0
   d67d8:	b90b      	cbnz	r3, d67de <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d67da:	f003 f809 	bl	d97f0 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d67de:	68c3      	ldr	r3, [r0, #12]
   d67e0:	4798      	blx	r3
      if (_M_manager)
   d67e2:	68a3      	ldr	r3, [r4, #8]
   d67e4:	b11b      	cbz	r3, d67ee <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d67e6:	2203      	movs	r2, #3
   d67e8:	4621      	mov	r1, r4
   d67ea:	4620      	mov	r0, r4
   d67ec:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d67ee:	4620      	mov	r0, r4
   d67f0:	2110      	movs	r1, #16
}
   d67f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   d67f6:	f002 bff5 	b.w	d97e4 <_ZdlPvj>

000d67fa <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d67fa:	b510      	push	{r4, lr}
          _M_dispose();
   d67fc:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d67fe:	4604      	mov	r4, r0
          _M_dispose();
   d6800:	689b      	ldr	r3, [r3, #8]
   d6802:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d6804:	68a3      	ldr	r3, [r4, #8]
   d6806:	3b01      	subs	r3, #1
   d6808:	60a3      	str	r3, [r4, #8]
   d680a:	b92b      	cbnz	r3, d6818 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
   d680c:	6823      	ldr	r3, [r4, #0]
   d680e:	4620      	mov	r0, r4
   d6810:	68db      	ldr	r3, [r3, #12]
    }
   d6812:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   d6816:	4718      	bx	r3
    }
   d6818:	bd10      	pop	{r4, pc}

000d681a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d681a:	680b      	ldr	r3, [r1, #0]
   d681c:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d681e:	b113      	cbz	r3, d6826 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   d6820:	685a      	ldr	r2, [r3, #4]
   d6822:	3201      	adds	r2, #1
   d6824:	605a      	str	r2, [r3, #4]
	  _M_pi->_M_add_ref_copy();
      }
   d6826:	4770      	bx	lr

000d6828 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   d6828:	b510      	push	{r4, lr}
   d682a:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   d682c:	6800      	ldr	r0, [r0, #0]
   d682e:	b128      	cbz	r0, d683c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
      if (--_M_use_count == 0)
   d6830:	6843      	ldr	r3, [r0, #4]
   d6832:	3b01      	subs	r3, #1
   d6834:	6043      	str	r3, [r0, #4]
   d6836:	b90b      	cbnz	r3, d683c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
   d6838:	f7ff ffdf 	bl	d67fa <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
      }
   d683c:	4620      	mov	r0, r4
   d683e:	bd10      	pop	{r4, pc}

000d6840 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d6840:	4802      	ldr	r0, [pc, #8]	; (d684c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   d6842:	2300      	movs	r3, #0
   d6844:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   d6846:	f7ff bc53 	b.w	d60f0 <os_mutex_recursive_create>
   d684a:	bf00      	nop
   d684c:	2003e5f0 	.word	0x2003e5f0

000d6850 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d6850:	2200      	movs	r2, #0
   d6852:	6840      	ldr	r0, [r0, #4]
   d6854:	4611      	mov	r1, r2
   d6856:	f7ff befd 	b.w	d6654 <network_ready>

000d685a <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   d685a:	2200      	movs	r2, #0
   d685c:	6840      	ldr	r0, [r0, #4]
   d685e:	4611      	mov	r1, r2
   d6860:	f7ff bf18 	b.w	d6694 <network_listening>

000d6864 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d6864:	2200      	movs	r2, #0
   d6866:	6840      	ldr	r0, [r0, #4]
   d6868:	4611      	mov	r1, r2
   d686a:	f7ff bf23 	b.w	d66b4 <network_get_listen_timeout>

000d686e <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d686e:	6840      	ldr	r0, [r0, #4]
   d6870:	2200      	movs	r2, #0
   d6872:	f7ff bf17 	b.w	d66a4 <network_set_listen_timeout>

000d6876 <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d6876:	6840      	ldr	r0, [r0, #4]
   d6878:	2200      	movs	r2, #0
   d687a:	f081 0101 	eor.w	r1, r1, #1
   d687e:	f7ff bf01 	b.w	d6684 <network_listen>

000d6882 <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d6882:	2300      	movs	r3, #0
   d6884:	6840      	ldr	r0, [r0, #4]
   d6886:	461a      	mov	r2, r3
   d6888:	4619      	mov	r1, r3
   d688a:	f7ff bef3 	b.w	d6674 <network_off>

000d688e <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d688e:	2300      	movs	r3, #0
   d6890:	6840      	ldr	r0, [r0, #4]
   d6892:	461a      	mov	r2, r3
   d6894:	4619      	mov	r1, r3
   d6896:	f7ff bee5 	b.w	d6664 <network_on>

000d689a <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d689a:	2200      	movs	r2, #0
   d689c:	6840      	ldr	r0, [r0, #4]
   d689e:	4611      	mov	r1, r2
   d68a0:	f7ff bec8 	b.w	d6634 <network_connecting>

000d68a4 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d68a4:	6840      	ldr	r0, [r0, #4]
   d68a6:	2200      	movs	r2, #0
   d68a8:	2102      	movs	r1, #2
   d68aa:	f7ff becb 	b.w	d6644 <network_disconnect>

000d68ae <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d68ae:	2300      	movs	r3, #0
   d68b0:	6840      	ldr	r0, [r0, #4]
   d68b2:	461a      	mov	r2, r3
   d68b4:	f7ff beb6 	b.w	d6624 <network_connect>

000d68b8 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d68b8:	4b08      	ldr	r3, [pc, #32]	; (d68dc <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d68ba:	b510      	push	{r4, lr}
   d68bc:	2428      	movs	r4, #40	; 0x28
   d68be:	4622      	mov	r2, r4
   d68c0:	4618      	mov	r0, r3
   d68c2:	2100      	movs	r1, #0
   d68c4:	f003 fe92 	bl	da5ec <memset>
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d68c8:	4b05      	ldr	r3, [pc, #20]	; (d68e0 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   d68ca:	8004      	strh	r4, [r0, #0]
        cid = -1;
   d68cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d68d0:	6042      	str	r2, [r0, #4]
   d68d2:	2204      	movs	r2, #4
   d68d4:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d68d6:	4a03      	ldr	r2, [pc, #12]	; (d68e4 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d68d8:	601a      	str	r2, [r3, #0]
   d68da:	bd10      	pop	{r4, pc}
   d68dc:	2003e5fc 	.word	0x2003e5fc
   d68e0:	2003e5f4 	.word	0x2003e5f4
   d68e4:	000dae50 	.word	0x000dae50

000d68e8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d68e8:	4770      	bx	lr

000d68ea <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   d68ea:	2000      	movs	r0, #0
   d68ec:	4770      	bx	lr

000d68ee <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d68ee:	b510      	push	{r4, lr}
   d68f0:	2110      	movs	r1, #16
   d68f2:	4604      	mov	r4, r0
   d68f4:	f002 ff76 	bl	d97e4 <_ZdlPvj>
   d68f8:	4620      	mov	r0, r4
   d68fa:	bd10      	pop	{r4, pc}

000d68fc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   d68fc:	b508      	push	{r3, lr}
      { delete this; }
   d68fe:	f7ff fff6 	bl	d68ee <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d6902:	bd08      	pop	{r3, pc}

000d6904 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d6904:	b530      	push	{r4, r5, lr}
        type_(type) {
   d6906:	2200      	movs	r2, #0
   d6908:	f64f 749c 	movw	r4, #65436	; 0xff9c
   d690c:	6002      	str	r2, [r0, #0]
   d690e:	8084      	strh	r4, [r0, #4]
   d6910:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d6912:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   d6914:	680c      	ldr	r4, [r1, #0]
   d6916:	8085      	strh	r5, [r0, #4]
   d6918:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d691a:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   d691c:	bd30      	pop	{r4, r5, pc}

000d691e <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d691e:	b510      	push	{r4, lr}
   d6920:	4604      	mov	r4, r0
    free((void*)msg_);
   d6922:	6800      	ldr	r0, [r0, #0]
   d6924:	f7ff fee6 	bl	d66f4 <free>
}
   d6928:	4620      	mov	r0, r4
   d692a:	bd10      	pop	{r4, pc}

000d692c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d692c:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d692e:	68c4      	ldr	r4, [r0, #12]
   d6930:	b1f4      	cbz	r4, d6970 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   d6932:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d6934:	2b02      	cmp	r3, #2
   d6936:	d103      	bne.n	d6940 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d6938:	f104 000c 	add.w	r0, r4, #12
   d693c:	f7ff ffef 	bl	d691e <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   d6940:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   d6942:	b135      	cbz	r5, d6952 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   d6944:	4628      	mov	r0, r5
   d6946:	f7ff f981 	bl	d5c4c <_ZNSt14_Function_baseD1Ev>
   d694a:	2110      	movs	r1, #16
   d694c:	4628      	mov	r0, r5
   d694e:	f002 ff49 	bl	d97e4 <_ZdlPvj>
   d6952:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d6954:	b135      	cbz	r5, d6964 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d6956:	4628      	mov	r0, r5
   d6958:	f7ff f978 	bl	d5c4c <_ZNSt14_Function_baseD1Ev>
   d695c:	2110      	movs	r1, #16
   d695e:	4628      	mov	r0, r5
   d6960:	f002 ff40 	bl	d97e4 <_ZdlPvj>
   d6964:	4620      	mov	r0, r4
   d6966:	2114      	movs	r1, #20
   d6968:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d696c:	f002 bf3a 	b.w	d97e4 <_ZdlPvj>
   d6970:	bd38      	pop	{r3, r4, r5, pc}

000d6972 <_ZN10CloudClass25call_wiring_event_handlerEPKvPKcS3_>:
    user_std_function_int_str_t* fn = (user_std_function_int_str_t*)(data);
    return (*fn)(String(param));
}

void CloudClass::call_wiring_event_handler(const void* handler_data, const char *event_name, const char *data)
{
   d6972:	b507      	push	{r0, r1, r2, lr}
   d6974:	e9cd 1200 	strd	r1, r2, [sp]
      if (_M_empty())
   d6978:	6882      	ldr	r2, [r0, #8]
   d697a:	b90a      	cbnz	r2, d6980 <_ZN10CloudClass25call_wiring_event_handlerEPKvPKcS3_+0xe>
	__throw_bad_function_call();
   d697c:	f002 ff38 	bl	d97f0 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6980:	68c3      	ldr	r3, [r0, #12]
   d6982:	aa01      	add	r2, sp, #4
   d6984:	4669      	mov	r1, sp
   d6986:	4798      	blx	r3
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}
   d6988:	b003      	add	sp, #12
   d698a:	f85d fb04 	ldr.w	pc, [sp], #4

000d698e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d698e:	b573      	push	{r0, r1, r4, r5, r6, lr}
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r,
		     element_type* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6990:	460e      	mov	r6, r1
   d6992:	4604      	mov	r4, r0
   d6994:	f856 3b04 	ldr.w	r3, [r6], #4
   d6998:	9300      	str	r3, [sp, #0]
   d699a:	460d      	mov	r5, r1
   d699c:	a801      	add	r0, sp, #4
   d699e:	4631      	mov	r1, r6
   d69a0:	f7ff ff3b 	bl	d681a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d69a4:	9a01      	ldr	r2, [sp, #4]
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d69a6:	9b00      	ldr	r3, [sp, #0]
	_M_pi = __tmp;
   d69a8:	6062      	str	r2, [r4, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d69aa:	6023      	str	r3, [r4, #0]
      ~__shared_ptr() = default;
   d69ac:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   d69ae:	2300      	movs	r3, #0
   d69b0:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d69b2:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   d69b4:	f7ff ff38 	bl	d6828 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d69b8:	4630      	mov	r0, r6
   d69ba:	f7ff ff35 	bl	d6828 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   d69be:	4628      	mov	r0, r5
   d69c0:	2108      	movs	r1, #8
   d69c2:	f002 ff0f 	bl	d97e4 <_ZdlPvj>
        return p;
    }
   d69c6:	4620      	mov	r0, r4
   d69c8:	b002      	add	sp, #8
   d69ca:	bd70      	pop	{r4, r5, r6, pc}

000d69cc <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   d69cc:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d69ce:	b510      	push	{r4, lr}
      if (_M_empty())
   d69d0:	b90a      	cbnz	r2, d69d6 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d69d2:	f002 ff0d 	bl	d97f0 <_ZSt25__throw_bad_function_callv>
    }
   d69d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d69da:	68c3      	ldr	r3, [r0, #12]
   d69dc:	4718      	bx	r3

000d69de <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d69de:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d69e0:	6800      	ldr	r0, [r0, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   d69e2:	f100 0110 	add.w	r1, r0, #16
   d69e6:	f7ff fff1 	bl	d69cc <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   d69ea:	bd08      	pop	{r3, pc}

000d69ec <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   d69ec:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d69ee:	b510      	push	{r4, lr}
      if (_M_empty())
   d69f0:	b90a      	cbnz	r2, d69f6 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d69f2:	f002 fefd 	bl	d97f0 <_ZSt25__throw_bad_function_callv>
    }
   d69f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d69fa:	68c3      	ldr	r3, [r0, #12]
   d69fc:	4718      	bx	r3

000d69fe <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d69fe:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d6a00:	6800      	ldr	r0, [r0, #0]
   d6a02:	f100 0110 	add.w	r1, r0, #16
   d6a06:	f7ff fff1 	bl	d69ec <_ZNKSt8functionIFvRKbEEclES1_>
      }
   d6a0a:	bd08      	pop	{r3, pc}

000d6a0c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   d6a0c:	b538      	push	{r3, r4, r5, lr}
   d6a0e:	2300      	movs	r3, #0
   d6a10:	4604      	mov	r4, r0
   d6a12:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d6a14:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   d6a16:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d6a18:	f7fd fb3d 	bl	d4096 <_Znwj>
   d6a1c:	b128      	cbz	r0, d6a2a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   d6a1e:	2301      	movs	r3, #1
   d6a20:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   d6a24:	4b02      	ldr	r3, [pc, #8]	; (d6a30 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d6a26:	6003      	str	r3, [r0, #0]
   d6a28:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d6a2a:	6020      	str	r0, [r4, #0]
	}
   d6a2c:	4620      	mov	r0, r4
   d6a2e:	bd38      	pop	{r3, r4, r5, pc}
   d6a30:	000dae8c 	.word	0x000dae8c

000d6a34 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   d6a34:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d6a36:	2300      	movs	r3, #0
   d6a38:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d6a3a:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d6a3c:	4604      	mov	r4, r0
   d6a3e:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d6a40:	b12b      	cbz	r3, d6a4e <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d6a42:	2202      	movs	r2, #2
   d6a44:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d6a46:	68eb      	ldr	r3, [r5, #12]
   d6a48:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d6a4a:	68ab      	ldr	r3, [r5, #8]
   d6a4c:	60a3      	str	r3, [r4, #8]
    }
   d6a4e:	4620      	mov	r0, r4
   d6a50:	bd38      	pop	{r3, r4, r5, pc}
	...

000d6a54 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   d6a54:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6a56:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d6a58:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d6a5a:	4668      	mov	r0, sp
   d6a5c:	f7ff ff52 	bl	d6904 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d6a60:	f04f 0302 	mov.w	r3, #2
   d6a64:	e8d4 2f4f 	ldrexb	r2, [r4]
   d6a68:	2a00      	cmp	r2, #0
   d6a6a:	d103      	bne.n	d6a74 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   d6a6c:	e8c4 3f41 	strexb	r1, r3, [r4]
   d6a70:	2900      	cmp	r1, #0
   d6a72:	d1f7      	bne.n	d6a64 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   d6a74:	d125      	bne.n	d6ac2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   d6a76:	f104 050c 	add.w	r5, r4, #12
   d6a7a:	4669      	mov	r1, sp
   d6a7c:	4628      	mov	r0, r5
   d6a7e:	f7ff ff41 	bl	d6904 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   d6a82:	f3bf 8f5b 	dmb	ish
   d6a86:	2301      	movs	r3, #1
   d6a88:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d6a8a:	2000      	movs	r0, #0
   d6a8c:	f104 0308 	add.w	r3, r4, #8
   d6a90:	f3bf 8f5b 	dmb	ish
   d6a94:	e853 6f00 	ldrex	r6, [r3]
   d6a98:	e843 0200 	strex	r2, r0, [r3]
   d6a9c:	2a00      	cmp	r2, #0
   d6a9e:	d1f9      	bne.n	d6a94 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   d6aa0:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d6aa4:	b16e      	cbz	r6, d6ac2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   d6aa6:	f7ff fd35 	bl	d6514 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d6aaa:	b178      	cbz	r0, d6acc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d6aac:	4629      	mov	r1, r5
   d6aae:	4630      	mov	r0, r6
   d6ab0:	f7ff ff8c 	bl	d69cc <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   d6ab4:	4630      	mov	r0, r6
   d6ab6:	f7ff f8c9 	bl	d5c4c <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d6aba:	2110      	movs	r1, #16
   d6abc:	4630      	mov	r0, r6
   d6abe:	f002 fe91 	bl	d97e4 <_ZdlPvj>
        p_->setError(std::move(error));
   d6ac2:	4668      	mov	r0, sp
   d6ac4:	f7ff ff2b 	bl	d691e <_ZN8particle5ErrorD1Ev>
    }
   d6ac8:	b009      	add	sp, #36	; 0x24
   d6aca:	bdf0      	pop	{r4, r5, r6, r7, pc}
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d6acc:	4631      	mov	r1, r6
   d6ace:	a802      	add	r0, sp, #8
   d6ad0:	f7ff ffb0 	bl	d6a34 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d6ad4:	68e0      	ldr	r0, [r4, #12]
   d6ad6:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d6ada:	b108      	cbz	r0, d6ae0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   d6adc:	f003 fddc 	bl	da698 <strdup>
        type_(type) {
   d6ae0:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d6ae2:	2010      	movs	r0, #16
   d6ae4:	f8ad 501c 	strh.w	r5, [sp, #28]
   d6ae8:	f7fd fad5 	bl	d4096 <_Znwj>
   d6aec:	4605      	mov	r5, r0
   d6aee:	b1e8      	cbz	r0, d6b2c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   d6af0:	2700      	movs	r7, #0
   d6af2:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6af4:	2018      	movs	r0, #24
   d6af6:	f7fd face 	bl	d4096 <_Znwj>
   d6afa:	4604      	mov	r4, r0
   d6afc:	b188      	cbz	r0, d6b22 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   d6afe:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   d6b00:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d6b02:	a802      	add	r0, sp, #8
   d6b04:	f7ff f921 	bl	d5d4a <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6b08:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d6b0a:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d6b0c:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6b0e:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d6b10:	9204      	str	r2, [sp, #16]
   d6b12:	a906      	add	r1, sp, #24
   d6b14:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d6b16:	60e3      	str	r3, [r4, #12]
   d6b18:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   d6b1c:	9205      	str	r2, [sp, #20]
   d6b1e:	f7ff fef1 	bl	d6904 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   d6b22:	4b08      	ldr	r3, [pc, #32]	; (d6b44 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   d6b24:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d6b26:	4b08      	ldr	r3, [pc, #32]	; (d6b48 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6b28:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d6b2a:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   d6b2c:	a806      	add	r0, sp, #24
   d6b2e:	f7ff fef6 	bl	d691e <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d6b32:	a802      	add	r0, sp, #8
   d6b34:	f7ff f88a 	bl	d5c4c <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d6b38:	2200      	movs	r2, #0
   d6b3a:	4629      	mov	r1, r5
   d6b3c:	4803      	ldr	r0, [pc, #12]	; (d6b4c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   d6b3e:	f7ff fcf1 	bl	d6524 <application_thread_invoke>
   d6b42:	e7b7      	b.n	d6ab4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   d6b44:	000d69df 	.word	0x000d69df
   d6b48:	000d6c75 	.word	0x000d6c75
   d6b4c:	000d67d3 	.word	0x000d67d3

000d6b50 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d6b50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d6b54:	b08a      	sub	sp, #40	; 0x28
   d6b56:	4605      	mov	r5, r0
   d6b58:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
   d6b5c:	460c      	mov	r4, r1
   d6b5e:	4617      	mov	r7, r2
   d6b60:	4698      	mov	r8, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d6b62:	f7ff fd2f 	bl	d65c4 <spark_cloud_flag_connected>
   d6b66:	ae07      	add	r6, sp, #28
    if (!connected()) {
   d6b68:	4682      	mov	sl, r0
   d6b6a:	bb38      	cbnz	r0, d6bbc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   d6b6c:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d6b70:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d6b72:	a905      	add	r1, sp, #20
   d6b74:	4630      	mov	r0, r6
   d6b76:	f8ad 3018 	strh.w	r3, [sp, #24]
   d6b7a:	f7ff fec3 	bl	d6904 <_ZN8particle5ErrorC1EOS0_>
   d6b7e:	2014      	movs	r0, #20
   d6b80:	f7fd fa89 	bl	d4096 <_Znwj>
   d6b84:	4604      	mov	r4, r0
   d6b86:	b148      	cbz	r0, d6b9c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d6b88:	2302      	movs	r3, #2
   d6b8a:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d6b8c:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d6b8e:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d6b92:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   d6b94:	4631      	mov	r1, r6
   d6b96:	300c      	adds	r0, #12
   d6b98:	f7ff feb4 	bl	d6904 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d6b9c:	4628      	mov	r0, r5
	: __shared_count(__p)
   d6b9e:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d6ba0:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   d6ba4:	f7ff ff32 	bl	d6a0c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d6ba8:	4630      	mov	r0, r6
   d6baa:	f7ff feb8 	bl	d691e <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d6bae:	a805      	add	r0, sp, #20
   d6bb0:	f7ff feb5 	bl	d691e <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   d6bb4:	4628      	mov	r0, r5
   d6bb6:	b00a      	add	sp, #40	; 0x28
   d6bb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d6bbc:	230c      	movs	r3, #12
   d6bbe:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d6bc2:	2014      	movs	r0, #20
   d6bc4:	e9cd aa08 	strd	sl, sl, [sp, #32]
   d6bc8:	9307      	str	r3, [sp, #28]
   d6bca:	f7fd fa64 	bl	d4096 <_Znwj>
   d6bce:	4601      	mov	r1, r0
   d6bd0:	b128      	cbz	r0, d6bde <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d6bd2:	e9c0 aa01 	strd	sl, sl, [r0, #4]
   d6bd6:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d6bda:	f880 a001 	strb.w	sl, [r0, #1]
   d6bde:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d6be0:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   d6be2:	f7ff ff13 	bl	d6a0c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   d6be6:	4b22      	ldr	r3, [pc, #136]	; (d6c70 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
   d6be8:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d6bea:	2008      	movs	r0, #8
   d6bec:	f7fd fa53 	bl	d4096 <_Znwj>
   d6bf0:	4682      	mov	sl, r0
   d6bf2:	b128      	cbz	r0, d6c00 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6bf4:	9b03      	ldr	r3, [sp, #12]
   d6bf6:	f840 3b04 	str.w	r3, [r0], #4
   d6bfa:	a904      	add	r1, sp, #16
   d6bfc:	f7ff fe0d 	bl	d681a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d6c00:	9600      	str	r6, [sp, #0]
   d6c02:	fa5f f389 	uxtb.w	r3, r9
   d6c06:	4642      	mov	r2, r8
   d6c08:	4639      	mov	r1, r7
   d6c0a:	4620      	mov	r0, r4
    d.handler_data = p.dataPtr();
   d6c0c:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d6c10:	f7ff fce0 	bl	d65d4 <spark_send_event>
   d6c14:	b9b8      	cbnz	r0, d6c46 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
   d6c16:	9b03      	ldr	r3, [sp, #12]
   d6c18:	785b      	ldrb	r3, [r3, #1]
   d6c1a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d6c1e:	b993      	cbnz	r3, d6c46 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
   d6c20:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   d6c24:	a905      	add	r1, sp, #20
   d6c26:	a803      	add	r0, sp, #12
   d6c28:	9205      	str	r2, [sp, #20]
   d6c2a:	f8ad 3018 	strh.w	r3, [sp, #24]
   d6c2e:	f7ff ff11 	bl	d6a54 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d6c32:	a805      	add	r0, sp, #20
   d6c34:	f7ff fe73 	bl	d691e <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d6c38:	a805      	add	r0, sp, #20
   d6c3a:	9909      	ldr	r1, [sp, #36]	; 0x24
   d6c3c:	f7ff fea7 	bl	d698e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   d6c40:	a806      	add	r0, sp, #24
   d6c42:	f7ff fdf1 	bl	d6828 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6c46:	9b03      	ldr	r3, [sp, #12]
   d6c48:	9305      	str	r3, [sp, #20]
   d6c4a:	a904      	add	r1, sp, #16
   d6c4c:	a806      	add	r0, sp, #24
   d6c4e:	f7ff fde4 	bl	d681a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   d6c52:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d6c54:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d6c56:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   d6c58:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   d6c5a:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   d6c5c:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   d6c5e:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   d6c60:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   d6c62:	f7ff fde1 	bl	d6828 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6c66:	a804      	add	r0, sp, #16
   d6c68:	f7ff fdde 	bl	d6828 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   d6c6c:	e7a2      	b.n	d6bb4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   d6c6e:	bf00      	nop
   d6c70:	000d6d39 	.word	0x000d6d39

000d6c74 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
   d6c74:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d6c76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6c78:	4605      	mov	r5, r0
	  switch (__op)
   d6c7a:	d007      	beq.n	d6c8c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
   d6c7c:	2a03      	cmp	r2, #3
   d6c7e:	d018      	beq.n	d6cb2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
   d6c80:	2a01      	cmp	r2, #1
   d6c82:	d101      	bne.n	d6c88 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d6c84:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d6c86:	6003      	str	r3, [r0, #0]
	}
   d6c88:	2000      	movs	r0, #0
   d6c8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d6c8c:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   d6c8e:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d6c90:	f7fd fa01 	bl	d4096 <_Znwj>
   d6c94:	4604      	mov	r4, r0
   d6c96:	b150      	cbz	r0, d6cae <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      _Bind(const _Bind&) = default;
   d6c98:	4631      	mov	r1, r6
   d6c9a:	f7ff fecb 	bl	d6a34 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d6c9e:	6930      	ldr	r0, [r6, #16]
   d6ca0:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d6ca4:	b108      	cbz	r0, d6caa <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   d6ca6:	f003 fcf7 	bl	da698 <strdup>
        type_(type) {
   d6caa:	6120      	str	r0, [r4, #16]
   d6cac:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   d6cae:	602c      	str	r4, [r5, #0]
	}
   d6cb0:	e7ea      	b.n	d6c88 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d6cb2:	6804      	ldr	r4, [r0, #0]
   d6cb4:	2c00      	cmp	r4, #0
   d6cb6:	d0e7      	beq.n	d6c88 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
   d6cb8:	f104 0010 	add.w	r0, r4, #16
   d6cbc:	f7ff fe2f 	bl	d691e <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d6cc0:	4620      	mov	r0, r4
   d6cc2:	f7fe ffc3 	bl	d5c4c <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d6cc6:	2118      	movs	r1, #24
   d6cc8:	4620      	mov	r0, r4
   d6cca:	f002 fd8b 	bl	d97e4 <_ZdlPvj>
   d6cce:	e7db      	b.n	d6c88 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

000d6cd0 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   d6cd0:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d6cd2:	2300      	movs	r3, #0
   d6cd4:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d6cd6:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d6cd8:	4604      	mov	r4, r0
   d6cda:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d6cdc:	b12b      	cbz	r3, d6cea <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d6cde:	2202      	movs	r2, #2
   d6ce0:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d6ce2:	68eb      	ldr	r3, [r5, #12]
   d6ce4:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d6ce6:	68ab      	ldr	r3, [r5, #8]
   d6ce8:	60a3      	str	r3, [r4, #8]
    }
   d6cea:	4620      	mov	r0, r4
   d6cec:	bd38      	pop	{r3, r4, r5, pc}

000d6cee <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
   d6cee:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d6cf0:	b570      	push	{r4, r5, r6, lr}
   d6cf2:	4604      	mov	r4, r0
	  switch (__op)
   d6cf4:	d007      	beq.n	d6d06 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
   d6cf6:	2a03      	cmp	r2, #3
   d6cf8:	d012      	beq.n	d6d20 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
   d6cfa:	2a01      	cmp	r2, #1
   d6cfc:	d101      	bne.n	d6d02 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d6cfe:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d6d00:	6003      	str	r3, [r0, #0]
	}
   d6d02:	2000      	movs	r0, #0
   d6d04:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d6d06:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   d6d08:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d6d0a:	f7fd f9c4 	bl	d4096 <_Znwj>
   d6d0e:	4605      	mov	r5, r0
   d6d10:	b120      	cbz	r0, d6d1c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   d6d12:	4631      	mov	r1, r6
   d6d14:	f7ff ffdc 	bl	d6cd0 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d6d18:	7c33      	ldrb	r3, [r6, #16]
   d6d1a:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   d6d1c:	6025      	str	r5, [r4, #0]
	}
   d6d1e:	e7f0      	b.n	d6d02 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d6d20:	6804      	ldr	r4, [r0, #0]
   d6d22:	2c00      	cmp	r4, #0
   d6d24:	d0ed      	beq.n	d6d02 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
   d6d26:	4620      	mov	r0, r4
   d6d28:	f7fe ff90 	bl	d5c4c <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d6d2c:	2114      	movs	r1, #20
   d6d2e:	4620      	mov	r0, r4
   d6d30:	f002 fd58 	bl	d97e4 <_ZdlPvj>
   d6d34:	e7e5      	b.n	d6d02 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

000d6d38 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d6d38:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6d3a:	b089      	sub	sp, #36	; 0x24
   d6d3c:	4604      	mov	r4, r0
   d6d3e:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d6d40:	a801      	add	r0, sp, #4
   d6d42:	4611      	mov	r1, r2
   d6d44:	f7ff fe23 	bl	d698e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d6d48:	b1a4      	cbz	r4, d6d74 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   d6d4a:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d6d4c:	b11d      	cbz	r5, d6d56 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   d6d4e:	4628      	mov	r0, r5
   d6d50:	f003 fca2 	bl	da698 <strdup>
   d6d54:	4605      	mov	r5, r0
   d6d56:	a801      	add	r0, sp, #4
   d6d58:	a903      	add	r1, sp, #12
        type_(type) {
   d6d5a:	9503      	str	r5, [sp, #12]
   d6d5c:	f8ad 4010 	strh.w	r4, [sp, #16]
   d6d60:	f7ff fe78 	bl	d6a54 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d6d64:	a803      	add	r0, sp, #12
   d6d66:	f7ff fdda 	bl	d691e <_ZN8particle5ErrorD1Ev>
   d6d6a:	a802      	add	r0, sp, #8
   d6d6c:	f7ff fd5c 	bl	d6828 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d6d70:	b009      	add	sp, #36	; 0x24
   d6d72:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d6d74:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d6d76:	2301      	movs	r3, #1
   d6d78:	e8d5 2f4f 	ldrexb	r2, [r5]
   d6d7c:	2a00      	cmp	r2, #0
   d6d7e:	d103      	bne.n	d6d88 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   d6d80:	e8c5 3f41 	strexb	r1, r3, [r5]
   d6d84:	2900      	cmp	r1, #0
   d6d86:	d1f7      	bne.n	d6d78 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   d6d88:	d1ef      	bne.n	d6d6a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   d6d8a:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   d6d8c:	f3bf 8f5b 	dmb	ish
   d6d90:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d6d92:	1d2b      	adds	r3, r5, #4
   d6d94:	f3bf 8f5b 	dmb	ish
   d6d98:	e853 6f00 	ldrex	r6, [r3]
   d6d9c:	e843 4200 	strex	r2, r4, [r3]
   d6da0:	2a00      	cmp	r2, #0
   d6da2:	d1f9      	bne.n	d6d98 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   d6da4:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d6da8:	2e00      	cmp	r6, #0
   d6daa:	d0de      	beq.n	d6d6a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   d6dac:	4620      	mov	r0, r4
   d6dae:	f7ff fbb1 	bl	d6514 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d6db2:	4607      	mov	r7, r0
   d6db4:	b160      	cbz	r0, d6dd0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d6db6:	f105 010c 	add.w	r1, r5, #12
   d6dba:	4630      	mov	r0, r6
   d6dbc:	f7ff fe16 	bl	d69ec <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   d6dc0:	4630      	mov	r0, r6
   d6dc2:	f7fe ff43 	bl	d5c4c <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d6dc6:	2110      	movs	r1, #16
   d6dc8:	4630      	mov	r0, r6
   d6dca:	f002 fd0b 	bl	d97e4 <_ZdlPvj>
   d6dce:	e7cc      	b.n	d6d6a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d6dd0:	4631      	mov	r1, r6
   d6dd2:	a803      	add	r0, sp, #12
   d6dd4:	f7ff ff7c 	bl	d6cd0 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d6dd8:	7b2b      	ldrb	r3, [r5, #12]
   d6dda:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d6dde:	2010      	movs	r0, #16
   d6de0:	f7fd f959 	bl	d4096 <_Znwj>
   d6de4:	4605      	mov	r5, r0
   d6de6:	b1d0      	cbz	r0, d6e1e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   d6de8:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6dea:	2014      	movs	r0, #20
   d6dec:	f7fd f953 	bl	d4096 <_Znwj>
   d6df0:	4604      	mov	r4, r0
   d6df2:	b178      	cbz	r0, d6e14 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   d6df4:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d6df6:	4601      	mov	r1, r0
   d6df8:	a803      	add	r0, sp, #12
   d6dfa:	f7fe ffa6 	bl	d5d4a <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6dfe:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d6e00:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d6e02:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6e04:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   d6e06:	9205      	str	r2, [sp, #20]
   d6e08:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d6e0a:	60e3      	str	r3, [r4, #12]
   d6e0c:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   d6e10:	9206      	str	r2, [sp, #24]
   d6e12:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   d6e14:	4b06      	ldr	r3, [pc, #24]	; (d6e30 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   d6e16:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d6e18:	4b06      	ldr	r3, [pc, #24]	; (d6e34 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6e1a:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d6e1c:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   d6e1e:	a803      	add	r0, sp, #12
   d6e20:	f7fe ff14 	bl	d5c4c <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d6e24:	2200      	movs	r2, #0
   d6e26:	4629      	mov	r1, r5
   d6e28:	4803      	ldr	r0, [pc, #12]	; (d6e38 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   d6e2a:	f7ff fb7b 	bl	d6524 <application_thread_invoke>
   d6e2e:	e7c7      	b.n	d6dc0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   d6e30:	000d69ff 	.word	0x000d69ff
   d6e34:	000d6cef 	.word	0x000d6cef
   d6e38:	000d67d3 	.word	0x000d67d3

000d6e3c <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d6e3c:	2200      	movs	r2, #0
   d6e3e:	6840      	ldr	r0, [r0, #4]
   d6e40:	4611      	mov	r1, r2
   d6e42:	f7ff bc27 	b.w	d6694 <network_listening>

000d6e46 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d6e46:	2200      	movs	r2, #0
   d6e48:	6840      	ldr	r0, [r0, #4]
   d6e4a:	4611      	mov	r1, r2
   d6e4c:	f7ff bc32 	b.w	d66b4 <network_get_listen_timeout>

000d6e50 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d6e50:	6840      	ldr	r0, [r0, #4]
   d6e52:	2200      	movs	r2, #0
   d6e54:	f7ff bc26 	b.w	d66a4 <network_set_listen_timeout>

000d6e58 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d6e58:	6840      	ldr	r0, [r0, #4]
   d6e5a:	2200      	movs	r2, #0
   d6e5c:	f081 0101 	eor.w	r1, r1, #1
   d6e60:	f7ff bc10 	b.w	d6684 <network_listen>

000d6e64 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d6e64:	2300      	movs	r3, #0
   d6e66:	6840      	ldr	r0, [r0, #4]
   d6e68:	461a      	mov	r2, r3
   d6e6a:	4619      	mov	r1, r3
   d6e6c:	f7ff bc02 	b.w	d6674 <network_off>

000d6e70 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d6e70:	2300      	movs	r3, #0
   d6e72:	6840      	ldr	r0, [r0, #4]
   d6e74:	461a      	mov	r2, r3
   d6e76:	4619      	mov	r1, r3
   d6e78:	f7ff bbf4 	b.w	d6664 <network_on>

000d6e7c <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d6e7c:	2200      	movs	r2, #0
   d6e7e:	6840      	ldr	r0, [r0, #4]
   d6e80:	4611      	mov	r1, r2
   d6e82:	f7ff bbe7 	b.w	d6654 <network_ready>

000d6e86 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d6e86:	2200      	movs	r2, #0
   d6e88:	6840      	ldr	r0, [r0, #4]
   d6e8a:	4611      	mov	r1, r2
   d6e8c:	f7ff bbd2 	b.w	d6634 <network_connecting>

000d6e90 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6e90:	6840      	ldr	r0, [r0, #4]
   d6e92:	2200      	movs	r2, #0
   d6e94:	2102      	movs	r1, #2
   d6e96:	f7ff bbd5 	b.w	d6644 <network_disconnect>

000d6e9a <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d6e9a:	2300      	movs	r3, #0
   d6e9c:	6840      	ldr	r0, [r0, #4]
   d6e9e:	461a      	mov	r2, r3
   d6ea0:	f7ff bbc0 	b.w	d6624 <network_connect>

000d6ea4 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   d6ea4:	4b02      	ldr	r3, [pc, #8]	; (d6eb0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d6ea6:	2203      	movs	r2, #3
   d6ea8:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d6eaa:	4a02      	ldr	r2, [pc, #8]	; (d6eb4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d6eac:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d6eae:	4770      	bx	lr
   d6eb0:	2003e624 	.word	0x2003e624
   d6eb4:	000daea8 	.word	0x000daea8

000d6eb8 <_ZN8particle6detail9_getVCellEhh>:

namespace particle { namespace detail {
    // Converts VCELL_REGISTER reading to Battery Voltage
    float _getVCell(byte MSB, byte LSB) {
        // VCELL = 12-bit value, 1.25mV (1V/800) per bit
        float value = (float)((MSB << 4) | (LSB >> 4));
   d6eb8:	0909      	lsrs	r1, r1, #4
   d6eba:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
   d6ebe:	ee07 1a90 	vmov	s15, r1
   d6ec2:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
        return value / 800.0;
    }
   d6ec6:	eddf 7a02 	vldr	s15, [pc, #8]	; d6ed0 <_ZN8particle6detail9_getVCellEhh+0x18>
   d6eca:	ee80 0a27 	vdiv.f32	s0, s0, s15
   d6ece:	4770      	bx	lr
   d6ed0:	44480000 	.word	0x44480000

000d6ed4 <_ZN9FuelGauge4lockEv>:
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
    return SYSTEM_ERROR_NONE;
}

bool FuelGauge::lock() {
    return i2c_.lock();
   d6ed4:	6800      	ldr	r0, [r0, #0]
   d6ed6:	f000 b931 	b.w	d713c <_ZN7TwoWire4lockEv>

000d6eda <_ZN9FuelGaugeC1ER7TwoWireb>:
FuelGauge::FuelGauge(TwoWire& i2c, bool _lock)
   d6eda:	b510      	push	{r4, lr}
   d6edc:	4604      	mov	r4, r0
      lock_(_lock) {
   d6ede:	6001      	str	r1, [r0, #0]
   d6ee0:	7102      	strb	r2, [r0, #4]
    if (lock_) {
   d6ee2:	b10a      	cbz	r2, d6ee8 <_ZN9FuelGaugeC1ER7TwoWireb+0xe>
        lock();
   d6ee4:	f7ff fff6 	bl	d6ed4 <_ZN9FuelGauge4lockEv>
}
   d6ee8:	4620      	mov	r0, r4
   d6eea:	bd10      	pop	{r4, pc}

000d6eec <_ZN9FuelGaugeC1Eb>:
FuelGauge::FuelGauge(bool _lock)
   d6eec:	b513      	push	{r0, r1, r4, lr}
   d6eee:	4604      	mov	r4, r0
   d6ef0:	9101      	str	r1, [sp, #4]
            return &Wire1;
   d6ef2:	f002 fc53 	bl	d979c <_Z20__fetch_global_Wire1v>
        : FuelGauge(*fuelWireInstance(), _lock)
   d6ef6:	9a01      	ldr	r2, [sp, #4]
            return &Wire1;
   d6ef8:	4601      	mov	r1, r0
        : FuelGauge(*fuelWireInstance(), _lock)
   d6efa:	4620      	mov	r0, r4
   d6efc:	f7ff ffed 	bl	d6eda <_ZN9FuelGaugeC1ER7TwoWireb>
}
   d6f00:	4620      	mov	r0, r4
   d6f02:	b002      	add	sp, #8
   d6f04:	bd10      	pop	{r4, pc}

000d6f06 <_ZN9FuelGauge6unlockEv>:
}

bool FuelGauge::unlock() {
    return i2c_.unlock();
   d6f06:	6800      	ldr	r0, [r0, #0]
   d6f08:	f000 b921 	b.w	d714e <_ZN7TwoWire6unlockEv>

000d6f0c <_ZN9FuelGauge12readRegisterEhRhS0_>:
int FuelGauge::readRegister(byte startAddress, byte &MSB, byte &LSB) {
   d6f0c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   d6f10:	4604      	mov	r4, r0
   d6f12:	460d      	mov	r5, r1
   d6f14:	4617      	mov	r7, r2
   d6f16:	461e      	mov	r6, r3
   d6f18:	f7ff ffdc 	bl	d6ed4 <_ZN9FuelGauge4lockEv>
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d6f1c:	2336      	movs	r3, #54	; 0x36
   d6f1e:	f88d 3000 	strb.w	r3, [sp]
   d6f22:	2300      	movs	r3, #0
    i2c_.beginTransmission(config);
   d6f24:	6820      	ldr	r0, [r4, #0]
   d6f26:	9301      	str	r3, [sp, #4]
   d6f28:	f04f 0801 	mov.w	r8, #1
    size_ = size;
    return *this;
  }

  WireTransmission& timeout(system_tick_t ms) {
    timeout_ = ms;
   d6f2c:	230a      	movs	r3, #10
   d6f2e:	4669      	mov	r1, sp
   d6f30:	9303      	str	r3, [sp, #12]
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d6f32:	f88d 8008 	strb.w	r8, [sp, #8]
   d6f36:	f000 f8e1 	bl	d70fc <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
    i2c_.write(startAddress);
   d6f3a:	6820      	ldr	r0, [r4, #0]
   d6f3c:	6803      	ldr	r3, [r0, #0]
   d6f3e:	4629      	mov	r1, r5
   d6f40:	689b      	ldr	r3, [r3, #8]
   d6f42:	4798      	blx	r3
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
   d6f44:	6820      	ldr	r0, [r4, #0]
   d6f46:	4641      	mov	r1, r8
   d6f48:	f000 f8f0 	bl	d712c <_ZN7TwoWire15endTransmissionEh>
   d6f4c:	4605      	mov	r5, r0
   d6f4e:	b140      	cbz	r0, d6f62 <_ZN9FuelGauge12readRegisterEhRhS0_+0x56>
   d6f50:	f06f 059f 	mvn.w	r5, #159	; 0x9f
      { _M_device.unlock(); }
   d6f54:	4620      	mov	r0, r4
   d6f56:	f7ff ffd6 	bl	d6f06 <_ZN9FuelGauge6unlockEv>
}
   d6f5a:	4628      	mov	r0, r5
   d6f5c:	b004      	add	sp, #16
   d6f5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_ = size;
   d6f62:	2302      	movs	r3, #2
    CHECK_TRUE(i2c_.requestFrom(config) == 2, SYSTEM_ERROR_TIMEOUT);
   d6f64:	6820      	ldr	r0, [r4, #0]
   d6f66:	9301      	str	r3, [sp, #4]
   d6f68:	4669      	mov	r1, sp
   d6f6a:	f000 f897 	bl	d709c <_ZN7TwoWire11requestFromERK16WireTransmission>
   d6f6e:	2802      	cmp	r0, #2
   d6f70:	d1ee      	bne.n	d6f50 <_ZN9FuelGauge12readRegisterEhRhS0_+0x44>
    MSB = i2c_.read();
   d6f72:	6820      	ldr	r0, [r4, #0]
   d6f74:	6803      	ldr	r3, [r0, #0]
   d6f76:	695b      	ldr	r3, [r3, #20]
   d6f78:	4798      	blx	r3
   d6f7a:	7038      	strb	r0, [r7, #0]
    LSB = i2c_.read();
   d6f7c:	6820      	ldr	r0, [r4, #0]
   d6f7e:	6803      	ldr	r3, [r0, #0]
   d6f80:	695b      	ldr	r3, [r3, #20]
   d6f82:	4798      	blx	r3
   d6f84:	7030      	strb	r0, [r6, #0]
    return SYSTEM_ERROR_NONE;
   d6f86:	e7e5      	b.n	d6f54 <_ZN9FuelGauge12readRegisterEhRhS0_+0x48>

000d6f88 <_ZN9FuelGauge8getVCellEv>:
float FuelGauge::getVCell() {
   d6f88:	b507      	push	{r0, r1, r2, lr}
    byte MSB = 0;
   d6f8a:	2300      	movs	r3, #0
   d6f8c:	f88d 3006 	strb.w	r3, [sp, #6]
    byte LSB = 0;
   d6f90:	f88d 3007 	strb.w	r3, [sp, #7]
    if (readRegister(VCELL_REGISTER, MSB, LSB) != SYSTEM_ERROR_NONE) {
   d6f94:	f10d 0206 	add.w	r2, sp, #6
   d6f98:	f10d 0307 	add.w	r3, sp, #7
   d6f9c:	2102      	movs	r1, #2
   d6f9e:	f7ff ffb5 	bl	d6f0c <_ZN9FuelGauge12readRegisterEhRhS0_>
   d6fa2:	b940      	cbnz	r0, d6fb6 <_ZN9FuelGauge8getVCellEv+0x2e>
    return particle::detail::_getVCell(MSB, LSB);
   d6fa4:	f89d 1007 	ldrb.w	r1, [sp, #7]
   d6fa8:	f89d 0006 	ldrb.w	r0, [sp, #6]
}
   d6fac:	b003      	add	sp, #12
   d6fae:	f85d eb04 	ldr.w	lr, [sp], #4
    return particle::detail::_getVCell(MSB, LSB);
   d6fb2:	f7ff bf81 	b.w	d6eb8 <_ZN8particle6detail9_getVCellEhh>
}
   d6fb6:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
   d6fba:	b003      	add	sp, #12
   d6fbc:	f85d fb04 	ldr.w	pc, [sp], #4

000d6fc0 <_ZN9FuelGauge6getSoCEv>:
float FuelGauge::getSoC() {
   d6fc0:	b507      	push	{r0, r1, r2, lr}
    byte MSB = 0;
   d6fc2:	2300      	movs	r3, #0
   d6fc4:	f88d 3006 	strb.w	r3, [sp, #6]
    byte LSB = 0;
   d6fc8:	f88d 3007 	strb.w	r3, [sp, #7]
    if(readRegister(SOC_REGISTER, MSB, LSB) != SYSTEM_ERROR_NONE) {
   d6fcc:	f10d 0206 	add.w	r2, sp, #6
   d6fd0:	f10d 0307 	add.w	r3, sp, #7
   d6fd4:	2104      	movs	r1, #4
   d6fd6:	f7ff ff99 	bl	d6f0c <_ZN9FuelGauge12readRegisterEhRhS0_>
   d6fda:	b9b0      	cbnz	r0, d700a <_ZN9FuelGauge6getSoCEv+0x4a>
        float decimal = LSB / 256.0;
   d6fdc:	f89d 0007 	ldrb.w	r0, [sp, #7]
   d6fe0:	f002 fd5c 	bl	d9a9c <__aeabi_i2d>
   d6fe4:	4b0a      	ldr	r3, [pc, #40]	; (d7010 <_ZN9FuelGauge6getSoCEv+0x50>)
   d6fe6:	2200      	movs	r2, #0
   d6fe8:	f002 fdc2 	bl	d9b70 <__aeabi_dmul>
   d6fec:	f003 f87a 	bl	da0e4 <__aeabi_d2f>
        return MSB + decimal;
   d6ff0:	f89d 3006 	ldrb.w	r3, [sp, #6]
   d6ff4:	ee00 3a10 	vmov	s0, r3
   d6ff8:	ee07 0a90 	vmov	s15, r0
   d6ffc:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
   d7000:	ee37 0a80 	vadd.f32	s0, s15, s0
}
   d7004:	b003      	add	sp, #12
   d7006:	f85d fb04 	ldr.w	pc, [sp], #4
        return -1.0f;
   d700a:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
   d700e:	e7f9      	b.n	d7004 <_ZN9FuelGauge6getSoCEv+0x44>
   d7010:	3f700000 	.word	0x3f700000

000d7014 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d7014:	4770      	bx	lr

000d7016 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d7016:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7018:	4606      	mov	r6, r0
   d701a:	4615      	mov	r5, r2
   d701c:	460c      	mov	r4, r1
   d701e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d7020:	42bc      	cmp	r4, r7
   d7022:	d006      	beq.n	d7032 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d7024:	6833      	ldr	r3, [r6, #0]
   d7026:	f814 1b01 	ldrb.w	r1, [r4], #1
   d702a:	689b      	ldr	r3, [r3, #8]
   d702c:	4630      	mov	r0, r6
   d702e:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d7030:	e7f6      	b.n	d7020 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d7032:	4628      	mov	r0, r5
   d7034:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7036 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d7036:	7c00      	ldrb	r0, [r0, #16]
   d7038:	2200      	movs	r2, #0
   d703a:	f7ff b911 	b.w	d6260 <hal_i2c_write>

000d703e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d703e:	7c00      	ldrb	r0, [r0, #16]
   d7040:	2100      	movs	r1, #0
   d7042:	f7ff b915 	b.w	d6270 <hal_i2c_available>

000d7046 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d7046:	7c00      	ldrb	r0, [r0, #16]
   d7048:	2100      	movs	r1, #0
   d704a:	f7ff b919 	b.w	d6280 <hal_i2c_read>

000d704e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d704e:	7c00      	ldrb	r0, [r0, #16]
   d7050:	2100      	movs	r1, #0
   d7052:	f7ff b91d 	b.w	d6290 <hal_i2c_peek>

000d7056 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d7056:	7c00      	ldrb	r0, [r0, #16]
   d7058:	2100      	movs	r1, #0
   d705a:	f7ff b921 	b.w	d62a0 <hal_i2c_flush>

000d705e <_ZN7TwoWireD0Ev>:
   d705e:	b510      	push	{r4, lr}
   d7060:	2114      	movs	r1, #20
   d7062:	4604      	mov	r4, r0
   d7064:	f002 fbbe 	bl	d97e4 <_ZdlPvj>
   d7068:	4620      	mov	r0, r4
   d706a:	bd10      	pop	{r4, pc}

000d706c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d706c:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d706e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d7072:	4604      	mov	r4, r0
   d7074:	4608      	mov	r0, r1
   d7076:	2100      	movs	r1, #0
   d7078:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d707c:	4b03      	ldr	r3, [pc, #12]	; (d708c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d707e:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d7080:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d7082:	4611      	mov	r1, r2
   d7084:	f7ff f91c 	bl	d62c0 <hal_i2c_init>
}
   d7088:	4620      	mov	r0, r4
   d708a:	bd10      	pop	{r4, pc}
   d708c:	000daee4 	.word	0x000daee4

000d7090 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d7090:	2300      	movs	r3, #0
   d7092:	7c00      	ldrb	r0, [r0, #16]
   d7094:	461a      	mov	r2, r3
   d7096:	4619      	mov	r1, r3
   d7098:	f7ff b8ca 	b.w	d6230 <hal_i2c_begin>

000d709c <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d709c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   d709e:	2200      	movs	r2, #0
   d70a0:	2314      	movs	r3, #20
   d70a2:	e9cd 2201 	strd	r2, r2, [sp, #4]
   d70a6:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   d70aa:	780b      	ldrb	r3, [r1, #0]
   d70ac:	f88d 3008 	strb.w	r3, [sp, #8]
   d70b0:	684b      	ldr	r3, [r1, #4]
   d70b2:	9303      	str	r3, [sp, #12]
   d70b4:	68cb      	ldr	r3, [r1, #12]
   d70b6:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   d70b8:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   d70ba:	7a0b      	ldrb	r3, [r1, #8]
   d70bc:	9305      	str	r3, [sp, #20]
   d70be:	a901      	add	r1, sp, #4
   d70c0:	f7ff f916 	bl	d62f0 <hal_i2c_request_ex>
}
   d70c4:	b007      	add	sp, #28
   d70c6:	f85d fb04 	ldr.w	pc, [sp], #4

000d70ca <_ZN7TwoWire11requestFromEhjh>:
{
   d70ca:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d70cc:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d70ce:	f88d 1000 	strb.w	r1, [sp]
   d70d2:	f04f 0164 	mov.w	r1, #100	; 0x64
   d70d6:	9103      	str	r1, [sp, #12]
   d70d8:	bf18      	it	ne
   d70da:	2301      	movne	r3, #1
   d70dc:	4669      	mov	r1, sp
    size_ = size;
   d70de:	9201      	str	r2, [sp, #4]
   d70e0:	f88d 3008 	strb.w	r3, [sp, #8]
   d70e4:	f7ff ffda 	bl	d709c <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d70e8:	b005      	add	sp, #20
   d70ea:	f85d fb04 	ldr.w	pc, [sp], #4

000d70ee <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   d70ee:	7c00      	ldrb	r0, [r0, #16]
   d70f0:	2200      	movs	r2, #0
   d70f2:	f7ff b8a5 	b.w	d6240 <hal_i2c_begin_transmission>

000d70f6 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   d70f6:	b2c9      	uxtb	r1, r1
   d70f8:	f7ff bff9 	b.w	d70ee <_ZN7TwoWire17beginTransmissionEh>

000d70fc <_ZN7TwoWire17beginTransmissionERK16WireTransmission>:
void TwoWire::beginTransmission(const WireTransmission& transfer) {
   d70fc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   d70fe:	2300      	movs	r3, #0
   d7100:	e9cd 3301 	strd	r3, r3, [sp, #4]
    };
   d7104:	684a      	ldr	r2, [r1, #4]
   d7106:	9203      	str	r2, [sp, #12]
    hal_i2c_transmission_config_t conf = {
   d7108:	2314      	movs	r3, #20
    };
   d710a:	68ca      	ldr	r2, [r1, #12]
    hal_i2c_transmission_config_t conf = {
   d710c:	f8ad 3004 	strh.w	r3, [sp, #4]
      .address = address_,
   d7110:	780b      	ldrb	r3, [r1, #0]
    };
   d7112:	9204      	str	r2, [sp, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   d7114:	7a0a      	ldrb	r2, [r1, #8]
   d7116:	9205      	str	r2, [sp, #20]
  hal_i2c_begin_transmission(_i2c, conf.address, &conf);
   d7118:	7c00      	ldrb	r0, [r0, #16]
    };
   d711a:	f88d 3008 	strb.w	r3, [sp, #8]
   d711e:	aa01      	add	r2, sp, #4
   d7120:	4619      	mov	r1, r3
   d7122:	f7ff f88d 	bl	d6240 <hal_i2c_begin_transmission>
}
   d7126:	b007      	add	sp, #28
   d7128:	f85d fb04 	ldr.w	pc, [sp], #4

000d712c <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   d712c:	7c00      	ldrb	r0, [r0, #16]
   d712e:	2200      	movs	r2, #0
   d7130:	f7ff b88e 	b.w	d6250 <hal_i2c_end_transmission>

000d7134 <_ZN7TwoWire9isEnabledEv>:
  hal_i2c_set_callback_on_requested(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return hal_i2c_is_enabled(_i2c, NULL);
   d7134:	7c00      	ldrb	r0, [r0, #16]
   d7136:	2100      	movs	r1, #0
   d7138:	f7ff b8ba 	b.w	d62b0 <hal_i2c_is_enabled>

000d713c <_ZN7TwoWire4lockEv>:
{
  hal_i2c_reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
   d713c:	b508      	push	{r3, lr}
  return hal_i2c_lock(_i2c, NULL) == 0;
   d713e:	2100      	movs	r1, #0
   d7140:	7c00      	ldrb	r0, [r0, #16]
   d7142:	f7ff f8c5 	bl	d62d0 <hal_i2c_lock>
}
   d7146:	fab0 f080 	clz	r0, r0
   d714a:	0940      	lsrs	r0, r0, #5
   d714c:	bd08      	pop	{r3, pc}

000d714e <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
   d714e:	b508      	push	{r3, lr}
  return hal_i2c_unlock(_i2c, NULL) == 0;
   d7150:	2100      	movs	r1, #0
   d7152:	7c00      	ldrb	r0, [r0, #16]
   d7154:	f7ff f8c4 	bl	d62e0 <hal_i2c_unlock>
}
   d7158:	fab0 f080 	clz	r0, r0
   d715c:	0940      	lsrs	r0, r0, #5
   d715e:	bd08      	pop	{r3, pc}

000d7160 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   d7160:	4700      	bx	r0
	...

000d7164 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   d7164:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
   d7168:	2400      	movs	r4, #0
{
   d716a:	461d      	mov	r5, r3
   d716c:	460f      	mov	r7, r1
   d716e:	4690      	mov	r8, r2
   d7170:	4606      	mov	r6, r0
    HAL_Interrupts_Detach(pin);
   d7172:	f7ff f84d 	bl	d6210 <HAL_Interrupts_Detach>
  if (priority >= 0) {
   d7176:	42a5      	cmp	r5, r4
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d7178:	f04f 0304 	mov.w	r3, #4
    HAL_InterruptExtraConfiguration extra = {0};
   d717c:	f8ad 400d 	strh.w	r4, [sp, #13]
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d7180:	f88d 300c 	strb.w	r3, [sp, #12]
    HAL_InterruptExtraConfiguration extra = {0};
   d7184:	f88d 400f 	strb.w	r4, [sp, #15]
    extra.IRQChannelSubPriority = subpriority;
   d7188:	bfa2      	ittt	ge
   d718a:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   d718e:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
   d7192:	ac03      	addge	r4, sp, #12
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d7194:	4907      	ldr	r1, [pc, #28]	; (d71b4 <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)
   d7196:	9400      	str	r4, [sp, #0]
   d7198:	4643      	mov	r3, r8
   d719a:	463a      	mov	r2, r7
   d719c:	4630      	mov	r0, r6
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   d719e:	bfa8      	it	ge
   d71a0:	f88d 500d 	strbge.w	r5, [sp, #13]
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d71a4:	f7ff f82c 	bl	d6200 <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
   d71a8:	fab0 f080 	clz	r0, r0
   d71ac:	0940      	lsrs	r0, r0, #5
   d71ae:	b004      	add	sp, #16
   d71b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d71b4:	000d7161 	.word	0x000d7161

000d71b8 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d71b8:	4770      	bx	lr

000d71ba <_ZN9IPAddressD0Ev>:
   d71ba:	b510      	push	{r4, lr}
   d71bc:	2118      	movs	r1, #24
   d71be:	4604      	mov	r4, r0
   d71c0:	f002 fb10 	bl	d97e4 <_ZdlPvj>
   d71c4:	4620      	mov	r0, r4
   d71c6:	bd10      	pop	{r4, pc}

000d71c8 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d71c8:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d71ca:	7d03      	ldrb	r3, [r0, #20]
   d71cc:	2b06      	cmp	r3, #6
{
   d71ce:	b08d      	sub	sp, #52	; 0x34
   d71d0:	460e      	mov	r6, r1
   d71d2:	f100 0704 	add.w	r7, r0, #4
   d71d6:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d71da:	d012      	beq.n	d7202 <_ZNK9IPAddress7printToER5Print+0x3a>
   d71dc:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d71e0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d71e4:	220a      	movs	r2, #10
   d71e6:	4630      	mov	r0, r6
   d71e8:	f001 fb7d 	bl	d88e6 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d71ec:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d71ee:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d71f0:	d019      	beq.n	d7226 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d71f2:	2c00      	cmp	r4, #0
   d71f4:	d0f4      	beq.n	d71e0 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d71f6:	212e      	movs	r1, #46	; 0x2e
   d71f8:	4630      	mov	r0, r6
   d71fa:	f001 fb65 	bl	d88c8 <_ZN5Print5printEc>
   d71fe:	4404      	add	r4, r0
   d7200:	e7ee      	b.n	d71e0 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d7202:	232f      	movs	r3, #47	; 0x2f
   d7204:	466a      	mov	r2, sp
   d7206:	4639      	mov	r1, r7
   d7208:	200a      	movs	r0, #10
		buf[0] = 0;
   d720a:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d720e:	f7ff f877 	bl	d6300 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d7212:	4668      	mov	r0, sp
   d7214:	f003 fa5d 	bl	da6d2 <strlen>
   d7218:	6833      	ldr	r3, [r6, #0]
   d721a:	4602      	mov	r2, r0
   d721c:	68db      	ldr	r3, [r3, #12]
   d721e:	4669      	mov	r1, sp
   d7220:	4630      	mov	r0, r6
   d7222:	4798      	blx	r3
   d7224:	4604      	mov	r4, r0
    }
    return n;
}
   d7226:	4620      	mov	r0, r4
   d7228:	b00d      	add	sp, #52	; 0x34
   d722a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d722c <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d722c:	b510      	push	{r4, lr}
   d722e:	4b05      	ldr	r3, [pc, #20]	; (d7244 <_ZN9IPAddressC1Ev+0x18>)
   d7230:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d7232:	2211      	movs	r2, #17
   d7234:	f840 3b04 	str.w	r3, [r0], #4
   d7238:	2100      	movs	r1, #0
   d723a:	f003 f9d7 	bl	da5ec <memset>
}
   d723e:	4620      	mov	r0, r4
   d7240:	bd10      	pop	{r4, pc}
   d7242:	bf00      	nop
   d7244:	000daf0c 	.word	0x000daf0c

000d7248 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d7248:	4603      	mov	r3, r0
   d724a:	4a07      	ldr	r2, [pc, #28]	; (d7268 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d724c:	b510      	push	{r4, lr}
   d724e:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d7252:	f101 0210 	add.w	r2, r1, #16
   d7256:	f851 4b04 	ldr.w	r4, [r1], #4
   d725a:	f843 4b04 	str.w	r4, [r3], #4
   d725e:	4291      	cmp	r1, r2
   d7260:	d1f9      	bne.n	d7256 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d7262:	780a      	ldrb	r2, [r1, #0]
   d7264:	701a      	strb	r2, [r3, #0]
}
   d7266:	bd10      	pop	{r4, pc}
   d7268:	000daf0c 	.word	0x000daf0c

000d726c <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d726c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d726e:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d7272:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d7276:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d727a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d727e:	2304      	movs	r3, #4
   d7280:	6041      	str	r1, [r0, #4]
   d7282:	7503      	strb	r3, [r0, #20]
}
   d7284:	bd10      	pop	{r4, pc}

000d7286 <_ZN9IPAddressaSEPKh>:
{
   d7286:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d7288:	78cb      	ldrb	r3, [r1, #3]
   d728a:	9300      	str	r3, [sp, #0]
   d728c:	788b      	ldrb	r3, [r1, #2]
   d728e:	784a      	ldrb	r2, [r1, #1]
   d7290:	7809      	ldrb	r1, [r1, #0]
   d7292:	f7ff ffeb 	bl	d726c <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d7296:	b002      	add	sp, #8
   d7298:	bd10      	pop	{r4, pc}

000d729a <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
   d729a:	f100 0310 	add.w	r3, r0, #16
   d729e:	2201      	movs	r2, #1
    do {
        if (t->type == JSMN_OBJECT) {
   d72a0:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   d72a4:	2901      	cmp	r1, #1
   d72a6:	4618      	mov	r0, r3
   d72a8:	d108      	bne.n	d72bc <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
   d72aa:	f853 1c04 	ldr.w	r1, [r3, #-4]
   d72ae:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
   d72b2:	3a01      	subs	r2, #1
   d72b4:	f103 0310 	add.w	r3, r3, #16
   d72b8:	d1f2      	bne.n	d72a0 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
   d72ba:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
   d72bc:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   d72be:	bf04      	itt	eq
   d72c0:	f853 1c04 	ldreq.w	r1, [r3, #-4]
   d72c4:	1852      	addeq	r2, r2, r1
   d72c6:	e7f4      	b.n	d72b2 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

000d72c8 <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   d72c8:	b40e      	push	{r1, r2, r3}
   d72ca:	b5f0      	push	{r4, r5, r6, r7, lr}
   d72cc:	b088      	sub	sp, #32
   d72ce:	af00      	add	r7, sp, #0
   d72d0:	f107 0534 	add.w	r5, r7, #52	; 0x34
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d72d4:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
   d72d6:	f855 2b04 	ldr.w	r2, [r5], #4
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d72da:	607a      	str	r2, [r7, #4]
void spark::JSONWriter::printf(const char *fmt, ...) {
   d72dc:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d72de:	462b      	mov	r3, r5
   d72e0:	1878      	adds	r0, r7, r1
    va_start(args, fmt);
   d72e2:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d72e4:	f7ff fa26 	bl	d6734 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   d72e8:	280f      	cmp	r0, #15
   d72ea:	687a      	ldr	r2, [r7, #4]
   d72ec:	d91a      	bls.n	d7324 <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
   d72ee:	f100 0308 	add.w	r3, r0, #8
   d72f2:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   d72f6:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
   d72f8:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   d72fc:	1c41      	adds	r1, r0, #1
   d72fe:	462b      	mov	r3, r5
   d7300:	4668      	mov	r0, sp
        va_start(args, fmt);
   d7302:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   d7304:	f7ff fa16 	bl	d6734 <vsnprintf>
        if (n > 0) {
   d7308:	1e02      	subs	r2, r0, #0
   d730a:	dd04      	ble.n	d7316 <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
   d730c:	6823      	ldr	r3, [r4, #0]
   d730e:	4669      	mov	r1, sp
   d7310:	689b      	ldr	r3, [r3, #8]
   d7312:	4620      	mov	r0, r4
   d7314:	4798      	blx	r3
   d7316:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
   d7318:	3720      	adds	r7, #32
   d731a:	46bd      	mov	sp, r7
   d731c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   d7320:	b003      	add	sp, #12
   d7322:	4770      	bx	lr
    } else if (n > 0) {
   d7324:	2800      	cmp	r0, #0
   d7326:	d0f7      	beq.n	d7318 <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
   d7328:	6823      	ldr	r3, [r4, #0]
   d732a:	4602      	mov	r2, r0
   d732c:	689b      	ldr	r3, [r3, #8]
   d732e:	f107 0110 	add.w	r1, r7, #16
   d7332:	4620      	mov	r0, r4
   d7334:	4798      	blx	r3
}
   d7336:	e7ef      	b.n	d7318 <_ZN5spark10JSONWriter6printfEPKcz+0x50>

000d7338 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d7338:	b510      	push	{r4, lr}
          _M_dispose();
   d733a:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d733c:	4604      	mov	r4, r0
          _M_dispose();
   d733e:	689b      	ldr	r3, [r3, #8]
   d7340:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d7342:	68a3      	ldr	r3, [r4, #8]
   d7344:	3b01      	subs	r3, #1
   d7346:	60a3      	str	r3, [r4, #8]
   d7348:	b92b      	cbnz	r3, d7356 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
   d734a:	6823      	ldr	r3, [r4, #0]
   d734c:	4620      	mov	r0, r4
   d734e:	68db      	ldr	r3, [r3, #12]
    }
   d7350:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   d7354:	4718      	bx	r3
    }
   d7356:	bd10      	pop	{r4, pc}

000d7358 <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   d7358:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   d735a:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
   d735c:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   d7360:	689b      	ldr	r3, [r3, #8]
   d7362:	2201      	movs	r2, #1
   d7364:	f10d 0107 	add.w	r1, sp, #7
   d7368:	4798      	blx	r3
}
   d736a:	b003      	add	sp, #12
   d736c:	f85d fb04 	ldr.w	pc, [sp], #4

000d7370 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>:
    class __shared_ptr
   d7370:	b538      	push	{r3, r4, r5, lr}
   d7372:	680b      	ldr	r3, [r1, #0]
   d7374:	6003      	str	r3, [r0, #0]
   d7376:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
   d7378:	6843      	ldr	r3, [r0, #4]
   d737a:	429d      	cmp	r5, r3
    class __shared_ptr
   d737c:	4604      	mov	r4, r0
	if (__tmp != _M_pi)
   d737e:	d00c      	beq.n	d739a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x2a>
	    if (__tmp != 0)
   d7380:	b115      	cbz	r5, d7388 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x18>
    { ++_M_use_count; }
   d7382:	686b      	ldr	r3, [r5, #4]
   d7384:	3301      	adds	r3, #1
   d7386:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   d7388:	6860      	ldr	r0, [r4, #4]
   d738a:	b128      	cbz	r0, d7398 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x28>
      if (--_M_use_count == 0)
   d738c:	6843      	ldr	r3, [r0, #4]
   d738e:	3b01      	subs	r3, #1
   d7390:	6043      	str	r3, [r0, #4]
   d7392:	b90b      	cbnz	r3, d7398 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x28>
   d7394:	f7ff ffd0 	bl	d7338 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
	    _M_pi = __tmp;
   d7398:	6065      	str	r5, [r4, #4]
    class __shared_ptr
   d739a:	4620      	mov	r0, r4
   d739c:	bd38      	pop	{r3, r4, r5, pc}

000d739e <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   d739e:	460b      	mov	r3, r1
   d73a0:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
   d73a2:	2200      	movs	r2, #0
   d73a4:	b510      	push	{r4, lr}
      constexpr __shared_count() noexcept : _M_pi(0)
   d73a6:	e9c0 2200 	strd	r2, r2, [r0]
   d73aa:	4604      	mov	r4, r0
        t_ = t;
   d73ac:	6083      	str	r3, [r0, #8]
    if (t) {
   d73ae:	b90b      	cbnz	r3, d73b4 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
   d73b0:	4620      	mov	r0, r4
   d73b2:	bd10      	pop	{r4, pc}
   *
   *  The object pointed to is deleted when the last shared_ptr pointing to
   *  it is destroyed or reset.
  */
  template<typename _Tp>
    class shared_ptr : public __shared_ptr<_Tp>
   d73b4:	f7ff ffdc 	bl	d7370 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
   d73b8:	e7fa      	b.n	d73b0 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

000d73ba <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
   d73ba:	6883      	ldr	r3, [r0, #8]
   d73bc:	b1eb      	cbz	r3, d73fa <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
   d73be:	781a      	ldrb	r2, [r3, #0]
   d73c0:	2a03      	cmp	r2, #3
   d73c2:	d81a      	bhi.n	d73fa <_ZNK5spark9JSONValue4typeEv+0x40>
   d73c4:	e8df f002 	tbb	[pc, r2]
   d73c8:	1b021704 	.word	0x1b021704
   d73cc:	2005      	movs	r0, #5
   d73ce:	4770      	bx	lr
        const char c = d_->json[t_->start];
   d73d0:	6802      	ldr	r2, [r0, #0]
   d73d2:	685b      	ldr	r3, [r3, #4]
   d73d4:	6852      	ldr	r2, [r2, #4]
   d73d6:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   d73d8:	282d      	cmp	r0, #45	; 0x2d
   d73da:	d012      	beq.n	d7402 <_ZNK5spark9JSONValue4typeEv+0x48>
   d73dc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d73e0:	2b09      	cmp	r3, #9
   d73e2:	d90e      	bls.n	d7402 <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   d73e4:	2874      	cmp	r0, #116	; 0x74
   d73e6:	d00e      	beq.n	d7406 <_ZNK5spark9JSONValue4typeEv+0x4c>
   d73e8:	2866      	cmp	r0, #102	; 0x66
   d73ea:	d00c      	beq.n	d7406 <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
   d73ec:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   d73f0:	4258      	negs	r0, r3
   d73f2:	4158      	adcs	r0, r3
   d73f4:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
   d73f6:	2006      	movs	r0, #6
   d73f8:	4770      	bx	lr
        return JSON_TYPE_INVALID;
   d73fa:	2000      	movs	r0, #0
   d73fc:	4770      	bx	lr
        return JSON_TYPE_STRING;
   d73fe:	2004      	movs	r0, #4
   d7400:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
   d7402:	2003      	movs	r0, #3
   d7404:	4770      	bx	lr
            return JSON_TYPE_BOOL;
   d7406:	2002      	movs	r0, #2
}
   d7408:	4770      	bx	lr

000d740a <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
   d740a:	b510      	push	{r4, lr}
   d740c:	4604      	mov	r4, r0
    switch (type()) {
   d740e:	f7ff ffd4 	bl	d73ba <_ZNK5spark9JSONValue4typeEv>
   d7412:	2802      	cmp	r0, #2
   d7414:	d00e      	beq.n	d7434 <_ZNK5spark9JSONValue5toIntEv+0x2a>
   d7416:	1ec3      	subs	r3, r0, #3
   d7418:	b2db      	uxtb	r3, r3
   d741a:	2b01      	cmp	r3, #1
   d741c:	d814      	bhi.n	d7448 <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
   d741e:	6822      	ldr	r2, [r4, #0]
   d7420:	68a3      	ldr	r3, [r4, #8]
   d7422:	6850      	ldr	r0, [r2, #4]
   d7424:	685b      	ldr	r3, [r3, #4]
}
   d7426:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
   d742a:	220a      	movs	r2, #10
   d742c:	2100      	movs	r1, #0
   d742e:	4418      	add	r0, r3
   d7430:	f003 ba0a 	b.w	da848 <strtol>
        const char* const s = d_->json + t_->start;
   d7434:	6822      	ldr	r2, [r4, #0]
   d7436:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   d7438:	6852      	ldr	r2, [r2, #4]
   d743a:	685b      	ldr	r3, [r3, #4]
   d743c:	5cd0      	ldrb	r0, [r2, r3]
   d743e:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   d7442:	4258      	negs	r0, r3
   d7444:	4158      	adcs	r0, r3
}
   d7446:	bd10      	pop	{r4, pc}
    switch (type()) {
   d7448:	2000      	movs	r0, #0
   d744a:	e7fc      	b.n	d7446 <_ZNK5spark9JSONValue5toIntEv+0x3c>

000d744c <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   d744c:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   d744e:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   d7450:	e9c0 3300 	strd	r3, r3, [r0]
   d7454:	4604      	mov	r4, r0
        n_(0) {
   d7456:	480e      	ldr	r0, [pc, #56]	; (d7490 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
   d7458:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   d745c:	b1a9      	cbz	r1, d748a <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
   d745e:	780b      	ldrb	r3, [r1, #0]
   d7460:	2b03      	cmp	r3, #3
   d7462:	d006      	beq.n	d7472 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   d7464:	b98b      	cbnz	r3, d748a <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   d7466:	6813      	ldr	r3, [r2, #0]
   d7468:	6858      	ldr	r0, [r3, #4]
   d746a:	684b      	ldr	r3, [r1, #4]
   d746c:	5cc3      	ldrb	r3, [r0, r3]
   d746e:	2b6e      	cmp	r3, #110	; 0x6e
   d7470:	d007      	beq.n	d7482 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
   d7472:	6813      	ldr	r3, [r2, #0]
   d7474:	684d      	ldr	r5, [r1, #4]
   d7476:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
   d7478:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
   d747a:	4428      	add	r0, r5
            n_ = t->end - t->start;
   d747c:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
   d747e:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
   d7480:	60e3      	str	r3, [r4, #12]
   d7482:	4611      	mov	r1, r2
   d7484:	4620      	mov	r0, r4
   d7486:	f7ff ff73 	bl	d7370 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
}
   d748a:	4620      	mov	r0, r4
   d748c:	bd38      	pop	{r3, r4, r5, pc}
   d748e:	bf00      	nop
   d7490:	000daf7b 	.word	0x000daf7b

000d7494 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   d7494:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   d7496:	2500      	movs	r5, #0
   d7498:	460b      	mov	r3, r1
      constexpr __shared_count() noexcept : _M_pi(0)
   d749a:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
   d749e:	e9c0 5502 	strd	r5, r5, [r0, #8]
   d74a2:	e9c0 5504 	strd	r5, r5, [r0, #16]
   d74a6:	4604      	mov	r4, r0
   d74a8:	4611      	mov	r1, r2
    if (t && t->type == JSMN_OBJECT) {
   d74aa:	b14b      	cbz	r3, d74c0 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
   d74ac:	781a      	ldrb	r2, [r3, #0]
   d74ae:	2a01      	cmp	r2, #1
   d74b0:	d106      	bne.n	d74c0 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
   d74b2:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
   d74b6:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
   d74b8:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
   d74ba:	6143      	str	r3, [r0, #20]
   d74bc:	f7ff ff58 	bl	d7370 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
}
   d74c0:	4620      	mov	r0, r4
   d74c2:	bd38      	pop	{r3, r4, r5, pc}

000d74c4 <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
   d74c4:	b510      	push	{r4, lr}
    if (!n_) {
   d74c6:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
   d74c8:	4604      	mov	r4, r0
    if (!n_) {
   d74ca:	b163      	cbz	r3, d74e6 <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
   d74cc:	6880      	ldr	r0, [r0, #8]
   d74ce:	60e0      	str	r0, [r4, #12]
    --n_;
   d74d0:	3b01      	subs	r3, #1
    ++t_;
   d74d2:	3010      	adds	r0, #16
   d74d4:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   d74d6:	6120      	str	r0, [r4, #16]
    --n_;
   d74d8:	6163      	str	r3, [r4, #20]
    if (n_) {
   d74da:	b113      	cbz	r3, d74e2 <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
   d74dc:	f7ff fedd 	bl	d729a <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   d74e0:	60a0      	str	r0, [r4, #8]
    return true;
   d74e2:	2001      	movs	r0, #1
   d74e4:	e000      	b.n	d74e8 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
   d74e6:	4618      	mov	r0, r3
}
   d74e8:	bd10      	pop	{r4, pc}

000d74ea <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
   d74ea:	b510      	push	{r4, lr}
    write('}');
   d74ec:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
   d74ee:	4604      	mov	r4, r0
    write('}');
   d74f0:	f7ff ff32 	bl	d7358 <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   d74f4:	2301      	movs	r3, #1
   d74f6:	7123      	strb	r3, [r4, #4]
}
   d74f8:	4620      	mov	r0, r4
   d74fa:	bd10      	pop	{r4, pc}

000d74fc <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
   d74fc:	b508      	push	{r3, lr}
    switch (state_) {
   d74fe:	7903      	ldrb	r3, [r0, #4]
   d7500:	2b01      	cmp	r3, #1
   d7502:	d002      	beq.n	d750a <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   d7504:	2b02      	cmp	r3, #2
   d7506:	d004      	beq.n	d7512 <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
   d7508:	bd08      	pop	{r3, pc}
        write(',');
   d750a:	212c      	movs	r1, #44	; 0x2c
        write(':');
   d750c:	f7ff ff24 	bl	d7358 <_ZN5spark10JSONWriter5writeEc>
}
   d7510:	e7fa      	b.n	d7508 <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
   d7512:	213a      	movs	r1, #58	; 0x3a
   d7514:	e7fa      	b.n	d750c <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

000d7516 <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
   d7516:	b510      	push	{r4, lr}
   d7518:	4604      	mov	r4, r0
    writeSeparator();
   d751a:	f7ff ffef 	bl	d74fc <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   d751e:	4620      	mov	r0, r4
   d7520:	217b      	movs	r1, #123	; 0x7b
   d7522:	f7ff ff19 	bl	d7358 <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   d7526:	2300      	movs	r3, #0
   d7528:	7123      	strb	r3, [r4, #4]
}
   d752a:	4620      	mov	r0, r4
   d752c:	bd10      	pop	{r4, pc}
	...

000d7530 <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
   d7530:	b513      	push	{r0, r1, r4, lr}
   d7532:	4604      	mov	r4, r0
   d7534:	9101      	str	r1, [sp, #4]
    writeSeparator();
   d7536:	f7ff ffe1 	bl	d74fc <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   d753a:	6823      	ldr	r3, [r4, #0]
   d753c:	9a01      	ldr	r2, [sp, #4]
   d753e:	68db      	ldr	r3, [r3, #12]
   d7540:	4903      	ldr	r1, [pc, #12]	; (d7550 <_ZN5spark10JSONWriter5valueEi+0x20>)
   d7542:	4620      	mov	r0, r4
   d7544:	4798      	blx	r3
    state_ = NEXT;
   d7546:	2301      	movs	r3, #1
}
   d7548:	4620      	mov	r0, r4
    state_ = NEXT;
   d754a:	7123      	strb	r3, [r4, #4]
}
   d754c:	b002      	add	sp, #8
   d754e:	bd10      	pop	{r4, pc}
   d7550:	000da952 	.word	0x000da952

000d7554 <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   d7554:	b513      	push	{r0, r1, r4, lr}
   d7556:	4604      	mov	r4, r0
   d7558:	9101      	str	r1, [sp, #4]
    writeSeparator();
   d755a:	f7ff ffcf 	bl	d74fc <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   d755e:	6823      	ldr	r3, [r4, #0]
   d7560:	9a01      	ldr	r2, [sp, #4]
   d7562:	68db      	ldr	r3, [r3, #12]
   d7564:	4903      	ldr	r1, [pc, #12]	; (d7574 <_ZN5spark10JSONWriter5valueEj+0x20>)
   d7566:	4620      	mov	r0, r4
   d7568:	4798      	blx	r3
    state_ = NEXT;
   d756a:	2301      	movs	r3, #1
}
   d756c:	4620      	mov	r0, r4
    state_ = NEXT;
   d756e:	7123      	strb	r3, [r4, #4]
}
   d7570:	b002      	add	sp, #8
   d7572:	bd10      	pop	{r4, pc}
   d7574:	000daf18 	.word	0x000daf18

000d7578 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   d7578:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d757c:	460d      	mov	r5, r1
   d757e:	4617      	mov	r7, r2
    write('"');
   d7580:	2122      	movs	r1, #34	; 0x22
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   d7582:	f8df 80a0 	ldr.w	r8, [pc, #160]	; d7624 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xac>
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   d7586:	4604      	mov	r4, r0
    const char* const end = str + size;
   d7588:	442f      	add	r7, r5
    write('"');
   d758a:	f7ff fee5 	bl	d7358 <_ZN5spark10JSONWriter5writeEc>
    const char* const end = str + size;
   d758e:	4629      	mov	r1, r5
    while (s != end) {
   d7590:	42bd      	cmp	r5, r7
   d7592:	462a      	mov	r2, r5
   d7594:	d038      	beq.n	d7608 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x90>
        const char c = *s;
   d7596:	f815 6b01 	ldrb.w	r6, [r5], #1
        if (c == '"' || c == '\\' || (c >= 0 && c <= 0x1f)) {
   d759a:	2e22      	cmp	r6, #34	; 0x22
   d759c:	d003      	beq.n	d75a6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2e>
   d759e:	2e5c      	cmp	r6, #92	; 0x5c
   d75a0:	d001      	beq.n	d75a6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2e>
   d75a2:	2e1f      	cmp	r6, #31
   d75a4:	d8f4      	bhi.n	d7590 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
   d75a6:	6823      	ldr	r3, [r4, #0]
   d75a8:	1a52      	subs	r2, r2, r1
   d75aa:	689b      	ldr	r3, [r3, #8]
   d75ac:	4620      	mov	r0, r4
   d75ae:	4798      	blx	r3
            write('\\');
   d75b0:	215c      	movs	r1, #92	; 0x5c
   d75b2:	4620      	mov	r0, r4
   d75b4:	f7ff fed0 	bl	d7358 <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   d75b8:	2e0d      	cmp	r6, #13
   d75ba:	d80a      	bhi.n	d75d2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x5a>
   d75bc:	2e07      	cmp	r6, #7
   d75be:	d91c      	bls.n	d75fa <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
   d75c0:	f1a6 0308 	sub.w	r3, r6, #8
   d75c4:	2b05      	cmp	r3, #5
   d75c6:	d818      	bhi.n	d75fa <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
   d75c8:	e8df f003 	tbb	[pc, r3]
   d75cc:	17110f0d 	.word	0x17110f0d
   d75d0:	1513      	.short	0x1513
   d75d2:	2e22      	cmp	r6, #34	; 0x22
   d75d4:	d001      	beq.n	d75da <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x62>
   d75d6:	2e5c      	cmp	r6, #92	; 0x5c
   d75d8:	d10f      	bne.n	d75fa <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
                write(c);
   d75da:	4631      	mov	r1, r6
                write('b');
   d75dc:	4620      	mov	r0, r4
   d75de:	f7ff febb 	bl	d7358 <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
   d75e2:	4629      	mov	r1, r5
    while (s != end) {
   d75e4:	e7d4      	b.n	d7590 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
   d75e6:	2162      	movs	r1, #98	; 0x62
   d75e8:	e7f8      	b.n	d75dc <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('t');
   d75ea:	2174      	movs	r1, #116	; 0x74
   d75ec:	e7f6      	b.n	d75dc <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('n');
   d75ee:	216e      	movs	r1, #110	; 0x6e
   d75f0:	e7f4      	b.n	d75dc <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('f');
   d75f2:	2166      	movs	r1, #102	; 0x66
   d75f4:	e7f2      	b.n	d75dc <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('r');
   d75f6:	2172      	movs	r1, #114	; 0x72
   d75f8:	e7f0      	b.n	d75dc <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                printf("u%04x", (unsigned)c);
   d75fa:	6823      	ldr	r3, [r4, #0]
   d75fc:	4632      	mov	r2, r6
   d75fe:	68db      	ldr	r3, [r3, #12]
   d7600:	4641      	mov	r1, r8
   d7602:	4620      	mov	r0, r4
   d7604:	4798      	blx	r3
                break;
   d7606:	e7ec      	b.n	d75e2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6a>
        }
        ++s;
    }
    if (s != str) {
   d7608:	428d      	cmp	r5, r1
   d760a:	d004      	beq.n	d7616 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9e>
        write(str, s - str); // Write remaining characters
   d760c:	6823      	ldr	r3, [r4, #0]
   d760e:	1a6a      	subs	r2, r5, r1
   d7610:	689b      	ldr	r3, [r3, #8]
   d7612:	4620      	mov	r0, r4
   d7614:	4798      	blx	r3
    }
    write('"');
   d7616:	2122      	movs	r1, #34	; 0x22
   d7618:	4620      	mov	r0, r4
   d761a:	f7ff fe9d 	bl	d7358 <_ZN5spark10JSONWriter5writeEc>
}
   d761e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d7622:	bf00      	nop
   d7624:	000daf1b 	.word	0x000daf1b

000d7628 <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   d7628:	b513      	push	{r0, r1, r4, lr}
   d762a:	4604      	mov	r4, r0
   d762c:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   d7630:	f7ff ff64 	bl	d74fc <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   d7634:	4620      	mov	r0, r4
   d7636:	e9dd 2100 	ldrd	r2, r1, [sp]
   d763a:	f7ff ff9d 	bl	d7578 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   d763e:	2302      	movs	r3, #2
}
   d7640:	4620      	mov	r0, r4
    state_ = VALUE;
   d7642:	7123      	strb	r3, [r4, #4]
}
   d7644:	b002      	add	sp, #8
   d7646:	bd10      	pop	{r4, pc}

000d7648 <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   d7648:	b513      	push	{r0, r1, r4, lr}
   d764a:	4604      	mov	r4, r0
   d764c:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   d7650:	f7ff ff54 	bl	d74fc <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   d7654:	4620      	mov	r0, r4
   d7656:	e9dd 2100 	ldrd	r2, r1, [sp]
   d765a:	f7ff ff8d 	bl	d7578 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   d765e:	2301      	movs	r3, #1
}
   d7660:	4620      	mov	r0, r4
    state_ = NEXT;
   d7662:	7123      	strb	r3, [r4, #4]
}
   d7664:	b002      	add	sp, #8
   d7666:	bd10      	pop	{r4, pc}

000d7668 <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
   d7668:	6880      	ldr	r0, [r0, #8]
   d766a:	6803      	ldr	r3, [r0, #0]
   d766c:	68db      	ldr	r3, [r3, #12]
   d766e:	4718      	bx	r3

000d7670 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
   d7670:	4770      	bx	lr

000d7672 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   d7672:	4608      	mov	r0, r1
   d7674:	b111      	cbz	r1, d767c <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   d7676:	680b      	ldr	r3, [r1, #0]
   d7678:	685b      	ldr	r3, [r3, #4]
   d767a:	4718      	bx	r3
}
   d767c:	4770      	bx	lr

000d767e <__tcf_0>:
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
    static DefaultLogHandlerFactory factory;
   d767e:	4770      	bx	lr

000d7680 <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   d7680:	4770      	bx	lr

000d7682 <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
   d7682:	4770      	bx	lr

000d7684 <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
   d7684:	4770      	bx	lr

000d7686 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
const char* nextSubcategoryName(const char* &category, size_t &size) {
   d7686:	b538      	push	{r3, r4, r5, lr}
   d7688:	4604      	mov	r4, r0
   d768a:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   d768c:	6800      	ldr	r0, [r0, #0]
   d768e:	212e      	movs	r1, #46	; 0x2e
   d7690:	f002 ffe5 	bl	da65e <strchrnul>
    size = s - category;
   d7694:	6823      	ldr	r3, [r4, #0]
   d7696:	1ac3      	subs	r3, r0, r3
   d7698:	602b      	str	r3, [r5, #0]
    if (size) {
   d769a:	b123      	cbz	r3, d76a6 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   d769c:	7803      	ldrb	r3, [r0, #0]
   d769e:	b103      	cbz	r3, d76a2 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   d76a0:	3001      	adds	r0, #1
   d76a2:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d76a4:	6020      	str	r0, [r4, #0]
}
   d76a6:	4618      	mov	r0, r3
   d76a8:	bd38      	pop	{r3, r4, r5, pc}

000d76aa <_ZN5spark16JSONStreamWriterD0Ev>:
   d76aa:	b510      	push	{r4, lr}
   d76ac:	210c      	movs	r1, #12
   d76ae:	4604      	mov	r4, r0
   d76b0:	f002 f898 	bl	d97e4 <_ZdlPvj>
   d76b4:	4620      	mov	r0, r4
   d76b6:	bd10      	pop	{r4, pc}

000d76b8 <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   d76b8:	b510      	push	{r4, lr}
   d76ba:	2104      	movs	r1, #4
   d76bc:	4604      	mov	r4, r0
   d76be:	f002 f891 	bl	d97e4 <_ZdlPvj>
   d76c2:	4620      	mov	r0, r4
   d76c4:	bd10      	pop	{r4, pc}

000d76c6 <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   d76c6:	b510      	push	{r4, lr}
   d76c8:	2104      	movs	r1, #4
   d76ca:	4604      	mov	r4, r0
   d76cc:	f002 f88a 	bl	d97e4 <_ZdlPvj>
   d76d0:	4620      	mov	r0, r4
   d76d2:	bd10      	pop	{r4, pc}

000d76d4 <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
   d76d4:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   d76d6:	f002 ffcc 	bl	da672 <strcmp>
}
   d76da:	fab0 f080 	clz	r0, r0
   d76de:	0940      	lsrs	r0, r0, #5
   d76e0:	bd08      	pop	{r3, pc}

000d76e2 <__tcf_1>:
   d76e2:	4770      	bx	lr

000d76e4 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != 3
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   d76e4:	b510      	push	{r4, lr}
   d76e6:	460c      	mov	r4, r1
#if PLATFORM_ID != 3
    if (stream == &Serial) {
   d76e8:	f001 fe56 	bl	d9398 <_Z16_fetch_usbserialv>
   d76ec:	4284      	cmp	r4, r0
   d76ee:	d010      	beq.n	d7712 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   d76f0:	f001 fdb0 	bl	d9254 <_Z22__fetch_global_Serial1v>
   d76f4:	4284      	cmp	r4, r0
   d76f6:	d105      	bne.n	d7704 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x20>
        Serial1.end();
   d76f8:	f001 fdac 	bl	d9254 <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
}
   d76fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
   d7700:	f001 bda5 	b.w	d924e <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   d7704:	b12c      	cbz	r4, d7712 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
   d7706:	6823      	ldr	r3, [r4, #0]
   d7708:	4620      	mov	r0, r4
   d770a:	685b      	ldr	r3, [r3, #4]
}
   d770c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d7710:	4718      	bx	r3
   d7712:	bd10      	pop	{r4, pc}

000d7714 <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   d7714:	b513      	push	{r0, r1, r4, lr}
   d7716:	4604      	mov	r4, r0
    return value(val, strlen(val));
   d7718:	4608      	mov	r0, r1
   d771a:	9101      	str	r1, [sp, #4]
   d771c:	f002 ffd9 	bl	da6d2 <strlen>
   d7720:	9901      	ldr	r1, [sp, #4]
   d7722:	4602      	mov	r2, r0
   d7724:	4620      	mov	r0, r4
}
   d7726:	b002      	add	sp, #8
   d7728:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
   d772c:	f7ff bf8c 	b.w	d7648 <_ZN5spark10JSONWriter5valueEPKcj>

000d7730 <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
   d7730:	b513      	push	{r0, r1, r4, lr}
   d7732:	4604      	mov	r4, r0
    write(str, strlen(str));
   d7734:	4608      	mov	r0, r1
   d7736:	9101      	str	r1, [sp, #4]
   d7738:	f002 ffcb 	bl	da6d2 <strlen>
   d773c:	6823      	ldr	r3, [r4, #0]
   d773e:	9901      	ldr	r1, [sp, #4]
   d7740:	68db      	ldr	r3, [r3, #12]
   d7742:	4602      	mov	r2, r0
   d7744:	4620      	mov	r0, r4
}
   d7746:	b002      	add	sp, #8
   d7748:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
   d774c:	4718      	bx	r3

000d774e <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
   d774e:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   d7750:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
   d7752:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   d7756:	68db      	ldr	r3, [r3, #12]
   d7758:	2201      	movs	r2, #1
   d775a:	f10d 0107 	add.w	r1, sp, #7
   d775e:	4798      	blx	r3
}
   d7760:	b003      	add	sp, #12
   d7762:	f85d fb04 	ldr.w	pc, [sp], #4

000d7766 <_ZN5spark16StreamLogHandler6printfEPKcz>:
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   d7766:	b40e      	push	{r1, r2, r3}
   d7768:	b503      	push	{r0, r1, lr}
   d776a:	ab03      	add	r3, sp, #12
    stream_->vprintf(false, fmt, args);
   d776c:	2100      	movs	r1, #0
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   d776e:	f853 2b04 	ldr.w	r2, [r3], #4
    stream_->vprintf(false, fmt, args);
   d7772:	6a00      	ldr	r0, [r0, #32]
    va_start(args, fmt);
   d7774:	9301      	str	r3, [sp, #4]
    stream_->vprintf(false, fmt, args);
   d7776:	f001 f8d4 	bl	d8922 <_ZN5Print7vprintfEbPKcSt9__va_list>
}
   d777a:	b002      	add	sp, #8
   d777c:	f85d eb04 	ldr.w	lr, [sp], #4
   d7780:	b003      	add	sp, #12
   d7782:	4770      	bx	lr

000d7784 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   d7784:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
   d7788:	e9d0 9500 	ldrd	r9, r5, [r0]
   d778c:	f04f 0814 	mov.w	r8, #20
   d7790:	fb08 f505 	mul.w	r5, r8, r5
   d7794:	9300      	str	r3, [sp, #0]
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   d7796:	10ab      	asrs	r3, r5, #2
   d7798:	4d18      	ldr	r5, [pc, #96]	; (d77fc <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x78>)
   d779a:	4617      	mov	r7, r2
   d779c:	435d      	muls	r5, r3
   d779e:	464c      	mov	r4, r9
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
   d77a0:	2d00      	cmp	r5, #0
   d77a2:	dd23      	ble.n	d77ec <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x68>
	{
	  _DistanceType __half = __len >> 1;
   d77a4:	106e      	asrs	r6, r5, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
   d77a6:	fb08 f006 	mul.w	r0, r8, r6
   d77aa:	eb04 0a00 	add.w	sl, r4, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   d77ae:	463a      	mov	r2, r7
   d77b0:	f8ba b004 	ldrh.w	fp, [sl, #4]
   d77b4:	5820      	ldr	r0, [r4, r0]
   d77b6:	9101      	str	r1, [sp, #4]
   d77b8:	455f      	cmp	r7, fp
   d77ba:	bf28      	it	cs
   d77bc:	465a      	movcs	r2, fp
   d77be:	f002 ff90 	bl	da6e2 <strncmp>
                if (cmp == 0) {
   d77c2:	9901      	ldr	r1, [sp, #4]
   d77c4:	2301      	movs	r3, #1
   d77c6:	b978      	cbnz	r0, d77e8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
                    if (node.size == value.second) { // Lengths are equal
   d77c8:	455f      	cmp	r7, fp
   d77ca:	d103      	bne.n	d77d4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   d77cc:	9a00      	ldr	r2, [sp, #0]
   d77ce:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   d77d0:	4635      	mov	r5, r6
   d77d2:	e7e5      	b.n	d77a0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
                    return node.size < value.second;
   d77d4:	bf8c      	ite	hi
   d77d6:	2001      	movhi	r0, #1
   d77d8:	2000      	movls	r0, #0
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
   d77da:	2800      	cmp	r0, #0
   d77dc:	d0f8      	beq.n	d77d0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x4c>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   d77de:	1bae      	subs	r6, r5, r6
	      ++__first;
   d77e0:	f10a 0414 	add.w	r4, sl, #20
	      __len = __len - __half - 1;
   d77e4:	3e01      	subs	r6, #1
   d77e6:	e7f3      	b.n	d77d0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x4c>
                return cmp < 0;
   d77e8:	0fc0      	lsrs	r0, r0, #31
   d77ea:	e7f6      	b.n	d77da <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
      return __last - __first;
   d77ec:	eba4 0409 	sub.w	r4, r4, r9
}
   d77f0:	4802      	ldr	r0, [pc, #8]	; (d77fc <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x78>)
   d77f2:	10a4      	asrs	r4, r4, #2
   d77f4:	4360      	muls	r0, r4
   d77f6:	b003      	add	sp, #12
   d77f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d77fc:	cccccccd 	.word	0xcccccccd

000d7800 <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
   d7800:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
   d7802:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
   d7804:	7e06      	ldrb	r6, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
   d7806:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
   d7808:	b30b      	cbz	r3, d784e <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
   d780a:	b301      	cbz	r1, d784e <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
        size_t size = 0; // Name length
   d780c:	2500      	movs	r5, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   d780e:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
   d7812:	9503      	str	r5, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
   d7814:	a903      	add	r1, sp, #12
   d7816:	a801      	add	r0, sp, #4
   d7818:	f7ff ff35 	bl	d7686 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   d781c:	4601      	mov	r1, r0
   d781e:	b1b0      	cbz	r0, d784e <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
            const int index = nodeIndex(*pNodes, name, size, found);
   d7820:	f10d 030b 	add.w	r3, sp, #11
   d7824:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
   d7826:	f88d 500b 	strb.w	r5, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
   d782a:	4620      	mov	r0, r4
   d782c:	f7ff ffaa 	bl	d7784 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   d7830:	f89d 300b 	ldrb.w	r3, [sp, #11]
   d7834:	b15b      	cbz	r3, d784e <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
    return data_[i];
   d7836:	6824      	ldr	r4, [r4, #0]
   d7838:	2314      	movs	r3, #20
   d783a:	fb03 4000 	mla	r0, r3, r0, r4
            pNodes = &node.nodes;
   d783e:	f100 0408 	add.w	r4, r0, #8
            if (node.level >= 0) {
   d7842:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
   d7846:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   d7848:	bfa8      	it	ge
   d784a:	b2de      	uxtbge	r6, r3
        while ((name = nextSubcategoryName(category, size))) {
   d784c:	e7e2      	b.n	d7814 <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
   d784e:	4630      	mov	r0, r6
   d7850:	b004      	add	sp, #16
   d7852:	bd70      	pop	{r4, r5, r6, pc}

000d7854 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   d7854:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   d7856:	4c09      	ldr	r4, [pc, #36]	; (d787c <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
   d7858:	7823      	ldrb	r3, [r4, #0]
   d785a:	f3bf 8f5b 	dmb	ish
   d785e:	07db      	lsls	r3, r3, #31
   d7860:	d409      	bmi.n	d7876 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   d7862:	4620      	mov	r0, r4
   d7864:	f7fc fc28 	bl	d40b8 <__cxa_guard_acquire>
   d7868:	b128      	cbz	r0, d7876 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   d786a:	4620      	mov	r0, r4
   d786c:	f7fc fc29 	bl	d40c2 <__cxa_guard_release>
   d7870:	4803      	ldr	r0, [pc, #12]	; (d7880 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   d7872:	f002 fe7b 	bl	da56c <atexit>
}
   d7876:	4803      	ldr	r0, [pc, #12]	; (d7884 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   d7878:	bd10      	pop	{r4, pc}
   d787a:	bf00      	nop
   d787c:	2003e630 	.word	0x2003e630
   d7880:	000d767f 	.word	0x000d767f
   d7884:	2003e3a8 	.word	0x2003e3a8

000d7888 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   d7888:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   d788a:	4c09      	ldr	r4, [pc, #36]	; (d78b0 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
   d788c:	7823      	ldrb	r3, [r4, #0]
   d788e:	f3bf 8f5b 	dmb	ish
   d7892:	07db      	lsls	r3, r3, #31
   d7894:	d409      	bmi.n	d78aa <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   d7896:	4620      	mov	r0, r4
   d7898:	f7fc fc0e 	bl	d40b8 <__cxa_guard_acquire>
   d789c:	b128      	cbz	r0, d78aa <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   d789e:	4620      	mov	r0, r4
   d78a0:	f7fc fc0f 	bl	d40c2 <__cxa_guard_release>
   d78a4:	4803      	ldr	r0, [pc, #12]	; (d78b4 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   d78a6:	f002 fe61 	bl	da56c <atexit>
    return &factory;
}
   d78aa:	4803      	ldr	r0, [pc, #12]	; (d78b8 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   d78ac:	bd10      	pop	{r4, pc}
   d78ae:	bf00      	nop
   d78b0:	2003e634 	.word	0x2003e634
   d78b4:	000d76e3 	.word	0x000d76e3
   d78b8:	2003e3ac 	.word	0x2003e3ac

000d78bc <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   d78bc:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   d78be:	2500      	movs	r5, #0
   d78c0:	4604      	mov	r4, r0
   d78c2:	e9c0 5500 	strd	r5, r5, [r0]
   d78c6:	e9c0 5504 	strd	r5, r5, [r0, #16]
   d78ca:	6085      	str	r5, [r0, #8]
   d78cc:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
   d78ce:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
   d78d2:	f7fe fc0d 	bl	d60f0 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   d78d6:	f7ff ffbd 	bl	d7854 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   d78da:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   d78dc:	f7ff ffd4 	bl	d7888 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   d78e0:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   d78e2:	6220      	str	r0, [r4, #32]
}
   d78e4:	4620      	mov	r0, r4
   d78e6:	bd38      	pop	{r3, r4, r5, pc}

000d78e8 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   d78e8:	b510      	push	{r4, lr}
    static LogManager mgr;
   d78ea:	4c0a      	ldr	r4, [pc, #40]	; (d7914 <_ZN5spark10LogManager8instanceEv+0x2c>)
   d78ec:	7823      	ldrb	r3, [r4, #0]
   d78ee:	f3bf 8f5b 	dmb	ish
   d78f2:	07db      	lsls	r3, r3, #31
   d78f4:	d40c      	bmi.n	d7910 <_ZN5spark10LogManager8instanceEv+0x28>
   d78f6:	4620      	mov	r0, r4
   d78f8:	f7fc fbde 	bl	d40b8 <__cxa_guard_acquire>
   d78fc:	b140      	cbz	r0, d7910 <_ZN5spark10LogManager8instanceEv+0x28>
   d78fe:	4806      	ldr	r0, [pc, #24]	; (d7918 <_ZN5spark10LogManager8instanceEv+0x30>)
   d7900:	f7ff ffdc 	bl	d78bc <_ZN5spark10LogManagerC1Ev>
   d7904:	4620      	mov	r0, r4
   d7906:	f7fc fbdc 	bl	d40c2 <__cxa_guard_release>
   d790a:	4804      	ldr	r0, [pc, #16]	; (d791c <_ZN5spark10LogManager8instanceEv+0x34>)
   d790c:	f002 fe2e 	bl	da56c <atexit>
    return &mgr;
}
   d7910:	4801      	ldr	r0, [pc, #4]	; (d7918 <_ZN5spark10LogManager8instanceEv+0x30>)
   d7912:	bd10      	pop	{r4, pc}
   d7914:	2003e62c 	.word	0x2003e62c
   d7918:	2003e63c 	.word	0x2003e63c
   d791c:	000d7dc9 	.word	0x000d7dc9

000d7920 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   d7920:	4a02      	ldr	r2, [pc, #8]	; (d792c <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   d7922:	4903      	ldr	r1, [pc, #12]	; (d7930 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   d7924:	4803      	ldr	r0, [pc, #12]	; (d7934 <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   d7926:	2300      	movs	r3, #0
   d7928:	f7fe bdc2 	b.w	d64b0 <log_set_callbacks>
   d792c:	000d7c51 	.word	0x000d7c51
   d7930:	000d7bdd 	.word	0x000d7bdd
   d7934:	000d7b5d 	.word	0x000d7b5d

000d7938 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   d7938:	2300      	movs	r3, #0
   d793a:	461a      	mov	r2, r3
   d793c:	4619      	mov	r1, r3
   d793e:	4618      	mov	r0, r3
   d7940:	f7fe bdb6 	b.w	d64b0 <log_set_callbacks>

000d7944 <_ZNK5spark18JSONObjectIterator5valueEv>:
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   d7944:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONValue(v_, d_);
   d7946:	690d      	ldr	r5, [r1, #16]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d7948:	f851 3b04 	ldr.w	r3, [r1], #4
   d794c:	9300      	str	r3, [sp, #0]
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   d794e:	4604      	mov	r4, r0
   d7950:	a801      	add	r0, sp, #4
   d7952:	f7fe ff62 	bl	d681a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return JSONValue(v_, d_);
   d7956:	466a      	mov	r2, sp
   d7958:	4629      	mov	r1, r5
   d795a:	4620      	mov	r0, r4
   d795c:	f7ff fd1f 	bl	d739e <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d7960:	a801      	add	r0, sp, #4
   d7962:	f7fe ff61 	bl	d6828 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d7966:	4620      	mov	r0, r4
   d7968:	b003      	add	sp, #12
   d796a:	bd30      	pop	{r4, r5, pc}

000d796c <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   d796c:	b537      	push	{r0, r1, r2, r4, r5, lr}
        JSONObjectIterator(value.t_, value.d_) {
   d796e:	688d      	ldr	r5, [r1, #8]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d7970:	f851 3b04 	ldr.w	r3, [r1], #4
   d7974:	9300      	str	r3, [sp, #0]
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   d7976:	4604      	mov	r4, r0
   d7978:	a801      	add	r0, sp, #4
   d797a:	f7fe ff4e 	bl	d681a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        JSONObjectIterator(value.t_, value.d_) {
   d797e:	466a      	mov	r2, sp
   d7980:	4629      	mov	r1, r5
   d7982:	4620      	mov	r0, r4
   d7984:	f7ff fd86 	bl	d7494 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d7988:	a801      	add	r0, sp, #4
   d798a:	f7fe ff4d 	bl	d6828 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d798e:	4620      	mov	r0, r4
   d7990:	b003      	add	sp, #12
   d7992:	bd30      	pop	{r4, r5, pc}

000d7994 <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
   d7994:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONString(k_, d_);
   d7996:	68cd      	ldr	r5, [r1, #12]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d7998:	f851 3b04 	ldr.w	r3, [r1], #4
   d799c:	9300      	str	r3, [sp, #0]
inline spark::JSONString spark::JSONObjectIterator::name() const {
   d799e:	4604      	mov	r4, r0
   d79a0:	a801      	add	r0, sp, #4
   d79a2:	f7fe ff3a 	bl	d681a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return JSONString(k_, d_);
   d79a6:	466a      	mov	r2, sp
   d79a8:	4629      	mov	r1, r5
   d79aa:	4620      	mov	r0, r4
   d79ac:	f7ff fd4e 	bl	d744c <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d79b0:	a801      	add	r0, sp, #4
   d79b2:	f7fe ff39 	bl	d6828 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d79b6:	4620      	mov	r0, r4
   d79b8:	b003      	add	sp, #12
   d79ba:	bd30      	pop	{r4, r5, pc}

000d79bc <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   d79bc:	b570      	push	{r4, r5, r6, lr}
   d79be:	b08a      	sub	sp, #40	; 0x28
   d79c0:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   d79c2:	4601      	mov	r1, r0
   d79c4:	a804      	add	r0, sp, #16
   d79c6:	f7ff ffd1 	bl	d796c <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
   d79ca:	4e14      	ldr	r6, [pc, #80]	; (d7a1c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
   d79cc:	a804      	add	r0, sp, #16
   d79ce:	f7ff fd79 	bl	d74c4 <_ZN5spark18JSONObjectIterator4nextEv>
   d79d2:	b1e8      	cbz	r0, d7a10 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
   d79d4:	a904      	add	r1, sp, #16
   d79d6:	4668      	mov	r0, sp
   d79d8:	f7ff ffdc 	bl	d7994 <_ZNK5spark18JSONObjectIterator4nameEv>
   d79dc:	9802      	ldr	r0, [sp, #8]
   d79de:	4631      	mov	r1, r6
   d79e0:	f7ff fe78 	bl	d76d4 <_ZNK5spark10JSONStringeqEPKc.isra.0>
   d79e4:	4604      	mov	r4, r0
   d79e6:	b110      	cbz	r0, d79ee <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
   d79e8:	1e2c      	subs	r4, r5, #0
   d79ea:	bf18      	it	ne
   d79ec:	2401      	movne	r4, #1
   d79ee:	a801      	add	r0, sp, #4
   d79f0:	f7fe ff1a 	bl	d6828 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d79f4:	2c00      	cmp	r4, #0
   d79f6:	d0e9      	beq.n	d79cc <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
   d79f8:	a904      	add	r1, sp, #16
   d79fa:	4668      	mov	r0, sp
   d79fc:	f7ff ffa2 	bl	d7944 <_ZNK5spark18JSONObjectIterator5valueEv>
   d7a00:	4668      	mov	r0, sp
   d7a02:	f7ff fd02 	bl	d740a <_ZNK5spark9JSONValue5toIntEv>
   d7a06:	6028      	str	r0, [r5, #0]
   d7a08:	a801      	add	r0, sp, #4
   d7a0a:	f7fe ff0d 	bl	d6828 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d7a0e:	e7dd      	b.n	d79cc <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
   d7a10:	a805      	add	r0, sp, #20
   d7a12:	f7fe ff09 	bl	d6828 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d7a16:	b00a      	add	sp, #40	; 0x28
   d7a18:	bd70      	pop	{r4, r5, r6, pc}
   d7a1a:	bf00      	nop
   d7a1c:	000daf21 	.word	0x000daf21

000d7a20 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   d7a20:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d7a22:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
   d7a24:	4620      	mov	r0, r4
   d7a26:	4912      	ldr	r1, [pc, #72]	; (d7a70 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>)
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   d7a28:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
   d7a2a:	f002 fe22 	bl	da672 <strcmp>
   d7a2e:	b948      	cbnz	r0, d7a44 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x24>
        Serial.begin();
   d7a30:	f001 fcb2 	bl	d9398 <_Z16_fetch_usbserialv>
   d7a34:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d7a38:	f001 fc9e 	bl	d9378 <_ZN9USBSerial5beginEl>
        return &Serial;
   d7a3c:	f001 fcac 	bl	d9398 <_Z16_fetch_usbserialv>
}
   d7a40:	b003      	add	sp, #12
   d7a42:	bd30      	pop	{r4, r5, pc}
    if (strcmp(type, "Serial1") == 0) {
   d7a44:	490b      	ldr	r1, [pc, #44]	; (d7a74 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
   d7a46:	4620      	mov	r0, r4
   d7a48:	f002 fe13 	bl	da672 <strcmp>
   d7a4c:	b970      	cbnz	r0, d7a6c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
        int baud = 9600;
   d7a4e:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
   d7a52:	a901      	add	r1, sp, #4
   d7a54:	4628      	mov	r0, r5
        int baud = 9600;
   d7a56:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
   d7a58:	f7ff ffb0 	bl	d79bc <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   d7a5c:	f001 fbfa 	bl	d9254 <_Z22__fetch_global_Serial1v>
   d7a60:	9901      	ldr	r1, [sp, #4]
   d7a62:	f001 fbf1 	bl	d9248 <_ZN11USARTSerial5beginEm>
        return &Serial1;
   d7a66:	f001 fbf5 	bl	d9254 <_Z22__fetch_global_Serial1v>
   d7a6a:	e7e9      	b.n	d7a40 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x20>
    return nullptr;
   d7a6c:	2000      	movs	r0, #0
   d7a6e:	e7e7      	b.n	d7a40 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x20>
   d7a70:	000daf26 	.word	0x000daf26
   d7a74:	000daf2d 	.word	0x000daf2d

000d7a78 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   d7a78:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d7a7a:	e9d0 5300 	ldrd	r5, r3, [r0]
   d7a7e:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   d7a80:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d7a82:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   d7a86:	42ae      	cmp	r6, r5
   d7a88:	d005      	beq.n	d7a96 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
   d7a8a:	f105 0008 	add.w	r0, r5, #8
   d7a8e:	f7ff fff3 	bl	d7a78 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d7a92:	3514      	adds	r5, #20
   d7a94:	e7f7      	b.n	d7a86 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   d7a96:	6820      	ldr	r0, [r4, #0]
   d7a98:	f7fe fe2c 	bl	d66f4 <free>
}
   d7a9c:	4620      	mov	r0, r4
   d7a9e:	bd70      	pop	{r4, r5, r6, pc}

000d7aa0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   d7aa0:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d7aa2:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   d7aa6:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d7aa8:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
   d7aac:	42ae      	cmp	r6, r5
   d7aae:	d004      	beq.n	d7aba <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   d7ab0:	4628      	mov	r0, r5
   d7ab2:	f000 ffd5 	bl	d8a60 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
   d7ab6:	3510      	adds	r5, #16
   d7ab8:	e7f8      	b.n	d7aac <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   d7aba:	6820      	ldr	r0, [r4, #0]
   d7abc:	f7fe fe1a 	bl	d66f4 <free>
}
   d7ac0:	4620      	mov	r0, r4
   d7ac2:	bd70      	pop	{r4, r5, r6, pc}

000d7ac4 <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
   d7ac4:	b510      	push	{r4, lr}
   d7ac6:	4604      	mov	r4, r0
   d7ac8:	300c      	adds	r0, #12
   d7aca:	f7ff ffd5 	bl	d7a78 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d7ace:	4620      	mov	r0, r4
   d7ad0:	f7ff ffe6 	bl	d7aa0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   d7ad4:	4620      	mov	r0, r4
   d7ad6:	bd10      	pop	{r4, pc}

000d7ad8 <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
   d7ad8:	b510      	push	{r4, lr}
    virtual ~LogHandler() = default;
   d7ada:	4b04      	ldr	r3, [pc, #16]	; (d7aec <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
class StreamLogHandler: public LogHandler {
   d7adc:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
   d7ade:	f840 3b04 	str.w	r3, [r0], #4
   d7ae2:	f7ff ffef 	bl	d7ac4 <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
   d7ae6:	4620      	mov	r0, r4
   d7ae8:	bd10      	pop	{r4, pc}
   d7aea:	bf00      	nop
   d7aec:	000dac04 	.word	0x000dac04

000d7af0 <_ZN5spark16StreamLogHandlerD0Ev>:
   d7af0:	b510      	push	{r4, lr}
   d7af2:	4604      	mov	r4, r0
   d7af4:	f7ff fff0 	bl	d7ad8 <_ZN5spark16StreamLogHandlerD1Ev>
   d7af8:	4620      	mov	r0, r4
   d7afa:	2124      	movs	r1, #36	; 0x24
   d7afc:	f001 fe72 	bl	d97e4 <_ZdlPvj>
   d7b00:	4620      	mov	r0, r4
   d7b02:	bd10      	pop	{r4, pc}

000d7b04 <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
   d7b04:	b510      	push	{r4, lr}
   d7b06:	4b03      	ldr	r3, [pc, #12]	; (d7b14 <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   d7b08:	6003      	str	r3, [r0, #0]
   d7b0a:	4604      	mov	r4, r0
   d7b0c:	f7ff ffe4 	bl	d7ad8 <_ZN5spark16StreamLogHandlerD1Ev>
   d7b10:	4620      	mov	r0, r4
   d7b12:	bd10      	pop	{r4, pc}
   d7b14:	000dafc8 	.word	0x000dafc8

000d7b18 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   d7b18:	b510      	push	{r4, lr}
   d7b1a:	4604      	mov	r4, r0
   d7b1c:	f7ff fff2 	bl	d7b04 <_ZN5spark20JSONStreamLogHandlerD1Ev>
   d7b20:	4620      	mov	r0, r4
   d7b22:	2124      	movs	r1, #36	; 0x24
   d7b24:	f001 fe5e 	bl	d97e4 <_ZdlPvj>
   d7b28:	4620      	mov	r0, r4
   d7b2a:	bd10      	pop	{r4, pc}

000d7b2c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
   d7b2c:	2200      	movs	r2, #0
   d7b2e:	e9c0 2200 	strd	r2, r2, [r0]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   d7b32:	b510      	push	{r4, lr}
        capacity_(0) {
   d7b34:	6082      	str	r2, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   d7b36:	680c      	ldr	r4, [r1, #0]
   d7b38:	6004      	str	r4, [r0, #0]
   d7b3a:	684c      	ldr	r4, [r1, #4]
   d7b3c:	6044      	str	r4, [r0, #4]
   d7b3e:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d7b40:	600a      	str	r2, [r1, #0]
   d7b42:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   d7b44:	6084      	str	r4, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d7b46:	608a      	str	r2, [r1, #8]
}
   d7b48:	bd10      	pop	{r4, pc}

000d7b4a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      ~lock_guard()
   d7b4a:	b510      	push	{r4, lr}
      { _M_device.unlock(); }
   d7b4c:	6803      	ldr	r3, [r0, #0]
      ~lock_guard()
   d7b4e:	4604      	mov	r4, r0
    }

    void lock() { os_mutex_recursive_lock(handle_); }
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d7b50:	6818      	ldr	r0, [r3, #0]
   d7b52:	f7fe fae5 	bl	d6120 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   d7b56:	4620      	mov	r0, r4
   d7b58:	bd10      	pop	{r4, pc}
	...

000d7b5c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   d7b5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7b60:	b087      	sub	sp, #28
   d7b62:	4680      	mov	r8, r0
   d7b64:	9303      	str	r3, [sp, #12]
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   d7b66:	4b1c      	ldr	r3, [pc, #112]	; (d7bd8 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
   d7b68:	685b      	ldr	r3, [r3, #4]
   d7b6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
   d7b6e:	4689      	mov	r9, r1
   d7b70:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d7b72:	b96b      	cbnz	r3, d7b90 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
   d7b74:	f7ff feb8 	bl	d78e8 <_ZN5spark10LogManager8instanceEv>
   d7b78:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   d7b7a:	f100 0324 	add.w	r3, r0, #36	; 0x24
    void lock() { os_mutex_recursive_lock(handle_); }
   d7b7e:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d7b80:	9305      	str	r3, [sp, #20]
   d7b82:	f7fe fac5 	bl	d6110 <os_mutex_recursive_lock>
        // prevent re-entry
        if (that->isActive()) {
   d7b86:	7b23      	ldrb	r3, [r4, #12]
   d7b88:	b12b      	cbz	r3, d7b96 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
   d7b8a:	a805      	add	r0, sp, #20
   d7b8c:	f7ff ffdd 	bl	d7b4a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   d7b90:	b007      	add	sp, #28
   d7b92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   d7b96:	2301      	movs	r3, #1
   d7b98:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
   d7b9a:	e9d4 5300 	ldrd	r5, r3, [r4]
            handler->message(msg, (LogLevel)level, category, *attr);
   d7b9e:	fa5f f989 	uxtb.w	r9, r9
   d7ba2:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   d7ba6:	45aa      	cmp	sl, r5
   d7ba8:	d012      	beq.n	d7bd0 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
   d7baa:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
   d7bae:	4631      	mov	r1, r6
   d7bb0:	1d38      	adds	r0, r7, #4
   d7bb2:	f7ff fe25 	bl	d7800 <_ZNK5spark6detail9LogFilter5levelEPKc>
   d7bb6:	4581      	cmp	r9, r0
   d7bb8:	d3f5      	bcc.n	d7ba6 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
   d7bba:	683b      	ldr	r3, [r7, #0]
   d7bbc:	9a03      	ldr	r2, [sp, #12]
   d7bbe:	9200      	str	r2, [sp, #0]
   d7bc0:	f8d3 b008 	ldr.w	fp, [r3, #8]
   d7bc4:	464a      	mov	r2, r9
   d7bc6:	4633      	mov	r3, r6
   d7bc8:	4641      	mov	r1, r8
   d7bca:	4638      	mov	r0, r7
   d7bcc:	47d8      	blx	fp
   d7bce:	e7ea      	b.n	d7ba6 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
   d7bd0:	2300      	movs	r3, #0
   d7bd2:	7323      	strb	r3, [r4, #12]
   d7bd4:	e7d9      	b.n	d7b8a <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
   d7bd6:	bf00      	nop
   d7bd8:	e000ed00 	.word	0xe000ed00

000d7bdc <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   d7bdc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7be0:	469b      	mov	fp, r3
   d7be2:	4b1a      	ldr	r3, [pc, #104]	; (d7c4c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
   d7be4:	685b      	ldr	r3, [r3, #4]
   d7be6:	f3c3 0308 	ubfx	r3, r3, #0, #9
   d7bea:	4680      	mov	r8, r0
   d7bec:	4689      	mov	r9, r1
   d7bee:	4616      	mov	r6, r2
    if (HAL_IsISR()) {
   d7bf0:	b96b      	cbnz	r3, d7c0e <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
   d7bf2:	f7ff fe79 	bl	d78e8 <_ZN5spark10LogManager8instanceEv>
   d7bf6:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   d7bf8:	f100 0324 	add.w	r3, r0, #36	; 0x24
   d7bfc:	6a40      	ldr	r0, [r0, #36]	; 0x24
   d7bfe:	9301      	str	r3, [sp, #4]
   d7c00:	f7fe fa86 	bl	d6110 <os_mutex_recursive_lock>
        if (that->isActive()) {
   d7c04:	7b23      	ldrb	r3, [r4, #12]
   d7c06:	b12b      	cbz	r3, d7c14 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
   d7c08:	a801      	add	r0, sp, #4
   d7c0a:	f7ff ff9e 	bl	d7b4a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   d7c0e:	b003      	add	sp, #12
   d7c10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
   d7c14:	2301      	movs	r3, #1
   d7c16:	7323      	strb	r3, [r4, #12]
   d7c18:	e9d4 5300 	ldrd	r5, r3, [r4]
    if (level >= filter_.level(category)) {
   d7c1c:	b2f6      	uxtb	r6, r6
   d7c1e:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   d7c22:	4555      	cmp	r5, sl
   d7c24:	d00e      	beq.n	d7c44 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
   d7c26:	f855 7b04 	ldr.w	r7, [r5], #4
   d7c2a:	4659      	mov	r1, fp
   d7c2c:	1d38      	adds	r0, r7, #4
   d7c2e:	f7ff fde7 	bl	d7800 <_ZNK5spark6detail9LogFilter5levelEPKc>
   d7c32:	4286      	cmp	r6, r0
   d7c34:	d3f5      	bcc.n	d7c22 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
   d7c36:	683b      	ldr	r3, [r7, #0]
   d7c38:	464a      	mov	r2, r9
   d7c3a:	68db      	ldr	r3, [r3, #12]
   d7c3c:	4641      	mov	r1, r8
   d7c3e:	4638      	mov	r0, r7
   d7c40:	4798      	blx	r3
   d7c42:	e7ee      	b.n	d7c22 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
   d7c44:	2300      	movs	r3, #0
   d7c46:	7323      	strb	r3, [r4, #12]
   d7c48:	e7de      	b.n	d7c08 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
   d7c4a:	bf00      	nop
   d7c4c:	e000ed00 	.word	0xe000ed00

000d7c50 <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   d7c50:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d7c54:	4b16      	ldr	r3, [pc, #88]	; (d7cb0 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
   d7c56:	685b      	ldr	r3, [r3, #4]
   d7c58:	f3c3 0308 	ubfx	r3, r3, #0, #9
   d7c5c:	4605      	mov	r5, r0
   d7c5e:	460f      	mov	r7, r1
    if (HAL_IsISR()) {
   d7c60:	bb1b      	cbnz	r3, d7caa <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
   d7c62:	f7ff fe41 	bl	d78e8 <_ZN5spark10LogManager8instanceEv>
    LOG_WITH_LOCK(that->mutex_) {
   d7c66:	f100 0324 	add.w	r3, r0, #36	; 0x24
    LogManager *that = instance();
   d7c6a:	4604      	mov	r4, r0
   d7c6c:	6a40      	ldr	r0, [r0, #36]	; 0x24
   d7c6e:	9301      	str	r3, [sp, #4]
   d7c70:	f7fe fa4e 	bl	d6110 <os_mutex_recursive_lock>
   d7c74:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
   d7c78:	2446      	movs	r4, #70	; 0x46
   d7c7a:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   d7c7e:	45b0      	cmp	r8, r6
   d7c80:	d109      	bne.n	d7c96 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
   d7c82:	a801      	add	r0, sp, #4
   d7c84:	f7ff ff61 	bl	d7b4a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
   d7c88:	42a5      	cmp	r5, r4
   d7c8a:	bfb4      	ite	lt
   d7c8c:	2000      	movlt	r0, #0
   d7c8e:	2001      	movge	r0, #1
}
   d7c90:	b002      	add	sp, #8
   d7c92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
   d7c96:	f856 0b04 	ldr.w	r0, [r6], #4
   d7c9a:	4639      	mov	r1, r7
   d7c9c:	3004      	adds	r0, #4
   d7c9e:	f7ff fdaf 	bl	d7800 <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
   d7ca2:	4284      	cmp	r4, r0
   d7ca4:	bfa8      	it	ge
   d7ca6:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
   d7ca8:	e7e9      	b.n	d7c7e <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
   d7caa:	2000      	movs	r0, #0
   d7cac:	e7f0      	b.n	d7c90 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
   d7cae:	bf00      	nop
   d7cb0:	e000ed00 	.word	0xe000ed00

000d7cb4 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d7cb4:	b570      	push	{r4, r5, r6, lr}
   d7cb6:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   d7cb8:	e9d0 0200 	ldrd	r0, r2, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d7cbc:	460b      	mov	r3, r1
    T* const p = find(data_, data_ + size_, value);
   d7cbe:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
   d7cc2:	4282      	cmp	r2, r0
   d7cc4:	d007      	beq.n	d7cd6 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x22>
   d7cc6:	4601      	mov	r1, r0
            if (*p == value) {
   d7cc8:	681d      	ldr	r5, [r3, #0]
   d7cca:	f851 6b04 	ldr.w	r6, [r1], #4
   d7cce:	42ae      	cmp	r6, r5
   d7cd0:	d003      	beq.n	d7cda <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x26>
   d7cd2:	4608      	mov	r0, r1
   d7cd4:	e7f5      	b.n	d7cc2 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
   d7cd6:	2000      	movs	r0, #0
}
   d7cd8:	bd70      	pop	{r4, r5, r6, pc}
        ::memmove(dest, p, (end - p) * sizeof(T));
   d7cda:	1a52      	subs	r2, r2, r1
   d7cdc:	f002 fc6c 	bl	da5b8 <memmove>
    --size_;
   d7ce0:	6863      	ldr	r3, [r4, #4]
   d7ce2:	3b01      	subs	r3, #1
   d7ce4:	6063      	str	r3, [r4, #4]
    return true;
   d7ce6:	2001      	movs	r0, #1
   d7ce8:	e7f6      	b.n	d7cd8 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x24>

000d7cea <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
   d7cea:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    LOG_WITH_LOCK(mutex_) {
   d7cec:	f100 0324 	add.w	r3, r0, #36	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
   d7cf0:	4604      	mov	r4, r0
   d7cf2:	6a40      	ldr	r0, [r0, #36]	; 0x24
   d7cf4:	9101      	str	r1, [sp, #4]
   d7cf6:	9303      	str	r3, [sp, #12]
   d7cf8:	f7fe fa0a 	bl	d6110 <os_mutex_recursive_lock>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   d7cfc:	a901      	add	r1, sp, #4
   d7cfe:	4620      	mov	r0, r4
   d7d00:	f7ff ffd8 	bl	d7cb4 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   d7d04:	b118      	cbz	r0, d7d0e <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
   d7d06:	6863      	ldr	r3, [r4, #4]
   d7d08:	b90b      	cbnz	r3, d7d0e <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
   d7d0a:	f7ff fe15 	bl	d7938 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   d7d0e:	a803      	add	r0, sp, #12
   d7d10:	f7ff ff1b 	bl	d7b4a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   d7d14:	b004      	add	sp, #16
   d7d16:	bd10      	pop	{r4, pc}

000d7d18 <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
void spark::LogManager::destroyFactoryHandlers() {
   d7d18:	b570      	push	{r4, r5, r6, lr}
    return data_ + size_;
   d7d1a:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
   d7d1e:	2318      	movs	r3, #24
   d7d20:	4604      	mov	r4, r0
   d7d22:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   d7d26:	42ae      	cmp	r6, r5
   d7d28:	d015      	beq.n	d7d56 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   d7d2a:	f105 0110 	add.w	r1, r5, #16
   d7d2e:	4620      	mov	r0, r4
   d7d30:	f7ff ffc0 	bl	d7cb4 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   d7d34:	6863      	ldr	r3, [r4, #4]
   d7d36:	b90b      	cbnz	r3, d7d3c <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   d7d38:	f7ff fdfe 	bl	d7938 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
   d7d3c:	69e0      	ldr	r0, [r4, #28]
   d7d3e:	6929      	ldr	r1, [r5, #16]
   d7d40:	6803      	ldr	r3, [r0, #0]
   d7d42:	68db      	ldr	r3, [r3, #12]
   d7d44:	4798      	blx	r3
        if (h.stream) {
   d7d46:	6969      	ldr	r1, [r5, #20]
   d7d48:	b119      	cbz	r1, d7d52 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   d7d4a:	6a20      	ldr	r0, [r4, #32]
   d7d4c:	6803      	ldr	r3, [r0, #0]
   d7d4e:	68db      	ldr	r3, [r3, #12]
   d7d50:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
   d7d52:	3518      	adds	r5, #24
   d7d54:	e7e7      	b.n	d7d26 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
   d7d56:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   d7d5a:	2618      	movs	r6, #24
   d7d5c:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   d7d60:	42ae      	cmp	r6, r5
   d7d62:	d004      	beq.n	d7d6e <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
   d7d64:	4628      	mov	r0, r5
   d7d66:	f000 fe7b 	bl	d8a60 <_ZN6StringD1Ev>
   d7d6a:	3518      	adds	r5, #24
   d7d6c:	e7f8      	b.n	d7d60 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
   d7d6e:	2300      	movs	r3, #0
   d7d70:	6163      	str	r3, [r4, #20]
}
   d7d72:	bd70      	pop	{r4, r5, r6, pc}

000d7d74 <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
   d7d74:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d7d76:	4604      	mov	r4, r0
    resetSystemCallbacks();
   d7d78:	f7ff fdde 	bl	d7938 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   d7d7c:	f104 0324 	add.w	r3, r4, #36	; 0x24
   d7d80:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d7d82:	9301      	str	r3, [sp, #4]
   d7d84:	f7fe f9c4 	bl	d6110 <os_mutex_recursive_lock>
         destroyFactoryHandlers();
   d7d88:	4620      	mov	r0, r4
   d7d8a:	f7ff ffc5 	bl	d7d18 <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
   d7d8e:	a801      	add	r0, sp, #4
   d7d90:	f7ff fedb 	bl	d7b4a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
   d7d94:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d7d96:	b108      	cbz	r0, d7d9c <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
   d7d98:	f7fe f9b2 	bl	d6100 <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
   d7d9c:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   d7da0:	2618      	movs	r6, #24
   d7da2:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   d7da6:	42ae      	cmp	r6, r5
   d7da8:	d004      	beq.n	d7db4 <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
   d7daa:	4628      	mov	r0, r5
   d7dac:	f000 fe58 	bl	d8a60 <_ZN6StringD1Ev>
   d7db0:	3518      	adds	r5, #24
   d7db2:	e7f8      	b.n	d7da6 <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
   d7db4:	6920      	ldr	r0, [r4, #16]
   d7db6:	f7fe fc9d 	bl	d66f4 <free>
   d7dba:	6820      	ldr	r0, [r4, #0]
   d7dbc:	f7fe fc9a 	bl	d66f4 <free>
}
   d7dc0:	4620      	mov	r0, r4
   d7dc2:	b002      	add	sp, #8
   d7dc4:	bd70      	pop	{r4, r5, r6, pc}
	...

000d7dc8 <__tcf_2>:
    static LogManager mgr;
   d7dc8:	4801      	ldr	r0, [pc, #4]	; (d7dd0 <__tcf_2+0x8>)
   d7dca:	f7ff bfd3 	b.w	d7d74 <_ZN5spark10LogManagerD1Ev>
   d7dce:	bf00      	nop
   d7dd0:	2003e63c 	.word	0x2003e63c

000d7dd4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
   d7dd4:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d7dd6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7dd8:	4606      	mov	r6, r0
   d7dda:	460c      	mov	r4, r1
   d7ddc:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d7dde:	d927      	bls.n	d7e30 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x5c>
   d7de0:	4290      	cmp	r0, r2
   d7de2:	d226      	bcs.n	d7e32 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x5e>
            --end;
   d7de4:	f1a2 0514 	sub.w	r5, r2, #20
            dest += end - p - 1;
   d7de8:	1a6c      	subs	r4, r5, r1
   d7dea:	f1a1 0714 	sub.w	r7, r1, #20
   d7dee:	4404      	add	r4, r0
        capacity_(0) {
   d7df0:	2600      	movs	r6, #0
            for (; end != p; --end, --dest) {
   d7df2:	42af      	cmp	r7, r5
   d7df4:	d03d      	beq.n	d7e72 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
                new(dest) T(std::move(*end));
   d7df6:	b1a4      	cbz	r4, d7e22 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x4e>
struct spark::detail::LogFilter::Node {
   d7df8:	682b      	ldr	r3, [r5, #0]
   d7dfa:	6023      	str	r3, [r4, #0]
   d7dfc:	88ab      	ldrh	r3, [r5, #4]
   d7dfe:	80a3      	strh	r3, [r4, #4]
   d7e00:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
   d7e04:	80e3      	strh	r3, [r4, #6]
        capacity_(0) {
   d7e06:	e9c4 6602 	strd	r6, r6, [r4, #8]
   d7e0a:	6126      	str	r6, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   d7e0c:	68ab      	ldr	r3, [r5, #8]
   d7e0e:	60a3      	str	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d7e10:	60ae      	str	r6, [r5, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7e12:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   d7e14:	68ea      	ldr	r2, [r5, #12]
   d7e16:	60e2      	str	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d7e18:	60eb      	str	r3, [r5, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7e1a:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   d7e1c:	692a      	ldr	r2, [r5, #16]
   d7e1e:	6122      	str	r2, [r4, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d7e20:	612b      	str	r3, [r5, #16]
   d7e22:	f105 0008 	add.w	r0, r5, #8
   d7e26:	f7ff fe27 	bl	d7a78 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
   d7e2a:	3d14      	subs	r5, #20
   d7e2c:	3c14      	subs	r4, #20
   d7e2e:	e7e0      	b.n	d7df2 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1e>
        } else if (dest != p) {
   d7e30:	d01f      	beq.n	d7e72 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
        capacity_(0) {
   d7e32:	2700      	movs	r7, #0
            for (; p != end; ++p, ++dest) {
   d7e34:	42ac      	cmp	r4, r5
   d7e36:	d01c      	beq.n	d7e72 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
                new(dest) T(std::move(*p));
   d7e38:	b1a6      	cbz	r6, d7e64 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x90>
   d7e3a:	6823      	ldr	r3, [r4, #0]
   d7e3c:	6033      	str	r3, [r6, #0]
   d7e3e:	88a3      	ldrh	r3, [r4, #4]
   d7e40:	80b3      	strh	r3, [r6, #4]
   d7e42:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
   d7e46:	80f3      	strh	r3, [r6, #6]
        capacity_(0) {
   d7e48:	e9c6 7702 	strd	r7, r7, [r6, #8]
   d7e4c:	6137      	str	r7, [r6, #16]
      __a = _GLIBCXX_MOVE(__b);
   d7e4e:	68a3      	ldr	r3, [r4, #8]
   d7e50:	60b3      	str	r3, [r6, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d7e52:	60a7      	str	r7, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7e54:	68f3      	ldr	r3, [r6, #12]
      __a = _GLIBCXX_MOVE(__b);
   d7e56:	68e2      	ldr	r2, [r4, #12]
   d7e58:	60f2      	str	r2, [r6, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d7e5a:	60e3      	str	r3, [r4, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7e5c:	6933      	ldr	r3, [r6, #16]
      __a = _GLIBCXX_MOVE(__b);
   d7e5e:	6922      	ldr	r2, [r4, #16]
   d7e60:	6132      	str	r2, [r6, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d7e62:	6123      	str	r3, [r4, #16]
   d7e64:	f104 0008 	add.w	r0, r4, #8
   d7e68:	f7ff fe06 	bl	d7a78 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
   d7e6c:	3414      	adds	r4, #20
   d7e6e:	3614      	adds	r6, #20
   d7e70:	e7e0      	b.n	d7e34 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x60>
    }
   d7e72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7e74 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   d7e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d7e76:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
   d7e7a:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   d7e7c:	4604      	mov	r4, r0
   d7e7e:	460e      	mov	r6, r1
   d7e80:	4617      	mov	r7, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d7e82:	db0d      	blt.n	d7ea0 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x2c>
   d7e84:	3501      	adds	r5, #1
        if (n > 0) {
   d7e86:	2d00      	cmp	r5, #0
   d7e88:	6800      	ldr	r0, [r0, #0]
   d7e8a:	dd04      	ble.n	d7e96 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x22>
    return ::realloc(ptr, size);
   d7e8c:	00a9      	lsls	r1, r5, #2
   d7e8e:	f7fe fc39 	bl	d6704 <realloc>
            if (!d) {
   d7e92:	b918      	cbnz	r0, d7e9c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x28>
}
   d7e94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
   d7e96:	f7fe fc2d 	bl	d66f4 <free>
        T* d = nullptr;
   d7e9a:	2000      	movs	r0, #0
        data_ = d;
   d7e9c:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   d7e9e:	60a5      	str	r5, [r4, #8]
    T* const p = data_ + i;
   d7ea0:	6825      	ldr	r5, [r4, #0]
    move(p + 1, p, data_ + size_);
   d7ea2:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   d7ea4:	eb05 0186 	add.w	r1, r5, r6, lsl #2
    move(p + 1, p, data_ + size_);
   d7ea8:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
   d7eaa:	eba2 0286 	sub.w	r2, r2, r6, lsl #2
   d7eae:	1d08      	adds	r0, r1, #4
   d7eb0:	f002 fb82 	bl	da5b8 <memmove>
    new(p) T(std::move(value));
   d7eb4:	f845 7026 	str.w	r7, [r5, r6, lsl #2]
    ++size_;
   d7eb8:	6863      	ldr	r3, [r4, #4]
   d7eba:	3301      	adds	r3, #1
   d7ebc:	6063      	str	r3, [r4, #4]
    return true;
   d7ebe:	2001      	movs	r0, #1
   d7ec0:	e7e8      	b.n	d7e94 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x20>

000d7ec2 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
   d7ec2:	b537      	push	{r0, r1, r2, r4, r5, lr}
    LOG_WITH_LOCK(mutex_) {
   d7ec4:	f100 0324 	add.w	r3, r0, #36	; 0x24
bool spark::LogManager::addHandler(LogHandler *handler) {
   d7ec8:	4604      	mov	r4, r0
    void lock() { os_mutex_recursive_lock(handle_); }
   d7eca:	6a40      	ldr	r0, [r0, #36]	; 0x24
   d7ecc:	9301      	str	r3, [sp, #4]
   d7ece:	460d      	mov	r5, r1
   d7ed0:	f7fe f91e 	bl	d6110 <os_mutex_recursive_lock>
    return find(data_, data_ + size_, value);
   d7ed4:	e9d4 3100 	ldrd	r3, r1, [r4]
   d7ed8:	eb03 0081 	add.w	r0, r3, r1, lsl #2
        for (; p != end; ++p) {
   d7edc:	4283      	cmp	r3, r0
   d7ede:	461a      	mov	r2, r3
   d7ee0:	d00b      	beq.n	d7efa <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x38>
            if (*p == value) {
   d7ee2:	6812      	ldr	r2, [r2, #0]
   d7ee4:	42aa      	cmp	r2, r5
   d7ee6:	f103 0304 	add.w	r3, r3, #4
   d7eea:	d1f7      	bne.n	d7edc <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
    LOG_WITH_LOCK(mutex_) {
   d7eec:	a801      	add	r0, sp, #4
   d7eee:	f7ff fe2c 	bl	d7b4a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
            return false;
   d7ef2:	2500      	movs	r5, #0
}
   d7ef4:	4628      	mov	r0, r5
   d7ef6:	b003      	add	sp, #12
   d7ef8:	bd30      	pop	{r4, r5, pc}
    return insert(size_, std::move(value));
   d7efa:	462a      	mov	r2, r5
   d7efc:	4620      	mov	r0, r4
   d7efe:	f7ff ffb9 	bl	d7e74 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   d7f02:	4605      	mov	r5, r0
   d7f04:	2800      	cmp	r0, #0
   d7f06:	d0f1      	beq.n	d7eec <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x2a>
        if (activeHandlers_.size() == 1) {
   d7f08:	6863      	ldr	r3, [r4, #4]
   d7f0a:	2b01      	cmp	r3, #1
   d7f0c:	d101      	bne.n	d7f12 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x50>
            setSystemCallbacks();
   d7f0e:	f7ff fd07 	bl	d7920 <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   d7f12:	a801      	add	r0, sp, #4
   d7f14:	f7ff fe19 	bl	d7b4a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   d7f18:	e7ec      	b.n	d7ef4 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x32>

000d7f1a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   d7f1a:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d7f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7f1e:	4604      	mov	r4, r0
   d7f20:	460d      	mov	r5, r1
   d7f22:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   d7f24:	d914      	bls.n	d7f50 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   d7f26:	4290      	cmp	r0, r2
   d7f28:	d213      	bcs.n	d7f52 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
   d7f2a:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
   d7f2e:	1a75      	subs	r5, r6, r1
   d7f30:	f1a1 0710 	sub.w	r7, r1, #16
   d7f34:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   d7f36:	42b7      	cmp	r7, r6
   d7f38:	d018      	beq.n	d7f6c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   d7f3a:	b11c      	cbz	r4, d7f44 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   d7f3c:	4631      	mov	r1, r6
   d7f3e:	4620      	mov	r0, r4
   d7f40:	f000 fe0a 	bl	d8b58 <_ZN6StringC1EOS_>
                end->~T();
   d7f44:	4630      	mov	r0, r6
   d7f46:	f000 fd8b 	bl	d8a60 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   d7f4a:	3e10      	subs	r6, #16
   d7f4c:	3c10      	subs	r4, #16
   d7f4e:	e7f2      	b.n	d7f36 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   d7f50:	d00c      	beq.n	d7f6c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   d7f52:	42b5      	cmp	r5, r6
   d7f54:	d00a      	beq.n	d7f6c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   d7f56:	b11c      	cbz	r4, d7f60 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   d7f58:	4629      	mov	r1, r5
   d7f5a:	4620      	mov	r0, r4
   d7f5c:	f000 fdfc 	bl	d8b58 <_ZN6StringC1EOS_>
                p->~T();
   d7f60:	4628      	mov	r0, r5
   d7f62:	f000 fd7d 	bl	d8a60 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   d7f66:	3510      	adds	r5, #16
   d7f68:	3410      	adds	r4, #16
   d7f6a:	e7f2      	b.n	d7f52 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
   d7f6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7f6e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
   d7f6e:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   d7f70:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   d7f72:	4605      	mov	r5, r0
        if (n > 0) {
   d7f74:	dd11      	ble.n	d7f9a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
   d7f76:	0130      	lsls	r0, r6, #4
   d7f78:	f7fe fbb4 	bl	d66e4 <malloc>
            if (!d) {
   d7f7c:	4604      	mov	r4, r0
   d7f7e:	b158      	cbz	r0, d7f98 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   d7f80:	e9d5 1200 	ldrd	r1, r2, [r5]
   d7f84:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   d7f88:	f7ff ffc7 	bl	d7f1a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   d7f8c:	6828      	ldr	r0, [r5, #0]
   d7f8e:	f7fe fbb1 	bl	d66f4 <free>
        data_ = d;
   d7f92:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d7f94:	60ae      	str	r6, [r5, #8]
        return true;
   d7f96:	2001      	movs	r0, #1
    }
   d7f98:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   d7f9a:	2400      	movs	r4, #0
   d7f9c:	e7f6      	b.n	d7f8c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

000d7f9e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   d7f9e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7fa2:	4691      	mov	r9, r2
   d7fa4:	b097      	sub	sp, #92	; 0x5c
        capacity_(0) {
   d7fa6:	2300      	movs	r3, #0
   d7fa8:	9103      	str	r1, [sp, #12]
    if (!cats.reserve(filters.size())) {
   d7faa:	f8d9 1004 	ldr.w	r1, [r9, #4]
   d7fae:	930c      	str	r3, [sp, #48]	; 0x30
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   d7fb0:	2246      	movs	r2, #70	; 0x46
    if (n > capacity_ && !realloc(n)) {
   d7fb2:	4299      	cmp	r1, r3
        capacity_(0) {
   d7fb4:	e9c0 3300 	strd	r3, r3, [r0]
   d7fb8:	e9c0 3302 	strd	r3, r3, [r0, #8]
   d7fbc:	e9c0 3304 	strd	r3, r3, [r0, #16]
   d7fc0:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   d7fc4:	4604      	mov	r4, r0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   d7fc6:	7602      	strb	r2, [r0, #24]
    if (n > capacity_ && !realloc(n)) {
   d7fc8:	dc23      	bgt.n	d8012 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
   d7fca:	e9d9 5700 	ldrd	r5, r7, [r9]
   d7fce:	2314      	movs	r3, #20
   d7fd0:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
   d7fd4:	42af      	cmp	r7, r5
   d7fd6:	d03b      	beq.n	d8050 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
   d7fd8:	4629      	mov	r1, r5
   d7fda:	a80d      	add	r0, sp, #52	; 0x34
   d7fdc:	f000 fdbc 	bl	d8b58 <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
   d7fe0:	a90d      	add	r1, sp, #52	; 0x34
   d7fe2:	a811      	add	r0, sp, #68	; 0x44
   d7fe4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   d7fe6:	f000 fdb7 	bl	d8b58 <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d7fea:	e9dd 130b 	ldrd	r1, r3, [sp, #44]	; 0x2c
   d7fee:	4299      	cmp	r1, r3
   d7ff0:	da1b      	bge.n	d802a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
   d7ff2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    move(p + 1, p, data_ + size_);
   d7ff4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    T* const p = data_ + i;
   d7ff6:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   d7ffa:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   d7ffe:	4631      	mov	r1, r6
   d8000:	f106 0010 	add.w	r0, r6, #16
   d8004:	f7ff ff89 	bl	d7f1a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   d8008:	b9ee      	cbnz	r6, d8046 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
   d800a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   d800c:	3301      	adds	r3, #1
   d800e:	930b      	str	r3, [sp, #44]	; 0x2c
    return true;
   d8010:	e011      	b.n	d8036 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
   d8012:	a80a      	add	r0, sp, #40	; 0x28
   d8014:	f7ff ffab 	bl	d7f6e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   d8018:	2800      	cmp	r0, #0
   d801a:	d1d6      	bne.n	d7fca <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
    Vector<String> cats;
   d801c:	a80a      	add	r0, sp, #40	; 0x28
   d801e:	f7ff fd3f 	bl	d7aa0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   d8022:	4620      	mov	r0, r4
   d8024:	b017      	add	sp, #92	; 0x5c
   d8026:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d802a:	3101      	adds	r1, #1
   d802c:	a80a      	add	r0, sp, #40	; 0x28
   d802e:	f7ff ff9e 	bl	d7f6e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   d8032:	2800      	cmp	r0, #0
   d8034:	d1dd      	bne.n	d7ff2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
   d8036:	a811      	add	r0, sp, #68	; 0x44
   d8038:	f000 fd12 	bl	d8a60 <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
   d803c:	a80d      	add	r0, sp, #52	; 0x34
   d803e:	f000 fd0f 	bl	d8a60 <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
   d8042:	3514      	adds	r5, #20
   d8044:	e7c6      	b.n	d7fd4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
   d8046:	a911      	add	r1, sp, #68	; 0x44
   d8048:	4630      	mov	r0, r6
   d804a:	f000 fd85 	bl	d8b58 <_ZN6StringC1EOS_>
   d804e:	e7dc      	b.n	d800a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
   d8050:	2600      	movs	r6, #0
   d8052:	e9cd 660d 	strd	r6, r6, [sp, #52]	; 0x34
   d8056:	960f      	str	r6, [sp, #60]	; 0x3c
        size_t size = 0; // Name length
   d8058:	4637      	mov	r7, r6
   d805a:	f04f 0a14 	mov.w	sl, #20
    for (int i = 0; i < cats.size(); ++i) {
   d805e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   d8062:	429e      	cmp	r6, r3
   d8064:	f280 8097 	bge.w	d8196 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f8>
        const char *category = cats.at(i).c_str();
   d8068:	0133      	lsls	r3, r6, #4
   d806a:	58d3      	ldr	r3, [r2, r3]
   d806c:	9308      	str	r3, [sp, #32]
        if (!category) {
   d806e:	b90b      	cbnz	r3, d8074 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd6>
    for (int i = 0; i < cats.size(); ++i) {
   d8070:	3601      	adds	r6, #1
   d8072:	e7f4      	b.n	d805e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xc0>
        size_t size = 0; // Name length
   d8074:	fb0a f306 	mul.w	r3, sl, r6
   d8078:	9709      	str	r7, [sp, #36]	; 0x24
   d807a:	9302      	str	r3, [sp, #8]
        Vector<Node> *pNodes = &nodes; // Root nodes
   d807c:	ad0d      	add	r5, sp, #52	; 0x34
        while ((name = nextSubcategoryName(category, size))) {
   d807e:	a909      	add	r1, sp, #36	; 0x24
   d8080:	a808      	add	r0, sp, #32
   d8082:	f7ff fb00 	bl	d7686 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   d8086:	4683      	mov	fp, r0
   d8088:	2800      	cmp	r0, #0
   d808a:	d0f1      	beq.n	d8070 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
            const int index = nodeIndex(*pNodes, name, size, found);
   d808c:	4601      	mov	r1, r0
   d808e:	9a09      	ldr	r2, [sp, #36]	; 0x24
            bool found = false;
   d8090:	f88d 701f 	strb.w	r7, [sp, #31]
            const int index = nodeIndex(*pNodes, name, size, found);
   d8094:	f10d 031f 	add.w	r3, sp, #31
   d8098:	4628      	mov	r0, r5
   d809a:	f7ff fb73 	bl	d7784 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d809e:	f89d 801f 	ldrb.w	r8, [sp, #31]
            const int index = nodeIndex(*pNodes, name, size, found);
   d80a2:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d80a4:	f1b8 0f00 	cmp.w	r8, #0
   d80a8:	d166      	bne.n	d8178 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1da>
   d80aa:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
            level(-1) {
   d80ae:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
   d80b2:	e9cd 8813 	strd	r8, r8, [sp, #76]	; 0x4c
   d80b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d80ba:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
   d80be:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
   d80c2:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d80c6:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   d80ca:	4293      	cmp	r3, r2
   d80cc:	db1a      	blt.n	d8104 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x166>
   d80ce:	f103 0b01 	add.w	fp, r3, #1
        if (n > 0) {
   d80d2:	f1bb 0f00 	cmp.w	fp, #0
   d80d6:	dd4a      	ble.n	d816e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d0>
    return ::malloc(size);
   d80d8:	fb0a f00b 	mul.w	r0, sl, fp
   d80dc:	f7fe fb02 	bl	d66e4 <malloc>
            if (!d) {
   d80e0:	9004      	str	r0, [sp, #16]
   d80e2:	2800      	cmp	r0, #0
   d80e4:	d045      	beq.n	d8172 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d4>
            move(d, data_, data_ + size_);
   d80e6:	e9d5 1200 	ldrd	r1, r2, [r5]
   d80ea:	fb0a 1202 	mla	r2, sl, r2, r1
   d80ee:	f7ff fe71 	bl	d7dd4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
   d80f2:	9b04      	ldr	r3, [sp, #16]
    ::free(ptr);
   d80f4:	6828      	ldr	r0, [r5, #0]
   d80f6:	9304      	str	r3, [sp, #16]
   d80f8:	f7fe fafc 	bl	d66f4 <free>
        data_ = d;
   d80fc:	9b04      	ldr	r3, [sp, #16]
   d80fe:	602b      	str	r3, [r5, #0]
        capacity_ = n;
   d8100:	f8c5 b008 	str.w	fp, [r5, #8]
    T* const p = data_ + i;
   d8104:	9b01      	ldr	r3, [sp, #4]
   d8106:	f8d5 b000 	ldr.w	fp, [r5]
    move(p + 1, p, data_ + size_);
   d810a:	686a      	ldr	r2, [r5, #4]
    T* const p = data_ + i;
   d810c:	fb0a f303 	mul.w	r3, sl, r3
   d8110:	eb0b 0103 	add.w	r1, fp, r3
    move(p + 1, p, data_ + size_);
   d8114:	f101 0014 	add.w	r0, r1, #20
   d8118:	fb0a b202 	mla	r2, sl, r2, fp
   d811c:	9104      	str	r1, [sp, #16]
    T* const p = data_ + i;
   d811e:	9305      	str	r3, [sp, #20]
    move(p + 1, p, data_ + size_);
   d8120:	f7ff fe58 	bl	d7dd4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   d8124:	9904      	ldr	r1, [sp, #16]
   d8126:	b1a9      	cbz	r1, d8154 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1b6>
struct spark::detail::LogFilter::Node {
   d8128:	9b05      	ldr	r3, [sp, #20]
   d812a:	9a11      	ldr	r2, [sp, #68]	; 0x44
   d812c:	f84b 2003 	str.w	r2, [fp, r3]
   d8130:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
   d8134:	808b      	strh	r3, [r1, #4]
   d8136:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
   d813a:	80cb      	strh	r3, [r1, #6]
        capacity_(0) {
   d813c:	e9c1 7702 	strd	r7, r7, [r1, #8]
   d8140:	610f      	str	r7, [r1, #16]
      __a = _GLIBCXX_MOVE(__b);
   d8142:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   d8144:	608b      	str	r3, [r1, #8]
   d8146:	9b14      	ldr	r3, [sp, #80]	; 0x50
      __b = _GLIBCXX_MOVE(__tmp);
   d8148:	9713      	str	r7, [sp, #76]	; 0x4c
      __a = _GLIBCXX_MOVE(__b);
   d814a:	60cb      	str	r3, [r1, #12]
   d814c:	9b15      	ldr	r3, [sp, #84]	; 0x54
      __b = _GLIBCXX_MOVE(__tmp);
   d814e:	9714      	str	r7, [sp, #80]	; 0x50
      __a = _GLIBCXX_MOVE(__b);
   d8150:	610b      	str	r3, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d8152:	9715      	str	r7, [sp, #84]	; 0x54
    ++size_;
   d8154:	686b      	ldr	r3, [r5, #4]
   d8156:	3301      	adds	r3, #1
   d8158:	606b      	str	r3, [r5, #4]
   d815a:	a813      	add	r0, sp, #76	; 0x4c
   d815c:	f7ff fc8c 	bl	d7a78 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d8160:	f1b8 0f00 	cmp.w	r8, #0
   d8164:	d008      	beq.n	d8178 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1da>
    Vector<Node> nodes;
   d8166:	a80d      	add	r0, sp, #52	; 0x34
   d8168:	f7ff fc86 	bl	d7a78 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d816c:	e756      	b.n	d801c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
   d816e:	4643      	mov	r3, r8
   d8170:	e7c0      	b.n	d80f4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x156>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d8172:	f04f 0801 	mov.w	r8, #1
   d8176:	e7f0      	b.n	d815a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
    return data_[i];
   d8178:	9b01      	ldr	r3, [sp, #4]
   d817a:	682d      	ldr	r5, [r5, #0]
   d817c:	fb0a 5503 	mla	r5, sl, r3, r5
            if (!*category) { // Check if it's last subcategory
   d8180:	9b08      	ldr	r3, [sp, #32]
   d8182:	781b      	ldrb	r3, [r3, #0]
   d8184:	b92b      	cbnz	r3, d8192 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f4>
                node.level = filters.at(i).level_;
   d8186:	f8d9 3000 	ldr.w	r3, [r9]
   d818a:	9a02      	ldr	r2, [sp, #8]
   d818c:	4413      	add	r3, r2
   d818e:	7c1b      	ldrb	r3, [r3, #16]
   d8190:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
   d8192:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
   d8194:	e773      	b.n	d807e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xe0>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d8196:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d8198:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d819a:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   d819c:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d819e:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d81a0:	920b      	str	r2, [sp, #44]	; 0x2c
      __a = _GLIBCXX_MOVE(__b);
   d81a2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
   d81a4:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d81a6:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   d81a8:	60a2      	str	r2, [r4, #8]
   d81aa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
   d81ac:	930d      	str	r3, [sp, #52]	; 0x34
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d81ae:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   d81b0:	60e2      	str	r2, [r4, #12]
   d81b2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
      __b = _GLIBCXX_MOVE(__tmp);
   d81b4:	930e      	str	r3, [sp, #56]	; 0x38
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d81b6:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
   d81b8:	6122      	str	r2, [r4, #16]
   d81ba:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
      __b = _GLIBCXX_MOVE(__tmp);
   d81bc:	930f      	str	r3, [sp, #60]	; 0x3c
    level_ = level;
   d81be:	9b03      	ldr	r3, [sp, #12]
   d81c0:	910a      	str	r1, [sp, #40]	; 0x28
      __a = _GLIBCXX_MOVE(__b);
   d81c2:	6162      	str	r2, [r4, #20]
   d81c4:	7623      	strb	r3, [r4, #24]
   d81c6:	e7ce      	b.n	d8166 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c8>

000d81c8 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
   d81c8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
        filter_(level, filters) {
   d81ca:	4605      	mov	r5, r0
   d81cc:	4b09      	ldr	r3, [pc, #36]	; (d81f4 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>)
   d81ce:	f845 3b04 	str.w	r3, [r5], #4
inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
   d81d2:	4604      	mov	r4, r0
   d81d4:	460e      	mov	r6, r1
        filter_(level, filters) {
   d81d6:	a801      	add	r0, sp, #4
   d81d8:	4611      	mov	r1, r2
   d81da:	f7fc fedf 	bl	d4f9c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d81de:	aa01      	add	r2, sp, #4
   d81e0:	4631      	mov	r1, r6
   d81e2:	4628      	mov	r0, r5
   d81e4:	f7ff fedb 	bl	d7f9e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d81e8:	a801      	add	r0, sp, #4
   d81ea:	f7fc f90f 	bl	d440c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}
   d81ee:	4620      	mov	r0, r4
   d81f0:	b004      	add	sp, #16
   d81f2:	bd70      	pop	{r4, r5, r6, pc}
   d81f4:	000dac04 	.word	0x000dac04

000d81f8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
   d81f8:	b5f0      	push	{r4, r5, r6, r7, lr}
   d81fa:	460f      	mov	r7, r1
   d81fc:	b087      	sub	sp, #28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d81fe:	4926      	ldr	r1, [pc, #152]	; (d8298 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa0>)
            Print *stream, const JSONValue &params) {
   d8200:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d8202:	4638      	mov	r0, r7
            Print *stream, const JSONValue &params) {
   d8204:	4616      	mov	r6, r2
   d8206:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d8208:	f002 fa33 	bl	da672 <strcmp>
   d820c:	bb00      	cbnz	r0, d8250 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x58>
        if (!stream) {
   d820e:	b1e4      	cbz	r4, d824a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   d8210:	4629      	mov	r1, r5
   d8212:	4668      	mov	r0, sp
   d8214:	f7ff fc8a 	bl	d7b2c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   d8218:	4920      	ldr	r1, [pc, #128]	; (d829c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa4>)
   d821a:	2024      	movs	r0, #36	; 0x24
   d821c:	f001 fae4 	bl	d97e8 <_ZnwjRKSt9nothrow_t>
   d8220:	4605      	mov	r5, r0
   d8222:	b170      	cbz	r0, d8242 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
        stream_(&stream) {
   d8224:	4669      	mov	r1, sp
   d8226:	a803      	add	r0, sp, #12
   d8228:	f7fc feb8 	bl	d4f9c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d822c:	aa03      	add	r2, sp, #12
   d822e:	4631      	mov	r1, r6
   d8230:	4628      	mov	r0, r5
   d8232:	f7ff ffc9 	bl	d81c8 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d8236:	a803      	add	r0, sp, #12
   d8238:	f7fc f8e8 	bl	d440c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
    using StreamLogHandler::StreamLogHandler;
   d823c:	4b18      	ldr	r3, [pc, #96]	; (d82a0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa8>)
        stream_(&stream) {
   d823e:	622c      	str	r4, [r5, #32]
    using StreamLogHandler::StreamLogHandler;
   d8240:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   d8242:	4668      	mov	r0, sp
   d8244:	f7fc f8e2 	bl	d440c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d8248:	462c      	mov	r4, r5
}
   d824a:	4620      	mov	r0, r4
   d824c:	b007      	add	sp, #28
   d824e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   d8250:	4914      	ldr	r1, [pc, #80]	; (d82a4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xac>)
   d8252:	4638      	mov	r0, r7
   d8254:	f002 fa0d 	bl	da672 <strcmp>
   d8258:	b9e0      	cbnz	r0, d8294 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x9c>
        if (!stream) {
   d825a:	2c00      	cmp	r4, #0
   d825c:	d0f5      	beq.n	d824a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   d825e:	4629      	mov	r1, r5
   d8260:	4668      	mov	r0, sp
   d8262:	f7ff fc63 	bl	d7b2c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   d8266:	490d      	ldr	r1, [pc, #52]	; (d829c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa4>)
   d8268:	2024      	movs	r0, #36	; 0x24
   d826a:	f001 fabd 	bl	d97e8 <_ZnwjRKSt9nothrow_t>
   d826e:	4605      	mov	r5, r0
   d8270:	2800      	cmp	r0, #0
   d8272:	d0e6      	beq.n	d8242 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
        stream_(&stream) {
   d8274:	4669      	mov	r1, sp
   d8276:	a803      	add	r0, sp, #12
   d8278:	f7fc fe90 	bl	d4f9c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d827c:	aa03      	add	r2, sp, #12
   d827e:	4631      	mov	r1, r6
   d8280:	4628      	mov	r0, r5
   d8282:	f7ff ffa1 	bl	d81c8 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d8286:	a803      	add	r0, sp, #12
   d8288:	f7fc f8c0 	bl	d440c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d828c:	4b06      	ldr	r3, [pc, #24]	; (d82a8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb0>)
   d828e:	602b      	str	r3, [r5, #0]
   d8290:	622c      	str	r4, [r5, #32]
}
   d8292:	e7d6      	b.n	d8242 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
            return nullptr; // Output stream is not specified
   d8294:	2400      	movs	r4, #0
   d8296:	e7d8      	b.n	d824a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
   d8298:	000daf35 	.word	0x000daf35
   d829c:	000db0fc 	.word	0x000db0fc
   d82a0:	000dafc8 	.word	0x000dafc8
   d82a4:	000daf39 	.word	0x000daf39
   d82a8:	000dafb0 	.word	0x000dafb0

000d82ac <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
   d82ac:	4b01      	ldr	r3, [pc, #4]	; (d82b4 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d82ae:	4a02      	ldr	r2, [pc, #8]	; (d82b8 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d82b0:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d82b2:	4770      	bx	lr
   d82b4:	2003e638 	.word	0x2003e638
   d82b8:	000daf4a 	.word	0x000daf4a

000d82bc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d82bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d82c0:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
   d82c2:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d82c6:	4604      	mov	r4, r0
   d82c8:	460e      	mov	r6, r1
   d82ca:	4617      	mov	r7, r2
   d82cc:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
   d82ce:	f001 f863 	bl	d9398 <_Z16_fetch_usbserialv>
   d82d2:	4581      	cmp	r9, r0
   d82d4:	d04c      	beq.n	d8370 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb4>
    if (attr.has_time) {
   d82d6:	792b      	ldrb	r3, [r5, #4]
   d82d8:	0719      	lsls	r1, r3, #28
   d82da:	d504      	bpl.n	d82e6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
   d82dc:	696a      	ldr	r2, [r5, #20]
   d82de:	4954      	ldr	r1, [pc, #336]	; (d8430 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   d82e0:	4620      	mov	r0, r4
   d82e2:	f7ff fa40 	bl	d7766 <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
   d82e6:	f1b8 0f00 	cmp.w	r8, #0
   d82ea:	d00d      	beq.n	d8308 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
   d82ec:	215b      	movs	r1, #91	; 0x5b
   d82ee:	4620      	mov	r0, r4
   d82f0:	f7ff fa2d 	bl	d774e <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   d82f4:	4641      	mov	r1, r8
   d82f6:	4620      	mov	r0, r4
   d82f8:	f7ff fa1a 	bl	d7730 <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   d82fc:	6823      	ldr	r3, [r4, #0]
   d82fe:	494d      	ldr	r1, [pc, #308]	; (d8434 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
   d8300:	68db      	ldr	r3, [r3, #12]
   d8302:	2202      	movs	r2, #2
   d8304:	4620      	mov	r0, r4
   d8306:	4798      	blx	r3
    if (attr.has_file) {
   d8308:	792b      	ldrb	r3, [r5, #4]
   d830a:	07da      	lsls	r2, r3, #31
   d830c:	d523      	bpl.n	d8356 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9a>
        s = extractFileName(attr.file); // Strip directory path
   d830e:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
   d8312:	212f      	movs	r1, #47	; 0x2f
   d8314:	4640      	mov	r0, r8
   d8316:	f002 fa09 	bl	da72c <strrchr>
    if (s1) {
   d831a:	b108      	cbz	r0, d8320 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
   d831c:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
   d8320:	4641      	mov	r1, r8
   d8322:	4620      	mov	r0, r4
   d8324:	f7ff fa04 	bl	d7730 <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   d8328:	792b      	ldrb	r3, [r5, #4]
   d832a:	079b      	lsls	r3, r3, #30
   d832c:	d508      	bpl.n	d8340 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
   d832e:	213a      	movs	r1, #58	; 0x3a
   d8330:	4620      	mov	r0, r4
   d8332:	f7ff fa0c 	bl	d774e <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
   d8336:	68ea      	ldr	r2, [r5, #12]
   d8338:	493f      	ldr	r1, [pc, #252]	; (d8438 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
   d833a:	4620      	mov	r0, r4
   d833c:	f7ff fa13 	bl	d7766 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
   d8340:	792a      	ldrb	r2, [r5, #4]
   d8342:	6823      	ldr	r3, [r4, #0]
   d8344:	f012 0f04 	tst.w	r2, #4
   d8348:	68db      	ldr	r3, [r3, #12]
            write(", ", 2);
   d834a:	bf14      	ite	ne
   d834c:	493b      	ldrne	r1, [pc, #236]	; (d843c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
            write(": ", 2);
   d834e:	493c      	ldreq	r1, [pc, #240]	; (d8440 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(", ", 2);
   d8350:	2202      	movs	r2, #2
            write(": ", 2);
   d8352:	4620      	mov	r0, r4
   d8354:	4798      	blx	r3
    if (attr.has_function) {
   d8356:	792b      	ldrb	r3, [r5, #4]
   d8358:	0758      	lsls	r0, r3, #29
   d835a:	d51d      	bpl.n	d8398 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xdc>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   d835c:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
   d835e:	460b      	mov	r3, r1
   d8360:	461a      	mov	r2, r3
    for (; *s; ++s) {
   d8362:	f813 0b01 	ldrb.w	r0, [r3], #1
   d8366:	b160      	cbz	r0, d8382 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
        if (*s == ' ') {
   d8368:	2820      	cmp	r0, #32
   d836a:	d108      	bne.n	d837e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
            s1 = s + 1; // Skip return type
   d836c:	4619      	mov	r1, r3
   d836e:	e7f7      	b.n	d8360 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
    if (stream_ == &Serial && Network.listening()) {
   d8370:	4834      	ldr	r0, [pc, #208]	; (d8444 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   d8372:	f000 f966 	bl	d8642 <_ZN5spark12NetworkClass9listeningEv>
   d8376:	2800      	cmp	r0, #0
   d8378:	d0ad      	beq.n	d82d6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
   d837a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
   d837e:	2828      	cmp	r0, #40	; 0x28
   d8380:	d1ee      	bne.n	d8360 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
        write(s, n);
   d8382:	6823      	ldr	r3, [r4, #0]
   d8384:	1a52      	subs	r2, r2, r1
   d8386:	68db      	ldr	r3, [r3, #12]
   d8388:	4620      	mov	r0, r4
   d838a:	4798      	blx	r3
        write("(): ", 4);
   d838c:	6823      	ldr	r3, [r4, #0]
   d838e:	492e      	ldr	r1, [pc, #184]	; (d8448 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   d8390:	68db      	ldr	r3, [r3, #12]
   d8392:	2204      	movs	r2, #4
   d8394:	4620      	mov	r0, r4
   d8396:	4798      	blx	r3
    return log_level_name(level, nullptr);
   d8398:	2100      	movs	r1, #0
   d839a:	4638      	mov	r0, r7
   d839c:	f7fe f880 	bl	d64a0 <log_level_name>
   d83a0:	4601      	mov	r1, r0
    write(s);
   d83a2:	4620      	mov	r0, r4
   d83a4:	f7ff f9c4 	bl	d7730 <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   d83a8:	6823      	ldr	r3, [r4, #0]
   d83aa:	4925      	ldr	r1, [pc, #148]	; (d8440 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   d83ac:	68db      	ldr	r3, [r3, #12]
   d83ae:	2202      	movs	r2, #2
   d83b0:	4620      	mov	r0, r4
   d83b2:	4798      	blx	r3
    if (msg) {
   d83b4:	b11e      	cbz	r6, d83be <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x102>
        write(msg);
   d83b6:	4631      	mov	r1, r6
   d83b8:	4620      	mov	r0, r4
   d83ba:	f7ff f9b9 	bl	d7730 <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
   d83be:	792b      	ldrb	r3, [r5, #4]
   d83c0:	f013 0f30 	tst.w	r3, #48	; 0x30
   d83c4:	d02c      	beq.n	d8420 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>
        write(" [", 2);
   d83c6:	6823      	ldr	r3, [r4, #0]
   d83c8:	4920      	ldr	r1, [pc, #128]	; (d844c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   d83ca:	68db      	ldr	r3, [r3, #12]
   d83cc:	2202      	movs	r2, #2
   d83ce:	4620      	mov	r0, r4
   d83d0:	4798      	blx	r3
        if (attr.has_code) {
   d83d2:	792b      	ldrb	r3, [r5, #4]
   d83d4:	06d9      	lsls	r1, r3, #27
   d83d6:	d50a      	bpl.n	d83ee <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x132>
            write("code = ", 7);
   d83d8:	6823      	ldr	r3, [r4, #0]
   d83da:	491d      	ldr	r1, [pc, #116]	; (d8450 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   d83dc:	68db      	ldr	r3, [r3, #12]
   d83de:	2207      	movs	r2, #7
   d83e0:	4620      	mov	r0, r4
   d83e2:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
   d83e4:	69aa      	ldr	r2, [r5, #24]
   d83e6:	491b      	ldr	r1, [pc, #108]	; (d8454 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
   d83e8:	4620      	mov	r0, r4
   d83ea:	f7ff f9bc 	bl	d7766 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
   d83ee:	792b      	ldrb	r3, [r5, #4]
   d83f0:	069a      	lsls	r2, r3, #26
   d83f2:	d511      	bpl.n	d8418 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>
            if (attr.has_code) {
   d83f4:	06db      	lsls	r3, r3, #27
   d83f6:	d505      	bpl.n	d8404 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>
                write(", ", 2);
   d83f8:	6823      	ldr	r3, [r4, #0]
   d83fa:	4910      	ldr	r1, [pc, #64]	; (d843c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
   d83fc:	68db      	ldr	r3, [r3, #12]
   d83fe:	2202      	movs	r2, #2
   d8400:	4620      	mov	r0, r4
   d8402:	4798      	blx	r3
            write("details = ", 10);
   d8404:	6823      	ldr	r3, [r4, #0]
   d8406:	4914      	ldr	r1, [pc, #80]	; (d8458 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
   d8408:	68db      	ldr	r3, [r3, #12]
   d840a:	4620      	mov	r0, r4
   d840c:	220a      	movs	r2, #10
   d840e:	4798      	blx	r3
            write(attr.details);
   d8410:	69e9      	ldr	r1, [r5, #28]
   d8412:	4620      	mov	r0, r4
   d8414:	f7ff f98c 	bl	d7730 <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
   d8418:	215d      	movs	r1, #93	; 0x5d
   d841a:	4620      	mov	r0, r4
   d841c:	f7ff f997 	bl	d774e <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
   d8420:	6823      	ldr	r3, [r4, #0]
   d8422:	490e      	ldr	r1, [pc, #56]	; (d845c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
   d8424:	68db      	ldr	r3, [r3, #12]
   d8426:	4620      	mov	r0, r4
   d8428:	2202      	movs	r2, #2
}
   d842a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
   d842e:	4718      	bx	r3
   d8430:	000daf4e 	.word	0x000daf4e
   d8434:	000daf55 	.word	0x000daf55
   d8438:	000da952 	.word	0x000da952
   d843c:	000daf58 	.word	0x000daf58
   d8440:	000daf5d 	.word	0x000daf5d
   d8444:	2003e664 	.word	0x2003e664
   d8448:	000daf5b 	.word	0x000daf5b
   d844c:	000daf60 	.word	0x000daf60
   d8450:	000daf63 	.word	0x000daf63
   d8454:	000daf6b 	.word	0x000daf6b
   d8458:	000daf6e 	.word	0x000daf6e
   d845c:	000daf79 	.word	0x000daf79

000d8460 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d8460:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d8464:	b085      	sub	sp, #20
    if (this->stream() == &Serial && Network.listening()) {
   d8466:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d846a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   d846c:	4605      	mov	r5, r0
   d846e:	460f      	mov	r7, r1
   d8470:	4690      	mov	r8, r2
   d8472:	461e      	mov	r6, r3
    if (this->stream() == &Serial && Network.listening()) {
   d8474:	f000 ff90 	bl	d9398 <_Z16_fetch_usbserialv>
   d8478:	4581      	cmp	r9, r0
   d847a:	d105      	bne.n	d8488 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
   d847c:	4849      	ldr	r0, [pc, #292]	; (d85a4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
   d847e:	f000 f8e0 	bl	d8642 <_ZN5spark12NetworkClass9listeningEv>
   d8482:	2800      	cmp	r0, #0
   d8484:	f040 808a 	bne.w	d859c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
    JSONStreamWriter json(*this->stream());
   d8488:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
   d848a:	4a47      	ldr	r2, [pc, #284]	; (d85a8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   d848c:	9201      	str	r2, [sp, #4]
        state_(BEGIN) {
   d848e:	f04f 0900 	mov.w	r9, #0
    json.beginObject();
   d8492:	a801      	add	r0, sp, #4
        strm_(stream) {
   d8494:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
   d8496:	f88d 9008 	strb.w	r9, [sp, #8]
   d849a:	f7ff f83c 	bl	d7516 <_ZN5spark10JSONWriter11beginObjectEv>
   d849e:	4649      	mov	r1, r9
   d84a0:	4640      	mov	r0, r8
   d84a2:	f7fd fffd 	bl	d64a0 <log_level_name>
    json.name("l", 1).value(s);
   d84a6:	4941      	ldr	r1, [pc, #260]	; (d85ac <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   d84a8:	4680      	mov	r8, r0
   d84aa:	2201      	movs	r2, #1
   d84ac:	a801      	add	r0, sp, #4
   d84ae:	f7ff f8bb 	bl	d7628 <_ZN5spark10JSONWriter4nameEPKcj>
   d84b2:	4641      	mov	r1, r8
   d84b4:	f7ff f92e 	bl	d7714 <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
   d84b8:	b13f      	cbz	r7, d84ca <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
   d84ba:	493d      	ldr	r1, [pc, #244]	; (d85b0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   d84bc:	2201      	movs	r2, #1
   d84be:	a801      	add	r0, sp, #4
   d84c0:	f7ff f8b2 	bl	d7628 <_ZN5spark10JSONWriter4nameEPKcj>
   d84c4:	4639      	mov	r1, r7
   d84c6:	f7ff f925 	bl	d7714 <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
   d84ca:	b13e      	cbz	r6, d84dc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
   d84cc:	4939      	ldr	r1, [pc, #228]	; (d85b4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   d84ce:	2201      	movs	r2, #1
   d84d0:	a801      	add	r0, sp, #4
   d84d2:	f7ff f8a9 	bl	d7628 <_ZN5spark10JSONWriter4nameEPKcj>
   d84d6:	4631      	mov	r1, r6
   d84d8:	f7ff f91c 	bl	d7714 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
   d84dc:	7923      	ldrb	r3, [r4, #4]
   d84de:	07df      	lsls	r7, r3, #31
   d84e0:	d50e      	bpl.n	d8500 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
   d84e2:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
   d84e4:	212f      	movs	r1, #47	; 0x2f
   d84e6:	4630      	mov	r0, r6
   d84e8:	f002 f920 	bl	da72c <strrchr>
    if (s1) {
   d84ec:	b100      	cbz	r0, d84f0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
   d84ee:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
   d84f0:	4931      	ldr	r1, [pc, #196]	; (d85b8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   d84f2:	2201      	movs	r2, #1
   d84f4:	a801      	add	r0, sp, #4
   d84f6:	f7ff f897 	bl	d7628 <_ZN5spark10JSONWriter4nameEPKcj>
   d84fa:	4631      	mov	r1, r6
   d84fc:	f7ff f90a 	bl	d7714 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
   d8500:	7923      	ldrb	r3, [r4, #4]
   d8502:	079e      	lsls	r6, r3, #30
   d8504:	d507      	bpl.n	d8516 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
   d8506:	492d      	ldr	r1, [pc, #180]	; (d85bc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
   d8508:	2202      	movs	r2, #2
   d850a:	a801      	add	r0, sp, #4
   d850c:	f7ff f88c 	bl	d7628 <_ZN5spark10JSONWriter4nameEPKcj>
   d8510:	68e1      	ldr	r1, [r4, #12]
   d8512:	f7ff f80d 	bl	d7530 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
   d8516:	7923      	ldrb	r3, [r4, #4]
   d8518:	0758      	lsls	r0, r3, #29
   d851a:	d514      	bpl.n	d8546 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   d851c:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
   d851e:	4633      	mov	r3, r6
   d8520:	461f      	mov	r7, r3
    for (; *s; ++s) {
   d8522:	f813 2b01 	ldrb.w	r2, [r3], #1
   d8526:	b12a      	cbz	r2, d8534 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
   d8528:	2a20      	cmp	r2, #32
   d852a:	d101      	bne.n	d8530 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
   d852c:	461e      	mov	r6, r3
   d852e:	e7f7      	b.n	d8520 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
   d8530:	2a28      	cmp	r2, #40	; 0x28
   d8532:	d1f5      	bne.n	d8520 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
   d8534:	4922      	ldr	r1, [pc, #136]	; (d85c0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
   d8536:	2202      	movs	r2, #2
   d8538:	a801      	add	r0, sp, #4
   d853a:	f7ff f875 	bl	d7628 <_ZN5spark10JSONWriter4nameEPKcj>
   d853e:	1bba      	subs	r2, r7, r6
   d8540:	4631      	mov	r1, r6
   d8542:	f7ff f881 	bl	d7648 <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
   d8546:	7923      	ldrb	r3, [r4, #4]
   d8548:	0719      	lsls	r1, r3, #28
   d854a:	d507      	bpl.n	d855c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
   d854c:	491d      	ldr	r1, [pc, #116]	; (d85c4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
   d854e:	2201      	movs	r2, #1
   d8550:	a801      	add	r0, sp, #4
   d8552:	f7ff f869 	bl	d7628 <_ZN5spark10JSONWriter4nameEPKcj>
   d8556:	6961      	ldr	r1, [r4, #20]
   d8558:	f7fe fffc 	bl	d7554 <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
   d855c:	7923      	ldrb	r3, [r4, #4]
   d855e:	06da      	lsls	r2, r3, #27
   d8560:	d508      	bpl.n	d8574 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
   d8562:	2204      	movs	r2, #4
   d8564:	4918      	ldr	r1, [pc, #96]	; (d85c8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   d8566:	eb0d 0002 	add.w	r0, sp, r2
   d856a:	f7ff f85d 	bl	d7628 <_ZN5spark10JSONWriter4nameEPKcj>
   d856e:	69a1      	ldr	r1, [r4, #24]
   d8570:	f7fe ffde 	bl	d7530 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
   d8574:	7923      	ldrb	r3, [r4, #4]
   d8576:	069b      	lsls	r3, r3, #26
   d8578:	d507      	bpl.n	d858a <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
   d857a:	4914      	ldr	r1, [pc, #80]	; (d85cc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   d857c:	2206      	movs	r2, #6
   d857e:	a801      	add	r0, sp, #4
   d8580:	f7ff f852 	bl	d7628 <_ZN5spark10JSONWriter4nameEPKcj>
   d8584:	69e1      	ldr	r1, [r4, #28]
   d8586:	f7ff f8c5 	bl	d7714 <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
   d858a:	a801      	add	r0, sp, #4
   d858c:	f7fe ffad 	bl	d74ea <_ZN5spark10JSONWriter9endObjectEv>
    this->stream()->write((const uint8_t*)"\r\n", 2);
   d8590:	6a28      	ldr	r0, [r5, #32]
   d8592:	490f      	ldr	r1, [pc, #60]	; (d85d0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   d8594:	6803      	ldr	r3, [r0, #0]
   d8596:	2202      	movs	r2, #2
   d8598:	68db      	ldr	r3, [r3, #12]
   d859a:	4798      	blx	r3
}
   d859c:	b005      	add	sp, #20
   d859e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d85a2:	bf00      	nop
   d85a4:	2003e664 	.word	0x2003e664
   d85a8:	000daf98 	.word	0x000daf98
   d85ac:	000daf2b 	.word	0x000daf2b
   d85b0:	000daf7c 	.word	0x000daf7c
   d85b4:	000dad9c 	.word	0x000dad9c
   d85b8:	000daa62 	.word	0x000daa62
   d85bc:	000daf7e 	.word	0x000daf7e
   d85c0:	000daf81 	.word	0x000daf81
   d85c4:	000dac9e 	.word	0x000dac9e
   d85c8:	000daf84 	.word	0x000daf84
   d85cc:	000daf89 	.word	0x000daf89
   d85d0:	000daf79 	.word	0x000daf79

000d85d4 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d85d4:	2300      	movs	r3, #0
   d85d6:	6840      	ldr	r0, [r0, #4]
   d85d8:	461a      	mov	r2, r3
   d85da:	f7fe b823 	b.w	d6624 <network_connect>

000d85de <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d85de:	6840      	ldr	r0, [r0, #4]
   d85e0:	2200      	movs	r2, #0
   d85e2:	2102      	movs	r1, #2
   d85e4:	f7fe b82e 	b.w	d6644 <network_disconnect>

000d85e8 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d85e8:	2200      	movs	r2, #0
   d85ea:	6840      	ldr	r0, [r0, #4]
   d85ec:	4611      	mov	r1, r2
   d85ee:	f7fe b821 	b.w	d6634 <network_connecting>

000d85f2 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d85f2:	2200      	movs	r2, #0
   d85f4:	6840      	ldr	r0, [r0, #4]
   d85f6:	4611      	mov	r1, r2
   d85f8:	f7fe b82c 	b.w	d6654 <network_ready>

000d85fc <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d85fc:	2300      	movs	r3, #0
   d85fe:	6840      	ldr	r0, [r0, #4]
   d8600:	461a      	mov	r2, r3
   d8602:	4619      	mov	r1, r3
   d8604:	f7fe b82e 	b.w	d6664 <network_on>

000d8608 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d8608:	2300      	movs	r3, #0
   d860a:	6840      	ldr	r0, [r0, #4]
   d860c:	461a      	mov	r2, r3
   d860e:	4619      	mov	r1, r3
   d8610:	f7fe b830 	b.w	d6674 <network_off>

000d8614 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   d8614:	6840      	ldr	r0, [r0, #4]
   d8616:	2100      	movs	r1, #0
   d8618:	f7fe b854 	b.w	d66c4 <network_is_on>

000d861c <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   d861c:	6840      	ldr	r0, [r0, #4]
   d861e:	2100      	movs	r1, #0
   d8620:	f7fe b858 	b.w	d66d4 <network_is_off>

000d8624 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d8624:	6840      	ldr	r0, [r0, #4]
   d8626:	2200      	movs	r2, #0
   d8628:	f081 0101 	eor.w	r1, r1, #1
   d862c:	f7fe b82a 	b.w	d6684 <network_listen>

000d8630 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d8630:	6840      	ldr	r0, [r0, #4]
   d8632:	2200      	movs	r2, #0
   d8634:	f7fe b836 	b.w	d66a4 <network_set_listen_timeout>

000d8638 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d8638:	2200      	movs	r2, #0
   d863a:	6840      	ldr	r0, [r0, #4]
   d863c:	4611      	mov	r1, r2
   d863e:	f7fe b839 	b.w	d66b4 <network_get_listen_timeout>

000d8642 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d8642:	2200      	movs	r2, #0
   d8644:	6840      	ldr	r0, [r0, #4]
   d8646:	4611      	mov	r1, r2
   d8648:	f7fe b824 	b.w	d6694 <network_listening>

000d864c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d864c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d8650:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d8652:	b095      	sub	sp, #84	; 0x54
   d8654:	4616      	mov	r6, r2
   d8656:	460d      	mov	r5, r1
   d8658:	4607      	mov	r7, r0
    IPAddress addr;
   d865a:	f7fe fde7 	bl	d722c <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d865e:	4621      	mov	r1, r4
   d8660:	2218      	movs	r2, #24
   d8662:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d8664:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d8666:	f001 ffc1 	bl	da5ec <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d866a:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d866c:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d8670:	4621      	mov	r1, r4
   d8672:	466b      	mov	r3, sp
   d8674:	aa0c      	add	r2, sp, #48	; 0x30
   d8676:	4630      	mov	r0, r6
   d8678:	f7fd fe52 	bl	d6320 <netdb_getaddrinfo>
    if (!r) {
   d867c:	4604      	mov	r4, r0
   d867e:	2800      	cmp	r0, #0
   d8680:	d146      	bne.n	d8710 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d8682:	4602      	mov	r2, r0
   d8684:	2101      	movs	r1, #1
   d8686:	6868      	ldr	r0, [r5, #4]
   d8688:	f7fd ffe4 	bl	d6654 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d868c:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d868e:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d8690:	4622      	mov	r2, r4
   d8692:	6868      	ldr	r0, [r5, #4]
   d8694:	f7fd ffde 	bl	d6654 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d8698:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d869a:	4681      	mov	r9, r0
        bool ok = false;
   d869c:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d869e:	2e00      	cmp	r6, #0
   d86a0:	d036      	beq.n	d8710 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
   d86a2:	2900      	cmp	r1, #0
   d86a4:	d134      	bne.n	d8710 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d86a6:	6873      	ldr	r3, [r6, #4]
   d86a8:	2b02      	cmp	r3, #2
   d86aa:	d003      	beq.n	d86b4 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d86ac:	2b0a      	cmp	r3, #10
   d86ae:	d00b      	beq.n	d86c8 <_ZN5spark12NetworkClass7resolveEPKc+0x7c>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d86b0:	69f6      	ldr	r6, [r6, #28]
   d86b2:	e7f4      	b.n	d869e <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d86b4:	f1b8 0f00 	cmp.w	r8, #0
   d86b8:	d004      	beq.n	d86c4 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d86ba:	6971      	ldr	r1, [r6, #20]
   d86bc:	4638      	mov	r0, r7
   d86be:	3104      	adds	r1, #4
   d86c0:	f7fe fde1 	bl	d7286 <_ZN9IPAddressaSEPKh>
                    ok = true;
                    break;
   d86c4:	4641      	mov	r1, r8
   d86c6:	e7f3      	b.n	d86b0 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                }
                case AF_INET6: {
                    if (!ipv6) {
   d86c8:	f1b9 0f00 	cmp.w	r9, #0
   d86cc:	d101      	bne.n	d86d2 <_ZN5spark12NetworkClass7resolveEPKc+0x86>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d86ce:	4649      	mov	r1, r9
   d86d0:	e7ee      	b.n	d86b0 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d86d2:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d86d4:	2210      	movs	r2, #16
   d86d6:	a801      	add	r0, sp, #4
   d86d8:	f001 ff88 	bl	da5ec <memset>
                    a.v = 6;
   d86dc:	2306      	movs	r3, #6
   d86de:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d86e2:	ad01      	add	r5, sp, #4
   d86e4:	f104 0308 	add.w	r3, r4, #8
   d86e8:	3418      	adds	r4, #24
   d86ea:	6818      	ldr	r0, [r3, #0]
   d86ec:	6859      	ldr	r1, [r3, #4]
   d86ee:	462a      	mov	r2, r5
   d86f0:	c203      	stmia	r2!, {r0, r1}
   d86f2:	3308      	adds	r3, #8
   d86f4:	42a3      	cmp	r3, r4
   d86f6:	4615      	mov	r5, r2
   d86f8:	d1f7      	bne.n	d86ea <_ZN5spark12NetworkClass7resolveEPKc+0x9e>
                    addr = IPAddress(a);
   d86fa:	a901      	add	r1, sp, #4
   d86fc:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d86fe:	ad07      	add	r5, sp, #28
   d8700:	f7fe fda2 	bl	d7248 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d8704:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d8706:	1d3c      	adds	r4, r7, #4
   d8708:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d870a:	682b      	ldr	r3, [r5, #0]
   d870c:	7023      	strb	r3, [r4, #0]
   d870e:	e7de      	b.n	d86ce <_ZN5spark12NetworkClass7resolveEPKc+0x82>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d8710:	9800      	ldr	r0, [sp, #0]
   d8712:	f7fd fdfd 	bl	d6310 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d8716:	4638      	mov	r0, r7
   d8718:	b015      	add	sp, #84	; 0x54
   d871a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d8720 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d8720:	4b02      	ldr	r3, [pc, #8]	; (d872c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d8722:	4a03      	ldr	r2, [pc, #12]	; (d8730 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d8724:	601a      	str	r2, [r3, #0]
   d8726:	2200      	movs	r2, #0
   d8728:	605a      	str	r2, [r3, #4]

} // spark
   d872a:	4770      	bx	lr
   d872c:	2003e664 	.word	0x2003e664
   d8730:	000db010 	.word	0x000db010

000d8734 <_ZN4PMIC4lockEv.constprop.0>:
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
   d8734:	b508      	push	{r3, lr}
            return &Wire1;
   d8736:	f001 f831 	bl	d979c <_Z20__fetch_global_Wire1v>
    return pmicWireInstance()->lock();
}
   d873a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return pmicWireInstance()->lock();
   d873e:	f7fe bcfd 	b.w	d713c <_ZN7TwoWire4lockEv>

000d8742 <_ZN4PMICC1Eb>:
PMIC::PMIC(bool _lock) :
   d8742:	b510      	push	{r4, lr}
   d8744:	4604      	mov	r4, r0
    lock_(_lock)
   d8746:	7001      	strb	r1, [r0, #0]
    if (lock_) {
   d8748:	b109      	cbz	r1, d874e <_ZN4PMICC1Eb+0xc>
        lock();
   d874a:	f7ff fff3 	bl	d8734 <_ZN4PMIC4lockEv.constprop.0>
}
   d874e:	4620      	mov	r0, r4
   d8750:	bd10      	pop	{r4, pc}

000d8752 <_ZN4PMIC5beginEv>:
{
   d8752:	b508      	push	{r3, lr}
            return &Wire1;
   d8754:	f001 f822 	bl	d979c <_Z20__fetch_global_Wire1v>
    if (!pmicWireInstance()->isEnabled()) {
   d8758:	f7fe fcec 	bl	d7134 <_ZN7TwoWire9isEnabledEv>
   d875c:	b918      	cbnz	r0, d8766 <_ZN4PMIC5beginEv+0x14>
            return &Wire1;
   d875e:	f001 f81d 	bl	d979c <_Z20__fetch_global_Wire1v>
        pmicWireInstance()->begin();
   d8762:	f7fe fc95 	bl	d7090 <_ZN7TwoWire5beginEv>
            return &Wire1;
   d8766:	f001 f819 	bl	d979c <_Z20__fetch_global_Wire1v>
}
   d876a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return pmicWireInstance()->isEnabled();
   d876e:	f7fe bce1 	b.w	d7134 <_ZN7TwoWire9isEnabledEv>

000d8772 <_ZN4PMIC6unlockEv>:

bool PMIC::unlock() {
   d8772:	b508      	push	{r3, lr}
            return &Wire1;
   d8774:	f001 f812 	bl	d979c <_Z20__fetch_global_Wire1v>
    return pmicWireInstance()->unlock();
}
   d8778:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return pmicWireInstance()->unlock();
   d877c:	f7fe bce7 	b.w	d714e <_ZN7TwoWire6unlockEv>

000d8780 <_ZNSt10lock_guardI4PMICED1Ev>:
      ~lock_guard()
   d8780:	b510      	push	{r4, lr}
   d8782:	4604      	mov	r4, r0
      { _M_device.unlock(); }
   d8784:	6800      	ldr	r0, [r0, #0]
   d8786:	f7ff fff4 	bl	d8772 <_ZN4PMIC6unlockEv>
   d878a:	4620      	mov	r0, r4
   d878c:	bd10      	pop	{r4, pc}

000d878e <_ZN4PMIC12readRegisterEh>:
byte PMIC::readRegister(byte startAddress) {
   d878e:	b530      	push	{r4, r5, lr}
   d8790:	b087      	sub	sp, #28
   d8792:	460d      	mov	r5, r1
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d8794:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d8796:	f7ff ffcd 	bl	d8734 <_ZN4PMIC4lockEv.constprop.0>
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d879a:	236b      	movs	r3, #107	; 0x6b
   d879c:	f88d 3008 	strb.w	r3, [sp, #8]
   d87a0:	2300      	movs	r3, #0
   d87a2:	2401      	movs	r4, #1
   d87a4:	9303      	str	r3, [sp, #12]
    timeout_ = ms;
   d87a6:	230a      	movs	r3, #10
   d87a8:	9305      	str	r3, [sp, #20]
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d87aa:	f88d 4010 	strb.w	r4, [sp, #16]
            return &Wire1;
   d87ae:	f000 fff5 	bl	d979c <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->beginTransmission(config);
   d87b2:	a902      	add	r1, sp, #8
   d87b4:	f7fe fca2 	bl	d70fc <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
            return &Wire1;
   d87b8:	f000 fff0 	bl	d979c <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->write(startAddress);
   d87bc:	6803      	ldr	r3, [r0, #0]
   d87be:	4629      	mov	r1, r5
   d87c0:	689b      	ldr	r3, [r3, #8]
   d87c2:	4798      	blx	r3
            return &Wire1;
   d87c4:	f000 ffea 	bl	d979c <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->endTransmission(true);
   d87c8:	4621      	mov	r1, r4
   d87ca:	f7fe fcaf 	bl	d712c <_ZN7TwoWire15endTransmissionEh>
    size_ = size;
   d87ce:	9403      	str	r4, [sp, #12]
            return &Wire1;
   d87d0:	f000 ffe4 	bl	d979c <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->requestFrom(config);
   d87d4:	a902      	add	r1, sp, #8
   d87d6:	f7fe fc61 	bl	d709c <_ZN7TwoWire11requestFromERK16WireTransmission>
            return &Wire1;
   d87da:	f000 ffdf 	bl	d979c <_Z20__fetch_global_Wire1v>
    DATA = pmicWireInstance()->read();
   d87de:	6803      	ldr	r3, [r0, #0]
   d87e0:	695b      	ldr	r3, [r3, #20]
   d87e2:	4798      	blx	r3
   d87e4:	4604      	mov	r4, r0
    std::lock_guard<PMIC> l(*this);
   d87e6:	a801      	add	r0, sp, #4
   d87e8:	f7ff ffca 	bl	d8780 <_ZNSt10lock_guardI4PMICED1Ev>
}
   d87ec:	b2e0      	uxtb	r0, r4
   d87ee:	b007      	add	sp, #28
   d87f0:	bd30      	pop	{r4, r5, pc}

000d87f2 <_ZN4PMIC13writeRegisterEhh>:
void PMIC::writeRegister(byte address, byte DATA) {
   d87f2:	b570      	push	{r4, r5, r6, lr}
   d87f4:	b086      	sub	sp, #24
   d87f6:	4614      	mov	r4, r2
   d87f8:	460d      	mov	r5, r1
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d87fa:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d87fc:	f7ff ff9a 	bl	d8734 <_ZN4PMIC4lockEv.constprop.0>
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d8800:	236b      	movs	r3, #107	; 0x6b
   d8802:	f88d 3008 	strb.w	r3, [sp, #8]
   d8806:	2300      	movs	r3, #0
   d8808:	9303      	str	r3, [sp, #12]
   d880a:	2601      	movs	r6, #1
    timeout_ = ms;
   d880c:	230a      	movs	r3, #10
   d880e:	9305      	str	r3, [sp, #20]
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d8810:	f88d 6010 	strb.w	r6, [sp, #16]
            return &Wire1;
   d8814:	f000 ffc2 	bl	d979c <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->beginTransmission(config);
   d8818:	a902      	add	r1, sp, #8
   d881a:	f7fe fc6f 	bl	d70fc <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
            return &Wire1;
   d881e:	f000 ffbd 	bl	d979c <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->write(address);
   d8822:	6803      	ldr	r3, [r0, #0]
   d8824:	4629      	mov	r1, r5
   d8826:	689b      	ldr	r3, [r3, #8]
   d8828:	4798      	blx	r3
            return &Wire1;
   d882a:	f000 ffb7 	bl	d979c <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->write(DATA);
   d882e:	6803      	ldr	r3, [r0, #0]
   d8830:	4621      	mov	r1, r4
   d8832:	689b      	ldr	r3, [r3, #8]
   d8834:	4798      	blx	r3
            return &Wire1;
   d8836:	f000 ffb1 	bl	d979c <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->endTransmission(true);
   d883a:	4631      	mov	r1, r6
   d883c:	f7fe fc76 	bl	d712c <_ZN7TwoWire15endTransmissionEh>
    std::lock_guard<PMIC> l(*this);
   d8840:	a801      	add	r0, sp, #4
   d8842:	f7ff ff9d 	bl	d8780 <_ZNSt10lock_guardI4PMICED1Ev>
}
   d8846:	b006      	add	sp, #24
   d8848:	bd70      	pop	{r4, r5, r6, pc}

000d884a <_ZN4PMIC14enableChargingEv>:
bool PMIC::enableCharging() {
   d884a:	b513      	push	{r0, r1, r4, lr}
   d884c:	4604      	mov	r4, r0
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d884e:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d8850:	f7ff ff70 	bl	d8734 <_ZN4PMIC4lockEv.constprop.0>
    byte DATA = readRegister(POWERON_CONFIG_REGISTER);
   d8854:	2101      	movs	r1, #1
   d8856:	4620      	mov	r0, r4
   d8858:	f7ff ff99 	bl	d878e <_ZN4PMIC12readRegisterEh>
    DATA = DATA & 0b11001111;
   d885c:	f000 00cf 	and.w	r0, r0, #207	; 0xcf
    writeRegister(POWERON_CONFIG_REGISTER, DATA);
   d8860:	f040 0210 	orr.w	r2, r0, #16
   d8864:	2101      	movs	r1, #1
   d8866:	4620      	mov	r0, r4
   d8868:	f7ff ffc3 	bl	d87f2 <_ZN4PMIC13writeRegisterEhh>
    std::lock_guard<PMIC> l(*this);
   d886c:	a801      	add	r0, sp, #4
   d886e:	f7ff ff87 	bl	d8780 <_ZNSt10lock_guardI4PMICED1Ev>
}
   d8872:	2001      	movs	r0, #1
   d8874:	b002      	add	sp, #8
   d8876:	bd10      	pop	{r4, pc}

000d8878 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d8878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d887a:	4606      	mov	r6, r0
   d887c:	460d      	mov	r5, r1
  size_t n = 0;
   d887e:	188f      	adds	r7, r1, r2
   d8880:	2400      	movs	r4, #0
  while (size--) {
   d8882:	42bd      	cmp	r5, r7
   d8884:	d00c      	beq.n	d88a0 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d8886:	6833      	ldr	r3, [r6, #0]
   d8888:	f815 1b01 	ldrb.w	r1, [r5], #1
   d888c:	689b      	ldr	r3, [r3, #8]
   d888e:	4630      	mov	r0, r6
   d8890:	4798      	blx	r3
     if (chunk>=0)
   d8892:	1e03      	subs	r3, r0, #0
   d8894:	db01      	blt.n	d889a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d8896:	441c      	add	r4, r3
  while (size--) {
   d8898:	e7f3      	b.n	d8882 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d889a:	2c00      	cmp	r4, #0
   d889c:	bf08      	it	eq
   d889e:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d88a0:	4620      	mov	r0, r4
   d88a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d88a4 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   d88a4:	b513      	push	{r0, r1, r4, lr}
   d88a6:	4604      	mov	r4, r0
    }
   d88a8:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d88aa:	b159      	cbz	r1, d88c4 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d88ac:	9101      	str	r1, [sp, #4]
   d88ae:	f001 ff10 	bl	da6d2 <strlen>
   d88b2:	6823      	ldr	r3, [r4, #0]
   d88b4:	9901      	ldr	r1, [sp, #4]
   d88b6:	68db      	ldr	r3, [r3, #12]
   d88b8:	4602      	mov	r2, r0
   d88ba:	4620      	mov	r0, r4
    }
   d88bc:	b002      	add	sp, #8
   d88be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d88c2:	4718      	bx	r3
    }
   d88c4:	b002      	add	sp, #8
   d88c6:	bd10      	pop	{r4, pc}

000d88c8 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d88c8:	6803      	ldr	r3, [r0, #0]
   d88ca:	689b      	ldr	r3, [r3, #8]
   d88cc:	4718      	bx	r3

000d88ce <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d88ce:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d88d0:	210d      	movs	r1, #13
{
   d88d2:	4605      	mov	r5, r0
  size_t n = print('\r');
   d88d4:	f7ff fff8 	bl	d88c8 <_ZN5Print5printEc>
  n += print('\n');
   d88d8:	210a      	movs	r1, #10
  size_t n = print('\r');
   d88da:	4604      	mov	r4, r0
  n += print('\n');
   d88dc:	4628      	mov	r0, r5
   d88de:	f7ff fff3 	bl	d88c8 <_ZN5Print5printEc>
  return n;
}
   d88e2:	4420      	add	r0, r4
   d88e4:	bd38      	pop	{r3, r4, r5, pc}

000d88e6 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d88e6:	b530      	push	{r4, r5, lr}
   d88e8:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d88ea:	2300      	movs	r3, #0
   d88ec:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d88f0:	2a01      	cmp	r2, #1
   d88f2:	bf98      	it	ls
   d88f4:	220a      	movls	r2, #10
   d88f6:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d88f8:	460d      	mov	r5, r1
   d88fa:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d88fe:	fb01 5312 	mls	r3, r1, r2, r5
   d8902:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d8906:	2b09      	cmp	r3, #9
   d8908:	bf94      	ite	ls
   d890a:	3330      	addls	r3, #48	; 0x30
   d890c:	3337      	addhi	r3, #55	; 0x37
   d890e:	b2db      	uxtb	r3, r3
  } while(n);
   d8910:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d8912:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d8916:	d9ef      	bls.n	d88f8 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d8918:	4621      	mov	r1, r4
   d891a:	f7ff ffc3 	bl	d88a4 <_ZN5Print5writeEPKc>
}
   d891e:	b00b      	add	sp, #44	; 0x2c
   d8920:	bd30      	pop	{r4, r5, pc}

000d8922 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   d8922:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d8926:	b086      	sub	sp, #24
   d8928:	af00      	add	r7, sp, #0
   d892a:	4605      	mov	r5, r0
   d892c:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   d892e:	1d38      	adds	r0, r7, #4
   d8930:	2114      	movs	r1, #20
{
   d8932:	4614      	mov	r4, r2
    va_copy(args2, args);
   d8934:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   d8936:	f7fd fefd 	bl	d6734 <vsnprintf>

    if (n<bufsize)
   d893a:	2813      	cmp	r0, #19
   d893c:	d80e      	bhi.n	d895c <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   d893e:	1d39      	adds	r1, r7, #4
   d8940:	4628      	mov	r0, r5
   d8942:	f7ff ffaf 	bl	d88a4 <_ZN5Print5writeEPKc>
   d8946:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   d8948:	b11e      	cbz	r6, d8952 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   d894a:	4628      	mov	r0, r5
   d894c:	f7ff ffbf 	bl	d88ce <_ZN5Print7printlnEv>
   d8950:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   d8952:	4620      	mov	r0, r4
   d8954:	3718      	adds	r7, #24
   d8956:	46bd      	mov	sp, r7
   d8958:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   d895c:	f100 0308 	add.w	r3, r0, #8
   d8960:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   d8964:	46e8      	mov	r8, sp
        char bigger[n+1];
   d8966:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   d896a:	4622      	mov	r2, r4
   d896c:	1c41      	adds	r1, r0, #1
   d896e:	683b      	ldr	r3, [r7, #0]
   d8970:	4668      	mov	r0, sp
   d8972:	f7fd fedf 	bl	d6734 <vsnprintf>
  return write(str);
   d8976:	4669      	mov	r1, sp
   d8978:	4628      	mov	r0, r5
   d897a:	f7ff ff93 	bl	d88a4 <_ZN5Print5writeEPKc>
   d897e:	4604      	mov	r4, r0
   d8980:	46c5      	mov	sp, r8
   d8982:	e7e1      	b.n	d8948 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000d8984 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d8984:	4b01      	ldr	r3, [pc, #4]	; (d898c <_GLOBAL__sub_I_RGB+0x8>)
   d8986:	2200      	movs	r2, #0
   d8988:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   d898a:	4770      	bx	lr
   d898c:	2003e66c 	.word	0x2003e66c

000d8990 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d8990:	b510      	push	{r4, lr}
   d8992:	4604      	mov	r4, r0
   d8994:	4608      	mov	r0, r1
{
    _spi = spi;
   d8996:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d8998:	f7fd fcca 	bl	d6330 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d899c:	2300      	movs	r3, #0
   d899e:	6063      	str	r3, [r4, #4]
}
   d89a0:	4620      	mov	r0, r4
   d89a2:	bd10      	pop	{r4, pc}

000d89a4 <_Z4dtoadhPc>:
#include "string_convert.h"

//These are very crude implementations - will refine later
//------------------------------------------------------------------------------------------

void dtoa (double val, unsigned char prec, char *sout) {
   d89a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d89a8:	ec57 6b10 	vmov	r6, r7, d0
   d89ac:	4680      	mov	r8, r0
   d89ae:	460c      	mov	r4, r1
    bool negative = val<0;
    if (negative) {
   d89b0:	ee10 0a10 	vmov	r0, s0
   d89b4:	2200      	movs	r2, #0
   d89b6:	2300      	movs	r3, #0
   d89b8:	4639      	mov	r1, r7
   d89ba:	f001 fb4b 	bl	da054 <__aeabi_dcmplt>
   d89be:	b128      	cbz	r0, d89cc <_Z4dtoadhPc+0x28>
        val = -val;
   d89c0:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   d89c4:	461f      	mov	r7, r3
        *sout++ = '-';
   d89c6:	232d      	movs	r3, #45	; 0x2d
   d89c8:	f804 3b01 	strb.w	r3, [r4], #1
   d89cc:	2300      	movs	r3, #0
    }
    long scale = 1;
   d89ce:	f04f 0901 	mov.w	r9, #1
    for (uint8_t i=0; i<prec; i++)
        scale *= 10;
   d89d2:	220a      	movs	r2, #10
    for (uint8_t i=0; i<prec; i++)
   d89d4:	b2d9      	uxtb	r1, r3
   d89d6:	4588      	cmp	r8, r1
   d89d8:	d903      	bls.n	d89e2 <_Z4dtoadhPc+0x3e>
        scale *= 10;
   d89da:	fb02 f909 	mul.w	r9, r2, r9
    for (uint8_t i=0; i<prec; i++)
   d89de:	3301      	adds	r3, #1
   d89e0:	e7f8      	b.n	d89d4 <_Z4dtoadhPc+0x30>
    val *= scale;   // capture all the significant digits
   d89e2:	4648      	mov	r0, r9
   d89e4:	f001 f85a 	bl	d9a9c <__aeabi_i2d>
   d89e8:	4632      	mov	r2, r6
   d89ea:	463b      	mov	r3, r7
   d89ec:	f001 f8c0 	bl	d9b70 <__aeabi_dmul>
   d89f0:	4606      	mov	r6, r0
   d89f2:	460f      	mov	r7, r1
    uint64_t fixed = uint64_t(val);
   d89f4:	f001 fc12 	bl	da21c <__aeabi_d2ulz>
   d89f8:	4605      	mov	r5, r0
   d89fa:	468a      	mov	sl, r1
    if ((val-fixed)>=0.5)    // round last digit
   d89fc:	f001 f882 	bl	d9b04 <__aeabi_ul2d>
   d8a00:	4602      	mov	r2, r0
   d8a02:	460b      	mov	r3, r1
   d8a04:	4630      	mov	r0, r6
   d8a06:	4639      	mov	r1, r7
   d8a08:	f000 fefa 	bl	d9800 <__aeabi_dsub>
   d8a0c:	4b13      	ldr	r3, [pc, #76]	; (d8a5c <_Z4dtoadhPc+0xb8>)
   d8a0e:	2200      	movs	r2, #0
   d8a10:	f001 fb34 	bl	da07c <__aeabi_dcmpge>
   d8a14:	b110      	cbz	r0, d8a1c <_Z4dtoadhPc+0x78>
        fixed++;
   d8a16:	3501      	adds	r5, #1
   d8a18:	f14a 0a00 	adc.w	sl, sl, #0

    unsigned long first = (unsigned long)(fixed / scale);
   d8a1c:	464a      	mov	r2, r9
   d8a1e:	4628      	mov	r0, r5
   d8a20:	17d3      	asrs	r3, r2, #31
   d8a22:	4651      	mov	r1, sl
   d8a24:	f001 fbae 	bl	da184 <__aeabi_uldivmod>
    unsigned long second = (unsigned long)(fixed % scale);

    ultoa(first, sout, 10, 1);
   d8a28:	2301      	movs	r3, #1
   d8a2a:	4615      	mov	r5, r2
   d8a2c:	4621      	mov	r1, r4
   d8a2e:	220a      	movs	r2, #10
   d8a30:	f000 fce9 	bl	d9406 <ultoa>
    if (prec) {
   d8a34:	f1b8 0f00 	cmp.w	r8, #0
   d8a38:	d00d      	beq.n	d8a56 <_Z4dtoadhPc+0xb2>
        sout += strlen(sout);
   d8a3a:	4620      	mov	r0, r4
   d8a3c:	f001 fe49 	bl	da6d2 <strlen>
        *sout++ = '.';
   d8a40:	232e      	movs	r3, #46	; 0x2e
        sout += strlen(sout);
   d8a42:	1821      	adds	r1, r4, r0
        *sout++ = '.';
   d8a44:	5423      	strb	r3, [r4, r0]
        ultoa(second, sout, 10, prec);
   d8a46:	220a      	movs	r2, #10
   d8a48:	4643      	mov	r3, r8
   d8a4a:	4628      	mov	r0, r5
   d8a4c:	3101      	adds	r1, #1
    }
}
   d8a4e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        ultoa(second, sout, 10, prec);
   d8a52:	f000 bcd8 	b.w	d9406 <ultoa>
}
   d8a56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d8a5a:	bf00      	nop
   d8a5c:	3fe00000 	.word	0x3fe00000

000d8a60 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d8a60:	b510      	push	{r4, lr}
   d8a62:	4604      	mov	r4, r0
{
	free(buffer);
   d8a64:	6800      	ldr	r0, [r0, #0]
   d8a66:	f7fd fe45 	bl	d66f4 <free>
}
   d8a6a:	4620      	mov	r0, r4
   d8a6c:	bd10      	pop	{r4, pc}

000d8a6e <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d8a6e:	b510      	push	{r4, lr}
   d8a70:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d8a72:	6800      	ldr	r0, [r0, #0]
   d8a74:	b108      	cbz	r0, d8a7a <_ZN6String10invalidateEv+0xc>
   d8a76:	f7fd fe3d 	bl	d66f4 <free>
	buffer = NULL;
   d8a7a:	2300      	movs	r3, #0
	capacity = len = 0;
   d8a7c:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   d8a80:	6023      	str	r3, [r4, #0]
}
   d8a82:	bd10      	pop	{r4, pc}

000d8a84 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d8a84:	b538      	push	{r3, r4, r5, lr}
   d8a86:	4604      	mov	r4, r0
   d8a88:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d8a8a:	6800      	ldr	r0, [r0, #0]
   d8a8c:	3101      	adds	r1, #1
   d8a8e:	f7fd fe39 	bl	d6704 <realloc>
	if (newbuffer) {
   d8a92:	b110      	cbz	r0, d8a9a <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d8a94:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   d8a98:	2001      	movs	r0, #1
	}
	return 0;
}
   d8a9a:	bd38      	pop	{r3, r4, r5, pc}

000d8a9c <_ZN6String7reserveEj>:
{
   d8a9c:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d8a9e:	6803      	ldr	r3, [r0, #0]
{
   d8aa0:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d8aa2:	b123      	cbz	r3, d8aae <_ZN6String7reserveEj+0x12>
   d8aa4:	6843      	ldr	r3, [r0, #4]
   d8aa6:	428b      	cmp	r3, r1
   d8aa8:	d301      	bcc.n	d8aae <_ZN6String7reserveEj+0x12>
   d8aaa:	2001      	movs	r0, #1
}
   d8aac:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   d8aae:	4620      	mov	r0, r4
   d8ab0:	f7ff ffe8 	bl	d8a84 <_ZN6String12changeBufferEj>
   d8ab4:	2800      	cmp	r0, #0
   d8ab6:	d0f9      	beq.n	d8aac <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   d8ab8:	68a3      	ldr	r3, [r4, #8]
   d8aba:	2b00      	cmp	r3, #0
   d8abc:	d1f5      	bne.n	d8aaa <_ZN6String7reserveEj+0xe>
   d8abe:	6822      	ldr	r2, [r4, #0]
   d8ac0:	7013      	strb	r3, [r2, #0]
   d8ac2:	e7f2      	b.n	d8aaa <_ZN6String7reserveEj+0xe>

000d8ac4 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d8ac4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d8ac6:	460d      	mov	r5, r1
	if (!reserve(length)) {
   d8ac8:	4611      	mov	r1, r2
   d8aca:	9201      	str	r2, [sp, #4]
{
   d8acc:	4604      	mov	r4, r0
	if (!reserve(length)) {
   d8ace:	f7ff ffe5 	bl	d8a9c <_ZN6String7reserveEj>
   d8ad2:	9a01      	ldr	r2, [sp, #4]
   d8ad4:	b928      	cbnz	r0, d8ae2 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   d8ad6:	4620      	mov	r0, r4
   d8ad8:	f7ff ffc9 	bl	d8a6e <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   d8adc:	4620      	mov	r0, r4
   d8ade:	b003      	add	sp, #12
   d8ae0:	bd30      	pop	{r4, r5, pc}
	len = length;
   d8ae2:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   d8ae4:	4629      	mov	r1, r5
   d8ae6:	6820      	ldr	r0, [r4, #0]
   d8ae8:	f001 fd58 	bl	da59c <memcpy>
	buffer[len] = 0;
   d8aec:	6822      	ldr	r2, [r4, #0]
   d8aee:	68a3      	ldr	r3, [r4, #8]
   d8af0:	2100      	movs	r1, #0
   d8af2:	54d1      	strb	r1, [r2, r3]
	return *this;
   d8af4:	e7f2      	b.n	d8adc <_ZN6String4copyEPKcj+0x18>

000d8af6 <_ZN6StringC1EPKc>:
	buffer = NULL;
   d8af6:	2300      	movs	r3, #0
String::String(const char *cstr)
   d8af8:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   d8afa:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const char *cstr)
   d8afe:	4604      	mov	r4, r0
	len = 0;
   d8b00:	6083      	str	r3, [r0, #8]
	flags = 0;
   d8b02:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   d8b04:	b141      	cbz	r1, d8b18 <_ZN6StringC1EPKc+0x22>
   d8b06:	4608      	mov	r0, r1
   d8b08:	9101      	str	r1, [sp, #4]
   d8b0a:	f001 fde2 	bl	da6d2 <strlen>
   d8b0e:	9901      	ldr	r1, [sp, #4]
   d8b10:	4602      	mov	r2, r0
   d8b12:	4620      	mov	r0, r4
   d8b14:	f7ff ffd6 	bl	d8ac4 <_ZN6String4copyEPKcj>
}
   d8b18:	4620      	mov	r0, r4
   d8b1a:	b002      	add	sp, #8
   d8b1c:	bd10      	pop	{r4, pc}

000d8b1e <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   d8b1e:	b538      	push	{r3, r4, r5, lr}
   d8b20:	4605      	mov	r5, r0
	if (buffer) {
   d8b22:	6800      	ldr	r0, [r0, #0]
{
   d8b24:	460c      	mov	r4, r1
	if (buffer) {
   d8b26:	b168      	cbz	r0, d8b44 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   d8b28:	686a      	ldr	r2, [r5, #4]
   d8b2a:	688b      	ldr	r3, [r1, #8]
   d8b2c:	429a      	cmp	r2, r3
   d8b2e:	d307      	bcc.n	d8b40 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   d8b30:	6809      	ldr	r1, [r1, #0]
   d8b32:	f001 fda8 	bl	da686 <strcpy>
			len = rhs.len;
   d8b36:	68a3      	ldr	r3, [r4, #8]
   d8b38:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   d8b3a:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   d8b3c:	60a3      	str	r3, [r4, #8]
}
   d8b3e:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   d8b40:	f7fd fdd8 	bl	d66f4 <free>
	buffer = rhs.buffer;
   d8b44:	6823      	ldr	r3, [r4, #0]
   d8b46:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   d8b48:	6863      	ldr	r3, [r4, #4]
   d8b4a:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   d8b4c:	68a3      	ldr	r3, [r4, #8]
   d8b4e:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   d8b50:	2300      	movs	r3, #0
	rhs.capacity = 0;
   d8b52:	e9c4 3300 	strd	r3, r3, [r4]
   d8b56:	e7f1      	b.n	d8b3c <_ZN6String4moveERS_+0x1e>

000d8b58 <_ZN6StringC1EOS_>:
String::String(String &&rval)
   d8b58:	b510      	push	{r4, lr}
	buffer = NULL;
   d8b5a:	2300      	movs	r3, #0
	capacity = 0;
   d8b5c:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   d8b60:	4604      	mov	r4, r0
	len = 0;
   d8b62:	6083      	str	r3, [r0, #8]
	flags = 0;
   d8b64:	7303      	strb	r3, [r0, #12]
	move(rval);
   d8b66:	f7ff ffda 	bl	d8b1e <_ZN6String4moveERS_>
}
   d8b6a:	4620      	mov	r0, r4
   d8b6c:	bd10      	pop	{r4, pc}

000d8b6e <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d8b6e:	4288      	cmp	r0, r1
{
   d8b70:	b510      	push	{r4, lr}
   d8b72:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d8b74:	d005      	beq.n	d8b82 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d8b76:	680b      	ldr	r3, [r1, #0]
   d8b78:	b12b      	cbz	r3, d8b86 <_ZN6StringaSERKS_+0x18>
   d8b7a:	688a      	ldr	r2, [r1, #8]
   d8b7c:	4619      	mov	r1, r3
   d8b7e:	f7ff ffa1 	bl	d8ac4 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d8b82:	4620      	mov	r0, r4
   d8b84:	bd10      	pop	{r4, pc}
	else invalidate();
   d8b86:	f7ff ff72 	bl	d8a6e <_ZN6String10invalidateEv>
   d8b8a:	e7fa      	b.n	d8b82 <_ZN6StringaSERKS_+0x14>

000d8b8c <_ZN6StringC1ERKS_>:
String::String(const String &value)
   d8b8c:	b510      	push	{r4, lr}
	buffer = NULL;
   d8b8e:	2300      	movs	r3, #0
String::String(const String &value)
   d8b90:	4604      	mov	r4, r0
	capacity = 0;
   d8b92:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   d8b96:	6083      	str	r3, [r0, #8]
	flags = 0;
   d8b98:	7303      	strb	r3, [r0, #12]
	*this = value;
   d8b9a:	f7ff ffe8 	bl	d8b6e <_ZN6StringaSERKS_>
}
   d8b9e:	4620      	mov	r0, r4
   d8ba0:	bd10      	pop	{r4, pc}

000d8ba2 <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
   d8ba2:	4288      	cmp	r0, r1
{
   d8ba4:	b510      	push	{r4, lr}
   d8ba6:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   d8ba8:	d001      	beq.n	d8bae <_ZN6StringaSEOS_+0xc>
   d8baa:	f7ff ffb8 	bl	d8b1e <_ZN6String4moveERS_>
	return *this;
}
   d8bae:	4620      	mov	r0, r4
   d8bb0:	bd10      	pop	{r4, pc}

000d8bb2 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d8bb2:	b513      	push	{r0, r1, r4, lr}
   d8bb4:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   d8bb6:	b159      	cbz	r1, d8bd0 <_ZN6StringaSEPKc+0x1e>
   d8bb8:	4608      	mov	r0, r1
   d8bba:	9101      	str	r1, [sp, #4]
   d8bbc:	f001 fd89 	bl	da6d2 <strlen>
   d8bc0:	9901      	ldr	r1, [sp, #4]
   d8bc2:	4602      	mov	r2, r0
   d8bc4:	4620      	mov	r0, r4
   d8bc6:	f7ff ff7d 	bl	d8ac4 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d8bca:	4620      	mov	r0, r4
   d8bcc:	b002      	add	sp, #8
   d8bce:	bd10      	pop	{r4, pc}
	else invalidate();
   d8bd0:	f7ff ff4d 	bl	d8a6e <_ZN6String10invalidateEv>
   d8bd4:	e7f9      	b.n	d8bca <_ZN6StringaSEPKc+0x18>

000d8bd6 <_ZN6StringC1Efi>:
String::String(float value, int decimalPlaces)
   d8bd6:	b530      	push	{r4, r5, lr}
   d8bd8:	4604      	mov	r4, r0
	buffer = NULL;
   d8bda:	2300      	movs	r3, #0
String::String(float value, int decimalPlaces)
   d8bdc:	b08b      	sub	sp, #44	; 0x2c
	capacity = 0;
   d8bde:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   d8be2:	60a3      	str	r3, [r4, #8]
	flags = 0;
   d8be4:	7323      	strb	r3, [r4, #12]
String::String(float value, int decimalPlaces)
   d8be6:	ee10 0a10 	vmov	r0, s0
	dtoa(value, decimalPlaces, buf);
   d8bea:	b2cd      	uxtb	r5, r1
   d8bec:	f000 ff68 	bl	d9ac0 <__aeabi_f2d>
   d8bf0:	ec41 0b10 	vmov	d0, r0, r1
   d8bf4:	a901      	add	r1, sp, #4
   d8bf6:	4628      	mov	r0, r5
   d8bf8:	f7ff fed4 	bl	d89a4 <_Z4dtoadhPc>
        *this = buf;
   d8bfc:	a901      	add	r1, sp, #4
   d8bfe:	4620      	mov	r0, r4
   d8c00:	f7ff ffd7 	bl	d8bb2 <_ZN6StringaSEPKc>
}
   d8c04:	4620      	mov	r0, r4
   d8c06:	b00b      	add	sp, #44	; 0x2c
   d8c08:	bd30      	pop	{r4, r5, pc}

000d8c0a <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   d8c0a:	b570      	push	{r4, r5, r6, lr}
   d8c0c:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   d8c0e:	460e      	mov	r6, r1
   d8c10:	b909      	cbnz	r1, d8c16 <_ZN6String6concatEPKcj+0xc>
   d8c12:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   d8c14:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   d8c16:	b16a      	cbz	r2, d8c34 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   d8c18:	6884      	ldr	r4, [r0, #8]
   d8c1a:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   d8c1c:	4621      	mov	r1, r4
   d8c1e:	f7ff ff3d 	bl	d8a9c <_ZN6String7reserveEj>
   d8c22:	2800      	cmp	r0, #0
   d8c24:	d0f5      	beq.n	d8c12 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   d8c26:	6828      	ldr	r0, [r5, #0]
   d8c28:	68ab      	ldr	r3, [r5, #8]
   d8c2a:	4631      	mov	r1, r6
   d8c2c:	4418      	add	r0, r3
   d8c2e:	f001 fd2a 	bl	da686 <strcpy>
	len = newlen;
   d8c32:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   d8c34:	2001      	movs	r0, #1
   d8c36:	e7ed      	b.n	d8c14 <_ZN6String6concatEPKcj+0xa>

000d8c38 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   d8c38:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   d8c3a:	688a      	ldr	r2, [r1, #8]
   d8c3c:	6809      	ldr	r1, [r1, #0]
{
   d8c3e:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   d8c40:	f7ff ffe3 	bl	d8c0a <_ZN6String6concatEPKcj>
   d8c44:	b910      	cbnz	r0, d8c4c <_ZplRK15StringSumHelperRK6String+0x14>
   d8c46:	4620      	mov	r0, r4
   d8c48:	f7ff ff11 	bl	d8a6e <_ZN6String10invalidateEv>
	return a;
}
   d8c4c:	4620      	mov	r0, r4
   d8c4e:	bd10      	pop	{r4, pc}

000d8c50 <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   d8c50:	b513      	push	{r0, r1, r4, lr}
   d8c52:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   d8c54:	b929      	cbnz	r1, d8c62 <_ZplRK15StringSumHelperPKc+0x12>
   d8c56:	4620      	mov	r0, r4
   d8c58:	f7ff ff09 	bl	d8a6e <_ZN6String10invalidateEv>
	return a;
}
   d8c5c:	4620      	mov	r0, r4
   d8c5e:	b002      	add	sp, #8
   d8c60:	bd10      	pop	{r4, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   d8c62:	4608      	mov	r0, r1
   d8c64:	9101      	str	r1, [sp, #4]
   d8c66:	f001 fd34 	bl	da6d2 <strlen>
   d8c6a:	9901      	ldr	r1, [sp, #4]
   d8c6c:	4602      	mov	r2, r0
   d8c6e:	4620      	mov	r0, r4
   d8c70:	f7ff ffcb 	bl	d8c0a <_ZN6String6concatEPKcj>
   d8c74:	2800      	cmp	r0, #0
   d8c76:	d0ee      	beq.n	d8c56 <_ZplRK15StringSumHelperPKc+0x6>
   d8c78:	e7f0      	b.n	d8c5c <_ZplRK15StringSumHelperPKc+0xc>
	...

000d8c7c <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
   d8c7c:	b40e      	push	{r1, r2, r3}
   d8c7e:	b570      	push	{r4, r5, r6, lr}
   d8c80:	b087      	sub	sp, #28
   d8c82:	ad0b      	add	r5, sp, #44	; 0x2c
   d8c84:	4604      	mov	r4, r0
   d8c86:	f855 2b04 	ldr.w	r2, [r5], #4
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   d8c8a:	9201      	str	r2, [sp, #4]
   d8c8c:	462b      	mov	r3, r5
   d8c8e:	2105      	movs	r1, #5
   d8c90:	a804      	add	r0, sp, #16
    va_start(marker, fmt);
   d8c92:	9503      	str	r5, [sp, #12]
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   d8c94:	f7fd fd4e 	bl	d6734 <vsnprintf>
    va_end(marker);

    String result;
   d8c98:	490b      	ldr	r1, [pc, #44]	; (d8cc8 <_ZN6String6formatEPKcz+0x4c>)
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   d8c9a:	4606      	mov	r6, r0
    String result;
   d8c9c:	4620      	mov	r0, r4
   d8c9e:	f7ff ff2a 	bl	d8af6 <_ZN6StringC1EPKc>
    result.reserve(n);  // internally adds +1 for null terminator
   d8ca2:	4631      	mov	r1, r6
   d8ca4:	4620      	mov	r0, r4
   d8ca6:	f7ff fef9 	bl	d8a9c <_ZN6String7reserveEj>
    if (result.buffer) {
   d8caa:	6820      	ldr	r0, [r4, #0]
   d8cac:	b130      	cbz	r0, d8cbc <_ZN6String6formatEPKcz+0x40>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   d8cae:	9a01      	ldr	r2, [sp, #4]
        va_start(marker, fmt);
   d8cb0:	9503      	str	r5, [sp, #12]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   d8cb2:	462b      	mov	r3, r5
   d8cb4:	1c71      	adds	r1, r6, #1
   d8cb6:	f7fd fd3d 	bl	d6734 <vsnprintf>
        va_end(marker);
        result.len = n;
   d8cba:	60a0      	str	r0, [r4, #8]
    }
    return result;
}
   d8cbc:	4620      	mov	r0, r4
   d8cbe:	b007      	add	sp, #28
   d8cc0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d8cc4:	b003      	add	sp, #12
   d8cc6:	4770      	bx	lr
   d8cc8:	000daf7b 	.word	0x000daf7b

000d8ccc <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d8ccc:	b510      	push	{r4, lr}
   d8cce:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d8cd0:	6800      	ldr	r0, [r0, #0]
   d8cd2:	b118      	cbz	r0, d8cdc <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
   d8cd4:	f7fd fd0e 	bl	d66f4 <free>
            wakeupSource_ = nullptr;
   d8cd8:	2300      	movs	r3, #0
   d8cda:	6023      	str	r3, [r4, #0]
        }
    }
   d8cdc:	bd10      	pop	{r4, pc}

000d8cde <_ZN17SystemSleepResultaSEOS_>:
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   d8cde:	b538      	push	{r3, r4, r5, lr}
        error_ = result.error_;
   d8ce0:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
   d8ce4:	8083      	strh	r3, [r0, #4]
        compatResult_ = result.compatResult_;
   d8ce6:	460b      	mov	r3, r1
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   d8ce8:	460d      	mov	r5, r1
        compatResult_ = result.compatResult_;
   d8cea:	f853 2f06 	ldr.w	r2, [r3, #6]!
   d8cee:	f8c0 2006 	str.w	r2, [r0, #6]
   d8cf2:	889b      	ldrh	r3, [r3, #4]
   d8cf4:	8143      	strh	r3, [r0, #10]
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   d8cf6:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
   d8cf8:	f7ff ffe8 	bl	d8ccc <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
        if (result.wakeupSource_) {
   d8cfc:	682b      	ldr	r3, [r5, #0]
   d8cfe:	b113      	cbz	r3, d8d06 <_ZN17SystemSleepResultaSEOS_+0x28>
            wakeupSource_ = result.wakeupSource_;
   d8d00:	6023      	str	r3, [r4, #0]
            result.wakeupSource_ = nullptr;
   d8d02:	2300      	movs	r3, #0
   d8d04:	602b      	str	r3, [r5, #0]
    }
   d8d06:	4620      	mov	r0, r4
   d8d08:	bd38      	pop	{r3, r4, r5, pc}
	...

000d8d0c <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>:

    int copyWakeupSource(hal_wakeup_source_base_t* source) {
   d8d0c:	b538      	push	{r3, r4, r5, lr}
   d8d0e:	460c      	mov	r4, r1
   d8d10:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
   d8d12:	f7ff ffdb 	bl	d8ccc <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
        if (source) {
   d8d16:	b144      	cbz	r4, d8d2a <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x1e>
            wakeupSource_ = (hal_wakeup_source_base_t*)malloc(source->size);
   d8d18:	8820      	ldrh	r0, [r4, #0]
   d8d1a:	f7fd fce3 	bl	d66e4 <malloc>
   d8d1e:	6028      	str	r0, [r5, #0]
            if (wakeupSource_) {
   d8d20:	b128      	cbz	r0, d8d2e <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x22>
                memcpy(wakeupSource_, source, source->size);
   d8d22:	8822      	ldrh	r2, [r4, #0]
   d8d24:	4621      	mov	r1, r4
   d8d26:	f001 fc39 	bl	da59c <memcpy>
            } else {
                return SYSTEM_ERROR_NO_MEMORY;
            }
        }
        return SYSTEM_ERROR_NONE;
   d8d2a:	2000      	movs	r0, #0
    }
   d8d2c:	bd38      	pop	{r3, r4, r5, pc}
                return SYSTEM_ERROR_NO_MEMORY;
   d8d2e:	4801      	ldr	r0, [pc, #4]	; (d8d34 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x28>)
   d8d30:	e7fc      	b.n	d8d2c <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x20>
   d8d32:	bf00      	nop
   d8d34:	fffffefc 	.word	0xfffffefc

000d8d38 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>:
void SystemClass::enterSafeMode(SystemResetFlags flags)
{
    system_reset(SYSTEM_RESET_MODE_SAFE, 0, 0, flags.value(), nullptr);
}

SystemSleepResult SystemClass::sleep(const particle::SystemSleepConfiguration& config) {
   d8d38:	b5f0      	push	{r4, r5, r6, r7, lr}
   d8d3a:	4d2d      	ldr	r5, [pc, #180]	; (d8df0 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
    }

    // It doesn't guarantee the combination of sleep mode and
    // wakeup sources that the platform supports.
    bool valid() const {
        if (!valid_) {
   d8d3c:	7d0b      	ldrb	r3, [r1, #20]
   d8d3e:	4604      	mov	r4, r0
   d8d40:	b08b      	sub	sp, #44	; 0x2c
   d8d42:	4608      	mov	r0, r1
   d8d44:	1daf      	adds	r7, r5, #6
   d8d46:	2b00      	cmp	r3, #0
   d8d48:	d038      	beq.n	d8dbc <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x84>
        return static_cast<SystemSleepMode>(config_->mode);
   d8d4a:	680b      	ldr	r3, [r1, #0]
            return valid_;
        }
        if (sleepMode() == SystemSleepMode::NONE) {
   d8d4c:	791b      	ldrb	r3, [r3, #4]
   d8d4e:	2b00      	cmp	r3, #0
   d8d50:	d034      	beq.n	d8dbc <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x84>
              error_(SYSTEM_ERROR_NONE) {
   d8d52:	2200      	movs	r2, #0
    SleepResult() {}
   d8d54:	4b27      	ldr	r3, [pc, #156]	; (d8df4 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
   d8d56:	9304      	str	r3, [sp, #16]
    if (!config.valid()) {
        LOG(ERROR, "System sleep configuration is invalid.");
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
    } else {
        SystemSleepResult result;
        int ret = system_sleep_ext(config.halConfig(), result.halWakeupSource(), nullptr);
   d8d58:	a902      	add	r1, sp, #8
   d8d5a:	3004      	adds	r0, #4
              error_(SYSTEM_ERROR_NONE) {
   d8d5c:	9202      	str	r2, [sp, #8]
   d8d5e:	f8ad 200c 	strh.w	r2, [sp, #12]
    SleepResult() {}
   d8d62:	f88d 200e 	strb.w	r2, [sp, #14]
   d8d66:	f7fd fc13 	bl	d6590 <system_sleep_ext>
        compatResult_ = result.compatResult_;
   d8d6a:	f8dd 300e 	ldr.w	r3, [sp, #14]
   d8d6e:	f8c5 3006 	str.w	r3, [r5, #6]
        result.setError(static_cast<system_error_t>(ret));
   d8d72:	b200      	sxth	r0, r0
   d8d74:	f8bd 3012 	ldrh.w	r3, [sp, #18]
        error_ = error;
   d8d78:	f8ad 000c 	strh.w	r0, [sp, #12]
        error_ = result.error_;
   d8d7c:	80a8      	strh	r0, [r5, #4]
        copyWakeupSource(result.wakeupSource_);
   d8d7e:	9902      	ldr	r1, [sp, #8]
        compatResult_ = result.compatResult_;
   d8d80:	80bb      	strh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   d8d82:	4628      	mov	r0, r5
   d8d84:	f7ff ffc2 	bl	d8d0c <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>
        freeWakeupSourceMemory();
   d8d88:	a802      	add	r0, sp, #8
   d8d8a:	f7ff ff9f 	bl	d8ccc <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
              error_(SYSTEM_ERROR_NONE) {
   d8d8e:	2300      	movs	r3, #0
   d8d90:	6023      	str	r3, [r4, #0]
   d8d92:	80a3      	strh	r3, [r4, #4]
    SleepResult() {}
   d8d94:	71a3      	strb	r3, [r4, #6]
   d8d96:	8123      	strh	r3, [r4, #8]
   d8d98:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d8d9c:	8163      	strh	r3, [r4, #10]
        error_ = result.error_;
   d8d9e:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
   d8da2:	80a3      	strh	r3, [r4, #4]
        compatResult_ = result.compatResult_;
   d8da4:	683b      	ldr	r3, [r7, #0]
   d8da6:	f8c4 3006 	str.w	r3, [r4, #6]
   d8daa:	88bb      	ldrh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   d8dac:	6829      	ldr	r1, [r5, #0]
        compatResult_ = result.compatResult_;
   d8dae:	8163      	strh	r3, [r4, #10]
        copyWakeupSource(result.wakeupSource_);
   d8db0:	4620      	mov	r0, r4
   d8db2:	f7ff ffab 	bl	d8d0c <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>
        System.systemSleepResult_ = result;
    }
    return System.systemSleepResult_;
}
   d8db6:	4620      	mov	r0, r4
   d8db8:	b00b      	add	sp, #44	; 0x2c
   d8dba:	bdf0      	pop	{r4, r5, r6, r7, pc}
        LOG(ERROR, "System sleep configuration is invalid.");
   d8dbc:	2600      	movs	r6, #0
   d8dbe:	2320      	movs	r3, #32
   d8dc0:	e9cd 3602 	strd	r3, r6, [sp, #8]
   d8dc4:	4b0c      	ldr	r3, [pc, #48]	; (d8df8 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xc0>)
   d8dc6:	9300      	str	r3, [sp, #0]
   d8dc8:	490c      	ldr	r1, [pc, #48]	; (d8dfc <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xc4>)
   d8dca:	4633      	mov	r3, r6
   d8dcc:	aa02      	add	r2, sp, #8
   d8dce:	2032      	movs	r0, #50	; 0x32
   d8dd0:	f7fd fb56 	bl	d6480 <log_message>
    SleepResult() {}
   d8dd4:	4b07      	ldr	r3, [pc, #28]	; (d8df4 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
   d8dd6:	9304      	str	r3, [sp, #16]
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
   d8dd8:	a902      	add	r1, sp, #8
        error_ = error;
   d8dda:	f64f 63f2 	movw	r3, #65266	; 0xfef2
   d8dde:	4804      	ldr	r0, [pc, #16]	; (d8df0 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
              error_(SYSTEM_ERROR_NONE) {
   d8de0:	9602      	str	r6, [sp, #8]
    SleepResult() {}
   d8de2:	f88d 600e 	strb.w	r6, [sp, #14]
        error_ = error;
   d8de6:	f8ad 300c 	strh.w	r3, [sp, #12]
   d8dea:	f7ff ff78 	bl	d8cde <_ZN17SystemSleepResultaSEOS_>
   d8dee:	e7cb      	b.n	d8d88 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x50>
   d8df0:	2003e67c 	.word	0x2003e67c
   d8df4:	ffff0000 	.word	0xffff0000
   d8df8:	000db04b 	.word	0x000db04b
   d8dfc:	000db044 	.word	0x000db044

000d8e00 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d8e00:	4b05      	ldr	r3, [pc, #20]	; (d8e18 <_GLOBAL__sub_I_System+0x18>)
   d8e02:	2202      	movs	r2, #2
   d8e04:	601a      	str	r2, [r3, #0]
              error_(SYSTEM_ERROR_NONE) {
   d8e06:	4b05      	ldr	r3, [pc, #20]	; (d8e1c <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   d8e08:	4a05      	ldr	r2, [pc, #20]	; (d8e20 <_GLOBAL__sub_I_System+0x20>)
   d8e0a:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   d8e0c:	2000      	movs	r0, #0
   d8e0e:	6018      	str	r0, [r3, #0]
   d8e10:	8098      	strh	r0, [r3, #4]
    SleepResult() {}
   d8e12:	7198      	strb	r0, [r3, #6]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d8e14:	f7fd bb66 	b.w	d64e4 <set_system_mode>
   d8e18:	2003e688 	.word	0x2003e688
   d8e1c:	2003e67c 	.word	0x2003e67c
   d8e20:	ffff0000 	.word	0xffff0000

000d8e24 <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   d8e24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
   d8e28:	4a15      	ldr	r2, [pc, #84]	; (d8e80 <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   d8e2a:	f8df 8060 	ldr.w	r8, [pc, #96]	; d8e8c <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
   d8e2e:	e9d2 3200 	ldrd	r3, r2, [r2]
   d8e32:	18c0      	adds	r0, r0, r3
   d8e34:	eb42 0101 	adc.w	r1, r2, r1
    unix_time += dst_current_cache;
   d8e38:	4a12      	ldr	r2, [pc, #72]	; (d8e84 <_ZL22Refresh_UnixTime_Cachex+0x60>)
   d8e3a:	e9d2 3200 	ldrd	r3, r2, [r2]
   d8e3e:	18c6      	adds	r6, r0, r3
   d8e40:	eb41 0702 	adc.w	r7, r1, r2
    if(unix_time != unix_time_cache)
   d8e44:	e9d8 2300 	ldrd	r2, r3, [r8]
   d8e48:	42bb      	cmp	r3, r7
   d8e4a:	bf08      	it	eq
   d8e4c:	42b2      	cmpeq	r2, r6
{
   d8e4e:	b08c      	sub	sp, #48	; 0x30
    if(unix_time != unix_time_cache)
   d8e50:	d013      	beq.n	d8e7a <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
   d8e52:	a903      	add	r1, sp, #12
   d8e54:	4668      	mov	r0, sp
   d8e56:	e9cd 6700 	strd	r6, r7, [sp]
   d8e5a:	f7fd fc93 	bl	d6784 <localtime_r>
	calendar_time.tm_year += 1900;
   d8e5e:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d8e60:	4d09      	ldr	r5, [pc, #36]	; (d8e88 <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
   d8e62:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d8e66:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
   d8e68:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d8e6a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d8e6c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d8e6e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d8e70:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   d8e72:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d8e76:	6823      	ldr	r3, [r4, #0]
   d8e78:	602b      	str	r3, [r5, #0]
    }
}
   d8e7a:	b00c      	add	sp, #48	; 0x30
   d8e7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d8e80:	2003e6c0 	.word	0x2003e6c0
   d8e84:	2003e6b8 	.word	0x2003e6b8
   d8e88:	2003e694 	.word	0x2003e694
   d8e8c:	2003e6c8 	.word	0x2003e6c8

000d8e90 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
   d8e90:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
   d8e92:	2000      	movs	r0, #0
   d8e94:	f7fd fbae 	bl	d65f4 <spark_sync_time_pending>
   d8e98:	b128      	cbz	r0, d8ea6 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d8e9a:	f7fd fb93 	bl	d65c4 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   d8e9e:	f080 0001 	eor.w	r0, r0, #1
   d8ea2:	b2c0      	uxtb	r0, r0
    }
   d8ea4:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   d8ea6:	2001      	movs	r0, #1
   d8ea8:	e7fc      	b.n	d8ea4 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

000d8eac <_ZN9TimeClass4zoneEf>:
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
	if(GMT_Offset < -12 || GMT_Offset > 14)
   d8eac:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
   d8eb0:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d8eb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
   d8eb8:	b508      	push	{r3, lr}
	if(GMT_Offset < -12 || GMT_Offset > 14)
   d8eba:	d411      	bmi.n	d8ee0 <_ZN9TimeClass4zoneEf+0x34>
   d8ebc:	eef2 7a0c 	vmov.f32	s15, #44	; 0x41600000  14.0
   d8ec0:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d8ec4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d8ec8:	dc0a      	bgt.n	d8ee0 <_ZN9TimeClass4zoneEf+0x34>
	{
		return;
	}
	time_zone_cache = GMT_Offset * 3600;
   d8eca:	eddf 7a06 	vldr	s15, [pc, #24]	; d8ee4 <_ZN9TimeClass4zoneEf+0x38>
   d8ece:	ee60 7a27 	vmul.f32	s15, s0, s15
   d8ed2:	ee17 0a90 	vmov	r0, s15
   d8ed6:	f001 f96d 	bl	da1b4 <__aeabi_f2lz>
   d8eda:	4b03      	ldr	r3, [pc, #12]	; (d8ee8 <_ZN9TimeClass4zoneEf+0x3c>)
   d8edc:	e9c3 0100 	strd	r0, r1, [r3]
}
   d8ee0:	bd08      	pop	{r3, pc}
   d8ee2:	bf00      	nop
   d8ee4:	45610000 	.word	0x45610000
   d8ee8:	2003e6c0 	.word	0x2003e6c0
   d8eec:	00000000 	.word	0x00000000

000d8ef0 <_ZN9TimeClass12getDSTOffsetEv>:
{
	return time_zone_cache / 3600.0;
}

float TimeClass::getDSTOffset()
{
   d8ef0:	b508      	push	{r3, lr}
    return dst_cache / 3600.0;
   d8ef2:	4b09      	ldr	r3, [pc, #36]	; (d8f18 <_ZN9TimeClass12getDSTOffsetEv+0x28>)
   d8ef4:	e9d3 0100 	ldrd	r0, r1, [r3]
   d8ef8:	f000 fe0c 	bl	d9b14 <__aeabi_l2d>
   d8efc:	a304      	add	r3, pc, #16	; (adr r3, d8f10 <_ZN9TimeClass12getDSTOffsetEv+0x20>)
   d8efe:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8f02:	f000 ff5f 	bl	d9dc4 <__aeabi_ddiv>
   d8f06:	f001 f8ed 	bl	da0e4 <__aeabi_d2f>
}
   d8f0a:	ee00 0a10 	vmov	s0, r0
   d8f0e:	bd08      	pop	{r3, pc}
   d8f10:	00000000 	.word	0x00000000
   d8f14:	40ac2000 	.word	0x40ac2000
   d8f18:	2003e3b8 	.word	0x2003e3b8

000d8f1c <_ZN9TimeClass7setTimeEx>:
    return !(dst_current_cache == 0);
}

/* set the given time as unix/rtc time */
void TimeClass::setTime(time_t t)
{
   d8f1c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d8f1e:	4602      	mov	r2, r0
   d8f20:	460b      	mov	r3, r1
    struct timeval tv = {
        .tv_sec = t,
        .tv_usec = 0
    };
    if (!hal_rtc_set_time(&tv, nullptr)) {
   d8f22:	4668      	mov	r0, sp
    struct timeval tv = {
   d8f24:	2100      	movs	r1, #0
    };
   d8f26:	e9cd 2300 	strd	r2, r3, [sp]
    struct timeval tv = {
   d8f2a:	e9cd 1102 	strd	r1, r1, [sp, #8]
    if (!hal_rtc_set_time(&tv, nullptr)) {
   d8f2e:	f7fd f93f 	bl	d61b0 <hal_rtc_set_time>
   d8f32:	4602      	mov	r2, r0
   d8f34:	b910      	cbnz	r0, d8f3c <_ZN9TimeClass7setTimeEx+0x20>
        system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
   d8f36:	4601      	mov	r1, r0
   d8f38:	f7fd fb04 	bl	d6544 <system_notify_time_changed>
    }
}
   d8f3c:	b005      	add	sp, #20
   d8f3e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d8f44 <_ZN9TimeClass7timeStrEx>:

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   d8f44:	b530      	push	{r4, r5, lr}
   d8f46:	4604      	mov	r4, r0
    t += time_zone_cache;
   d8f48:	4818      	ldr	r0, [pc, #96]	; (d8fac <_ZN9TimeClass7timeStrEx+0x68>)
   d8f4a:	e9d0 1000 	ldrd	r1, r0, [r0]
   d8f4e:	1852      	adds	r2, r2, r1
   d8f50:	eb40 0303 	adc.w	r3, r0, r3
    t += dst_current_cache;
   d8f54:	4816      	ldr	r0, [pc, #88]	; (d8fb0 <_ZN9TimeClass7timeStrEx+0x6c>)
   d8f56:	e9d0 1000 	ldrd	r1, r0, [r0]
   d8f5a:	1852      	adds	r2, r2, r1
{
   d8f5c:	b093      	sub	sp, #76	; 0x4c
    t += dst_current_cache;
   d8f5e:	eb40 0303 	adc.w	r3, r0, r3
   d8f62:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm calendar_time = {};
   d8f66:	2224      	movs	r2, #36	; 0x24
   d8f68:	eb0d 0002 	add.w	r0, sp, r2
   d8f6c:	2100      	movs	r1, #0
   d8f6e:	f001 fb3d 	bl	da5ec <memset>
    localtime_r(&t, &calendar_time);
    char ascstr[26] = {};
   d8f72:	2500      	movs	r5, #0
    localtime_r(&t, &calendar_time);
   d8f74:	a909      	add	r1, sp, #36	; 0x24
   d8f76:	4668      	mov	r0, sp
   d8f78:	f7fd fc04 	bl	d6784 <localtime_r>
    char ascstr[26] = {};
   d8f7c:	2216      	movs	r2, #22
   d8f7e:	4629      	mov	r1, r5
   d8f80:	a803      	add	r0, sp, #12
   d8f82:	9502      	str	r5, [sp, #8]
   d8f84:	f001 fb32 	bl	da5ec <memset>
    asctime_r(&calendar_time, ascstr);
   d8f88:	a902      	add	r1, sp, #8
   d8f8a:	a809      	add	r0, sp, #36	; 0x24
   d8f8c:	f001 fac8 	bl	da520 <asctime_r>
    int len = strlen(ascstr);
   d8f90:	a802      	add	r0, sp, #8
   d8f92:	f001 fb9e 	bl	da6d2 <strlen>
    ascstr[len-1] = 0; // remove final newline
   d8f96:	ab12      	add	r3, sp, #72	; 0x48
   d8f98:	4418      	add	r0, r3
    return String(ascstr);
   d8f9a:	a902      	add	r1, sp, #8
    ascstr[len-1] = 0; // remove final newline
   d8f9c:	f800 5c41 	strb.w	r5, [r0, #-65]
    return String(ascstr);
   d8fa0:	4620      	mov	r0, r4
   d8fa2:	f7ff fda8 	bl	d8af6 <_ZN6StringC1EPKc>
}
   d8fa6:	4620      	mov	r0, r4
   d8fa8:	b013      	add	sp, #76	; 0x4c
   d8faa:	bd30      	pop	{r4, r5, pc}
   d8fac:	2003e6c0 	.word	0x2003e6c0
   d8fb0:	2003e6b8 	.word	0x2003e6b8

000d8fb4 <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    localtime_r(&t, &calendar_time);
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   d8fb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d8fb8:	b0a5      	sub	sp, #148	; 0x94
   d8fba:	4607      	mov	r7, r0
   d8fbc:	4688      	mov	r8, r1
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   d8fbe:	a814      	add	r0, sp, #80	; 0x50
{
   d8fc0:	4611      	mov	r1, r2
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   d8fc2:	223f      	movs	r2, #63	; 0x3f
{
   d8fc4:	461d      	mov	r5, r3
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   d8fc6:	f001 fb9e 	bl	da706 <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   d8fca:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   d8fcc:	a814      	add	r0, sp, #80	; 0x50
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   d8fce:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   d8fd2:	f001 fb7e 	bl	da6d2 <strlen>
   d8fd6:	4604      	mov	r4, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
   d8fd8:	bb5d      	cbnz	r5, d9032 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x7e>
        strcpy(time_zone_str, "Z");
   d8fda:	492a      	ldr	r1, [pc, #168]	; (d9084 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd0>)
   d8fdc:	a803      	add	r0, sp, #12
   d8fde:	f001 fb52 	bl	da686 <strcpy>
   d8fe2:	ae14      	add	r6, sp, #80	; 0x50
{
   d8fe4:	2500      	movs	r5, #0
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
   d8fe6:	f104 3bff 	add.w	fp, r4, #4294967295	; 0xffffffff
   d8fea:	45ab      	cmp	fp, r5
   d8fec:	d936      	bls.n	d905c <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xa8>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
   d8fee:	46b1      	mov	r9, r6
   d8ff0:	f105 0a01 	add.w	sl, r5, #1
   d8ff4:	f819 3b01 	ldrb.w	r3, [r9], #1
   d8ff8:	2b25      	cmp	r3, #37	; 0x25
   d8ffa:	d117      	bne.n	d902c <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x78>
   d8ffc:	7873      	ldrb	r3, [r6, #1]
   d8ffe:	2b7a      	cmp	r3, #122	; 0x7a
   d9000:	d114      	bne.n	d902c <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x78>
        {
            size_t tzlen = strlen(time_zone_str);
   d9002:	a803      	add	r0, sp, #12
   d9004:	f001 fb65 	bl	da6d2 <strlen>
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   d9008:	ab14      	add	r3, sp, #80	; 0x50
            size_t tzlen = strlen(time_zone_str);
   d900a:	4604      	mov	r4, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   d900c:	1828      	adds	r0, r5, r0
   d900e:	4418      	add	r0, r3
   d9010:	ebab 0205 	sub.w	r2, fp, r5
   d9014:	1cb1      	adds	r1, r6, #2
   d9016:	f001 fac1 	bl	da59c <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
   d901a:	4622      	mov	r2, r4
   d901c:	a903      	add	r1, sp, #12
   d901e:	4630      	mov	r0, r6
   d9020:	f001 fabc 	bl	da59c <memcpy>
            len = strlen(format_str);
   d9024:	a814      	add	r0, sp, #80	; 0x50
   d9026:	f001 fb54 	bl	da6d2 <strlen>
   d902a:	4604      	mov	r4, r0
    for (size_t i=0; i<len-1; i++)
   d902c:	464e      	mov	r6, r9
   d902e:	4655      	mov	r5, sl
   d9030:	e7d9      	b.n	d8fe6 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x32>
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
   d9032:	213c      	movs	r1, #60	; 0x3c
   d9034:	fb95 f3f1 	sdiv	r3, r5, r1
   d9038:	2b00      	cmp	r3, #0
   d903a:	bfb8      	it	lt
   d903c:	425b      	neglt	r3, r3
   d903e:	fbb3 f2f1 	udiv	r2, r3, r1
   d9042:	fb01 3312 	mls	r3, r1, r2, r3
   d9046:	9300      	str	r3, [sp, #0]
   d9048:	4a0f      	ldr	r2, [pc, #60]	; (d9088 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd4>)
   d904a:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   d904e:	2110      	movs	r1, #16
   d9050:	a803      	add	r0, sp, #12
   d9052:	fb95 f3f3 	sdiv	r3, r5, r3
   d9056:	f7fd fb65 	bl	d6724 <snprintf>
   d905a:	e7c2      	b.n	d8fe2 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x2e>
        }
    }

    char buf[50] = {};
   d905c:	2100      	movs	r1, #0
   d905e:	222e      	movs	r2, #46	; 0x2e
   d9060:	a808      	add	r0, sp, #32
   d9062:	9107      	str	r1, [sp, #28]
   d9064:	f001 fac2 	bl	da5ec <memset>
    strftime(buf, sizeof(buf), format_str, calendar_time);
   d9068:	4643      	mov	r3, r8
   d906a:	aa14      	add	r2, sp, #80	; 0x50
   d906c:	2132      	movs	r1, #50	; 0x32
   d906e:	a807      	add	r0, sp, #28
   d9070:	f7fd fb80 	bl	d6774 <strftime>
    return String(buf);
   d9074:	a907      	add	r1, sp, #28
   d9076:	4638      	mov	r0, r7
   d9078:	f7ff fd3d 	bl	d8af6 <_ZN6StringC1EPKc>
}
   d907c:	4638      	mov	r0, r7
   d907e:	b025      	add	sp, #148	; 0x94
   d9080:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d9084:	000db072 	.word	0x000db072
   d9088:	000db074 	.word	0x000db074

000d908c <_ZN9TimeClass6formatExPKc>:
{
   d908c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d908e:	b08d      	sub	sp, #52	; 0x34
   d9090:	e9cd 2300 	strd	r2, r3, [sp]
   d9094:	9d12      	ldr	r5, [sp, #72]	; 0x48
   d9096:	4604      	mov	r4, r0
    if (format_spec == nullptr)
   d9098:	b915      	cbnz	r5, d90a0 <_ZN9TimeClass6formatExPKc+0x14>
        format_spec = this->format_spec;
   d909a:	4b19      	ldr	r3, [pc, #100]	; (d9100 <_ZN9TimeClass6formatExPKc+0x74>)
   d909c:	681d      	ldr	r5, [r3, #0]
    if (!format_spec || !strcmp(format_spec, TIME_FORMAT_DEFAULT)) {
   d909e:	b12d      	cbz	r5, d90ac <_ZN9TimeClass6formatExPKc+0x20>
   d90a0:	4b18      	ldr	r3, [pc, #96]	; (d9104 <_ZN9TimeClass6formatExPKc+0x78>)
   d90a2:	4628      	mov	r0, r5
   d90a4:	6819      	ldr	r1, [r3, #0]
   d90a6:	f001 fae4 	bl	da672 <strcmp>
   d90aa:	b938      	cbnz	r0, d90bc <_ZN9TimeClass6formatExPKc+0x30>
        return timeStr(t);
   d90ac:	e9dd 2300 	ldrd	r2, r3, [sp]
   d90b0:	4620      	mov	r0, r4
   d90b2:	f7ff ff47 	bl	d8f44 <_ZN9TimeClass7timeStrEx>
}
   d90b6:	4620      	mov	r0, r4
   d90b8:	b00d      	add	sp, #52	; 0x34
   d90ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    t += time_zone_cache;
   d90bc:	4e12      	ldr	r6, [pc, #72]	; (d9108 <_ZN9TimeClass6formatExPKc+0x7c>)
   d90be:	9900      	ldr	r1, [sp, #0]
    t += dst_current_cache;
   d90c0:	4f12      	ldr	r7, [pc, #72]	; (d910c <_ZN9TimeClass6formatExPKc+0x80>)
    t += time_zone_cache;
   d90c2:	e9d6 3200 	ldrd	r3, r2, [r6]
   d90c6:	185b      	adds	r3, r3, r1
   d90c8:	9901      	ldr	r1, [sp, #4]
   d90ca:	eb41 0202 	adc.w	r2, r1, r2
    t += dst_current_cache;
   d90ce:	e9d7 0100 	ldrd	r0, r1, [r7]
   d90d2:	181b      	adds	r3, r3, r0
   d90d4:	eb41 0202 	adc.w	r2, r1, r2
   d90d8:	e9cd 3200 	strd	r3, r2, [sp]
    struct tm calendar_time = {};
   d90dc:	2100      	movs	r1, #0
   d90de:	2224      	movs	r2, #36	; 0x24
   d90e0:	a803      	add	r0, sp, #12
   d90e2:	f001 fa83 	bl	da5ec <memset>
    localtime_r(&t, &calendar_time);
   d90e6:	a903      	add	r1, sp, #12
   d90e8:	4668      	mov	r0, sp
   d90ea:	f7fd fb4b 	bl	d6784 <localtime_r>
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
   d90ee:	6832      	ldr	r2, [r6, #0]
   d90f0:	683b      	ldr	r3, [r7, #0]
   d90f2:	a903      	add	r1, sp, #12
   d90f4:	4413      	add	r3, r2
   d90f6:	4620      	mov	r0, r4
   d90f8:	462a      	mov	r2, r5
   d90fa:	f7ff ff5b 	bl	d8fb4 <_ZN9TimeClass14timeFormatImplEP2tmPKci>
   d90fe:	e7da      	b.n	d90b6 <_ZN9TimeClass6formatExPKc+0x2a>
   d9100:	2003e690 	.word	0x2003e690
   d9104:	2003e3b0 	.word	0x2003e3b0
   d9108:	2003e6c0 	.word	0x2003e6c0
   d910c:	2003e6b8 	.word	0x2003e6b8

000d9110 <_ZN9TimeClass7isValidEv>:

bool TimeClass::isValid()
{
   d9110:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   d9112:	2000      	movs	r0, #0
   d9114:	f7fd f83c 	bl	d6190 <hal_rtc_time_is_valid>
    if (rtcstate)
   d9118:	4604      	mov	r4, r0
   d911a:	b9a0      	cbnz	r0, d9146 <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   d911c:	f7fd f9da 	bl	d64d4 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   d9120:	2801      	cmp	r0, #1
   d9122:	d110      	bne.n	d9146 <_ZN9TimeClass7isValidEv+0x36>
   d9124:	4620      	mov	r0, r4
   d9126:	f7fd fa05 	bl	d6534 <system_thread_get_state>
   d912a:	b960      	cbnz	r0, d9146 <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   d912c:	f7ff feb0 	bl	d8e90 <_ZN10CloudClass12syncTimeDoneEv.isra.0>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d9130:	b910      	cbnz	r0, d9138 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   d9132:	f7fd fa37 	bl	d65a4 <spark_process>
        while (_while() && !_condition()) {
   d9136:	e7f9      	b.n	d912c <_ZN9TimeClass7isValidEv+0x1c>
   d9138:	f7ff feaa 	bl	d8e90 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   d913c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   d9140:	2000      	movs	r0, #0
   d9142:	f7fd b825 	b.w	d6190 <hal_rtc_time_is_valid>
}
   d9146:	4620      	mov	r0, r4
   d9148:	bd10      	pop	{r4, pc}

000d914a <_ZN9TimeClass3nowEv>:
{
   d914a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   d914c:	f7ff ffe0 	bl	d9110 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   d9150:	2210      	movs	r2, #16
   d9152:	2100      	movs	r1, #0
   d9154:	4668      	mov	r0, sp
   d9156:	f001 fa49 	bl	da5ec <memset>
    hal_rtc_get_time(&tv, nullptr);
   d915a:	2100      	movs	r1, #0
   d915c:	4668      	mov	r0, sp
   d915e:	f7fd f81f 	bl	d61a0 <hal_rtc_get_time>
}
   d9162:	9800      	ldr	r0, [sp, #0]
   d9164:	b005      	add	sp, #20
   d9166:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d916c <_ZN9TimeClass4yearEv>:
{
   d916c:	b508      	push	{r3, lr}
	return year(now());
   d916e:	f7ff ffec 	bl	d914a <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   d9172:	17c1      	asrs	r1, r0, #31
   d9174:	f7ff fe56 	bl	d8e24 <_ZL22Refresh_UnixTime_Cachex>
}
   d9178:	4b01      	ldr	r3, [pc, #4]	; (d9180 <_ZN9TimeClass4yearEv+0x14>)
   d917a:	6958      	ldr	r0, [r3, #20]
   d917c:	bd08      	pop	{r3, pc}
   d917e:	bf00      	nop
   d9180:	2003e694 	.word	0x2003e694

000d9184 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d9184:	4b02      	ldr	r3, [pc, #8]	; (d9190 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d9186:	681a      	ldr	r2, [r3, #0]
   d9188:	4b02      	ldr	r3, [pc, #8]	; (d9194 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d918a:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d918c:	4770      	bx	lr
   d918e:	bf00      	nop
   d9190:	2003e3b0 	.word	0x2003e3b0
   d9194:	2003e690 	.word	0x2003e690

000d9198 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d9198:	4770      	bx	lr

000d919a <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d919a:	7441      	strb	r1, [r0, #17]
}
   d919c:	4770      	bx	lr

000d919e <__tcf_0>:
    serial1_rx_buffer = new hal_usart_ring_buffer_t();
  }
  if (!serial1_tx_buffer) {
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
   d919e:	4770      	bx	lr

000d91a0 <_ZN11USARTSerial17availableForWriteEv>:
{
   d91a0:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d91a2:	7c00      	ldrb	r0, [r0, #16]
   d91a4:	f7fd f914 	bl	d63d0 <hal_usart_available_data_for_write>
}
   d91a8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d91ac:	bd08      	pop	{r3, pc}

000d91ae <_ZN11USARTSerial9availableEv>:
{
   d91ae:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d91b0:	7c00      	ldrb	r0, [r0, #16]
   d91b2:	f7fd f8e5 	bl	d6380 <hal_usart_available>
}
   d91b6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d91ba:	bd08      	pop	{r3, pc}

000d91bc <_ZN11USARTSerial4peekEv>:
{
   d91bc:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d91be:	7c00      	ldrb	r0, [r0, #16]
   d91c0:	f7fd f8ee 	bl	d63a0 <hal_usart_peek>
}
   d91c4:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d91c8:	bd08      	pop	{r3, pc}

000d91ca <_ZN11USARTSerial4readEv>:
{
   d91ca:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d91cc:	7c00      	ldrb	r0, [r0, #16]
   d91ce:	f7fd f8df 	bl	d6390 <hal_usart_read>
}
   d91d2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d91d6:	bd08      	pop	{r3, pc}

000d91d8 <_ZN11USARTSerial5flushEv>:
  hal_usart_flush(_serial);
   d91d8:	7c00      	ldrb	r0, [r0, #16]
   d91da:	f7fd b8e9 	b.w	d63b0 <hal_usart_flush>

000d91de <_ZN11USARTSerial5writeEh>:
{
   d91de:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d91e0:	7c45      	ldrb	r5, [r0, #17]
{
   d91e2:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d91e4:	b12d      	cbz	r5, d91f2 <_ZN11USARTSerial5writeEh+0x14>
	  return hal_usart_write(_serial, c);
   d91e6:	7c20      	ldrb	r0, [r4, #16]
}
   d91e8:	b003      	add	sp, #12
   d91ea:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d91ee:	f7fd b8bf 	b.w	d6370 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d91f2:	7c00      	ldrb	r0, [r0, #16]
   d91f4:	9101      	str	r1, [sp, #4]
   d91f6:	f7fd f8eb 	bl	d63d0 <hal_usart_available_data_for_write>
   d91fa:	2800      	cmp	r0, #0
   d91fc:	9901      	ldr	r1, [sp, #4]
   d91fe:	dcf2      	bgt.n	d91e6 <_ZN11USARTSerial5writeEh+0x8>
}
   d9200:	4628      	mov	r0, r5
   d9202:	b003      	add	sp, #12
   d9204:	bd30      	pop	{r4, r5, pc}

000d9206 <_ZN11USARTSerialD0Ev>:
   d9206:	b510      	push	{r4, lr}
   d9208:	2114      	movs	r1, #20
   d920a:	4604      	mov	r4, r0
   d920c:	f000 faea 	bl	d97e4 <_ZdlPvj>
   d9210:	4620      	mov	r0, r4
   d9212:	bd10      	pop	{r4, pc}

000d9214 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d9214:	b510      	push	{r4, lr}
   d9216:	f04f 0c00 	mov.w	ip, #0
   d921a:	4604      	mov	r4, r0
   d921c:	4608      	mov	r0, r1
   d921e:	4611      	mov	r1, r2
   d9220:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d9224:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d9228:	4a04      	ldr	r2, [pc, #16]	; (d923c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d922a:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d922c:	2201      	movs	r2, #1
  _serial = serial;
   d922e:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d9230:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d9232:	461a      	mov	r2, r3
   d9234:	f7fd f88c 	bl	d6350 <hal_usart_init>
}
   d9238:	4620      	mov	r0, r4
   d923a:	bd10      	pop	{r4, pc}
   d923c:	000db0a4 	.word	0x000db0a4

000d9240 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   d9240:	7c00      	ldrb	r0, [r0, #16]
   d9242:	2300      	movs	r3, #0
   d9244:	f7fd b8cc 	b.w	d63e0 <hal_usart_begin_config>

000d9248 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   d9248:	2200      	movs	r2, #0
   d924a:	f7ff bff9 	b.w	d9240 <_ZN11USARTSerial5beginEmm>

000d924e <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
   d924e:	7c00      	ldrb	r0, [r0, #16]
   d9250:	f7fd b886 	b.w	d6360 <hal_usart_end>

000d9254 <_Z22__fetch_global_Serial1v>:
{
   d9254:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if (!serial1_rx_buffer) {
   d9256:	4c1a      	ldr	r4, [pc, #104]	; (d92c0 <_Z22__fetch_global_Serial1v+0x6c>)
   d9258:	6826      	ldr	r6, [r4, #0]
   d925a:	b94e      	cbnz	r6, d9270 <_Z22__fetch_global_Serial1v+0x1c>
    serial1_rx_buffer = new hal_usart_ring_buffer_t();
   d925c:	2084      	movs	r0, #132	; 0x84
   d925e:	f7fa ff1a 	bl	d4096 <_Znwj>
   d9262:	4605      	mov	r5, r0
   d9264:	b118      	cbz	r0, d926e <_Z22__fetch_global_Serial1v+0x1a>
   d9266:	2284      	movs	r2, #132	; 0x84
   d9268:	4631      	mov	r1, r6
   d926a:	f001 f9bf 	bl	da5ec <memset>
   d926e:	6025      	str	r5, [r4, #0]
  if (!serial1_tx_buffer) {
   d9270:	4d14      	ldr	r5, [pc, #80]	; (d92c4 <_Z22__fetch_global_Serial1v+0x70>)
   d9272:	682f      	ldr	r7, [r5, #0]
   d9274:	b94f      	cbnz	r7, d928a <_Z22__fetch_global_Serial1v+0x36>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
   d9276:	2084      	movs	r0, #132	; 0x84
   d9278:	f7fa ff0d 	bl	d4096 <_Znwj>
   d927c:	4606      	mov	r6, r0
   d927e:	b118      	cbz	r0, d9288 <_Z22__fetch_global_Serial1v+0x34>
   d9280:	2284      	movs	r2, #132	; 0x84
   d9282:	4639      	mov	r1, r7
   d9284:	f001 f9b2 	bl	da5ec <memset>
   d9288:	602e      	str	r6, [r5, #0]
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
   d928a:	4e0f      	ldr	r6, [pc, #60]	; (d92c8 <_Z22__fetch_global_Serial1v+0x74>)
   d928c:	7831      	ldrb	r1, [r6, #0]
   d928e:	f3bf 8f5b 	dmb	ish
   d9292:	f011 0101 	ands.w	r1, r1, #1
   d9296:	d110      	bne.n	d92ba <_Z22__fetch_global_Serial1v+0x66>
   d9298:	4630      	mov	r0, r6
   d929a:	9101      	str	r1, [sp, #4]
   d929c:	f7fa ff0c 	bl	d40b8 <__cxa_guard_acquire>
   d92a0:	9901      	ldr	r1, [sp, #4]
   d92a2:	b150      	cbz	r0, d92ba <_Z22__fetch_global_Serial1v+0x66>
   d92a4:	682b      	ldr	r3, [r5, #0]
   d92a6:	6822      	ldr	r2, [r4, #0]
   d92a8:	4808      	ldr	r0, [pc, #32]	; (d92cc <_Z22__fetch_global_Serial1v+0x78>)
   d92aa:	f7ff ffb3 	bl	d9214 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d92ae:	4630      	mov	r0, r6
   d92b0:	f7fa ff07 	bl	d40c2 <__cxa_guard_release>
   d92b4:	4806      	ldr	r0, [pc, #24]	; (d92d0 <_Z22__fetch_global_Serial1v+0x7c>)
   d92b6:	f001 f959 	bl	da56c <atexit>
#endif
	return serial1;
}
   d92ba:	4804      	ldr	r0, [pc, #16]	; (d92cc <_Z22__fetch_global_Serial1v+0x78>)
   d92bc:	b003      	add	sp, #12
   d92be:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d92c0:	2003e6d4 	.word	0x2003e6d4
   d92c4:	2003e6d8 	.word	0x2003e6d8
   d92c8:	2003e6d0 	.word	0x2003e6d0
   d92cc:	2003e6dc 	.word	0x2003e6dc
   d92d0:	000d919f 	.word	0x000d919f

000d92d4 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d92d4:	7441      	strb	r1, [r0, #17]
}
   d92d6:	4770      	bx	lr

000d92d8 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d92d8:	4770      	bx	lr

000d92da <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d92da:	4770      	bx	lr

000d92dc <_ZN9USBSerial4readEv>:
{
   d92dc:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d92de:	2100      	movs	r1, #0
   d92e0:	7c00      	ldrb	r0, [r0, #16]
   d92e2:	f7fd f8ad 	bl	d6440 <HAL_USB_USART_Receive_Data>
}
   d92e6:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d92ea:	bd08      	pop	{r3, pc}

000d92ec <_ZN9USBSerial4peekEv>:
{
   d92ec:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d92ee:	2101      	movs	r1, #1
   d92f0:	7c00      	ldrb	r0, [r0, #16]
   d92f2:	f7fd f8a5 	bl	d6440 <HAL_USB_USART_Receive_Data>
}
   d92f6:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d92fa:	bd08      	pop	{r3, pc}

000d92fc <_ZN9USBSerial17availableForWriteEv>:
{
   d92fc:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d92fe:	7c00      	ldrb	r0, [r0, #16]
   d9300:	f7fd f896 	bl	d6430 <HAL_USB_USART_Available_Data_For_Write>
}
   d9304:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d9308:	bd08      	pop	{r3, pc}

000d930a <_ZN9USBSerial9availableEv>:
{
   d930a:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d930c:	7c00      	ldrb	r0, [r0, #16]
   d930e:	f7fd f887 	bl	d6420 <HAL_USB_USART_Available_Data>
}
   d9312:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d9316:	bd08      	pop	{r3, pc}

000d9318 <_ZN9USBSerial5writeEh>:
{
   d9318:	b513      	push	{r0, r1, r4, lr}
   d931a:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d931c:	7c00      	ldrb	r0, [r0, #16]
{
   d931e:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d9320:	f7fd f886 	bl	d6430 <HAL_USB_USART_Available_Data_For_Write>
   d9324:	2800      	cmp	r0, #0
   d9326:	9901      	ldr	r1, [sp, #4]
   d9328:	dc01      	bgt.n	d932e <_ZN9USBSerial5writeEh+0x16>
   d932a:	7c60      	ldrb	r0, [r4, #17]
   d932c:	b120      	cbz	r0, d9338 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d932e:	7c20      	ldrb	r0, [r4, #16]
   d9330:	f7fd f88e 	bl	d6450 <HAL_USB_USART_Send_Data>
   d9334:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d9338:	b002      	add	sp, #8
   d933a:	bd10      	pop	{r4, pc}

000d933c <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d933c:	7c00      	ldrb	r0, [r0, #16]
   d933e:	f7fd b88f 	b.w	d6460 <HAL_USB_USART_Flush_Data>

000d9342 <_ZN9USBSerialD0Ev>:
   d9342:	b510      	push	{r4, lr}
   d9344:	2114      	movs	r1, #20
   d9346:	4604      	mov	r4, r0
   d9348:	f000 fa4c 	bl	d97e4 <_ZdlPvj>
   d934c:	4620      	mov	r0, r4
   d934e:	bd10      	pop	{r4, pc}

000d9350 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d9350:	b510      	push	{r4, lr}
   d9352:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d9356:	4604      	mov	r4, r0
   d9358:	4608      	mov	r0, r1
   d935a:	2100      	movs	r1, #0
   d935c:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d9360:	4b04      	ldr	r3, [pc, #16]	; (d9374 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d9362:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d9364:	2301      	movs	r3, #1
  _serial = serial;
   d9366:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d9368:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d936a:	4611      	mov	r1, r2
   d936c:	f7fd f840 	bl	d63f0 <HAL_USB_USART_Init>
}
   d9370:	4620      	mov	r0, r4
   d9372:	bd10      	pop	{r4, pc}
   d9374:	000db0d4 	.word	0x000db0d4

000d9378 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d9378:	7c00      	ldrb	r0, [r0, #16]
   d937a:	2200      	movs	r2, #0
   d937c:	f7fd b840 	b.w	d6400 <HAL_USB_USART_Begin>

000d9380 <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
   d9380:	7c00      	ldrb	r0, [r0, #16]
   d9382:	f7fd b845 	b.w	d6410 <HAL_USB_USART_End>

000d9386 <_Z19acquireSerialBufferv>:
{
   d9386:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d9388:	2214      	movs	r2, #20
{
   d938a:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d938c:	2100      	movs	r1, #0
   d938e:	f001 f92d 	bl	da5ec <memset>
}
   d9392:	4620      	mov	r0, r4
   d9394:	bd10      	pop	{r4, pc}
	...

000d9398 <_Z16_fetch_usbserialv>:
{
   d9398:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d939a:	4c0f      	ldr	r4, [pc, #60]	; (d93d8 <_Z16_fetch_usbserialv+0x40>)
{
   d939c:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d939e:	a803      	add	r0, sp, #12
   d93a0:	f7ff fff1 	bl	d9386 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d93a4:	7821      	ldrb	r1, [r4, #0]
   d93a6:	f3bf 8f5b 	dmb	ish
   d93aa:	f011 0101 	ands.w	r1, r1, #1
   d93ae:	d10f      	bne.n	d93d0 <_Z16_fetch_usbserialv+0x38>
   d93b0:	4620      	mov	r0, r4
   d93b2:	9101      	str	r1, [sp, #4]
   d93b4:	f7fa fe80 	bl	d40b8 <__cxa_guard_acquire>
   d93b8:	9901      	ldr	r1, [sp, #4]
   d93ba:	b148      	cbz	r0, d93d0 <_Z16_fetch_usbserialv+0x38>
   d93bc:	aa03      	add	r2, sp, #12
   d93be:	4807      	ldr	r0, [pc, #28]	; (d93dc <_Z16_fetch_usbserialv+0x44>)
   d93c0:	f7ff ffc6 	bl	d9350 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d93c4:	4620      	mov	r0, r4
   d93c6:	f7fa fe7c 	bl	d40c2 <__cxa_guard_release>
   d93ca:	4805      	ldr	r0, [pc, #20]	; (d93e0 <_Z16_fetch_usbserialv+0x48>)
   d93cc:	f001 f8ce 	bl	da56c <atexit>
	return _usbserial;
}
   d93d0:	4802      	ldr	r0, [pc, #8]	; (d93dc <_Z16_fetch_usbserialv+0x44>)
   d93d2:	b008      	add	sp, #32
   d93d4:	bd10      	pop	{r4, pc}
   d93d6:	bf00      	nop
   d93d8:	2003e6f0 	.word	0x2003e6f0
   d93dc:	2003e6f4 	.word	0x2003e6f4
   d93e0:	000d92d9 	.word	0x000d92d9

000d93e4 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   d93e4:	b510      	push	{r4, lr}
   d93e6:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   d93e8:	f001 f973 	bl	da6d2 <strlen>
   d93ec:	3801      	subs	r0, #1
   d93ee:	1823      	adds	r3, r4, r0
   d93f0:	4620      	mov	r0, r4
	while(i<j){
   d93f2:	4283      	cmp	r3, r0
   d93f4:	d906      	bls.n	d9404 <_Z11str_reversePc+0x20>
		c = *i;
   d93f6:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   d93f8:	7819      	ldrb	r1, [r3, #0]
   d93fa:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   d93fe:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   d9402:	e7f6      	b.n	d93f2 <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   d9404:	bd10      	pop	{r4, pc}

000d9406 <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d9406:	b570      	push	{r4, r5, r6, lr}
   d9408:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   d940a:	1e91      	subs	r1, r2, #2
   d940c:	2922      	cmp	r1, #34	; 0x22
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d940e:	4605      	mov	r5, r0
	if(radix<2 || radix>36){
   d9410:	d822      	bhi.n	d9458 <ultoa+0x52>
		return NULL;
	}
	char* ptr=buffer;
   d9412:	4620      	mov	r0, r4

	div_t result;
	while(a){
   d9414:	b16d      	cbz	r5, d9432 <ultoa+0x2c>
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
   d9416:	fbb5 f6f2 	udiv	r6, r5, r2
            result.rem = a%radix;
   d941a:	fb02 5516 	mls	r5, r2, r6, r5
            *ptr = result.rem;
   d941e:	b2e9      	uxtb	r1, r5
            if(result.rem<10){
   d9420:	2d09      	cmp	r5, #9
                *ptr += '0';
   d9422:	bf94      	ite	ls
   d9424:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
   d9426:	3157      	addhi	r1, #87	; 0x57
   d9428:	b2c9      	uxtb	r1, r1
   d942a:	f800 1b01 	strb.w	r1, [r0], #1
            }
            ++ptr;
            a = result.quot;
   d942e:	4635      	mov	r5, r6
	while(a){
   d9430:	e7f0      	b.n	d9414 <ultoa+0xe>
   d9432:	4602      	mov	r2, r0
	}
        while (ptr < buffer+pad)
   d9434:	4423      	add	r3, r4
            *ptr++ = '0';
   d9436:	2130      	movs	r1, #48	; 0x30
        while (ptr < buffer+pad)
   d9438:	4293      	cmp	r3, r2
   d943a:	d902      	bls.n	d9442 <ultoa+0x3c>
            *ptr++ = '0';
   d943c:	f802 1b01 	strb.w	r1, [r2], #1
        while (ptr < buffer+pad)
   d9440:	e7fa      	b.n	d9438 <ultoa+0x32>
   d9442:	1a1a      	subs	r2, r3, r0
   d9444:	4283      	cmp	r3, r0
   d9446:	bf38      	it	cc
   d9448:	2200      	movcc	r2, #0

	*ptr = '\0';
   d944a:	2300      	movs	r3, #0
   d944c:	5483      	strb	r3, [r0, r2]
	str_reverse(buffer);
   d944e:	4620      	mov	r0, r4
   d9450:	f7ff ffc8 	bl	d93e4 <_Z11str_reversePc>
	return buffer;
   d9454:	4620      	mov	r0, r4
}
   d9456:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   d9458:	2000      	movs	r0, #0
   d945a:	e7fc      	b.n	d9456 <ultoa+0x50>

000d945c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d945c:	4b01      	ldr	r3, [pc, #4]	; (d9464 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d945e:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d9460:	4770      	bx	lr
   d9462:	bf00      	nop
   d9464:	2003e3c0 	.word	0x2003e3c0

000d9468 <serialEventRun>:
{
   d9468:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d946a:	4b0b      	ldr	r3, [pc, #44]	; (d9498 <serialEventRun+0x30>)
   d946c:	b143      	cbz	r3, d9480 <serialEventRun+0x18>
   d946e:	f7ff ff93 	bl	d9398 <_Z16_fetch_usbserialv>
   d9472:	6803      	ldr	r3, [r0, #0]
   d9474:	691b      	ldr	r3, [r3, #16]
   d9476:	4798      	blx	r3
   d9478:	2800      	cmp	r0, #0
   d947a:	dd01      	ble.n	d9480 <serialEventRun+0x18>
        serialEvent();
   d947c:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d9480:	4b06      	ldr	r3, [pc, #24]	; (d949c <serialEventRun+0x34>)
   d9482:	b143      	cbz	r3, d9496 <serialEventRun+0x2e>
   d9484:	f7ff fee6 	bl	d9254 <_Z22__fetch_global_Serial1v>
   d9488:	6803      	ldr	r3, [r0, #0]
   d948a:	691b      	ldr	r3, [r3, #16]
   d948c:	4798      	blx	r3
   d948e:	2800      	cmp	r0, #0
   d9490:	dd01      	ble.n	d9496 <serialEventRun+0x2e>
        serialEvent1();
   d9492:	f3af 8000 	nop.w
}
   d9496:	bd08      	pop	{r3, pc}
	...

000d94a0 <_post_loop>:
{
   d94a0:	b508      	push	{r3, lr}
	serialEventRun();
   d94a2:	f7ff ffe1 	bl	d9468 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d94a6:	f7fc fe53 	bl	d6150 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d94aa:	4b01      	ldr	r3, [pc, #4]	; (d94b0 <_post_loop+0x10>)
   d94ac:	6018      	str	r0, [r3, #0]
}
   d94ae:	bd08      	pop	{r3, pc}
   d94b0:	2003e71c 	.word	0x2003e71c

000d94b4 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d94b4:	4805      	ldr	r0, [pc, #20]	; (d94cc <_Z33system_initialize_user_backup_ramv+0x18>)
   d94b6:	4a06      	ldr	r2, [pc, #24]	; (d94d0 <_Z33system_initialize_user_backup_ramv+0x1c>)
   d94b8:	4906      	ldr	r1, [pc, #24]	; (d94d4 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   d94ba:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d94bc:	1a12      	subs	r2, r2, r0
   d94be:	f001 f86d 	bl	da59c <memcpy>
    __backup_sram_signature = signature;
   d94c2:	4b05      	ldr	r3, [pc, #20]	; (d94d8 <_Z33system_initialize_user_backup_ramv+0x24>)
   d94c4:	4a05      	ldr	r2, [pc, #20]	; (d94dc <_Z33system_initialize_user_backup_ramv+0x28>)
   d94c6:	601a      	str	r2, [r3, #0]
}
   d94c8:	bd08      	pop	{r3, pc}
   d94ca:	bf00      	nop
   d94cc:	2003f400 	.word	0x2003f400
   d94d0:	2003f404 	.word	0x2003f404
   d94d4:	000db298 	.word	0x000db298
   d94d8:	2003f400 	.word	0x2003f400
   d94dc:	9a271c1e 	.word	0x9a271c1e

000d94e0 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d94e0:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d94e2:	2300      	movs	r3, #0
   d94e4:	9300      	str	r3, [sp, #0]
   d94e6:	461a      	mov	r2, r3
   d94e8:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d94ec:	f7fd f83c 	bl	d6568 <system_ctrl_set_result>
}
   d94f0:	b003      	add	sp, #12
   d94f2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d94f8 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d94f8:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d94fa:	8843      	ldrh	r3, [r0, #2]
   d94fc:	2b0a      	cmp	r3, #10
   d94fe:	d008      	beq.n	d9512 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d9500:	2b50      	cmp	r3, #80	; 0x50
   d9502:	d10b      	bne.n	d951c <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d9504:	4b09      	ldr	r3, [pc, #36]	; (d952c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d9506:	681b      	ldr	r3, [r3, #0]
   d9508:	b14b      	cbz	r3, d951e <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d950a:	b003      	add	sp, #12
   d950c:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d9510:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d9512:	f7ff ffe5 	bl	d94e0 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d9516:	b003      	add	sp, #12
   d9518:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d951c:	2300      	movs	r3, #0
   d951e:	9300      	str	r3, [sp, #0]
   d9520:	461a      	mov	r2, r3
   d9522:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d9526:	f7fd f81f 	bl	d6568 <system_ctrl_set_result>
}
   d952a:	e7f4      	b.n	d9516 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d952c:	2003e70c 	.word	0x2003e70c

000d9530 <module_user_init_hook>:
{
   d9530:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d9532:	4812      	ldr	r0, [pc, #72]	; (d957c <module_user_init_hook+0x4c>)
   d9534:	2100      	movs	r1, #0
   d9536:	f7fd f915 	bl	d6764 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   d953a:	4b11      	ldr	r3, [pc, #68]	; (d9580 <module_user_init_hook+0x50>)
   d953c:	681a      	ldr	r2, [r3, #0]
   d953e:	4b11      	ldr	r3, [pc, #68]	; (d9584 <module_user_init_hook+0x54>)
   d9540:	429a      	cmp	r2, r3
   d9542:	4b11      	ldr	r3, [pc, #68]	; (d9588 <module_user_init_hook+0x58>)
   d9544:	bf0c      	ite	eq
   d9546:	2201      	moveq	r2, #1
   d9548:	2200      	movne	r2, #0
   d954a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d954c:	d001      	beq.n	d9552 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   d954e:	f7ff ffb1 	bl	d94b4 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d9552:	f7fc fded 	bl	d6130 <HAL_RNG_GetRandomNumber>
   d9556:	4604      	mov	r4, r0
    srand(seed);
   d9558:	f001 f850 	bl	da5fc <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d955c:	4b0b      	ldr	r3, [pc, #44]	; (d958c <module_user_init_hook+0x5c>)
   d955e:	b113      	cbz	r3, d9566 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   d9560:	4620      	mov	r0, r4
   d9562:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d9566:	2100      	movs	r1, #0
   d9568:	4808      	ldr	r0, [pc, #32]	; (d958c <module_user_init_hook+0x5c>)
   d956a:	f7fd f853 	bl	d6614 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d956e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d9572:	4807      	ldr	r0, [pc, #28]	; (d9590 <module_user_init_hook+0x60>)
   d9574:	2100      	movs	r1, #0
   d9576:	f7fc bfed 	b.w	d6554 <system_ctrl_set_app_request_handler>
   d957a:	bf00      	nop
   d957c:	000d945d 	.word	0x000d945d
   d9580:	2003f400 	.word	0x2003f400
   d9584:	9a271c1e 	.word	0x9a271c1e
   d9588:	2003e708 	.word	0x2003e708
   d958c:	00000000 	.word	0x00000000
   d9590:	000d94f9 	.word	0x000d94f9

000d9594 <spark_protocol_instance>:
extern "C" {
#endif

DYNALIB_BEGIN(communication)

DYNALIB_FN(0, communication, spark_protocol_instance, ProtocolFacade*(void))
   d9594:	b508      	push	{r3, lr}
   d9596:	4b02      	ldr	r3, [pc, #8]	; (d95a0 <spark_protocol_instance+0xc>)
   d9598:	681b      	ldr	r3, [r3, #0]
   d959a:	681b      	ldr	r3, [r3, #0]
   d959c:	9301      	str	r3, [sp, #4]
   d959e:	bd08      	pop	{r3, pc}
   d95a0:	0003025c 	.word	0x0003025c

000d95a4 <spark_protocol_set_product_id>:
DYNALIB_FN(1, communication, spark_protocol_set_product_id, void(ProtocolFacade*, product_id_t, unsigned, void*))
   d95a4:	b508      	push	{r3, lr}
   d95a6:	4b02      	ldr	r3, [pc, #8]	; (d95b0 <spark_protocol_set_product_id+0xc>)
   d95a8:	681b      	ldr	r3, [r3, #0]
   d95aa:	685b      	ldr	r3, [r3, #4]
   d95ac:	9301      	str	r3, [sp, #4]
   d95ae:	bd08      	pop	{r3, pc}
   d95b0:	0003025c 	.word	0x0003025c

000d95b4 <spark_protocol_set_product_firmware_version>:
DYNALIB_FN(2, communication, spark_protocol_set_product_firmware_version, void(ProtocolFacade*, product_firmware_version_t, unsigned, void*))
   d95b4:	b508      	push	{r3, lr}
   d95b6:	4b02      	ldr	r3, [pc, #8]	; (d95c0 <spark_protocol_set_product_firmware_version+0xc>)
   d95b8:	681b      	ldr	r3, [r3, #0]
   d95ba:	689b      	ldr	r3, [r3, #8]
   d95bc:	9301      	str	r3, [sp, #4]
   d95be:	bd08      	pop	{r3, pc}
   d95c0:	0003025c 	.word	0x0003025c

000d95c4 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d95c4:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d95c6:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d95c8:	d902      	bls.n	d95d0 <pinAvailable+0xc>
    return false;
   d95ca:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d95cc:	b002      	add	sp, #8
   d95ce:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d95d0:	f1a0 030b 	sub.w	r3, r0, #11
   d95d4:	2b02      	cmp	r3, #2
   d95d6:	d81a      	bhi.n	d960e <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d95d8:	4c17      	ldr	r4, [pc, #92]	; (d9638 <pinAvailable+0x74>)
   d95da:	7821      	ldrb	r1, [r4, #0]
   d95dc:	f3bf 8f5b 	dmb	ish
   d95e0:	f011 0101 	ands.w	r1, r1, #1
   d95e4:	d10b      	bne.n	d95fe <pinAvailable+0x3a>
   d95e6:	4620      	mov	r0, r4
   d95e8:	9101      	str	r1, [sp, #4]
   d95ea:	f7fa fd65 	bl	d40b8 <__cxa_guard_acquire>
   d95ee:	9901      	ldr	r1, [sp, #4]
   d95f0:	b128      	cbz	r0, d95fe <pinAvailable+0x3a>
   d95f2:	4812      	ldr	r0, [pc, #72]	; (d963c <pinAvailable+0x78>)
   d95f4:	f7ff f9cc 	bl	d8990 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d95f8:	4620      	mov	r0, r4
   d95fa:	f7fa fd62 	bl	d40c2 <__cxa_guard_release>
   d95fe:	4b0f      	ldr	r3, [pc, #60]	; (d963c <pinAvailable+0x78>)
   d9600:	7818      	ldrb	r0, [r3, #0]
   d9602:	f7fc fe9d 	bl	d6340 <hal_spi_is_enabled>
   d9606:	2800      	cmp	r0, #0
   d9608:	d1df      	bne.n	d95ca <pinAvailable+0x6>
  return true; // 'pin' is available
   d960a:	2001      	movs	r0, #1
   d960c:	e7de      	b.n	d95cc <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d960e:	2801      	cmp	r0, #1
   d9610:	d809      	bhi.n	d9626 <pinAvailable+0x62>
   d9612:	f000 f89f 	bl	d9754 <_Z19__fetch_global_Wirev>
   d9616:	2100      	movs	r1, #0
   d9618:	7c00      	ldrb	r0, [r0, #16]
   d961a:	f7fc fe49 	bl	d62b0 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d961e:	f080 0001 	eor.w	r0, r0, #1
   d9622:	b2c0      	uxtb	r0, r0
   d9624:	e7d2      	b.n	d95cc <pinAvailable+0x8>
   d9626:	3809      	subs	r0, #9
   d9628:	2801      	cmp	r0, #1
   d962a:	d8ee      	bhi.n	d960a <pinAvailable+0x46>
   d962c:	f7ff fe12 	bl	d9254 <_Z22__fetch_global_Serial1v>
   d9630:	7c00      	ldrb	r0, [r0, #16]
   d9632:	f7fc fec5 	bl	d63c0 <hal_usart_is_enabled>
   d9636:	e7f2      	b.n	d961e <pinAvailable+0x5a>
   d9638:	2003e710 	.word	0x2003e710
   d963c:	2003e714 	.word	0x2003e714

000d9640 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d9640:	2823      	cmp	r0, #35	; 0x23
{
   d9642:	b538      	push	{r3, r4, r5, lr}
   d9644:	4604      	mov	r4, r0
   d9646:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d9648:	d80a      	bhi.n	d9660 <pinMode+0x20>
   d964a:	29ff      	cmp	r1, #255	; 0xff
   d964c:	d008      	beq.n	d9660 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d964e:	f7ff ffb9 	bl	d95c4 <pinAvailable>
   d9652:	b128      	cbz	r0, d9660 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d9654:	4629      	mov	r1, r5
   d9656:	4620      	mov	r0, r4
}
   d9658:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d965c:	f7fc bdb8 	b.w	d61d0 <HAL_Pin_Mode>
}
   d9660:	bd38      	pop	{r3, r4, r5, pc}

000d9662 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d9662:	b538      	push	{r3, r4, r5, lr}
   d9664:	4604      	mov	r4, r0
   d9666:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d9668:	f7fc fdba 	bl	d61e0 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d966c:	28ff      	cmp	r0, #255	; 0xff
   d966e:	d010      	beq.n	d9692 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   d9670:	2806      	cmp	r0, #6
   d9672:	d804      	bhi.n	d967e <digitalWrite+0x1c>
   d9674:	234d      	movs	r3, #77	; 0x4d
   d9676:	fa23 f000 	lsr.w	r0, r3, r0
   d967a:	07c3      	lsls	r3, r0, #31
   d967c:	d409      	bmi.n	d9692 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d967e:	4620      	mov	r0, r4
   d9680:	f7ff ffa0 	bl	d95c4 <pinAvailable>
   d9684:	b128      	cbz	r0, d9692 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d9686:	4629      	mov	r1, r5
   d9688:	4620      	mov	r0, r4
}
   d968a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   d968e:	f7fc bdaf 	b.w	d61f0 <HAL_GPIO_Write>
}
   d9692:	bd38      	pop	{r3, r4, r5, pc}

000d9694 <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d9694:	280d      	cmp	r0, #13
{
   d9696:	b510      	push	{r4, lr}
   d9698:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   d969a:	bf9c      	itt	ls
   d969c:	340e      	addls	r4, #14
   d969e:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d96a0:	4620      	mov	r0, r4
   d96a2:	f7ff ff8f 	bl	d95c4 <pinAvailable>
   d96a6:	b150      	cbz	r0, d96be <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d96a8:	2103      	movs	r1, #3
   d96aa:	4620      	mov	r0, r4
   d96ac:	f7fc fd88 	bl	d61c0 <HAL_Validate_Pin_Function>
   d96b0:	2803      	cmp	r0, #3
   d96b2:	d104      	bne.n	d96be <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   d96b4:	4620      	mov	r0, r4
}
   d96b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   d96ba:	f7fc bdb1 	b.w	d6220 <hal_adc_read>
}
   d96be:	2000      	movs	r0, #0
   d96c0:	bd10      	pop	{r4, pc}
	...

000d96c4 <_Z21__fetch_global_EEPROMv>:

// we don't use this global instance since there's no actual instance data
// Having this keeps the unoptimized build happy

EEPROMClass& __fetch_global_EEPROM()
{
   d96c4:	b510      	push	{r4, lr}
	static EEPROMClass eeprom;
   d96c6:	4c08      	ldr	r4, [pc, #32]	; (d96e8 <_Z21__fetch_global_EEPROMv+0x24>)
   d96c8:	7823      	ldrb	r3, [r4, #0]
   d96ca:	f3bf 8f5b 	dmb	ish
   d96ce:	07db      	lsls	r3, r3, #31
   d96d0:	d408      	bmi.n	d96e4 <_Z21__fetch_global_EEPROMv+0x20>
   d96d2:	4620      	mov	r0, r4
   d96d4:	f7fa fcf0 	bl	d40b8 <__cxa_guard_acquire>
   d96d8:	b120      	cbz	r0, d96e4 <_Z21__fetch_global_EEPROMv+0x20>

struct EEPROMClass{

	EEPROMClass()
    {
    		HAL_EEPROM_Init();
   d96da:	f7fc fd41 	bl	d6160 <HAL_EEPROM_Init>
   d96de:	4620      	mov	r0, r4
   d96e0:	f7fa fcef 	bl	d40c2 <__cxa_guard_release>
	return eeprom;
}
   d96e4:	4801      	ldr	r0, [pc, #4]	; (d96ec <_Z21__fetch_global_EEPROMv+0x28>)
   d96e6:	bd10      	pop	{r4, pc}
   d96e8:	2003e720 	.word	0x2003e720
   d96ec:	2003e724 	.word	0x2003e724

000d96f0 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d96f0:	4770      	bx	lr

000d96f2 <__tcf_1>:
   d96f2:	4770      	bx	lr

000d96f4 <_Z17acquireWireBufferv>:
{
   d96f4:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d96f6:	2300      	movs	r3, #0
   d96f8:	2520      	movs	r5, #32
   d96fa:	8043      	strh	r3, [r0, #2]
   d96fc:	2314      	movs	r3, #20
{
   d96fe:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d9700:	8003      	strh	r3, [r0, #0]
   d9702:	6085      	str	r5, [r0, #8]
   d9704:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d9706:	4906      	ldr	r1, [pc, #24]	; (d9720 <_Z17acquireWireBufferv+0x2c>)
   d9708:	4628      	mov	r0, r5
   d970a:	f000 f86f 	bl	d97ec <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d970e:	4904      	ldr	r1, [pc, #16]	; (d9720 <_Z17acquireWireBufferv+0x2c>)
	};
   d9710:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d9712:	4628      	mov	r0, r5
   d9714:	f000 f86a 	bl	d97ec <_ZnajRKSt9nothrow_t>
	};
   d9718:	60e0      	str	r0, [r4, #12]
}
   d971a:	4620      	mov	r0, r4
   d971c:	bd38      	pop	{r3, r4, r5, pc}
   d971e:	bf00      	nop
   d9720:	000db0fc 	.word	0x000db0fc

000d9724 <_Z18acquireWire1Bufferv>:
   d9724:	b538      	push	{r3, r4, r5, lr}
   d9726:	2300      	movs	r3, #0
   d9728:	2520      	movs	r5, #32
   d972a:	8043      	strh	r3, [r0, #2]
   d972c:	2314      	movs	r3, #20
   d972e:	4604      	mov	r4, r0
   d9730:	8003      	strh	r3, [r0, #0]
   d9732:	6085      	str	r5, [r0, #8]
   d9734:	6105      	str	r5, [r0, #16]
   d9736:	4906      	ldr	r1, [pc, #24]	; (d9750 <_Z18acquireWire1Bufferv+0x2c>)
   d9738:	4628      	mov	r0, r5
   d973a:	f000 f857 	bl	d97ec <_ZnajRKSt9nothrow_t>
   d973e:	4904      	ldr	r1, [pc, #16]	; (d9750 <_Z18acquireWire1Bufferv+0x2c>)
   d9740:	6060      	str	r0, [r4, #4]
   d9742:	4628      	mov	r0, r5
   d9744:	f000 f852 	bl	d97ec <_ZnajRKSt9nothrow_t>
   d9748:	60e0      	str	r0, [r4, #12]
   d974a:	4620      	mov	r0, r4
   d974c:	bd38      	pop	{r3, r4, r5, pc}
   d974e:	bf00      	nop
   d9750:	000db0fc 	.word	0x000db0fc

000d9754 <_Z19__fetch_global_Wirev>:
{
   d9754:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d9756:	4d0e      	ldr	r5, [pc, #56]	; (d9790 <_Z19__fetch_global_Wirev+0x3c>)
   d9758:	7829      	ldrb	r1, [r5, #0]
   d975a:	f3bf 8f5b 	dmb	ish
   d975e:	f011 0401 	ands.w	r4, r1, #1
{
   d9762:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d9764:	d111      	bne.n	d978a <_Z19__fetch_global_Wirev+0x36>
   d9766:	4628      	mov	r0, r5
   d9768:	f7fa fca6 	bl	d40b8 <__cxa_guard_acquire>
   d976c:	b168      	cbz	r0, d978a <_Z19__fetch_global_Wirev+0x36>
   d976e:	a801      	add	r0, sp, #4
   d9770:	f7ff ffc0 	bl	d96f4 <_Z17acquireWireBufferv>
   d9774:	aa01      	add	r2, sp, #4
   d9776:	4621      	mov	r1, r4
   d9778:	4806      	ldr	r0, [pc, #24]	; (d9794 <_Z19__fetch_global_Wirev+0x40>)
   d977a:	f7fd fc77 	bl	d706c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d977e:	4628      	mov	r0, r5
   d9780:	f7fa fc9f 	bl	d40c2 <__cxa_guard_release>
   d9784:	4804      	ldr	r0, [pc, #16]	; (d9798 <_Z19__fetch_global_Wirev+0x44>)
   d9786:	f000 fef1 	bl	da56c <atexit>
	return wire;
}
   d978a:	4802      	ldr	r0, [pc, #8]	; (d9794 <_Z19__fetch_global_Wirev+0x40>)
   d978c:	b007      	add	sp, #28
   d978e:	bd30      	pop	{r4, r5, pc}
   d9790:	2003e728 	.word	0x2003e728
   d9794:	2003e730 	.word	0x2003e730
   d9798:	000d96f1 	.word	0x000d96f1

000d979c <_Z20__fetch_global_Wire1v>:

#if Wiring_Wire1
TwoWire& __fetch_global_Wire1()
{
   d979c:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   d979e:	4c0e      	ldr	r4, [pc, #56]	; (d97d8 <_Z20__fetch_global_Wire1v+0x3c>)
   d97a0:	7823      	ldrb	r3, [r4, #0]
   d97a2:	f3bf 8f5b 	dmb	ish
   d97a6:	07db      	lsls	r3, r3, #31
{
   d97a8:	b086      	sub	sp, #24
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   d97aa:	d411      	bmi.n	d97d0 <_Z20__fetch_global_Wire1v+0x34>
   d97ac:	4620      	mov	r0, r4
   d97ae:	f7fa fc83 	bl	d40b8 <__cxa_guard_acquire>
   d97b2:	b168      	cbz	r0, d97d0 <_Z20__fetch_global_Wire1v+0x34>
   d97b4:	a801      	add	r0, sp, #4
   d97b6:	f7ff ffb5 	bl	d9724 <_Z18acquireWire1Bufferv>
   d97ba:	aa01      	add	r2, sp, #4
   d97bc:	2101      	movs	r1, #1
   d97be:	4807      	ldr	r0, [pc, #28]	; (d97dc <_Z20__fetch_global_Wire1v+0x40>)
   d97c0:	f7fd fc54 	bl	d706c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d97c4:	4620      	mov	r0, r4
   d97c6:	f7fa fc7c 	bl	d40c2 <__cxa_guard_release>
   d97ca:	4805      	ldr	r0, [pc, #20]	; (d97e0 <_Z20__fetch_global_Wire1v+0x44>)
   d97cc:	f000 fece 	bl	da56c <atexit>
	return wire;
}
   d97d0:	4802      	ldr	r0, [pc, #8]	; (d97dc <_Z20__fetch_global_Wire1v+0x40>)
   d97d2:	b006      	add	sp, #24
   d97d4:	bd10      	pop	{r4, pc}
   d97d6:	bf00      	nop
   d97d8:	2003e72c 	.word	0x2003e72c
   d97dc:	2003e744 	.word	0x2003e744
   d97e0:	000d96f3 	.word	0x000d96f3

000d97e4 <_ZdlPvj>:
   d97e4:	f7fa bc5b 	b.w	d409e <_ZdlPv>

000d97e8 <_ZnwjRKSt9nothrow_t>:
   d97e8:	f7fa bc55 	b.w	d4096 <_Znwj>

000d97ec <_ZnajRKSt9nothrow_t>:
   d97ec:	f7fa bc55 	b.w	d409a <_Znaj>

000d97f0 <_ZSt25__throw_bad_function_callv>:
   d97f0:	b508      	push	{r3, lr}
   d97f2:	f7fc ffa7 	bl	d6744 <abort>
	...

000d97f8 <__aeabi_drsub>:
   d97f8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d97fc:	e002      	b.n	d9804 <__adddf3>
   d97fe:	bf00      	nop

000d9800 <__aeabi_dsub>:
   d9800:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d9804 <__adddf3>:
   d9804:	b530      	push	{r4, r5, lr}
   d9806:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d980a:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d980e:	ea94 0f05 	teq	r4, r5
   d9812:	bf08      	it	eq
   d9814:	ea90 0f02 	teqeq	r0, r2
   d9818:	bf1f      	itttt	ne
   d981a:	ea54 0c00 	orrsne.w	ip, r4, r0
   d981e:	ea55 0c02 	orrsne.w	ip, r5, r2
   d9822:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d9826:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d982a:	f000 80e2 	beq.w	d99f2 <__adddf3+0x1ee>
   d982e:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d9832:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d9836:	bfb8      	it	lt
   d9838:	426d      	neglt	r5, r5
   d983a:	dd0c      	ble.n	d9856 <__adddf3+0x52>
   d983c:	442c      	add	r4, r5
   d983e:	ea80 0202 	eor.w	r2, r0, r2
   d9842:	ea81 0303 	eor.w	r3, r1, r3
   d9846:	ea82 0000 	eor.w	r0, r2, r0
   d984a:	ea83 0101 	eor.w	r1, r3, r1
   d984e:	ea80 0202 	eor.w	r2, r0, r2
   d9852:	ea81 0303 	eor.w	r3, r1, r3
   d9856:	2d36      	cmp	r5, #54	; 0x36
   d9858:	bf88      	it	hi
   d985a:	bd30      	pophi	{r4, r5, pc}
   d985c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d9860:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d9864:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d9868:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d986c:	d002      	beq.n	d9874 <__adddf3+0x70>
   d986e:	4240      	negs	r0, r0
   d9870:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d9874:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d9878:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d987c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d9880:	d002      	beq.n	d9888 <__adddf3+0x84>
   d9882:	4252      	negs	r2, r2
   d9884:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d9888:	ea94 0f05 	teq	r4, r5
   d988c:	f000 80a7 	beq.w	d99de <__adddf3+0x1da>
   d9890:	f1a4 0401 	sub.w	r4, r4, #1
   d9894:	f1d5 0e20 	rsbs	lr, r5, #32
   d9898:	db0d      	blt.n	d98b6 <__adddf3+0xb2>
   d989a:	fa02 fc0e 	lsl.w	ip, r2, lr
   d989e:	fa22 f205 	lsr.w	r2, r2, r5
   d98a2:	1880      	adds	r0, r0, r2
   d98a4:	f141 0100 	adc.w	r1, r1, #0
   d98a8:	fa03 f20e 	lsl.w	r2, r3, lr
   d98ac:	1880      	adds	r0, r0, r2
   d98ae:	fa43 f305 	asr.w	r3, r3, r5
   d98b2:	4159      	adcs	r1, r3
   d98b4:	e00e      	b.n	d98d4 <__adddf3+0xd0>
   d98b6:	f1a5 0520 	sub.w	r5, r5, #32
   d98ba:	f10e 0e20 	add.w	lr, lr, #32
   d98be:	2a01      	cmp	r2, #1
   d98c0:	fa03 fc0e 	lsl.w	ip, r3, lr
   d98c4:	bf28      	it	cs
   d98c6:	f04c 0c02 	orrcs.w	ip, ip, #2
   d98ca:	fa43 f305 	asr.w	r3, r3, r5
   d98ce:	18c0      	adds	r0, r0, r3
   d98d0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d98d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d98d8:	d507      	bpl.n	d98ea <__adddf3+0xe6>
   d98da:	f04f 0e00 	mov.w	lr, #0
   d98de:	f1dc 0c00 	rsbs	ip, ip, #0
   d98e2:	eb7e 0000 	sbcs.w	r0, lr, r0
   d98e6:	eb6e 0101 	sbc.w	r1, lr, r1
   d98ea:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d98ee:	d31b      	bcc.n	d9928 <__adddf3+0x124>
   d98f0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d98f4:	d30c      	bcc.n	d9910 <__adddf3+0x10c>
   d98f6:	0849      	lsrs	r1, r1, #1
   d98f8:	ea5f 0030 	movs.w	r0, r0, rrx
   d98fc:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d9900:	f104 0401 	add.w	r4, r4, #1
   d9904:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d9908:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d990c:	f080 809a 	bcs.w	d9a44 <__adddf3+0x240>
   d9910:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d9914:	bf08      	it	eq
   d9916:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d991a:	f150 0000 	adcs.w	r0, r0, #0
   d991e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d9922:	ea41 0105 	orr.w	r1, r1, r5
   d9926:	bd30      	pop	{r4, r5, pc}
   d9928:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d992c:	4140      	adcs	r0, r0
   d992e:	eb41 0101 	adc.w	r1, r1, r1
   d9932:	3c01      	subs	r4, #1
   d9934:	bf28      	it	cs
   d9936:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   d993a:	d2e9      	bcs.n	d9910 <__adddf3+0x10c>
   d993c:	f091 0f00 	teq	r1, #0
   d9940:	bf04      	itt	eq
   d9942:	4601      	moveq	r1, r0
   d9944:	2000      	moveq	r0, #0
   d9946:	fab1 f381 	clz	r3, r1
   d994a:	bf08      	it	eq
   d994c:	3320      	addeq	r3, #32
   d994e:	f1a3 030b 	sub.w	r3, r3, #11
   d9952:	f1b3 0220 	subs.w	r2, r3, #32
   d9956:	da0c      	bge.n	d9972 <__adddf3+0x16e>
   d9958:	320c      	adds	r2, #12
   d995a:	dd08      	ble.n	d996e <__adddf3+0x16a>
   d995c:	f102 0c14 	add.w	ip, r2, #20
   d9960:	f1c2 020c 	rsb	r2, r2, #12
   d9964:	fa01 f00c 	lsl.w	r0, r1, ip
   d9968:	fa21 f102 	lsr.w	r1, r1, r2
   d996c:	e00c      	b.n	d9988 <__adddf3+0x184>
   d996e:	f102 0214 	add.w	r2, r2, #20
   d9972:	bfd8      	it	le
   d9974:	f1c2 0c20 	rsble	ip, r2, #32
   d9978:	fa01 f102 	lsl.w	r1, r1, r2
   d997c:	fa20 fc0c 	lsr.w	ip, r0, ip
   d9980:	bfdc      	itt	le
   d9982:	ea41 010c 	orrle.w	r1, r1, ip
   d9986:	4090      	lslle	r0, r2
   d9988:	1ae4      	subs	r4, r4, r3
   d998a:	bfa2      	ittt	ge
   d998c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d9990:	4329      	orrge	r1, r5
   d9992:	bd30      	popge	{r4, r5, pc}
   d9994:	ea6f 0404 	mvn.w	r4, r4
   d9998:	3c1f      	subs	r4, #31
   d999a:	da1c      	bge.n	d99d6 <__adddf3+0x1d2>
   d999c:	340c      	adds	r4, #12
   d999e:	dc0e      	bgt.n	d99be <__adddf3+0x1ba>
   d99a0:	f104 0414 	add.w	r4, r4, #20
   d99a4:	f1c4 0220 	rsb	r2, r4, #32
   d99a8:	fa20 f004 	lsr.w	r0, r0, r4
   d99ac:	fa01 f302 	lsl.w	r3, r1, r2
   d99b0:	ea40 0003 	orr.w	r0, r0, r3
   d99b4:	fa21 f304 	lsr.w	r3, r1, r4
   d99b8:	ea45 0103 	orr.w	r1, r5, r3
   d99bc:	bd30      	pop	{r4, r5, pc}
   d99be:	f1c4 040c 	rsb	r4, r4, #12
   d99c2:	f1c4 0220 	rsb	r2, r4, #32
   d99c6:	fa20 f002 	lsr.w	r0, r0, r2
   d99ca:	fa01 f304 	lsl.w	r3, r1, r4
   d99ce:	ea40 0003 	orr.w	r0, r0, r3
   d99d2:	4629      	mov	r1, r5
   d99d4:	bd30      	pop	{r4, r5, pc}
   d99d6:	fa21 f004 	lsr.w	r0, r1, r4
   d99da:	4629      	mov	r1, r5
   d99dc:	bd30      	pop	{r4, r5, pc}
   d99de:	f094 0f00 	teq	r4, #0
   d99e2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d99e6:	bf06      	itte	eq
   d99e8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d99ec:	3401      	addeq	r4, #1
   d99ee:	3d01      	subne	r5, #1
   d99f0:	e74e      	b.n	d9890 <__adddf3+0x8c>
   d99f2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d99f6:	bf18      	it	ne
   d99f8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d99fc:	d029      	beq.n	d9a52 <__adddf3+0x24e>
   d99fe:	ea94 0f05 	teq	r4, r5
   d9a02:	bf08      	it	eq
   d9a04:	ea90 0f02 	teqeq	r0, r2
   d9a08:	d005      	beq.n	d9a16 <__adddf3+0x212>
   d9a0a:	ea54 0c00 	orrs.w	ip, r4, r0
   d9a0e:	bf04      	itt	eq
   d9a10:	4619      	moveq	r1, r3
   d9a12:	4610      	moveq	r0, r2
   d9a14:	bd30      	pop	{r4, r5, pc}
   d9a16:	ea91 0f03 	teq	r1, r3
   d9a1a:	bf1e      	ittt	ne
   d9a1c:	2100      	movne	r1, #0
   d9a1e:	2000      	movne	r0, #0
   d9a20:	bd30      	popne	{r4, r5, pc}
   d9a22:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d9a26:	d105      	bne.n	d9a34 <__adddf3+0x230>
   d9a28:	0040      	lsls	r0, r0, #1
   d9a2a:	4149      	adcs	r1, r1
   d9a2c:	bf28      	it	cs
   d9a2e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d9a32:	bd30      	pop	{r4, r5, pc}
   d9a34:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d9a38:	bf3c      	itt	cc
   d9a3a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d9a3e:	bd30      	popcc	{r4, r5, pc}
   d9a40:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d9a44:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d9a48:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d9a4c:	f04f 0000 	mov.w	r0, #0
   d9a50:	bd30      	pop	{r4, r5, pc}
   d9a52:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d9a56:	bf1a      	itte	ne
   d9a58:	4619      	movne	r1, r3
   d9a5a:	4610      	movne	r0, r2
   d9a5c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d9a60:	bf1c      	itt	ne
   d9a62:	460b      	movne	r3, r1
   d9a64:	4602      	movne	r2, r0
   d9a66:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d9a6a:	bf06      	itte	eq
   d9a6c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d9a70:	ea91 0f03 	teqeq	r1, r3
   d9a74:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d9a78:	bd30      	pop	{r4, r5, pc}
   d9a7a:	bf00      	nop

000d9a7c <__aeabi_ui2d>:
   d9a7c:	f090 0f00 	teq	r0, #0
   d9a80:	bf04      	itt	eq
   d9a82:	2100      	moveq	r1, #0
   d9a84:	4770      	bxeq	lr
   d9a86:	b530      	push	{r4, r5, lr}
   d9a88:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d9a8c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d9a90:	f04f 0500 	mov.w	r5, #0
   d9a94:	f04f 0100 	mov.w	r1, #0
   d9a98:	e750      	b.n	d993c <__adddf3+0x138>
   d9a9a:	bf00      	nop

000d9a9c <__aeabi_i2d>:
   d9a9c:	f090 0f00 	teq	r0, #0
   d9aa0:	bf04      	itt	eq
   d9aa2:	2100      	moveq	r1, #0
   d9aa4:	4770      	bxeq	lr
   d9aa6:	b530      	push	{r4, r5, lr}
   d9aa8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d9aac:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d9ab0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d9ab4:	bf48      	it	mi
   d9ab6:	4240      	negmi	r0, r0
   d9ab8:	f04f 0100 	mov.w	r1, #0
   d9abc:	e73e      	b.n	d993c <__adddf3+0x138>
   d9abe:	bf00      	nop

000d9ac0 <__aeabi_f2d>:
   d9ac0:	0042      	lsls	r2, r0, #1
   d9ac2:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d9ac6:	ea4f 0131 	mov.w	r1, r1, rrx
   d9aca:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d9ace:	bf1f      	itttt	ne
   d9ad0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d9ad4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d9ad8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d9adc:	4770      	bxne	lr
   d9ade:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   d9ae2:	bf08      	it	eq
   d9ae4:	4770      	bxeq	lr
   d9ae6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   d9aea:	bf04      	itt	eq
   d9aec:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   d9af0:	4770      	bxeq	lr
   d9af2:	b530      	push	{r4, r5, lr}
   d9af4:	f44f 7460 	mov.w	r4, #896	; 0x380
   d9af8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d9afc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d9b00:	e71c      	b.n	d993c <__adddf3+0x138>
   d9b02:	bf00      	nop

000d9b04 <__aeabi_ul2d>:
   d9b04:	ea50 0201 	orrs.w	r2, r0, r1
   d9b08:	bf08      	it	eq
   d9b0a:	4770      	bxeq	lr
   d9b0c:	b530      	push	{r4, r5, lr}
   d9b0e:	f04f 0500 	mov.w	r5, #0
   d9b12:	e00a      	b.n	d9b2a <__aeabi_l2d+0x16>

000d9b14 <__aeabi_l2d>:
   d9b14:	ea50 0201 	orrs.w	r2, r0, r1
   d9b18:	bf08      	it	eq
   d9b1a:	4770      	bxeq	lr
   d9b1c:	b530      	push	{r4, r5, lr}
   d9b1e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d9b22:	d502      	bpl.n	d9b2a <__aeabi_l2d+0x16>
   d9b24:	4240      	negs	r0, r0
   d9b26:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d9b2a:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d9b2e:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d9b32:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d9b36:	f43f aed8 	beq.w	d98ea <__adddf3+0xe6>
   d9b3a:	f04f 0203 	mov.w	r2, #3
   d9b3e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d9b42:	bf18      	it	ne
   d9b44:	3203      	addne	r2, #3
   d9b46:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d9b4a:	bf18      	it	ne
   d9b4c:	3203      	addne	r2, #3
   d9b4e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d9b52:	f1c2 0320 	rsb	r3, r2, #32
   d9b56:	fa00 fc03 	lsl.w	ip, r0, r3
   d9b5a:	fa20 f002 	lsr.w	r0, r0, r2
   d9b5e:	fa01 fe03 	lsl.w	lr, r1, r3
   d9b62:	ea40 000e 	orr.w	r0, r0, lr
   d9b66:	fa21 f102 	lsr.w	r1, r1, r2
   d9b6a:	4414      	add	r4, r2
   d9b6c:	e6bd      	b.n	d98ea <__adddf3+0xe6>
   d9b6e:	bf00      	nop

000d9b70 <__aeabi_dmul>:
   d9b70:	b570      	push	{r4, r5, r6, lr}
   d9b72:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d9b76:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d9b7a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d9b7e:	bf1d      	ittte	ne
   d9b80:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d9b84:	ea94 0f0c 	teqne	r4, ip
   d9b88:	ea95 0f0c 	teqne	r5, ip
   d9b8c:	f000 f8de 	bleq	d9d4c <__aeabi_dmul+0x1dc>
   d9b90:	442c      	add	r4, r5
   d9b92:	ea81 0603 	eor.w	r6, r1, r3
   d9b96:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d9b9a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d9b9e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d9ba2:	bf18      	it	ne
   d9ba4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d9ba8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d9bac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d9bb0:	d038      	beq.n	d9c24 <__aeabi_dmul+0xb4>
   d9bb2:	fba0 ce02 	umull	ip, lr, r0, r2
   d9bb6:	f04f 0500 	mov.w	r5, #0
   d9bba:	fbe1 e502 	umlal	lr, r5, r1, r2
   d9bbe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d9bc2:	fbe0 e503 	umlal	lr, r5, r0, r3
   d9bc6:	f04f 0600 	mov.w	r6, #0
   d9bca:	fbe1 5603 	umlal	r5, r6, r1, r3
   d9bce:	f09c 0f00 	teq	ip, #0
   d9bd2:	bf18      	it	ne
   d9bd4:	f04e 0e01 	orrne.w	lr, lr, #1
   d9bd8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d9bdc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d9be0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d9be4:	d204      	bcs.n	d9bf0 <__aeabi_dmul+0x80>
   d9be6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d9bea:	416d      	adcs	r5, r5
   d9bec:	eb46 0606 	adc.w	r6, r6, r6
   d9bf0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d9bf4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d9bf8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d9bfc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d9c00:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d9c04:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d9c08:	bf88      	it	hi
   d9c0a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d9c0e:	d81e      	bhi.n	d9c4e <__aeabi_dmul+0xde>
   d9c10:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d9c14:	bf08      	it	eq
   d9c16:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d9c1a:	f150 0000 	adcs.w	r0, r0, #0
   d9c1e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d9c22:	bd70      	pop	{r4, r5, r6, pc}
   d9c24:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d9c28:	ea46 0101 	orr.w	r1, r6, r1
   d9c2c:	ea40 0002 	orr.w	r0, r0, r2
   d9c30:	ea81 0103 	eor.w	r1, r1, r3
   d9c34:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d9c38:	bfc2      	ittt	gt
   d9c3a:	ebd4 050c 	rsbsgt	r5, r4, ip
   d9c3e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d9c42:	bd70      	popgt	{r4, r5, r6, pc}
   d9c44:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d9c48:	f04f 0e00 	mov.w	lr, #0
   d9c4c:	3c01      	subs	r4, #1
   d9c4e:	f300 80ab 	bgt.w	d9da8 <__aeabi_dmul+0x238>
   d9c52:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d9c56:	bfde      	ittt	le
   d9c58:	2000      	movle	r0, #0
   d9c5a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d9c5e:	bd70      	pople	{r4, r5, r6, pc}
   d9c60:	f1c4 0400 	rsb	r4, r4, #0
   d9c64:	3c20      	subs	r4, #32
   d9c66:	da35      	bge.n	d9cd4 <__aeabi_dmul+0x164>
   d9c68:	340c      	adds	r4, #12
   d9c6a:	dc1b      	bgt.n	d9ca4 <__aeabi_dmul+0x134>
   d9c6c:	f104 0414 	add.w	r4, r4, #20
   d9c70:	f1c4 0520 	rsb	r5, r4, #32
   d9c74:	fa00 f305 	lsl.w	r3, r0, r5
   d9c78:	fa20 f004 	lsr.w	r0, r0, r4
   d9c7c:	fa01 f205 	lsl.w	r2, r1, r5
   d9c80:	ea40 0002 	orr.w	r0, r0, r2
   d9c84:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d9c88:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d9c8c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d9c90:	fa21 f604 	lsr.w	r6, r1, r4
   d9c94:	eb42 0106 	adc.w	r1, r2, r6
   d9c98:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d9c9c:	bf08      	it	eq
   d9c9e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d9ca2:	bd70      	pop	{r4, r5, r6, pc}
   d9ca4:	f1c4 040c 	rsb	r4, r4, #12
   d9ca8:	f1c4 0520 	rsb	r5, r4, #32
   d9cac:	fa00 f304 	lsl.w	r3, r0, r4
   d9cb0:	fa20 f005 	lsr.w	r0, r0, r5
   d9cb4:	fa01 f204 	lsl.w	r2, r1, r4
   d9cb8:	ea40 0002 	orr.w	r0, r0, r2
   d9cbc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d9cc0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d9cc4:	f141 0100 	adc.w	r1, r1, #0
   d9cc8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d9ccc:	bf08      	it	eq
   d9cce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d9cd2:	bd70      	pop	{r4, r5, r6, pc}
   d9cd4:	f1c4 0520 	rsb	r5, r4, #32
   d9cd8:	fa00 f205 	lsl.w	r2, r0, r5
   d9cdc:	ea4e 0e02 	orr.w	lr, lr, r2
   d9ce0:	fa20 f304 	lsr.w	r3, r0, r4
   d9ce4:	fa01 f205 	lsl.w	r2, r1, r5
   d9ce8:	ea43 0302 	orr.w	r3, r3, r2
   d9cec:	fa21 f004 	lsr.w	r0, r1, r4
   d9cf0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d9cf4:	fa21 f204 	lsr.w	r2, r1, r4
   d9cf8:	ea20 0002 	bic.w	r0, r0, r2
   d9cfc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d9d00:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d9d04:	bf08      	it	eq
   d9d06:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d9d0a:	bd70      	pop	{r4, r5, r6, pc}
   d9d0c:	f094 0f00 	teq	r4, #0
   d9d10:	d10f      	bne.n	d9d32 <__aeabi_dmul+0x1c2>
   d9d12:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d9d16:	0040      	lsls	r0, r0, #1
   d9d18:	eb41 0101 	adc.w	r1, r1, r1
   d9d1c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d9d20:	bf08      	it	eq
   d9d22:	3c01      	subeq	r4, #1
   d9d24:	d0f7      	beq.n	d9d16 <__aeabi_dmul+0x1a6>
   d9d26:	ea41 0106 	orr.w	r1, r1, r6
   d9d2a:	f095 0f00 	teq	r5, #0
   d9d2e:	bf18      	it	ne
   d9d30:	4770      	bxne	lr
   d9d32:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d9d36:	0052      	lsls	r2, r2, #1
   d9d38:	eb43 0303 	adc.w	r3, r3, r3
   d9d3c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d9d40:	bf08      	it	eq
   d9d42:	3d01      	subeq	r5, #1
   d9d44:	d0f7      	beq.n	d9d36 <__aeabi_dmul+0x1c6>
   d9d46:	ea43 0306 	orr.w	r3, r3, r6
   d9d4a:	4770      	bx	lr
   d9d4c:	ea94 0f0c 	teq	r4, ip
   d9d50:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d9d54:	bf18      	it	ne
   d9d56:	ea95 0f0c 	teqne	r5, ip
   d9d5a:	d00c      	beq.n	d9d76 <__aeabi_dmul+0x206>
   d9d5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d9d60:	bf18      	it	ne
   d9d62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d9d66:	d1d1      	bne.n	d9d0c <__aeabi_dmul+0x19c>
   d9d68:	ea81 0103 	eor.w	r1, r1, r3
   d9d6c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d9d70:	f04f 0000 	mov.w	r0, #0
   d9d74:	bd70      	pop	{r4, r5, r6, pc}
   d9d76:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d9d7a:	bf06      	itte	eq
   d9d7c:	4610      	moveq	r0, r2
   d9d7e:	4619      	moveq	r1, r3
   d9d80:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d9d84:	d019      	beq.n	d9dba <__aeabi_dmul+0x24a>
   d9d86:	ea94 0f0c 	teq	r4, ip
   d9d8a:	d102      	bne.n	d9d92 <__aeabi_dmul+0x222>
   d9d8c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d9d90:	d113      	bne.n	d9dba <__aeabi_dmul+0x24a>
   d9d92:	ea95 0f0c 	teq	r5, ip
   d9d96:	d105      	bne.n	d9da4 <__aeabi_dmul+0x234>
   d9d98:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d9d9c:	bf1c      	itt	ne
   d9d9e:	4610      	movne	r0, r2
   d9da0:	4619      	movne	r1, r3
   d9da2:	d10a      	bne.n	d9dba <__aeabi_dmul+0x24a>
   d9da4:	ea81 0103 	eor.w	r1, r1, r3
   d9da8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d9dac:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d9db0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d9db4:	f04f 0000 	mov.w	r0, #0
   d9db8:	bd70      	pop	{r4, r5, r6, pc}
   d9dba:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d9dbe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d9dc2:	bd70      	pop	{r4, r5, r6, pc}

000d9dc4 <__aeabi_ddiv>:
   d9dc4:	b570      	push	{r4, r5, r6, lr}
   d9dc6:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d9dca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d9dce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d9dd2:	bf1d      	ittte	ne
   d9dd4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d9dd8:	ea94 0f0c 	teqne	r4, ip
   d9ddc:	ea95 0f0c 	teqne	r5, ip
   d9de0:	f000 f8a7 	bleq	d9f32 <__aeabi_ddiv+0x16e>
   d9de4:	eba4 0405 	sub.w	r4, r4, r5
   d9de8:	ea81 0e03 	eor.w	lr, r1, r3
   d9dec:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d9df0:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d9df4:	f000 8088 	beq.w	d9f08 <__aeabi_ddiv+0x144>
   d9df8:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d9dfc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d9e00:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d9e04:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d9e08:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d9e0c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d9e10:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d9e14:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d9e18:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d9e1c:	429d      	cmp	r5, r3
   d9e1e:	bf08      	it	eq
   d9e20:	4296      	cmpeq	r6, r2
   d9e22:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d9e26:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d9e2a:	d202      	bcs.n	d9e32 <__aeabi_ddiv+0x6e>
   d9e2c:	085b      	lsrs	r3, r3, #1
   d9e2e:	ea4f 0232 	mov.w	r2, r2, rrx
   d9e32:	1ab6      	subs	r6, r6, r2
   d9e34:	eb65 0503 	sbc.w	r5, r5, r3
   d9e38:	085b      	lsrs	r3, r3, #1
   d9e3a:	ea4f 0232 	mov.w	r2, r2, rrx
   d9e3e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d9e42:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d9e46:	ebb6 0e02 	subs.w	lr, r6, r2
   d9e4a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d9e4e:	bf22      	ittt	cs
   d9e50:	1ab6      	subcs	r6, r6, r2
   d9e52:	4675      	movcs	r5, lr
   d9e54:	ea40 000c 	orrcs.w	r0, r0, ip
   d9e58:	085b      	lsrs	r3, r3, #1
   d9e5a:	ea4f 0232 	mov.w	r2, r2, rrx
   d9e5e:	ebb6 0e02 	subs.w	lr, r6, r2
   d9e62:	eb75 0e03 	sbcs.w	lr, r5, r3
   d9e66:	bf22      	ittt	cs
   d9e68:	1ab6      	subcs	r6, r6, r2
   d9e6a:	4675      	movcs	r5, lr
   d9e6c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d9e70:	085b      	lsrs	r3, r3, #1
   d9e72:	ea4f 0232 	mov.w	r2, r2, rrx
   d9e76:	ebb6 0e02 	subs.w	lr, r6, r2
   d9e7a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d9e7e:	bf22      	ittt	cs
   d9e80:	1ab6      	subcs	r6, r6, r2
   d9e82:	4675      	movcs	r5, lr
   d9e84:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d9e88:	085b      	lsrs	r3, r3, #1
   d9e8a:	ea4f 0232 	mov.w	r2, r2, rrx
   d9e8e:	ebb6 0e02 	subs.w	lr, r6, r2
   d9e92:	eb75 0e03 	sbcs.w	lr, r5, r3
   d9e96:	bf22      	ittt	cs
   d9e98:	1ab6      	subcs	r6, r6, r2
   d9e9a:	4675      	movcs	r5, lr
   d9e9c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d9ea0:	ea55 0e06 	orrs.w	lr, r5, r6
   d9ea4:	d018      	beq.n	d9ed8 <__aeabi_ddiv+0x114>
   d9ea6:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d9eaa:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d9eae:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d9eb2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d9eb6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d9eba:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d9ebe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d9ec2:	d1c0      	bne.n	d9e46 <__aeabi_ddiv+0x82>
   d9ec4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d9ec8:	d10b      	bne.n	d9ee2 <__aeabi_ddiv+0x11e>
   d9eca:	ea41 0100 	orr.w	r1, r1, r0
   d9ece:	f04f 0000 	mov.w	r0, #0
   d9ed2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d9ed6:	e7b6      	b.n	d9e46 <__aeabi_ddiv+0x82>
   d9ed8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d9edc:	bf04      	itt	eq
   d9ede:	4301      	orreq	r1, r0
   d9ee0:	2000      	moveq	r0, #0
   d9ee2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d9ee6:	bf88      	it	hi
   d9ee8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d9eec:	f63f aeaf 	bhi.w	d9c4e <__aeabi_dmul+0xde>
   d9ef0:	ebb5 0c03 	subs.w	ip, r5, r3
   d9ef4:	bf04      	itt	eq
   d9ef6:	ebb6 0c02 	subseq.w	ip, r6, r2
   d9efa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d9efe:	f150 0000 	adcs.w	r0, r0, #0
   d9f02:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d9f06:	bd70      	pop	{r4, r5, r6, pc}
   d9f08:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d9f0c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d9f10:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d9f14:	bfc2      	ittt	gt
   d9f16:	ebd4 050c 	rsbsgt	r5, r4, ip
   d9f1a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d9f1e:	bd70      	popgt	{r4, r5, r6, pc}
   d9f20:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d9f24:	f04f 0e00 	mov.w	lr, #0
   d9f28:	3c01      	subs	r4, #1
   d9f2a:	e690      	b.n	d9c4e <__aeabi_dmul+0xde>
   d9f2c:	ea45 0e06 	orr.w	lr, r5, r6
   d9f30:	e68d      	b.n	d9c4e <__aeabi_dmul+0xde>
   d9f32:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d9f36:	ea94 0f0c 	teq	r4, ip
   d9f3a:	bf08      	it	eq
   d9f3c:	ea95 0f0c 	teqeq	r5, ip
   d9f40:	f43f af3b 	beq.w	d9dba <__aeabi_dmul+0x24a>
   d9f44:	ea94 0f0c 	teq	r4, ip
   d9f48:	d10a      	bne.n	d9f60 <__aeabi_ddiv+0x19c>
   d9f4a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d9f4e:	f47f af34 	bne.w	d9dba <__aeabi_dmul+0x24a>
   d9f52:	ea95 0f0c 	teq	r5, ip
   d9f56:	f47f af25 	bne.w	d9da4 <__aeabi_dmul+0x234>
   d9f5a:	4610      	mov	r0, r2
   d9f5c:	4619      	mov	r1, r3
   d9f5e:	e72c      	b.n	d9dba <__aeabi_dmul+0x24a>
   d9f60:	ea95 0f0c 	teq	r5, ip
   d9f64:	d106      	bne.n	d9f74 <__aeabi_ddiv+0x1b0>
   d9f66:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d9f6a:	f43f aefd 	beq.w	d9d68 <__aeabi_dmul+0x1f8>
   d9f6e:	4610      	mov	r0, r2
   d9f70:	4619      	mov	r1, r3
   d9f72:	e722      	b.n	d9dba <__aeabi_dmul+0x24a>
   d9f74:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d9f78:	bf18      	it	ne
   d9f7a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d9f7e:	f47f aec5 	bne.w	d9d0c <__aeabi_dmul+0x19c>
   d9f82:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d9f86:	f47f af0d 	bne.w	d9da4 <__aeabi_dmul+0x234>
   d9f8a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d9f8e:	f47f aeeb 	bne.w	d9d68 <__aeabi_dmul+0x1f8>
   d9f92:	e712      	b.n	d9dba <__aeabi_dmul+0x24a>

000d9f94 <__gedf2>:
   d9f94:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   d9f98:	e006      	b.n	d9fa8 <__cmpdf2+0x4>
   d9f9a:	bf00      	nop

000d9f9c <__ledf2>:
   d9f9c:	f04f 0c01 	mov.w	ip, #1
   d9fa0:	e002      	b.n	d9fa8 <__cmpdf2+0x4>
   d9fa2:	bf00      	nop

000d9fa4 <__cmpdf2>:
   d9fa4:	f04f 0c01 	mov.w	ip, #1
   d9fa8:	f84d cd04 	str.w	ip, [sp, #-4]!
   d9fac:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d9fb0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d9fb4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d9fb8:	bf18      	it	ne
   d9fba:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d9fbe:	d01b      	beq.n	d9ff8 <__cmpdf2+0x54>
   d9fc0:	b001      	add	sp, #4
   d9fc2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d9fc6:	bf0c      	ite	eq
   d9fc8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d9fcc:	ea91 0f03 	teqne	r1, r3
   d9fd0:	bf02      	ittt	eq
   d9fd2:	ea90 0f02 	teqeq	r0, r2
   d9fd6:	2000      	moveq	r0, #0
   d9fd8:	4770      	bxeq	lr
   d9fda:	f110 0f00 	cmn.w	r0, #0
   d9fde:	ea91 0f03 	teq	r1, r3
   d9fe2:	bf58      	it	pl
   d9fe4:	4299      	cmppl	r1, r3
   d9fe6:	bf08      	it	eq
   d9fe8:	4290      	cmpeq	r0, r2
   d9fea:	bf2c      	ite	cs
   d9fec:	17d8      	asrcs	r0, r3, #31
   d9fee:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d9ff2:	f040 0001 	orr.w	r0, r0, #1
   d9ff6:	4770      	bx	lr
   d9ff8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d9ffc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   da000:	d102      	bne.n	da008 <__cmpdf2+0x64>
   da002:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   da006:	d107      	bne.n	da018 <__cmpdf2+0x74>
   da008:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   da00c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   da010:	d1d6      	bne.n	d9fc0 <__cmpdf2+0x1c>
   da012:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   da016:	d0d3      	beq.n	d9fc0 <__cmpdf2+0x1c>
   da018:	f85d 0b04 	ldr.w	r0, [sp], #4
   da01c:	4770      	bx	lr
   da01e:	bf00      	nop

000da020 <__aeabi_cdrcmple>:
   da020:	4684      	mov	ip, r0
   da022:	4610      	mov	r0, r2
   da024:	4662      	mov	r2, ip
   da026:	468c      	mov	ip, r1
   da028:	4619      	mov	r1, r3
   da02a:	4663      	mov	r3, ip
   da02c:	e000      	b.n	da030 <__aeabi_cdcmpeq>
   da02e:	bf00      	nop

000da030 <__aeabi_cdcmpeq>:
   da030:	b501      	push	{r0, lr}
   da032:	f7ff ffb7 	bl	d9fa4 <__cmpdf2>
   da036:	2800      	cmp	r0, #0
   da038:	bf48      	it	mi
   da03a:	f110 0f00 	cmnmi.w	r0, #0
   da03e:	bd01      	pop	{r0, pc}

000da040 <__aeabi_dcmpeq>:
   da040:	f84d ed08 	str.w	lr, [sp, #-8]!
   da044:	f7ff fff4 	bl	da030 <__aeabi_cdcmpeq>
   da048:	bf0c      	ite	eq
   da04a:	2001      	moveq	r0, #1
   da04c:	2000      	movne	r0, #0
   da04e:	f85d fb08 	ldr.w	pc, [sp], #8
   da052:	bf00      	nop

000da054 <__aeabi_dcmplt>:
   da054:	f84d ed08 	str.w	lr, [sp, #-8]!
   da058:	f7ff ffea 	bl	da030 <__aeabi_cdcmpeq>
   da05c:	bf34      	ite	cc
   da05e:	2001      	movcc	r0, #1
   da060:	2000      	movcs	r0, #0
   da062:	f85d fb08 	ldr.w	pc, [sp], #8
   da066:	bf00      	nop

000da068 <__aeabi_dcmple>:
   da068:	f84d ed08 	str.w	lr, [sp, #-8]!
   da06c:	f7ff ffe0 	bl	da030 <__aeabi_cdcmpeq>
   da070:	bf94      	ite	ls
   da072:	2001      	movls	r0, #1
   da074:	2000      	movhi	r0, #0
   da076:	f85d fb08 	ldr.w	pc, [sp], #8
   da07a:	bf00      	nop

000da07c <__aeabi_dcmpge>:
   da07c:	f84d ed08 	str.w	lr, [sp, #-8]!
   da080:	f7ff ffce 	bl	da020 <__aeabi_cdrcmple>
   da084:	bf94      	ite	ls
   da086:	2001      	movls	r0, #1
   da088:	2000      	movhi	r0, #0
   da08a:	f85d fb08 	ldr.w	pc, [sp], #8
   da08e:	bf00      	nop

000da090 <__aeabi_dcmpgt>:
   da090:	f84d ed08 	str.w	lr, [sp, #-8]!
   da094:	f7ff ffc4 	bl	da020 <__aeabi_cdrcmple>
   da098:	bf34      	ite	cc
   da09a:	2001      	movcc	r0, #1
   da09c:	2000      	movcs	r0, #0
   da09e:	f85d fb08 	ldr.w	pc, [sp], #8
   da0a2:	bf00      	nop

000da0a4 <__aeabi_d2uiz>:
   da0a4:	004a      	lsls	r2, r1, #1
   da0a6:	d211      	bcs.n	da0cc <__aeabi_d2uiz+0x28>
   da0a8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   da0ac:	d211      	bcs.n	da0d2 <__aeabi_d2uiz+0x2e>
   da0ae:	d50d      	bpl.n	da0cc <__aeabi_d2uiz+0x28>
   da0b0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   da0b4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   da0b8:	d40e      	bmi.n	da0d8 <__aeabi_d2uiz+0x34>
   da0ba:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   da0be:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   da0c2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   da0c6:	fa23 f002 	lsr.w	r0, r3, r2
   da0ca:	4770      	bx	lr
   da0cc:	f04f 0000 	mov.w	r0, #0
   da0d0:	4770      	bx	lr
   da0d2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   da0d6:	d102      	bne.n	da0de <__aeabi_d2uiz+0x3a>
   da0d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   da0dc:	4770      	bx	lr
   da0de:	f04f 0000 	mov.w	r0, #0
   da0e2:	4770      	bx	lr

000da0e4 <__aeabi_d2f>:
   da0e4:	ea4f 0241 	mov.w	r2, r1, lsl #1
   da0e8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   da0ec:	bf24      	itt	cs
   da0ee:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   da0f2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   da0f6:	d90d      	bls.n	da114 <__aeabi_d2f+0x30>
   da0f8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   da0fc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   da100:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   da104:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   da108:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   da10c:	bf08      	it	eq
   da10e:	f020 0001 	biceq.w	r0, r0, #1
   da112:	4770      	bx	lr
   da114:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   da118:	d121      	bne.n	da15e <__aeabi_d2f+0x7a>
   da11a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   da11e:	bfbc      	itt	lt
   da120:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   da124:	4770      	bxlt	lr
   da126:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   da12a:	ea4f 5252 	mov.w	r2, r2, lsr #21
   da12e:	f1c2 0218 	rsb	r2, r2, #24
   da132:	f1c2 0c20 	rsb	ip, r2, #32
   da136:	fa10 f30c 	lsls.w	r3, r0, ip
   da13a:	fa20 f002 	lsr.w	r0, r0, r2
   da13e:	bf18      	it	ne
   da140:	f040 0001 	orrne.w	r0, r0, #1
   da144:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   da148:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   da14c:	fa03 fc0c 	lsl.w	ip, r3, ip
   da150:	ea40 000c 	orr.w	r0, r0, ip
   da154:	fa23 f302 	lsr.w	r3, r3, r2
   da158:	ea4f 0343 	mov.w	r3, r3, lsl #1
   da15c:	e7cc      	b.n	da0f8 <__aeabi_d2f+0x14>
   da15e:	ea7f 5362 	mvns.w	r3, r2, asr #21
   da162:	d107      	bne.n	da174 <__aeabi_d2f+0x90>
   da164:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   da168:	bf1e      	ittt	ne
   da16a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   da16e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   da172:	4770      	bxne	lr
   da174:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   da178:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   da17c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   da180:	4770      	bx	lr
   da182:	bf00      	nop

000da184 <__aeabi_uldivmod>:
   da184:	b953      	cbnz	r3, da19c <__aeabi_uldivmod+0x18>
   da186:	b94a      	cbnz	r2, da19c <__aeabi_uldivmod+0x18>
   da188:	2900      	cmp	r1, #0
   da18a:	bf08      	it	eq
   da18c:	2800      	cmpeq	r0, #0
   da18e:	bf1c      	itt	ne
   da190:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   da194:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   da198:	f000 b9c0 	b.w	da51c <__aeabi_idiv0>
   da19c:	f1ad 0c08 	sub.w	ip, sp, #8
   da1a0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   da1a4:	f000 f858 	bl	da258 <__udivmoddi4>
   da1a8:	f8dd e004 	ldr.w	lr, [sp, #4]
   da1ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   da1b0:	b004      	add	sp, #16
   da1b2:	4770      	bx	lr

000da1b4 <__aeabi_f2lz>:
   da1b4:	ee07 0a90 	vmov	s15, r0
   da1b8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   da1bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   da1c0:	d401      	bmi.n	da1c6 <__aeabi_f2lz+0x12>
   da1c2:	f000 b80b 	b.w	da1dc <__aeabi_f2ulz>
   da1c6:	eef1 7a67 	vneg.f32	s15, s15
   da1ca:	b508      	push	{r3, lr}
   da1cc:	ee17 0a90 	vmov	r0, s15
   da1d0:	f000 f804 	bl	da1dc <__aeabi_f2ulz>
   da1d4:	4240      	negs	r0, r0
   da1d6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   da1da:	bd08      	pop	{r3, pc}

000da1dc <__aeabi_f2ulz>:
   da1dc:	b5d0      	push	{r4, r6, r7, lr}
   da1de:	f7ff fc6f 	bl	d9ac0 <__aeabi_f2d>
   da1e2:	4b0c      	ldr	r3, [pc, #48]	; (da214 <__aeabi_f2ulz+0x38>)
   da1e4:	2200      	movs	r2, #0
   da1e6:	4606      	mov	r6, r0
   da1e8:	460f      	mov	r7, r1
   da1ea:	f7ff fcc1 	bl	d9b70 <__aeabi_dmul>
   da1ee:	f7ff ff59 	bl	da0a4 <__aeabi_d2uiz>
   da1f2:	4604      	mov	r4, r0
   da1f4:	f7ff fc42 	bl	d9a7c <__aeabi_ui2d>
   da1f8:	4b07      	ldr	r3, [pc, #28]	; (da218 <__aeabi_f2ulz+0x3c>)
   da1fa:	2200      	movs	r2, #0
   da1fc:	f7ff fcb8 	bl	d9b70 <__aeabi_dmul>
   da200:	4602      	mov	r2, r0
   da202:	460b      	mov	r3, r1
   da204:	4630      	mov	r0, r6
   da206:	4639      	mov	r1, r7
   da208:	f7ff fafa 	bl	d9800 <__aeabi_dsub>
   da20c:	f7ff ff4a 	bl	da0a4 <__aeabi_d2uiz>
   da210:	4621      	mov	r1, r4
   da212:	bdd0      	pop	{r4, r6, r7, pc}
   da214:	3df00000 	.word	0x3df00000
   da218:	41f00000 	.word	0x41f00000

000da21c <__aeabi_d2ulz>:
   da21c:	b5d0      	push	{r4, r6, r7, lr}
   da21e:	4b0c      	ldr	r3, [pc, #48]	; (da250 <__aeabi_d2ulz+0x34>)
   da220:	2200      	movs	r2, #0
   da222:	4606      	mov	r6, r0
   da224:	460f      	mov	r7, r1
   da226:	f7ff fca3 	bl	d9b70 <__aeabi_dmul>
   da22a:	f7ff ff3b 	bl	da0a4 <__aeabi_d2uiz>
   da22e:	4604      	mov	r4, r0
   da230:	f7ff fc24 	bl	d9a7c <__aeabi_ui2d>
   da234:	4b07      	ldr	r3, [pc, #28]	; (da254 <__aeabi_d2ulz+0x38>)
   da236:	2200      	movs	r2, #0
   da238:	f7ff fc9a 	bl	d9b70 <__aeabi_dmul>
   da23c:	4602      	mov	r2, r0
   da23e:	460b      	mov	r3, r1
   da240:	4630      	mov	r0, r6
   da242:	4639      	mov	r1, r7
   da244:	f7ff fadc 	bl	d9800 <__aeabi_dsub>
   da248:	f7ff ff2c 	bl	da0a4 <__aeabi_d2uiz>
   da24c:	4621      	mov	r1, r4
   da24e:	bdd0      	pop	{r4, r6, r7, pc}
   da250:	3df00000 	.word	0x3df00000
   da254:	41f00000 	.word	0x41f00000

000da258 <__udivmoddi4>:
   da258:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   da25c:	9d08      	ldr	r5, [sp, #32]
   da25e:	4604      	mov	r4, r0
   da260:	468c      	mov	ip, r1
   da262:	2b00      	cmp	r3, #0
   da264:	f040 8083 	bne.w	da36e <__udivmoddi4+0x116>
   da268:	428a      	cmp	r2, r1
   da26a:	4617      	mov	r7, r2
   da26c:	d947      	bls.n	da2fe <__udivmoddi4+0xa6>
   da26e:	fab2 f282 	clz	r2, r2
   da272:	b142      	cbz	r2, da286 <__udivmoddi4+0x2e>
   da274:	f1c2 0020 	rsb	r0, r2, #32
   da278:	fa24 f000 	lsr.w	r0, r4, r0
   da27c:	4091      	lsls	r1, r2
   da27e:	4097      	lsls	r7, r2
   da280:	ea40 0c01 	orr.w	ip, r0, r1
   da284:	4094      	lsls	r4, r2
   da286:	ea4f 4817 	mov.w	r8, r7, lsr #16
   da28a:	0c23      	lsrs	r3, r4, #16
   da28c:	fbbc f6f8 	udiv	r6, ip, r8
   da290:	fa1f fe87 	uxth.w	lr, r7
   da294:	fb08 c116 	mls	r1, r8, r6, ip
   da298:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   da29c:	fb06 f10e 	mul.w	r1, r6, lr
   da2a0:	4299      	cmp	r1, r3
   da2a2:	d909      	bls.n	da2b8 <__udivmoddi4+0x60>
   da2a4:	18fb      	adds	r3, r7, r3
   da2a6:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
   da2aa:	f080 8119 	bcs.w	da4e0 <__udivmoddi4+0x288>
   da2ae:	4299      	cmp	r1, r3
   da2b0:	f240 8116 	bls.w	da4e0 <__udivmoddi4+0x288>
   da2b4:	3e02      	subs	r6, #2
   da2b6:	443b      	add	r3, r7
   da2b8:	1a5b      	subs	r3, r3, r1
   da2ba:	b2a4      	uxth	r4, r4
   da2bc:	fbb3 f0f8 	udiv	r0, r3, r8
   da2c0:	fb08 3310 	mls	r3, r8, r0, r3
   da2c4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   da2c8:	fb00 fe0e 	mul.w	lr, r0, lr
   da2cc:	45a6      	cmp	lr, r4
   da2ce:	d909      	bls.n	da2e4 <__udivmoddi4+0x8c>
   da2d0:	193c      	adds	r4, r7, r4
   da2d2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   da2d6:	f080 8105 	bcs.w	da4e4 <__udivmoddi4+0x28c>
   da2da:	45a6      	cmp	lr, r4
   da2dc:	f240 8102 	bls.w	da4e4 <__udivmoddi4+0x28c>
   da2e0:	3802      	subs	r0, #2
   da2e2:	443c      	add	r4, r7
   da2e4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
   da2e8:	eba4 040e 	sub.w	r4, r4, lr
   da2ec:	2600      	movs	r6, #0
   da2ee:	b11d      	cbz	r5, da2f8 <__udivmoddi4+0xa0>
   da2f0:	40d4      	lsrs	r4, r2
   da2f2:	2300      	movs	r3, #0
   da2f4:	e9c5 4300 	strd	r4, r3, [r5]
   da2f8:	4631      	mov	r1, r6
   da2fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   da2fe:	b902      	cbnz	r2, da302 <__udivmoddi4+0xaa>
   da300:	deff      	udf	#255	; 0xff
   da302:	fab2 f282 	clz	r2, r2
   da306:	2a00      	cmp	r2, #0
   da308:	d150      	bne.n	da3ac <__udivmoddi4+0x154>
   da30a:	1bcb      	subs	r3, r1, r7
   da30c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   da310:	fa1f f887 	uxth.w	r8, r7
   da314:	2601      	movs	r6, #1
   da316:	fbb3 fcfe 	udiv	ip, r3, lr
   da31a:	0c21      	lsrs	r1, r4, #16
   da31c:	fb0e 331c 	mls	r3, lr, ip, r3
   da320:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   da324:	fb08 f30c 	mul.w	r3, r8, ip
   da328:	428b      	cmp	r3, r1
   da32a:	d907      	bls.n	da33c <__udivmoddi4+0xe4>
   da32c:	1879      	adds	r1, r7, r1
   da32e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
   da332:	d202      	bcs.n	da33a <__udivmoddi4+0xe2>
   da334:	428b      	cmp	r3, r1
   da336:	f200 80e9 	bhi.w	da50c <__udivmoddi4+0x2b4>
   da33a:	4684      	mov	ip, r0
   da33c:	1ac9      	subs	r1, r1, r3
   da33e:	b2a3      	uxth	r3, r4
   da340:	fbb1 f0fe 	udiv	r0, r1, lr
   da344:	fb0e 1110 	mls	r1, lr, r0, r1
   da348:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
   da34c:	fb08 f800 	mul.w	r8, r8, r0
   da350:	45a0      	cmp	r8, r4
   da352:	d907      	bls.n	da364 <__udivmoddi4+0x10c>
   da354:	193c      	adds	r4, r7, r4
   da356:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   da35a:	d202      	bcs.n	da362 <__udivmoddi4+0x10a>
   da35c:	45a0      	cmp	r8, r4
   da35e:	f200 80d9 	bhi.w	da514 <__udivmoddi4+0x2bc>
   da362:	4618      	mov	r0, r3
   da364:	eba4 0408 	sub.w	r4, r4, r8
   da368:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   da36c:	e7bf      	b.n	da2ee <__udivmoddi4+0x96>
   da36e:	428b      	cmp	r3, r1
   da370:	d909      	bls.n	da386 <__udivmoddi4+0x12e>
   da372:	2d00      	cmp	r5, #0
   da374:	f000 80b1 	beq.w	da4da <__udivmoddi4+0x282>
   da378:	2600      	movs	r6, #0
   da37a:	e9c5 0100 	strd	r0, r1, [r5]
   da37e:	4630      	mov	r0, r6
   da380:	4631      	mov	r1, r6
   da382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   da386:	fab3 f683 	clz	r6, r3
   da38a:	2e00      	cmp	r6, #0
   da38c:	d14a      	bne.n	da424 <__udivmoddi4+0x1cc>
   da38e:	428b      	cmp	r3, r1
   da390:	d302      	bcc.n	da398 <__udivmoddi4+0x140>
   da392:	4282      	cmp	r2, r0
   da394:	f200 80b8 	bhi.w	da508 <__udivmoddi4+0x2b0>
   da398:	1a84      	subs	r4, r0, r2
   da39a:	eb61 0103 	sbc.w	r1, r1, r3
   da39e:	2001      	movs	r0, #1
   da3a0:	468c      	mov	ip, r1
   da3a2:	2d00      	cmp	r5, #0
   da3a4:	d0a8      	beq.n	da2f8 <__udivmoddi4+0xa0>
   da3a6:	e9c5 4c00 	strd	r4, ip, [r5]
   da3aa:	e7a5      	b.n	da2f8 <__udivmoddi4+0xa0>
   da3ac:	f1c2 0320 	rsb	r3, r2, #32
   da3b0:	fa20 f603 	lsr.w	r6, r0, r3
   da3b4:	4097      	lsls	r7, r2
   da3b6:	fa01 f002 	lsl.w	r0, r1, r2
   da3ba:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   da3be:	40d9      	lsrs	r1, r3
   da3c0:	4330      	orrs	r0, r6
   da3c2:	0c03      	lsrs	r3, r0, #16
   da3c4:	fbb1 f6fe 	udiv	r6, r1, lr
   da3c8:	fa1f f887 	uxth.w	r8, r7
   da3cc:	fb0e 1116 	mls	r1, lr, r6, r1
   da3d0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   da3d4:	fb06 f108 	mul.w	r1, r6, r8
   da3d8:	4299      	cmp	r1, r3
   da3da:	fa04 f402 	lsl.w	r4, r4, r2
   da3de:	d909      	bls.n	da3f4 <__udivmoddi4+0x19c>
   da3e0:	18fb      	adds	r3, r7, r3
   da3e2:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
   da3e6:	f080 808d 	bcs.w	da504 <__udivmoddi4+0x2ac>
   da3ea:	4299      	cmp	r1, r3
   da3ec:	f240 808a 	bls.w	da504 <__udivmoddi4+0x2ac>
   da3f0:	3e02      	subs	r6, #2
   da3f2:	443b      	add	r3, r7
   da3f4:	1a5b      	subs	r3, r3, r1
   da3f6:	b281      	uxth	r1, r0
   da3f8:	fbb3 f0fe 	udiv	r0, r3, lr
   da3fc:	fb0e 3310 	mls	r3, lr, r0, r3
   da400:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   da404:	fb00 f308 	mul.w	r3, r0, r8
   da408:	428b      	cmp	r3, r1
   da40a:	d907      	bls.n	da41c <__udivmoddi4+0x1c4>
   da40c:	1879      	adds	r1, r7, r1
   da40e:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
   da412:	d273      	bcs.n	da4fc <__udivmoddi4+0x2a4>
   da414:	428b      	cmp	r3, r1
   da416:	d971      	bls.n	da4fc <__udivmoddi4+0x2a4>
   da418:	3802      	subs	r0, #2
   da41a:	4439      	add	r1, r7
   da41c:	1acb      	subs	r3, r1, r3
   da41e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
   da422:	e778      	b.n	da316 <__udivmoddi4+0xbe>
   da424:	f1c6 0c20 	rsb	ip, r6, #32
   da428:	fa03 f406 	lsl.w	r4, r3, r6
   da42c:	fa22 f30c 	lsr.w	r3, r2, ip
   da430:	431c      	orrs	r4, r3
   da432:	fa20 f70c 	lsr.w	r7, r0, ip
   da436:	fa01 f306 	lsl.w	r3, r1, r6
   da43a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
   da43e:	fa21 f10c 	lsr.w	r1, r1, ip
   da442:	431f      	orrs	r7, r3
   da444:	0c3b      	lsrs	r3, r7, #16
   da446:	fbb1 f9fe 	udiv	r9, r1, lr
   da44a:	fa1f f884 	uxth.w	r8, r4
   da44e:	fb0e 1119 	mls	r1, lr, r9, r1
   da452:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   da456:	fb09 fa08 	mul.w	sl, r9, r8
   da45a:	458a      	cmp	sl, r1
   da45c:	fa02 f206 	lsl.w	r2, r2, r6
   da460:	fa00 f306 	lsl.w	r3, r0, r6
   da464:	d908      	bls.n	da478 <__udivmoddi4+0x220>
   da466:	1861      	adds	r1, r4, r1
   da468:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
   da46c:	d248      	bcs.n	da500 <__udivmoddi4+0x2a8>
   da46e:	458a      	cmp	sl, r1
   da470:	d946      	bls.n	da500 <__udivmoddi4+0x2a8>
   da472:	f1a9 0902 	sub.w	r9, r9, #2
   da476:	4421      	add	r1, r4
   da478:	eba1 010a 	sub.w	r1, r1, sl
   da47c:	b2bf      	uxth	r7, r7
   da47e:	fbb1 f0fe 	udiv	r0, r1, lr
   da482:	fb0e 1110 	mls	r1, lr, r0, r1
   da486:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
   da48a:	fb00 f808 	mul.w	r8, r0, r8
   da48e:	45b8      	cmp	r8, r7
   da490:	d907      	bls.n	da4a2 <__udivmoddi4+0x24a>
   da492:	19e7      	adds	r7, r4, r7
   da494:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
   da498:	d22e      	bcs.n	da4f8 <__udivmoddi4+0x2a0>
   da49a:	45b8      	cmp	r8, r7
   da49c:	d92c      	bls.n	da4f8 <__udivmoddi4+0x2a0>
   da49e:	3802      	subs	r0, #2
   da4a0:	4427      	add	r7, r4
   da4a2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   da4a6:	eba7 0708 	sub.w	r7, r7, r8
   da4aa:	fba0 8902 	umull	r8, r9, r0, r2
   da4ae:	454f      	cmp	r7, r9
   da4b0:	46c6      	mov	lr, r8
   da4b2:	4649      	mov	r1, r9
   da4b4:	d31a      	bcc.n	da4ec <__udivmoddi4+0x294>
   da4b6:	d017      	beq.n	da4e8 <__udivmoddi4+0x290>
   da4b8:	b15d      	cbz	r5, da4d2 <__udivmoddi4+0x27a>
   da4ba:	ebb3 020e 	subs.w	r2, r3, lr
   da4be:	eb67 0701 	sbc.w	r7, r7, r1
   da4c2:	fa07 fc0c 	lsl.w	ip, r7, ip
   da4c6:	40f2      	lsrs	r2, r6
   da4c8:	ea4c 0202 	orr.w	r2, ip, r2
   da4cc:	40f7      	lsrs	r7, r6
   da4ce:	e9c5 2700 	strd	r2, r7, [r5]
   da4d2:	2600      	movs	r6, #0
   da4d4:	4631      	mov	r1, r6
   da4d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   da4da:	462e      	mov	r6, r5
   da4dc:	4628      	mov	r0, r5
   da4de:	e70b      	b.n	da2f8 <__udivmoddi4+0xa0>
   da4e0:	4606      	mov	r6, r0
   da4e2:	e6e9      	b.n	da2b8 <__udivmoddi4+0x60>
   da4e4:	4618      	mov	r0, r3
   da4e6:	e6fd      	b.n	da2e4 <__udivmoddi4+0x8c>
   da4e8:	4543      	cmp	r3, r8
   da4ea:	d2e5      	bcs.n	da4b8 <__udivmoddi4+0x260>
   da4ec:	ebb8 0e02 	subs.w	lr, r8, r2
   da4f0:	eb69 0104 	sbc.w	r1, r9, r4
   da4f4:	3801      	subs	r0, #1
   da4f6:	e7df      	b.n	da4b8 <__udivmoddi4+0x260>
   da4f8:	4608      	mov	r0, r1
   da4fa:	e7d2      	b.n	da4a2 <__udivmoddi4+0x24a>
   da4fc:	4660      	mov	r0, ip
   da4fe:	e78d      	b.n	da41c <__udivmoddi4+0x1c4>
   da500:	4681      	mov	r9, r0
   da502:	e7b9      	b.n	da478 <__udivmoddi4+0x220>
   da504:	4666      	mov	r6, ip
   da506:	e775      	b.n	da3f4 <__udivmoddi4+0x19c>
   da508:	4630      	mov	r0, r6
   da50a:	e74a      	b.n	da3a2 <__udivmoddi4+0x14a>
   da50c:	f1ac 0c02 	sub.w	ip, ip, #2
   da510:	4439      	add	r1, r7
   da512:	e713      	b.n	da33c <__udivmoddi4+0xe4>
   da514:	3802      	subs	r0, #2
   da516:	443c      	add	r4, r7
   da518:	e724      	b.n	da364 <__udivmoddi4+0x10c>
   da51a:	bf00      	nop

000da51c <__aeabi_idiv0>:
   da51c:	4770      	bx	lr
   da51e:	bf00      	nop

000da520 <asctime_r>:
   da520:	b510      	push	{r4, lr}
   da522:	460c      	mov	r4, r1
   da524:	6941      	ldr	r1, [r0, #20]
   da526:	6903      	ldr	r3, [r0, #16]
   da528:	6982      	ldr	r2, [r0, #24]
   da52a:	b086      	sub	sp, #24
   da52c:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   da530:	9104      	str	r1, [sp, #16]
   da532:	6801      	ldr	r1, [r0, #0]
   da534:	9103      	str	r1, [sp, #12]
   da536:	6841      	ldr	r1, [r0, #4]
   da538:	9102      	str	r1, [sp, #8]
   da53a:	6881      	ldr	r1, [r0, #8]
   da53c:	9101      	str	r1, [sp, #4]
   da53e:	68c1      	ldr	r1, [r0, #12]
   da540:	9100      	str	r1, [sp, #0]
   da542:	4907      	ldr	r1, [pc, #28]	; (da560 <asctime_r+0x40>)
   da544:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   da548:	440b      	add	r3, r1
   da54a:	4906      	ldr	r1, [pc, #24]	; (da564 <asctime_r+0x44>)
   da54c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   da550:	440a      	add	r2, r1
   da552:	4620      	mov	r0, r4
   da554:	4904      	ldr	r1, [pc, #16]	; (da568 <asctime_r+0x48>)
   da556:	f7fc f8dd 	bl	d6714 <siprintf>
   da55a:	4620      	mov	r0, r4
   da55c:	b006      	add	sp, #24
   da55e:	bd10      	pop	{r4, pc}
   da560:	000db132 	.word	0x000db132
   da564:	000db11d 	.word	0x000db11d
   da568:	000db0fd 	.word	0x000db0fd

000da56c <atexit>:
   da56c:	2300      	movs	r3, #0
   da56e:	4601      	mov	r1, r0
   da570:	461a      	mov	r2, r3
   da572:	4618      	mov	r0, r3
   da574:	f000 b972 	b.w	da85c <__register_exitproc>

000da578 <gmtime>:
   da578:	b538      	push	{r3, r4, r5, lr}
   da57a:	4b07      	ldr	r3, [pc, #28]	; (da598 <gmtime+0x20>)
   da57c:	681d      	ldr	r5, [r3, #0]
   da57e:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   da580:	4604      	mov	r4, r0
   da582:	b91b      	cbnz	r3, da58c <gmtime+0x14>
   da584:	2024      	movs	r0, #36	; 0x24
   da586:	f7fc f8ad 	bl	d66e4 <malloc>
   da58a:	63e8      	str	r0, [r5, #60]	; 0x3c
   da58c:	6be9      	ldr	r1, [r5, #60]	; 0x3c
   da58e:	4620      	mov	r0, r4
   da590:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   da594:	f7fc b8fe 	b.w	d6794 <gmtime_r>
   da598:	2003e3c0 	.word	0x2003e3c0

000da59c <memcpy>:
   da59c:	440a      	add	r2, r1
   da59e:	4291      	cmp	r1, r2
   da5a0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   da5a4:	d100      	bne.n	da5a8 <memcpy+0xc>
   da5a6:	4770      	bx	lr
   da5a8:	b510      	push	{r4, lr}
   da5aa:	f811 4b01 	ldrb.w	r4, [r1], #1
   da5ae:	f803 4f01 	strb.w	r4, [r3, #1]!
   da5b2:	4291      	cmp	r1, r2
   da5b4:	d1f9      	bne.n	da5aa <memcpy+0xe>
   da5b6:	bd10      	pop	{r4, pc}

000da5b8 <memmove>:
   da5b8:	4288      	cmp	r0, r1
   da5ba:	b510      	push	{r4, lr}
   da5bc:	eb01 0402 	add.w	r4, r1, r2
   da5c0:	d902      	bls.n	da5c8 <memmove+0x10>
   da5c2:	4284      	cmp	r4, r0
   da5c4:	4623      	mov	r3, r4
   da5c6:	d807      	bhi.n	da5d8 <memmove+0x20>
   da5c8:	1e43      	subs	r3, r0, #1
   da5ca:	42a1      	cmp	r1, r4
   da5cc:	d008      	beq.n	da5e0 <memmove+0x28>
   da5ce:	f811 2b01 	ldrb.w	r2, [r1], #1
   da5d2:	f803 2f01 	strb.w	r2, [r3, #1]!
   da5d6:	e7f8      	b.n	da5ca <memmove+0x12>
   da5d8:	4402      	add	r2, r0
   da5da:	4601      	mov	r1, r0
   da5dc:	428a      	cmp	r2, r1
   da5de:	d100      	bne.n	da5e2 <memmove+0x2a>
   da5e0:	bd10      	pop	{r4, pc}
   da5e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   da5e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
   da5ea:	e7f7      	b.n	da5dc <memmove+0x24>

000da5ec <memset>:
   da5ec:	4402      	add	r2, r0
   da5ee:	4603      	mov	r3, r0
   da5f0:	4293      	cmp	r3, r2
   da5f2:	d100      	bne.n	da5f6 <memset+0xa>
   da5f4:	4770      	bx	lr
   da5f6:	f803 1b01 	strb.w	r1, [r3], #1
   da5fa:	e7f9      	b.n	da5f0 <memset+0x4>

000da5fc <srand>:
   da5fc:	b538      	push	{r3, r4, r5, lr}
   da5fe:	4b0d      	ldr	r3, [pc, #52]	; (da634 <srand+0x38>)
   da600:	681d      	ldr	r5, [r3, #0]
   da602:	6bab      	ldr	r3, [r5, #56]	; 0x38
   da604:	4604      	mov	r4, r0
   da606:	b97b      	cbnz	r3, da628 <srand+0x2c>
   da608:	2018      	movs	r0, #24
   da60a:	f7fc f86b 	bl	d66e4 <malloc>
   da60e:	4a0a      	ldr	r2, [pc, #40]	; (da638 <srand+0x3c>)
   da610:	4b0a      	ldr	r3, [pc, #40]	; (da63c <srand+0x40>)
   da612:	63a8      	str	r0, [r5, #56]	; 0x38
   da614:	e9c0 2300 	strd	r2, r3, [r0]
   da618:	4b09      	ldr	r3, [pc, #36]	; (da640 <srand+0x44>)
   da61a:	6083      	str	r3, [r0, #8]
   da61c:	230b      	movs	r3, #11
   da61e:	8183      	strh	r3, [r0, #12]
   da620:	2201      	movs	r2, #1
   da622:	2300      	movs	r3, #0
   da624:	e9c0 2304 	strd	r2, r3, [r0, #16]
   da628:	6bab      	ldr	r3, [r5, #56]	; 0x38
   da62a:	2200      	movs	r2, #0
   da62c:	611c      	str	r4, [r3, #16]
   da62e:	615a      	str	r2, [r3, #20]
   da630:	bd38      	pop	{r3, r4, r5, pc}
   da632:	bf00      	nop
   da634:	2003e3c0 	.word	0x2003e3c0
   da638:	abcd330e 	.word	0xabcd330e
   da63c:	e66d1234 	.word	0xe66d1234
   da640:	0005deec 	.word	0x0005deec

000da644 <strchr>:
   da644:	b2c9      	uxtb	r1, r1
   da646:	4603      	mov	r3, r0
   da648:	f810 2b01 	ldrb.w	r2, [r0], #1
   da64c:	b11a      	cbz	r2, da656 <strchr+0x12>
   da64e:	428a      	cmp	r2, r1
   da650:	d1f9      	bne.n	da646 <strchr+0x2>
   da652:	4618      	mov	r0, r3
   da654:	4770      	bx	lr
   da656:	2900      	cmp	r1, #0
   da658:	bf18      	it	ne
   da65a:	2300      	movne	r3, #0
   da65c:	e7f9      	b.n	da652 <strchr+0xe>

000da65e <strchrnul>:
   da65e:	b510      	push	{r4, lr}
   da660:	4604      	mov	r4, r0
   da662:	f7ff ffef 	bl	da644 <strchr>
   da666:	b918      	cbnz	r0, da670 <strchrnul+0x12>
   da668:	4620      	mov	r0, r4
   da66a:	f000 f832 	bl	da6d2 <strlen>
   da66e:	4420      	add	r0, r4
   da670:	bd10      	pop	{r4, pc}

000da672 <strcmp>:
   da672:	f810 2b01 	ldrb.w	r2, [r0], #1
   da676:	f811 3b01 	ldrb.w	r3, [r1], #1
   da67a:	2a01      	cmp	r2, #1
   da67c:	bf28      	it	cs
   da67e:	429a      	cmpcs	r2, r3
   da680:	d0f7      	beq.n	da672 <strcmp>
   da682:	1ad0      	subs	r0, r2, r3
   da684:	4770      	bx	lr

000da686 <strcpy>:
   da686:	4603      	mov	r3, r0
   da688:	f811 2b01 	ldrb.w	r2, [r1], #1
   da68c:	f803 2b01 	strb.w	r2, [r3], #1
   da690:	2a00      	cmp	r2, #0
   da692:	d1f9      	bne.n	da688 <strcpy+0x2>
   da694:	4770      	bx	lr
	...

000da698 <strdup>:
   da698:	4b02      	ldr	r3, [pc, #8]	; (da6a4 <strdup+0xc>)
   da69a:	4601      	mov	r1, r0
   da69c:	6818      	ldr	r0, [r3, #0]
   da69e:	f000 b803 	b.w	da6a8 <_strdup_r>
   da6a2:	bf00      	nop
   da6a4:	2003e3c0 	.word	0x2003e3c0

000da6a8 <_strdup_r>:
   da6a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   da6aa:	4604      	mov	r4, r0
   da6ac:	4608      	mov	r0, r1
   da6ae:	460d      	mov	r5, r1
   da6b0:	f000 f80f 	bl	da6d2 <strlen>
   da6b4:	1c42      	adds	r2, r0, #1
   da6b6:	4611      	mov	r1, r2
   da6b8:	4620      	mov	r0, r4
   da6ba:	9201      	str	r2, [sp, #4]
   da6bc:	f7fc f84a 	bl	d6754 <_malloc_r>
   da6c0:	4604      	mov	r4, r0
   da6c2:	b118      	cbz	r0, da6cc <_strdup_r+0x24>
   da6c4:	9a01      	ldr	r2, [sp, #4]
   da6c6:	4629      	mov	r1, r5
   da6c8:	f7ff ff68 	bl	da59c <memcpy>
   da6cc:	4620      	mov	r0, r4
   da6ce:	b003      	add	sp, #12
   da6d0:	bd30      	pop	{r4, r5, pc}

000da6d2 <strlen>:
   da6d2:	4603      	mov	r3, r0
   da6d4:	f813 2b01 	ldrb.w	r2, [r3], #1
   da6d8:	2a00      	cmp	r2, #0
   da6da:	d1fb      	bne.n	da6d4 <strlen+0x2>
   da6dc:	1a18      	subs	r0, r3, r0
   da6de:	3801      	subs	r0, #1
   da6e0:	4770      	bx	lr

000da6e2 <strncmp>:
   da6e2:	b510      	push	{r4, lr}
   da6e4:	b16a      	cbz	r2, da702 <strncmp+0x20>
   da6e6:	3901      	subs	r1, #1
   da6e8:	1884      	adds	r4, r0, r2
   da6ea:	f810 3b01 	ldrb.w	r3, [r0], #1
   da6ee:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   da6f2:	4293      	cmp	r3, r2
   da6f4:	d103      	bne.n	da6fe <strncmp+0x1c>
   da6f6:	42a0      	cmp	r0, r4
   da6f8:	d001      	beq.n	da6fe <strncmp+0x1c>
   da6fa:	2b00      	cmp	r3, #0
   da6fc:	d1f5      	bne.n	da6ea <strncmp+0x8>
   da6fe:	1a98      	subs	r0, r3, r2
   da700:	bd10      	pop	{r4, pc}
   da702:	4610      	mov	r0, r2
   da704:	e7fc      	b.n	da700 <strncmp+0x1e>

000da706 <strncpy>:
   da706:	b510      	push	{r4, lr}
   da708:	3901      	subs	r1, #1
   da70a:	4603      	mov	r3, r0
   da70c:	b132      	cbz	r2, da71c <strncpy+0x16>
   da70e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   da712:	f803 4b01 	strb.w	r4, [r3], #1
   da716:	3a01      	subs	r2, #1
   da718:	2c00      	cmp	r4, #0
   da71a:	d1f7      	bne.n	da70c <strncpy+0x6>
   da71c:	441a      	add	r2, r3
   da71e:	2100      	movs	r1, #0
   da720:	4293      	cmp	r3, r2
   da722:	d100      	bne.n	da726 <strncpy+0x20>
   da724:	bd10      	pop	{r4, pc}
   da726:	f803 1b01 	strb.w	r1, [r3], #1
   da72a:	e7f9      	b.n	da720 <strncpy+0x1a>

000da72c <strrchr>:
   da72c:	b538      	push	{r3, r4, r5, lr}
   da72e:	4603      	mov	r3, r0
   da730:	460c      	mov	r4, r1
   da732:	b969      	cbnz	r1, da750 <strrchr+0x24>
   da734:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   da738:	f7ff bf84 	b.w	da644 <strchr>
   da73c:	1c43      	adds	r3, r0, #1
   da73e:	4605      	mov	r5, r0
   da740:	4621      	mov	r1, r4
   da742:	4618      	mov	r0, r3
   da744:	f7ff ff7e 	bl	da644 <strchr>
   da748:	2800      	cmp	r0, #0
   da74a:	d1f7      	bne.n	da73c <strrchr+0x10>
   da74c:	4628      	mov	r0, r5
   da74e:	bd38      	pop	{r3, r4, r5, pc}
   da750:	2500      	movs	r5, #0
   da752:	e7f5      	b.n	da740 <strrchr+0x14>

000da754 <_strtol_l.isra.0>:
   da754:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   da758:	4e3a      	ldr	r6, [pc, #232]	; (da844 <_strtol_l.isra.0+0xf0>)
   da75a:	4686      	mov	lr, r0
   da75c:	468c      	mov	ip, r1
   da75e:	4660      	mov	r0, ip
   da760:	f81c 4b01 	ldrb.w	r4, [ip], #1
   da764:	5da5      	ldrb	r5, [r4, r6]
   da766:	f015 0508 	ands.w	r5, r5, #8
   da76a:	d1f8      	bne.n	da75e <_strtol_l.isra.0+0xa>
   da76c:	2c2d      	cmp	r4, #45	; 0x2d
   da76e:	d133      	bne.n	da7d8 <_strtol_l.isra.0+0x84>
   da770:	f89c 4000 	ldrb.w	r4, [ip]
   da774:	f04f 0801 	mov.w	r8, #1
   da778:	f100 0c02 	add.w	ip, r0, #2
   da77c:	2b00      	cmp	r3, #0
   da77e:	d05c      	beq.n	da83a <_strtol_l.isra.0+0xe6>
   da780:	2b10      	cmp	r3, #16
   da782:	d10c      	bne.n	da79e <_strtol_l.isra.0+0x4a>
   da784:	2c30      	cmp	r4, #48	; 0x30
   da786:	d10a      	bne.n	da79e <_strtol_l.isra.0+0x4a>
   da788:	f89c 0000 	ldrb.w	r0, [ip]
   da78c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   da790:	2858      	cmp	r0, #88	; 0x58
   da792:	d14d      	bne.n	da830 <_strtol_l.isra.0+0xdc>
   da794:	f89c 4001 	ldrb.w	r4, [ip, #1]
   da798:	2310      	movs	r3, #16
   da79a:	f10c 0c02 	add.w	ip, ip, #2
   da79e:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
   da7a2:	3f01      	subs	r7, #1
   da7a4:	2600      	movs	r6, #0
   da7a6:	fbb7 f9f3 	udiv	r9, r7, r3
   da7aa:	4630      	mov	r0, r6
   da7ac:	fb03 7a19 	mls	sl, r3, r9, r7
   da7b0:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
   da7b4:	2d09      	cmp	r5, #9
   da7b6:	d818      	bhi.n	da7ea <_strtol_l.isra.0+0x96>
   da7b8:	462c      	mov	r4, r5
   da7ba:	42a3      	cmp	r3, r4
   da7bc:	dd24      	ble.n	da808 <_strtol_l.isra.0+0xb4>
   da7be:	1c75      	adds	r5, r6, #1
   da7c0:	d007      	beq.n	da7d2 <_strtol_l.isra.0+0x7e>
   da7c2:	4581      	cmp	r9, r0
   da7c4:	d31d      	bcc.n	da802 <_strtol_l.isra.0+0xae>
   da7c6:	d101      	bne.n	da7cc <_strtol_l.isra.0+0x78>
   da7c8:	45a2      	cmp	sl, r4
   da7ca:	db1a      	blt.n	da802 <_strtol_l.isra.0+0xae>
   da7cc:	fb00 4003 	mla	r0, r0, r3, r4
   da7d0:	2601      	movs	r6, #1
   da7d2:	f81c 4b01 	ldrb.w	r4, [ip], #1
   da7d6:	e7eb      	b.n	da7b0 <_strtol_l.isra.0+0x5c>
   da7d8:	2c2b      	cmp	r4, #43	; 0x2b
   da7da:	bf08      	it	eq
   da7dc:	f89c 4000 	ldrbeq.w	r4, [ip]
   da7e0:	46a8      	mov	r8, r5
   da7e2:	bf08      	it	eq
   da7e4:	f100 0c02 	addeq.w	ip, r0, #2
   da7e8:	e7c8      	b.n	da77c <_strtol_l.isra.0+0x28>
   da7ea:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
   da7ee:	2d19      	cmp	r5, #25
   da7f0:	d801      	bhi.n	da7f6 <_strtol_l.isra.0+0xa2>
   da7f2:	3c37      	subs	r4, #55	; 0x37
   da7f4:	e7e1      	b.n	da7ba <_strtol_l.isra.0+0x66>
   da7f6:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
   da7fa:	2d19      	cmp	r5, #25
   da7fc:	d804      	bhi.n	da808 <_strtol_l.isra.0+0xb4>
   da7fe:	3c57      	subs	r4, #87	; 0x57
   da800:	e7db      	b.n	da7ba <_strtol_l.isra.0+0x66>
   da802:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   da806:	e7e4      	b.n	da7d2 <_strtol_l.isra.0+0x7e>
   da808:	1c73      	adds	r3, r6, #1
   da80a:	d106      	bne.n	da81a <_strtol_l.isra.0+0xc6>
   da80c:	2322      	movs	r3, #34	; 0x22
   da80e:	f8ce 3000 	str.w	r3, [lr]
   da812:	4638      	mov	r0, r7
   da814:	b942      	cbnz	r2, da828 <_strtol_l.isra.0+0xd4>
   da816:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   da81a:	f1b8 0f00 	cmp.w	r8, #0
   da81e:	d000      	beq.n	da822 <_strtol_l.isra.0+0xce>
   da820:	4240      	negs	r0, r0
   da822:	2a00      	cmp	r2, #0
   da824:	d0f7      	beq.n	da816 <_strtol_l.isra.0+0xc2>
   da826:	b10e      	cbz	r6, da82c <_strtol_l.isra.0+0xd8>
   da828:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
   da82c:	6011      	str	r1, [r2, #0]
   da82e:	e7f2      	b.n	da816 <_strtol_l.isra.0+0xc2>
   da830:	2430      	movs	r4, #48	; 0x30
   da832:	2b00      	cmp	r3, #0
   da834:	d1b3      	bne.n	da79e <_strtol_l.isra.0+0x4a>
   da836:	2308      	movs	r3, #8
   da838:	e7b1      	b.n	da79e <_strtol_l.isra.0+0x4a>
   da83a:	2c30      	cmp	r4, #48	; 0x30
   da83c:	d0a4      	beq.n	da788 <_strtol_l.isra.0+0x34>
   da83e:	230a      	movs	r3, #10
   da840:	e7ad      	b.n	da79e <_strtol_l.isra.0+0x4a>
   da842:	bf00      	nop
   da844:	000db157 	.word	0x000db157

000da848 <strtol>:
   da848:	4613      	mov	r3, r2
   da84a:	460a      	mov	r2, r1
   da84c:	4601      	mov	r1, r0
   da84e:	4802      	ldr	r0, [pc, #8]	; (da858 <strtol+0x10>)
   da850:	6800      	ldr	r0, [r0, #0]
   da852:	f7ff bf7f 	b.w	da754 <_strtol_l.isra.0>
   da856:	bf00      	nop
   da858:	2003e3c0 	.word	0x2003e3c0

000da85c <__register_exitproc>:
   da85c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   da860:	f8df 80b8 	ldr.w	r8, [pc, #184]	; da91c <__register_exitproc+0xc0>
   da864:	4606      	mov	r6, r0
   da866:	f8d8 0000 	ldr.w	r0, [r8]
   da86a:	461f      	mov	r7, r3
   da86c:	460d      	mov	r5, r1
   da86e:	4691      	mov	r9, r2
   da870:	f000 f856 	bl	da920 <__retarget_lock_acquire_recursive>
   da874:	4b25      	ldr	r3, [pc, #148]	; (da90c <__register_exitproc+0xb0>)
   da876:	681c      	ldr	r4, [r3, #0]
   da878:	b934      	cbnz	r4, da888 <__register_exitproc+0x2c>
   da87a:	4c25      	ldr	r4, [pc, #148]	; (da910 <__register_exitproc+0xb4>)
   da87c:	601c      	str	r4, [r3, #0]
   da87e:	4b25      	ldr	r3, [pc, #148]	; (da914 <__register_exitproc+0xb8>)
   da880:	b113      	cbz	r3, da888 <__register_exitproc+0x2c>
   da882:	681b      	ldr	r3, [r3, #0]
   da884:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   da888:	6863      	ldr	r3, [r4, #4]
   da88a:	2b1f      	cmp	r3, #31
   da88c:	dd07      	ble.n	da89e <__register_exitproc+0x42>
   da88e:	f8d8 0000 	ldr.w	r0, [r8]
   da892:	f000 f847 	bl	da924 <__retarget_lock_release_recursive>
   da896:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   da89a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   da89e:	b34e      	cbz	r6, da8f4 <__register_exitproc+0x98>
   da8a0:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   da8a4:	b988      	cbnz	r0, da8ca <__register_exitproc+0x6e>
   da8a6:	4b1c      	ldr	r3, [pc, #112]	; (da918 <__register_exitproc+0xbc>)
   da8a8:	b923      	cbnz	r3, da8b4 <__register_exitproc+0x58>
   da8aa:	f8d8 0000 	ldr.w	r0, [r8]
   da8ae:	f000 f838 	bl	da922 <__retarget_lock_release>
   da8b2:	e7f0      	b.n	da896 <__register_exitproc+0x3a>
   da8b4:	f44f 7084 	mov.w	r0, #264	; 0x108
   da8b8:	f7fb ff14 	bl	d66e4 <malloc>
   da8bc:	2800      	cmp	r0, #0
   da8be:	d0f4      	beq.n	da8aa <__register_exitproc+0x4e>
   da8c0:	2300      	movs	r3, #0
   da8c2:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   da8c6:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   da8ca:	6863      	ldr	r3, [r4, #4]
   da8cc:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   da8d0:	2201      	movs	r2, #1
   da8d2:	409a      	lsls	r2, r3
   da8d4:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   da8d8:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   da8dc:	4313      	orrs	r3, r2
   da8de:	2e02      	cmp	r6, #2
   da8e0:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   da8e4:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   da8e8:	bf02      	ittt	eq
   da8ea:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   da8ee:	431a      	orreq	r2, r3
   da8f0:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
   da8f4:	6863      	ldr	r3, [r4, #4]
   da8f6:	f8d8 0000 	ldr.w	r0, [r8]
   da8fa:	1c5a      	adds	r2, r3, #1
   da8fc:	3302      	adds	r3, #2
   da8fe:	6062      	str	r2, [r4, #4]
   da900:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   da904:	f000 f80e 	bl	da924 <__retarget_lock_release_recursive>
   da908:	2000      	movs	r0, #0
   da90a:	e7c6      	b.n	da89a <__register_exitproc+0x3e>
   da90c:	2003e7e4 	.word	0x2003e7e4
   da910:	2003e758 	.word	0x2003e758
   da914:	00000000 	.word	0x00000000
   da918:	000d66e5 	.word	0x000d66e5
   da91c:	2003e424 	.word	0x2003e424

000da920 <__retarget_lock_acquire_recursive>:
   da920:	4770      	bx	lr

000da922 <__retarget_lock_release>:
   da922:	4770      	bx	lr

000da924 <__retarget_lock_release_recursive>:
   da924:	4770      	bx	lr

000da926 <link_code_end>:
	...

000da928 <dynalib_user>:
   da928:	4021 000d 405d 000d 4085 000d 4089 000d     !@..]@...@...@..
   da938:	0000 0000 6573 5074 776f 7265 6f43 666e     ....setPowerConf
   da948:	6769 7275 7461 6f69 3d6e 6425 5000 5241     iguration=%d.PAR
   da958:	4954 4c43 0045 4150 5452 4349 454c 4320     TICLE.PARTICLE C
   da968:	4e4f 454e 5443 4445 5300 454c 5045 5220     ONNECTED.SLEEP R
   da978:	5345 4c55 0054 6f57 656b 4220 2079 6157     ESULT.Woke By Wa
   da988:	6374 6864 6f64 0067 6f57 656b 4220 2079     tcdhdog.Woke By 
   da998:	5452 0043 6f57 656b 4220 2079 4950 0052     RTC.Woke By PIR.
   da9a8:	4150 5452 4349 454c 4620 4941 454c 2044     PARTICLE FAILED 
   da9b8:	4f54 4320 4e4f 454e 5443 5300 4d41 4c50     TO CONNECT.SAMPL
   da9c8:	4e49 5f47 4157 5449 535f 4154 4554 5300     ING_WAIT_STATE.S
   da9d8:	4154 5452 5320 4d41 4c50 4e49 0047 0030     TART SAMPLING.0.
   da9e8:	4f50 4557 0052 4e45 4142 4c42 2045 4843     POWER.ENBABLE CH
   da9f8:	5241 4947 474e 5000 4255 494c 4853 4e49     ARGING.PUBLISHIN
   daa08:	0047 5453 5241 2054 5550 4c42 5349 5f48     G.START PUBLISH_
   daa18:	5453 5441 0045 6147 6472 6e65 4c2d 6461     STATE.Garden-Lad
   daa28:	2d79 7542 2d67 3430 432d 7061 3600 5563     y-Bug-04-Cap.6cU
   daa38:	6e6f 5871 4c73 6863 6e66 7438 4635 5536     onqXsLchfn8t5F6U
   daa48:	5573 7872 3546 7138 0045 207b 7622 6c61     sUrxF58qE.{ "val
   daa58:	6575 3a22 2220 2500 322e 0066 2c22 2220     ue": ".%.2f.", "
   daa68:	6566 6465 4449 3a22 2220 2200 007d 6147     feedID": "."}.Ga
   daa78:	6472 6e65 4c2d 6461 2d79 7542 2d67 3430     rden-Lady-Bug-04
   daa88:	432d 7061 502d 7265 6563 746e 6761 0065     -Cap-Percentage.
   daa98:	386e 7065 5063 4373 6b46 6273 5539 5957     n8epcPsCFksb9UWY
   daaa8:	6774 7458 656f 4b34 686a 766b 5000 776f     tgXtoe4Kjhkv.Pow
   daab8:	7265 7320 756f 6372 7365 4200 7461 6574     er sources.Batte
   daac8:	7972 7320 6174 6574 4200 7461 6574 7972     ry state.Battery
   daad8:	6320 6168 6772 0065 6142 7474 7265 2079      charge.Battery 
   daae8:	4356 6c65 006c 6142 7474 7265 2079 6f53     VCell.Battery So
   daaf8:	0043 6147 6472 6e65 4c2d 6461 2d79 7542     C.Garden-Lady-Bu
   dab08:	2d67 3430 422d 5441 0054 6a55 726b 6748     g-04-BATT.UjkrHg
   dab18:	3639 3475 5278 5476 7534 4345 7363 4e45     96u4xRvT4uECcsEN
   dab28:	7776 7154 7568 5300 4154 5452 5320 454c     vwTqhu.START SLE
   dab38:	5045 575f 4941 5f54 5453 5441 0045 4f47     EP_WAIT_STATE.GO
   dab48:	4e49 2047 4f54 5320 454c 5045 5300 454c     ING TO SLEEP.SLE
   dab58:	5045 5320 4f54 2050 4c53 4545 0050 6f57     EP STOP SLEEP.Wo
   dab68:	656b 4220 2079 5942 475f 4950 204f 4950     ke By BY_GPIO PI
   dab78:	0052 6f57 656b 4220 2079 5942 475f 4950     R.Woke By BY_GPI
   dab88:	204f 5452 0043 4c53 4545 2050 4552 5553     O RTC.SLEEP RESU
   dab98:	544c 2d20 5720 6b6f 2065 5942 525f 4354     LT - Woke BY_RTC
   daba8:	5300 454c 5045 5220 5345 4c55 2054 202d     .SLEEP RESULT - 
   dabb8:	6f57 656b 4220 5f59 454e 5754 524f 004b     Woke BY_NETWORK.
   dabc8:	4c53 4545 2050 4552 5553 544c 2d20 5720     SLEEP RESULT - W
   dabd8:	6b6f 2065 7942 5520 4b4e 4f4e 4e57 5300     oke By UNKNOWN.S
   dabe8:	454c 5045 5420 4d49 4445 5320 454c 5045     LEEP TIMED SLEEP
   dabf8:	0000 0000                                   ....

000dabfc <_ZTVN5spark10LogHandlerE>:
	...
   dac0c:	40a5 000d 40c9 000d                         .@...@..

000dac14 <_ZTVN5spark16SerialLogHandlerE>:
	...
   dac1c:	40fd 000d 4131 000d 82bd 000d 40cb 000d     .@..1A.......@..

000dac2c <_ZTV8MB85RC64>:
	...
   dac34:	40d5 000d 40e9 000d 5221 000d 52b7 000d     .@...@..!R...R..
   dac44:	5339 000d 6e75 6e6b 776f 006e 6976 006e     9S..unknown.vin.
   dac54:	7375 2062 6f68 7473 7500 6273 6120 6164     usb host.usb ada
   dac64:	7470 7265 7500 6273 6f20 6774 6200 7461     pter.usb otg.bat
   dac74:	6574 7972 6e00 746f 6320 6168 6772 6e69     tery.not chargin
   dac84:	0067 6863 7261 6567 0064 6964 6373 6168     g.charged.discha
   dac94:	6772 6e69 0067 6166 6c75 0074 6964 6373     rging.fault.disc
   daca4:	6e6f 656e 7463 6465 0000 0000               onnected....

000dacb0 <_ZL12powerSources>:
   dacb0:	ac48 000d ac50 000d ac54 000d ac5d 000d     H...P...T...]...
   dacc0:	ac69 000d ac71 000d                         i...q...

000dacc8 <_ZL13batteryStates>:
   dacc8:	ac48 000d ac79 000d ac7d 000d ac86 000d     H...y...}.......
   dacd8:	ac8e 000d ac9a 000d aca0 000d               ............

000dace4 <_ZTV6MB85RC>:
	...
   dacec:	51e1 000d 51e3 000d 5221 000d 52b7 000d     .Q...Q..!R...R..
   dacfc:	5339 000d 6564 6976 6563 6552 6461 6620     9S..deviceRead f
   dad0c:	6961 656c 2064 7473 7461 253d 0064 6573     ailed stat=%d.se
   dad1c:	2074 6954 656d 6620 6f72 206d 5452 2043     t Time from RTC 
   dad2c:	7325 6400 7665 6369 5765 6972 6574 6620     %s.deviceWrite f
   dad3c:	6961 656c 2064 7473 7461 253d 0064 6573     ailed stat=%d.se
   dad4c:	2074 5452 2043 7266 6d6f 6320 6f6c 6475     t RTC from cloud
   dad5c:	2520 0073 6c63 756f 2064 6974 656d 6e20      %s.cloud time n
   dad6c:	746f 7620 6c61 6469 6400 7665 6369 5765     ot valid.deviceW
   dad7c:	6972 6574 4545 5250 4d4f 6620 6961 656c     riteEEPROM faile
   dad8c:	2064 7473 7461 253d 0064 7061 2e70 7472     d stat=%d.app.rt
   dad9c:	0063 0000                                   c...

000dada0 <_ZTV12MCP79410SRAM>:
	...
   dada8:	53f9 000d 540f 000d 53e9 000d 53ed 000d     .S...T...S...S..
   dadb8:	5439 000d 5721 000d 5941 000d               9T..!W..AY..

000dadc4 <_ZTV12MCP79410Time>:
	...
   dadcc:	53fd 000d 5401 000d                         .S...T..

000dadd4 <_ZTV14MCP79410EEPROM>:
	...
   daddc:	53fb 000d 541d 000d 53f1 000d 53f5 000d     .S...T...S...S..
   dadec:	5439 000d 575b 000d 5b25 000d               9T..[W..%[..

000dadf8 <_ZTV8MCP79410>:
	...
   dae00:	53ff 000d 542b 000d 6170 7472 6369 656c     .S..+T..particle
   dae10:	642f 7665 6369 2f65 616e 656d 0000 0000     /device/name....

000dae20 <_ZTV16DeviceNameHelper>:
	...
   dae28:	5c61 000d 5c81 000d 5b65 000d               a\...\..e[..

000dae34 <_ZTV22DeviceNameHelperEEPROM>:
	...
   dae3c:	5c95 000d 5ca9 000d 5bb9 000d               .\...\...[..

000dae48 <_ZTVN5spark13CellularClassE>:
	...
   dae50:	68af 000d 68a5 000d 689b 000d 6851 000d     .h...h...h..Qh..
   dae60:	688f 000d 6883 000d 8615 000d 861d 000d     .h...h..........
   dae70:	6877 000d 686f 000d 6865 000d 685b 000d     wh..oh..eh..[h..
   dae80:	864d 000d                                   M...

000dae84 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   dae8c:	68e9 000d 68ef 000d 692d 000d 68fd 000d     .h...h..-i...h..
   dae9c:	68eb 000d                                   .h..

000daea0 <_ZTVN5spark13EthernetClassE>:
	...
   daea8:	6e9b 000d 6e91 000d 6e87 000d 6e7d 000d     .n...n...n..}n..
   daeb8:	6e71 000d 6e65 000d 8615 000d 861d 000d     qn..en..........
   daec8:	6e59 000d 6e51 000d 6e47 000d 6e3d 000d     Yn..Qn..Gn..=n..
   daed8:	864d 000d                                   M...

000daedc <_ZTV7TwoWire>:
	...
   daee4:	7015 000d 705f 000d 7037 000d 7017 000d     .p.._p..7p...p..
   daef4:	703f 000d 7047 000d 704f 000d 7057 000d     ?p..Gp..Op..Wp..

000daf04 <_ZTV9IPAddress>:
	...
   daf0c:	71c9 000d 71b9 000d 71bb 000d 7525 7500     .q...q...q..%u.u
   daf1c:	3025 7834 6200 7561 0064 6553 6972 6c61     %04x.baud.Serial
   daf2c:	5300 7265 6169 316c 4a00 4f53 534e 7274     .Serial1.JSONStr
   daf3c:	6165 4c6d 676f 6148 646e 656c 0072 7061     eamLogHandler.ap
   daf4c:	0070 3025 3031 2075 5d00 0020 202c 2800     p.%010u .] ., .(
   daf5c:	3a29 0020 5b20 6300 646f 2065 203d 2500     ): . [.code = .%
   daf6c:	0069 6564 6174 6c69 2073 203d 0d00 000a     i.details = ....
   daf7c:	006d 6e6c 6600 006e 6f63 6564 6400 7465     m.ln.fn.code.det
   daf8c:	6961 006c                                   ail.

000daf90 <_ZTVN5spark16JSONStreamWriterE>:
	...
   daf98:	7685 000d 76ab 000d 7669 000d 72c9 000d     .v...v..iv...r..

000dafa8 <_ZTVN5spark16StreamLogHandlerE>:
	...
   dafb0:	7ad9 000d 7af1 000d 82bd 000d 40cb 000d     .z...z.......@..

000dafc0 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   dafc8:	7b05 000d 7b19 000d 8461 000d 7671 000d     .{...{..a...qv..

000dafd8 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   dafe0:	7683 000d 76b9 000d 81f9 000d 7673 000d     .v...v......sv..

000daff0 <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   daff8:	7681 000d 76c7 000d 7a21 000d 76e5 000d     .v...v..!z...v..

000db008 <_ZTVN5spark12NetworkClassE>:
	...
   db010:	85d5 000d 85df 000d 85e9 000d 85f3 000d     ................
   db020:	85fd 000d 8609 000d 8615 000d 861d 000d     ................
   db030:	8625 000d 8631 000d 8639 000d 8643 000d     %...1...9...C...
   db040:	864d 000d 6977 6972 676e 5300 7379 6574     M...wiring.Syste
   db050:	206d 6c73 6565 2070 6f63 666e 6769 7275     m sleep configur
   db060:	7461 6f69 206e 7369 6920 766e 6c61 6469     ation is invalid
   db070:	002e 005a 2b25 3330 3a64 3025 7532 2500     ..Z.%+03d:%02u.%
   db080:	2d59 6d25 252d 5464 4825 253a 3a4d 5325     Y-%m-%dT%H:%M:%S
   db090:	7a25 6100 6373 6974 656d 0000               %z.asctime..

000db09c <_ZTV11USARTSerial>:
	...
   db0a4:	9199 000d 9207 000d 91df 000d 8879 000d     ............y...
   db0b4:	91af 000d 91cb 000d 91bd 000d 91d9 000d     ................
   db0c4:	919b 000d 91a1 000d                         ........

000db0cc <_ZTV9USBSerial>:
	...
   db0d4:	92db 000d 9343 000d 9319 000d 8879 000d     ....C.......y...
   db0e4:	930b 000d 92dd 000d 92ed 000d 933d 000d     ............=...
   db0f4:	92fd 000d 92d5 000d                         ........

000db0fc <_ZSt7nothrow>:
   db0fc:	2500 332e 2073 2e25 7333 3325 2064 2e25     .%.3s %.3s%3d %.
   db10c:	6432 253a 322e 3a64 2e25 6432 2520 0a64     2d:%.2d:%.2d %d.
	...

000db11d <day_name.6145>:
   db11d:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
   db12d:	6972 6153                                    riSat

000db132 <mon_name.6146>:
   db132:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
   db142:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
   db152:	4476 6365                                   vDec

000db156 <_ctype_>:
   db156:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   db166:	2020 2020 2020 2020 2020 2020 2020 2020                     
   db176:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   db186:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   db196:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   db1a6:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   db1b6:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   db1c6:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   db1d6:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000db257 <link_const_variable_data_end>:
	...

000db258 <link_constructors_location>:
   db258:	000d5001 	.word	0x000d5001
   db25c:	000d5b55 	.word	0x000d5b55
   db260:	000d60e5 	.word	0x000d60e5
   db264:	000d6841 	.word	0x000d6841
   db268:	000d68b9 	.word	0x000d68b9
   db26c:	000d6ea5 	.word	0x000d6ea5
   db270:	000d82ad 	.word	0x000d82ad
   db274:	000d8721 	.word	0x000d8721
   db278:	000d8985 	.word	0x000d8985
   db27c:	000d8e01 	.word	0x000d8e01
   db280:	000d9185 	.word	0x000d9185

000db284 <link_constructors_end>:
	...
