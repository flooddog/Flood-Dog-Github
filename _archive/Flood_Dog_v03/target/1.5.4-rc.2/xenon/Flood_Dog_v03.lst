
/Users/philipchatterton/IoCP/Particle/Flood_Dog/Flood_Dog_v03/target/1.5.4-rc.2/xenon/Flood_Dog_v03.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00002284  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d62a0  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         0000006c  2003e404  000d62a4  0001e404  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000380  2003e470  2003e470  0002e470  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d6310  000d6310  00026310  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d6338  000d6338  00026338  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000d6673  00000000  00000000  0002633c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0001075e  00000000  00000000  000fc9af  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001e997  00000000  00000000  0010d10d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000025d8  00000000  00000000  0012baa4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00004860  00000000  00000000  0012e07c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00033dc3  00000000  00000000  001328dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000273e4  00000000  00000000  0016669f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00104744  00000000  00000000  0018da83  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000d19c  00000000  00000000  002921c8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f001 fef9 	bl	d5e24 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f001 fefe 	bl	d5e3a <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e404 	.word	0x2003e404
   d4048:	000d62a4 	.word	0x000d62a4
   d404c:	2003e470 	.word	0x2003e470
   d4050:	2003e470 	.word	0x2003e470
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f001 fc9f 	bl	d599c <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d629c 	.word	0x000d629c
   d4080:	000d6268 	.word	0x000d6268

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b82c 	b.w	d40e0 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f8a5 	bl	d41d8 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f001 bc45 	b.w	d5920 <_post_loop>

000d4096 <_Znwj>:
   d4096:	f000 bba3 	b.w	d47e0 <malloc>

000d409a <_ZdlPv>:
   d409a:	f000 bba9 	b.w	d47f0 <free>

000d409e <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409e:	f000 bba7 	b.w	d47f0 <free>

000d40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a2:	7800      	ldrb	r0, [r0, #0]
   d40a4:	fab0 f080 	clz	r0, r0
   d40a8:	0940      	lsrs	r0, r0, #5
   d40aa:	4770      	bx	lr

000d40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40ac:	2301      	movs	r3, #1
   d40ae:	7003      	strb	r3, [r0, #0]
   d40b0:	4770      	bx	lr

000d40b2 <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   d40b2:	b40e      	push	{r1, r2, r3}
   d40b4:	b500      	push	{lr}
   d40b6:	b08c      	sub	sp, #48	; 0x30
   d40b8:	aa0d      	add	r2, sp, #52	; 0x34
    va_end(args);
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
   d40ba:	2320      	movs	r3, #32
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   d40bc:	f852 1b04 	ldr.w	r1, [r2], #4
    va_list args;
    va_start(args, fmt);
   d40c0:	9203      	str	r2, [sp, #12]

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d40c2:	e88d 0006 	stmia.w	sp, {r1, r2}
    va_end(args);
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
   d40c6:	9304      	str	r3, [sp, #16]
    attr.flags = 0;
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d40c8:	6801      	ldr	r1, [r0, #0]
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   d40ca:	2300      	movs	r3, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d40cc:	aa04      	add	r2, sp, #16
   d40ce:	201e      	movs	r0, #30
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   d40d0:	9305      	str	r3, [sp, #20]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d40d2:	f000 fad9 	bl	d4688 <log_message_v>
inline void spark::Logger::info(const char *fmt, ...) const {
    va_list args;
    va_start(args, fmt);
    log(LOG_LEVEL_INFO, fmt, args);
    va_end(args);
}
   d40d6:	b00c      	add	sp, #48	; 0x30
   d40d8:	f85d eb04 	ldr.w	lr, [sp], #4
   d40dc:	b003      	add	sp, #12
   d40de:	4770      	bx	lr

000d40e0 <setup>:

String feedName;
String feedID;
String feedData;

void setup() {
   d40e0:	b508      	push	{r3, lr}
	// selectExternalMeshAntenna();

  Serial.begin(9600);
   d40e2:	f001 fbd1 	bl	d5888 <_Z16_fetch_usbserialv>
   d40e6:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d40ea:	f001 fbc1 	bl	d5870 <_ZN9USBSerial5beginEl>

	pinMode(BUILT_IN_LED, OUTPUT);
   d40ee:	2101      	movs	r1, #1
   d40f0:	2007      	movs	r0, #7
   d40f2:	f001 fcb5 	bl	d5a60 <pinMode>
	pinMode(ANALOG_DETECTOR, INPUT);
   d40f6:	2100      	movs	r1, #0
   d40f8:	2013      	movs	r0, #19
   d40fa:	f001 fcb1 	bl	d5a60 <pinMode>
	pinMode(DIGITAL_DETECTOR, INPUT);
   d40fe:	2100      	movs	r1, #0
   d4100:	2003      	movs	r0, #3
}
   d4102:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

  Serial.begin(9600);

	pinMode(BUILT_IN_LED, OUTPUT);
	pinMode(ANALOG_DETECTOR, INPUT);
	pinMode(DIGITAL_DETECTOR, INPUT);
   d4106:	f001 bcab 	b.w	d5a60 <pinMode>
	...

000d410c <_Z20meterParticlePublishv>:
		Particle.publish(tempEvent, tempData, 60, PRIVATE);
	}
	return true;
}

bool meterParticlePublish(void) {                                       // Enforces Particle's limit on 1 publish a second
   d410c:	b510      	push	{r4, lr}
  static unsigned long lastPublish=0;                                   // Initialize and store value here
  if(millis() - lastPublish >= 1500) {                                  // Particle rate limits at 1 publish per second
   d410e:	4c08      	ldr	r4, [pc, #32]	; (d4130 <_Z20meterParticlePublishv+0x24>)

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4110:	f000 f9ba 	bl	d4488 <HAL_Timer_Get_Milli_Seconds>
   d4114:	6823      	ldr	r3, [r4, #0]
   d4116:	1ac0      	subs	r0, r0, r3
   d4118:	f240 53db 	movw	r3, #1499	; 0x5db
   d411c:	4298      	cmp	r0, r3
   d411e:	d904      	bls.n	d412a <_Z20meterParticlePublishv+0x1e>
   d4120:	f000 f9b2 	bl	d4488 <HAL_Timer_Get_Milli_Seconds>
    lastPublish = millis();
   d4124:	6020      	str	r0, [r4, #0]
   d4126:	2001      	movs	r0, #1
   d4128:	bd10      	pop	{r4, pc}
    return 1;
  }
  else return 0;
   d412a:	2000      	movs	r0, #0
}
   d412c:	bd10      	pop	{r4, pc}
   d412e:	bf00      	nop
   d4130:	2003e4d4 	.word	0x2003e4d4

000d4134 <_Z7logData6StringS_bb.part.8>:
    // delay(2000);
  }
}


bool logData(String tempEvent, String tempData, bool tempLogSerial, bool tempLogParticle){
   d4134:	b530      	push	{r4, r5, lr}
   d4136:	4604      	mov	r4, r0
   d4138:	b085      	sub	sp, #20
   d413a:	460d      	mov	r5, r1
	if (tempLogSerial){
		Log.info(tempEvent + ": " + tempData);
	}
	if (tempLogParticle){
		waitUntil(meterParticlePublish);
   d413c:	f7ff ffe6 	bl	d410c <_Z20meterParticlePublishv>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d4140:	b1f0      	cbz	r0, d4180 <_Z7logData6StringS_bb.part.8+0x4c>
   d4142:	f7ff ffe3 	bl	d410c <_Z20meterParticlePublishv>
   d4146:	4b11      	ldr	r3, [pc, #68]	; (d418c <_Z7logData6StringS_bb.part.8+0x58>)
   d4148:	6821      	ldr	r1, [r4, #0]
   d414a:	781b      	ldrb	r3, [r3, #0]
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d414c:	f88d 3000 	strb.w	r3, [sp]
   d4150:	682a      	ldr	r2, [r5, #0]
   d4152:	233c      	movs	r3, #60	; 0x3c
   d4154:	a802      	add	r0, sp, #8
   d4156:	f000 fd2d 	bl	d4bb4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d415a:	9c03      	ldr	r4, [sp, #12]
   d415c:	b19c      	cbz	r4, d4186 <_Z7logData6StringS_bb.part.8+0x52>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d415e:	6863      	ldr	r3, [r4, #4]
   d4160:	3b01      	subs	r3, #1
   d4162:	6063      	str	r3, [r4, #4]
   d4164:	b97b      	cbnz	r3, d4186 <_Z7logData6StringS_bb.part.8+0x52>
        {
          _M_dispose();
   d4166:	6823      	ldr	r3, [r4, #0]
   d4168:	4620      	mov	r0, r4
   d416a:	689b      	ldr	r3, [r3, #8]
   d416c:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d416e:	68a3      	ldr	r3, [r4, #8]
   d4170:	3b01      	subs	r3, #1
   d4172:	60a3      	str	r3, [r4, #8]
   d4174:	b93b      	cbnz	r3, d4186 <_Z7logData6StringS_bb.part.8+0x52>
            _M_destroy();
   d4176:	6823      	ldr	r3, [r4, #0]
   d4178:	4620      	mov	r0, r4
   d417a:	68db      	ldr	r3, [r3, #12]
   d417c:	4798      	blx	r3
   d417e:	e002      	b.n	d4186 <_Z7logData6StringS_bb.part.8+0x52>
            spark_process();
   d4180:	f000 fabe 	bl	d4700 <spark_process>
   d4184:	e7da      	b.n	d413c <_Z7logData6StringS_bb.part.8+0x8>
		Particle.publish(tempEvent, tempData, 60, PRIVATE);
	}
	return true;
}
   d4186:	2000      	movs	r0, #0
   d4188:	b005      	add	sp, #20
   d418a:	bd30      	pop	{r4, r5, pc}
   d418c:	2003e4bc 	.word	0x2003e4bc

000d4190 <_Z7logData6StringS_bb>:
    // delay(2000);
  }
}


bool logData(String tempEvent, String tempData, bool tempLogSerial, bool tempLogParticle){
   d4190:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d4192:	4604      	mov	r4, r0
   d4194:	460d      	mov	r5, r1
   d4196:	461e      	mov	r6, r3
	if (tempLogSerial){
   d4198:	b18a      	cbz	r2, d41be <_Z7logData6StringS_bb+0x2e>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d419a:	4601      	mov	r1, r0
   d419c:	4668      	mov	r0, sp
   d419e:	f001 f9c7 	bl	d5530 <_ZN6StringC1ERKS_>
		Log.info(tempEvent + ": " + tempData);
   d41a2:	490b      	ldr	r1, [pc, #44]	; (d41d0 <_Z7logData6StringS_bb+0x40>)
   d41a4:	4668      	mov	r0, sp
   d41a6:	f001 fa02 	bl	d55ae <_ZplRK15StringSumHelperPKc>
   d41aa:	4629      	mov	r1, r5
   d41ac:	f001 f9f3 	bl	d5596 <_ZplRK15StringSumHelperRK6String>
   d41b0:	6801      	ldr	r1, [r0, #0]
   d41b2:	4808      	ldr	r0, [pc, #32]	; (d41d4 <_Z7logData6StringS_bb+0x44>)
   d41b4:	f7ff ff7d 	bl	d40b2 <_ZNK5spark6Logger4infoEPKcz>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d41b8:	4668      	mov	r0, sp
   d41ba:	f001 f950 	bl	d545e <_ZN6StringD1Ev>
	}
	if (tempLogParticle){
   d41be:	b11e      	cbz	r6, d41c8 <_Z7logData6StringS_bb+0x38>
   d41c0:	4629      	mov	r1, r5
   d41c2:	4620      	mov	r0, r4
   d41c4:	f7ff ffb6 	bl	d4134 <_Z7logData6StringS_bb.part.8>
		waitUntil(meterParticlePublish);
		Particle.publish(tempEvent, tempData, 60, PRIVATE);
	}
	return true;
}
   d41c8:	2001      	movs	r0, #1
   d41ca:	b004      	add	sp, #16
   d41cc:	bd70      	pop	{r4, r5, r6, pc}
   d41ce:	bf00      	nop
   d41d0:	000d60b2 	.word	0x000d60b2
   d41d4:	2003e4e4 	.word	0x2003e4e4

000d41d8 <loop>:
	pinMode(BUILT_IN_LED, OUTPUT);
	pinMode(ANALOG_DETECTOR, INPUT);
	pinMode(DIGITAL_DETECTOR, INPUT);
}

void loop() {
   d41d8:	b5f0      	push	{r4, r5, r6, r7, lr}
	analogValue = analogRead(ANALOG_DETECTOR);
   d41da:	2013      	movs	r0, #19
	pinMode(BUILT_IN_LED, OUTPUT);
	pinMode(ANALOG_DETECTOR, INPUT);
	pinMode(DIGITAL_DETECTOR, INPUT);
}

void loop() {
   d41dc:	b08b      	sub	sp, #44	; 0x2c
	analogValue = analogRead(ANALOG_DETECTOR);
   d41de:	f001 fc50 	bl	d5a82 <analogRead>
  digitalValue = map(analogValue, minValue, maxValue, 0, 100);
   d41e2:	2364      	movs	r3, #100	; 0x64
   d41e4:	4a56      	ldr	r2, [pc, #344]	; (d4340 <loop+0x168>)
   d41e6:	4957      	ldr	r1, [pc, #348]	; (d4344 <loop+0x16c>)
   d41e8:	9300      	str	r3, [sp, #0]
	pinMode(ANALOG_DETECTOR, INPUT);
	pinMode(DIGITAL_DETECTOR, INPUT);
}

void loop() {
	analogValue = analogRead(ANALOG_DETECTOR);
   d41ea:	4e57      	ldr	r6, [pc, #348]	; (d4348 <loop+0x170>)
  digitalValue = map(analogValue, minValue, maxValue, 0, 100);
   d41ec:	6812      	ldr	r2, [r2, #0]
   d41ee:	6809      	ldr	r1, [r1, #0]
	pinMode(ANALOG_DETECTOR, INPUT);
	pinMode(DIGITAL_DETECTOR, INPUT);
}

void loop() {
	analogValue = analogRead(ANALOG_DETECTOR);
   d41f0:	6030      	str	r0, [r6, #0]
  digitalValue = map(analogValue, minValue, maxValue, 0, 100);
   d41f2:	2300      	movs	r3, #0
   d41f4:	f000 fb24 	bl	d4840 <_Z3mapiiiii>
   d41f8:	4d54      	ldr	r5, [pc, #336]	; (d434c <loop+0x174>)
   d41fa:	6028      	str	r0, [r5, #0]
  // analogValueString = String(analogValue);
	// digitalValue = digitalRead(DIGITAL_DETECTOR);
  // digitalValueString = String(digitalValue);

  // Serial.println("Sample:");
  Serial.println(analogValue);
   d41fc:	f001 fb44 	bl	d5888 <_Z16_fetch_usbserialv>
   d4200:	6834      	ldr	r4, [r6, #0]
        return write(n);
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
   d4202:	2c00      	cmp	r4, #0
   d4204:	4607      	mov	r7, r0
   d4206:	da04      	bge.n	d4212 <loop+0x3a>
            t = print('-');
   d4208:	212d      	movs	r1, #45	; 0x2d
   d420a:	f001 f8d7 	bl	d53bc <_ZN5Print5printEc>
            val = -n;
   d420e:	4261      	negs	r1, r4
   d4210:	e000      	b.n	d4214 <loop+0x3c>
        } else {
            val = n;
   d4212:	4621      	mov	r1, r4
        }
        return printNumber(val, base) + t;
   d4214:	220a      	movs	r2, #10
   d4216:	4638      	mov	r0, r7
   d4218:	f001 f8df 	bl	d53da <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
   d421c:	4638      	mov	r0, r7
   d421e:	f001 f8d0 	bl	d53c2 <_ZN5Print7printlnEv>
  Serial.println(digitalValue);
   d4222:	f001 fb31 	bl	d5888 <_Z16_fetch_usbserialv>
   d4226:	682c      	ldr	r4, [r5, #0]
        return write(n);
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
   d4228:	2c00      	cmp	r4, #0
   d422a:	4607      	mov	r7, r0
   d422c:	da04      	bge.n	d4238 <loop+0x60>
            t = print('-');
   d422e:	212d      	movs	r1, #45	; 0x2d
   d4230:	f001 f8c4 	bl	d53bc <_ZN5Print5printEc>
            val = -n;
   d4234:	4261      	negs	r1, r4
   d4236:	e000      	b.n	d423a <loop+0x62>
        } else {
            val = n;
   d4238:	4621      	mov	r1, r4
        }
        return printNumber(val, base) + t;
   d423a:	220a      	movs	r2, #10
   d423c:	4638      	mov	r0, r7
   d423e:	f001 f8cc 	bl	d53da <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
   d4242:	4638      	mov	r0, r7
   d4244:	f001 f8bd 	bl	d53c2 <_ZN5Print7printlnEv>
  // Serial.println(digitalValue);
  // Serial.println(" ");


  if(analogValue > 0){
   d4248:	6833      	ldr	r3, [r6, #0]
   d424a:	2b00      	cmp	r3, #0
   d424c:	dd76      	ble.n	d433c <loop+0x164>
    feedName = "Garden-Lady-Bug-04-Cap";
   d424e:	4940      	ldr	r1, [pc, #256]	; (d4350 <loop+0x178>)
   d4250:	4840      	ldr	r0, [pc, #256]	; (d4354 <loop+0x17c>)
   d4252:	f001 f978 	bl	d5546 <_ZN6StringaSEPKc>
    feedID = "6cUonqXsLchfn8t5F6UsUrxF58qE";
   d4256:	4940      	ldr	r1, [pc, #256]	; (d4358 <loop+0x180>)
   d4258:	4840      	ldr	r0, [pc, #256]	; (d435c <loop+0x184>)
   d425a:	f001 f974 	bl	d5546 <_ZN6StringaSEPKc>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   d425e:	4940      	ldr	r1, [pc, #256]	; (d4360 <loop+0x188>)
   d4260:	a806      	add	r0, sp, #24
   d4262:	f001 f943 	bl	d54ec <_ZN6StringC1EPK19__FlashStringHelper>
    feedData = "{ \"value\": \"" + String::format("%d", analogValue) + "\", \"feedID\": \"" + feedID + "\"}";
   d4266:	4b38      	ldr	r3, [pc, #224]	; (d4348 <loop+0x170>)
   d4268:	493e      	ldr	r1, [pc, #248]	; (d4364 <loop+0x18c>)
   d426a:	681a      	ldr	r2, [r3, #0]
   d426c:	a802      	add	r0, sp, #8
   d426e:	f001 f9b1 	bl	d55d4 <_ZN6String6formatEPKcz>
   d4272:	a902      	add	r1, sp, #8
   d4274:	a806      	add	r0, sp, #24
   d4276:	f001 f98e 	bl	d5596 <_ZplRK15StringSumHelperRK6String>
   d427a:	493b      	ldr	r1, [pc, #236]	; (d4368 <loop+0x190>)
   d427c:	f001 f997 	bl	d55ae <_ZplRK15StringSumHelperPKc>
   d4280:	4936      	ldr	r1, [pc, #216]	; (d435c <loop+0x184>)
   d4282:	f001 f988 	bl	d5596 <_ZplRK15StringSumHelperRK6String>
   d4286:	4939      	ldr	r1, [pc, #228]	; (d436c <loop+0x194>)
   d4288:	f001 f991 	bl	d55ae <_ZplRK15StringSumHelperPKc>
   d428c:	4601      	mov	r1, r0
   d428e:	4838      	ldr	r0, [pc, #224]	; (d4370 <loop+0x198>)
   d4290:	f001 f93f 	bl	d5512 <_ZN6StringaSERKS_>
   d4294:	a802      	add	r0, sp, #8
   d4296:	f001 f8e2 	bl	d545e <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d429a:	a806      	add	r0, sp, #24
   d429c:	f001 f8df 	bl	d545e <_ZN6StringD1Ev>
    logData(feedName, feedData, true, true);
   d42a0:	492c      	ldr	r1, [pc, #176]	; (d4354 <loop+0x17c>)
   d42a2:	a802      	add	r0, sp, #8
   d42a4:	f001 f944 	bl	d5530 <_ZN6StringC1ERKS_>
   d42a8:	4931      	ldr	r1, [pc, #196]	; (d4370 <loop+0x198>)
   d42aa:	a806      	add	r0, sp, #24
   d42ac:	f001 f940 	bl	d5530 <_ZN6StringC1ERKS_>
   d42b0:	2301      	movs	r3, #1
   d42b2:	461a      	mov	r2, r3
   d42b4:	a906      	add	r1, sp, #24
   d42b6:	a802      	add	r0, sp, #8
   d42b8:	f7ff ff6a 	bl	d4190 <_Z7logData6StringS_bb>
   d42bc:	a806      	add	r0, sp, #24
   d42be:	f001 f8ce 	bl	d545e <_ZN6StringD1Ev>
   d42c2:	a802      	add	r0, sp, #8
   d42c4:	f001 f8cb 	bl	d545e <_ZN6StringD1Ev>

    feedName = "Garden-Lady-Bug-04-Cap-Percentage";
   d42c8:	492a      	ldr	r1, [pc, #168]	; (d4374 <loop+0x19c>)
   d42ca:	4822      	ldr	r0, [pc, #136]	; (d4354 <loop+0x17c>)
   d42cc:	f001 f93b 	bl	d5546 <_ZN6StringaSEPKc>
    feedID = "n8epcPsCFksb9UWYtgXtoe4Kjhkv";
   d42d0:	4929      	ldr	r1, [pc, #164]	; (d4378 <loop+0x1a0>)
   d42d2:	4822      	ldr	r0, [pc, #136]	; (d435c <loop+0x184>)
   d42d4:	f001 f937 	bl	d5546 <_ZN6StringaSEPKc>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   d42d8:	4921      	ldr	r1, [pc, #132]	; (d4360 <loop+0x188>)
   d42da:	a806      	add	r0, sp, #24
   d42dc:	f001 f906 	bl	d54ec <_ZN6StringC1EPK19__FlashStringHelper>
    feedData = "{ \"value\": \"" + String::format("%d", digitalValue) + "\", \"feedID\": \"" + feedID + "\"}";
   d42e0:	682a      	ldr	r2, [r5, #0]
   d42e2:	4920      	ldr	r1, [pc, #128]	; (d4364 <loop+0x18c>)
   d42e4:	a802      	add	r0, sp, #8
   d42e6:	f001 f975 	bl	d55d4 <_ZN6String6formatEPKcz>
   d42ea:	a902      	add	r1, sp, #8
   d42ec:	a806      	add	r0, sp, #24
   d42ee:	f001 f952 	bl	d5596 <_ZplRK15StringSumHelperRK6String>
   d42f2:	491d      	ldr	r1, [pc, #116]	; (d4368 <loop+0x190>)
   d42f4:	f001 f95b 	bl	d55ae <_ZplRK15StringSumHelperPKc>
   d42f8:	4918      	ldr	r1, [pc, #96]	; (d435c <loop+0x184>)
   d42fa:	f001 f94c 	bl	d5596 <_ZplRK15StringSumHelperRK6String>
   d42fe:	491b      	ldr	r1, [pc, #108]	; (d436c <loop+0x194>)
   d4300:	f001 f955 	bl	d55ae <_ZplRK15StringSumHelperPKc>
   d4304:	4601      	mov	r1, r0
   d4306:	481a      	ldr	r0, [pc, #104]	; (d4370 <loop+0x198>)
   d4308:	f001 f903 	bl	d5512 <_ZN6StringaSERKS_>
   d430c:	a802      	add	r0, sp, #8
   d430e:	f001 f8a6 	bl	d545e <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d4312:	a806      	add	r0, sp, #24
   d4314:	f001 f8a3 	bl	d545e <_ZN6StringD1Ev>
    logData(feedName, feedData, false, true);    
   d4318:	490e      	ldr	r1, [pc, #56]	; (d4354 <loop+0x17c>)
   d431a:	a802      	add	r0, sp, #8
   d431c:	f001 f908 	bl	d5530 <_ZN6StringC1ERKS_>
   d4320:	4913      	ldr	r1, [pc, #76]	; (d4370 <loop+0x198>)
   d4322:	a806      	add	r0, sp, #24
   d4324:	f001 f904 	bl	d5530 <_ZN6StringC1ERKS_>
   d4328:	a906      	add	r1, sp, #24
   d432a:	a802      	add	r0, sp, #8
   d432c:	f7ff ff02 	bl	d4134 <_Z7logData6StringS_bb.part.8>
   d4330:	a806      	add	r0, sp, #24
   d4332:	f001 f894 	bl	d545e <_ZN6StringD1Ev>
   d4336:	a802      	add	r0, sp, #8
   d4338:	f001 f891 	bl	d545e <_ZN6StringD1Ev>

    // delay(2000);
  }
}
   d433c:	b00b      	add	sp, #44	; 0x2c
   d433e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4340:	2003e404 	.word	0x2003e404
   d4344:	2003e4d0 	.word	0x2003e4d0
   d4348:	2003e474 	.word	0x2003e474
   d434c:	2003e478 	.word	0x2003e478
   d4350:	000d5f08 	.word	0x000d5f08
   d4354:	2003e4c0 	.word	0x2003e4c0
   d4358:	000d5f1f 	.word	0x000d5f1f
   d435c:	2003e48c 	.word	0x2003e48c
   d4360:	000d5f3c 	.word	0x000d5f3c
   d4364:	000d5f49 	.word	0x000d5f49
   d4368:	000d5f4c 	.word	0x000d5f4c
   d436c:	000d5f5b 	.word	0x000d5f5b
   d4370:	2003e49c 	.word	0x2003e49c
   d4374:	000d5f5e 	.word	0x000d5f5e
   d4378:	000d5f80 	.word	0x000d5f80

000d437c <_GLOBAL__sub_I_minValue>:
		digitalWrite(ANTSW1, 0);
	#else
		digitalWrite(ANTSW1, 0);
		digitalWrite(ANTSW2, 1);
	#endif
   d437c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d437e:	4b20      	ldr	r3, [pc, #128]	; (d4400 <_GLOBAL__sub_I_minValue+0x84>)
int minValue = 0;
int maxValue = 4096;


int analogValue = 0;
String analogValueString = "0";
   d4380:	4f20      	ldr	r7, [pc, #128]	; (d4404 <_GLOBAL__sub_I_minValue+0x88>)
   d4382:	4e21      	ldr	r6, [pc, #132]	; (d4408 <_GLOBAL__sub_I_minValue+0x8c>)
   d4384:	4d21      	ldr	r5, [pc, #132]	; (d440c <_GLOBAL__sub_I_minValue+0x90>)
   d4386:	2401      	movs	r4, #1
   d4388:	701c      	strb	r4, [r3, #0]

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d438a:	f000 f885 	bl	d4498 <HAL_Pin_Map>
//                            //
//        Greenhouse          //
//                            //
////////////////////////////////

SYSTEM_THREAD(ENABLED)
   d438e:	4620      	mov	r0, r4
   d4390:	2100      	movs	r1, #0
int minValue = 0;
int maxValue = 4096;


int analogValue = 0;
String analogValueString = "0";
   d4392:	4c1f      	ldr	r4, [pc, #124]	; (d4410 <_GLOBAL__sub_I_minValue+0x94>)
//                            //
//        Greenhouse          //
//                            //
////////////////////////////////

SYSTEM_THREAD(ENABLED)
   d4394:	f000 f988 	bl	d46a8 <system_thread_set_state>
int minValue = 0;
int maxValue = 4096;


int analogValue = 0;
String analogValueString = "0";
   d4398:	4639      	mov	r1, r7
   d439a:	4630      	mov	r0, r6
   d439c:	f001 f8a6 	bl	d54ec <_ZN6StringC1EPK19__FlashStringHelper>
   d43a0:	4630      	mov	r0, r6
int digitalValue = 0;
String digitalValueString = "0";
   d43a2:	4e1c      	ldr	r6, [pc, #112]	; (d4414 <_GLOBAL__sub_I_minValue+0x98>)
int minValue = 0;
int maxValue = 4096;


int analogValue = 0;
String analogValueString = "0";
   d43a4:	462a      	mov	r2, r5
   d43a6:	4621      	mov	r1, r4
   d43a8:	f001 fbc2 	bl	d5b30 <__aeabi_atexit>
int digitalValue = 0;
String digitalValueString = "0";
   d43ac:	4639      	mov	r1, r7
   d43ae:	4630      	mov	r0, r6
   d43b0:	f001 f89c 	bl	d54ec <_ZN6StringC1EPK19__FlashStringHelper>

String feedName;
   d43b4:	4f18      	ldr	r7, [pc, #96]	; (d4418 <_GLOBAL__sub_I_minValue+0x9c>)


int analogValue = 0;
String analogValueString = "0";
int digitalValue = 0;
String digitalValueString = "0";
   d43b6:	4630      	mov	r0, r6

String feedName;
   d43b8:	4e18      	ldr	r6, [pc, #96]	; (d441c <_GLOBAL__sub_I_minValue+0xa0>)


int analogValue = 0;
String analogValueString = "0";
int digitalValue = 0;
String digitalValueString = "0";
   d43ba:	462a      	mov	r2, r5
   d43bc:	4621      	mov	r1, r4
   d43be:	f001 fbb7 	bl	d5b30 <__aeabi_atexit>

String feedName;
   d43c2:	4631      	mov	r1, r6
   d43c4:	4638      	mov	r0, r7
   d43c6:	f001 f891 	bl	d54ec <_ZN6StringC1EPK19__FlashStringHelper>
   d43ca:	4638      	mov	r0, r7
String feedID;
   d43cc:	4f14      	ldr	r7, [pc, #80]	; (d4420 <_GLOBAL__sub_I_minValue+0xa4>)
int analogValue = 0;
String analogValueString = "0";
int digitalValue = 0;
String digitalValueString = "0";

String feedName;
   d43ce:	462a      	mov	r2, r5
   d43d0:	4621      	mov	r1, r4
   d43d2:	f001 fbad 	bl	d5b30 <__aeabi_atexit>
String feedID;
   d43d6:	4631      	mov	r1, r6
   d43d8:	4638      	mov	r0, r7
   d43da:	f001 f887 	bl	d54ec <_ZN6StringC1EPK19__FlashStringHelper>
   d43de:	4638      	mov	r0, r7
String feedData;
   d43e0:	4f10      	ldr	r7, [pc, #64]	; (d4424 <_GLOBAL__sub_I_minValue+0xa8>)
String analogValueString = "0";
int digitalValue = 0;
String digitalValueString = "0";

String feedName;
String feedID;
   d43e2:	462a      	mov	r2, r5
   d43e4:	4621      	mov	r1, r4
   d43e6:	f001 fba3 	bl	d5b30 <__aeabi_atexit>
String feedData;
   d43ea:	4631      	mov	r1, r6
   d43ec:	4638      	mov	r0, r7
   d43ee:	f001 f87d 	bl	d54ec <_ZN6StringC1EPK19__FlashStringHelper>
   d43f2:	462a      	mov	r2, r5
   d43f4:	4621      	mov	r1, r4
   d43f6:	4638      	mov	r0, r7
		digitalWrite(ANTSW1, 0);
	#else
		digitalWrite(ANTSW1, 0);
		digitalWrite(ANTSW2, 1);
	#endif
   d43f8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
int digitalValue = 0;
String digitalValueString = "0";

String feedName;
String feedID;
String feedData;
   d43fc:	f001 bb98 	b.w	d5b30 <__aeabi_atexit>
   d4400:	2003e4bc 	.word	0x2003e4bc
   d4404:	000d5f9d 	.word	0x000d5f9d
   d4408:	2003e47c 	.word	0x2003e47c
   d440c:	2003e470 	.word	0x2003e470
   d4410:	000d545f 	.word	0x000d545f
   d4414:	2003e4ac 	.word	0x2003e4ac
   d4418:	2003e4c0 	.word	0x2003e4c0
   d441c:	000d60d0 	.word	0x000d60d0
   d4420:	2003e48c 	.word	0x2003e48c
   d4424:	2003e49c 	.word	0x2003e49c

000d4428 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d4428:	b508      	push	{r3, lr}
   d442a:	4b02      	ldr	r3, [pc, #8]	; (d4434 <os_thread_is_current+0xc>)
   d442c:	681b      	ldr	r3, [r3, #0]
   d442e:	689b      	ldr	r3, [r3, #8]
   d4430:	9301      	str	r3, [sp, #4]
   d4432:	bd08      	pop	{r3, pc}
   d4434:	00030248 	.word	0x00030248

000d4438 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d4438:	b508      	push	{r3, lr}
   d443a:	4b02      	ldr	r3, [pc, #8]	; (d4444 <os_thread_join+0xc>)
   d443c:	681b      	ldr	r3, [r3, #0]
   d443e:	691b      	ldr	r3, [r3, #16]
   d4440:	9301      	str	r3, [sp, #4]
   d4442:	bd08      	pop	{r3, pc}
   d4444:	00030248 	.word	0x00030248

000d4448 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d4448:	b508      	push	{r3, lr}
   d444a:	4b02      	ldr	r3, [pc, #8]	; (d4454 <os_thread_cleanup+0xc>)
   d444c:	681b      	ldr	r3, [r3, #0]
   d444e:	695b      	ldr	r3, [r3, #20]
   d4450:	9301      	str	r3, [sp, #4]
   d4452:	bd08      	pop	{r3, pc}
   d4454:	00030248 	.word	0x00030248

000d4458 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4458:	b508      	push	{r3, lr}
   d445a:	4b02      	ldr	r3, [pc, #8]	; (d4464 <os_mutex_recursive_create+0xc>)
   d445c:	681b      	ldr	r3, [r3, #0]
   d445e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4460:	9301      	str	r3, [sp, #4]
   d4462:	bd08      	pop	{r3, pc}
   d4464:	00030248 	.word	0x00030248

000d4468 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d4468:	b508      	push	{r3, lr}
   d446a:	4b02      	ldr	r3, [pc, #8]	; (d4474 <os_mutex_recursive_destroy+0xc>)
   d446c:	681b      	ldr	r3, [r3, #0]
   d446e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d4470:	9301      	str	r3, [sp, #4]
   d4472:	bd08      	pop	{r3, pc}
   d4474:	00030248 	.word	0x00030248

000d4478 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d4478:	b508      	push	{r3, lr}
   d447a:	4b02      	ldr	r3, [pc, #8]	; (d4484 <HAL_RNG_GetRandomNumber+0xc>)
   d447c:	681b      	ldr	r3, [r3, #0]
   d447e:	685b      	ldr	r3, [r3, #4]
   d4480:	9301      	str	r3, [sp, #4]
   d4482:	bd08      	pop	{r3, pc}
   d4484:	00030218 	.word	0x00030218

000d4488 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4488:	b508      	push	{r3, lr}
   d448a:	4b02      	ldr	r3, [pc, #8]	; (d4494 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d448c:	681b      	ldr	r3, [r3, #0]
   d448e:	695b      	ldr	r3, [r3, #20]
   d4490:	9301      	str	r3, [sp, #4]
   d4492:	bd08      	pop	{r3, pc}
   d4494:	00030218 	.word	0x00030218

000d4498 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d4498:	b508      	push	{r3, lr}
   d449a:	4b02      	ldr	r3, [pc, #8]	; (d44a4 <HAL_Pin_Map+0xc>)
   d449c:	681b      	ldr	r3, [r3, #0]
   d449e:	681b      	ldr	r3, [r3, #0]
   d44a0:	9301      	str	r3, [sp, #4]
   d44a2:	bd08      	pop	{r3, pc}
   d44a4:	0003022c 	.word	0x0003022c

000d44a8 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d44a8:	b508      	push	{r3, lr}
   d44aa:	4b02      	ldr	r3, [pc, #8]	; (d44b4 <HAL_Validate_Pin_Function+0xc>)
   d44ac:	681b      	ldr	r3, [r3, #0]
   d44ae:	685b      	ldr	r3, [r3, #4]
   d44b0:	9301      	str	r3, [sp, #4]
   d44b2:	bd08      	pop	{r3, pc}
   d44b4:	0003022c 	.word	0x0003022c

000d44b8 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d44b8:	b508      	push	{r3, lr}
   d44ba:	4b02      	ldr	r3, [pc, #8]	; (d44c4 <HAL_Pin_Mode+0xc>)
   d44bc:	681b      	ldr	r3, [r3, #0]
   d44be:	689b      	ldr	r3, [r3, #8]
   d44c0:	9301      	str	r3, [sp, #4]
   d44c2:	bd08      	pop	{r3, pc}
   d44c4:	0003022c 	.word	0x0003022c

000d44c8 <HAL_ADC_Read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
   d44c8:	b508      	push	{r3, lr}
   d44ca:	4b02      	ldr	r3, [pc, #8]	; (d44d4 <HAL_ADC_Read+0xc>)
   d44cc:	681b      	ldr	r3, [r3, #0]
   d44ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d44d0:	9301      	str	r3, [sp, #4]
   d44d2:	bd08      	pop	{r3, pc}
   d44d4:	0003022c 	.word	0x0003022c

000d44d8 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d44d8:	b508      	push	{r3, lr}
   d44da:	4b02      	ldr	r3, [pc, #8]	; (d44e4 <HAL_I2C_Write_Data+0xc>)
   d44dc:	681b      	ldr	r3, [r3, #0]
   d44de:	6a1b      	ldr	r3, [r3, #32]
   d44e0:	9301      	str	r3, [sp, #4]
   d44e2:	bd08      	pop	{r3, pc}
   d44e4:	00030228 	.word	0x00030228

000d44e8 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d44e8:	b508      	push	{r3, lr}
   d44ea:	4b02      	ldr	r3, [pc, #8]	; (d44f4 <HAL_I2C_Available_Data+0xc>)
   d44ec:	681b      	ldr	r3, [r3, #0]
   d44ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d44f0:	9301      	str	r3, [sp, #4]
   d44f2:	bd08      	pop	{r3, pc}
   d44f4:	00030228 	.word	0x00030228

000d44f8 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d44f8:	b508      	push	{r3, lr}
   d44fa:	4b02      	ldr	r3, [pc, #8]	; (d4504 <HAL_I2C_Read_Data+0xc>)
   d44fc:	681b      	ldr	r3, [r3, #0]
   d44fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4500:	9301      	str	r3, [sp, #4]
   d4502:	bd08      	pop	{r3, pc}
   d4504:	00030228 	.word	0x00030228

000d4508 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d4508:	b508      	push	{r3, lr}
   d450a:	4b02      	ldr	r3, [pc, #8]	; (d4514 <HAL_I2C_Peek_Data+0xc>)
   d450c:	681b      	ldr	r3, [r3, #0]
   d450e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4510:	9301      	str	r3, [sp, #4]
   d4512:	bd08      	pop	{r3, pc}
   d4514:	00030228 	.word	0x00030228

000d4518 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d4518:	b508      	push	{r3, lr}
   d451a:	4b02      	ldr	r3, [pc, #8]	; (d4524 <HAL_I2C_Flush_Data+0xc>)
   d451c:	681b      	ldr	r3, [r3, #0]
   d451e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4520:	9301      	str	r3, [sp, #4]
   d4522:	bd08      	pop	{r3, pc}
   d4524:	00030228 	.word	0x00030228

000d4528 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d4528:	b508      	push	{r3, lr}
   d452a:	4b02      	ldr	r3, [pc, #8]	; (d4534 <HAL_I2C_Is_Enabled+0xc>)
   d452c:	681b      	ldr	r3, [r3, #0]
   d452e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4530:	9301      	str	r3, [sp, #4]
   d4532:	bd08      	pop	{r3, pc}
   d4534:	00030228 	.word	0x00030228

000d4538 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
   d4538:	b508      	push	{r3, lr}
   d453a:	4b02      	ldr	r3, [pc, #8]	; (d4544 <HAL_I2C_Init+0xc>)
   d453c:	681b      	ldr	r3, [r3, #0]
   d453e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4540:	9301      	str	r3, [sp, #4]
   d4542:	bd08      	pop	{r3, pc}
   d4544:	00030228 	.word	0x00030228

000d4548 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d4548:	b508      	push	{r3, lr}
   d454a:	4b02      	ldr	r3, [pc, #8]	; (d4554 <inet_inet_ntop+0xc>)
   d454c:	681b      	ldr	r3, [r3, #0]
   d454e:	695b      	ldr	r3, [r3, #20]
   d4550:	9301      	str	r3, [sp, #4]
   d4552:	bd08      	pop	{r3, pc}
   d4554:	00030264 	.word	0x00030264

000d4558 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d4558:	b508      	push	{r3, lr}
   d455a:	4b02      	ldr	r3, [pc, #8]	; (d4564 <netdb_freeaddrinfo+0xc>)
   d455c:	681b      	ldr	r3, [r3, #0]
   d455e:	689b      	ldr	r3, [r3, #8]
   d4560:	9301      	str	r3, [sp, #4]
   d4562:	bd08      	pop	{r3, pc}
   d4564:	00030268 	.word	0x00030268

000d4568 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d4568:	b508      	push	{r3, lr}
   d456a:	4b02      	ldr	r3, [pc, #8]	; (d4574 <netdb_getaddrinfo+0xc>)
   d456c:	681b      	ldr	r3, [r3, #0]
   d456e:	68db      	ldr	r3, [r3, #12]
   d4570:	9301      	str	r3, [sp, #4]
   d4572:	bd08      	pop	{r3, pc}
   d4574:	00030268 	.word	0x00030268

000d4578 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d4578:	b508      	push	{r3, lr}
   d457a:	4b02      	ldr	r3, [pc, #8]	; (d4584 <HAL_SPI_Init+0xc>)
   d457c:	681b      	ldr	r3, [r3, #0]
   d457e:	69db      	ldr	r3, [r3, #28]
   d4580:	9301      	str	r3, [sp, #4]
   d4582:	bd08      	pop	{r3, pc}
   d4584:	00030230 	.word	0x00030230

000d4588 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d4588:	b508      	push	{r3, lr}
   d458a:	4b02      	ldr	r3, [pc, #8]	; (d4594 <HAL_SPI_Is_Enabled+0xc>)
   d458c:	681b      	ldr	r3, [r3, #0]
   d458e:	6a1b      	ldr	r3, [r3, #32]
   d4590:	9301      	str	r3, [sp, #4]
   d4592:	bd08      	pop	{r3, pc}
   d4594:	00030230 	.word	0x00030230

000d4598 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d4598:	b508      	push	{r3, lr}
   d459a:	4b02      	ldr	r3, [pc, #8]	; (d45a4 <HAL_USART_Init+0xc>)
   d459c:	681b      	ldr	r3, [r3, #0]
   d459e:	681b      	ldr	r3, [r3, #0]
   d45a0:	9301      	str	r3, [sp, #4]
   d45a2:	bd08      	pop	{r3, pc}
   d45a4:	0003023c 	.word	0x0003023c

000d45a8 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d45a8:	b508      	push	{r3, lr}
   d45aa:	4b02      	ldr	r3, [pc, #8]	; (d45b4 <HAL_USART_Write_Data+0xc>)
   d45ac:	681b      	ldr	r3, [r3, #0]
   d45ae:	68db      	ldr	r3, [r3, #12]
   d45b0:	9301      	str	r3, [sp, #4]
   d45b2:	bd08      	pop	{r3, pc}
   d45b4:	0003023c 	.word	0x0003023c

000d45b8 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d45b8:	b508      	push	{r3, lr}
   d45ba:	4b02      	ldr	r3, [pc, #8]	; (d45c4 <HAL_USART_Available_Data+0xc>)
   d45bc:	681b      	ldr	r3, [r3, #0]
   d45be:	691b      	ldr	r3, [r3, #16]
   d45c0:	9301      	str	r3, [sp, #4]
   d45c2:	bd08      	pop	{r3, pc}
   d45c4:	0003023c 	.word	0x0003023c

000d45c8 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d45c8:	b508      	push	{r3, lr}
   d45ca:	4b02      	ldr	r3, [pc, #8]	; (d45d4 <HAL_USART_Read_Data+0xc>)
   d45cc:	681b      	ldr	r3, [r3, #0]
   d45ce:	695b      	ldr	r3, [r3, #20]
   d45d0:	9301      	str	r3, [sp, #4]
   d45d2:	bd08      	pop	{r3, pc}
   d45d4:	0003023c 	.word	0x0003023c

000d45d8 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d45d8:	b508      	push	{r3, lr}
   d45da:	4b02      	ldr	r3, [pc, #8]	; (d45e4 <HAL_USART_Peek_Data+0xc>)
   d45dc:	681b      	ldr	r3, [r3, #0]
   d45de:	699b      	ldr	r3, [r3, #24]
   d45e0:	9301      	str	r3, [sp, #4]
   d45e2:	bd08      	pop	{r3, pc}
   d45e4:	0003023c 	.word	0x0003023c

000d45e8 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d45e8:	b508      	push	{r3, lr}
   d45ea:	4b02      	ldr	r3, [pc, #8]	; (d45f4 <HAL_USART_Flush_Data+0xc>)
   d45ec:	681b      	ldr	r3, [r3, #0]
   d45ee:	69db      	ldr	r3, [r3, #28]
   d45f0:	9301      	str	r3, [sp, #4]
   d45f2:	bd08      	pop	{r3, pc}
   d45f4:	0003023c 	.word	0x0003023c

000d45f8 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d45f8:	b508      	push	{r3, lr}
   d45fa:	4b02      	ldr	r3, [pc, #8]	; (d4604 <HAL_USART_Is_Enabled+0xc>)
   d45fc:	681b      	ldr	r3, [r3, #0]
   d45fe:	6a1b      	ldr	r3, [r3, #32]
   d4600:	9301      	str	r3, [sp, #4]
   d4602:	bd08      	pop	{r3, pc}
   d4604:	0003023c 	.word	0x0003023c

000d4608 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d4608:	b508      	push	{r3, lr}
   d460a:	4b02      	ldr	r3, [pc, #8]	; (d4614 <HAL_USART_Available_Data_For_Write+0xc>)
   d460c:	681b      	ldr	r3, [r3, #0]
   d460e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4610:	9301      	str	r3, [sp, #4]
   d4612:	bd08      	pop	{r3, pc}
   d4614:	0003023c 	.word	0x0003023c

000d4618 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4618:	b508      	push	{r3, lr}
   d461a:	4b02      	ldr	r3, [pc, #8]	; (d4624 <HAL_USB_USART_Init+0xc>)
   d461c:	681b      	ldr	r3, [r3, #0]
   d461e:	681b      	ldr	r3, [r3, #0]
   d4620:	9301      	str	r3, [sp, #4]
   d4622:	bd08      	pop	{r3, pc}
   d4624:	0003024c 	.word	0x0003024c

000d4628 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d4628:	b508      	push	{r3, lr}
   d462a:	4b02      	ldr	r3, [pc, #8]	; (d4634 <HAL_USB_USART_Begin+0xc>)
   d462c:	681b      	ldr	r3, [r3, #0]
   d462e:	685b      	ldr	r3, [r3, #4]
   d4630:	9301      	str	r3, [sp, #4]
   d4632:	bd08      	pop	{r3, pc}
   d4634:	0003024c 	.word	0x0003024c

000d4638 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d4638:	b508      	push	{r3, lr}
   d463a:	4b02      	ldr	r3, [pc, #8]	; (d4644 <HAL_USB_USART_Available_Data+0xc>)
   d463c:	681b      	ldr	r3, [r3, #0]
   d463e:	691b      	ldr	r3, [r3, #16]
   d4640:	9301      	str	r3, [sp, #4]
   d4642:	bd08      	pop	{r3, pc}
   d4644:	0003024c 	.word	0x0003024c

000d4648 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4648:	b508      	push	{r3, lr}
   d464a:	4b02      	ldr	r3, [pc, #8]	; (d4654 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d464c:	681b      	ldr	r3, [r3, #0]
   d464e:	695b      	ldr	r3, [r3, #20]
   d4650:	9301      	str	r3, [sp, #4]
   d4652:	bd08      	pop	{r3, pc}
   d4654:	0003024c 	.word	0x0003024c

000d4658 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4658:	b508      	push	{r3, lr}
   d465a:	4b02      	ldr	r3, [pc, #8]	; (d4664 <HAL_USB_USART_Receive_Data+0xc>)
   d465c:	681b      	ldr	r3, [r3, #0]
   d465e:	699b      	ldr	r3, [r3, #24]
   d4660:	9301      	str	r3, [sp, #4]
   d4662:	bd08      	pop	{r3, pc}
   d4664:	0003024c 	.word	0x0003024c

000d4668 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4668:	b508      	push	{r3, lr}
   d466a:	4b02      	ldr	r3, [pc, #8]	; (d4674 <HAL_USB_USART_Send_Data+0xc>)
   d466c:	681b      	ldr	r3, [r3, #0]
   d466e:	69db      	ldr	r3, [r3, #28]
   d4670:	9301      	str	r3, [sp, #4]
   d4672:	bd08      	pop	{r3, pc}
   d4674:	0003024c 	.word	0x0003024c

000d4678 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4678:	b508      	push	{r3, lr}
   d467a:	4b02      	ldr	r3, [pc, #8]	; (d4684 <HAL_USB_USART_Flush_Data+0xc>)
   d467c:	681b      	ldr	r3, [r3, #0]
   d467e:	6a1b      	ldr	r3, [r3, #32]
   d4680:	9301      	str	r3, [sp, #4]
   d4682:	bd08      	pop	{r3, pc}
   d4684:	0003024c 	.word	0x0003024c

000d4688 <log_message_v>:
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   d4688:	b508      	push	{r3, lr}
   d468a:	4b02      	ldr	r3, [pc, #8]	; (d4694 <log_message_v+0xc>)
   d468c:	681b      	ldr	r3, [r3, #0]
   d468e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d4690:	9301      	str	r3, [sp, #4]
   d4692:	bd08      	pop	{r3, pc}
   d4694:	00030260 	.word	0x00030260

000d4698 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4698:	b508      	push	{r3, lr}
   d469a:	4b02      	ldr	r3, [pc, #8]	; (d46a4 <set_system_mode+0xc>)
   d469c:	681b      	ldr	r3, [r3, #0]
   d469e:	685b      	ldr	r3, [r3, #4]
   d46a0:	9301      	str	r3, [sp, #4]
   d46a2:	bd08      	pop	{r3, pc}
   d46a4:	00030220 	.word	0x00030220

000d46a8 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d46a8:	b508      	push	{r3, lr}
   d46aa:	4b02      	ldr	r3, [pc, #8]	; (d46b4 <system_thread_set_state+0xc>)
   d46ac:	681b      	ldr	r3, [r3, #0]
   d46ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d46b0:	9301      	str	r3, [sp, #4]
   d46b2:	bd08      	pop	{r3, pc}
   d46b4:	00030220 	.word	0x00030220

000d46b8 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d46b8:	b508      	push	{r3, lr}
   d46ba:	4b02      	ldr	r3, [pc, #8]	; (d46c4 <application_thread_current+0xc>)
   d46bc:	681b      	ldr	r3, [r3, #0]
   d46be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d46c0:	9301      	str	r3, [sp, #4]
   d46c2:	bd08      	pop	{r3, pc}
   d46c4:	00030220 	.word	0x00030220

000d46c8 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d46c8:	b508      	push	{r3, lr}
   d46ca:	4b02      	ldr	r3, [pc, #8]	; (d46d4 <application_thread_invoke+0xc>)
   d46cc:	681b      	ldr	r3, [r3, #0]
   d46ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d46d0:	9301      	str	r3, [sp, #4]
   d46d2:	bd08      	pop	{r3, pc}
   d46d4:	00030220 	.word	0x00030220

000d46d8 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d46d8:	b508      	push	{r3, lr}
   d46da:	4b03      	ldr	r3, [pc, #12]	; (d46e8 <system_ctrl_set_app_request_handler+0x10>)
   d46dc:	681b      	ldr	r3, [r3, #0]
   d46de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d46e2:	9301      	str	r3, [sp, #4]
   d46e4:	bd08      	pop	{r3, pc}
   d46e6:	0000      	.short	0x0000
   d46e8:	00030220 	.word	0x00030220

000d46ec <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d46ec:	b508      	push	{r3, lr}
   d46ee:	4b03      	ldr	r3, [pc, #12]	; (d46fc <system_ctrl_set_result+0x10>)
   d46f0:	681b      	ldr	r3, [r3, #0]
   d46f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d46f6:	9301      	str	r3, [sp, #4]
   d46f8:	bd08      	pop	{r3, pc}
   d46fa:	0000      	.short	0x0000
   d46fc:	00030220 	.word	0x00030220

000d4700 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d4700:	b508      	push	{r3, lr}
   d4702:	4b02      	ldr	r3, [pc, #8]	; (d470c <spark_process+0xc>)
   d4704:	681b      	ldr	r3, [r3, #0]
   d4706:	689b      	ldr	r3, [r3, #8]
   d4708:	9301      	str	r3, [sp, #4]
   d470a:	bd08      	pop	{r3, pc}
   d470c:	00030244 	.word	0x00030244

000d4710 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d4710:	b508      	push	{r3, lr}
   d4712:	4b02      	ldr	r3, [pc, #8]	; (d471c <spark_cloud_flag_connected+0xc>)
   d4714:	681b      	ldr	r3, [r3, #0]
   d4716:	695b      	ldr	r3, [r3, #20]
   d4718:	9301      	str	r3, [sp, #4]
   d471a:	bd08      	pop	{r3, pc}
   d471c:	00030244 	.word	0x00030244

000d4720 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d4720:	b508      	push	{r3, lr}
   d4722:	4b02      	ldr	r3, [pc, #8]	; (d472c <spark_send_event+0xc>)
   d4724:	681b      	ldr	r3, [r3, #0]
   d4726:	6a1b      	ldr	r3, [r3, #32]
   d4728:	9301      	str	r3, [sp, #4]
   d472a:	bd08      	pop	{r3, pc}
   d472c:	00030244 	.word	0x00030244

000d4730 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d4730:	b508      	push	{r3, lr}
   d4732:	4b02      	ldr	r3, [pc, #8]	; (d473c <spark_set_random_seed_from_cloud_handler+0xc>)
   d4734:	681b      	ldr	r3, [r3, #0]
   d4736:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4738:	9301      	str	r3, [sp, #4]
   d473a:	bd08      	pop	{r3, pc}
   d473c:	00030244 	.word	0x00030244

000d4740 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d4740:	b508      	push	{r3, lr}
   d4742:	4b02      	ldr	r3, [pc, #8]	; (d474c <network_connect+0xc>)
   d4744:	681b      	ldr	r3, [r3, #0]
   d4746:	685b      	ldr	r3, [r3, #4]
   d4748:	9301      	str	r3, [sp, #4]
   d474a:	bd08      	pop	{r3, pc}
   d474c:	00030240 	.word	0x00030240

000d4750 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d4750:	b508      	push	{r3, lr}
   d4752:	4b02      	ldr	r3, [pc, #8]	; (d475c <network_connecting+0xc>)
   d4754:	681b      	ldr	r3, [r3, #0]
   d4756:	689b      	ldr	r3, [r3, #8]
   d4758:	9301      	str	r3, [sp, #4]
   d475a:	bd08      	pop	{r3, pc}
   d475c:	00030240 	.word	0x00030240

000d4760 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d4760:	b508      	push	{r3, lr}
   d4762:	4b02      	ldr	r3, [pc, #8]	; (d476c <network_disconnect+0xc>)
   d4764:	681b      	ldr	r3, [r3, #0]
   d4766:	68db      	ldr	r3, [r3, #12]
   d4768:	9301      	str	r3, [sp, #4]
   d476a:	bd08      	pop	{r3, pc}
   d476c:	00030240 	.word	0x00030240

000d4770 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d4770:	b508      	push	{r3, lr}
   d4772:	4b02      	ldr	r3, [pc, #8]	; (d477c <network_ready+0xc>)
   d4774:	681b      	ldr	r3, [r3, #0]
   d4776:	691b      	ldr	r3, [r3, #16]
   d4778:	9301      	str	r3, [sp, #4]
   d477a:	bd08      	pop	{r3, pc}
   d477c:	00030240 	.word	0x00030240

000d4780 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d4780:	b508      	push	{r3, lr}
   d4782:	4b02      	ldr	r3, [pc, #8]	; (d478c <network_on+0xc>)
   d4784:	681b      	ldr	r3, [r3, #0]
   d4786:	695b      	ldr	r3, [r3, #20]
   d4788:	9301      	str	r3, [sp, #4]
   d478a:	bd08      	pop	{r3, pc}
   d478c:	00030240 	.word	0x00030240

000d4790 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d4790:	b508      	push	{r3, lr}
   d4792:	4b02      	ldr	r3, [pc, #8]	; (d479c <network_off+0xc>)
   d4794:	681b      	ldr	r3, [r3, #0]
   d4796:	699b      	ldr	r3, [r3, #24]
   d4798:	9301      	str	r3, [sp, #4]
   d479a:	bd08      	pop	{r3, pc}
   d479c:	00030240 	.word	0x00030240

000d47a0 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d47a0:	b508      	push	{r3, lr}
   d47a2:	4b02      	ldr	r3, [pc, #8]	; (d47ac <network_listen+0xc>)
   d47a4:	681b      	ldr	r3, [r3, #0]
   d47a6:	69db      	ldr	r3, [r3, #28]
   d47a8:	9301      	str	r3, [sp, #4]
   d47aa:	bd08      	pop	{r3, pc}
   d47ac:	00030240 	.word	0x00030240

000d47b0 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d47b0:	b508      	push	{r3, lr}
   d47b2:	4b02      	ldr	r3, [pc, #8]	; (d47bc <network_listening+0xc>)
   d47b4:	681b      	ldr	r3, [r3, #0]
   d47b6:	6a1b      	ldr	r3, [r3, #32]
   d47b8:	9301      	str	r3, [sp, #4]
   d47ba:	bd08      	pop	{r3, pc}
   d47bc:	00030240 	.word	0x00030240

000d47c0 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d47c0:	b508      	push	{r3, lr}
   d47c2:	4b02      	ldr	r3, [pc, #8]	; (d47cc <network_set_listen_timeout+0xc>)
   d47c4:	681b      	ldr	r3, [r3, #0]
   d47c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d47c8:	9301      	str	r3, [sp, #4]
   d47ca:	bd08      	pop	{r3, pc}
   d47cc:	00030240 	.word	0x00030240

000d47d0 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d47d0:	b508      	push	{r3, lr}
   d47d2:	4b02      	ldr	r3, [pc, #8]	; (d47dc <network_get_listen_timeout+0xc>)
   d47d4:	681b      	ldr	r3, [r3, #0]
   d47d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d47d8:	9301      	str	r3, [sp, #4]
   d47da:	bd08      	pop	{r3, pc}
   d47dc:	00030240 	.word	0x00030240

000d47e0 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d47e0:	b508      	push	{r3, lr}
   d47e2:	4b02      	ldr	r3, [pc, #8]	; (d47ec <malloc+0xc>)
   d47e4:	681b      	ldr	r3, [r3, #0]
   d47e6:	681b      	ldr	r3, [r3, #0]
   d47e8:	9301      	str	r3, [sp, #4]
   d47ea:	bd08      	pop	{r3, pc}
   d47ec:	0003021c 	.word	0x0003021c

000d47f0 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d47f0:	b508      	push	{r3, lr}
   d47f2:	4b02      	ldr	r3, [pc, #8]	; (d47fc <free+0xc>)
   d47f4:	681b      	ldr	r3, [r3, #0]
   d47f6:	685b      	ldr	r3, [r3, #4]
   d47f8:	9301      	str	r3, [sp, #4]
   d47fa:	bd08      	pop	{r3, pc}
   d47fc:	0003021c 	.word	0x0003021c

000d4800 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d4800:	b508      	push	{r3, lr}
   d4802:	4b02      	ldr	r3, [pc, #8]	; (d480c <realloc+0xc>)
   d4804:	681b      	ldr	r3, [r3, #0]
   d4806:	689b      	ldr	r3, [r3, #8]
   d4808:	9301      	str	r3, [sp, #4]
   d480a:	bd08      	pop	{r3, pc}
   d480c:	0003021c 	.word	0x0003021c

000d4810 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d4810:	b508      	push	{r3, lr}
   d4812:	4b02      	ldr	r3, [pc, #8]	; (d481c <vsnprintf+0xc>)
   d4814:	681b      	ldr	r3, [r3, #0]
   d4816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4818:	9301      	str	r3, [sp, #4]
   d481a:	bd08      	pop	{r3, pc}
   d481c:	0003021c 	.word	0x0003021c

000d4820 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d4820:	b508      	push	{r3, lr}
   d4822:	4b02      	ldr	r3, [pc, #8]	; (d482c <abort+0xc>)
   d4824:	681b      	ldr	r3, [r3, #0]
   d4826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4828:	9301      	str	r3, [sp, #4]
   d482a:	bd08      	pop	{r3, pc}
   d482c:	0003021c 	.word	0x0003021c

000d4830 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d4830:	b508      	push	{r3, lr}
   d4832:	4b02      	ldr	r3, [pc, #8]	; (d483c <_malloc_r+0xc>)
   d4834:	681b      	ldr	r3, [r3, #0]
   d4836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4838:	9301      	str	r3, [sp, #4]
   d483a:	bd08      	pop	{r3, pc}
   d483c:	0003021c 	.word	0x0003021c

000d4840 <_Z3mapiiiii>:
    HAL_ADC_Set_Sample_Time(ADC_SampleTime);
}

int map(int value, int fromStart, int fromEnd, int toStart, int toEnd)
{
    if (fromEnd == fromStart) {
   d4840:	428a      	cmp	r2, r1
{
    HAL_ADC_Set_Sample_Time(ADC_SampleTime);
}

int map(int value, int fromStart, int fromEnd, int toStart, int toEnd)
{
   d4842:	b530      	push	{r4, r5, lr}
    if (fromEnd == fromStart) {
   d4844:	d007      	beq.n	d4856 <_Z3mapiiiii+0x16>
        return value;
    }
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
   d4846:	9d03      	ldr	r5, [sp, #12]
   d4848:	1a44      	subs	r4, r0, r1
   d484a:	1aed      	subs	r5, r5, r3
   d484c:	436c      	muls	r4, r5
   d484e:	1a52      	subs	r2, r2, r1
   d4850:	fb94 f4f2 	sdiv	r4, r4, r2
   d4854:	18e0      	adds	r0, r4, r3
}
   d4856:	bd30      	pop	{r4, r5, pc}

000d4858 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d4858:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d485a:	6883      	ldr	r3, [r0, #8]
   d485c:	4604      	mov	r4, r0
   d485e:	b90b      	cbnz	r3, d4864 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d4860:	f001 f987 	bl	d5b72 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4864:	68c3      	ldr	r3, [r0, #12]
   d4866:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d4868:	68a3      	ldr	r3, [r4, #8]
   d486a:	b11b      	cbz	r3, d4874 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d486c:	2203      	movs	r2, #3
   d486e:	4621      	mov	r1, r4
   d4870:	4620      	mov	r0, r4
   d4872:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d4874:	4620      	mov	r0, r4
   d4876:	2110      	movs	r1, #16
}
   d4878:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d487c:	f001 b95d 	b.w	d5b3a <_ZdlPvj>

000d4880 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d4880:	b510      	push	{r4, lr}
   d4882:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d4884:	6800      	ldr	r0, [r0, #0]
   d4886:	b108      	cbz	r0, d488c <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d4888:	f7ff fdee 	bl	d4468 <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d488c:	4620      	mov	r0, r4
   d488e:	bd10      	pop	{r4, pc}

000d4890 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d4890:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d4892:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d4894:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d4896:	689b      	ldr	r3, [r3, #8]
   d4898:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d489a:	68a3      	ldr	r3, [r4, #8]
   d489c:	3b01      	subs	r3, #1
   d489e:	60a3      	str	r3, [r4, #8]
   d48a0:	b92b      	cbnz	r3, d48ae <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112+0x1e>
            _M_destroy();
   d48a2:	6823      	ldr	r3, [r4, #0]
   d48a4:	4620      	mov	r0, r4
   d48a6:	68db      	ldr	r3, [r3, #12]
        }
    }
   d48a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   d48ac:	4718      	bx	r3
   d48ae:	bd10      	pop	{r4, pc}

000d48b0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d48b0:	680b      	ldr	r3, [r1, #0]
   d48b2:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d48b4:	b113      	cbz	r3, d48bc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d48b6:	685a      	ldr	r2, [r3, #4]
   d48b8:	3201      	adds	r2, #1
   d48ba:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d48bc:	4770      	bx	lr

000d48be <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d48be:	b510      	push	{r4, lr}
   d48c0:	4604      	mov	r4, r0
      {
	if (_M_pi != nullptr)
   d48c2:	6800      	ldr	r0, [r0, #0]
   d48c4:	b128      	cbz	r0, d48d2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d48c6:	6843      	ldr	r3, [r0, #4]
   d48c8:	3b01      	subs	r3, #1
   d48ca:	6043      	str	r3, [r0, #4]
   d48cc:	b90b      	cbnz	r3, d48d2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
   d48ce:	f7ff ffdf 	bl	d4890 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112>

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d48d2:	4620      	mov	r0, r4
   d48d4:	bd10      	pop	{r4, pc}
	...

000d48d8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d48d8:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d48da:	4c06      	ldr	r4, [pc, #24]	; (d48f4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d48dc:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d48de:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d48e0:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d48e2:	f7ff fdb9 	bl	d4458 <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d48e6:	4620      	mov	r0, r4
   d48e8:	4a03      	ldr	r2, [pc, #12]	; (d48f8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d48ea:	4904      	ldr	r1, [pc, #16]	; (d48fc <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d48ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d48f0:	f001 b91e 	b.w	d5b30 <__aeabi_atexit>
   d48f4:	2003e4d8 	.word	0x2003e4d8
   d48f8:	2003e470 	.word	0x2003e470
   d48fc:	000d4881 	.word	0x000d4881

000d4900 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d4900:	4770      	bx	lr

000d4902 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
   d4902:	2000      	movs	r0, #0
   d4904:	4770      	bx	lr

000d4906 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d4906:	b510      	push	{r4, lr}
   d4908:	2110      	movs	r1, #16
   d490a:	4604      	mov	r4, r0
   d490c:	f001 f915 	bl	d5b3a <_ZdlPvj>
   d4910:	4620      	mov	r0, r4
   d4912:	bd10      	pop	{r4, pc}

000d4914 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
   d4914:	b508      	push	{r3, lr}
      { delete this; }
   d4916:	b108      	cbz	r0, d491c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
   d4918:	f7ff fff5 	bl	d4906 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d491c:	bd08      	pop	{r3, pc}

000d491e <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d491e:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d4920:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4922:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d4924:	b113      	cbz	r3, d492c <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4926:	2203      	movs	r2, #3
   d4928:	4601      	mov	r1, r0
   d492a:	4798      	blx	r3
    }
   d492c:	4620      	mov	r0, r4
   d492e:	bd10      	pop	{r4, pc}

000d4930 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d4930:	2200      	movs	r2, #0
   d4932:	6002      	str	r2, [r0, #0]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d4934:	b510      	push	{r4, lr}

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d4936:	f64f 729c 	movw	r2, #65436	; 0xff9c
   d493a:	8082      	strh	r2, [r0, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d493c:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
   d4940:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d4942:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4944:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   d4946:	680c      	ldr	r4, [r1, #0]
   d4948:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d494a:	600a      	str	r2, [r1, #0]
}

inline particle::Error::Error(Error&& error) :
        Error() {
    swap(*this, error);
}
   d494c:	bd10      	pop	{r4, pc}

000d494e <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d494e:	b510      	push	{r4, lr}
   d4950:	4604      	mov	r4, r0
    free((void*)msg_);
   d4952:	6800      	ldr	r0, [r0, #0]
   d4954:	f7ff ff4c 	bl	d47f0 <free>
}
   d4958:	4620      	mov	r0, r4
   d495a:	bd10      	pop	{r4, pc}

000d495c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
   d495c:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d495e:	68c4      	ldr	r4, [r0, #12]
   d4960:	b1f4      	cbz	r4, d49a0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
   d4962:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d4964:	2b02      	cmp	r3, #2
   d4966:	d103      	bne.n	d4970 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d4968:	f104 000c 	add.w	r0, r4, #12
   d496c:	f7ff ffef 	bl	d494e <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
   d4970:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
   d4972:	b135      	cbz	r5, d4982 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4974:	4628      	mov	r0, r5
   d4976:	f7ff ffd2 	bl	d491e <_ZNSt14_Function_baseD1Ev>
   d497a:	2110      	movs	r1, #16
   d497c:	4628      	mov	r0, r5
   d497e:	f001 f8dc 	bl	d5b3a <_ZdlPvj>
   d4982:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d4984:	b135      	cbz	r5, d4994 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d4986:	4628      	mov	r0, r5
   d4988:	f7ff ffc9 	bl	d491e <_ZNSt14_Function_baseD1Ev>
   d498c:	2110      	movs	r1, #16
   d498e:	4628      	mov	r0, r5
   d4990:	f001 f8d3 	bl	d5b3a <_ZdlPvj>
   d4994:	4620      	mov	r0, r4
   d4996:	2114      	movs	r1, #20
   d4998:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d499c:	f001 b8cd 	b.w	d5b3a <_ZdlPvj>
   d49a0:	bd38      	pop	{r3, r4, r5, pc}

000d49a2 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
   d49a2:	b513      	push	{r0, r1, r4, lr}
   d49a4:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d49a6:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
   d49aa:	2300      	movs	r3, #0
   d49ac:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d49ae:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d49b0:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d49b2:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d49b4:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d49b6:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d49b8:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d49ba:	f7ff ff80 	bl	d48be <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d49be:	4620      	mov	r0, r4
   d49c0:	b002      	add	sp, #8
   d49c2:	bd10      	pop	{r4, pc}

000d49c4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d49c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d49c6:	460c      	mov	r4, r1
   d49c8:	ad02      	add	r5, sp, #8
   d49ca:	f854 3b04 	ldr.w	r3, [r4], #4
   d49ce:	f845 3d08 	str.w	r3, [r5, #-8]!
   d49d2:	4606      	mov	r6, r0
   d49d4:	460f      	mov	r7, r1
   d49d6:	a801      	add	r0, sp, #4
   d49d8:	4621      	mov	r1, r4
   d49da:	f7ff ff69 	bl	d48b0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
   d49de:	4629      	mov	r1, r5
   d49e0:	4630      	mov	r0, r6
   d49e2:	f7ff ffde 	bl	d49a2 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d49e6:	a801      	add	r0, sp, #4
   d49e8:	f7ff ff69 	bl	d48be <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d49ec:	4620      	mov	r0, r4
   d49ee:	f7ff ff66 	bl	d48be <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
   d49f2:	4638      	mov	r0, r7
   d49f4:	2108      	movs	r1, #8
   d49f6:	f001 f8a0 	bl	d5b3a <_ZdlPvj>
        return p;
    }
   d49fa:	4630      	mov	r0, r6
   d49fc:	b003      	add	sp, #12
   d49fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4a00 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   d4a00:	b513      	push	{r0, r1, r4, lr}
   d4a02:	460b      	mov	r3, r1
   d4a04:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4a06:	c803      	ldmia	r0, {r0, r1}
   d4a08:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d4a0c:	e893 0003 	ldmia.w	r3, {r0, r1}
   d4a10:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d4a14:	e89d 0003 	ldmia.w	sp, {r0, r1}
   d4a18:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d4a1c:	b002      	add	sp, #8
   d4a1e:	bd10      	pop	{r4, pc}

000d4a20 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d4a20:	b538      	push	{r3, r4, r5, lr}
   d4a22:	2300      	movs	r3, #0
   d4a24:	4604      	mov	r4, r0
   d4a26:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d4a28:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d4a2a:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d4a2c:	f7ff fb33 	bl	d4096 <_Znwj>
   d4a30:	b128      	cbz	r0, d4a3e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d4a32:	2301      	movs	r3, #1
   d4a34:	6043      	str	r3, [r0, #4]
   d4a36:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
   d4a38:	4b02      	ldr	r3, [pc, #8]	; (d4a44 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d4a3a:	6003      	str	r3, [r0, #0]
   d4a3c:	60c5      	str	r5, [r0, #12]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d4a3e:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
   d4a40:	4620      	mov	r0, r4
   d4a42:	bd38      	pop	{r3, r4, r5, pc}
   d4a44:	000d5fa8 	.word	0x000d5fa8

000d4a48 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4a48:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d4a4a:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4a4c:	b90a      	cbnz	r2, d4a52 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d4a4e:	f001 f890 	bl	d5b72 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4a52:	68c3      	ldr	r3, [r0, #12]
    }
   d4a54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4a58:	4718      	bx	r3

000d4a5a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d4a5a:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d4a5c:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d4a5e:	f100 0110 	add.w	r1, r0, #16
   d4a62:	f7ff fff1 	bl	d4a48 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d4a66:	bd08      	pop	{r3, pc}

000d4a68 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4a68:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d4a6a:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4a6c:	b90a      	cbnz	r2, d4a72 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d4a6e:	f001 f880 	bl	d5b72 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4a72:	68c3      	ldr	r3, [r0, #12]
    }
   d4a74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4a78:	4718      	bx	r3

000d4a7a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d4a7a:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d4a7c:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d4a7e:	f100 0110 	add.w	r1, r0, #16
   d4a82:	f7ff fff1 	bl	d4a68 <_ZNKSt8functionIFvRKbEEclES1_>
   d4a86:	bd08      	pop	{r3, pc}

000d4a88 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d4a88:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4a8a:	2300      	movs	r3, #0
   d4a8c:	6083      	str	r3, [r0, #8]
   d4a8e:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d4a90:	4604      	mov	r4, r0
   d4a92:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d4a94:	b12b      	cbz	r3, d4aa2 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d4a96:	2202      	movs	r2, #2
   d4a98:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d4a9a:	68eb      	ldr	r3, [r5, #12]
   d4a9c:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d4a9e:	68ab      	ldr	r3, [r5, #8]
   d4aa0:	60a3      	str	r3, [r4, #8]
	}
    }
   d4aa2:	4620      	mov	r0, r4
   d4aa4:	bd38      	pop	{r3, r4, r5, pc}
	...

000d4aa8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
   d4aa8:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4aaa:	b089      	sub	sp, #36	; 0x24
   d4aac:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d4aae:	4668      	mov	r0, sp
   d4ab0:	f7ff ff3e 	bl	d4930 <_ZN8particle5ErrorC1EOS0_>
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d4ab4:	2300      	movs	r3, #0
   d4ab6:	f88d 3008 	strb.w	r3, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d4aba:	f04f 0202 	mov.w	r2, #2
   d4abe:	e8d4 3f4f 	ldrexb	r3, [r4]
   d4ac2:	2b00      	cmp	r3, #0
   d4ac4:	d103      	bne.n	d4ace <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
   d4ac6:	e8c4 2f41 	strexb	r1, r2, [r4]
   d4aca:	2900      	cmp	r1, #0
   d4acc:	d1f7      	bne.n	d4abe <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
   d4ace:	d002      	beq.n	d4ad6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
   d4ad0:	f88d 3008 	strb.w	r3, [sp, #8]
   d4ad4:	e063      	b.n	d4b9e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
   d4ad6:	f114 050c 	adds.w	r5, r4, #12
   d4ada:	d003      	beq.n	d4ae4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
   d4adc:	4669      	mov	r1, sp
   d4ade:	4628      	mov	r0, r5
   d4ae0:	f7ff ff26 	bl	d4930 <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d4ae4:	f3bf 8f5f 	dmb	sy
   d4ae8:	2301      	movs	r3, #1
   d4aea:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d4aec:	2000      	movs	r0, #0
   d4aee:	f104 0308 	add.w	r3, r4, #8
   d4af2:	f3bf 8f5f 	dmb	sy
   d4af6:	e853 6f00 	ldrex	r6, [r3]
   d4afa:	e843 0200 	strex	r2, r0, [r3]
   d4afe:	2a00      	cmp	r2, #0
   d4b00:	d1f9      	bne.n	d4af6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
   d4b02:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d4b06:	2e00      	cmp	r6, #0
   d4b08:	d049      	beq.n	d4b9e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d4b0a:	f7ff fdd5 	bl	d46b8 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d4b0e:	b120      	cbz	r0, d4b1a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d4b10:	4629      	mov	r1, r5
   d4b12:	4630      	mov	r0, r6
   d4b14:	f7ff ff98 	bl	d4a48 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d4b18:	e03a      	b.n	d4b90 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d4b1a:	4631      	mov	r1, r6
   d4b1c:	a802      	add	r0, sp, #8
   d4b1e:	f7ff ffb3 	bl	d4a88 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d4b22:	68e0      	ldr	r0, [r4, #12]
   d4b24:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d4b28:	b108      	cbz	r0, d4b2e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
   d4b2a:	f001 f9bf 	bl	d5eac <strdup>
   d4b2e:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d4b30:	2010      	movs	r0, #16
   d4b32:	f8ad 501c 	strh.w	r5, [sp, #28]
   d4b36:	f7ff faae 	bl	d4096 <_Znwj>
   d4b3a:	4605      	mov	r5, r0
   d4b3c:	b1e8      	cbz	r0, d4b7a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4b3e:	2700      	movs	r7, #0
   d4b40:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d4b42:	2018      	movs	r0, #24
   d4b44:	f7ff faa7 	bl	d4096 <_Znwj>
   d4b48:	4604      	mov	r4, r0
   d4b4a:	b188      	cbz	r0, d4b70 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d4b4c:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4b4e:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d4b50:	a802      	add	r0, sp, #8
   d4b52:	f7ff ff55 	bl	d4a00 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4b56:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d4b58:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d4b5a:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4b5c:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d4b5e:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d4b60:	a906      	add	r1, sp, #24
   d4b62:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d4b64:	60e3      	str	r3, [r4, #12]
   d4b66:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d4b6a:	9205      	str	r2, [sp, #20]
   d4b6c:	f7ff fee0 	bl	d4930 <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d4b70:	4b0d      	ldr	r3, [pc, #52]	; (d4ba8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
   d4b72:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d4b74:	4b0d      	ldr	r3, [pc, #52]	; (d4bac <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d4b76:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d4b78:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
   d4b7a:	a806      	add	r0, sp, #24
   d4b7c:	f7ff fee7 	bl	d494e <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4b80:	a802      	add	r0, sp, #8
   d4b82:	f7ff fecc 	bl	d491e <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d4b86:	2200      	movs	r2, #0
   d4b88:	4629      	mov	r1, r5
   d4b8a:	4809      	ldr	r0, [pc, #36]	; (d4bb0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
   d4b8c:	f7ff fd9c 	bl	d46c8 <application_thread_invoke>
   d4b90:	4630      	mov	r0, r6
   d4b92:	f7ff fec4 	bl	d491e <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d4b96:	2110      	movs	r1, #16
   d4b98:	4630      	mov	r0, r6
   d4b9a:	f000 ffce 	bl	d5b3a <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
   d4b9e:	4668      	mov	r0, sp
   d4ba0:	f7ff fed5 	bl	d494e <_ZN8particle5ErrorD1Ev>
    }
   d4ba4:	b009      	add	sp, #36	; 0x24
   d4ba6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4ba8:	000d4a5b 	.word	0x000d4a5b
   d4bac:	000d4cd1 	.word	0x000d4cd1
   d4bb0:	000d4859 	.word	0x000d4859

000d4bb4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d4bb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4bb8:	b08b      	sub	sp, #44	; 0x2c
   d4bba:	4606      	mov	r6, r0
   d4bbc:	460f      	mov	r7, r1
   d4bbe:	4690      	mov	r8, r2
   d4bc0:	4699      	mov	r9, r3
   d4bc2:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4bc6:	f7ff fda3 	bl	d4710 <spark_cloud_flag_connected>
   d4bca:	ad07      	add	r5, sp, #28
    if (!connected()) {
   d4bcc:	4683      	mov	fp, r0
   d4bce:	bb30      	cbnz	r0, d4c1e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d4bd0:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d4bd4:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d4bd6:	a905      	add	r1, sp, #20
   d4bd8:	4628      	mov	r0, r5
   d4bda:	f8ad 3018 	strh.w	r3, [sp, #24]
   d4bde:	f7ff fea7 	bl	d4930 <_ZN8particle5ErrorC1EOS0_>
   d4be2:	2014      	movs	r0, #20
   d4be4:	f7ff fa57 	bl	d4096 <_Znwj>
   d4be8:	4604      	mov	r4, r0
   d4bea:	b158      	cbz	r0, d4c04 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d4bec:	2302      	movs	r3, #2
   d4bee:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d4bf0:	2301      	movs	r3, #1
   d4bf2:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d4bf4:	f8c0 b004 	str.w	fp, [r0, #4]
   d4bf8:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
   d4bfc:	4629      	mov	r1, r5
   d4bfe:	300c      	adds	r0, #12
   d4c00:	f7ff fe96 	bl	d4930 <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
   d4c04:	4630      	mov	r0, r6
   d4c06:	4621      	mov	r1, r4
   d4c08:	f840 4b04 	str.w	r4, [r0], #4
   d4c0c:	f7ff ff08 	bl	d4a20 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d4c10:	4628      	mov	r0, r5
   d4c12:	f7ff fe9c 	bl	d494e <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d4c16:	a805      	add	r0, sp, #20
   d4c18:	f7ff fe99 	bl	d494e <_ZN8particle5ErrorD1Ev>
   d4c1c:	e052      	b.n	d4cc4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d4c1e:	2400      	movs	r4, #0
   d4c20:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d4c22:	2014      	movs	r0, #20
   d4c24:	606c      	str	r4, [r5, #4]
   d4c26:	60ac      	str	r4, [r5, #8]
   d4c28:	9307      	str	r3, [sp, #28]
   d4c2a:	f7ff fa34 	bl	d4096 <_Znwj>
   d4c2e:	4601      	mov	r1, r0
   d4c30:	b118      	cbz	r0, d4c3a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
   d4c32:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d4c34:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d4c36:	6044      	str	r4, [r0, #4]
   d4c38:	6084      	str	r4, [r0, #8]
   d4c3a:	a804      	add	r0, sp, #16
   d4c3c:	9103      	str	r1, [sp, #12]
   d4c3e:	f7ff feef 	bl	d4a20 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
   d4c42:	4b22      	ldr	r3, [pc, #136]	; (d4ccc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
   d4c44:	9308      	str	r3, [sp, #32]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d4c46:	2008      	movs	r0, #8
   d4c48:	f7ff fa25 	bl	d4096 <_Znwj>
   d4c4c:	4604      	mov	r4, r0
   d4c4e:	b128      	cbz	r0, d4c5c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4c50:	9b03      	ldr	r3, [sp, #12]
   d4c52:	f840 3b04 	str.w	r3, [r0], #4
   d4c56:	a904      	add	r1, sp, #16
   d4c58:	f7ff fe2a 	bl	d48b0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d4c5c:	9500      	str	r5, [sp, #0]
   d4c5e:	fa5f f38a 	uxtb.w	r3, sl
   d4c62:	464a      	mov	r2, r9
   d4c64:	4641      	mov	r1, r8
   d4c66:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
   d4c68:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d4c6a:	f7ff fd59 	bl	d4720 <spark_send_event>
   d4c6e:	b920      	cbnz	r0, d4c7a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   d4c70:	9b03      	ldr	r3, [sp, #12]
   d4c72:	785b      	ldrb	r3, [r3, #1]
   d4c74:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d4c78:	b183      	cbz	r3, d4c9c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   d4c7a:	9b03      	ldr	r3, [sp, #12]
   d4c7c:	9305      	str	r3, [sp, #20]
   d4c7e:	a904      	add	r1, sp, #16
   d4c80:	a806      	add	r0, sp, #24
   d4c82:	f7ff fe15 	bl	d48b0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
   d4c86:	a905      	add	r1, sp, #20
   d4c88:	4630      	mov	r0, r6
   d4c8a:	f7ff fe8a 	bl	d49a2 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4c8e:	a806      	add	r0, sp, #24
   d4c90:	f7ff fe15 	bl	d48be <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4c94:	a804      	add	r0, sp, #16
   d4c96:	f7ff fe12 	bl	d48be <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4c9a:	e013      	b.n	d4cc4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
   d4c9c:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
   d4ca0:	a905      	add	r1, sp, #20
   d4ca2:	a803      	add	r0, sp, #12
   d4ca4:	9205      	str	r2, [sp, #20]
   d4ca6:	f8ad 3018 	strh.w	r3, [sp, #24]
   d4caa:	f7ff fefd 	bl	d4aa8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d4cae:	a805      	add	r0, sp, #20
   d4cb0:	f7ff fe4d 	bl	d494e <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d4cb4:	a805      	add	r0, sp, #20
   d4cb6:	9909      	ldr	r1, [sp, #36]	; 0x24
   d4cb8:	f7ff fe84 	bl	d49c4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
   d4cbc:	a806      	add	r0, sp, #24
   d4cbe:	f7ff fdfe 	bl	d48be <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4cc2:	e7da      	b.n	d4c7a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
    }

    return p.future();
}
   d4cc4:	4630      	mov	r0, r6
   d4cc6:	b00b      	add	sp, #44	; 0x2c
   d4cc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d4ccc:	000d4e41 	.word	0x000d4e41

000d4cd0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d4cd0:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d4cd2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4cd4:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d4cd6:	d006      	beq.n	d4ce6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   d4cd8:	2a03      	cmp	r2, #3
   d4cda:	d017      	beq.n	d4d0c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
   d4cdc:	2a01      	cmp	r2, #1
   d4cde:	d122      	bne.n	d4d26 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d4ce0:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d4ce2:	6003      	str	r3, [r0, #0]
	      break;
   d4ce4:	e01f      	b.n	d4d26 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d4ce6:	2018      	movs	r0, #24
   d4ce8:	680e      	ldr	r6, [r1, #0]
   d4cea:	f7ff f9d4 	bl	d4096 <_Znwj>
   d4cee:	4605      	mov	r5, r0
   d4cf0:	b150      	cbz	r0, d4d08 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d4cf2:	4631      	mov	r1, r6
   d4cf4:	f7ff fec8 	bl	d4a88 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d4cf8:	6930      	ldr	r0, [r6, #16]
   d4cfa:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d4cfe:	b108      	cbz	r0, d4d04 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
   d4d00:	f001 f8d4 	bl	d5eac <strdup>
   d4d04:	6128      	str	r0, [r5, #16]
   d4d06:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d4d08:	6025      	str	r5, [r4, #0]
   d4d0a:	e00c      	b.n	d4d26 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d4d0c:	6804      	ldr	r4, [r0, #0]
   d4d0e:	b154      	cbz	r4, d4d26 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
   d4d10:	f104 0010 	add.w	r0, r4, #16
   d4d14:	f7ff fe1b 	bl	d494e <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4d18:	4620      	mov	r0, r4
   d4d1a:	f7ff fe00 	bl	d491e <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d4d1e:	2118      	movs	r1, #24
   d4d20:	4620      	mov	r0, r4
   d4d22:	f000 ff0a 	bl	d5b3a <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d4d26:	2000      	movs	r0, #0
   d4d28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4d2a <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d4d2a:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4d2c:	2300      	movs	r3, #0
   d4d2e:	6083      	str	r3, [r0, #8]
   d4d30:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d4d32:	4604      	mov	r4, r0
   d4d34:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d4d36:	b12b      	cbz	r3, d4d44 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d4d38:	2202      	movs	r2, #2
   d4d3a:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d4d3c:	68eb      	ldr	r3, [r5, #12]
   d4d3e:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d4d40:	68ab      	ldr	r3, [r5, #8]
   d4d42:	60a3      	str	r3, [r4, #8]
	}
    }
   d4d44:	4620      	mov	r0, r4
   d4d46:	bd38      	pop	{r3, r4, r5, pc}

000d4d48 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d4d48:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d4d4a:	b570      	push	{r4, r5, r6, lr}
   d4d4c:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d4d4e:	d006      	beq.n	d4d5e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
   d4d50:	2a03      	cmp	r2, #3
   d4d52:	d011      	beq.n	d4d78 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
   d4d54:	2a01      	cmp	r2, #1
   d4d56:	d118      	bne.n	d4d8a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d4d58:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d4d5a:	6003      	str	r3, [r0, #0]
	      break;
   d4d5c:	e015      	b.n	d4d8a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d4d5e:	2014      	movs	r0, #20
   d4d60:	680e      	ldr	r6, [r1, #0]
   d4d62:	f7ff f998 	bl	d4096 <_Znwj>
   d4d66:	4605      	mov	r5, r0
   d4d68:	b120      	cbz	r0, d4d74 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d4d6a:	4631      	mov	r1, r6
   d4d6c:	f7ff ffdd 	bl	d4d2a <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d4d70:	7c33      	ldrb	r3, [r6, #16]
   d4d72:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d4d74:	6025      	str	r5, [r4, #0]
   d4d76:	e008      	b.n	d4d8a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d4d78:	6804      	ldr	r4, [r0, #0]
   d4d7a:	b134      	cbz	r4, d4d8a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4d7c:	4620      	mov	r0, r4
   d4d7e:	f7ff fdce 	bl	d491e <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d4d82:	2114      	movs	r1, #20
   d4d84:	4620      	mov	r0, r4
   d4d86:	f000 fed8 	bl	d5b3a <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d4d8a:	2000      	movs	r0, #0
   d4d8c:	bd70      	pop	{r4, r5, r6, pc}
	...

000d4d90 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
   d4d90:	b5f0      	push	{r4, r5, r6, r7, lr}

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d4d92:	2300      	movs	r3, #0
   d4d94:	b087      	sub	sp, #28
   d4d96:	460c      	mov	r4, r1
   d4d98:	f3bf 8f5f 	dmb	sy
   d4d9c:	e850 6f00 	ldrex	r6, [r0]
   d4da0:	e840 3200 	strex	r2, r3, [r0]
   d4da4:	2a00      	cmp	r2, #0
   d4da6:	d1f9      	bne.n	d4d9c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
   d4da8:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d4dac:	2e00      	cmp	r6, #0
   d4dae:	d03f      	beq.n	d4e30 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d4db0:	4618      	mov	r0, r3
   d4db2:	f7ff fc81 	bl	d46b8 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d4db6:	4607      	mov	r7, r0
   d4db8:	b120      	cbz	r0, d4dc4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d4dba:	4621      	mov	r1, r4
   d4dbc:	4630      	mov	r0, r6
   d4dbe:	f7ff fe53 	bl	d4a68 <_ZNKSt8functionIFvRKbEEclES1_>
   d4dc2:	e02e      	b.n	d4e22 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d4dc4:	4631      	mov	r1, r6
   d4dc6:	a801      	add	r0, sp, #4
   d4dc8:	f7ff ffaf 	bl	d4d2a <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d4dcc:	7823      	ldrb	r3, [r4, #0]
   d4dce:	f88d 3014 	strb.w	r3, [sp, #20]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d4dd2:	2010      	movs	r0, #16
   d4dd4:	f7ff f95f 	bl	d4096 <_Znwj>
   d4dd8:	4605      	mov	r5, r0
   d4dda:	b1d0      	cbz	r0, d4e12 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4ddc:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d4dde:	2014      	movs	r0, #20
   d4de0:	f7ff f959 	bl	d4096 <_Znwj>
   d4de4:	4604      	mov	r4, r0
   d4de6:	b178      	cbz	r0, d4e08 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4de8:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d4dea:	4601      	mov	r1, r0
   d4dec:	a801      	add	r0, sp, #4
   d4dee:	f7ff fe07 	bl	d4a00 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4df2:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d4df4:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d4df6:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4df8:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d4dfa:	9203      	str	r2, [sp, #12]
   d4dfc:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d4dfe:	60e3      	str	r3, [r4, #12]
   d4e00:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d4e04:	9204      	str	r2, [sp, #16]
   d4e06:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d4e08:	4b0a      	ldr	r3, [pc, #40]	; (d4e34 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
   d4e0a:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d4e0c:	4b0a      	ldr	r3, [pc, #40]	; (d4e38 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d4e0e:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d4e10:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4e12:	a801      	add	r0, sp, #4
   d4e14:	f7ff fd83 	bl	d491e <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d4e18:	2200      	movs	r2, #0
   d4e1a:	4629      	mov	r1, r5
   d4e1c:	4807      	ldr	r0, [pc, #28]	; (d4e3c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
   d4e1e:	f7ff fc53 	bl	d46c8 <application_thread_invoke>
   d4e22:	4630      	mov	r0, r6
   d4e24:	f7ff fd7b 	bl	d491e <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d4e28:	2110      	movs	r1, #16
   d4e2a:	4630      	mov	r0, r6
   d4e2c:	f000 fe85 	bl	d5b3a <_ZdlPvj>
        }
    }
   d4e30:	b007      	add	sp, #28
   d4e32:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4e34:	000d4a7b 	.word	0x000d4a7b
   d4e38:	000d4d49 	.word	0x000d4d49
   d4e3c:	000d4859 	.word	0x000d4859

000d4e40 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:

namespace {

using namespace particle;

void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d4e40:	b530      	push	{r4, r5, lr}
   d4e42:	b085      	sub	sp, #20
   d4e44:	4604      	mov	r4, r0
   d4e46:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d4e48:	4668      	mov	r0, sp
   d4e4a:	4611      	mov	r1, r2
   d4e4c:	f7ff fdba 	bl	d49c4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d4e50:	b17c      	cbz	r4, d4e72 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
   d4e52:	b224      	sxth	r4, r4
   d4e54:	4628      	mov	r0, r5
   d4e56:	b10d      	cbz	r5, d4e5c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
   d4e58:	f001 f828 	bl	d5eac <strdup>
   d4e5c:	9002      	str	r0, [sp, #8]
   d4e5e:	a902      	add	r1, sp, #8
   d4e60:	4668      	mov	r0, sp
   d4e62:	f8ad 400c 	strh.w	r4, [sp, #12]
   d4e66:	f7ff fe1f 	bl	d4aa8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d4e6a:	a802      	add	r0, sp, #8
   d4e6c:	f7ff fd6f 	bl	d494e <_ZN8particle5ErrorD1Ev>
   d4e70:	e01d      	b.n	d4eae <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
   d4e72:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d4e74:	f88d 4008 	strb.w	r4, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d4e78:	f04f 0201 	mov.w	r2, #1
   d4e7c:	e8d0 3f4f 	ldrexb	r3, [r0]
   d4e80:	42a3      	cmp	r3, r4
   d4e82:	d103      	bne.n	d4e8c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
   d4e84:	e8c0 2f41 	strexb	r1, r2, [r0]
   d4e88:	2900      	cmp	r1, #0
   d4e8a:	d1f7      	bne.n	d4e7c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
   d4e8c:	d002      	beq.n	d4e94 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
   d4e8e:	f88d 3008 	strb.w	r3, [sp, #8]
   d4e92:	e00c      	b.n	d4eae <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
   d4e94:	f110 010c 	adds.w	r1, r0, #12
   d4e98:	f04f 0301 	mov.w	r3, #1
   d4e9c:	bf18      	it	ne
   d4e9e:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d4ea0:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
   d4ea4:	3004      	adds	r0, #4
   d4ea6:	f800 3c03 	strb.w	r3, [r0, #-3]
   d4eaa:	f7ff ff71 	bl	d4d90 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
   d4eae:	a801      	add	r0, sp, #4
   d4eb0:	f7ff fd05 	bl	d48be <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
   d4eb4:	b005      	add	sp, #20
   d4eb6:	bd30      	pop	{r4, r5, pc}

000d4eb8 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4eb8:	2200      	movs	r2, #0
   d4eba:	4611      	mov	r1, r2
   d4ebc:	6840      	ldr	r0, [r0, #4]
   d4ebe:	f7ff bc77 	b.w	d47b0 <network_listening>

000d4ec2 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d4ec2:	2200      	movs	r2, #0
   d4ec4:	4611      	mov	r1, r2
   d4ec6:	6840      	ldr	r0, [r0, #4]
   d4ec8:	f7ff bc82 	b.w	d47d0 <network_get_listen_timeout>

000d4ecc <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d4ecc:	2200      	movs	r2, #0
   d4ece:	6840      	ldr	r0, [r0, #4]
   d4ed0:	f7ff bc76 	b.w	d47c0 <network_set_listen_timeout>

000d4ed4 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d4ed4:	2200      	movs	r2, #0
   d4ed6:	f081 0101 	eor.w	r1, r1, #1
   d4eda:	6840      	ldr	r0, [r0, #4]
   d4edc:	f7ff bc60 	b.w	d47a0 <network_listen>

000d4ee0 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d4ee0:	2300      	movs	r3, #0
   d4ee2:	461a      	mov	r2, r3
   d4ee4:	4619      	mov	r1, r3
   d4ee6:	6840      	ldr	r0, [r0, #4]
   d4ee8:	f7ff bc52 	b.w	d4790 <network_off>

000d4eec <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d4eec:	2300      	movs	r3, #0
   d4eee:	461a      	mov	r2, r3
   d4ef0:	4619      	mov	r1, r3
   d4ef2:	6840      	ldr	r0, [r0, #4]
   d4ef4:	f7ff bc44 	b.w	d4780 <network_on>

000d4ef8 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4ef8:	2200      	movs	r2, #0
   d4efa:	4611      	mov	r1, r2
   d4efc:	6840      	ldr	r0, [r0, #4]
   d4efe:	f7ff bc37 	b.w	d4770 <network_ready>

000d4f02 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d4f02:	2200      	movs	r2, #0
   d4f04:	4611      	mov	r1, r2
   d4f06:	6840      	ldr	r0, [r0, #4]
   d4f08:	f7ff bc22 	b.w	d4750 <network_connecting>

000d4f0c <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4f0c:	2200      	movs	r2, #0
   d4f0e:	2102      	movs	r1, #2
   d4f10:	6840      	ldr	r0, [r0, #4]
   d4f12:	f7ff bc25 	b.w	d4760 <network_disconnect>

000d4f16 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d4f16:	2300      	movs	r3, #0
   d4f18:	461a      	mov	r2, r3
   d4f1a:	6840      	ldr	r0, [r0, #4]
   d4f1c:	f7ff bc10 	b.w	d4740 <network_connect>

000d4f20 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d4f20:	4b02      	ldr	r3, [pc, #8]	; (d4f2c <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d4f22:	2203      	movs	r2, #3
   d4f24:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d4f26:	4a02      	ldr	r2, [pc, #8]	; (d4f30 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d4f28:	601a      	str	r2, [r3, #0]
   d4f2a:	4770      	bx	lr
   d4f2c:	2003e4dc 	.word	0x2003e4dc
   d4f30:	000d5fc4 	.word	0x000d5fc4

000d4f34 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
   d4f34:	4770      	bx	lr

000d4f36 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d4f36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4f38:	4606      	mov	r6, r0
   d4f3a:	4615      	mov	r5, r2
   d4f3c:	460c      	mov	r4, r1
   d4f3e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d4f40:	42bc      	cmp	r4, r7
   d4f42:	d006      	beq.n	d4f52 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d4f44:	6833      	ldr	r3, [r6, #0]
   d4f46:	f814 1b01 	ldrb.w	r1, [r4], #1
   d4f4a:	689b      	ldr	r3, [r3, #8]
   d4f4c:	4630      	mov	r0, r6
   d4f4e:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d4f50:	e7f6      	b.n	d4f40 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d4f52:	4628      	mov	r0, r5
   d4f54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4f56 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d4f56:	2200      	movs	r2, #0
   d4f58:	7c00      	ldrb	r0, [r0, #16]
   d4f5a:	f7ff babd 	b.w	d44d8 <HAL_I2C_Write_Data>

000d4f5e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d4f5e:	2100      	movs	r1, #0
   d4f60:	7c00      	ldrb	r0, [r0, #16]
   d4f62:	f7ff bac1 	b.w	d44e8 <HAL_I2C_Available_Data>

000d4f66 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d4f66:	2100      	movs	r1, #0
   d4f68:	7c00      	ldrb	r0, [r0, #16]
   d4f6a:	f7ff bac5 	b.w	d44f8 <HAL_I2C_Read_Data>

000d4f6e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d4f6e:	2100      	movs	r1, #0
   d4f70:	7c00      	ldrb	r0, [r0, #16]
   d4f72:	f7ff bac9 	b.w	d4508 <HAL_I2C_Peek_Data>

000d4f76 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d4f76:	2100      	movs	r1, #0
   d4f78:	7c00      	ldrb	r0, [r0, #16]
   d4f7a:	f7ff bacd 	b.w	d4518 <HAL_I2C_Flush_Data>

000d4f7e <_ZN7TwoWireD0Ev>:
   d4f7e:	b510      	push	{r4, lr}
   d4f80:	2114      	movs	r1, #20
   d4f82:	4604      	mov	r4, r0
   d4f84:	f000 fdd9 	bl	d5b3a <_ZdlPvj>
   d4f88:	4620      	mov	r0, r4
   d4f8a:	bd10      	pop	{r4, pc}

000d4f8c <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d4f8c:	b510      	push	{r4, lr}
   d4f8e:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d4f90:	2300      	movs	r3, #0
   d4f92:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d4f94:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d4f98:	60a3      	str	r3, [r4, #8]
   d4f9a:	4b04      	ldr	r3, [pc, #16]	; (d4fac <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
   d4f9c:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d4f9e:	4608      	mov	r0, r1
   d4fa0:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
   d4fa2:	4611      	mov	r1, r2
   d4fa4:	f7ff fac8 	bl	d4538 <HAL_I2C_Init>
}
   d4fa8:	4620      	mov	r0, r4
   d4faa:	bd10      	pop	{r4, pc}
   d4fac:	000d5ff8 	.word	0x000d5ff8

000d4fb0 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d4fb0:	2100      	movs	r1, #0
   d4fb2:	7c00      	ldrb	r0, [r0, #16]
   d4fb4:	f7ff bab8 	b.w	d4528 <HAL_I2C_Is_Enabled>

000d4fb8 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d4fb8:	4770      	bx	lr

000d4fba <_ZN9IPAddressD0Ev>:
   d4fba:	b510      	push	{r4, lr}
   d4fbc:	2118      	movs	r1, #24
   d4fbe:	4604      	mov	r4, r0
   d4fc0:	f000 fdbb 	bl	d5b3a <_ZdlPvj>
   d4fc4:	4620      	mov	r0, r4
   d4fc6:	bd10      	pop	{r4, pc}

000d4fc8 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d4fc8:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d4fca:	7d03      	ldrb	r3, [r0, #20]
   d4fcc:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d4fce:	b08d      	sub	sp, #52	; 0x34
   d4fd0:	460e      	mov	r6, r1
   d4fd2:	f100 0704 	add.w	r7, r0, #4
   d4fd6:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d4fda:	d002      	beq.n	d4fe2 <_ZNK9IPAddress7printToER5Print+0x1a>
   d4fdc:	f100 0508 	add.w	r5, r0, #8
   d4fe0:	e018      	b.n	d5014 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d4fe2:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d4fe4:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d4fe6:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d4fea:	232f      	movs	r3, #47	; 0x2f
   d4fec:	462a      	mov	r2, r5
   d4fee:	200a      	movs	r0, #10
   d4ff0:	f7ff faaa 	bl	d4548 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d4ff4:	4628      	mov	r0, r5
   d4ff6:	f000 ff74 	bl	d5ee2 <strlen>
   d4ffa:	6833      	ldr	r3, [r6, #0]
   d4ffc:	4602      	mov	r2, r0
   d4ffe:	68db      	ldr	r3, [r3, #12]
   d5000:	4629      	mov	r1, r5
   d5002:	4630      	mov	r0, r6
   d5004:	4798      	blx	r3
   d5006:	e00f      	b.n	d5028 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d5008:	b124      	cbz	r4, d5014 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d500a:	212e      	movs	r1, #46	; 0x2e
   d500c:	4630      	mov	r0, r6
   d500e:	f000 f9d5 	bl	d53bc <_ZN5Print5printEc>
   d5012:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d5014:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d5018:	220a      	movs	r2, #10
   d501a:	4630      	mov	r0, r6
   d501c:	f000 f9dd 	bl	d53da <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5020:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5022:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5024:	d1f0      	bne.n	d5008 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5026:	4620      	mov	r0, r4
    }
    return n;
}
   d5028:	b00d      	add	sp, #52	; 0x34
   d502a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d502c <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d502c:	b510      	push	{r4, lr}
   d502e:	4b05      	ldr	r3, [pc, #20]	; (d5044 <_ZN9IPAddressC1Ev+0x18>)
   d5030:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d5032:	2211      	movs	r2, #17
   d5034:	f840 3b04 	str.w	r3, [r0], #4
   d5038:	2100      	movs	r1, #0
   d503a:	f000 fefe 	bl	d5e3a <memset>
{
    clear();
}
   d503e:	4620      	mov	r0, r4
   d5040:	bd10      	pop	{r4, pc}
   d5042:	bf00      	nop
   d5044:	000d6020 	.word	0x000d6020

000d5048 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d5048:	4603      	mov	r3, r0
   d504a:	4a07      	ldr	r2, [pc, #28]	; (d5068 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d504c:	b510      	push	{r4, lr}
   d504e:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d5052:	f101 0210 	add.w	r2, r1, #16
   d5056:	f851 4b04 	ldr.w	r4, [r1], #4
   d505a:	f843 4b04 	str.w	r4, [r3], #4
   d505e:	4291      	cmp	r1, r2
   d5060:	d1f9      	bne.n	d5056 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d5062:	780a      	ldrb	r2, [r1, #0]
   d5064:	701a      	strb	r2, [r3, #0]
}
   d5066:	bd10      	pop	{r4, pc}
   d5068:	000d6020 	.word	0x000d6020

000d506c <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d506c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d506e:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d5072:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d5076:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d507a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d507e:	2304      	movs	r3, #4
   d5080:	6041      	str	r1, [r0, #4]
   d5082:	7503      	strb	r3, [r0, #20]
   d5084:	bd10      	pop	{r4, pc}

000d5086 <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d5086:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d5088:	780d      	ldrb	r5, [r1, #0]
   d508a:	788b      	ldrb	r3, [r1, #2]
   d508c:	784a      	ldrb	r2, [r1, #1]
   d508e:	78c9      	ldrb	r1, [r1, #3]
   d5090:	9100      	str	r1, [sp, #0]
   d5092:	4629      	mov	r1, r5
   d5094:	f7ff ffea 	bl	d506c <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d5098:	b003      	add	sp, #12
   d509a:	bd30      	pop	{r4, r5, pc}

000d509c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d509c:	4b01      	ldr	r3, [pc, #4]	; (d50a4 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d509e:	4a02      	ldr	r2, [pc, #8]	; (d50a8 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d50a0:	601a      	str	r2, [r3, #0]
   d50a2:	4770      	bx	lr
   d50a4:	2003e4e4 	.word	0x2003e4e4
   d50a8:	000d609f 	.word	0x000d609f

000d50ac <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d50ac:	2200      	movs	r2, #0
   d50ae:	4611      	mov	r1, r2
   d50b0:	6840      	ldr	r0, [r0, #4]
   d50b2:	f7ff bb7d 	b.w	d47b0 <network_listening>

000d50b6 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d50b6:	2200      	movs	r2, #0
   d50b8:	4611      	mov	r1, r2
   d50ba:	6840      	ldr	r0, [r0, #4]
   d50bc:	f7ff bb88 	b.w	d47d0 <network_get_listen_timeout>

000d50c0 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d50c0:	2200      	movs	r2, #0
   d50c2:	6840      	ldr	r0, [r0, #4]
   d50c4:	f7ff bb7c 	b.w	d47c0 <network_set_listen_timeout>

000d50c8 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d50c8:	2200      	movs	r2, #0
   d50ca:	f081 0101 	eor.w	r1, r1, #1
   d50ce:	6840      	ldr	r0, [r0, #4]
   d50d0:	f7ff bb66 	b.w	d47a0 <network_listen>

000d50d4 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d50d4:	2300      	movs	r3, #0
   d50d6:	461a      	mov	r2, r3
   d50d8:	2101      	movs	r1, #1
   d50da:	6840      	ldr	r0, [r0, #4]
   d50dc:	f7ff bb58 	b.w	d4790 <network_off>

000d50e0 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d50e0:	2300      	movs	r3, #0
   d50e2:	461a      	mov	r2, r3
   d50e4:	4619      	mov	r1, r3
   d50e6:	6840      	ldr	r0, [r0, #4]
   d50e8:	f7ff bb4a 	b.w	d4780 <network_on>

000d50ec <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d50ec:	2200      	movs	r2, #0
   d50ee:	4611      	mov	r1, r2
   d50f0:	6840      	ldr	r0, [r0, #4]
   d50f2:	f7ff bb3d 	b.w	d4770 <network_ready>

000d50f6 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d50f6:	2200      	movs	r2, #0
   d50f8:	4611      	mov	r1, r2
   d50fa:	6840      	ldr	r0, [r0, #4]
   d50fc:	f7ff bb28 	b.w	d4750 <network_connecting>

000d5100 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5100:	2200      	movs	r2, #0
   d5102:	2102      	movs	r1, #2
   d5104:	6840      	ldr	r0, [r0, #4]
   d5106:	f7ff bb2b 	b.w	d4760 <network_disconnect>

000d510a <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d510a:	2300      	movs	r3, #0
   d510c:	461a      	mov	r2, r3
   d510e:	6840      	ldr	r0, [r0, #4]
   d5110:	f7ff bb16 	b.w	d4740 <network_connect>

000d5114 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d5114:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5116:	4605      	mov	r5, r0
   d5118:	b188      	cbz	r0, d513e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d511a:	6804      	ldr	r4, [r0, #0]
   d511c:	b14c      	cbz	r4, d5132 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d511e:	68a3      	ldr	r3, [r4, #8]
   d5120:	b11b      	cbz	r3, d512a <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5122:	2203      	movs	r2, #3
   d5124:	4621      	mov	r1, r4
   d5126:	4620      	mov	r0, r4
   d5128:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d512a:	2110      	movs	r1, #16
   d512c:	4620      	mov	r0, r4
   d512e:	f000 fd04 	bl	d5b3a <_ZdlPvj>
   d5132:	4628      	mov	r0, r5
   d5134:	2114      	movs	r1, #20
      }
   d5136:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d513a:	f000 bcfe 	b.w	d5b3a <_ZdlPvj>
   d513e:	bd38      	pop	{r3, r4, r5, pc}

000d5140 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d5140:	b110      	cbz	r0, d5148 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d5142:	6803      	ldr	r3, [r0, #0]
   d5144:	685b      	ldr	r3, [r3, #4]
   d5146:	4718      	bx	r3
   d5148:	4770      	bx	lr

000d514a <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d514a:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d514c:	6803      	ldr	r3, [r0, #0]
   d514e:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d5150:	b1bb      	cbz	r3, d5182 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d5152:	6858      	ldr	r0, [r3, #4]
   d5154:	f7ff f968 	bl	d4428 <os_thread_is_current>
   d5158:	b978      	cbnz	r0, d517a <_ZN6ThreadD1Ev+0x30>
   d515a:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d515c:	7c5a      	ldrb	r2, [r3, #17]
   d515e:	b912      	cbnz	r2, d5166 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d5160:	6858      	ldr	r0, [r3, #4]
   d5162:	f7ff f969 	bl	d4438 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d5166:	6823      	ldr	r3, [r4, #0]
   d5168:	6858      	ldr	r0, [r3, #4]
   d516a:	f7ff f96d 	bl	d4448 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d516e:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d5170:	2300      	movs	r3, #0
   d5172:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d5174:	b128      	cbz	r0, d5182 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d5176:	f7ff ffcd 	bl	d5114 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d517a:	6820      	ldr	r0, [r4, #0]
   d517c:	b108      	cbz	r0, d5182 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d517e:	f7ff ffc9 	bl	d5114 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d5182:	4620      	mov	r0, r4
   d5184:	bd10      	pop	{r4, pc}

000d5186 <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d5186:	b538      	push	{r3, r4, r5, lr}
   d5188:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d518a:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d518e:	b108      	cbz	r0, d5194 <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d5190:	f7fe ff85 	bl	d409e <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d5194:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d5198:	b108      	cbz	r0, d519e <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d519a:	f7ff f965 	bl	d4468 <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d519e:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d51a2:	b135      	cbz	r5, d51b2 <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d51a4:	4628      	mov	r0, r5
   d51a6:	f7ff ffd0 	bl	d514a <_ZN6ThreadD1Ev>
   d51aa:	2104      	movs	r1, #4
   d51ac:	4628      	mov	r0, r5
   d51ae:	f000 fcc4 	bl	d5b3a <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d51b2:	6820      	ldr	r0, [r4, #0]
   d51b4:	b108      	cbz	r0, d51ba <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d51b6:	f7ff ffc3 	bl	d5140 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d51ba:	4620      	mov	r0, r4
   d51bc:	bd38      	pop	{r3, r4, r5, pc}
	...

000d51c0 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d51c0:	b510      	push	{r4, lr}
   d51c2:	4b04      	ldr	r3, [pc, #16]	; (d51d4 <_ZN5spark9MeshClassD1Ev+0x14>)
   d51c4:	4604      	mov	r4, r0
   d51c6:	f840 3b08 	str.w	r3, [r0], #8
   d51ca:	f7ff ffdc 	bl	d5186 <_ZN5spark11MeshPublishD1Ev>
   d51ce:	4620      	mov	r0, r4
   d51d0:	bd10      	pop	{r4, pc}
   d51d2:	bf00      	nop
   d51d4:	000d6114 	.word	0x000d6114

000d51d8 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d51d8:	b538      	push	{r3, r4, r5, lr}
   d51da:	4c0e      	ldr	r4, [pc, #56]	; (d5214 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d51dc:	4b0e      	ldr	r3, [pc, #56]	; (d5218 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d51de:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d51e0:	2500      	movs	r5, #0
   d51e2:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d51e4:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d51e8:	6063      	str	r3, [r4, #4]
   d51ea:	60a5      	str	r5, [r4, #8]
   d51ec:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d51f0:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d51f4:	f7ff f930 	bl	d4458 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d51f8:	4b08      	ldr	r3, [pc, #32]	; (d521c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d51fa:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d51fe:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d5202:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d5204:	4620      	mov	r0, r4
   d5206:	4a06      	ldr	r2, [pc, #24]	; (d5220 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d5208:	4906      	ldr	r1, [pc, #24]	; (d5224 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d520a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d520e:	f000 bc8f 	b.w	d5b30 <__aeabi_atexit>
   d5212:	bf00      	nop
   d5214:	2003e4e8 	.word	0x2003e4e8
   d5218:	000d6148 	.word	0x000d6148
   d521c:	000d6114 	.word	0x000d6114
   d5220:	2003e470 	.word	0x2003e470
   d5224:	000d51c1 	.word	0x000d51c1

000d5228 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d5228:	2300      	movs	r3, #0
   d522a:	461a      	mov	r2, r3
   d522c:	6840      	ldr	r0, [r0, #4]
   d522e:	f7ff ba87 	b.w	d4740 <network_connect>

000d5232 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d5232:	2200      	movs	r2, #0
   d5234:	2102      	movs	r1, #2
   d5236:	6840      	ldr	r0, [r0, #4]
   d5238:	f7ff ba92 	b.w	d4760 <network_disconnect>

000d523c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d523c:	2200      	movs	r2, #0
   d523e:	4611      	mov	r1, r2
   d5240:	6840      	ldr	r0, [r0, #4]
   d5242:	f7ff ba85 	b.w	d4750 <network_connecting>

000d5246 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d5246:	2200      	movs	r2, #0
   d5248:	4611      	mov	r1, r2
   d524a:	6840      	ldr	r0, [r0, #4]
   d524c:	f7ff ba90 	b.w	d4770 <network_ready>

000d5250 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d5250:	2300      	movs	r3, #0
   d5252:	461a      	mov	r2, r3
   d5254:	4619      	mov	r1, r3
   d5256:	6840      	ldr	r0, [r0, #4]
   d5258:	f7ff ba92 	b.w	d4780 <network_on>

000d525c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d525c:	2300      	movs	r3, #0
   d525e:	461a      	mov	r2, r3
   d5260:	4619      	mov	r1, r3
   d5262:	6840      	ldr	r0, [r0, #4]
   d5264:	f7ff ba94 	b.w	d4790 <network_off>

000d5268 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d5268:	2200      	movs	r2, #0
   d526a:	f081 0101 	eor.w	r1, r1, #1
   d526e:	6840      	ldr	r0, [r0, #4]
   d5270:	f7ff ba96 	b.w	d47a0 <network_listen>

000d5274 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d5274:	2200      	movs	r2, #0
   d5276:	6840      	ldr	r0, [r0, #4]
   d5278:	f7ff baa2 	b.w	d47c0 <network_set_listen_timeout>

000d527c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d527c:	2200      	movs	r2, #0
   d527e:	4611      	mov	r1, r2
   d5280:	6840      	ldr	r0, [r0, #4]
   d5282:	f7ff baa5 	b.w	d47d0 <network_get_listen_timeout>

000d5286 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d5286:	2200      	movs	r2, #0
   d5288:	4611      	mov	r1, r2
   d528a:	6840      	ldr	r0, [r0, #4]
   d528c:	f7ff ba90 	b.w	d47b0 <network_listening>

000d5290 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d5290:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5294:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d5296:	b095      	sub	sp, #84	; 0x54
   d5298:	4616      	mov	r6, r2
   d529a:	460d      	mov	r5, r1
   d529c:	4607      	mov	r7, r0
    IPAddress addr;
   d529e:	f7ff fec5 	bl	d502c <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d52a2:	4621      	mov	r1, r4
   d52a4:	2220      	movs	r2, #32
   d52a6:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d52a8:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d52aa:	f000 fdc6 	bl	d5e3a <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d52ae:	2340      	movs	r3, #64	; 0x40
   d52b0:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d52b2:	4621      	mov	r1, r4
   d52b4:	466b      	mov	r3, sp
   d52b6:	aa0c      	add	r2, sp, #48	; 0x30
   d52b8:	4630      	mov	r0, r6
   d52ba:	f7ff f955 	bl	d4568 <netdb_getaddrinfo>
    if (!r) {
   d52be:	4604      	mov	r4, r0
   d52c0:	2800      	cmp	r0, #0
   d52c2:	d144      	bne.n	d534e <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d52c4:	4602      	mov	r2, r0
   d52c6:	2101      	movs	r1, #1
   d52c8:	6868      	ldr	r0, [r5, #4]
   d52ca:	f7ff fa51 	bl	d4770 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d52ce:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d52d0:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d52d2:	4622      	mov	r2, r4
   d52d4:	6868      	ldr	r0, [r5, #4]
   d52d6:	f7ff fa4b 	bl	d4770 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d52da:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d52dc:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d52de:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d52e0:	2e00      	cmp	r6, #0
   d52e2:	d034      	beq.n	d534e <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d52e4:	2900      	cmp	r1, #0
   d52e6:	d132      	bne.n	d534e <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d52e8:	6873      	ldr	r3, [r6, #4]
   d52ea:	2b02      	cmp	r3, #2
   d52ec:	d002      	beq.n	d52f4 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d52ee:	2b0a      	cmp	r3, #10
   d52f0:	d009      	beq.n	d5306 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d52f2:	e02a      	b.n	d534a <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d52f4:	f1b8 0f00 	cmp.w	r8, #0
   d52f8:	d027      	beq.n	d534a <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d52fa:	6971      	ldr	r1, [r6, #20]
   d52fc:	4638      	mov	r0, r7
   d52fe:	3104      	adds	r1, #4
   d5300:	f7ff fec1 	bl	d5086 <_ZN9IPAddressaSEPKh>
   d5304:	e020      	b.n	d5348 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d5306:	f1b9 0f00 	cmp.w	r9, #0
   d530a:	d01e      	beq.n	d534a <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d530c:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d530e:	2211      	movs	r2, #17
   d5310:	a801      	add	r0, sp, #4
   d5312:	f000 fd92 	bl	d5e3a <memset>
                    a.v = 6;
   d5316:	2306      	movs	r3, #6
   d5318:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d531c:	ad01      	add	r5, sp, #4
   d531e:	f104 0308 	add.w	r3, r4, #8
   d5322:	3418      	adds	r4, #24
   d5324:	6818      	ldr	r0, [r3, #0]
   d5326:	6859      	ldr	r1, [r3, #4]
   d5328:	462a      	mov	r2, r5
   d532a:	c203      	stmia	r2!, {r0, r1}
   d532c:	3308      	adds	r3, #8
   d532e:	42a3      	cmp	r3, r4
   d5330:	4615      	mov	r5, r2
   d5332:	d1f7      	bne.n	d5324 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d5334:	a901      	add	r1, sp, #4
   d5336:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d5338:	ad07      	add	r5, sp, #28
   d533a:	f7ff fe85 	bl	d5048 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d533e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5340:	1d3c      	adds	r4, r7, #4
   d5342:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5344:	682b      	ldr	r3, [r5, #0]
   d5346:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d5348:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d534a:	69f6      	ldr	r6, [r6, #28]
   d534c:	e7c8      	b.n	d52e0 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d534e:	9800      	ldr	r0, [sp, #0]
   d5350:	f7ff f902 	bl	d4558 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d5354:	4638      	mov	r0, r7
   d5356:	b015      	add	sp, #84	; 0x54
   d5358:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d535c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d535c:	4b02      	ldr	r3, [pc, #8]	; (d5368 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d535e:	4a03      	ldr	r2, [pc, #12]	; (d536c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d5360:	601a      	str	r2, [r3, #0]
   d5362:	2200      	movs	r2, #0
   d5364:	605a      	str	r2, [r3, #4]
   d5366:	4770      	bx	lr
   d5368:	2003e6bc 	.word	0x2003e6bc
   d536c:	000d6148 	.word	0x000d6148

000d5370 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d5370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5372:	4606      	mov	r6, r0
   d5374:	460d      	mov	r5, r1
   d5376:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d5378:	2400      	movs	r4, #0
  while (size--) {
   d537a:	42bd      	cmp	r5, r7
   d537c:	d00c      	beq.n	d5398 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d537e:	6833      	ldr	r3, [r6, #0]
   d5380:	f815 1b01 	ldrb.w	r1, [r5], #1
   d5384:	689b      	ldr	r3, [r3, #8]
   d5386:	4630      	mov	r0, r6
   d5388:	4798      	blx	r3
     if (chunk>=0)
   d538a:	2800      	cmp	r0, #0
   d538c:	db01      	blt.n	d5392 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d538e:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d5390:	e7f3      	b.n	d537a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d5392:	2c00      	cmp	r4, #0
   d5394:	bf08      	it	eq
   d5396:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d5398:	4620      	mov	r0, r4
   d539a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d539c <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d539c:	b570      	push	{r4, r5, r6, lr}
   d539e:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d53a0:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d53a2:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d53a4:	b149      	cbz	r1, d53ba <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d53a6:	f000 fd9c 	bl	d5ee2 <strlen>
   d53aa:	682b      	ldr	r3, [r5, #0]
   d53ac:	4602      	mov	r2, r0
   d53ae:	4621      	mov	r1, r4
   d53b0:	4628      	mov	r0, r5
   d53b2:	68db      	ldr	r3, [r3, #12]
    }
   d53b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d53b8:	4718      	bx	r3
    }
   d53ba:	bd70      	pop	{r4, r5, r6, pc}

000d53bc <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d53bc:	6803      	ldr	r3, [r0, #0]
   d53be:	689b      	ldr	r3, [r3, #8]
   d53c0:	4718      	bx	r3

000d53c2 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d53c2:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d53c4:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d53c6:	4605      	mov	r5, r0
  size_t n = print('\r');
   d53c8:	f7ff fff8 	bl	d53bc <_ZN5Print5printEc>
  n += print('\n');
   d53cc:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d53ce:	4604      	mov	r4, r0
  n += print('\n');
   d53d0:	4628      	mov	r0, r5
   d53d2:	f7ff fff3 	bl	d53bc <_ZN5Print5printEc>
  return n;
}
   d53d6:	4420      	add	r0, r4
   d53d8:	bd38      	pop	{r3, r4, r5, pc}

000d53da <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d53da:	b530      	push	{r4, r5, lr}
   d53dc:	b08b      	sub	sp, #44	; 0x2c
   d53de:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d53e0:	2100      	movs	r1, #0
   d53e2:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d53e6:	2a01      	cmp	r2, #1
   d53e8:	bf98      	it	ls
   d53ea:	220a      	movls	r2, #10
   d53ec:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d53f0:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d53f4:	fb05 3312 	mls	r3, r5, r2, r3
   d53f8:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d53fc:	2b09      	cmp	r3, #9
   d53fe:	bf94      	ite	ls
   d5400:	3330      	addls	r3, #48	; 0x30
   d5402:	3337      	addhi	r3, #55	; 0x37
   d5404:	b2db      	uxtb	r3, r3
   d5406:	4621      	mov	r1, r4
   d5408:	f804 3901 	strb.w	r3, [r4], #-1
   d540c:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d540e:	2d00      	cmp	r5, #0
   d5410:	d1ee      	bne.n	d53f0 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d5412:	f7ff ffc3 	bl	d539c <_ZN5Print5writeEPKc>
}
   d5416:	b00b      	add	sp, #44	; 0x2c
   d5418:	bd30      	pop	{r4, r5, pc}

000d541a <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d541a:	b510      	push	{r4, lr}
   d541c:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d541e:	f7ff fa7e 	bl	d491e <_ZNSt14_Function_baseD1Ev>
   d5422:	4620      	mov	r0, r4
   d5424:	bd10      	pop	{r4, pc}
	...

000d5428 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5428:	4803      	ldr	r0, [pc, #12]	; (d5438 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d542a:	4a04      	ldr	r2, [pc, #16]	; (d543c <_GLOBAL__sub_I_RGB+0x14>)
   d542c:	4904      	ldr	r1, [pc, #16]	; (d5440 <_GLOBAL__sub_I_RGB+0x18>)
   d542e:	2300      	movs	r3, #0
   d5430:	6083      	str	r3, [r0, #8]
   d5432:	f000 bb7d 	b.w	d5b30 <__aeabi_atexit>
   d5436:	bf00      	nop
   d5438:	2003e6c4 	.word	0x2003e6c4
   d543c:	2003e470 	.word	0x2003e470
   d5440:	000d541b 	.word	0x000d541b

000d5444 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d5444:	b510      	push	{r4, lr}
   d5446:	4604      	mov	r4, r0
{
    _spi = spi;
   d5448:	7001      	strb	r1, [r0, #0]
    HAL_SPI_Init(_spi);
   d544a:	4608      	mov	r0, r1
   d544c:	f7ff f894 	bl	d4578 <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d5450:	2300      	movs	r3, #0
   d5452:	6063      	str	r3, [r4, #4]
}
   d5454:	4620      	mov	r0, r4
   d5456:	bd10      	pop	{r4, pc}

000d5458 <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
   d5458:	7800      	ldrb	r0, [r0, #0]
   d545a:	f7ff b895 	b.w	d4588 <HAL_SPI_Is_Enabled>

000d545e <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d545e:	b510      	push	{r4, lr}
   d5460:	4604      	mov	r4, r0
{
	free(buffer);
   d5462:	6800      	ldr	r0, [r0, #0]
   d5464:	f7ff f9c4 	bl	d47f0 <free>
}
   d5468:	4620      	mov	r0, r4
   d546a:	bd10      	pop	{r4, pc}

000d546c <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d546c:	b510      	push	{r4, lr}
   d546e:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d5470:	6800      	ldr	r0, [r0, #0]
   d5472:	b108      	cbz	r0, d5478 <_ZN6String10invalidateEv+0xc>
   d5474:	f7ff f9bc 	bl	d47f0 <free>
	buffer = NULL;
   d5478:	2300      	movs	r3, #0
   d547a:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d547c:	60a3      	str	r3, [r4, #8]
   d547e:	6063      	str	r3, [r4, #4]
   d5480:	bd10      	pop	{r4, pc}

000d5482 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d5482:	b538      	push	{r3, r4, r5, lr}
   d5484:	4604      	mov	r4, r0
   d5486:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d5488:	6800      	ldr	r0, [r0, #0]
   d548a:	3101      	adds	r1, #1
   d548c:	f7ff f9b8 	bl	d4800 <realloc>
	if (newbuffer) {
   d5490:	b110      	cbz	r0, d5498 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d5492:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d5496:	2001      	movs	r0, #1
	}
	return 0;
}
   d5498:	bd38      	pop	{r3, r4, r5, pc}

000d549a <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d549a:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d549c:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d549e:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d54a0:	b113      	cbz	r3, d54a8 <_ZN6String7reserveEj+0xe>
   d54a2:	6843      	ldr	r3, [r0, #4]
   d54a4:	428b      	cmp	r3, r1
   d54a6:	d207      	bcs.n	d54b8 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d54a8:	4620      	mov	r0, r4
   d54aa:	f7ff ffea 	bl	d5482 <_ZN6String12changeBufferEj>
   d54ae:	b120      	cbz	r0, d54ba <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d54b0:	68a3      	ldr	r3, [r4, #8]
   d54b2:	b90b      	cbnz	r3, d54b8 <_ZN6String7reserveEj+0x1e>
   d54b4:	6822      	ldr	r2, [r4, #0]
   d54b6:	7013      	strb	r3, [r2, #0]
   d54b8:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d54ba:	bd10      	pop	{r4, pc}

000d54bc <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d54bc:	b570      	push	{r4, r5, r6, lr}
   d54be:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d54c0:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d54c2:	4604      	mov	r4, r0
   d54c4:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d54c6:	f7ff ffe8 	bl	d549a <_ZN6String7reserveEj>
   d54ca:	b918      	cbnz	r0, d54d4 <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d54cc:	4620      	mov	r0, r4
   d54ce:	f7ff ffcd 	bl	d546c <_ZN6String10invalidateEv>
		return *this;
   d54d2:	e009      	b.n	d54e8 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d54d4:	462a      	mov	r2, r5
   d54d6:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d54d8:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d54da:	6820      	ldr	r0, [r4, #0]
   d54dc:	f000 fca2 	bl	d5e24 <memcpy>
	buffer[len] = 0;
   d54e0:	6822      	ldr	r2, [r4, #0]
   d54e2:	68a3      	ldr	r3, [r4, #8]
   d54e4:	2100      	movs	r1, #0
   d54e6:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d54e8:	4620      	mov	r0, r4
   d54ea:	bd70      	pop	{r4, r5, r6, pc}

000d54ec <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d54ec:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d54ee:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d54f0:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d54f2:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d54f4:	6043      	str	r3, [r0, #4]
	len = 0;
   d54f6:	6083      	str	r3, [r0, #8]
	flags = 0;
   d54f8:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d54fa:	460d      	mov	r5, r1
   d54fc:	b139      	cbz	r1, d550e <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d54fe:	4608      	mov	r0, r1
   d5500:	f000 fcef 	bl	d5ee2 <strlen>
   d5504:	4629      	mov	r1, r5
   d5506:	4602      	mov	r2, r0
   d5508:	4620      	mov	r0, r4
   d550a:	f7ff ffd7 	bl	d54bc <_ZN6String4copyEPKcj>
}
   d550e:	4620      	mov	r0, r4
   d5510:	bd38      	pop	{r3, r4, r5, pc}

000d5512 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d5512:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
   d5514:	b510      	push	{r4, lr}
   d5516:	460b      	mov	r3, r1
   d5518:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d551a:	d007      	beq.n	d552c <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d551c:	6809      	ldr	r1, [r1, #0]
   d551e:	b119      	cbz	r1, d5528 <_ZN6StringaSERKS_+0x16>
   d5520:	689a      	ldr	r2, [r3, #8]
   d5522:	f7ff ffcb 	bl	d54bc <_ZN6String4copyEPKcj>
   d5526:	e001      	b.n	d552c <_ZN6StringaSERKS_+0x1a>
	else invalidate();
   d5528:	f7ff ffa0 	bl	d546c <_ZN6String10invalidateEv>

	return *this;
}
   d552c:	4620      	mov	r0, r4
   d552e:	bd10      	pop	{r4, pc}

000d5530 <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d5530:	b510      	push	{r4, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5532:	2300      	movs	r3, #0
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d5534:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5536:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d5538:	6043      	str	r3, [r0, #4]
	len = 0;
   d553a:	6083      	str	r3, [r0, #8]
	flags = 0;
   d553c:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
   d553e:	f7ff ffe8 	bl	d5512 <_ZN6StringaSERKS_>
}
   d5542:	4620      	mov	r0, r4
   d5544:	bd10      	pop	{r4, pc}

000d5546 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d5546:	b538      	push	{r3, r4, r5, lr}
   d5548:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
   d554a:	460c      	mov	r4, r1
   d554c:	b141      	cbz	r1, d5560 <_ZN6StringaSEPKc+0x1a>
   d554e:	4608      	mov	r0, r1
   d5550:	f000 fcc7 	bl	d5ee2 <strlen>
   d5554:	4621      	mov	r1, r4
   d5556:	4602      	mov	r2, r0
   d5558:	4628      	mov	r0, r5
   d555a:	f7ff ffaf 	bl	d54bc <_ZN6String4copyEPKcj>
   d555e:	e001      	b.n	d5564 <_ZN6StringaSEPKc+0x1e>
	else invalidate();
   d5560:	f7ff ff84 	bl	d546c <_ZN6String10invalidateEv>

	return *this;
}
   d5564:	4628      	mov	r0, r5
   d5566:	bd38      	pop	{r3, r4, r5, pc}

000d5568 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   d5568:	b570      	push	{r4, r5, r6, lr}
   d556a:	4604      	mov	r4, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   d556c:	460e      	mov	r6, r1
   d556e:	b909      	cbnz	r1, d5574 <_ZN6String6concatEPKcj+0xc>
   d5570:	2000      	movs	r0, #0
   d5572:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   d5574:	b16a      	cbz	r2, d5592 <_ZN6String6concatEPKcj+0x2a>
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
   d5576:	6883      	ldr	r3, [r0, #8]
   d5578:	18d5      	adds	r5, r2, r3
	if (!cstr) return 0;
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
   d557a:	4629      	mov	r1, r5
   d557c:	f7ff ff8d 	bl	d549a <_ZN6String7reserveEj>
   d5580:	2800      	cmp	r0, #0
   d5582:	d0f5      	beq.n	d5570 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   d5584:	6820      	ldr	r0, [r4, #0]
   d5586:	68a3      	ldr	r3, [r4, #8]
   d5588:	4631      	mov	r1, r6
   d558a:	4418      	add	r0, r3
   d558c:	f000 fc86 	bl	d5e9c <strcpy>
	len = newlen;
   d5590:	60a5      	str	r5, [r4, #8]

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	if (!cstr) return 0;
	if (length == 0) return 1;
   d5592:	2001      	movs	r0, #1
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   d5594:	bd70      	pop	{r4, r5, r6, pc}

000d5596 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   d5596:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   d5598:	688a      	ldr	r2, [r1, #8]
   d559a:	6809      	ldr	r1, [r1, #0]
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   d559c:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   d559e:	f7ff ffe3 	bl	d5568 <_ZN6String6concatEPKcj>
   d55a2:	b910      	cbnz	r0, d55aa <_ZplRK15StringSumHelperRK6String+0x14>
   d55a4:	4620      	mov	r0, r4
   d55a6:	f7ff ff61 	bl	d546c <_ZN6String10invalidateEv>
	return a;
}
   d55aa:	4620      	mov	r0, r4
   d55ac:	bd10      	pop	{r4, pc}

000d55ae <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   d55ae:	b538      	push	{r3, r4, r5, lr}
   d55b0:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   d55b2:	460d      	mov	r5, r1
   d55b4:	b141      	cbz	r1, d55c8 <_ZplRK15StringSumHelperPKc+0x1a>
   d55b6:	4608      	mov	r0, r1
   d55b8:	f000 fc93 	bl	d5ee2 <strlen>
   d55bc:	4629      	mov	r1, r5
   d55be:	4602      	mov	r2, r0
   d55c0:	4620      	mov	r0, r4
   d55c2:	f7ff ffd1 	bl	d5568 <_ZN6String6concatEPKcj>
   d55c6:	b910      	cbnz	r0, d55ce <_ZplRK15StringSumHelperPKc+0x20>
   d55c8:	4620      	mov	r0, r4
   d55ca:	f7ff ff4f 	bl	d546c <_ZN6String10invalidateEv>
	return a;
}
   d55ce:	4620      	mov	r0, r4
   d55d0:	bd38      	pop	{r3, r4, r5, pc}
	...

000d55d4 <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
   d55d4:	b40e      	push	{r1, r2, r3}
   d55d6:	b5ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7, lr}
   d55d8:	ac09      	add	r4, sp, #36	; 0x24
   d55da:	4605      	mov	r5, r0
   d55dc:	f854 7b04 	ldr.w	r7, [r4], #4
    va_list marker;
    va_start(marker, fmt);
   d55e0:	9401      	str	r4, [sp, #4]
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   d55e2:	4623      	mov	r3, r4
   d55e4:	463a      	mov	r2, r7
   d55e6:	2105      	movs	r1, #5
   d55e8:	a802      	add	r0, sp, #8
   d55ea:	f7ff f911 	bl	d4810 <vsnprintf>
    va_end(marker);

    String result;
   d55ee:	490c      	ldr	r1, [pc, #48]	; (d5620 <_ZN6String6formatEPKcz+0x4c>)
{
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   d55f0:	4606      	mov	r6, r0
    va_end(marker);

    String result;
   d55f2:	4628      	mov	r0, r5
   d55f4:	f7ff ff7a 	bl	d54ec <_ZN6StringC1EPK19__FlashStringHelper>
    result.reserve(n);  // internally adds +1 for null terminator
   d55f8:	4631      	mov	r1, r6
   d55fa:	4628      	mov	r0, r5
   d55fc:	f7ff ff4d 	bl	d549a <_ZN6String7reserveEj>
    if (result.buffer) {
   d5600:	6828      	ldr	r0, [r5, #0]
   d5602:	b130      	cbz	r0, d5612 <_ZN6String6formatEPKcz+0x3e>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   d5604:	4623      	mov	r3, r4
   d5606:	463a      	mov	r2, r7
   d5608:	1c71      	adds	r1, r6, #1
    va_end(marker);

    String result;
    result.reserve(n);  // internally adds +1 for null terminator
    if (result.buffer) {
        va_start(marker, fmt);
   d560a:	9401      	str	r4, [sp, #4]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   d560c:	f7ff f900 	bl	d4810 <vsnprintf>
        va_end(marker);
        result.len = n;
   d5610:	60a8      	str	r0, [r5, #8]
    }
    return result;
}
   d5612:	4628      	mov	r0, r5
   d5614:	b004      	add	sp, #16
   d5616:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   d561a:	b003      	add	sp, #12
   d561c:	4770      	bx	lr
   d561e:	bf00      	nop
   d5620:	000d60d0 	.word	0x000d60d0

000d5624 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d5624:	b510      	push	{r4, lr}
   d5626:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d5628:	6800      	ldr	r0, [r0, #0]
   d562a:	b118      	cbz	r0, d5634 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
   d562c:	f7ff f8e0 	bl	d47f0 <free>
            wakeupSource_ = nullptr;
   d5630:	2300      	movs	r3, #0
   d5632:	6023      	str	r3, [r4, #0]
   d5634:	bd10      	pop	{r4, pc}

000d5636 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d5636:	b510      	push	{r4, lr}
   d5638:	4604      	mov	r4, r0
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
   d563a:	f7ff fff3 	bl	d5624 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d563e:	4620      	mov	r0, r4
   d5640:	bd10      	pop	{r4, pc}
	...

000d5644 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d5644:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d5646:	4c09      	ldr	r4, [pc, #36]	; (d566c <_GLOBAL__sub_I_System+0x28>)
   d5648:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d564a:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d564e:	6020      	str	r0, [r4, #0]
   d5650:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d5652:	71a0      	strb	r0, [r4, #6]
   d5654:	8120      	strh	r0, [r4, #8]
   d5656:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d5658:	f7ff f81e 	bl	d4698 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d565c:	4620      	mov	r0, r4
   d565e:	4a04      	ldr	r2, [pc, #16]	; (d5670 <_GLOBAL__sub_I_System+0x2c>)
   d5660:	4904      	ldr	r1, [pc, #16]	; (d5674 <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d5662:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d5666:	f000 ba63 	b.w	d5b30 <__aeabi_atexit>
   d566a:	bf00      	nop
   d566c:	2003e6d4 	.word	0x2003e6d4
   d5670:	2003e470 	.word	0x2003e470
   d5674:	000d5637 	.word	0x000d5637

000d5678 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d5678:	4b02      	ldr	r3, [pc, #8]	; (d5684 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d567a:	681a      	ldr	r2, [r3, #0]
   d567c:	4b02      	ldr	r3, [pc, #8]	; (d5688 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d567e:	601a      	str	r2, [r3, #0]
   d5680:	4770      	bx	lr
   d5682:	bf00      	nop
   d5684:	2003e408 	.word	0x2003e408
   d5688:	2003e6e0 	.word	0x2003e6e0

000d568c <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d568c:	4770      	bx	lr

000d568e <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d568e:	7441      	strb	r1, [r0, #17]
   d5690:	4770      	bx	lr

000d5692 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d5692:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d5694:	7c00      	ldrb	r0, [r0, #16]
   d5696:	f7fe ffb7 	bl	d4608 <HAL_USART_Available_Data_For_Write>
}
   d569a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d569e:	bd08      	pop	{r3, pc}

000d56a0 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d56a0:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d56a2:	7c00      	ldrb	r0, [r0, #16]
   d56a4:	f7fe ff88 	bl	d45b8 <HAL_USART_Available_Data>
}
   d56a8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d56ac:	bd08      	pop	{r3, pc}

000d56ae <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d56ae:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d56b0:	7c00      	ldrb	r0, [r0, #16]
   d56b2:	f7fe ff91 	bl	d45d8 <HAL_USART_Peek_Data>
}
   d56b6:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d56ba:	bf28      	it	cs
   d56bc:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d56c0:	bd08      	pop	{r3, pc}

000d56c2 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d56c2:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d56c4:	7c00      	ldrb	r0, [r0, #16]
   d56c6:	f7fe ff7f 	bl	d45c8 <HAL_USART_Read_Data>
}
   d56ca:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d56ce:	bf28      	it	cs
   d56d0:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d56d4:	bd08      	pop	{r3, pc}

000d56d6 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d56d6:	7c00      	ldrb	r0, [r0, #16]
   d56d8:	f7fe bf86 	b.w	d45e8 <HAL_USART_Flush_Data>

000d56dc <_ZN11USARTSerialD0Ev>:
   d56dc:	b510      	push	{r4, lr}
   d56de:	2114      	movs	r1, #20
   d56e0:	4604      	mov	r4, r0
   d56e2:	f000 fa2a 	bl	d5b3a <_ZdlPvj>
   d56e6:	4620      	mov	r0, r4
   d56e8:	bd10      	pop	{r4, pc}

000d56ea <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d56ea:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d56ec:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d56ee:	4604      	mov	r4, r0
   d56f0:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d56f2:	b925      	cbnz	r5, d56fe <_ZN11USARTSerial5writeEh+0x14>
   d56f4:	7c00      	ldrb	r0, [r0, #16]
   d56f6:	f7fe ff87 	bl	d4608 <HAL_USART_Available_Data_For_Write>
   d56fa:	2800      	cmp	r0, #0
   d56fc:	dd05      	ble.n	d570a <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d56fe:	4631      	mov	r1, r6
   d5700:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d5702:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d5706:	f7fe bf4f 	b.w	d45a8 <HAL_USART_Write_Data>
  }
  return 0;
}
   d570a:	4628      	mov	r0, r5
   d570c:	bd70      	pop	{r4, r5, r6, pc}
	...

000d5710 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d5710:	b510      	push	{r4, lr}
   d5712:	4604      	mov	r4, r0
   d5714:	4608      	mov	r0, r1
   d5716:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d5718:	2200      	movs	r2, #0
   d571a:	6062      	str	r2, [r4, #4]
   d571c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d5720:	60a2      	str	r2, [r4, #8]
   d5722:	4a05      	ldr	r2, [pc, #20]	; (d5738 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d5724:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d5726:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d5728:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d572a:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d572c:	461a      	mov	r2, r3
   d572e:	f7fe ff33 	bl	d4598 <HAL_USART_Init>
}
   d5732:	4620      	mov	r0, r4
   d5734:	bd10      	pop	{r4, pc}
   d5736:	bf00      	nop
   d5738:	000d61a8 	.word	0x000d61a8

000d573c <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d573c:	7c00      	ldrb	r0, [r0, #16]
   d573e:	f7fe bf5b 	b.w	d45f8 <HAL_USART_Is_Enabled>
	...

000d5744 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d5744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
#else
  if (!serial1_rx_buffer) {
   d5746:	4c19      	ldr	r4, [pc, #100]	; (d57ac <_Z22__fetch_global_Serial1v+0x68>)
   d5748:	6825      	ldr	r5, [r4, #0]
   d574a:	b94d      	cbnz	r5, d5760 <_Z22__fetch_global_Serial1v+0x1c>
    serial1_rx_buffer = new Ring_Buffer();
   d574c:	2084      	movs	r0, #132	; 0x84
   d574e:	f7fe fca2 	bl	d4096 <_Znwj>
   d5752:	4606      	mov	r6, r0
   d5754:	b118      	cbz	r0, d575e <_Z22__fetch_global_Serial1v+0x1a>
   d5756:	2284      	movs	r2, #132	; 0x84
   d5758:	4629      	mov	r1, r5
   d575a:	f000 fb6e 	bl	d5e3a <memset>
   d575e:	6026      	str	r6, [r4, #0]
  }
  if (!serial1_tx_buffer) {
   d5760:	4d13      	ldr	r5, [pc, #76]	; (d57b0 <_Z22__fetch_global_Serial1v+0x6c>)
   d5762:	682e      	ldr	r6, [r5, #0]
   d5764:	b94e      	cbnz	r6, d577a <_Z22__fetch_global_Serial1v+0x36>
    serial1_tx_buffer = new Ring_Buffer();
   d5766:	2084      	movs	r0, #132	; 0x84
   d5768:	f7fe fc95 	bl	d4096 <_Znwj>
   d576c:	4607      	mov	r7, r0
   d576e:	b118      	cbz	r0, d5778 <_Z22__fetch_global_Serial1v+0x34>
   d5770:	2284      	movs	r2, #132	; 0x84
   d5772:	4631      	mov	r1, r6
   d5774:	f000 fb61 	bl	d5e3a <memset>
   d5778:	602f      	str	r7, [r5, #0]
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
   d577a:	4f0e      	ldr	r7, [pc, #56]	; (d57b4 <_Z22__fetch_global_Serial1v+0x70>)
   d577c:	6839      	ldr	r1, [r7, #0]
   d577e:	f011 0601 	ands.w	r6, r1, #1
   d5782:	d111      	bne.n	d57a8 <_Z22__fetch_global_Serial1v+0x64>
   d5784:	4638      	mov	r0, r7
   d5786:	f7fe fc8c 	bl	d40a2 <__cxa_guard_acquire>
   d578a:	b168      	cbz	r0, d57a8 <_Z22__fetch_global_Serial1v+0x64>
   d578c:	6822      	ldr	r2, [r4, #0]
   d578e:	682b      	ldr	r3, [r5, #0]
   d5790:	4809      	ldr	r0, [pc, #36]	; (d57b8 <_Z22__fetch_global_Serial1v+0x74>)
   d5792:	4631      	mov	r1, r6
   d5794:	f7ff ffbc 	bl	d5710 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d5798:	4638      	mov	r0, r7
   d579a:	f7fe fc87 	bl	d40ac <__cxa_guard_release>
   d579e:	4a07      	ldr	r2, [pc, #28]	; (d57bc <_Z22__fetch_global_Serial1v+0x78>)
   d57a0:	4907      	ldr	r1, [pc, #28]	; (d57c0 <_Z22__fetch_global_Serial1v+0x7c>)
   d57a2:	4805      	ldr	r0, [pc, #20]	; (d57b8 <_Z22__fetch_global_Serial1v+0x74>)
   d57a4:	f000 f9c4 	bl	d5b30 <__aeabi_atexit>
#endif
	return serial1;
}
   d57a8:	4803      	ldr	r0, [pc, #12]	; (d57b8 <_Z22__fetch_global_Serial1v+0x74>)
   d57aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d57ac:	2003e700 	.word	0x2003e700
   d57b0:	2003e6f8 	.word	0x2003e6f8
   d57b4:	2003e6fc 	.word	0x2003e6fc
   d57b8:	2003e6e4 	.word	0x2003e6e4
   d57bc:	2003e470 	.word	0x2003e470
   d57c0:	000d568d 	.word	0x000d568d

000d57c4 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d57c4:	7441      	strb	r1, [r0, #17]
   d57c6:	4770      	bx	lr

000d57c8 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d57c8:	4770      	bx	lr

000d57ca <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d57ca:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d57cc:	2100      	movs	r1, #0
   d57ce:	7c00      	ldrb	r0, [r0, #16]
   d57d0:	f7fe ff42 	bl	d4658 <HAL_USB_USART_Receive_Data>
}
   d57d4:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d57d8:	bf28      	it	cs
   d57da:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d57de:	bd08      	pop	{r3, pc}

000d57e0 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d57e0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d57e2:	2101      	movs	r1, #1
   d57e4:	7c00      	ldrb	r0, [r0, #16]
   d57e6:	f7fe ff37 	bl	d4658 <HAL_USB_USART_Receive_Data>
}
   d57ea:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d57ee:	bf28      	it	cs
   d57f0:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d57f4:	bd08      	pop	{r3, pc}

000d57f6 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d57f6:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d57f8:	7c00      	ldrb	r0, [r0, #16]
   d57fa:	f7fe ff25 	bl	d4648 <HAL_USB_USART_Available_Data_For_Write>
}
   d57fe:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5802:	bd08      	pop	{r3, pc}

000d5804 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d5804:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d5806:	7c00      	ldrb	r0, [r0, #16]
   d5808:	f7fe ff16 	bl	d4638 <HAL_USB_USART_Available_Data>
}
   d580c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5810:	bd08      	pop	{r3, pc}

000d5812 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d5812:	7c00      	ldrb	r0, [r0, #16]
   d5814:	f7fe bf30 	b.w	d4678 <HAL_USB_USART_Flush_Data>

000d5818 <_ZN9USBSerialD0Ev>:
   d5818:	b510      	push	{r4, lr}
   d581a:	2114      	movs	r1, #20
   d581c:	4604      	mov	r4, r0
   d581e:	f000 f98c 	bl	d5b3a <_ZdlPvj>
   d5822:	4620      	mov	r0, r4
   d5824:	bd10      	pop	{r4, pc}

000d5826 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d5826:	b538      	push	{r3, r4, r5, lr}
   d5828:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d582a:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d582c:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d582e:	f7fe ff0b 	bl	d4648 <HAL_USB_USART_Available_Data_For_Write>
   d5832:	2800      	cmp	r0, #0
   d5834:	dc01      	bgt.n	d583a <_ZN9USBSerial5writeEh+0x14>
   d5836:	7c60      	ldrb	r0, [r4, #17]
   d5838:	b128      	cbz	r0, d5846 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d583a:	4629      	mov	r1, r5
   d583c:	7c20      	ldrb	r0, [r4, #16]
   d583e:	f7fe ff13 	bl	d4668 <HAL_USB_USART_Send_Data>
   d5842:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d5846:	bd38      	pop	{r3, r4, r5, pc}

000d5848 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5848:	b510      	push	{r4, lr}
   d584a:	4604      	mov	r4, r0
   d584c:	2300      	movs	r3, #0
   d584e:	6063      	str	r3, [r4, #4]
   d5850:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5854:	60a3      	str	r3, [r4, #8]
   d5856:	4b05      	ldr	r3, [pc, #20]	; (d586c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d5858:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d585a:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d585c:	4608      	mov	r0, r1
{
  _serial = serial;
   d585e:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d5860:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d5862:	4611      	mov	r1, r2
   d5864:	f7fe fed8 	bl	d4618 <HAL_USB_USART_Init>
}
   d5868:	4620      	mov	r0, r4
   d586a:	bd10      	pop	{r4, pc}
   d586c:	000d61d8 	.word	0x000d61d8

000d5870 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d5870:	2200      	movs	r2, #0
   d5872:	7c00      	ldrb	r0, [r0, #16]
   d5874:	f7fe bed8 	b.w	d4628 <HAL_USB_USART_Begin>

000d5878 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5878:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d587a:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d587c:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d587e:	2100      	movs	r1, #0
   d5880:	f000 fadb 	bl	d5e3a <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d5884:	4620      	mov	r0, r4
   d5886:	bd10      	pop	{r4, pc}

000d5888 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d5888:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d588a:	4d0e      	ldr	r5, [pc, #56]	; (d58c4 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d588c:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d588e:	a801      	add	r0, sp, #4
   d5890:	f7ff fff2 	bl	d5878 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5894:	6829      	ldr	r1, [r5, #0]
   d5896:	f011 0401 	ands.w	r4, r1, #1
   d589a:	d110      	bne.n	d58be <_Z16_fetch_usbserialv+0x36>
   d589c:	4628      	mov	r0, r5
   d589e:	f7fe fc00 	bl	d40a2 <__cxa_guard_acquire>
   d58a2:	b160      	cbz	r0, d58be <_Z16_fetch_usbserialv+0x36>
   d58a4:	aa01      	add	r2, sp, #4
   d58a6:	4621      	mov	r1, r4
   d58a8:	4807      	ldr	r0, [pc, #28]	; (d58c8 <_Z16_fetch_usbserialv+0x40>)
   d58aa:	f7ff ffcd 	bl	d5848 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d58ae:	4628      	mov	r0, r5
   d58b0:	f7fe fbfc 	bl	d40ac <__cxa_guard_release>
   d58b4:	4a05      	ldr	r2, [pc, #20]	; (d58cc <_Z16_fetch_usbserialv+0x44>)
   d58b6:	4906      	ldr	r1, [pc, #24]	; (d58d0 <_Z16_fetch_usbserialv+0x48>)
   d58b8:	4803      	ldr	r0, [pc, #12]	; (d58c8 <_Z16_fetch_usbserialv+0x40>)
   d58ba:	f000 f939 	bl	d5b30 <__aeabi_atexit>
	return _usbserial;
}
   d58be:	4802      	ldr	r0, [pc, #8]	; (d58c8 <_Z16_fetch_usbserialv+0x40>)
   d58c0:	b007      	add	sp, #28
   d58c2:	bd30      	pop	{r4, r5, pc}
   d58c4:	2003e704 	.word	0x2003e704
   d58c8:	2003e708 	.word	0x2003e708
   d58cc:	2003e470 	.word	0x2003e470
   d58d0:	000d57c9 	.word	0x000d57c9

000d58d4 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d58d4:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d58d6:	4b0f      	ldr	r3, [pc, #60]	; (d5914 <serialEventRun+0x40>)
   d58d8:	b133      	cbz	r3, d58e8 <serialEventRun+0x14>
   d58da:	f7ff ffd5 	bl	d5888 <_Z16_fetch_usbserialv>
   d58de:	6803      	ldr	r3, [r0, #0]
   d58e0:	691b      	ldr	r3, [r3, #16]
   d58e2:	4798      	blx	r3
   d58e4:	2800      	cmp	r0, #0
   d58e6:	dc0d      	bgt.n	d5904 <serialEventRun+0x30>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d58e8:	4b0b      	ldr	r3, [pc, #44]	; (d5918 <serialEventRun+0x44>)
   d58ea:	b133      	cbz	r3, d58fa <serialEventRun+0x26>
   d58ec:	f7ff ff2a 	bl	d5744 <_Z22__fetch_global_Serial1v>
   d58f0:	6803      	ldr	r3, [r0, #0]
   d58f2:	691b      	ldr	r3, [r3, #16]
   d58f4:	4798      	blx	r3
   d58f6:	2800      	cmp	r0, #0
   d58f8:	dc07      	bgt.n	d590a <serialEventRun+0x36>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
   d58fa:	4b08      	ldr	r3, [pc, #32]	; (d591c <serialEventRun+0x48>)
   d58fc:	b143      	cbz	r3, d5910 <serialEventRun+0x3c>
   d58fe:	f3af 8000 	nop.w

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
#endif
}
   d5902:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d5904:	f3af 8000 	nop.w
   d5908:	e7ee      	b.n	d58e8 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d590a:	f3af 8000 	nop.w
   d590e:	e7f4      	b.n	d58fa <serialEventRun+0x26>
   d5910:	bd08      	pop	{r3, pc}
   d5912:	bf00      	nop
	...

000d5920 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d5920:	b508      	push	{r3, lr}
	serialEventRun();
   d5922:	f7ff ffd7 	bl	d58d4 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d5926:	f7fe fdaf 	bl	d4488 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d592a:	4b01      	ldr	r3, [pc, #4]	; (d5930 <_post_loop+0x10>)
   d592c:	6018      	str	r0, [r3, #0]
   d592e:	bd08      	pop	{r3, pc}
   d5930:	2003e730 	.word	0x2003e730

000d5934 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d5934:	4802      	ldr	r0, [pc, #8]	; (d5940 <_Z33system_initialize_user_backup_ramv+0xc>)
   d5936:	4a03      	ldr	r2, [pc, #12]	; (d5944 <_Z33system_initialize_user_backup_ramv+0x10>)
   d5938:	4903      	ldr	r1, [pc, #12]	; (d5948 <_Z33system_initialize_user_backup_ramv+0x14>)
   d593a:	1a12      	subs	r2, r2, r0
   d593c:	f000 ba72 	b.w	d5e24 <memcpy>
   d5940:	2003f400 	.word	0x2003f400
   d5944:	2003f404 	.word	0x2003f404
   d5948:	000d62a0 	.word	0x000d62a0

000d594c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d594c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d594e:	2300      	movs	r3, #0
   d5950:	9300      	str	r3, [sp, #0]
   d5952:	461a      	mov	r2, r3
   d5954:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5958:	f7fe fec8 	bl	d46ec <system_ctrl_set_result>
}
   d595c:	b003      	add	sp, #12
   d595e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d5964 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d5964:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d5966:	8843      	ldrh	r3, [r0, #2]
   d5968:	2b0a      	cmp	r3, #10
   d596a:	d008      	beq.n	d597e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d596c:	2b50      	cmp	r3, #80	; 0x50
   d596e:	d109      	bne.n	d5984 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d5970:	4b09      	ldr	r3, [pc, #36]	; (d5998 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d5972:	681b      	ldr	r3, [r3, #0]
   d5974:	b13b      	cbz	r3, d5986 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d5976:	b003      	add	sp, #12
   d5978:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d597c:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d597e:	f7ff ffe5 	bl	d594c <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d5982:	e006      	b.n	d5992 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5984:	2300      	movs	r3, #0
   d5986:	9300      	str	r3, [sp, #0]
   d5988:	461a      	mov	r2, r3
   d598a:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d598e:	f7fe fead 	bl	d46ec <system_ctrl_set_result>
        break;
    }
}
   d5992:	b003      	add	sp, #12
   d5994:	f85d fb04 	ldr.w	pc, [sp], #4
   d5998:	2003e71c 	.word	0x2003e71c

000d599c <module_user_init_hook>:

void module_user_init_hook()
{
   d599c:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d599e:	4c10      	ldr	r4, [pc, #64]	; (d59e0 <module_user_init_hook+0x44>)
   d59a0:	4d10      	ldr	r5, [pc, #64]	; (d59e4 <module_user_init_hook+0x48>)
   d59a2:	6823      	ldr	r3, [r4, #0]
   d59a4:	42ab      	cmp	r3, r5
   d59a6:	4b10      	ldr	r3, [pc, #64]	; (d59e8 <module_user_init_hook+0x4c>)
   d59a8:	bf0c      	ite	eq
   d59aa:	2201      	moveq	r2, #1
   d59ac:	2200      	movne	r2, #0
   d59ae:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d59b0:	d002      	beq.n	d59b8 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d59b2:	f7ff ffbf 	bl	d5934 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d59b6:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d59b8:	f7fe fd5e 	bl	d4478 <HAL_RNG_GetRandomNumber>
   d59bc:	4604      	mov	r4, r0
    srand(seed);
   d59be:	f000 fa45 	bl	d5e4c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d59c2:	4b0a      	ldr	r3, [pc, #40]	; (d59ec <module_user_init_hook+0x50>)
   d59c4:	b113      	cbz	r3, d59cc <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d59c6:	4620      	mov	r0, r4
   d59c8:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d59cc:	2100      	movs	r1, #0
   d59ce:	4807      	ldr	r0, [pc, #28]	; (d59ec <module_user_init_hook+0x50>)
   d59d0:	f7fe feae 	bl	d4730 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d59d4:	2100      	movs	r1, #0
   d59d6:	4806      	ldr	r0, [pc, #24]	; (d59f0 <module_user_init_hook+0x54>)
}
   d59d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d59dc:	f7fe be7c 	b.w	d46d8 <system_ctrl_set_app_request_handler>
   d59e0:	2003f400 	.word	0x2003f400
   d59e4:	9a271c1e 	.word	0x9a271c1e
   d59e8:	2003e720 	.word	0x2003e720
   d59ec:	00000000 	.word	0x00000000
   d59f0:	000d5965 	.word	0x000d5965

000d59f4 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d59f4:	b570      	push	{r4, r5, r6, lr}

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d59f6:	4e18      	ldr	r6, [pc, #96]	; (d5a58 <pinAvailable+0x64>)
   d59f8:	6831      	ldr	r1, [r6, #0]
   d59fa:	f011 0501 	ands.w	r5, r1, #1
   d59fe:	4604      	mov	r4, r0
   d5a00:	d10a      	bne.n	d5a18 <pinAvailable+0x24>
   d5a02:	4630      	mov	r0, r6
   d5a04:	f7fe fb4d 	bl	d40a2 <__cxa_guard_acquire>
   d5a08:	b130      	cbz	r0, d5a18 <pinAvailable+0x24>
   d5a0a:	4629      	mov	r1, r5
   d5a0c:	4813      	ldr	r0, [pc, #76]	; (d5a5c <pinAvailable+0x68>)
   d5a0e:	f7ff fd19 	bl	d5444 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d5a12:	4630      	mov	r0, r6
   d5a14:	f7fe fb4a 	bl	d40ac <__cxa_guard_release>
    }
    void detachInterrupt() {
        instance().detachInterrupt();
    }
    bool isEnabled(void) {
        return instance().isEnabled();
   d5a18:	4810      	ldr	r0, [pc, #64]	; (d5a5c <pinAvailable+0x68>)
   d5a1a:	f7ff fd1d 	bl	d5458 <_ZN8SPIClass9isEnabledEv>

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d5a1e:	b128      	cbz	r0, d5a2c <pinAvailable+0x38>
   d5a20:	f1a4 030b 	sub.w	r3, r4, #11
   d5a24:	2b02      	cmp	r3, #2
   d5a26:	d801      	bhi.n	d5a2c <pinAvailable+0x38>
  {
    return 0; // 'pin' is used
   d5a28:	2000      	movs	r0, #0
   d5a2a:	bd70      	pop	{r4, r5, r6, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d5a2c:	f000 f85a 	bl	d5ae4 <_Z19__fetch_global_Wirev>
   d5a30:	f7ff fabe 	bl	d4fb0 <_ZN7TwoWire9isEnabledEv>
   d5a34:	b108      	cbz	r0, d5a3a <pinAvailable+0x46>
   d5a36:	2c01      	cmp	r4, #1
   d5a38:	d9f6      	bls.n	d5a28 <pinAvailable+0x34>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d5a3a:	f7ff fe83 	bl	d5744 <_Z22__fetch_global_Serial1v>
   d5a3e:	f7ff fe7d 	bl	d573c <_ZN11USARTSerial9isEnabledEv>
   d5a42:	b118      	cbz	r0, d5a4c <pinAvailable+0x58>
   d5a44:	f1a4 0309 	sub.w	r3, r4, #9
   d5a48:	2b01      	cmp	r3, #1
   d5a4a:	d9ed      	bls.n	d5a28 <pinAvailable+0x34>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d5a4c:	2c1e      	cmp	r4, #30
   d5a4e:	bf8c      	ite	hi
   d5a50:	2000      	movhi	r0, #0
   d5a52:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d5a54:	bd70      	pop	{r4, r5, r6, pc}
   d5a56:	bf00      	nop
   d5a58:	2003e724 	.word	0x2003e724
   d5a5c:	2003e728 	.word	0x2003e728

000d5a60 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d5a60:	281e      	cmp	r0, #30
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d5a62:	b538      	push	{r3, r4, r5, lr}
   d5a64:	4604      	mov	r4, r0
   d5a66:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d5a68:	d80a      	bhi.n	d5a80 <pinMode+0x20>
   d5a6a:	29ff      	cmp	r1, #255	; 0xff
   d5a6c:	d008      	beq.n	d5a80 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d5a6e:	f7ff ffc1 	bl	d59f4 <pinAvailable>
   d5a72:	b128      	cbz	r0, d5a80 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d5a74:	4629      	mov	r1, r5
   d5a76:	4620      	mov	r0, r4
}
   d5a78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d5a7c:	f7fe bd1c 	b.w	d44b8 <HAL_Pin_Mode>
   d5a80:	bd38      	pop	{r3, r4, r5, pc}

000d5a82 <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d5a82:	280d      	cmp	r0, #13
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
   d5a84:	b510      	push	{r4, lr}
   d5a86:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
  {
    pin = pin + FIRST_ANALOG_PIN;
   d5a88:	bf9c      	itt	ls
   d5a8a:	340e      	addls	r4, #14
   d5a8c:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d5a8e:	4620      	mov	r0, r4
   d5a90:	f7ff ffb0 	bl	d59f4 <pinAvailable>
   d5a94:	b150      	cbz	r0, d5aac <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d5a96:	2103      	movs	r1, #3
   d5a98:	4620      	mov	r0, r4
   d5a9a:	f7fe fd05 	bl	d44a8 <HAL_Validate_Pin_Function>
   d5a9e:	2803      	cmp	r0, #3
   d5aa0:	d104      	bne.n	d5aac <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d5aa2:	4620      	mov	r0, r4
}
   d5aa4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d5aa8:	f7fe bd0e 	b.w	d44c8 <HAL_ADC_Read>
}
   d5aac:	2000      	movs	r0, #0
   d5aae:	bd10      	pop	{r4, pc}

000d5ab0 <_Z17acquireWireBufferv>:
   d5ab0:	b570      	push	{r4, r5, r6, lr}
   d5ab2:	4604      	mov	r4, r0
   d5ab4:	2514      	movs	r5, #20
   d5ab6:	462a      	mov	r2, r5
   d5ab8:	4e09      	ldr	r6, [pc, #36]	; (d5ae0 <_Z17acquireWireBufferv+0x30>)
   d5aba:	2100      	movs	r1, #0
   d5abc:	f000 f9bd 	bl	d5e3a <memset>
   d5ac0:	8025      	strh	r5, [r4, #0]
   d5ac2:	2520      	movs	r5, #32
   d5ac4:	4631      	mov	r1, r6
   d5ac6:	60a5      	str	r5, [r4, #8]
   d5ac8:	6125      	str	r5, [r4, #16]
   d5aca:	4628      	mov	r0, r5
   d5acc:	f000 f84f 	bl	d5b6e <_ZnajRKSt9nothrow_t>
   d5ad0:	4631      	mov	r1, r6
   d5ad2:	6060      	str	r0, [r4, #4]
   d5ad4:	4628      	mov	r0, r5
   d5ad6:	f000 f84a 	bl	d5b6e <_ZnajRKSt9nothrow_t>
   d5ada:	60e0      	str	r0, [r4, #12]
   d5adc:	4620      	mov	r0, r4
   d5ade:	bd70      	pop	{r4, r5, r6, pc}
   d5ae0:	000d6200 	.word	0x000d6200

000d5ae4 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d5ae4:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d5ae6:	4d0e      	ldr	r5, [pc, #56]	; (d5b20 <_Z19__fetch_global_Wirev+0x3c>)
   d5ae8:	6829      	ldr	r1, [r5, #0]
   d5aea:	f011 0401 	ands.w	r4, r1, #1
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d5aee:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d5af0:	d113      	bne.n	d5b1a <_Z19__fetch_global_Wirev+0x36>
   d5af2:	4628      	mov	r0, r5
   d5af4:	f7fe fad5 	bl	d40a2 <__cxa_guard_acquire>
   d5af8:	b178      	cbz	r0, d5b1a <_Z19__fetch_global_Wirev+0x36>
   d5afa:	a801      	add	r0, sp, #4
   d5afc:	f7ff ffd8 	bl	d5ab0 <_Z17acquireWireBufferv>
   d5b00:	aa01      	add	r2, sp, #4
   d5b02:	4621      	mov	r1, r4
   d5b04:	4807      	ldr	r0, [pc, #28]	; (d5b24 <_Z19__fetch_global_Wirev+0x40>)
   d5b06:	f7ff fa41 	bl	d4f8c <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   d5b0a:	4628      	mov	r0, r5
   d5b0c:	f7fe face 	bl	d40ac <__cxa_guard_release>
   d5b10:	4a05      	ldr	r2, [pc, #20]	; (d5b28 <_Z19__fetch_global_Wirev+0x44>)
   d5b12:	4906      	ldr	r1, [pc, #24]	; (d5b2c <_Z19__fetch_global_Wirev+0x48>)
   d5b14:	4803      	ldr	r0, [pc, #12]	; (d5b24 <_Z19__fetch_global_Wirev+0x40>)
   d5b16:	f000 f80b 	bl	d5b30 <__aeabi_atexit>
	return wire;
}
   d5b1a:	4802      	ldr	r0, [pc, #8]	; (d5b24 <_Z19__fetch_global_Wirev+0x40>)
   d5b1c:	b007      	add	sp, #28
   d5b1e:	bd30      	pop	{r4, r5, pc}
   d5b20:	2003e734 	.word	0x2003e734
   d5b24:	2003e738 	.word	0x2003e738
   d5b28:	2003e470 	.word	0x2003e470
   d5b2c:	000d4f35 	.word	0x000d4f35

000d5b30 <__aeabi_atexit>:
   d5b30:	460b      	mov	r3, r1
   d5b32:	4601      	mov	r1, r0
   d5b34:	4618      	mov	r0, r3
   d5b36:	f000 b967 	b.w	d5e08 <__cxa_atexit>

000d5b3a <_ZdlPvj>:
   d5b3a:	f7fe baae 	b.w	d409a <_ZdlPv>
	...

000d5b40 <_ZSt15get_new_handlerv>:
   d5b40:	4b02      	ldr	r3, [pc, #8]	; (d5b4c <_ZSt15get_new_handlerv+0xc>)
   d5b42:	6818      	ldr	r0, [r3, #0]
   d5b44:	f3bf 8f5f 	dmb	sy
   d5b48:	4770      	bx	lr
   d5b4a:	bf00      	nop
   d5b4c:	2003e74c 	.word	0x2003e74c

000d5b50 <_ZnwjRKSt9nothrow_t>:
   d5b50:	b510      	push	{r4, lr}
   d5b52:	2800      	cmp	r0, #0
   d5b54:	bf14      	ite	ne
   d5b56:	4604      	movne	r4, r0
   d5b58:	2401      	moveq	r4, #1
   d5b5a:	4620      	mov	r0, r4
   d5b5c:	f7fe fe40 	bl	d47e0 <malloc>
   d5b60:	b920      	cbnz	r0, d5b6c <_ZnwjRKSt9nothrow_t+0x1c>
   d5b62:	f7ff ffed 	bl	d5b40 <_ZSt15get_new_handlerv>
   d5b66:	b108      	cbz	r0, d5b6c <_ZnwjRKSt9nothrow_t+0x1c>
   d5b68:	4780      	blx	r0
   d5b6a:	e7f6      	b.n	d5b5a <_ZnwjRKSt9nothrow_t+0xa>
   d5b6c:	bd10      	pop	{r4, pc}

000d5b6e <_ZnajRKSt9nothrow_t>:
   d5b6e:	f7ff bfef 	b.w	d5b50 <_ZnwjRKSt9nothrow_t>

000d5b72 <_ZSt25__throw_bad_function_callv>:
   d5b72:	b508      	push	{r3, lr}
   d5b74:	f7fe fe54 	bl	d4820 <abort>

000d5b78 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d5b78:	4b24      	ldr	r3, [pc, #144]	; (d5c0c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d5b7a:	681a      	ldr	r2, [r3, #0]
   d5b7c:	07d0      	lsls	r0, r2, #31
   d5b7e:	bf5c      	itt	pl
   d5b80:	2201      	movpl	r2, #1
   d5b82:	601a      	strpl	r2, [r3, #0]
   d5b84:	4b22      	ldr	r3, [pc, #136]	; (d5c10 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d5b86:	681a      	ldr	r2, [r3, #0]
   d5b88:	07d1      	lsls	r1, r2, #31
   d5b8a:	bf5c      	itt	pl
   d5b8c:	2201      	movpl	r2, #1
   d5b8e:	601a      	strpl	r2, [r3, #0]
   d5b90:	4b20      	ldr	r3, [pc, #128]	; (d5c14 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d5b92:	681a      	ldr	r2, [r3, #0]
   d5b94:	07d2      	lsls	r2, r2, #31
   d5b96:	bf5c      	itt	pl
   d5b98:	2201      	movpl	r2, #1
   d5b9a:	601a      	strpl	r2, [r3, #0]
   d5b9c:	4b1e      	ldr	r3, [pc, #120]	; (d5c18 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d5b9e:	681a      	ldr	r2, [r3, #0]
   d5ba0:	07d0      	lsls	r0, r2, #31
   d5ba2:	bf5c      	itt	pl
   d5ba4:	2201      	movpl	r2, #1
   d5ba6:	601a      	strpl	r2, [r3, #0]
   d5ba8:	4b1c      	ldr	r3, [pc, #112]	; (d5c1c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d5baa:	681a      	ldr	r2, [r3, #0]
   d5bac:	07d1      	lsls	r1, r2, #31
   d5bae:	bf5c      	itt	pl
   d5bb0:	2201      	movpl	r2, #1
   d5bb2:	601a      	strpl	r2, [r3, #0]
   d5bb4:	4b1a      	ldr	r3, [pc, #104]	; (d5c20 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d5bb6:	681a      	ldr	r2, [r3, #0]
   d5bb8:	07d2      	lsls	r2, r2, #31
   d5bba:	bf5c      	itt	pl
   d5bbc:	2201      	movpl	r2, #1
   d5bbe:	601a      	strpl	r2, [r3, #0]
   d5bc0:	4b18      	ldr	r3, [pc, #96]	; (d5c24 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d5bc2:	681a      	ldr	r2, [r3, #0]
   d5bc4:	07d0      	lsls	r0, r2, #31
   d5bc6:	bf5c      	itt	pl
   d5bc8:	2201      	movpl	r2, #1
   d5bca:	601a      	strpl	r2, [r3, #0]
   d5bcc:	4b16      	ldr	r3, [pc, #88]	; (d5c28 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d5bce:	681a      	ldr	r2, [r3, #0]
   d5bd0:	07d1      	lsls	r1, r2, #31
   d5bd2:	bf5c      	itt	pl
   d5bd4:	2201      	movpl	r2, #1
   d5bd6:	601a      	strpl	r2, [r3, #0]
   d5bd8:	4b14      	ldr	r3, [pc, #80]	; (d5c2c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d5bda:	681a      	ldr	r2, [r3, #0]
   d5bdc:	07d2      	lsls	r2, r2, #31
   d5bde:	bf5c      	itt	pl
   d5be0:	2201      	movpl	r2, #1
   d5be2:	601a      	strpl	r2, [r3, #0]
   d5be4:	4b12      	ldr	r3, [pc, #72]	; (d5c30 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d5be6:	681a      	ldr	r2, [r3, #0]
   d5be8:	07d0      	lsls	r0, r2, #31
   d5bea:	bf5c      	itt	pl
   d5bec:	2201      	movpl	r2, #1
   d5bee:	601a      	strpl	r2, [r3, #0]
   d5bf0:	4b10      	ldr	r3, [pc, #64]	; (d5c34 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d5bf2:	681a      	ldr	r2, [r3, #0]
   d5bf4:	07d1      	lsls	r1, r2, #31
   d5bf6:	bf5c      	itt	pl
   d5bf8:	2201      	movpl	r2, #1
   d5bfa:	601a      	strpl	r2, [r3, #0]
   d5bfc:	4b0e      	ldr	r3, [pc, #56]	; (d5c38 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d5bfe:	681a      	ldr	r2, [r3, #0]
   d5c00:	07d2      	lsls	r2, r2, #31
   d5c02:	bf5c      	itt	pl
   d5c04:	2201      	movpl	r2, #1
   d5c06:	601a      	strpl	r2, [r3, #0]
   d5c08:	4770      	bx	lr
   d5c0a:	bf00      	nop
   d5c0c:	2003e77c 	.word	0x2003e77c
   d5c10:	2003e778 	.word	0x2003e778
   d5c14:	2003e774 	.word	0x2003e774
   d5c18:	2003e770 	.word	0x2003e770
   d5c1c:	2003e76c 	.word	0x2003e76c
   d5c20:	2003e768 	.word	0x2003e768
   d5c24:	2003e764 	.word	0x2003e764
   d5c28:	2003e760 	.word	0x2003e760
   d5c2c:	2003e75c 	.word	0x2003e75c
   d5c30:	2003e758 	.word	0x2003e758
   d5c34:	2003e754 	.word	0x2003e754
   d5c38:	2003e750 	.word	0x2003e750

000d5c3c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d5c3c:	4b18      	ldr	r3, [pc, #96]	; (d5ca0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d5c3e:	681a      	ldr	r2, [r3, #0]
   d5c40:	07d1      	lsls	r1, r2, #31
   d5c42:	bf5c      	itt	pl
   d5c44:	2201      	movpl	r2, #1
   d5c46:	601a      	strpl	r2, [r3, #0]
   d5c48:	4b16      	ldr	r3, [pc, #88]	; (d5ca4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d5c4a:	681a      	ldr	r2, [r3, #0]
   d5c4c:	07d2      	lsls	r2, r2, #31
   d5c4e:	bf5c      	itt	pl
   d5c50:	2201      	movpl	r2, #1
   d5c52:	601a      	strpl	r2, [r3, #0]
   d5c54:	4b14      	ldr	r3, [pc, #80]	; (d5ca8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d5c56:	681a      	ldr	r2, [r3, #0]
   d5c58:	07d0      	lsls	r0, r2, #31
   d5c5a:	bf5c      	itt	pl
   d5c5c:	2201      	movpl	r2, #1
   d5c5e:	601a      	strpl	r2, [r3, #0]
   d5c60:	4b12      	ldr	r3, [pc, #72]	; (d5cac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d5c62:	681a      	ldr	r2, [r3, #0]
   d5c64:	07d1      	lsls	r1, r2, #31
   d5c66:	bf5c      	itt	pl
   d5c68:	2201      	movpl	r2, #1
   d5c6a:	601a      	strpl	r2, [r3, #0]
   d5c6c:	4b10      	ldr	r3, [pc, #64]	; (d5cb0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d5c6e:	681a      	ldr	r2, [r3, #0]
   d5c70:	07d2      	lsls	r2, r2, #31
   d5c72:	bf5c      	itt	pl
   d5c74:	2201      	movpl	r2, #1
   d5c76:	601a      	strpl	r2, [r3, #0]
   d5c78:	4b0e      	ldr	r3, [pc, #56]	; (d5cb4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d5c7a:	681a      	ldr	r2, [r3, #0]
   d5c7c:	07d0      	lsls	r0, r2, #31
   d5c7e:	bf5c      	itt	pl
   d5c80:	2201      	movpl	r2, #1
   d5c82:	601a      	strpl	r2, [r3, #0]
   d5c84:	4b0c      	ldr	r3, [pc, #48]	; (d5cb8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d5c86:	681a      	ldr	r2, [r3, #0]
   d5c88:	07d1      	lsls	r1, r2, #31
   d5c8a:	bf5c      	itt	pl
   d5c8c:	2201      	movpl	r2, #1
   d5c8e:	601a      	strpl	r2, [r3, #0]
   d5c90:	4b0a      	ldr	r3, [pc, #40]	; (d5cbc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d5c92:	681a      	ldr	r2, [r3, #0]
   d5c94:	07d2      	lsls	r2, r2, #31
   d5c96:	bf5c      	itt	pl
   d5c98:	2201      	movpl	r2, #1
   d5c9a:	601a      	strpl	r2, [r3, #0]
   d5c9c:	4770      	bx	lr
   d5c9e:	bf00      	nop
   d5ca0:	2003e79c 	.word	0x2003e79c
   d5ca4:	2003e798 	.word	0x2003e798
   d5ca8:	2003e794 	.word	0x2003e794
   d5cac:	2003e790 	.word	0x2003e790
   d5cb0:	2003e78c 	.word	0x2003e78c
   d5cb4:	2003e788 	.word	0x2003e788
   d5cb8:	2003e784 	.word	0x2003e784
   d5cbc:	2003e780 	.word	0x2003e780

000d5cc0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d5cc0:	4b18      	ldr	r3, [pc, #96]	; (d5d24 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d5cc2:	681a      	ldr	r2, [r3, #0]
   d5cc4:	07d1      	lsls	r1, r2, #31
   d5cc6:	bf5c      	itt	pl
   d5cc8:	2201      	movpl	r2, #1
   d5cca:	601a      	strpl	r2, [r3, #0]
   d5ccc:	4b16      	ldr	r3, [pc, #88]	; (d5d28 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d5cce:	681a      	ldr	r2, [r3, #0]
   d5cd0:	07d2      	lsls	r2, r2, #31
   d5cd2:	bf5c      	itt	pl
   d5cd4:	2201      	movpl	r2, #1
   d5cd6:	601a      	strpl	r2, [r3, #0]
   d5cd8:	4b14      	ldr	r3, [pc, #80]	; (d5d2c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d5cda:	681a      	ldr	r2, [r3, #0]
   d5cdc:	07d0      	lsls	r0, r2, #31
   d5cde:	bf5c      	itt	pl
   d5ce0:	2201      	movpl	r2, #1
   d5ce2:	601a      	strpl	r2, [r3, #0]
   d5ce4:	4b12      	ldr	r3, [pc, #72]	; (d5d30 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d5ce6:	681a      	ldr	r2, [r3, #0]
   d5ce8:	07d1      	lsls	r1, r2, #31
   d5cea:	bf5c      	itt	pl
   d5cec:	2201      	movpl	r2, #1
   d5cee:	601a      	strpl	r2, [r3, #0]
   d5cf0:	4b10      	ldr	r3, [pc, #64]	; (d5d34 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d5cf2:	681a      	ldr	r2, [r3, #0]
   d5cf4:	07d2      	lsls	r2, r2, #31
   d5cf6:	bf5c      	itt	pl
   d5cf8:	2201      	movpl	r2, #1
   d5cfa:	601a      	strpl	r2, [r3, #0]
   d5cfc:	4b0e      	ldr	r3, [pc, #56]	; (d5d38 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d5cfe:	681a      	ldr	r2, [r3, #0]
   d5d00:	07d0      	lsls	r0, r2, #31
   d5d02:	bf5c      	itt	pl
   d5d04:	2201      	movpl	r2, #1
   d5d06:	601a      	strpl	r2, [r3, #0]
   d5d08:	4b0c      	ldr	r3, [pc, #48]	; (d5d3c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d5d0a:	681a      	ldr	r2, [r3, #0]
   d5d0c:	07d1      	lsls	r1, r2, #31
   d5d0e:	bf5c      	itt	pl
   d5d10:	2201      	movpl	r2, #1
   d5d12:	601a      	strpl	r2, [r3, #0]
   d5d14:	4b0a      	ldr	r3, [pc, #40]	; (d5d40 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d5d16:	681a      	ldr	r2, [r3, #0]
   d5d18:	07d2      	lsls	r2, r2, #31
   d5d1a:	bf5c      	itt	pl
   d5d1c:	2201      	movpl	r2, #1
   d5d1e:	601a      	strpl	r2, [r3, #0]
   d5d20:	4770      	bx	lr
   d5d22:	bf00      	nop
   d5d24:	2003e7bc 	.word	0x2003e7bc
   d5d28:	2003e7b8 	.word	0x2003e7b8
   d5d2c:	2003e7b4 	.word	0x2003e7b4
   d5d30:	2003e7b0 	.word	0x2003e7b0
   d5d34:	2003e7ac 	.word	0x2003e7ac
   d5d38:	2003e7a8 	.word	0x2003e7a8
   d5d3c:	2003e7a4 	.word	0x2003e7a4
   d5d40:	2003e7a0 	.word	0x2003e7a0

000d5d44 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d5d44:	4b24      	ldr	r3, [pc, #144]	; (d5dd8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d5d46:	681a      	ldr	r2, [r3, #0]
   d5d48:	07d0      	lsls	r0, r2, #31
   d5d4a:	bf5c      	itt	pl
   d5d4c:	2201      	movpl	r2, #1
   d5d4e:	601a      	strpl	r2, [r3, #0]
   d5d50:	4b22      	ldr	r3, [pc, #136]	; (d5ddc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d5d52:	681a      	ldr	r2, [r3, #0]
   d5d54:	07d1      	lsls	r1, r2, #31
   d5d56:	bf5c      	itt	pl
   d5d58:	2201      	movpl	r2, #1
   d5d5a:	601a      	strpl	r2, [r3, #0]
   d5d5c:	4b20      	ldr	r3, [pc, #128]	; (d5de0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d5d5e:	681a      	ldr	r2, [r3, #0]
   d5d60:	07d2      	lsls	r2, r2, #31
   d5d62:	bf5c      	itt	pl
   d5d64:	2201      	movpl	r2, #1
   d5d66:	601a      	strpl	r2, [r3, #0]
   d5d68:	4b1e      	ldr	r3, [pc, #120]	; (d5de4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d5d6a:	681a      	ldr	r2, [r3, #0]
   d5d6c:	07d0      	lsls	r0, r2, #31
   d5d6e:	bf5c      	itt	pl
   d5d70:	2201      	movpl	r2, #1
   d5d72:	601a      	strpl	r2, [r3, #0]
   d5d74:	4b1c      	ldr	r3, [pc, #112]	; (d5de8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d5d76:	681a      	ldr	r2, [r3, #0]
   d5d78:	07d1      	lsls	r1, r2, #31
   d5d7a:	bf5c      	itt	pl
   d5d7c:	2201      	movpl	r2, #1
   d5d7e:	601a      	strpl	r2, [r3, #0]
   d5d80:	4b1a      	ldr	r3, [pc, #104]	; (d5dec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d5d82:	681a      	ldr	r2, [r3, #0]
   d5d84:	07d2      	lsls	r2, r2, #31
   d5d86:	bf5c      	itt	pl
   d5d88:	2201      	movpl	r2, #1
   d5d8a:	601a      	strpl	r2, [r3, #0]
   d5d8c:	4b18      	ldr	r3, [pc, #96]	; (d5df0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d5d8e:	681a      	ldr	r2, [r3, #0]
   d5d90:	07d0      	lsls	r0, r2, #31
   d5d92:	bf5c      	itt	pl
   d5d94:	2201      	movpl	r2, #1
   d5d96:	601a      	strpl	r2, [r3, #0]
   d5d98:	4b16      	ldr	r3, [pc, #88]	; (d5df4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d5d9a:	681a      	ldr	r2, [r3, #0]
   d5d9c:	07d1      	lsls	r1, r2, #31
   d5d9e:	bf5c      	itt	pl
   d5da0:	2201      	movpl	r2, #1
   d5da2:	601a      	strpl	r2, [r3, #0]
   d5da4:	4b14      	ldr	r3, [pc, #80]	; (d5df8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d5da6:	681a      	ldr	r2, [r3, #0]
   d5da8:	07d2      	lsls	r2, r2, #31
   d5daa:	bf5c      	itt	pl
   d5dac:	2201      	movpl	r2, #1
   d5dae:	601a      	strpl	r2, [r3, #0]
   d5db0:	4b12      	ldr	r3, [pc, #72]	; (d5dfc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d5db2:	681a      	ldr	r2, [r3, #0]
   d5db4:	07d0      	lsls	r0, r2, #31
   d5db6:	bf5c      	itt	pl
   d5db8:	2201      	movpl	r2, #1
   d5dba:	601a      	strpl	r2, [r3, #0]
   d5dbc:	4b10      	ldr	r3, [pc, #64]	; (d5e00 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d5dbe:	681a      	ldr	r2, [r3, #0]
   d5dc0:	07d1      	lsls	r1, r2, #31
   d5dc2:	bf5c      	itt	pl
   d5dc4:	2201      	movpl	r2, #1
   d5dc6:	601a      	strpl	r2, [r3, #0]
   d5dc8:	4b0e      	ldr	r3, [pc, #56]	; (d5e04 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d5dca:	681a      	ldr	r2, [r3, #0]
   d5dcc:	07d2      	lsls	r2, r2, #31
   d5dce:	bf5c      	itt	pl
   d5dd0:	2201      	movpl	r2, #1
   d5dd2:	601a      	strpl	r2, [r3, #0]
   d5dd4:	4770      	bx	lr
   d5dd6:	bf00      	nop
   d5dd8:	2003e7ec 	.word	0x2003e7ec
   d5ddc:	2003e7e8 	.word	0x2003e7e8
   d5de0:	2003e7e4 	.word	0x2003e7e4
   d5de4:	2003e7e0 	.word	0x2003e7e0
   d5de8:	2003e7dc 	.word	0x2003e7dc
   d5dec:	2003e7d8 	.word	0x2003e7d8
   d5df0:	2003e7d4 	.word	0x2003e7d4
   d5df4:	2003e7d0 	.word	0x2003e7d0
   d5df8:	2003e7cc 	.word	0x2003e7cc
   d5dfc:	2003e7c8 	.word	0x2003e7c8
   d5e00:	2003e7c4 	.word	0x2003e7c4
   d5e04:	2003e7c0 	.word	0x2003e7c0

000d5e08 <__cxa_atexit>:
   d5e08:	b510      	push	{r4, lr}
   d5e0a:	4c05      	ldr	r4, [pc, #20]	; (d5e20 <__cxa_atexit+0x18>)
   d5e0c:	4613      	mov	r3, r2
   d5e0e:	b12c      	cbz	r4, d5e1c <__cxa_atexit+0x14>
   d5e10:	460a      	mov	r2, r1
   d5e12:	4601      	mov	r1, r0
   d5e14:	2002      	movs	r0, #2
   d5e16:	f3af 8000 	nop.w
   d5e1a:	bd10      	pop	{r4, pc}
   d5e1c:	4620      	mov	r0, r4
   d5e1e:	bd10      	pop	{r4, pc}
   d5e20:	00000000 	.word	0x00000000

000d5e24 <memcpy>:
   d5e24:	b510      	push	{r4, lr}
   d5e26:	1e43      	subs	r3, r0, #1
   d5e28:	440a      	add	r2, r1
   d5e2a:	4291      	cmp	r1, r2
   d5e2c:	d004      	beq.n	d5e38 <memcpy+0x14>
   d5e2e:	f811 4b01 	ldrb.w	r4, [r1], #1
   d5e32:	f803 4f01 	strb.w	r4, [r3, #1]!
   d5e36:	e7f8      	b.n	d5e2a <memcpy+0x6>
   d5e38:	bd10      	pop	{r4, pc}

000d5e3a <memset>:
   d5e3a:	4402      	add	r2, r0
   d5e3c:	4603      	mov	r3, r0
   d5e3e:	4293      	cmp	r3, r2
   d5e40:	d002      	beq.n	d5e48 <memset+0xe>
   d5e42:	f803 1b01 	strb.w	r1, [r3], #1
   d5e46:	e7fa      	b.n	d5e3e <memset+0x4>
   d5e48:	4770      	bx	lr
	...

000d5e4c <srand>:
   d5e4c:	b538      	push	{r3, r4, r5, lr}
   d5e4e:	4b12      	ldr	r3, [pc, #72]	; (d5e98 <srand+0x4c>)
   d5e50:	681c      	ldr	r4, [r3, #0]
   d5e52:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d5e54:	4605      	mov	r5, r0
   d5e56:	b9d3      	cbnz	r3, d5e8e <srand+0x42>
   d5e58:	2018      	movs	r0, #24
   d5e5a:	f7fe fcc1 	bl	d47e0 <malloc>
   d5e5e:	f243 330e 	movw	r3, #13070	; 0x330e
   d5e62:	63a0      	str	r0, [r4, #56]	; 0x38
   d5e64:	8003      	strh	r3, [r0, #0]
   d5e66:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d5e6a:	8043      	strh	r3, [r0, #2]
   d5e6c:	f241 2334 	movw	r3, #4660	; 0x1234
   d5e70:	8083      	strh	r3, [r0, #4]
   d5e72:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d5e76:	80c3      	strh	r3, [r0, #6]
   d5e78:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d5e7c:	8103      	strh	r3, [r0, #8]
   d5e7e:	2305      	movs	r3, #5
   d5e80:	8143      	strh	r3, [r0, #10]
   d5e82:	230b      	movs	r3, #11
   d5e84:	8183      	strh	r3, [r0, #12]
   d5e86:	2201      	movs	r2, #1
   d5e88:	2300      	movs	r3, #0
   d5e8a:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d5e8e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d5e90:	2200      	movs	r2, #0
   d5e92:	611d      	str	r5, [r3, #16]
   d5e94:	615a      	str	r2, [r3, #20]
   d5e96:	bd38      	pop	{r3, r4, r5, pc}
   d5e98:	2003e46c 	.word	0x2003e46c

000d5e9c <strcpy>:
   d5e9c:	4603      	mov	r3, r0
   d5e9e:	f811 2b01 	ldrb.w	r2, [r1], #1
   d5ea2:	f803 2b01 	strb.w	r2, [r3], #1
   d5ea6:	2a00      	cmp	r2, #0
   d5ea8:	d1f9      	bne.n	d5e9e <strcpy+0x2>
   d5eaa:	4770      	bx	lr

000d5eac <strdup>:
   d5eac:	4b02      	ldr	r3, [pc, #8]	; (d5eb8 <strdup+0xc>)
   d5eae:	4601      	mov	r1, r0
   d5eb0:	6818      	ldr	r0, [r3, #0]
   d5eb2:	f000 b803 	b.w	d5ebc <_strdup_r>
   d5eb6:	bf00      	nop
   d5eb8:	2003e46c 	.word	0x2003e46c

000d5ebc <_strdup_r>:
   d5ebc:	b570      	push	{r4, r5, r6, lr}
   d5ebe:	4606      	mov	r6, r0
   d5ec0:	4608      	mov	r0, r1
   d5ec2:	460c      	mov	r4, r1
   d5ec4:	f000 f80d 	bl	d5ee2 <strlen>
   d5ec8:	1c45      	adds	r5, r0, #1
   d5eca:	4629      	mov	r1, r5
   d5ecc:	4630      	mov	r0, r6
   d5ece:	f7fe fcaf 	bl	d4830 <_malloc_r>
   d5ed2:	4606      	mov	r6, r0
   d5ed4:	b118      	cbz	r0, d5ede <_strdup_r+0x22>
   d5ed6:	462a      	mov	r2, r5
   d5ed8:	4621      	mov	r1, r4
   d5eda:	f7ff ffa3 	bl	d5e24 <memcpy>
   d5ede:	4630      	mov	r0, r6
   d5ee0:	bd70      	pop	{r4, r5, r6, pc}

000d5ee2 <strlen>:
   d5ee2:	4603      	mov	r3, r0
   d5ee4:	f813 2b01 	ldrb.w	r2, [r3], #1
   d5ee8:	2a00      	cmp	r2, #0
   d5eea:	d1fb      	bne.n	d5ee4 <strlen+0x2>
   d5eec:	1a18      	subs	r0, r3, r0
   d5eee:	3801      	subs	r0, #1
   d5ef0:	4770      	bx	lr

000d5ef2 <link_code_end>:
	...

000d5ef4 <dynalib_user>:
   d5ef4:	401d 000d 4059 000d 4085 000d 4089 000d     .@..Y@...@...@..
   d5f04:	0000 0000 6147 6472 6e65 4c2d 6461 2d79     ....Garden-Lady-
   d5f14:	7542 2d67 3430 432d 7061 3600 5563 6e6f     Bug-04-Cap.6cUon
   d5f24:	5871 4c73 6863 6e66 7438 4635 5536 5573     qXsLchfn8t5F6UsU
   d5f34:	7872 3546 7138 0045 207b 7622 6c61 6575     rxF58qE.{ "value
   d5f44:	3a22 2220 2500 0064 2c22 2220 6566 6465     ": ".%d.", "feed
   d5f54:	4449 3a22 2220 2200 007d 6147 6472 6e65     ID": "."}.Garden
   d5f64:	4c2d 6461 2d79 7542 2d67 3430 432d 7061     -Lady-Bug-04-Cap
   d5f74:	502d 7265 6563 746e 6761 0065 386e 7065     -Percentage.n8ep
   d5f84:	5063 4373 6b46 6273 5539 5957 6774 7458     cPsCFksb9UWYtgXt
   d5f94:	656f 4b34 686a 766b 3000 0000               oe4Kjhkv.0..

000d5fa0 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d5fa8:	4901 000d 4907 000d 495d 000d 4915 000d     .I...I..]I...I..
   d5fb8:	4903 000d                                   .I..

000d5fbc <_ZTVN5spark13EthernetClassE>:
	...
   d5fc4:	4f17 000d 4f0d 000d 4f03 000d 4ef9 000d     .O...O...O...N..
   d5fd4:	4eed 000d 4ee1 000d 4ed5 000d 4ecd 000d     .N...N...N...N..
   d5fe4:	4ec3 000d 4eb9 000d 5291 000d               .N...N...R..

000d5ff0 <_ZTV7TwoWire>:
	...
   d5ff8:	4f35 000d 4f7f 000d 4f57 000d 4f37 000d     5O...O..WO..7O..
   d6008:	4f5f 000d 4f67 000d 4f6f 000d 4f77 000d     _O..gO..oO..wO..

000d6018 <_ZTV9IPAddress>:
	...
   d6020:	4fc9 000d 4fb9 000d 4fbb 000d 6162 6475     .O...O...O..baud
   d6030:	5300 7265 6169 006c 6553 6972 6c61 0031     .Serial.Serial1.
   d6040:	7974 6570 7000 7261 6d61 6300 646d 6900     type.param.cmd.i
   d6050:	0064 6e68 0064 7473 6d72 6600 6c69 0074     d.hnd.strm.filt.
   d6060:	766c 006c 6461 4864 6e61 6c64 7265 7200     lvl.addHandler.r
   d6070:	6d65 766f 4865 6e61 6c64 7265 6500 756e     emoveHandler.enu
   d6080:	486d 6e61 6c64 7265 0073 534a 4e4f 7453     mHandlers.JSONSt
   d6090:	6572 6d61 6f4c 4867 6e61 6c64 7265 6100     reamLogHandler.a
   d60a0:	7070 2500 3130 7530 0020 205d 2c00 0020     pp.%010u .] ., .
   d60b0:	2928 203a 2000 005b 6f63 6564 3d20 0020     (): . [.code = .
   d60c0:	6925 6400 7465 6961 736c 3d20 0020 0a0d     %i.details = ...
   d60d0:	6600 6c00 006e 6e66 6300 646f 0065 6564     .f.ln.fn.code.de
   d60e0:	6174 6c69 6e00 6e6f 0065 7274 6361 0065     tail.none.trace.
   d60f0:	6e69 6f66 7700 7261 006e 7265 6f72 0072     info.warn.error.
   d6100:	6170 696e 0063 6c61 006c 0000               panic.all...

000d610c <_ZTVN5spark9MeshClassE>:
	...
   d6114:	510b 000d 5101 000d 50f7 000d 50ed 000d     .Q...Q...P...P..
   d6124:	50e1 000d 50d5 000d 50c9 000d 50c1 000d     .P...P...P...P..
   d6134:	50b7 000d 50ad 000d 5291 000d               .P...P...R..

000d6140 <_ZTVN5spark12NetworkClassE>:
	...
   d6148:	5229 000d 5233 000d 523d 000d 5247 000d     )R..3R..=R..GR..
   d6158:	5251 000d 525d 000d 5269 000d 5275 000d     QR..]R..iR..uR..
   d6168:	527d 000d 5287 000d 5291 000d 005a 2b25     }R...R...R..Z.%+
   d6178:	3330 3a64 3025 7532 2500 2d59 6d25 252d     03d:%02u.%Y-%m-%
   d6188:	5464 4825 253a 3a4d 5325 7a25 6100 6373     dT%H:%M:%S%z.asc
   d6198:	6974 656d 0000 0000                         time....

000d61a0 <_ZTV11USARTSerial>:
	...
   d61a8:	568d 000d 56dd 000d 56eb 000d 5371 000d     .V...V...V..qS..
   d61b8:	56a1 000d 56c3 000d 56af 000d 56d7 000d     .V...V...V...V..
   d61c8:	568f 000d 5693 000d                         .V...V..

000d61d0 <_ZTV9USBSerial>:
	...
   d61d8:	57c9 000d 5819 000d 5827 000d 5371 000d     .W...X..'X..qS..
   d61e8:	5805 000d 57cb 000d 57e1 000d 5813 000d     .X...W...W...X..
   d61f8:	57f7 000d 57c5 000d                         .W...W..

000d6200 <_ZSt7nothrow>:
   d6200:	0000 0000                                   ....

000d6204 <__sf_fake_stdin>:
	...

000d6224 <__sf_fake_stdout>:
	...

000d6244 <__sf_fake_stderr>:
	...
   d6264:	0043                                        C.

000d6266 <link_const_variable_data_end>:
	...

000d6268 <link_constructors_location>:
   d6268:	000d437d 	.word	0x000d437d
   d626c:	000d48d9 	.word	0x000d48d9
   d6270:	000d4f21 	.word	0x000d4f21
   d6274:	000d509d 	.word	0x000d509d
   d6278:	000d51d9 	.word	0x000d51d9
   d627c:	000d535d 	.word	0x000d535d
   d6280:	000d5429 	.word	0x000d5429
   d6284:	000d5645 	.word	0x000d5645
   d6288:	000d5679 	.word	0x000d5679
   d628c:	000d5b79 	.word	0x000d5b79
   d6290:	000d5c3d 	.word	0x000d5c3d
   d6294:	000d5cc1 	.word	0x000d5cc1
   d6298:	000d5d45 	.word	0x000d5d45

000d629c <link_constructors_end>:
   d629c:	00000000 	.word	0x00000000
