
/Users/philipchatterton/IoCP/Particle/Flood_Dog/Flood_Dog_v04/target/3.0.0/boron/Flood_Dog_v04.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00003f44  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d7f60  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         0000007c  2003e5c0  000d7f64  0001e5c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000001b4  2003e63c  2003e63c  0002e63c  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d7fe0  000d7fe0  00027fe0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d8008  000d8008  00028008  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   00168bed  00000000  00000000  0002800c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00015d2f  00000000  00000000  00190bf9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00037505  00000000  00000000  001a6928  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002be0  00000000  00000000  001dde2d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00009778  00000000  00000000  001e0a0d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00035e38  00000000  00000000  001ea185  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0003a10b  00000000  00000000  0021ffbd  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0012b1b8  00000000  00000000  0025a0c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00007bfc  00000000  00000000  00385280  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f003 fb9f 	bl	d7770 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f003 fbc1 	bl	d77c0 <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e5c0 	.word	0x2003e5c0
   d4048:	000d7f64 	.word	0x000d7f64
   d404c:	2003e63c 	.word	0x2003e63c
   d4050:	2003e63c 	.word	0x2003e63c
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405a:	4e07      	ldr	r6, [pc, #28]	; (d4078 <module_user_init+0x20>)
   d405c:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
    module_user_init_hook();
   d405e:	f003 f8cf 	bl	d7200 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4062:	1ba4      	subs	r4, r4, r6
   d4064:	08a4      	lsrs	r4, r4, #2
   d4066:	2500      	movs	r5, #0
   d4068:	42a5      	cmp	r5, r4
   d406a:	d100      	bne.n	d406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d406e:	f856 3b04 	ldr.w	r3, [r6], #4
   d4072:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f7      	b.n	d4068 <module_user_init+0x10>
   d4078:	000d7f3c 	.word	0x000d7f3c
   d407c:	000d7f60 	.word	0x000d7f60

000d4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4080:	f000 baf2 	b.w	d4668 <setup>

000d4084 <module_user_loop>:
}

void module_user_loop() {
   d4084:	b508      	push	{r3, lr}
    loop();
   d4086:	f000 f8c1 	bl	d420c <loop>
    _post_loop();
}
   d408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d408e:	f003 b879 	b.w	d7184 <_post_loop>

000d4092 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4092:	f000 be53 	b.w	d4d3c <malloc>

000d4096 <_Znaj>:
   d4096:	f000 be51 	b.w	d4d3c <malloc>

000d409a <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409a:	f000 be57 	b.w	d4d4c <free>
	...

000d40a0 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a0:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40a2:	4a03      	ldr	r2, [pc, #12]	; (d40b0 <__cxa_pure_virtual+0x10>)
   d40a4:	2100      	movs	r1, #0
   d40a6:	200c      	movs	r0, #12
   d40a8:	f000 fd6c 	bl	d4b84 <panic_>
  while (1);
   d40ac:	e7fe      	b.n	d40ac <__cxa_pure_virtual+0xc>
   d40ae:	bf00      	nop
   d40b0:	000d4945 	.word	0x000d4945

000d40b4 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40b4:	7800      	ldrb	r0, [r0, #0]
   d40b6:	fab0 f080 	clz	r0, r0
   d40ba:	0940      	lsrs	r0, r0, #5
   d40bc:	4770      	bx	lr

000d40be <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40be:	2301      	movs	r3, #1
   d40c0:	7003      	strb	r3, [r0, #0]
   d40c2:	4770      	bx	lr

000d40c4 <_ZN5spark10LogHandler5writeEPKcj>:
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
    // Default implementation does nothing
}
   d40c4:	4770      	bx	lr

000d40c6 <_ZN5spark16StreamLogHandler5writeEPKcj>:
inline Print* spark::StreamLogHandler::stream() const {
    return stream_;
}

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
   d40c6:	6a00      	ldr	r0, [r0, #32]
   d40c8:	6803      	ldr	r3, [r0, #0]
   d40ca:	68db      	ldr	r3, [r3, #12]
   d40cc:	4718      	bx	r3
	...

000d40d0 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   d40d0:	4b0a      	ldr	r3, [pc, #40]	; (d40fc <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
   d40d2:	b510      	push	{r4, lr}
   d40d4:	4604      	mov	r4, r0
   d40d6:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   d40d8:	f001 fdfc 	bl	d5cd4 <_ZN5spark10LogManager8instanceEv>
   d40dc:	4621      	mov	r1, r4
   d40de:	f001 ffec 	bl	d60ba <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
   d40e2:	f003 f803 	bl	d70ec <_Z16_fetch_usbserialv>
   d40e6:	f002 fff5 	bl	d70d4 <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
   d40ea:	4620      	mov	r0, r4
   d40ec:	4b04      	ldr	r3, [pc, #16]	; (d4100 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
   d40ee:	f840 3b04 	str.w	r3, [r0], #4
   d40f2:	f001 fecf 	bl	d5e94 <_ZN5spark6detail9LogFilterD1Ev>
    }
   d40f6:	4620      	mov	r0, r4
   d40f8:	bd10      	pop	{r4, pc}
   d40fa:	bf00      	nop
   d40fc:	000d7bac 	.word	0x000d7bac
   d4100:	000d7b94 	.word	0x000d7b94

000d4104 <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
   d4104:	b510      	push	{r4, lr}
   d4106:	4604      	mov	r4, r0
    }
   d4108:	f7ff ffe2 	bl	d40d0 <_ZN5spark16SerialLogHandlerD1Ev>
   d410c:	4620      	mov	r0, r4
   d410e:	2124      	movs	r1, #36	; 0x24
   d4110:	f003 f95b 	bl	d73ca <_ZdlPvj>
   d4114:	4620      	mov	r0, r4
   d4116:	bd10      	pop	{r4, pc}

000d4118 <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   d4118:	b40e      	push	{r1, r2, r3}
   d411a:	b510      	push	{r4, lr}
   d411c:	b08d      	sub	sp, #52	; 0x34
   d411e:	aa0f      	add	r2, sp, #60	; 0x3c
    va_list args;
    va_start(args, fmt);
    log(LOG_LEVEL_INFO, fmt, args);
   d4120:	6801      	ldr	r1, [r0, #0]
inline void spark::Logger::info(const char *fmt, ...) const {
   d4122:	f852 4b04 	ldr.w	r4, [r2], #4
    va_start(args, fmt);
   d4126:	9203      	str	r2, [sp, #12]
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   d4128:	2300      	movs	r3, #0
   d412a:	2020      	movs	r0, #32
   d412c:	e9cd 0304 	strd	r0, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d4130:	e9cd 4200 	strd	r4, r2, [sp]
   d4134:	201e      	movs	r0, #30
   d4136:	aa04      	add	r2, sp, #16
   d4138:	f000 fd2c 	bl	d4b94 <log_message_v>
}
   d413c:	b00d      	add	sp, #52	; 0x34
   d413e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d4142:	b003      	add	sp, #12
   d4144:	4770      	bx	lr
	...

000d4148 <_Z20meterParticlePublishv>:
		Particle.publish(tempEvent, tempData, 60, PRIVATE);
	}
	return true;
}

bool meterParticlePublish(void) {                                       // Enforces Particle's limit on 1 publish a second
   d4148:	b510      	push	{r4, lr}
  static unsigned long lastPublish=0;                                   // Initialize and store value here
  if(millis() - lastPublish >= 1000) {                                  // Particle rate limits at 1 publish per second
   d414a:	4c07      	ldr	r4, [pc, #28]	; (d4168 <_Z20meterParticlePublishv+0x20>)

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d414c:	f000 fc02 	bl	d4954 <HAL_Timer_Get_Milli_Seconds>
   d4150:	6823      	ldr	r3, [r4, #0]
   d4152:	1ac0      	subs	r0, r0, r3
   d4154:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   d4158:	d304      	bcc.n	d4164 <_Z20meterParticlePublishv+0x1c>
   d415a:	f000 fbfb 	bl	d4954 <HAL_Timer_Get_Milli_Seconds>
    lastPublish = millis();
   d415e:	6020      	str	r0, [r4, #0]
   d4160:	2001      	movs	r0, #1
    return 1;
  }
  else return 0;
}
   d4162:	bd10      	pop	{r4, pc}
  else return 0;
   d4164:	2000      	movs	r0, #0
   d4166:	e7fc      	b.n	d4162 <_Z20meterParticlePublishv+0x1a>
   d4168:	2003e644 	.word	0x2003e644

000d416c <_Z7logData6StringS_bb.part.0>:
bool logData(String tempEvent, String tempData, bool tempLogSerial, bool tempLogParticle){
   d416c:	b530      	push	{r4, r5, lr}
   d416e:	4604      	mov	r4, r0
   d4170:	b085      	sub	sp, #20
   d4172:	460d      	mov	r5, r1
		waitUntil(meterParticlePublish);
   d4174:	f7ff ffe8 	bl	d4148 <_Z20meterParticlePublishv>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d4178:	b910      	cbnz	r0, d4180 <_Z7logData6StringS_bb.part.0+0x14>
            spark_process();
   d417a:	f000 fd57 	bl	d4c2c <spark_process>
        while (_while() && !_condition()) {
   d417e:	e7f9      	b.n	d4174 <_Z7logData6StringS_bb.part.0+0x8>
   d4180:	f7ff ffe2 	bl	d4148 <_Z20meterParticlePublishv>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   d4184:	4b0e      	ldr	r3, [pc, #56]	; (d41c0 <_Z7logData6StringS_bb.part.0+0x54>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d4186:	682a      	ldr	r2, [r5, #0]
   d4188:	781b      	ldrb	r3, [r3, #0]
   d418a:	f88d 3000 	strb.w	r3, [sp]
   d418e:	6821      	ldr	r1, [r4, #0]
   d4190:	233c      	movs	r3, #60	; 0x3c
   d4192:	a802      	add	r0, sp, #8
   d4194:	f001 f808 	bl	d51a8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d4198:	9c03      	ldr	r4, [sp, #12]
   d419a:	b17c      	cbz	r4, d41bc <_Z7logData6StringS_bb.part.0+0x50>
      if (--_M_use_count == 0)
   d419c:	6863      	ldr	r3, [r4, #4]
   d419e:	3b01      	subs	r3, #1
   d41a0:	6063      	str	r3, [r4, #4]
   d41a2:	b95b      	cbnz	r3, d41bc <_Z7logData6StringS_bb.part.0+0x50>
          _M_dispose();
   d41a4:	6823      	ldr	r3, [r4, #0]
   d41a6:	4620      	mov	r0, r4
   d41a8:	689b      	ldr	r3, [r3, #8]
   d41aa:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d41ac:	68a3      	ldr	r3, [r4, #8]
   d41ae:	3b01      	subs	r3, #1
   d41b0:	60a3      	str	r3, [r4, #8]
   d41b2:	b91b      	cbnz	r3, d41bc <_Z7logData6StringS_bb.part.0+0x50>
            _M_destroy();
   d41b4:	6823      	ldr	r3, [r4, #0]
   d41b6:	4620      	mov	r0, r4
   d41b8:	68db      	ldr	r3, [r3, #12]
   d41ba:	4798      	blx	r3
}
   d41bc:	b005      	add	sp, #20
   d41be:	bd30      	pop	{r4, r5, pc}
   d41c0:	2003e640 	.word	0x2003e640

000d41c4 <_Z7logData6StringS_bb>:
bool logData(String tempEvent, String tempData, bool tempLogSerial, bool tempLogParticle){
   d41c4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d41c6:	4604      	mov	r4, r0
   d41c8:	460d      	mov	r5, r1
   d41ca:	461e      	mov	r6, r3
	if (tempLogSerial){
   d41cc:	b18a      	cbz	r2, d41f2 <_Z7logData6StringS_bb+0x2e>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d41ce:	4601      	mov	r1, r0
   d41d0:	4668      	mov	r0, sp
   d41d2:	f002 fdd1 	bl	d6d78 <_ZN6StringC1ERKS_>
		Log.info(tempEvent + ": " + tempData);
   d41d6:	490b      	ldr	r1, [pc, #44]	; (d4204 <_Z7logData6StringS_bb+0x40>)
   d41d8:	4668      	mov	r0, sp
   d41da:	f002 fe0d 	bl	d6df8 <_ZplRK15StringSumHelperPKc>
   d41de:	4629      	mov	r1, r5
   d41e0:	f002 fdfe 	bl	d6de0 <_ZplRK15StringSumHelperRK6String>
   d41e4:	6801      	ldr	r1, [r0, #0]
   d41e6:	4808      	ldr	r0, [pc, #32]	; (d4208 <_Z7logData6StringS_bb+0x44>)
   d41e8:	f7ff ff96 	bl	d4118 <_ZNK5spark6Logger4infoEPKcz>
class StringSumHelper : public String
   d41ec:	4668      	mov	r0, sp
   d41ee:	f002 fd2d 	bl	d6c4c <_ZN6StringD1Ev>
	if (tempLogParticle){
   d41f2:	b11e      	cbz	r6, d41fc <_Z7logData6StringS_bb+0x38>
   d41f4:	4629      	mov	r1, r5
   d41f6:	4620      	mov	r0, r4
   d41f8:	f7ff ffb8 	bl	d416c <_Z7logData6StringS_bb.part.0>
}
   d41fc:	2001      	movs	r0, #1
   d41fe:	b004      	add	sp, #16
   d4200:	bd70      	pop	{r4, r5, r6, pc}
   d4202:	bf00      	nop
   d4204:	000d7cd1 	.word	0x000d7cd1
   d4208:	2003e730 	.word	0x2003e730

000d420c <loop>:
void loop(){
   d420c:	b5f0      	push	{r4, r5, r6, r7, lr}
	switch(state){
   d420e:	4c68      	ldr	r4, [pc, #416]	; (d43b0 <loop+0x1a4>)
   d4210:	7823      	ldrb	r3, [r4, #0]
   d4212:	3b01      	subs	r3, #1
void loop(){
   d4214:	b08b      	sub	sp, #44	; 0x2c
   d4216:	2b08      	cmp	r3, #8
   d4218:	d82c      	bhi.n	d4274 <loop+0x68>
   d421a:	e8df f013 	tbh	[pc, r3, lsl #1]
   d421e:	0009      	.short	0x0009
   d4220:	002b002b 	.word	0x002b002b
   d4224:	0079004f 	.word	0x0079004f
   d4228:	00ed00a7 	.word	0x00ed00a7
   d422c:	01d101af 	.word	0x01d101af
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4230:	f000 fd0c 	bl	d4c4c <spark_cloud_flag_connected>
   d4234:	4e5f      	ldr	r6, [pc, #380]	; (d43b4 <loop+0x1a8>)
			if (Particle.connected()) {
   d4236:	4605      	mov	r5, r0
   d4238:	b1f0      	cbz	r0, d4278 <loop+0x6c>
				logData("PARTICLE", "PARTICLE CONNECTED", true, false);
   d423a:	495f      	ldr	r1, [pc, #380]	; (d43b8 <loop+0x1ac>)
   d423c:	a802      	add	r0, sp, #8
   d423e:	f002 fd50 	bl	d6ce2 <_ZN6StringC1EPKc>
   d4242:	495e      	ldr	r1, [pc, #376]	; (d43bc <loop+0x1b0>)
   d4244:	a806      	add	r0, sp, #24
   d4246:	f002 fd4c 	bl	d6ce2 <_ZN6StringC1EPKc>
   d424a:	2300      	movs	r3, #0
   d424c:	2201      	movs	r2, #1
   d424e:	a906      	add	r1, sp, #24
   d4250:	a802      	add	r0, sp, #8
   d4252:	f7ff ffb7 	bl	d41c4 <_Z7logData6StringS_bb>
   d4256:	a806      	add	r0, sp, #24
   d4258:	f002 fcf8 	bl	d6c4c <_ZN6StringD1Ev>
   d425c:	a802      	add	r0, sp, #8
   d425e:	f002 fcf5 	bl	d6c4c <_ZN6StringD1Ev>
				digitalWrite(BUILT_IN_LED, HIGH);
   d4262:	2101      	movs	r1, #1
   d4264:	2007      	movs	r0, #7
   d4266:	f003 f83b 	bl	d72e0 <digitalWrite>
   d426a:	f000 fb73 	bl	d4954 <HAL_Timer_Get_Milli_Seconds>
				state = SAMPLING_WAIT_STATE;
   d426e:	2304      	movs	r3, #4
				stateTime = millis();
   d4270:	6030      	str	r0, [r6, #0]
				state = PARTICLE_CONNECT_WAIT_STATE;
   d4272:	7023      	strb	r3, [r4, #0]
}
   d4274:	b00b      	add	sp, #44	; 0x2c
   d4276:	bdf0      	pop	{r4, r5, r6, r7, pc}
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
   d4278:	f000 fce0 	bl	d4c3c <spark_cloud_flag_connect>
   d427c:	f000 fb6a 	bl	d4954 <HAL_Timer_Get_Milli_Seconds>
				if(millis() - stateTime > MAX_TIME_TO_WAIT_FOR_CONNECT_MS){
   d4280:	6833      	ldr	r3, [r6, #0]
   d4282:	1ac0      	subs	r0, r0, r3
   d4284:	4b4e      	ldr	r3, [pc, #312]	; (d43c0 <loop+0x1b4>)
   d4286:	4298      	cmp	r0, r3
   d4288:	d9f4      	bls.n	d4274 <loop+0x68>
					logData("PARTICLE", "PARTICLE FAILED TO CONNECT", true, false);
   d428a:	494b      	ldr	r1, [pc, #300]	; (d43b8 <loop+0x1ac>)
   d428c:	a802      	add	r0, sp, #8
   d428e:	f002 fd28 	bl	d6ce2 <_ZN6StringC1EPKc>
   d4292:	494c      	ldr	r1, [pc, #304]	; (d43c4 <loop+0x1b8>)
   d4294:	a806      	add	r0, sp, #24
   d4296:	f002 fd24 	bl	d6ce2 <_ZN6StringC1EPKc>
   d429a:	462b      	mov	r3, r5
   d429c:	2201      	movs	r2, #1
   d429e:	a906      	add	r1, sp, #24
   d42a0:	a802      	add	r0, sp, #8
   d42a2:	f7ff ff8f 	bl	d41c4 <_Z7logData6StringS_bb>
   d42a6:	a806      	add	r0, sp, #24
   d42a8:	f002 fcd0 	bl	d6c4c <_ZN6StringD1Ev>
   d42ac:	a802      	add	r0, sp, #8
   d42ae:	f002 fccd 	bl	d6c4c <_ZN6StringD1Ev>
   d42b2:	f000 fb4f 	bl	d4954 <HAL_Timer_Get_Milli_Seconds>
					stateTime = millis();
   d42b6:	6030      	str	r0, [r6, #0]
			state = SLEEP_WAIT_STATE;
   d42b8:	2308      	movs	r3, #8
   d42ba:	e7da      	b.n	d4272 <loop+0x66>
			if(millis() - stateTime >= MAX_TIME_TO_SAMPLE_WAIT){
   d42bc:	4d3d      	ldr	r5, [pc, #244]	; (d43b4 <loop+0x1a8>)
   d42be:	f000 fb49 	bl	d4954 <HAL_Timer_Get_Milli_Seconds>
   d42c2:	682b      	ldr	r3, [r5, #0]
   d42c4:	1ac0      	subs	r0, r0, r3
   d42c6:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   d42ca:	d3d3      	bcc.n	d4274 <loop+0x68>
				logData("SAMPLING_WAIT_STATE", "START SAMPLING", true, false);
   d42cc:	493e      	ldr	r1, [pc, #248]	; (d43c8 <loop+0x1bc>)
   d42ce:	a802      	add	r0, sp, #8
   d42d0:	f002 fd07 	bl	d6ce2 <_ZN6StringC1EPKc>
   d42d4:	493d      	ldr	r1, [pc, #244]	; (d43cc <loop+0x1c0>)
   d42d6:	a806      	add	r0, sp, #24
   d42d8:	f002 fd03 	bl	d6ce2 <_ZN6StringC1EPKc>
   d42dc:	2300      	movs	r3, #0
   d42de:	2201      	movs	r2, #1
   d42e0:	a906      	add	r1, sp, #24
   d42e2:	a802      	add	r0, sp, #8
   d42e4:	f7ff ff6e 	bl	d41c4 <_Z7logData6StringS_bb>
   d42e8:	a806      	add	r0, sp, #24
   d42ea:	f002 fcaf 	bl	d6c4c <_ZN6StringD1Ev>
   d42ee:	a802      	add	r0, sp, #8
   d42f0:	f002 fcac 	bl	d6c4c <_ZN6StringD1Ev>
				sampleCounter = 1;
   d42f4:	4b36      	ldr	r3, [pc, #216]	; (d43d0 <loop+0x1c4>)
   d42f6:	2201      	movs	r2, #1
   d42f8:	601a      	str	r2, [r3, #0]
				sampleSum = 0;
   d42fa:	4b36      	ldr	r3, [pc, #216]	; (d43d4 <loop+0x1c8>)
   d42fc:	2200      	movs	r2, #0
   d42fe:	601a      	str	r2, [r3, #0]
				sampleAverage = 0;
   d4300:	4b35      	ldr	r3, [pc, #212]	; (d43d8 <loop+0x1cc>)
   d4302:	2200      	movs	r2, #0
   d4304:	601a      	str	r2, [r3, #0]
   d4306:	f000 fb25 	bl	d4954 <HAL_Timer_Get_Milli_Seconds>
				state = SAMPLE_STATE;
   d430a:	2305      	movs	r3, #5
				stateTime = millis();
   d430c:	6028      	str	r0, [r5, #0]
				state = SAMPLE_STATE;
   d430e:	e7b0      	b.n	d4272 <loop+0x66>
			analogValue = analogRead(ANALOG_DETECTOR);
   d4310:	2010      	movs	r0, #16
   d4312:	f002 fffe 	bl	d7312 <analogRead>
			sampleSum = sampleSum + analogValue;
   d4316:	4d2f      	ldr	r5, [pc, #188]	; (d43d4 <loop+0x1c8>)
			analogValue = analogRead(ANALOG_DETECTOR);
   d4318:	4a30      	ldr	r2, [pc, #192]	; (d43dc <loop+0x1d0>)
			if(sampleCounter++ > sampleTotalCount){
   d431a:	4e31      	ldr	r6, [pc, #196]	; (d43e0 <loop+0x1d4>)
			analogValue = analogRead(ANALOG_DETECTOR);
   d431c:	6010      	str	r0, [r2, #0]
			sampleSum = sampleSum + analogValue;
   d431e:	682a      	ldr	r2, [r5, #0]
			analogValue = analogRead(ANALOG_DETECTOR);
   d4320:	4603      	mov	r3, r0
			sampleSum = sampleSum + analogValue;
   d4322:	4413      	add	r3, r2
			if(sampleCounter++ > sampleTotalCount){
   d4324:	4a2a      	ldr	r2, [pc, #168]	; (d43d0 <loop+0x1c4>)
			sampleSum = sampleSum + analogValue;
   d4326:	602b      	str	r3, [r5, #0]
			if(sampleCounter++ > sampleTotalCount){
   d4328:	6813      	ldr	r3, [r2, #0]
   d432a:	1c59      	adds	r1, r3, #1
   d432c:	6011      	str	r1, [r2, #0]
   d432e:	6832      	ldr	r2, [r6, #0]
   d4330:	4293      	cmp	r3, r2
   d4332:	dd9f      	ble.n	d4274 <loop+0x68>
				digitalValue = map(analogValue, minValue, maxValue, 0, 100);
   d4334:	2364      	movs	r3, #100	; 0x64
   d4336:	4a2b      	ldr	r2, [pc, #172]	; (d43e4 <loop+0x1d8>)
   d4338:	492b      	ldr	r1, [pc, #172]	; (d43e8 <loop+0x1dc>)
   d433a:	9300      	str	r3, [sp, #0]
   d433c:	6812      	ldr	r2, [r2, #0]
   d433e:	6809      	ldr	r1, [r1, #0]
   d4340:	2300      	movs	r3, #0
   d4342:	f000 fd33 	bl	d4dac <_Z3mapiiiii>
   d4346:	4b29      	ldr	r3, [pc, #164]	; (d43ec <loop+0x1e0>)
				sampleAverage = sampleSum / sampleTotalCount;
   d4348:	6832      	ldr	r2, [r6, #0]
				digitalValue = map(analogValue, minValue, maxValue, 0, 100);
   d434a:	6018      	str	r0, [r3, #0]
				sampleAverage = sampleSum / sampleTotalCount;
   d434c:	682b      	ldr	r3, [r5, #0]
   d434e:	fb93 f3f2 	sdiv	r3, r3, r2
   d4352:	ee07 3a90 	vmov	s15, r3
   d4356:	4b20      	ldr	r3, [pc, #128]	; (d43d8 <loop+0x1cc>)
   d4358:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d435c:	edc3 7a00 	vstr	s15, [r3]
   d4360:	f000 faf8 	bl	d4954 <HAL_Timer_Get_Milli_Seconds>
				stateTime = millis();
   d4364:	4b13      	ldr	r3, [pc, #76]	; (d43b4 <loop+0x1a8>)
   d4366:	6018      	str	r0, [r3, #0]
				state = PUBLISH_WAIT_STATE;
   d4368:	2306      	movs	r3, #6
   d436a:	e782      	b.n	d4272 <loop+0x66>
			if(millis() - stateTime >= MAX_TIME_TO_WAIT_PUBLISH_MS){
   d436c:	4d11      	ldr	r5, [pc, #68]	; (d43b4 <loop+0x1a8>)
   d436e:	f000 faf1 	bl	d4954 <HAL_Timer_Get_Milli_Seconds>
   d4372:	682b      	ldr	r3, [r5, #0]
   d4374:	1ac0      	subs	r0, r0, r3
   d4376:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   d437a:	f4ff af7b 	bcc.w	d4274 <loop+0x68>
				logData("PUBLISH_WAIT_STATE", "START PUBLISH_STATE", true, false);
   d437e:	491c      	ldr	r1, [pc, #112]	; (d43f0 <loop+0x1e4>)
   d4380:	a802      	add	r0, sp, #8
   d4382:	f002 fcae 	bl	d6ce2 <_ZN6StringC1EPKc>
   d4386:	491b      	ldr	r1, [pc, #108]	; (d43f4 <loop+0x1e8>)
   d4388:	a806      	add	r0, sp, #24
   d438a:	f002 fcaa 	bl	d6ce2 <_ZN6StringC1EPKc>
   d438e:	2300      	movs	r3, #0
   d4390:	2201      	movs	r2, #1
   d4392:	a906      	add	r1, sp, #24
   d4394:	a802      	add	r0, sp, #8
   d4396:	f7ff ff15 	bl	d41c4 <_Z7logData6StringS_bb>
   d439a:	a806      	add	r0, sp, #24
   d439c:	f002 fc56 	bl	d6c4c <_ZN6StringD1Ev>
   d43a0:	a802      	add	r0, sp, #8
   d43a2:	f002 fc53 	bl	d6c4c <_ZN6StringD1Ev>
   d43a6:	f000 fad5 	bl	d4954 <HAL_Timer_Get_Milli_Seconds>
				state = PUBLISH_STATE;
   d43aa:	2307      	movs	r3, #7
				stateTime = millis();
   d43ac:	6028      	str	r0, [r5, #0]
				state = PUBLISH_STATE;
   d43ae:	e760      	b.n	d4272 <loop+0x66>
   d43b0:	2003e5c8 	.word	0x2003e5c8
   d43b4:	2003e6d4 	.word	0x2003e6d4
   d43b8:	000d7a20 	.word	0x000d7a20
   d43bc:	000d7a29 	.word	0x000d7a29
   d43c0:	000493e0 	.word	0x000493e0
   d43c4:	000d7a3c 	.word	0x000d7a3c
   d43c8:	000d7a57 	.word	0x000d7a57
   d43cc:	000d7a6b 	.word	0x000d7a6b
   d43d0:	2003e6cc 	.word	0x2003e6cc
   d43d4:	2003e6d0 	.word	0x2003e6d0
   d43d8:	2003e6c8 	.word	0x2003e6c8
   d43dc:	2003e648 	.word	0x2003e648
   d43e0:	2003e5c4 	.word	0x2003e5c4
   d43e4:	2003e5c0 	.word	0x2003e5c0
   d43e8:	2003e6c4 	.word	0x2003e6c4
   d43ec:	2003e65c 	.word	0x2003e65c
   d43f0:	000d7a7a 	.word	0x000d7a7a
   d43f4:	000d7a8d 	.word	0x000d7a8d
			Serial.println(analogValue);
   d43f8:	f002 fe78 	bl	d70ec <_Z16_fetch_usbserialv>
   d43fc:	4b81      	ldr	r3, [pc, #516]	; (d4604 <loop+0x3f8>)
   d43fe:	681d      	ldr	r5, [r3, #0]
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
   d4400:	2d00      	cmp	r5, #0
   d4402:	4606      	mov	r6, r0
   d4404:	f280 80b6 	bge.w	d4574 <loop+0x368>
            t = print('-');
   d4408:	212d      	movs	r1, #45	; 0x2d
   d440a:	f002 fba3 	bl	d6b54 <_ZN5Print5printEc>
            val = -n;
   d440e:	4269      	negs	r1, r5
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d4410:	220a      	movs	r2, #10
   d4412:	4630      	mov	r0, r6
			Serial.println(digitalValue);
   d4414:	4f7c      	ldr	r7, [pc, #496]	; (d4608 <loop+0x3fc>)
   d4416:	f002 fbac 	bl	d6b72 <_ZN5Print11printNumberEmh>
        n += println();
   d441a:	4630      	mov	r0, r6
   d441c:	f002 fb9d 	bl	d6b5a <_ZN5Print7printlnEv>
   d4420:	f002 fe64 	bl	d70ec <_Z16_fetch_usbserialv>
   d4424:	683d      	ldr	r5, [r7, #0]
        if (n < 0 && base == 10) {
   d4426:	2d00      	cmp	r5, #0
   d4428:	4606      	mov	r6, r0
   d442a:	f280 80a5 	bge.w	d4578 <loop+0x36c>
            t = print('-');
   d442e:	212d      	movs	r1, #45	; 0x2d
   d4430:	f002 fb90 	bl	d6b54 <_ZN5Print5printEc>
            val = -n;
   d4434:	4269      	negs	r1, r5
        return printNumber(val, base) + t;
   d4436:	220a      	movs	r2, #10
   d4438:	4630      	mov	r0, r6
   d443a:	f002 fb9a 	bl	d6b72 <_ZN5Print11printNumberEmh>
        n += println();
   d443e:	4630      	mov	r0, r6
   d4440:	f002 fb8b 	bl	d6b5a <_ZN5Print7printlnEv>
				feedName = "Garden-Lady-Bug-04-Cap";
   d4444:	4971      	ldr	r1, [pc, #452]	; (d460c <loop+0x400>)
   d4446:	4872      	ldr	r0, [pc, #456]	; (d4610 <loop+0x404>)
   d4448:	f002 fca1 	bl	d6d8e <_ZN6StringaSEPKc>
				feedID = "6cUonqXsLchfn8t5F6UsUrxF58qE";
   d444c:	4971      	ldr	r1, [pc, #452]	; (d4614 <loop+0x408>)
   d444e:	4872      	ldr	r0, [pc, #456]	; (d4618 <loop+0x40c>)
   d4450:	f002 fc9d 	bl	d6d8e <_ZN6StringaSEPKc>
	StringSumHelper(const char *p) : String(p) {}
   d4454:	4971      	ldr	r1, [pc, #452]	; (d461c <loop+0x410>)
   d4456:	a806      	add	r0, sp, #24
   d4458:	f002 fc43 	bl	d6ce2 <_ZN6StringC1EPKc>
				feedData = "{ \"value\": \"" + String::format("%.2f", sampleAverage) + "\", \"feedID\": \"" + feedID + "\"}";
   d445c:	4b70      	ldr	r3, [pc, #448]	; (d4620 <loop+0x414>)
   d445e:	6818      	ldr	r0, [r3, #0]
   d4460:	f003 f920 	bl	d76a4 <__aeabi_f2d>
   d4464:	4602      	mov	r2, r0
   d4466:	460b      	mov	r3, r1
   d4468:	a802      	add	r0, sp, #8
   d446a:	496e      	ldr	r1, [pc, #440]	; (d4624 <loop+0x418>)
   d446c:	f002 fcda 	bl	d6e24 <_ZN6String6formatEPKcz>
   d4470:	a902      	add	r1, sp, #8
   d4472:	a806      	add	r0, sp, #24
   d4474:	f002 fcb4 	bl	d6de0 <_ZplRK15StringSumHelperRK6String>
   d4478:	496b      	ldr	r1, [pc, #428]	; (d4628 <loop+0x41c>)
   d447a:	f002 fcbd 	bl	d6df8 <_ZplRK15StringSumHelperPKc>
   d447e:	4966      	ldr	r1, [pc, #408]	; (d4618 <loop+0x40c>)
   d4480:	f002 fcae 	bl	d6de0 <_ZplRK15StringSumHelperRK6String>
   d4484:	4969      	ldr	r1, [pc, #420]	; (d462c <loop+0x420>)
   d4486:	f002 fcb7 	bl	d6df8 <_ZplRK15StringSumHelperPKc>
   d448a:	4601      	mov	r1, r0
   d448c:	4868      	ldr	r0, [pc, #416]	; (d4630 <loop+0x424>)
   d448e:	f002 fc64 	bl	d6d5a <_ZN6StringaSERKS_>
   d4492:	a802      	add	r0, sp, #8
   d4494:	f002 fbda 	bl	d6c4c <_ZN6StringD1Ev>
class StringSumHelper : public String
   d4498:	a806      	add	r0, sp, #24
   d449a:	f002 fbd7 	bl	d6c4c <_ZN6StringD1Ev>
				logData(feedName, feedData, true, true);
   d449e:	495c      	ldr	r1, [pc, #368]	; (d4610 <loop+0x404>)
   d44a0:	a802      	add	r0, sp, #8
   d44a2:	f002 fc69 	bl	d6d78 <_ZN6StringC1ERKS_>
   d44a6:	4962      	ldr	r1, [pc, #392]	; (d4630 <loop+0x424>)
   d44a8:	a806      	add	r0, sp, #24
   d44aa:	f002 fc65 	bl	d6d78 <_ZN6StringC1ERKS_>
   d44ae:	2301      	movs	r3, #1
   d44b0:	461a      	mov	r2, r3
   d44b2:	a906      	add	r1, sp, #24
   d44b4:	a802      	add	r0, sp, #8
   d44b6:	f7ff fe85 	bl	d41c4 <_Z7logData6StringS_bb>
   d44ba:	a806      	add	r0, sp, #24
   d44bc:	f002 fbc6 	bl	d6c4c <_ZN6StringD1Ev>
   d44c0:	a802      	add	r0, sp, #8
   d44c2:	f002 fbc3 	bl	d6c4c <_ZN6StringD1Ev>
				feedName = "Garden-Lady-Bug-04-Cap-Percentage";
   d44c6:	495b      	ldr	r1, [pc, #364]	; (d4634 <loop+0x428>)
   d44c8:	4851      	ldr	r0, [pc, #324]	; (d4610 <loop+0x404>)
   d44ca:	f002 fc60 	bl	d6d8e <_ZN6StringaSEPKc>
				feedID = "n8epcPsCFksb9UWYtgXtoe4Kjhkv";
   d44ce:	495a      	ldr	r1, [pc, #360]	; (d4638 <loop+0x42c>)
   d44d0:	4851      	ldr	r0, [pc, #324]	; (d4618 <loop+0x40c>)
   d44d2:	f002 fc5c 	bl	d6d8e <_ZN6StringaSEPKc>
	StringSumHelper(const char *p) : String(p) {}
   d44d6:	4951      	ldr	r1, [pc, #324]	; (d461c <loop+0x410>)
   d44d8:	a806      	add	r0, sp, #24
   d44da:	f002 fc02 	bl	d6ce2 <_ZN6StringC1EPKc>
				feedData = "{ \"value\": \"" + String::format("%d", digitalValue) + "\", \"feedID\": \"" + feedID + "\"}";
   d44de:	683a      	ldr	r2, [r7, #0]
   d44e0:	4956      	ldr	r1, [pc, #344]	; (d463c <loop+0x430>)
   d44e2:	a802      	add	r0, sp, #8
   d44e4:	f002 fc9e 	bl	d6e24 <_ZN6String6formatEPKcz>
   d44e8:	a902      	add	r1, sp, #8
   d44ea:	a806      	add	r0, sp, #24
   d44ec:	f002 fc78 	bl	d6de0 <_ZplRK15StringSumHelperRK6String>
   d44f0:	494d      	ldr	r1, [pc, #308]	; (d4628 <loop+0x41c>)
   d44f2:	f002 fc81 	bl	d6df8 <_ZplRK15StringSumHelperPKc>
   d44f6:	4948      	ldr	r1, [pc, #288]	; (d4618 <loop+0x40c>)
   d44f8:	f002 fc72 	bl	d6de0 <_ZplRK15StringSumHelperRK6String>
   d44fc:	494b      	ldr	r1, [pc, #300]	; (d462c <loop+0x420>)
   d44fe:	f002 fc7b 	bl	d6df8 <_ZplRK15StringSumHelperPKc>
   d4502:	4601      	mov	r1, r0
   d4504:	484a      	ldr	r0, [pc, #296]	; (d4630 <loop+0x424>)
   d4506:	f002 fc28 	bl	d6d5a <_ZN6StringaSERKS_>
   d450a:	a802      	add	r0, sp, #8
   d450c:	f002 fb9e 	bl	d6c4c <_ZN6StringD1Ev>
class StringSumHelper : public String
   d4510:	a806      	add	r0, sp, #24
   d4512:	f002 fb9b 	bl	d6c4c <_ZN6StringD1Ev>
				logData(feedName, feedData, false, true);    
   d4516:	493e      	ldr	r1, [pc, #248]	; (d4610 <loop+0x404>)
   d4518:	a802      	add	r0, sp, #8
   d451a:	f002 fc2d 	bl	d6d78 <_ZN6StringC1ERKS_>
   d451e:	4944      	ldr	r1, [pc, #272]	; (d4630 <loop+0x424>)
   d4520:	a806      	add	r0, sp, #24
   d4522:	f002 fc29 	bl	d6d78 <_ZN6StringC1ERKS_>
	if (tempLogParticle){
   d4526:	a906      	add	r1, sp, #24
   d4528:	a802      	add	r0, sp, #8
   d452a:	f7ff fe1f 	bl	d416c <_Z7logData6StringS_bb.part.0>
				logData(feedName, feedData, false, true);    
   d452e:	a806      	add	r0, sp, #24
   d4530:	f002 fb8c 	bl	d6c4c <_ZN6StringD1Ev>
   d4534:	a802      	add	r0, sp, #8
   d4536:	f002 fb89 	bl	d6c4c <_ZN6StringD1Ev>
			logData("PUBLISH_STATE", "START SLEEP_WAIT_STATE", true, false);
   d453a:	4941      	ldr	r1, [pc, #260]	; (d4640 <loop+0x434>)
   d453c:	a802      	add	r0, sp, #8
   d453e:	f002 fbd0 	bl	d6ce2 <_ZN6StringC1EPKc>
   d4542:	4940      	ldr	r1, [pc, #256]	; (d4644 <loop+0x438>)
   d4544:	a806      	add	r0, sp, #24
   d4546:	f002 fbcc 	bl	d6ce2 <_ZN6StringC1EPKc>
   d454a:	2300      	movs	r3, #0
   d454c:	2201      	movs	r2, #1
   d454e:	a906      	add	r1, sp, #24
   d4550:	a802      	add	r0, sp, #8
   d4552:	f7ff fe37 	bl	d41c4 <_Z7logData6StringS_bb>
   d4556:	a806      	add	r0, sp, #24
   d4558:	f002 fb78 	bl	d6c4c <_ZN6StringD1Ev>
   d455c:	a802      	add	r0, sp, #8
   d455e:	f002 fb75 	bl	d6c4c <_ZN6StringD1Ev>
			digitalWrite(BUILT_IN_LED, LOW);
   d4562:	2100      	movs	r1, #0
   d4564:	2007      	movs	r0, #7
   d4566:	f002 febb 	bl	d72e0 <digitalWrite>
   d456a:	f000 f9f3 	bl	d4954 <HAL_Timer_Get_Milli_Seconds>
			stateTime = millis();
   d456e:	4b36      	ldr	r3, [pc, #216]	; (d4648 <loop+0x43c>)
   d4570:	6018      	str	r0, [r3, #0]
   d4572:	e6a1      	b.n	d42b8 <loop+0xac>
            val = n;
   d4574:	4629      	mov	r1, r5
   d4576:	e74b      	b.n	d4410 <loop+0x204>
   d4578:	4629      	mov	r1, r5
   d457a:	e75c      	b.n	d4436 <loop+0x22a>
			if(millis() - stateTime >= TIME_AFTER_PUBLISH_MS){
   d457c:	4d32      	ldr	r5, [pc, #200]	; (d4648 <loop+0x43c>)
   d457e:	f000 f9e9 	bl	d4954 <HAL_Timer_Get_Milli_Seconds>
   d4582:	682b      	ldr	r3, [r5, #0]
   d4584:	1ac0      	subs	r0, r0, r3
   d4586:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   d458a:	f4ff ae73 	bcc.w	d4274 <loop+0x68>
				logData("SLEEP_WAIT_STATE", "GOING TO SLEEP", true, false);
   d458e:	492f      	ldr	r1, [pc, #188]	; (d464c <loop+0x440>)
   d4590:	a802      	add	r0, sp, #8
   d4592:	f002 fba6 	bl	d6ce2 <_ZN6StringC1EPKc>
   d4596:	492e      	ldr	r1, [pc, #184]	; (d4650 <loop+0x444>)
   d4598:	a806      	add	r0, sp, #24
   d459a:	f002 fba2 	bl	d6ce2 <_ZN6StringC1EPKc>
   d459e:	2300      	movs	r3, #0
   d45a0:	2201      	movs	r2, #1
   d45a2:	a906      	add	r1, sp, #24
   d45a4:	a802      	add	r0, sp, #8
   d45a6:	f7ff fe0d 	bl	d41c4 <_Z7logData6StringS_bb>
   d45aa:	a806      	add	r0, sp, #24
   d45ac:	f002 fb4e 	bl	d6c4c <_ZN6StringD1Ev>
   d45b0:	a802      	add	r0, sp, #8
   d45b2:	f002 fb4b 	bl	d6c4c <_ZN6StringD1Ev>
   d45b6:	f000 f9cd 	bl	d4954 <HAL_Timer_Get_Milli_Seconds>
				state = SLEEP_STATE;
   d45ba:	2309      	movs	r3, #9
				stateTime = millis();
   d45bc:	6028      	str	r0, [r5, #0]
				state = SLEEP_STATE;
   d45be:	e658      	b.n	d4272 <loop+0x66>
			if(millis() - stateTime >= TIME_TO_SLEEP_MS){
   d45c0:	4d21      	ldr	r5, [pc, #132]	; (d4648 <loop+0x43c>)
   d45c2:	f000 f9c7 	bl	d4954 <HAL_Timer_Get_Milli_Seconds>
   d45c6:	682b      	ldr	r3, [r5, #0]
   d45c8:	1ac0      	subs	r0, r0, r3
   d45ca:	4b22      	ldr	r3, [pc, #136]	; (d4654 <loop+0x448>)
   d45cc:	4298      	cmp	r0, r3
   d45ce:	f67f ae51 	bls.w	d4274 <loop+0x68>
				logData("SLEEP_STATE", "WAKE UP", true, false);
   d45d2:	4921      	ldr	r1, [pc, #132]	; (d4658 <loop+0x44c>)
   d45d4:	a802      	add	r0, sp, #8
   d45d6:	f002 fb84 	bl	d6ce2 <_ZN6StringC1EPKc>
   d45da:	4920      	ldr	r1, [pc, #128]	; (d465c <loop+0x450>)
   d45dc:	a806      	add	r0, sp, #24
   d45de:	f002 fb80 	bl	d6ce2 <_ZN6StringC1EPKc>
   d45e2:	2300      	movs	r3, #0
   d45e4:	2201      	movs	r2, #1
   d45e6:	a906      	add	r1, sp, #24
   d45e8:	a802      	add	r0, sp, #8
   d45ea:	f7ff fdeb 	bl	d41c4 <_Z7logData6StringS_bb>
   d45ee:	a806      	add	r0, sp, #24
   d45f0:	f002 fb2c 	bl	d6c4c <_ZN6StringD1Ev>
   d45f4:	a802      	add	r0, sp, #8
   d45f6:	f002 fb29 	bl	d6c4c <_ZN6StringD1Ev>
   d45fa:	f000 f9ab 	bl	d4954 <HAL_Timer_Get_Milli_Seconds>
				state = PARTICLE_CONNECT_WAIT_STATE;
   d45fe:	2301      	movs	r3, #1
				stateTime = millis();
   d4600:	6028      	str	r0, [r5, #0]
				state = PARTICLE_CONNECT_WAIT_STATE;
   d4602:	e636      	b.n	d4272 <loop+0x66>
   d4604:	2003e648 	.word	0x2003e648
   d4608:	2003e65c 	.word	0x2003e65c
   d460c:	000d7aa1 	.word	0x000d7aa1
   d4610:	2003e690 	.word	0x2003e690
   d4614:	000d7ab8 	.word	0x000d7ab8
   d4618:	2003e680 	.word	0x2003e680
   d461c:	000d7ad5 	.word	0x000d7ad5
   d4620:	2003e6c8 	.word	0x2003e6c8
   d4624:	000d7ae2 	.word	0x000d7ae2
   d4628:	000d7ae7 	.word	0x000d7ae7
   d462c:	000d7af6 	.word	0x000d7af6
   d4630:	2003e670 	.word	0x2003e670
   d4634:	000d7af9 	.word	0x000d7af9
   d4638:	000d7b1b 	.word	0x000d7b1b
   d463c:	000d7b38 	.word	0x000d7b38
   d4640:	000d7a93 	.word	0x000d7a93
   d4644:	000d7b3b 	.word	0x000d7b3b
   d4648:	2003e6d4 	.word	0x2003e6d4
   d464c:	000d7b41 	.word	0x000d7b41
   d4650:	000d7b52 	.word	0x000d7b52
   d4654:	000dbb9f 	.word	0x000dbb9f
   d4658:	000d7b61 	.word	0x000d7b61
   d465c:	000d7b6d 	.word	0x000d7b6d

000d4660 <_Z25selectExternalMeshAntennav>:
void selectExternalMeshAntenna(){
	#if(PLATFORM_ID == PLATFORM_ARGON)
		digitalWrite(ANTSW1, 1);
		digitalWrite(ANTSW2, 0);
	#elif(PLATFORM_ID == PLATFORM_BORON)
		digitalWrite(ANTSW1, 0);
   d4660:	2100      	movs	r1, #0
   d4662:	201f      	movs	r0, #31
   d4664:	f002 be3c 	b.w	d72e0 <digitalWrite>

000d4668 <setup>:
void setup(){
   d4668:	b510      	push	{r4, lr}
   d466a:	b088      	sub	sp, #32
	selectExternalMeshAntenna();
   d466c:	f7ff fff8 	bl	d4660 <_Z25selectExternalMeshAntennav>
	Serial.begin(9600);
   d4670:	f002 fd3c 	bl	d70ec <_Z16_fetch_usbserialv>
   d4674:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d4678:	f002 fd28 	bl	d70cc <_ZN9USBSerial5beginEl>
	state = PARTICLE_CONNECT_WAIT_STATE;
   d467c:	4b0c      	ldr	r3, [pc, #48]	; (d46b0 <setup+0x48>)
	logData("SETUP", "SETUP COMPLETE", true, false);
   d467e:	490d      	ldr	r1, [pc, #52]	; (d46b4 <setup+0x4c>)
	state = PARTICLE_CONNECT_WAIT_STATE;
   d4680:	2401      	movs	r4, #1
	logData("SETUP", "SETUP COMPLETE", true, false);
   d4682:	4668      	mov	r0, sp
	state = PARTICLE_CONNECT_WAIT_STATE;
   d4684:	701c      	strb	r4, [r3, #0]
	logData("SETUP", "SETUP COMPLETE", true, false);
   d4686:	f002 fb2c 	bl	d6ce2 <_ZN6StringC1EPKc>
   d468a:	490b      	ldr	r1, [pc, #44]	; (d46b8 <setup+0x50>)
   d468c:	a804      	add	r0, sp, #16
   d468e:	f002 fb28 	bl	d6ce2 <_ZN6StringC1EPKc>
   d4692:	2300      	movs	r3, #0
   d4694:	4622      	mov	r2, r4
   d4696:	a904      	add	r1, sp, #16
   d4698:	4668      	mov	r0, sp
   d469a:	f7ff fd93 	bl	d41c4 <_Z7logData6StringS_bb>
   d469e:	a804      	add	r0, sp, #16
   d46a0:	f002 fad4 	bl	d6c4c <_ZN6StringD1Ev>
   d46a4:	4668      	mov	r0, sp
   d46a6:	f002 fad1 	bl	d6c4c <_ZN6StringD1Ev>
}
   d46aa:	b008      	add	sp, #32
   d46ac:	bd10      	pop	{r4, pc}
   d46ae:	bf00      	nop
   d46b0:	2003e5c8 	.word	0x2003e5c8
   d46b4:	000d7b75 	.word	0x000d7b75
   d46b8:	000d7b7b 	.word	0x000d7b7b

000d46bc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d46bc:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d46be:	e9d0 5300 	ldrd	r5, r3, [r0]
   d46c2:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   d46c4:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d46c6:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   d46ca:	42ae      	cmp	r6, r5
   d46cc:	d004      	beq.n	d46d8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
   d46ce:	4628      	mov	r0, r5
   d46d0:	f002 fabc 	bl	d6c4c <_ZN6StringD1Ev>
   d46d4:	3514      	adds	r5, #20
   d46d6:	e7f8      	b.n	d46ca <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   d46d8:	6820      	ldr	r0, [r4, #0]
   d46da:	f000 fb37 	bl	d4d4c <free>
    AllocatorT::free(data_);
}
   d46de:	4620      	mov	r0, r4
   d46e0:	bd70      	pop	{r4, r5, r6, pc}

000d46e2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   d46e2:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d46e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d46e6:	4604      	mov	r4, r0
   d46e8:	460d      	mov	r5, r1
   d46ea:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   d46ec:	d916      	bls.n	d471c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
   d46ee:	4290      	cmp	r0, r2
   d46f0:	d215      	bcs.n	d471e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
   d46f2:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   d46f6:	1a75      	subs	r5, r6, r1
   d46f8:	f1a1 0714 	sub.w	r7, r1, #20
   d46fc:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   d46fe:	42b7      	cmp	r7, r6
   d4700:	d01c      	beq.n	d473c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
   d4702:	b12c      	cbz	r4, d4710 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
   d4704:	4631      	mov	r1, r6
   d4706:	4620      	mov	r0, r4
   d4708:	f002 fb1c 	bl	d6d44 <_ZN6StringC1EOS_>
   d470c:	7c33      	ldrb	r3, [r6, #16]
   d470e:	7423      	strb	r3, [r4, #16]
   d4710:	4630      	mov	r0, r6
   d4712:	f002 fa9b 	bl	d6c4c <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   d4716:	3e14      	subs	r6, #20
   d4718:	3c14      	subs	r4, #20
   d471a:	e7f0      	b.n	d46fe <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   d471c:	d00e      	beq.n	d473c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
   d471e:	42b5      	cmp	r5, r6
   d4720:	d00c      	beq.n	d473c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
   d4722:	b12c      	cbz	r4, d4730 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
   d4724:	4629      	mov	r1, r5
   d4726:	4620      	mov	r0, r4
   d4728:	f002 fb0c 	bl	d6d44 <_ZN6StringC1EOS_>
   d472c:	7c2b      	ldrb	r3, [r5, #16]
   d472e:	7423      	strb	r3, [r4, #16]
   d4730:	4628      	mov	r0, r5
   d4732:	f002 fa8b 	bl	d6c4c <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   d4736:	3514      	adds	r5, #20
   d4738:	3414      	adds	r4, #20
   d473a:	e7f0      	b.n	d471e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
   d473c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d473e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d473e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   d4742:	2300      	movs	r3, #0
   d4744:	e9c0 3300 	strd	r3, r3, [r0]
   d4748:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d474a:	684f      	ldr	r7, [r1, #4]
   d474c:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d474e:	4604      	mov	r4, r0
   d4750:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d4752:	dd23      	ble.n	d479c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   d4754:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
   d4758:	fb08 f007 	mul.w	r0, r8, r7
   d475c:	f000 faee 	bl	d4d3c <malloc>
            if (!d) {
   d4760:	4605      	mov	r5, r0
   d4762:	b1d8      	cbz	r0, d479c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            move(d, data_, data_ + size_);
   d4764:	e9d4 1200 	ldrd	r1, r2, [r4]
   d4768:	fb08 1202 	mla	r2, r8, r2, r1
   d476c:	f7ff ffb9 	bl	d46e2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   d4770:	6820      	ldr	r0, [r4, #0]
   d4772:	f000 faeb 	bl	d4d4c <free>
        data_ = d;
   d4776:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   d4778:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   d477a:	e9d6 7300 	ldrd	r7, r3, [r6]
   d477e:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
   d4782:	45b8      	cmp	r8, r7
   d4784:	d008      	beq.n	d4798 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5a>
   d4786:	4639      	mov	r1, r7
   d4788:	4628      	mov	r0, r5
   d478a:	f002 faf5 	bl	d6d78 <_ZN6StringC1ERKS_>
   d478e:	7c3b      	ldrb	r3, [r7, #16]
   d4790:	742b      	strb	r3, [r5, #16]
   d4792:	3714      	adds	r7, #20
   d4794:	3514      	adds	r5, #20
   d4796:	e7f4      	b.n	d4782 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
   d4798:	6873      	ldr	r3, [r6, #4]
   d479a:	6063      	str	r3, [r4, #4]
}
   d479c:	4620      	mov	r0, r4
   d479e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000d47a4 <_GLOBAL__sub_I_logHandler>:
	#else
		digitalWrite(ANTSW1, 0);
		digitalWrite(ANTSW2, 1);
	#endif
   d47a4:	b5f0      	push	{r4, r5, r6, r7, lr}
        val_(val) {
   d47a6:	4b43      	ldr	r3, [pc, #268]	; (d48b4 <_GLOBAL__sub_I_logHandler+0x110>)
        filter_(level, filters) {
   d47a8:	4c43      	ldr	r4, [pc, #268]	; (d48b8 <_GLOBAL__sub_I_logHandler+0x114>)
String analogValueString = "0";
   d47aa:	4f44      	ldr	r7, [pc, #272]	; (d48bc <_GLOBAL__sub_I_logHandler+0x118>)
   d47ac:	2001      	movs	r0, #1
   d47ae:	b08d      	sub	sp, #52	; 0x34
   d47b0:	7018      	strb	r0, [r3, #0]
SYSTEM_THREAD(ENABLED)
   d47b2:	2100      	movs	r1, #0
   d47b4:	f000 fa0e 	bl	d4bd4 <system_thread_set_state>
        capacity_(0) {
   d47b8:	2300      	movs	r3, #0
   d47ba:	e9cd 3300 	strd	r3, r3, [sp]
   d47be:	9302      	str	r3, [sp, #8]
            StreamLogHandler(Serial, level, filters) {
   d47c0:	f002 fc94 	bl	d70ec <_Z16_fetch_usbserialv>
   d47c4:	4669      	mov	r1, sp
   d47c6:	4605      	mov	r5, r0
   d47c8:	a803      	add	r0, sp, #12
   d47ca:	f7ff ffb8 	bl	d473e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d47ce:	4626      	mov	r6, r4
        stream_(&stream) {
   d47d0:	a903      	add	r1, sp, #12
   d47d2:	a806      	add	r0, sp, #24
   d47d4:	f7ff ffb3 	bl	d473e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   d47d8:	4b39      	ldr	r3, [pc, #228]	; (d48c0 <_GLOBAL__sub_I_logHandler+0x11c>)
   d47da:	f846 3b04 	str.w	r3, [r6], #4
   d47de:	a906      	add	r1, sp, #24
   d47e0:	a809      	add	r0, sp, #36	; 0x24
   d47e2:	f7ff ffac 	bl	d473e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d47e6:	aa09      	add	r2, sp, #36	; 0x24
   d47e8:	211e      	movs	r1, #30
   d47ea:	4630      	mov	r0, r6
   d47ec:	f001 fdb8 	bl	d6360 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d47f0:	a809      	add	r0, sp, #36	; 0x24
   d47f2:	f7ff ff63 	bl	d46bc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   d47f6:	a806      	add	r0, sp, #24
   d47f8:	f7ff ff60 	bl	d46bc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d47fc:	4b31      	ldr	r3, [pc, #196]	; (d48c4 <_GLOBAL__sub_I_logHandler+0x120>)
   d47fe:	6023      	str	r3, [r4, #0]
   d4800:	6225      	str	r5, [r4, #32]
   d4802:	a803      	add	r0, sp, #12
   d4804:	f7ff ff5a 	bl	d46bc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d4808:	4b2f      	ldr	r3, [pc, #188]	; (d48c8 <_GLOBAL__sub_I_logHandler+0x124>)
   d480a:	6023      	str	r3, [r4, #0]
        Serial.begin();
   d480c:	f002 fc6e 	bl	d70ec <_Z16_fetch_usbserialv>
   d4810:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d4814:	f002 fc5a 	bl	d70cc <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
   d4818:	f001 fa5c 	bl	d5cd4 <_ZN5spark10LogManager8instanceEv>
   d481c:	4621      	mov	r1, r4
   d481e:	f001 fd31 	bl	d6284 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
String voltageStr;
   d4822:	4d2a      	ldr	r5, [pc, #168]	; (d48cc <_GLOBAL__sub_I_logHandler+0x128>)
   d4824:	4e2a      	ldr	r6, [pc, #168]	; (d48d0 <_GLOBAL__sub_I_logHandler+0x12c>)
SerialLogHandler logHandler;
   d4826:	4668      	mov	r0, sp
   d4828:	f7ff ff48 	bl	d46bc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d482c:	4a29      	ldr	r2, [pc, #164]	; (d48d4 <_GLOBAL__sub_I_logHandler+0x130>)
   d482e:	492a      	ldr	r1, [pc, #168]	; (d48d8 <_GLOBAL__sub_I_logHandler+0x134>)
   d4830:	4620      	mov	r0, r4
   d4832:	f002 fdc5 	bl	d73c0 <__aeabi_atexit>
String voltageStr;
   d4836:	4c29      	ldr	r4, [pc, #164]	; (d48dc <_GLOBAL__sub_I_logHandler+0x138>)
   d4838:	4629      	mov	r1, r5
   d483a:	4630      	mov	r0, r6
   d483c:	f002 fa51 	bl	d6ce2 <_ZN6StringC1EPKc>
   d4840:	4630      	mov	r0, r6
String analogValueString = "0";
   d4842:	4e27      	ldr	r6, [pc, #156]	; (d48e0 <_GLOBAL__sub_I_logHandler+0x13c>)
String voltageStr;
   d4844:	4a23      	ldr	r2, [pc, #140]	; (d48d4 <_GLOBAL__sub_I_logHandler+0x130>)
   d4846:	4621      	mov	r1, r4
   d4848:	f002 fdba 	bl	d73c0 <__aeabi_atexit>
String analogValueString = "0";
   d484c:	4639      	mov	r1, r7
   d484e:	4630      	mov	r0, r6
   d4850:	f002 fa47 	bl	d6ce2 <_ZN6StringC1EPKc>
   d4854:	4630      	mov	r0, r6
String digitalValueString = "0";
   d4856:	4e23      	ldr	r6, [pc, #140]	; (d48e4 <_GLOBAL__sub_I_logHandler+0x140>)
String analogValueString = "0";
   d4858:	4a1e      	ldr	r2, [pc, #120]	; (d48d4 <_GLOBAL__sub_I_logHandler+0x130>)
   d485a:	4621      	mov	r1, r4
   d485c:	f002 fdb0 	bl	d73c0 <__aeabi_atexit>
String digitalValueString = "0";
   d4860:	4639      	mov	r1, r7
   d4862:	4630      	mov	r0, r6
   d4864:	f002 fa3d 	bl	d6ce2 <_ZN6StringC1EPKc>
   d4868:	4630      	mov	r0, r6
String feedName;
   d486a:	4e1f      	ldr	r6, [pc, #124]	; (d48e8 <_GLOBAL__sub_I_logHandler+0x144>)
String digitalValueString = "0";
   d486c:	4a19      	ldr	r2, [pc, #100]	; (d48d4 <_GLOBAL__sub_I_logHandler+0x130>)
   d486e:	4621      	mov	r1, r4
   d4870:	f002 fda6 	bl	d73c0 <__aeabi_atexit>
String feedName;
   d4874:	4629      	mov	r1, r5
   d4876:	4630      	mov	r0, r6
   d4878:	f002 fa33 	bl	d6ce2 <_ZN6StringC1EPKc>
   d487c:	4630      	mov	r0, r6
String feedID;
   d487e:	4e1b      	ldr	r6, [pc, #108]	; (d48ec <_GLOBAL__sub_I_logHandler+0x148>)
String feedName;
   d4880:	4a14      	ldr	r2, [pc, #80]	; (d48d4 <_GLOBAL__sub_I_logHandler+0x130>)
   d4882:	4621      	mov	r1, r4
   d4884:	f002 fd9c 	bl	d73c0 <__aeabi_atexit>
String feedID;
   d4888:	4629      	mov	r1, r5
   d488a:	4630      	mov	r0, r6
   d488c:	f002 fa29 	bl	d6ce2 <_ZN6StringC1EPKc>
   d4890:	4630      	mov	r0, r6
String feedData;
   d4892:	4e17      	ldr	r6, [pc, #92]	; (d48f0 <_GLOBAL__sub_I_logHandler+0x14c>)
String feedID;
   d4894:	4a0f      	ldr	r2, [pc, #60]	; (d48d4 <_GLOBAL__sub_I_logHandler+0x130>)
   d4896:	4621      	mov	r1, r4
   d4898:	f002 fd92 	bl	d73c0 <__aeabi_atexit>
String feedData;
   d489c:	4629      	mov	r1, r5
   d489e:	4630      	mov	r0, r6
   d48a0:	f002 fa1f 	bl	d6ce2 <_ZN6StringC1EPKc>
   d48a4:	4a0b      	ldr	r2, [pc, #44]	; (d48d4 <_GLOBAL__sub_I_logHandler+0x130>)
   d48a6:	4621      	mov	r1, r4
   d48a8:	4630      	mov	r0, r6
   d48aa:	f002 fd89 	bl	d73c0 <__aeabi_atexit>
   d48ae:	b00d      	add	sp, #52	; 0x34
   d48b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d48b2:	bf00      	nop
   d48b4:	2003e640 	.word	0x2003e640
   d48b8:	2003e6a0 	.word	0x2003e6a0
   d48bc:	000d7b8a 	.word	0x000d7b8a
   d48c0:	000d7b94 	.word	0x000d7b94
   d48c4:	000d7d28 	.word	0x000d7d28
   d48c8:	000d7bac 	.word	0x000d7bac
   d48cc:	000d7cef 	.word	0x000d7cef
   d48d0:	2003e6d8 	.word	0x2003e6d8
   d48d4:	2003e63c 	.word	0x2003e63c
   d48d8:	000d40d1 	.word	0x000d40d1
   d48dc:	000d6c4d 	.word	0x000d6c4d
   d48e0:	2003e64c 	.word	0x2003e64c
   d48e4:	2003e660 	.word	0x2003e660
   d48e8:	2003e690 	.word	0x2003e690
   d48ec:	2003e680 	.word	0x2003e680
   d48f0:	2003e670 	.word	0x2003e670

000d48f4 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d48f4:	b508      	push	{r3, lr}
   d48f6:	4b02      	ldr	r3, [pc, #8]	; (d4900 <os_mutex_recursive_create+0xc>)
   d48f8:	681b      	ldr	r3, [r3, #0]
   d48fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d48fc:	9301      	str	r3, [sp, #4]
   d48fe:	bd08      	pop	{r3, pc}
   d4900:	00030248 	.word	0x00030248

000d4904 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d4904:	b508      	push	{r3, lr}
   d4906:	4b02      	ldr	r3, [pc, #8]	; (d4910 <os_mutex_recursive_destroy+0xc>)
   d4908:	681b      	ldr	r3, [r3, #0]
   d490a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d490c:	9301      	str	r3, [sp, #4]
   d490e:	bd08      	pop	{r3, pc}
   d4910:	00030248 	.word	0x00030248

000d4914 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   d4914:	b508      	push	{r3, lr}
   d4916:	4b02      	ldr	r3, [pc, #8]	; (d4920 <os_mutex_recursive_lock+0xc>)
   d4918:	681b      	ldr	r3, [r3, #0]
   d491a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d491c:	9301      	str	r3, [sp, #4]
   d491e:	bd08      	pop	{r3, pc}
   d4920:	00030248 	.word	0x00030248

000d4924 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   d4924:	b508      	push	{r3, lr}
   d4926:	4b02      	ldr	r3, [pc, #8]	; (d4930 <os_mutex_recursive_unlock+0xc>)
   d4928:	681b      	ldr	r3, [r3, #0]
   d492a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d492c:	9301      	str	r3, [sp, #4]
   d492e:	bd08      	pop	{r3, pc}
   d4930:	00030248 	.word	0x00030248

000d4934 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d4934:	b508      	push	{r3, lr}
   d4936:	4b02      	ldr	r3, [pc, #8]	; (d4940 <HAL_RNG_GetRandomNumber+0xc>)
   d4938:	681b      	ldr	r3, [r3, #0]
   d493a:	685b      	ldr	r3, [r3, #4]
   d493c:	9301      	str	r3, [sp, #4]
   d493e:	bd08      	pop	{r3, pc}
   d4940:	00030218 	.word	0x00030218

000d4944 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d4944:	b508      	push	{r3, lr}
   d4946:	4b02      	ldr	r3, [pc, #8]	; (d4950 <HAL_Delay_Microseconds+0xc>)
   d4948:	681b      	ldr	r3, [r3, #0]
   d494a:	68db      	ldr	r3, [r3, #12]
   d494c:	9301      	str	r3, [sp, #4]
   d494e:	bd08      	pop	{r3, pc}
   d4950:	00030218 	.word	0x00030218

000d4954 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4954:	b508      	push	{r3, lr}
   d4956:	4b02      	ldr	r3, [pc, #8]	; (d4960 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d4958:	681b      	ldr	r3, [r3, #0]
   d495a:	695b      	ldr	r3, [r3, #20]
   d495c:	9301      	str	r3, [sp, #4]
   d495e:	bd08      	pop	{r3, pc}
   d4960:	00030218 	.word	0x00030218

000d4964 <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d4964:	b508      	push	{r3, lr}
   d4966:	4b02      	ldr	r3, [pc, #8]	; (d4970 <HAL_Validate_Pin_Function+0xc>)
   d4968:	681b      	ldr	r3, [r3, #0]
   d496a:	685b      	ldr	r3, [r3, #4]
   d496c:	9301      	str	r3, [sp, #4]
   d496e:	bd08      	pop	{r3, pc}
   d4970:	0003022c 	.word	0x0003022c

000d4974 <HAL_Get_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d4974:	b508      	push	{r3, lr}
   d4976:	4b02      	ldr	r3, [pc, #8]	; (d4980 <HAL_Get_Pin_Mode+0xc>)
   d4978:	681b      	ldr	r3, [r3, #0]
   d497a:	68db      	ldr	r3, [r3, #12]
   d497c:	9301      	str	r3, [sp, #4]
   d497e:	bd08      	pop	{r3, pc}
   d4980:	0003022c 	.word	0x0003022c

000d4984 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d4984:	b508      	push	{r3, lr}
   d4986:	4b02      	ldr	r3, [pc, #8]	; (d4990 <HAL_GPIO_Write+0xc>)
   d4988:	681b      	ldr	r3, [r3, #0]
   d498a:	691b      	ldr	r3, [r3, #16]
   d498c:	9301      	str	r3, [sp, #4]
   d498e:	bd08      	pop	{r3, pc}
   d4990:	0003022c 	.word	0x0003022c

000d4994 <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   d4994:	b508      	push	{r3, lr}
   d4996:	4b02      	ldr	r3, [pc, #8]	; (d49a0 <hal_adc_read+0xc>)
   d4998:	681b      	ldr	r3, [r3, #0]
   d499a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d499c:	9301      	str	r3, [sp, #4]
   d499e:	bd08      	pop	{r3, pc}
   d49a0:	0003022c 	.word	0x0003022c

000d49a4 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d49a4:	b508      	push	{r3, lr}
   d49a6:	4b02      	ldr	r3, [pc, #8]	; (d49b0 <hal_i2c_write+0xc>)
   d49a8:	681b      	ldr	r3, [r3, #0]
   d49aa:	6a1b      	ldr	r3, [r3, #32]
   d49ac:	9301      	str	r3, [sp, #4]
   d49ae:	bd08      	pop	{r3, pc}
   d49b0:	00030228 	.word	0x00030228

000d49b4 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d49b4:	b508      	push	{r3, lr}
   d49b6:	4b02      	ldr	r3, [pc, #8]	; (d49c0 <hal_i2c_available+0xc>)
   d49b8:	681b      	ldr	r3, [r3, #0]
   d49ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d49bc:	9301      	str	r3, [sp, #4]
   d49be:	bd08      	pop	{r3, pc}
   d49c0:	00030228 	.word	0x00030228

000d49c4 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d49c4:	b508      	push	{r3, lr}
   d49c6:	4b02      	ldr	r3, [pc, #8]	; (d49d0 <hal_i2c_read+0xc>)
   d49c8:	681b      	ldr	r3, [r3, #0]
   d49ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d49cc:	9301      	str	r3, [sp, #4]
   d49ce:	bd08      	pop	{r3, pc}
   d49d0:	00030228 	.word	0x00030228

000d49d4 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d49d4:	b508      	push	{r3, lr}
   d49d6:	4b02      	ldr	r3, [pc, #8]	; (d49e0 <hal_i2c_peek+0xc>)
   d49d8:	681b      	ldr	r3, [r3, #0]
   d49da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d49dc:	9301      	str	r3, [sp, #4]
   d49de:	bd08      	pop	{r3, pc}
   d49e0:	00030228 	.word	0x00030228

000d49e4 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d49e4:	b508      	push	{r3, lr}
   d49e6:	4b02      	ldr	r3, [pc, #8]	; (d49f0 <hal_i2c_flush+0xc>)
   d49e8:	681b      	ldr	r3, [r3, #0]
   d49ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d49ec:	9301      	str	r3, [sp, #4]
   d49ee:	bd08      	pop	{r3, pc}
   d49f0:	00030228 	.word	0x00030228

000d49f4 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d49f4:	b508      	push	{r3, lr}
   d49f6:	4b02      	ldr	r3, [pc, #8]	; (d4a00 <hal_i2c_is_enabled+0xc>)
   d49f8:	681b      	ldr	r3, [r3, #0]
   d49fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d49fc:	9301      	str	r3, [sp, #4]
   d49fe:	bd08      	pop	{r3, pc}
   d4a00:	00030228 	.word	0x00030228

000d4a04 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d4a04:	b508      	push	{r3, lr}
   d4a06:	4b02      	ldr	r3, [pc, #8]	; (d4a10 <hal_i2c_init+0xc>)
   d4a08:	681b      	ldr	r3, [r3, #0]
   d4a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4a0c:	9301      	str	r3, [sp, #4]
   d4a0e:	bd08      	pop	{r3, pc}
   d4a10:	00030228 	.word	0x00030228

000d4a14 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d4a14:	b508      	push	{r3, lr}
   d4a16:	4b02      	ldr	r3, [pc, #8]	; (d4a20 <inet_inet_ntop+0xc>)
   d4a18:	681b      	ldr	r3, [r3, #0]
   d4a1a:	695b      	ldr	r3, [r3, #20]
   d4a1c:	9301      	str	r3, [sp, #4]
   d4a1e:	bd08      	pop	{r3, pc}
   d4a20:	00030264 	.word	0x00030264

000d4a24 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d4a24:	b508      	push	{r3, lr}
   d4a26:	4b02      	ldr	r3, [pc, #8]	; (d4a30 <netdb_freeaddrinfo+0xc>)
   d4a28:	681b      	ldr	r3, [r3, #0]
   d4a2a:	689b      	ldr	r3, [r3, #8]
   d4a2c:	9301      	str	r3, [sp, #4]
   d4a2e:	bd08      	pop	{r3, pc}
   d4a30:	00030268 	.word	0x00030268

000d4a34 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d4a34:	b508      	push	{r3, lr}
   d4a36:	4b02      	ldr	r3, [pc, #8]	; (d4a40 <netdb_getaddrinfo+0xc>)
   d4a38:	681b      	ldr	r3, [r3, #0]
   d4a3a:	68db      	ldr	r3, [r3, #12]
   d4a3c:	9301      	str	r3, [sp, #4]
   d4a3e:	bd08      	pop	{r3, pc}
   d4a40:	00030268 	.word	0x00030268

000d4a44 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d4a44:	b508      	push	{r3, lr}
   d4a46:	4b02      	ldr	r3, [pc, #8]	; (d4a50 <hal_spi_init+0xc>)
   d4a48:	681b      	ldr	r3, [r3, #0]
   d4a4a:	69db      	ldr	r3, [r3, #28]
   d4a4c:	9301      	str	r3, [sp, #4]
   d4a4e:	bd08      	pop	{r3, pc}
   d4a50:	00030230 	.word	0x00030230

000d4a54 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d4a54:	b508      	push	{r3, lr}
   d4a56:	4b02      	ldr	r3, [pc, #8]	; (d4a60 <hal_spi_is_enabled+0xc>)
   d4a58:	681b      	ldr	r3, [r3, #0]
   d4a5a:	6a1b      	ldr	r3, [r3, #32]
   d4a5c:	9301      	str	r3, [sp, #4]
   d4a5e:	bd08      	pop	{r3, pc}
   d4a60:	00030230 	.word	0x00030230

000d4a64 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d4a64:	b508      	push	{r3, lr}
   d4a66:	4b02      	ldr	r3, [pc, #8]	; (d4a70 <hal_usart_init+0xc>)
   d4a68:	681b      	ldr	r3, [r3, #0]
   d4a6a:	681b      	ldr	r3, [r3, #0]
   d4a6c:	9301      	str	r3, [sp, #4]
   d4a6e:	bd08      	pop	{r3, pc}
   d4a70:	0003023c 	.word	0x0003023c

000d4a74 <hal_usart_end>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
   d4a74:	b508      	push	{r3, lr}
   d4a76:	4b02      	ldr	r3, [pc, #8]	; (d4a80 <hal_usart_end+0xc>)
   d4a78:	681b      	ldr	r3, [r3, #0]
   d4a7a:	689b      	ldr	r3, [r3, #8]
   d4a7c:	9301      	str	r3, [sp, #4]
   d4a7e:	bd08      	pop	{r3, pc}
   d4a80:	0003023c 	.word	0x0003023c

000d4a84 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d4a84:	b508      	push	{r3, lr}
   d4a86:	4b02      	ldr	r3, [pc, #8]	; (d4a90 <hal_usart_write+0xc>)
   d4a88:	681b      	ldr	r3, [r3, #0]
   d4a8a:	68db      	ldr	r3, [r3, #12]
   d4a8c:	9301      	str	r3, [sp, #4]
   d4a8e:	bd08      	pop	{r3, pc}
   d4a90:	0003023c 	.word	0x0003023c

000d4a94 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d4a94:	b508      	push	{r3, lr}
   d4a96:	4b02      	ldr	r3, [pc, #8]	; (d4aa0 <hal_usart_available+0xc>)
   d4a98:	681b      	ldr	r3, [r3, #0]
   d4a9a:	691b      	ldr	r3, [r3, #16]
   d4a9c:	9301      	str	r3, [sp, #4]
   d4a9e:	bd08      	pop	{r3, pc}
   d4aa0:	0003023c 	.word	0x0003023c

000d4aa4 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d4aa4:	b508      	push	{r3, lr}
   d4aa6:	4b02      	ldr	r3, [pc, #8]	; (d4ab0 <hal_usart_read+0xc>)
   d4aa8:	681b      	ldr	r3, [r3, #0]
   d4aaa:	695b      	ldr	r3, [r3, #20]
   d4aac:	9301      	str	r3, [sp, #4]
   d4aae:	bd08      	pop	{r3, pc}
   d4ab0:	0003023c 	.word	0x0003023c

000d4ab4 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d4ab4:	b508      	push	{r3, lr}
   d4ab6:	4b02      	ldr	r3, [pc, #8]	; (d4ac0 <hal_usart_peek+0xc>)
   d4ab8:	681b      	ldr	r3, [r3, #0]
   d4aba:	699b      	ldr	r3, [r3, #24]
   d4abc:	9301      	str	r3, [sp, #4]
   d4abe:	bd08      	pop	{r3, pc}
   d4ac0:	0003023c 	.word	0x0003023c

000d4ac4 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d4ac4:	b508      	push	{r3, lr}
   d4ac6:	4b02      	ldr	r3, [pc, #8]	; (d4ad0 <hal_usart_flush+0xc>)
   d4ac8:	681b      	ldr	r3, [r3, #0]
   d4aca:	69db      	ldr	r3, [r3, #28]
   d4acc:	9301      	str	r3, [sp, #4]
   d4ace:	bd08      	pop	{r3, pc}
   d4ad0:	0003023c 	.word	0x0003023c

000d4ad4 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d4ad4:	b508      	push	{r3, lr}
   d4ad6:	4b02      	ldr	r3, [pc, #8]	; (d4ae0 <hal_usart_is_enabled+0xc>)
   d4ad8:	681b      	ldr	r3, [r3, #0]
   d4ada:	6a1b      	ldr	r3, [r3, #32]
   d4adc:	9301      	str	r3, [sp, #4]
   d4ade:	bd08      	pop	{r3, pc}
   d4ae0:	0003023c 	.word	0x0003023c

000d4ae4 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d4ae4:	b508      	push	{r3, lr}
   d4ae6:	4b02      	ldr	r3, [pc, #8]	; (d4af0 <hal_usart_available_data_for_write+0xc>)
   d4ae8:	681b      	ldr	r3, [r3, #0]
   d4aea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4aec:	9301      	str	r3, [sp, #4]
   d4aee:	bd08      	pop	{r3, pc}
   d4af0:	0003023c 	.word	0x0003023c

000d4af4 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   d4af4:	b508      	push	{r3, lr}
   d4af6:	4b02      	ldr	r3, [pc, #8]	; (d4b00 <hal_usart_begin_config+0xc>)
   d4af8:	681b      	ldr	r3, [r3, #0]
   d4afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4afc:	9301      	str	r3, [sp, #4]
   d4afe:	bd08      	pop	{r3, pc}
   d4b00:	0003023c 	.word	0x0003023c

000d4b04 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4b04:	b508      	push	{r3, lr}
   d4b06:	4b02      	ldr	r3, [pc, #8]	; (d4b10 <HAL_USB_USART_Init+0xc>)
   d4b08:	681b      	ldr	r3, [r3, #0]
   d4b0a:	681b      	ldr	r3, [r3, #0]
   d4b0c:	9301      	str	r3, [sp, #4]
   d4b0e:	bd08      	pop	{r3, pc}
   d4b10:	0003024c 	.word	0x0003024c

000d4b14 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d4b14:	b508      	push	{r3, lr}
   d4b16:	4b02      	ldr	r3, [pc, #8]	; (d4b20 <HAL_USB_USART_Begin+0xc>)
   d4b18:	681b      	ldr	r3, [r3, #0]
   d4b1a:	685b      	ldr	r3, [r3, #4]
   d4b1c:	9301      	str	r3, [sp, #4]
   d4b1e:	bd08      	pop	{r3, pc}
   d4b20:	0003024c 	.word	0x0003024c

000d4b24 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   d4b24:	b508      	push	{r3, lr}
   d4b26:	4b02      	ldr	r3, [pc, #8]	; (d4b30 <HAL_USB_USART_End+0xc>)
   d4b28:	681b      	ldr	r3, [r3, #0]
   d4b2a:	689b      	ldr	r3, [r3, #8]
   d4b2c:	9301      	str	r3, [sp, #4]
   d4b2e:	bd08      	pop	{r3, pc}
   d4b30:	0003024c 	.word	0x0003024c

000d4b34 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d4b34:	b508      	push	{r3, lr}
   d4b36:	4b02      	ldr	r3, [pc, #8]	; (d4b40 <HAL_USB_USART_Available_Data+0xc>)
   d4b38:	681b      	ldr	r3, [r3, #0]
   d4b3a:	691b      	ldr	r3, [r3, #16]
   d4b3c:	9301      	str	r3, [sp, #4]
   d4b3e:	bd08      	pop	{r3, pc}
   d4b40:	0003024c 	.word	0x0003024c

000d4b44 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4b44:	b508      	push	{r3, lr}
   d4b46:	4b02      	ldr	r3, [pc, #8]	; (d4b50 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d4b48:	681b      	ldr	r3, [r3, #0]
   d4b4a:	695b      	ldr	r3, [r3, #20]
   d4b4c:	9301      	str	r3, [sp, #4]
   d4b4e:	bd08      	pop	{r3, pc}
   d4b50:	0003024c 	.word	0x0003024c

000d4b54 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4b54:	b508      	push	{r3, lr}
   d4b56:	4b02      	ldr	r3, [pc, #8]	; (d4b60 <HAL_USB_USART_Receive_Data+0xc>)
   d4b58:	681b      	ldr	r3, [r3, #0]
   d4b5a:	699b      	ldr	r3, [r3, #24]
   d4b5c:	9301      	str	r3, [sp, #4]
   d4b5e:	bd08      	pop	{r3, pc}
   d4b60:	0003024c 	.word	0x0003024c

000d4b64 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4b64:	b508      	push	{r3, lr}
   d4b66:	4b02      	ldr	r3, [pc, #8]	; (d4b70 <HAL_USB_USART_Send_Data+0xc>)
   d4b68:	681b      	ldr	r3, [r3, #0]
   d4b6a:	69db      	ldr	r3, [r3, #28]
   d4b6c:	9301      	str	r3, [sp, #4]
   d4b6e:	bd08      	pop	{r3, pc}
   d4b70:	0003024c 	.word	0x0003024c

000d4b74 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4b74:	b508      	push	{r3, lr}
   d4b76:	4b02      	ldr	r3, [pc, #8]	; (d4b80 <HAL_USB_USART_Flush_Data+0xc>)
   d4b78:	681b      	ldr	r3, [r3, #0]
   d4b7a:	6a1b      	ldr	r3, [r3, #32]
   d4b7c:	9301      	str	r3, [sp, #4]
   d4b7e:	bd08      	pop	{r3, pc}
   d4b80:	0003024c 	.word	0x0003024c

000d4b84 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d4b84:	b508      	push	{r3, lr}
   d4b86:	4b02      	ldr	r3, [pc, #8]	; (d4b90 <panic_+0xc>)
   d4b88:	681b      	ldr	r3, [r3, #0]
   d4b8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4b8c:	9301      	str	r3, [sp, #4]
   d4b8e:	bd08      	pop	{r3, pc}
   d4b90:	00030260 	.word	0x00030260

000d4b94 <log_message_v>:
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   d4b94:	b508      	push	{r3, lr}
   d4b96:	4b02      	ldr	r3, [pc, #8]	; (d4ba0 <log_message_v+0xc>)
   d4b98:	681b      	ldr	r3, [r3, #0]
   d4b9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d4b9c:	9301      	str	r3, [sp, #4]
   d4b9e:	bd08      	pop	{r3, pc}
   d4ba0:	00030260 	.word	0x00030260

000d4ba4 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   d4ba4:	b508      	push	{r3, lr}
   d4ba6:	4b02      	ldr	r3, [pc, #8]	; (d4bb0 <log_level_name+0xc>)
   d4ba8:	681b      	ldr	r3, [r3, #0]
   d4baa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d4bac:	9301      	str	r3, [sp, #4]
   d4bae:	bd08      	pop	{r3, pc}
   d4bb0:	00030260 	.word	0x00030260

000d4bb4 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   d4bb4:	b508      	push	{r3, lr}
   d4bb6:	4b02      	ldr	r3, [pc, #8]	; (d4bc0 <log_set_callbacks+0xc>)
   d4bb8:	681b      	ldr	r3, [r3, #0]
   d4bba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   d4bbc:	9301      	str	r3, [sp, #4]
   d4bbe:	bd08      	pop	{r3, pc}
   d4bc0:	00030260 	.word	0x00030260

000d4bc4 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4bc4:	b508      	push	{r3, lr}
   d4bc6:	4b02      	ldr	r3, [pc, #8]	; (d4bd0 <set_system_mode+0xc>)
   d4bc8:	681b      	ldr	r3, [r3, #0]
   d4bca:	685b      	ldr	r3, [r3, #4]
   d4bcc:	9301      	str	r3, [sp, #4]
   d4bce:	bd08      	pop	{r3, pc}
   d4bd0:	00030220 	.word	0x00030220

000d4bd4 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d4bd4:	b508      	push	{r3, lr}
   d4bd6:	4b02      	ldr	r3, [pc, #8]	; (d4be0 <system_thread_set_state+0xc>)
   d4bd8:	681b      	ldr	r3, [r3, #0]
   d4bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4bdc:	9301      	str	r3, [sp, #4]
   d4bde:	bd08      	pop	{r3, pc}
   d4be0:	00030220 	.word	0x00030220

000d4be4 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d4be4:	b508      	push	{r3, lr}
   d4be6:	4b02      	ldr	r3, [pc, #8]	; (d4bf0 <application_thread_current+0xc>)
   d4be8:	681b      	ldr	r3, [r3, #0]
   d4bea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d4bec:	9301      	str	r3, [sp, #4]
   d4bee:	bd08      	pop	{r3, pc}
   d4bf0:	00030220 	.word	0x00030220

000d4bf4 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d4bf4:	b508      	push	{r3, lr}
   d4bf6:	4b02      	ldr	r3, [pc, #8]	; (d4c00 <application_thread_invoke+0xc>)
   d4bf8:	681b      	ldr	r3, [r3, #0]
   d4bfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d4bfc:	9301      	str	r3, [sp, #4]
   d4bfe:	bd08      	pop	{r3, pc}
   d4c00:	00030220 	.word	0x00030220

000d4c04 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4c04:	b508      	push	{r3, lr}
   d4c06:	4b03      	ldr	r3, [pc, #12]	; (d4c14 <system_ctrl_set_app_request_handler+0x10>)
   d4c08:	681b      	ldr	r3, [r3, #0]
   d4c0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d4c0e:	9301      	str	r3, [sp, #4]
   d4c10:	bd08      	pop	{r3, pc}
   d4c12:	0000      	.short	0x0000
   d4c14:	00030220 	.word	0x00030220

000d4c18 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d4c18:	b508      	push	{r3, lr}
   d4c1a:	4b03      	ldr	r3, [pc, #12]	; (d4c28 <system_ctrl_set_result+0x10>)
   d4c1c:	681b      	ldr	r3, [r3, #0]
   d4c1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d4c22:	9301      	str	r3, [sp, #4]
   d4c24:	bd08      	pop	{r3, pc}
   d4c26:	0000      	.short	0x0000
   d4c28:	00030220 	.word	0x00030220

000d4c2c <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d4c2c:	b508      	push	{r3, lr}
   d4c2e:	4b02      	ldr	r3, [pc, #8]	; (d4c38 <spark_process+0xc>)
   d4c30:	681b      	ldr	r3, [r3, #0]
   d4c32:	689b      	ldr	r3, [r3, #8]
   d4c34:	9301      	str	r3, [sp, #4]
   d4c36:	bd08      	pop	{r3, pc}
   d4c38:	00030244 	.word	0x00030244

000d4c3c <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   d4c3c:	b508      	push	{r3, lr}
   d4c3e:	4b02      	ldr	r3, [pc, #8]	; (d4c48 <spark_cloud_flag_connect+0xc>)
   d4c40:	681b      	ldr	r3, [r3, #0]
   d4c42:	68db      	ldr	r3, [r3, #12]
   d4c44:	9301      	str	r3, [sp, #4]
   d4c46:	bd08      	pop	{r3, pc}
   d4c48:	00030244 	.word	0x00030244

000d4c4c <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d4c4c:	b508      	push	{r3, lr}
   d4c4e:	4b02      	ldr	r3, [pc, #8]	; (d4c58 <spark_cloud_flag_connected+0xc>)
   d4c50:	681b      	ldr	r3, [r3, #0]
   d4c52:	695b      	ldr	r3, [r3, #20]
   d4c54:	9301      	str	r3, [sp, #4]
   d4c56:	bd08      	pop	{r3, pc}
   d4c58:	00030244 	.word	0x00030244

000d4c5c <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d4c5c:	b508      	push	{r3, lr}
   d4c5e:	4b02      	ldr	r3, [pc, #8]	; (d4c68 <spark_send_event+0xc>)
   d4c60:	681b      	ldr	r3, [r3, #0]
   d4c62:	6a1b      	ldr	r3, [r3, #32]
   d4c64:	9301      	str	r3, [sp, #4]
   d4c66:	bd08      	pop	{r3, pc}
   d4c68:	00030244 	.word	0x00030244

000d4c6c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d4c6c:	b508      	push	{r3, lr}
   d4c6e:	4b02      	ldr	r3, [pc, #8]	; (d4c78 <spark_set_random_seed_from_cloud_handler+0xc>)
   d4c70:	681b      	ldr	r3, [r3, #0]
   d4c72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4c74:	9301      	str	r3, [sp, #4]
   d4c76:	bd08      	pop	{r3, pc}
   d4c78:	00030244 	.word	0x00030244

000d4c7c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d4c7c:	b508      	push	{r3, lr}
   d4c7e:	4b02      	ldr	r3, [pc, #8]	; (d4c88 <network_connect+0xc>)
   d4c80:	681b      	ldr	r3, [r3, #0]
   d4c82:	685b      	ldr	r3, [r3, #4]
   d4c84:	9301      	str	r3, [sp, #4]
   d4c86:	bd08      	pop	{r3, pc}
   d4c88:	00030240 	.word	0x00030240

000d4c8c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d4c8c:	b508      	push	{r3, lr}
   d4c8e:	4b02      	ldr	r3, [pc, #8]	; (d4c98 <network_connecting+0xc>)
   d4c90:	681b      	ldr	r3, [r3, #0]
   d4c92:	689b      	ldr	r3, [r3, #8]
   d4c94:	9301      	str	r3, [sp, #4]
   d4c96:	bd08      	pop	{r3, pc}
   d4c98:	00030240 	.word	0x00030240

000d4c9c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d4c9c:	b508      	push	{r3, lr}
   d4c9e:	4b02      	ldr	r3, [pc, #8]	; (d4ca8 <network_disconnect+0xc>)
   d4ca0:	681b      	ldr	r3, [r3, #0]
   d4ca2:	68db      	ldr	r3, [r3, #12]
   d4ca4:	9301      	str	r3, [sp, #4]
   d4ca6:	bd08      	pop	{r3, pc}
   d4ca8:	00030240 	.word	0x00030240

000d4cac <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d4cac:	b508      	push	{r3, lr}
   d4cae:	4b02      	ldr	r3, [pc, #8]	; (d4cb8 <network_ready+0xc>)
   d4cb0:	681b      	ldr	r3, [r3, #0]
   d4cb2:	691b      	ldr	r3, [r3, #16]
   d4cb4:	9301      	str	r3, [sp, #4]
   d4cb6:	bd08      	pop	{r3, pc}
   d4cb8:	00030240 	.word	0x00030240

000d4cbc <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d4cbc:	b508      	push	{r3, lr}
   d4cbe:	4b02      	ldr	r3, [pc, #8]	; (d4cc8 <network_on+0xc>)
   d4cc0:	681b      	ldr	r3, [r3, #0]
   d4cc2:	695b      	ldr	r3, [r3, #20]
   d4cc4:	9301      	str	r3, [sp, #4]
   d4cc6:	bd08      	pop	{r3, pc}
   d4cc8:	00030240 	.word	0x00030240

000d4ccc <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d4ccc:	b508      	push	{r3, lr}
   d4cce:	4b02      	ldr	r3, [pc, #8]	; (d4cd8 <network_off+0xc>)
   d4cd0:	681b      	ldr	r3, [r3, #0]
   d4cd2:	699b      	ldr	r3, [r3, #24]
   d4cd4:	9301      	str	r3, [sp, #4]
   d4cd6:	bd08      	pop	{r3, pc}
   d4cd8:	00030240 	.word	0x00030240

000d4cdc <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d4cdc:	b508      	push	{r3, lr}
   d4cde:	4b02      	ldr	r3, [pc, #8]	; (d4ce8 <network_listen+0xc>)
   d4ce0:	681b      	ldr	r3, [r3, #0]
   d4ce2:	69db      	ldr	r3, [r3, #28]
   d4ce4:	9301      	str	r3, [sp, #4]
   d4ce6:	bd08      	pop	{r3, pc}
   d4ce8:	00030240 	.word	0x00030240

000d4cec <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d4cec:	b508      	push	{r3, lr}
   d4cee:	4b02      	ldr	r3, [pc, #8]	; (d4cf8 <network_listening+0xc>)
   d4cf0:	681b      	ldr	r3, [r3, #0]
   d4cf2:	6a1b      	ldr	r3, [r3, #32]
   d4cf4:	9301      	str	r3, [sp, #4]
   d4cf6:	bd08      	pop	{r3, pc}
   d4cf8:	00030240 	.word	0x00030240

000d4cfc <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d4cfc:	b508      	push	{r3, lr}
   d4cfe:	4b02      	ldr	r3, [pc, #8]	; (d4d08 <network_set_listen_timeout+0xc>)
   d4d00:	681b      	ldr	r3, [r3, #0]
   d4d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4d04:	9301      	str	r3, [sp, #4]
   d4d06:	bd08      	pop	{r3, pc}
   d4d08:	00030240 	.word	0x00030240

000d4d0c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d4d0c:	b508      	push	{r3, lr}
   d4d0e:	4b02      	ldr	r3, [pc, #8]	; (d4d18 <network_get_listen_timeout+0xc>)
   d4d10:	681b      	ldr	r3, [r3, #0]
   d4d12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4d14:	9301      	str	r3, [sp, #4]
   d4d16:	bd08      	pop	{r3, pc}
   d4d18:	00030240 	.word	0x00030240

000d4d1c <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   d4d1c:	b508      	push	{r3, lr}
   d4d1e:	4b02      	ldr	r3, [pc, #8]	; (d4d28 <network_is_on+0xc>)
   d4d20:	681b      	ldr	r3, [r3, #0]
   d4d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4d24:	9301      	str	r3, [sp, #4]
   d4d26:	bd08      	pop	{r3, pc}
   d4d28:	00030240 	.word	0x00030240

000d4d2c <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   d4d2c:	b508      	push	{r3, lr}
   d4d2e:	4b02      	ldr	r3, [pc, #8]	; (d4d38 <network_is_off+0xc>)
   d4d30:	681b      	ldr	r3, [r3, #0]
   d4d32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4d34:	9301      	str	r3, [sp, #4]
   d4d36:	bd08      	pop	{r3, pc}
   d4d38:	00030240 	.word	0x00030240

000d4d3c <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d4d3c:	b508      	push	{r3, lr}
   d4d3e:	4b02      	ldr	r3, [pc, #8]	; (d4d48 <malloc+0xc>)
   d4d40:	681b      	ldr	r3, [r3, #0]
   d4d42:	681b      	ldr	r3, [r3, #0]
   d4d44:	9301      	str	r3, [sp, #4]
   d4d46:	bd08      	pop	{r3, pc}
   d4d48:	0003021c 	.word	0x0003021c

000d4d4c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d4d4c:	b508      	push	{r3, lr}
   d4d4e:	4b02      	ldr	r3, [pc, #8]	; (d4d58 <free+0xc>)
   d4d50:	681b      	ldr	r3, [r3, #0]
   d4d52:	685b      	ldr	r3, [r3, #4]
   d4d54:	9301      	str	r3, [sp, #4]
   d4d56:	bd08      	pop	{r3, pc}
   d4d58:	0003021c 	.word	0x0003021c

000d4d5c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d4d5c:	b508      	push	{r3, lr}
   d4d5e:	4b02      	ldr	r3, [pc, #8]	; (d4d68 <realloc+0xc>)
   d4d60:	681b      	ldr	r3, [r3, #0]
   d4d62:	689b      	ldr	r3, [r3, #8]
   d4d64:	9301      	str	r3, [sp, #4]
   d4d66:	bd08      	pop	{r3, pc}
   d4d68:	0003021c 	.word	0x0003021c

000d4d6c <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d4d6c:	b508      	push	{r3, lr}
   d4d6e:	4b02      	ldr	r3, [pc, #8]	; (d4d78 <vsnprintf+0xc>)
   d4d70:	681b      	ldr	r3, [r3, #0]
   d4d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4d74:	9301      	str	r3, [sp, #4]
   d4d76:	bd08      	pop	{r3, pc}
   d4d78:	0003021c 	.word	0x0003021c

000d4d7c <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d4d7c:	b508      	push	{r3, lr}
   d4d7e:	4b02      	ldr	r3, [pc, #8]	; (d4d88 <abort+0xc>)
   d4d80:	681b      	ldr	r3, [r3, #0]
   d4d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4d84:	9301      	str	r3, [sp, #4]
   d4d86:	bd08      	pop	{r3, pc}
   d4d88:	0003021c 	.word	0x0003021c

000d4d8c <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d4d8c:	b508      	push	{r3, lr}
   d4d8e:	4b02      	ldr	r3, [pc, #8]	; (d4d98 <_malloc_r+0xc>)
   d4d90:	681b      	ldr	r3, [r3, #0]
   d4d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4d94:	9301      	str	r3, [sp, #4]
   d4d96:	bd08      	pop	{r3, pc}
   d4d98:	0003021c 	.word	0x0003021c

000d4d9c <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d4d9c:	b508      	push	{r3, lr}
   d4d9e:	4b02      	ldr	r3, [pc, #8]	; (d4da8 <newlib_impure_ptr_callback+0xc>)
   d4da0:	681b      	ldr	r3, [r3, #0]
   d4da2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4da4:	9301      	str	r3, [sp, #4]
   d4da6:	bd08      	pop	{r3, pc}
   d4da8:	0003021c 	.word	0x0003021c

000d4dac <_Z3mapiiiii>:
    hal_adc_set_sample_time(ADC_SampleTime);
}

int map(int value, int fromStart, int fromEnd, int toStart, int toEnd)
{
    if (fromEnd == fromStart) {
   d4dac:	428a      	cmp	r2, r1
{
   d4dae:	b510      	push	{r4, lr}
    if (fromEnd == fromStart) {
   d4db0:	d007      	beq.n	d4dc2 <_Z3mapiiiii+0x16>
        return value;
    }
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
   d4db2:	9c02      	ldr	r4, [sp, #8]
   d4db4:	1a40      	subs	r0, r0, r1
   d4db6:	1ae4      	subs	r4, r4, r3
   d4db8:	4360      	muls	r0, r4
   d4dba:	1a52      	subs	r2, r2, r1
   d4dbc:	fb90 f0f2 	sdiv	r0, r0, r2
   d4dc0:	4418      	add	r0, r3
}
   d4dc2:	bd10      	pop	{r4, pc}

000d4dc4 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d4dc4:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4dc6:	6883      	ldr	r3, [r0, #8]
   d4dc8:	4604      	mov	r4, r0
   d4dca:	b90b      	cbnz	r3, d4dd0 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d4dcc:	f002 fb03 	bl	d73d6 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4dd0:	68c3      	ldr	r3, [r0, #12]
   d4dd2:	4798      	blx	r3
      if (_M_manager)
   d4dd4:	68a3      	ldr	r3, [r4, #8]
   d4dd6:	b11b      	cbz	r3, d4de0 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4dd8:	2203      	movs	r2, #3
   d4dda:	4621      	mov	r1, r4
   d4ddc:	4620      	mov	r0, r4
   d4dde:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d4de0:	4620      	mov	r0, r4
   d4de2:	2110      	movs	r1, #16
}
   d4de4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   d4de8:	f002 baef 	b.w	d73ca <_ZdlPvj>

000d4dec <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d4dec:	b510      	push	{r4, lr}
          _M_dispose();
   d4dee:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d4df0:	4604      	mov	r4, r0
          _M_dispose();
   d4df2:	689b      	ldr	r3, [r3, #8]
   d4df4:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4df6:	68a3      	ldr	r3, [r4, #8]
   d4df8:	3b01      	subs	r3, #1
   d4dfa:	60a3      	str	r3, [r4, #8]
   d4dfc:	b92b      	cbnz	r3, d4e0a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
   d4dfe:	6823      	ldr	r3, [r4, #0]
   d4e00:	4620      	mov	r0, r4
   d4e02:	68db      	ldr	r3, [r3, #12]
    }
   d4e04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   d4e08:	4718      	bx	r3
    }
   d4e0a:	bd10      	pop	{r4, pc}

000d4e0c <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d4e0c:	b510      	push	{r4, lr}
   d4e0e:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d4e10:	6800      	ldr	r0, [r0, #0]
   d4e12:	b108      	cbz	r0, d4e18 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d4e14:	f7ff fd76 	bl	d4904 <os_mutex_recursive_destroy>
    }
   d4e18:	4620      	mov	r0, r4
   d4e1a:	bd10      	pop	{r4, pc}

000d4e1c <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   d4e1c:	b510      	push	{r4, lr}
      if (_M_manager)
   d4e1e:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d4e20:	4604      	mov	r4, r0
      if (_M_manager)
   d4e22:	b113      	cbz	r3, d4e2a <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4e24:	2203      	movs	r2, #3
   d4e26:	4601      	mov	r1, r0
   d4e28:	4798      	blx	r3
    }
   d4e2a:	4620      	mov	r0, r4
   d4e2c:	bd10      	pop	{r4, pc}

000d4e2e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d4e2e:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d4e30:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   d4e34:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d4e36:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
   d4e3a:	42ae      	cmp	r6, r5
   d4e3c:	d004      	beq.n	d4e48 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   d4e3e:	4628      	mov	r0, r5
   d4e40:	f001 ff04 	bl	d6c4c <_ZN6StringD1Ev>
        for (; p != end; ++p) {
   d4e44:	3510      	adds	r5, #16
   d4e46:	e7f8      	b.n	d4e3a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   d4e48:	6820      	ldr	r0, [r4, #0]
   d4e4a:	f7ff ff7f 	bl	d4d4c <free>
    AllocatorT::free(data_);
}
   d4e4e:	4620      	mov	r0, r4
   d4e50:	bd70      	pop	{r4, r5, r6, pc}

000d4e52 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d4e52:	680b      	ldr	r3, [r1, #0]
   d4e54:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d4e56:	b113      	cbz	r3, d4e5e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   d4e58:	685a      	ldr	r2, [r3, #4]
   d4e5a:	3201      	adds	r2, #1
   d4e5c:	605a      	str	r2, [r3, #4]
	  _M_pi->_M_add_ref_copy();
      }
   d4e5e:	4770      	bx	lr

000d4e60 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   d4e60:	b510      	push	{r4, lr}
   d4e62:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   d4e64:	6800      	ldr	r0, [r0, #0]
   d4e66:	b128      	cbz	r0, d4e74 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
      if (--_M_use_count == 0)
   d4e68:	6843      	ldr	r3, [r0, #4]
   d4e6a:	3b01      	subs	r3, #1
   d4e6c:	6043      	str	r3, [r0, #4]
   d4e6e:	b90b      	cbnz	r3, d4e74 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
   d4e70:	f7ff ffbc 	bl	d4dec <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
      }
   d4e74:	4620      	mov	r0, r4
   d4e76:	bd10      	pop	{r4, pc}

000d4e78 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    inline
#if __cplusplus >= 201103L
    typename enable_if<__and_<__not_<__is_tuple_like<_Tp>>,
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
    swap(_Tp& __a, _Tp& __b)
   d4e78:	b513      	push	{r0, r1, r4, lr}
   d4e7a:	460b      	mov	r3, r1
   d4e7c:	4602      	mov	r2, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4e7e:	e9d0 0100 	ldrd	r0, r1, [r0]
   d4e82:	466c      	mov	r4, sp
   d4e84:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d4e88:	e893 0003 	ldmia.w	r3, {r0, r1}
   d4e8c:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d4e90:	e894 0003 	ldmia.w	r4, {r0, r1}
   d4e94:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d4e98:	b002      	add	sp, #8
   d4e9a:	bd10      	pop	{r4, pc}

000d4e9c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(EnumFlags<BleCharacteristicProperty> properties, const String& desc, const BleOnDataReceivedStdFunction& callback) {
    WiringBleLock lk;
    return addCharacteristic(properties, desc.c_str(), callback);
}

} /* namespace particle */
   d4e9c:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   d4e9e:	4c06      	ldr	r4, [pc, #24]	; (d4eb8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d4ea0:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   d4ea2:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   d4ea4:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   d4ea6:	f7ff fd25 	bl	d48f4 <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   d4eaa:	4620      	mov	r0, r4
   d4eac:	4a03      	ldr	r2, [pc, #12]	; (d4ebc <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d4eae:	4904      	ldr	r1, [pc, #16]	; (d4ec0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   d4eb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   d4eb4:	f002 ba84 	b.w	d73c0 <__aeabi_atexit>
   d4eb8:	2003e6e8 	.word	0x2003e6e8
   d4ebc:	2003e63c 	.word	0x2003e63c
   d4ec0:	000d4e0d 	.word	0x000d4e0d

000d4ec4 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d4ec4:	2200      	movs	r2, #0
   d4ec6:	6840      	ldr	r0, [r0, #4]
   d4ec8:	4611      	mov	r1, r2
   d4eca:	f7ff beef 	b.w	d4cac <network_ready>

000d4ece <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   d4ece:	2200      	movs	r2, #0
   d4ed0:	6840      	ldr	r0, [r0, #4]
   d4ed2:	4611      	mov	r1, r2
   d4ed4:	f7ff bf0a 	b.w	d4cec <network_listening>

000d4ed8 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d4ed8:	2200      	movs	r2, #0
   d4eda:	6840      	ldr	r0, [r0, #4]
   d4edc:	4611      	mov	r1, r2
   d4ede:	f7ff bf15 	b.w	d4d0c <network_get_listen_timeout>

000d4ee2 <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d4ee2:	6840      	ldr	r0, [r0, #4]
   d4ee4:	2200      	movs	r2, #0
   d4ee6:	f7ff bf09 	b.w	d4cfc <network_set_listen_timeout>

000d4eea <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d4eea:	6840      	ldr	r0, [r0, #4]
   d4eec:	2200      	movs	r2, #0
   d4eee:	f081 0101 	eor.w	r1, r1, #1
   d4ef2:	f7ff bef3 	b.w	d4cdc <network_listen>

000d4ef6 <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d4ef6:	2300      	movs	r3, #0
   d4ef8:	6840      	ldr	r0, [r0, #4]
   d4efa:	461a      	mov	r2, r3
   d4efc:	4619      	mov	r1, r3
   d4efe:	f7ff bee5 	b.w	d4ccc <network_off>

000d4f02 <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d4f02:	2300      	movs	r3, #0
   d4f04:	6840      	ldr	r0, [r0, #4]
   d4f06:	461a      	mov	r2, r3
   d4f08:	4619      	mov	r1, r3
   d4f0a:	f7ff bed7 	b.w	d4cbc <network_on>

000d4f0e <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d4f0e:	2200      	movs	r2, #0
   d4f10:	6840      	ldr	r0, [r0, #4]
   d4f12:	4611      	mov	r1, r2
   d4f14:	f7ff beba 	b.w	d4c8c <network_connecting>

000d4f18 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4f18:	6840      	ldr	r0, [r0, #4]
   d4f1a:	2200      	movs	r2, #0
   d4f1c:	2102      	movs	r1, #2
   d4f1e:	f7ff bebd 	b.w	d4c9c <network_disconnect>

000d4f22 <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d4f22:	2300      	movs	r3, #0
   d4f24:	6840      	ldr	r0, [r0, #4]
   d4f26:	461a      	mov	r2, r3
   d4f28:	f7ff bea8 	b.w	d4c7c <network_connect>

000d4f2c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d4f2c:	4b08      	ldr	r3, [pc, #32]	; (d4f50 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d4f2e:	b510      	push	{r4, lr}
   d4f30:	2428      	movs	r4, #40	; 0x28
   d4f32:	4622      	mov	r2, r4
   d4f34:	4618      	mov	r0, r3
   d4f36:	2100      	movs	r1, #0
   d4f38:	f002 fc42 	bl	d77c0 <memset>
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d4f3c:	4b05      	ldr	r3, [pc, #20]	; (d4f54 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   d4f3e:	8004      	strh	r4, [r0, #0]
        cid = -1;
   d4f40:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d4f44:	6042      	str	r2, [r0, #4]
   d4f46:	2204      	movs	r2, #4
   d4f48:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d4f4a:	4a03      	ldr	r2, [pc, #12]	; (d4f58 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d4f4c:	601a      	str	r2, [r3, #0]
   d4f4e:	bd10      	pop	{r4, pc}
   d4f50:	2003e6f4 	.word	0x2003e6f4
   d4f54:	2003e6ec 	.word	0x2003e6ec
   d4f58:	000d7bc4 	.word	0x000d7bc4

000d4f5c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d4f5c:	4770      	bx	lr

000d4f5e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   d4f5e:	2000      	movs	r0, #0
   d4f60:	4770      	bx	lr

000d4f62 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d4f62:	b510      	push	{r4, lr}
   d4f64:	2110      	movs	r1, #16
   d4f66:	4604      	mov	r4, r0
   d4f68:	f002 fa2f 	bl	d73ca <_ZdlPvj>
   d4f6c:	4620      	mov	r0, r4
   d4f6e:	bd10      	pop	{r4, pc}

000d4f70 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   d4f70:	b508      	push	{r3, lr}
      { delete this; }
   d4f72:	f7ff fff6 	bl	d4f62 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d4f76:	bd08      	pop	{r3, pc}

000d4f78 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d4f78:	b530      	push	{r4, r5, lr}
        type_(type) {
   d4f7a:	2200      	movs	r2, #0
   d4f7c:	f64f 749c 	movw	r4, #65436	; 0xff9c
   d4f80:	6002      	str	r2, [r0, #0]
   d4f82:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   d4f84:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d4f86:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   d4f88:	680c      	ldr	r4, [r1, #0]
   d4f8a:	8085      	strh	r5, [r0, #4]
   d4f8c:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d4f8e:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   d4f90:	bd30      	pop	{r4, r5, pc}

000d4f92 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d4f92:	b510      	push	{r4, lr}
   d4f94:	4604      	mov	r4, r0
    free((void*)msg_);
   d4f96:	6800      	ldr	r0, [r0, #0]
   d4f98:	f7ff fed8 	bl	d4d4c <free>
}
   d4f9c:	4620      	mov	r0, r4
   d4f9e:	bd10      	pop	{r4, pc}

000d4fa0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d4fa0:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d4fa2:	68c4      	ldr	r4, [r0, #12]
   d4fa4:	b1f4      	cbz	r4, d4fe4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   d4fa6:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d4fa8:	2b02      	cmp	r3, #2
   d4faa:	d103      	bne.n	d4fb4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d4fac:	f104 000c 	add.w	r0, r4, #12
   d4fb0:	f7ff ffef 	bl	d4f92 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   d4fb4:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   d4fb6:	b135      	cbz	r5, d4fc6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   d4fb8:	4628      	mov	r0, r5
   d4fba:	f7ff ff2f 	bl	d4e1c <_ZNSt14_Function_baseD1Ev>
   d4fbe:	2110      	movs	r1, #16
   d4fc0:	4628      	mov	r0, r5
   d4fc2:	f002 fa02 	bl	d73ca <_ZdlPvj>
   d4fc6:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d4fc8:	b135      	cbz	r5, d4fd8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d4fca:	4628      	mov	r0, r5
   d4fcc:	f7ff ff26 	bl	d4e1c <_ZNSt14_Function_baseD1Ev>
   d4fd0:	2110      	movs	r1, #16
   d4fd2:	4628      	mov	r0, r5
   d4fd4:	f002 f9f9 	bl	d73ca <_ZdlPvj>
   d4fd8:	4620      	mov	r0, r4
   d4fda:	2114      	movs	r1, #20
   d4fdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d4fe0:	f002 b9f3 	b.w	d73ca <_ZdlPvj>
   d4fe4:	bd38      	pop	{r3, r4, r5, pc}

000d4fe6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d4fe6:	b573      	push	{r0, r1, r4, r5, r6, lr}
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r,
		     element_type* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4fe8:	460e      	mov	r6, r1
   d4fea:	4604      	mov	r4, r0
   d4fec:	f856 3b04 	ldr.w	r3, [r6], #4
   d4ff0:	9300      	str	r3, [sp, #0]
   d4ff2:	460d      	mov	r5, r1
   d4ff4:	a801      	add	r0, sp, #4
   d4ff6:	4631      	mov	r1, r6
   d4ff8:	f7ff ff2b 	bl	d4e52 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d4ffc:	9a01      	ldr	r2, [sp, #4]
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d4ffe:	9b00      	ldr	r3, [sp, #0]
	_M_pi = __tmp;
   d5000:	6062      	str	r2, [r4, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d5002:	6023      	str	r3, [r4, #0]
      ~__shared_ptr() = default;
   d5004:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   d5006:	2300      	movs	r3, #0
   d5008:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d500a:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   d500c:	f7ff ff28 	bl	d4e60 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5010:	4630      	mov	r0, r6
   d5012:	f7ff ff25 	bl	d4e60 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   d5016:	4628      	mov	r0, r5
   d5018:	2108      	movs	r1, #8
   d501a:	f002 f9d6 	bl	d73ca <_ZdlPvj>
        return p;
    }
   d501e:	4620      	mov	r0, r4
   d5020:	b002      	add	sp, #8
   d5022:	bd70      	pop	{r4, r5, r6, pc}

000d5024 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   d5024:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d5026:	b510      	push	{r4, lr}
      if (_M_empty())
   d5028:	b90a      	cbnz	r2, d502e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d502a:	f002 f9d4 	bl	d73d6 <_ZSt25__throw_bad_function_callv>
    }
   d502e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5032:	68c3      	ldr	r3, [r0, #12]
   d5034:	4718      	bx	r3

000d5036 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d5036:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d5038:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   d503a:	f100 0110 	add.w	r1, r0, #16
   d503e:	f7ff fff1 	bl	d5024 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   d5042:	bd08      	pop	{r3, pc}

000d5044 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   d5044:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d5046:	b510      	push	{r4, lr}
      if (_M_empty())
   d5048:	b90a      	cbnz	r2, d504e <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d504a:	f002 f9c4 	bl	d73d6 <_ZSt25__throw_bad_function_callv>
    }
   d504e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5052:	68c3      	ldr	r3, [r0, #12]
   d5054:	4718      	bx	r3

000d5056 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d5056:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d5058:	6800      	ldr	r0, [r0, #0]
   d505a:	f100 0110 	add.w	r1, r0, #16
   d505e:	f7ff fff1 	bl	d5044 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   d5062:	bd08      	pop	{r3, pc}

000d5064 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   d5064:	b538      	push	{r3, r4, r5, lr}
   d5066:	2300      	movs	r3, #0
   d5068:	4604      	mov	r4, r0
   d506a:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d506c:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   d506e:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d5070:	f7ff f80f 	bl	d4092 <_Znwj>
   d5074:	b128      	cbz	r0, d5082 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   d5076:	2301      	movs	r3, #1
   d5078:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   d507c:	4b02      	ldr	r3, [pc, #8]	; (d5088 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d507e:	6003      	str	r3, [r0, #0]
   d5080:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d5082:	6020      	str	r0, [r4, #0]
	}
   d5084:	4620      	mov	r0, r4
   d5086:	bd38      	pop	{r3, r4, r5, pc}
   d5088:	000d7c00 	.word	0x000d7c00

000d508c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   d508c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d508e:	2300      	movs	r3, #0
   d5090:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d5092:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d5094:	4604      	mov	r4, r0
   d5096:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d5098:	b12b      	cbz	r3, d50a6 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d509a:	2202      	movs	r2, #2
   d509c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d509e:	68eb      	ldr	r3, [r5, #12]
   d50a0:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d50a2:	68ab      	ldr	r3, [r5, #8]
   d50a4:	60a3      	str	r3, [r4, #8]
    }
   d50a6:	4620      	mov	r0, r4
   d50a8:	bd38      	pop	{r3, r4, r5, pc}
	...

000d50ac <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   d50ac:	b5f0      	push	{r4, r5, r6, r7, lr}
   d50ae:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d50b0:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d50b2:	4668      	mov	r0, sp
   d50b4:	f7ff ff60 	bl	d4f78 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d50b8:	f04f 0302 	mov.w	r3, #2
   d50bc:	e8d4 2f4f 	ldrexb	r2, [r4]
   d50c0:	2a00      	cmp	r2, #0
   d50c2:	d103      	bne.n	d50cc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   d50c4:	e8c4 3f41 	strexb	r1, r3, [r4]
   d50c8:	2900      	cmp	r1, #0
   d50ca:	d1f7      	bne.n	d50bc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   d50cc:	d125      	bne.n	d511a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   d50ce:	f104 050c 	add.w	r5, r4, #12
   d50d2:	4669      	mov	r1, sp
   d50d4:	4628      	mov	r0, r5
   d50d6:	f7ff ff4f 	bl	d4f78 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   d50da:	f3bf 8f5b 	dmb	ish
   d50de:	2301      	movs	r3, #1
   d50e0:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d50e2:	2000      	movs	r0, #0
   d50e4:	f104 0308 	add.w	r3, r4, #8
   d50e8:	f3bf 8f5b 	dmb	ish
   d50ec:	e853 6f00 	ldrex	r6, [r3]
   d50f0:	e843 0200 	strex	r2, r0, [r3]
   d50f4:	2a00      	cmp	r2, #0
   d50f6:	d1f9      	bne.n	d50ec <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   d50f8:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d50fc:	b16e      	cbz	r6, d511a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   d50fe:	f7ff fd71 	bl	d4be4 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d5102:	b178      	cbz	r0, d5124 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d5104:	4629      	mov	r1, r5
   d5106:	4630      	mov	r0, r6
   d5108:	f7ff ff8c 	bl	d5024 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   d510c:	4630      	mov	r0, r6
   d510e:	f7ff fe85 	bl	d4e1c <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d5112:	2110      	movs	r1, #16
   d5114:	4630      	mov	r0, r6
   d5116:	f002 f958 	bl	d73ca <_ZdlPvj>
        p_->setError(std::move(error));
   d511a:	4668      	mov	r0, sp
   d511c:	f7ff ff39 	bl	d4f92 <_ZN8particle5ErrorD1Ev>
    }
   d5120:	b009      	add	sp, #36	; 0x24
   d5122:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  typename __cv_quals<_Bound_args>::type...>;

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d5124:	4631      	mov	r1, r6
   d5126:	a802      	add	r0, sp, #8
   d5128:	f7ff ffb0 	bl	d508c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d512c:	68e0      	ldr	r0, [r4, #12]
   d512e:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d5132:	b108      	cbz	r0, d5138 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   d5134:	f002 fb9a 	bl	d786c <strdup>
        type_(type) {
   d5138:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d513a:	2010      	movs	r0, #16
   d513c:	f8ad 501c 	strh.w	r5, [sp, #28]
   d5140:	f7fe ffa7 	bl	d4092 <_Znwj>
   d5144:	4605      	mov	r5, r0
   d5146:	b1e8      	cbz	r0, d5184 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   d5148:	2700      	movs	r7, #0
   d514a:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d514c:	2018      	movs	r0, #24
   d514e:	f7fe ffa0 	bl	d4092 <_Znwj>
   d5152:	4604      	mov	r4, r0
   d5154:	b188      	cbz	r0, d517a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   d5156:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   d5158:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d515a:	a802      	add	r0, sp, #8
   d515c:	f7ff fe8c 	bl	d4e78 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5160:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d5162:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d5164:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5166:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d5168:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d516a:	a906      	add	r1, sp, #24
   d516c:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d516e:	60e3      	str	r3, [r4, #12]
   d5170:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   d5174:	9205      	str	r2, [sp, #20]
   d5176:	f7ff feff 	bl	d4f78 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   d517a:	4b08      	ldr	r3, [pc, #32]	; (d519c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   d517c:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d517e:	4b08      	ldr	r3, [pc, #32]	; (d51a0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5180:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d5182:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   d5184:	a806      	add	r0, sp, #24
   d5186:	f7ff ff04 	bl	d4f92 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d518a:	a802      	add	r0, sp, #8
   d518c:	f7ff fe46 	bl	d4e1c <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d5190:	2200      	movs	r2, #0
   d5192:	4629      	mov	r1, r5
   d5194:	4803      	ldr	r0, [pc, #12]	; (d51a4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   d5196:	f7ff fd2d 	bl	d4bf4 <application_thread_invoke>
   d519a:	e7b7      	b.n	d510c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   d519c:	000d5037 	.word	0x000d5037
   d51a0:	000d52cd 	.word	0x000d52cd
   d51a4:	000d4dc5 	.word	0x000d4dc5

000d51a8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d51a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d51ac:	b08a      	sub	sp, #40	; 0x28
   d51ae:	4605      	mov	r5, r0
   d51b0:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
   d51b4:	460c      	mov	r4, r1
   d51b6:	4617      	mov	r7, r2
   d51b8:	4698      	mov	r8, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d51ba:	f7ff fd47 	bl	d4c4c <spark_cloud_flag_connected>
   d51be:	ae07      	add	r6, sp, #28
    if (!connected()) {
   d51c0:	4682      	mov	sl, r0
   d51c2:	bb38      	cbnz	r0, d5214 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   d51c4:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d51c8:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d51ca:	a905      	add	r1, sp, #20
   d51cc:	4630      	mov	r0, r6
   d51ce:	f8ad 3018 	strh.w	r3, [sp, #24]
   d51d2:	f7ff fed1 	bl	d4f78 <_ZN8particle5ErrorC1EOS0_>
   d51d6:	2014      	movs	r0, #20
   d51d8:	f7fe ff5b 	bl	d4092 <_Znwj>
   d51dc:	4604      	mov	r4, r0
   d51de:	b148      	cbz	r0, d51f4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d51e0:	2302      	movs	r3, #2
   d51e2:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d51e4:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d51e6:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d51ea:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   d51ec:	4631      	mov	r1, r6
   d51ee:	300c      	adds	r0, #12
   d51f0:	f7ff fec2 	bl	d4f78 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d51f4:	4628      	mov	r0, r5
	: __shared_count(__p)
   d51f6:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d51f8:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   d51fc:	f7ff ff32 	bl	d5064 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d5200:	4630      	mov	r0, r6
   d5202:	f7ff fec6 	bl	d4f92 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d5206:	a805      	add	r0, sp, #20
   d5208:	f7ff fec3 	bl	d4f92 <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   d520c:	4628      	mov	r0, r5
   d520e:	b00a      	add	sp, #40	; 0x28
   d5210:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d5214:	230c      	movs	r3, #12
   d5216:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d521a:	2014      	movs	r0, #20
   d521c:	e9cd aa08 	strd	sl, sl, [sp, #32]
   d5220:	9307      	str	r3, [sp, #28]
   d5222:	f7fe ff36 	bl	d4092 <_Znwj>
   d5226:	4601      	mov	r1, r0
   d5228:	b128      	cbz	r0, d5236 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d522a:	e9c0 aa01 	strd	sl, sl, [r0, #4]
   d522e:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d5232:	f880 a001 	strb.w	sl, [r0, #1]
   d5236:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d5238:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   d523a:	f7ff ff13 	bl	d5064 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   d523e:	4b22      	ldr	r3, [pc, #136]	; (d52c8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
   d5240:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d5242:	2008      	movs	r0, #8
   d5244:	f7fe ff25 	bl	d4092 <_Znwj>
   d5248:	4682      	mov	sl, r0
   d524a:	b128      	cbz	r0, d5258 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d524c:	9b03      	ldr	r3, [sp, #12]
   d524e:	f840 3b04 	str.w	r3, [r0], #4
   d5252:	a904      	add	r1, sp, #16
   d5254:	f7ff fdfd 	bl	d4e52 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d5258:	9600      	str	r6, [sp, #0]
   d525a:	fa5f f389 	uxtb.w	r3, r9
   d525e:	4642      	mov	r2, r8
   d5260:	4639      	mov	r1, r7
   d5262:	4620      	mov	r0, r4
    d.handler_data = p.dataPtr();
   d5264:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d5268:	f7ff fcf8 	bl	d4c5c <spark_send_event>
   d526c:	b9b8      	cbnz	r0, d529e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
   d526e:	9b03      	ldr	r3, [sp, #12]
   d5270:	785b      	ldrb	r3, [r3, #1]
   d5272:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d5276:	b993      	cbnz	r3, d529e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
   d5278:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   d527c:	a905      	add	r1, sp, #20
   d527e:	a803      	add	r0, sp, #12
   d5280:	9205      	str	r2, [sp, #20]
   d5282:	f8ad 3018 	strh.w	r3, [sp, #24]
   d5286:	f7ff ff11 	bl	d50ac <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d528a:	a805      	add	r0, sp, #20
   d528c:	f7ff fe81 	bl	d4f92 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d5290:	a805      	add	r0, sp, #20
   d5292:	9909      	ldr	r1, [sp, #36]	; 0x24
   d5294:	f7ff fea7 	bl	d4fe6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   d5298:	a806      	add	r0, sp, #24
   d529a:	f7ff fde1 	bl	d4e60 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d529e:	9b03      	ldr	r3, [sp, #12]
   d52a0:	9305      	str	r3, [sp, #20]
   d52a2:	a904      	add	r1, sp, #16
   d52a4:	a806      	add	r0, sp, #24
   d52a6:	f7ff fdd4 	bl	d4e52 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   d52aa:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d52ac:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d52ae:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   d52b0:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   d52b2:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   d52b4:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   d52b6:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   d52b8:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   d52ba:	f7ff fdd1 	bl	d4e60 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d52be:	a804      	add	r0, sp, #16
   d52c0:	f7ff fdce 	bl	d4e60 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   d52c4:	e7a2      	b.n	d520c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   d52c6:	bf00      	nop
   d52c8:	000d5391 	.word	0x000d5391

000d52cc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
   d52cc:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d52ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d52d0:	4605      	mov	r5, r0
	  switch (__op)
   d52d2:	d007      	beq.n	d52e4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
   d52d4:	2a03      	cmp	r2, #3
   d52d6:	d018      	beq.n	d530a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
   d52d8:	2a01      	cmp	r2, #1
   d52da:	d101      	bne.n	d52e0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d52dc:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d52de:	6003      	str	r3, [r0, #0]
	}
   d52e0:	2000      	movs	r0, #0
   d52e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d52e4:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   d52e6:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d52e8:	f7fe fed3 	bl	d4092 <_Znwj>
   d52ec:	4604      	mov	r4, r0
   d52ee:	b150      	cbz	r0, d5306 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d52f0:	4631      	mov	r1, r6
   d52f2:	f7ff fecb 	bl	d508c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d52f6:	6930      	ldr	r0, [r6, #16]
   d52f8:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d52fc:	b108      	cbz	r0, d5302 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   d52fe:	f002 fab5 	bl	d786c <strdup>
        type_(type) {
   d5302:	6120      	str	r0, [r4, #16]
   d5304:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   d5306:	602c      	str	r4, [r5, #0]
	}
   d5308:	e7ea      	b.n	d52e0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d530a:	6804      	ldr	r4, [r0, #0]
   d530c:	2c00      	cmp	r4, #0
   d530e:	d0e7      	beq.n	d52e0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
   d5310:	f104 0010 	add.w	r0, r4, #16
   d5314:	f7ff fe3d 	bl	d4f92 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d5318:	4620      	mov	r0, r4
   d531a:	f7ff fd7f 	bl	d4e1c <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d531e:	2118      	movs	r1, #24
   d5320:	4620      	mov	r0, r4
   d5322:	f002 f852 	bl	d73ca <_ZdlPvj>
   d5326:	e7db      	b.n	d52e0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

000d5328 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   d5328:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d532a:	2300      	movs	r3, #0
   d532c:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d532e:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d5330:	4604      	mov	r4, r0
   d5332:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d5334:	b12b      	cbz	r3, d5342 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d5336:	2202      	movs	r2, #2
   d5338:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d533a:	68eb      	ldr	r3, [r5, #12]
   d533c:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d533e:	68ab      	ldr	r3, [r5, #8]
   d5340:	60a3      	str	r3, [r4, #8]
    }
   d5342:	4620      	mov	r0, r4
   d5344:	bd38      	pop	{r3, r4, r5, pc}

000d5346 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
   d5346:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d5348:	b570      	push	{r4, r5, r6, lr}
   d534a:	4604      	mov	r4, r0
	  switch (__op)
   d534c:	d007      	beq.n	d535e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
   d534e:	2a03      	cmp	r2, #3
   d5350:	d012      	beq.n	d5378 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
   d5352:	2a01      	cmp	r2, #1
   d5354:	d101      	bne.n	d535a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d5356:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d5358:	6003      	str	r3, [r0, #0]
	}
   d535a:	2000      	movs	r0, #0
   d535c:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d535e:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   d5360:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d5362:	f7fe fe96 	bl	d4092 <_Znwj>
   d5366:	4605      	mov	r5, r0
   d5368:	b120      	cbz	r0, d5374 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   d536a:	4631      	mov	r1, r6
   d536c:	f7ff ffdc 	bl	d5328 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d5370:	7c33      	ldrb	r3, [r6, #16]
   d5372:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   d5374:	6025      	str	r5, [r4, #0]
	}
   d5376:	e7f0      	b.n	d535a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d5378:	6804      	ldr	r4, [r0, #0]
   d537a:	2c00      	cmp	r4, #0
   d537c:	d0ed      	beq.n	d535a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
   d537e:	4620      	mov	r0, r4
   d5380:	f7ff fd4c 	bl	d4e1c <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d5384:	2114      	movs	r1, #20
   d5386:	4620      	mov	r0, r4
   d5388:	f002 f81f 	bl	d73ca <_ZdlPvj>
   d538c:	e7e5      	b.n	d535a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

000d5390 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d5390:	b5f0      	push	{r4, r5, r6, r7, lr}
   d5392:	b089      	sub	sp, #36	; 0x24
   d5394:	4604      	mov	r4, r0
   d5396:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d5398:	a801      	add	r0, sp, #4
   d539a:	4611      	mov	r1, r2
   d539c:	f7ff fe23 	bl	d4fe6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d53a0:	b1a4      	cbz	r4, d53cc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   d53a2:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d53a4:	b11d      	cbz	r5, d53ae <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   d53a6:	4628      	mov	r0, r5
   d53a8:	f002 fa60 	bl	d786c <strdup>
   d53ac:	4605      	mov	r5, r0
   d53ae:	a801      	add	r0, sp, #4
   d53b0:	a903      	add	r1, sp, #12
        type_(type) {
   d53b2:	9503      	str	r5, [sp, #12]
   d53b4:	f8ad 4010 	strh.w	r4, [sp, #16]
   d53b8:	f7ff fe78 	bl	d50ac <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d53bc:	a803      	add	r0, sp, #12
   d53be:	f7ff fde8 	bl	d4f92 <_ZN8particle5ErrorD1Ev>
   d53c2:	a802      	add	r0, sp, #8
   d53c4:	f7ff fd4c 	bl	d4e60 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d53c8:	b009      	add	sp, #36	; 0x24
   d53ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d53cc:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d53ce:	2301      	movs	r3, #1
   d53d0:	e8d5 2f4f 	ldrexb	r2, [r5]
   d53d4:	2a00      	cmp	r2, #0
   d53d6:	d103      	bne.n	d53e0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   d53d8:	e8c5 3f41 	strexb	r1, r3, [r5]
   d53dc:	2900      	cmp	r1, #0
   d53de:	d1f7      	bne.n	d53d0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   d53e0:	d1ef      	bne.n	d53c2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   d53e2:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   d53e4:	f3bf 8f5b 	dmb	ish
   d53e8:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d53ea:	1d2b      	adds	r3, r5, #4
   d53ec:	f3bf 8f5b 	dmb	ish
   d53f0:	e853 6f00 	ldrex	r6, [r3]
   d53f4:	e843 4200 	strex	r2, r4, [r3]
   d53f8:	2a00      	cmp	r2, #0
   d53fa:	d1f9      	bne.n	d53f0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   d53fc:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d5400:	2e00      	cmp	r6, #0
   d5402:	d0de      	beq.n	d53c2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   d5404:	4620      	mov	r0, r4
   d5406:	f7ff fbed 	bl	d4be4 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d540a:	4607      	mov	r7, r0
   d540c:	b160      	cbz	r0, d5428 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d540e:	f105 010c 	add.w	r1, r5, #12
   d5412:	4630      	mov	r0, r6
   d5414:	f7ff fe16 	bl	d5044 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   d5418:	4630      	mov	r0, r6
   d541a:	f7ff fcff 	bl	d4e1c <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d541e:	2110      	movs	r1, #16
   d5420:	4630      	mov	r0, r6
   d5422:	f001 ffd2 	bl	d73ca <_ZdlPvj>
   d5426:	e7cc      	b.n	d53c2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d5428:	4631      	mov	r1, r6
   d542a:	a803      	add	r0, sp, #12
   d542c:	f7ff ff7c 	bl	d5328 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d5430:	7b2b      	ldrb	r3, [r5, #12]
   d5432:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d5436:	2010      	movs	r0, #16
   d5438:	f7fe fe2b 	bl	d4092 <_Znwj>
   d543c:	4605      	mov	r5, r0
   d543e:	b1d0      	cbz	r0, d5476 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   d5440:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5442:	2014      	movs	r0, #20
   d5444:	f7fe fe25 	bl	d4092 <_Znwj>
   d5448:	4604      	mov	r4, r0
   d544a:	b178      	cbz	r0, d546c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   d544c:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d544e:	4601      	mov	r1, r0
   d5450:	a803      	add	r0, sp, #12
   d5452:	f7ff fd11 	bl	d4e78 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5456:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d5458:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d545a:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d545c:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   d545e:	9205      	str	r2, [sp, #20]
   d5460:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d5462:	60e3      	str	r3, [r4, #12]
   d5464:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   d5468:	9206      	str	r2, [sp, #24]
   d546a:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   d546c:	4b06      	ldr	r3, [pc, #24]	; (d5488 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   d546e:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d5470:	4b06      	ldr	r3, [pc, #24]	; (d548c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5472:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d5474:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   d5476:	a803      	add	r0, sp, #12
   d5478:	f7ff fcd0 	bl	d4e1c <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d547c:	2200      	movs	r2, #0
   d547e:	4629      	mov	r1, r5
   d5480:	4803      	ldr	r0, [pc, #12]	; (d5490 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   d5482:	f7ff fbb7 	bl	d4bf4 <application_thread_invoke>
   d5486:	e7c7      	b.n	d5418 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   d5488:	000d5057 	.word	0x000d5057
   d548c:	000d5347 	.word	0x000d5347
   d5490:	000d4dc5 	.word	0x000d4dc5

000d5494 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5494:	2200      	movs	r2, #0
   d5496:	6840      	ldr	r0, [r0, #4]
   d5498:	4611      	mov	r1, r2
   d549a:	f7ff bc27 	b.w	d4cec <network_listening>

000d549e <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d549e:	2200      	movs	r2, #0
   d54a0:	6840      	ldr	r0, [r0, #4]
   d54a2:	4611      	mov	r1, r2
   d54a4:	f7ff bc32 	b.w	d4d0c <network_get_listen_timeout>

000d54a8 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d54a8:	6840      	ldr	r0, [r0, #4]
   d54aa:	2200      	movs	r2, #0
   d54ac:	f7ff bc26 	b.w	d4cfc <network_set_listen_timeout>

000d54b0 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d54b0:	6840      	ldr	r0, [r0, #4]
   d54b2:	2200      	movs	r2, #0
   d54b4:	f081 0101 	eor.w	r1, r1, #1
   d54b8:	f7ff bc10 	b.w	d4cdc <network_listen>

000d54bc <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d54bc:	2300      	movs	r3, #0
   d54be:	6840      	ldr	r0, [r0, #4]
   d54c0:	461a      	mov	r2, r3
   d54c2:	4619      	mov	r1, r3
   d54c4:	f7ff bc02 	b.w	d4ccc <network_off>

000d54c8 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d54c8:	2300      	movs	r3, #0
   d54ca:	6840      	ldr	r0, [r0, #4]
   d54cc:	461a      	mov	r2, r3
   d54ce:	4619      	mov	r1, r3
   d54d0:	f7ff bbf4 	b.w	d4cbc <network_on>

000d54d4 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d54d4:	2200      	movs	r2, #0
   d54d6:	6840      	ldr	r0, [r0, #4]
   d54d8:	4611      	mov	r1, r2
   d54da:	f7ff bbe7 	b.w	d4cac <network_ready>

000d54de <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d54de:	2200      	movs	r2, #0
   d54e0:	6840      	ldr	r0, [r0, #4]
   d54e2:	4611      	mov	r1, r2
   d54e4:	f7ff bbd2 	b.w	d4c8c <network_connecting>

000d54e8 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d54e8:	6840      	ldr	r0, [r0, #4]
   d54ea:	2200      	movs	r2, #0
   d54ec:	2102      	movs	r1, #2
   d54ee:	f7ff bbd5 	b.w	d4c9c <network_disconnect>

000d54f2 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d54f2:	2300      	movs	r3, #0
   d54f4:	6840      	ldr	r0, [r0, #4]
   d54f6:	461a      	mov	r2, r3
   d54f8:	f7ff bbc0 	b.w	d4c7c <network_connect>

000d54fc <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   d54fc:	4b02      	ldr	r3, [pc, #8]	; (d5508 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d54fe:	2203      	movs	r2, #3
   d5500:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d5502:	4a02      	ldr	r2, [pc, #8]	; (d550c <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d5504:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d5506:	4770      	bx	lr
   d5508:	2003e71c 	.word	0x2003e71c
   d550c:	000d7c1c 	.word	0x000d7c1c

000d5510 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d5510:	4770      	bx	lr

000d5512 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d5512:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5514:	4606      	mov	r6, r0
   d5516:	4615      	mov	r5, r2
   d5518:	460c      	mov	r4, r1
   d551a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d551c:	42bc      	cmp	r4, r7
   d551e:	d006      	beq.n	d552e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d5520:	6833      	ldr	r3, [r6, #0]
   d5522:	f814 1b01 	ldrb.w	r1, [r4], #1
   d5526:	689b      	ldr	r3, [r3, #8]
   d5528:	4630      	mov	r0, r6
   d552a:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d552c:	e7f6      	b.n	d551c <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d552e:	4628      	mov	r0, r5
   d5530:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5532 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d5532:	7c00      	ldrb	r0, [r0, #16]
   d5534:	2200      	movs	r2, #0
   d5536:	f7ff ba35 	b.w	d49a4 <hal_i2c_write>

000d553a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d553a:	7c00      	ldrb	r0, [r0, #16]
   d553c:	2100      	movs	r1, #0
   d553e:	f7ff ba39 	b.w	d49b4 <hal_i2c_available>

000d5542 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d5542:	7c00      	ldrb	r0, [r0, #16]
   d5544:	2100      	movs	r1, #0
   d5546:	f7ff ba3d 	b.w	d49c4 <hal_i2c_read>

000d554a <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d554a:	7c00      	ldrb	r0, [r0, #16]
   d554c:	2100      	movs	r1, #0
   d554e:	f7ff ba41 	b.w	d49d4 <hal_i2c_peek>

000d5552 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d5552:	7c00      	ldrb	r0, [r0, #16]
   d5554:	2100      	movs	r1, #0
   d5556:	f7ff ba45 	b.w	d49e4 <hal_i2c_flush>

000d555a <_ZN7TwoWireD0Ev>:
   d555a:	b510      	push	{r4, lr}
   d555c:	2114      	movs	r1, #20
   d555e:	4604      	mov	r4, r0
   d5560:	f001 ff33 	bl	d73ca <_ZdlPvj>
   d5564:	4620      	mov	r0, r4
   d5566:	bd10      	pop	{r4, pc}

000d5568 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d5568:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d556a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d556e:	4604      	mov	r4, r0
   d5570:	4608      	mov	r0, r1
   d5572:	2100      	movs	r1, #0
   d5574:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d5578:	4b03      	ldr	r3, [pc, #12]	; (d5588 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d557a:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d557c:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d557e:	4611      	mov	r1, r2
   d5580:	f7ff fa40 	bl	d4a04 <hal_i2c_init>
}
   d5584:	4620      	mov	r0, r4
   d5586:	bd10      	pop	{r4, pc}
   d5588:	000d7c58 	.word	0x000d7c58

000d558c <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d558c:	4770      	bx	lr

000d558e <_ZN9IPAddressD0Ev>:
   d558e:	b510      	push	{r4, lr}
   d5590:	2118      	movs	r1, #24
   d5592:	4604      	mov	r4, r0
   d5594:	f001 ff19 	bl	d73ca <_ZdlPvj>
   d5598:	4620      	mov	r0, r4
   d559a:	bd10      	pop	{r4, pc}

000d559c <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d559c:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d559e:	7d03      	ldrb	r3, [r0, #20]
   d55a0:	2b06      	cmp	r3, #6
{
   d55a2:	b08d      	sub	sp, #52	; 0x34
   d55a4:	460e      	mov	r6, r1
   d55a6:	f100 0704 	add.w	r7, r0, #4
   d55aa:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d55ae:	d012      	beq.n	d55d6 <_ZNK9IPAddress7printToER5Print+0x3a>
   d55b0:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d55b4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d55b8:	220a      	movs	r2, #10
   d55ba:	4630      	mov	r0, r6
   d55bc:	f001 fad9 	bl	d6b72 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d55c0:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d55c2:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d55c4:	d019      	beq.n	d55fa <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d55c6:	2c00      	cmp	r4, #0
   d55c8:	d0f4      	beq.n	d55b4 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d55ca:	212e      	movs	r1, #46	; 0x2e
   d55cc:	4630      	mov	r0, r6
   d55ce:	f001 fac1 	bl	d6b54 <_ZN5Print5printEc>
   d55d2:	4404      	add	r4, r0
   d55d4:	e7ee      	b.n	d55b4 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d55d6:	232f      	movs	r3, #47	; 0x2f
   d55d8:	466a      	mov	r2, sp
   d55da:	4639      	mov	r1, r7
   d55dc:	200a      	movs	r0, #10
		buf[0] = 0;
   d55de:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d55e2:	f7ff fa17 	bl	d4a14 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d55e6:	4668      	mov	r0, sp
   d55e8:	f002 f95d 	bl	d78a6 <strlen>
   d55ec:	6833      	ldr	r3, [r6, #0]
   d55ee:	4602      	mov	r2, r0
   d55f0:	68db      	ldr	r3, [r3, #12]
   d55f2:	4669      	mov	r1, sp
   d55f4:	4630      	mov	r0, r6
   d55f6:	4798      	blx	r3
   d55f8:	4604      	mov	r4, r0
    }
    return n;
}
   d55fa:	4620      	mov	r0, r4
   d55fc:	b00d      	add	sp, #52	; 0x34
   d55fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5600 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d5600:	b510      	push	{r4, lr}
   d5602:	4b05      	ldr	r3, [pc, #20]	; (d5618 <_ZN9IPAddressC1Ev+0x18>)
   d5604:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d5606:	2211      	movs	r2, #17
   d5608:	f840 3b04 	str.w	r3, [r0], #4
   d560c:	2100      	movs	r1, #0
   d560e:	f002 f8d7 	bl	d77c0 <memset>
}
   d5612:	4620      	mov	r0, r4
   d5614:	bd10      	pop	{r4, pc}
   d5616:	bf00      	nop
   d5618:	000d7c80 	.word	0x000d7c80

000d561c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d561c:	4603      	mov	r3, r0
   d561e:	4a07      	ldr	r2, [pc, #28]	; (d563c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d5620:	b510      	push	{r4, lr}
   d5622:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d5626:	f101 0210 	add.w	r2, r1, #16
   d562a:	f851 4b04 	ldr.w	r4, [r1], #4
   d562e:	f843 4b04 	str.w	r4, [r3], #4
   d5632:	4291      	cmp	r1, r2
   d5634:	d1f9      	bne.n	d562a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d5636:	780a      	ldrb	r2, [r1, #0]
   d5638:	701a      	strb	r2, [r3, #0]
}
   d563a:	bd10      	pop	{r4, pc}
   d563c:	000d7c80 	.word	0x000d7c80

000d5640 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d5640:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d5642:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d5646:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d564a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d564e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d5652:	2304      	movs	r3, #4
   d5654:	6041      	str	r1, [r0, #4]
   d5656:	7503      	strb	r3, [r0, #20]
}
   d5658:	bd10      	pop	{r4, pc}
	...

000d565c <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   d565c:	b513      	push	{r0, r1, r4, lr}
   d565e:	4b05      	ldr	r3, [pc, #20]	; (d5674 <_ZN9IPAddressC1EPKh+0x18>)
   d5660:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   d5662:	78cb      	ldrb	r3, [r1, #3]
   d5664:	9300      	str	r3, [sp, #0]
   d5666:	788b      	ldrb	r3, [r1, #2]
   d5668:	784a      	ldrb	r2, [r1, #1]
   d566a:	7809      	ldrb	r1, [r1, #0]
   d566c:	f7ff ffe8 	bl	d5640 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d5670:	b002      	add	sp, #8
   d5672:	bd10      	pop	{r4, pc}
   d5674:	000d7c80 	.word	0x000d7c80

000d5678 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
   d5678:	f100 0310 	add.w	r3, r0, #16
   d567c:	2201      	movs	r2, #1
    do {
        if (t->type == JSMN_OBJECT) {
   d567e:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   d5682:	2901      	cmp	r1, #1
   d5684:	4618      	mov	r0, r3
   d5686:	d108      	bne.n	d569a <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
   d5688:	f853 1c04 	ldr.w	r1, [r3, #-4]
   d568c:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
   d5690:	3a01      	subs	r2, #1
   d5692:	f103 0310 	add.w	r3, r3, #16
   d5696:	d1f2      	bne.n	d567e <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
   d5698:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
   d569a:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   d569c:	bf04      	itt	eq
   d569e:	f853 1c04 	ldreq.w	r1, [r3, #-4]
   d56a2:	1852      	addeq	r2, r2, r1
   d56a4:	e7f4      	b.n	d5690 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

000d56a6 <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   d56a6:	b40e      	push	{r1, r2, r3}
   d56a8:	b5f0      	push	{r4, r5, r6, r7, lr}
   d56aa:	b088      	sub	sp, #32
   d56ac:	af00      	add	r7, sp, #0
   d56ae:	f107 0534 	add.w	r5, r7, #52	; 0x34
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d56b2:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
   d56b4:	f855 2b04 	ldr.w	r2, [r5], #4
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d56b8:	607a      	str	r2, [r7, #4]
void spark::JSONWriter::printf(const char *fmt, ...) {
   d56ba:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d56bc:	462b      	mov	r3, r5
   d56be:	1878      	adds	r0, r7, r1
    va_start(args, fmt);
   d56c0:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d56c2:	f7ff fb53 	bl	d4d6c <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   d56c6:	280f      	cmp	r0, #15
   d56c8:	687a      	ldr	r2, [r7, #4]
   d56ca:	d91a      	bls.n	d5702 <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
   d56cc:	f100 0308 	add.w	r3, r0, #8
   d56d0:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   d56d4:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
   d56d6:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   d56da:	1c41      	adds	r1, r0, #1
   d56dc:	462b      	mov	r3, r5
   d56de:	4668      	mov	r0, sp
        va_start(args, fmt);
   d56e0:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   d56e2:	f7ff fb43 	bl	d4d6c <vsnprintf>
        if (n > 0) {
   d56e6:	1e02      	subs	r2, r0, #0
   d56e8:	dd04      	ble.n	d56f4 <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
   d56ea:	6823      	ldr	r3, [r4, #0]
   d56ec:	4669      	mov	r1, sp
   d56ee:	689b      	ldr	r3, [r3, #8]
   d56f0:	4620      	mov	r0, r4
   d56f2:	4798      	blx	r3
   d56f4:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
   d56f6:	3720      	adds	r7, #32
   d56f8:	46bd      	mov	sp, r7
   d56fa:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   d56fe:	b003      	add	sp, #12
   d5700:	4770      	bx	lr
    } else if (n > 0) {
   d5702:	2800      	cmp	r0, #0
   d5704:	d0f7      	beq.n	d56f6 <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
   d5706:	6823      	ldr	r3, [r4, #0]
   d5708:	4602      	mov	r2, r0
   d570a:	689b      	ldr	r3, [r3, #8]
   d570c:	f107 0110 	add.w	r1, r7, #16
   d5710:	4620      	mov	r0, r4
   d5712:	4798      	blx	r3
}
   d5714:	e7ef      	b.n	d56f6 <_ZN5spark10JSONWriter6printfEPKcz+0x50>

000d5716 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d5716:	b510      	push	{r4, lr}
          _M_dispose();
   d5718:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d571a:	4604      	mov	r4, r0
          _M_dispose();
   d571c:	689b      	ldr	r3, [r3, #8]
   d571e:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d5720:	68a3      	ldr	r3, [r4, #8]
   d5722:	3b01      	subs	r3, #1
   d5724:	60a3      	str	r3, [r4, #8]
   d5726:	b92b      	cbnz	r3, d5734 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
   d5728:	6823      	ldr	r3, [r4, #0]
   d572a:	4620      	mov	r0, r4
   d572c:	68db      	ldr	r3, [r3, #12]
    }
   d572e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   d5732:	4718      	bx	r3
    }
   d5734:	bd10      	pop	{r4, pc}

000d5736 <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   d5736:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   d5738:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
   d573a:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   d573e:	689b      	ldr	r3, [r3, #8]
   d5740:	2201      	movs	r2, #1
   d5742:	f10d 0107 	add.w	r1, sp, #7
   d5746:	4798      	blx	r3
}
   d5748:	b003      	add	sp, #12
   d574a:	f85d fb04 	ldr.w	pc, [sp], #4

000d574e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>:
    class __shared_ptr
   d574e:	b538      	push	{r3, r4, r5, lr}
   d5750:	680b      	ldr	r3, [r1, #0]
   d5752:	6003      	str	r3, [r0, #0]
   d5754:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
   d5756:	6843      	ldr	r3, [r0, #4]
   d5758:	429d      	cmp	r5, r3
    class __shared_ptr
   d575a:	4604      	mov	r4, r0
	if (__tmp != _M_pi)
   d575c:	d00c      	beq.n	d5778 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x2a>
	    if (__tmp != 0)
   d575e:	b115      	cbz	r5, d5766 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x18>
    { ++_M_use_count; }
   d5760:	686b      	ldr	r3, [r5, #4]
   d5762:	3301      	adds	r3, #1
   d5764:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   d5766:	6860      	ldr	r0, [r4, #4]
   d5768:	b128      	cbz	r0, d5776 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x28>
      if (--_M_use_count == 0)
   d576a:	6843      	ldr	r3, [r0, #4]
   d576c:	3b01      	subs	r3, #1
   d576e:	6043      	str	r3, [r0, #4]
   d5770:	b90b      	cbnz	r3, d5776 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x28>
   d5772:	f7ff ffd0 	bl	d5716 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
	    _M_pi = __tmp;
   d5776:	6065      	str	r5, [r4, #4]
    class __shared_ptr
   d5778:	4620      	mov	r0, r4
   d577a:	bd38      	pop	{r3, r4, r5, pc}

000d577c <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   d577c:	460b      	mov	r3, r1
   d577e:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
   d5780:	2200      	movs	r2, #0
   d5782:	b510      	push	{r4, lr}
      constexpr __shared_count() noexcept : _M_pi(0)
   d5784:	e9c0 2200 	strd	r2, r2, [r0]
   d5788:	4604      	mov	r4, r0
        t_ = t;
   d578a:	6083      	str	r3, [r0, #8]
    if (t) {
   d578c:	b90b      	cbnz	r3, d5792 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
   d578e:	4620      	mov	r0, r4
   d5790:	bd10      	pop	{r4, pc}
   *
   *  The object pointed to is deleted when the last shared_ptr pointing to
   *  it is destroyed or reset.
  */
  template<typename _Tp>
    class shared_ptr : public __shared_ptr<_Tp>
   d5792:	f7ff ffdc 	bl	d574e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
   d5796:	e7fa      	b.n	d578e <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

000d5798 <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
   d5798:	6883      	ldr	r3, [r0, #8]
   d579a:	b1eb      	cbz	r3, d57d8 <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
   d579c:	781a      	ldrb	r2, [r3, #0]
   d579e:	2a03      	cmp	r2, #3
   d57a0:	d81a      	bhi.n	d57d8 <_ZNK5spark9JSONValue4typeEv+0x40>
   d57a2:	e8df f002 	tbb	[pc, r2]
   d57a6:	1704      	.short	0x1704
   d57a8:	1b02      	.short	0x1b02
   d57aa:	2005      	movs	r0, #5
   d57ac:	4770      	bx	lr
        const char c = d_->json[t_->start];
   d57ae:	6802      	ldr	r2, [r0, #0]
   d57b0:	685b      	ldr	r3, [r3, #4]
   d57b2:	6852      	ldr	r2, [r2, #4]
   d57b4:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   d57b6:	282d      	cmp	r0, #45	; 0x2d
   d57b8:	d012      	beq.n	d57e0 <_ZNK5spark9JSONValue4typeEv+0x48>
   d57ba:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d57be:	2b09      	cmp	r3, #9
   d57c0:	d90e      	bls.n	d57e0 <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   d57c2:	2874      	cmp	r0, #116	; 0x74
   d57c4:	d00e      	beq.n	d57e4 <_ZNK5spark9JSONValue4typeEv+0x4c>
   d57c6:	2866      	cmp	r0, #102	; 0x66
   d57c8:	d00c      	beq.n	d57e4 <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
   d57ca:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   d57ce:	4258      	negs	r0, r3
   d57d0:	4158      	adcs	r0, r3
   d57d2:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
   d57d4:	2006      	movs	r0, #6
   d57d6:	4770      	bx	lr
        return JSON_TYPE_INVALID;
   d57d8:	2000      	movs	r0, #0
   d57da:	4770      	bx	lr
        return JSON_TYPE_STRING;
   d57dc:	2004      	movs	r0, #4
   d57de:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
   d57e0:	2003      	movs	r0, #3
   d57e2:	4770      	bx	lr
            return JSON_TYPE_BOOL;
   d57e4:	2002      	movs	r0, #2
}
   d57e6:	4770      	bx	lr

000d57e8 <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
   d57e8:	b510      	push	{r4, lr}
   d57ea:	4604      	mov	r4, r0
    switch (type()) {
   d57ec:	f7ff ffd4 	bl	d5798 <_ZNK5spark9JSONValue4typeEv>
   d57f0:	2802      	cmp	r0, #2
   d57f2:	d00e      	beq.n	d5812 <_ZNK5spark9JSONValue5toIntEv+0x2a>
   d57f4:	1ec3      	subs	r3, r0, #3
   d57f6:	b2db      	uxtb	r3, r3
   d57f8:	2b01      	cmp	r3, #1
   d57fa:	d814      	bhi.n	d5826 <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
   d57fc:	6822      	ldr	r2, [r4, #0]
   d57fe:	68a3      	ldr	r3, [r4, #8]
   d5800:	6850      	ldr	r0, [r2, #4]
   d5802:	685b      	ldr	r3, [r3, #4]
}
   d5804:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
   d5808:	220a      	movs	r2, #10
   d580a:	2100      	movs	r1, #0
   d580c:	4418      	add	r0, r3
   d580e:	f002 b8f3 	b.w	d79f8 <strtol>
        const char* const s = d_->json + t_->start;
   d5812:	6822      	ldr	r2, [r4, #0]
   d5814:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   d5816:	6852      	ldr	r2, [r2, #4]
   d5818:	685b      	ldr	r3, [r3, #4]
   d581a:	5cd0      	ldrb	r0, [r2, r3]
   d581c:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   d5820:	4258      	negs	r0, r3
   d5822:	4158      	adcs	r0, r3
}
   d5824:	bd10      	pop	{r4, pc}
    switch (type()) {
   d5826:	2000      	movs	r0, #0
   d5828:	e7fc      	b.n	d5824 <_ZNK5spark9JSONValue5toIntEv+0x3c>
	...

000d582c <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   d582c:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   d582e:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   d5830:	e9c0 3300 	strd	r3, r3, [r0]
   d5834:	4604      	mov	r4, r0
        n_(0) {
   d5836:	480e      	ldr	r0, [pc, #56]	; (d5870 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
   d5838:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   d583c:	b1a9      	cbz	r1, d586a <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
   d583e:	780b      	ldrb	r3, [r1, #0]
   d5840:	2b03      	cmp	r3, #3
   d5842:	d006      	beq.n	d5852 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   d5844:	b98b      	cbnz	r3, d586a <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   d5846:	6813      	ldr	r3, [r2, #0]
   d5848:	6858      	ldr	r0, [r3, #4]
   d584a:	684b      	ldr	r3, [r1, #4]
   d584c:	5cc3      	ldrb	r3, [r0, r3]
   d584e:	2b6e      	cmp	r3, #110	; 0x6e
   d5850:	d007      	beq.n	d5862 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
   d5852:	6813      	ldr	r3, [r2, #0]
   d5854:	684d      	ldr	r5, [r1, #4]
   d5856:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
   d5858:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
   d585a:	4428      	add	r0, r5
            n_ = t->end - t->start;
   d585c:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
   d585e:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
   d5860:	60e3      	str	r3, [r4, #12]
   d5862:	4611      	mov	r1, r2
   d5864:	4620      	mov	r0, r4
   d5866:	f7ff ff72 	bl	d574e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
}
   d586a:	4620      	mov	r0, r4
   d586c:	bd38      	pop	{r3, r4, r5, pc}
   d586e:	bf00      	nop
   d5870:	000d7cef 	.word	0x000d7cef

000d5874 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   d5874:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   d5876:	2500      	movs	r5, #0
   d5878:	460b      	mov	r3, r1
      constexpr __shared_count() noexcept : _M_pi(0)
   d587a:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
   d587e:	e9c0 5502 	strd	r5, r5, [r0, #8]
   d5882:	e9c0 5504 	strd	r5, r5, [r0, #16]
   d5886:	4604      	mov	r4, r0
   d5888:	4611      	mov	r1, r2
    if (t && t->type == JSMN_OBJECT) {
   d588a:	b14b      	cbz	r3, d58a0 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
   d588c:	781a      	ldrb	r2, [r3, #0]
   d588e:	2a01      	cmp	r2, #1
   d5890:	d106      	bne.n	d58a0 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
   d5892:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
   d5896:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
   d5898:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
   d589a:	6143      	str	r3, [r0, #20]
   d589c:	f7ff ff57 	bl	d574e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
}
   d58a0:	4620      	mov	r0, r4
   d58a2:	bd38      	pop	{r3, r4, r5, pc}

000d58a4 <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
   d58a4:	b510      	push	{r4, lr}
    if (!n_) {
   d58a6:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
   d58a8:	4604      	mov	r4, r0
    if (!n_) {
   d58aa:	b163      	cbz	r3, d58c6 <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
   d58ac:	6880      	ldr	r0, [r0, #8]
   d58ae:	60e0      	str	r0, [r4, #12]
    --n_;
   d58b0:	3b01      	subs	r3, #1
    ++t_;
   d58b2:	3010      	adds	r0, #16
   d58b4:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   d58b6:	6120      	str	r0, [r4, #16]
    --n_;
   d58b8:	6163      	str	r3, [r4, #20]
    if (n_) {
   d58ba:	b113      	cbz	r3, d58c2 <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
   d58bc:	f7ff fedc 	bl	d5678 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   d58c0:	60a0      	str	r0, [r4, #8]
    return true;
   d58c2:	2001      	movs	r0, #1
   d58c4:	e000      	b.n	d58c8 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
   d58c6:	4618      	mov	r0, r3
}
   d58c8:	bd10      	pop	{r4, pc}

000d58ca <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
   d58ca:	b510      	push	{r4, lr}
    write('}');
   d58cc:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
   d58ce:	4604      	mov	r4, r0
    write('}');
   d58d0:	f7ff ff31 	bl	d5736 <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   d58d4:	2301      	movs	r3, #1
   d58d6:	7123      	strb	r3, [r4, #4]
}
   d58d8:	4620      	mov	r0, r4
   d58da:	bd10      	pop	{r4, pc}

000d58dc <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
   d58dc:	b508      	push	{r3, lr}
    switch (state_) {
   d58de:	7903      	ldrb	r3, [r0, #4]
   d58e0:	2b01      	cmp	r3, #1
   d58e2:	d002      	beq.n	d58ea <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   d58e4:	2b02      	cmp	r3, #2
   d58e6:	d004      	beq.n	d58f2 <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
   d58e8:	bd08      	pop	{r3, pc}
        write(',');
   d58ea:	212c      	movs	r1, #44	; 0x2c
        write(':');
   d58ec:	f7ff ff23 	bl	d5736 <_ZN5spark10JSONWriter5writeEc>
}
   d58f0:	e7fa      	b.n	d58e8 <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
   d58f2:	213a      	movs	r1, #58	; 0x3a
   d58f4:	e7fa      	b.n	d58ec <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

000d58f6 <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
   d58f6:	b510      	push	{r4, lr}
   d58f8:	4604      	mov	r4, r0
    writeSeparator();
   d58fa:	f7ff ffef 	bl	d58dc <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   d58fe:	4620      	mov	r0, r4
   d5900:	217b      	movs	r1, #123	; 0x7b
   d5902:	f7ff ff18 	bl	d5736 <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   d5906:	2300      	movs	r3, #0
   d5908:	7123      	strb	r3, [r4, #4]
}
   d590a:	4620      	mov	r0, r4
   d590c:	bd10      	pop	{r4, pc}
	...

000d5910 <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
   d5910:	b513      	push	{r0, r1, r4, lr}
   d5912:	4604      	mov	r4, r0
   d5914:	9101      	str	r1, [sp, #4]
    writeSeparator();
   d5916:	f7ff ffe1 	bl	d58dc <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   d591a:	6823      	ldr	r3, [r4, #0]
   d591c:	9a01      	ldr	r2, [sp, #4]
   d591e:	68db      	ldr	r3, [r3, #12]
   d5920:	4903      	ldr	r1, [pc, #12]	; (d5930 <_ZN5spark10JSONWriter5valueEi+0x20>)
   d5922:	4620      	mov	r0, r4
   d5924:	4798      	blx	r3
    state_ = NEXT;
   d5926:	2301      	movs	r3, #1
}
   d5928:	4620      	mov	r0, r4
    state_ = NEXT;
   d592a:	7123      	strb	r3, [r4, #4]
}
   d592c:	b002      	add	sp, #8
   d592e:	bd10      	pop	{r4, pc}
   d5930:	000d7b38 	.word	0x000d7b38

000d5934 <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   d5934:	b513      	push	{r0, r1, r4, lr}
   d5936:	4604      	mov	r4, r0
   d5938:	9101      	str	r1, [sp, #4]
    writeSeparator();
   d593a:	f7ff ffcf 	bl	d58dc <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   d593e:	6823      	ldr	r3, [r4, #0]
   d5940:	9a01      	ldr	r2, [sp, #4]
   d5942:	68db      	ldr	r3, [r3, #12]
   d5944:	4903      	ldr	r1, [pc, #12]	; (d5954 <_ZN5spark10JSONWriter5valueEj+0x20>)
   d5946:	4620      	mov	r0, r4
   d5948:	4798      	blx	r3
    state_ = NEXT;
   d594a:	2301      	movs	r3, #1
}
   d594c:	4620      	mov	r0, r4
    state_ = NEXT;
   d594e:	7123      	strb	r3, [r4, #4]
}
   d5950:	b002      	add	sp, #8
   d5952:	bd10      	pop	{r4, pc}
   d5954:	000d7c8c 	.word	0x000d7c8c

000d5958 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   d5958:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d595c:	460d      	mov	r5, r1
   d595e:	4617      	mov	r7, r2
    write('"');
   d5960:	2122      	movs	r1, #34	; 0x22
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   d5962:	f8df 80a0 	ldr.w	r8, [pc, #160]	; d5a04 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xac>
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   d5966:	4604      	mov	r4, r0
    const char* const end = str + size;
   d5968:	442f      	add	r7, r5
    write('"');
   d596a:	f7ff fee4 	bl	d5736 <_ZN5spark10JSONWriter5writeEc>
    const char* const end = str + size;
   d596e:	4629      	mov	r1, r5
    while (s != end) {
   d5970:	42bd      	cmp	r5, r7
   d5972:	462a      	mov	r2, r5
   d5974:	d038      	beq.n	d59e8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x90>
        const char c = *s;
   d5976:	f815 6b01 	ldrb.w	r6, [r5], #1
        if (c == '"' || c == '\\' || (c >= 0 && c <= 0x1f)) {
   d597a:	2e22      	cmp	r6, #34	; 0x22
   d597c:	d003      	beq.n	d5986 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2e>
   d597e:	2e5c      	cmp	r6, #92	; 0x5c
   d5980:	d001      	beq.n	d5986 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2e>
   d5982:	2e1f      	cmp	r6, #31
   d5984:	d8f4      	bhi.n	d5970 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
   d5986:	6823      	ldr	r3, [r4, #0]
   d5988:	1a52      	subs	r2, r2, r1
   d598a:	689b      	ldr	r3, [r3, #8]
   d598c:	4620      	mov	r0, r4
   d598e:	4798      	blx	r3
            write('\\');
   d5990:	215c      	movs	r1, #92	; 0x5c
   d5992:	4620      	mov	r0, r4
   d5994:	f7ff fecf 	bl	d5736 <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   d5998:	2e0d      	cmp	r6, #13
   d599a:	d80a      	bhi.n	d59b2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x5a>
   d599c:	2e07      	cmp	r6, #7
   d599e:	d91c      	bls.n	d59da <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
   d59a0:	f1a6 0308 	sub.w	r3, r6, #8
   d59a4:	2b05      	cmp	r3, #5
   d59a6:	d818      	bhi.n	d59da <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
   d59a8:	e8df f003 	tbb	[pc, r3]
   d59ac:	17110f0d 	.word	0x17110f0d
   d59b0:	1513      	.short	0x1513
   d59b2:	2e22      	cmp	r6, #34	; 0x22
   d59b4:	d001      	beq.n	d59ba <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x62>
   d59b6:	2e5c      	cmp	r6, #92	; 0x5c
   d59b8:	d10f      	bne.n	d59da <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
                write(c);
   d59ba:	4631      	mov	r1, r6
                write('b');
   d59bc:	4620      	mov	r0, r4
   d59be:	f7ff feba 	bl	d5736 <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
   d59c2:	4629      	mov	r1, r5
    while (s != end) {
   d59c4:	e7d4      	b.n	d5970 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
   d59c6:	2162      	movs	r1, #98	; 0x62
   d59c8:	e7f8      	b.n	d59bc <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('t');
   d59ca:	2174      	movs	r1, #116	; 0x74
   d59cc:	e7f6      	b.n	d59bc <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('n');
   d59ce:	216e      	movs	r1, #110	; 0x6e
   d59d0:	e7f4      	b.n	d59bc <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('f');
   d59d2:	2166      	movs	r1, #102	; 0x66
   d59d4:	e7f2      	b.n	d59bc <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('r');
   d59d6:	2172      	movs	r1, #114	; 0x72
   d59d8:	e7f0      	b.n	d59bc <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                printf("u%04x", (unsigned)c);
   d59da:	6823      	ldr	r3, [r4, #0]
   d59dc:	4632      	mov	r2, r6
   d59de:	68db      	ldr	r3, [r3, #12]
   d59e0:	4641      	mov	r1, r8
   d59e2:	4620      	mov	r0, r4
   d59e4:	4798      	blx	r3
                break;
   d59e6:	e7ec      	b.n	d59c2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6a>
        }
        ++s;
    }
    if (s != str) {
   d59e8:	428d      	cmp	r5, r1
   d59ea:	d004      	beq.n	d59f6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9e>
        write(str, s - str); // Write remaining characters
   d59ec:	6823      	ldr	r3, [r4, #0]
   d59ee:	1a6a      	subs	r2, r5, r1
   d59f0:	689b      	ldr	r3, [r3, #8]
   d59f2:	4620      	mov	r0, r4
   d59f4:	4798      	blx	r3
    }
    write('"');
   d59f6:	2122      	movs	r1, #34	; 0x22
   d59f8:	4620      	mov	r0, r4
   d59fa:	f7ff fe9c 	bl	d5736 <_ZN5spark10JSONWriter5writeEc>
}
   d59fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5a02:	bf00      	nop
   d5a04:	000d7c8f 	.word	0x000d7c8f

000d5a08 <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   d5a08:	b513      	push	{r0, r1, r4, lr}
   d5a0a:	4604      	mov	r4, r0
   d5a0c:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   d5a10:	f7ff ff64 	bl	d58dc <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   d5a14:	4620      	mov	r0, r4
   d5a16:	e9dd 2100 	ldrd	r2, r1, [sp]
   d5a1a:	f7ff ff9d 	bl	d5958 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   d5a1e:	2302      	movs	r3, #2
}
   d5a20:	4620      	mov	r0, r4
    state_ = VALUE;
   d5a22:	7123      	strb	r3, [r4, #4]
}
   d5a24:	b002      	add	sp, #8
   d5a26:	bd10      	pop	{r4, pc}

000d5a28 <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   d5a28:	b513      	push	{r0, r1, r4, lr}
   d5a2a:	4604      	mov	r4, r0
   d5a2c:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   d5a30:	f7ff ff54 	bl	d58dc <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   d5a34:	4620      	mov	r0, r4
   d5a36:	e9dd 2100 	ldrd	r2, r1, [sp]
   d5a3a:	f7ff ff8d 	bl	d5958 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   d5a3e:	2301      	movs	r3, #1
}
   d5a40:	4620      	mov	r0, r4
    state_ = NEXT;
   d5a42:	7123      	strb	r3, [r4, #4]
}
   d5a44:	b002      	add	sp, #8
   d5a46:	bd10      	pop	{r4, pc}

000d5a48 <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
   d5a48:	6880      	ldr	r0, [r0, #8]
   d5a4a:	6803      	ldr	r3, [r0, #0]
   d5a4c:	68db      	ldr	r3, [r3, #12]
   d5a4e:	4718      	bx	r3

000d5a50 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
   d5a50:	4770      	bx	lr

000d5a52 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   d5a52:	4608      	mov	r0, r1
   d5a54:	b111      	cbz	r1, d5a5c <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   d5a56:	680b      	ldr	r3, [r1, #0]
   d5a58:	685b      	ldr	r3, [r3, #4]
   d5a5a:	4718      	bx	r3
}
   d5a5c:	4770      	bx	lr

000d5a5e <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   d5a5e:	4770      	bx	lr

000d5a60 <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
   d5a60:	4770      	bx	lr

000d5a62 <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
   d5a62:	4770      	bx	lr

000d5a64 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
    return s;
}
#endif

// Iterates over subcategory names separated by '.' character
const char* nextSubcategoryName(const char* &category, size_t &size) {
   d5a64:	b538      	push	{r3, r4, r5, lr}
   d5a66:	4604      	mov	r4, r0
   d5a68:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   d5a6a:	6800      	ldr	r0, [r0, #0]
   d5a6c:	212e      	movs	r1, #46	; 0x2e
   d5a6e:	f001 fee0 	bl	d7832 <strchrnul>
    size = s - category;
   d5a72:	6823      	ldr	r3, [r4, #0]
   d5a74:	1ac3      	subs	r3, r0, r3
   d5a76:	602b      	str	r3, [r5, #0]
    if (size) {
   d5a78:	b123      	cbz	r3, d5a84 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   d5a7a:	7803      	ldrb	r3, [r0, #0]
   d5a7c:	b103      	cbz	r3, d5a80 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   d5a7e:	3001      	adds	r0, #1
   d5a80:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d5a82:	6020      	str	r0, [r4, #0]
        }
        std::swap(s, category);
        return s;
    }
    return nullptr;
}
   d5a84:	4618      	mov	r0, r3
   d5a86:	bd38      	pop	{r3, r4, r5, pc}

000d5a88 <_ZN5spark16JSONStreamWriterD0Ev>:
   d5a88:	b510      	push	{r4, lr}
   d5a8a:	210c      	movs	r1, #12
   d5a8c:	4604      	mov	r4, r0
   d5a8e:	f001 fc9c 	bl	d73ca <_ZdlPvj>
   d5a92:	4620      	mov	r0, r4
   d5a94:	bd10      	pop	{r4, pc}

000d5a96 <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   d5a96:	b510      	push	{r4, lr}
   d5a98:	2104      	movs	r1, #4
   d5a9a:	4604      	mov	r4, r0
   d5a9c:	f001 fc95 	bl	d73ca <_ZdlPvj>
   d5aa0:	4620      	mov	r0, r4
   d5aa2:	bd10      	pop	{r4, pc}

000d5aa4 <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   d5aa4:	b510      	push	{r4, lr}
   d5aa6:	2104      	movs	r1, #4
   d5aa8:	4604      	mov	r4, r0
   d5aaa:	f001 fc8e 	bl	d73ca <_ZdlPvj>
   d5aae:	4620      	mov	r0, r4
   d5ab0:	bd10      	pop	{r4, pc}

000d5ab2 <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
   d5ab2:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   d5ab4:	f001 fec7 	bl	d7846 <strcmp>
}
   d5ab8:	fab0 f080 	clz	r0, r0
   d5abc:	0940      	lsrs	r0, r0, #5
   d5abe:	bd08      	pop	{r3, pc}

000d5ac0 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != 3
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   d5ac0:	b510      	push	{r4, lr}
   d5ac2:	460c      	mov	r4, r1
#if PLATFORM_ID != 3
    if (stream == &Serial) {
   d5ac4:	f001 fb12 	bl	d70ec <_Z16_fetch_usbserialv>
   d5ac8:	4284      	cmp	r4, r0
   d5aca:	d010      	beq.n	d5aee <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   d5acc:	f001 fa68 	bl	d6fa0 <_Z22__fetch_global_Serial1v>
   d5ad0:	4284      	cmp	r4, r0
   d5ad2:	d105      	bne.n	d5ae0 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x20>
        Serial1.end();
   d5ad4:	f001 fa64 	bl	d6fa0 <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
}
   d5ad8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
   d5adc:	f001 ba5d 	b.w	d6f9a <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   d5ae0:	b12c      	cbz	r4, d5aee <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
   d5ae2:	6823      	ldr	r3, [r4, #0]
   d5ae4:	4620      	mov	r0, r4
   d5ae6:	685b      	ldr	r3, [r3, #4]
}
   d5ae8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d5aec:	4718      	bx	r3
   d5aee:	bd10      	pop	{r4, pc}

000d5af0 <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   d5af0:	b513      	push	{r0, r1, r4, lr}
   d5af2:	4604      	mov	r4, r0
    return value(val, strlen(val));
   d5af4:	4608      	mov	r0, r1
   d5af6:	9101      	str	r1, [sp, #4]
   d5af8:	f001 fed5 	bl	d78a6 <strlen>
   d5afc:	9901      	ldr	r1, [sp, #4]
   d5afe:	4602      	mov	r2, r0
   d5b00:	4620      	mov	r0, r4
}
   d5b02:	b002      	add	sp, #8
   d5b04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
   d5b08:	f7ff bf8e 	b.w	d5a28 <_ZN5spark10JSONWriter5valueEPKcj>

000d5b0c <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
   d5b0c:	b513      	push	{r0, r1, r4, lr}
   d5b0e:	4604      	mov	r4, r0
    write(str, strlen(str));
   d5b10:	4608      	mov	r0, r1
   d5b12:	9101      	str	r1, [sp, #4]
   d5b14:	f001 fec7 	bl	d78a6 <strlen>
   d5b18:	6823      	ldr	r3, [r4, #0]
   d5b1a:	9901      	ldr	r1, [sp, #4]
   d5b1c:	68db      	ldr	r3, [r3, #12]
   d5b1e:	4602      	mov	r2, r0
   d5b20:	4620      	mov	r0, r4
}
   d5b22:	b002      	add	sp, #8
   d5b24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
   d5b28:	4718      	bx	r3

000d5b2a <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
   d5b2a:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   d5b2c:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
   d5b2e:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   d5b32:	68db      	ldr	r3, [r3, #12]
   d5b34:	2201      	movs	r2, #1
   d5b36:	f10d 0107 	add.w	r1, sp, #7
   d5b3a:	4798      	blx	r3
}
   d5b3c:	b003      	add	sp, #12
   d5b3e:	f85d fb04 	ldr.w	pc, [sp], #4

000d5b42 <_ZN5spark16StreamLogHandler6printfEPKcz>:
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   d5b42:	b40e      	push	{r1, r2, r3}
   d5b44:	b503      	push	{r0, r1, lr}
   d5b46:	ab03      	add	r3, sp, #12
    stream_->vprintf(false, fmt, args);
   d5b48:	2100      	movs	r1, #0
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   d5b4a:	f853 2b04 	ldr.w	r2, [r3], #4
    stream_->vprintf(false, fmt, args);
   d5b4e:	6a00      	ldr	r0, [r0, #32]
    va_start(args, fmt);
   d5b50:	9301      	str	r3, [sp, #4]
    stream_->vprintf(false, fmt, args);
   d5b52:	f001 f82c 	bl	d6bae <_ZN5Print7vprintfEbPKcSt9__va_list>
}
   d5b56:	b002      	add	sp, #8
   d5b58:	f85d eb04 	ldr.w	lr, [sp], #4
   d5b5c:	b003      	add	sp, #12
   d5b5e:	4770      	bx	lr

000d5b60 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   d5b60:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
   d5b64:	e9d0 9500 	ldrd	r9, r5, [r0]
   d5b68:	f04f 0814 	mov.w	r8, #20
   d5b6c:	fb08 f505 	mul.w	r5, r8, r5
   d5b70:	9300      	str	r3, [sp, #0]
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   d5b72:	10ab      	asrs	r3, r5, #2
   d5b74:	4d18      	ldr	r5, [pc, #96]	; (d5bd8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x78>)
   d5b76:	4617      	mov	r7, r2
   d5b78:	435d      	muls	r5, r3
   d5b7a:	464c      	mov	r4, r9
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
   d5b7c:	2d00      	cmp	r5, #0
   d5b7e:	dd23      	ble.n	d5bc8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x68>
	{
	  _DistanceType __half = __len >> 1;
   d5b80:	106e      	asrs	r6, r5, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
   d5b82:	fb08 f006 	mul.w	r0, r8, r6
   d5b86:	eb04 0a00 	add.w	sl, r4, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   d5b8a:	463a      	mov	r2, r7
   d5b8c:	f8ba b004 	ldrh.w	fp, [sl, #4]
   d5b90:	5820      	ldr	r0, [r4, r0]
   d5b92:	9101      	str	r1, [sp, #4]
   d5b94:	455f      	cmp	r7, fp
   d5b96:	bf28      	it	cs
   d5b98:	465a      	movcs	r2, fp
   d5b9a:	f001 fe8c 	bl	d78b6 <strncmp>
                if (cmp == 0) {
   d5b9e:	9901      	ldr	r1, [sp, #4]
   d5ba0:	2301      	movs	r3, #1
   d5ba2:	b978      	cbnz	r0, d5bc4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
                    if (node.size == value.second) { // Lengths are equal
   d5ba4:	455f      	cmp	r7, fp
   d5ba6:	d103      	bne.n	d5bb0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   d5ba8:	9a00      	ldr	r2, [sp, #0]
   d5baa:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   d5bac:	4635      	mov	r5, r6
   d5bae:	e7e5      	b.n	d5b7c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
                    return node.size < value.second;
   d5bb0:	bf8c      	ite	hi
   d5bb2:	2001      	movhi	r0, #1
   d5bb4:	2000      	movls	r0, #0
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
   d5bb6:	2800      	cmp	r0, #0
   d5bb8:	d0f8      	beq.n	d5bac <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x4c>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   d5bba:	1bae      	subs	r6, r5, r6
	      ++__first;
   d5bbc:	f10a 0414 	add.w	r4, sl, #20
	      __len = __len - __half - 1;
   d5bc0:	3e01      	subs	r6, #1
   d5bc2:	e7f3      	b.n	d5bac <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x4c>
                return cmp < 0;
   d5bc4:	0fc0      	lsrs	r0, r0, #31
   d5bc6:	e7f6      	b.n	d5bb6 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
      return __last - __first;
   d5bc8:	eba4 0409 	sub.w	r4, r4, r9
}
   d5bcc:	4802      	ldr	r0, [pc, #8]	; (d5bd8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x78>)
   d5bce:	10a4      	asrs	r4, r4, #2
   d5bd0:	4360      	muls	r0, r4
   d5bd2:	b003      	add	sp, #12
   d5bd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5bd8:	cccccccd 	.word	0xcccccccd

000d5bdc <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
   d5bdc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
   d5bde:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
   d5be0:	7e06      	ldrb	r6, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
   d5be2:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
   d5be4:	b30b      	cbz	r3, d5c2a <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
   d5be6:	b301      	cbz	r1, d5c2a <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
        size_t size = 0; // Name length
   d5be8:	2500      	movs	r5, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   d5bea:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
   d5bee:	9503      	str	r5, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
   d5bf0:	a903      	add	r1, sp, #12
   d5bf2:	a801      	add	r0, sp, #4
   d5bf4:	f7ff ff36 	bl	d5a64 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   d5bf8:	4601      	mov	r1, r0
   d5bfa:	b1b0      	cbz	r0, d5c2a <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
            const int index = nodeIndex(*pNodes, name, size, found);
   d5bfc:	f10d 030b 	add.w	r3, sp, #11
   d5c00:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
   d5c02:	f88d 500b 	strb.w	r5, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
   d5c06:	4620      	mov	r0, r4
   d5c08:	f7ff ffaa 	bl	d5b60 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   d5c0c:	f89d 300b 	ldrb.w	r3, [sp, #11]
   d5c10:	b15b      	cbz	r3, d5c2a <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
    return data_[i];
   d5c12:	6824      	ldr	r4, [r4, #0]
   d5c14:	2314      	movs	r3, #20
   d5c16:	fb03 4000 	mla	r0, r3, r0, r4
            pNodes = &node.nodes;
   d5c1a:	f100 0408 	add.w	r4, r0, #8
            if (node.level >= 0) {
   d5c1e:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
   d5c22:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   d5c24:	bfa8      	it	ge
   d5c26:	b2de      	uxtbge	r6, r3
        while ((name = nextSubcategoryName(category, size))) {
   d5c28:	e7e2      	b.n	d5bf0 <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
   d5c2a:	4630      	mov	r0, r6
   d5c2c:	b004      	add	sp, #16
   d5c2e:	bd70      	pop	{r4, r5, r6, pc}

000d5c30 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   d5c30:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   d5c32:	4c0a      	ldr	r4, [pc, #40]	; (d5c5c <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   d5c34:	7823      	ldrb	r3, [r4, #0]
   d5c36:	f3bf 8f5b 	dmb	ish
   d5c3a:	07db      	lsls	r3, r3, #31
   d5c3c:	d40b      	bmi.n	d5c56 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x26>
   d5c3e:	4620      	mov	r0, r4
   d5c40:	f7fe fa38 	bl	d40b4 <__cxa_guard_acquire>
   d5c44:	b138      	cbz	r0, d5c56 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x26>
   d5c46:	4620      	mov	r0, r4
   d5c48:	f7fe fa39 	bl	d40be <__cxa_guard_release>
   d5c4c:	4a04      	ldr	r2, [pc, #16]	; (d5c60 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   d5c4e:	4905      	ldr	r1, [pc, #20]	; (d5c64 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x34>)
   d5c50:	4805      	ldr	r0, [pc, #20]	; (d5c68 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x38>)
   d5c52:	f001 fbb5 	bl	d73c0 <__aeabi_atexit>
}
   d5c56:	4804      	ldr	r0, [pc, #16]	; (d5c68 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x38>)
   d5c58:	bd10      	pop	{r4, pc}
   d5c5a:	bf00      	nop
   d5c5c:	2003e728 	.word	0x2003e728
   d5c60:	2003e63c 	.word	0x2003e63c
   d5c64:	000d5a61 	.word	0x000d5a61
   d5c68:	2003e5cc 	.word	0x2003e5cc

000d5c6c <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   d5c6c:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   d5c6e:	4c0a      	ldr	r4, [pc, #40]	; (d5c98 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   d5c70:	7823      	ldrb	r3, [r4, #0]
   d5c72:	f3bf 8f5b 	dmb	ish
   d5c76:	07db      	lsls	r3, r3, #31
   d5c78:	d40b      	bmi.n	d5c92 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x26>
   d5c7a:	4620      	mov	r0, r4
   d5c7c:	f7fe fa1a 	bl	d40b4 <__cxa_guard_acquire>
   d5c80:	b138      	cbz	r0, d5c92 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x26>
   d5c82:	4620      	mov	r0, r4
   d5c84:	f7fe fa1b 	bl	d40be <__cxa_guard_release>
   d5c88:	4a04      	ldr	r2, [pc, #16]	; (d5c9c <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   d5c8a:	4905      	ldr	r1, [pc, #20]	; (d5ca0 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x34>)
   d5c8c:	4805      	ldr	r0, [pc, #20]	; (d5ca4 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x38>)
   d5c8e:	f001 fb97 	bl	d73c0 <__aeabi_atexit>
    return &factory;
}
   d5c92:	4804      	ldr	r0, [pc, #16]	; (d5ca4 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x38>)
   d5c94:	bd10      	pop	{r4, pc}
   d5c96:	bf00      	nop
   d5c98:	2003e72c 	.word	0x2003e72c
   d5c9c:	2003e63c 	.word	0x2003e63c
   d5ca0:	000d5a5f 	.word	0x000d5a5f
   d5ca4:	2003e5d0 	.word	0x2003e5d0

000d5ca8 <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   d5ca8:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   d5caa:	2500      	movs	r5, #0
   d5cac:	4604      	mov	r4, r0
   d5cae:	e9c0 5500 	strd	r5, r5, [r0]
   d5cb2:	e9c0 5504 	strd	r5, r5, [r0, #16]
   d5cb6:	6085      	str	r5, [r0, #8]
   d5cb8:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
   d5cba:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
   d5cbe:	f7fe fe19 	bl	d48f4 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   d5cc2:	f7ff ffb5 	bl	d5c30 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   d5cc6:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   d5cc8:	f7ff ffd0 	bl	d5c6c <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   d5ccc:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   d5cce:	6220      	str	r0, [r4, #32]
}
   d5cd0:	4620      	mov	r0, r4
   d5cd2:	bd38      	pop	{r3, r4, r5, pc}

000d5cd4 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   d5cd4:	b510      	push	{r4, lr}
    static LogManager mgr;
   d5cd6:	4c0b      	ldr	r4, [pc, #44]	; (d5d04 <_ZN5spark10LogManager8instanceEv+0x30>)
   d5cd8:	7823      	ldrb	r3, [r4, #0]
   d5cda:	f3bf 8f5b 	dmb	ish
   d5cde:	07db      	lsls	r3, r3, #31
   d5ce0:	d40e      	bmi.n	d5d00 <_ZN5spark10LogManager8instanceEv+0x2c>
   d5ce2:	4620      	mov	r0, r4
   d5ce4:	f7fe f9e6 	bl	d40b4 <__cxa_guard_acquire>
   d5ce8:	b150      	cbz	r0, d5d00 <_ZN5spark10LogManager8instanceEv+0x2c>
   d5cea:	4807      	ldr	r0, [pc, #28]	; (d5d08 <_ZN5spark10LogManager8instanceEv+0x34>)
   d5cec:	f7ff ffdc 	bl	d5ca8 <_ZN5spark10LogManagerC1Ev>
   d5cf0:	4620      	mov	r0, r4
   d5cf2:	f7fe f9e4 	bl	d40be <__cxa_guard_release>
   d5cf6:	4a05      	ldr	r2, [pc, #20]	; (d5d0c <_ZN5spark10LogManager8instanceEv+0x38>)
   d5cf8:	4905      	ldr	r1, [pc, #20]	; (d5d10 <_ZN5spark10LogManager8instanceEv+0x3c>)
   d5cfa:	4803      	ldr	r0, [pc, #12]	; (d5d08 <_ZN5spark10LogManager8instanceEv+0x34>)
   d5cfc:	f001 fb60 	bl	d73c0 <__aeabi_atexit>
    return &mgr;
}
   d5d00:	4801      	ldr	r0, [pc, #4]	; (d5d08 <_ZN5spark10LogManager8instanceEv+0x34>)
   d5d02:	bd10      	pop	{r4, pc}
   d5d04:	2003e724 	.word	0x2003e724
   d5d08:	2003e734 	.word	0x2003e734
   d5d0c:	2003e63c 	.word	0x2003e63c
   d5d10:	000d6145 	.word	0x000d6145

000d5d14 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   d5d14:	4a02      	ldr	r2, [pc, #8]	; (d5d20 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   d5d16:	4903      	ldr	r1, [pc, #12]	; (d5d24 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   d5d18:	4803      	ldr	r0, [pc, #12]	; (d5d28 <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   d5d1a:	2300      	movs	r3, #0
   d5d1c:	f7fe bf4a 	b.w	d4bb4 <log_set_callbacks>
   d5d20:	000d6021 	.word	0x000d6021
   d5d24:	000d5fad 	.word	0x000d5fad
   d5d28:	000d5f2d 	.word	0x000d5f2d

000d5d2c <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   d5d2c:	2300      	movs	r3, #0
   d5d2e:	461a      	mov	r2, r3
   d5d30:	4619      	mov	r1, r3
   d5d32:	4618      	mov	r0, r3
   d5d34:	f7fe bf3e 	b.w	d4bb4 <log_set_callbacks>

000d5d38 <_ZNK5spark18JSONObjectIterator5valueEv>:
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   d5d38:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONValue(v_, d_);
   d5d3a:	690d      	ldr	r5, [r1, #16]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5d3c:	f851 3b04 	ldr.w	r3, [r1], #4
   d5d40:	9300      	str	r3, [sp, #0]
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   d5d42:	4604      	mov	r4, r0
   d5d44:	a801      	add	r0, sp, #4
   d5d46:	f7ff f884 	bl	d4e52 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return JSONValue(v_, d_);
   d5d4a:	466a      	mov	r2, sp
   d5d4c:	4629      	mov	r1, r5
   d5d4e:	4620      	mov	r0, r4
   d5d50:	f7ff fd14 	bl	d577c <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d5d54:	a801      	add	r0, sp, #4
   d5d56:	f7ff f883 	bl	d4e60 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d5d5a:	4620      	mov	r0, r4
   d5d5c:	b003      	add	sp, #12
   d5d5e:	bd30      	pop	{r4, r5, pc}

000d5d60 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   d5d60:	b537      	push	{r0, r1, r2, r4, r5, lr}
        JSONObjectIterator(value.t_, value.d_) {
   d5d62:	688d      	ldr	r5, [r1, #8]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5d64:	f851 3b04 	ldr.w	r3, [r1], #4
   d5d68:	9300      	str	r3, [sp, #0]
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   d5d6a:	4604      	mov	r4, r0
   d5d6c:	a801      	add	r0, sp, #4
   d5d6e:	f7ff f870 	bl	d4e52 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        JSONObjectIterator(value.t_, value.d_) {
   d5d72:	466a      	mov	r2, sp
   d5d74:	4629      	mov	r1, r5
   d5d76:	4620      	mov	r0, r4
   d5d78:	f7ff fd7c 	bl	d5874 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d5d7c:	a801      	add	r0, sp, #4
   d5d7e:	f7ff f86f 	bl	d4e60 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d5d82:	4620      	mov	r0, r4
   d5d84:	b003      	add	sp, #12
   d5d86:	bd30      	pop	{r4, r5, pc}

000d5d88 <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
   d5d88:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONString(k_, d_);
   d5d8a:	68cd      	ldr	r5, [r1, #12]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5d8c:	f851 3b04 	ldr.w	r3, [r1], #4
   d5d90:	9300      	str	r3, [sp, #0]
inline spark::JSONString spark::JSONObjectIterator::name() const {
   d5d92:	4604      	mov	r4, r0
   d5d94:	a801      	add	r0, sp, #4
   d5d96:	f7ff f85c 	bl	d4e52 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return JSONString(k_, d_);
   d5d9a:	466a      	mov	r2, sp
   d5d9c:	4629      	mov	r1, r5
   d5d9e:	4620      	mov	r0, r4
   d5da0:	f7ff fd44 	bl	d582c <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d5da4:	a801      	add	r0, sp, #4
   d5da6:	f7ff f85b 	bl	d4e60 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d5daa:	4620      	mov	r0, r4
   d5dac:	b003      	add	sp, #12
   d5dae:	bd30      	pop	{r4, r5, pc}

000d5db0 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   d5db0:	b570      	push	{r4, r5, r6, lr}
   d5db2:	b08a      	sub	sp, #40	; 0x28
   d5db4:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   d5db6:	4601      	mov	r1, r0
   d5db8:	a804      	add	r0, sp, #16
   d5dba:	f7ff ffd1 	bl	d5d60 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
   d5dbe:	4e14      	ldr	r6, [pc, #80]	; (d5e10 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
   d5dc0:	a804      	add	r0, sp, #16
   d5dc2:	f7ff fd6f 	bl	d58a4 <_ZN5spark18JSONObjectIterator4nextEv>
   d5dc6:	b1e8      	cbz	r0, d5e04 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
   d5dc8:	a904      	add	r1, sp, #16
   d5dca:	4668      	mov	r0, sp
   d5dcc:	f7ff ffdc 	bl	d5d88 <_ZNK5spark18JSONObjectIterator4nameEv>
   d5dd0:	9802      	ldr	r0, [sp, #8]
   d5dd2:	4631      	mov	r1, r6
   d5dd4:	f7ff fe6d 	bl	d5ab2 <_ZNK5spark10JSONStringeqEPKc.isra.0>
   d5dd8:	4604      	mov	r4, r0
   d5dda:	b110      	cbz	r0, d5de2 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
   d5ddc:	1e2c      	subs	r4, r5, #0
   d5dde:	bf18      	it	ne
   d5de0:	2401      	movne	r4, #1
   d5de2:	a801      	add	r0, sp, #4
   d5de4:	f7ff f83c 	bl	d4e60 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5de8:	2c00      	cmp	r4, #0
   d5dea:	d0e9      	beq.n	d5dc0 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
   d5dec:	a904      	add	r1, sp, #16
   d5dee:	4668      	mov	r0, sp
   d5df0:	f7ff ffa2 	bl	d5d38 <_ZNK5spark18JSONObjectIterator5valueEv>
   d5df4:	4668      	mov	r0, sp
   d5df6:	f7ff fcf7 	bl	d57e8 <_ZNK5spark9JSONValue5toIntEv>
   d5dfa:	6028      	str	r0, [r5, #0]
   d5dfc:	a801      	add	r0, sp, #4
   d5dfe:	f7ff f82f 	bl	d4e60 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5e02:	e7dd      	b.n	d5dc0 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
   d5e04:	a805      	add	r0, sp, #20
   d5e06:	f7ff f82b 	bl	d4e60 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d5e0a:	b00a      	add	sp, #40	; 0x28
   d5e0c:	bd70      	pop	{r4, r5, r6, pc}
   d5e0e:	bf00      	nop
   d5e10:	000d7c95 	.word	0x000d7c95

000d5e14 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   d5e14:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d5e16:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
   d5e18:	4620      	mov	r0, r4
   d5e1a:	4912      	ldr	r1, [pc, #72]	; (d5e64 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>)
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   d5e1c:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
   d5e1e:	f001 fd12 	bl	d7846 <strcmp>
   d5e22:	b948      	cbnz	r0, d5e38 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x24>
        Serial.begin();
   d5e24:	f001 f962 	bl	d70ec <_Z16_fetch_usbserialv>
   d5e28:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d5e2c:	f001 f94e 	bl	d70cc <_ZN9USBSerial5beginEl>
        return &Serial;
   d5e30:	f001 f95c 	bl	d70ec <_Z16_fetch_usbserialv>
}
   d5e34:	b003      	add	sp, #12
   d5e36:	bd30      	pop	{r4, r5, pc}
    if (strcmp(type, "Serial1") == 0) {
   d5e38:	490b      	ldr	r1, [pc, #44]	; (d5e68 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
   d5e3a:	4620      	mov	r0, r4
   d5e3c:	f001 fd03 	bl	d7846 <strcmp>
   d5e40:	b970      	cbnz	r0, d5e60 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
        int baud = 9600;
   d5e42:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
   d5e46:	a901      	add	r1, sp, #4
   d5e48:	4628      	mov	r0, r5
        int baud = 9600;
   d5e4a:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
   d5e4c:	f7ff ffb0 	bl	d5db0 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   d5e50:	f001 f8a6 	bl	d6fa0 <_Z22__fetch_global_Serial1v>
   d5e54:	9901      	ldr	r1, [sp, #4]
   d5e56:	f001 f89d 	bl	d6f94 <_ZN11USARTSerial5beginEm>
        return &Serial1;
   d5e5a:	f001 f8a1 	bl	d6fa0 <_Z22__fetch_global_Serial1v>
   d5e5e:	e7e9      	b.n	d5e34 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x20>
    return nullptr;
   d5e60:	2000      	movs	r0, #0
   d5e62:	e7e7      	b.n	d5e34 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x20>
   d5e64:	000d7c9a 	.word	0x000d7c9a
   d5e68:	000d7ca1 	.word	0x000d7ca1

000d5e6c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   d5e6c:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d5e6e:	e9d0 5300 	ldrd	r5, r3, [r0]
   d5e72:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   d5e74:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d5e76:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   d5e7a:	42ae      	cmp	r6, r5
   d5e7c:	d005      	beq.n	d5e8a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
   d5e7e:	f105 0008 	add.w	r0, r5, #8
   d5e82:	f7ff fff3 	bl	d5e6c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d5e86:	3514      	adds	r5, #20
   d5e88:	e7f7      	b.n	d5e7a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   d5e8a:	6820      	ldr	r0, [r4, #0]
   d5e8c:	f7fe ff5e 	bl	d4d4c <free>
}
   d5e90:	4620      	mov	r0, r4
   d5e92:	bd70      	pop	{r4, r5, r6, pc}

000d5e94 <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
   d5e94:	b510      	push	{r4, lr}
   d5e96:	4604      	mov	r4, r0
   d5e98:	300c      	adds	r0, #12
   d5e9a:	f7ff ffe7 	bl	d5e6c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d5e9e:	4620      	mov	r0, r4
   d5ea0:	f7fe ffc5 	bl	d4e2e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   d5ea4:	4620      	mov	r0, r4
   d5ea6:	bd10      	pop	{r4, pc}

000d5ea8 <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
   d5ea8:	b510      	push	{r4, lr}
    virtual ~LogHandler() = default;
   d5eaa:	4b04      	ldr	r3, [pc, #16]	; (d5ebc <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
class StreamLogHandler: public LogHandler {
   d5eac:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
   d5eae:	f840 3b04 	str.w	r3, [r0], #4
   d5eb2:	f7ff ffef 	bl	d5e94 <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
   d5eb6:	4620      	mov	r0, r4
   d5eb8:	bd10      	pop	{r4, pc}
   d5eba:	bf00      	nop
   d5ebc:	000d7b94 	.word	0x000d7b94

000d5ec0 <_ZN5spark16StreamLogHandlerD0Ev>:
   d5ec0:	b510      	push	{r4, lr}
   d5ec2:	4604      	mov	r4, r0
   d5ec4:	f7ff fff0 	bl	d5ea8 <_ZN5spark16StreamLogHandlerD1Ev>
   d5ec8:	4620      	mov	r0, r4
   d5eca:	2124      	movs	r1, #36	; 0x24
   d5ecc:	f001 fa7d 	bl	d73ca <_ZdlPvj>
   d5ed0:	4620      	mov	r0, r4
   d5ed2:	bd10      	pop	{r4, pc}

000d5ed4 <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
   d5ed4:	b510      	push	{r4, lr}
   d5ed6:	4b03      	ldr	r3, [pc, #12]	; (d5ee4 <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   d5ed8:	6003      	str	r3, [r0, #0]
   d5eda:	4604      	mov	r4, r0
   d5edc:	f7ff ffe4 	bl	d5ea8 <_ZN5spark16StreamLogHandlerD1Ev>
   d5ee0:	4620      	mov	r0, r4
   d5ee2:	bd10      	pop	{r4, pc}
   d5ee4:	000d7d40 	.word	0x000d7d40

000d5ee8 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   d5ee8:	b510      	push	{r4, lr}
   d5eea:	4604      	mov	r4, r0
   d5eec:	f7ff fff2 	bl	d5ed4 <_ZN5spark20JSONStreamLogHandlerD1Ev>
   d5ef0:	4620      	mov	r0, r4
   d5ef2:	2124      	movs	r1, #36	; 0x24
   d5ef4:	f001 fa69 	bl	d73ca <_ZdlPvj>
   d5ef8:	4620      	mov	r0, r4
   d5efa:	bd10      	pop	{r4, pc}

000d5efc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
   d5efc:	2200      	movs	r2, #0
   d5efe:	e9c0 2200 	strd	r2, r2, [r0]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   d5f02:	b510      	push	{r4, lr}
        capacity_(0) {
   d5f04:	6082      	str	r2, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   d5f06:	680c      	ldr	r4, [r1, #0]
   d5f08:	6004      	str	r4, [r0, #0]
   d5f0a:	684c      	ldr	r4, [r1, #4]
   d5f0c:	6044      	str	r4, [r0, #4]
   d5f0e:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d5f10:	600a      	str	r2, [r1, #0]
   d5f12:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   d5f14:	6084      	str	r4, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d5f16:	608a      	str	r2, [r1, #8]
}
   d5f18:	bd10      	pop	{r4, pc}

000d5f1a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   d5f1a:	b510      	push	{r4, lr}
      { _M_device.unlock(); }
   d5f1c:	6803      	ldr	r3, [r0, #0]
      ~lock_guard()
   d5f1e:	4604      	mov	r4, r0
    }

    void lock() { os_mutex_recursive_lock(handle_); }
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d5f20:	6818      	ldr	r0, [r3, #0]
   d5f22:	f7fe fcff 	bl	d4924 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   d5f26:	4620      	mov	r0, r4
   d5f28:	bd10      	pop	{r4, pc}
	...

000d5f2c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   d5f2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5f30:	b087      	sub	sp, #28
   d5f32:	4680      	mov	r8, r0
   d5f34:	9303      	str	r3, [sp, #12]
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   d5f36:	4b1c      	ldr	r3, [pc, #112]	; (d5fa8 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
   d5f38:	685b      	ldr	r3, [r3, #4]
   d5f3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
   d5f3e:	4689      	mov	r9, r1
   d5f40:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d5f42:	b96b      	cbnz	r3, d5f60 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
   d5f44:	f7ff fec6 	bl	d5cd4 <_ZN5spark10LogManager8instanceEv>
   d5f48:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   d5f4a:	f100 0324 	add.w	r3, r0, #36	; 0x24
    void lock() { os_mutex_recursive_lock(handle_); }
   d5f4e:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d5f50:	9305      	str	r3, [sp, #20]
   d5f52:	f7fe fcdf 	bl	d4914 <os_mutex_recursive_lock>
        // prevent re-entry
        if (that->isActive()) {
   d5f56:	7b23      	ldrb	r3, [r4, #12]
   d5f58:	b12b      	cbz	r3, d5f66 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
   d5f5a:	a805      	add	r0, sp, #20
   d5f5c:	f7ff ffdd 	bl	d5f1a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   d5f60:	b007      	add	sp, #28
   d5f62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   d5f66:	2301      	movs	r3, #1
   d5f68:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
   d5f6a:	e9d4 5300 	ldrd	r5, r3, [r4]
            handler->message(msg, (LogLevel)level, category, *attr);
   d5f6e:	fa5f f989 	uxtb.w	r9, r9
   d5f72:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   d5f76:	45aa      	cmp	sl, r5
   d5f78:	d012      	beq.n	d5fa0 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
   d5f7a:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
   d5f7e:	4631      	mov	r1, r6
   d5f80:	1d38      	adds	r0, r7, #4
   d5f82:	f7ff fe2b 	bl	d5bdc <_ZNK5spark6detail9LogFilter5levelEPKc>
   d5f86:	4581      	cmp	r9, r0
   d5f88:	d3f5      	bcc.n	d5f76 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
   d5f8a:	683b      	ldr	r3, [r7, #0]
   d5f8c:	9a03      	ldr	r2, [sp, #12]
   d5f8e:	9200      	str	r2, [sp, #0]
   d5f90:	f8d3 b008 	ldr.w	fp, [r3, #8]
   d5f94:	464a      	mov	r2, r9
   d5f96:	4633      	mov	r3, r6
   d5f98:	4641      	mov	r1, r8
   d5f9a:	4638      	mov	r0, r7
   d5f9c:	47d8      	blx	fp
   d5f9e:	e7ea      	b.n	d5f76 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
   d5fa0:	2300      	movs	r3, #0
   d5fa2:	7323      	strb	r3, [r4, #12]
   d5fa4:	e7d9      	b.n	d5f5a <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
   d5fa6:	bf00      	nop
   d5fa8:	e000ed00 	.word	0xe000ed00

000d5fac <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   d5fac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5fb0:	469b      	mov	fp, r3
   d5fb2:	4b1a      	ldr	r3, [pc, #104]	; (d601c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
   d5fb4:	685b      	ldr	r3, [r3, #4]
   d5fb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
   d5fba:	4680      	mov	r8, r0
   d5fbc:	4689      	mov	r9, r1
   d5fbe:	4616      	mov	r6, r2
    if (HAL_IsISR()) {
   d5fc0:	b96b      	cbnz	r3, d5fde <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
   d5fc2:	f7ff fe87 	bl	d5cd4 <_ZN5spark10LogManager8instanceEv>
   d5fc6:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   d5fc8:	f100 0324 	add.w	r3, r0, #36	; 0x24
   d5fcc:	6a40      	ldr	r0, [r0, #36]	; 0x24
   d5fce:	9301      	str	r3, [sp, #4]
   d5fd0:	f7fe fca0 	bl	d4914 <os_mutex_recursive_lock>
        if (that->isActive()) {
   d5fd4:	7b23      	ldrb	r3, [r4, #12]
   d5fd6:	b12b      	cbz	r3, d5fe4 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
   d5fd8:	a801      	add	r0, sp, #4
   d5fda:	f7ff ff9e 	bl	d5f1a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   d5fde:	b003      	add	sp, #12
   d5fe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
   d5fe4:	2301      	movs	r3, #1
   d5fe6:	7323      	strb	r3, [r4, #12]
   d5fe8:	e9d4 5300 	ldrd	r5, r3, [r4]
    if (level >= filter_.level(category)) {
   d5fec:	b2f6      	uxtb	r6, r6
   d5fee:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   d5ff2:	4555      	cmp	r5, sl
   d5ff4:	d00e      	beq.n	d6014 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
   d5ff6:	f855 7b04 	ldr.w	r7, [r5], #4
   d5ffa:	4659      	mov	r1, fp
   d5ffc:	1d38      	adds	r0, r7, #4
   d5ffe:	f7ff fded 	bl	d5bdc <_ZNK5spark6detail9LogFilter5levelEPKc>
   d6002:	4286      	cmp	r6, r0
   d6004:	d3f5      	bcc.n	d5ff2 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
   d6006:	683b      	ldr	r3, [r7, #0]
   d6008:	464a      	mov	r2, r9
   d600a:	68db      	ldr	r3, [r3, #12]
   d600c:	4641      	mov	r1, r8
   d600e:	4638      	mov	r0, r7
   d6010:	4798      	blx	r3
   d6012:	e7ee      	b.n	d5ff2 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
   d6014:	2300      	movs	r3, #0
   d6016:	7323      	strb	r3, [r4, #12]
   d6018:	e7de      	b.n	d5fd8 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
   d601a:	bf00      	nop
   d601c:	e000ed00 	.word	0xe000ed00

000d6020 <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   d6020:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d6024:	4b16      	ldr	r3, [pc, #88]	; (d6080 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
   d6026:	685b      	ldr	r3, [r3, #4]
   d6028:	f3c3 0308 	ubfx	r3, r3, #0, #9
   d602c:	4605      	mov	r5, r0
   d602e:	460f      	mov	r7, r1
    if (HAL_IsISR()) {
   d6030:	bb1b      	cbnz	r3, d607a <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
   d6032:	f7ff fe4f 	bl	d5cd4 <_ZN5spark10LogManager8instanceEv>
    LOG_WITH_LOCK(that->mutex_) {
   d6036:	f100 0324 	add.w	r3, r0, #36	; 0x24
    LogManager *that = instance();
   d603a:	4604      	mov	r4, r0
   d603c:	6a40      	ldr	r0, [r0, #36]	; 0x24
   d603e:	9301      	str	r3, [sp, #4]
   d6040:	f7fe fc68 	bl	d4914 <os_mutex_recursive_lock>
   d6044:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
   d6048:	2446      	movs	r4, #70	; 0x46
   d604a:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   d604e:	45b0      	cmp	r8, r6
   d6050:	d109      	bne.n	d6066 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
   d6052:	a801      	add	r0, sp, #4
   d6054:	f7ff ff61 	bl	d5f1a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
   d6058:	42a5      	cmp	r5, r4
   d605a:	bfb4      	ite	lt
   d605c:	2000      	movlt	r0, #0
   d605e:	2001      	movge	r0, #1
}
   d6060:	b002      	add	sp, #8
   d6062:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
   d6066:	f856 0b04 	ldr.w	r0, [r6], #4
   d606a:	4639      	mov	r1, r7
   d606c:	3004      	adds	r0, #4
   d606e:	f7ff fdb5 	bl	d5bdc <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
   d6072:	4284      	cmp	r4, r0
   d6074:	bfa8      	it	ge
   d6076:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
   d6078:	e7e9      	b.n	d604e <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
   d607a:	2000      	movs	r0, #0
   d607c:	e7f0      	b.n	d6060 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
   d607e:	bf00      	nop
   d6080:	e000ed00 	.word	0xe000ed00

000d6084 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d6084:	b570      	push	{r4, r5, r6, lr}
   d6086:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   d6088:	e9d0 0200 	ldrd	r0, r2, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d608c:	460b      	mov	r3, r1
    T* const p = find(data_, data_ + size_, value);
   d608e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
   d6092:	4282      	cmp	r2, r0
   d6094:	d007      	beq.n	d60a6 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x22>
   d6096:	4601      	mov	r1, r0
            if (*p == value) {
   d6098:	681d      	ldr	r5, [r3, #0]
   d609a:	f851 6b04 	ldr.w	r6, [r1], #4
   d609e:	42ae      	cmp	r6, r5
   d60a0:	d003      	beq.n	d60aa <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x26>
   d60a2:	4608      	mov	r0, r1
   d60a4:	e7f5      	b.n	d6092 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
   d60a6:	2000      	movs	r0, #0
}
   d60a8:	bd70      	pop	{r4, r5, r6, pc}
        ::memmove(dest, p, (end - p) * sizeof(T));
   d60aa:	1a52      	subs	r2, r2, r1
   d60ac:	f001 fb6e 	bl	d778c <memmove>
    --size_;
   d60b0:	6863      	ldr	r3, [r4, #4]
   d60b2:	3b01      	subs	r3, #1
   d60b4:	6063      	str	r3, [r4, #4]
    return true;
   d60b6:	2001      	movs	r0, #1
   d60b8:	e7f6      	b.n	d60a8 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x24>

000d60ba <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
   d60ba:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    LOG_WITH_LOCK(mutex_) {
   d60bc:	f100 0324 	add.w	r3, r0, #36	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
   d60c0:	4604      	mov	r4, r0
   d60c2:	6a40      	ldr	r0, [r0, #36]	; 0x24
   d60c4:	9101      	str	r1, [sp, #4]
   d60c6:	9303      	str	r3, [sp, #12]
   d60c8:	f7fe fc24 	bl	d4914 <os_mutex_recursive_lock>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   d60cc:	a901      	add	r1, sp, #4
   d60ce:	4620      	mov	r0, r4
   d60d0:	f7ff ffd8 	bl	d6084 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   d60d4:	b118      	cbz	r0, d60de <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
   d60d6:	6863      	ldr	r3, [r4, #4]
   d60d8:	b90b      	cbnz	r3, d60de <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
   d60da:	f7ff fe27 	bl	d5d2c <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   d60de:	a803      	add	r0, sp, #12
   d60e0:	f7ff ff1b 	bl	d5f1a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   d60e4:	b004      	add	sp, #16
   d60e6:	bd10      	pop	{r4, pc}

000d60e8 <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
void spark::LogManager::destroyFactoryHandlers() {
   d60e8:	b570      	push	{r4, r5, r6, lr}
    return data_ + size_;
   d60ea:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
   d60ee:	2318      	movs	r3, #24
   d60f0:	4604      	mov	r4, r0
   d60f2:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   d60f6:	42ae      	cmp	r6, r5
   d60f8:	d015      	beq.n	d6126 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   d60fa:	f105 0110 	add.w	r1, r5, #16
   d60fe:	4620      	mov	r0, r4
   d6100:	f7ff ffc0 	bl	d6084 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   d6104:	6863      	ldr	r3, [r4, #4]
   d6106:	b90b      	cbnz	r3, d610c <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   d6108:	f7ff fe10 	bl	d5d2c <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
   d610c:	69e0      	ldr	r0, [r4, #28]
   d610e:	6929      	ldr	r1, [r5, #16]
   d6110:	6803      	ldr	r3, [r0, #0]
   d6112:	68db      	ldr	r3, [r3, #12]
   d6114:	4798      	blx	r3
        if (h.stream) {
   d6116:	6969      	ldr	r1, [r5, #20]
   d6118:	b119      	cbz	r1, d6122 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   d611a:	6a20      	ldr	r0, [r4, #32]
   d611c:	6803      	ldr	r3, [r0, #0]
   d611e:	68db      	ldr	r3, [r3, #12]
   d6120:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
   d6122:	3518      	adds	r5, #24
   d6124:	e7e7      	b.n	d60f6 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
   d6126:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   d612a:	2618      	movs	r6, #24
   d612c:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   d6130:	42ae      	cmp	r6, r5
   d6132:	d004      	beq.n	d613e <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
   d6134:	4628      	mov	r0, r5
   d6136:	f000 fd89 	bl	d6c4c <_ZN6StringD1Ev>
   d613a:	3518      	adds	r5, #24
   d613c:	e7f8      	b.n	d6130 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
   d613e:	2300      	movs	r3, #0
   d6140:	6163      	str	r3, [r4, #20]
}
   d6142:	bd70      	pop	{r4, r5, r6, pc}

000d6144 <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
   d6144:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d6146:	4604      	mov	r4, r0
    resetSystemCallbacks();
   d6148:	f7ff fdf0 	bl	d5d2c <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   d614c:	f104 0324 	add.w	r3, r4, #36	; 0x24
   d6150:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d6152:	9301      	str	r3, [sp, #4]
   d6154:	f7fe fbde 	bl	d4914 <os_mutex_recursive_lock>
         destroyFactoryHandlers();
   d6158:	4620      	mov	r0, r4
   d615a:	f7ff ffc5 	bl	d60e8 <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
   d615e:	a801      	add	r0, sp, #4
   d6160:	f7ff fedb 	bl	d5f1a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
   d6164:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d6166:	b108      	cbz	r0, d616c <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
   d6168:	f7fe fbcc 	bl	d4904 <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
   d616c:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   d6170:	2618      	movs	r6, #24
   d6172:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   d6176:	42ae      	cmp	r6, r5
   d6178:	d004      	beq.n	d6184 <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
   d617a:	4628      	mov	r0, r5
   d617c:	f000 fd66 	bl	d6c4c <_ZN6StringD1Ev>
   d6180:	3518      	adds	r5, #24
   d6182:	e7f8      	b.n	d6176 <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
   d6184:	6920      	ldr	r0, [r4, #16]
   d6186:	f7fe fde1 	bl	d4d4c <free>
   d618a:	6820      	ldr	r0, [r4, #0]
   d618c:	f7fe fdde 	bl	d4d4c <free>
}
   d6190:	4620      	mov	r0, r4
   d6192:	b002      	add	sp, #8
   d6194:	bd70      	pop	{r4, r5, r6, pc}

000d6196 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
   d6196:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d6198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d619a:	4606      	mov	r6, r0
   d619c:	460c      	mov	r4, r1
   d619e:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d61a0:	d927      	bls.n	d61f2 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x5c>
   d61a2:	4290      	cmp	r0, r2
   d61a4:	d226      	bcs.n	d61f4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x5e>
            --end;
   d61a6:	f1a2 0514 	sub.w	r5, r2, #20
            dest += end - p - 1;
   d61aa:	1a6c      	subs	r4, r5, r1
   d61ac:	f1a1 0714 	sub.w	r7, r1, #20
   d61b0:	4404      	add	r4, r0
        capacity_(0) {
   d61b2:	2600      	movs	r6, #0
            for (; end != p; --end, --dest) {
   d61b4:	42af      	cmp	r7, r5
   d61b6:	d03d      	beq.n	d6234 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
                new(dest) T(std::move(*end));
   d61b8:	b1a4      	cbz	r4, d61e4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x4e>
struct spark::detail::LogFilter::Node {
   d61ba:	682b      	ldr	r3, [r5, #0]
   d61bc:	6023      	str	r3, [r4, #0]
   d61be:	88ab      	ldrh	r3, [r5, #4]
   d61c0:	80a3      	strh	r3, [r4, #4]
   d61c2:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
   d61c6:	80e3      	strh	r3, [r4, #6]
        capacity_(0) {
   d61c8:	e9c4 6602 	strd	r6, r6, [r4, #8]
   d61cc:	6126      	str	r6, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   d61ce:	68ab      	ldr	r3, [r5, #8]
   d61d0:	60a3      	str	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d61d2:	60ae      	str	r6, [r5, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d61d4:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   d61d6:	68ea      	ldr	r2, [r5, #12]
   d61d8:	60e2      	str	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d61da:	60eb      	str	r3, [r5, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d61dc:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   d61de:	692a      	ldr	r2, [r5, #16]
   d61e0:	6122      	str	r2, [r4, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d61e2:	612b      	str	r3, [r5, #16]
   d61e4:	f105 0008 	add.w	r0, r5, #8
   d61e8:	f7ff fe40 	bl	d5e6c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
   d61ec:	3d14      	subs	r5, #20
   d61ee:	3c14      	subs	r4, #20
   d61f0:	e7e0      	b.n	d61b4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1e>
        } else if (dest != p) {
   d61f2:	d01f      	beq.n	d6234 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
        capacity_(0) {
   d61f4:	2700      	movs	r7, #0
            for (; p != end; ++p, ++dest) {
   d61f6:	42ac      	cmp	r4, r5
   d61f8:	d01c      	beq.n	d6234 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
                new(dest) T(std::move(*p));
   d61fa:	b1a6      	cbz	r6, d6226 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x90>
   d61fc:	6823      	ldr	r3, [r4, #0]
   d61fe:	6033      	str	r3, [r6, #0]
   d6200:	88a3      	ldrh	r3, [r4, #4]
   d6202:	80b3      	strh	r3, [r6, #4]
   d6204:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
   d6208:	80f3      	strh	r3, [r6, #6]
        capacity_(0) {
   d620a:	e9c6 7702 	strd	r7, r7, [r6, #8]
   d620e:	6137      	str	r7, [r6, #16]
      __a = _GLIBCXX_MOVE(__b);
   d6210:	68a3      	ldr	r3, [r4, #8]
   d6212:	60b3      	str	r3, [r6, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d6214:	60a7      	str	r7, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6216:	68f3      	ldr	r3, [r6, #12]
      __a = _GLIBCXX_MOVE(__b);
   d6218:	68e2      	ldr	r2, [r4, #12]
   d621a:	60f2      	str	r2, [r6, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d621c:	60e3      	str	r3, [r4, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d621e:	6933      	ldr	r3, [r6, #16]
      __a = _GLIBCXX_MOVE(__b);
   d6220:	6922      	ldr	r2, [r4, #16]
   d6222:	6132      	str	r2, [r6, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d6224:	6123      	str	r3, [r4, #16]
   d6226:	f104 0008 	add.w	r0, r4, #8
   d622a:	f7ff fe1f 	bl	d5e6c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
   d622e:	3414      	adds	r4, #20
   d6230:	3614      	adds	r6, #20
   d6232:	e7e0      	b.n	d61f6 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x60>
    }
   d6234:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6236 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   d6236:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d6238:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
   d623c:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   d623e:	4604      	mov	r4, r0
   d6240:	460e      	mov	r6, r1
   d6242:	4617      	mov	r7, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d6244:	db0d      	blt.n	d6262 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x2c>
   d6246:	3501      	adds	r5, #1
        if (n > 0) {
   d6248:	2d00      	cmp	r5, #0
   d624a:	6800      	ldr	r0, [r0, #0]
   d624c:	dd04      	ble.n	d6258 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x22>
    return ::realloc(ptr, size);
   d624e:	00a9      	lsls	r1, r5, #2
   d6250:	f7fe fd84 	bl	d4d5c <realloc>
            if (!d) {
   d6254:	b918      	cbnz	r0, d625e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x28>
}
   d6256:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
   d6258:	f7fe fd78 	bl	d4d4c <free>
        T* d = nullptr;
   d625c:	2000      	movs	r0, #0
        data_ = d;
   d625e:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   d6260:	60a5      	str	r5, [r4, #8]
    T* const p = data_ + i;
   d6262:	6825      	ldr	r5, [r4, #0]
    move(p + 1, p, data_ + size_);
   d6264:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   d6266:	eb05 0186 	add.w	r1, r5, r6, lsl #2
    move(p + 1, p, data_ + size_);
   d626a:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
   d626c:	eba2 0286 	sub.w	r2, r2, r6, lsl #2
   d6270:	1d08      	adds	r0, r1, #4
   d6272:	f001 fa8b 	bl	d778c <memmove>
    new(p) T(std::move(value));
   d6276:	f845 7026 	str.w	r7, [r5, r6, lsl #2]
    ++size_;
   d627a:	6863      	ldr	r3, [r4, #4]
   d627c:	3301      	adds	r3, #1
   d627e:	6063      	str	r3, [r4, #4]
    return true;
   d6280:	2001      	movs	r0, #1
   d6282:	e7e8      	b.n	d6256 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x20>

000d6284 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
   d6284:	b537      	push	{r0, r1, r2, r4, r5, lr}
    LOG_WITH_LOCK(mutex_) {
   d6286:	f100 0324 	add.w	r3, r0, #36	; 0x24
bool spark::LogManager::addHandler(LogHandler *handler) {
   d628a:	4604      	mov	r4, r0
    void lock() { os_mutex_recursive_lock(handle_); }
   d628c:	6a40      	ldr	r0, [r0, #36]	; 0x24
   d628e:	9301      	str	r3, [sp, #4]
   d6290:	460d      	mov	r5, r1
   d6292:	f7fe fb3f 	bl	d4914 <os_mutex_recursive_lock>
    return find(data_, data_ + size_, value);
   d6296:	e9d4 3100 	ldrd	r3, r1, [r4]
   d629a:	eb03 0081 	add.w	r0, r3, r1, lsl #2
        for (; p != end; ++p) {
   d629e:	4283      	cmp	r3, r0
   d62a0:	461a      	mov	r2, r3
   d62a2:	d00b      	beq.n	d62bc <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x38>
            if (*p == value) {
   d62a4:	6812      	ldr	r2, [r2, #0]
   d62a6:	42aa      	cmp	r2, r5
   d62a8:	f103 0304 	add.w	r3, r3, #4
   d62ac:	d1f7      	bne.n	d629e <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
    LOG_WITH_LOCK(mutex_) {
   d62ae:	a801      	add	r0, sp, #4
   d62b0:	f7ff fe33 	bl	d5f1a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
            return false;
   d62b4:	2500      	movs	r5, #0
}
   d62b6:	4628      	mov	r0, r5
   d62b8:	b003      	add	sp, #12
   d62ba:	bd30      	pop	{r4, r5, pc}
    return insert(size_, std::move(value));
   d62bc:	462a      	mov	r2, r5
   d62be:	4620      	mov	r0, r4
   d62c0:	f7ff ffb9 	bl	d6236 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   d62c4:	4605      	mov	r5, r0
   d62c6:	2800      	cmp	r0, #0
   d62c8:	d0f1      	beq.n	d62ae <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x2a>
        if (activeHandlers_.size() == 1) {
   d62ca:	6863      	ldr	r3, [r4, #4]
   d62cc:	2b01      	cmp	r3, #1
   d62ce:	d101      	bne.n	d62d4 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x50>
            setSystemCallbacks();
   d62d0:	f7ff fd20 	bl	d5d14 <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   d62d4:	a801      	add	r0, sp, #4
   d62d6:	f7ff fe20 	bl	d5f1a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   d62da:	e7ec      	b.n	d62b6 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x32>

000d62dc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   d62dc:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d62de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d62e0:	4604      	mov	r4, r0
   d62e2:	460d      	mov	r5, r1
   d62e4:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   d62e6:	d914      	bls.n	d6312 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   d62e8:	4290      	cmp	r0, r2
   d62ea:	d213      	bcs.n	d6314 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
   d62ec:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
   d62f0:	1a75      	subs	r5, r6, r1
   d62f2:	f1a1 0710 	sub.w	r7, r1, #16
   d62f6:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   d62f8:	42b7      	cmp	r7, r6
   d62fa:	d018      	beq.n	d632e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   d62fc:	b11c      	cbz	r4, d6306 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   d62fe:	4631      	mov	r1, r6
   d6300:	4620      	mov	r0, r4
   d6302:	f000 fd1f 	bl	d6d44 <_ZN6StringC1EOS_>
                end->~T();
   d6306:	4630      	mov	r0, r6
   d6308:	f000 fca0 	bl	d6c4c <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   d630c:	3e10      	subs	r6, #16
   d630e:	3c10      	subs	r4, #16
   d6310:	e7f2      	b.n	d62f8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   d6312:	d00c      	beq.n	d632e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   d6314:	42b5      	cmp	r5, r6
   d6316:	d00a      	beq.n	d632e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   d6318:	b11c      	cbz	r4, d6322 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   d631a:	4629      	mov	r1, r5
   d631c:	4620      	mov	r0, r4
   d631e:	f000 fd11 	bl	d6d44 <_ZN6StringC1EOS_>
                p->~T();
   d6322:	4628      	mov	r0, r5
   d6324:	f000 fc92 	bl	d6c4c <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   d6328:	3510      	adds	r5, #16
   d632a:	3410      	adds	r4, #16
   d632c:	e7f2      	b.n	d6314 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
   d632e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6330 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
   d6330:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   d6332:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   d6334:	4605      	mov	r5, r0
        if (n > 0) {
   d6336:	dd11      	ble.n	d635c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
   d6338:	0130      	lsls	r0, r6, #4
   d633a:	f7fe fcff 	bl	d4d3c <malloc>
            if (!d) {
   d633e:	4604      	mov	r4, r0
   d6340:	b158      	cbz	r0, d635a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   d6342:	e9d5 1200 	ldrd	r1, r2, [r5]
   d6346:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   d634a:	f7ff ffc7 	bl	d62dc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   d634e:	6828      	ldr	r0, [r5, #0]
   d6350:	f7fe fcfc 	bl	d4d4c <free>
        data_ = d;
   d6354:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d6356:	60ae      	str	r6, [r5, #8]
        return true;
   d6358:	2001      	movs	r0, #1
    }
   d635a:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   d635c:	2400      	movs	r4, #0
   d635e:	e7f6      	b.n	d634e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

000d6360 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   d6360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6364:	4691      	mov	r9, r2
   d6366:	b097      	sub	sp, #92	; 0x5c
        capacity_(0) {
   d6368:	2300      	movs	r3, #0
   d636a:	9103      	str	r1, [sp, #12]
    if (!cats.reserve(filters.size())) {
   d636c:	f8d9 1004 	ldr.w	r1, [r9, #4]
   d6370:	930c      	str	r3, [sp, #48]	; 0x30
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   d6372:	2246      	movs	r2, #70	; 0x46
    if (n > capacity_ && !realloc(n)) {
   d6374:	4299      	cmp	r1, r3
        capacity_(0) {
   d6376:	e9c0 3300 	strd	r3, r3, [r0]
   d637a:	e9c0 3302 	strd	r3, r3, [r0, #8]
   d637e:	e9c0 3304 	strd	r3, r3, [r0, #16]
   d6382:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   d6386:	4604      	mov	r4, r0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   d6388:	7602      	strb	r2, [r0, #24]
    if (n > capacity_ && !realloc(n)) {
   d638a:	dc23      	bgt.n	d63d4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
   d638c:	e9d9 5700 	ldrd	r5, r7, [r9]
   d6390:	2314      	movs	r3, #20
   d6392:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
   d6396:	42af      	cmp	r7, r5
   d6398:	d03b      	beq.n	d6412 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
   d639a:	4629      	mov	r1, r5
   d639c:	a80d      	add	r0, sp, #52	; 0x34
   d639e:	f000 fcd1 	bl	d6d44 <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
   d63a2:	a90d      	add	r1, sp, #52	; 0x34
   d63a4:	a811      	add	r0, sp, #68	; 0x44
   d63a6:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   d63a8:	f000 fccc 	bl	d6d44 <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d63ac:	e9dd 130b 	ldrd	r1, r3, [sp, #44]	; 0x2c
   d63b0:	4299      	cmp	r1, r3
   d63b2:	da1b      	bge.n	d63ec <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
   d63b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    move(p + 1, p, data_ + size_);
   d63b6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    T* const p = data_ + i;
   d63b8:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   d63bc:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   d63c0:	4631      	mov	r1, r6
   d63c2:	f106 0010 	add.w	r0, r6, #16
   d63c6:	f7ff ff89 	bl	d62dc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   d63ca:	b9ee      	cbnz	r6, d6408 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
   d63cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   d63ce:	3301      	adds	r3, #1
   d63d0:	930b      	str	r3, [sp, #44]	; 0x2c
    return true;
   d63d2:	e011      	b.n	d63f8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
   d63d4:	a80a      	add	r0, sp, #40	; 0x28
   d63d6:	f7ff ffab 	bl	d6330 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   d63da:	2800      	cmp	r0, #0
   d63dc:	d1d6      	bne.n	d638c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
    Vector<String> cats;
   d63de:	a80a      	add	r0, sp, #40	; 0x28
   d63e0:	f7fe fd25 	bl	d4e2e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   d63e4:	4620      	mov	r0, r4
   d63e6:	b017      	add	sp, #92	; 0x5c
   d63e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d63ec:	3101      	adds	r1, #1
   d63ee:	a80a      	add	r0, sp, #40	; 0x28
   d63f0:	f7ff ff9e 	bl	d6330 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   d63f4:	2800      	cmp	r0, #0
   d63f6:	d1dd      	bne.n	d63b4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
   d63f8:	a811      	add	r0, sp, #68	; 0x44
   d63fa:	f000 fc27 	bl	d6c4c <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
   d63fe:	a80d      	add	r0, sp, #52	; 0x34
   d6400:	f000 fc24 	bl	d6c4c <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
   d6404:	3514      	adds	r5, #20
   d6406:	e7c6      	b.n	d6396 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
   d6408:	a911      	add	r1, sp, #68	; 0x44
   d640a:	4630      	mov	r0, r6
   d640c:	f000 fc9a 	bl	d6d44 <_ZN6StringC1EOS_>
   d6410:	e7dc      	b.n	d63cc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
   d6412:	2600      	movs	r6, #0
   d6414:	e9cd 660d 	strd	r6, r6, [sp, #52]	; 0x34
   d6418:	960f      	str	r6, [sp, #60]	; 0x3c
        size_t size = 0; // Name length
   d641a:	4637      	mov	r7, r6
   d641c:	f04f 0a14 	mov.w	sl, #20
    for (int i = 0; i < cats.size(); ++i) {
   d6420:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   d6424:	429e      	cmp	r6, r3
   d6426:	f280 8097 	bge.w	d6558 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f8>
        const char *category = cats.at(i).c_str();
   d642a:	0133      	lsls	r3, r6, #4
   d642c:	58d3      	ldr	r3, [r2, r3]
   d642e:	9308      	str	r3, [sp, #32]
        if (!category) {
   d6430:	b90b      	cbnz	r3, d6436 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd6>
    for (int i = 0; i < cats.size(); ++i) {
   d6432:	3601      	adds	r6, #1
   d6434:	e7f4      	b.n	d6420 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xc0>
        size_t size = 0; // Name length
   d6436:	fb0a f306 	mul.w	r3, sl, r6
   d643a:	9709      	str	r7, [sp, #36]	; 0x24
   d643c:	9302      	str	r3, [sp, #8]
        Vector<Node> *pNodes = &nodes; // Root nodes
   d643e:	ad0d      	add	r5, sp, #52	; 0x34
        while ((name = nextSubcategoryName(category, size))) {
   d6440:	a909      	add	r1, sp, #36	; 0x24
   d6442:	a808      	add	r0, sp, #32
   d6444:	f7ff fb0e 	bl	d5a64 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   d6448:	4683      	mov	fp, r0
   d644a:	2800      	cmp	r0, #0
   d644c:	d0f1      	beq.n	d6432 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
            const int index = nodeIndex(*pNodes, name, size, found);
   d644e:	4601      	mov	r1, r0
   d6450:	9a09      	ldr	r2, [sp, #36]	; 0x24
            bool found = false;
   d6452:	f88d 701f 	strb.w	r7, [sp, #31]
            const int index = nodeIndex(*pNodes, name, size, found);
   d6456:	f10d 031f 	add.w	r3, sp, #31
   d645a:	4628      	mov	r0, r5
   d645c:	f7ff fb80 	bl	d5b60 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d6460:	f89d 801f 	ldrb.w	r8, [sp, #31]
            const int index = nodeIndex(*pNodes, name, size, found);
   d6464:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d6466:	f1b8 0f00 	cmp.w	r8, #0
   d646a:	d166      	bne.n	d653a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1da>
   d646c:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
            level(-1) {
   d6470:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
   d6474:	e9cd 8813 	strd	r8, r8, [sp, #76]	; 0x4c
   d6478:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d647c:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
   d6480:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
   d6484:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d6488:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   d648c:	4293      	cmp	r3, r2
   d648e:	db1a      	blt.n	d64c6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x166>
   d6490:	f103 0b01 	add.w	fp, r3, #1
        if (n > 0) {
   d6494:	f1bb 0f00 	cmp.w	fp, #0
   d6498:	dd4a      	ble.n	d6530 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d0>
    return ::malloc(size);
   d649a:	fb0a f00b 	mul.w	r0, sl, fp
   d649e:	f7fe fc4d 	bl	d4d3c <malloc>
            if (!d) {
   d64a2:	9004      	str	r0, [sp, #16]
   d64a4:	2800      	cmp	r0, #0
   d64a6:	d045      	beq.n	d6534 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d4>
            move(d, data_, data_ + size_);
   d64a8:	e9d5 1200 	ldrd	r1, r2, [r5]
   d64ac:	fb0a 1202 	mla	r2, sl, r2, r1
   d64b0:	f7ff fe71 	bl	d6196 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
   d64b4:	9b04      	ldr	r3, [sp, #16]
    ::free(ptr);
   d64b6:	6828      	ldr	r0, [r5, #0]
   d64b8:	9304      	str	r3, [sp, #16]
   d64ba:	f7fe fc47 	bl	d4d4c <free>
        data_ = d;
   d64be:	9b04      	ldr	r3, [sp, #16]
   d64c0:	602b      	str	r3, [r5, #0]
        capacity_ = n;
   d64c2:	f8c5 b008 	str.w	fp, [r5, #8]
    T* const p = data_ + i;
   d64c6:	9b01      	ldr	r3, [sp, #4]
   d64c8:	f8d5 b000 	ldr.w	fp, [r5]
    move(p + 1, p, data_ + size_);
   d64cc:	686a      	ldr	r2, [r5, #4]
    T* const p = data_ + i;
   d64ce:	fb0a f303 	mul.w	r3, sl, r3
   d64d2:	eb0b 0103 	add.w	r1, fp, r3
    move(p + 1, p, data_ + size_);
   d64d6:	f101 0014 	add.w	r0, r1, #20
   d64da:	fb0a b202 	mla	r2, sl, r2, fp
   d64de:	9104      	str	r1, [sp, #16]
    T* const p = data_ + i;
   d64e0:	9305      	str	r3, [sp, #20]
    move(p + 1, p, data_ + size_);
   d64e2:	f7ff fe58 	bl	d6196 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   d64e6:	9904      	ldr	r1, [sp, #16]
   d64e8:	b1a9      	cbz	r1, d6516 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1b6>
struct spark::detail::LogFilter::Node {
   d64ea:	9b05      	ldr	r3, [sp, #20]
   d64ec:	9a11      	ldr	r2, [sp, #68]	; 0x44
   d64ee:	f84b 2003 	str.w	r2, [fp, r3]
   d64f2:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
   d64f6:	808b      	strh	r3, [r1, #4]
   d64f8:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
   d64fc:	80cb      	strh	r3, [r1, #6]
        capacity_(0) {
   d64fe:	e9c1 7702 	strd	r7, r7, [r1, #8]
   d6502:	610f      	str	r7, [r1, #16]
      __a = _GLIBCXX_MOVE(__b);
   d6504:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   d6506:	608b      	str	r3, [r1, #8]
   d6508:	9b14      	ldr	r3, [sp, #80]	; 0x50
      __b = _GLIBCXX_MOVE(__tmp);
   d650a:	9713      	str	r7, [sp, #76]	; 0x4c
      __a = _GLIBCXX_MOVE(__b);
   d650c:	60cb      	str	r3, [r1, #12]
   d650e:	9b15      	ldr	r3, [sp, #84]	; 0x54
      __b = _GLIBCXX_MOVE(__tmp);
   d6510:	9714      	str	r7, [sp, #80]	; 0x50
      __a = _GLIBCXX_MOVE(__b);
   d6512:	610b      	str	r3, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d6514:	9715      	str	r7, [sp, #84]	; 0x54
    ++size_;
   d6516:	686b      	ldr	r3, [r5, #4]
   d6518:	3301      	adds	r3, #1
   d651a:	606b      	str	r3, [r5, #4]
   d651c:	a813      	add	r0, sp, #76	; 0x4c
   d651e:	f7ff fca5 	bl	d5e6c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d6522:	f1b8 0f00 	cmp.w	r8, #0
   d6526:	d008      	beq.n	d653a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1da>
    Vector<Node> nodes;
   d6528:	a80d      	add	r0, sp, #52	; 0x34
   d652a:	f7ff fc9f 	bl	d5e6c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d652e:	e756      	b.n	d63de <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
   d6530:	4643      	mov	r3, r8
   d6532:	e7c0      	b.n	d64b6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x156>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d6534:	f04f 0801 	mov.w	r8, #1
   d6538:	e7f0      	b.n	d651c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
    return data_[i];
   d653a:	9b01      	ldr	r3, [sp, #4]
   d653c:	682d      	ldr	r5, [r5, #0]
   d653e:	fb0a 5503 	mla	r5, sl, r3, r5
            if (!*category) { // Check if it's last subcategory
   d6542:	9b08      	ldr	r3, [sp, #32]
   d6544:	781b      	ldrb	r3, [r3, #0]
   d6546:	b92b      	cbnz	r3, d6554 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f4>
                node.level = filters.at(i).level_;
   d6548:	f8d9 3000 	ldr.w	r3, [r9]
   d654c:	9a02      	ldr	r2, [sp, #8]
   d654e:	4413      	add	r3, r2
   d6550:	7c1b      	ldrb	r3, [r3, #16]
   d6552:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
   d6554:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
   d6556:	e773      	b.n	d6440 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xe0>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6558:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d655a:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d655c:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   d655e:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6560:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d6562:	920b      	str	r2, [sp, #44]	; 0x2c
      __a = _GLIBCXX_MOVE(__b);
   d6564:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
   d6566:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6568:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   d656a:	60a2      	str	r2, [r4, #8]
   d656c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
   d656e:	930d      	str	r3, [sp, #52]	; 0x34
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6570:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   d6572:	60e2      	str	r2, [r4, #12]
   d6574:	9a0e      	ldr	r2, [sp, #56]	; 0x38
      __b = _GLIBCXX_MOVE(__tmp);
   d6576:	930e      	str	r3, [sp, #56]	; 0x38
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6578:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
   d657a:	6122      	str	r2, [r4, #16]
   d657c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
      __b = _GLIBCXX_MOVE(__tmp);
   d657e:	930f      	str	r3, [sp, #60]	; 0x3c
    level_ = level;
   d6580:	9b03      	ldr	r3, [sp, #12]
   d6582:	910a      	str	r1, [sp, #40]	; 0x28
      __a = _GLIBCXX_MOVE(__b);
   d6584:	6162      	str	r2, [r4, #20]
   d6586:	7623      	strb	r3, [r4, #24]
   d6588:	e7ce      	b.n	d6528 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c8>
	...

000d658c <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
   d658c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
        filter_(level, filters) {
   d658e:	4605      	mov	r5, r0
   d6590:	4b09      	ldr	r3, [pc, #36]	; (d65b8 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>)
   d6592:	f845 3b04 	str.w	r3, [r5], #4
inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
   d6596:	4604      	mov	r4, r0
   d6598:	460e      	mov	r6, r1
        filter_(level, filters) {
   d659a:	a801      	add	r0, sp, #4
   d659c:	4611      	mov	r1, r2
   d659e:	f7fe f8ce 	bl	d473e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d65a2:	aa01      	add	r2, sp, #4
   d65a4:	4631      	mov	r1, r6
   d65a6:	4628      	mov	r0, r5
   d65a8:	f7ff feda 	bl	d6360 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d65ac:	a801      	add	r0, sp, #4
   d65ae:	f7fe f885 	bl	d46bc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}
   d65b2:	4620      	mov	r0, r4
   d65b4:	b004      	add	sp, #16
   d65b6:	bd70      	pop	{r4, r5, r6, pc}
   d65b8:	000d7b94 	.word	0x000d7b94

000d65bc <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
   d65bc:	b5f0      	push	{r4, r5, r6, r7, lr}
   d65be:	460f      	mov	r7, r1
   d65c0:	b087      	sub	sp, #28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d65c2:	4926      	ldr	r1, [pc, #152]	; (d665c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa0>)
            Print *stream, const JSONValue &params) {
   d65c4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d65c6:	4638      	mov	r0, r7
            Print *stream, const JSONValue &params) {
   d65c8:	4616      	mov	r6, r2
   d65ca:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d65cc:	f001 f93b 	bl	d7846 <strcmp>
   d65d0:	bb00      	cbnz	r0, d6614 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x58>
        if (!stream) {
   d65d2:	b1e4      	cbz	r4, d660e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   d65d4:	4629      	mov	r1, r5
   d65d6:	4668      	mov	r0, sp
   d65d8:	f7ff fc90 	bl	d5efc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   d65dc:	4920      	ldr	r1, [pc, #128]	; (d6660 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa4>)
   d65de:	2024      	movs	r0, #36	; 0x24
   d65e0:	f000 fef5 	bl	d73ce <_ZnwjRKSt9nothrow_t>
   d65e4:	4605      	mov	r5, r0
   d65e6:	b170      	cbz	r0, d6606 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
        stream_(&stream) {
   d65e8:	4669      	mov	r1, sp
   d65ea:	a803      	add	r0, sp, #12
   d65ec:	f7fe f8a7 	bl	d473e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d65f0:	aa03      	add	r2, sp, #12
   d65f2:	4631      	mov	r1, r6
   d65f4:	4628      	mov	r0, r5
   d65f6:	f7ff ffc9 	bl	d658c <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d65fa:	a803      	add	r0, sp, #12
   d65fc:	f7fe f85e 	bl	d46bc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
    using StreamLogHandler::StreamLogHandler;
   d6600:	4b18      	ldr	r3, [pc, #96]	; (d6664 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa8>)
        stream_(&stream) {
   d6602:	622c      	str	r4, [r5, #32]
    using StreamLogHandler::StreamLogHandler;
   d6604:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   d6606:	4668      	mov	r0, sp
   d6608:	f7fe f858 	bl	d46bc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d660c:	462c      	mov	r4, r5
}
   d660e:	4620      	mov	r0, r4
   d6610:	b007      	add	sp, #28
   d6612:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   d6614:	4914      	ldr	r1, [pc, #80]	; (d6668 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xac>)
   d6616:	4638      	mov	r0, r7
   d6618:	f001 f915 	bl	d7846 <strcmp>
   d661c:	b9e0      	cbnz	r0, d6658 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x9c>
        if (!stream) {
   d661e:	2c00      	cmp	r4, #0
   d6620:	d0f5      	beq.n	d660e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   d6622:	4629      	mov	r1, r5
   d6624:	4668      	mov	r0, sp
   d6626:	f7ff fc69 	bl	d5efc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   d662a:	490d      	ldr	r1, [pc, #52]	; (d6660 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa4>)
   d662c:	2024      	movs	r0, #36	; 0x24
   d662e:	f000 fece 	bl	d73ce <_ZnwjRKSt9nothrow_t>
   d6632:	4605      	mov	r5, r0
   d6634:	2800      	cmp	r0, #0
   d6636:	d0e6      	beq.n	d6606 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
        stream_(&stream) {
   d6638:	4669      	mov	r1, sp
   d663a:	a803      	add	r0, sp, #12
   d663c:	f7fe f87f 	bl	d473e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d6640:	aa03      	add	r2, sp, #12
   d6642:	4631      	mov	r1, r6
   d6644:	4628      	mov	r0, r5
   d6646:	f7ff ffa1 	bl	d658c <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d664a:	a803      	add	r0, sp, #12
   d664c:	f7fe f836 	bl	d46bc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d6650:	4b06      	ldr	r3, [pc, #24]	; (d666c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb0>)
   d6652:	602b      	str	r3, [r5, #0]
   d6654:	622c      	str	r4, [r5, #32]
}
   d6656:	e7d6      	b.n	d6606 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
            return nullptr; // Output stream is not specified
   d6658:	2400      	movs	r4, #0
   d665a:	e7d8      	b.n	d660e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
   d665c:	000d7ca9 	.word	0x000d7ca9
   d6660:	000d7e38 	.word	0x000d7e38
   d6664:	000d7d40 	.word	0x000d7d40
   d6668:	000d7cad 	.word	0x000d7cad
   d666c:	000d7d28 	.word	0x000d7d28

000d6670 <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
   d6670:	4b01      	ldr	r3, [pc, #4]	; (d6678 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d6672:	4a02      	ldr	r2, [pc, #8]	; (d667c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d6674:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d6676:	4770      	bx	lr
   d6678:	2003e730 	.word	0x2003e730
   d667c:	000d7cbe 	.word	0x000d7cbe

000d6680 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d6680:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d6684:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
   d6686:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d668a:	4604      	mov	r4, r0
   d668c:	460e      	mov	r6, r1
   d668e:	4617      	mov	r7, r2
   d6690:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
   d6692:	f000 fd2b 	bl	d70ec <_Z16_fetch_usbserialv>
   d6696:	4581      	cmp	r9, r0
   d6698:	d04c      	beq.n	d6734 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb4>
    if (attr.has_time) {
   d669a:	792b      	ldrb	r3, [r5, #4]
   d669c:	0719      	lsls	r1, r3, #28
   d669e:	d504      	bpl.n	d66aa <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
   d66a0:	696a      	ldr	r2, [r5, #20]
   d66a2:	4954      	ldr	r1, [pc, #336]	; (d67f4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   d66a4:	4620      	mov	r0, r4
   d66a6:	f7ff fa4c 	bl	d5b42 <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
   d66aa:	f1b8 0f00 	cmp.w	r8, #0
   d66ae:	d00d      	beq.n	d66cc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
   d66b0:	215b      	movs	r1, #91	; 0x5b
   d66b2:	4620      	mov	r0, r4
   d66b4:	f7ff fa39 	bl	d5b2a <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   d66b8:	4641      	mov	r1, r8
   d66ba:	4620      	mov	r0, r4
   d66bc:	f7ff fa26 	bl	d5b0c <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   d66c0:	6823      	ldr	r3, [r4, #0]
   d66c2:	494d      	ldr	r1, [pc, #308]	; (d67f8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
   d66c4:	68db      	ldr	r3, [r3, #12]
   d66c6:	2202      	movs	r2, #2
   d66c8:	4620      	mov	r0, r4
   d66ca:	4798      	blx	r3
    if (attr.has_file) {
   d66cc:	792b      	ldrb	r3, [r5, #4]
   d66ce:	07da      	lsls	r2, r3, #31
   d66d0:	d523      	bpl.n	d671a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9a>
        s = extractFileName(attr.file); // Strip directory path
   d66d2:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
   d66d6:	212f      	movs	r1, #47	; 0x2f
   d66d8:	4640      	mov	r0, r8
   d66da:	f001 f8fe 	bl	d78da <strrchr>
    if (s1) {
   d66de:	b108      	cbz	r0, d66e4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
   d66e0:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
   d66e4:	4641      	mov	r1, r8
   d66e6:	4620      	mov	r0, r4
   d66e8:	f7ff fa10 	bl	d5b0c <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   d66ec:	792b      	ldrb	r3, [r5, #4]
   d66ee:	079b      	lsls	r3, r3, #30
   d66f0:	d508      	bpl.n	d6704 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
   d66f2:	213a      	movs	r1, #58	; 0x3a
   d66f4:	4620      	mov	r0, r4
   d66f6:	f7ff fa18 	bl	d5b2a <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
   d66fa:	68ea      	ldr	r2, [r5, #12]
   d66fc:	493f      	ldr	r1, [pc, #252]	; (d67fc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
   d66fe:	4620      	mov	r0, r4
   d6700:	f7ff fa1f 	bl	d5b42 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
   d6704:	792a      	ldrb	r2, [r5, #4]
   d6706:	6823      	ldr	r3, [r4, #0]
   d6708:	f012 0f04 	tst.w	r2, #4
   d670c:	68db      	ldr	r3, [r3, #12]
            write(", ", 2);
   d670e:	bf14      	ite	ne
   d6710:	493b      	ldrne	r1, [pc, #236]	; (d6800 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
            write(": ", 2);
   d6712:	493c      	ldreq	r1, [pc, #240]	; (d6804 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(", ", 2);
   d6714:	2202      	movs	r2, #2
            write(": ", 2);
   d6716:	4620      	mov	r0, r4
   d6718:	4798      	blx	r3
    if (attr.has_function) {
   d671a:	792b      	ldrb	r3, [r5, #4]
   d671c:	0758      	lsls	r0, r3, #29
   d671e:	d51d      	bpl.n	d675c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xdc>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   d6720:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
   d6722:	460b      	mov	r3, r1
   d6724:	461a      	mov	r2, r3
    for (; *s; ++s) {
   d6726:	f813 0b01 	ldrb.w	r0, [r3], #1
   d672a:	b160      	cbz	r0, d6746 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
        if (*s == ' ') {
   d672c:	2820      	cmp	r0, #32
   d672e:	d108      	bne.n	d6742 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
            s1 = s + 1; // Skip return type
   d6730:	4619      	mov	r1, r3
   d6732:	e7f7      	b.n	d6724 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
    if (stream_ == &Serial && Network.listening()) {
   d6734:	4834      	ldr	r0, [pc, #208]	; (d6808 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   d6736:	f000 f966 	bl	d6a06 <_ZN5spark12NetworkClass9listeningEv>
   d673a:	2800      	cmp	r0, #0
   d673c:	d0ad      	beq.n	d669a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
   d673e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
   d6742:	2828      	cmp	r0, #40	; 0x28
   d6744:	d1ee      	bne.n	d6724 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
        write(s, n);
   d6746:	6823      	ldr	r3, [r4, #0]
   d6748:	1a52      	subs	r2, r2, r1
   d674a:	68db      	ldr	r3, [r3, #12]
   d674c:	4620      	mov	r0, r4
   d674e:	4798      	blx	r3
        write("(): ", 4);
   d6750:	6823      	ldr	r3, [r4, #0]
   d6752:	492e      	ldr	r1, [pc, #184]	; (d680c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   d6754:	68db      	ldr	r3, [r3, #12]
   d6756:	2204      	movs	r2, #4
   d6758:	4620      	mov	r0, r4
   d675a:	4798      	blx	r3
    return log_level_name(level, nullptr);
   d675c:	2100      	movs	r1, #0
   d675e:	4638      	mov	r0, r7
   d6760:	f7fe fa20 	bl	d4ba4 <log_level_name>
   d6764:	4601      	mov	r1, r0
    write(s);
   d6766:	4620      	mov	r0, r4
   d6768:	f7ff f9d0 	bl	d5b0c <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   d676c:	6823      	ldr	r3, [r4, #0]
   d676e:	4925      	ldr	r1, [pc, #148]	; (d6804 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   d6770:	68db      	ldr	r3, [r3, #12]
   d6772:	2202      	movs	r2, #2
   d6774:	4620      	mov	r0, r4
   d6776:	4798      	blx	r3
    if (msg) {
   d6778:	b11e      	cbz	r6, d6782 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x102>
        write(msg);
   d677a:	4631      	mov	r1, r6
   d677c:	4620      	mov	r0, r4
   d677e:	f7ff f9c5 	bl	d5b0c <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
   d6782:	792b      	ldrb	r3, [r5, #4]
   d6784:	f013 0f30 	tst.w	r3, #48	; 0x30
   d6788:	d02c      	beq.n	d67e4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>
        write(" [", 2);
   d678a:	6823      	ldr	r3, [r4, #0]
   d678c:	4920      	ldr	r1, [pc, #128]	; (d6810 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   d678e:	68db      	ldr	r3, [r3, #12]
   d6790:	2202      	movs	r2, #2
   d6792:	4620      	mov	r0, r4
   d6794:	4798      	blx	r3
        if (attr.has_code) {
   d6796:	792b      	ldrb	r3, [r5, #4]
   d6798:	06d9      	lsls	r1, r3, #27
   d679a:	d50a      	bpl.n	d67b2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x132>
            write("code = ", 7);
   d679c:	6823      	ldr	r3, [r4, #0]
   d679e:	491d      	ldr	r1, [pc, #116]	; (d6814 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   d67a0:	68db      	ldr	r3, [r3, #12]
   d67a2:	2207      	movs	r2, #7
   d67a4:	4620      	mov	r0, r4
   d67a6:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
   d67a8:	69aa      	ldr	r2, [r5, #24]
   d67aa:	491b      	ldr	r1, [pc, #108]	; (d6818 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
   d67ac:	4620      	mov	r0, r4
   d67ae:	f7ff f9c8 	bl	d5b42 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
   d67b2:	792b      	ldrb	r3, [r5, #4]
   d67b4:	069a      	lsls	r2, r3, #26
   d67b6:	d511      	bpl.n	d67dc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>
            if (attr.has_code) {
   d67b8:	06db      	lsls	r3, r3, #27
   d67ba:	d505      	bpl.n	d67c8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>
                write(", ", 2);
   d67bc:	6823      	ldr	r3, [r4, #0]
   d67be:	4910      	ldr	r1, [pc, #64]	; (d6800 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
   d67c0:	68db      	ldr	r3, [r3, #12]
   d67c2:	2202      	movs	r2, #2
   d67c4:	4620      	mov	r0, r4
   d67c6:	4798      	blx	r3
            write("details = ", 10);
   d67c8:	6823      	ldr	r3, [r4, #0]
   d67ca:	4914      	ldr	r1, [pc, #80]	; (d681c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
   d67cc:	68db      	ldr	r3, [r3, #12]
   d67ce:	4620      	mov	r0, r4
   d67d0:	220a      	movs	r2, #10
   d67d2:	4798      	blx	r3
            write(attr.details);
   d67d4:	69e9      	ldr	r1, [r5, #28]
   d67d6:	4620      	mov	r0, r4
   d67d8:	f7ff f998 	bl	d5b0c <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
   d67dc:	215d      	movs	r1, #93	; 0x5d
   d67de:	4620      	mov	r0, r4
   d67e0:	f7ff f9a3 	bl	d5b2a <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
   d67e4:	6823      	ldr	r3, [r4, #0]
   d67e6:	490e      	ldr	r1, [pc, #56]	; (d6820 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
   d67e8:	68db      	ldr	r3, [r3, #12]
   d67ea:	4620      	mov	r0, r4
   d67ec:	2202      	movs	r2, #2
}
   d67ee:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
   d67f2:	4718      	bx	r3
   d67f4:	000d7cc2 	.word	0x000d7cc2
   d67f8:	000d7cc9 	.word	0x000d7cc9
   d67fc:	000d7b38 	.word	0x000d7b38
   d6800:	000d7ccc 	.word	0x000d7ccc
   d6804:	000d7cd1 	.word	0x000d7cd1
   d6808:	2003e75c 	.word	0x2003e75c
   d680c:	000d7ccf 	.word	0x000d7ccf
   d6810:	000d7cd4 	.word	0x000d7cd4
   d6814:	000d7cd7 	.word	0x000d7cd7
   d6818:	000d7cdf 	.word	0x000d7cdf
   d681c:	000d7ce2 	.word	0x000d7ce2
   d6820:	000d7ced 	.word	0x000d7ced

000d6824 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d6824:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d6828:	b085      	sub	sp, #20
    if (this->stream() == &Serial && Network.listening()) {
   d682a:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d682e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   d6830:	4605      	mov	r5, r0
   d6832:	460f      	mov	r7, r1
   d6834:	4690      	mov	r8, r2
   d6836:	461e      	mov	r6, r3
    if (this->stream() == &Serial && Network.listening()) {
   d6838:	f000 fc58 	bl	d70ec <_Z16_fetch_usbserialv>
   d683c:	4581      	cmp	r9, r0
   d683e:	d105      	bne.n	d684c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
   d6840:	4849      	ldr	r0, [pc, #292]	; (d6968 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
   d6842:	f000 f8e0 	bl	d6a06 <_ZN5spark12NetworkClass9listeningEv>
   d6846:	2800      	cmp	r0, #0
   d6848:	f040 808a 	bne.w	d6960 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
    JSONStreamWriter json(*this->stream());
   d684c:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
   d684e:	4a47      	ldr	r2, [pc, #284]	; (d696c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   d6850:	9201      	str	r2, [sp, #4]
        state_(BEGIN) {
   d6852:	f04f 0900 	mov.w	r9, #0
    json.beginObject();
   d6856:	a801      	add	r0, sp, #4
        strm_(stream) {
   d6858:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
   d685a:	f88d 9008 	strb.w	r9, [sp, #8]
   d685e:	f7ff f84a 	bl	d58f6 <_ZN5spark10JSONWriter11beginObjectEv>
   d6862:	4649      	mov	r1, r9
   d6864:	4640      	mov	r0, r8
   d6866:	f7fe f99d 	bl	d4ba4 <log_level_name>
    json.name("l", 1).value(s);
   d686a:	4941      	ldr	r1, [pc, #260]	; (d6970 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   d686c:	4680      	mov	r8, r0
   d686e:	2201      	movs	r2, #1
   d6870:	a801      	add	r0, sp, #4
   d6872:	f7ff f8c9 	bl	d5a08 <_ZN5spark10JSONWriter4nameEPKcj>
   d6876:	4641      	mov	r1, r8
   d6878:	f7ff f93a 	bl	d5af0 <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
   d687c:	b13f      	cbz	r7, d688e <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
   d687e:	493d      	ldr	r1, [pc, #244]	; (d6974 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   d6880:	2201      	movs	r2, #1
   d6882:	a801      	add	r0, sp, #4
   d6884:	f7ff f8c0 	bl	d5a08 <_ZN5spark10JSONWriter4nameEPKcj>
   d6888:	4639      	mov	r1, r7
   d688a:	f7ff f931 	bl	d5af0 <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
   d688e:	b13e      	cbz	r6, d68a0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
   d6890:	4939      	ldr	r1, [pc, #228]	; (d6978 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   d6892:	2201      	movs	r2, #1
   d6894:	a801      	add	r0, sp, #4
   d6896:	f7ff f8b7 	bl	d5a08 <_ZN5spark10JSONWriter4nameEPKcj>
   d689a:	4631      	mov	r1, r6
   d689c:	f7ff f928 	bl	d5af0 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
   d68a0:	7923      	ldrb	r3, [r4, #4]
   d68a2:	07df      	lsls	r7, r3, #31
   d68a4:	d50e      	bpl.n	d68c4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
   d68a6:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
   d68a8:	212f      	movs	r1, #47	; 0x2f
   d68aa:	4630      	mov	r0, r6
   d68ac:	f001 f815 	bl	d78da <strrchr>
    if (s1) {
   d68b0:	b100      	cbz	r0, d68b4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
   d68b2:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
   d68b4:	4931      	ldr	r1, [pc, #196]	; (d697c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   d68b6:	2201      	movs	r2, #1
   d68b8:	a801      	add	r0, sp, #4
   d68ba:	f7ff f8a5 	bl	d5a08 <_ZN5spark10JSONWriter4nameEPKcj>
   d68be:	4631      	mov	r1, r6
   d68c0:	f7ff f916 	bl	d5af0 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
   d68c4:	7923      	ldrb	r3, [r4, #4]
   d68c6:	079e      	lsls	r6, r3, #30
   d68c8:	d507      	bpl.n	d68da <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
   d68ca:	492d      	ldr	r1, [pc, #180]	; (d6980 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
   d68cc:	2202      	movs	r2, #2
   d68ce:	a801      	add	r0, sp, #4
   d68d0:	f7ff f89a 	bl	d5a08 <_ZN5spark10JSONWriter4nameEPKcj>
   d68d4:	68e1      	ldr	r1, [r4, #12]
   d68d6:	f7ff f81b 	bl	d5910 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
   d68da:	7923      	ldrb	r3, [r4, #4]
   d68dc:	0758      	lsls	r0, r3, #29
   d68de:	d514      	bpl.n	d690a <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   d68e0:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
   d68e2:	4633      	mov	r3, r6
   d68e4:	461f      	mov	r7, r3
    for (; *s; ++s) {
   d68e6:	f813 2b01 	ldrb.w	r2, [r3], #1
   d68ea:	b12a      	cbz	r2, d68f8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
   d68ec:	2a20      	cmp	r2, #32
   d68ee:	d101      	bne.n	d68f4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
   d68f0:	461e      	mov	r6, r3
   d68f2:	e7f7      	b.n	d68e4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
   d68f4:	2a28      	cmp	r2, #40	; 0x28
   d68f6:	d1f5      	bne.n	d68e4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
   d68f8:	4922      	ldr	r1, [pc, #136]	; (d6984 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
   d68fa:	2202      	movs	r2, #2
   d68fc:	a801      	add	r0, sp, #4
   d68fe:	f7ff f883 	bl	d5a08 <_ZN5spark10JSONWriter4nameEPKcj>
   d6902:	1bba      	subs	r2, r7, r6
   d6904:	4631      	mov	r1, r6
   d6906:	f7ff f88f 	bl	d5a28 <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
   d690a:	7923      	ldrb	r3, [r4, #4]
   d690c:	0719      	lsls	r1, r3, #28
   d690e:	d507      	bpl.n	d6920 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
   d6910:	491d      	ldr	r1, [pc, #116]	; (d6988 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
   d6912:	2201      	movs	r2, #1
   d6914:	a801      	add	r0, sp, #4
   d6916:	f7ff f877 	bl	d5a08 <_ZN5spark10JSONWriter4nameEPKcj>
   d691a:	6961      	ldr	r1, [r4, #20]
   d691c:	f7ff f80a 	bl	d5934 <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
   d6920:	7923      	ldrb	r3, [r4, #4]
   d6922:	06da      	lsls	r2, r3, #27
   d6924:	d508      	bpl.n	d6938 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
   d6926:	2204      	movs	r2, #4
   d6928:	4918      	ldr	r1, [pc, #96]	; (d698c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   d692a:	eb0d 0002 	add.w	r0, sp, r2
   d692e:	f7ff f86b 	bl	d5a08 <_ZN5spark10JSONWriter4nameEPKcj>
   d6932:	69a1      	ldr	r1, [r4, #24]
   d6934:	f7fe ffec 	bl	d5910 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
   d6938:	7923      	ldrb	r3, [r4, #4]
   d693a:	069b      	lsls	r3, r3, #26
   d693c:	d507      	bpl.n	d694e <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
   d693e:	4914      	ldr	r1, [pc, #80]	; (d6990 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   d6940:	2206      	movs	r2, #6
   d6942:	a801      	add	r0, sp, #4
   d6944:	f7ff f860 	bl	d5a08 <_ZN5spark10JSONWriter4nameEPKcj>
   d6948:	69e1      	ldr	r1, [r4, #28]
   d694a:	f7ff f8d1 	bl	d5af0 <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
   d694e:	a801      	add	r0, sp, #4
   d6950:	f7fe ffbb 	bl	d58ca <_ZN5spark10JSONWriter9endObjectEv>
    this->stream()->write((const uint8_t*)"\r\n", 2);
   d6954:	6a28      	ldr	r0, [r5, #32]
   d6956:	490f      	ldr	r1, [pc, #60]	; (d6994 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   d6958:	6803      	ldr	r3, [r0, #0]
   d695a:	2202      	movs	r2, #2
   d695c:	68db      	ldr	r3, [r3, #12]
   d695e:	4798      	blx	r3
}
   d6960:	b005      	add	sp, #20
   d6962:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d6966:	bf00      	nop
   d6968:	2003e75c 	.word	0x2003e75c
   d696c:	000d7d10 	.word	0x000d7d10
   d6970:	000d7c9f 	.word	0x000d7c9f
   d6974:	000d7cf0 	.word	0x000d7cf0
   d6978:	000d7cf2 	.word	0x000d7cf2
   d697c:	000d7ae5 	.word	0x000d7ae5
   d6980:	000d7cf4 	.word	0x000d7cf4
   d6984:	000d7cf7 	.word	0x000d7cf7
   d6988:	000d7cfa 	.word	0x000d7cfa
   d698c:	000d7cfc 	.word	0x000d7cfc
   d6990:	000d7d01 	.word	0x000d7d01
   d6994:	000d7ced 	.word	0x000d7ced

000d6998 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d6998:	2300      	movs	r3, #0
   d699a:	6840      	ldr	r0, [r0, #4]
   d699c:	461a      	mov	r2, r3
   d699e:	f7fe b96d 	b.w	d4c7c <network_connect>

000d69a2 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d69a2:	6840      	ldr	r0, [r0, #4]
   d69a4:	2200      	movs	r2, #0
   d69a6:	2102      	movs	r1, #2
   d69a8:	f7fe b978 	b.w	d4c9c <network_disconnect>

000d69ac <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d69ac:	2200      	movs	r2, #0
   d69ae:	6840      	ldr	r0, [r0, #4]
   d69b0:	4611      	mov	r1, r2
   d69b2:	f7fe b96b 	b.w	d4c8c <network_connecting>

000d69b6 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d69b6:	2200      	movs	r2, #0
   d69b8:	6840      	ldr	r0, [r0, #4]
   d69ba:	4611      	mov	r1, r2
   d69bc:	f7fe b976 	b.w	d4cac <network_ready>

000d69c0 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d69c0:	2300      	movs	r3, #0
   d69c2:	6840      	ldr	r0, [r0, #4]
   d69c4:	461a      	mov	r2, r3
   d69c6:	4619      	mov	r1, r3
   d69c8:	f7fe b978 	b.w	d4cbc <network_on>

000d69cc <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d69cc:	2300      	movs	r3, #0
   d69ce:	6840      	ldr	r0, [r0, #4]
   d69d0:	461a      	mov	r2, r3
   d69d2:	4619      	mov	r1, r3
   d69d4:	f7fe b97a 	b.w	d4ccc <network_off>

000d69d8 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   d69d8:	6840      	ldr	r0, [r0, #4]
   d69da:	2100      	movs	r1, #0
   d69dc:	f7fe b99e 	b.w	d4d1c <network_is_on>

000d69e0 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   d69e0:	6840      	ldr	r0, [r0, #4]
   d69e2:	2100      	movs	r1, #0
   d69e4:	f7fe b9a2 	b.w	d4d2c <network_is_off>

000d69e8 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d69e8:	6840      	ldr	r0, [r0, #4]
   d69ea:	2200      	movs	r2, #0
   d69ec:	f081 0101 	eor.w	r1, r1, #1
   d69f0:	f7fe b974 	b.w	d4cdc <network_listen>

000d69f4 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d69f4:	6840      	ldr	r0, [r0, #4]
   d69f6:	2200      	movs	r2, #0
   d69f8:	f7fe b980 	b.w	d4cfc <network_set_listen_timeout>

000d69fc <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d69fc:	2200      	movs	r2, #0
   d69fe:	6840      	ldr	r0, [r0, #4]
   d6a00:	4611      	mov	r1, r2
   d6a02:	f7fe b983 	b.w	d4d0c <network_get_listen_timeout>

000d6a06 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d6a06:	2200      	movs	r2, #0
   d6a08:	6840      	ldr	r0, [r0, #4]
   d6a0a:	4611      	mov	r1, r2
   d6a0c:	f7fe b96e 	b.w	d4cec <network_listening>

000d6a10 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d6a10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d6a14:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d6a16:	b095      	sub	sp, #84	; 0x54
   d6a18:	4616      	mov	r6, r2
   d6a1a:	460d      	mov	r5, r1
   d6a1c:	4607      	mov	r7, r0
    IPAddress addr;
   d6a1e:	f7fe fdef 	bl	d5600 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d6a22:	4621      	mov	r1, r4
   d6a24:	2218      	movs	r2, #24
   d6a26:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d6a28:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d6a2a:	f000 fec9 	bl	d77c0 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d6a2e:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d6a30:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d6a34:	4621      	mov	r1, r4
   d6a36:	466b      	mov	r3, sp
   d6a38:	aa0c      	add	r2, sp, #48	; 0x30
   d6a3a:	4630      	mov	r0, r6
   d6a3c:	f7fd fffa 	bl	d4a34 <netdb_getaddrinfo>
    if (!r) {
   d6a40:	4604      	mov	r4, r0
   d6a42:	2800      	cmp	r0, #0
   d6a44:	d14c      	bne.n	d6ae0 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d6a46:	4602      	mov	r2, r0
   d6a48:	2101      	movs	r1, #1
   d6a4a:	6868      	ldr	r0, [r5, #4]
   d6a4c:	f7fe f92e 	bl	d4cac <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6a50:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d6a52:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6a54:	4622      	mov	r2, r4
   d6a56:	6868      	ldr	r0, [r5, #4]
   d6a58:	f7fe f928 	bl	d4cac <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6a5c:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6a5e:	4681      	mov	r9, r0
        bool ok = false;
   d6a60:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6a62:	2e00      	cmp	r6, #0
   d6a64:	d03c      	beq.n	d6ae0 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
   d6a66:	2900      	cmp	r1, #0
   d6a68:	d13a      	bne.n	d6ae0 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d6a6a:	6873      	ldr	r3, [r6, #4]
   d6a6c:	2b02      	cmp	r3, #2
   d6a6e:	d003      	beq.n	d6a78 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d6a70:	2b0a      	cmp	r3, #10
   d6a72:	d011      	beq.n	d6a98 <_ZN5spark12NetworkClass7resolveEPKc+0x88>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6a74:	69f6      	ldr	r6, [r6, #28]
   d6a76:	e7f4      	b.n	d6a62 <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d6a78:	f1b8 0f00 	cmp.w	r8, #0
   d6a7c:	d00a      	beq.n	d6a94 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d6a7e:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   d6a80:	a806      	add	r0, sp, #24
   d6a82:	3104      	adds	r1, #4
class IPAddress : public Printable {
   d6a84:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   d6a86:	f7fe fde9 	bl	d565c <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   d6a8a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6a8c:	1d3c      	adds	r4, r7, #4
   d6a8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6a90:	682b      	ldr	r3, [r5, #0]
   d6a92:	7023      	strb	r3, [r4, #0]
    virtual ~IPAddress() {}
   d6a94:	4641      	mov	r1, r8
   d6a96:	e7ed      	b.n	d6a74 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d6a98:	f1b9 0f00 	cmp.w	r9, #0
   d6a9c:	d101      	bne.n	d6aa2 <_ZN5spark12NetworkClass7resolveEPKc+0x92>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d6a9e:	4649      	mov	r1, r9
   d6aa0:	e7e8      	b.n	d6a74 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d6aa2:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d6aa4:	2210      	movs	r2, #16
   d6aa6:	a801      	add	r0, sp, #4
   d6aa8:	f000 fe8a 	bl	d77c0 <memset>
                    a.v = 6;
   d6aac:	2306      	movs	r3, #6
   d6aae:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d6ab2:	ad01      	add	r5, sp, #4
   d6ab4:	f104 0308 	add.w	r3, r4, #8
   d6ab8:	3418      	adds	r4, #24
   d6aba:	6818      	ldr	r0, [r3, #0]
   d6abc:	6859      	ldr	r1, [r3, #4]
   d6abe:	462a      	mov	r2, r5
   d6ac0:	c203      	stmia	r2!, {r0, r1}
   d6ac2:	3308      	adds	r3, #8
   d6ac4:	42a3      	cmp	r3, r4
   d6ac6:	4615      	mov	r5, r2
   d6ac8:	d1f7      	bne.n	d6aba <_ZN5spark12NetworkClass7resolveEPKc+0xaa>
                    addr = IPAddress(a);
   d6aca:	a901      	add	r1, sp, #4
   d6acc:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d6ace:	ad07      	add	r5, sp, #28
   d6ad0:	f7fe fda4 	bl	d561c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d6ad4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6ad6:	1d3c      	adds	r4, r7, #4
   d6ad8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6ada:	682b      	ldr	r3, [r5, #0]
   d6adc:	7023      	strb	r3, [r4, #0]
   d6ade:	e7de      	b.n	d6a9e <_ZN5spark12NetworkClass7resolveEPKc+0x8e>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d6ae0:	9800      	ldr	r0, [sp, #0]
   d6ae2:	f7fd ff9f 	bl	d4a24 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d6ae6:	4638      	mov	r0, r7
   d6ae8:	b015      	add	sp, #84	; 0x54
   d6aea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d6af0 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d6af0:	4b02      	ldr	r3, [pc, #8]	; (d6afc <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d6af2:	4a03      	ldr	r2, [pc, #12]	; (d6b00 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d6af4:	601a      	str	r2, [r3, #0]
   d6af6:	2200      	movs	r2, #0
   d6af8:	605a      	str	r2, [r3, #4]

} // spark
   d6afa:	4770      	bx	lr
   d6afc:	2003e75c 	.word	0x2003e75c
   d6b00:	000d7d88 	.word	0x000d7d88

000d6b04 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d6b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6b06:	4606      	mov	r6, r0
   d6b08:	460d      	mov	r5, r1
  size_t n = 0;
   d6b0a:	188f      	adds	r7, r1, r2
   d6b0c:	2400      	movs	r4, #0
  while (size--) {
   d6b0e:	42bd      	cmp	r5, r7
   d6b10:	d00c      	beq.n	d6b2c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d6b12:	6833      	ldr	r3, [r6, #0]
   d6b14:	f815 1b01 	ldrb.w	r1, [r5], #1
   d6b18:	689b      	ldr	r3, [r3, #8]
   d6b1a:	4630      	mov	r0, r6
   d6b1c:	4798      	blx	r3
     if (chunk>=0)
   d6b1e:	1e03      	subs	r3, r0, #0
   d6b20:	db01      	blt.n	d6b26 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d6b22:	441c      	add	r4, r3
  while (size--) {
   d6b24:	e7f3      	b.n	d6b0e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d6b26:	2c00      	cmp	r4, #0
   d6b28:	bf08      	it	eq
   d6b2a:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d6b2c:	4620      	mov	r0, r4
   d6b2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6b30 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   d6b30:	b513      	push	{r0, r1, r4, lr}
   d6b32:	4604      	mov	r4, r0
    }
   d6b34:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d6b36:	b159      	cbz	r1, d6b50 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d6b38:	9101      	str	r1, [sp, #4]
   d6b3a:	f000 feb4 	bl	d78a6 <strlen>
   d6b3e:	6823      	ldr	r3, [r4, #0]
   d6b40:	9901      	ldr	r1, [sp, #4]
   d6b42:	68db      	ldr	r3, [r3, #12]
   d6b44:	4602      	mov	r2, r0
   d6b46:	4620      	mov	r0, r4
    }
   d6b48:	b002      	add	sp, #8
   d6b4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d6b4e:	4718      	bx	r3
    }
   d6b50:	b002      	add	sp, #8
   d6b52:	bd10      	pop	{r4, pc}

000d6b54 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d6b54:	6803      	ldr	r3, [r0, #0]
   d6b56:	689b      	ldr	r3, [r3, #8]
   d6b58:	4718      	bx	r3

000d6b5a <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d6b5a:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d6b5c:	210d      	movs	r1, #13
{
   d6b5e:	4605      	mov	r5, r0
  size_t n = print('\r');
   d6b60:	f7ff fff8 	bl	d6b54 <_ZN5Print5printEc>
  n += print('\n');
   d6b64:	210a      	movs	r1, #10
  size_t n = print('\r');
   d6b66:	4604      	mov	r4, r0
  n += print('\n');
   d6b68:	4628      	mov	r0, r5
   d6b6a:	f7ff fff3 	bl	d6b54 <_ZN5Print5printEc>
  return n;
}
   d6b6e:	4420      	add	r0, r4
   d6b70:	bd38      	pop	{r3, r4, r5, pc}

000d6b72 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d6b72:	b530      	push	{r4, r5, lr}
   d6b74:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d6b76:	2300      	movs	r3, #0
   d6b78:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d6b7c:	2a01      	cmp	r2, #1
   d6b7e:	bf98      	it	ls
   d6b80:	220a      	movls	r2, #10
   d6b82:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d6b84:	460d      	mov	r5, r1
   d6b86:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d6b8a:	fb01 5312 	mls	r3, r1, r2, r5
   d6b8e:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d6b92:	2b09      	cmp	r3, #9
   d6b94:	bf94      	ite	ls
   d6b96:	3330      	addls	r3, #48	; 0x30
   d6b98:	3337      	addhi	r3, #55	; 0x37
   d6b9a:	b2db      	uxtb	r3, r3
  } while(n);
   d6b9c:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d6b9e:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d6ba2:	d9ef      	bls.n	d6b84 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d6ba4:	4621      	mov	r1, r4
   d6ba6:	f7ff ffc3 	bl	d6b30 <_ZN5Print5writeEPKc>
}
   d6baa:	b00b      	add	sp, #44	; 0x2c
   d6bac:	bd30      	pop	{r4, r5, pc}

000d6bae <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   d6bae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6bb2:	b086      	sub	sp, #24
   d6bb4:	af00      	add	r7, sp, #0
   d6bb6:	4605      	mov	r5, r0
   d6bb8:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   d6bba:	1d38      	adds	r0, r7, #4
   d6bbc:	2114      	movs	r1, #20
{
   d6bbe:	4614      	mov	r4, r2
    va_copy(args2, args);
   d6bc0:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   d6bc2:	f7fe f8d3 	bl	d4d6c <vsnprintf>

    if (n<bufsize)
   d6bc6:	2813      	cmp	r0, #19
   d6bc8:	d80e      	bhi.n	d6be8 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   d6bca:	1d39      	adds	r1, r7, #4
   d6bcc:	4628      	mov	r0, r5
   d6bce:	f7ff ffaf 	bl	d6b30 <_ZN5Print5writeEPKc>
   d6bd2:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   d6bd4:	b11e      	cbz	r6, d6bde <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   d6bd6:	4628      	mov	r0, r5
   d6bd8:	f7ff ffbf 	bl	d6b5a <_ZN5Print7printlnEv>
   d6bdc:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   d6bde:	4620      	mov	r0, r4
   d6be0:	3718      	adds	r7, #24
   d6be2:	46bd      	mov	sp, r7
   d6be4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   d6be8:	f100 0308 	add.w	r3, r0, #8
   d6bec:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   d6bf0:	46e8      	mov	r8, sp
        char bigger[n+1];
   d6bf2:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   d6bf6:	4622      	mov	r2, r4
   d6bf8:	1c41      	adds	r1, r0, #1
   d6bfa:	683b      	ldr	r3, [r7, #0]
   d6bfc:	4668      	mov	r0, sp
   d6bfe:	f7fe f8b5 	bl	d4d6c <vsnprintf>
  return write(str);
   d6c02:	4669      	mov	r1, sp
   d6c04:	4628      	mov	r0, r5
   d6c06:	f7ff ff93 	bl	d6b30 <_ZN5Print5writeEPKc>
   d6c0a:	4604      	mov	r4, r0
   d6c0c:	46c5      	mov	sp, r8
   d6c0e:	e7e1      	b.n	d6bd4 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000d6c10 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d6c10:	b510      	push	{r4, lr}
   d6c12:	4604      	mov	r4, r0
   d6c14:	f7fe f902 	bl	d4e1c <_ZNSt14_Function_baseD1Ev>
   d6c18:	4620      	mov	r0, r4
   d6c1a:	bd10      	pop	{r4, pc}

000d6c1c <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d6c1c:	4803      	ldr	r0, [pc, #12]	; (d6c2c <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d6c1e:	4a04      	ldr	r2, [pc, #16]	; (d6c30 <_GLOBAL__sub_I_RGB+0x14>)
   d6c20:	4904      	ldr	r1, [pc, #16]	; (d6c34 <_GLOBAL__sub_I_RGB+0x18>)
   d6c22:	2300      	movs	r3, #0
   d6c24:	6083      	str	r3, [r0, #8]
   d6c26:	f000 bbcb 	b.w	d73c0 <__aeabi_atexit>
   d6c2a:	bf00      	nop
   d6c2c:	2003e764 	.word	0x2003e764
   d6c30:	2003e63c 	.word	0x2003e63c
   d6c34:	000d6c11 	.word	0x000d6c11

000d6c38 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d6c38:	b510      	push	{r4, lr}
   d6c3a:	4604      	mov	r4, r0
   d6c3c:	4608      	mov	r0, r1
{
    _spi = spi;
   d6c3e:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d6c40:	f7fd ff00 	bl	d4a44 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d6c44:	2300      	movs	r3, #0
   d6c46:	6063      	str	r3, [r4, #4]
}
   d6c48:	4620      	mov	r0, r4
   d6c4a:	bd10      	pop	{r4, pc}

000d6c4c <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d6c4c:	b510      	push	{r4, lr}
   d6c4e:	4604      	mov	r4, r0
{
	free(buffer);
   d6c50:	6800      	ldr	r0, [r0, #0]
   d6c52:	f7fe f87b 	bl	d4d4c <free>
}
   d6c56:	4620      	mov	r0, r4
   d6c58:	bd10      	pop	{r4, pc}

000d6c5a <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d6c5a:	b510      	push	{r4, lr}
   d6c5c:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d6c5e:	6800      	ldr	r0, [r0, #0]
   d6c60:	b108      	cbz	r0, d6c66 <_ZN6String10invalidateEv+0xc>
   d6c62:	f7fe f873 	bl	d4d4c <free>
	buffer = NULL;
   d6c66:	2300      	movs	r3, #0
	capacity = len = 0;
   d6c68:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   d6c6c:	6023      	str	r3, [r4, #0]
}
   d6c6e:	bd10      	pop	{r4, pc}

000d6c70 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d6c70:	b538      	push	{r3, r4, r5, lr}
   d6c72:	4604      	mov	r4, r0
   d6c74:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d6c76:	6800      	ldr	r0, [r0, #0]
   d6c78:	3101      	adds	r1, #1
   d6c7a:	f7fe f86f 	bl	d4d5c <realloc>
	if (newbuffer) {
   d6c7e:	b110      	cbz	r0, d6c86 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d6c80:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   d6c84:	2001      	movs	r0, #1
	}
	return 0;
}
   d6c86:	bd38      	pop	{r3, r4, r5, pc}

000d6c88 <_ZN6String7reserveEj>:
{
   d6c88:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d6c8a:	6803      	ldr	r3, [r0, #0]
{
   d6c8c:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d6c8e:	b123      	cbz	r3, d6c9a <_ZN6String7reserveEj+0x12>
   d6c90:	6843      	ldr	r3, [r0, #4]
   d6c92:	428b      	cmp	r3, r1
   d6c94:	d301      	bcc.n	d6c9a <_ZN6String7reserveEj+0x12>
   d6c96:	2001      	movs	r0, #1
}
   d6c98:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   d6c9a:	4620      	mov	r0, r4
   d6c9c:	f7ff ffe8 	bl	d6c70 <_ZN6String12changeBufferEj>
   d6ca0:	2800      	cmp	r0, #0
   d6ca2:	d0f9      	beq.n	d6c98 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   d6ca4:	68a3      	ldr	r3, [r4, #8]
   d6ca6:	2b00      	cmp	r3, #0
   d6ca8:	d1f5      	bne.n	d6c96 <_ZN6String7reserveEj+0xe>
   d6caa:	6822      	ldr	r2, [r4, #0]
   d6cac:	7013      	strb	r3, [r2, #0]
   d6cae:	e7f2      	b.n	d6c96 <_ZN6String7reserveEj+0xe>

000d6cb0 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d6cb0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d6cb2:	460d      	mov	r5, r1
	if (!reserve(length)) {
   d6cb4:	4611      	mov	r1, r2
   d6cb6:	9201      	str	r2, [sp, #4]
{
   d6cb8:	4604      	mov	r4, r0
	if (!reserve(length)) {
   d6cba:	f7ff ffe5 	bl	d6c88 <_ZN6String7reserveEj>
   d6cbe:	9a01      	ldr	r2, [sp, #4]
   d6cc0:	b928      	cbnz	r0, d6cce <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   d6cc2:	4620      	mov	r0, r4
   d6cc4:	f7ff ffc9 	bl	d6c5a <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   d6cc8:	4620      	mov	r0, r4
   d6cca:	b003      	add	sp, #12
   d6ccc:	bd30      	pop	{r4, r5, pc}
	len = length;
   d6cce:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   d6cd0:	4629      	mov	r1, r5
   d6cd2:	6820      	ldr	r0, [r4, #0]
   d6cd4:	f000 fd4c 	bl	d7770 <memcpy>
	buffer[len] = 0;
   d6cd8:	6822      	ldr	r2, [r4, #0]
   d6cda:	68a3      	ldr	r3, [r4, #8]
   d6cdc:	2100      	movs	r1, #0
   d6cde:	54d1      	strb	r1, [r2, r3]
	return *this;
   d6ce0:	e7f2      	b.n	d6cc8 <_ZN6String4copyEPKcj+0x18>

000d6ce2 <_ZN6StringC1EPKc>:
	buffer = NULL;
   d6ce2:	2300      	movs	r3, #0
String::String(const char *cstr)
   d6ce4:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   d6ce6:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const char *cstr)
   d6cea:	4604      	mov	r4, r0
	len = 0;
   d6cec:	6083      	str	r3, [r0, #8]
	flags = 0;
   d6cee:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   d6cf0:	b141      	cbz	r1, d6d04 <_ZN6StringC1EPKc+0x22>
   d6cf2:	4608      	mov	r0, r1
   d6cf4:	9101      	str	r1, [sp, #4]
   d6cf6:	f000 fdd6 	bl	d78a6 <strlen>
   d6cfa:	9901      	ldr	r1, [sp, #4]
   d6cfc:	4602      	mov	r2, r0
   d6cfe:	4620      	mov	r0, r4
   d6d00:	f7ff ffd6 	bl	d6cb0 <_ZN6String4copyEPKcj>
}
   d6d04:	4620      	mov	r0, r4
   d6d06:	b002      	add	sp, #8
   d6d08:	bd10      	pop	{r4, pc}

000d6d0a <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   d6d0a:	b538      	push	{r3, r4, r5, lr}
   d6d0c:	4605      	mov	r5, r0
	if (buffer) {
   d6d0e:	6800      	ldr	r0, [r0, #0]
{
   d6d10:	460c      	mov	r4, r1
	if (buffer) {
   d6d12:	b168      	cbz	r0, d6d30 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   d6d14:	686a      	ldr	r2, [r5, #4]
   d6d16:	688b      	ldr	r3, [r1, #8]
   d6d18:	429a      	cmp	r2, r3
   d6d1a:	d307      	bcc.n	d6d2c <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   d6d1c:	6809      	ldr	r1, [r1, #0]
   d6d1e:	f000 fd9c 	bl	d785a <strcpy>
			len = rhs.len;
   d6d22:	68a3      	ldr	r3, [r4, #8]
   d6d24:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   d6d26:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   d6d28:	60a3      	str	r3, [r4, #8]
}
   d6d2a:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   d6d2c:	f7fe f80e 	bl	d4d4c <free>
	buffer = rhs.buffer;
   d6d30:	6823      	ldr	r3, [r4, #0]
   d6d32:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   d6d34:	6863      	ldr	r3, [r4, #4]
   d6d36:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   d6d38:	68a3      	ldr	r3, [r4, #8]
   d6d3a:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   d6d3c:	2300      	movs	r3, #0
	rhs.capacity = 0;
   d6d3e:	e9c4 3300 	strd	r3, r3, [r4]
   d6d42:	e7f1      	b.n	d6d28 <_ZN6String4moveERS_+0x1e>

000d6d44 <_ZN6StringC1EOS_>:
String::String(String &&rval)
   d6d44:	b510      	push	{r4, lr}
	buffer = NULL;
   d6d46:	2300      	movs	r3, #0
	capacity = 0;
   d6d48:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   d6d4c:	4604      	mov	r4, r0
	len = 0;
   d6d4e:	6083      	str	r3, [r0, #8]
	flags = 0;
   d6d50:	7303      	strb	r3, [r0, #12]
	move(rval);
   d6d52:	f7ff ffda 	bl	d6d0a <_ZN6String4moveERS_>
}
   d6d56:	4620      	mov	r0, r4
   d6d58:	bd10      	pop	{r4, pc}

000d6d5a <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d6d5a:	4288      	cmp	r0, r1
{
   d6d5c:	b510      	push	{r4, lr}
   d6d5e:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d6d60:	d005      	beq.n	d6d6e <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d6d62:	680b      	ldr	r3, [r1, #0]
   d6d64:	b12b      	cbz	r3, d6d72 <_ZN6StringaSERKS_+0x18>
   d6d66:	688a      	ldr	r2, [r1, #8]
   d6d68:	4619      	mov	r1, r3
   d6d6a:	f7ff ffa1 	bl	d6cb0 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d6d6e:	4620      	mov	r0, r4
   d6d70:	bd10      	pop	{r4, pc}
	else invalidate();
   d6d72:	f7ff ff72 	bl	d6c5a <_ZN6String10invalidateEv>
   d6d76:	e7fa      	b.n	d6d6e <_ZN6StringaSERKS_+0x14>

000d6d78 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   d6d78:	b510      	push	{r4, lr}
	buffer = NULL;
   d6d7a:	2300      	movs	r3, #0
String::String(const String &value)
   d6d7c:	4604      	mov	r4, r0
	capacity = 0;
   d6d7e:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   d6d82:	6083      	str	r3, [r0, #8]
	flags = 0;
   d6d84:	7303      	strb	r3, [r0, #12]
	*this = value;
   d6d86:	f7ff ffe8 	bl	d6d5a <_ZN6StringaSERKS_>
}
   d6d8a:	4620      	mov	r0, r4
   d6d8c:	bd10      	pop	{r4, pc}

000d6d8e <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d6d8e:	b513      	push	{r0, r1, r4, lr}
   d6d90:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   d6d92:	b159      	cbz	r1, d6dac <_ZN6StringaSEPKc+0x1e>
   d6d94:	4608      	mov	r0, r1
   d6d96:	9101      	str	r1, [sp, #4]
   d6d98:	f000 fd85 	bl	d78a6 <strlen>
   d6d9c:	9901      	ldr	r1, [sp, #4]
   d6d9e:	4602      	mov	r2, r0
   d6da0:	4620      	mov	r0, r4
   d6da2:	f7ff ff85 	bl	d6cb0 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d6da6:	4620      	mov	r0, r4
   d6da8:	b002      	add	sp, #8
   d6daa:	bd10      	pop	{r4, pc}
	else invalidate();
   d6dac:	f7ff ff55 	bl	d6c5a <_ZN6String10invalidateEv>
   d6db0:	e7f9      	b.n	d6da6 <_ZN6StringaSEPKc+0x18>

000d6db2 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   d6db2:	b570      	push	{r4, r5, r6, lr}
   d6db4:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   d6db6:	460e      	mov	r6, r1
   d6db8:	b909      	cbnz	r1, d6dbe <_ZN6String6concatEPKcj+0xc>
   d6dba:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   d6dbc:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   d6dbe:	b16a      	cbz	r2, d6ddc <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   d6dc0:	6884      	ldr	r4, [r0, #8]
   d6dc2:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   d6dc4:	4621      	mov	r1, r4
   d6dc6:	f7ff ff5f 	bl	d6c88 <_ZN6String7reserveEj>
   d6dca:	2800      	cmp	r0, #0
   d6dcc:	d0f5      	beq.n	d6dba <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   d6dce:	6828      	ldr	r0, [r5, #0]
   d6dd0:	68ab      	ldr	r3, [r5, #8]
   d6dd2:	4631      	mov	r1, r6
   d6dd4:	4418      	add	r0, r3
   d6dd6:	f000 fd40 	bl	d785a <strcpy>
	len = newlen;
   d6dda:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   d6ddc:	2001      	movs	r0, #1
   d6dde:	e7ed      	b.n	d6dbc <_ZN6String6concatEPKcj+0xa>

000d6de0 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   d6de0:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   d6de2:	688a      	ldr	r2, [r1, #8]
   d6de4:	6809      	ldr	r1, [r1, #0]
{
   d6de6:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   d6de8:	f7ff ffe3 	bl	d6db2 <_ZN6String6concatEPKcj>
   d6dec:	b910      	cbnz	r0, d6df4 <_ZplRK15StringSumHelperRK6String+0x14>
   d6dee:	4620      	mov	r0, r4
   d6df0:	f7ff ff33 	bl	d6c5a <_ZN6String10invalidateEv>
	return a;
}
   d6df4:	4620      	mov	r0, r4
   d6df6:	bd10      	pop	{r4, pc}

000d6df8 <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   d6df8:	b513      	push	{r0, r1, r4, lr}
   d6dfa:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   d6dfc:	b929      	cbnz	r1, d6e0a <_ZplRK15StringSumHelperPKc+0x12>
   d6dfe:	4620      	mov	r0, r4
   d6e00:	f7ff ff2b 	bl	d6c5a <_ZN6String10invalidateEv>
	return a;
}
   d6e04:	4620      	mov	r0, r4
   d6e06:	b002      	add	sp, #8
   d6e08:	bd10      	pop	{r4, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   d6e0a:	4608      	mov	r0, r1
   d6e0c:	9101      	str	r1, [sp, #4]
   d6e0e:	f000 fd4a 	bl	d78a6 <strlen>
   d6e12:	9901      	ldr	r1, [sp, #4]
   d6e14:	4602      	mov	r2, r0
   d6e16:	4620      	mov	r0, r4
   d6e18:	f7ff ffcb 	bl	d6db2 <_ZN6String6concatEPKcj>
   d6e1c:	2800      	cmp	r0, #0
   d6e1e:	d0ee      	beq.n	d6dfe <_ZplRK15StringSumHelperPKc+0x6>
   d6e20:	e7f0      	b.n	d6e04 <_ZplRK15StringSumHelperPKc+0xc>
	...

000d6e24 <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
   d6e24:	b40e      	push	{r1, r2, r3}
   d6e26:	b570      	push	{r4, r5, r6, lr}
   d6e28:	b087      	sub	sp, #28
   d6e2a:	ad0b      	add	r5, sp, #44	; 0x2c
   d6e2c:	4604      	mov	r4, r0
   d6e2e:	f855 2b04 	ldr.w	r2, [r5], #4
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   d6e32:	9201      	str	r2, [sp, #4]
   d6e34:	462b      	mov	r3, r5
   d6e36:	2105      	movs	r1, #5
   d6e38:	a804      	add	r0, sp, #16
    va_start(marker, fmt);
   d6e3a:	9503      	str	r5, [sp, #12]
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   d6e3c:	f7fd ff96 	bl	d4d6c <vsnprintf>
    va_end(marker);

    String result;
   d6e40:	490b      	ldr	r1, [pc, #44]	; (d6e70 <_ZN6String6formatEPKcz+0x4c>)
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   d6e42:	4606      	mov	r6, r0
    String result;
   d6e44:	4620      	mov	r0, r4
   d6e46:	f7ff ff4c 	bl	d6ce2 <_ZN6StringC1EPKc>
    result.reserve(n);  // internally adds +1 for null terminator
   d6e4a:	4631      	mov	r1, r6
   d6e4c:	4620      	mov	r0, r4
   d6e4e:	f7ff ff1b 	bl	d6c88 <_ZN6String7reserveEj>
    if (result.buffer) {
   d6e52:	6820      	ldr	r0, [r4, #0]
   d6e54:	b130      	cbz	r0, d6e64 <_ZN6String6formatEPKcz+0x40>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   d6e56:	9a01      	ldr	r2, [sp, #4]
        va_start(marker, fmt);
   d6e58:	9503      	str	r5, [sp, #12]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   d6e5a:	462b      	mov	r3, r5
   d6e5c:	1c71      	adds	r1, r6, #1
   d6e5e:	f7fd ff85 	bl	d4d6c <vsnprintf>
        va_end(marker);
        result.len = n;
   d6e62:	60a0      	str	r0, [r4, #8]
    }
    return result;
}
   d6e64:	4620      	mov	r0, r4
   d6e66:	b007      	add	sp, #28
   d6e68:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d6e6c:	b003      	add	sp, #12
   d6e6e:	4770      	bx	lr
   d6e70:	000d7cef 	.word	0x000d7cef

000d6e74 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d6e74:	b510      	push	{r4, lr}
   d6e76:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d6e78:	6800      	ldr	r0, [r0, #0]
   d6e7a:	b118      	cbz	r0, d6e84 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
   d6e7c:	f7fd ff66 	bl	d4d4c <free>
            wakeupSource_ = nullptr;
   d6e80:	2300      	movs	r3, #0
   d6e82:	6023      	str	r3, [r4, #0]
        }
    }
   d6e84:	bd10      	pop	{r4, pc}

000d6e86 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d6e86:	b510      	push	{r4, lr}
   d6e88:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
   d6e8a:	f7ff fff3 	bl	d6e74 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
class SystemClass {
   d6e8e:	4620      	mov	r0, r4
   d6e90:	bd10      	pop	{r4, pc}
	...

000d6e94 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d6e94:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d6e96:	4b09      	ldr	r3, [pc, #36]	; (d6ebc <_GLOBAL__sub_I_System+0x28>)
              error_(SYSTEM_ERROR_NONE) {
   d6e98:	4c09      	ldr	r4, [pc, #36]	; (d6ec0 <_GLOBAL__sub_I_System+0x2c>)
   d6e9a:	2202      	movs	r2, #2
   d6e9c:	2000      	movs	r0, #0
   d6e9e:	601a      	str	r2, [r3, #0]
    SleepResult() {}
   d6ea0:	4b08      	ldr	r3, [pc, #32]	; (d6ec4 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
   d6ea2:	6020      	str	r0, [r4, #0]
   d6ea4:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
   d6ea6:	71a0      	strb	r0, [r4, #6]
   d6ea8:	60a3      	str	r3, [r4, #8]
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d6eaa:	f7fd fe8b 	bl	d4bc4 <set_system_mode>
SystemClass System;
   d6eae:	4620      	mov	r0, r4
   d6eb0:	4a05      	ldr	r2, [pc, #20]	; (d6ec8 <_GLOBAL__sub_I_System+0x34>)
   d6eb2:	4906      	ldr	r1, [pc, #24]	; (d6ecc <_GLOBAL__sub_I_System+0x38>)
   d6eb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   d6eb8:	f000 ba82 	b.w	d73c0 <__aeabi_atexit>
   d6ebc:	2003e780 	.word	0x2003e780
   d6ec0:	2003e774 	.word	0x2003e774
   d6ec4:	ffff0000 	.word	0xffff0000
   d6ec8:	2003e63c 	.word	0x2003e63c
   d6ecc:	000d6e87 	.word	0x000d6e87

000d6ed0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d6ed0:	4b02      	ldr	r3, [pc, #8]	; (d6edc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d6ed2:	681a      	ldr	r2, [r3, #0]
   d6ed4:	4b02      	ldr	r3, [pc, #8]	; (d6ee0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d6ed6:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d6ed8:	4770      	bx	lr
   d6eda:	bf00      	nop
   d6edc:	2003e5d4 	.word	0x2003e5d4
   d6ee0:	2003e784 	.word	0x2003e784

000d6ee4 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d6ee4:	4770      	bx	lr

000d6ee6 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d6ee6:	7441      	strb	r1, [r0, #17]
}
   d6ee8:	4770      	bx	lr

000d6eea <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   d6eea:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d6eec:	7c00      	ldrb	r0, [r0, #16]
   d6eee:	f7fd fdf9 	bl	d4ae4 <hal_usart_available_data_for_write>
}
   d6ef2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6ef6:	bd08      	pop	{r3, pc}

000d6ef8 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d6ef8:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d6efa:	7c00      	ldrb	r0, [r0, #16]
   d6efc:	f7fd fdca 	bl	d4a94 <hal_usart_available>
}
   d6f00:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6f04:	bd08      	pop	{r3, pc}

000d6f06 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d6f06:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d6f08:	7c00      	ldrb	r0, [r0, #16]
   d6f0a:	f7fd fdd3 	bl	d4ab4 <hal_usart_peek>
}
   d6f0e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d6f12:	bd08      	pop	{r3, pc}

000d6f14 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d6f14:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d6f16:	7c00      	ldrb	r0, [r0, #16]
   d6f18:	f7fd fdc4 	bl	d4aa4 <hal_usart_read>
}
   d6f1c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d6f20:	bd08      	pop	{r3, pc}

000d6f22 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   d6f22:	7c00      	ldrb	r0, [r0, #16]
   d6f24:	f7fd bdce 	b.w	d4ac4 <hal_usart_flush>

000d6f28 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d6f28:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d6f2a:	7c45      	ldrb	r5, [r0, #17]
{
   d6f2c:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d6f2e:	b12d      	cbz	r5, d6f3c <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   d6f30:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d6f32:	b003      	add	sp, #12
   d6f34:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d6f38:	f7fd bda4 	b.w	d4a84 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d6f3c:	7c00      	ldrb	r0, [r0, #16]
   d6f3e:	9101      	str	r1, [sp, #4]
   d6f40:	f7fd fdd0 	bl	d4ae4 <hal_usart_available_data_for_write>
   d6f44:	2800      	cmp	r0, #0
   d6f46:	9901      	ldr	r1, [sp, #4]
   d6f48:	dcf2      	bgt.n	d6f30 <_ZN11USARTSerial5writeEh+0x8>
}
   d6f4a:	4628      	mov	r0, r5
   d6f4c:	b003      	add	sp, #12
   d6f4e:	bd30      	pop	{r4, r5, pc}

000d6f50 <_ZN11USARTSerialD0Ev>:
   d6f50:	b510      	push	{r4, lr}
   d6f52:	2114      	movs	r1, #20
   d6f54:	4604      	mov	r4, r0
   d6f56:	f000 fa38 	bl	d73ca <_ZdlPvj>
   d6f5a:	4620      	mov	r0, r4
   d6f5c:	bd10      	pop	{r4, pc}
	...

000d6f60 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d6f60:	b510      	push	{r4, lr}
   d6f62:	f04f 0c00 	mov.w	ip, #0
   d6f66:	4604      	mov	r4, r0
   d6f68:	4608      	mov	r0, r1
   d6f6a:	4611      	mov	r1, r2
   d6f6c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d6f70:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d6f74:	4a04      	ldr	r2, [pc, #16]	; (d6f88 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d6f76:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d6f78:	2201      	movs	r2, #1
  _serial = serial;
   d6f7a:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d6f7c:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d6f7e:	461a      	mov	r2, r3
   d6f80:	f7fd fd70 	bl	d4a64 <hal_usart_init>
}
   d6f84:	4620      	mov	r0, r4
   d6f86:	bd10      	pop	{r4, pc}
   d6f88:	000d7de0 	.word	0x000d7de0

000d6f8c <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   d6f8c:	7c00      	ldrb	r0, [r0, #16]
   d6f8e:	2300      	movs	r3, #0
   d6f90:	f7fd bdb0 	b.w	d4af4 <hal_usart_begin_config>

000d6f94 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   d6f94:	2200      	movs	r2, #0
   d6f96:	f7ff bff9 	b.w	d6f8c <_ZN11USARTSerial5beginEmm>

000d6f9a <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
   d6f9a:	7c00      	ldrb	r0, [r0, #16]
   d6f9c:	f7fd bd6a 	b.w	d4a74 <hal_usart_end>

000d6fa0 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d6fa0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
#else
  if (!serial1_rx_buffer) {
   d6fa2:	4c1b      	ldr	r4, [pc, #108]	; (d7010 <_Z22__fetch_global_Serial1v+0x70>)
   d6fa4:	6826      	ldr	r6, [r4, #0]
   d6fa6:	b94e      	cbnz	r6, d6fbc <_Z22__fetch_global_Serial1v+0x1c>
    serial1_rx_buffer = new hal_usart_ring_buffer_t();
   d6fa8:	2084      	movs	r0, #132	; 0x84
   d6faa:	f7fd f872 	bl	d4092 <_Znwj>
   d6fae:	4605      	mov	r5, r0
   d6fb0:	b118      	cbz	r0, d6fba <_Z22__fetch_global_Serial1v+0x1a>
   d6fb2:	2284      	movs	r2, #132	; 0x84
   d6fb4:	4631      	mov	r1, r6
   d6fb6:	f000 fc03 	bl	d77c0 <memset>
   d6fba:	6025      	str	r5, [r4, #0]
  }
  if (!serial1_tx_buffer) {
   d6fbc:	4d15      	ldr	r5, [pc, #84]	; (d7014 <_Z22__fetch_global_Serial1v+0x74>)
   d6fbe:	682f      	ldr	r7, [r5, #0]
   d6fc0:	b94f      	cbnz	r7, d6fd6 <_Z22__fetch_global_Serial1v+0x36>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
   d6fc2:	2084      	movs	r0, #132	; 0x84
   d6fc4:	f7fd f865 	bl	d4092 <_Znwj>
   d6fc8:	4606      	mov	r6, r0
   d6fca:	b118      	cbz	r0, d6fd4 <_Z22__fetch_global_Serial1v+0x34>
   d6fcc:	2284      	movs	r2, #132	; 0x84
   d6fce:	4639      	mov	r1, r7
   d6fd0:	f000 fbf6 	bl	d77c0 <memset>
   d6fd4:	602e      	str	r6, [r5, #0]
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
   d6fd6:	4e10      	ldr	r6, [pc, #64]	; (d7018 <_Z22__fetch_global_Serial1v+0x78>)
   d6fd8:	7831      	ldrb	r1, [r6, #0]
   d6fda:	f3bf 8f5b 	dmb	ish
   d6fde:	f011 0101 	ands.w	r1, r1, #1
   d6fe2:	d112      	bne.n	d700a <_Z22__fetch_global_Serial1v+0x6a>
   d6fe4:	4630      	mov	r0, r6
   d6fe6:	9101      	str	r1, [sp, #4]
   d6fe8:	f7fd f864 	bl	d40b4 <__cxa_guard_acquire>
   d6fec:	9901      	ldr	r1, [sp, #4]
   d6fee:	b160      	cbz	r0, d700a <_Z22__fetch_global_Serial1v+0x6a>
   d6ff0:	6822      	ldr	r2, [r4, #0]
   d6ff2:	682b      	ldr	r3, [r5, #0]
   d6ff4:	4809      	ldr	r0, [pc, #36]	; (d701c <_Z22__fetch_global_Serial1v+0x7c>)
   d6ff6:	f7ff ffb3 	bl	d6f60 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d6ffa:	4630      	mov	r0, r6
   d6ffc:	f7fd f85f 	bl	d40be <__cxa_guard_release>
   d7000:	4a07      	ldr	r2, [pc, #28]	; (d7020 <_Z22__fetch_global_Serial1v+0x80>)
   d7002:	4908      	ldr	r1, [pc, #32]	; (d7024 <_Z22__fetch_global_Serial1v+0x84>)
   d7004:	4805      	ldr	r0, [pc, #20]	; (d701c <_Z22__fetch_global_Serial1v+0x7c>)
   d7006:	f000 f9db 	bl	d73c0 <__aeabi_atexit>
#endif
	return serial1;
}
   d700a:	4804      	ldr	r0, [pc, #16]	; (d701c <_Z22__fetch_global_Serial1v+0x7c>)
   d700c:	b003      	add	sp, #12
   d700e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d7010:	2003e78c 	.word	0x2003e78c
   d7014:	2003e790 	.word	0x2003e790
   d7018:	2003e788 	.word	0x2003e788
   d701c:	2003e794 	.word	0x2003e794
   d7020:	2003e63c 	.word	0x2003e63c
   d7024:	000d6ee5 	.word	0x000d6ee5

000d7028 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d7028:	7441      	strb	r1, [r0, #17]
}
   d702a:	4770      	bx	lr

000d702c <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d702c:	4770      	bx	lr

000d702e <_ZN9USBSerial4readEv>:
{
   d702e:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d7030:	2100      	movs	r1, #0
   d7032:	7c00      	ldrb	r0, [r0, #16]
   d7034:	f7fd fd8e 	bl	d4b54 <HAL_USB_USART_Receive_Data>
}
   d7038:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d703c:	bd08      	pop	{r3, pc}

000d703e <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   d703e:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d7040:	2101      	movs	r1, #1
   d7042:	7c00      	ldrb	r0, [r0, #16]
   d7044:	f7fd fd86 	bl	d4b54 <HAL_USB_USART_Receive_Data>
}
   d7048:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d704c:	bd08      	pop	{r3, pc}

000d704e <_ZN9USBSerial17availableForWriteEv>:
{
   d704e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d7050:	7c00      	ldrb	r0, [r0, #16]
   d7052:	f7fd fd77 	bl	d4b44 <HAL_USB_USART_Available_Data_For_Write>
}
   d7056:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d705a:	bd08      	pop	{r3, pc}

000d705c <_ZN9USBSerial9availableEv>:
{
   d705c:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d705e:	7c00      	ldrb	r0, [r0, #16]
   d7060:	f7fd fd68 	bl	d4b34 <HAL_USB_USART_Available_Data>
}
   d7064:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7068:	bd08      	pop	{r3, pc}

000d706a <_ZN9USBSerial5writeEh>:
{
   d706a:	b513      	push	{r0, r1, r4, lr}
   d706c:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d706e:	7c00      	ldrb	r0, [r0, #16]
{
   d7070:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d7072:	f7fd fd67 	bl	d4b44 <HAL_USB_USART_Available_Data_For_Write>
   d7076:	2800      	cmp	r0, #0
   d7078:	9901      	ldr	r1, [sp, #4]
   d707a:	dc01      	bgt.n	d7080 <_ZN9USBSerial5writeEh+0x16>
   d707c:	7c60      	ldrb	r0, [r4, #17]
   d707e:	b120      	cbz	r0, d708a <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d7080:	7c20      	ldrb	r0, [r4, #16]
   d7082:	f7fd fd6f 	bl	d4b64 <HAL_USB_USART_Send_Data>
   d7086:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d708a:	b002      	add	sp, #8
   d708c:	bd10      	pop	{r4, pc}

000d708e <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d708e:	7c00      	ldrb	r0, [r0, #16]
   d7090:	f7fd bd70 	b.w	d4b74 <HAL_USB_USART_Flush_Data>

000d7094 <_ZN9USBSerialD0Ev>:
   d7094:	b510      	push	{r4, lr}
   d7096:	2114      	movs	r1, #20
   d7098:	4604      	mov	r4, r0
   d709a:	f000 f996 	bl	d73ca <_ZdlPvj>
   d709e:	4620      	mov	r0, r4
   d70a0:	bd10      	pop	{r4, pc}
	...

000d70a4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d70a4:	b510      	push	{r4, lr}
   d70a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d70aa:	4604      	mov	r4, r0
   d70ac:	4608      	mov	r0, r1
   d70ae:	2100      	movs	r1, #0
   d70b0:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d70b4:	4b04      	ldr	r3, [pc, #16]	; (d70c8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d70b6:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d70b8:	2301      	movs	r3, #1
  _serial = serial;
   d70ba:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d70bc:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d70be:	4611      	mov	r1, r2
   d70c0:	f7fd fd20 	bl	d4b04 <HAL_USB_USART_Init>
}
   d70c4:	4620      	mov	r0, r4
   d70c6:	bd10      	pop	{r4, pc}
   d70c8:	000d7e10 	.word	0x000d7e10

000d70cc <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d70cc:	7c00      	ldrb	r0, [r0, #16]
   d70ce:	2200      	movs	r2, #0
   d70d0:	f7fd bd20 	b.w	d4b14 <HAL_USB_USART_Begin>

000d70d4 <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
   d70d4:	7c00      	ldrb	r0, [r0, #16]
   d70d6:	f7fd bd25 	b.w	d4b24 <HAL_USB_USART_End>

000d70da <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d70da:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d70dc:	2214      	movs	r2, #20
{
   d70de:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d70e0:	2100      	movs	r1, #0
   d70e2:	f000 fb6d 	bl	d77c0 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d70e6:	4620      	mov	r0, r4
   d70e8:	bd10      	pop	{r4, pc}
	...

000d70ec <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d70ec:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d70ee:	4c10      	ldr	r4, [pc, #64]	; (d7130 <_Z16_fetch_usbserialv+0x44>)
{
   d70f0:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d70f2:	a803      	add	r0, sp, #12
   d70f4:	f7ff fff1 	bl	d70da <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d70f8:	7821      	ldrb	r1, [r4, #0]
   d70fa:	f3bf 8f5b 	dmb	ish
   d70fe:	f011 0101 	ands.w	r1, r1, #1
   d7102:	d111      	bne.n	d7128 <_Z16_fetch_usbserialv+0x3c>
   d7104:	4620      	mov	r0, r4
   d7106:	9101      	str	r1, [sp, #4]
   d7108:	f7fc ffd4 	bl	d40b4 <__cxa_guard_acquire>
   d710c:	9901      	ldr	r1, [sp, #4]
   d710e:	b158      	cbz	r0, d7128 <_Z16_fetch_usbserialv+0x3c>
   d7110:	aa03      	add	r2, sp, #12
   d7112:	4808      	ldr	r0, [pc, #32]	; (d7134 <_Z16_fetch_usbserialv+0x48>)
   d7114:	f7ff ffc6 	bl	d70a4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d7118:	4620      	mov	r0, r4
   d711a:	f7fc ffd0 	bl	d40be <__cxa_guard_release>
   d711e:	4a06      	ldr	r2, [pc, #24]	; (d7138 <_Z16_fetch_usbserialv+0x4c>)
   d7120:	4906      	ldr	r1, [pc, #24]	; (d713c <_Z16_fetch_usbserialv+0x50>)
   d7122:	4804      	ldr	r0, [pc, #16]	; (d7134 <_Z16_fetch_usbserialv+0x48>)
   d7124:	f000 f94c 	bl	d73c0 <__aeabi_atexit>
	return _usbserial;
}
   d7128:	4802      	ldr	r0, [pc, #8]	; (d7134 <_Z16_fetch_usbserialv+0x48>)
   d712a:	b008      	add	sp, #32
   d712c:	bd10      	pop	{r4, pc}
   d712e:	bf00      	nop
   d7130:	2003e7a8 	.word	0x2003e7a8
   d7134:	2003e7ac 	.word	0x2003e7ac
   d7138:	2003e63c 	.word	0x2003e63c
   d713c:	000d702d 	.word	0x000d702d

000d7140 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d7140:	4b01      	ldr	r3, [pc, #4]	; (d7148 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d7142:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d7144:	4770      	bx	lr
   d7146:	bf00      	nop
   d7148:	2003e5d8 	.word	0x2003e5d8

000d714c <serialEventRun>:
{
   d714c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d714e:	4b0b      	ldr	r3, [pc, #44]	; (d717c <serialEventRun+0x30>)
   d7150:	b143      	cbz	r3, d7164 <serialEventRun+0x18>
   d7152:	f7ff ffcb 	bl	d70ec <_Z16_fetch_usbserialv>
   d7156:	6803      	ldr	r3, [r0, #0]
   d7158:	691b      	ldr	r3, [r3, #16]
   d715a:	4798      	blx	r3
   d715c:	2800      	cmp	r0, #0
   d715e:	dd01      	ble.n	d7164 <serialEventRun+0x18>
        serialEvent();
   d7160:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d7164:	4b06      	ldr	r3, [pc, #24]	; (d7180 <serialEventRun+0x34>)
   d7166:	b143      	cbz	r3, d717a <serialEventRun+0x2e>
   d7168:	f7ff ff1a 	bl	d6fa0 <_Z22__fetch_global_Serial1v>
   d716c:	6803      	ldr	r3, [r0, #0]
   d716e:	691b      	ldr	r3, [r3, #16]
   d7170:	4798      	blx	r3
   d7172:	2800      	cmp	r0, #0
   d7174:	dd01      	ble.n	d717a <serialEventRun+0x2e>
        serialEvent1();
   d7176:	f3af 8000 	nop.w
}
   d717a:	bd08      	pop	{r3, pc}
	...

000d7184 <_post_loop>:
{
   d7184:	b508      	push	{r3, lr}
	serialEventRun();
   d7186:	f7ff ffe1 	bl	d714c <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d718a:	f7fd fbe3 	bl	d4954 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d718e:	4b01      	ldr	r3, [pc, #4]	; (d7194 <_post_loop+0x10>)
   d7190:	6018      	str	r0, [r3, #0]
}
   d7192:	bd08      	pop	{r3, pc}
   d7194:	2003e7d4 	.word	0x2003e7d4

000d7198 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d7198:	4802      	ldr	r0, [pc, #8]	; (d71a4 <_Z33system_initialize_user_backup_ramv+0xc>)
   d719a:	4a03      	ldr	r2, [pc, #12]	; (d71a8 <_Z33system_initialize_user_backup_ramv+0x10>)
   d719c:	4903      	ldr	r1, [pc, #12]	; (d71ac <_Z33system_initialize_user_backup_ramv+0x14>)
   d719e:	1a12      	subs	r2, r2, r0
   d71a0:	f000 bae6 	b.w	d7770 <memcpy>
   d71a4:	2003f400 	.word	0x2003f400
   d71a8:	2003f404 	.word	0x2003f404
   d71ac:	000d7f60 	.word	0x000d7f60

000d71b0 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d71b0:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d71b2:	2300      	movs	r3, #0
   d71b4:	9300      	str	r3, [sp, #0]
   d71b6:	461a      	mov	r2, r3
   d71b8:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d71bc:	f7fd fd2c 	bl	d4c18 <system_ctrl_set_result>
}
   d71c0:	b003      	add	sp, #12
   d71c2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d71c8 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d71c8:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d71ca:	8843      	ldrh	r3, [r0, #2]
   d71cc:	2b0a      	cmp	r3, #10
   d71ce:	d008      	beq.n	d71e2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d71d0:	2b50      	cmp	r3, #80	; 0x50
   d71d2:	d10b      	bne.n	d71ec <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d71d4:	4b09      	ldr	r3, [pc, #36]	; (d71fc <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d71d6:	681b      	ldr	r3, [r3, #0]
   d71d8:	b14b      	cbz	r3, d71ee <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d71da:	b003      	add	sp, #12
   d71dc:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d71e0:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d71e2:	f7ff ffe5 	bl	d71b0 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d71e6:	b003      	add	sp, #12
   d71e8:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d71ec:	2300      	movs	r3, #0
   d71ee:	9300      	str	r3, [sp, #0]
   d71f0:	461a      	mov	r2, r3
   d71f2:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d71f6:	f7fd fd0f 	bl	d4c18 <system_ctrl_set_result>
}
   d71fa:	e7f4      	b.n	d71e6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d71fc:	2003e7c4 	.word	0x2003e7c4

000d7200 <module_user_init_hook>:
{
   d7200:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d7202:	4c12      	ldr	r4, [pc, #72]	; (d724c <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d7204:	4812      	ldr	r0, [pc, #72]	; (d7250 <module_user_init_hook+0x50>)
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d7206:	4d13      	ldr	r5, [pc, #76]	; (d7254 <module_user_init_hook+0x54>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d7208:	2100      	movs	r1, #0
   d720a:	f7fd fdc7 	bl	d4d9c <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d720e:	6823      	ldr	r3, [r4, #0]
   d7210:	42ab      	cmp	r3, r5
   d7212:	4b11      	ldr	r3, [pc, #68]	; (d7258 <module_user_init_hook+0x58>)
   d7214:	bf0c      	ite	eq
   d7216:	2201      	moveq	r2, #1
   d7218:	2200      	movne	r2, #0
   d721a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d721c:	d002      	beq.n	d7224 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
   d721e:	f7ff ffbb 	bl	d7198 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d7222:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d7224:	f7fd fb86 	bl	d4934 <HAL_RNG_GetRandomNumber>
   d7228:	4604      	mov	r4, r0
    srand(seed);
   d722a:	f000 fad1 	bl	d77d0 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d722e:	4b0b      	ldr	r3, [pc, #44]	; (d725c <module_user_init_hook+0x5c>)
   d7230:	b113      	cbz	r3, d7238 <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
   d7232:	4620      	mov	r0, r4
   d7234:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d7238:	2100      	movs	r1, #0
   d723a:	4808      	ldr	r0, [pc, #32]	; (d725c <module_user_init_hook+0x5c>)
   d723c:	f7fd fd16 	bl	d4c6c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d7240:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d7244:	4806      	ldr	r0, [pc, #24]	; (d7260 <module_user_init_hook+0x60>)
   d7246:	2100      	movs	r1, #0
   d7248:	f7fd bcdc 	b.w	d4c04 <system_ctrl_set_app_request_handler>
   d724c:	2003f400 	.word	0x2003f400
   d7250:	000d7141 	.word	0x000d7141
   d7254:	9a271c1e 	.word	0x9a271c1e
   d7258:	2003e7c0 	.word	0x2003e7c0
   d725c:	00000000 	.word	0x00000000
   d7260:	000d71c9 	.word	0x000d71c9

000d7264 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d7264:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d7266:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d7268:	d902      	bls.n	d7270 <pinAvailable+0xc>
    return false;
   d726a:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d726c:	b002      	add	sp, #8
   d726e:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d7270:	f1a0 030b 	sub.w	r3, r0, #11
   d7274:	2b02      	cmp	r3, #2
   d7276:	d81a      	bhi.n	d72ae <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d7278:	4c17      	ldr	r4, [pc, #92]	; (d72d8 <pinAvailable+0x74>)
   d727a:	7821      	ldrb	r1, [r4, #0]
   d727c:	f3bf 8f5b 	dmb	ish
   d7280:	f011 0101 	ands.w	r1, r1, #1
   d7284:	d10b      	bne.n	d729e <pinAvailable+0x3a>
   d7286:	4620      	mov	r0, r4
   d7288:	9101      	str	r1, [sp, #4]
   d728a:	f7fc ff13 	bl	d40b4 <__cxa_guard_acquire>
   d728e:	9901      	ldr	r1, [sp, #4]
   d7290:	b128      	cbz	r0, d729e <pinAvailable+0x3a>
   d7292:	4812      	ldr	r0, [pc, #72]	; (d72dc <pinAvailable+0x78>)
   d7294:	f7ff fcd0 	bl	d6c38 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d7298:	4620      	mov	r0, r4
   d729a:	f7fc ff10 	bl	d40be <__cxa_guard_release>
   d729e:	4b0f      	ldr	r3, [pc, #60]	; (d72dc <pinAvailable+0x78>)
   d72a0:	7818      	ldrb	r0, [r3, #0]
   d72a2:	f7fd fbd7 	bl	d4a54 <hal_spi_is_enabled>
   d72a6:	2800      	cmp	r0, #0
   d72a8:	d1df      	bne.n	d726a <pinAvailable+0x6>
  return true; // 'pin' is available
   d72aa:	2001      	movs	r0, #1
   d72ac:	e7de      	b.n	d726c <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d72ae:	2801      	cmp	r0, #1
   d72b0:	d809      	bhi.n	d72c6 <pinAvailable+0x62>
   d72b2:	f000 f85d 	bl	d7370 <_Z19__fetch_global_Wirev>
   d72b6:	2100      	movs	r1, #0
   d72b8:	7c00      	ldrb	r0, [r0, #16]
   d72ba:	f7fd fb9b 	bl	d49f4 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d72be:	f080 0001 	eor.w	r0, r0, #1
   d72c2:	b2c0      	uxtb	r0, r0
   d72c4:	e7d2      	b.n	d726c <pinAvailable+0x8>
   d72c6:	3809      	subs	r0, #9
   d72c8:	2801      	cmp	r0, #1
   d72ca:	d8ee      	bhi.n	d72aa <pinAvailable+0x46>
   d72cc:	f7ff fe68 	bl	d6fa0 <_Z22__fetch_global_Serial1v>
   d72d0:	7c00      	ldrb	r0, [r0, #16]
   d72d2:	f7fd fbff 	bl	d4ad4 <hal_usart_is_enabled>
   d72d6:	e7f2      	b.n	d72be <pinAvailable+0x5a>
   d72d8:	2003e7c8 	.word	0x2003e7c8
   d72dc:	2003e7cc 	.word	0x2003e7cc

000d72e0 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d72e0:	b538      	push	{r3, r4, r5, lr}
   d72e2:	4604      	mov	r4, r0
   d72e4:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d72e6:	f7fd fb45 	bl	d4974 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d72ea:	28ff      	cmp	r0, #255	; 0xff
   d72ec:	d010      	beq.n	d7310 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   d72ee:	2806      	cmp	r0, #6
   d72f0:	d804      	bhi.n	d72fc <digitalWrite+0x1c>
   d72f2:	234d      	movs	r3, #77	; 0x4d
   d72f4:	fa23 f000 	lsr.w	r0, r3, r0
   d72f8:	07c3      	lsls	r3, r0, #31
   d72fa:	d409      	bmi.n	d7310 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d72fc:	4620      	mov	r0, r4
   d72fe:	f7ff ffb1 	bl	d7264 <pinAvailable>
   d7302:	b128      	cbz	r0, d7310 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d7304:	4629      	mov	r1, r5
   d7306:	4620      	mov	r0, r4
}
   d7308:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   d730c:	f7fd bb3a 	b.w	d4984 <HAL_GPIO_Write>
}
   d7310:	bd38      	pop	{r3, r4, r5, pc}

000d7312 <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d7312:	280d      	cmp	r0, #13
{
   d7314:	b510      	push	{r4, lr}
   d7316:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   d7318:	bf9c      	itt	ls
   d731a:	340e      	addls	r4, #14
   d731c:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d731e:	4620      	mov	r0, r4
   d7320:	f7ff ffa0 	bl	d7264 <pinAvailable>
   d7324:	b150      	cbz	r0, d733c <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d7326:	2103      	movs	r1, #3
   d7328:	4620      	mov	r0, r4
   d732a:	f7fd fb1b 	bl	d4964 <HAL_Validate_Pin_Function>
   d732e:	2803      	cmp	r0, #3
   d7330:	d104      	bne.n	d733c <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   d7332:	4620      	mov	r0, r4
}
   d7334:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   d7338:	f7fd bb2c 	b.w	d4994 <hal_adc_read>
}
   d733c:	2000      	movs	r0, #0
   d733e:	bd10      	pop	{r4, pc}

000d7340 <_Z17acquireWireBufferv>:
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
   d7340:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d7342:	2300      	movs	r3, #0
   d7344:	2520      	movs	r5, #32
   d7346:	8043      	strh	r3, [r0, #2]
   d7348:	2314      	movs	r3, #20
{
   d734a:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d734c:	8003      	strh	r3, [r0, #0]
   d734e:	6085      	str	r5, [r0, #8]
   d7350:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d7352:	4906      	ldr	r1, [pc, #24]	; (d736c <_Z17acquireWireBufferv+0x2c>)
   d7354:	4628      	mov	r0, r5
   d7356:	f000 f83c 	bl	d73d2 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d735a:	4904      	ldr	r1, [pc, #16]	; (d736c <_Z17acquireWireBufferv+0x2c>)
	};
   d735c:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d735e:	4628      	mov	r0, r5
   d7360:	f000 f837 	bl	d73d2 <_ZnajRKSt9nothrow_t>
	};
   d7364:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
   d7366:	4620      	mov	r0, r4
   d7368:	bd38      	pop	{r3, r4, r5, pc}
   d736a:	bf00      	nop
   d736c:	000d7e38 	.word	0x000d7e38

000d7370 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d7370:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d7372:	4d0f      	ldr	r5, [pc, #60]	; (d73b0 <_Z19__fetch_global_Wirev+0x40>)
   d7374:	7829      	ldrb	r1, [r5, #0]
   d7376:	f3bf 8f5b 	dmb	ish
   d737a:	f011 0401 	ands.w	r4, r1, #1
{
   d737e:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d7380:	d113      	bne.n	d73aa <_Z19__fetch_global_Wirev+0x3a>
   d7382:	4628      	mov	r0, r5
   d7384:	f7fc fe96 	bl	d40b4 <__cxa_guard_acquire>
   d7388:	b178      	cbz	r0, d73aa <_Z19__fetch_global_Wirev+0x3a>
   d738a:	a801      	add	r0, sp, #4
   d738c:	f7ff ffd8 	bl	d7340 <_Z17acquireWireBufferv>
   d7390:	aa01      	add	r2, sp, #4
   d7392:	4621      	mov	r1, r4
   d7394:	4807      	ldr	r0, [pc, #28]	; (d73b4 <_Z19__fetch_global_Wirev+0x44>)
   d7396:	f7fe f8e7 	bl	d5568 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d739a:	4628      	mov	r0, r5
   d739c:	f7fc fe8f 	bl	d40be <__cxa_guard_release>
   d73a0:	4a05      	ldr	r2, [pc, #20]	; (d73b8 <_Z19__fetch_global_Wirev+0x48>)
   d73a2:	4906      	ldr	r1, [pc, #24]	; (d73bc <_Z19__fetch_global_Wirev+0x4c>)
   d73a4:	4803      	ldr	r0, [pc, #12]	; (d73b4 <_Z19__fetch_global_Wirev+0x44>)
   d73a6:	f000 f80b 	bl	d73c0 <__aeabi_atexit>
	return wire;
}
   d73aa:	4802      	ldr	r0, [pc, #8]	; (d73b4 <_Z19__fetch_global_Wirev+0x44>)
   d73ac:	b007      	add	sp, #28
   d73ae:	bd30      	pop	{r4, r5, pc}
   d73b0:	2003e7d8 	.word	0x2003e7d8
   d73b4:	2003e7dc 	.word	0x2003e7dc
   d73b8:	2003e63c 	.word	0x2003e63c
   d73bc:	000d5511 	.word	0x000d5511

000d73c0 <__aeabi_atexit>:
   d73c0:	460b      	mov	r3, r1
   d73c2:	4601      	mov	r1, r0
   d73c4:	4618      	mov	r0, r3
   d73c6:	f000 b9c5 	b.w	d7754 <__cxa_atexit>

000d73ca <_ZdlPvj>:
   d73ca:	f7fc be66 	b.w	d409a <_ZdlPv>

000d73ce <_ZnwjRKSt9nothrow_t>:
   d73ce:	f7fc be60 	b.w	d4092 <_Znwj>

000d73d2 <_ZnajRKSt9nothrow_t>:
   d73d2:	f7fc be60 	b.w	d4096 <_Znaj>

000d73d6 <_ZSt25__throw_bad_function_callv>:
   d73d6:	b508      	push	{r3, lr}
   d73d8:	f7fd fcd0 	bl	d4d7c <abort>

000d73dc <__aeabi_drsub>:
   d73dc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d73e0:	e002      	b.n	d73e8 <__adddf3>
   d73e2:	bf00      	nop

000d73e4 <__aeabi_dsub>:
   d73e4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d73e8 <__adddf3>:
   d73e8:	b530      	push	{r4, r5, lr}
   d73ea:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d73ee:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d73f2:	ea94 0f05 	teq	r4, r5
   d73f6:	bf08      	it	eq
   d73f8:	ea90 0f02 	teqeq	r0, r2
   d73fc:	bf1f      	itttt	ne
   d73fe:	ea54 0c00 	orrsne.w	ip, r4, r0
   d7402:	ea55 0c02 	orrsne.w	ip, r5, r2
   d7406:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d740a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d740e:	f000 80e2 	beq.w	d75d6 <__adddf3+0x1ee>
   d7412:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d7416:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d741a:	bfb8      	it	lt
   d741c:	426d      	neglt	r5, r5
   d741e:	dd0c      	ble.n	d743a <__adddf3+0x52>
   d7420:	442c      	add	r4, r5
   d7422:	ea80 0202 	eor.w	r2, r0, r2
   d7426:	ea81 0303 	eor.w	r3, r1, r3
   d742a:	ea82 0000 	eor.w	r0, r2, r0
   d742e:	ea83 0101 	eor.w	r1, r3, r1
   d7432:	ea80 0202 	eor.w	r2, r0, r2
   d7436:	ea81 0303 	eor.w	r3, r1, r3
   d743a:	2d36      	cmp	r5, #54	; 0x36
   d743c:	bf88      	it	hi
   d743e:	bd30      	pophi	{r4, r5, pc}
   d7440:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d7444:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d7448:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d744c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d7450:	d002      	beq.n	d7458 <__adddf3+0x70>
   d7452:	4240      	negs	r0, r0
   d7454:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d7458:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d745c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d7460:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d7464:	d002      	beq.n	d746c <__adddf3+0x84>
   d7466:	4252      	negs	r2, r2
   d7468:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d746c:	ea94 0f05 	teq	r4, r5
   d7470:	f000 80a7 	beq.w	d75c2 <__adddf3+0x1da>
   d7474:	f1a4 0401 	sub.w	r4, r4, #1
   d7478:	f1d5 0e20 	rsbs	lr, r5, #32
   d747c:	db0d      	blt.n	d749a <__adddf3+0xb2>
   d747e:	fa02 fc0e 	lsl.w	ip, r2, lr
   d7482:	fa22 f205 	lsr.w	r2, r2, r5
   d7486:	1880      	adds	r0, r0, r2
   d7488:	f141 0100 	adc.w	r1, r1, #0
   d748c:	fa03 f20e 	lsl.w	r2, r3, lr
   d7490:	1880      	adds	r0, r0, r2
   d7492:	fa43 f305 	asr.w	r3, r3, r5
   d7496:	4159      	adcs	r1, r3
   d7498:	e00e      	b.n	d74b8 <__adddf3+0xd0>
   d749a:	f1a5 0520 	sub.w	r5, r5, #32
   d749e:	f10e 0e20 	add.w	lr, lr, #32
   d74a2:	2a01      	cmp	r2, #1
   d74a4:	fa03 fc0e 	lsl.w	ip, r3, lr
   d74a8:	bf28      	it	cs
   d74aa:	f04c 0c02 	orrcs.w	ip, ip, #2
   d74ae:	fa43 f305 	asr.w	r3, r3, r5
   d74b2:	18c0      	adds	r0, r0, r3
   d74b4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d74b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d74bc:	d507      	bpl.n	d74ce <__adddf3+0xe6>
   d74be:	f04f 0e00 	mov.w	lr, #0
   d74c2:	f1dc 0c00 	rsbs	ip, ip, #0
   d74c6:	eb7e 0000 	sbcs.w	r0, lr, r0
   d74ca:	eb6e 0101 	sbc.w	r1, lr, r1
   d74ce:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d74d2:	d31b      	bcc.n	d750c <__adddf3+0x124>
   d74d4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d74d8:	d30c      	bcc.n	d74f4 <__adddf3+0x10c>
   d74da:	0849      	lsrs	r1, r1, #1
   d74dc:	ea5f 0030 	movs.w	r0, r0, rrx
   d74e0:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d74e4:	f104 0401 	add.w	r4, r4, #1
   d74e8:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d74ec:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d74f0:	f080 809a 	bcs.w	d7628 <__adddf3+0x240>
   d74f4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d74f8:	bf08      	it	eq
   d74fa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d74fe:	f150 0000 	adcs.w	r0, r0, #0
   d7502:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d7506:	ea41 0105 	orr.w	r1, r1, r5
   d750a:	bd30      	pop	{r4, r5, pc}
   d750c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d7510:	4140      	adcs	r0, r0
   d7512:	eb41 0101 	adc.w	r1, r1, r1
   d7516:	3c01      	subs	r4, #1
   d7518:	bf28      	it	cs
   d751a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   d751e:	d2e9      	bcs.n	d74f4 <__adddf3+0x10c>
   d7520:	f091 0f00 	teq	r1, #0
   d7524:	bf04      	itt	eq
   d7526:	4601      	moveq	r1, r0
   d7528:	2000      	moveq	r0, #0
   d752a:	fab1 f381 	clz	r3, r1
   d752e:	bf08      	it	eq
   d7530:	3320      	addeq	r3, #32
   d7532:	f1a3 030b 	sub.w	r3, r3, #11
   d7536:	f1b3 0220 	subs.w	r2, r3, #32
   d753a:	da0c      	bge.n	d7556 <__adddf3+0x16e>
   d753c:	320c      	adds	r2, #12
   d753e:	dd08      	ble.n	d7552 <__adddf3+0x16a>
   d7540:	f102 0c14 	add.w	ip, r2, #20
   d7544:	f1c2 020c 	rsb	r2, r2, #12
   d7548:	fa01 f00c 	lsl.w	r0, r1, ip
   d754c:	fa21 f102 	lsr.w	r1, r1, r2
   d7550:	e00c      	b.n	d756c <__adddf3+0x184>
   d7552:	f102 0214 	add.w	r2, r2, #20
   d7556:	bfd8      	it	le
   d7558:	f1c2 0c20 	rsble	ip, r2, #32
   d755c:	fa01 f102 	lsl.w	r1, r1, r2
   d7560:	fa20 fc0c 	lsr.w	ip, r0, ip
   d7564:	bfdc      	itt	le
   d7566:	ea41 010c 	orrle.w	r1, r1, ip
   d756a:	4090      	lslle	r0, r2
   d756c:	1ae4      	subs	r4, r4, r3
   d756e:	bfa2      	ittt	ge
   d7570:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d7574:	4329      	orrge	r1, r5
   d7576:	bd30      	popge	{r4, r5, pc}
   d7578:	ea6f 0404 	mvn.w	r4, r4
   d757c:	3c1f      	subs	r4, #31
   d757e:	da1c      	bge.n	d75ba <__adddf3+0x1d2>
   d7580:	340c      	adds	r4, #12
   d7582:	dc0e      	bgt.n	d75a2 <__adddf3+0x1ba>
   d7584:	f104 0414 	add.w	r4, r4, #20
   d7588:	f1c4 0220 	rsb	r2, r4, #32
   d758c:	fa20 f004 	lsr.w	r0, r0, r4
   d7590:	fa01 f302 	lsl.w	r3, r1, r2
   d7594:	ea40 0003 	orr.w	r0, r0, r3
   d7598:	fa21 f304 	lsr.w	r3, r1, r4
   d759c:	ea45 0103 	orr.w	r1, r5, r3
   d75a0:	bd30      	pop	{r4, r5, pc}
   d75a2:	f1c4 040c 	rsb	r4, r4, #12
   d75a6:	f1c4 0220 	rsb	r2, r4, #32
   d75aa:	fa20 f002 	lsr.w	r0, r0, r2
   d75ae:	fa01 f304 	lsl.w	r3, r1, r4
   d75b2:	ea40 0003 	orr.w	r0, r0, r3
   d75b6:	4629      	mov	r1, r5
   d75b8:	bd30      	pop	{r4, r5, pc}
   d75ba:	fa21 f004 	lsr.w	r0, r1, r4
   d75be:	4629      	mov	r1, r5
   d75c0:	bd30      	pop	{r4, r5, pc}
   d75c2:	f094 0f00 	teq	r4, #0
   d75c6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d75ca:	bf06      	itte	eq
   d75cc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d75d0:	3401      	addeq	r4, #1
   d75d2:	3d01      	subne	r5, #1
   d75d4:	e74e      	b.n	d7474 <__adddf3+0x8c>
   d75d6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d75da:	bf18      	it	ne
   d75dc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d75e0:	d029      	beq.n	d7636 <__adddf3+0x24e>
   d75e2:	ea94 0f05 	teq	r4, r5
   d75e6:	bf08      	it	eq
   d75e8:	ea90 0f02 	teqeq	r0, r2
   d75ec:	d005      	beq.n	d75fa <__adddf3+0x212>
   d75ee:	ea54 0c00 	orrs.w	ip, r4, r0
   d75f2:	bf04      	itt	eq
   d75f4:	4619      	moveq	r1, r3
   d75f6:	4610      	moveq	r0, r2
   d75f8:	bd30      	pop	{r4, r5, pc}
   d75fa:	ea91 0f03 	teq	r1, r3
   d75fe:	bf1e      	ittt	ne
   d7600:	2100      	movne	r1, #0
   d7602:	2000      	movne	r0, #0
   d7604:	bd30      	popne	{r4, r5, pc}
   d7606:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d760a:	d105      	bne.n	d7618 <__adddf3+0x230>
   d760c:	0040      	lsls	r0, r0, #1
   d760e:	4149      	adcs	r1, r1
   d7610:	bf28      	it	cs
   d7612:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d7616:	bd30      	pop	{r4, r5, pc}
   d7618:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d761c:	bf3c      	itt	cc
   d761e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d7622:	bd30      	popcc	{r4, r5, pc}
   d7624:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d7628:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d762c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d7630:	f04f 0000 	mov.w	r0, #0
   d7634:	bd30      	pop	{r4, r5, pc}
   d7636:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d763a:	bf1a      	itte	ne
   d763c:	4619      	movne	r1, r3
   d763e:	4610      	movne	r0, r2
   d7640:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d7644:	bf1c      	itt	ne
   d7646:	460b      	movne	r3, r1
   d7648:	4602      	movne	r2, r0
   d764a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d764e:	bf06      	itte	eq
   d7650:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d7654:	ea91 0f03 	teqeq	r1, r3
   d7658:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d765c:	bd30      	pop	{r4, r5, pc}
   d765e:	bf00      	nop

000d7660 <__aeabi_ui2d>:
   d7660:	f090 0f00 	teq	r0, #0
   d7664:	bf04      	itt	eq
   d7666:	2100      	moveq	r1, #0
   d7668:	4770      	bxeq	lr
   d766a:	b530      	push	{r4, r5, lr}
   d766c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d7670:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d7674:	f04f 0500 	mov.w	r5, #0
   d7678:	f04f 0100 	mov.w	r1, #0
   d767c:	e750      	b.n	d7520 <__adddf3+0x138>
   d767e:	bf00      	nop

000d7680 <__aeabi_i2d>:
   d7680:	f090 0f00 	teq	r0, #0
   d7684:	bf04      	itt	eq
   d7686:	2100      	moveq	r1, #0
   d7688:	4770      	bxeq	lr
   d768a:	b530      	push	{r4, r5, lr}
   d768c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d7690:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d7694:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d7698:	bf48      	it	mi
   d769a:	4240      	negmi	r0, r0
   d769c:	f04f 0100 	mov.w	r1, #0
   d76a0:	e73e      	b.n	d7520 <__adddf3+0x138>
   d76a2:	bf00      	nop

000d76a4 <__aeabi_f2d>:
   d76a4:	0042      	lsls	r2, r0, #1
   d76a6:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d76aa:	ea4f 0131 	mov.w	r1, r1, rrx
   d76ae:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d76b2:	bf1f      	itttt	ne
   d76b4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d76b8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d76bc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d76c0:	4770      	bxne	lr
   d76c2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   d76c6:	bf08      	it	eq
   d76c8:	4770      	bxeq	lr
   d76ca:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   d76ce:	bf04      	itt	eq
   d76d0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   d76d4:	4770      	bxeq	lr
   d76d6:	b530      	push	{r4, r5, lr}
   d76d8:	f44f 7460 	mov.w	r4, #896	; 0x380
   d76dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d76e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d76e4:	e71c      	b.n	d7520 <__adddf3+0x138>
   d76e6:	bf00      	nop

000d76e8 <__aeabi_ul2d>:
   d76e8:	ea50 0201 	orrs.w	r2, r0, r1
   d76ec:	bf08      	it	eq
   d76ee:	4770      	bxeq	lr
   d76f0:	b530      	push	{r4, r5, lr}
   d76f2:	f04f 0500 	mov.w	r5, #0
   d76f6:	e00a      	b.n	d770e <__aeabi_l2d+0x16>

000d76f8 <__aeabi_l2d>:
   d76f8:	ea50 0201 	orrs.w	r2, r0, r1
   d76fc:	bf08      	it	eq
   d76fe:	4770      	bxeq	lr
   d7700:	b530      	push	{r4, r5, lr}
   d7702:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d7706:	d502      	bpl.n	d770e <__aeabi_l2d+0x16>
   d7708:	4240      	negs	r0, r0
   d770a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d770e:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d7712:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d7716:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d771a:	f43f aed8 	beq.w	d74ce <__adddf3+0xe6>
   d771e:	f04f 0203 	mov.w	r2, #3
   d7722:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d7726:	bf18      	it	ne
   d7728:	3203      	addne	r2, #3
   d772a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d772e:	bf18      	it	ne
   d7730:	3203      	addne	r2, #3
   d7732:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d7736:	f1c2 0320 	rsb	r3, r2, #32
   d773a:	fa00 fc03 	lsl.w	ip, r0, r3
   d773e:	fa20 f002 	lsr.w	r0, r0, r2
   d7742:	fa01 fe03 	lsl.w	lr, r1, r3
   d7746:	ea40 000e 	orr.w	r0, r0, lr
   d774a:	fa21 f102 	lsr.w	r1, r1, r2
   d774e:	4414      	add	r4, r2
   d7750:	e6bd      	b.n	d74ce <__adddf3+0xe6>
   d7752:	bf00      	nop

000d7754 <__cxa_atexit>:
   d7754:	b510      	push	{r4, lr}
   d7756:	4c05      	ldr	r4, [pc, #20]	; (d776c <__cxa_atexit+0x18>)
   d7758:	4613      	mov	r3, r2
   d775a:	b12c      	cbz	r4, d7768 <__cxa_atexit+0x14>
   d775c:	460a      	mov	r2, r1
   d775e:	4601      	mov	r1, r0
   d7760:	2002      	movs	r0, #2
   d7762:	f3af 8000 	nop.w
   d7766:	bd10      	pop	{r4, pc}
   d7768:	4620      	mov	r0, r4
   d776a:	e7fc      	b.n	d7766 <__cxa_atexit+0x12>
   d776c:	00000000 	.word	0x00000000

000d7770 <memcpy>:
   d7770:	440a      	add	r2, r1
   d7772:	4291      	cmp	r1, r2
   d7774:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   d7778:	d100      	bne.n	d777c <memcpy+0xc>
   d777a:	4770      	bx	lr
   d777c:	b510      	push	{r4, lr}
   d777e:	f811 4b01 	ldrb.w	r4, [r1], #1
   d7782:	f803 4f01 	strb.w	r4, [r3, #1]!
   d7786:	4291      	cmp	r1, r2
   d7788:	d1f9      	bne.n	d777e <memcpy+0xe>
   d778a:	bd10      	pop	{r4, pc}

000d778c <memmove>:
   d778c:	4288      	cmp	r0, r1
   d778e:	b510      	push	{r4, lr}
   d7790:	eb01 0402 	add.w	r4, r1, r2
   d7794:	d902      	bls.n	d779c <memmove+0x10>
   d7796:	4284      	cmp	r4, r0
   d7798:	4623      	mov	r3, r4
   d779a:	d807      	bhi.n	d77ac <memmove+0x20>
   d779c:	1e43      	subs	r3, r0, #1
   d779e:	42a1      	cmp	r1, r4
   d77a0:	d008      	beq.n	d77b4 <memmove+0x28>
   d77a2:	f811 2b01 	ldrb.w	r2, [r1], #1
   d77a6:	f803 2f01 	strb.w	r2, [r3, #1]!
   d77aa:	e7f8      	b.n	d779e <memmove+0x12>
   d77ac:	4402      	add	r2, r0
   d77ae:	4601      	mov	r1, r0
   d77b0:	428a      	cmp	r2, r1
   d77b2:	d100      	bne.n	d77b6 <memmove+0x2a>
   d77b4:	bd10      	pop	{r4, pc}
   d77b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   d77ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
   d77be:	e7f7      	b.n	d77b0 <memmove+0x24>

000d77c0 <memset>:
   d77c0:	4402      	add	r2, r0
   d77c2:	4603      	mov	r3, r0
   d77c4:	4293      	cmp	r3, r2
   d77c6:	d100      	bne.n	d77ca <memset+0xa>
   d77c8:	4770      	bx	lr
   d77ca:	f803 1b01 	strb.w	r1, [r3], #1
   d77ce:	e7f9      	b.n	d77c4 <memset+0x4>

000d77d0 <srand>:
   d77d0:	b538      	push	{r3, r4, r5, lr}
   d77d2:	4b0d      	ldr	r3, [pc, #52]	; (d7808 <srand+0x38>)
   d77d4:	681d      	ldr	r5, [r3, #0]
   d77d6:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d77d8:	4604      	mov	r4, r0
   d77da:	b97b      	cbnz	r3, d77fc <srand+0x2c>
   d77dc:	2018      	movs	r0, #24
   d77de:	f7fd faad 	bl	d4d3c <malloc>
   d77e2:	4a0a      	ldr	r2, [pc, #40]	; (d780c <srand+0x3c>)
   d77e4:	4b0a      	ldr	r3, [pc, #40]	; (d7810 <srand+0x40>)
   d77e6:	63a8      	str	r0, [r5, #56]	; 0x38
   d77e8:	e9c0 2300 	strd	r2, r3, [r0]
   d77ec:	4b09      	ldr	r3, [pc, #36]	; (d7814 <srand+0x44>)
   d77ee:	6083      	str	r3, [r0, #8]
   d77f0:	230b      	movs	r3, #11
   d77f2:	8183      	strh	r3, [r0, #12]
   d77f4:	2201      	movs	r2, #1
   d77f6:	2300      	movs	r3, #0
   d77f8:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d77fc:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d77fe:	2200      	movs	r2, #0
   d7800:	611c      	str	r4, [r3, #16]
   d7802:	615a      	str	r2, [r3, #20]
   d7804:	bd38      	pop	{r3, r4, r5, pc}
   d7806:	bf00      	nop
   d7808:	2003e5d8 	.word	0x2003e5d8
   d780c:	abcd330e 	.word	0xabcd330e
   d7810:	e66d1234 	.word	0xe66d1234
   d7814:	0005deec 	.word	0x0005deec

000d7818 <strchr>:
   d7818:	b2c9      	uxtb	r1, r1
   d781a:	4603      	mov	r3, r0
   d781c:	f810 2b01 	ldrb.w	r2, [r0], #1
   d7820:	b11a      	cbz	r2, d782a <strchr+0x12>
   d7822:	428a      	cmp	r2, r1
   d7824:	d1f9      	bne.n	d781a <strchr+0x2>
   d7826:	4618      	mov	r0, r3
   d7828:	4770      	bx	lr
   d782a:	2900      	cmp	r1, #0
   d782c:	bf18      	it	ne
   d782e:	2300      	movne	r3, #0
   d7830:	e7f9      	b.n	d7826 <strchr+0xe>

000d7832 <strchrnul>:
   d7832:	b510      	push	{r4, lr}
   d7834:	4604      	mov	r4, r0
   d7836:	f7ff ffef 	bl	d7818 <strchr>
   d783a:	b918      	cbnz	r0, d7844 <strchrnul+0x12>
   d783c:	4620      	mov	r0, r4
   d783e:	f000 f832 	bl	d78a6 <strlen>
   d7842:	4420      	add	r0, r4
   d7844:	bd10      	pop	{r4, pc}

000d7846 <strcmp>:
   d7846:	f810 2b01 	ldrb.w	r2, [r0], #1
   d784a:	f811 3b01 	ldrb.w	r3, [r1], #1
   d784e:	2a01      	cmp	r2, #1
   d7850:	bf28      	it	cs
   d7852:	429a      	cmpcs	r2, r3
   d7854:	d0f7      	beq.n	d7846 <strcmp>
   d7856:	1ad0      	subs	r0, r2, r3
   d7858:	4770      	bx	lr

000d785a <strcpy>:
   d785a:	4603      	mov	r3, r0
   d785c:	f811 2b01 	ldrb.w	r2, [r1], #1
   d7860:	f803 2b01 	strb.w	r2, [r3], #1
   d7864:	2a00      	cmp	r2, #0
   d7866:	d1f9      	bne.n	d785c <strcpy+0x2>
   d7868:	4770      	bx	lr
	...

000d786c <strdup>:
   d786c:	4b02      	ldr	r3, [pc, #8]	; (d7878 <strdup+0xc>)
   d786e:	4601      	mov	r1, r0
   d7870:	6818      	ldr	r0, [r3, #0]
   d7872:	f000 b803 	b.w	d787c <_strdup_r>
   d7876:	bf00      	nop
   d7878:	2003e5d8 	.word	0x2003e5d8

000d787c <_strdup_r>:
   d787c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d787e:	4604      	mov	r4, r0
   d7880:	4608      	mov	r0, r1
   d7882:	460d      	mov	r5, r1
   d7884:	f000 f80f 	bl	d78a6 <strlen>
   d7888:	1c42      	adds	r2, r0, #1
   d788a:	4611      	mov	r1, r2
   d788c:	4620      	mov	r0, r4
   d788e:	9201      	str	r2, [sp, #4]
   d7890:	f7fd fa7c 	bl	d4d8c <_malloc_r>
   d7894:	4604      	mov	r4, r0
   d7896:	b118      	cbz	r0, d78a0 <_strdup_r+0x24>
   d7898:	9a01      	ldr	r2, [sp, #4]
   d789a:	4629      	mov	r1, r5
   d789c:	f7ff ff68 	bl	d7770 <memcpy>
   d78a0:	4620      	mov	r0, r4
   d78a2:	b003      	add	sp, #12
   d78a4:	bd30      	pop	{r4, r5, pc}

000d78a6 <strlen>:
   d78a6:	4603      	mov	r3, r0
   d78a8:	f813 2b01 	ldrb.w	r2, [r3], #1
   d78ac:	2a00      	cmp	r2, #0
   d78ae:	d1fb      	bne.n	d78a8 <strlen+0x2>
   d78b0:	1a18      	subs	r0, r3, r0
   d78b2:	3801      	subs	r0, #1
   d78b4:	4770      	bx	lr

000d78b6 <strncmp>:
   d78b6:	b510      	push	{r4, lr}
   d78b8:	b16a      	cbz	r2, d78d6 <strncmp+0x20>
   d78ba:	3901      	subs	r1, #1
   d78bc:	1884      	adds	r4, r0, r2
   d78be:	f810 3b01 	ldrb.w	r3, [r0], #1
   d78c2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   d78c6:	4293      	cmp	r3, r2
   d78c8:	d103      	bne.n	d78d2 <strncmp+0x1c>
   d78ca:	42a0      	cmp	r0, r4
   d78cc:	d001      	beq.n	d78d2 <strncmp+0x1c>
   d78ce:	2b00      	cmp	r3, #0
   d78d0:	d1f5      	bne.n	d78be <strncmp+0x8>
   d78d2:	1a98      	subs	r0, r3, r2
   d78d4:	bd10      	pop	{r4, pc}
   d78d6:	4610      	mov	r0, r2
   d78d8:	e7fc      	b.n	d78d4 <strncmp+0x1e>

000d78da <strrchr>:
   d78da:	b538      	push	{r3, r4, r5, lr}
   d78dc:	4603      	mov	r3, r0
   d78de:	460c      	mov	r4, r1
   d78e0:	b969      	cbnz	r1, d78fe <strrchr+0x24>
   d78e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d78e6:	f7ff bf97 	b.w	d7818 <strchr>
   d78ea:	1c43      	adds	r3, r0, #1
   d78ec:	4605      	mov	r5, r0
   d78ee:	4621      	mov	r1, r4
   d78f0:	4618      	mov	r0, r3
   d78f2:	f7ff ff91 	bl	d7818 <strchr>
   d78f6:	2800      	cmp	r0, #0
   d78f8:	d1f7      	bne.n	d78ea <strrchr+0x10>
   d78fa:	4628      	mov	r0, r5
   d78fc:	bd38      	pop	{r3, r4, r5, pc}
   d78fe:	2500      	movs	r5, #0
   d7900:	e7f5      	b.n	d78ee <strrchr+0x14>
	...

000d7904 <_strtol_l.isra.0>:
   d7904:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d7908:	4e3a      	ldr	r6, [pc, #232]	; (d79f4 <_strtol_l.isra.0+0xf0>)
   d790a:	4686      	mov	lr, r0
   d790c:	468c      	mov	ip, r1
   d790e:	4660      	mov	r0, ip
   d7910:	f81c 4b01 	ldrb.w	r4, [ip], #1
   d7914:	5da5      	ldrb	r5, [r4, r6]
   d7916:	f015 0508 	ands.w	r5, r5, #8
   d791a:	d1f8      	bne.n	d790e <_strtol_l.isra.0+0xa>
   d791c:	2c2d      	cmp	r4, #45	; 0x2d
   d791e:	d133      	bne.n	d7988 <_strtol_l.isra.0+0x84>
   d7920:	f89c 4000 	ldrb.w	r4, [ip]
   d7924:	f04f 0801 	mov.w	r8, #1
   d7928:	f100 0c02 	add.w	ip, r0, #2
   d792c:	2b00      	cmp	r3, #0
   d792e:	d05c      	beq.n	d79ea <_strtol_l.isra.0+0xe6>
   d7930:	2b10      	cmp	r3, #16
   d7932:	d10c      	bne.n	d794e <_strtol_l.isra.0+0x4a>
   d7934:	2c30      	cmp	r4, #48	; 0x30
   d7936:	d10a      	bne.n	d794e <_strtol_l.isra.0+0x4a>
   d7938:	f89c 0000 	ldrb.w	r0, [ip]
   d793c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d7940:	2858      	cmp	r0, #88	; 0x58
   d7942:	d14d      	bne.n	d79e0 <_strtol_l.isra.0+0xdc>
   d7944:	f89c 4001 	ldrb.w	r4, [ip, #1]
   d7948:	2310      	movs	r3, #16
   d794a:	f10c 0c02 	add.w	ip, ip, #2
   d794e:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
   d7952:	3f01      	subs	r7, #1
   d7954:	2600      	movs	r6, #0
   d7956:	fbb7 f9f3 	udiv	r9, r7, r3
   d795a:	4630      	mov	r0, r6
   d795c:	fb03 7a19 	mls	sl, r3, r9, r7
   d7960:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
   d7964:	2d09      	cmp	r5, #9
   d7966:	d818      	bhi.n	d799a <_strtol_l.isra.0+0x96>
   d7968:	462c      	mov	r4, r5
   d796a:	42a3      	cmp	r3, r4
   d796c:	dd24      	ble.n	d79b8 <_strtol_l.isra.0+0xb4>
   d796e:	1c75      	adds	r5, r6, #1
   d7970:	d007      	beq.n	d7982 <_strtol_l.isra.0+0x7e>
   d7972:	4581      	cmp	r9, r0
   d7974:	d31d      	bcc.n	d79b2 <_strtol_l.isra.0+0xae>
   d7976:	d101      	bne.n	d797c <_strtol_l.isra.0+0x78>
   d7978:	45a2      	cmp	sl, r4
   d797a:	db1a      	blt.n	d79b2 <_strtol_l.isra.0+0xae>
   d797c:	fb00 4003 	mla	r0, r0, r3, r4
   d7980:	2601      	movs	r6, #1
   d7982:	f81c 4b01 	ldrb.w	r4, [ip], #1
   d7986:	e7eb      	b.n	d7960 <_strtol_l.isra.0+0x5c>
   d7988:	2c2b      	cmp	r4, #43	; 0x2b
   d798a:	bf08      	it	eq
   d798c:	f89c 4000 	ldrbeq.w	r4, [ip]
   d7990:	46a8      	mov	r8, r5
   d7992:	bf08      	it	eq
   d7994:	f100 0c02 	addeq.w	ip, r0, #2
   d7998:	e7c8      	b.n	d792c <_strtol_l.isra.0+0x28>
   d799a:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
   d799e:	2d19      	cmp	r5, #25
   d79a0:	d801      	bhi.n	d79a6 <_strtol_l.isra.0+0xa2>
   d79a2:	3c37      	subs	r4, #55	; 0x37
   d79a4:	e7e1      	b.n	d796a <_strtol_l.isra.0+0x66>
   d79a6:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
   d79aa:	2d19      	cmp	r5, #25
   d79ac:	d804      	bhi.n	d79b8 <_strtol_l.isra.0+0xb4>
   d79ae:	3c57      	subs	r4, #87	; 0x57
   d79b0:	e7db      	b.n	d796a <_strtol_l.isra.0+0x66>
   d79b2:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   d79b6:	e7e4      	b.n	d7982 <_strtol_l.isra.0+0x7e>
   d79b8:	1c73      	adds	r3, r6, #1
   d79ba:	d106      	bne.n	d79ca <_strtol_l.isra.0+0xc6>
   d79bc:	2322      	movs	r3, #34	; 0x22
   d79be:	f8ce 3000 	str.w	r3, [lr]
   d79c2:	4638      	mov	r0, r7
   d79c4:	b942      	cbnz	r2, d79d8 <_strtol_l.isra.0+0xd4>
   d79c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d79ca:	f1b8 0f00 	cmp.w	r8, #0
   d79ce:	d000      	beq.n	d79d2 <_strtol_l.isra.0+0xce>
   d79d0:	4240      	negs	r0, r0
   d79d2:	2a00      	cmp	r2, #0
   d79d4:	d0f7      	beq.n	d79c6 <_strtol_l.isra.0+0xc2>
   d79d6:	b10e      	cbz	r6, d79dc <_strtol_l.isra.0+0xd8>
   d79d8:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
   d79dc:	6011      	str	r1, [r2, #0]
   d79de:	e7f2      	b.n	d79c6 <_strtol_l.isra.0+0xc2>
   d79e0:	2430      	movs	r4, #48	; 0x30
   d79e2:	2b00      	cmp	r3, #0
   d79e4:	d1b3      	bne.n	d794e <_strtol_l.isra.0+0x4a>
   d79e6:	2308      	movs	r3, #8
   d79e8:	e7b1      	b.n	d794e <_strtol_l.isra.0+0x4a>
   d79ea:	2c30      	cmp	r4, #48	; 0x30
   d79ec:	d0a4      	beq.n	d7938 <_strtol_l.isra.0+0x34>
   d79ee:	230a      	movs	r3, #10
   d79f0:	e7ad      	b.n	d794e <_strtol_l.isra.0+0x4a>
   d79f2:	bf00      	nop
   d79f4:	000d7e3a 	.word	0x000d7e3a

000d79f8 <strtol>:
   d79f8:	4613      	mov	r3, r2
   d79fa:	460a      	mov	r2, r1
   d79fc:	4601      	mov	r1, r0
   d79fe:	4802      	ldr	r0, [pc, #8]	; (d7a08 <strtol+0x10>)
   d7a00:	6800      	ldr	r0, [r0, #0]
   d7a02:	f7ff bf7f 	b.w	d7904 <_strtol_l.isra.0>
   d7a06:	bf00      	nop
   d7a08:	2003e5d8 	.word	0x2003e5d8

000d7a0c <dynalib_user>:
   d7a0c:	000d401d 000d4059 000d4081 000d4085     .@..Y@...@...@..
   d7a1c:	00000000 54524150 454c4349 52415000     ....PARTICLE.PAR
   d7a2c:	4c434954 4f432045 43454e4e 00444554     TICLE CONNECTED.
   d7a3c:	54524150 454c4349 49414620 2044454c     PARTICLE FAILED 
   d7a4c:	43204f54 454e4e4f 53005443 4c504d41     TO CONNECT.SAMPL
   d7a5c:	5f474e49 54494157 4154535f 53004554     ING_WAIT_STATE.S
   d7a6c:	54524154 4d415320 4e494c50 55500047     TART SAMPLING.PU
   d7a7c:	53494c42 41575f48 535f5449 45544154     BLISH_WAIT_STATE
   d7a8c:	41545300 50205452 494c4255 535f4853     .START PUBLISH_S
   d7a9c:	45544154 72614700 2d6e6564 7964614c     TATE.Garden-Lady
   d7aac:	6775422d 2d34302d 00706143 6f556336     -Bug-04-Cap.6cUo
   d7abc:	7358716e 6668634c 3574386e 73553646     nqXsLchfn8t5F6Us
   d7acc:	46787255 45713835 22207b00 756c6176     UrxF58qE.{ "valu
   d7adc:	203a2265 2e250022 22006632 6622202c     e": ".%.2f.", "f
   d7aec:	49646565 203a2244 7d220022 72614700     eedID": "."}.Gar
   d7afc:	2d6e6564 7964614c 6775422d 2d34302d     den-Lady-Bug-04-
   d7b0c:	2d706143 63726550 61746e65 6e006567     Cap-Percentage.n
   d7b1c:	63706538 46437350 3962736b 74595755     8epcPsCFksb9UWYt
   d7b2c:	6f745867 6a4b3465 00766b68 53006425     gXtoe4Kjhkv.%d.S
   d7b3c:	54524154 454c5320 575f5045 5f544941     TART SLEEP_WAIT_
   d7b4c:	54415453 4f470045 20474e49 53204f54     STATE.GOING TO S
   d7b5c:	5045454c 454c5300 535f5045 45544154     LEEP.SLEEP_STATE
   d7b6c:	4b415700 50552045 54455300 53005055     .WAKE UP.SETUP.S
   d7b7c:	50555445 4d4f4320 54454c50 00300045     ETUP COMPLETE.0.

000d7b8c <_ZTVN5spark10LogHandlerE>:
	...
   d7b9c:	000d40a1 000d40c5                       .@...@..

000d7ba4 <_ZTVN5spark16SerialLogHandlerE>:
	...
   d7bac:	000d40d1 000d4105 000d6681 000d40c7     .@...A...f...@..

000d7bbc <_ZTVN5spark13CellularClassE>:
	...
   d7bc4:	000d4f23 000d4f19 000d4f0f 000d4ec5     #O...O...O...N..
   d7bd4:	000d4f03 000d4ef7 000d69d9 000d69e1     .O...N...i...i..
   d7be4:	000d4eeb 000d4ee3 000d4ed9 000d4ecf     .N...N...N...N..
   d7bf4:	000d6a11                                .j..

000d7bf8 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d7c00:	000d4f5d 000d4f63 000d4fa1 000d4f71     ]O..cO...O..qO..
   d7c10:	000d4f5f                                _O..

000d7c14 <_ZTVN5spark13EthernetClassE>:
	...
   d7c1c:	000d54f3 000d54e9 000d54df 000d54d5     .T...T...T...T..
   d7c2c:	000d54c9 000d54bd 000d69d9 000d69e1     .T...T...i...i..
   d7c3c:	000d54b1 000d54a9 000d549f 000d5495     .T...T...T...T..
   d7c4c:	000d6a11                                .j..

000d7c50 <_ZTV7TwoWire>:
	...
   d7c58:	000d5511 000d555b 000d5533 000d5513     .U..[U..3U...U..
   d7c68:	000d553b 000d5543 000d554b 000d5553     ;U..CU..KU..SU..

000d7c78 <_ZTV9IPAddress>:
	...
   d7c80:	000d559d 000d558d 000d558f 75007525     .U...U...U..%u.u
   d7c90:	78343025 75616200 65530064 6c616972     %04x.baud.Serial
   d7ca0:	72655300 316c6169 4f534a00 7274534e     .Serial1.JSONStr
   d7cb0:	4c6d6165 6148676f 656c646e 70610072     eamLogHandler.ap
   d7cc0:	30250070 20753031 00205d00 2800202c     p.%010u .] ., .(
   d7cd0:	00203a29 63005b20 2065646f 2500203d     ): . [.code = .%
   d7ce0:	65640069 6c696174 203d2073 000a0d00     i.details = ....
   d7cf0:	0063006d 66006e6c 0074006e 65646f63     m.c.ln.fn.t.code
   d7d00:	74656400 006c6961                       .detail.

000d7d08 <_ZTVN5spark16JSONStreamWriterE>:
	...
   d7d10:	000d5a63 000d5a89 000d5a49 000d56a7     cZ...Z..IZ...V..

000d7d20 <_ZTVN5spark16StreamLogHandlerE>:
	...
   d7d28:	000d5ea9 000d5ec1 000d6681 000d40c7     .^...^...f...@..

000d7d38 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   d7d40:	000d5ed5 000d5ee9 000d6825 000d5a51     .^...^..%h..QZ..

000d7d50 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   d7d58:	000d5a61 000d5a97 000d65bd 000d5a53     aZ...Z...e..SZ..

000d7d68 <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   d7d70:	000d5a5f 000d5aa5 000d5e15 000d5ac1     _Z...Z...^...Z..

000d7d80 <_ZTVN5spark12NetworkClassE>:
	...
   d7d88:	000d6999 000d69a3 000d69ad 000d69b7     .i...i...i...i..
   d7d98:	000d69c1 000d69cd 000d69d9 000d69e1     .i...i...i...i..
   d7da8:	000d69e9 000d69f5 000d69fd 000d6a07     .i...i...i...j..
   d7db8:	000d6a11 252d5925 64252d6d 3a482554     .j..%Y-%m-%dT%H:
   d7dc8:	253a4d25 007a2553 74637361 00656d69     %M:%S%z.asctime.

000d7dd8 <_ZTV11USARTSerial>:
	...
   d7de0:	000d6ee5 000d6f51 000d6f29 000d6b05     .n..Qo..)o...k..
   d7df0:	000d6ef9 000d6f15 000d6f07 000d6f23     .n...o...o..#o..
   d7e00:	000d6ee7 000d6eeb                       .n...n..

000d7e08 <_ZTV9USBSerial>:
	...
   d7e10:	000d702d 000d7095 000d706b 000d6b05     -p...p..kp...k..
   d7e20:	000d705d 000d702f 000d703f 000d708f     ]p../p..?p...p..
   d7e30:	000d704f 000d7029                       Op..)p..

000d7e38 <_ZSt7nothrow>:
	...

000d7e39 <_ctype_>:
   d7e39:	20202000 20202020 28282020 20282828     .         ((((( 
   d7e49:	20202020 20202020 20202020 20202020                     
   d7e59:	10108820 10101010 10101010 10101010      ...............
   d7e69:	04040410 04040404 10040404 10101010     ................
   d7e79:	41411010 41414141 01010101 01010101     ..AAAAAA........
   d7e89:	01010101 01010101 01010101 10101010     ................
   d7e99:	42421010 42424242 02020202 02020202     ..BBBBBB........
   d7ea9:	02020202 02020202 02020202 10101010     ................
   d7eb9:	00000020 00000000 00000000 00000000      ...............
	...

000d7f3a <link_const_variable_data_end>:
	...

000d7f3c <link_constructors_location>:
   d7f3c:	000d47a5 	.word	0x000d47a5
   d7f40:	000d4e9d 	.word	0x000d4e9d
   d7f44:	000d4f2d 	.word	0x000d4f2d
   d7f48:	000d54fd 	.word	0x000d54fd
   d7f4c:	000d6671 	.word	0x000d6671
   d7f50:	000d6af1 	.word	0x000d6af1
   d7f54:	000d6c1d 	.word	0x000d6c1d
   d7f58:	000d6e95 	.word	0x000d6e95
   d7f5c:	000d6ed1 	.word	0x000d6ed1
